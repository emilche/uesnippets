[
  {
    "label": "IMkvReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMkvReader"
  },
  {
    "label": "EBMLHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EBMLHeader"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "Track",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Track"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cluster"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block"
  },
  {
    "label": "Lacing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Lacing"
  },
  {
    "label": "Frame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Frame"
  },
  {
    "label": "BlockEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEntry"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "SimpleBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleBlock"
  },
  {
    "label": "BlockGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockGroup"
  },
  {
    "label": "ContentEncoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentEncoding"
  },
  {
    "label": "ContentCompression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentCompression"
  },
  {
    "label": "ContentEncAESSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentEncAESSettings"
  },
  {
    "label": "ContentEncryption",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentEncryption"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Info"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Settings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Settings"
  },
  {
    "label": "EOSBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EOSBlock"
  },
  {
    "label": "PrimaryChromaticity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrimaryChromaticity"
  },
  {
    "label": "MasteringMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MasteringMetadata"
  },
  {
    "label": "Colour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Colour"
  },
  {
    "label": "Projection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Projection"
  },
  {
    "label": "ProjectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProjectionType"
  },
  {
    "label": "VideoTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrack"
  },
  {
    "label": "AudioTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTrack"
  },
  {
    "label": "Tracks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tracks"
  },
  {
    "label": "Chapters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapters"
  },
  {
    "label": "Atom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Atom"
  },
  {
    "label": "Edition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edition"
  },
  {
    "label": "Display",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Display"
  },
  {
    "label": "Tags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tags"
  },
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tag"
  },
  {
    "label": "SimpleTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTag"
  },
  {
    "label": "SegmentInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SegmentInfo"
  },
  {
    "label": "SeekHead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeekHead"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "VoidElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoidElement"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "CuePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CuePoint"
  },
  {
    "label": "TrackPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrackPosition"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (# ifndef MKVPARSER_MKVPARSER_H_ # define MKVPARSER_MKVPARSER_H_ # include<cstddef> namespace mkvparser { const int E_PARSE_FAILED = - 1 ; const int E_FILE_FORMAT_INVALID = - 2 ; const int E_BUFFER_NOT_FULL = - 3 ; class IMkvReader { public : int)",
    "insertText": "Read(long long pos, long len, unsigned char* buf)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Length(long long* total, long long* available)"
  },
  {
    "label": "IMkvReader()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "IMkvReader()"
  },
  {
    "label": "SafeArrayAlloc()",
    "kind": "Method",
    "detail": "Function (} } ; template<Type> Type*)",
    "insertText": "SafeArrayAlloc(unsigned long long num_elements, unsigned long long element_size)"
  },
  {
    "label": "GetUIntLength()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetUIntLength(IMkvReader*, long long, long&)"
  },
  {
    "label": "ReadUInt()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "ReadUInt(IMkvReader*, long long, long&)"
  },
  {
    "label": "ReadID()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "ReadID(IMkvReader* pReader, long long pos, long& len)"
  },
  {
    "label": "UnserializeUInt()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "UnserializeUInt(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "UnserializeFloat()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeFloat(IMkvReader*, long long pos, long long size, double&)"
  },
  {
    "label": "UnserializeInt()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeInt(IMkvReader*, long long pos, long long size, long long& result)"
  },
  {
    "label": "UnserializeString()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeString(IMkvReader*, long long pos, long long size, char*& str)"
  },
  {
    "label": "ParseElementHeader()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseElementHeader(IMkvReader* pReader, long long& pos, long long stop, long long& id, long long& size)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Match(IMkvReader*, long long&, unsigned long, long long&)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Match(IMkvReader*, long long&, unsigned long, unsigned char*&, size_t&)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVersion(int& major, int& minor, int& build, int& revision)"
  },
  {
    "label": "EBMLHeader()",
    "kind": "Method",
    "detail": "Function (struct EBMLHeader {)",
    "insertText": "EBMLHeader()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long long m_version ; long long m_readVersion ; long long m_maxIdLength ; long long m_maxSizeLength ; char* m_docType ; long long m_docTypeVersion ; long long m_docTypeReadVersion ; long long)",
    "insertText": "Parse(IMkvReader*, long long&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (} ; class Segment ; class Track ; class Cluster ; class Block {)",
    "insertText": "Block(const Block&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Block&)",
    "insertText": "operator(const Block&)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (public : const long long m_start ; const long long m_size ;)",
    "insertText": "Block(long long start, long long size, long long discard_padding)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Block()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(const Cluster*)"
  },
  {
    "label": "GetTrackNumber()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTrackNumber()"
  },
  {
    "label": "GetTimeCode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTimeCode(const Cluster*)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTime(const Cluster*)"
  },
  {
    "label": "IsKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKey()"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKey(bool)"
  },
  {
    "label": "IsInvisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvisible()"
  },
  {
    "label": "GetLacing()",
    "kind": "Method",
    "detail": "Function (enum Lacing { kLacingNone,kLacingXiph,kLacingFixed,kLacingEbml } ; Lacing)",
    "insertText": "GetLacing()"
  },
  {
    "label": "GetFrameCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFrameCount()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (struct Frame { long long pos ; long len ; long)",
    "insertText": "Read(IMkvReader*, unsigned char*)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (} ; const Frame&)",
    "insertText": "GetFrame(int frame_index)"
  },
  {
    "label": "GetDiscardPadding()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetDiscardPadding()"
  },
  {
    "label": "BlockEntry()",
    "kind": "Method",
    "detail": "Function (private : long long m_track ; short m_timecode ; unsigned char m_flags ; Frame* m_frames ; int m_frame_count ; protected : const long long m_discard_padding ; } ; class BlockEntry {)",
    "insertText": "BlockEntry(const BlockEntry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlockEntry&)",
    "insertText": "operator(const BlockEntry&)"
  },
  {
    "label": "BlockEntry()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "BlockEntry(Cluster*, long index)"
  },
  {
    "label": "BlockEntry()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "BlockEntry()"
  },
  {
    "label": "EOS()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EOS()"
  },
  {
    "label": "GetCluster()",
    "kind": "Method",
    "detail": "Function (} const Cluster*)",
    "insertText": "GetCluster()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (const Block*)",
    "insertText": "GetBlock()"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (enum Kind { kBlockEOS,kBlockSimple,kBlockGroup } ; Kind)",
    "insertText": "GetKind()"
  },
  {
    "label": "SimpleBlock()",
    "kind": "Method",
    "detail": "Function (protected : Cluster* const m_pCluster ; const long m_index ; } ; class SimpleBlock : public BlockEntry {)",
    "insertText": "SimpleBlock(const SimpleBlock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleBlock&)",
    "insertText": "operator(const SimpleBlock&)"
  },
  {
    "label": "SimpleBlock()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SimpleBlock(Cluster*, long index, long long start, long long size)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "BlockGroup()",
    "kind": "Method",
    "detail": "Function (protected : Block m_block ; } ; class BlockGroup : public BlockEntry {)",
    "insertText": "BlockGroup(const BlockGroup&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlockGroup&)",
    "insertText": "operator(const BlockGroup&)"
  },
  {
    "label": "BlockGroup()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "BlockGroup(Cluster*, long index, long long block_start, long long block_size, long long prev, long long next, long long duration, long long discard_padding)"
  },
  {
    "label": "GetPrevTimeCode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetPrevTimeCode()"
  },
  {
    "label": "GetNextTimeCode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetNextTimeCode()"
  },
  {
    "label": "GetDurationTimeCode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetDurationTimeCode()"
  },
  {
    "label": "ContentEncoding()",
    "kind": "Method",
    "detail": "Function (private : Block m_block ; const long long m_prev ; const long long m_next ; const long long m_duration ; } ; class ContentEncoding { public : enum { kCTR = 1 } ;)",
    "insertText": "ContentEncoding()"
  },
  {
    "label": "ContentCompression()",
    "kind": "Method",
    "detail": "Function (struct ContentCompression {)",
    "insertText": "ContentCompression()"
  },
  {
    "label": "ContentEncAESSettings()",
    "kind": "Method",
    "detail": "Function (unsigned long long algo ; unsigned char* settings ; long long settings_len ; } ; struct ContentEncAESSettings {)",
    "insertText": "ContentEncAESSettings() : cipher_mode(kCTR)"
  },
  {
    "label": "ContentEncAESSettings()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ContentEncAESSettings()"
  },
  {
    "label": "ContentEncryption()",
    "kind": "Method",
    "detail": "Function (} unsigned long long cipher_mode ; } ; struct ContentEncryption {)",
    "insertText": "ContentEncryption()"
  },
  {
    "label": "GetCompressionByIndex()",
    "kind": "Method",
    "detail": "Function (unsigned long long algo ; unsigned char* key_id ; long long key_id_len ; unsigned char* signature ; long long signature_len ; unsigned char* sig_key_id ; long long sig_key_id_len ; unsigned long long sig_algo ; unsigned long long sig_hash_algo ; ContentEncAESSettings aes_settings ; } ; const ContentCompression*)",
    "insertText": "GetCompressionByIndex(unsigned long idx)"
  },
  {
    "label": "GetCompressionCount()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "GetCompressionCount()"
  },
  {
    "label": "ParseCompressionEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseCompressionEntry(long long start, long long size, IMkvReader* pReader, ContentCompression* compression)"
  },
  {
    "label": "GetEncryptionByIndex()",
    "kind": "Method",
    "detail": "Function (const ContentEncryption*)",
    "insertText": "GetEncryptionByIndex(unsigned long idx)"
  },
  {
    "label": "GetEncryptionCount()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "GetEncryptionCount()"
  },
  {
    "label": "ParseContentEncAESSettingsEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseContentEncAESSettingsEntry(long long start, long long size, IMkvReader* pReader, ContentEncAESSettings* aes)"
  },
  {
    "label": "ParseContentEncodingEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseContentEncodingEntry(long long start, long long size, IMkvReader* pReader)"
  },
  {
    "label": "ParseEncryptionEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseEncryptionEntry(long long start, long long size, IMkvReader* pReader, ContentEncryption* encryption)"
  },
  {
    "label": "encoding_order()",
    "kind": "Method",
    "detail": "Function (unsigned long long)",
    "insertText": "encoding_order()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ContentEncoding&)",
    "insertText": "operator(const ContentEncoding&)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (} ; class Track {)",
    "insertText": "Track(const Track&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Track&)",
    "insertText": "operator(const Track&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : class Info ; long)",
    "insertText": "Create(Segment*, const Info&, long long element_start, long long element_size, Track*&)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (enum Type { kVideo = 1,kAudio = 2,kSubtitle = 0 x11,kMetadata = 0 x21 } ; Segment* const m_pSegment ; const long long m_element_start ; const long long m_element_size ; ~)",
    "insertText": "Track()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetType()"
  },
  {
    "label": "GetNumber()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetNumber()"
  },
  {
    "label": "GetUid()",
    "kind": "Method",
    "detail": "Function (unsigned long long)",
    "insertText": "GetUid()"
  },
  {
    "label": "GetNameAsUTF8()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetNameAsUTF8()"
  },
  {
    "label": "GetLanguage()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLanguage()"
  },
  {
    "label": "GetCodecNameAsUTF8()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetCodecNameAsUTF8()"
  },
  {
    "label": "GetCodecId()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetCodecId()"
  },
  {
    "label": "GetCodecPrivate()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "GetCodecPrivate(size_t&)"
  },
  {
    "label": "GetDefaultDuration()",
    "kind": "Method",
    "detail": "Function (unsigned long long)",
    "insertText": "GetDefaultDuration()"
  },
  {
    "label": "GetCodecDelay()",
    "kind": "Method",
    "detail": "Function (unsigned long long)",
    "insertText": "GetCodecDelay()"
  },
  {
    "label": "GetSeekPreRoll()",
    "kind": "Method",
    "detail": "Function (unsigned long long)",
    "insertText": "GetSeekPreRoll()"
  },
  {
    "label": "GetEOS()",
    "kind": "Method",
    "detail": "Function (const BlockEntry*)",
    "insertText": "GetEOS()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (struct Settings { long long start ; long long size ; } ; class Info { public :)",
    "insertText": "Info()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Copy(Info&)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (long type ; long number ; unsigned long long uid ; unsigned long long defaultDuration ; unsigned long long codecDelay ; unsigned long long seekPreRoll ; char* nameAsUTF8 ; char* language ; char* codecId ; char* codecNameAsUTF8 ; unsigned char* codecPrivate ; size_t codecPrivateSize ; bool lacing ; Settings settings ; private :)",
    "insertText": "Info(const Info&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Info&)",
    "insertText": "operator(const Info&)"
  },
  {
    "label": "CopyStr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CopyStr(char* Info::*str, Info&)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (} ; long)",
    "insertText": "GetFirst(const BlockEntry*&)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetNext(const BlockEntry* pCurr, const BlockEntry*& pNext)"
  },
  {
    "label": "VetEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VetEntry(const BlockEntry*)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Seek(long long time_ns, const BlockEntry*&)"
  },
  {
    "label": "GetContentEncodingByIndex()",
    "kind": "Method",
    "detail": "Function (const ContentEncoding*)",
    "insertText": "GetContentEncodingByIndex(unsigned long idx)"
  },
  {
    "label": "GetContentEncodingCount()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "GetContentEncodingCount()"
  },
  {
    "label": "ParseContentEncodingsEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseContentEncodingsEntry(long long start, long long size)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "Track(Segment*, long long element_start, long long element_size)"
  },
  {
    "label": "EOSBlock()",
    "kind": "Method",
    "detail": "Function (Info m_info ; class EOSBlock : public BlockEntry { public :)",
    "insertText": "EOSBlock()"
  },
  {
    "label": "PrimaryChromaticity()",
    "kind": "Method",
    "detail": "Function (} ; EOSBlock m_eos ; private : ContentEncoding** content_encoding_entries_ ; ContentEncoding** content_encoding_entries_end_ ; } ; struct PrimaryChromaticity {)",
    "insertText": "PrimaryChromaticity() : x(0), y(0)"
  },
  {
    "label": "PrimaryChromaticity()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PrimaryChromaticity()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Parse(IMkvReader* reader, long long read_pos, long long value_size, bool is_x, PrimaryChromaticity** chromaticity)"
  },
  {
    "label": "MasteringMetadata()",
    "kind": "Method",
    "detail": "Function (float x ; float y ; } ; struct MasteringMetadata { const float kValueNotPresent ;)",
    "insertText": "MasteringMetadata() : r(NULL), g(NULL), b(NULL), white_point(NULL), luminance_max(kValueNotPresent), luminance_min(kValueNotPresent)"
  },
  {
    "label": "MasteringMetadata()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MasteringMetadata()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (delete r ; delete g ; delete b ; delete white_point ; } bool)",
    "insertText": "Parse(IMkvReader* reader, long long element_start, long long element_size, MasteringMetadata** mastering_metadata)"
  },
  {
    "label": "Colour()",
    "kind": "Method",
    "detail": "Function (PrimaryChromaticity* r ; PrimaryChromaticity* g ; PrimaryChromaticity* b ; PrimaryChromaticity* white_point ; float luminance_max ; float luminance_min ; } ; struct Colour { const long long kValueNotPresent ;)",
    "insertText": "Colour() : matrix_coefficients(kValueNotPresent), bits_per_channel(kValueNotPresent), chroma_subsampling_horz(kValueNotPresent), chroma_subsampling_vert(kValueNotPresent), cb_subsampling_horz(kValueNotPresent), cb_subsampling_vert(kValueNotPresent), chroma_siting_horz(kValueNotPresent), chroma_siting_vert(kValueNotPresent), range(kValueNotPresent), transfer_characteristics(kValueNotPresent), primaries(kValueNotPresent), max_cll(kValueNotPresent), max_fall(kValueNotPresent), mastering_metadata(NULL)"
  },
  {
    "label": "Colour()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Colour()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (delete mastering_metadata ; mastering_metadata = NULL ; } bool)",
    "insertText": "Parse(IMkvReader* reader, long long element_start, long long element_size, Colour** colour)"
  },
  {
    "label": "Projection()",
    "kind": "Method",
    "detail": "Function (long long matrix_coefficients ; long long bits_per_channel ; long long chroma_subsampling_horz ; long long chroma_subsampling_vert ; long long cb_subsampling_horz ; long long cb_subsampling_vert ; long long chroma_siting_horz ; long long chroma_siting_vert ; long long range ; long long transfer_characteristics ; long long primaries ; long long max_cll ; long long max_fall ; MasteringMetadata* mastering_metadata ; } ; struct Projection { enum ProjectionType { kTypeNotPresent = - 1,kRectangular = 0,kEquirectangular = 1,kCubeMap = 2,kMesh = 3,} ; const float kValueNotPresent ;)",
    "insertText": "Projection() : type(kTypeNotPresent), private_data(NULL), private_data_length(0), pose_yaw(kValueNotPresent), pose_pitch(kValueNotPresent), pose_roll(kValueNotPresent)"
  },
  {
    "label": "Projection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Projection()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (delete [ ] private_data ; } bool)",
    "insertText": "Parse(IMkvReader* reader, long long element_start, long long element_size, Projection** projection)"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (ProjectionType type ; unsigned char* private_data ; size_t private_data_length ; float pose_yaw ; float pose_pitch ; float pose_roll ; } ; class VideoTrack : public Track {)",
    "insertText": "VideoTrack(const VideoTrack&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoTrack&)",
    "insertText": "operator(const VideoTrack&)"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoTrack(Segment*, long long element_start, long long element_size)"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "VideoTrack()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(Segment*, const Info&, long long element_start, long long element_size, VideoTrack*&)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetDisplayWidth()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetDisplayWidth()"
  },
  {
    "label": "GetDisplayHeight()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetDisplayHeight()"
  },
  {
    "label": "GetDisplayUnit()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetDisplayUnit()"
  },
  {
    "label": "GetStereoMode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetStereoMode()"
  },
  {
    "label": "GetColour()",
    "kind": "Method",
    "detail": "Function (Colour*)",
    "insertText": "GetColour()"
  },
  {
    "label": "GetProjection()",
    "kind": "Method",
    "detail": "Function (Projection*)",
    "insertText": "GetProjection()"
  },
  {
    "label": "GetColourSpace()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetColourSpace()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioTrack&)",
    "insertText": "operator(const AudioTrack&)"
  },
  {
    "label": "AudioTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioTrack(Segment*, long long element_start, long long element_size)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (public : long)",
    "insertText": "Parse(Segment*, const Info&, long long element_start, long long element_size, AudioTrack*&)"
  },
  {
    "label": "GetChannels()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetChannels()"
  },
  {
    "label": "GetBitDepth()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetBitDepth()"
  },
  {
    "label": "Tracks()",
    "kind": "Method",
    "detail": "Function (private : double m_rate ; long long m_channels ; long long m_bitDepth ; } ; class Tracks {)",
    "insertText": "Tracks(const Tracks&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Tracks&)",
    "insertText": "operator(const Tracks&)"
  },
  {
    "label": "Tracks()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; const long long m_start ; const long long m_size ; const long long m_element_start ; const long long m_element_size ;)",
    "insertText": "Tracks(Segment*, long long start, long long size, long long element_start, long long element_size)"
  },
  {
    "label": "Tracks()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Tracks()"
  },
  {
    "label": "GetTracksCount()",
    "kind": "Method",
    "detail": "Function (unsigned long)",
    "insertText": "GetTracksCount()"
  },
  {
    "label": "GetTrackByNumber()",
    "kind": "Method",
    "detail": "Function (const Track*)",
    "insertText": "GetTrackByNumber(long tn)"
  },
  {
    "label": "GetTrackByIndex()",
    "kind": "Method",
    "detail": "Function (const Track*)",
    "insertText": "GetTrackByIndex(unsigned long idx)"
  },
  {
    "label": "ParseTrackEntry()",
    "kind": "Method",
    "detail": "Function (private : Track** m_trackEntries ; Track** m_trackEntriesEnd ; long)",
    "insertText": "ParseTrackEntry(long long payload_start, long long payload_size, long long element_start, long long element_size, Track*&)"
  },
  {
    "label": "Chapters()",
    "kind": "Method",
    "detail": "Function (} ; class Chapters {)",
    "insertText": "Chapters(const Chapters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Chapters&)",
    "insertText": "operator(const Chapters&)"
  },
  {
    "label": "Chapters()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; const long long m_start ; const long long m_size ; const long long m_element_start ; const long long m_element_size ;)",
    "insertText": "Chapters(Segment*, long long payload_start, long long payload_size, long long element_start, long long element_size)"
  },
  {
    "label": "Chapters()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Chapters()"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (class Atom ; class Edition ; class Display { class Atom ;)",
    "insertText": "Display()"
  },
  {
    "label": "Display()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Display(const Display&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Display&)",
    "insertText": "operator(const Display&)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (public : const char*)",
    "insertText": "GetString()"
  },
  {
    "label": "GetCountry()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetCountry()"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(Display&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "Atom()",
    "kind": "Method",
    "detail": "Function (char* m_string ; char* m_language ; char* m_country ; } ; class Atom { class Edition ;)",
    "insertText": "Atom()"
  },
  {
    "label": "Atom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Atom(const Atom&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Atom&)",
    "insertText": "operator(const Atom&)"
  },
  {
    "label": "GetUID()",
    "kind": "Method",
    "detail": "Function (public : unsigned long long)",
    "insertText": "GetUID()"
  },
  {
    "label": "GetStringUID()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetStringUID()"
  },
  {
    "label": "GetStartTimecode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetStartTimecode()"
  },
  {
    "label": "GetStopTimecode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetStopTimecode()"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetStartTime(const Chapters*)"
  },
  {
    "label": "GetStopTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetStopTime(const Chapters*)"
  },
  {
    "label": "GetDisplayCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDisplayCount()"
  },
  {
    "label": "GetDisplay()",
    "kind": "Method",
    "detail": "Function (const Display*)",
    "insertText": "GetDisplay(int index)"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(Atom&)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTime(const Chapters*, long long timecode)"
  },
  {
    "label": "ParseDisplay()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseDisplay(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ExpandDisplaysArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandDisplaysArray()"
  },
  {
    "label": "Edition()",
    "kind": "Method",
    "detail": "Function (char* m_string_uid ; unsigned long long m_uid ; long long m_start_timecode ; long long m_stop_timecode ; Display* m_displays ; int m_displays_size ; int m_displays_count ; } ; class Edition { class Chapters ;)",
    "insertText": "Edition()"
  },
  {
    "label": "Edition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Edition(const Edition&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Edition&)",
    "insertText": "operator(const Edition&)"
  },
  {
    "label": "GetAtomCount()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "GetAtomCount()"
  },
  {
    "label": "GetAtom()",
    "kind": "Method",
    "detail": "Function (const Atom*)",
    "insertText": "GetAtom(int index)"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(Edition&)"
  },
  {
    "label": "ParseAtom()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseAtom(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ExpandAtomsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandAtomsArray()"
  },
  {
    "label": "GetEditionCount()",
    "kind": "Method",
    "detail": "Function (Atom* m_atoms ; int m_atoms_size ; int m_atoms_count ; } ; int)",
    "insertText": "GetEditionCount()"
  },
  {
    "label": "GetEdition()",
    "kind": "Method",
    "detail": "Function (const Edition*)",
    "insertText": "GetEdition(int index)"
  },
  {
    "label": "ParseEdition()",
    "kind": "Method",
    "detail": "Function (private : long)",
    "insertText": "ParseEdition(long long pos, long long size)"
  },
  {
    "label": "ExpandEditionsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandEditionsArray()"
  },
  {
    "label": "Tags()",
    "kind": "Method",
    "detail": "Function (Edition* m_editions ; int m_editions_size ; int m_editions_count ; } ; class Tags {)",
    "insertText": "Tags(const Tags&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Tags&)",
    "insertText": "operator(const Tags&)"
  },
  {
    "label": "Tags()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; const long long m_start ; const long long m_size ; const long long m_element_start ; const long long m_element_size ;)",
    "insertText": "Tags(Segment*, long long payload_start, long long payload_size, long long element_start, long long element_size)"
  },
  {
    "label": "Tags()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Tags()"
  },
  {
    "label": "SimpleTag()",
    "kind": "Method",
    "detail": "Function (class Tag ; class SimpleTag ; class SimpleTag { class Tag ;)",
    "insertText": "SimpleTag()"
  },
  {
    "label": "SimpleTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleTag(const SimpleTag&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleTag&)",
    "insertText": "operator(const SimpleTag&)"
  },
  {
    "label": "GetTagName()",
    "kind": "Method",
    "detail": "Function (public : const char*)",
    "insertText": "GetTagName()"
  },
  {
    "label": "GetTagString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetTagString()"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(SimpleTag&)"
  },
  {
    "label": "Tag()",
    "kind": "Method",
    "detail": "Function (char* m_tag_name ; char* m_tag_string ; } ; class Tag { class Tags ;)",
    "insertText": "Tag()"
  },
  {
    "label": "Tag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tag(const Tag&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Tag&)",
    "insertText": "operator(const Tag&)"
  },
  {
    "label": "GetSimpleTagCount()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "GetSimpleTagCount()"
  },
  {
    "label": "GetSimpleTag()",
    "kind": "Method",
    "detail": "Function (const SimpleTag*)",
    "insertText": "GetSimpleTag(int index)"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(Tag&)"
  },
  {
    "label": "ParseSimpleTag()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseSimpleTag(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ExpandSimpleTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandSimpleTagsArray()"
  },
  {
    "label": "GetTagCount()",
    "kind": "Method",
    "detail": "Function (SimpleTag* m_simple_tags ; int m_simple_tags_size ; int m_simple_tags_count ; } ; int)",
    "insertText": "GetTagCount()"
  },
  {
    "label": "GetTag()",
    "kind": "Method",
    "detail": "Function (const Tag*)",
    "insertText": "GetTag(int index)"
  },
  {
    "label": "ParseTag()",
    "kind": "Method",
    "detail": "Function (private : long)",
    "insertText": "ParseTag(long long pos, long long size)"
  },
  {
    "label": "ExpandTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandTagsArray()"
  },
  {
    "label": "SegmentInfo()",
    "kind": "Method",
    "detail": "Function (Tag* m_tags ; int m_tags_size ; int m_tags_count ; } ; class SegmentInfo {)",
    "insertText": "SegmentInfo(const SegmentInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SegmentInfo&)",
    "insertText": "operator(const SegmentInfo&)"
  },
  {
    "label": "SegmentInfo()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; const long long m_start ; const long long m_size ; const long long m_element_start ; const long long m_element_size ;)",
    "insertText": "SegmentInfo(Segment*, long long start, long long size, long long element_start, long long element_size)"
  },
  {
    "label": "SegmentInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SegmentInfo()"
  },
  {
    "label": "GetTimeCodeScale()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTimeCodeScale()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetMuxingAppAsUTF8()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetMuxingAppAsUTF8()"
  },
  {
    "label": "GetWritingAppAsUTF8()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetWritingAppAsUTF8()"
  },
  {
    "label": "GetTitleAsUTF8()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetTitleAsUTF8()"
  },
  {
    "label": "SeekHead()",
    "kind": "Method",
    "detail": "Function (private : long long m_timecodeScale ; double m_duration ; char* m_pMuxingAppAsUTF8 ; char* m_pWritingAppAsUTF8 ; char* m_pTitleAsUTF8 ; } ; class SeekHead {)",
    "insertText": "SeekHead(const SeekHead&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SeekHead&)",
    "insertText": "operator(const SeekHead&)"
  },
  {
    "label": "SeekHead()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; const long long m_start ; const long long m_size ; const long long m_element_start ; const long long m_element_size ;)",
    "insertText": "SeekHead(Segment*, long long start, long long size, long long element_start, long long element_size)"
  },
  {
    "label": "SeekHead()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SeekHead()"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (struct Entry {)",
    "insertText": "Entry()"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (long long id ; long long pos ; long long element_start ; long long element_size ; } ; int)",
    "insertText": "GetCount()"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (const Entry*)",
    "insertText": "GetEntry(int idx)"
  },
  {
    "label": "GetVoidElementCount()",
    "kind": "Method",
    "detail": "Function (struct VoidElement { long long element_start ; long long element_size ; } ; int)",
    "insertText": "GetVoidElementCount()"
  },
  {
    "label": "GetVoidElement()",
    "kind": "Method",
    "detail": "Function (const VoidElement*)",
    "insertText": "GetVoidElement(int idx)"
  },
  {
    "label": "ParseEntry()",
    "kind": "Method",
    "detail": "Function (private : Entry* m_entries ; int m_entry_count ; VoidElement* m_void_elements ; int m_void_element_count ; bool)",
    "insertText": "ParseEntry(IMkvReader*, long long pos, long long size, Entry*)"
  },
  {
    "label": "CuePoint()",
    "kind": "Method",
    "detail": "Function (} ; class Cues ; class CuePoint { class Cues ;)",
    "insertText": "CuePoint(long, long long)"
  },
  {
    "label": "CuePoint()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CuePoint()"
  },
  {
    "label": "CuePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CuePoint(const CuePoint&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CuePoint&)",
    "insertText": "operator(const CuePoint&)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (public : long long m_element_start ; long long m_element_size ; bool)",
    "insertText": "Load(IMkvReader*)"
  },
  {
    "label": "GetTimeCode()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTimeCode()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTime(const Segment*)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (struct TrackPosition { long long m_track ; long long m_pos ; long long m_block ; bool)",
    "insertText": "Parse(IMkvReader*, long long, long long)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ; const TrackPosition*)",
    "insertText": "Find(const Track*)"
  },
  {
    "label": "Cues()",
    "kind": "Method",
    "detail": "Function (private : const long m_index ; long long m_timecode ; TrackPosition* m_track_positions ; size_t m_track_positions_count ; } ; class Cues { class Segment ;)",
    "insertText": "Cues(Segment*, long long start, long long size, long long element_start, long long element_size)"
  },
  {
    "label": "Cues()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Cues()"
  },
  {
    "label": "Cues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cues(const Cues&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Cues&)",
    "insertText": "operator(const Cues&)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; const long long m_start ; const long long m_size ; const long long m_element_start ; const long long m_element_size ; bool)",
    "insertText": "Find(long long time_ns, const Track*, const CuePoint*&, const CuePoint::TrackPosition*&)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (const CuePoint*)",
    "insertText": "GetFirst()"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (const CuePoint*)",
    "insertText": "GetLast()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (const CuePoint*)",
    "insertText": "GetNext(const CuePoint*)"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (const BlockEntry*)",
    "insertText": "GetBlock(const CuePoint*, const CuePoint::TrackPosition*)"
  },
  {
    "label": "LoadCuePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCuePoint()"
  },
  {
    "label": "DoneParsing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoneParsing()"
  },
  {
    "label": "PreloadCuePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadCuePoint(long&, long long)"
  },
  {
    "label": "Cluster()",
    "kind": "Method",
    "detail": "Function (CuePoint** m_cue_points ; long m_count ; long m_preload_count ; long long m_pos ; } ; class Cluster { class Segment ;)",
    "insertText": "Cluster(const Cluster&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Cluster&)",
    "insertText": "operator(const Cluster&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : Segment* const m_pSegment ; public : Cluster*)",
    "insertText": "Create(Segment*, long index, long long off)"
  },
  {
    "label": "Cluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cluster()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetFirstTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetFirstTime()"
  },
  {
    "label": "GetLastTime()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetLastTime()"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetLast(const BlockEntry*&)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetNext(const BlockEntry* curr, const BlockEntry*& next)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (const BlockEntry*)",
    "insertText": "GetEntry(const Track*, long long ns = -1)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (const BlockEntry*)",
    "insertText": "GetEntry(const CuePoint&, const CuePoint::TrackPosition&)"
  },
  {
    "label": "HasBlockEntries()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "HasBlockEntries(const Segment*, long long idoff, long long& pos, long& size)"
  },
  {
    "label": "GetEntryCount()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetEntryCount()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Load(long long& pos, long& size)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(long long& pos, long& size)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetEntry(long index, const mkvparser::BlockEntry*&)"
  },
  {
    "label": "Cluster()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "Cluster(Segment*, long index, long long element_start)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (public : const long long m_element_start ; long long)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "GetElementSize()"
  },
  {
    "label": "ParseSimpleBlock()",
    "kind": "Method",
    "detail": "Function (private : long m_index ; long long m_pos ; long long m_element_size ; long long m_timecode ; BlockEntry** m_entries ; long m_entries_size ; long m_entries_count ; long)",
    "insertText": "ParseSimpleBlock(long long, long long&, long&)"
  },
  {
    "label": "ParseBlockGroup()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseBlockGroup(long long, long long&, long&)"
  },
  {
    "label": "CreateBlock()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateBlock(long long id, long long pos, long long size, long long discard_padding)"
  },
  {
    "label": "CreateBlockGroup()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateBlockGroup(long long start_offset, long long size, long long discard_padding)"
  },
  {
    "label": "CreateSimpleBlock()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateSimpleBlock(long long, long long)"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (} ; class Segment { class Cues ; class Track ; class VideoTrack ;)",
    "insertText": "Segment(const Segment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Segment&)",
    "insertText": "operator(const Segment&)"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "Segment(IMkvReader*, long long elem_start, long long pos, long long size)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (public : IMkvReader* const m_pReader ; const long long m_element_start ; const long long m_start ; const long long m_size ; Cluster m_eos ; long long)",
    "insertText": "CreateInstance(IMkvReader*, long long, Segment*&)"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Segment()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Load()"
  },
  {
    "label": "ParseHeaders()",
    "kind": "Method",
    "detail": "Function (long long)",
    "insertText": "ParseHeaders()"
  },
  {
    "label": "LoadCluster()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "LoadCluster(long long& pos, long& size)"
  },
  {
    "label": "LoadCluster()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "LoadCluster()"
  },
  {
    "label": "ParseNext()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseNext(const Cluster* pCurr, const Cluster*& pNext, long long& pos, long& size)"
  },
  {
    "label": "GetSeekHead()",
    "kind": "Method",
    "detail": "Function (const SeekHead*)",
    "insertText": "GetSeekHead()"
  },
  {
    "label": "GetTracks()",
    "kind": "Method",
    "detail": "Function (const Tracks*)",
    "insertText": "GetTracks()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (const SegmentInfo*)",
    "insertText": "GetInfo()"
  },
  {
    "label": "GetCues()",
    "kind": "Method",
    "detail": "Function (const Cues*)",
    "insertText": "GetCues()"
  },
  {
    "label": "GetChapters()",
    "kind": "Method",
    "detail": "Function (const Chapters*)",
    "insertText": "GetChapters()"
  },
  {
    "label": "GetTags()",
    "kind": "Method",
    "detail": "Function (const Tags*)",
    "insertText": "GetTags()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (const Cluster*)",
    "insertText": "GetNext(const Cluster*)"
  },
  {
    "label": "FindCluster()",
    "kind": "Method",
    "detail": "Function (const Cluster*)",
    "insertText": "FindCluster(long long time_nanoseconds)"
  },
  {
    "label": "FindOrPreloadCluster()",
    "kind": "Method",
    "detail": "Function (const Cluster*)",
    "insertText": "FindOrPreloadCluster(long long pos)"
  },
  {
    "label": "ParseCues()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseCues(long long cues_off, long long& parse_pos, long& parse_len)"
  },
  {
    "label": "DoLoadCluster()",
    "kind": "Method",
    "detail": "Function (private : long long m_pos ; Cluster* m_pUnknownSize ; SeekHead* m_pSeekHead ; SegmentInfo* m_pInfo ; Tracks* m_pTracks ; Cues* m_pCues ; Chapters* m_pChapters ; Tags* m_pTags ; Cluster** m_clusters ; long m_clusterCount ; long m_clusterPreloadCount ; long m_clusterSize ; long)",
    "insertText": "DoLoadCluster(long long&, long&)"
  },
  {
    "label": "DoLoadClusterUnknownSize()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "DoLoadClusterUnknownSize(long long&, long&)"
  },
  {
    "label": "DoParseNext()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "DoParseNext(const Cluster*&, long long&, long&)"
  },
  {
    "label": "AppendCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendCluster(Cluster*)"
  },
  {
    "label": "PreloadCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadCluster(Cluster*, ptrdiff_t)"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (const BlockEntry*)",
    "insertText": "GetBlock(const CuePoint&, const CuePoint::TrackPosition&)"
  },
  {
    "label": "LoadCluster()",
    "kind": "Method",
    "detail": "Function (long long pos ; long size ; return)",
    "insertText": "LoadCluster(pos, size)"
  }
]