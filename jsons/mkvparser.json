[
  {
    "label": "IMkvReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMkvReader"
  },
  {
    "label": "EBMLHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EBMLHeader"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "Track",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Track"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cluster"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block"
  },
  {
    "label": "Lacing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Lacing"
  },
  {
    "label": "Frame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Frame"
  },
  {
    "label": "BlockEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockEntry"
  },
  {
    "label": "Kind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Kind"
  },
  {
    "label": "SimpleBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleBlock"
  },
  {
    "label": "BlockGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockGroup"
  },
  {
    "label": "ContentEncoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentEncoding"
  },
  {
    "label": "ContentCompression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentCompression"
  },
  {
    "label": "ContentEncAESSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentEncAESSettings"
  },
  {
    "label": "ContentEncryption",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContentEncryption"
  },
  {
    "label": "Track",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Track"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Info"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Settings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Settings"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Info"
  },
  {
    "label": "EOSBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EOSBlock"
  },
  {
    "label": "PrimaryChromaticity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrimaryChromaticity"
  },
  {
    "label": "MasteringMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MasteringMetadata"
  },
  {
    "label": "Colour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Colour"
  },
  {
    "label": "Projection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Projection"
  },
  {
    "label": "ProjectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProjectionType"
  },
  {
    "label": "VideoTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrack"
  },
  {
    "label": "AudioTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTrack"
  },
  {
    "label": "Tracks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tracks"
  },
  {
    "label": "Chapters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapters"
  },
  {
    "label": "Atom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Atom"
  },
  {
    "label": "Edition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edition"
  },
  {
    "label": "Display",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Display"
  },
  {
    "label": "Atom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Atom"
  },
  {
    "label": "Atom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Atom"
  },
  {
    "label": "Edition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edition"
  },
  {
    "label": "Edition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edition"
  },
  {
    "label": "Chapters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapters"
  },
  {
    "label": "Tags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tags"
  },
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tag"
  },
  {
    "label": "SimpleTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTag"
  },
  {
    "label": "SimpleTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTag"
  },
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tag"
  },
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tag"
  },
  {
    "label": "Tags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tags"
  },
  {
    "label": "SegmentInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SegmentInfo"
  },
  {
    "label": "SeekHead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeekHead"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "VoidElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoidElement"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "CuePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CuePoint"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "TrackPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrackPosition"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cluster"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "Track",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Track"
  },
  {
    "label": "VideoTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrack"
  },
  {
    "label": "GetUIntLength()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetUIntLength(IMkvReader*, long long, long&)"
  },
  {
    "label": "ReadUInt()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ReadUInt(IMkvReader*, long long, long&)"
  },
  {
    "label": "ReadID()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ReadID(IMkvReader* pReader, long long pos, long& len)"
  },
  {
    "label": "UnserializeUInt()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeUInt(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "UnserializeFloat()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeFloat(IMkvReader*, long long pos, long long size, double&)"
  },
  {
    "label": "UnserializeInt()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeInt(IMkvReader*, long long pos, long long size,\n                    long long& result)"
  },
  {
    "label": "UnserializeString()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "UnserializeString(IMkvReader*, long long pos, long long size, char*& str)"
  },
  {
    "label": "ParseElementHeader()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseElementHeader(IMkvReader* pReader,\n                        long long& pos,  // consume id and size fields\n                        long long stop,  // if you know size of element's parent\n                        long long& id, long long& size)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Match(IMkvReader*, long long&, unsigned long, long long&)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Match(IMkvReader*, long long&, unsigned long, unsigned char*&, size_t&)"
  },
  {
    "label": "GetVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVersion(int& major, int& minor, int& build, int& revision)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(const Cluster*)"
  },
  {
    "label": "SetKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKey(bool)"
  },
  {
    "label": "BlockEntry()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "BlockEntry(Cluster*, long index)"
  },
  {
    "label": "SimpleBlock()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SimpleBlock(Cluster*, long index, long long start, long long size)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "BlockGroup()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "BlockGroup(Cluster*, long index,\n             long long block_start,  // absolute pos of block's payload\n             long long block_size,  // size of block's payload\n             long long prev, long long next, long long duration,\n             long long discard_padding)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "ParseCompressionEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseCompressionEntry(long long start, long long size,\n                             IMkvReader* pReader,\n                             ContentCompression* compression)"
  },
  {
    "label": "ParseContentEncAESSettingsEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseContentEncAESSettingsEntry(long long start, long long size,\n                                       IMkvReader* pReader,\n                                       ContentEncAESSettings* aes)"
  },
  {
    "label": "ParseContentEncodingEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseContentEncodingEntry(long long start, long long size,\n                                 IMkvReader* pReader)"
  },
  {
    "label": "ParseEncryptionEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseEncryptionEntry(long long start, long long size,\n                            IMkvReader* pReader, ContentEncryption* encryption)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Create(Segment*, const Info&, long long element_start,\n                     long long element_size, Track*&)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Info()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "Info(const Info&)"
  },
  {
    "label": "ParseContentEncodingsEntry()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseContentEncodingsEntry(long long start, long long size)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "Track(Segment*, long long element_start, long long element_size)"
  },
  {
    "label": "EOSBlock()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EOSBlock()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(IMkvReader* reader, long long read_pos,\n                    long long value_size, bool is_x,\n                    PrimaryChromaticity** chromaticity)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(IMkvReader* reader, long long element_start,\n                    long long element_size,\n                    MasteringMetadata** mastering_metadata)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(IMkvReader* reader, long long element_start,\n                    long long element_size, Colour** colour)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(IMkvReader* reader, long long element_start,\n                    long long element_size, Projection** projection)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(Segment*, const Info&, long long element_start,\n                    long long element_size, VideoTrack*&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(Segment*, const Info&, long long element_start,\n                    long long element_size, AudioTrack*&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "GetTime(const Chapters*, long long timecode)"
  },
  {
    "label": "ParseDisplay()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseDisplay(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ExpandDisplaysArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandDisplaysArray()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ParseAtom()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseAtom(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ExpandAtomsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandAtomsArray()"
  },
  {
    "label": "ParseEdition()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseEdition(long long pos, long long size)"
  },
  {
    "label": "ExpandEditionsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandEditionsArray()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ParseSimpleTag()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseSimpleTag(IMkvReader*, long long pos, long long size)"
  },
  {
    "label": "ExpandSimpleTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandSimpleTagsArray()"
  },
  {
    "label": "ParseTag()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseTag(long long pos, long long size)"
  },
  {
    "label": "ExpandTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandTagsArray()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Parse()"
  },
  {
    "label": "ParseEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseEntry(IMkvReader*,\n                         long long pos,  // payload\n                         long long size, Entry*)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(IMkvReader*)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(IMkvReader*, long long, long long)"
  },
  {
    "label": "HasBlockEntries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBlockEntries(const Segment*, long long)"
  },
  {
    "label": "HasBlockEntries()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "HasBlockEntries(const Segment*, long long idoff, long long& pos,\n                              long& size)"
  },
  {
    "label": "Cluster()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "Cluster(Segment*, long index, long long element_start)"
  },
  {
    "label": "ParseSimpleBlock()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseSimpleBlock(long long, long long&, long&)"
  },
  {
    "label": "ParseBlockGroup()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseBlockGroup(long long, long long&, long&)"
  },
  {
    "label": "CreateBlock()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateBlock(long long id, long long pos, long long size,\n                   long long discard_padding)"
  },
  {
    "label": "CreateBlockGroup()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateBlockGroup(long long start_offset, long long size,\n                        long long discard_padding)"
  },
  {
    "label": "CreateSimpleBlock()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateSimpleBlock(long long, long long)"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "Segment(IMkvReader*, long long elem_start,\n          // long long elem_size,\n          long long pos, long long size)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "CreateInstance(IMkvReader*, long long, Segment*&)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "Load()"
  },
  {
    "label": "ParseHeaders()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseHeaders()"
  },
  {
    "label": "LoadCluster()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "LoadCluster(long long& pos, long& size)"
  },
  {
    "label": "LoadCluster()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "LoadCluster()"
  },
  {
    "label": "ParseNext()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseNext(const Cluster* pCurr, const Cluster*& pNext, long long& pos,\n                 long& size)"
  },
  {
    "label": "ParseCues()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "ParseCues(long long cues_off,  // offset relative to start of segment\n                 long long& parse_pos, long& parse_len)"
  },
  {
    "label": "DoLoadCluster()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "DoLoadCluster(long long&, long&)"
  },
  {
    "label": "DoLoadClusterUnknownSize()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "DoLoadClusterUnknownSize(long long&, long&)"
  },
  {
    "label": "DoParseNext()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "DoParseNext(const Cluster*&, long long&, long&)"
  },
  {
    "label": "AppendCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendCluster(Cluster*)"
  },
  {
    "label": "PreloadCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreloadCluster(Cluster*, ptrdiff_t)"
  },
  {
    "label": "ParseSeekHead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSeekHead(long long pos, long long size)"
  },
  {
    "label": "ParseSeekEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSeekEntry(long long pos, long long size)"
  },
  {
    "label": "ParseCues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCues(long long)"
  },
  {
    "label": "LoadCluster()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LoadCluster(pos, size)"
  }
]