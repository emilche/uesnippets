[
  {
    "label": "FTranslationPickerTextAndGeom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslationPickerTextAndGeom"
  },
  {
    "label": "STranslationPickerFloatingWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STranslationPickerFloatingWindow"
  },
  {
    "label": "STranslationPickerOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STranslationPickerOverlay"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TranslationPickerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TranslationPickerManager"
  },
  {
    "label": "STranslationWidgetPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STranslationWidgetPicker"
  },
  {
    "label": "IsPickerWindowOpen()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # define LOCTEXT_NAMESPACE \" TranslationPicker \" struct FTranslationPickerTextAndGeom ; class STranslationPickerFloatingWindow ; class STranslationPickerOverlay ; class SWindow ; enum class ECheckBoxState : uint8 ; class TranslationPickerManager { public : TSharedPtr<SWindow> PickerWindow ; TSharedPtr<STranslationPickerFloatingWindow> PickerWindowWidget ; TSharedPtr<STranslationPickerOverlay> MainWindowOverlay ; TArray<FTranslationPickerTextAndGeom> PickedTexts ; bool bDrawBoxes ; bool)",
    "insertText": "IsPickerWindowOpen()"
  },
  {
    "label": "OpenPickerWindow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OpenPickerWindow()"
  },
  {
    "label": "ClosePickerWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosePickerWindow()"
  },
  {
    "label": "ResetPickerWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPickerWindow()"
  },
  {
    "label": "RemoveOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOverlay()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class STranslationWidgetPicker : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STranslationWidgetPicker)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "IsChecked()",
    "kind": "Method",
    "detail": "Function (private : ECheckBoxState)",
    "insertText": "IsChecked()"
  },
  {
    "label": "OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCheckStateChanged(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "FTranslationPickerTextAndGeom()",
    "kind": "Method",
    "detail": "Function (} ; struct FTranslationPickerTextAndGeom { FText Text ; FPaintGeometry Geometry ;)",
    "insertText": "FTranslationPickerTextAndGeom(const FText& InText, const FPaintGeometry& InGeometry) : Text(InText) , Geometry(InGeometry)"
  }
]