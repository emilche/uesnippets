[
  {
    "label": "WebMVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebMVideoSource"
  },
  {
    "label": "WebMVideoSource()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_WEBM_VIDEO_SOURCE_H_ # define VPX_TEST_WEBM_VIDEO_SOURCE_H_ # include<cstdarg> # include<cstdio> # include<cstdlib> # include<new> # include<string> # include \" . . / tools_common . h \" # include \" . . / webmdec . h \" # include \" test / video_source . h \" namespace libvpx_test { class WebMVideoSource : public CompressedVideoSource { public :)",
    "insertText": "WebMVideoSource(const std::string &file_name) : file_name_(file_name), vpx_ctx_(new VpxInputContext()), webm_ctx_(new WebmInputContext()), buf_(nullptr), buf_sz_(0), frame_(0), end_of_file_(false)"
  },
  {
    "label": "WebMVideoSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "WebMVideoSource()"
  },
  {
    "label": "webm_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "webm_free(webm_ctx_)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (delete vpx_ctx_ ; delete webm_ctx_ ; } void)",
    "insertText": "Init()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "OpenTestDataFile()",
    "kind": "Method",
    "detail": "Function (vpx_ctx_ -> file =)",
    "insertText": "OpenTestDataFile(file_name_)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_NE(vpx_ctx_->file, nullptr)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(file_is_webm(webm_ctx_, vpx_ctx_), 1)"
  },
  {
    "label": "FillFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFrame()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Next()"
  },
  {
    "label": "webm_read_frame()",
    "kind": "Method",
    "detail": "Function (const int status =)",
    "insertText": "webm_read_frame(webm_ctx_, &buf_, &buf_sz_)"
  },
  {
    "label": "ASSERT_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_GE(status, 0)"
  },
  {
    "label": "SeekToNextKeyFrame()",
    "kind": "Method",
    "detail": "Function (end_of_file_ = true ; } } void)",
    "insertText": "SeekToNextKeyFrame()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + frame_ ;)",
    "insertText": "if(status == 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (end_of_file_ = true ; } })",
    "insertText": "while(!webm_ctx_->is_key_frame && !end_of_file_)"
  },
  {
    "label": "cxdata()",
    "kind": "Method",
    "detail": "Function (} const uint8_t*)",
    "insertText": "cxdata()"
  }
]