[
  {
    "label": "TCachedPagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCachedPagedArray"
  },
  {
    "label": "TCachedPagedArray()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" TraceServices / Model / AnalysisCache . h \" # include \" Containers / Array . h \" # include \" Memory / SharedBuffer . h \" namespace TraceServices { template<InItemType,unsigned int PageSize> class TCachedPagedArray { public : typedef InItemType ItemType ;)",
    "insertText": "TCachedPagedArray(const TCHAR* InCacheId, IAnalysisCache& InCache, uint32 InResidentPages = ~0) : Cache(InCache) , CacheId(0) , ResidentPageCount(InResidentPages) , ElementCount(nullptr)"
  },
  {
    "label": "GetCacheId()",
    "kind": "Method",
    "detail": "Function (CacheId = Cache .)",
    "insertText": "GetCacheId(InCacheId)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (const FMutableMemoryView UserData = Cache .)",
    "insertText": "GetUserData(CacheId)"
  },
  {
    "label": "ElementCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementCount(uint64*) UserData.GetData()"
  },
  {
    "label": "InsertZeroed()",
    "kind": "Method",
    "detail": "Function (Pages .)",
    "insertText": "InsertZeroed(0, NumPages())"
  },
  {
    "label": "NumPages()",
    "kind": "Method",
    "detail": "Function (const uint32 PageCount =)",
    "insertText": "NumPages()"
  },
  {
    "label": "GetPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPage(PageIndex)"
  },
  {
    "label": "EmplaceBack()",
    "kind": "Method",
    "detail": "Function (} } } template<. . . ArgsType> ItemType&)",
    "insertText": "EmplaceBack(ArgsType&&... Args)"
  },
  {
    "label": "GetPageForNextItem()",
    "kind": "Method",
    "detail": "Function (ItemType* Page =)",
    "insertText": "GetPageForNextItem()"
  },
  {
    "label": "IndexInPage()",
    "kind": "Method",
    "detail": "Function (const uint32 IndexInPage =* ElementCount % PageSize ; ItemType* ItemPtr = Page +)",
    "insertText": "IndexInPage(*ElementCount)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(ItemPtr) ItemType(Forward<ArgsType>(Args)...)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 PageIndex = static_cast<)",
    "insertText": "uint32(Index / PageSize)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 IndexInPage = static_cast<)",
    "insertText": "uint32(Index % PageSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ItemType* Page = Pages [ PageIndex ] ;)",
    "insertText": "if(!Page)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(Page + IndexInPage)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Num()"
  },
  {
    "label": "BlocksPerPage()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "BlocksPerPage(PageSizeBytes + IAnalysisCache::BlockSizeBytes - 1)"
  },
  {
    "label": "WastePerPage()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WastePerPage(BlocksPerPage * IAnalysisCache::BlockSizeBytes)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer& NewPage = ResidentPages .)",
    "insertText": "Emplace_GetRef(Cache.CreateBlocks(CacheId, BlocksPerPage))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Pages .)",
    "insertText": "Push((ItemType*)NewPage.GetData())"
  },
  {
    "label": "EvictPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvictPages()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} return Pages .)",
    "insertText": "Last()"
  },
  {
    "label": "GetItemsFromPage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetItemsFromPage(uint64 PageIndex, ItemType** OutFirstItem, ItemType** OutLastItem)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint64 Count = PageIndex = = Pages .)",
    "insertText": "Num() ? (*ElementCount % PageSize)"
  },
  {
    "label": "GetPage()",
    "kind": "Method",
    "detail": "Function (* OutFirstItem = Page ;* OutLastItem = Page + Count - 1 ; } ItemType*)",
    "insertText": "GetPage(uint32 InPageIndex)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (const uint32 BlockIndex = InPageIndex* BlocksPerPage ; const FSharedBuffer& Block = ResidentPages .)",
    "insertText": "Emplace_GetRef(Cache.GetBlocks(CacheId, BlockIndex, BlocksPerPage))"
  },
  {
    "label": "InPageIndex()",
    "kind": "Method",
    "detail": "Function (Page = Pages [)",
    "insertText": "InPageIndex(ItemType*)Block.GetData()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Pages .)",
    "insertText": "Find((ItemType*)ResidentPages[0].GetData())"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Pages [ Index ] = nullptr ; ResidentPages .)",
    "insertText": "RemoveAt(0)"
  }
]