[
  {
    "label": "AudioBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioBuffer"
  },
  {
    "label": "HighPassFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HighPassFilter"
  },
  {
    "label": "HighPassFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_HIGH_PASS_FILTER_H_ # define MODULES_AUDIO_PROCESSING_HIGH_PASS_FILTER_H_ # include<memory> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / utility / cascaded_biquad_filter . h \" namespace webrtc { class AudioBuffer ; class HighPassFilter { public :)",
    "insertText": "HighPassFilter(int sample_rate_hz, size_t num_channels)"
  },
  {
    "label": "HighPassFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HighPassFilter()"
  },
  {
    "label": "HighPassFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighPassFilter(const HighPassFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HighPassFilter&)",
    "insertText": "operator(const HighPassFilter&)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(AudioBuffer* audio, bool use_split_band_data)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(std::vector<std::vector<float>>* audio)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(size_t num_channels)"
  },
  {
    "label": "sample_rate_hz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "sample_rate_hz()"
  }
]