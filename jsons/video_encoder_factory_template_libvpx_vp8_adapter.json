[
  {
    "label": "LibvpxVp8EncoderTemplateAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LibvpxVp8EncoderTemplateAdapter"
  },
  {
    "label": "SupportedFormats()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VIDEO_ENCODER_FACTORY_TEMPLATE_LIBVPX_VP8_ADAPTER_H_ # define API_VIDEO_CODECS_VIDEO_ENCODER_FACTORY_TEMPLATE_LIBVPX_VP8_ADAPTER_H_ # include<memory> # include<vector> # include \" absl / container / inlined_vector . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" modules / video_coding / codecs / vp8 / include / vp8 . h \" # include \" modules / video_coding / codecs / vp8 / vp8_scalability . h \" namespace webrtc { struct LibvpxVp8EncoderTemplateAdapter { std::vector<SdpVideoFormat>)",
    "insertText": "SupportedFormats()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (absl::InlinedVector<ScalabilityMode,kScalabilityModeCount> scalability_modes ;)",
    "insertText": "for(const auto scalability_mode : kVP8SupportedScalabilityModes)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (scalability_modes .)",
    "insertText": "push_back(scalability_mode)"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (} return {)",
    "insertText": "SdpVideoFormat(\"VP8\", SdpVideoFormat::Parameters(), scalability_modes)"
  },
  {
    "label": "CreateEncoder()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<VideoEncoder>)",
    "insertText": "CreateEncoder(const SdpVideoFormat& format)"
  },
  {
    "label": "IsScalabilityModeSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsScalabilityModeSupported(ScalabilityMode scalability_mode)"
  }
]