[
  {
    "label": "FCollectionHierarchyFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionHierarchyFacade"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCollectionHierarchyFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" namespace Chaos::Facades { class FCollectionHierarchyFacade { public : enum class EPersistencePolicy : uint8 { KeepExistingPersistence,MustBePersistent } ;)",
    "insertText": "FCollectionHierarchyFacade(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "FCollectionHierarchyFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionHierarchyFacade(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "HasLevelAttribute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLevelAttribute()"
  },
  {
    "label": "IsLevelAttributePersistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelAttributePersistent()"
  },
  {
    "label": "GetRootIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRootIndex()"
  },
  {
    "label": "GetRootIndices()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetRootIndices()"
  },
  {
    "label": "GetChildrenAsArray()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetChildrenAsArray(int32 TransformIndex)"
  },
  {
    "label": "FindChildren()",
    "kind": "Method",
    "detail": "Function (const TSet<int32>*)",
    "insertText": "FindChildren(int32 TransformIndex)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParent(int32 TransformIndex)"
  },
  {
    "label": "EnumerateChildTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateChildTransforms(int32 TransformIndex, TFunctionRef<bool(int32)> ShouldProcess, TFunctionRef<void(int32)> ProcessTransformFunc)"
  },
  {
    "label": "GetInitialLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInitialLevel(int32 TransformIndex)"
  },
  {
    "label": "GenerateLevelAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLevelAttribute()"
  },
  {
    "label": "GetTransformArrayInDepthFirstOrder()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetTransformArrayInDepthFirstOrder()"
  },
  {
    "label": "ComputeTransformIndicesInDepthFirstOrder()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ComputeTransformIndicesInDepthFirstOrder()"
  },
  {
    "label": "ComputeTransformIndicesInBreadthFirstOrder()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "ComputeTransformIndicesInBreadthFirstOrder()"
  },
  {
    "label": "GenerateBreadthFirstOrderIndicesAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBreadthFirstOrderIndicesAttribute()"
  },
  {
    "label": "GetBreadthFirstOrderIndicesFromAttribute()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetBreadthFirstOrderIndicesFromAttribute()"
  },
  {
    "label": "GetRootIndices()",
    "kind": "Method",
    "detail": "Function (public : TArray<int32>)",
    "insertText": "GetRootIndices(const TManagedArrayAccessor<int32>& ParentAttribute)"
  }
]