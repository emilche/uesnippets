[
  {
    "label": "UPlanarReflectionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlanarReflectionComponent"
  },
  {
    "label": "FPlanarReflectionRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionRenderTarget"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FPlanarReflectionRenderTarget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" UnrealClient . h \" # include \" Matrix3x4 . h \" const int32 GMaxPlanarReflectionViews = 2 ; class UPlanarReflectionComponent ; class FPlanarReflectionRenderTarget : public FTexture,public FRenderTarget { public :)",
    "insertText": "FPlanarReflectionRenderTarget(FIntPoint InSize) : Size(InSize)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase&)"
  },
  {
    "label": "SamplerStateInitializer()",
    "kind": "Method",
    "detail": "Function (FSamplerStateInitializerRHI)",
    "insertText": "SamplerStateInitializer(SF_Bilinear, AM_Clamp, AM_Clamp, AM_Clamp)"
  },
  {
    "label": "GetOrCreateSamplerState()",
    "kind": "Method",
    "detail": "Function (SamplerStateRHI =)",
    "insertText": "GetOrCreateSamplerState(SamplerStateInitializer)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (const FRHITextureCreateDesc Desc =)",
    "insertText": "Create2D(TEXT(\"FPlanarReflectionRenderTarget\")) .SetExtent(GetSizeXY()) .SetFormat(PF_FloatRGBA) .SetClearValue(FClearValueBinding::Black) .SetFlags(ETextureCreateFlags::RenderTargetable | ETextureCreateFlags::ShaderResource) .SetInitialState(ERHIAccess::SRVMask)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (RenderTargetTextureRHI = TextureRHI =)",
    "insertText": "RHICreateTexture(Desc)"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetGPUMask()",
    "kind": "Method",
    "detail": "Function (} FRHIGPUMask)",
    "insertText": "GetGPUMask(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "FPlanarReflectionSceneProxy()",
    "kind": "Method",
    "detail": "Function (ActiveGPUMask = InGPUMask ; } private : FRHIGPUMask ActiveGPUMask ; FIntPoint Size ; } ; class FPlanarReflectionSceneProxy { public :)",
    "insertText": "FPlanarReflectionSceneProxy(UPlanarReflectionComponent* Component)"
  },
  {
    "label": "UpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransform(const FMatrix& NewTransform)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (PlanarReflectionOrigin = NewTransform .)",
    "insertText": "TransformPosition(FVector::ZeroVector)"
  },
  {
    "label": "FPlane()",
    "kind": "Method",
    "detail": "Function (ReflectionPlane =)",
    "insertText": "FPlane(PlanarReflectionOrigin, NewTransform.TransformVector(FVector(0, 0, 1)))"
  },
  {
    "label": "LocalExtent()",
    "kind": "Method",
    "detail": "Function (const float MeshExtent = 2 0 0 0 . 0 f ; FVector)",
    "insertText": "LocalExtent(MeshExtent, MeshExtent, DistanceFromPlaneFadeEnd)"
  },
  {
    "label": "LocalBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "LocalBounds(-LocalExtent, LocalExtent)"
  },
  {
    "label": "TransformBy()",
    "kind": "Method",
    "detail": "Function (WorldBounds = LocalBounds .)",
    "insertText": "TransformBy(NewTransform)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (const FVector XAxis = NewTransform .)",
    "insertText": "TransformVector(FVector(1, 0, 0))"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal XAxisLength = XAxis .)",
    "insertText": "Size()"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (PlanarReflectionXAxis =)",
    "insertText": "FVector4(XAxis / FMath::Max(XAxisLength, UE_DELTA), XAxisLength * MeshExtent)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (const FVector YAxis = NewTransform .)",
    "insertText": "TransformVector(FVector(0, 1, 0))"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (PlanarReflectionYAxis =)",
    "insertText": "FVector4(YAxis / FMath::Max(YAxisLength, UE_DELTA), YAxisLength * MeshExtent)"
  },
  {
    "label": "MirrorMatrix()",
    "kind": "Method",
    "detail": "Function (const FMirrorMatrix)",
    "insertText": "MirrorMatrix(ReflectionPlane)"
  },
  {
    "label": "TransposeAdjoint()",
    "kind": "Method",
    "detail": "Function (const FMatrix InverseTransposeMirrorMatrix4x4 = MirrorMatrix .)",
    "insertText": "TransposeAdjoint()"
  },
  {
    "label": "SetMatrix()",
    "kind": "Method",
    "detail": "Function (InverseTransposeMirrorMatrix .)",
    "insertText": "SetMatrix(InverseTransposeMirrorMatrix4x4)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset)"
  },
  {
    "label": "ShiftBy()",
    "kind": "Method",
    "detail": "Function (WorldBounds = WorldBounds .)",
    "insertText": "ShiftBy(InOffset)"
  },
  {
    "label": "FPlane()",
    "kind": "Method",
    "detail": "Function (PlanarReflectionOrigin + = InOffset ; ReflectionPlane =)",
    "insertText": "FPlane(PlanarReflectionOrigin, ReflectionPlane)"
  }
]