[
  {
    "label": "LossNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LossNotification"
  },
  {
    "label": "LossNotification()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_LOSS_NOTIFICATION_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_LOSS_NOTIFICATION_H_ # include \" absl / base / attributes . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / common_header . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / psfb . h \" namespace webrtc { namespace rtcp { class LossNotification : public Psfb { public :)",
    "insertText": "LossNotification()"
  },
  {
    "label": "LossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LossNotification(uint16_t last_decoded, uint16_t last_received, bool decodability_flag)"
  },
  {
    "label": "LossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LossNotification(const LossNotification& other)"
  },
  {
    "label": "BlockLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "BlockLength()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT bool)",
    "insertText": "Set(uint16_t last_decoded, uint16_t last_received, bool decodability_flag)"
  },
  {
    "label": "last_decoded()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "last_decoded()"
  }
]