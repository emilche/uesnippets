[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FTrackedStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackedStat"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SDataGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDataGraph"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" ProfilerDataSource . h \" class FPaintArgs ; class FSlateWindowElementList ; class FTrackedStat ; class SVerticalBox ; namespace EDataGraphViewModes { enum Type { Time,Index,InvalidOrMax } ; } namespace EDataGraphMultiModes { enum Type { Combined,OneLinePerDataSource,InvalidOrMax,} ; })",
    "insertText": "DECLARE_DELEGATE_OneParam(FGraphOffsetChangedDelegate, int)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(int32, FGetHoveredFrameIndexDelegate)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FViewModeChangedDelegate, EDataGraphViewModes::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FSelectionChangedForTimeDelegate, float , float)"
  },
  {
    "label": "SDataGraph()",
    "kind": "Method",
    "detail": "Function (class SDataGraph : public SCompoundWidget { public :)",
    "insertText": "SDataGraph()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SDataGraph ) : _OnGraphOffsetChanged() , _OnViewModeChanged()"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_EVENT(FGraphOffsetChangedDelegate, OnGraphOffsetChanged ) SLATE_EVENT( FViewModeChangedDelegate, OnViewModeChanged ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(SDataGraph, FSelectionChangedForIndexEvent, uint32 , uint32)"
  },
  {
    "label": "OnSelectionChangedForIndex()",
    "kind": "Method",
    "detail": "Function (FSelectionChangedForIndexEvent&)",
    "insertText": "OnSelectionChangedForIndex()"
  },
  {
    "label": "AddInnerGraph()",
    "kind": "Method",
    "detail": "Function (protected : FSelectionChangedForIndexEvent SelectionChangedForIndexEvent ; public : void)",
    "insertText": "AddInnerGraph(const TSharedPtr<FTrackedStat>& TrackedStat)"
  },
  {
    "label": "RemoveInnerGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInnerGraph(const uint32 StatID)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(int32 InGraphOffset)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (GraphOffset =)",
    "insertText": "Clamp(InGraphOffset, 0, FMath::Max(NumDataPoints-NumVisiblePoints,0))"
  },
  {
    "label": "GetNumVisiblePoints()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetNumVisiblePoints()"
  },
  {
    "label": "DataGraphSummary_GetHoveredFrameIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DataGraphSummary_GetHoveredFrameIndex()"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FVector2D& ScreenSpacePosition, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "ViewMode_SetIndexBased_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ViewMode_SetIndexBased_Execute()"
  },
  {
    "label": "ViewMode_SetIndexBased_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ViewMode_SetIndexBased_CanExecute()"
  },
  {
    "label": "ViewMode_SetIndexBased_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ViewMode_SetIndexBased_IsChecked()"
  },
  {
    "label": "ViewMode_SetTimeBased_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ViewMode_SetTimeBased_Execute()"
  },
  {
    "label": "ViewMode_SetTimeBased_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ViewMode_SetTimeBased_CanExecute()"
  },
  {
    "label": "ViewMode_SetTimeBased_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ViewMode_SetTimeBased_IsChecked()"
  },
  {
    "label": "GetFirstGraph()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FTrackedStat>)",
    "insertText": "GetFirstGraph()"
  }
]