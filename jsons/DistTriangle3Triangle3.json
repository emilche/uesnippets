[
  {
    "label": "TDistTriangle3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistTriangle3Triangle3"
  },
  {
    "label": "TDistTriangle3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" SegmentTypes . h \" # include \" DistSegment3Triangle3 . h \" # include \" DistPoint3Triangle3 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistTriangle3Triangle3 { public : Real DistanceSquared = - 1 . 0 ; TVector<Real> TriangleClosest [ 2 ] ; TVector<Real> TriangleBaryCoords [ 2 ] ;)",
    "insertText": "TDistTriangle3Triangle3()"
  },
  {
    "label": "TDistTriangle3Triangle3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDistTriangle3Triangle3(const TTriangle3<Real>& TriangleA, const TTriangle3<Real>& TriangleB)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (Triangle [ 0 ] = TriangleA ; Triangle [ 1 ] = TriangleB ; } void)",
    "insertText": "SetTriangle(int WhichTriangle, const TTriangle3<Real>& TriangleIn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Triangle [ WhichTriangle ] = TriangleIn ; DistanceSquared = - 1 . 0 ; } Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "edge()",
    "kind": "Method",
    "detail": "Function (TSegment3<Real>)",
    "insertText": "edge(Triangle[0].V[i0], Triangle[0].V[i1])"
  },
  {
    "label": "queryST()",
    "kind": "Method",
    "detail": "Function (TDistSegment3Triangle3<Real>)",
    "insertText": "queryST(edge, Triangle[1])"
  },
  {
    "label": "i0()",
    "kind": "Method",
    "detail": "Function (TriangleClosest [ 0 ] = queryST . SegmentClosest ; TriangleClosest [ 1 ] = queryST . TriangleClosest ; sqrDist = sqrDistTmp ; ratio = queryST . SegmentParameter / edge . Extent ; TriangleBaryCoords [ 0 ] [)",
    "insertText": "i0(0.5) * (1 - ratio)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TriangleBaryCoords [ 0 ] [ i1 ] = 1 - TriangleBaryCoords [ 0 ] [ i0 ] ; TriangleBaryCoords [ 0 ] [ 3 - i0 - i1 ] = 0 ; TriangleBaryCoords [ 1 ] = queryST . TriangleBaryCoords ;)",
    "insertText": "if(sqrDist <= TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DistanceSquared = 0 ; return 0 ; } } })",
    "insertText": "for(i0 = 2, i1 = 0; i1 < 3; i0 = i1++)"
  },
  {
    "label": "edge()",
    "kind": "Method",
    "detail": "Function (TSegment3<Real>)",
    "insertText": "edge(Triangle[1].V[i0], Triangle[1].V[i1])"
  },
  {
    "label": "queryST()",
    "kind": "Method",
    "detail": "Function (TDistSegment3Triangle3<Real>)",
    "insertText": "queryST(edge, Triangle[0])"
  }
]