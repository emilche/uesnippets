[
  {
    "label": "FMeshTriInfoCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshTriInfoCache"
  },
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "GetTriInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicVector . h \" # include \" Async / ParallelFor . h \" # include \" MeshQueries . h \" namespace UE { namespace Geometry { struct FMeshTriInfoCache { TDynamicVector<FVector3d> Centroids ; TDynamicVector<FVector3d> Normals ; TDynamicVector<double> Areas ; void)",
    "insertText": "GetTriInfo(int TriangleID, FVector3d& NormalOut, double& AreaOut, FVector3d& CentroidOut)"
  },
  {
    "label": "BuildTriInfoCache()",
    "kind": "Method",
    "detail": "Function (NormalOut = Normals [ TriangleID ] ; AreaOut = Areas [ TriangleID ] ; CentroidOut = Centroids [ TriangleID ] ; } template<class TriangleMeshType> FMeshTriInfoCache)",
    "insertText": "BuildTriInfoCache(const TriangleMeshType& Mesh)"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (FMeshTriInfoCache Cache ; int NT = Mesh .)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Cache . Centroids .)",
    "insertText": "Resize(NT)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NT, [&](int TID) { if (Mesh.IsTriangle(TID)) { TMeshQueries<TriangleMeshType>::GetTriNormalAreaCentroid(Mesh, TID, Cache.Normals[TID], Cache.Areas[TID], Cache.Centroids[TID]); } })"
  }
]