[
  {
    "label": "scalar_constant_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_constant_op"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "scalar_identity_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_identity_op"
  },
  {
    "label": "linspaced_op_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "linspaced_op_impl"
  },
  {
    "label": "linspaced_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "linspaced_op"
  },
  {
    "label": "functor_has_linear_access",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_has_linear_access"
  },
  {
    "label": "has_nullary_operator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_nullary_operator"
  },
  {
    "label": "has_unary_operator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_unary_operator"
  },
  {
    "label": "has_binary_operator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_binary_operator"
  },
  {
    "label": "scalar_constant_op()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NULLARY_FUNCTORS_H # define EIGEN_NULLARY_FUNCTORS_H namespace Eigen { namespace internal { template<Scalar> struct scalar_constant_op { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other)"
  },
  {
    "label": "scalar_constant_op()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "scalar_constant_op(const Scalar& other) : m_other(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator() ()"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} const Scalar m_other ; } ; template<Scalar> struct functor_traits<scalar_constant_op<Scalar>> { enum { Cost = 0,PacketAccess = packet_traits<Scalar>::Vectorizable,IsRepeatable = true } ; } ; template<Scalar> struct scalar_identity_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_identity_op) template<typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() (IndexType row, IndexType col)"
  },
  {
    "label": "linspaced_op_impl()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_identity_op<Scalar>> { enum { Cost = NumTraits<Scalar>::AddCost,PacketAccess = false,IsRepeatable = true } ; } ; template<Scalar,bool IsInteger> struct linspaced_op_impl ; template<Scalar> struct linspaced_op_impl<Scalar,false> { typedef NumTraits<Scalar>::Real RealScalar ; EIGEN_DEVICE_FUNC)",
    "insertText": "linspaced_op_impl(const Scalar& low, const Scalar& high, Index num_steps) : m_low(low), m_high(high), m_size1(num_steps==1 ? 1 : num_steps-1), m_step(num_steps==1 ? Scalar() : Scalar((high-low)/RealScalar(num_steps-1))), m_flip(numext::abs(high)<numext::abs(low))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator() (IndexType i)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet,IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(IndexType i)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet pi = plset<)",
    "insertText": "Packet(Scalar(i-m_size1))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (Packet res =)",
    "insertText": "padd(pset1<Packet>(m_high), pmul(pset1<Packet>(m_step), pi))"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet mask =)",
    "insertText": "pcmp_lt(pset1<Packet>(0), plset<Packet>(0))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} else { Packet pi = plset<)",
    "insertText": "Packet(Scalar(i))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (Packet res =)",
    "insertText": "padd(pset1<Packet>(m_low), pmul(pset1<Packet>(m_step), pi))"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet mask =)",
    "insertText": "pcmp_lt(plset<Packet>(0), pset1<Packet>(unpacket_traits<Packet>::size-1))"
  },
  {
    "label": "linspaced_op_impl()",
    "kind": "Method",
    "detail": "Function (} } const Scalar m_low ; const Scalar m_high ; const Index m_size1 ; const Scalar m_step ; const bool m_flip ; } ; template<Scalar> struct linspaced_op_impl<Scalar,true> { EIGEN_DEVICE_FUNC)",
    "insertText": "linspaced_op_impl(const Scalar& low, const Scalar& high, Index num_steps) : m_low(low), m_multiplier((high-low)/convert_index<Scalar>(num_steps<=1 ? 1 : num_steps-1)), m_divisor(convert_index<Scalar>((high>=low?num_steps:-num_steps)+(high-low))/((numext::abs(high-low)+1)==0?1:(numext::abs(high-low)+1))), m_use_divisor(num_steps>1 && (numext::abs(high-low)+1)<num_steps)"
  },
  {
    "label": "PacketAccess()",
    "kind": "Method",
    "detail": "Function (} const Scalar m_low ; const Scalar m_multiplier ; const Scalar m_divisor ; const bool m_use_divisor ; } ; template<Scalar> struct linspaced_op ; template<Scalar> struct functor_traits<linspaced_op<Scalar>> { enum { Cost = 1,)",
    "insertText": "PacketAccess(!NumTraits<Scalar>::IsInteger)"
  },
  {
    "label": "linspaced_op()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar> struct linspaced_op { EIGEN_DEVICE_FUNC)",
    "insertText": "linspaced_op(const Scalar& low, const Scalar& high, Index num_steps) : impl((num_steps==1 ? high : low),high,num_steps)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const linspaced_op_impl<Scalar,NumTraits<Scalar>::IsInteger> impl ; } ; template<Functor> struct functor_has_linear_access { enum { ret = ! has_binary_operator<Functor>::value } ; } ; #)",
    "insertText": "if((EIGEN_COMP_MSVC>1600) || (EIGEN_GNUC_AT_LEAST(4,8)) || (EIGEN_COMP_ICC>=1600))"
  }
]