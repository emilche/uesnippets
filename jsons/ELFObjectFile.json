[
  {
    "label": "elf_symbol_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "elf_symbol_iterator"
  },
  {
    "label": "ELFSymbolRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFSymbolRef"
  },
  {
    "label": "ELFRelocationRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFRelocationRef"
  },
  {
    "label": "ELFObjectFileBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFObjectFileBase"
  },
  {
    "label": "ELFSectionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFSectionRef"
  },
  {
    "label": "elf_section_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "elf_section_iterator"
  },
  {
    "label": "elf_relocation_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "elf_relocation_iterator"
  },
  {
    "label": "ELFT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFT"
  },
  {
    "label": "ELFObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFObjectFile"
  },
  {
    "label": "ELFObjectFileBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_ELFOBJECTFILE_H # define LLVM_OBJECT_ELFOBJECTFILE_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringSwitch . h \" # include \" llvm / ADT / Triple . h \" # include \" llvm / Object / ELF . h \" # include \" llvm / Object / ObjectFile . h \" # include \" llvm / Support / Casting . h \" # include \" llvm / Support / ELF . h \" # include \" llvm / Support / Endian . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / MemoryBuffer . h \" # include \" llvm / Support / raw_ostream . h \" # include<algorithm> # include<cctype> # include<limits> # include<utility> namespace llvm { namespace object { class elf_symbol_iterator ; class ELFSymbolRef ; class ELFRelocationRef ; class ELFObjectFileBase : public ObjectFile { class ELFSymbolRef ; class ELFSectionRef ; class ELFRelocationRef ; protected :)",
    "insertText": "ELFObjectFileBase(unsigned int Type, MemoryBufferRef Source)"
  },
  {
    "label": "getSymbolSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSymbolSize(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolOther()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "getSymbolOther(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolELFType()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "getSymbolELFType(DataRefImpl Symb)"
  },
  {
    "label": "getSectionType()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSectionType(DataRefImpl Sec)"
  },
  {
    "label": "getSectionFlags()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionFlags(DataRefImpl Sec)"
  },
  {
    "label": "getRelocationAddend()",
    "kind": "Method",
    "detail": "Function (ErrorOr<int64_t>)",
    "insertText": "getRelocationAddend(DataRefImpl Rel)"
  },
  {
    "label": "getDynamicSymbolIterators()",
    "kind": "Method",
    "detail": "Function (public : typedef iterator_range<elf_symbol_iterator> elf_symbol_iterator_range ; elf_symbol_iterator_range)",
    "insertText": "getDynamicSymbolIterators()"
  },
  {
    "label": "symbols()",
    "kind": "Method",
    "detail": "Function (elf_symbol_iterator_range)",
    "insertText": "symbols()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const Binary *v)"
  },
  {
    "label": "ELFSectionRef()",
    "kind": "Method",
    "detail": "Function (} } ; class ELFSectionRef : public SectionRef { public :)",
    "insertText": "ELFSectionRef(const SectionRef &B) : SectionRef(B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<ELFObjectFileBase>(SectionRef::getObject()))"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} const ELFObjectFileBase*)",
    "insertText": "getObject()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getType()"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getFlags()"
  },
  {
    "label": "elf_section_iterator()",
    "kind": "Method",
    "detail": "Function (} } ; class elf_section_iterator : public section_iterator { public :)",
    "insertText": "elf_section_iterator(const section_iterator &B) : section_iterator(B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<ELFObjectFileBase>(B->getObject()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ELFSectionRef*)",
    "insertText": "operator()"
  },
  {
    "label": "ELFSymbolRef()",
    "kind": "Method",
    "detail": "Function (} } ; class ELFSymbolRef : public SymbolRef { public :)",
    "insertText": "ELFSymbolRef(const SymbolRef &B) : SymbolRef(B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<ELFObjectFileBase>(SymbolRef::getObject()))"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getSize()"
  },
  {
    "label": "getOther()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "getOther()"
  },
  {
    "label": "getELFType()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "getELFType()"
  },
  {
    "label": "elf_symbol_iterator()",
    "kind": "Method",
    "detail": "Function (} } ; class elf_symbol_iterator : public symbol_iterator { public :)",
    "insertText": "elf_symbol_iterator(const basic_symbol_iterator &B) : symbol_iterator(SymbolRef(B->getRawDataRefImpl(), cast<ELFObjectFileBase>(B->getObject())))"
  },
  {
    "label": "ELFRelocationRef()",
    "kind": "Method",
    "detail": "Function (} } ; class ELFRelocationRef : public RelocationRef { public :)",
    "insertText": "ELFRelocationRef(const RelocationRef &B) : RelocationRef(B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<ELFObjectFileBase>(RelocationRef::getObject()))"
  },
  {
    "label": "getAddend()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<int64_t>)",
    "insertText": "getAddend()"
  },
  {
    "label": "elf_relocation_iterator()",
    "kind": "Method",
    "detail": "Function (} } ; class elf_relocation_iterator : public relocation_iterator { public :)",
    "insertText": "elf_relocation_iterator(const relocation_iterator &B) : relocation_iterator(RelocationRef( B->getRawDataRefImpl(), cast<ELFObjectFileBase>(B->getObject())))"
  },
  {
    "label": "getSymbolSize()",
    "kind": "Method",
    "detail": "Function (} template<class ELFT> class ELFObjectFile : public ELFObjectFileBase { uint64_t)",
    "insertText": "getSymbolSize(DataRefImpl Sym)"
  },
  {
    "label": "LLVM_ELF_IMPORT_TYPES_ELFT()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LLVM_ELF_IMPORT_TYPES_ELFT(ELFT)"
  },
  {
    "label": "moveSymbolNext()",
    "kind": "Method",
    "detail": "Function (typedef ELFFile<ELFT>::Elf_Sym Elf_Sym ; typedef ELFFile<ELFT>::Elf_Shdr Elf_Shdr ; typedef ELFFile<ELFT>::Elf_Ehdr Elf_Ehdr ; typedef ELFFile<ELFT>::Elf_Rel Elf_Rel ; typedef ELFFile<ELFT>::Elf_Rela Elf_Rela ; typedef ELFFile<ELFT>::Elf_Dyn Elf_Dyn ; typedef ELFFile<ELFT>::Elf_Dyn_Iter Elf_Dyn_Iter ; protected : ELFFile<ELFT> EF ; void)",
    "insertText": "moveSymbolNext(DataRefImpl &Symb)"
  },
  {
    "label": "getSymbolName()",
    "kind": "Method",
    "detail": "Function (ErrorOr<StringRef>)",
    "insertText": "getSymbolName(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolAddress()",
    "kind": "Method",
    "detail": "Function (ErrorOr<uint64_t>)",
    "insertText": "getSymbolAddress(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolValueImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSymbolValueImpl(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolAlignment()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSymbolAlignment(DataRefImpl Symb)"
  },
  {
    "label": "getCommonSymbolSizeImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getCommonSymbolSizeImpl(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolFlags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSymbolFlags(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolType()",
    "kind": "Method",
    "detail": "Function (SymbolRef::Type)",
    "insertText": "getSymbolType(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolSection()",
    "kind": "Method",
    "detail": "Function (section_iterator)",
    "insertText": "getSymbolSection(const Elf_Sym *Symb)"
  },
  {
    "label": "getSymbolSection()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSymbolSection(DataRefImpl Symb, section_iterator &Res)"
  },
  {
    "label": "moveSectionNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveSectionNext(DataRefImpl &Sec)"
  },
  {
    "label": "getSectionName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSectionName(DataRefImpl Sec, StringRef &Res)"
  },
  {
    "label": "getSectionAddress()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionAddress(DataRefImpl Sec)"
  },
  {
    "label": "getSectionSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionSize(DataRefImpl Sec)"
  },
  {
    "label": "getSectionContents()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSectionContents(DataRefImpl Sec, StringRef &Res)"
  },
  {
    "label": "getSectionAlignment()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionAlignment(DataRefImpl Sec)"
  },
  {
    "label": "isSectionText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionText(DataRefImpl Sec)"
  },
  {
    "label": "isSectionData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionData(DataRefImpl Sec)"
  },
  {
    "label": "isSectionBSS()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionBSS(DataRefImpl Sec)"
  },
  {
    "label": "isSectionVirtual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionVirtual(DataRefImpl Sec)"
  },
  {
    "label": "section_rel_begin()",
    "kind": "Method",
    "detail": "Function (relocation_iterator)",
    "insertText": "section_rel_begin(DataRefImpl Sec)"
  },
  {
    "label": "section_rel_end()",
    "kind": "Method",
    "detail": "Function (relocation_iterator)",
    "insertText": "section_rel_end(DataRefImpl Sec)"
  },
  {
    "label": "getRelocatedSection()",
    "kind": "Method",
    "detail": "Function (section_iterator)",
    "insertText": "getRelocatedSection(DataRefImpl Sec)"
  },
  {
    "label": "moveRelocationNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveRelocationNext(DataRefImpl &Rel)"
  },
  {
    "label": "getRelocationOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getRelocationOffset(DataRefImpl Rel)"
  },
  {
    "label": "getRelocationSymbol()",
    "kind": "Method",
    "detail": "Function (symbol_iterator)",
    "insertText": "getRelocationSymbol(DataRefImpl Rel)"
  },
  {
    "label": "getRelocationType()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getRelocationType(DataRefImpl Rel)"
  },
  {
    "label": "getRelocationTypeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getRelocationTypeName(DataRefImpl Rel, SmallVectorImpl<char> &Result)"
  },
  {
    "label": "getRelocationTypeName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getRelocationTypeName(uint32_t Type)"
  },
  {
    "label": "getRelSection()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr*)",
    "insertText": "getRelSection(DataRefImpl Rel)"
  },
  {
    "label": "toELFSymIter()",
    "kind": "Method",
    "detail": "Function (} const Elf_Sym*)",
    "insertText": "toELFSymIter(DataRefImpl Sym)"
  },
  {
    "label": "toDRI()",
    "kind": "Method",
    "detail": "Function (} DataRefImpl)",
    "insertText": "toDRI(const Elf_Shdr *SymTable, unsigned SymbolNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DataRefImpl DRI ;)",
    "insertText": "if(!SymTable)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (DRI . d . a = 0 ; DRI . d . b = 0 ; return DRI ; })",
    "insertText": "assert(SymTable->sh_type == ELF::SHT_SYMTAB || SymTable->sh_type == ELF::SHT_DYNSYM)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t SHT = reinterpret_cast<)",
    "insertText": "uintptr_t(EF.section_begin())"
  },
  {
    "label": "SymTableIndex()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "SymTableIndex(reinterpret_cast<uintptr_t>(SymTable) - SHT) / sizeof(Elf_Shdr)"
  },
  {
    "label": "toELFShdrIter()",
    "kind": "Method",
    "detail": "Function (DRI . d . a = SymTableIndex ; DRI . d . b = SymbolNum ; return DRI ; } const Elf_Shdr*)",
    "insertText": "toELFShdrIter(DataRefImpl Sec)"
  },
  {
    "label": "toDRI()",
    "kind": "Method",
    "detail": "Function (} DataRefImpl)",
    "insertText": "toDRI(const Elf_Shdr *Sec)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (DataRefImpl DRI ; DRI . p = reinterpret_cast<)",
    "insertText": "uintptr_t(Sec)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (DataRefImpl DRI ; DRI . p = reinterpret_cast<)",
    "insertText": "uintptr_t(Dyn.get())"
  },
  {
    "label": "getBinding()",
    "kind": "Method",
    "detail": "Function (unsigned char Binding = ESym ->)",
    "insertText": "getBinding()"
  },
  {
    "label": "getVisibility()",
    "kind": "Method",
    "detail": "Function (unsigned char Visibility = ESym ->)",
    "insertText": "getVisibility()"
  },
  {
    "label": "getRel()",
    "kind": "Method",
    "detail": "Function (const Elf_Rel*)",
    "insertText": "getRel(DataRefImpl Rel)"
  },
  {
    "label": "getRela()",
    "kind": "Method",
    "detail": "Function (const Elf_Rela*)",
    "insertText": "getRela(DataRefImpl Rela)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (const Elf_Sym*)",
    "insertText": "getSymbol(DataRefImpl Symb)"
  },
  {
    "label": "symbol_begin_impl()",
    "kind": "Method",
    "detail": "Function (basic_symbol_iterator)",
    "insertText": "symbol_begin_impl()"
  },
  {
    "label": "symbol_end_impl()",
    "kind": "Method",
    "detail": "Function (basic_symbol_iterator)",
    "insertText": "symbol_end_impl()"
  },
  {
    "label": "dynamic_symbol_begin()",
    "kind": "Method",
    "detail": "Function (elf_symbol_iterator)",
    "insertText": "dynamic_symbol_begin()"
  },
  {
    "label": "dynamic_symbol_end()",
    "kind": "Method",
    "detail": "Function (elf_symbol_iterator)",
    "insertText": "dynamic_symbol_end()"
  },
  {
    "label": "section_begin()",
    "kind": "Method",
    "detail": "Function (section_iterator)",
    "insertText": "section_begin()"
  },
  {
    "label": "section_end()",
    "kind": "Method",
    "detail": "Function (section_iterator)",
    "insertText": "section_end()"
  },
  {
    "label": "getBytesInAddress()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "getBytesInAddress()"
  },
  {
    "label": "getFileFormatName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getFileFormatName()"
  },
  {
    "label": "getArch()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getArch()"
  },
  {
    "label": "getLoadName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getLoadName()"
  },
  {
    "label": "getPlatformFlags()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getPlatformFlags(unsigned &Result)"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (e_flags)",
    "insertText": "getHeader()"
  },
  {
    "label": "getELFFile()",
    "kind": "Method",
    "detail": "Function (} const ELFFile<ELFT>*)",
    "insertText": "getELFFile()"
  },
  {
    "label": "isRelocatableObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isRelocatableObject()"
  },
  {
    "label": "moveSymbolNext()",
    "kind": "Method",
    "detail": "Function (} ; typedef ELFObjectFile<ELFType<support::little,false>> ELF32LEObjectFile ; typedef ELFObjectFile<ELFType<support::little,true>> ELF64LEObjectFile ; typedef ELFObjectFile<ELFType<support::big,false>> ELF32BEObjectFile ; typedef ELFObjectFile<ELFType<support::big,true>> ELF64BEObjectFile ; template<class ELFT> void ELFObjectFile<ELFT)",
    "insertText": "moveSymbolNext(DataRefImpl &Sym)"
  },
  {
    "label": "getSymbolName()",
    "kind": "Method",
    "detail": "Function (+ + Sym . d . b ; } template<class ELFT> ErrorOr<StringRef> ELFObjectFile<ELFT)",
    "insertText": "getSymbolName(DataRefImpl Sym)"
  },
  {
    "label": "toELFSymIter()",
    "kind": "Method",
    "detail": "Function (const Elf_Sym* ESym =)",
    "insertText": "toELFSymIter(Sym)"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* SymTableSec =* EF .)",
    "insertText": "getSection(Sym.d.a)"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* StringTableSec =* EF .)",
    "insertText": "getSection(SymTableSec->sh_link)"
  },
  {
    "label": "getStringTable()",
    "kind": "Method",
    "detail": "Function (StringRef SymTable =* EF .)",
    "insertText": "getStringTable(StringTableSec)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (const Elf_Sym* ESym =)",
    "insertText": "getSymbol(Symb)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t Ret = ESym -> st_value ;)",
    "insertText": "if(ESym->st_shndx == ELF::SHN_ABS)"
  },
  {
    "label": "getSymbolValue()",
    "kind": "Method",
    "detail": "Function (uint64_t Result =)",
    "insertText": "getSymbolValue(Symb)"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (ErrorOr<const Elf_Shdr*> SectionOrErr = EF .)",
    "insertText": "getSection(ESym)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (sh_addr)",
    "insertText": "if(Section)"
  },
  {
    "label": "toELFSymIter()",
    "kind": "Method",
    "detail": "Function (const Elf_Sym* Sym =)",
    "insertText": "toELFSymIter(Symb)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t Result = SymbolRef::SF_None ;)",
    "insertText": "if(ESym->getBinding() != ELF::STB_LOCAL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringRef Name =* NameOrErr ;)",
    "insertText": "if(Name.startswith(\"$d\") || Name.startswith(\"$t\") || Name.startswith(\"$a\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ESym->st_shndx == ELF::SHN_UNDEF)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* ESec =* ESecOrErr ;)",
    "insertText": "if(!ESec) return section_end()"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (DataRefImpl Sec ; Sec . p = reinterpret_cast<)",
    "insertText": "intptr_t(ESec)"
  },
  {
    "label": "getSymbolSection()",
    "kind": "Method",
    "detail": "Function (Res =)",
    "insertText": "getSymbolSection(getSymbol(Symb))"
  },
  {
    "label": "toELFShdrIter()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* ESec =)",
    "insertText": "toELFShdrIter(Sec)"
  },
  {
    "label": "toDRI()",
    "kind": "Method",
    "detail": "Function (Sec =)",
    "insertText": "toDRI(++ESec)"
  },
  {
    "label": "getSectionName()",
    "kind": "Method",
    "detail": "Function (} template<class ELFT> std::error_code ELFObjectFile<ELFT)",
    "insertText": "getSectionName(DataRefImpl Sec, StringRef &Result)"
  },
  {
    "label": "getSectionName()",
    "kind": "Method",
    "detail": "Function (ErrorOr<StringRef> Name = EF .)",
    "insertText": "getSectionName(&*toELFShdrIter(Sec))"
  },
  {
    "label": "error_code()",
    "kind": "Method",
    "detail": "Function (Result =* Name ; return)",
    "insertText": "error_code()"
  },
  {
    "label": "getSectionContents()",
    "kind": "Method",
    "detail": "Function (} template<class ELFT> std::error_code ELFObjectFile<ELFT)",
    "insertText": "getSectionContents(DataRefImpl Sec, StringRef &Result)"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "StringRef((const char *)base() + EShdr->sh_offset, EShdr->sh_size)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (e_shentsize)",
    "insertText": "a(Sec.p - SHT) / EF.getHeader()"
  },
  {
    "label": "Elf_Shdr()",
    "kind": "Method",
    "detail": "Function (RelData . d . b = 0 ; const Elf_Shdr* S = reinterpret_cast<const)",
    "insertText": "Elf_Shdr(Sec.p)"
  },
  {
    "label": "getRelSection()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* RelSec =)",
    "insertText": "getRelSection(RelData)"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (ErrorOr<const Elf_Shdr*> SymSecOrErr = EF .)",
    "insertText": "getSection(RelSec->sh_link)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* SymSec =* SymSecOrErr ; uint32_t SymSecType = SymSec -> sh_type ;)",
    "insertText": "if(SymSecType != ELF::SHT_SYMTAB && SymSecType != ELF::SHT_DYNSYM) report_fatal_error(\"Invalid symbol table section type!\")"
  },
  {
    "label": "section_rel_begin()",
    "kind": "Method",
    "detail": "Function (relocation_iterator Begin =)",
    "insertText": "section_rel_begin(Sec)"
  },
  {
    "label": "getRawDataRefImpl()",
    "kind": "Method",
    "detail": "Function (DataRefImpl RelData = Begin ->)",
    "insertText": "getRawDataRefImpl()"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (RelData . d .)",
    "insertText": "b(S->sh_size / S->sh_entsize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uintX_t Type = EShdr -> sh_type ;)",
    "insertText": "if(Type != ELF::SHT_REL && Type != ELF::SHT_RELA) return section_end()"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (ErrorOr<const Elf_Shdr*> R = EF .)",
    "insertText": "getSection(EShdr->sh_info)"
  },
  {
    "label": "getRelSection()",
    "kind": "Method",
    "detail": "Function (uint32_t symbolIdx ; const Elf_Shdr* sec =)",
    "insertText": "getRelSection(Rel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool IsDyn = Rel . d . b& 1 ; DataRefImpl SymbolData ;)",
    "insertText": "if(IsDyn) SymbolData = toDRI(EF.getDotDynSymSec(), symbolIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(EF.getHeader()->e_type == ELF::ET_REL && \"Only relocatable object files have relocation offsets\")"
  },
  {
    "label": "getRelocationType()",
    "kind": "Method",
    "detail": "Function (uint32_t type =)",
    "insertText": "getRelocationType(Rel)"
  },
  {
    "label": "getRelocationTypeName()",
    "kind": "Method",
    "detail": "Function (EF .)",
    "insertText": "getRelocationTypeName(type, Result)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getRelSection(Rel)->sh_type == ELF::SHT_REL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getRelSection(Rela)->sh_type == ELF::SHT_RELA)"
  },
  {
    "label": "ELFObjectFile()",
    "kind": "Method",
    "detail": "Function (} template<class ELFT> ELFObjectFile<ELFT)",
    "insertText": "ELFObjectFile(MemoryBufferRef Object, std::error_code &EC) : ELFObjectFileBase( getELFType(static_cast<endianness>(ELFT::TargetEndianness) == support::little, ELFT::Is64Bits), Object), EF(Data.getBuffer(), EC)"
  },
  {
    "label": "toDRI()",
    "kind": "Method",
    "detail": "Function (DataRefImpl Sym =)",
    "insertText": "toDRI(EF.getDotSymtabSec(), 0)"
  },
  {
    "label": "getDotSymtabSec()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* SymTab = EF .)",
    "insertText": "getDotSymtabSec()"
  },
  {
    "label": "toDRI()",
    "kind": "Method",
    "detail": "Function (DataRefImpl Sym =)",
    "insertText": "toDRI(SymTab, SymTab->sh_size / sizeof(Elf_Sym))"
  },
  {
    "label": "toDRI()",
    "kind": "Method",
    "detail": "Function (DataRefImpl Sym =)",
    "insertText": "toDRI(EF.getDotDynSymSec(), 0)"
  },
  {
    "label": "getDotDynSymSec()",
    "kind": "Method",
    "detail": "Function (const Elf_Shdr* SymTab = EF .)",
    "insertText": "getDotDynSymSec()"
  },
  {
    "label": "dynamic_table_begin()",
    "kind": "Method",
    "detail": "Function (Elf_Dyn_Iter DI = EF .)",
    "insertText": "dynamic_table_begin()"
  },
  {
    "label": "dynamic_table_end()",
    "kind": "Method",
    "detail": "Function (Elf_Dyn_Iter DE = EF .)",
    "insertText": "dynamic_table_end()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bool IsLittleEndian = ELFT::TargetEndianness = = support::little ;)",
    "insertText": "switch(EF.getHeader()->e_ident[ELF::EI_CLASS])"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bool IsLittleEndian = ELFT::TargetEndianness = = support::little ;)",
    "insertText": "switch(EF.getHeader()->e_machine)"
  }
]