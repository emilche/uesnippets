[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_H_ # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_oom . h \" # include \" base / allocator / partition_allocator / partition_root . h \" namespace partition_alloc {)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void PartitionAllocGlobalInit(OomFunction on_out_of_memory)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void PartitionAllocGlobalUninitForTesting()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<bool thread_safe> struct)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "PartitionAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionAllocator()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(PartitionOptions)"
  },
  {
    "label": "root()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionRoot<thread_safe>*)",
    "insertText": "root()"
  }
]