[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "BranchProbability",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchProbability"
  },
  {
    "label": "BranchProbability()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_BRANCHPROBABILITY_H # define LLVM_SUPPORT_BRANCHPROBABILITY_H # include \" llvm / Support / DataTypes . h \" # include<cassert> namespace llvm { class raw_ostream ; class BranchProbability { uint32_t N ; uint32_t D ; public :)",
    "insertText": "BranchProbability(uint32_t n, uint32_t d) : N(n), D(d)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(d > 0 && \"Denominator cannot be 0!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n <= d && \"Probability cannot be bigger than 1!\")"
  },
  {
    "label": "getZero()",
    "kind": "Method",
    "detail": "Function (} BranchProbability)",
    "insertText": "getZero()"
  },
  {
    "label": "getOne()",
    "kind": "Method",
    "detail": "Function (} BranchProbability)",
    "insertText": "getOne()"
  },
  {
    "label": "getNumerator()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "getNumerator()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} raw_ostream&)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "scale(uint64_t Num)"
  },
  {
    "label": "scaleByInverse()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "scaleByInverse(uint64_t Num)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(BranchProbability RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const BranchProbability &Prob)"
  }
]