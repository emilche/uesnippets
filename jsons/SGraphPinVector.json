[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "SGraphPinVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPinVector"
  },
  {
    "label": "ETextBoxIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextBoxIndex"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" SGraphPin . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" SVectorTextBox . h \" # include \" ScopedTransaction . h \" class SWidget ; class UEdGraphPin ; template<NumericType> class SGraphPinVector : public SGraphPin { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPinVector)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InGraphPinObj)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(SGraphPin::FArguments(), InGraphPinObj)"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UScriptStruct* RotatorStruct = TBaseStructure<FRotator)",
    "insertText": "Get()"
  },
  {
    "label": "bIsRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bIsRotator(GraphPinObj->PinType.PinSubCategoryObject == RotatorStruct)"
  },
  {
    "label": "GetCurrentValue_0()",
    "kind": "Method",
    "detail": "Function (} private : enum ETextBoxIndex { TextBox_0,TextBox_1,TextBox_2,} ; using FVectorType = UE::Math::TVector<NumericType> ; FString)",
    "insertText": "GetCurrentValue_0()"
  },
  {
    "label": "GetCurrentValue_1()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetCurrentValue_1()"
  },
  {
    "label": "GetCurrentValue_2()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetCurrentValue_2()"
  },
  {
    "label": "GetComponentArray()",
    "kind": "Method",
    "detail": "Function (} TArray<FString>)",
    "insertText": "GetComponentArray()"
  },
  {
    "label": "GetDefaultAsString()",
    "kind": "Method",
    "detail": "Function (TArray<FString> VecComponentStrings ; FString DefaultString = GraphPinObj ->)",
    "insertText": "GetDefaultAsString()"
  },
  {
    "label": "TrimStartInline()",
    "kind": "Method",
    "detail": "Function (DefaultString .)",
    "insertText": "TrimStartInline()"
  },
  {
    "label": "TrimEndInline()",
    "kind": "Method",
    "detail": "Function (DefaultString .)",
    "insertText": "TrimEndInline()"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (DefaultString .)",
    "insertText": "ParseIntoArray(VecComponentStrings, TEXT(\",\"), true)"
  },
  {
    "label": "OnChangedValueTextBox_0()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnChangedValueTextBox_0(NumericType NewValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "SetNewValueHelper()",
    "kind": "Method",
    "detail": "Function (const EAxis::Type Axis = bIsRotator ? EAxis::Z : EAxis::X ;)",
    "insertText": "SetNewValueHelper(Axis, NewValue)"
  },
  {
    "label": "OnChangedValueTextBox_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChangedValueTextBox_1(NumericType NewValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnChangedValueTextBox_2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChangedValueTextBox_2(NumericType NewValue, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "SetNewValueHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewValueHelper(EAxis::Type Axis, NumericType NewValue)"
  },
  {
    "label": "GetComponentForAxis()",
    "kind": "Method",
    "detail": "Function (const NumericType OldValue = NewVector .)",
    "insertText": "GetComponentForAxis(Axis)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (const FScopedTransaction)",
    "insertText": "Transaction(NSLOCTEXT(\"GraphEditor\", \"ChangeVectorPinValue\", \"Change Vector Pin Value\"))"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (GraphPinObj ->)",
    "insertText": "Modify()"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FString DefaultValue =)",
    "insertText": "Format(TEXT(\"{0},{1},{2}\"), { NewVector.X, NewVector.Y, NewVector.Z })"
  },
  {
    "label": "GetSchema()",
    "kind": "Method",
    "detail": "Function (GraphPinObj ->)",
    "insertText": "GetSchema()->TrySetDefaultValue(*GraphPinObj, DefaultValue)"
  },
  {
    "label": "ConvertDefaultValueStringToVector()",
    "kind": "Method",
    "detail": "Function (} FVectorType)",
    "insertText": "ConvertDefaultValueStringToVector()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVectorType Vec = FVectorType::ZeroVector ; TDefaultNumericTypeInterface<NumericType> NumericTypeInterface { } ;)",
    "insertText": "if(VecComponentStrings.Num() == 3)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (Vec . X = NumericTypeInterface .)",
    "insertText": "FromString(VecComponentStrings[0], 0).Get(0)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (Vec . Y = NumericTypeInterface .)",
    "insertText": "FromString(VecComponentStrings[1], 0).Get(0)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (Vec . Z = NumericTypeInterface .)",
    "insertText": "FromString(VecComponentStrings[2], 0).Get(0)"
  }
]