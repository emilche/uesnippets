[
  {
    "label": "TPointerSetHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPointerSetHelper"
  },
  {
    "label": "GetUpperBound()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" namespace uLang { template<ElementType,KeyType> class TPointerSetHelper { public : using PointerStorageType = TArray<ElementType*> ; int32_t)",
    "insertText": "GetUpperBound(const PointerStorageType& This, const KeyType& Key)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32_t Lo = 0 ; int32_t Hi = This .)",
    "insertText": "Num()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (ElementType const* const* Elements = This .)",
    "insertText": "GetData()"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Mid(Lo + Hi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Lo = Mid ; } else { Hi = Mid ;)",
    "insertText": "if(Mid == Lo)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} } } return Hi ; } void)",
    "insertText": "Merge(PointerStorageType& This, const PointerStorageType& Other)"
  },
  {
    "label": "ResizeTo()",
    "kind": "Method",
    "detail": "Function (This .)",
    "insertText": "ResizeTo(This.Num() + Other.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ElementType* ItemThis = SrcIndexThis> = 0 ? This [ SrcIndexThis ] : nullptr ; ElementType* ItemOther = SrcIndexOther> = 0 ? Other [ SrcIndexOther ] : nullptr ;)",
    "insertText": "for(int32_t DstIndex = This.Num() - 1; DstIndex >= 0; --DstIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementType* Item ;)",
    "insertText": "if(ItemThis && (!ItemOther || KeyType(*ItemThis) > KeyType(*ItemOther)))"
  }
]