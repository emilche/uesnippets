[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FProjectLauncherMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectLauncherMessage"
  },
  {
    "label": "SProjectLauncherMessageListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherMessageListRow"
  },
  {
    "label": "FProjectLauncherMessage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" SlateOptMacros . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherMessageListRow \" class Error ; struct FProjectLauncherMessage { FText Message ; ELogVerbosity::Type Verbosity ;)",
    "insertText": "FProjectLauncherMessage(const FText& NewMessage, ELogVerbosity::Type InVerbosity) : Message(NewMessage) , Verbosity(InVerbosity)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; class SProjectLauncherMessageListRow : public SMultiColumnTableRow<TSharedPtr<FProjectLauncherMessage>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherMessageListRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FProjectLauncherMessage>, Message) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Message = InArgs . _Message ; SMultiColumnTableRow<TSharedPtr<FProjectLauncherMessage>)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "HandleGetTextColor()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } END_SLATE_FUNCTION_BUILD_OPTIMIZATION private : FSlateColor)",
    "insertText": "HandleGetTextColor()"
  }
]