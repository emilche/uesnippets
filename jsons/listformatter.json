[
  {
    "label": "FieldPositionIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldPositionIterator"
  },
  {
    "label": "FieldPositionHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldPositionHandler"
  },
  {
    "label": "FormattedListData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedListData"
  },
  {
    "label": "ListFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListFormatter"
  },
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "ListFormatInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListFormatInternal"
  },
  {
    "label": "ListFormatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListFormatData"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "ListPatternsSink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListPatternsSink"
  },
  {
    "label": "ListFormatData()",
    "kind": "Method",
    "detail": "Function (# ifndef __LISTFORMATTER_H__ # define __LISTFORMATTER_H__ # include \" unicode / utypes . h \" # include \" unicode / unistr . h \" # include \" unicode / locid . h \" # include \" unicode / formattedvalue . h \" U_NAMESPACE_BEGIN class FieldPositionIterator ; class FieldPositionHandler ; class FormattedListData ; class ListFormatter ; class Hashtable ; struct ListFormatInternal ; struct ListFormatData : public UMemory { UnicodeString twoPattern ; UnicodeString startPattern ; UnicodeString middlePattern ; UnicodeString endPattern ;)",
    "insertText": "ListFormatData(const UnicodeString& two, const UnicodeString& start, const UnicodeString& middle, const UnicodeString& end) : twoPattern(two), startPattern(start), middlePattern(middle), endPattern(end)"
  },
  {
    "label": "FormattedList()",
    "kind": "Method",
    "detail": "Function (} } ; # if ! UCONFIG_NO_FORMATTING # ifndef class U_I18N_API FormattedList : public UMemory,public FormattedValue { public :)",
    "insertText": "FormattedList() : fData(nullptr), fErrorCode(U_INVALID_STATE_ERROR)"
  },
  {
    "label": "FormattedList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedList(FormattedList&& src)"
  },
  {
    "label": "FormattedList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FormattedList()"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toString(UErrorCode& status)"
  },
  {
    "label": "toTempString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toTempString(UErrorCode& status)"
  },
  {
    "label": "appendTo()",
    "kind": "Method",
    "detail": "Function (Appendable&)",
    "insertText": "appendTo(Appendable& appendable, UErrorCode& status)"
  },
  {
    "label": "nextPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextPosition(ConstrainedFieldPosition& cfpos, UErrorCode& status)"
  },
  {
    "label": "FormattedList()",
    "kind": "Method",
    "detail": "Function (private : FormattedListData* fData ; UErrorCode fErrorCode ;)",
    "insertText": "FormattedList(FormattedListData *results) : fData(results), fErrorCode(U_ZERO_ERROR)"
  },
  {
    "label": "FormattedList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedList(UErrorCode errorCode) : fData(nullptr), fErrorCode(errorCode)"
  },
  {
    "label": "ListFormatter()",
    "kind": "Method",
    "detail": "Function (} class ListFormatter ; } ; # endif # endif class U_I18N_API ListFormatter : public UObject { public :)",
    "insertText": "ListFormatter(const ListFormatter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ListFormatter&)",
    "insertText": "operator(const ListFormatter& other)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (ListFormatter*)",
    "insertText": "createInstance(UErrorCode& errorCode)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (ListFormatter*)",
    "insertText": "createInstance(const Locale& locale, UErrorCode& errorCode)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef ListFormatter*)",
    "insertText": "createInstance(const Locale& locale, const char* style, UErrorCode& errorCode)"
  },
  {
    "label": "ListFormatter()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "ListFormatter()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const UnicodeString items[], int32_t n_items, UnicodeString& appendTo, UErrorCode& errorCode)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString&)",
    "insertText": "format(const UnicodeString items[], int32_t n_items, UnicodeString & appendTo, FieldPositionIterator* posIter, UErrorCode& errorCode)"
  },
  {
    "label": "formatStringsToValue()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UCONFIG_NO_FORMATTING # ifndef FormattedList)",
    "insertText": "formatStringsToValue(const UnicodeString items[], int32_t n_items, UErrorCode& errorCode)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef UnicodeString&)",
    "insertText": "format(const UnicodeString items[], int32_t n_items, UnicodeString& appendTo, int32_t index, int32_t &offset, UErrorCode& errorCode)"
  },
  {
    "label": "ListFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListFormatter(const ListFormatData &data, UErrorCode &errorCode)"
  },
  {
    "label": "ListFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListFormatter(const ListFormatInternal* listFormatterInternal)"
  },
  {
    "label": "initializeHash()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "initializeHash(UErrorCode& errorCode)"
  },
  {
    "label": "getListFormatInternal()",
    "kind": "Method",
    "detail": "Function (const ListFormatInternal*)",
    "insertText": "getListFormatInternal(const Locale& locale, const char *style, UErrorCode& errorCode)"
  },
  {
    "label": "loadListFormatInternal()",
    "kind": "Method",
    "detail": "Function (struct ListPatternsSink ; ListFormatInternal*)",
    "insertText": "loadListFormatInternal(const Locale& locale, const char* style, UErrorCode& errorCode)"
  },
  {
    "label": "format_()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format_(const UnicodeString items[], int32_t n_items, UnicodeString& appendTo, int32_t index, int32_t &offset, FieldPositionHandler* handler, UErrorCode& errorCode)"
  }
]