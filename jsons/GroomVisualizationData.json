[
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGroomVisualizationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGroomVisualizationData"
  },
  {
    "label": "FModeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModeRecord"
  },
  {
    "label": "FGroomVisualizationData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Async / Mutex . h \" class FSceneView ; enum class EGroomViewMode : uint8 { None,SimHairStrands,RenderHairStrands,UV,RootUV,RootUDIM,Seed,Dimension,RadiusVariation,Tangent,Color,Roughness,AO,ClumpID,Cluster,ClusterAABB,Group,LODColoration,ControlPoints,MacroGroups,LightBounds,DeepOpacityMaps,MacroGroupScreenRect,SamplePerPixel,CoverageType,TAAResolveType,VoxelsDensity,MeshProjection,Coverage,MaterialDepth,MaterialBaseColor,MaterialRoughness,MaterialSpecular,MaterialTangent,CardGuides,Tile,Memory,Count } ; class FGroomVisualizationData { public : struct FModeRecord { FString ModeString ; FName ModeName ; FText ModeText ; FText ModeDesc ; EGroomViewMode Mode ; bool DefaultComposited ; } ; typedef TMultiMap<FName,FModeRecord> TModeMap ; public :)",
    "insertText": "FGroomVisualizationData() : bIsInitialized(false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetViewMode()",
    "kind": "Method",
    "detail": "Function (EGroomViewMode)",
    "insertText": "GetViewMode(const FName& InModeName)"
  },
  {
    "label": "GetModeDefaultComposited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetModeDefaultComposited(const FName& InModeName)"
  },
  {
    "label": "GetModeMap()",
    "kind": "Method",
    "detail": "Function (const TModeMap&)",
    "insertText": "GetModeMap()"
  },
  {
    "label": "GetGroomVisualizationData()",
    "kind": "Method",
    "detail": "Function (} private : TModeMap ModeMap ; FString ConsoleDocumentationVisualizationMode ; std::atomic_bool bIsInitialized ; UE::FMutex Mutex ; } ; FGroomVisualizationData&)",
    "insertText": "GetGroomVisualizationData()"
  },
  {
    "label": "GetGroomViewMode()",
    "kind": "Method",
    "detail": "Function (EGroomViewMode)",
    "insertText": "GetGroomViewMode(const FSceneView& View)"
  },
  {
    "label": "GetGroomViewModeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetGroomViewModeName(EGroomViewMode In)"
  },
  {
    "label": "IsGroomEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGroomEnabled()"
  },
  {
    "label": "SetGroomEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGroomEnabled(bool In)"
  }
]