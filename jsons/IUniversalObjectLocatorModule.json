[
  {
    "label": "FSubObjectLocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectLocator"
  },
  {
    "label": "FFragmentTypeParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFragmentTypeParameters"
  },
  {
    "label": "IUniversalObjectLocatorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IUniversalObjectLocatorModule"
  },
  {
    "label": "FFragmentTypeParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Modules / ModuleInterface . h \" # include \" UniversalObjectLocatorFwd . h \" # include \" UniversalObjectLocatorFragmentTypeHandle . h \" # include \" UniversalObjectLocatorFragmentType . h \" # include \" UniversalObjectLocatorStringParams . h \" # include \" UniversalObjectLocatorInitializeResult . h \" # include \" UniversalObjectLocatorFragment . h \" # include \" UniversalObjectLocatorFragmentType . h \" # include \" Concepts / GetTypeHashable . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Misc / GeneratedTypeName . h \" struct FSubObjectLocator ; namespace UE::UniversalObjectLocator { struct FFragmentTypeParameters {)",
    "insertText": "FFragmentTypeParameters(FName InFragmentTypeID, FText InDisplayText) : DisplayText(InDisplayText) , FragmentTypeID(InFragmentTypeID) , Flags(EFragmentTypeFlags::None)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} FText DisplayText ; FName FragmentTypeID ; FName PrimaryEditorType ; EFragmentTypeFlags Flags ; } ; class IUniversalObjectLocatorModule : public IModuleInterface { public : template<PayloadStructType)",
    "insertText": "UE_REQUIRES((TStructOpsTypeTraits<PayloadStructType>::WithIdenticalViaEquality || TStructOpsTypeTraits<PayloadStructType>::WithIdentical) && TModels_V<CGetTypeHashable, PayloadStructType> ) > TFragmentTypeHandle<PayloadStructType> RegisterFragmentType(FFragmentTypeParameters& FragmentTypeParameters)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (FFragmentType NewFragmentType ; NewFragmentType . FragmentTypeID = FragmentTypeParameters . FragmentTypeID ; NewFragmentType . PrimaryEditorType = FragmentTypeParameters . PrimaryEditorType ; NewFragmentType . Flags = FragmentTypeParameters . Flags ; NewFragmentType . PayloadType =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (FResolveResult)",
    "insertText": "Resolve(const void* Payload, const FResolveParams& Params)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FInitializeResult)",
    "insertText": "Initialize(void* Payload, const FInitializeParams& InParams)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ; NewFragmentType . InstanceBindings .)",
    "insertText": "ToString(const void* Payload, FStringBuilderBase& OutStringBuilder)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (FParseStringResult)",
    "insertText": "TryParseString(void* Payload, FStringView InString, const FParseStringParams& Params)"
  },
  {
    "label": "FragmentDebugInitializer()",
    "kind": "Method",
    "detail": "Function (} ; # if UE_UNIVERSALOBJECTLOCATOR_DEBUG NewFragmentType . StaticBindings .)",
    "insertText": "FragmentDebugInitializer(void* Payload)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Payload)"
  },
  {
    "label": "PayloadStructType()",
    "kind": "Method",
    "detail": "Function (} ; # endif return TFragmentTypeHandle<)",
    "insertText": "PayloadStructType(RegisterFragmentTypeImpl(NewFragmentType))"
  },
  {
    "label": "RegisterParameterType()",
    "kind": "Method",
    "detail": "Function (} template<ParameterType> TParameterTypeHandle<ParameterType>)",
    "insertText": "RegisterParameterType()"
  },
  {
    "label": "UnregisterParameterType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterParameterType(FParameterTypeHandle InHandle)"
  },
  {
    "label": "UnregisterParameterTypeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterParameterTypeImpl(InHandle)"
  },
  {
    "label": "UnregisterFragmentType()",
    "kind": "Method",
    "detail": "Function (} template<PayloadStructType> void)",
    "insertText": "UnregisterFragmentType(TFragmentTypeHandle<PayloadStructType> FragmentType)"
  },
  {
    "label": "UnregisterFragmentTypeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFragmentTypeImpl(FragmentType)"
  },
  {
    "label": "RegisterFragmentTypeImpl()",
    "kind": "Method",
    "detail": "Function (} private : FFragmentTypeHandle)",
    "insertText": "RegisterFragmentTypeImpl(const FFragmentType& FragmentType)"
  },
  {
    "label": "UnregisterFragmentTypeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFragmentTypeImpl(FFragmentTypeHandle FragmentType)"
  },
  {
    "label": "RegisterParameterTypeImpl()",
    "kind": "Method",
    "detail": "Function (FParameterTypeHandle)",
    "insertText": "RegisterParameterTypeImpl(UScriptStruct* Struct)"
  },
  {
    "label": "UnregisterParameterTypeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterParameterTypeImpl(FParameterTypeHandle ParameterType)"
  }
]