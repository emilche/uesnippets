[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "AudioCodecInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioCodecInfo"
  },
  {
    "label": "AudioCodecSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioCodecSpec"
  },
  {
    "label": "SdpAudioFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_AUDIO_FORMAT_H_ # define API_AUDIO_CODECS_AUDIO_FORMAT_H_ # include<stddef . h> # include<map> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct RTC_EXPORT SdpAudioFormat { using Parameters = std::map<std::string,std::string> ;)",
    "insertText": "SdpAudioFormat(const SdpAudioFormat&)"
  },
  {
    "label": "SdpAudioFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpAudioFormat(SdpAudioFormat&&)"
  },
  {
    "label": "SdpAudioFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpAudioFormat(absl::string_view name, int clockrate_hz, size_t num_channels)"
  },
  {
    "label": "SdpAudioFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpAudioFormat(absl::string_view name, int clockrate_hz, size_t num_channels, const Parameters& param)"
  },
  {
    "label": "SdpAudioFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpAudioFormat(absl::string_view name, int clockrate_hz, size_t num_channels, Parameters&& param)"
  },
  {
    "label": "SdpAudioFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SdpAudioFormat()"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const SdpAudioFormat& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SdpAudioFormat&)",
    "insertText": "operator(const SdpAudioFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SdpAudioFormat&)",
    "insertText": "operator(SdpAudioFormat&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const SdpAudioFormat& a, const SdpAudioFormat& b)"
  },
  {
    "label": "AudioCodecInfo()",
    "kind": "Method",
    "detail": "Function (} std::string name ; int clockrate_hz ; size_t num_channels ; Parameters parameters ; } ; struct AudioCodecInfo {)",
    "insertText": "AudioCodecInfo(int sample_rate_hz, size_t num_channels, int bitrate_bps)"
  },
  {
    "label": "AudioCodecInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioCodecInfo(int sample_rate_hz, size_t num_channels, int default_bitrate_bps, int min_bitrate_bps, int max_bitrate_bps)"
  },
  {
    "label": "AudioCodecInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioCodecInfo(const AudioCodecInfo& b)"
  },
  {
    "label": "AudioCodecInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioCodecInfo()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const AudioCodecInfo& b)"
  },
  {
    "label": "HasFixedBitrate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFixedBitrate()"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(min_bitrate_bps, 0)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(min_bitrate_bps, default_bitrate_bps)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(max_bitrate_bps, default_bitrate_bps)"
  }
]