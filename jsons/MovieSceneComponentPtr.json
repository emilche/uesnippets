[
  {
    "label": "TComponentPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentPtr"
  },
  {
    "label": "TComponentLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentLock"
  },
  {
    "label": "TComponentLockMixin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentLockMixin"
  },
  {
    "label": "FReadErased",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadErased"
  },
  {
    "label": "FReadErasedOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadErasedOptional"
  },
  {
    "label": "TRead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRead"
  },
  {
    "label": "TReadOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOptional"
  },
  {
    "label": "FWriteErased",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteErased"
  },
  {
    "label": "FWriteErasedOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteErasedOptional"
  },
  {
    "label": "TWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWrite"
  },
  {
    "label": "TWriteOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteOptional"
  },
  {
    "label": "TMultiComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMultiComponentData"
  },
  {
    "label": "TComponentPtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" namespace UE { namespace MovieScene { template<T> struct TComponentPtr { using ValueType = std::conditional_t<TIsConst<T>::Value,TCallTraits<T>::ParamType,T&> ;)",
    "insertText": "TComponentPtr() : ComponentPtr(nullptr)"
  },
  {
    "label": "TComponentPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TComponentPtr(T* InComponentPtr) : ComponentPtr(InComponentPtr)"
  },
  {
    "label": "TComponentPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TComponentPtr(const TComponentPtr& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TComponentPtr&)",
    "insertText": "operator(const TComponentPtr& RHS)"
  },
  {
    "label": "TComponentPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TComponentPtr(TComponentPtr&& RHS) : ComponentPtr(RHS.ComponentPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RHS . ComponentPtr = nullptr ; } TComponentPtr&)",
    "insertText": "operator(TComponentPtr&& RHS)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (ComponentPtr = RHS . ComponentPtr ; RHS . ComponentPtr = nullptr ; return* this ; } operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (} TArrayView<T>)",
    "insertText": "Slice(int32 StartIndex, int32 Num)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "TComponentLockMixin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TComponentLockMixin(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode) : Lock(InHeader, InLockMode)"
  },
  {
    "label": "TComponentLockMixin()",
    "kind": "Method",
    "detail": "Function (} private : FScopedHeaderReadLock Lock ; } ; template<> struct TComponentLockMixin<FScopedHeaderWriteLock> {)",
    "insertText": "TComponentLockMixin()"
  },
  {
    "label": "TComponentLockMixin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TComponentLockMixin(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode, FEntityAllocationWriteContext InWriteContext) : Lock(InHeader, InLockMode, InWriteContext)"
  },
  {
    "label": "FReadErased()",
    "kind": "Method",
    "detail": "Function (} private : FScopedHeaderWriteLock Lock ; } ; struct FReadErased {)",
    "insertText": "FReadErased(const FComponentHeader* InHeader, int32 ComponentOffset = 0) : ComponentPtr(InHeader->Components + ComponentOffset*InHeader->Sizeof) , Sizeof(InHeader->Sizeof)"
  },
  {
    "label": "AsPtr()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "AsPtr()"
  },
  {
    "label": "FReadErasedOptional()",
    "kind": "Method",
    "detail": "Function (} const uint8* ComponentPtr ; int32 Sizeof ; } ; struct FReadErasedOptional : FReadErased {)",
    "insertText": "FReadErasedOptional()"
  },
  {
    "label": "FReadErasedOptional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReadErasedOptional(const FComponentHeader* InHeader, int32 ComponentOffset = 0)"
  },
  {
    "label": "ComponentAtIndex()",
    "kind": "Method",
    "detail": "Function (ComponentPtr = InHeader -> Components + ComponentOffset* InHeader -> Sizeof ; Sizeof = InHeader -> Sizeof ; } else { ComponentPtr = nullptr ; Sizeof = 0 ; } } const void*)",
    "insertText": "ComponentAtIndex(int32 Index)"
  },
  {
    "label": "TRead()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TRead : TComponentPtr<const T> {)",
    "insertText": "TRead()"
  },
  {
    "label": "TRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRead(const T* ComponentPtr, int32 ComponentOffset = 0) : TComponentPtr<const T>(ComponentPtr + ComponentOffset)"
  },
  {
    "label": "TRead()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRead(const FComponentHeader* InHeader, int32 ComponentOffset = 0) : TComponentPtr<const T>(reinterpret_cast<const T*>(InHeader->Components) + ComponentOffset)"
  },
  {
    "label": "TReadOptional()",
    "kind": "Method",
    "detail": "Function (} } ; using FReadEntityIDs = TRead<FMovieSceneEntityID> ; template<T> struct TReadOptional : TComponentPtr<const T> {)",
    "insertText": "TReadOptional()"
  },
  {
    "label": "TReadOptional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TReadOptional(const T* InData, int32 ComponentOffset = 0)"
  },
  {
    "label": "TReadOptional()",
    "kind": "Method",
    "detail": "Function (this -> ComponentPtr = InData + ComponentOffset ; } })",
    "insertText": "TReadOptional(const FComponentHeader* InHeader, int32 ComponentOffset = 0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (this -> ComponentPtr = reinterpret_cast<const)",
    "insertText": "T(InHeader->Components)"
  },
  {
    "label": "FWriteErased()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWriteErased(const FComponentHeader* InHeader, int32 ComponentOffset = 0) : ComponentPtr(InHeader->Components + ComponentOffset*InHeader->Sizeof) , Sizeof(InHeader->Sizeof)"
  },
  {
    "label": "FWriteErasedOptional()",
    "kind": "Method",
    "detail": "Function (} protected : uint8* ComponentPtr ; int32 Sizeof ; } ; struct FWriteErasedOptional : FWriteErased {)",
    "insertText": "FWriteErasedOptional()"
  },
  {
    "label": "FWriteErasedOptional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWriteErasedOptional(const FComponentHeader* InHeader, int32 ComponentOffset = 0)"
  },
  {
    "label": "TWrite()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TWrite : TComponentPtr<T> {)",
    "insertText": "TWrite()"
  },
  {
    "label": "TWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWrite(T* InData, int32 ComponentOffset = 0) : TComponentPtr<T>(InData + ComponentOffset)"
  },
  {
    "label": "TWrite()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TWrite(const FComponentHeader* InHeader, int32 ComponentOffset = 0) : TComponentPtr<T>(reinterpret_cast<T*>(InHeader->Components) + ComponentOffset)"
  },
  {
    "label": "TWriteOptional()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TWriteOptional : TComponentPtr<T> {)",
    "insertText": "TWriteOptional()"
  },
  {
    "label": "TWriteOptional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWriteOptional(T* InData, int32 ComponentOffset = 0)"
  },
  {
    "label": "TWriteOptional()",
    "kind": "Method",
    "detail": "Function (this -> ComponentPtr = InData + ComponentOffset ; } })",
    "insertText": "TWriteOptional(const FComponentHeader* InHeader, int32 ComponentOffset = 0)"
  },
  {
    "label": "TComponentLock()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TComponentLock<FReadErasedOptional> : TComponentLockMixin<FScopedHeaderReadLock>,FReadErasedOptional {)",
    "insertText": "TComponentLock()"
  },
  {
    "label": "TComponentLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TComponentLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode, int32 ComponentOffset = 0)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (* static_cast<TComponentLockMixin<)",
    "insertText": "FScopedHeaderReadLock(this) = TComponentLockMixin<FScopedHeaderReadLock>(InHeader, InLockMode)"
  },
  {
    "label": "FReadErasedOptional()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "FReadErasedOptional(this) = FReadErasedOptional(InHeader, ComponentOffset)"
  },
  {
    "label": "TComponentLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TComponentLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode, FEntityAllocationWriteContext InWriteContext, int32 ComponentOffset = 0)"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (* static_cast<TComponentLockMixin<)",
    "insertText": "FScopedHeaderWriteLock(this) = TComponentLockMixin<FScopedHeaderWriteLock>(InHeader, InLockMode, InWriteContext)"
  },
  {
    "label": "FWriteErasedOptional()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "FWriteErasedOptional(this) = FWriteErasedOptional(InHeader, ComponentOffset)"
  },
  {
    "label": "TComponentLock()",
    "kind": "Method",
    "detail": "Function (} } } ; template<T> struct TComponentLock<TRead<T>> : TComponentLockMixin<FScopedHeaderReadLock>,TRead<T> {)",
    "insertText": "TComponentLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode , int32 ComponentOffset = 0) : TComponentLockMixin<FScopedHeaderReadLock>(InHeader, InLockMode) , TRead<T>(InHeader, ComponentOffset)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* static_cast<TReadOptional<)",
    "insertText": "T(this) = TReadOptional<T>(InHeader, ComponentOffset)"
  },
  {
    "label": "TComponentLock()",
    "kind": "Method",
    "detail": "Function (} } } ; template<T> struct TComponentLock<TWrite<T>> : TComponentLockMixin<FScopedHeaderWriteLock>,TWrite<T> {)",
    "insertText": "TComponentLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode, FEntityAllocationWriteContext InWriteContext, int32 ComponentOffset = 0) : TComponentLockMixin<FScopedHeaderWriteLock>(InHeader, InLockMode, InWriteContext) , TWrite<T>(InHeader, ComponentOffset)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* static_cast<TWriteOptional<)",
    "insertText": "T(this) = TWriteOptional<T>(InHeader, ComponentOffset)"
  },
  {
    "label": "TMultiComponentData()",
    "kind": "Method",
    "detail": "Function (} } } ; using FComponentReader = TComponentLock<FReadErased> ; using FOptionalComponentReader = TComponentLock<FReadErasedOptional> ; using FComponentWriter = TComponentLock<FWriteErased> ; using FOptionalComponentWriter = TComponentLock<FWriteErasedOptional> ; template<T> using TComponentReader = TComponentLock<TRead<T>> ; template<T> using TOptionalComponentReader = TComponentLock<TReadOptional<T>> ; template<T> using TComponentWriter = TComponentLock<TWrite<T>> ; template<T> using TOptionalComponentWriter = TComponentLock<TWriteOptional<T>> ; template<. . . T> using TMultiComponentLock = TTuple<TComponentLock<T> . . .> ; template<. . . T> struct TMultiComponentData {)",
    "insertText": "TMultiComponentData(T... InData) : Data(InData...)"
  },
  {
    "label": "TMultiComponentData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMultiComponentData(const TMultiComponentLock<T...>& InAggregateLock)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "Init(const auto& InLock, auto& OutData)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (OutData = InLock ; } } ;)",
    "insertText": "VisitTupleElements(Init, InAggregateLock, this->Data)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<int Index> auto*)",
    "insertText": "Get()"
  },
  {
    "label": "GetAsArray()",
    "kind": "Method",
    "detail": "Function (} template<int Index> auto)",
    "insertText": "GetAsArray(int32 ArraySize)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (auto* ComponentPtr = Data . template Get<)",
    "insertText": "Index().AsPtr()"
  }
]