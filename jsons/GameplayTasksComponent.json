[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayTaskEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTaskEventData"
  },
  {
    "label": "UGameplayTasksComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTasksComponent"
  },
  {
    "label": "FEventLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLock"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / CoreNet . h \" # include \" UObject / ScriptInterface . h \" # include \" Components / ActorComponent . h \" # include \" EngineDefines . h \" # include \" GameplayTaskOwnerInterface . h \" # include \" GameplayTask . h \" # include \" GameplayTaskResource . h \" # include \" VisualLogger / VisualLoggerDebugSnapshotInterface . h \" # include \" GameplayTasksComponent . generated . h \" class AActor ; class Error ; class FOutBunch ; class UActorChannel ; enum class EGameplayTaskEvent : uint8 { Add,Remove,} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FGameplayTaskEventData()",
    "kind": "Method",
    "detail": "Function (Error,Failed,Success_Paused,Success_Active,Success_Finished,} ; struct FGameplayTaskEventData { EGameplayTaskEvent Event ; UGameplayTask& RelatedTask ;)",
    "insertText": "FGameplayTaskEventData(EGameplayTaskEvent InEvent, UGameplayTask& InRelatedTask) : Event(InEvent), RelatedTask(InRelatedTask)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnClaimedResourcesChangeSignature, FGameplayResourceSet, NewlyClaimed, FGameplayResourceSet, FreshlyReleased)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup = GameplayTasks, hidecategories = (Object, LOD, Lighting, Transform, Sockets, TextureStreaming), editinlinenew, meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetSimulatedTasks()",
    "kind": "Method",
    "detail": "Function (int32 EventLockCounter ; uint8 bInEventProcessingInProgress : 1 ; protected : uint8 TopActivePriority ; FGameplayResourceSet CurrentlyClaimedResources ; const TArray<UGameplayTask*>&)",
    "insertText": "GetSimulatedTasks()"
  },
  {
    "label": "SetSimulatedTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulatedTasks(const TArray<UGameplayTask*>& NewSimulatedTasks)"
  },
  {
    "label": "AddSimulatedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSimulatedTask(UGameplayTask* NewTask)"
  },
  {
    "label": "RemoveSimulatedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSimulatedTask(UGameplayTask* NewTask)"
  },
  {
    "label": "UGameplayTasksComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UGameplayTasksComponent(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps)"
  },
  {
    "label": "ReplicateSubobjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicateSubobjects(UActorChannel *Channel, FOutBunch* Bunch, FReplicationFlags* RepFlags)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)"
  },
  {
    "label": "UpdateShouldTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShouldTick()"
  },
  {
    "label": "GetShouldTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShouldTick()"
  },
  {
    "label": "AddTaskReadyForActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskReadyForActivation(UGameplayTask& NewTask)"
  },
  {
    "label": "RemoveResourceConsumingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResourceConsumingTask(UGameplayTask& Task)"
  },
  {
    "label": "EndAllResourceConsumingTasksOwnedBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAllResourceConsumingTasksOwnedBy(const IGameplayTaskOwnerInterface& TaskOwner)"
  },
  {
    "label": "FindAllResourceConsumingTasksOwnedBy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAllResourceConsumingTasksOwnedBy(const IGameplayTaskOwnerInterface& TaskOwner, TArray<UGameplayTask*>& FoundTasks)"
  },
  {
    "label": "FindResourceConsumingTaskByName()",
    "kind": "Method",
    "detail": "Function (UGameplayTask*)",
    "insertText": "FindResourceConsumingTaskByName(const FName TaskInstanceName)"
  },
  {
    "label": "HasActiveTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveTasks(UClass* TaskClass)"
  },
  {
    "label": "GetGameplayTaskOwner()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetGameplayTaskOwner(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskAvatar()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetGameplayTaskAvatar(const UGameplayTask* Task)"
  },
  {
    "label": "OnGameplayTaskActivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnGameplayTaskActivated(UGameplayTask& Task)"
  },
  {
    "label": "OnGameplayTaskDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayTaskDeactivated(UGameplayTask& Task)"
  },
  {
    "label": "ReadyForReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadyForReplication()"
  },
  {
    "label": "RunGameplayTask()",
    "kind": "Method",
    "detail": "Function (EGameplayTaskRunResult)",
    "insertText": "RunGameplayTask(IGameplayTaskOwnerInterface& TaskOwner, UGameplayTask& Task, uint8 Priority, FGameplayResourceSet AdditionalRequiredResources, FGameplayResourceSet AdditionalClaimedResources)"
  },
  {
    "label": "GetTickingTasksDescription()",
    "kind": "Method",
    "detail": "Function (# if WITH_GAMEPLAYTASK_DEBUG FString)",
    "insertText": "GetTickingTasksDescription()"
  },
  {
    "label": "GetKnownTasksDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetKnownTasksDescription()"
  },
  {
    "label": "GetTasksPriorityQueueDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTasksPriorityQueueDescription()"
  },
  {
    "label": "GetTaskStateName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTaskStateName(EGameplayTaskState Value)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# endif using GameplayTaskContainerType =)",
    "insertText": "decltype(TickingTasks)"
  },
  {
    "label": "GetTickingTaskIterator()",
    "kind": "Method",
    "detail": "Function (GameplayTaskContainerType::TConstIterator)",
    "insertText": "GetTickingTaskIterator()"
  },
  {
    "label": "GetKnownTaskIterator()",
    "kind": "Method",
    "detail": "Function (GameplayTaskContainerType::TConstIterator)",
    "insertText": "GetKnownTaskIterator()"
  },
  {
    "label": "GetPriorityQueueIterator()",
    "kind": "Method",
    "detail": "Function (GameplayTaskContainerType::TConstIterator)",
    "insertText": "GetPriorityQueueIterator()"
  },
  {
    "label": "GetSimulatedTaskIterator()",
    "kind": "Method",
    "detail": "Function (GameplayTaskContainerType::TConstIterator)",
    "insertText": "GetSimulatedTaskIterator()"
  },
  {
    "label": "GrabDebugSnapshot()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "GrabDebugSnapshot(FVisualLogEntry* Snapshot)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "FEventLock()",
    "kind": "Method",
    "detail": "Function (# endif protected : struct FEventLock {)",
    "insertText": "FEventLock(UGameplayTasksComponent* InOwner)"
  },
  {
    "label": "FEventLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEventLock()"
  },
  {
    "label": "RequestTicking()",
    "kind": "Method",
    "detail": "Function (protected : UGameplayTasksComponent* Owner ; } ; void)",
    "insertText": "RequestTicking()"
  },
  {
    "label": "ProcessTaskEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessTaskEvents()"
  },
  {
    "label": "UpdateTaskActivations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTaskActivations()"
  },
  {
    "label": "SetCurrentlyClaimedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentlyClaimedResources(FGameplayResourceSet NewClaimedSet)"
  },
  {
    "label": "OnTaskEnded()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnTaskEnded(UGameplayTask& Task)"
  },
  {
    "label": "AddTaskToPriorityQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskToPriorityQueue(UGameplayTask& NewTask)"
  },
  {
    "label": "RemoveTaskFromPriorityQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskFromPriorityQueue(UGameplayTask& Task)"
  },
  {
    "label": "SetSimulatedTasksNetDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSimulatedTasksNetDirty()"
  }
]