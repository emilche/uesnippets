[
  {
    "label": "PostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PostDominatorTree"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "PostDominatorTree()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_POSTDOMINATORS_H # define LLVM_ANALYSIS_POSTDOMINATORS_H # include \" llvm / IR / Dominators . h \" namespace llvm { struct PostDominatorTree : public FunctionPass { char ID ; DominatorTreeBase<BasicBlock>* DT ;)",
    "insertText": "PostDominatorTree() : FunctionPass(ID)"
  },
  {
    "label": "initializePostDominatorTreePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializePostDominatorTreePass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (DT = new DominatorTreeBase<)",
    "insertText": "BasicBlock(true)"
  },
  {
    "label": "PostDominatorTree()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PostDominatorTree()"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (AU .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "getRoots()",
    "kind": "Method",
    "detail": "Function (} const std::vector<BasicBlock*>&)",
    "insertText": "getRoots()"
  },
  {
    "label": "getRootNode()",
    "kind": "Method",
    "detail": "Function (} DomTreeNode*)",
    "insertText": "getRootNode()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DomTreeNode*)",
    "insertText": "operator(BasicBlock *BB)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} DomTreeNode*)",
    "insertText": "getNode(BasicBlock *BB)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "dominates(DomTreeNode* A, DomTreeNode* B)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "dominates(const BasicBlock* A, const BasicBlock* B)"
  },
  {
    "label": "properlyDominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "properlyDominates(const DomTreeNode* A, DomTreeNode* B)"
  },
  {
    "label": "properlyDominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "properlyDominates(BasicBlock* A, BasicBlock* B)"
  },
  {
    "label": "findNearestCommonDominator()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "findNearestCommonDominator(BasicBlock *A, BasicBlock *B)"
  },
  {
    "label": "findNearestCommonDominator()",
    "kind": "Method",
    "detail": "Function (} const BasicBlock*)",
    "insertText": "findNearestCommonDominator(const BasicBlock *A, const BasicBlock *B)"
  },
  {
    "label": "getDescendants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getDescendants(BasicBlock *R, SmallVectorImpl<BasicBlock *> &Result)"
  },
  {
    "label": "getDescendants()",
    "kind": "Method",
    "detail": "Function (DT ->)",
    "insertText": "getDescendants(R, Result)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS, const Module*)"
  },
  {
    "label": "createPostDomTree()",
    "kind": "Method",
    "detail": "Function (} ; FunctionPass*)",
    "insertText": "createPostDomTree()"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (template<> struct GraphTraits<PostDominatorTree*> : public GraphTraits<DomTreeNode*> { NodeType*)",
    "insertText": "getEntryNode(PostDominatorTree *DT)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_begin(PostDominatorTree *N)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(PostDominatorTree *N)"
  }
]