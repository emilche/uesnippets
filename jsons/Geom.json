[
  {
    "label": "GeomElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeomElement"
  },
  {
    "label": "GeomInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeomInfo"
  },
  {
    "label": "GeomProp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeomProp"
  },
  {
    "label": "GeomPropDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeomPropDef"
  },
  {
    "label": "Collection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Collection"
  },
  {
    "label": "CollectionAdd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollectionAdd"
  },
  {
    "label": "CollectionRemove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollectionRemove"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "GeomPath()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_GEOM_H # define MATERIALX_GEOM_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Element . h> MATERIALX_NAMESPACE_BEGIN const string GEOM_PATH_SEPARATOR ; const string UNIVERSAL_GEOM_NAME ; const string UDIM_TOKEN ; const string UV_TILE_TOKEN ; const string UDIM_SET_PROPERTY ; class GeomElement ; class GeomInfo ; class GeomProp ; class GeomPropDef ; class Collection ; class CollectionAdd ; class CollectionRemove ; using GeomElementPtr = shared_ptr<GeomElement> ; using ConstGeomElementPtr = shared_ptr<const GeomElement> ; using GeomInfoPtr = shared_ptr<GeomInfo> ; using ConstGeomInfoPtr = shared_ptr<const GeomInfo> ; using GeomPropPtr = shared_ptr<GeomProp> ; using ConstGeomPropPtr = shared_ptr<const GeomProp> ; using GeomPropDefPtr = shared_ptr<GeomPropDef> ; using ConstGeomPropDefPtr = shared_ptr<const GeomPropDef> ; using CollectionPtr = shared_ptr<Collection> ; using ConstCollectionPtr = shared_ptr<const Collection> ; class GeomPath { public :)",
    "insertText": "GeomPath() : _empty(true)"
  },
  {
    "label": "GeomPath()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GeomPath()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const GeomPath& rhs)"
  },
  {
    "label": "GeomPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GeomPath(const string& geom) : _vec(splitString(geom, GEOM_PATH_SEPARATOR)), _empty(geom.empty())"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "string()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (geom + = _vec [ i ] ;)",
    "insertText": "if(i + 1 < _vec.size())"
  },
  {
    "label": "isMatching()",
    "kind": "Method",
    "detail": "Function (geom + = GEOM_PATH_SEPARATOR ; } } return geom ; } bool)",
    "insertText": "isMatching(const GeomPath& rhs, bool contains = false)"
  },
  {
    "label": "GeomElement()",
    "kind": "Method",
    "detail": "Function (} private : StringVec _vec ; bool _empty ; } ; class GeomElement : public Element { protected :)",
    "insertText": "GeomElement(ElementPtr parent, const string& category, const string& name) : Element(parent, category, name)"
  },
  {
    "label": "GeomElement()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "GeomElement()"
  },
  {
    "label": "setGeom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setGeom(const string& geom)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(GEOM_ATTRIBUTE, geom)"
  },
  {
    "label": "hasGeom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasGeom()"
  },
  {
    "label": "getGeom()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getGeom()"
  },
  {
    "label": "getActiveGeom()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getActiveGeom()"
  },
  {
    "label": "setCollectionString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCollectionString(const string& collection)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(COLLECTION_ATTRIBUTE, collection)"
  },
  {
    "label": "hasCollectionString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasCollectionString()"
  },
  {
    "label": "getCollectionString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getCollectionString()"
  },
  {
    "label": "setCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCollection(ConstCollectionPtr collection)"
  },
  {
    "label": "getCollection()",
    "kind": "Method",
    "detail": "Function (CollectionPtr)",
    "insertText": "getCollection()"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validate(string* message = nullptr)"
  },
  {
    "label": "GeomInfo()",
    "kind": "Method",
    "detail": "Function (public : const string GEOM_ATTRIBUTE ; const string COLLECTION_ATTRIBUTE ; } ; class GeomInfo : public GeomElement { public :)",
    "insertText": "GeomInfo(ElementPtr parent, const string& name) : GeomElement(parent, CATEGORY, name)"
  },
  {
    "label": "GeomInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GeomInfo()"
  },
  {
    "label": "addGeomProp()",
    "kind": "Method",
    "detail": "Function (} GeomPropPtr)",
    "insertText": "addGeomProp(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getGeomProp()",
    "kind": "Method",
    "detail": "Function (} GeomPropPtr)",
    "insertText": "getGeomProp(const string& name)"
  },
  {
    "label": "getGeomProps()",
    "kind": "Method",
    "detail": "Function (} vector<GeomPropPtr>)",
    "insertText": "getGeomProps()"
  },
  {
    "label": "removeGeomProp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeGeomProp(const string& name)"
  },
  {
    "label": "GeomProp()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "GeomProp(name)"
  },
  {
    "label": "addToken()",
    "kind": "Method",
    "detail": "Function (} TokenPtr)",
    "insertText": "addToken(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getToken()",
    "kind": "Method",
    "detail": "Function (} TokenPtr)",
    "insertText": "getToken(const string& name)"
  },
  {
    "label": "getTokens()",
    "kind": "Method",
    "detail": "Function (} vector<TokenPtr>)",
    "insertText": "getTokens()"
  },
  {
    "label": "removeToken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeToken(const string& name)"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "Token(name)"
  },
  {
    "label": "setGeomPropValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> GeomPropPtr)",
    "insertText": "setGeomPropValue(const string& name, const T& value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "setTokenValue()",
    "kind": "Method",
    "detail": "Function (TokenPtr)",
    "insertText": "setTokenValue(const string& name, const string& value)"
  },
  {
    "label": "getToken()",
    "kind": "Method",
    "detail": "Function (TokenPtr token =)",
    "insertText": "getToken(name)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (token -> setValue<)",
    "insertText": "string(value)"
  },
  {
    "label": "GeomProp()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GeomProp()"
  },
  {
    "label": "GeomPropDef()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; } ; class GeomPropDef : public Element { public :)",
    "insertText": "GeomPropDef(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "GeomPropDef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GeomPropDef()"
  },
  {
    "label": "setGeomProp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setGeomProp(const string& node)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(GEOM_PROP_ATTRIBUTE, node)"
  },
  {
    "label": "hasGeomProp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasGeomProp()"
  },
  {
    "label": "getGeomProp()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getGeomProp()"
  },
  {
    "label": "setSpace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSpace(const string& space)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(SPACE_ATTRIBUTE, space)"
  },
  {
    "label": "hasSpace()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasSpace()"
  },
  {
    "label": "getSpace()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getSpace()"
  },
  {
    "label": "setIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIndex(const string& space)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(INDEX_ATTRIBUTE, space)"
  },
  {
    "label": "hasIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasIndex()"
  },
  {
    "label": "getIndex()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getIndex()"
  },
  {
    "label": "Collection()",
    "kind": "Method",
    "detail": "Function (} public : const string CATEGORY ; const string GEOM_PROP_ATTRIBUTE ; const string SPACE_ATTRIBUTE ; const string INDEX_ATTRIBUTE ; } ; class Collection : public Element { public :)",
    "insertText": "Collection(ElementPtr parent, const string& name) : Element(parent, CATEGORY, name)"
  },
  {
    "label": "Collection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Collection()"
  },
  {
    "label": "setIncludeGeom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIncludeGeom(const string& geom)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(INCLUDE_GEOM_ATTRIBUTE, geom)"
  },
  {
    "label": "hasIncludeGeom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasIncludeGeom()"
  },
  {
    "label": "getIncludeGeom()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getIncludeGeom()"
  },
  {
    "label": "getActiveIncludeGeom()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getActiveIncludeGeom()"
  },
  {
    "label": "setExcludeGeom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setExcludeGeom(const string& geom)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(EXCLUDE_GEOM_ATTRIBUTE, geom)"
  },
  {
    "label": "hasExcludeGeom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasExcludeGeom()"
  },
  {
    "label": "getExcludeGeom()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getExcludeGeom()"
  },
  {
    "label": "getActiveExcludeGeom()",
    "kind": "Method",
    "detail": "Function (} string)",
    "insertText": "getActiveExcludeGeom()"
  },
  {
    "label": "setIncludeCollectionString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIncludeCollectionString(const string& collection)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(INCLUDE_COLLECTION_ATTRIBUTE, collection)"
  },
  {
    "label": "hasIncludeCollectionString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasIncludeCollectionString()"
  },
  {
    "label": "getIncludeCollectionString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getIncludeCollectionString()"
  },
  {
    "label": "setIncludeCollection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIncludeCollection(ConstCollectionPtr collection)"
  },
  {
    "label": "setIncludeCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIncludeCollections(const vector<ConstCollectionPtr>& collections)"
  },
  {
    "label": "getIncludeCollections()",
    "kind": "Method",
    "detail": "Function (vector<CollectionPtr>)",
    "insertText": "getIncludeCollections()"
  },
  {
    "label": "hasIncludeCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasIncludeCycle()"
  },
  {
    "label": "matchesGeomString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "matchesGeomString(const string& geom)"
  },
  {
    "label": "setGeomPropValue()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; const string INCLUDE_GEOM_ATTRIBUTE ; const string EXCLUDE_GEOM_ATTRIBUTE ; const string INCLUDE_COLLECTION_ATTRIBUTE ; } ; template<class T> GeomPropPtr)",
    "insertText": "setGeomPropValue(const string& name, const T& value, const string& type)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (geomProp ->)",
    "insertText": "setValue(value, type)"
  }
]