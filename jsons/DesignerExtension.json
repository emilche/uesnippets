[
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "IUMGDesigner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IUMGDesigner"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FWidgetReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetReference"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "FDesignerSurfaceElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" WidgetReference . h \" # include \" Widgets / SWidget . h \" class FScopedTransaction ; class FSlateRect ; class FSlateWindowElementList ; class FText ; class IUMGDesigner ; class SWidget ; class UWidgetBlueprint ; struct FGeometry ; struct FWidgetReference ; enum class EExtensionLayoutLocation : uint8 { RelativeFromParent,TopLeft,TopCenter,TopRight,CenterLeft,CenterCenter,CenterRight,BottomLeft,BottomCenter,BottomRight,} ; class FDesignerSurfaceElement : public TSharedFromThis<FDesignerSurfaceElement> { public :)",
    "insertText": "FDesignerSurfaceElement(TSharedRef<SWidget> InWidget, EExtensionLayoutLocation InLocation, TAttribute<FVector2D> InOffset = FVector2D(0, 0), TAttribute<FVector2D> InAlignment = FVector2D(0, 0)) : Widget(InWidget) , Location(InLocation) , Offset(InOffset) , Alignment(InAlignment)"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (Offset = InOffset ; } FVector2D)",
    "insertText": "GetOffset()"
  },
  {
    "label": "SetAlignment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlignment(TAttribute<FVector2D> InAlignment)"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (Alignment = InAlignment ; } FVector2D)",
    "insertText": "GetAlignment()"
  },
  {
    "label": "FDesignerExtension()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget> Widget ; EExtensionLayoutLocation Location ; TAttribute<FVector2D> Offset ; TAttribute<FVector2D> Alignment ; } ; class FDesignerExtension : public TSharedFromThis<FDesignerExtension> { public :)",
    "insertText": "FDesignerExtension()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IUMGDesigner* InDesigner, UWidgetBlueprint* InBlueprint)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize()"
  },
  {
    "label": "CanExtendSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExtendSelection(const TArray< FWidgetReference >& Selection)"
  },
  {
    "label": "PreviewContentChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreviewContentChanged(TSharedRef<SWidget> NewContent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "Paint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Paint(const TSet< FWidgetReference >& Selection, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "GetExtensionId()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetExtensionId()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDesignerExtension& Other)"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "BeginTransaction(const FText& SessionName)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransaction()"
  }
]