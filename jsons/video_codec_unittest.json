[
  {
    "label": "VideoCodecUnitTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCodecUnitTest"
  },
  {
    "label": "FakeEncodeCompleteCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeEncodeCompleteCallback"
  },
  {
    "label": "FakeDecodeCompleteCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeDecodeCompleteCallback"
  },
  {
    "label": "VideoCodecUnitTest()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_TEST_VIDEO_CODEC_UNITTEST_H_ # define MODULES_VIDEO_CODING_CODECS_TEST_VIDEO_CODEC_UNITTEST_H_ # include<memory> # include<vector> # include \" api / test / frame_generator_interface . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_encoder . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" modules / video_coding / utility / vp8_header_parser . h \" # include \" modules / video_coding / utility / vp9_uncompressed_header_parser . h \" # include \" rtc_base / event . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" test / gtest . h \" namespace webrtc { class VideoCodecUnitTest : public::testing::Test { public :)",
    "insertText": "VideoCodecUnitTest() : encode_complete_callback_(this), decode_complete_callback_(this), wait_for_encoded_frames_threshold_(1), last_input_frame_timestamp_(0)"
  },
  {
    "label": "FakeEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (} protected : class FakeEncodeCompleteCallback : public webrtc::EncodedImageCallback { public :)",
    "insertText": "FakeEncodeCompleteCallback(VideoCodecUnitTest* test) : test_(test)"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "OnEncodedImage(const EncodedImage& frame, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "FakeDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (private : VideoCodecUnitTest* const test_ ; } ; class FakeDecodeCompleteCallback : public webrtc::DecodedImageCallback { public :)",
    "insertText": "FakeDecodeCompleteCallback(VideoCodecUnitTest* test) : test_(test)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Decoded(VideoFrame& frame)"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "CreateEncoder()",
    "kind": "Method",
    "detail": "Function (private : VideoCodecUnitTest* const test_ ; } ; std::unique_ptr<VideoEncoder>)",
    "insertText": "CreateEncoder()"
  },
  {
    "label": "CreateDecoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoDecoder>)",
    "insertText": "CreateDecoder()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUp()"
  },
  {
    "label": "ModifyCodecSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCodecSettings(VideoCodec* codec_settings)"
  },
  {
    "label": "NextInputFrame()",
    "kind": "Method",
    "detail": "Function (VideoFrame)",
    "insertText": "NextInputFrame()"
  },
  {
    "label": "WaitForEncodedFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForEncodedFrame(EncodedImage* frame, CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "SetWaitForEncodedFramesThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaitForEncodedFramesThreshold(size_t num_frames)"
  },
  {
    "label": "WaitForEncodedFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForEncodedFrames(std::vector<EncodedImage>* frames, std::vector<CodecSpecificInfo>* codec_specific_info)"
  },
  {
    "label": "WaitForDecodedFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForDecodedFrame(std::unique_ptr<VideoFrame>* frame, absl::optional<uint8_t>* qp)"
  },
  {
    "label": "GetNumEncodedFrames()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumEncodedFrames()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (VideoCodec codec_settings_ ; std::unique_ptr<VideoEncoder> encoder_ ; std::unique_ptr<VideoDecoder> decoder_ ; std::unique_ptr<test::FrameGeneratorInterface> input_frame_generator_ ; private : FakeEncodeCompleteCallback encode_complete_callback_ ; FakeDecodeCompleteCallback decode_complete_callback_ ; rtc::Event encoded_frame_event_ ; Mutex encoded_frame_section_ ; size_t wait_for_encoded_frames_threshold_ ; std::vector<EncodedImage> encoded_frames_)",
    "insertText": "RTC_GUARDED_BY(encoded_frame_section_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::Event decoded_frame_event_ ; Mutex decoded_frame_section_ ; absl::optional<VideoFrame> decoded_frame_)",
    "insertText": "RTC_GUARDED_BY(decoded_frame_section_)"
  }
]