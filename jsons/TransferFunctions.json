[
  {
    "label": "Linear()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ColorManagement / ColorManagementDefines . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformMath . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathUtility . h \" # include \" Templates / Function . h \" namespace UE { namespace Color { float)",
    "insertText": "Linear(float Value)"
  },
  {
    "label": "DecodeSRGB()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "DecodeSRGB(float Value)"
  },
  {
    "label": "EncodeST2084()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "EncodeST2084(float Value)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (const float Lp = 1 0 0 0 0 . 0 f ; const float m1 = 2 6 1 0 / 4 0 9 6 . 0)",
    "insertText": "f(1.0f / 4.0f)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float m2 = 2 5 2 3 / 4 0 9 6 . 0 f* 1 2 8 . 0 f ; const float c1 = 3 4 2 4 / 4 0 9 6 . 0 f ; const float c2 = 2 4 1 3 / 4 0 9 6 . 0 f* 3 2 . f ; const float c3 = 2 3 9 2 / 4 0 9 6 . 0 f* 3 2 . f ; Value =)",
    "insertText": "Pow(Value / Lp, m1)"
  },
  {
    "label": "DecodeST2084()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeST2084(float Value)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float m2 = 2 5 2 3 / 4 0 9 6 . 0 f* 1 2 8 . 0 f ; const float c1 = 3 4 2 4 / 4 0 9 6 . 0 f ; const float c2 = 2 4 1 3 / 4 0 9 6 . 0 f* 3 2 . f ; const float c3 = 2 3 9 2 / 4 0 9 6 . 0 f* 3 2 . f ; const float Vp =)",
    "insertText": "Pow(Value, 1.0f / m2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Max(0.0f, Vp - c1)"
  },
  {
    "label": "EncodeGamma22()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodeGamma22(float Value)"
  },
  {
    "label": "DecodeGamma22()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeGamma22(float Value)"
  },
  {
    "label": "EncodeBT1886()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodeBT1886(float Value)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float L_B = 0 ; const float L_W = 1 ; float Gamma = 2 . 4 0 f ; float GammaInv = 1 . 0 f / Gamma ; float N =)",
    "insertText": "Pow(L_W, GammaInv) - FGenericPlatformMath::Pow(L_B, GammaInv)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (float A =)",
    "insertText": "Pow(N, Gamma)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (float B =)",
    "insertText": "Pow(L_B, GammaInv)"
  },
  {
    "label": "EncodeGamma26()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodeGamma26(float Value)"
  },
  {
    "label": "DecodeGamma26()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeGamma26(float Value)"
  },
  {
    "label": "DecodeBT1886()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeBT1886(float Value)"
  },
  {
    "label": "EncodeCineon()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodeCineon(float Value)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float BlackOffset =)",
    "insertText": "Pow(10.0f, (95.0f - 685.0f) / 300.0f)"
  },
  {
    "label": "DecodeCineon()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeCineon(float Value)"
  },
  {
    "label": "EncodeREDLog()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodeREDLog(float Value)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (const float BlackOffset =)",
    "insertText": "Pow(10.0f, (0.0f - 1023.0f) / 511.0f)"
  },
  {
    "label": "DecodeREDLog()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeREDLog(float Value)"
  },
  {
    "label": "EncodeREDLog3G10()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodeREDLog3G10(float Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float A = 0 . 2 2 4 2 8 2 f ; const float B = 1 5 5 . 9 7 5 3 2 7 f ; const float C = 0 . 0 1 f ; const float G = 1 5 . 1 9 2 7 f ; Value + = C ;)",
    "insertText": "if(Value < 0.0f)"
  },
  {
    "label": "DecodeREDLog3G10()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "DecodeREDLog3G10(float Value)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (Value / = G ; } else { Value =)",
    "insertText": "Sign(Value) * (FGenericPlatformMath::Pow(10.0f, FGenericPlatformMath::Abs(Value) / A ) - 1.0f)"
  },
  {
    "label": "EncodeSLog1()",
    "kind": "Method",
    "detail": "Function (} return Value - C ; } float)",
    "insertText": "EncodeSLog1(float Value)"
  },
  {
    "label": "LogX()",
    "kind": "Method",
    "detail": "Function (Value / = 0 . 9 f ; Value = 0 . 4 3 2 6 9 9 f*)",
    "insertText": "LogX(10.0f, Value + 0.037584f)"
  },
  {
    "label": "DecodeSLog1()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeSLog1(float Value)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value((Value * 1023.f) / 4.0f - 16.0f)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Pow(10.0f, (Value - 0.616596f - 0.03f) / 0.432699f)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(64.0f +876.0f * (Value * 3.53881278538813f / 0.9f) + 0.646596f + 0.030001222851889303f)"
  },
  {
    "label": "DecodeSLog2()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "DecodeSLog2(float Value)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (} else { return 0 . 9)",
    "insertText": "f((Value * 1023.f - 64.f) / 876.f - 0.030001222851889303f)"
  },
  {
    "label": "EncodeSLog3()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "EncodeSLog3(float Value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(Value * 76.2102946929f / 0.01125f + 95.0f)"
  },
  {
    "label": "DecodeSLog3()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "DecodeSLog3(float Value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(Value * 1023.0f - 95.0f) * 0.01125000f / (171.2102946929f - 95.0f)"
  },
  {
    "label": "EncodeArriAlexaV3LogC()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "EncodeArriAlexaV3LogC(float Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float cut = 0 . 0 1 0 5 9 1 f ; const float a = 5 . 5 5 5 5 5 6 f ; const float b = 0 . 0 5 2 2 7 2 f ; const float c = 0 . 2 4 7 1 9 0 f ; const float d = 0 . 3 8 5 5 3 7 f ; const float e = 5 . 3 6 7 6 5 5 f ; const float f = 0 . 0 9 2 8 0 9 f ;)",
    "insertText": "if(Value > cut)"
  },
  {
    "label": "DecodeArriAlexaV3LogC()",
    "kind": "Method",
    "detail": "Function (} else { return e* Value + f ; } } float)",
    "insertText": "DecodeArriAlexaV3LogC(float Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float cut = 0 . 0 1 0 5 9 1 f ; const float a = 5 . 5 5 5 5 5 6 f ; const float b = 0 . 0 5 2 2 7 2 f ; const float c = 0 . 2 4 7 1 9 0 f ; const float d = 0 . 3 8 5 5 3 7 f ; const float e = 5 . 3 6 7 6 5 5 f ; const float f = 0 . 0 9 2 8 0 9 f ;)",
    "insertText": "if(Value > e * cut + f)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(Value - f)"
  },
  {
    "label": "EncodeCanonLog()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "EncodeCanonLog(float Value)"
  },
  {
    "label": "LogX()",
    "kind": "Method",
    "detail": "Function (} else { return 0 . 5 2 9 1 3 6 f*)",
    "insertText": "LogX(10.0f, 10.1596f * Value + 1.0f)"
  },
  {
    "label": "DecodeCanonLog()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "DecodeCanonLog(float Value)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(FGenericPlatformMath::Pow(10.0f, (Value - 0.0730597f) / 0.529136f) - 1.0f)"
  },
  {
    "label": "EncodeGoProProTune()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "EncodeGoProProTune(float Value)"
  },
  {
    "label": "DecodeGoProProTune()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "DecodeGoProProTune(float Value)"
  },
  {
    "label": "EncodePanasonicVLog()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "EncodePanasonicVLog(float Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float b = 0 . 0 0 8 7 3 f ; const float c = 0 . 2 4 1 5 1 4 f ; const float d = 0 . 5 9 8 2 0 6 f ;)",
    "insertText": "if(Value < 0.01f)"
  },
  {
    "label": "DecodePanasonicVLog()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "DecodePanasonicVLog(float Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float b = 0 . 0 0 8 7 3 f ; const float c = 0 . 2 4 1 5 1 4 f ; const float d = 0 . 5 9 8 2 0 6 f ;)",
    "insertText": "if(Value < 0.181f)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Pow(10.0f, (Value - d) / c)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} } TFunction<)",
    "insertText": "float(float)> GetEncodeFunction(EEncoding Encoding)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "float(float)> GetDecodeFunction(EEncoding Encoding)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Encode(EEncoding Encoding, float Value)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Decode(EEncoding Encoding, float Value)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "FLinearColor(const FLinearColor&)> GetColorEncodeFunction(EEncoding Encoding)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "FLinearColor(const FLinearColor&)> GetColorDecodeFunction(EEncoding Encoding)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Encode(EEncoding Encoding, const FLinearColor& Color)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Decode(EEncoding Encoding, const FLinearColor& Color)"
  }
]