[
  {
    "label": "FKeyTreeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKeyTreeInfo"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FAnalogInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalogInputEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SKeySelector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKeySelector"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Fonts / SlateFontInfo . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" InputCoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" SlateFwd . h \" # include \" Styling / AppStyle . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FKeyTreeInfo ; class ITableRow ; class SComboButton ; class SSearchBox ; class SWidget ; struct FAnalogInputEvent ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; struct FSlateBrush ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnKeyChanged, TSharedPtr<FKey>)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (typedef STreeView<FKeyTreeItem> SKeyTreeView ; class SKeySelector : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SKeySelector ) : _CurrentKey(FKey()) , _TreeViewWidth(300.f) , _TreeViewHeight(400.f) , _Font( FAppStyle::GetFontStyle( TEXT(\"NormalFont\") ) ) , _FilterBlueprintBindable( true ) , _AllowClear( true ) , _AllowKeyChange( true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TOptional<FKey>, CurrentKey ) SLATE_ATTRIBUTE( FOptionalSize, TreeViewWidth ) SLATE_ATTRIBUTE( FOptionalSize, TreeViewHeight ) SLATE_EVENT( FOnKeyChanged, OnKeyChanged ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ARGUMENT( bool, FilterBlueprintBindable ) SLATE_ARGUMENT( bool, AllowClear ) SLATE_ARGUMENT( bool, AllowKeyChange ) SLATE_END_ARGS() public: UNREALED_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetEnabledFromKeyStructCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledFromKeyStructCustomization(bool bIsEnabled)"
  },
  {
    "label": "GetSetEnabledFromKeyStructCustomization()",
    "kind": "Method",
    "detail": "Function (bEnabledFromKeyStructCustomization = bIsEnabled ; } bool)",
    "insertText": "GetSetEnabledFromKeyStructCustomization()"
  },
  {
    "label": "GetDisabledKeySelectorToolTip()",
    "kind": "Method",
    "detail": "Function (DisabledSelectorToolTip = InToolTip ; } FText)",
    "insertText": "GetDisabledKeySelectorToolTip()"
  },
  {
    "label": "GetKeyIconColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetKeyIconColor()"
  },
  {
    "label": "GetKeyDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKeyDescription()"
  },
  {
    "label": "GetKeyDescriptionToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKeyDescriptionToolTip()"
  },
  {
    "label": "GetKeyTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetKeyTooltip()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (FText DisabledSelectorToolTip =)",
    "insertText": "FromString(TEXT(\"Key Selector Disabled\"))"
  },
  {
    "label": "GenerateKeyTreeRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateKeyTreeRow(FKeyTreeItem InItem, const TSharedRef<STableViewBase>& OwnerTree)"
  },
  {
    "label": "OnKeySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKeySelectionChanged(FKeyTreeItem Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetKeyChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyChildren(FKeyTreeItem InItem, TArray<FKeyTreeItem>& OutChildren)"
  },
  {
    "label": "CanChangeKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeKey()"
  },
  {
    "label": "GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetMenuContent()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& NewText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetSearchTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSearchTokens(const FString& SearchString, TArray<FString>& OutTokens)"
  },
  {
    "label": "GetChildrenMatchingSearch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChildrenMatchingSearch(const TArray<FString>& SearchTokens, const TArray<FKeyTreeItem>& UnfilteredList, TArray<FKeyTreeItem>& OutFilteredList)"
  },
  {
    "label": "ListenForInput()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ListenForInput()"
  },
  {
    "label": "ProcessHeardInput()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ProcessHeardInput(FKey KeyHeard)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "GetIconFromKey()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconFromKey(FKey Key)"
  }
]