[
  {
    "label": "FVisualGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualGraph"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VISUALGRAPHUTILS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VISUALGRAPHUTILS_API"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Color . h \" # include \" Misc / Optional . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealNames . h \" # include \" VisualGraphElement . generated . h \" class FVisualGraph ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FVisualGraphElement()",
    "kind": "Method",
    "detail": "Function (Filled,Diagonals,Rounded,Dashed,Dotted,Solid,Bold } ; class FVisualGraphElement { public :)",
    "insertText": "FVisualGraphElement() : Name(NAME_None) , DisplayName() , Index(INDEX_NONE) , Color() , Style()"
  },
  {
    "label": "FVisualGraphElement()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVisualGraphElement()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetTooltip()",
    "kind": "Method",
    "detail": "Function (} TOptional<FString>)",
    "insertText": "GetTooltip()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (Tooltip = InTooltip ; } int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetStyle()",
    "kind": "Method",
    "detail": "Function (Color = InValue ; } TOptional<EVisualGraphStyle>)",
    "insertText": "GetStyle()"
  },
  {
    "label": "DumpDot()",
    "kind": "Method",
    "detail": "Function (Style = InValue ; } protected : FString)",
    "insertText": "DumpDot(const FVisualGraph* InGraph, int32 InIndendation)"
  },
  {
    "label": "DumpDotIndentation()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DumpDotIndentation(int32 InIndentation)"
  },
  {
    "label": "DumpDotColor()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DumpDotColor(const TOptional<FLinearColor>& InColor)"
  },
  {
    "label": "DumpDotShape()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DumpDotShape(const TOptional<EVisualGraphShape>& InShape)"
  },
  {
    "label": "DumpDotStyle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DumpDotStyle(const TOptional<EVisualGraphStyle>& InStyle)"
  }
]