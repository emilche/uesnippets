[
  {
    "label": "SignalingRoute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SignalingRoute"
  },
  {
    "label": "SignalingRoute()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PEER_SCENARIO_SIGNALING_ROUTE_H_ # define TEST_PEER_SCENARIO_SIGNALING_ROUTE_H_ # include<string> # include<utility> # include \" test / network / network_emulation_manager . h \" # include \" test / peer_scenario / peer_scenario_client . h \" namespace webrtc { namespace test { class SignalingRoute { public :)",
    "insertText": "SignalingRoute(PeerScenarioClient* caller, PeerScenarioClient* callee, CrossTrafficRoute* send_route, CrossTrafficRoute* ret_route)"
  },
  {
    "label": "StartIceSignaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartIceSignaling()"
  },
  {
    "label": "NegotiateSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NegotiateSdp(std::function<void(SessionDescriptionInterface* offer)> munge_offer, std::function<void(SessionDescriptionInterface* offer)> modify_offer, std::function<void(const SessionDescriptionInterface& answer)> exchange_finished)"
  },
  {
    "label": "NegotiateSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NegotiateSdp(std::function<void(SessionDescriptionInterface* offer)> modify_offer, std::function<void(const SessionDescriptionInterface& answer)> exchange_finished)"
  },
  {
    "label": "NegotiateSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NegotiateSdp(std::function<void(const SessionDescriptionInterface& answer)> exchange_finished)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (SignalingRoute)",
    "insertText": "reverse()"
  }
]