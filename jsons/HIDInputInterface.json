[
  {
    "label": "HIDInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HIDInputInterface"
  },
  {
    "label": "FHIDElementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHIDElementInfo"
  },
  {
    "label": "FHIDDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHIDDeviceInfo"
  },
  {
    "label": "FXBox360ControllerID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXBox360ControllerID"
  },
  {
    "label": "FControllerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FControllerState"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<IOKit / hid / IOHIDLib . h> # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" Templates / SharedPointer . h \" # define MAX_NUM_HIDINPUT_CONTROLLERS 4 # define MAX_NUM_CONTROLLER_BUTTONS 2 4 class HIDInputInterface { public : TSharedRef<HIDInputInterface>)",
    "insertText": "Create(const TSharedRef<FGenericApplicationMessageHandler>& InMessageHandler)"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageHandler(const TSharedRef<FGenericApplicationMessageHandler>& InMessageHandler)"
  },
  {
    "label": "IsGamepadAttached()",
    "kind": "Method",
    "detail": "Function (MessageHandler = InMessageHandler ; } bool)",
    "insertText": "IsGamepadAttached()"
  },
  {
    "label": "OnNewHIDController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewHIDController(IOReturn Result, IOHIDDeviceRef DeviceRef)"
  },
  {
    "label": "CreateDeviceMatchingDictionary()",
    "kind": "Method",
    "detail": "Function (CFMutableDictionaryRef)",
    "insertText": "CreateDeviceMatchingDictionary(UInt32 UsagePage, UInt32 Usage)"
  },
  {
    "label": "HIDDeviceMatchingCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HIDDeviceMatchingCallback(void* Context, IOReturn Result, void* Sender, IOHIDDeviceRef DeviceRef)"
  },
  {
    "label": "HIDDeviceRemovalCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HIDDeviceRemovalCallback(void* Context, IOReturn Result, void* Sender, IOHIDDeviceRef DeviceRef)"
  },
  {
    "label": "SetupMappings()",
    "kind": "Method",
    "detail": "Function (private : struct FHIDElementInfo { IOHIDElementRef ElementRef ; IOHIDElementType Type ; uint32 UsagePage ; uint32 Usage ; int32 MinValue ; int32 MaxValue ; } ; struct FHIDDeviceInfo { IOHIDDeviceRef DeviceRef ; TArray<FHIDElementInfo> Elements ; int8 ButtonsMapping [ MAX_NUM_CONTROLLER_BUTTONS ] ; uint16 LeftAnalogXMapping ; uint16 LeftAnalogYMapping ; uint16 LeftTriggerAnalogMapping ; uint16 RightAnalogXMapping ; uint16 RightAnalogYMapping ; uint16 RightTriggerAnalogMapping ; void)",
    "insertText": "SetupMappings()"
  }
]