[
  {
    "label": "STDEF",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "STDEF"
  },
  {
    "label": "INFO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INFO"
  },
  {
    "label": "OSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OSchema"
  },
  {
    "label": "ALEMBIC_ABC_DECLARE_SCHEMA_INFO()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_OSchema_h # define Alembic_Abc_OSchema_h # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / OCompoundProperty . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { # define)",
    "insertText": "ALEMBIC_ABC_DECLARE_SCHEMA_INFO(STITLE, SBTYP, SDFLT, SPREP, STDEF)"
  },
  {
    "label": "title()",
    "kind": "Method",
    "detail": "Function (\\ const char*)",
    "insertText": "title()"
  },
  {
    "label": "defaultName()",
    "kind": "Method",
    "detail": "Function (} \\ const char*)",
    "insertText": "defaultName()"
  },
  {
    "label": "schemaBaseType()",
    "kind": "Method",
    "detail": "Function (} \\ const char*)",
    "insertText": "schemaBaseType()"
  },
  {
    "label": "replaceOnSparse()",
    "kind": "Method",
    "detail": "Function (} \\ bool)",
    "insertText": "replaceOnSparse()"
  },
  {
    "label": "getSchemaBaseType()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getSchemaBaseType()"
  },
  {
    "label": "getDefaultSchemaName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getDefaultSchemaName()"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "matches(const AbcA::MetaData &iMetaData, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "matches(const AbcA::PropertyHeader &iHeader, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "OSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OSchema()"
  },
  {
    "label": "OSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument(), const Argument &iArg3 = Argument())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iParent, iName, iArg0, iArg1, iArg2, iArg3)"
  },
  {
    "label": "OSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OSchema(OCompoundProperty iParent, const std::string &iName, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument())"
  },
  {
    "label": "OSchema()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "OSchema(iParent.getPtr(), iName, GetErrorHandlerPolicy( iParent ), iArg0, iArg1, iArg2)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "init(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Argument &iArg0, const Argument &iArg1, const Argument &iArg2, const Argument &iArg3)"
  },
  {
    "label": "setInto()",
    "kind": "Method",
    "detail": "Function (Arguments args ; iArg0 .)",
    "insertText": "setInto(args)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( args.getErrorHandlerPolicy())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OSchema::OSchema::init()\")"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(iParent, \"NULL parent passed into OSchema ctor\")"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (AbcA::MetaData mdata = args .)",
    "insertText": "getMetaData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string emptyStr ;)",
    "insertText": "if(emptyStr != getSchemaTitle() && !args.isSparse())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (mdata .)",
    "insertText": "set(\"schema\", getSchemaTitle())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(emptyStr != getSchemaBaseType() && !args.isSparse())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (mdata .)",
    "insertText": "set(\"schemaBaseType\", getSchemaBaseType())"
  },
  {
    "label": "createCompoundProperty()",
    "kind": "Method",
    "detail": "Function (} m_property = iParent ->)",
    "insertText": "createCompoundProperty(iName, mdata)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET()"
  }
]