[
  {
    "label": "UComponentElementWorldInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UComponentElementWorldInterface"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Interfaces / TypedElementWorldInterface . h \" # include \" ComponentElementWorldInterface . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API virtual bool CanEditElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "IsTemplateElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemplateElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetOwnerLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetOwnerLevel(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetOwnerWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetOwnerWorld(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBounds(const FTypedElementHandle& InElementHandle, FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "CanMoveElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveElement(const FTypedElementHandle& InElementHandle, const ETypedElementWorldType InWorldType)"
  },
  {
    "label": "CanScaleElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanScaleElement(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GetWorldTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWorldTransform(const FTypedElementHandle& InElementHandle, FTransform& OutTransform)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWorldTransform(const FTypedElementHandle& InElementHandle, const FTransform& InTransform)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRelativeTransform(const FTypedElementHandle& InElementHandle, FTransform& OutTransform)"
  },
  {
    "label": "SetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRelativeTransform(const FTypedElementHandle& InElementHandle, const FTransform& InTransform)"
  },
  {
    "label": "FindSuitableTransformAlongPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindSuitableTransformAlongPath(const FTypedElementHandle& InElementHandle, const FVector& InPathStart, const FVector& InPathEnd, const FCollisionShape& InTestShape, TArrayView<const FTypedElementHandle> InElementsToIgnore, FTransform& OutSuitableTransform)"
  },
  {
    "label": "AddIgnoredElementToCollisionQueryParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddIgnoredElementToCollisionQueryParams(const FTypedElementHandle& InElementHandle, FCollisionQueryParams& InOutParams, bool bAlsoIgnoreSubElements = true)"
  }
]