[
  {
    "label": "TimeZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZone"
  },
  {
    "label": "DateTimePatternGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateTimePatternGenerator"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "EStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStyle"
  },
  {
    "label": "DateFmtKeyByStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFmtKeyByStyle"
  },
  {
    "label": "EField",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EField"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef DATEFMT_H # define DATEFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / udat . h \" # include \" unicode / calendar . h \" # include \" unicode / numfmt . h \" # include \" unicode / format . h \" # include \" unicode / locid . h \" # include \" unicode / enumset . h \" # include \" unicode / udisplaycontext . h \" U_NAMESPACE_BEGIN class TimeZone ; class DateTimePatternGenerator ; # if U_PF_WINDOWS<= U_PLATFORM&& U_PLATFORM<= U_PF_CYGWIN&& !)",
    "insertText": "defined(U_IN_DOXYGEN)"
  },
  {
    "label": "kRelative()",
    "kind": "Method",
    "detail": "Function (# endif class U_I18N_API DateFormat : public Format { public : enum EStyle { kNone = - 1,kFull = 0,kLong = 1,kMedium = 2,kShort = 3,kDateOffset = kShort + 1,kDateTime = 8,kDateTimeOffset = kDateTime + 1,)",
    "insertText": "kRelative(1 << 7), kFullRelative = (kFull | kRelative)"
  },
  {
    "label": "DateFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DateFormat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format&)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using Format::format ; UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPosition& pos, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(Calendar& cal, UnicodeString& appendTo, FieldPosition& fieldPosition)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(Calendar& cal, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(UDate date, UnicodeString& appendTo, FieldPosition& fieldPosition)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(UDate date, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(UDate date, UnicodeString& appendTo)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "parse(const UnicodeString& text, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parse(const UnicodeString& text, Calendar& cal, ParsePosition& pos)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "parse(const UnicodeString& text, ParsePosition& pos)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& parse_pos)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (DateFormat* U_EXPORT2)",
    "insertText": "createInstance(void)"
  },
  {
    "label": "createTimeInstance()",
    "kind": "Method",
    "detail": "Function (DateFormat* U_EXPORT2)",
    "insertText": "createTimeInstance(EStyle style = kDefault, const Locale& aLocale = Locale::getDefault())"
  },
  {
    "label": "createDateInstance()",
    "kind": "Method",
    "detail": "Function (DateFormat* U_EXPORT2)",
    "insertText": "createDateInstance(EStyle style = kDefault, const Locale& aLocale = Locale::getDefault())"
  },
  {
    "label": "createDateTimeInstance()",
    "kind": "Method",
    "detail": "Function (DateFormat* U_EXPORT2)",
    "insertText": "createDateTimeInstance(EStyle dateStyle = kDefault, EStyle timeStyle = kDefault, const Locale& aLocale = Locale::getDefault())"
  },
  {
    "label": "getBestPattern()",
    "kind": "Method",
    "detail": "Function (# ifndef UnicodeString)",
    "insertText": "getBestPattern(const Locale &locale, const UnicodeString &skeleton, UErrorCode &status)"
  },
  {
    "label": "createInstanceForSkeleton()",
    "kind": "Method",
    "detail": "Function (# endif DateFormat* U_EXPORT2)",
    "insertText": "createInstanceForSkeleton(const UnicodeString& skeleton, UErrorCode &status)"
  },
  {
    "label": "createInstanceForSkeleton()",
    "kind": "Method",
    "detail": "Function (DateFormat* U_EXPORT2)",
    "insertText": "createInstanceForSkeleton(const UnicodeString& skeleton, const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "createInstanceForSkeleton()",
    "kind": "Method",
    "detail": "Function (DateFormat* U_EXPORT2)",
    "insertText": "createInstanceForSkeleton(Calendar *calendarToAdopt, const UnicodeString& skeleton, const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (const Locale* U_EXPORT2)",
    "insertText": "getAvailableLocales(int32_t& count)"
  },
  {
    "label": "isLenient()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isLenient(void)"
  },
  {
    "label": "setLenient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLenient(UBool lenient)"
  },
  {
    "label": "isCalendarLenient()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isCalendarLenient(void)"
  },
  {
    "label": "setCalendarLenient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCalendarLenient(UBool lenient)"
  },
  {
    "label": "getCalendar()",
    "kind": "Method",
    "detail": "Function (const Calendar*)",
    "insertText": "getCalendar(void)"
  },
  {
    "label": "adoptCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptCalendar(Calendar* calendarToAdopt)"
  },
  {
    "label": "setCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCalendar(const Calendar& newCalendar)"
  },
  {
    "label": "getNumberFormat()",
    "kind": "Method",
    "detail": "Function (const NumberFormat*)",
    "insertText": "getNumberFormat(void)"
  },
  {
    "label": "adoptNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptNumberFormat(NumberFormat* formatToAdopt)"
  },
  {
    "label": "setNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumberFormat(const NumberFormat& newNumberFormat)"
  },
  {
    "label": "getTimeZone()",
    "kind": "Method",
    "detail": "Function (const TimeZone&)",
    "insertText": "getTimeZone(void)"
  },
  {
    "label": "adoptTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptTimeZone(TimeZone* zoneToAdopt)"
  },
  {
    "label": "setTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeZone(const TimeZone& zone)"
  },
  {
    "label": "setContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContext(UDisplayContext value, UErrorCode& status)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (UDisplayContext)",
    "insertText": "getContext(UDisplayContextType type, UErrorCode& status)"
  },
  {
    "label": "setBooleanAttribute()",
    "kind": "Method",
    "detail": "Function (DateFormat& U_EXPORT2)",
    "insertText": "setBooleanAttribute(UDateFormatBooleanAttribute attr, UBool newvalue, UErrorCode &status)"
  },
  {
    "label": "getBooleanAttribute()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "getBooleanAttribute(UDateFormatBooleanAttribute attr, UErrorCode &status)"
  },
  {
    "label": "DateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateFormat(const DateFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DateFormat&)",
    "insertText": "operator(const DateFormat&)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Calendar* fCalendar ; NumberFormat* fNumberFormat ; private : DateFormat* U_EXPORT2)",
    "insertText": "create(EStyle timeStyle, EStyle dateStyle, const Locale& inLocale)"
  }
]