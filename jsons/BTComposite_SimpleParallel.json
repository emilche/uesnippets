[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBTParallelMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBTParallelMemory"
  },
  {
    "label": "UBTComposite_SimpleParallel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTComposite_SimpleParallel"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BehaviorTree / BTCompositeNode . h \" # include \" BTComposite_SimpleParallel . generated . h \" namespace EBTParallelChild { enum Type { MainTask,BackgroundTree,} ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { AbortBackground)",
    "insertText": "UMETA(DisplayName=\"Immediate\" , ToolTip=\"When main task finishes, immediately abort background tree.\"), WaitForBackground UMETA(DisplayName=\"Delayed\" , ToolTip=\"When main task finishes, wait for background tree to finish.\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} struct FBTParallelMemory : public FBTCompositeMemory { int32 LastSearchId ; TEnumAsByte<EBTNodeResult::Type> MainTaskResult ; uint8 bMainTaskIsActive : 1 ; uint8 bForceBackgroundTree : 1 ; uint8 bRepeatMainTask : 1 ; } ;)",
    "insertText": "UCLASS(HideCategories=(Composite), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditInstanceOnly, Category = Parallel)"
  },
  {
    "label": "GetNextChildHandler()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNextChildHandler(FBehaviorTreeSearchData& SearchData, int32 PrevChild, EBTNodeResult::Type LastResult)"
  },
  {
    "label": "NotifyChildExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyChildExecution(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, int32 ChildIdx, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "NotifyNodeDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyNodeDeactivation(FBehaviorTreeSearchData& SearchData, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "CanNotifyDecoratorsOnDeactivation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNotifyDecoratorsOnDeactivation(FBehaviorTreeSearchData& SearchData, int32 ChildIdx, EBTNodeResult::Type& NodeResult)"
  },
  {
    "label": "CanPushSubtree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPushSubtree(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, int32 ChildIdx)"
  },
  {
    "label": "SetChildOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildOverride(FBehaviorTreeSearchData& SearchData, int8 Index)"
  },
  {
    "label": "GetInstanceMemorySize()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetInstanceMemorySize()"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryInit::Type InitType)"
  },
  {
    "label": "CleanupMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupMemory(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTMemoryClear::Type CleanupType)"
  },
  {
    "label": "GetStaticDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStaticDescription()"
  },
  {
    "label": "DescribeRuntimeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeRuntimeValues(const UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, EBTDescriptionVerbosity::Type Verbosity, TArray<FString>& Values)"
  },
  {
    "label": "DescribeFinishMode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeFinishMode(EBTParallelMode::Type Mode)"
  },
  {
    "label": "CanAbortLowerPriority()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanAbortLowerPriority()"
  },
  {
    "label": "CanAbortSelf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAbortSelf()"
  },
  {
    "label": "GetNodeIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNodeIconName()"
  }
]