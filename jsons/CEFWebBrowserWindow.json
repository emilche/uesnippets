[
  {
    "label": "FBrowserBufferedVideo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBrowserBufferedVideo"
  },
  {
    "label": "FCEFBrowserHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFBrowserHandler"
  },
  {
    "label": "FCEFJSScripting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFJSScripting"
  },
  {
    "label": "FSlateUpdatableTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUpdatableTexture"
  },
  {
    "label": "IWebBrowserPopupFeatures",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserPopupFeatures"
  },
  {
    "label": "IWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWebBrowserWindow"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEvent"
  },
  {
    "label": "FWebJSScripting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebJSScripting"
  },
  {
    "label": "FCEFImeHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFImeHandler"
  },
  {
    "label": "ITextInputMethodSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodSystem"
  },
  {
    "label": "FCEFWebBrowserWindowRHIHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFWebBrowserWindowRHIHelper"
  },
  {
    "label": "FWebBrowserWindowInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebBrowserWindowInfo"
  },
  {
    "label": "FWebBrowserDragRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWebBrowserDragRegion"
  },
  {
    "label": "FCEFWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFWebBrowserWindow"
  },
  {
    "label": "FWebBrowserSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserSingleton"
  },
  {
    "label": "SWebBrowserView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWebBrowserView"
  },
  {
    "label": "FWebBrowserWindowInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Widgets / SViewport . h \" # include \" WebBrowserSingleton . h \" # if WITH_CEF3 # include \" IWebBrowserWindow . h \" # include \" CEFBrowserHandler . h \" # include \" CEFLibCefIncludes . h \" # endif class FBrowserBufferedVideo ; class FCEFBrowserHandler ; class FCEFJSScripting ; class FSlateUpdatableTexture ; class IWebBrowserPopupFeatures ; class IWebBrowserWindow ; struct Rect ; class FSlateShaderResource ; enum class EWebBrowserDocumentState ; struct FGeometry ; struct FPointerEvent ; class UObject ; struct FInputEvent ; class FWebJSScripting ; class FCEFImeHandler ; class ITextInputMethodSystem ; class FCEFWebBrowserWindowRHIHelper ; # if WITH_CEF3 struct FWebBrowserWindowInfo {)",
    "insertText": "FWebBrowserWindowInfo(CefRefPtr<CefBrowser> InBrowser, CefRefPtr<FCEFBrowserHandler> InHandler) : Browser(InBrowser) , Handler(InHandler)"
  },
  {
    "label": "FWebBrowserDragRegion()",
    "kind": "Method",
    "detail": "Function (} CefRefPtr<CefBrowser> Browser ; CefRefPtr<FCEFBrowserHandler> Handler ; } ; struct FWebBrowserDragRegion {)",
    "insertText": "FWebBrowserDragRegion(const FIntRect& InRect, bool bInDraggable) : Rect(InRect) , bDraggable(bInDraggable)"
  },
  {
    "label": "FCEFWebBrowserWindow()",
    "kind": "Method",
    "detail": "Function (} FIntRect Rect ; bool bDraggable ; } ; class FCEFWebBrowserWindow : public IWebBrowserWindow,public TSharedFromThis<FCEFWebBrowserWindow> { class FCEFBrowserHandler ; class FWebBrowserSingleton ; class SWebBrowserView ; private :)",
    "insertText": "FCEFWebBrowserWindow(CefRefPtr<CefBrowser> Browser, CefRefPtr<FCEFBrowserHandler> Handler, FString Url, TOptional<FString> ContentsToLoad, bool bShowErrorMessage, bool bThumbMouseButtonNavigation, bool bUseTransparency, bool bJSBindingToLoweringEnabled, bool bUsingAcceleratedPaint)"
  },
  {
    "label": "CreateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SViewport>)",
    "insertText": "CreateWidget()"
  },
  {
    "label": "FCEFWebBrowserWindow()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FCEFWebBrowserWindow()"
  },
  {
    "label": "IsShowingErrorMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingErrorMessages()"
  },
  {
    "label": "LoadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadString(FString Contents, FString DummyURL)"
  },
  {
    "label": "SetViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSize(FIntPoint WindowSize, FIntPoint WindowPos)"
  },
  {
    "label": "GetViewportSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetViewportSize()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "IsClosing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosing()"
  },
  {
    "label": "GetDocumentLoadingState()",
    "kind": "Method",
    "detail": "Function (EWebBrowserDocumentState)",
    "insertText": "GetDocumentLoadingState()"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTitle()"
  },
  {
    "label": "GetUrl()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetUrl()"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSource(TFunction<void (const FString&)> Callback)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyDown(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyUp(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyChar(const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SetSupportsMouseWheel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportsMouseWheel(bool bValue)"
  },
  {
    "label": "GetSupportsMouseWheel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSupportsMouseWheel()"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent, bool bIsPopup)"
  },
  {
    "label": "OnFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocus(bool SetFocus, bool bIsPopup)"
  },
  {
    "label": "OnCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCaptureLost()"
  },
  {
    "label": "CanGoBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoBack()"
  },
  {
    "label": "GoBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoBack()"
  },
  {
    "label": "CanGoForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoForward()"
  },
  {
    "label": "GoForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoForward()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "Reload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reload()"
  },
  {
    "label": "StopLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLoad()"
  },
  {
    "label": "ExecuteJavascript()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteJavascript(const FString& Script)"
  },
  {
    "label": "CloseBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseBrowser(bool bForce, bool bBlockTillClosed)"
  },
  {
    "label": "BindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUObject(const FString& Name, UObject* Object, bool bIsPermanent = true)"
  },
  {
    "label": "UnbindUObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindUObject(const FString& Name, UObject* Object = nullptr, bool bIsPermanent = true)"
  },
  {
    "label": "BindInputMethodSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindInputMethodSystem(ITextInputMethodSystem* TextInputMethodSystem)"
  },
  {
    "label": "UnbindInputMethodSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindInputMethodSystem()"
  },
  {
    "label": "GetLoadError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLoadError()"
  },
  {
    "label": "SetIsDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDisabled(bool bValue)"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "SetParentWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentWindow(TSharedPtr<SWindow> Window)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FCEFWebBrowserWindow, IWebBrowserWindow::FOnDocumentStateChanged, FOnDocumentStateChanged)"
  },
  {
    "label": "OnDocumentStateChanged()",
    "kind": "Method",
    "detail": "Function (FOnDocumentStateChanged&)",
    "insertText": "OnDocumentStateChanged()"
  },
  {
    "label": "OnTitleChanged()",
    "kind": "Method",
    "detail": "Function (FOnTitleChanged&)",
    "insertText": "OnTitleChanged()"
  },
  {
    "label": "OnUrlChanged()",
    "kind": "Method",
    "detail": "Function (FOnUrlChanged&)",
    "insertText": "OnUrlChanged()"
  },
  {
    "label": "OnToolTip()",
    "kind": "Method",
    "detail": "Function (FOnToolTip&)",
    "insertText": "OnToolTip()"
  },
  {
    "label": "OnNeedsRedraw()",
    "kind": "Method",
    "detail": "Function (FOnNeedsRedraw&)",
    "insertText": "OnNeedsRedraw()"
  },
  {
    "label": "OnCloseWindow()",
    "kind": "Method",
    "detail": "Function (} FOnCloseWindow&)",
    "insertText": "OnCloseWindow()"
  },
  {
    "label": "OnBeforePopup()",
    "kind": "Method",
    "detail": "Function (} FOnBeforePopupDelegate&)",
    "insertText": "OnBeforePopup()"
  },
  {
    "label": "OnBeforeResourceLoad()",
    "kind": "Method",
    "detail": "Function (} FOnBeforeResourceLoadDelegate&)",
    "insertText": "OnBeforeResourceLoad()"
  },
  {
    "label": "OnBeforeResourceLoad()",
    "kind": "Method",
    "detail": "Function (WebBrowserHandler ->)",
    "insertText": "OnBeforeResourceLoad().BindSP(this, &FCEFWebBrowserWindow::HandleOnBeforeResourceLoad)"
  },
  {
    "label": "OnResourceLoadComplete()",
    "kind": "Method",
    "detail": "Function (} return BeforeResourceLoadDelegate ; } FOnResourceLoadCompleteDelegate&)",
    "insertText": "OnResourceLoadComplete()"
  },
  {
    "label": "OnResourceLoadComplete()",
    "kind": "Method",
    "detail": "Function (WebBrowserHandler ->)",
    "insertText": "OnResourceLoadComplete().BindSP(this, &FCEFWebBrowserWindow::HandleOnResourceLoadComplete)"
  },
  {
    "label": "OnConsoleMessage()",
    "kind": "Method",
    "detail": "Function (} return ResourceLoadCompleteDelegate ; } FOnConsoleMessageDelegate&)",
    "insertText": "OnConsoleMessage()"
  },
  {
    "label": "OnConsoleMessage()",
    "kind": "Method",
    "detail": "Function (WebBrowserHandler ->)",
    "insertText": "OnConsoleMessage().BindSP(this, &FCEFWebBrowserWindow::HandleOnConsoleMessage)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (} return ConsoleMessageDelegate ; })",
    "insertText": "DECLARE_DERIVED_EVENT(FCEFWebBrowserWindow, IWebBrowserWindow::FOnShowPopup, FOnShowPopup)"
  },
  {
    "label": "OnShowPopup()",
    "kind": "Method",
    "detail": "Function (FOnShowPopup&)",
    "insertText": "OnShowPopup()"
  },
  {
    "label": "OnDismissPopup()",
    "kind": "Method",
    "detail": "Function (FOnDismissPopup&)",
    "insertText": "OnDismissPopup()"
  },
  {
    "label": "SetTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTitle(const CefString& InTitle)"
  },
  {
    "label": "SetUrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUrl(const CefString& InUrl)"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToolTip(const CefString& InToolTip)"
  },
  {
    "label": "GetViewRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewRect(CefRect& Rect)"
  },
  {
    "label": "NotifyDocumentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDocumentError(CefLoadHandler::ErrorCode InErrorCode, const CefString& ErrorText, const CefString& FailedUrl)"
  },
  {
    "label": "NotifyDocumentError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDocumentError(int ErrorCode)"
  },
  {
    "label": "NotifyDocumentLoadingStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDocumentLoadingStateChange(bool IsLoading)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPaint(CefRenderHandler::PaintElementType Type, const CefRenderHandler::RectList& DirtyRects, const void* Buffer, int Width, int Height)"
  },
  {
    "label": "OnAcceleratedPaint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAcceleratedPaint(CefRenderHandler::PaintElementType type, const CefRenderHandler::RectList& DirtyRects, void* SharedHandle)"
  },
  {
    "label": "OnCursorChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnCursorChange(CefCursorHandle Cursor, cef_cursor_type_t Type, const CefCursorInfo& CustomCursorInfo)"
  },
  {
    "label": "OnProcessMessageReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnProcessMessageReceived(CefRefPtr<CefBrowser> Browser, CefRefPtr<CefFrame> frame, CefProcessId SourceProcess, CefRefPtr<CefProcessMessage> Message)"
  },
  {
    "label": "OnBeforeBrowse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnBeforeBrowse(CefRefPtr<CefBrowser> Browser, CefRefPtr<CefFrame> Frame, CefRefPtr<CefRequest> Request, bool user_gesture, bool bIsRedirect)"
  },
  {
    "label": "HandleOnBeforeResourceLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnBeforeResourceLoad(const CefString& URL, CefRequest::ResourceType Type, FRequestHeaders& AdditionalHeaders, const bool AllowUserCredentials)"
  },
  {
    "label": "HandleOnResourceLoadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnResourceLoadComplete(const CefString& URL, CefRequest::ResourceType Type, CefResourceRequestHandler::URLRequestStatus Status, int64 ContentLength)"
  },
  {
    "label": "HandleOnConsoleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnConsoleMessage(CefRefPtr<CefBrowser> Browser, cef_log_severity_t Level, const CefString& Message, const CefString& Source, int32 Line)"
  },
  {
    "label": "GetResourceContent()",
    "kind": "Method",
    "detail": "Function (TOptional<FString>)",
    "insertText": "GetResourceContent(CefRefPtr< CefFrame > Frame, CefRefPtr< CefRequest > Request)"
  },
  {
    "label": "SlateModifiersFromCefModifiers()",
    "kind": "Method",
    "detail": "Function (FModifierKeysState)",
    "insertText": "SlateModifiersFromCefModifiers(const CefKeyEvent& CefEvent)"
  },
  {
    "label": "OnUnhandledKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnUnhandledKeyEvent(const CefKeyEvent& CefEvent)"
  },
  {
    "label": "OnJSDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnJSDialog(CefJSDialogHandler::JSDialogType DialogType, const CefString& MessageText, const CefString& DefaultPromptText, CefRefPtr<CefJSDialogCallback> Callback, bool& OutSuppressMessage)"
  },
  {
    "label": "OnFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnFileDialog(CefDialogHandler::FileDialogMode Mode, const CefString& DialogTitle, const CefString& DefaultFilePath, const std::vector<CefString>& AcceptFilters, int SelectedAcceptFilter, CefRefPtr<CefFileDialogCallback> Callback)"
  },
  {
    "label": "OnBeforeUnloadDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnBeforeUnloadDialog(const CefString& MessageText, bool IsReload, CefRefPtr<CefJSDialogCallback> Callback)"
  },
  {
    "label": "OnResetDialogState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetDialogState()"
  },
  {
    "label": "OnRenderProcessTerminated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenderProcessTerminated(CefRequestHandler::TerminationStatus Status)"
  },
  {
    "label": "RequestCreateWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestCreateWindow(const TSharedRef<IWebBrowserWindow>& NewBrowserWindow, const TSharedPtr<IWebBrowserPopupFeatures>& BrowserPopupFeatures)"
  },
  {
    "label": "OnBrowserClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserClosing()"
  },
  {
    "label": "OnBrowserClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserClosed()"
  },
  {
    "label": "SetPopupMenuPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPopupMenuPosition(CefRect PopupSize)"
  },
  {
    "label": "ShowPopupMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPopupMenu(bool bShow)"
  },
  {
    "label": "OnImeCompositionRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImeCompositionRangeChanged(CefRefPtr<CefBrowser> Browser, const CefRange& SelectionRange, const CefRenderHandler::RectList& CharacterBounds)"
  },
  {
    "label": "UpdateDragRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDragRegions(const TArray<FWebBrowserDragRegion>& Regions)"
  },
  {
    "label": "GetCefKeyboardModifiers()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetCefKeyboardModifiers(const FKeyEvent& KeyEvent)"
  },
  {
    "label": "GetCefMouseModifiers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCefMouseModifiers(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "GetCefInputModifiers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCefInputModifiers(const FInputEvent& InputEvent)"
  },
  {
    "label": "CanSupportAcceleratedPaint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSupportAcceleratedPaint()"
  },
  {
    "label": "UpdateCachedGeometry()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateCachedGeometry(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "CheckTickActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckTickActivity()"
  },
  {
    "label": "UpdateVideoBuffering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVideoBuffering()"
  },
  {
    "label": "GetProcessInfo()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefDictionaryValue>)",
    "insertText": "GetProcessInfo()"
  },
  {
    "label": "URLRequestAllowsCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "URLRequestAllowsCredentials(const FString& URL)"
  },
  {
    "label": "GetRenderer()",
    "kind": "Method",
    "detail": "Function (} private : FSlateRenderer* const)",
    "insertText": "GetRenderer()"
  },
  {
    "label": "HandleRenderingError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRenderingError()"
  },
  {
    "label": "ReleaseTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTextures()"
  },
  {
    "label": "CreateInitialTextures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateInitialTextures()"
  },
  {
    "label": "RequestNavigationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestNavigationInternal(FString Url, FString Contents)"
  },
  {
    "label": "HasPendingNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingNavigation()"
  },
  {
    "label": "ProcessPendingNavigation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingNavigation()"
  },
  {
    "label": "SetIsHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsHidden(bool bValue)"
  },
  {
    "label": "PopulateCefKeyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCefKeyEvent(const FKeyEvent& InKeyEvent, CefKeyEvent& OutKeyEvent)"
  },
  {
    "label": "GetCefMouseEvent()",
    "kind": "Method",
    "detail": "Function (CefMouseEvent)",
    "insertText": "GetCefMouseEvent(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bIsPopup)"
  },
  {
    "label": "IsInDragRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInDragRegion(const FIntPoint& Point)"
  },
  {
    "label": "GetWebBrowserRenderTransform()",
    "kind": "Method",
    "detail": "Function (TOptional<FSlateRenderTransform>)",
    "insertText": "GetWebBrowserRenderTransform()"
  },
  {
    "label": "BlockInputInDirectHwndMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlockInputInDirectHwndMode()"
  },
  {
    "label": "LoadCustomCEF3Cursor()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS bool)",
    "insertText": "LoadCustomCEF3Cursor(cef_cursor_type_t Type)"
  }
]