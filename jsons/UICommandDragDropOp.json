[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FUICommandDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandDragDropOp"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / DragAndDrop . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / MultiBox / MultiBoxDefs . h \" class SWidget ; class FUICommandDragDropOp : public FDragDropOperation { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FUICommandDragDropOp, FDragDropOperation) static SLATE_API TSharedRef<FUICommandDragDropOp> New( FName InItemName, EMultiBlockType InBlockType, bool bInIsDraggingSection, FName InOriginMultiBox, TSharedPtr<SWidget> CustomDectorator, FVector2D DecoratorOffset)"
  },
  {
    "label": "FUICommandDragDropOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUICommandDragDropOp(FName InItemName, EMultiBlockType InBlockType, bool bInIsDraggingSection, FName InOriginMultiBox, TSharedPtr<SWidget> InCustomDecorator, FVector2D DecoratorOffset ) : ItemName( InItemName ) , BlockType( InBlockType ) , bIsDraggingSection(bInIsDraggingSection) , OriginMultiBox( InOriginMultiBox ) , CustomDecorator( InCustomDecorator ) , Offset( DecoratorOffset)"
  },
  {
    "label": "SetOnDropNotification()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOnDropNotification(FSimpleDelegate InOnDropNotification)"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (OnDropNotification = InOnDropNotification ; } TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  },
  {
    "label": "OnDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragged(const class FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(bool bDropWasHandled, const FPointerEvent& MouseEvent)"
  }
]