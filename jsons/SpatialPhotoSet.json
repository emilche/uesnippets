[
  {
    "label": "FSpatialPhotoParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpatialPhotoParams"
  },
  {
    "label": "TSpatialPhoto",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSpatialPhoto"
  },
  {
    "label": "TSpatialPhotoSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpatialPhotoSet"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" FrameTypes . h \" # include \" SceneView . h \" # include \" Image / ImageBuilder . h \" # include \" Image / ImageDimensions . h \" namespace UE { namespace Geometry { struct FSpatialPhotoParams { FFrame3d Frame ; double NearPlaneDist = 1 . 0 ; double HorzFOVDegrees = 9 0 . 0 ; FImageDimensions Dimensions ; bool)",
    "insertText": "operator(const FSpatialPhotoParams& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } ; template<PixelType> struct TSpatialPhoto { FFrame3d Frame ; double NearPlaneDist = 1 . 0 ; double HorzFOVDegrees = 9 0 . 0 ; FImageDimensions Dimensions ; TImageBuilder<PixelType> Image ; } ; typedef TSpatialPhoto<FVector4f> FSpatialPhoto4f ; typedef TSpatialPhoto<FVector3f> FSpatialPhoto3f ; typedef TSpatialPhoto<float> FSpatialPhoto1f ; template<PixelType,RealType> class TSpatialPhotoSet { public : void)",
    "insertText": "Add(TSpatialPhoto<PixelType>&& Photo)"
  },
  {
    "label": "ThreadSafe()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TSpatialPhoto<PixelType>,ESPMode::ThreadSafe> NewPhoto = MakeShared<TSpatialPhoto<PixelType>,)",
    "insertText": "ThreadSafe(MoveTemp(Photo))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Photos .)",
    "insertText": "Add(NewPhoto)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const TSpatialPhoto<PixelType>&)",
    "insertText": "Get(int32 Index)"
  },
  {
    "label": "ComputeSample()",
    "kind": "Method",
    "detail": "Function (PixelType)",
    "insertText": "ComputeSample(const int& PhotoIndex, const FVector2d& PhotoCoords, const PixelType& DefaultValue)"
  },
  {
    "label": "ComputeSampleNearest()",
    "kind": "Method",
    "detail": "Function (PixelType)",
    "insertText": "ComputeSampleNearest(const int& PhotoIndex, const FVector2d& PhotoCoords, const PixelType& DefaultValue)"
  },
  {
    "label": "ComputeSampleLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSampleLocation(const FVector3d& Position, const FVector3d& Normal, TFunctionRef<bool(const FVector3d&,const FVector3d&)> VisibilityFunction, int& PhotoIndex, FVector2d& PhotoCoords)"
  },
  {
    "label": "ComputeSampleLocation()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TSharedPtr<TSpatialPhoto<PixelType>,ESPMode::ThreadSafe>> Photos ; } ; typedef TSpatialPhotoSet<FVector4f,float> FSpatialPhotoSet4f ; typedef TSpatialPhotoSet<FVector3f,float> FSpatialPhotoSet3f ; typedef TSpatialPhotoSet<float,float> FSpatialPhotoSet1f ; template<PixelType,RealType> bool TSpatialPhotoSet<PixelType,RealType)",
    "insertText": "ComputeSampleLocation(const FVector3d& Position, const FVector3d& Normal, TFunctionRef<bool(const FVector3d&, const FVector3d&)> VisibilityFunction, int& PhotoIndex, FVector2d& PhotoCoords)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const TSpatialPhoto<PixelType>& Photo =* Photos [ Index ] ;)",
    "insertText": "check(Photo.Dimensions.IsSquare())"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FVector3d ViewDirection = Photo . Frame .)",
    "insertText": "X()"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (continue ; } FFrame3d ViewPlane = Photo . Frame ; ViewPlane . Origin + = Photo . NearPlaneDist* ViewDirection ; double ViewPlaneWidthWorld = Photo . NearPlaneDist*)",
    "insertText": "Tan(Photo.HorzFOVDegrees * 0.5 * FMathd::DegToRad)"
  },
  {
    "label": "RayPlaneIntersection()",
    "kind": "Method",
    "detail": "Function (FVector3d HitPoint ; bool bHit = ViewPlane .)",
    "insertText": "RayPlaneIntersection(RayOrigin, RayDir, 0, HitPoint)"
  },
  {
    "label": "VisibilityFunction()",
    "kind": "Method",
    "detail": "Function (bool bVisible =)",
    "insertText": "VisibilityFunction(Position, HitPoint)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (PhotoCoords .)",
    "insertText": "X(u/2.0 + 0.5) * (double)Photo.Dimensions.GetWidth()"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (PhotoCoords .)",
    "insertText": "Y(v/2.0 + 0.5) * (double)Photo.Dimensions.GetHeight()"
  },
  {
    "label": "ComputeSample()",
    "kind": "Method",
    "detail": "Function (PhotoIndex = Index ; MinDot = ViewDot ; } } } } return PhotoIndex ! = IndexConstants::InvalidID ; } template<PixelType,RealType> PixelType TSpatialPhotoSet<PixelType,RealType)",
    "insertText": "ComputeSample(const FVector3d& Position, const FVector3d& Normal, TFunctionRef<bool(const FVector3d&, const FVector3d&)> VisibilityFunction, const PixelType& DefaultValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PixelType Result = DefaultValue ; int PhotoIndex ; FVector2d PhotoCoords ;)",
    "insertText": "if(ComputeSampleLocation(Position, Normal, VisibilityFunction, PhotoIndex, PhotoCoords))"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (const TSpatialPhoto<PixelType>& Photo =* Photos [ PhotoIndex ] ; Result = Photo . Image . template BilinearSample<)",
    "insertText": "RealType(PhotoCoords, DefaultValue)"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (const TSpatialPhoto<PixelType>& Photo =* Photos [ PhotoIndex ] ; FVector2d UVCoords ; UVCoords . X = PhotoCoords . X / Photo . Image .)",
    "insertText": "GetDimensions().GetWidth()"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (UVCoords . Y = PhotoCoords . Y / Photo . Image .)",
    "insertText": "GetDimensions().GetHeight()"
  }
]