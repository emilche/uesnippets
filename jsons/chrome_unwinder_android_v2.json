[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FunctionTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionTableEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FunctionOffsetTableIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionOffsetTableIndex"
  },
  {
    "label": "ChromeUnwinderAndroidV2()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_CHROME_UNWINDER_ANDROID_V2_H_ # define BASE_PROFILER_CHROME_UNWINDER_ANDROID_V2_H_ # include<stdint . h> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / profiler / chrome_unwind_info_android . h \" # include \" base / profiler / module_cache . h \" # include \" base / profiler / register_context . h \" # include \" base / profiler / unwinder . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT ChromeUnwinderAndroidV2 : public Unwinder { public :)",
    "insertText": "ChromeUnwinderAndroidV2(const ChromeUnwindInfoAndroid& unwind_info, uintptr_t chrome_module_base_address, uintptr_t text_section_start_address)"
  },
  {
    "label": "ChromeUnwinderAndroidV2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChromeUnwinderAndroidV2(const ChromeUnwinderAndroidV2&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ChromeUnwinderAndroidV2&)",
    "insertText": "operator(const ChromeUnwinderAndroidV2&)"
  },
  {
    "label": "CanUnwindFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnwindFrom(const Frame& current_frame)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (UnwindResult)",
    "insertText": "TryUnwind(RegisterContext* thread_context, uintptr_t stack_top, std::vector<Frame>* stack)"
  },
  {
    "label": "ExecuteUnwindInstruction()",
    "kind": "Method",
    "detail": "Function (private : const ChromeUnwindInfoAndroid unwind_info_ ; const uintptr_t chrome_module_base_address_ ; const uintptr_t text_section_start_address_ ; } ; struct FunctionTableEntry ; enum class UnwindInstructionResult { kCompleted,kInstructionPending,kAborted,} ; BASE_EXPORT UnwindInstructionResult)",
    "insertText": "ExecuteUnwindInstruction(const uint8_t*& instruction, bool& pc_was_updated, RegisterContext* thread_context)"
  },
  {
    "label": "GetFirstUnwindInstructionIndexFromFunctionOffsetTableEntry()",
    "kind": "Method",
    "detail": "Function (struct FunctionOffsetTableIndex { int instruction_offset_from_function_start ; uint16_t function_offset_table_byte_index ; } ; BASE_EXPORT uintptr_t)",
    "insertText": "GetFirstUnwindInstructionIndexFromFunctionOffsetTableEntry(const uint8_t* function_offset_table_entry, int instruction_offset_from_function_start)"
  },
  {
    "label": "GetFunctionTableIndexFromInstructionOffset()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT const absl::optional<FunctionOffsetTableIndex>)",
    "insertText": "GetFunctionTableIndexFromInstructionOffset(span<const uint32_t> page_start_instructions, span<const FunctionTableEntry> function_offset_table_indices, uint32_t instruction_byte_offset_from_text_section_start)"
  }
]