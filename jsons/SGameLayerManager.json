[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "STooltipPresenter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STooltipPresenter"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "SDebugCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDebugCanvas"
  },
  {
    "label": "SWindowTitleBarArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindowTitleBarArea"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "IGameLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameLayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IGameLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameLayerManager"
  },
  {
    "label": "SGameLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGameLayerManager"
  },
  {
    "label": "FPlayerLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlayerLayer"
  },
  {
    "label": "FWindowTitleBarState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowTitleBarState"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Geometry . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SCanvas . h \" # include \" Widgets / Layout / SBox . h \" # include \" Styling / SlateTypes . h \" # include \" UObject / ObjectKey . h \" # include \" SGameLayerManager . generated . h \" class FPaintArgs ; class FSceneViewport ; class FSlateWindowElementList ; class SOverlay ; class STooltipPresenter ; class UGameViewportClient ; class ULocalPlayer ; class SDebugCanvas ; class SWindowTitleBarArea ; class SVerticalBox ; class IGameLayer : public TSharedFromThis<IGameLayer> { public : TSharedRef<SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "IGameLayer()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "IGameLayer()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "SetSceneViewport()",
    "kind": "Method",
    "detail": "Function (Overlay,VerticalBox } ; class IGameLayerManager { public : void)",
    "insertText": "SetSceneViewport(FSceneViewport* SceneViewport)"
  },
  {
    "label": "GetViewportWidgetHostGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetViewportWidgetHostGeometry()"
  },
  {
    "label": "GetViewportWidgetHostPaintGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetViewportWidgetHostPaintGeometry()"
  },
  {
    "label": "GetPlayerWidgetHostGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetPlayerWidgetHostGeometry(ULocalPlayer* Player)"
  },
  {
    "label": "NotifyPlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlayerAdded(int32 PlayerIndex, ULocalPlayer* AddedPlayer)"
  },
  {
    "label": "NotifyPlayerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlayerRemoved(int32 PlayerIndex, ULocalPlayer* RemovedPlayer)"
  },
  {
    "label": "AddWidgetForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetForPlayer(ULocalPlayer* Player, TSharedRef<SWidget> ViewportContent, int32 ZOrder)"
  },
  {
    "label": "RemoveWidgetForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidgetForPlayer(ULocalPlayer* Player, TSharedRef<SWidget> ViewportContent)"
  },
  {
    "label": "ClearWidgetsForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWidgetsForPlayer(ULocalPlayer* Player)"
  },
  {
    "label": "FindLayerForPlayer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IGameLayer>)",
    "insertText": "FindLayerForPlayer(ULocalPlayer* Player, const FName& LayerName)"
  },
  {
    "label": "AddLayerForPlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLayerForPlayer(ULocalPlayer* Player, const FName& LayerName, TSharedRef<IGameLayer> Layer, int32 ZOrder)"
  },
  {
    "label": "ClearWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWidgets()"
  },
  {
    "label": "AddGameLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameLayer(TSharedRef<SWidget> ViewportContent, int32 ZOrder)"
  },
  {
    "label": "RemoveGameLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGameLayer(TSharedRef<SWidget> ViewportContent)"
  },
  {
    "label": "SetDefaultWindowTitleBarHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultWindowTitleBarHeight(float Height)"
  },
  {
    "label": "SetWindowTitleBarState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowTitleBarState(const TSharedPtr<SWidget>& TitleBarContent, EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible)"
  },
  {
    "label": "RestorePreviousWindowTitleBarState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePreviousWindowTitleBarState()"
  },
  {
    "label": "SetWindowTitleBarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowTitleBarVisibility(bool bIsVisible)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SGameLayerManager : public SCompoundWidget,public IGameLayerManager { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGameLayerManager)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ATTRIBUTE(FSceneViewport*, SceneViewport) SLATE_END_ARGS()"
  },
  {
    "label": "SGameLayerManager()",
    "kind": "Method",
    "detail": "Function (Player = 1 0 0,Viewport = 2 0 0,TitleBar = 3 0 0,Tooltip = 4 0 0,Debug = 5 0 0,} ;)",
    "insertText": "SGameLayerManager()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetSceneViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSceneViewport(FSceneViewport* InSceneViewport)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnVisualizeTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVisualizeTooltip(const TSharedPtr<SWidget>& TooltipContent)"
  },
  {
    "label": "SetUseFixedDPIValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseFixedDPIValue(const bool bUseFixedDPI, const FIntPoint RefViewportSize = FIntPoint())"
  },
  {
    "label": "IsUsingFixedDPIValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingFixedDPIValue()"
  },
  {
    "label": "GetGameViewportDPIScale()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "GetGameViewportDPIScale()"
  },
  {
    "label": "GetDefaultWindowTitleBarHeight()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetDefaultWindowTitleBarHeight()"
  },
  {
    "label": "ShowPlayerCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPlayerCanvas(bool bIsVisible)"
  },
  {
    "label": "ShowDebugCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDebugCanvas(bool bIsVisible)"
  },
  {
    "label": "ShowViewportSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowViewportSlot(bool bIsVisible)"
  },
  {
    "label": "FPlayerLayer()",
    "kind": "Method",
    "detail": "Function (private : struct FPlayerLayer : TSharedFromThis<FPlayerLayer> { TSharedPtr<SOverlay> Widget ; SCanvas::FSlot* Slot ; TMap<FName,TSharedPtr<IGameLayer>> Layers ;)",
    "insertText": "FPlayerLayer() : Slot(nullptr)"
  },
  {
    "label": "UpdateLayout()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "UpdateLayout()"
  },
  {
    "label": "FindOrCreatePlayerLayer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPlayerLayer>)",
    "insertText": "FindOrCreatePlayerLayer(ULocalPlayer* LocalPlayer)"
  },
  {
    "label": "RemoveMissingPlayerLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMissingPlayerLayers(const TArray<ULocalPlayer*>& GamePlayers)"
  },
  {
    "label": "RemovePlayerWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlayerWidgets(ULocalPlayer* LocalPlayer)"
  },
  {
    "label": "AddOrUpdatePlayerLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdatePlayerLayers(const FGeometry& AllottedGeometry, UGameViewportClient* ViewportClient, const TArray<ULocalPlayer*>& GamePlayers)"
  },
  {
    "label": "GetNormalizeRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNormalizeRect(ULocalPlayer* LocalPlayer, FVector2D& OutPosition, FVector2D& OutSize)"
  },
  {
    "label": "UpdateWindowTitleBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowTitleBar()"
  },
  {
    "label": "UpdateWindowTitleBarVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindowTitleBarVisibility()"
  },
  {
    "label": "RequestToggleFullscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestToggleFullscreen()"
  },
  {
    "label": "FWindowTitleBarState()",
    "kind": "Method",
    "detail": "Function (private : FGeometry CachedGeometry ; TMap<FObjectKey,TSharedPtr<FPlayerLayer>> PlayerLayers ; TAttribute<FSceneViewport*> SceneViewport ; TSharedPtr<SVerticalBox> WidgetHost ; TSharedPtr<SCanvas> PlayerCanvas ; TSharedPtr<SDebugCanvas> DebugCanvas ; TSharedPtr<SBox> ViewportSlotContainer ; TSharedPtr<STooltipPresenter> TooltipPresenter ; TSharedPtr<SWindowTitleBarArea> TitleBarAreaOverlay ; TSharedPtr<SWindowTitleBarArea> TitleBarAreaVerticalBox ; TSharedPtr<SBox> WindowTitleBarVerticalBox ; TSharedPtr<SBox> WindowTitleBarOverlay ; TSharedPtr<SOverlay> WindowOverlay ; struct FWindowTitleBarState { TSharedPtr<SWidget> ContentWidget ; EWindowTitleBarMode Mode ; bool bTitleBarDragEnabled ; bool bWindowButtonsVisible ; bool bTitleBarVisible ;)",
    "insertText": "FWindowTitleBarState() : ContentWidget(), Mode(EWindowTitleBarMode::Overlay), bTitleBarDragEnabled(false), bWindowButtonsVisible(false), bTitleBarVisible(false)"
  },
  {
    "label": "FWindowTitleBarState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWindowTitleBarState(const TSharedPtr<SWidget>& TitleBarContent, EWindowTitleBarMode InMode, bool bInTitleBarDragEnabled, bool bInWindowButtonsVisible, bool bInTitleBarVisible) : ContentWidget(TitleBarContent) , Mode(InMode) , bTitleBarDragEnabled(bInTitleBarDragEnabled) , bWindowButtonsVisible(bInWindowButtonsVisible && (PLATFORM_WINDOWS || PLATFORM_LINUX)) , bTitleBarVisible(bInTitleBarVisible && PLATFORM_DESKTOP)"
  }
]