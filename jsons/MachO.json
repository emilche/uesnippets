[
  {
    "label": "HeaderFileType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HeaderFileType"
  },
  {
    "label": "LoadCommandType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LoadCommandType"
  },
  {
    "label": "SectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SectionType"
  },
  {
    "label": "DataRegionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DataRegionType"
  },
  {
    "label": "RebaseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RebaseType"
  },
  {
    "label": "RebaseOpcode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RebaseOpcode"
  },
  {
    "label": "BindType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BindType"
  },
  {
    "label": "BindSpecialDylib",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BindSpecialDylib"
  },
  {
    "label": "BindOpcode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BindOpcode"
  },
  {
    "label": "ExportSymbolKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExportSymbolKind"
  },
  {
    "label": "NListType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NListType"
  },
  {
    "label": "SectionOrdinal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SectionOrdinal"
  },
  {
    "label": "StabType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StabType"
  },
  {
    "label": "RelocationInfoType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RelocationInfoType"
  },
  {
    "label": "mach_header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mach_header"
  },
  {
    "label": "mach_header_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mach_header_64"
  },
  {
    "label": "load_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "load_command"
  },
  {
    "label": "segment_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segment_command"
  },
  {
    "label": "segment_command_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segment_command_64"
  },
  {
    "label": "section",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "section"
  },
  {
    "label": "section_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "section_64"
  },
  {
    "label": "fvmlib",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fvmlib"
  },
  {
    "label": "fvmlib_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fvmlib_command"
  },
  {
    "label": "dylib",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylib"
  },
  {
    "label": "dylib_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylib_command"
  },
  {
    "label": "sub_framework_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sub_framework_command"
  },
  {
    "label": "sub_client_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sub_client_command"
  },
  {
    "label": "sub_umbrella_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sub_umbrella_command"
  },
  {
    "label": "sub_library_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sub_library_command"
  },
  {
    "label": "prebound_dylib_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "prebound_dylib_command"
  },
  {
    "label": "dylinker_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylinker_command"
  },
  {
    "label": "thread_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "thread_command"
  },
  {
    "label": "routines_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "routines_command"
  },
  {
    "label": "routines_command_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "routines_command_64"
  },
  {
    "label": "symtab_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symtab_command"
  },
  {
    "label": "dysymtab_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dysymtab_command"
  },
  {
    "label": "dylib_table_of_contents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylib_table_of_contents"
  },
  {
    "label": "dylib_module",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylib_module"
  },
  {
    "label": "dylib_module_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylib_module_64"
  },
  {
    "label": "dylib_reference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dylib_reference"
  },
  {
    "label": "twolevel_hints_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "twolevel_hints_command"
  },
  {
    "label": "twolevel_hint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "twolevel_hint"
  },
  {
    "label": "prebind_cksum_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "prebind_cksum_command"
  },
  {
    "label": "uuid_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "uuid_command"
  },
  {
    "label": "rpath_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rpath_command"
  },
  {
    "label": "linkedit_data_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "linkedit_data_command"
  },
  {
    "label": "data_in_code_entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "data_in_code_entry"
  },
  {
    "label": "source_version_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "source_version_command"
  },
  {
    "label": "encryption_info_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "encryption_info_command"
  },
  {
    "label": "encryption_info_command_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "encryption_info_command_64"
  },
  {
    "label": "version_min_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "version_min_command"
  },
  {
    "label": "dyld_info_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dyld_info_command"
  },
  {
    "label": "linker_option_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "linker_option_command"
  },
  {
    "label": "symseg_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symseg_command"
  },
  {
    "label": "ident_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ident_command"
  },
  {
    "label": "fvmfile_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fvmfile_command"
  },
  {
    "label": "tlv_descriptor_32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tlv_descriptor_32"
  },
  {
    "label": "tlv_descriptor_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tlv_descriptor_64"
  },
  {
    "label": "tlv_descriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tlv_descriptor"
  },
  {
    "label": "entry_point_command",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "entry_point_command"
  },
  {
    "label": "fat_header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fat_header"
  },
  {
    "label": "fat_arch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fat_arch"
  },
  {
    "label": "relocation_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "relocation_info"
  },
  {
    "label": "scattered_relocation_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scattered_relocation_info"
  },
  {
    "label": "any_relocation_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "any_relocation_info"
  },
  {
    "label": "nlist_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nlist_base"
  },
  {
    "label": "nlist",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nlist"
  },
  {
    "label": "nlist_64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nlist_64"
  },
  {
    "label": "CPUType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CPUType"
  },
  {
    "label": "CPUSubTypeX86",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CPUSubTypeX86"
  },
  {
    "label": "CPUSubTypeARM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CPUSubTypeARM"
  },
  {
    "label": "CPUSubTypeARM64",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CPUSubTypeARM64"
  },
  {
    "label": "CPUSubTypeSPARC",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CPUSubTypeSPARC"
  },
  {
    "label": "CPUSubTypePowerPC",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CPUSubTypePowerPC"
  },
  {
    "label": "x86_thread_state64_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_thread_state64_t"
  },
  {
    "label": "x86_fp_control_precis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "x86_fp_control_precis"
  },
  {
    "label": "x86_fp_control_rc",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "x86_fp_control_rc"
  },
  {
    "label": "fp_control_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fp_control_t"
  },
  {
    "label": "fp_status_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fp_status_t"
  },
  {
    "label": "mmst_reg_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mmst_reg_t"
  },
  {
    "label": "xmm_reg_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "xmm_reg_t"
  },
  {
    "label": "x86_float_state64_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_float_state64_t"
  },
  {
    "label": "x86_exception_state64_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_exception_state64_t"
  },
  {
    "label": "x86_state_hdr_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_state_hdr_t"
  },
  {
    "label": "x86_thread_state_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_thread_state_t"
  },
  {
    "label": "x86_float_state_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_float_state_t"
  },
  {
    "label": "x86_exception_state_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x86_exception_state_t"
  },
  {
    "label": "X86ThreadFlavors",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "X86ThreadFlavors"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_MACHO_H # define LLVM_SUPPORT_MACHO_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / Host . h \" namespace llvm { namespace MachO { enum : uint32_t { MH_MAGIC = 0 xFEEDFACEu,MH_CIGAM = 0 xCEFAEDFEu,MH_MAGIC_64 = 0 xFEEDFACFu,MH_CIGAM_64 = 0 xCFFAEDFEu,FAT_MAGIC = 0 xCAFEBABEu,FAT_CIGAM = 0 xBEBAFECAu } ; enum HeaderFileType { MH_OBJECT = 0 x1u,MH_EXECUTE = 0 x2u,MH_FVMLIB = 0 x3u,MH_CORE = 0 x4u,MH_PRELOAD = 0 x5u,MH_DYLIB = 0 x6u,MH_DYLINKER = 0 x7u,MH_BUNDLE = 0 x8u,MH_DYLIB_STUB = 0 x9u,MH_DSYM = 0 xAu,MH_KEXT_BUNDLE = 0 xBu } ; enum { MH_NOUNDEFS = 0 x00000001u,MH_INCRLINK = 0 x00000002u,MH_DYLDLINK = 0 x00000004u,MH_BINDATLOAD = 0 x00000008u,MH_PREBOUND = 0 x00000010u,MH_SPLIT_SEGS = 0 x00000020u,MH_LAZY_INIT = 0 x00000040u,MH_TWOLEVEL = 0 x00000080u,MH_FORCE_FLAT = 0 x00000100u,MH_NOMULTIDEFS = 0 x00000200u,MH_NOFIXPREBINDING = 0 x00000400u,MH_PREBINDABLE = 0 x00000800u,MH_ALLMODSBOUND = 0 x00001000u,MH_SUBSECTIONS_VIA_SYMBOLS = 0 x00002000u,MH_CANONICAL = 0 x00004000u,MH_WEAK_DEFINES = 0 x00008000u,MH_BINDS_TO_WEAK = 0 x00010000u,MH_ALLOW_STACK_EXECUTION = 0 x00020000u,MH_ROOT_SAFE = 0 x00040000u,MH_SETUID_SAFE = 0 x00080000u,MH_NO_REEXPORTED_DYLIBS = 0 x00100000u,MH_PIE = 0 x00200000u,MH_DEAD_STRIPPABLE_DYLIB = 0 x00400000u,MH_HAS_TLV_DESCRIPTORS = 0 x00800000u,MH_NO_HEAP_EXECUTION = 0 x01000000u,MH_APP_EXTENSION_SAFE = 0 x02000000u } ; enum : uint32_t { LC_REQ_DYLD = 0 x80000000u } ; enum LoadCommandType : uint32_t { LC_SEGMENT = 0 x00000001u,LC_SYMTAB = 0 x00000002u,LC_SYMSEG = 0 x00000003u,LC_THREAD = 0 x00000004u,LC_UNIXTHREAD = 0 x00000005u,LC_LOADFVMLIB = 0 x00000006u,LC_IDFVMLIB = 0 x00000007u,LC_IDENT = 0 x00000008u,LC_FVMFILE = 0 x00000009u,LC_PREPAGE = 0 x0000000Au,LC_DYSYMTAB = 0 x0000000Bu,LC_LOAD_DYLIB = 0 x0000000Cu,LC_ID_DYLIB = 0 x0000000Du,LC_LOAD_DYLINKER = 0 x0000000Eu,LC_ID_DYLINKER = 0 x0000000Fu,LC_PREBOUND_DYLIB = 0 x00000010u,LC_ROUTINES = 0 x00000011u,LC_SUB_FRAMEWORK = 0 x00000012u,LC_SUB_UMBRELLA = 0 x00000013u,LC_SUB_CLIENT = 0 x00000014u,LC_SUB_LIBRARY = 0 x00000015u,LC_TWOLEVEL_HINTS = 0 x00000016u,LC_PREBIND_CKSUM = 0 x00000017u,LC_LOAD_WEAK_DYLIB = 0 x80000018u,LC_SEGMENT_64 = 0 x00000019u,LC_ROUTINES_64 = 0 x0000001Au,LC_UUID = 0 x0000001Bu,LC_RPATH = 0 x8000001Cu,LC_CODE_SIGNATURE = 0 x0000001Du,LC_SEGMENT_SPLIT_INFO = 0 x0000001Eu,LC_REEXPORT_DYLIB = 0 x8000001Fu,LC_LAZY_LOAD_DYLIB = 0 x00000020u,LC_ENCRYPTION_INFO = 0 x00000021u,LC_DYLD_INFO = 0 x00000022u,LC_DYLD_INFO_ONLY = 0 x80000022u,LC_LOAD_UPWARD_DYLIB = 0 x80000023u,LC_VERSION_MIN_MACOSX = 0 x00000024u,LC_VERSION_MIN_IPHONEOS = 0 x00000025u,LC_FUNCTION_STARTS = 0 x00000026u,LC_DYLD_ENVIRONMENT = 0 x00000027u,LC_MAIN = 0 x80000028u,LC_DATA_IN_CODE = 0 x00000029u,LC_SOURCE_VERSION = 0 x0000002Au,LC_DYLIB_CODE_SIGN_DRS = 0 x0000002Bu,LC_ENCRYPTION_INFO_64 = 0 x0000002Cu,LC_LINKER_OPTION = 0 x0000002Du,LC_LINKER_OPTIMIZATION_HINT = 0 x0000002Eu } ; enum : uint32_t { SG_HIGHVM = 0 x1u,SG_FVMLIB = 0 x2u,SG_NORELOC = 0 x4u,SG_PROTECTED_VERSION_1 = 0 x8u,SECTION_TYPE = 0 x000000ffu,SECTION_ATTRIBUTES = 0 xffffff00u,SECTION_ATTRIBUTES_USR = 0 xff000000u,SECTION_ATTRIBUTES_SYS = 0 x00ffff00u } ; enum SectionType : uint32_t { S_REGULAR = 0 x00u,S_ZEROFILL = 0 x01u,S_CSTRING_LITERALS = 0 x02u,S_4BYTE_LITERALS = 0 x03u,S_8BYTE_LITERALS = 0 x04u,S_LITERAL_POINTERS = 0 x05u,S_NON_LAZY_SYMBOL_POINTERS = 0 x06u,S_LAZY_SYMBOL_POINTERS = 0 x07u,S_SYMBOL_STUBS = 0 x08u,S_MOD_INIT_FUNC_POINTERS = 0 x09u,S_MOD_TERM_FUNC_POINTERS = 0 x0au,S_COALESCED = 0 x0bu,S_GB_ZEROFILL = 0 x0cu,S_INTERPOSING = 0 x0du,S_16BYTE_LITERALS = 0 x0eu,S_DTRACE_DOF = 0 x0fu,S_LAZY_DYLIB_SYMBOL_POINTERS = 0 x10u,S_THREAD_LOCAL_REGULAR = 0 x11u,S_THREAD_LOCAL_ZEROFILL = 0 x12u,S_THREAD_LOCAL_VARIABLES = 0 x13u,S_THREAD_LOCAL_VARIABLE_POINTERS = 0 x14u,S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 0 x15u,LAST_KNOWN_SECTION_TYPE = S_THREAD_LOCAL_INIT_FUNCTION_POINTERS } ; enum : uint32_t { S_ATTR_PURE_INSTRUCTIONS = 0 x80000000u,S_ATTR_NO_TOC = 0 x40000000u,S_ATTR_STRIP_STATIC_SYMS = 0 x20000000u,S_ATTR_NO_DEAD_STRIP = 0 x10000000u,S_ATTR_LIVE_SUPPORT = 0 x08000000u,S_ATTR_SELF_MODIFYING_CODE = 0 x04000000u,S_ATTR_DEBUG = 0 x02000000u,S_ATTR_SOME_INSTRUCTIONS = 0 x00000400u,S_ATTR_EXT_RELOC = 0 x00000200u,S_ATTR_LOC_RELOC = 0 x00000100u,INDIRECT_SYMBOL_LOCAL = 0 x80000000u,INDIRECT_SYMBOL_ABS = 0 x40000000u } ; enum DataRegionType { DICE_KIND_DATA = 1 u,DICE_KIND_JUMP_TABLE8 = 2 u,DICE_KIND_JUMP_TABLE16 = 3 u,DICE_KIND_JUMP_TABLE32 = 4 u,DICE_KIND_ABS_JUMP_TABLE32 = 5 u } ; enum RebaseType { REBASE_TYPE_POINTER = 1 u,REBASE_TYPE_TEXT_ABSOLUTE32 = 2 u,REBASE_TYPE_TEXT_PCREL32 = 3 u } ; enum { REBASE_OPCODE_MASK = 0 xF0u,REBASE_IMMEDIATE_MASK = 0 x0Fu } ; enum RebaseOpcode { REBASE_OPCODE_DONE = 0 x00u,REBASE_OPCODE_SET_TYPE_IMM = 0 x10u,REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 0 x20u,REBASE_OPCODE_ADD_ADDR_ULEB = 0 x30u,REBASE_OPCODE_ADD_ADDR_IMM_SCALED = 0 x40u,REBASE_OPCODE_DO_REBASE_IMM_TIMES = 0 x50u,REBASE_OPCODE_DO_REBASE_ULEB_TIMES = 0 x60u,REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB = 0 x70u,REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB = 0 x80u } ; enum BindType { BIND_TYPE_POINTER = 1 u,BIND_TYPE_TEXT_ABSOLUTE32 = 2 u,BIND_TYPE_TEXT_PCREL32 = 3 u } ; enum BindSpecialDylib { BIND_SPECIAL_DYLIB_SELF = 0,BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE = - 1,BIND_SPECIAL_DYLIB_FLAT_LOOKUP = - 2 } ; enum { BIND_SYMBOL_FLAGS_WEAK_IMPORT = 0 x1u,BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION = 0 x8u,BIND_OPCODE_MASK = 0 xF0u,BIND_IMMEDIATE_MASK = 0 x0Fu } ; enum BindOpcode { BIND_OPCODE_DONE = 0 x00u,BIND_OPCODE_SET_DYLIB_ORDINAL_IMM = 0 x10u,BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB = 0 x20u,BIND_OPCODE_SET_DYLIB_SPECIAL_IMM = 0 x30u,BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM = 0 x40u,BIND_OPCODE_SET_TYPE_IMM = 0 x50u,BIND_OPCODE_SET_ADDEND_SLEB = 0 x60u,BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 0 x70u,BIND_OPCODE_ADD_ADDR_ULEB = 0 x80u,BIND_OPCODE_DO_BIND = 0 x90u,BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB = 0 xA0u,BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED = 0 xB0u,BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB = 0 xC0u } ; enum { EXPORT_SYMBOL_FLAGS_KIND_MASK = 0 x03u,EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION = 0 x04u,EXPORT_SYMBOL_FLAGS_REEXPORT = 0 x08u,EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER = 0 x10u } ; enum ExportSymbolKind { EXPORT_SYMBOL_FLAGS_KIND_REGULAR = 0 x00u,EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL = 0 x01u,EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE = 0 x02u } ; enum { N_STAB = 0 xe0,N_PEXT = 0 x10,N_TYPE = 0 x0e,N_EXT = 0 x01 } ; enum NListType { N_UNDF = 0 x0u,N_ABS = 0 x2u,N_SECT = 0 xeu,N_PBUD = 0 xcu,N_INDR = 0 xau } ; enum SectionOrdinal { NO_SECT = 0 u,MAX_SECT = 0 xffu } ; enum { REFERENCE_TYPE = 0 x7,REFERENCE_FLAG_UNDEFINED_NON_LAZY = 0,REFERENCE_FLAG_UNDEFINED_LAZY = 1,REFERENCE_FLAG_DEFINED = 2,REFERENCE_FLAG_PRIVATE_DEFINED = 3,REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY = 4,REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY = 5,N_ARM_THUMB_DEF = 0 x0008u,REFERENCED_DYNAMICALLY = 0 x0010u,N_NO_DEAD_STRIP = 0 x0020u,N_WEAK_REF = 0 x0040u,N_WEAK_DEF = 0 x0080u,N_SYMBOL_RESOLVER = 0 x0100u,N_ALT_ENTRY = 0 x0200u,SELF_LIBRARY_ORDINAL = 0 x0,MAX_LIBRARY_ORDINAL = 0 xfd,DYNAMIC_LOOKUP_ORDINAL = 0 xfe,EXECUTABLE_ORDINAL = 0 xff } ; enum StabType { N_GSYM = 0 x20u,N_FNAME = 0 x22u,N_FUN = 0 x24u,N_STSYM = 0 x26u,N_LCSYM = 0 x28u,N_BNSYM = 0 x2Eu,N_PC = 0 x30u,N_AST = 0 x32u,N_OPT = 0 x3Cu,N_RSYM = 0 x40u,N_SLINE = 0 x44u,N_ENSYM = 0 x4Eu,N_SSYM = 0 x60u,N_SO = 0 x64u,N_OSO = 0 x66u,N_LSYM = 0 x80u,N_BINCL = 0 x82u,N_SOL = 0 x84u,N_PARAMS = 0 x86u,N_VERSION = 0 x88u,N_OLEVEL = 0 x8Au,N_PSYM = 0 xA0u,N_EINCL = 0 xA2u,N_ENTRY = 0 xA4u,N_LBRAC = 0 xC0u,N_EXCL = 0 xC2u,N_RBRAC = 0 xE0u,N_BCOMM = 0 xE2u,N_ECOMM = 0 xE4u,N_ECOML = 0 xE8u,N_LENG = 0 xFEu } ; enum : uint32_t { R_ABS = 0,R_SCATTERED = 0 x80000000 } ; enum RelocationInfoType { GENERIC_RELOC_VANILLA = 0,GENERIC_RELOC_PAIR = 1,GENERIC_RELOC_SECTDIFF = 2,GENERIC_RELOC_PB_LA_PTR = 3,GENERIC_RELOC_LOCAL_SECTDIFF = 4,GENERIC_RELOC_TLV = 5,PPC_RELOC_VANILLA = GENERIC_RELOC_VANILLA,PPC_RELOC_PAIR = GENERIC_RELOC_PAIR,PPC_RELOC_BR14 = 2,PPC_RELOC_BR24 = 3,PPC_RELOC_HI16 = 4,PPC_RELOC_LO16 = 5,PPC_RELOC_HA16 = 6,PPC_RELOC_LO14 = 7,PPC_RELOC_SECTDIFF = 8,PPC_RELOC_PB_LA_PTR = 9,PPC_RELOC_HI16_SECTDIFF = 1 0,PPC_RELOC_LO16_SECTDIFF = 1 1,PPC_RELOC_HA16_SECTDIFF = 1 2,PPC_RELOC_JBSR = 1 3,PPC_RELOC_LO14_SECTDIFF = 1 4,PPC_RELOC_LOCAL_SECTDIFF = 1 5,ARM_RELOC_VANILLA = GENERIC_RELOC_VANILLA,ARM_RELOC_PAIR = GENERIC_RELOC_PAIR,ARM_RELOC_SECTDIFF = GENERIC_RELOC_SECTDIFF,ARM_RELOC_LOCAL_SECTDIFF = 3,ARM_RELOC_PB_LA_PTR = 4,ARM_RELOC_BR24 = 5,ARM_THUMB_RELOC_BR22 = 6,ARM_THUMB_32BIT_BRANCH = 7,ARM_RELOC_HALF = 8,ARM_RELOC_HALF_SECTDIFF = 9,ARM64_RELOC_UNSIGNED = 0,ARM64_RELOC_SUBTRACTOR = 1,ARM64_RELOC_BRANCH26 = 2,ARM64_RELOC_PAGE21 = 3,ARM64_RELOC_PAGEOFF12 = 4,ARM64_RELOC_GOT_LOAD_PAGE21 = 5,ARM64_RELOC_GOT_LOAD_PAGEOFF12 = 6,ARM64_RELOC_POINTER_TO_GOT = 7,ARM64_RELOC_TLVP_LOAD_PAGE21 = 8,ARM64_RELOC_TLVP_LOAD_PAGEOFF12 = 9,ARM64_RELOC_ADDEND = 1 0,X86_64_RELOC_UNSIGNED = 0,X86_64_RELOC_SIGNED = 1,X86_64_RELOC_BRANCH = 2,X86_64_RELOC_GOT_LOAD = 3,X86_64_RELOC_GOT = 4,X86_64_RELOC_SUBTRACTOR = 5,X86_64_RELOC_SIGNED_1 = 6,X86_64_RELOC_SIGNED_2 = 7,X86_64_RELOC_SIGNED_4 = 8,X86_64_RELOC_TLV = 9 } ; enum { VM_PROT_READ = 0 x1,VM_PROT_WRITE = 0 x2,VM_PROT_EXECUTE = 0 x4 } ; struct mach_header { uint32_t magic ; uint32_t cputype ; uint32_t cpusubtype ; uint32_t filetype ; uint32_t ncmds ; uint32_t sizeofcmds ; uint32_t flags ; } ; struct mach_header_64 { uint32_t magic ; uint32_t cputype ; uint32_t cpusubtype ; uint32_t filetype ; uint32_t ncmds ; uint32_t sizeofcmds ; uint32_t flags ; uint32_t reserved ; } ; struct load_command { uint32_t cmd ; uint32_t cmdsize ; } ; struct segment_command { uint32_t cmd ; uint32_t cmdsize ; char segname [ 1 6 ] ; uint32_t vmaddr ; uint32_t vmsize ; uint32_t fileoff ; uint32_t filesize ; uint32_t maxprot ; uint32_t initprot ; uint32_t nsects ; uint32_t flags ; } ; struct segment_command_64 { uint32_t cmd ; uint32_t cmdsize ; char segname [ 1 6 ] ; uint64_t vmaddr ; uint64_t vmsize ; uint64_t fileoff ; uint64_t filesize ; uint32_t maxprot ; uint32_t initprot ; uint32_t nsects ; uint32_t flags ; } ; struct section { char sectname [ 1 6 ] ; char segname [ 1 6 ] ; uint32_t addr ; uint32_t size ; uint32_t offset ; uint32_t align ; uint32_t reloff ; uint32_t nreloc ; uint32_t flags ; uint32_t reserved1 ; uint32_t reserved2 ; } ; struct section_64 { char sectname [ 1 6 ] ; char segname [ 1 6 ] ; uint64_t addr ; uint64_t size ; uint32_t offset ; uint32_t align ; uint32_t reloff ; uint32_t nreloc ; uint32_t flags ; uint32_t reserved1 ; uint32_t reserved2 ; uint32_t reserved3 ; } ; struct fvmlib { uint32_t name ; uint32_t minor_version ; uint32_t header_addr ; } ; struct fvmlib_command { uint32_t cmd ; uint32_t cmdsize ; struct fvmlib fvmlib ; } ; struct dylib { uint32_t name ; uint32_t timestamp ; uint32_t current_version ; uint32_t compatibility_version ; } ; struct dylib_command { uint32_t cmd ; uint32_t cmdsize ; struct dylib dylib ; } ; struct sub_framework_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t umbrella ; } ; struct sub_client_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t client ; } ; struct sub_umbrella_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t sub_umbrella ; } ; struct sub_library_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t sub_library ; } ; struct prebound_dylib_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t name ; uint32_t nmodules ; uint32_t linked_modules ; } ; struct dylinker_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t name ; } ; struct thread_command { uint32_t cmd ; uint32_t cmdsize ; } ; struct routines_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t init_address ; uint32_t init_module ; uint32_t reserved1 ; uint32_t reserved2 ; uint32_t reserved3 ; uint32_t reserved4 ; uint32_t reserved5 ; uint32_t reserved6 ; } ; struct routines_command_64 { uint32_t cmd ; uint32_t cmdsize ; uint64_t init_address ; uint64_t init_module ; uint64_t reserved1 ; uint64_t reserved2 ; uint64_t reserved3 ; uint64_t reserved4 ; uint64_t reserved5 ; uint64_t reserved6 ; } ; struct symtab_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t symoff ; uint32_t nsyms ; uint32_t stroff ; uint32_t strsize ; } ; struct dysymtab_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t ilocalsym ; uint32_t nlocalsym ; uint32_t iextdefsym ; uint32_t nextdefsym ; uint32_t iundefsym ; uint32_t nundefsym ; uint32_t tocoff ; uint32_t ntoc ; uint32_t modtaboff ; uint32_t nmodtab ; uint32_t extrefsymoff ; uint32_t nextrefsyms ; uint32_t indirectsymoff ; uint32_t nindirectsyms ; uint32_t extreloff ; uint32_t nextrel ; uint32_t locreloff ; uint32_t nlocrel ; } ; struct dylib_table_of_contents { uint32_t symbol_index ; uint32_t module_index ; } ; struct dylib_module { uint32_t module_name ; uint32_t iextdefsym ; uint32_t nextdefsym ; uint32_t irefsym ; uint32_t nrefsym ; uint32_t ilocalsym ; uint32_t nlocalsym ; uint32_t iextrel ; uint32_t nextrel ; uint32_t iinit_iterm ; uint32_t ninit_nterm ; uint32_t objc_module_info_addr ; uint32_t objc_module_info_size ; } ; struct dylib_module_64 { uint32_t module_name ; uint32_t iextdefsym ; uint32_t nextdefsym ; uint32_t irefsym ; uint32_t nrefsym ; uint32_t ilocalsym ; uint32_t nlocalsym ; uint32_t iextrel ; uint32_t nextrel ; uint32_t iinit_iterm ; uint32_t ninit_nterm ; uint32_t objc_module_info_size ; uint64_t objc_module_info_addr ; } ; struct dylib_reference { uint32_t isym : 2 4,flags : 8 ; } ; struct twolevel_hints_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t offset ; uint32_t nhints ; } ; struct twolevel_hint { uint32_t isub_image : 8,itoc : 2 4 ; } ; struct prebind_cksum_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t cksum ; } ; struct uuid_command { uint32_t cmd ; uint32_t cmdsize ; uint8_t uuid [ 1 6 ] ; } ; struct rpath_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t path ; } ; struct linkedit_data_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t dataoff ; uint32_t datasize ; } ; struct data_in_code_entry { uint32_t offset ; uint16_t length ; uint16_t kind ; } ; struct source_version_command { uint32_t cmd ; uint32_t cmdsize ; uint64_t version ; } ; struct encryption_info_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t cryptoff ; uint32_t cryptsize ; uint32_t cryptid ; } ; struct encryption_info_command_64 { uint32_t cmd ; uint32_t cmdsize ; uint32_t cryptoff ; uint32_t cryptsize ; uint32_t cryptid ; uint32_t pad ; } ; struct version_min_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t version ; uint32_t sdk ; } ; struct dyld_info_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t rebase_off ; uint32_t rebase_size ; uint32_t bind_off ; uint32_t bind_size ; uint32_t weak_bind_off ; uint32_t weak_bind_size ; uint32_t lazy_bind_off ; uint32_t lazy_bind_size ; uint32_t export_off ; uint32_t export_size ; } ; struct linker_option_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t count ; } ; struct symseg_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t offset ; uint32_t size ; } ; struct ident_command { uint32_t cmd ; uint32_t cmdsize ; } ; struct fvmfile_command { uint32_t cmd ; uint32_t cmdsize ; uint32_t name ; uint32_t header_addr ; } ; struct tlv_descriptor_32 { uint32_t thunk ; uint32_t key ; uint32_t offset ; } ; struct tlv_descriptor_64 { uint64_t thunk ; uint64_t key ; uint64_t offset ; } ; struct tlv_descriptor { uintptr_t thunk ; uintptr_t key ; uintptr_t offset ; } ; struct entry_point_command { uint32_t cmd ; uint32_t cmdsize ; uint64_t entryoff ; uint64_t stacksize ; } ; struct fat_header { uint32_t magic ; uint32_t nfat_arch ; } ; struct fat_arch { uint32_t cputype ; uint32_t cpusubtype ; uint32_t offset ; uint32_t size ; uint32_t align ; } ; struct relocation_info { int32_t r_address ; uint32_t r_symbolnum : 2 4,r_pcrel : 1,r_length : 2,r_extern : 1,r_type : 4 ; } ; struct scattered_relocation_info { # if)",
    "insertText": "defined(BYTE_ORDER) && defined(BIG_ENDIAN) && (BYTE_ORDER == BIG_ENDIAN)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (# else uint32_t r_address : 2 4,r_type : 4,r_length : 2,r_pcrel : 1,r_scattered : 1 ; # endif int32_t r_value ; } ; struct any_relocation_info { uint32_t r_word0,r_word1 ; } ; struct nlist_base { uint32_t n_strx ; uint8_t n_type ; uint8_t n_sect ; uint16_t n_desc ; } ; struct nlist { uint32_t n_strx ; uint8_t n_type ; uint8_t n_sect ; int16_t n_desc ; uint32_t n_value ; } ; struct nlist_64 { uint32_t n_strx ; uint8_t n_type ; uint8_t n_sect ; uint16_t n_desc ; uint64_t n_value ; } ; void)",
    "insertText": "swapStruct(mach_header &mh)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.magic)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.cputype)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.cpusubtype)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.filetype)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.ncmds)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.sizeofcmds)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(mh.flags)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(mach_header_64 &H)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.magic)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.cputype)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.cpusubtype)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.filetype)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.ncmds)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.sizeofcmds)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.flags)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(H.reserved)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(load_command &lc)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(lc.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(lc.cmdsize)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(symtab_command &lc)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(lc.symoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(lc.nsyms)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(lc.stroff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(lc.strsize)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(segment_command_64 &seg)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.vmaddr)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.vmsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.fileoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.filesize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.maxprot)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.initprot)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.nsects)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(seg.flags)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(segment_command &seg)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(section_64 &sect)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.addr)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.size)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.offset)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.align)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.reloff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.nreloc)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.flags)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.reserved1)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sect.reserved2)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(section &sect)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(dyld_info_command &info)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.rebase_off)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.rebase_size)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.bind_off)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.bind_size)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.weak_bind_off)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.weak_bind_size)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.lazy_bind_off)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.lazy_bind_size)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.export_off)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(info.export_size)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(dylib_command &d)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.dylib.name)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.dylib.timestamp)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.dylib.current_version)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.dylib.compatibility_version)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(sub_framework_command &s)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.umbrella)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(sub_umbrella_command &s)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.sub_umbrella)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(sub_library_command &s)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.sub_library)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(sub_client_command &s)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.client)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(routines_command &r)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.init_address)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.init_module)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.reserved1)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.reserved2)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.reserved3)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.reserved4)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.reserved5)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.reserved6)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(routines_command_64 &r)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(thread_command &t)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(t.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(t.cmdsize)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(dylinker_command &d)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(d.name)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(uuid_command &u)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(u.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(u.cmdsize)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(rpath_command &r)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(r.path)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(source_version_command &s)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(s.version)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(entry_point_command &e)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.entryoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.stacksize)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(encryption_info_command &e)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.cryptoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.cryptsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.cryptid)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(encryption_info_command_64 &e)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(e.pad)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(dysymtab_command &dst)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.ilocalsym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nlocalsym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.iextdefsym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nextdefsym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.iundefsym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nundefsym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.tocoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.ntoc)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.modtaboff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nmodtab)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.extrefsymoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nextrefsyms)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.indirectsymoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nindirectsyms)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.extreloff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nextrel)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.locreloff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(dst.nlocrel)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(any_relocation_info &reloc)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(reloc.r_word0)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(reloc.r_word1)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(nlist_base &S)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(S.n_strx)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(S.n_desc)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(nlist &sym)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sym.n_strx)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sym.n_desc)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(sym.n_value)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(nlist_64 &sym)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(linkedit_data_command &C)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.cmd)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.cmdsize)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.dataoff)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.datasize)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(linker_option_command &C)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.count)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(version_min_command&C)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.version)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.sdk)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(data_in_code_entry &C)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.offset)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.length)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C.kind)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(uint32_t &C)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(C)"
  },
  {
    "label": "GET_LIBRARY_ORDINAL()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "GET_LIBRARY_ORDINAL(uint16_t n_desc)"
  },
  {
    "label": "SET_LIBRARY_ORDINAL()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SET_LIBRARY_ORDINAL(uint16_t &n_desc, uint8_t ordinal)"
  },
  {
    "label": "n_desc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n_desc(((n_desc) & 0x00ff) | (((ordinal) & 0xff) << 8))"
  },
  {
    "label": "GET_COMM_ALIGN()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "GET_COMM_ALIGN(uint16_t n_desc)"
  },
  {
    "label": "SET_COMM_ALIGN()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SET_COMM_ALIGN(uint16_t &n_desc, uint8_t align)"
  },
  {
    "label": "n_desc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n_desc((n_desc & 0xf0ffu) | ((align & 0x0fu) << 8u))"
  },
  {
    "label": "CPU_SUBTYPE_INTEL()",
    "kind": "Method",
    "detail": "Function (} enum : uint32_t { CPU_ARCH_MASK = 0 xff000000,CPU_ARCH_ABI64 = 0 x01000000 } ; enum CPUType { CPU_TYPE_ANY = - 1,CPU_TYPE_X86 = 7,CPU_TYPE_I386 = CPU_TYPE_X86,CPU_TYPE_X86_64 = CPU_TYPE_X86 | CPU_ARCH_ABI64,CPU_TYPE_MC98000 = 1 0,CPU_TYPE_ARM = 1 2,CPU_TYPE_ARM64 = CPU_TYPE_ARM | CPU_ARCH_ABI64,CPU_TYPE_SPARC = 1 4,CPU_TYPE_POWERPC = 1 8,CPU_TYPE_POWERPC64 = CPU_TYPE_POWERPC | CPU_ARCH_ABI64 } ; enum : uint32_t { CPU_SUBTYPE_MASK = 0 xff000000,CPU_SUBTYPE_LIB64 = 0 x80000000,CPU_SUBTYPE_MULTIPLE = ~ 0 u } ; enum CPUSubTypeX86 { CPU_SUBTYPE_I386_ALL = 3,CPU_SUBTYPE_386 = 3,CPU_SUBTYPE_486 = 4,CPU_SUBTYPE_486SX = 0 x84,CPU_SUBTYPE_586 = 5,CPU_SUBTYPE_PENT = CPU_SUBTYPE_586,CPU_SUBTYPE_PENTPRO = 0 x16,CPU_SUBTYPE_PENTII_M3 = 0 x36,CPU_SUBTYPE_PENTII_M5 = 0 x56,CPU_SUBTYPE_CELERON = 0 x67,CPU_SUBTYPE_CELERON_MOBILE = 0 x77,CPU_SUBTYPE_PENTIUM_3 = 0 x08,CPU_SUBTYPE_PENTIUM_3_M = 0 x18,CPU_SUBTYPE_PENTIUM_3_XEON = 0 x28,CPU_SUBTYPE_PENTIUM_M = 0 x09,CPU_SUBTYPE_PENTIUM_4 = 0 x0a,CPU_SUBTYPE_PENTIUM_4_M = 0 x1a,CPU_SUBTYPE_ITANIUM = 0 x0b,CPU_SUBTYPE_ITANIUM_2 = 0 x1b,CPU_SUBTYPE_XEON = 0 x0c,CPU_SUBTYPE_XEON_MP = 0 x1c,CPU_SUBTYPE_X86_ALL = 3,CPU_SUBTYPE_X86_64_ALL = 3,CPU_SUBTYPE_X86_ARCH1 = 4,CPU_SUBTYPE_X86_64_H = 8 } ; int)",
    "insertText": "CPU_SUBTYPE_INTEL(int Family, int Model)"
  },
  {
    "label": "CPU_SUBTYPE_INTEL_FAMILY()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CPU_SUBTYPE_INTEL_FAMILY(CPUSubTypeX86 ST)"
  },
  {
    "label": "CPU_SUBTYPE_INTEL_MODEL()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CPU_SUBTYPE_INTEL_MODEL(CPUSubTypeX86 ST)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} enum { CPU_SUBTYPE_INTEL_FAMILY_MAX = 1 5,CPU_SUBTYPE_INTEL_MODEL_ALL = 0 } ; enum CPUSubTypeARM { CPU_SUBTYPE_ARM_ALL = 0,CPU_SUBTYPE_ARM_V4T = 5,CPU_SUBTYPE_ARM_V6 = 6,CPU_SUBTYPE_ARM_V5 = 7,CPU_SUBTYPE_ARM_V5TEJ = 7,CPU_SUBTYPE_ARM_XSCALE = 8,CPU_SUBTYPE_ARM_V7 = 9,CPU_SUBTYPE_ARM_V7S = 1 1,CPU_SUBTYPE_ARM_V7K = 1 2,CPU_SUBTYPE_ARM_V6M = 1 4,CPU_SUBTYPE_ARM_V7M = 1 5,CPU_SUBTYPE_ARM_V7EM = 1 6 } ; enum CPUSubTypeARM64 { CPU_SUBTYPE_ARM64_ALL = 0 } ; enum CPUSubTypeSPARC { CPU_SUBTYPE_SPARC_ALL = 0 } ; enum CPUSubTypePowerPC { CPU_SUBTYPE_POWERPC_ALL = 0,CPU_SUBTYPE_POWERPC_601 = 1,CPU_SUBTYPE_POWERPC_602 = 2,CPU_SUBTYPE_POWERPC_603 = 3,CPU_SUBTYPE_POWERPC_603e = 4,CPU_SUBTYPE_POWERPC_603ev = 5,CPU_SUBTYPE_POWERPC_604 = 6,CPU_SUBTYPE_POWERPC_604e = 7,CPU_SUBTYPE_POWERPC_620 = 8,CPU_SUBTYPE_POWERPC_750 = 9,CPU_SUBTYPE_POWERPC_7400 = 1 0,CPU_SUBTYPE_POWERPC_7450 = 1 1,CPU_SUBTYPE_POWERPC_970 = 1 0 0,CPU_SUBTYPE_MC980000_ALL = CPU_SUBTYPE_POWERPC_ALL,CPU_SUBTYPE_MC98601 = CPU_SUBTYPE_POWERPC_601 } ; struct x86_thread_state64_t { uint64_t rax ; uint64_t rbx ; uint64_t rcx ; uint64_t rdx ; uint64_t rdi ; uint64_t rsi ; uint64_t rbp ; uint64_t rsp ; uint64_t r8 ; uint64_t r9 ; uint64_t r10 ; uint64_t r11 ; uint64_t r12 ; uint64_t r13 ; uint64_t r14 ; uint64_t r15 ; uint64_t rip ; uint64_t rflags ; uint64_t cs ; uint64_t fs ; uint64_t gs ; } ; enum x86_fp_control_precis { x86_FP_PREC_24B = 0,x86_FP_PREC_53B = 2,x86_FP_PREC_64B = 3 } ; enum x86_fp_control_rc { x86_FP_RND_NEAR = 0,x86_FP_RND_DOWN = 1,x86_FP_RND_UP = 2,x86_FP_CHOP = 3 } ; struct fp_control_t { unsigned short invalid : 1,denorm : 1,zdiv : 1,ovrfl : 1,undfl : 1,precis : 1,: 2,pc : 2,rc : 2,: 1,: 3 ; } ; struct fp_status_t { unsigned short invalid : 1,denorm : 1,zdiv : 1,ovrfl : 1,undfl : 1,precis : 1,stkflt : 1,errsumm : 1,c0 : 1,c1 : 1,c2 : 1,tos : 3,c3 : 1,busy : 1 ; } ; struct mmst_reg_t { char mmst_reg [ 1 0 ] ; char mmst_rsrv [ 6 ] ; } ; struct xmm_reg_t { char xmm_reg [ 1 6 ] ; } ; struct x86_float_state64_t { int32_t fpu_reserved [ 2 ] ; fp_control_t fpu_fcw ; fp_status_t fpu_fsw ; uint8_t fpu_ftw ; uint8_t fpu_rsrv1 ; uint16_t fpu_fop ; uint32_t fpu_ip ; uint16_t fpu_cs ; uint16_t fpu_rsrv2 ; uint32_t fpu_dp ; uint16_t fpu_ds ; uint16_t fpu_rsrv3 ; uint32_t fpu_mxcsr ; uint32_t fpu_mxcsrmask ; mmst_reg_t fpu_stmm0 ; mmst_reg_t fpu_stmm1 ; mmst_reg_t fpu_stmm2 ; mmst_reg_t fpu_stmm3 ; mmst_reg_t fpu_stmm4 ; mmst_reg_t fpu_stmm5 ; mmst_reg_t fpu_stmm6 ; mmst_reg_t fpu_stmm7 ; xmm_reg_t fpu_xmm0 ; xmm_reg_t fpu_xmm1 ; xmm_reg_t fpu_xmm2 ; xmm_reg_t fpu_xmm3 ; xmm_reg_t fpu_xmm4 ; xmm_reg_t fpu_xmm5 ; xmm_reg_t fpu_xmm6 ; xmm_reg_t fpu_xmm7 ; xmm_reg_t fpu_xmm8 ; xmm_reg_t fpu_xmm9 ; xmm_reg_t fpu_xmm10 ; xmm_reg_t fpu_xmm11 ; xmm_reg_t fpu_xmm12 ; xmm_reg_t fpu_xmm13 ; xmm_reg_t fpu_xmm14 ; xmm_reg_t fpu_xmm15 ; char fpu_rsrv4 [ 6* 1 6 ] ; uint32_t fpu_reserved1 ; } ; struct x86_exception_state64_t { uint16_t trapno ; uint16_t cpu ; uint32_t err ; uint64_t faultvaddr ; } ; void)",
    "insertText": "swapStruct(x86_thread_state64_t &x)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rax)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rbx)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rcx)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rdx)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rdi)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rsi)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rbp)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rsp)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r8)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r9)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r10)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r11)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r12)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r13)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r14)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.r15)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rip)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.rflags)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.cs)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fs)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.gs)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(x86_float_state64_t &x)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_reserved[0])"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_reserved[1])"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_fop)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_ip)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_cs)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_rsrv2)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_dp)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_ds)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_rsrv3)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_mxcsr)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_mxcsrmask)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.fpu_reserved1)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(x86_exception_state64_t &x)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.trapno)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.cpu)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.err)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.faultvaddr)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} struct x86_state_hdr_t { uint32_t flavor ; uint32_t count ; } ; struct x86_thread_state_t { x86_state_hdr_t tsh ; union { x86_thread_state64_t ts64 ; } uts ; } ; struct x86_float_state_t { x86_state_hdr_t fsh ; union { x86_float_state64_t fs64 ; } ufs ; } ; struct x86_exception_state_t { x86_state_hdr_t esh ; union { x86_exception_state64_t es64 ; } ues ; } ; void)",
    "insertText": "swapStruct(x86_state_hdr_t &x)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.flavor)"
  },
  {
    "label": "swapByteOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapByteOrder(x.count)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} enum X86ThreadFlavors { x86_THREAD_STATE32 = 1,x86_FLOAT_STATE32 = 2,x86_EXCEPTION_STATE32 = 3,x86_THREAD_STATE64 = 4,x86_FLOAT_STATE64 = 5,x86_EXCEPTION_STATE64 = 6,x86_THREAD_STATE = 7,x86_FLOAT_STATE = 8,x86_EXCEPTION_STATE = 9,x86_DEBUG_STATE32 = 1 0,x86_DEBUG_STATE64 = 1 1,x86_DEBUG_STATE = 1 2 } ; void)",
    "insertText": "swapStruct(x86_thread_state_t &x)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapStruct(x.tsh)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(x86_float_state_t &x)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapStruct(x.fsh)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapStruct(x86_exception_state_t &x)"
  },
  {
    "label": "swapStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapStruct(x.esh)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} const uint32_t x86_THREAD_STATE64_COUNT =)",
    "insertText": "sizeof(x86_thread_state64_t) / sizeof(uint32_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32_t x86_FLOAT_STATE64_COUNT =)",
    "insertText": "sizeof(x86_float_state64_t) / sizeof(uint32_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32_t x86_EXCEPTION_STATE64_COUNT =)",
    "insertText": "sizeof(x86_exception_state64_t) / sizeof(uint32_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32_t x86_THREAD_STATE_COUNT =)",
    "insertText": "sizeof(x86_thread_state_t) / sizeof(uint32_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32_t x86_FLOAT_STATE_COUNT =)",
    "insertText": "sizeof(x86_float_state_t) / sizeof(uint32_t)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32_t x86_EXCEPTION_STATE_COUNT =)",
    "insertText": "sizeof(x86_exception_state_t) / sizeof(uint32_t)"
  }
]