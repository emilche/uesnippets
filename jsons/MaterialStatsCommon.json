[
  {
    "label": "MATERIALEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MATERIALEDITOR_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialStatsUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStatsUtils"
  },
  {
    "label": "FMaterialStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialStats"
  },
  {
    "label": "IMaterialEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMaterialEditor"
  },
  {
    "label": "FMaterialResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResource"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FShaderStatsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderStatsInfo"
  },
  {
    "label": "FMaterialResourceStats()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SceneTypes . h \" # include \" RHIDefinitions . h \" # include \" MaterialShared . h \" # include \" Styling / SlateColor . h \" class FMaterialResourceStats : public FMaterialResource { public :)",
    "insertText": "FMaterialResourceStats()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (} UMaterial*)",
    "insertText": "GetMaterial()"
  },
  {
    "label": "FRepresentativeShaderInfo()",
    "kind": "Method",
    "detail": "Function (} ; enum class EPlatformCategoryType : int32 { Desktop,Android,IOS,Console,Num } ; enum class ERepresentativeShader { FirstFragmentShader,StationarySurface = FirstFragmentShader,StationarySurfaceCSM,StationarySurfaceNPointLights,DynamicallyLitObject,RuntimeVirtualTextureOutput,UIDefaultFragmentShader,LastFragmentShader = UIDefaultFragmentShader,FirstVertexShader,StaticMesh = FirstVertexShader,SkeletalMesh,SkinnedCloth,UIDefaultVertexShader,UIInstancedVertexShader,LastVertexShader = UIInstancedVertexShader,NaniteMesh,Num } ; class FMaterialStatsUtils { public : struct FShaderInstructionsInfo { ERepresentativeShader ShaderType ; FString ShaderDescription ; FString ShaderStatisticsString ; int32 InstructionCount ; } ; struct FRepresentativeShaderInfo { ERepresentativeShader ShaderType ; FName ShaderName ; FString ShaderDescription ;)",
    "insertText": "FRepresentativeShaderInfo(const ERepresentativeShader _ShaderType, const FName _ShaderName, const FString& _StrDescription) : ShaderType(_ShaderType), ShaderName(_ShaderName), ShaderDescription(_StrDescription)"
  },
  {
    "label": "CreateMaterialStats()",
    "kind": "Method",
    "detail": "Function (} } ; public : TSharedPtr<class FMaterialStats>)",
    "insertText": "CreateMaterialStats(class IMaterialEditor* MaterialEditor, const bool bShowMaterialInstancesMenu, const bool bAllowIgnoringCompilationErrors)"
  },
  {
    "label": "MaterialQualityToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MaterialQualityToString(const EMaterialQualityLevel::Type Quality)"
  },
  {
    "label": "MaterialQualityToShortString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MaterialQualityToShortString(const EMaterialQualityLevel::Type Quality)"
  },
  {
    "label": "StringToMaterialQuality()",
    "kind": "Method",
    "detail": "Function (EMaterialQualityLevel::Type)",
    "insertText": "StringToMaterialQuality(const FString& StrQuality)"
  },
  {
    "label": "GetPlatformTypeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformTypeName(const EPlatformCategoryType InEnumValue)"
  },
  {
    "label": "ShaderPlatformTypeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ShaderPlatformTypeName(const EShaderPlatform PlatformID)"
  },
  {
    "label": "GetRepresentativeInstructionCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRepresentativeInstructionCounts(TArray<FShaderInstructionsInfo>& Results, const class FMaterialResource* Target)"
  },
  {
    "label": "GetRepresentativeShaderTypesAndDescriptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRepresentativeShaderTypesAndDescriptions(TMap<FName, TArray<FRepresentativeShaderInfo>>& OutShaderTypeNameAndDescriptions, const class FMaterial* TargetMaterial)"
  },
  {
    "label": "ExtractMatertialStatsInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractMatertialStatsInfo(EShaderPlatform ShaderPlatform, struct FShaderStatsInfo& OutInfo, const FMaterialResource* Target)"
  },
  {
    "label": "RepresentativeShaderTypeToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RepresentativeShaderTypeToString(const ERepresentativeShader ShaderType)"
  },
  {
    "label": "QualitySettingColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "QualitySettingColor(const EMaterialQualityLevel::Type QualityType)"
  },
  {
    "label": "PlatformTypeColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "PlatformTypeColor(EPlatformCategoryType PlatformType)"
  },
  {
    "label": "IsPlatformOfflineCompilerAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformOfflineCompilerAvailable(const EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetPlatformOfflineCompilerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformOfflineCompilerSettings(const EShaderPlatform ShaderPlatform, FExtraShaderCompilerSettings& SCSettings)"
  },
  {
    "label": "PlatformNeedsOfflineCompiler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformNeedsOfflineCompiler(const EShaderPlatform ShaderPlatform)"
  }
]