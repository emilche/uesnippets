[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FRHIRayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingShader"
  },
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderGraphResources . h \" # include \" RenderGraphDefinitions . h \" # if RHI_RAYTRACING class FScene ; class FShaderType ; class FRHIRayTracingShader ; class FGlobalShaderMap ; enum EBlendMode : int ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FRayTracingDecals, RENDERER_API) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<uint>, Grid) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, GridData) SHADER_PARAMETER(FVector3f, TranslatedBoundMin) SHADER_PARAMETER(FVector3f, TranslatedBoundMax) SHADER_PARAMETER(uint32, GridResolution) SHADER_PARAMETER(uint32, GridMaxCount) SHADER_PARAMETER(uint32, GridAxis) SHADER_PARAMETER(uint32, Count) END_GLOBAL_SHADER_PARAMETER_STRUCT() TRDGUniformBufferRef<FRayTracingDecals> CreateNullRayTracingDecalsUniformBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "CreateRayTracingDecalData()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FRayTracingDecals>)",
    "insertText": "CreateRayTracingDecalData(FRDGBuilder& GraphBuilder, FScene& Scene, const FViewInfo& View, uint32 BaseCallableSlotIndex)"
  },
  {
    "label": "GetRayTracingDecalMaterialShaderType()",
    "kind": "Method",
    "detail": "Function (FShaderType*)",
    "insertText": "GetRayTracingDecalMaterialShaderType(EBlendMode BlendMode)"
  },
  {
    "label": "GetDefaultOpaqueMeshDecalHitShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetDefaultOpaqueMeshDecalHitShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetDefaultHiddenMeshDecalHitShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetDefaultHiddenMeshDecalHitShader(const FGlobalShaderMap* ShaderMap)"
  }
]