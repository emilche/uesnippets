[
  {
    "label": "CClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CClass"
  },
  {
    "label": "CExpressionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExpressionBase"
  },
  {
    "label": "CFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFunction"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "SAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SAttribute"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "IsAttributeHack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Containers / SharedPointerArray . h \" # include \" uLang / Common / Text / UTF8String . h \" namespace uLang { class CClass ; class CExpressionBase ; class CFunction ; class CSemanticProgram ; struct SAttribute { enum class EType { Attribute,Specifier } ; TSRef<CExpressionBase> _Expression ; EType _Type ; } ; bool)",
    "insertText": "IsAttributeHack(const SAttribute&, const CClass* AttributeClass, const CSemanticProgram&)"
  },
  {
    "label": "IsAttributeHack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributeHack(const SAttribute&, const CFunction* AttributeFunction, const CSemanticProgram&)"
  },
  {
    "label": "FindAttributeHack()",
    "kind": "Method",
    "detail": "Function (template<TIterator,ClassOrFunction> TIterator)",
    "insertText": "FindAttributeHack(TIterator First, TIterator Last, const ClassOrFunction* AttributeClassOrFunction, const CSemanticProgram& Program)"
  },
  {
    "label": "HasAttributes()",
    "kind": "Method",
    "detail": "Function (break ; } } return First ; } class CAttributable { public : TArray<SAttribute> _Attributes ; bool)",
    "insertText": "HasAttributes()"
  },
  {
    "label": "HasAttributeClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAttributeClass(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "GetAttributeClassCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetAttributeClassCount(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "GetAttributesWithAttribute()",
    "kind": "Method",
    "detail": "Function (TArray<const CExpressionBase*>)",
    "insertText": "GetAttributesWithAttribute(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "FindAttributeExpr()",
    "kind": "Method",
    "detail": "Function (const CExpressionBase*)",
    "insertText": "FindAttributeExpr(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "FindAttributeExprs()",
    "kind": "Method",
    "detail": "Function (const TArray<CExpressionBase*>)",
    "insertText": "FindAttributeExprs(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "FindAttribute()",
    "kind": "Method",
    "detail": "Function (TOptional<SAttribute>)",
    "insertText": "FindAttribute(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "FindAttributes()",
    "kind": "Method",
    "detail": "Function (TArray<SAttribute>)",
    "insertText": "FindAttributes(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "AddAttributeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttributeClass(const CClass* AttributeClass)"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttribute(SAttribute Attribute)"
  },
  {
    "label": "RemoveAttributeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttributeClass(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "GetAttributeTextValue()",
    "kind": "Method",
    "detail": "Function (TOptional<CUTF8String>)",
    "insertText": "GetAttributeTextValue(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "GetAttributeTextValue()",
    "kind": "Method",
    "detail": "Function (TOptional<CUTF8String>)",
    "insertText": "GetAttributeTextValue(const TArray<SAttribute>& Attributes, const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum class EAttributableScope : uint8_t { Module,Class,Struct,Data,Function,Enum,Enumerator,AttributeClass,Interface,Expression,TypeDefinition,ScopedAccessLevel,ClassTypeFunction,AttributeClassTypeFunction,InterfaceTypeFunction,} ; CAttributable&)",
    "insertText": "operator(const CAttributable& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CAttributable&)",
    "insertText": "operator(CAttributable&& Other)"
  },
  {
    "label": "HasAttributeClassHack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttributeClassHack(const CClass* AttributeClass, const CSemanticProgram&)"
  },
  {
    "label": "HasAttributeFunctionHack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttributeFunctionHack(const CFunction* AttributeFunction, const CSemanticProgram&)"
  },
  {
    "label": "FindAttributeImpl()",
    "kind": "Method",
    "detail": "Function (private : TOptional<int32_t>)",
    "insertText": "FindAttributeImpl(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "FindAttributesImpl()",
    "kind": "Method",
    "detail": "Function (TArray<int32_t>)",
    "insertText": "FindAttributesImpl(const CClass* AttributeClass, const CSemanticProgram& Program)"
  }
]