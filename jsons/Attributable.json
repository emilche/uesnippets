[
  {
    "label": "CClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CClass"
  },
  {
    "label": "CExpressionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CExpressionBase"
  },
  {
    "label": "CFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFunction"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "SAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SAttribute"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "VERSECOMPILER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VERSECOMPILER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsAttributeHack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributeHack(const SAttribute&, const CClass* AttributeClass, const CSemanticProgram&)"
  },
  {
    "label": "IsAttributeHack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributeHack(const SAttribute&, const CFunction* AttributeFunction, const CSemanticProgram&)"
  },
  {
    "label": "AddAttributeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttributeClass(const CClass* AttributeClass)"
  },
  {
    "label": "AddAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttribute(SAttribute Attribute)"
  },
  {
    "label": "RemoveAttributeClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttributeClass(const CClass* AttributeClass, const CSemanticProgram& Program)"
  },
  {
    "label": "GetAttributeTextValue()",
    "kind": "Method",
    "detail": "Function (TOptional<CUTF8String>)",
    "insertText": "GetAttributeTextValue(const TArray<SAttribute>& Attributes, const CClass* AttributeClass, const CSemanticProgram& Program)"
  }
]