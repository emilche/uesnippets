[
  {
    "label": "TViewModelPtrStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TViewModelPtrStorage"
  },
  {
    "label": "TViewModelConversions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TViewModelConversions"
  },
  {
    "label": "TViewModelPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TViewModelPtr"
  },
  {
    "label": "TWeakViewModelConversions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakViewModelConversions"
  },
  {
    "label": "TWeakViewModelPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakViewModelPtr"
  },
  {
    "label": "TImplicitViewModelCastImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitViewModelCastImpl"
  },
  {
    "label": "TImplicitWeakViewModelPin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitWeakViewModelPin"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / GeneratedTypeName . h \" # include \" SequencerCoreFwd . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" namespace UE::Sequencer { template<T> struct TViewModelPtrStorage { using ViewModelType = std::conditional_t<std::is_const_v<T>,const FViewModel,FViewModel> ; T*)",
    "insertText": "Get()"
  },
  {
    "label": "ViewModelType()",
    "kind": "Method",
    "detail": "Function (SharedModel = InModel ; Extension = ExtensionPtr ; } else { SharedModel = nullptr ; Extension = nullptr ; } } TSharedPtr<ViewModelType> SharedModel ; T* Extension = nullptr ; } ; template<T> struct TViewModelConversions { using ViewModelType = std::conditional_t<std::is_const_v<T>,const FViewModel,FViewModel> ; operator TSharedPtr<)",
    "insertText": "ViewModelType()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator TSharedPtr<)",
    "insertText": "T()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TViewModelPtr<T>* This = static_cast<const TViewModelPtr<)",
    "insertText": "T(this)"
  },
  {
    "label": "AsWeak()",
    "kind": "Method",
    "detail": "Function (} TWeakViewModelPtr<T>)",
    "insertText": "AsWeak()"
  },
  {
    "label": "FViewModel()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TViewModelConversions<FViewModel> { operator TSharedPtr<)",
    "insertText": "FViewModel()"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TViewModelPtr : TViewModelConversions<T> { using ViewModelType = std::conditional_t<std::is_const_v<T>,const FViewModel,FViewModel> ;)",
    "insertText": "TViewModelPtr()"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TViewModelPtr(const TViewModelPtr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr&)",
    "insertText": "operator(const TViewModelPtr&)"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TViewModelPtr(TViewModelPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr&)",
    "insertText": "operator(TViewModelPtr&&)"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TViewModelPtr(T* InViewModelType)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Set(InViewModelType->AsShared(), InViewModelType)"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TViewModelPtr(TSharedPtr<ViewModelType> InModel, T* InExtension)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Set(InModel, InExtension)"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (} } template<OtherType>)",
    "insertText": "TViewModelPtr(const TViewModelPtr<OtherType>& In)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Set(In.Storage.SharedModel, In.Storage.Get())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} else { Storage .)",
    "insertText": "Set(In.Storage.SharedModel, In.Storage.SharedModel.Get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<OtherType> TViewModelPtr&)",
    "insertText": "operator(const TViewModelPtr<OtherType>& In)"
  },
  {
    "label": "TViewModelPtr()",
    "kind": "Method",
    "detail": "Function (} return* this ; })",
    "insertText": "TViewModelPtr(nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TViewModelPtr&)",
    "insertText": "operator(nullptr_t)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Set(nullptr, nullptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Set(InModel, InModel.Get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ModelType> TViewModelPtr&)",
    "insertText": "operator(const TSharedPtr<ModelType>& InModel)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Set(TSharedPtr<ModelType>(InModel), &InModel.Get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ModelType> TViewModelPtr&)",
    "insertText": "operator(const TSharedRef<ModelType>& InModel)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ImplicitCastChecked()",
    "kind": "Method",
    "detail": "Function (TImplicitViewModelCastChecked<ViewModelType>)",
    "insertText": "ImplicitCastChecked()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const TViewModelPtr<T>& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TViewModelPtr<T>& A, const TViewModelPtr<T>& B)"
  },
  {
    "label": "CastViewModel()",
    "kind": "Method",
    "detail": "Function (} template<OutModelType,InModelType> TViewModelPtr<OutModelType>)",
    "insertText": "CastViewModel(const TSharedPtr<InModelType>& InViewModel)"
  },
  {
    "label": "CastViewModel()",
    "kind": "Method",
    "detail": "Function (} template<OutModelType,InModelType> TViewModelPtr<OutModelType>)",
    "insertText": "CastViewModel(const TViewModelPtr<InModelType>& InViewModel)"
  },
  {
    "label": "CastViewModelChecked()",
    "kind": "Method",
    "detail": "Function (} template<OutModelType,InModelType> TViewModelPtr<OutModelType>)",
    "insertText": "CastViewModelChecked(const TSharedRef<InModelType>& InViewModel)"
  },
  {
    "label": "OutModelType()",
    "kind": "Method",
    "detail": "Function (OutModelType* Extension = InViewModel -> template CastThis<)",
    "insertText": "OutModelType()"
  },
  {
    "label": "CastViewModelChecked()",
    "kind": "Method",
    "detail": "Function (} template<OutModelType,InModelType> TViewModelPtr<OutModelType>)",
    "insertText": "CastViewModelChecked(const TSharedPtr<InModelType>& InViewModel)"
  },
  {
    "label": "CastViewModelChecked()",
    "kind": "Method",
    "detail": "Function (} template<OutModelType,InModelType> TViewModelPtr<OutModelType>)",
    "insertText": "CastViewModelChecked(const TViewModelPtr<InModelType>& InViewModel)"
  },
  {
    "label": "ImplicitCast()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<OutModelType> Result = InViewModel .)",
    "insertText": "ImplicitCast()"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TWeakViewModelPtr : TWeakViewModelConversions<T> { using ViewModelType = std::conditional_t<std::is_const_v<T>,const FViewModel,FViewModel> ;)",
    "insertText": "TWeakViewModelPtr()"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWeakViewModelPtr(const TWeakViewModelPtr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TWeakViewModelPtr&)",
    "insertText": "operator(const TWeakViewModelPtr&)"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWeakViewModelPtr(TWeakViewModelPtr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TWeakViewModelPtr&)",
    "insertText": "operator(TWeakViewModelPtr&&)"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWeakViewModelPtr(nullptr_t)"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (} template<OtherType>)",
    "insertText": "TWeakViewModelPtr(const TWeakPtr<OtherType>& InModel)"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (WeakModel = InModel ; } template<OtherType>)",
    "insertText": "TWeakViewModelPtr(const TSharedPtr<OtherType>& InModel)"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (WeakModel = InModel ; } template<OtherType>)",
    "insertText": "TWeakViewModelPtr(const TSharedRef<OtherType>& InModel)"
  },
  {
    "label": "TWeakViewModelPtr()",
    "kind": "Method",
    "detail": "Function (WeakModel = InModel ; } template<OtherType>)",
    "insertText": "TWeakViewModelPtr(const TViewModelPtr<OtherType>& InModel)"
  },
  {
    "label": "AsModel()",
    "kind": "Method",
    "detail": "Function (WeakModel = InModel .)",
    "insertText": "AsModel()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherType> TWeakViewModelPtr&)",
    "insertText": "operator(const TViewModelPtr<OtherType>& InModel)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ViewModelType> Model = WeakModel .)",
    "insertText": "Pin()"
  },
  {
    "label": "ImplicitPin()",
    "kind": "Method",
    "detail": "Function (} TImplicitWeakViewModelPin<ViewModelType>)",
    "insertText": "ImplicitPin()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const TWeakViewModelPtr<T>& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TWeakViewModelPtr<T>& A, const TWeakViewModelPtr<T>& B)"
  },
  {
    "label": "ExtensionType()",
    "kind": "Method",
    "detail": "Function (} template<ExtensionType> operator TSharedPtr<)",
    "insertText": "ExtensionType()"
  },
  {
    "label": "FinalExtensionType()",
    "kind": "Method",
    "detail": "Function (using FinalExtensionType = std::conditional_t<std::is_const_v<ViewModelType>,const ExtensionType,ExtensionType> ; TViewModelPtr<FinalExtensionType> Result = ViewModel ? ViewModel -> template CastThisShared<)",
    "insertText": "FinalExtensionType()"
  },
  {
    "label": "TImplicitWeakViewModelPin()",
    "kind": "Method",
    "detail": "Function (} private : TSharedPtr<ViewModelType> ViewModel ; } ; template<ViewModelType> struct TImplicitWeakViewModelPin {)",
    "insertText": "TImplicitWeakViewModelPin(const TWeakPtr<ViewModelType>& In) : WeakModel(In)"
  }
]