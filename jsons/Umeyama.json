[
  {
    "label": "umeyama_transform_matrix_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "umeyama_transform_matrix_type"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_DYNAMIC()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_UMEYAMA_H # define EIGEN_UMEYAMA_H namespace Eigen { # ifndef EIGEN_PARSED_BY_DOXYGEN namespace internal { template<MatrixType,OtherMatrixType> struct umeyama_transform_matrix_type { enum { MinRowsAtCompileTime =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_DYNAMIC(MatrixType::RowsAtCompileTime, OtherMatrixType::RowsAtCompileTime), HomogeneousDimension = int(MinRowsAtCompileTime) == Dynamic ? Dynamic : int(MinRowsAtCompileTime)"
  },
  {
    "label": "AutoAlign()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<traits<MatrixType>::Scalar,HomogeneousDimension,HomogeneousDimension,)",
    "insertText": "AutoAlign(traits<MatrixType>::Flags & RowMajorBit ? RowMajor : ColMajor)"
  },
  {
    "label": "umeyama()",
    "kind": "Method",
    "detail": "Function (} ; } # endif template<Derived,OtherDerived> internal::umeyama_transform_matrix_type<Derived,OtherDerived>::type)",
    "insertText": "umeyama(const MatrixBase<Derived>& src, const MatrixBase<OtherDerived>& dst, bool with_scaling = true)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (typedef internal::umeyama_transform_matrix_type<Derived,OtherDerived>::type TransformationMatrixType ; typedef internal::traits<TransformationMatrixType>::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ;)",
    "insertText": "EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsComplex, NUMERIC_TYPE_MUST_BE_REAL) EIGEN_STATIC_ASSERT((internal::is_same<Scalar, typename internal::traits<OtherDerived>::Scalar>::value), YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY)"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_DYNAMIC()",
    "kind": "Method",
    "detail": "Function (Dimension =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_DYNAMIC(Derived::RowsAtCompileTime, OtherDerived::RowsAtCompileTime)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<Scalar,Dimension,1> VectorType ; typedef Matrix<Scalar,Dimension,Dimension> MatrixType ; typedef internal::plain_matrix_type_row_major<Derived>::type RowMajorMatrixType ; const Index m = src .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index n = src .)",
    "insertText": "cols()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar one_over_n =)",
    "insertText": "RealScalar(1) / static_cast<RealScalar>(n)"
  },
  {
    "label": "rowwise()",
    "kind": "Method",
    "detail": "Function (const VectorType src_mean = src .)",
    "insertText": "rowwise().sum()"
  },
  {
    "label": "colwise()",
    "kind": "Method",
    "detail": "Function (const RowMajorMatrixType src_demean = src .)",
    "insertText": "colwise()"
  },
  {
    "label": "rowwise()",
    "kind": "Method",
    "detail": "Function (const Scalar src_var = src_demean .)",
    "insertText": "rowwise().squaredNorm().sum()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (const MatrixType sigma = one_over_n* dst_demean* src_demean .)",
    "insertText": "transpose()"
  },
  {
    "label": "svd()",
    "kind": "Method",
    "detail": "Function (JacobiSVD<MatrixType>)",
    "insertText": "svd(sigma, ComputeFullU | ComputeFullV)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (TransformationMatrixType Rt =)",
    "insertText": "Identity(m+1,m+1)"
  },
  {
    "label": "Ones()",
    "kind": "Method",
    "detail": "Function (VectorType S =)",
    "insertText": "Ones(m)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Rt .)",
    "insertText": "block(0,0,m,m).noalias() = svd.matrixU() * S.asDiagonal() * svd.matrixV().transpose()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar c =)",
    "insertText": "Scalar(1)/src_var * svd.singularValues().dot(S)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Rt .)",
    "insertText": "col(m).head(m)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Rt .)",
    "insertText": "col(m).head(m).noalias() -= c*Rt.topLeftCorner(m,m)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Rt .)",
    "insertText": "block(0,0,m,m)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Rt .)",
    "insertText": "col(m).head(m).noalias() -= Rt.topLeftCorner(m,m)"
  }
]