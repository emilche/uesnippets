[
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SSessionConsoleCommandBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionConsoleCommandBar"
  },
  {
    "label": "SSessionConsoleFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionConsoleFilterBar"
  },
  {
    "label": "SSessionConsoleShortcutWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionConsoleShortcutWindow"
  },
  {
    "label": "SSessionConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionConsole"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" ISessionInstanceInfo . h \" # include \" ISessionInfo . h \" # include \" SessionLogMessage . h \" # include \" ISessionManager . h \" class FUICommandList ; class SSessionConsoleCommandBar ; class SSessionConsoleFilterBar ; class SSessionConsoleShortcutWindow ; class SSessionConsole : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSessionConsole)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: ~SSessionConsole()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<ISessionManager> InSessionManager)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "ClearLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLog()"
  },
  {
    "label": "CopyLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyLog()"
  },
  {
    "label": "ReloadLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadLog(bool FullyReload)"
  },
  {
    "label": "SaveLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveLog()"
  },
  {
    "label": "SendCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCommand(const FString& CommandString)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleClearActionExecute()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleClearActionExecute()"
  },
  {
    "label": "HandleClearActionCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClearActionCanExecute()"
  },
  {
    "label": "HandleCopyActionExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCopyActionExecute()"
  },
  {
    "label": "HandleCopyActionCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCopyActionCanExecute()"
  },
  {
    "label": "HandleSaveActionExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSaveActionExecute()"
  },
  {
    "label": "HandleSaveActionCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSaveActionCanExecute()"
  },
  {
    "label": "HandleCommandBarPromoteToShortcutClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCommandBarPromoteToShortcutClicked(const FString& CommandString)"
  },
  {
    "label": "HandleCommandSubmitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCommandSubmitted(const FString& CommandString)"
  },
  {
    "label": "HandleFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFilterChanged()"
  },
  {
    "label": "HandleLogListItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLogListItemScrolledIntoView(TSharedPtr<FSessionLogMessage> Item, const TSharedPtr<ITableRow>& TableRow)"
  },
  {
    "label": "HandleLogListGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleLogListGenerateRow(TSharedPtr<FSessionLogMessage> Message, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleLogListGetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleLogListGetHighlightText()"
  },
  {
    "label": "HandleLogListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLogListSelectionChanged(TSharedPtr<FSessionLogMessage> InItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleMainContentIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMainContentIsEnabled()"
  },
  {
    "label": "HandleSelectSessionOverlayVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleSelectSessionOverlayVisibility()"
  },
  {
    "label": "HandleSessionManagerInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionManagerInstanceSelectionChanged(const TSharedPtr<ISessionInstanceInfo>& Instance, bool Selected)"
  },
  {
    "label": "HandleSessionManagerLogReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionManagerLogReceived(const TSharedRef<ISessionInfo>& Session, const TSharedRef<ISessionInstanceInfo>& Instance, const TSharedRef<FSessionLogMessage>& Message)"
  },
  {
    "label": "HandleSessionManagerSelectedSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionManagerSelectedSessionChanged(const TSharedPtr<ISessionInfo>& SelectedSession)"
  }
]