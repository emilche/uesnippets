[
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "createVariables()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_CONVOLUTIONNODE_H # define MATERIALX_CONVOLUTIONNODE_H # include<MaterialXGenShader / ShaderNodeImpl . h> # include<array> MATERIALX_NAMESPACE_BEGIN const std::array<float,3> GAUSSIAN_KERNEL_3 ; const std::array<float,5> GAUSSIAN_KERNEL_5 ; const std::array<float,7> GAUSSIAN_KERNEL_7 ; class ConvolutionNode : public ShaderNodeImpl { public : void)",
    "insertText": "createVariables(const ShaderNode& node, GenContext& context, Shader& shader)"
  },
  {
    "label": "ConvolutionNode()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConvolutionNode()"
  },
  {
    "label": "acceptsInputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "acceptsInputType(const TypeDesc* type)"
  },
  {
    "label": "computeSampleOffsetStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSampleOffsetStrings(const string& sampleSizeName, const string& offsetTypeString, unsigned int filterWidth, StringVec& offsetStrings)"
  },
  {
    "label": "getSamplingInput()",
    "kind": "Method",
    "detail": "Function (const ShaderInput*)",
    "insertText": "getSamplingInput(const ShaderNode& node)"
  },
  {
    "label": "emitInputSamplesUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitInputSamplesUV(const ShaderNode& node, unsigned int sampleCount, unsigned int filterWidth, float filterSize, float filterOffset, const string& sampleSizeFunctionUV, GenContext& context, ShaderStage& stage, StringVec& sampleStrings)"
  }
]