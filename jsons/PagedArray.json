[
  {
    "label": "PagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PagedArray"
  },
  {
    "label": "Page",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Page"
  },
  {
    "label": "ValueBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueBuffer"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_UTIL_PAGED_ARRAY_HAS_BEEN_INCLUDED # define OPENVDB_UTIL_PAGED_ARRAY_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<openvdb / Types . h> # include<deque> # include<cassert> # include<iostream> # include<algorithm> # include<atomic> # include<tbb / spin_mutex . h> # include<tbb / parallel_for . h> # include<tbb / parallel_sort . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace util { template<ValueT,size_t Log2PageSize = 1 0 UL> class PagedArray { private :)",
    "insertText": "static_assert(Log2PageSize > 1UL, \"Expected Log2PageSize > 1\")"
  },
  {
    "label": "PagedArray()",
    "kind": "Method",
    "detail": "Function (class Page ; using PageTableT = std::deque<Page*> ; public : using ValueType = ValueT ; using Ptr = SharedPtr<PagedArray> ;)",
    "insertText": "PagedArray()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "clear()"
  },
  {
    "label": "PagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PagedArray(const PagedArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PagedArray&)",
    "insertText": "operator(const PagedArray&)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create()"
  },
  {
    "label": "getBuffer()",
    "kind": "Method",
    "detail": "Function (} class ValueBuffer ; ValueBuffer)",
    "insertText": "getBuffer()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} class ConstIterator ; class Iterator ; OPENVDB_DEPRECATED size_t)",
    "insertText": "push_back(const ValueType& value)"
  },
  {
    "label": "push_back_unsafe()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "push_back_unsafe(const ValueType& value)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (const size_t index = mSize .)",
    "insertText": "fetch_add(1)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mPageTable .)",
    "insertText": "push_back(new Page())"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (mCapacity + =)",
    "insertText": "Size(*mPageTable[index >> Log2PageSize])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueType&)",
    "insertText": "operator(size_t i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i<mCapacity)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fill(const ValueType& v)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "op(const tbb::blocked_range<size_t>& r)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, this->pageCount()), op)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "copy(ValueType *p, size_t count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t last_page = count>> Log2PageSize ;)",
    "insertText": "if(last_page >= this->pageCount())"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (mPageTable [ i ] ->)",
    "insertText": "copy(p+i*Page::Size, Page::Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "if(size_t m = count & Page::Mask)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, last_page, 32), op)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (mPageTable [ last_page ] ->)",
    "insertText": "copy(p+last_page*Page::Size, m)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, last_page+1, 32), op)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "copy(ValueType *p)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "copy(p, mSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_t size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mSize = size ;)",
    "insertText": "if(size > mCapacity)"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "grow(size-1)"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "resize(size_t size, const ValueType& v)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "resize(size)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "fill(v)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "pageSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "pageSize()"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "PageTableT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PageTableT().swap(mPageTable)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (mSize = 0 ; mCapacity = 0 ; } Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} ConstIterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} ConstIterator)",
    "insertText": "cend()"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "sort()"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(this->begin(), this->end(), std::less<ValueT>())"
  },
  {
    "label": "invSort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "invSort()"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(this->begin(), this->end(), std::greater<ValueT>())"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (} template<Functor> void)",
    "insertText": "sort(Functor func)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(this->begin(), this->end(), func)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "merge(PagedArray& other)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(std::ostream& os = std::cout)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (os<<\" PagedArray : \\ n \"<<\" \\ tSize : \"<<this ->)",
    "insertText": "size() << \" elements\\n\" << \"\\tPage table: \" << this->pageCount() << \" pages\\n\" << \"\\tPage size: \" << this->pageSize() << \" elements\\n\" << \"\\tCapacity: \" << this->capacity() << \" elements\\n\" << \"\\tFootprint: \" << this->memUsage()"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (} private : class ValueBuffer ; void)",
    "insertText": "grow(size_t index)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (tbb::spin_mutex::scoped_lock)",
    "insertText": "lock(mGrowthMutex)"
  },
  {
    "label": "add_full()",
    "kind": "Method",
    "detail": "Function (mCapacity + = Page::Size ; } } void)",
    "insertText": "add_full(Page*& page, size_t size)"
  },
  {
    "label": "add_partially_full()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add_partially_full(Page*& page, size_t size)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(Page*& page, size_t size)"
  },
  {
    "label": "add_full()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "add_full(page, size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(size>0)"
  },
  {
    "label": "add_partially_full()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "add_partially_full(page, size)"
  },
  {
    "label": "pageCount()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "pageCount(mSize >> Log2PageSize)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (delete mPageTable .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (mPageTable .)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Page* page = nullptr ; const size_t size = mSize& Page::Mask ;)",
    "insertText": "if(size > 0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (mSize - = size ; } mPageTable .)",
    "insertText": "insert(mPageTable.end(), other.mPageTable.begin(), other.mPageTable.end())"
  },
  {
    "label": "PageTableT()",
    "kind": "Method",
    "detail": "Function (other . mSize = 0 ; other . mCapacity = 0 ;)",
    "insertText": "PageTableT().swap(other.mPageTable)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size == Page::Size)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(tmp, page)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} mPageTable .)",
    "insertText": "push_back(page)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size > 0 && size < Page::Size)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (ValueT* s = page ->)",
    "insertText": "data(), *t = mPageTable.back()->data()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (t = mPageTable .)",
    "insertText": "back()->data()"
  },
  {
    "label": "ValueBuffer()",
    "kind": "Method",
    "detail": "Function (mCapacity + = Page::Size ; page = nullptr ; } mSize + = size ; } template<ValueT,size_t Log2PageSize> class PagedArray<ValueT,Log2PageSize>::ValueBuffer { public : using PagedArrayType = PagedArray<ValueT,Log2PageSize> ;)",
    "insertText": "ValueBuffer(PagedArray& parent) : mParent(&parent), mPage(new Page()), mSize(0)"
  },
  {
    "label": "ValueBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueBuffer(const ValueBuffer& other) : mParent(other.mParent), mPage(new Page()), mSize(0)"
  },
  {
    "label": "ValueBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ValueBuffer()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "add(mPage, mSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete mPage ; } ValueBuffer&)",
    "insertText": "operator(const ValueBuffer&)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(const ValueT& v)"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "flush()"
  },
  {
    "label": "parent()",
    "kind": "Method",
    "detail": "Function (mSize = 0 ; } PagedArrayType&)",
    "insertText": "parent()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConstIterator(const PagedArray& parent, size_t pos=0) : mPos(pos), mParent(&parent)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ConstIterator(const ConstIterator& other) : mPos(other.mPos), mParent(other.mParent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ConstIterator&)",
    "insertText": "operator(const ConstIterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mPos = other . mPos ; mParent = other . mParent ; return* this ; } ConstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - mPos ; return* this ; } ConstIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (ConstIterator)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ValueT&)",
    "insertText": "operator(const difference_type& pos)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mPos - = pos ; return* this ; } ConstIterator)",
    "insertText": "operator(const difference_type &pos)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "pos()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iterator(PagedArray& parent, size_t pos=0) : mPos(pos), mParent(&parent)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iterator(const Iterator& other) : mPos(other.mPos), mParent(other.mParent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Iterator&)",
    "insertText": "operator(const Iterator& other)"
  },
  {
    "label": "Page()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Page() : mData(reinterpret_cast<ValueT*>(new char[sizeof(ValueT)*Size]))"
  },
  {
    "label": "Page()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Page()"
  },
  {
    "label": "Page()",
    "kind": "Method",
    "detail": "Function (delete [ ] mData ; })",
    "insertText": "Page(const Page&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Page&)",
    "insertText": "operator(const Page&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueT&)",
    "insertText": "operator(const size_t i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueT* dst = mData ;)",
    "insertText": "for(size_t i=Size; i; --i)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} ValueT*)",
    "insertText": "data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const ValueT* src = mData ;)",
    "insertText": "for(size_t i=n; i; --i)"
  }
]