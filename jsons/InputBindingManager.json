[
  {
    "label": "FUserDefinedChords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUserDefinedChords"
  },
  {
    "label": "FInputBindingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInputBindingManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FContextEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextEntry"
  },
  {
    "label": "FCommandFilterOwners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommandFilterOwners"
  },
  {
    "label": "FCommandFilterForContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommandFilterForContext"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UICommandList . h \" # include \" Framework / Commands / InputChord . h \" # include \" Framework / Commands / UICommandInfo . h \" class FUserDefinedChords ; typedef TMap<FName,TSharedPtr<FUICommandInfo>> FCommandInfoMap ; typedef TMap<FInputChord,FName> FChordMap ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnUserDefinedChordChanged, const FUICommandInfo&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnRegisterCommandList, const FName, TSharedRef<FUICommandList>)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class FInputBindingManager { public : FInputBindingManager&)",
    "insertText": "Get()"
  },
  {
    "label": "FInputBindingManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInputBindingManager()"
  },
  {
    "label": "GetKnownInputContexts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKnownInputContexts(TArray< TSharedPtr<FBindingContext> >& OutInputContexts)"
  },
  {
    "label": "GetContextByName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBindingContext>)",
    "insertText": "GetContextByName(const FName& InContextName)"
  },
  {
    "label": "RemoveContextByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveContextByName(const FName& InContextName)"
  },
  {
    "label": "CreateInputCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInputCommand(const TSharedRef<FBindingContext>& InBindingContext, TSharedRef<FUICommandInfo> InUICommandInfo)"
  },
  {
    "label": "RemoveInputCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInputCommand(const TSharedRef<FBindingContext>& InBindingContext, TSharedRef<FUICommandInfo> InUICommandInfo)"
  },
  {
    "label": "GetCommandInfoFromInputChord()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FUICommandInfo>)",
    "insertText": "GetCommandInfoFromInputChord(const FName InBindingContext, const FInputChord& InChord, bool bCheckDefault)"
  },
  {
    "label": "FindCommandInContext()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FUICommandInfo>)",
    "insertText": "FindCommandInContext(const FName InBindingContext, const FInputChord& InChord, bool bCheckDefault)"
  },
  {
    "label": "FindCommandInContext()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FUICommandInfo>)",
    "insertText": "FindCommandInContext(const FName InBindingContext, const FName CommandName)"
  },
  {
    "label": "NotifyActiveChordChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActiveChordChanged(const FUICommandInfo& CommandInfo, const EMultipleKeyBindingIndex InChordIndex)"
  },
  {
    "label": "SaveInputBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInputBindings()"
  },
  {
    "label": "RemoveUserDefinedChords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDefinedChords()"
  },
  {
    "label": "GetCommandInfosFromContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCommandInfosFromContext(const FName InBindingContext, TArray< TSharedPtr<FUICommandInfo> >& OutCommandInfos)"
  },
  {
    "label": "RegisterUserDefinedChordChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterUserDefinedChordChanged(const FOnUserDefinedChordChanged::FDelegate& Delegate)"
  },
  {
    "label": "UnregisterUserDefinedChordChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterUserDefinedChordChanged(FDelegateHandle DelegateHandle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnUserDefinedChordChanged .)",
    "insertText": "Remove(DelegateHandle)"
  },
  {
    "label": "GetUserDefinedChord()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetUserDefinedChord(const FName InBindingContext, const FName InCommandName, const EMultipleKeyBindingIndex InChordIndex, FInputChord& OutUserDefinedChord)"
  },
  {
    "label": "GetProjectDefinedChord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProjectDefinedChord(const FName InBindingContext, const FName InCommandName, const EMultipleKeyBindingIndex InChordIndex, FInputChord& OutUserDefinedChord)"
  },
  {
    "label": "AddCommandFilter()",
    "kind": "Method",
    "detail": "Function (enum class ECommandFilterType { None,DenyList,AllowList } ; void)",
    "insertText": "AddCommandFilter(const FName InOwnerName, const FName InBindingContext, const FName InCommandName, const ECommandFilterType FilterType)"
  },
  {
    "label": "UnregisterCommandFilterOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCommandFilterOwner(const FName InOwnerName)"
  },
  {
    "label": "CommandPassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommandPassesFilter(const FName InBindingContext, const FName InCommandName)"
  },
  {
    "label": "RegisterCommandList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterCommandList(const ::FName InBindingContext, TSharedRef<FUICommandList> CommandList)"
  },
  {
    "label": "RegisterNewCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "RegisterNewCommandList(const FName InBindingContext)"
  },
  {
    "label": "UnregisterCommandList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterCommandList(const ::FName InBindingContext, TSharedRef<FUICommandList> CommandList)"
  },
  {
    "label": "CheckForDuplicateDefaultChords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForDuplicateDefaultChords(const FBindingContext& InBindingContext, TSharedPtr<FUICommandInfo> InCommandInfo)"
  },
  {
    "label": "GetAllChildContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllChildContexts(const FName InBindingContext, TArray<FName>& AllChildren)"
  },
  {
    "label": "PrintAllInputCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintAllInputCommands(bool bBoundOnly)"
  },
  {
    "label": "FContextEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FContextEntry {)",
    "insertText": "FContextEntry()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ChordToCommandInfoMaps .)",
    "insertText": "Init(FChordMap(), static_cast<uint8>(EMultipleKeyBindingIndex::NumChords))"
  }
]