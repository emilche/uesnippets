[
  {
    "label": "FPacketTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketTransport"
  },
  {
    "label": "FPacketNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketNode"
  },
  {
    "label": "FPacketTransport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Transport . h \" namespace UE { namespace Trace { class FPacketTransport : public FTransport { public : ~)",
    "insertText": "FPacketTransport()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(uint32 BlockSize)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "DebugBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugBegin()"
  },
  {
    "label": "DebugEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugEnd()"
  },
  {
    "label": "GetPointerImpl()",
    "kind": "Method",
    "detail": "Function (protected : const uint8*)",
    "insertText": "GetPointerImpl(uint32 BlockSize)"
  },
  {
    "label": "GetNextBatch()",
    "kind": "Method",
    "detail": "Function (private : struct FPacketNode ; bool)",
    "insertText": "GetNextBatch()"
  },
  {
    "label": "AllocateNode()",
    "kind": "Method",
    "detail": "Function (FPacketNode*)",
    "insertText": "AllocateNode()"
  }
]