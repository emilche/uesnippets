[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorReverseOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorReverseOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "BlockIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockIteratorState"
  },
  {
    "label": "TensorReverseOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_REVERSE_H # define EIGEN_CXX11_TENSOR_TENSOR_REVERSE_H namespace Eigen { namespace internal { template<ReverseDimensions,XprType> struct traits<TensorReverseOp<ReverseDimensions,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<ReverseDimensions,XprType> struct eval<TensorReverseOp<ReverseDimensions,XprType>,Eigen::Dense> { typedef const TensorReverseOp<ReverseDimensions,XprType>& type ; } ; template<ReverseDimensions,XprType> struct nested<TensorReverseOp<ReverseDimensions,XprType>,1,eval<TensorReverseOp<ReverseDimensions,XprType>>::type> { typedef TensorReverseOp<ReverseDimensions,XprType> type ; } ; } template<ReverseDimensions,XprType> class TensorReverseOp : public TensorBase<TensorReverseOp<ReverseDimensions,XprType>,WriteAccessors> { public : typedef TensorBase<TensorReverseOp<ReverseDimensions,XprType>,WriteAccessors> Base ; typedef Eigen::internal::traits<TensorReverseOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorReverseOp>::type Nested ; typedef Eigen::internal::traits<TensorReverseOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorReverseOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorReverseOp(const XprType& expr, const ReverseDimensions& reverse_dims) : m_xpr(expr), m_reverse_dims(reverse_dims)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const ReverseDimensions&)",
    "insertText": "reverse()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const ReverseDimensions m_reverse_dims ; } ; template<ReverseDimensions,ArgType,Device> struct TensorEvaluator<const TensorReverseOp<ReverseDimensions,ArgType>,Device> { typedef TensorReverseOp<ReverseDimensions,ArgType> XprType ; typedef XprType::Index Index ; const int NumDims = internal::array_size<ReverseDimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = NumDims> 0,PreferBlockAccess = true,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,RawAccess = false } ; typedef internal::TensorIntDivisor<Index> IndexDivisor ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef TensorEvaluator<const ArgType,Device>::TensorBlock ArgTensorBlock ; typedef internal::TensorMaterializedBlock<CoeffReturnType,NumDims,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device), m_reverse(op.reverse()), m_device(device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_strides [ i ] = m_strides [ i - 1 ]* m_dimensions [ i - 1 ] ;)",
    "insertText": "if(m_strides[i] > 0) m_fastStrides[i] = IndexDivisor(m_strides[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { m_strides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "reverseIndex()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "reverseIndex(Index index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < dimensions().TotalSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = 0 ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i > 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index idx = index / m_fastStrides [ i ] ; index - = idx* m_strides [ i ] ;)",
    "insertText": "if(m_reverse[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (idx = m_dimensions [ i ] - idx - 1 ; } inputIndex + = idx* m_strides [ i ] ; })",
    "insertText": "if(m_reverse[0])"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndex(m_dimensions[0] - index - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { inputIndex + = index ; } } else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (idx = m_dimensions [ i ] - idx - 1 ; } inputIndex + = idx* m_strides [ i ] ; })",
    "insertText": "if(m_reverse[NumDims-1])"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndex(m_dimensions[NumDims-1] - index - 1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { inputIndex + = index ; } } return inputIndex ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "lastLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "lastLevelCacheSize()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const bool isColMajor = static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "reverseIndex()",
    "kind": "Method",
    "detail": "Function (const Index inner_dim_idx = isColMajor ? 0 : NumDims - 1 ; const bool inner_dim_reversed = m_reverse [ inner_dim_idx ] ; Index block_offset = 0 ; Index input_offset =)",
    "insertText": "reverseIndex(desc.offset())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (array<BlockIteratorState,NumDims> it ;)",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (const int dim = isColMajor ? i : NumDims - 1 - i ; it [ i ] . size = desc .)",
    "insertText": "dimension(dim)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (it [ i ] . count = 0 ; it [ i ] . reverse = m_reverse [ dim ] ; it [ i ] . block_stride =)",
    "insertText": "i(it[i - 1].size * it[i - 1].block_stride)"
  },
  {
    "label": "block_stride()",
    "kind": "Method",
    "detail": "Function (it [ i ] . block_span = it [ i ] .)",
    "insertText": "block_stride(it[i].size - 1)"
  },
  {
    "label": "input_stride()",
    "kind": "Method",
    "detail": "Function (it [ i ] . input_stride = m_strides [ dim ] ; it [ i ] . input_span = it [ i ] .)",
    "insertText": "input_stride(it[i].size - 1)"
  },
  {
    "label": "input_stride()",
    "kind": "Method",
    "detail": "Function (it [ i ] . size = it [ effective_inner_dim ] . size* it [ i ] . size ; it [ i ] . block_stride = 1 ; it [ i ] .)",
    "insertText": "input_stride(inner_dim_reversed ? -1 : 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (effective_inner_dim = i ; })",
    "insertText": "eigen_assert(it[effective_inner_dim].block_stride == 1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(it[effective_inner_dim].input_stride == (inner_dim_reversed ? -1 : 1))"
  },
  {
    "label": "prepareStorage()",
    "kind": "Method",
    "detail": "Function (const Index inner_dim_size = it [ effective_inner_dim ] . size ; const TensorBlock::Storage block_storage =)",
    "insertText": "prepareStorage(desc, scratch)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (CoeffReturnType* block_buffer = block_storage .)",
    "insertText": "data()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index dst = block_offset ; Index src = input_offset ;)",
    "insertText": "if(inner_dim_reversed)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (block_buffer [ dst ] = m_impl .)",
    "insertText": "coeff(src)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + dst ; - - src ; } } else {)",
    "insertText": "for(Index i = 0; i < inner_dim_size; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + dst ; + + src ; } })",
    "insertText": "if((NumDims - effective_inner_dim) == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (block_offset + = it [ i ] . block_stride ; input_offset + = it [ i ] . input_stride ; break ; })",
    "insertText": "if(i != NumDims - 1)"
  },
  {
    "label": "AsTensorMaterializedBlock()",
    "kind": "Method",
    "detail": "Function (block_offset - = it [ i ] . block_span ; input_offset - = it [ i ] . input_span ; } } return block_storage .)",
    "insertText": "AsTensorMaterializedBlock()"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (compute_cost + = 2* TensorOpCost::AddCost<)",
    "insertText": "Index()"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} } return m_impl .)",
    "insertText": "costPerCoeff(vectorized) + TensorOpCost(0, 0, compute_cost, false , PacketSize)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "BlockIteratorState()",
    "kind": "Method",
    "detail": "Function (} # endif protected : Dimensions m_dimensions ; array<Index,NumDims> m_strides ; array<IndexDivisor,NumDims> m_fastStrides ; TensorEvaluator<ArgType,Device> m_impl ; ReverseDimensions m_reverse ; const Device EIGEN_DEVICE_REF m_device ; private : struct BlockIteratorState {)",
    "insertText": "BlockIteratorState() : size(0), count(0), reverse(false), block_stride(0), block_span(0), input_stride(0), input_span(0)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} Index size ; Index count ; bool reverse ; Index block_stride ; Index block_span ; Index input_stride ; Index input_span ; } ; } ; template<ReverseDimensions,ArgType,Device> struct TensorEvaluator<TensorReverseOp<ReverseDimensions,ArgType>,Device> : public TensorEvaluator<const TensorReverseOp<ReverseDimensions,ArgType>,Device> { typedef TensorEvaluator<const TensorReverseOp<ReverseDimensions,ArgType>,Device> Base ; typedef TensorReverseOp<ReverseDimensions,ArgType> XprType ; typedef XprType::Index Index ; const int NumDims = internal::array_size<ReverseDimensions>::value ; typedef DSizes<Index,NumDims> Dimensions ; enum { IsAligned = false,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = false,PreferBlockAccess = false,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,RawAccess = false } ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX CoeffReturnType values [ PacketSize ] ; internal::pstore<CoeffReturnType,)",
    "insertText": "PacketReturnType(values, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "coeffRef(index+i)"
  }
]