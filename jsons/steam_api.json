[
  {
    "label": "SteamAPI_Init()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAM_API_H # define STEAM_API_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" # include \" isteamclient . h \" # include \" isteamuser . h \" # include \" isteamfriends . h \" # include \" isteamutils . h \" # include \" isteammatchmaking . h \" # include \" isteamuserstats . h \" # include \" isteamapps . h \" # include \" isteamnetworking . h \" # include \" isteamremotestorage . h \" # include \" isteamscreenshots . h \" # include \" isteammusic . h \" # include \" isteammusicremote . h \" # include \" isteamhttp . h \" # include \" isteamcontroller . h \" # include \" isteamugc . h \" # include \" isteamapplist . h \" # include \" isteamhtmlsurface . h \" # include \" isteaminventory . h \" # include \" isteamvideo . h \" # include \" isteamparentalsettings . h \" # include \" isteaminput . h \" # include \" isteamremoteplay . h \" # include \" isteamnetworkingmessages . h \" # include \" isteamnetworkingsockets . h \" # include \" isteamnetworkingutils . h \" bool S_CALLTYPE)",
    "insertText": "SteamAPI_Init()"
  },
  {
    "label": "SteamAPI_Shutdown()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_Shutdown()"
  },
  {
    "label": "SteamAPI_RestartAppIfNecessary()",
    "kind": "Method",
    "detail": "Function (bool S_CALLTYPE)",
    "insertText": "SteamAPI_RestartAppIfNecessary(uint32 unOwnAppID)"
  },
  {
    "label": "SteamAPI_ReleaseCurrentThreadMemory()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_ReleaseCurrentThreadMemory()"
  },
  {
    "label": "SteamAPI_WriteMiniDump()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_WriteMiniDump(uint32 uStructuredExceptionCode, void* pvExceptionInfo, uint32 uBuildID)"
  },
  {
    "label": "SteamAPI_SetMiniDumpComment()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_SetMiniDumpComment(const char *pchMsg)"
  },
  {
    "label": "SteamAPI_IsSteamRunning()",
    "kind": "Method",
    "detail": "Function (bool S_CALLTYPE)",
    "insertText": "SteamAPI_IsSteamRunning()"
  },
  {
    "label": "SteamAPI_GetSteamInstallPath()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "SteamAPI_GetSteamInstallPath()"
  },
  {
    "label": "SteamAPI_SetTryCatchCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VERSION_SAFE_STEAM_API_INTERFACES ) S_API bool S_CALLTYPE SteamAPI_InitSafe()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(USE_BREAKPAD_HANDLER) || defined(STEAM_API_EXPORTS) S_API void S_CALLTYPE SteamAPI_UseBreakpadCrashHandler( char const *pchVersion, char const *pchDate, char const *pchTime, bool bFullMemoryDumps, void *pvContext, PFNPreMinidumpCallback m_pfnPreMinidumpCallback)"
  },
  {
    "label": "SteamAPI_SetBreakpadAppID()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_SetBreakpadAppID(uint32 unAppID)"
  },
  {
    "label": "SteamAPI_ManualDispatch_Init()",
    "kind": "Method",
    "detail": "Function (# endif void S_CALLTYPE)",
    "insertText": "SteamAPI_ManualDispatch_Init()"
  },
  {
    "label": "SteamAPI_ManualDispatch_RunFrame()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_ManualDispatch_RunFrame(HSteamPipe hSteamPipe)"
  },
  {
    "label": "SteamAPI_ManualDispatch_GetNextCallback()",
    "kind": "Method",
    "detail": "Function (bool S_CALLTYPE)",
    "insertText": "SteamAPI_ManualDispatch_GetNextCallback(HSteamPipe hSteamPipe, CallbackMsg_t *pCallbackMsg)"
  },
  {
    "label": "SteamAPI_ManualDispatch_FreeLastCallback()",
    "kind": "Method",
    "detail": "Function (void S_CALLTYPE)",
    "insertText": "SteamAPI_ManualDispatch_FreeLastCallback(HSteamPipe hSteamPipe)"
  },
  {
    "label": "SteamAPI_ManualDispatch_GetAPICallResult()",
    "kind": "Method",
    "detail": "Function (bool S_CALLTYPE)",
    "insertText": "SteamAPI_ManualDispatch_GetAPICallResult(HSteamPipe hSteamPipe, SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAM_API_EXPORTS bool)",
    "insertText": "Init()"
  },
  {
    "label": "SteamClient()",
    "kind": "Method",
    "detail": "Function (m_pSteamClient)",
    "insertText": "SteamClient()"
  },
  {
    "label": "SteamUser()",
    "kind": "Method",
    "detail": "Function (m_pSteamUser)",
    "insertText": "SteamUser()"
  },
  {
    "label": "SteamFriends()",
    "kind": "Method",
    "detail": "Function (m_pSteamFriends)",
    "insertText": "SteamFriends()"
  },
  {
    "label": "SteamUtils()",
    "kind": "Method",
    "detail": "Function (m_pSteamUtils)",
    "insertText": "SteamUtils()"
  },
  {
    "label": "SteamMatchmaking()",
    "kind": "Method",
    "detail": "Function (m_pSteamMatchmaking)",
    "insertText": "SteamMatchmaking()"
  },
  {
    "label": "SteamGameSearch()",
    "kind": "Method",
    "detail": "Function (m_pSteamGameSearch)",
    "insertText": "SteamGameSearch()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(IOSALL) m_pSteamMatchmakingServers = ::SteamMatchmakingServers()"
  },
  {
    "label": "SteamUserStats()",
    "kind": "Method",
    "detail": "Function (# endif m_pSteamUserStats)",
    "insertText": "SteamUserStats()"
  },
  {
    "label": "SteamApps()",
    "kind": "Method",
    "detail": "Function (m_pSteamApps)",
    "insertText": "SteamApps()"
  },
  {
    "label": "SteamNetworking()",
    "kind": "Method",
    "detail": "Function (m_pSteamNetworking)",
    "insertText": "SteamNetworking()"
  },
  {
    "label": "SteamRemoteStorage()",
    "kind": "Method",
    "detail": "Function (m_pSteamRemoteStorage)",
    "insertText": "SteamRemoteStorage()"
  },
  {
    "label": "SteamScreenshots()",
    "kind": "Method",
    "detail": "Function (m_pSteamScreenshots)",
    "insertText": "SteamScreenshots()"
  },
  {
    "label": "SteamHTTP()",
    "kind": "Method",
    "detail": "Function (m_pSteamHTTP)",
    "insertText": "SteamHTTP()"
  },
  {
    "label": "SteamController()",
    "kind": "Method",
    "detail": "Function (m_pController)",
    "insertText": "SteamController()"
  },
  {
    "label": "SteamUGC()",
    "kind": "Method",
    "detail": "Function (m_pSteamUGC)",
    "insertText": "SteamUGC()"
  },
  {
    "label": "SteamAppList()",
    "kind": "Method",
    "detail": "Function (m_pSteamAppList)",
    "insertText": "SteamAppList()"
  },
  {
    "label": "SteamMusic()",
    "kind": "Method",
    "detail": "Function (m_pSteamMusic)",
    "insertText": "SteamMusic()"
  },
  {
    "label": "SteamMusicRemote()",
    "kind": "Method",
    "detail": "Function (m_pSteamMusicRemote)",
    "insertText": "SteamMusicRemote()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(ANDROID ) && !defined( IOSALL) m_pSteamHTMLSurface = ::SteamHTMLSurface()"
  },
  {
    "label": "SteamInventory()",
    "kind": "Method",
    "detail": "Function (# endif m_pSteamInventory)",
    "insertText": "SteamInventory()"
  },
  {
    "label": "SteamVideo()",
    "kind": "Method",
    "detail": "Function (m_pSteamVideo)",
    "insertText": "SteamVideo()"
  },
  {
    "label": "SteamParentalSettings()",
    "kind": "Method",
    "detail": "Function (m_pSteamParentalSettings)",
    "insertText": "SteamParentalSettings()"
  },
  {
    "label": "SteamInput()",
    "kind": "Method",
    "detail": "Function (m_pSteamInput)",
    "insertText": "SteamInput()"
  }
]