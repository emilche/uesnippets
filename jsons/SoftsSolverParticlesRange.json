[
  {
    "label": "FSolverParticlesRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverParticlesRange"
  },
  {
    "label": "FSolverParticlesRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / ParticlesRange . h \" namespace Chaos::Softs { class FSolverParticlesRange final : public TParticlesRange<FSolverParticles> { public :)",
    "insertText": "FSolverParticlesRange()"
  },
  {
    "label": "FSolverParticlesRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSolverParticlesRange(const FSolverParticlesRange&)"
  },
  {
    "label": "FSolverParticlesRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSolverParticlesRange(FSolverParticlesRange&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSolverParticlesRange&)",
    "insertText": "operator(const FSolverParticlesRange&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSolverParticlesRange&)",
    "insertText": "operator(FSolverParticlesRange&&)"
  },
  {
    "label": "FSolverParticlesRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSolverParticlesRange(FSolverParticles* InParticles, const int32 InOffset, const int32 InRange) : TParticlesRange<FSolverParticles>(InParticles, InOffset, InRange)"
  },
  {
    "label": "FSolverParticlesRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverParticlesRange(TParticlesRange<FSolverParticles>&& Other) : TParticlesRange<FSolverParticles>(MoveTemp(Other))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "P(const int32 Index)"
  },
  {
    "label": "GetP()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "GetP(const int32 Index)"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetP(const int32 Index, const FSolverVec3& InP)"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParticles().P(Index + Offset)"
  },
  {
    "label": "PAndInvM()",
    "kind": "Method",
    "detail": "Function (} const FPAndInvM&)",
    "insertText": "PAndInvM(const int32 Index)"
  },
  {
    "label": "GetPAndInvM()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FPAndInvM>)",
    "insertText": "GetPAndInvM()"
  },
  {
    "label": "VPrev()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "VPrev(const int32 Index)"
  },
  {
    "label": "GetVPrev()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "GetVPrev()"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "V(const int32 Index)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "GetV()"
  },
  {
    "label": "Acceleration()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "Acceleration(const int32 Index)"
  },
  {
    "label": "GetAcceleration()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "GetAcceleration()"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "M(const int32 Index)"
  },
  {
    "label": "GetM()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverReal>)",
    "insertText": "GetM()"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "InvM(const int32 Index)"
  },
  {
    "label": "GetInvM()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverReal>)",
    "insertText": "GetInvM()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3&)",
    "insertText": "X(const int32 Index)"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "GetParticles().X(Index + Offset)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } const FSolverVec3&)",
    "insertText": "GetX(const int32 Index)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetX(const int32 Index, const FSolverVec3& InX)"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParticles().SetX(Index + Offset, InX)"
  },
  {
    "label": "XArray()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "XArray()"
  }
]