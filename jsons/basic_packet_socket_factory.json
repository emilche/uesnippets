[
  {
    "label": "SocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketFactory"
  },
  {
    "label": "BasicPacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicPacketSocketFactory"
  },
  {
    "label": "BasicPacketSocketFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_BASIC_PACKET_SOCKET_FACTORY_H_ # define P2P_BASE_BASIC_PACKET_SOCKET_FACTORY_H_ # include<stdint . h> # include<memory> # include<string> # include \" api / async_dns_resolver . h \" # include \" api / packet_socket_factory . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / proxy_info . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / socket_factory . h \" namespace rtc { class SocketFactory ; class BasicPacketSocketFactory : public PacketSocketFactory { public :)",
    "insertText": "BasicPacketSocketFactory(SocketFactory* socket_factory)"
  },
  {
    "label": "BasicPacketSocketFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicPacketSocketFactory()"
  },
  {
    "label": "CreateUdpSocket()",
    "kind": "Method",
    "detail": "Function (AsyncPacketSocket*)",
    "insertText": "CreateUdpSocket(const SocketAddress& local_address, uint16_t min_port, uint16_t max_port)"
  },
  {
    "label": "CreateServerTcpSocket()",
    "kind": "Method",
    "detail": "Function (AsyncListenSocket*)",
    "insertText": "CreateServerTcpSocket(const SocketAddress& local_address, uint16_t min_port, uint16_t max_port, int opts)"
  },
  {
    "label": "CreateClientTcpSocket()",
    "kind": "Method",
    "detail": "Function (AsyncPacketSocket*)",
    "insertText": "CreateClientTcpSocket(const SocketAddress& local_address, const SocketAddress& remote_address, const ProxyInfo& proxy_info, const std::string& user_agent, const PacketSocketTcpOptions& tcp_options)"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_DEPRECATED(\"Use CreateAsyncDnsResolver\") AsyncResolverInterface* CreateAsyncResolver()"
  },
  {
    "label": "CreateAsyncDnsResolver()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<webrtc::AsyncDnsResolverInterface>)",
    "insertText": "CreateAsyncDnsResolver()"
  },
  {
    "label": "BindSocket()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "BindSocket(Socket* socket, const SocketAddress& local_address, uint16_t min_port, uint16_t max_port)"
  }
]