[
  {
    "label": "vpx_usec_timer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_usec_timer"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_PORTS_VPX_TIMER_H_ # define VPX_VPX_PORTS_VPX_TIMER_H_ # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # if CONFIG_OS_SUPPORT # if)",
    "insertText": "defined(_WIN32) #undef NOMINMAX #define NOMINMAX #ifndef WIN32_LEAN_AND_MEAN #define WIN32_LEAN_AND_MEAN #endif #include <windows.h> #else #include <sys/time.h> #ifndef timersub #define timersub(a, b, result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((result)->tv_usec < 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_WIN32)"
  },
  {
    "label": "vpx_usec_timer_start()",
    "kind": "Method",
    "detail": "Function (# else struct timeval begin,end ; # endif } ; void)",
    "insertText": "vpx_usec_timer_start(struct vpx_usec_timer *t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_WIN32) QueryPerformanceCounter(&t->begin)"
  },
  {
    "label": "gettimeofday()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "gettimeofday(&t->begin, NULL)"
  },
  {
    "label": "vpx_usec_timer_mark()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "vpx_usec_timer_mark(struct vpx_usec_timer *t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_WIN32) QueryPerformanceCounter(&t->end)"
  },
  {
    "label": "gettimeofday()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "gettimeofday(&t->end, NULL)"
  },
  {
    "label": "vpx_usec_timer_elapsed()",
    "kind": "Method",
    "detail": "Function (# endif } int64_t)",
    "insertText": "vpx_usec_timer_elapsed(struct vpx_usec_timer *t)"
  },
  {
    "label": "QueryPerformanceFrequency()",
    "kind": "Method",
    "detail": "Function (diff . QuadPart = t -> end . QuadPart - t -> begin . QuadPart ;)",
    "insertText": "QueryPerformanceFrequency(&freq)"
  },
  {
    "label": "timersub()",
    "kind": "Method",
    "detail": "Function (# endif } # else # ifndef timersub # define)",
    "insertText": "timersub(a, b, result)"
  }
]