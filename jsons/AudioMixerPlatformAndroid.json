[
  {
    "label": "FMixerPlatformAndroid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerPlatformAndroid"
  },
  {
    "label": "FMixerPlatformAndroid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioMixer . h \" # include \" DSP / Dsp . h \" # include<SLES / OpenSLES . h> # include \" SLES / OpenSLES_Android . h \" namespace Audio { class FMixerPlatformAndroid : public IAudioMixerPlatformInterface { public :)",
    "insertText": "FMixerPlatformAndroid()"
  },
  {
    "label": "GetPlatformApi()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformApi()"
  },
  {
    "label": "InitializeHardware()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitializeHardware()"
  },
  {
    "label": "TeardownHardware()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TeardownHardware()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetNumOutputDevices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNumOutputDevices(uint32& OutNumOutputDevices)"
  },
  {
    "label": "GetOutputDeviceInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputDeviceInfo(const uint32 InDeviceIndex, FAudioPlatformDeviceInfo& OutInfo)"
  },
  {
    "label": "GetDefaultOutputDeviceIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultOutputDeviceIndex(uint32& OutDefaultDeviceIndex)"
  },
  {
    "label": "OpenAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenAudioStream(const FAudioMixerOpenStreamParams& Params)"
  },
  {
    "label": "CloseAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseAudioStream()"
  },
  {
    "label": "StartAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAudioStream()"
  },
  {
    "label": "StopAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopAudioStream()"
  },
  {
    "label": "GetPlatformDeviceInfo()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformDeviceInfo)",
    "insertText": "GetPlatformDeviceInfo()"
  },
  {
    "label": "SubmitBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitBuffer(const uint8* Buffer)"
  },
  {
    "label": "GetDefaultDeviceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultDeviceName()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformSettings)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "SuspendContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendContext()"
  },
  {
    "label": "ResumeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeContext()"
  },
  {
    "label": "GetErrorString()",
    "kind": "Method",
    "detail": "Function (private : const TCHAR*)",
    "insertText": "GetErrorString(SLresult Result)"
  },
  {
    "label": "GetDeviceBufferSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDeviceBufferSize(int32 RenderCallbackSize)"
  },
  {
    "label": "OpenSLBufferQueueCallback()",
    "kind": "Method",
    "detail": "Function (SLObjectItf SL_EngineObject ; SLEngineItf SL_EngineEngine ; SLObjectItf SL_OutputMixObject ; SLObjectItf SL_PlayerObject ; SLPlayItf SL_PlayerPlayInterface ; SLAndroidSimpleBufferQueueItf SL_PlayerBufferQueue ; FCriticalSection SuspendedCriticalSection ; bool bSuspended ; bool bInitialized ; bool bInCallback ; Audio::TCircularAudioBuffer<int16> CircularOutputBuffer ; TArray<int16> DeviceBuffer ; int32 NumSamplesPerRenderCallback ; int32 NumSamplesPerDeviceCallback ; void)",
    "insertText": "OpenSLBufferQueueCallback(SLAndroidSimpleBufferQueueItf InQueueInterface, void* pContext)"
  }
]