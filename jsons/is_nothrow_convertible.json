[
  {
    "label": "__is_nothrow_convertible_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_nothrow_convertible_helper"
  },
  {
    "label": "is_nothrow_convertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_nothrow_convertible"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_NOTHROW_CONVERTIBLE_H # define _LIBCPP___TYPE_TRAITS_IS_NOTHROW_CONVERTIBLE_H # include<__config> # include<__type_traits / conjunction . h> # include<__type_traits / disjunction . h> # include<__type_traits / integral_constant . h> # include<__type_traits / is_convertible . h> # include<__type_traits / is_void . h> # include<__type_traits / lazy . h> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 template <typename _Tp> static void __test_noexcept(_Tp)"
  },
  {
    "label": "noexcept()",
    "kind": "Method",
    "detail": "Function (template<_Fm,_To> bool_constant<)",
    "insertText": "noexcept(_VSTD::__test_noexcept<_To>(declval<_Fm>()))> __is_nothrow_convertible_test()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<_Fm,_To> struct __is_nothrow_convertible_helper :)",
    "insertText": "decltype(__is_nothrow_convertible_test<_Fm, _To>())"
  }
]