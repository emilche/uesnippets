[
  {
    "label": "TSpirvForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpirvForwardIterator"
  },
  {
    "label": "FSpirv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpirv"
  },
  {
    "label": "TSpirvForwardIterator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" THIRD_PARTY_INCLUDES_START # include<spirv / unified1 / spirv . h> THIRD_PARTY_INCLUDES_END template<T> class TSpirvForwardIterator { public :)",
    "insertText": "TSpirvForwardIterator() : Ptr(nullptr)"
  },
  {
    "label": "TSpirvForwardIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSpirvForwardIterator(const TSpirvForwardIterator& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSpirvForwardIterator&)",
    "insertText": "operator(const TSpirvForwardIterator& Other)"
  },
  {
    "label": "TSpirvForwardIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSpirvForwardIterator(T* InPtr, bool bPointsAtHeader = false) : Ptr(InPtr)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const uint32 MagicNumberValue = Ptr [ 0 ] ;)",
    "insertText": "check(MagicNumberValue == SpvMagicNumber)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (const uint32 ZeroCheckValue = Ptr [ 4 ] ;)",
    "insertText": "checkf(ZeroCheckValue == 0, TEXT(\"redundancy check for SPIR-V module failed: WORD[4] is non-zero\"))"
  },
  {
    "label": "Opcode()",
    "kind": "Method",
    "detail": "Function (Ptr + = 5 ; } } SpvOp)",
    "insertText": "Opcode()"
  },
  {
    "label": "WordCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "WordCount()"
  },
  {
    "label": "Operand()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Operand(int32 WordOffset)"
  },
  {
    "label": "OperandAsString()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "OperandAsString(int32 WordOffset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ptr + = Words ; return* this ; } TSpirvForwardIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (TSpirvForwardIterator)",
    "insertText": "Current(*this)"
  },
  {
    "label": "GetByteData()",
    "kind": "Method",
    "detail": "Function (} const int8*)",
    "insertText": "GetByteData()"
  },
  {
    "label": "GetByteSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetByteSize()"
  },
  {
    "label": "GetWordOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetWordOffset(const FSpirvConstIterator& Iter, uint32 OperandWordOffset = 0)"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} public : FSpirvConstIterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} FSpirvConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} FSpirvConstIterator)",
    "insertText": "cend()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FSpirvConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "SpirvBuiltinToString()",
    "kind": "Method",
    "detail": "Function (} } ; const TCHAR*)",
    "insertText": "SpirvBuiltinToString(const SpvBuiltIn BuiltIn)"
  },
  {
    "label": "FindOffsetToSpirvEntryPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOffsetToSpirvEntryPoint(const FSpirv& Spirv, const ANSICHAR* EntryPointName, uint32& OutWordOffsetToEntryPoint, uint32& OutWordOffsetToMainName)"
  },
  {
    "label": "PatchSpirvEntryPointWithCRC()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR*)",
    "insertText": "PatchSpirvEntryPointWithCRC(FSpirv& Spirv, uint32& OutCRC)"
  },
  {
    "label": "ParseSpirvGlobalVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSpirvGlobalVariables(const FSpirv& Spirv, SpvStorageClass StorageClass, TArray<FString>& OutVariableNames)"
  }
]