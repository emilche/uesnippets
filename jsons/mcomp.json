[
  {
    "label": "vp8_mv_bit_cost()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_mv_bit_cost(int_mv *mv, int_mv *ref, int *mvcost[2], int Weight)"
  },
  {
    "label": "vp8_init_dsmotion_compensation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_init_dsmotion_compensation(MACROBLOCK *x, int stride)"
  },
  {
    "label": "vp8_init3smotion_compensation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_init3smotion_compensation(MACROBLOCK *x, int stride)"
  },
  {
    "label": "vp8_hex_search()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_hex_search(MACROBLOCK *x, BLOCK *b, BLOCKD *d, int_mv *ref_mv,\n                   int_mv *best_mv, int search_param, int sad_per_bit,\n                   const vp8_variance_fn_ptr_t *vfp, int *mvsadcost[2],\n                   int_mv *center_mv)"
  },
  {
    "label": "vp8_full_search_sad()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_full_search_sad(MACROBLOCK *x, BLOCK *b, BLOCKD *d, int_mv *ref_mv,\n                        int sad_per_bit, int distance,\n                        vp8_variance_fn_ptr_t *fn_ptr, int *mvcost[2],\n                        int_mv *center_mv)"
  }
]