[
  {
    "label": "FBindingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBindingContext"
  },
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUICommandInfoDecl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfoDecl"
  },
  {
    "label": "FInputBindingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInputBindingManager"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" InputCoreTypes . h \" # include \" Layout / Visibility . h \" # include \" Textures / SlateIcon . h \" # include \" Trace / SlateMemoryTags . h \" # include \" Framework / Commands / InputChord . h \" # include \" UICommandInfo . generated . h \" class FBindingContext ; class FUICommandInfo ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (None,Button,ToggleButton,RadioButton,Check,CollapsedButton } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DefaultChord()",
    "kind": "Method",
    "detail": "Function (Primary = 0,Secondary,NumChords } ; class FUICommandInfo ; class FUICommandInfoDecl { class FBindingContext ; public : FUICommandInfoDecl&)",
    "insertText": "DefaultChord(const FInputChord& InDefaultChord, const EMultipleKeyBindingIndex InChordIndex = EMultipleKeyBindingIndex::Primary)"
  },
  {
    "label": "UserInterfaceType()",
    "kind": "Method",
    "detail": "Function (FUICommandInfoDecl&)",
    "insertText": "UserInterfaceType(EUserInterfaceActionType InType)"
  },
  {
    "label": "Icon()",
    "kind": "Method",
    "detail": "Function (FUICommandInfoDecl&)",
    "insertText": "Icon(const FSlateIcon& InIcon)"
  },
  {
    "label": "Description()",
    "kind": "Method",
    "detail": "Function (FUICommandInfoDecl&)",
    "insertText": "Description(const FText& InDesc)"
  },
  {
    "label": "FUICommandInfo()",
    "kind": "Method",
    "detail": "Function (operator TSharedPtr<)",
    "insertText": "FUICommandInfo()"
  },
  {
    "label": "FUICommandInfoDecl()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FUICommandInfoDecl(const TSharedRef<class FBindingContext>& InContext, const FName InCommandName, const FText& InLabel, const FText& InDesc, const FName InBundle = NAME_None)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class FUICommandInfo> Info ; const TSharedRef<FBindingContext>& Context ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnBindingContextChanged, const FBindingContext&)"
  },
  {
    "label": "FBindingContext()",
    "kind": "Method",
    "detail": "Function (class FBindingContext : public TSharedFromThis<FBindingContext> { public :)",
    "insertText": "FBindingContext(const FName InContextName, const FText& InContextDesc, const FName InContextParent, const FName InStyleSetName ) : ContextName( InContextName ) , ContextParent( InContextParent ) , ContextDesc( InContextDesc ) , StyleSetName( InStyleSetName)"
  },
  {
    "label": "FBindingContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBindingContext(const FBindingContext&)"
  },
  {
    "label": "FBindingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBindingContext(FBindingContext&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBindingContext&)",
    "insertText": "operator(const FBindingContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBindingContext&)",
    "insertText": "operator(FBindingContext&&)"
  },
  {
    "label": "NewCommand()",
    "kind": "Method",
    "detail": "Function (FUICommandInfoDecl)",
    "insertText": "NewCommand(const FName InCommandName, const FText& InCommandLabel, const FText& InCommandDesc)"
  },
  {
    "label": "GetContextName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetContextName()"
  },
  {
    "label": "GetBundleLabel()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetBundleLabel(const FName Name)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FBindingContext& Context)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBindingContext& Other)"
  },
  {
    "label": "GetInputText()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetInputText()"
  },
  {
    "label": "GetActiveChord()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<const FInputChord>)",
    "insertText": "GetActiveChord(const EMultipleKeyBindingIndex InChordIndex)"
  },
  {
    "label": "HasActiveChord()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "HasActiveChord(const FInputChord InChord)"
  },
  {
    "label": "GetFirstValidChord()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<const FInputChord>)",
    "insertText": "GetFirstValidChord()"
  },
  {
    "label": "HasDefaultChord()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "HasDefaultChord(const FInputChord InChord)"
  },
  {
    "label": "GetDefaultChord()",
    "kind": "Method",
    "detail": "Function (} const FInputChord&)",
    "insertText": "GetDefaultChord(const EMultipleKeyBindingIndex InChordIndex)"
  },
  {
    "label": "MakeCommandInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeCommandInfo(const TSharedRef<class FBindingContext>& InContext, TSharedPtr< FUICommandInfo >& OutCommand, const FName InCommandName, const FText& InCommandLabel, const FText& InCommandDesc, const FSlateIcon& InIcon, const EUserInterfaceActionType InUserInterfaceType, const FInputChord& InDefaultChord, const FInputChord& InAlternateDefaultChord = FInputChord(), const FName InBundle = NAME_None)"
  },
  {
    "label": "UnregisterCommandInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCommandInfo(const TSharedRef<class FBindingContext>& InContext, const TSharedRef<FUICommandInfo>& InCommand)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetLabel()"
  },
  {
    "label": "SetActiveChord()",
    "kind": "Method",
    "detail": "Function (bUseLongDisplayName = bInUseLongDisplayName ; } void)",
    "insertText": "SetActiveChord(const FInputChord& NewChord, const EMultipleKeyBindingIndex InChordIndex)"
  },
  {
    "label": "RemoveActiveChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveChord(const EMultipleKeyBindingIndex InChordIndex)"
  },
  {
    "label": "MakeTooltip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SToolTip>)",
    "insertText": "MakeTooltip(const TAttribute<FText>& InText = TAttribute<FText>() , const TAttribute< EVisibility >& InToolTipVisibility = TAttribute<EVisibility>())"
  }
]