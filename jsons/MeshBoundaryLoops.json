[
  {
    "label": "FMeshBoundaryLoops",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshBoundaryLoops"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Subloops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Subloops"
  },
  {
    "label": "FMeshRegionBoundaryLoops",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshRegionBoundaryLoops"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" EdgeLoop . h \" # include \" EdgeSpan . h \" # include \" VectorUtil . h \" # include \" Util / BufferUtil . h \" namespace UE { namespace Geometry { class FMeshBoundaryLoops { public : const FDynamicMesh3* Mesh = nullptr ; TArray<FEdgeLoop> Loops ; TArray<FEdgeSpan> Spans ; bool bAborted = false ; bool bSawOpenSpans = false ; bool bFellBackToSpansOnFailure = false ; enum class ESpanBehaviors { Ignore,Abort,Compute } ; ESpanBehaviors SpanBehavior = ESpanBehaviors::Compute ; enum class EFailureBehaviors { Abort,ConvertToOpenSpan } ; EFailureBehaviors FailureBehavior = EFailureBehaviors::ConvertToOpenSpan ; TFunction<)",
    "insertText": "bool(int)"
  },
  {
    "label": "FMeshBoundaryLoops()",
    "kind": "Method",
    "detail": "Function (TArray<int> FailureBowties ; public :)",
    "insertText": "FMeshBoundaryLoops()"
  },
  {
    "label": "FMeshBoundaryLoops()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshBoundaryLoops(const FDynamicMesh3* MeshIn, bool bAutoCompute = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Mesh = MeshIn ;)",
    "insertText": "if(bAutoCompute)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute()"
  },
  {
    "label": "SetMesh()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetMesh(const FDynamicMesh3* MeshIn)"
  },
  {
    "label": "GetLoopCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLoopCount()"
  },
  {
    "label": "GetSpanCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetSpanCount()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FEdgeLoop&)",
    "insertText": "operator(int Index)"
  },
  {
    "label": "GetLongestLoopIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLongestLoopIndex()"
  },
  {
    "label": "FindVertexInLoop()",
    "kind": "Method",
    "detail": "Function (FIndex2i)",
    "insertText": "FindVertexInLoop(int VertexID)"
  },
  {
    "label": "FindLoopContainingVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLoopContainingVertex(int VertexID)"
  },
  {
    "label": "FindLoopContainingEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLoopContainingEdge(int EdgeID)"
  },
  {
    "label": "FindLoopTrianglesHint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLoopTrianglesHint(const TArray<int>& BorderHintTris)"
  },
  {
    "label": "FindLoopEdgesHint()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLoopEdgesHint(const TSet<int>& BorderHintEdges)"
  },
  {
    "label": "GetVertexNormal()",
    "kind": "Method",
    "detail": "Function (protected : TArray<int> VerticesTemp ; FVector3d)",
    "insertText": "GetVertexNormal(int vid)"
  },
  {
    "label": "FindLeftTurnEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLeftTurnEdge(int incoming_e, int bowtie_v, TArray<int>& bdry_edges, int bdry_edges_count, TArray<bool>& used_edges)"
  },
  {
    "label": "ExtractSubloops()",
    "kind": "Method",
    "detail": "Function (struct Subloops { TArray<FEdgeLoop> Loops ; TArray<FEdgeSpan> Spans ; } ; bool)",
    "insertText": "ExtractSubloops(TArray<int>& loopV, TArray<int>& loopE, TArray<int>& bowties, Subloops& SubloopsOut)"
  },
  {
    "label": "IsSimpleBowtieLoop()",
    "kind": "Method",
    "detail": "Function (protected : class FMeshRegionBoundaryLoops ; bool)",
    "insertText": "IsSimpleBowtieLoop(const TArray<int>& LoopVerts, const TArray<int>& BowtieVerts, int BowtieVertex, int& start_i, int& end_i)"
  },
  {
    "label": "IsSimplePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimplePath(const TArray<int>& LoopVerts, const TArray<int>& BowtieVerts, int BowtieVertex, int i1, int i2)"
  },
  {
    "label": "ExtractSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractSpan(TArray<int>& Loop, int i0, int i1, bool bMarkInvalid, TArray<int>& OutSpan)"
  },
  {
    "label": "CountSpan()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CountSpan(const TArray<int>& Loop, int i0, int i1)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindIndex(const TArray<int>& Loop, int Start, int Item)"
  },
  {
    "label": "CountInList()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CountInList(const TArray<int>& Loop, int Item)"
  }
]