[
  {
    "label": "FMeshBoundaryLoops",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshBoundaryLoops"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Subloops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Subloops"
  },
  {
    "label": "FMeshRegionBoundaryLoops",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshRegionBoundaryLoops"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compute()"
  },
  {
    "label": "GetVertexNormal()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GetVertexNormal(int vid)"
  },
  {
    "label": "FindLeftTurnEdge()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindLeftTurnEdge(int incoming_e, int bowtie_v, TArray<int>& bdry_edges, int bdry_edges_count, TArray<bool>& used_edges)"
  },
  {
    "label": "ExtractSubloops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractSubloops(TArray<int>& loopV, TArray<int>& loopE, TArray<int>& bowties, Subloops& SubloopsOut)"
  },
  {
    "label": "IsSimpleBowtieLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimpleBowtieLoop(const TArray<int>& LoopVerts, const TArray<int>& BowtieVerts, int BowtieVertex, int& start_i, int& end_i)"
  },
  {
    "label": "IsSimplePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimplePath(const TArray<int>& LoopVerts, const TArray<int>& BowtieVerts, int BowtieVertex, int i1, int i2)"
  },
  {
    "label": "ExtractSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractSpan(TArray<int>& Loop, int i0, int i1, bool bMarkInvalid, TArray<int>& OutSpan)"
  },
  {
    "label": "CountSpan()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CountSpan(const TArray<int>& Loop, int i0, int i1)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindIndex(const TArray<int>& Loop, int Start, int Item)"
  },
  {
    "label": "CountInList()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CountInList(const TArray<int>& Loop, int Item)"
  }
]