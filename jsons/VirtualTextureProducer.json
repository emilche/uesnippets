[
  {
    "label": "FVirtualTextureSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureSystem"
  },
  {
    "label": "FVirtualTexturePhysicalSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTexturePhysicalSpace"
  },
  {
    "label": "FVirtualTextureProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureProducer"
  },
  {
    "label": "FVirtualTextureProducerCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureProducerCollection"
  },
  {
    "label": "FPhysicalGroupDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicalGroupDesc"
  },
  {
    "label": "FProducerEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProducerEntry"
  },
  {
    "label": "FCallbackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallbackEntry"
  },
  {
    "label": "ECallbackListType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECallbackListType"
  },
  {
    "label": "FVirtualTextureProducer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VirtualTextureShared . h \" # include \" RendererInterface . h \" # include \" VirtualTexturing . h \" # include \" VirtualTexturePhysicalSpace . h \" class FVirtualTextureSystem ; class FVirtualTexturePhysicalSpace ; class FVirtualTextureProducer { public :)",
    "insertText": "FVirtualTextureProducer() : VirtualTexture(nullptr)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(FVirtualTextureSystem* System, const FVirtualTextureProducerHandle& HandleToSelf)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (const FVTProducerDescription&)",
    "insertText": "GetDescription()"
  },
  {
    "label": "FVirtualTextureProducerCollection()",
    "kind": "Method",
    "detail": "Function (FVTProducerDescription Description ; struct FPhysicalGroupDesc { TRefCountPtr<FVirtualTexturePhysicalSpace> PhysicalSpace ; } ; TArray<FPhysicalGroupDesc> PhysicalGroups ; IVirtualTexture* VirtualTexture ; } ; class FVirtualTextureProducerCollection { public :)",
    "insertText": "FVirtualTextureProducerCollection()"
  },
  {
    "label": "RegisterProducer()",
    "kind": "Method",
    "detail": "Function (FVirtualTextureProducerHandle)",
    "insertText": "RegisterProducer(FRHICommandListBase& RHICmdList, FVirtualTextureSystem* System, const FVTProducerDescription& InDesc, IVirtualTexture* InProducer)"
  },
  {
    "label": "ReleaseProducer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseProducer(FVirtualTextureSystem* System, const FVirtualTextureProducerHandle& Handle)"
  },
  {
    "label": "TryReleaseProducer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReleaseProducer(FVirtualTextureSystem* System, const FVirtualTextureProducerHandle& Handle)"
  },
  {
    "label": "AddDestroyedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDestroyedCallback(const FVirtualTextureProducerHandle& Handle, FVTProducerDestroyedFunction* Function, void* Baton)"
  },
  {
    "label": "RemoveAllCallbacks()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemoveAllCallbacks(const void* Baton)"
  },
  {
    "label": "CallPendingCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallPendingCallbacks()"
  },
  {
    "label": "HasPendingCallbacks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingCallbacks()"
  },
  {
    "label": "NotifyRequestsCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRequestsCompleted()"
  },
  {
    "label": "FindProducer()",
    "kind": "Method",
    "detail": "Function (FVirtualTextureProducer*)",
    "insertText": "FindProducer(const FVirtualTextureProducerHandle& Handle)"
  },
  {
    "label": "GetProducer()",
    "kind": "Method",
    "detail": "Function (FVirtualTextureProducer&)",
    "insertText": "GetProducer(const FVirtualTextureProducerHandle& Handle)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FProducerEntry { FVirtualTextureProducer Producer ; uint32 DestroyedCallbacksIndex = 0 u ; uint32 NextIndex = 0 u ; uint32 PrevIndex = 0 u ; uint16 Magic = 0 u ; } ; struct FCallbackEntry { FVTProducerDestroyedFunction* DestroyedFunction = nullptr ; void* Baton = nullptr ; FVirtualTextureProducerHandle OwnerHandle ; uint32 NextIndex = 0 u ; uint32 PrevIndex = 0 u ; union { uint32 PackedFlags = 0 u ; struct { uint32 bPending : 1 ; uint32 Pad : 3 1 ; } ; } ; } ; enum ECallbackListType { CallbackList_Free,CallbackList_Pending,CallbackList_Count,} ; FProducerEntry*)",
    "insertText": "GetEntry(const FVirtualTextureProducerHandle& Handle)"
  },
  {
    "label": "RemoveEntryFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntryFromList(uint32 Index)"
  },
  {
    "label": "AddEntryToList()",
    "kind": "Method",
    "detail": "Function (FProducerEntry& Entry = Producers [ Index ] ; Producers [ Entry . PrevIndex ] . NextIndex = Entry . NextIndex ; Producers [ Entry . NextIndex ] . PrevIndex = Entry . PrevIndex ; Entry . NextIndex = Entry . PrevIndex = Index ; } void)",
    "insertText": "AddEntryToList(uint32 HeadIndex, uint32 Index)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FProducerEntry& Head = Producers [ HeadIndex ] ; FProducerEntry& Entry = Producers [ Index ] ;)",
    "insertText": "check(Index > 0u)"
  },
  {
    "label": "AcquireEntry()",
    "kind": "Method",
    "detail": "Function (Entry . NextIndex = HeadIndex ; Entry . PrevIndex = Head . PrevIndex ; Producers [ Head . PrevIndex ] . NextIndex = Index ; Head . PrevIndex = Index ; } uint32)",
    "insertText": "AcquireEntry()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FProducerEntry& FreeHead = Producers [ 0 u ] ; uint32 Index = FreeHead . NextIndex ;)",
    "insertText": "if(Index != 0u)"
  },
  {
    "label": "RemoveEntryFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntryFromList(Index)"
  },
  {
    "label": "ReleaseEntry()",
    "kind": "Method",
    "detail": "Function (FProducerEntry& Entry = Producers [ Index ] ; Entry . NextIndex = Entry . PrevIndex = Index ; return Index ; } void)",
    "insertText": "ReleaseEntry(uint32 Index)"
  },
  {
    "label": "AddEntryToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntryToList(0u, Index)"
  },
  {
    "label": "RemoveCallbackFromList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCallbackFromList(uint32 Index)"
  },
  {
    "label": "AddCallbackToList()",
    "kind": "Method",
    "detail": "Function (FCallbackEntry& Entry = Callbacks [ Index ] ; Callbacks [ Entry . PrevIndex ] . NextIndex = Entry . NextIndex ; Callbacks [ Entry . NextIndex ] . PrevIndex = Entry . PrevIndex ; Entry . NextIndex = Entry . PrevIndex = Index ; } void)",
    "insertText": "AddCallbackToList(uint32 HeadIndex, uint32 Index)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FCallbackEntry& Head = Callbacks [ HeadIndex ] ; FCallbackEntry& Entry = Callbacks [ Index ] ;)",
    "insertText": "check(Index >= CallbackList_Count)"
  },
  {
    "label": "AcquireCallback()",
    "kind": "Method",
    "detail": "Function (Entry . NextIndex = HeadIndex ; Entry . PrevIndex = Head . PrevIndex ; Callbacks [ Head . PrevIndex ] . NextIndex = Index ; Head . PrevIndex = Index ; } uint32)",
    "insertText": "AcquireCallback()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCallbackEntry& FreeHead = Callbacks [ CallbackList_Free ] ; uint32 Index = FreeHead . NextIndex ;)",
    "insertText": "if(Index != CallbackList_Free)"
  },
  {
    "label": "RemoveCallbackFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCallbackFromList(Index)"
  },
  {
    "label": "ReleaseCallback()",
    "kind": "Method",
    "detail": "Function (FCallbackEntry& Entry = Callbacks [ Index ] ; Entry . NextIndex = Entry . PrevIndex = Index ; return Index ; } void)",
    "insertText": "ReleaseCallback(uint32 Index)"
  },
  {
    "label": "AddCallbackToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCallbackToList(CallbackList_Free, Index)"
  }
]