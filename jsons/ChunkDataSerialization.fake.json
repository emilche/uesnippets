[
  {
    "label": "FFakeChunkDataSerialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeChunkDataSerialization"
  },
  {
    "label": "LoadFromMemory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tests / Mock / ChunkDataSerialization . mock . h \" # include \" Tests / Fake / ChunkDataAccess . fake . h \" # include \" Serialization / MemoryReader . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FFakeChunkDataSerialization : public FMockChunkDataSerialization { public : IChunkDataAccess*)",
    "insertText": "LoadFromMemory(const TArray<uint8>& Memory, EChunkLoadResult& OutLoadResult)"
  },
  {
    "label": "FFakeChunkDataAccess()",
    "kind": "Method",
    "detail": "Function (} FFakeChunkDataAccess* ChunkDataAccess = new)",
    "insertText": "FFakeChunkDataAccess()"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (FMemoryReader)",
    "insertText": "Ar(Memory)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (Ar<<ChunkDataAccess -> ChunkHeader ; Ar .)",
    "insertText": "Close()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutLoadResult = EChunkLoadResult::Success ; RxLoadFromMemory .)",
    "insertText": "Emplace(Memory, OutLoadResult)"
  }
]