[
  {
    "label": "Private",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Private"
  },
  {
    "label": "Format",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Format"
  },
  {
    "label": "Quality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Quality"
  },
  {
    "label": "CompressionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompressionOptions"
  },
  {
    "label": "WrapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WrapMode"
  },
  {
    "label": "TextureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureType"
  },
  {
    "label": "InputFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InputFormat"
  },
  {
    "label": "MipmapFilter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MipmapFilter"
  },
  {
    "label": "ColorTransform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ColorTransform"
  },
  {
    "label": "RoundMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RoundMode"
  },
  {
    "label": "AlphaMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AlphaMode"
  },
  {
    "label": "InputOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InputOptions"
  },
  {
    "label": "OutputHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OutputHandler"
  },
  {
    "label": "Error",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Error"
  },
  {
    "label": "ErrorHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ErrorHandler"
  },
  {
    "label": "OutputOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OutputOptions"
  },
  {
    "label": "Compressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Compressor"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_TT_H # define NV_TT_H # if NVTT_SHARED # if defined _WIN32 | | defined WIN32 | | defined __NT__ | | defined __WIN32__ | | defined __MINGW32__ # ifdef NVTT_EXPORTS # define)",
    "insertText": "__declspec(dllexport) # else # define NVTT_API __declspec(dllimport) # endif #endif #if defined __GNUC__ >= 4 # ifdef NVTT_EXPORTS # define NVTT_API __attribute__((visibility(\"default\"))) # endif #endif #endif #if !defined NVTT_API # define NVTT_API #endif #define NVTT_VERSION 200 #define NVTT_DECLARE_PIMPL(Class) \\ private: \\ Class(const Class &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "operator(const Class &)"
  },
  {
    "label": "NVTT_DECLARE_PIMPL()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ struct Private ; \\ Private& m namespace nvtt { enum Format { Format_RGB,Format_RGBA = Format_RGB,Format_DXT1,Format_DXT1a,Format_DXT3,Format_DXT5,Format_DXT5n,Format_BC1 = Format_DXT1,Format_BC1a = Format_DXT1a,Format_BC2 = Format_DXT3,Format_BC3 = Format_DXT5,Format_BC3n = Format_DXT5n,Format_BC4,Format_BC5,} ; enum Quality { Quality_Fastest,Quality_Normal,Quality_Production,Quality_Highest,} ; struct CompressionOptions {)",
    "insertText": "NVTT_DECLARE_PIMPL(CompressionOptions)"
  },
  {
    "label": "CompressionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressionOptions()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "setFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormat(Format format)"
  },
  {
    "label": "setQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setQuality(Quality quality)"
  },
  {
    "label": "setColorWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setColorWeights(float red, float green, float blue, float alpha = 1.0f)"
  },
  {
    "label": "setExternalCompressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setExternalCompressor(const char * name)"
  },
  {
    "label": "setPixelFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixelFormat(unsigned int bitcount, unsigned int rmask, unsigned int gmask, unsigned int bmask, unsigned int amask)"
  },
  {
    "label": "setQuantization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setQuantization(bool colorDithering, bool alphaDithering, bool binaryAlpha, int alphaThreshold = 127)"
  },
  {
    "label": "NVTT_DECLARE_PIMPL()",
    "kind": "Method",
    "detail": "Function (} ; enum WrapMode { WrapMode_Clamp,WrapMode_Repeat,WrapMode_Mirror,} ; enum TextureType { TextureType_2D,TextureType_Cube,} ; enum InputFormat { InputFormat_BGRA_8UB,} ; enum MipmapFilter { MipmapFilter_Box,MipmapFilter_Triangle,MipmapFilter_Kaiser,} ; enum ColorTransform { ColorTransform_None,ColorTransform_Linear,} ; enum RoundMode { RoundMode_None,RoundMode_ToNextPowerOfTwo,RoundMode_ToNearestPowerOfTwo,RoundMode_ToPreviousPowerOfTwo,} ; enum AlphaMode { AlphaMode_None,AlphaMode_Transparency,AlphaMode_Premultiplied,} ; struct InputOptions {)",
    "insertText": "NVTT_DECLARE_PIMPL(InputOptions)"
  },
  {
    "label": "InputOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputOptions()"
  },
  {
    "label": "setTextureLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTextureLayout(TextureType type, int w, int h, int d = 1)"
  },
  {
    "label": "resetTextureLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetTextureLayout()"
  },
  {
    "label": "setMipmapData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setMipmapData(const void * data, int w, int h, int d = 1, int face = 0, int mipmap = 0)"
  },
  {
    "label": "setFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFormat(InputFormat format)"
  },
  {
    "label": "setAlphaMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAlphaMode(AlphaMode alphaMode)"
  },
  {
    "label": "setGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGamma(float inputGamma, float outputGamma)"
  },
  {
    "label": "setWrapMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setWrapMode(WrapMode mode)"
  },
  {
    "label": "setMipmapFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMipmapFilter(MipmapFilter filter)"
  },
  {
    "label": "setMipmapGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMipmapGeneration(bool enabled, int maxLevel = -1)"
  },
  {
    "label": "setKaiserParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setKaiserParameters(float width, float alpha, float stretch)"
  },
  {
    "label": "setNormalMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNormalMap(bool b)"
  },
  {
    "label": "setConvertToNormalMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConvertToNormalMap(bool convert)"
  },
  {
    "label": "setHeightEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setHeightEvaluation(float redScale, float greenScale, float blueScale, float alphaScale)"
  },
  {
    "label": "setNormalFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNormalFilter(float sm, float medium, float big, float large)"
  },
  {
    "label": "setNormalizeMipmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNormalizeMipmaps(bool b)"
  },
  {
    "label": "setColorTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setColorTransform(ColorTransform t)"
  },
  {
    "label": "setLinearTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLinearTransform(int channel, float w0, float w1, float w2, float w3)"
  },
  {
    "label": "setMaxExtents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMaxExtents(int d)"
  },
  {
    "label": "setRoundMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRoundMode(RoundMode mode)"
  },
  {
    "label": "OutputHandler()",
    "kind": "Method",
    "detail": "Function (} ; struct OutputHandler { ~)",
    "insertText": "OutputHandler()"
  },
  {
    "label": "beginImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "beginImage(int size, int width, int height, int depth, int face, int miplevel)"
  },
  {
    "label": "writeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "writeData(const void * data, int size)"
  },
  {
    "label": "ErrorHandler()",
    "kind": "Method",
    "detail": "Function (} ; enum Error { Error_Unknown,Error_InvalidInput,Error_UnsupportedFeature,Error_CudaError,Error_FileOpen,Error_FileWrite,} ; struct ErrorHandler { ~)",
    "insertText": "ErrorHandler()"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "error(Error e)"
  },
  {
    "label": "NVTT_DECLARE_PIMPL()",
    "kind": "Method",
    "detail": "Function (} ; struct OutputOptions {)",
    "insertText": "NVTT_DECLARE_PIMPL(OutputOptions)"
  },
  {
    "label": "OutputOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputOptions()"
  },
  {
    "label": "setFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFileName(const char * fileName)"
  },
  {
    "label": "setOutputHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOutputHandler(OutputHandler * outputHandler)"
  },
  {
    "label": "setErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setErrorHandler(ErrorHandler * errorHandler)"
  },
  {
    "label": "setOutputHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOutputHeader(bool outputHeader)"
  },
  {
    "label": "NVTT_DECLARE_PIMPL()",
    "kind": "Method",
    "detail": "Function (} ; struct Compressor {)",
    "insertText": "NVTT_DECLARE_PIMPL(Compressor)"
  },
  {
    "label": "Compressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compressor()"
  },
  {
    "label": "enableCudaAcceleration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableCudaAcceleration(bool enable)"
  },
  {
    "label": "isCudaAccelerationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCudaAccelerationEnabled()"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "process(const InputOptions & inputOptions, const CompressionOptions & compressionOptions, const OutputOptions & outputOptions)"
  },
  {
    "label": "estimateSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "estimateSize(const InputOptions & inputOptions, const CompressionOptions & compressionOptions)"
  },
  {
    "label": "errorString()",
    "kind": "Method",
    "detail": "Function (} ; const char*)",
    "insertText": "errorString(Error e)"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "version()"
  }
]