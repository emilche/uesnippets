[
  {
    "label": "FChaosVDSerializableNameTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDSerializableNameTable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChaosVDStepData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDStepData"
  },
  {
    "label": "FChaosVDTrackedLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDTrackedLocation"
  },
  {
    "label": "FChaosVDTrackedTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDTrackedTransform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOSVDDATA_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVDDATA_API"
  },
  {
    "label": "FChaosVDGameFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDGameFrameData"
  },
  {
    "label": "CHAOSVDDATA_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVDDATA_API"
  },
  {
    "label": "FChaosVDTraceProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDTraceProvider"
  },
  {
    "label": "FChaosVDTraceImplicitObjectProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDTraceImplicitObjectProcessor"
  },
  {
    "label": "GetSolverFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSolverFName(int32 SolverID)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "GetSolverFName_AssumedLocked()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSolverFName_AssumedLocked(int32 SolverID)"
  },
  {
    "label": "IsServerSolver_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServerSolver_AssumesLocked(int32 SolverID)"
  },
  {
    "label": "IsServerSolver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServerSolver(int32 SolverID)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "GetLowestSolverFrameNumberAtCycle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberAtCycle(int32 SolverID, uint64 Cycle)"
  },
  {
    "label": "GetLowestSolverFrameNumberAtCycle_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberAtCycle_AssumesLocked(int32 SolverID, uint64 Cycle)"
  },
  {
    "label": "GetLowestSolverFrameNumberAtNetworkFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberAtNetworkFrameNumber_AssumesLocked(int32 SolverID, int32 NetworkFrameNumber)"
  },
  {
    "label": "FindFirstSolverKeyFrameNumberFromFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindFirstSolverKeyFrameNumberFromFrame_AssumesLocked(int32 SolverID, int32 StartFrameNumber)"
  },
  {
    "label": "GetLowestSolverFrameNumberGameFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberGameFrame(int32 SolverID, int32 GameFrame)"
  },
  {
    "label": "GetLowestSolverFrameNumberGameFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberGameFrame_AssumesLocked(int32 SolverID, int32 GameFrame)"
  },
  {
    "label": "GetLowestGameFrameAtSolverFrameNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameAtSolverFrameNumber(int32 SolverID, int32 SolverFrame)"
  },
  {
    "label": "GetLowestGameFrameAtSolverFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameAtSolverFrameNumber_AssumesLocked(int32 SolverID, int32 SolverFrame)"
  },
  {
    "label": "AddFrameForSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFrameForSolver(const int32 SolverID, FChaosVDSolverFrameData&& InFrameData)"
  },
  {
    "label": "AddGameFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameFrameData(const FChaosVDGameFrameData& InFrameData)"
  },
  {
    "label": "GetLowestGameFrameNumberAtCycle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameNumberAtCycle(uint64 Cycle)"
  },
  {
    "label": "GetLowestGameFrameNumberAtTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameNumberAtTime(double Time)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrameNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableSolverIDsAtGameFrameNumber(int32 FrameNumber,TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableSolverIDsAtGameFrameNumber_AssumesLocked(int32 FrameNumber, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableSolverIDsAtGameFrame(const FChaosVDGameFrameData& GameFrameData, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableSolverIDsAtGameFrame_AssumesLocked(const FChaosVDGameFrameData& GameFrameData, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "CollapseSolverFramesRange_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseSolverFramesRange_AssumesLocked(int32 SolverID, int32 StartFrame, int32 EndFrame, FChaosVDSolverFrameData& OutCollapsedFrameData)"
  },
  {
    "label": "AddImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImplicitObject(const uint32 ID, const Chaos::FImplicitObjectPtr& InImplicitObject)"
  },
  {
    "label": "AddImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImplicitObject(const uint32 ID, const TSharedPtr<Chaos::FImplicitObject>& InImplicitObject)"
  },
  {
    "label": "SetCollisionChannelsInfoContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionChannelsInfoContainer(const TSharedPtr<FChaosVDCollisionChannelsInfoContainer>& InCollisionChannelsInfo)"
  },
  {
    "label": "AddImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImplicitObject(const uint32 ID, const Chaos::FImplicitObject* InImplicitObject)"
  },
  {
    "label": "AddImplicitObject_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImplicitObject_Internal(const uint32 ID, const Chaos::FConstImplicitObjectPtr& InImplicitObject)"
  },
  {
    "label": "AddKeyFrameNumberForSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyFrameNumberForSolver(int32 SolverID, int32 FrameNumber)"
  },
  {
    "label": "AddKeyFrameNumberForSolver_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyFrameNumberForSolver_AssumesLocked(int32 SolverID, int32 FrameNumber)"
  },
  {
    "label": "GenerateAndStoreKeyframeForSolver_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAndStoreKeyframeForSolver_AssumesLocked(int32 SolverID, int32 CurrentFrameNumber, int32 LastKeyFrameNumber)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ReadLock(RecordingDataLock)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAvailableSolverIDsAtGameFrameNumber_AssumesLocked(FrameNumber, OutSolversID)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ReadLock(RecordingDataLock)"
  }
]