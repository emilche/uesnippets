[
  {
    "label": "FChaosVDSerializableNameTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDSerializableNameTable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChaosVDStepData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDStepData"
  },
  {
    "label": "FChaosVDTrackedLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDTrackedLocation"
  },
  {
    "label": "FChaosVDTrackedTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDTrackedTransform"
  },
  {
    "label": "CHAOSVDDATA_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVDDATA_API"
  },
  {
    "label": "FChaosVDGameFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDGameFrameData"
  },
  {
    "label": "FChaosVDTraceProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDTraceProvider"
  },
  {
    "label": "FChaosVDTraceImplicitObjectProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDTraceImplicitObjectProcessor"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Containers / UnrealString . h \" # include \" DataWrappers / ChaosVDCollisionDataWrappers . h \" # include \" DataWrappers / ChaosVDParticleDataWrapper . h \" # include \" UObject / ObjectMacros . h \" # include \" Containers / UnrealString . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ImplicitObject . h \" # include \" ChaosVisualDebugger / ChaosVDMemWriterReader . h \" # include \" DataWrappers / ChaosVDCharacterGroundConstraintDataWrappers . h \" # include \" DataWrappers / ChaosVDJointDataWrappers . h \" # include \" DataWrappers / ChaosVDQueryDataWrappers . h \" # include<atomic> # include \" DataWrappers / ChaosVDAccelerationStructureDataWrappers . h \" # include \" DataWrappers / ChaosVDDebugShapeDataWrapper . h \" namespace Chaos::VisualDebugger { class FChaosVDSerializableNameTable ; })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FChaosVDGeometryDataLoaded, const Chaos::FConstImplicitObjectPtr&, const uint32 GeometryID)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,Open = 1<<0,ExplicitStage = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChaosVDSolverStageFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (FString StepName ; TArray<TSharedPtr<FChaosVDParticleDataWrapper>> RecordedParticlesData ; TArray<TSharedPtr<FChaosVDParticlePairMidPhase>> RecordedMidPhases ; TArray<TSharedPtr<FChaosVDJointConstraint>> RecordedJointConstraints ; TArray<FChaosVDConstraint> RecordedConstraints ; TMap<int32,TArray<FChaosVDConstraint>> RecordedConstraintsByParticleID ; TMap<int32,TArray<TSharedPtr<FChaosVDParticlePairMidPhase>>> RecordedMidPhasesByParticleID ; TSet<int32> ParticlesDestroyedIDs ; EChaosVDSolverStageFlags StageFlags = EChaosVDSolverStageFlags::None ; } ; struct FChaosVDTrackedLocation { FString DebugName ; FVector Location ; } ; struct FChaosVDTrackedTransform { FString DebugName ; FTransform Transform ; } ; enum class EChaosVDNetworkSyncDataRequirements { None = 0,InternalFrameNumber = 1<<0,NetworkTickOffset = 1<<1,All = InternalFrameNumber | NetworkTickOffset } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChaosVDNetworkSyncDataRequirements)"
  },
  {
    "label": "FChaosVDSolverFrameData()",
    "kind": "Method",
    "detail": "Function (struct FChaosVDSolverFrameData { PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FChaosVDSolverFrameData()"
  },
  {
    "label": "FChaosVDSolverFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosVDSolverFrameData(const FChaosVDSolverFrameData& Other)"
  },
  {
    "label": "FChaosVDSolverFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosVDSolverFrameData(FChaosVDSolverFrameData&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChaosVDSolverFrameData&)",
    "insertText": "operator(const FChaosVDSolverFrameData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChaosVDSolverFrameData&)",
    "insertText": "operator(FChaosVDSolverFrameData&& Other)"
  },
  {
    "label": "GetFrameTime()",
    "kind": "Method",
    "detail": "Function (int32 SolverID = INDEX_NONE ; int32 InternalFrameNumber = INDEX_NONE ; int32 NetworkTickOffset = INDEX_NONE ; uint64 FrameCycle = 0 ; Chaos::FRigidTransform3 SimulationTransform ; bool bIsKeyFrame = false ; bool bIsResimulated = false ; FChaosVDStepsContainer SolverSteps ; TSet<int32> ParticlesDestroyedIDs ; double StartTime = - 1 . 0 ; double EndTime = - 1 . 0 ; TArray<TSharedPtr<FChaosVDCharacterGroundConstraint>> RecordedCharacterGroundConstraints ; double)",
    "insertText": "GetFrameTime()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bHasRequiredSyncData = true ;)",
    "insertText": "if(EnumHasAnyFlags(Requirements, EChaosVDNetworkSyncDataRequirements::InternalFrameNumber))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasRequiredSyncData& = InternalFrameNumber ! = INDEX_NONE ; })",
    "insertText": "if(EnumHasAnyFlags(Requirements, EChaosVDNetworkSyncDataRequirements::NetworkTickOffset))"
  },
  {
    "label": "GetClampedNetworkTickOffset()",
    "kind": "Method",
    "detail": "Function (bHasRequiredSyncData& = NetworkTickOffset ! = INDEX_NONE ; } return bHasRequiredSyncData ; } int32)",
    "insertText": "GetClampedNetworkTickOffset()"
  },
  {
    "label": "FChaosVDGameFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosVDGameFrameData(const FChaosVDGameFrameData& Other)"
  },
  {
    "label": "FChaosVDGameFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosVDGameFrameData(FChaosVDGameFrameData&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChaosVDGameFrameData&)",
    "insertText": "operator(const FChaosVDGameFrameData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FChaosVDGameFrameData&)",
    "insertText": "operator(FChaosVDGameFrameData&& Other)"
  },
  {
    "label": "FChaosVDRecording()",
    "kind": "Method",
    "detail": "Function (TMap<int32,TSharedPtr<FChaosVDQueryDataWrapper>> RecordedSceneQueriesByQueryID ; TMap<int32,TArray<TSharedPtr<FChaosVDAABBTreeDataWrapper>>> RecordedAABBTreesBySolverID ; TMap<int32,TArray<TSharedPtr<FChaosVDDebugDrawBoxDataWrapper>>> RecordedDebugDrawBoxesBySolverID ; TMap<int32,TArray<TSharedPtr<FChaosVDDebugDrawLineDataWrapper>>> RecordedDebugDrawLinesBySolverID ; TMap<int32,TArray<TSharedPtr<FChaosVDDebugDrawSphereDataWrapper>>> RecordedDebugDrawSpheresBySolverID ; TMap<int32,TArray<TSharedPtr<FChaosVDDebugDrawImplicitObjectDataWrapper>>> RecordedDebugDrawImplicitObjectsBySolverID ; private : bool bIsDirty = false ; } ; struct FChaosVDRecording {)",
    "insertText": "FChaosVDRecording()"
  },
  {
    "label": "GetAvailableSolversNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32 CommonTrackCount = 1 6 ; int32)",
    "insertText": "GetAvailableSolversNumber_AssumesLocked()"
  },
  {
    "label": "GetAvailableGameFramesNumber()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAvailableGameFramesNumber()"
  },
  {
    "label": "GetAvailableGameFramesNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAvailableGameFramesNumber_AssumesLocked()"
  },
  {
    "label": "GetAvailableGameFrames_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (const TArray<FChaosVDGameFrameData>&)",
    "insertText": "GetAvailableGameFrames_AssumesLocked()"
  },
  {
    "label": "GetAvailableSolverFramesNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAvailableSolverFramesNumber_AssumesLocked(int32 SolverID)"
  },
  {
    "label": "GetSolverFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSolverFName(int32 SolverID)"
  },
  {
    "label": "GetSolverFName_AssumedLocked()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetSolverFName_AssumedLocked(int32 SolverID)"
  },
  {
    "label": "IsServerSolver_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServerSolver_AssumesLocked(int32 SolverID)"
  },
  {
    "label": "IsServerSolver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServerSolver(int32 SolverID)"
  },
  {
    "label": "GetSolverFrameData_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (} FChaosVDSolverFrameData*)",
    "insertText": "GetSolverFrameData_AssumesLocked(int32 SolverID, int32 FrameNumber, bool bKeyFrameOnly = false)"
  },
  {
    "label": "GetSolverFrameDataAtCycle_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FChaosVDSolverFrameData*)",
    "insertText": "GetSolverFrameDataAtCycle_AssumesLocked(int32 SolverID, uint64 Cycle)"
  },
  {
    "label": "GetLowestSolverFrameNumberAtCycle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberAtCycle(int32 SolverID, uint64 Cycle)"
  },
  {
    "label": "GetLowestSolverFrameNumberAtCycle_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberAtCycle_AssumesLocked(int32 SolverID, uint64 Cycle)"
  },
  {
    "label": "GetLowestSolverFrameNumberAtNetworkFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberAtNetworkFrameNumber_AssumesLocked(int32 SolverID, int32 NetworkFrameNumber)"
  },
  {
    "label": "FindFirstSolverKeyFrameNumberFromFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindFirstSolverKeyFrameNumberFromFrame_AssumesLocked(int32 SolverID, int32 StartFrameNumber)"
  },
  {
    "label": "GetLowestSolverFrameNumberGameFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberGameFrame(int32 SolverID, int32 GameFrame)"
  },
  {
    "label": "GetLowestSolverFrameNumberGameFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestSolverFrameNumberGameFrame_AssumesLocked(int32 SolverID, int32 GameFrame)"
  },
  {
    "label": "GetLowestGameFrameAtSolverFrameNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameAtSolverFrameNumber(int32 SolverID, int32 SolverFrame)"
  },
  {
    "label": "GetLowestGameFrameAtSolverFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameAtSolverFrameNumber_AssumesLocked(int32 SolverID, int32 SolverFrame)"
  },
  {
    "label": "AddFrameForSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFrameForSolver(const int32 SolverID, FChaosVDSolverFrameData&& InFrameData)"
  },
  {
    "label": "AddGameFrameData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameFrameData(const FChaosVDGameFrameData& InFrameData)"
  },
  {
    "label": "OnGeometryDataLoaded()",
    "kind": "Method",
    "detail": "Function (FChaosVDGeometryDataLoaded&)",
    "insertText": "OnGeometryDataLoaded()"
  },
  {
    "label": "GetGameFrameData_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FChaosVDGameFrameData*)",
    "insertText": "GetGameFrameData_AssumesLocked(int32 FrameNumber)"
  },
  {
    "label": "GetLastGameFrameData_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (FChaosVDGameFrameData*)",
    "insertText": "GetLastGameFrameData_AssumesLocked()"
  },
  {
    "label": "GetLowestGameFrameNumberAtCycle()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameNumberAtCycle(uint64 Cycle)"
  },
  {
    "label": "GetLowestGameFrameNumberAtTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLowestGameFrameNumberAtTime(double Time)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrameNumber()",
    "kind": "Method",
    "detail": "Function (template<TAllocator> void)",
    "insertText": "GetAvailableSolverIDsAtGameFrameNumber(int32 FrameNumber,TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrameNumber_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (template<TAllocator> void)",
    "insertText": "GetAvailableSolverIDsAtGameFrameNumber_AssumesLocked(int32 FrameNumber, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrame()",
    "kind": "Method",
    "detail": "Function (template<TAllocator> void)",
    "insertText": "GetAvailableSolverIDsAtGameFrame(const FChaosVDGameFrameData& GameFrameData, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (template<TAllocator> void)",
    "insertText": "GetAvailableSolverIDsAtGameFrame_AssumesLocked(const FChaosVDGameFrameData& GameFrameData, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "CollapseSolverFramesRange_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseSolverFramesRange_AssumesLocked(int32 SolverID, int32 StartFrame, int32 EndFrame, FChaosVDSolverFrameData& OutCollapsedFrameData)"
  },
  {
    "label": "GetGeometryMap()",
    "kind": "Method",
    "detail": "Function (const TMap<uint32,Chaos::FConstImplicitObjectPtr>&)",
    "insertText": "GetGeometryMap()"
  },
  {
    "label": "AddImplicitObject()",
    "kind": "Method",
    "detail": "Function (TMap<uint32,TSharedPtr<const Chaos::FImplicitObject>> DummyMap ; return DummyMap ; } ; void)",
    "insertText": "AddImplicitObject(const uint32 ID, const Chaos::FImplicitObjectPtr& InImplicitObject)"
  },
  {
    "label": "GetRecordingDataLock()",
    "kind": "Method",
    "detail": "Function (FString SessionName ; FRWLock&)",
    "insertText": "GetRecordingDataLock()"
  },
  {
    "label": "GetNameTableInstance()",
    "kind": "Method",
    "detail": "Function (bIsLive = bNewIsLive ; } TSharedPtr<Chaos::VisualDebugger::FChaosVDSerializableNameTable>)",
    "insertText": "GetNameTableInstance()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (HeaderData = InNewHeader ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetLastUpdatedTimeAsCycle()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetLastUpdatedTimeAsCycle()"
  },
  {
    "label": "AddImplicitObject()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddImplicitObject(const uint32 ID, const Chaos::FImplicitObject* InImplicitObject)"
  },
  {
    "label": "AddImplicitObject_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImplicitObject_Internal(const uint32 ID, const Chaos::FConstImplicitObjectPtr& InImplicitObject)"
  },
  {
    "label": "AddKeyFrameNumberForSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyFrameNumberForSolver(int32 SolverID, int32 FrameNumber)"
  },
  {
    "label": "AddKeyFrameNumberForSolver_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeyFrameNumberForSolver_AssumesLocked(int32 SolverID, int32 FrameNumber)"
  },
  {
    "label": "GenerateAndStoreKeyframeForSolver_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAndStoreKeyframeForSolver_AssumesLocked(int32 SolverID, int32 CurrentFrameNumber, int32 LastKeyFrameNumber)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrameNumber()",
    "kind": "Method",
    "detail": "Function (TMap<int32,TArray<FChaosVDSolverFrameData>> RecordedFramesDataPerSolver ; TMap<int32,TMap<int32,FChaosVDSolverFrameData>> GeneratedKeyFrameDataPerSolver ; TMap<int32,TArray<int32>> RecordedKeyFramesNumberPerSolver ; TArray<FChaosVDGameFrameData> GameFrames ; FChaosVDGeometryDataLoaded GeometryDataLoaded ; TMap<uint32,Chaos::FConstImplicitObjectPtr> ImplicitObjects ; TSharedPtr<Chaos::VisualDebugger::FChaosVDSerializableNameTable> NameTable ; FRWLock RecordingDataLock ; bool bIsLive = false ; std::atomic<uint64> LastUpdatedTimeAsCycle ; TMap<int32,TSharedPtr<FChaosVDParticleDataWrapper>> ParticlesOnCurrentGeneratedKeyframe ; Chaos::VisualDebugger::FChaosVDArchiveHeader HeaderData ; TSharedPtr<FChaosVDCollisionChannelsInfoContainer> CollisionChannelsInfoContainer ; class FChaosVDTraceProvider ; class FChaosVDTraceImplicitObjectProcessor ; } ; template<TAllocator> void)",
    "insertText": "GetAvailableSolverIDsAtGameFrameNumber(int32 FrameNumber, TArray<int32, TAllocator>& OutSolversID)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (FReadScopeLock)",
    "insertText": "ReadLock(RecordingDataLock)"
  },
  {
    "label": "GetAvailableSolverIDsAtGameFrame_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAvailableSolverIDsAtGameFrame_AssumesLocked(GameFrameData, OutSolversID)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutSolversID .)",
    "insertText": "Reserve(RecordedFramesDataPerSolver.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(SolverFramesWithIDPair.Value.Num() == 1 && SolverFramesWithIDPair.Value[0].FrameCycle < GameFrameData.FirstCycle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutSolversID .)",
    "insertText": "Add(SolverFramesWithIDPair.Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(GameFrameData.FirstCycle > SolverFramesWithIDPair.Value[0].FrameCycle && GameFrameData.FirstCycle < SolverFramesWithIDPair.Value.Last().FrameCycle)"
  }
]