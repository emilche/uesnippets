[
  {
    "label": "ObjCNetworkMonitorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjCNetworkMonitorFactory"
  },
  {
    "label": "ObjCNetworkMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjCNetworkMonitor"
  },
  {
    "label": "ObjCNetworkMonitorFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef SDK_OBJC_NATIVE_SRC_OBJC_NETWORK_MONITOR_H_ # define SDK_OBJC_NATIVE_SRC_OBJC_NETWORK_MONITOR_H_ # include<vector> # include \" absl / strings / string_view . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" rtc_base / network_monitor . h \" # include \" rtc_base / network_monitor_factory . h \" # include \" rtc_base / string_utils . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" sdk / objc / components / network / RTCNetworkMonitor + Private . h \" # include \" sdk / objc / native / src / network_monitor_observer . h \" namespace webrtc { class ObjCNetworkMonitorFactory : public rtc::NetworkMonitorFactory { public :)",
    "insertText": "ObjCNetworkMonitorFactory()"
  },
  {
    "label": "CreateNetworkMonitor()",
    "kind": "Method",
    "detail": "Function (rtc::NetworkMonitorInterface*)",
    "insertText": "CreateNetworkMonitor(const FieldTrialsView& field_trials)"
  },
  {
    "label": "ObjCNetworkMonitor()",
    "kind": "Method",
    "detail": "Function (} ; class ObjCNetworkMonitor : public rtc::NetworkMonitorInterface,public NetworkMonitorObserver { public :)",
    "insertText": "ObjCNetworkMonitor()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (InterfaceInfo)",
    "insertText": "GetInterfaceInfo(absl::string_view interface_name)"
  },
  {
    "label": "OnPathUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathUpdate(std::map<std::string, rtc::AdapterType, rtc::AbslStringViewCmp> adapter_type_by_name)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : rtc::Thread* thread_ = nullptr ; bool started_ = false ; std::map<std::string,rtc::AdapterType,rtc::AbslStringViewCmp> adapter_type_by_name_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  }
]