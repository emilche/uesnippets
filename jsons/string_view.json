[
  {
    "label": "string_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "string_view"
  },
  {
    "label": "SkipCheckLengthTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkipCheckLengthTag"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_STRING_VIEW_H_ # define ABSL_STRINGS_STRING_VIEW_H_ # include<algorithm> # include<cassert> # include<cstddef> # include<cstring> # include<iosfwd> # include<iterator> # include<limits> # include<string> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / internal / throw_delegate . h \" # include \" absl / base / macros . h \" # include \" absl / base / optimization . h \" # include \" absl / base / port . h \" # ifdef ABSL_USES_STD_STRING_VIEW # include<string_view> namespace absl { ABSL_NAMESPACE_BEGIN using string_view = std::string_view ; ABSL_NAMESPACE_END } # else # if)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_memcmp) || \\ (defined(__GNUC__) && !defined(__clang__)) || \\ (defined(_MSC_VER) && _MSC_VER >= 1928)"
  },
  {
    "label": "size_type()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN class string_view { public : using traits_type = std::char_traits<char> ; using value_type = char ; using pointer = char* ; using const_pointer = const char* ; using reference = char& ; using const_reference = const char& ; using const_iterator = const char* ; using iterator = const_iterator ; using const_reverse_iterator = std::reverse_iterator<const_iterator> ; using reverse_iterator = const_reverse_iterator ; using size_type = size_t ; using difference_type = std::ptrdiff_t ; size_type npos = static_cast<)",
    "insertText": "size_type(-1)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "string_view() noexcept : ptr_(nullptr), length_(0)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (} template<Allocator>)",
    "insertText": "string_view(const std::basic_string<char, std::char_traits<char>, Allocator>& str ABSL_ATTRIBUTE_LIFETIME_BOUND) noexcept : string_view(str.data(), str.size(), SkipCheckLengthTag{})"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "string_view(const char* str) : ptr_(str), length_(str ? StrlenInternal(str) : 0)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "string_view(const char* data, size_type len) : ptr_(data), length_(CheckLengthInternal(len))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "at(size_type i)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "back()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const_pointer)",
    "insertText": "data()"
  },
  {
    "label": "ABSL_HARDENING_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_HARDENING_ASSERT(n <= length_)"
  },
  {
    "label": "remove_suffix()",
    "kind": "Method",
    "detail": "Function (ptr_ + = n ; length_ - = n ; } void)",
    "insertText": "remove_suffix(size_type n)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (length_ - = n ; } void)",
    "insertText": "swap(string_view& s)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (auto t =* this ;* this = s ; s = t ; } template<A> operator std::basic_string<char,traits_type,)",
    "insertText": "A()"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} ; return std::basic_string<char,traits_type,)",
    "insertText": "A(data(), size())"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "copy(char* buf, size_type n, size_type pos = 0)"
  },
  {
    "label": "ThrowStdOutOfRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrowStdOutOfRange(\"absl::string_view::copy\")"
  },
  {
    "label": "rlen()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "rlen(std::min)(length_ - pos, n)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (const char* start = ptr_ + pos ;)",
    "insertText": "copy(buf, start, rlen)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (} return rlen ; } string_view)",
    "insertText": "substr(size_type pos = 0, size_type n = npos)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(string_view x)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, string_view v)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, string_view v, size_type pos2, size_type count2)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(const char* s)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, const char* s)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, const char* s, size_type count2)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find(string_view s, size_type pos = 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find(char c, size_type pos = 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find(const char* s, size_type pos, size_type count)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find(const char* s, size_type pos = 0)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "rfind(string_view s, size_type pos = npos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "rfind(char c, size_type pos = npos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "rfind(const char* s, size_type pos, size_type count)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "rfind(const char* s, size_type pos = npos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(string_view s, size_type pos = 0)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find_first_of(char c, size_type pos = 0)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(const char* s, size_type pos, size_type count)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(const char* s, size_type pos = 0)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(string_view s, size_type pos = npos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find_last_of(char c, size_type pos = npos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(const char* s, size_type pos, size_type count)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(const char* s, size_type pos = npos)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_not_of(string_view s, size_type pos = 0)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find_first_not_of(char c, size_type pos = 0)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find_first_not_of(const char* s, size_type pos, size_type count)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_not_of(const char* s, size_type pos = 0)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_not_of(string_view s, size_type pos = npos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find_last_not_of(char c, size_type pos = npos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "find_last_not_of(const char* s, size_type pos, size_type count)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_not_of(const char* s, size_type pos = npos)"
  },
  {
    "label": "string_view()",
    "kind": "Method",
    "detail": "Function (} private : struct SkipCheckLengthTag { } ;)",
    "insertText": "string_view(const char* data, size_type len, SkipCheckLengthTag) noexcept : ptr_(data), length_(len)"
  },
  {
    "label": "kMaxSize()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "kMaxSize(std::numeric_limits<difference_type>::max)()"
  },
  {
    "label": "CheckLengthInternal()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "CheckLengthInternal(size_type len)"
  },
  {
    "label": "StrlenInternal()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "StrlenInternal(const char* str)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && _MSC_VER >= 1910 && !defined(__clang__)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (# else return str ?)",
    "insertText": "strlen(str)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (# endif } size_t)",
    "insertText": "Min(size_type length_a, size_type length_b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const char* ptr_ ; size_type length_ ; } ; bool)",
    "insertText": "operator(string_view x, string_view y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& o, string_view piece)"
  },
  {
    "label": "ClippedSubstr()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_END } # undef ABSL_INTERNAL_STRING_VIEW_MEMCMP # endif namespace absl { ABSL_NAMESPACE_BEGIN string_view)",
    "insertText": "ClippedSubstr(string_view s, size_t pos, size_t n = string_view::npos)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pos(std::min)(pos, static_cast<size_t>(s.size()))"
  },
  {
    "label": "NullSafeStringView()",
    "kind": "Method",
    "detail": "Function (} string_view)",
    "insertText": "NullSafeStringView(const char* p)"
  }
]