[
  {
    "label": "FTaggedExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaggedExport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIllegalReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIllegalReference"
  },
  {
    "label": "FObjectStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectStatus"
  },
  {
    "label": "FHarvestedRealm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHarvestedRealm"
  },
  {
    "label": "FSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSaveContext"
  },
  {
    "label": "FSetSaveRealmToSaveScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetSaveRealmToSaveScope"
  },
  {
    "label": "FPackageHarvester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageHarvester"
  },
  {
    "label": "FTaggedExport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" HAL / FileManager . h \" # include \" HAL / IConsoleManager . h \" # include \" Misc / AssetRegistryInterface . h \" # include \" Misc / Optional . h \" # include \" Misc / PackageName . h \" # include \" Serialization / ArchiveSavePackageData . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / LargeMemoryWriter . h \" # include \" Serialization / PropertyLocalizationDataGathering . h \" # include \" Serialization / StructuredArchive . h \" # include \" Serialization / UnversionedPropertySerialization . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / ArchiveCookContext . h \" # include \" UObject / LinkerSave . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectSaveContext . h \" # include \" UObject / Package . h \" # include \" UObject / SavePackage . h \" # include \" UObject / SavePackage / SavePackageUtilities . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectHash . h \" # include \" UObject / UObjectThreadContext . h \" struct FTaggedExport { UObject* Obj ; uint32 bNotAlwaysLoadedForEditorGame : 1 ; uint32 bGeneratePublicHash : 1 ; uint32 bFromOptionalReference : 1 ;)",
    "insertText": "FTaggedExport() : Obj(nullptr) , bNotAlwaysLoadedForEditorGame(false) , bGeneratePublicHash(false) , bFromOptionalReference(false)"
  },
  {
    "label": "FTaggedExport()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTaggedExport(UObject* InObj, bool bInNotAlwaysLoadedForEditorGame = true, bool bInFromOptionalReference = false) : Obj(InObj) , bNotAlwaysLoadedForEditorGame(bInNotAlwaysLoadedForEditorGame) , bGeneratePublicHash(false) , bFromOptionalReference(bInFromOptionalReference)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTaggedExport& Other)"
  },
  {
    "label": "FObjectStatus()",
    "kind": "Method",
    "detail": "Function (} enum class ESaveRealm : uint32 { Game = 0,Optional,Editor,RealmCount,None = RealmCount } ; enum class EIllegalRefReason : uint8 { None = 0,ReferenceToOptional,ReferenceFromOptionalToMissingGameExport,UnsaveableClass,UnsaveableOuter,ExternalPackage,} ; struct FIllegalReference { UObject* From = nullptr ; UObject* To = nullptr ; EIllegalRefReason Reason ; FString FormatStringArg ; } ; enum class ESaveableStatus { Success,PendingKill,TransientFlag,TransientOverride,AbstractClass,DeprecatedClass,NewerVersionExistsClass,OuterUnsaveable,ClassUnsaveable,ExcludedByPlatform,__Count,} ; namespace UE::SavePackageUtilities { struct FObjectStatus {)",
    "insertText": "FObjectStatus() : bSaveOverrideForcedTransient(false) , bSaveableStatusValid(false), bEditorOnlyValid(false), bEditorOnly(false), bAttemptedExport(false)"
  },
  {
    "label": "FObjectStatus()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FObjectStatus(const FObjectStatus&)"
  },
  {
    "label": "FObjectStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectStatus(FObjectStatus&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FObjectStatus&)",
    "insertText": "operator(const FObjectStatus&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FObjectStatus&)",
    "insertText": "operator(FObjectStatus&&)"
  },
  {
    "label": "HasTransientFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTransientFlag(const UObject* InObject)"
  },
  {
    "label": "ClearSaveableStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearSaveableStatus()"
  },
  {
    "label": "FHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (SaveableStatus = ESaveableStatus::Success ; bSaveableStatusValid = false ; SaveableStatusCulprit = nullptr ; } UObject* SaveableStatusCulprit = nullptr ; ESaveableStatus SaveableStatus = ESaveableStatus::Success ; ESaveableStatus SaveableStatusCulpritStatus = ESaveableStatus::Success ; bool bSaveOverrideForcedTransient : 1 ; bool bSaveableStatusValid : 1 ; bool bEditorOnlyValid : 1 ; bool bEditorOnly : 1 ; bool bAttemptedExport : 1 ; } ; } struct FHarvestedRealm { ~)",
    "insertText": "FHarvestedRealm()"
  },
  {
    "label": "CloseLinkerArchives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseLinkerArchives()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TextFormatTempFilename.IsSet())"
  },
  {
    "label": "AddDirectImport()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddDirectImport(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DirectImports .)",
    "insertText": "Add(InObject)"
  },
  {
    "label": "AddImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddImport(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExport(FTaggedExport InTagObj)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Exports .)",
    "insertText": "Add(MoveTemp(InTagObj))"
  },
  {
    "label": "AddExcluded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExcluded(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "AddNotExcluded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNotExcluded(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "IsImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImport(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "IsExport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExport(UObject* InObject)"
  },
  {
    "label": "IsIncluded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIncluded(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "IsExcluded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExcluded(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "IsNotExcluded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotExcluded(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "GetExports()",
    "kind": "Method",
    "detail": "Function (} TSet<FTaggedExport>&)",
    "insertText": "GetExports()"
  },
  {
    "label": "GetDisplayIndex()",
    "kind": "Method",
    "detail": "Function (const FNameEntryId DisplayId = Name .)",
    "insertText": "GetDisplayIndex()"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (} FLinkerSave*)",
    "insertText": "GetLinker()"
  },
  {
    "label": "SetLinker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLinker(TPimplPtr<FLinkerSave> InLinker)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Linker =)",
    "insertText": "MoveTemp(InLinker)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSuccess = true ;)",
    "insertText": "if(Linker)"
  },
  {
    "label": "CloseAndDestroySaver()",
    "kind": "Method",
    "detail": "Function (bSuccess = Linker ->)",
    "insertText": "CloseAndDestroySaver()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} StructuredArchive .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetTextFormatArchive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextFormatArchive(TUniquePtr<FArchive> InTextArchive)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TextFormatArchive =)",
    "insertText": "MoveTemp(InTextArchive)"
  },
  {
    "label": "GetFormatter()",
    "kind": "Method",
    "detail": "Function (} FArchiveFormatterType*)",
    "insertText": "GetFormatter()"
  },
  {
    "label": "SetFormatter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFormatter(TUniquePtr<FArchiveFormatterType> InFormatter)"
  },
  {
    "label": "GetStructuredArchive()",
    "kind": "Method",
    "detail": "Function (} FStructuredArchive*)",
    "insertText": "GetStructuredArchive()"
  },
  {
    "label": "SetStructuredArchive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStructuredArchive(TUniquePtr<FStructuredArchive> InArchive)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (StructuredArchive =)",
    "insertText": "MoveTemp(InArchive)"
  },
  {
    "label": "GetTempFilename()",
    "kind": "Method",
    "detail": "Function (} const TOptional<FString>&)",
    "insertText": "GetTempFilename()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TempFilename =)",
    "insertText": "MoveTemp(InTemp)"
  },
  {
    "label": "GetTextFormatTempFilename()",
    "kind": "Method",
    "detail": "Function (} const TOptional<FString>&)",
    "insertText": "GetTextFormatTempFilename()"
  },
  {
    "label": "FSetSaveRealmToSaveScope()",
    "kind": "Method",
    "detail": "Function (} private : class FSaveContext ; TPimplPtr<FLinkerSave> Linker ; TUniquePtr<FArchive> TextFormatArchive ; TUniquePtr<FArchiveFormatterType> Formatter ; TUniquePtr<FStructuredArchive> StructuredArchive ; TOptional<FString> TempFilename ; TOptional<FString> TextFormatTempFilename ; TSet<TObjectPtr<UObject>> Excluded ; TSet<TObjectPtr<UObject>> NotExcluded ; TSet<FTaggedExport> Exports ; TSet<TObjectPtr<UObject>> Imports ; TSet<TObjectPtr<UObject>> DirectImports ; TSet<FNameEntryId> NamesReferencedFromExportData ; TSet<FNameEntryId> NamesReferencedFromPackageHeader ; TSet<FSoftObjectPath> SoftObjectPathList ; TSet<FName> SoftPackageReferenceList ; TMap<TObjectPtr<UObject>,TArray<FName>> SearchableNamesObjectMap ; TMap<TObjectPtr<UObject>,TSet<TObjectPtr<UObject>>> ExportObjectDependencies ; TMap<TObjectPtr<UObject>,TSet<TObjectPtr<UObject>>> ExportNativeObjectDependencies ; } ; class FSaveContext { public : struct FSetSaveRealmToSaveScope {)",
    "insertText": "FSetSaveRealmToSaveScope(FSaveContext& InContext, ESaveRealm InHarvestingRealm) : Context(InContext) , PreviousHarvestingRealm(InContext.CurrentHarvestingRealm)"
  },
  {
    "label": "FSetSaveRealmToSaveScope()",
    "kind": "Method",
    "detail": "Function (Context . CurrentHarvestingRealm = InHarvestingRealm ; } ~)",
    "insertText": "FSetSaveRealmToSaveScope()"
  },
  {
    "label": "FSaveContext()",
    "kind": "Method",
    "detail": "Function (Context . CurrentHarvestingRealm = PreviousHarvestingRealm ; } private : FSaveContext& Context ; ESaveRealm PreviousHarvestingRealm ; } ; public :)",
    "insertText": "FSaveContext(UPackage* InPackage, UObject* InAsset, const TCHAR* InFilename, const FSavePackageArgs& InSaveArgs) : Package(InPackage) , Asset(InAsset) , Filename(InFilename) , SaveArgs(InSaveArgs) , PackageWriter(InSaveArgs.SavePackageContext ? InSaveArgs.SavePackageContext->PackageWriter : nullptr) , ObjectSavePackageSerializeContext(ObjectSaveContext) , ArchiveSavePackageData(ObjectSavePackageSerializeContext, nullptr, nullptr) , GameRealmExcludedObjectMarks(GetExcludedObjectMarksForGameRealm(SaveArgs.GetTargetPlatform()))"
  },
  {
    "label": "GetPackageFlags()",
    "kind": "Method",
    "detail": "Function (InitialPackageFlags = Package ->)",
    "insertText": "GetPackageFlags()"
  },
  {
    "label": "NormalizeTopLevelFlags()",
    "kind": "Method",
    "detail": "Function (SaveArgs . TopLevelFlags = UE::)",
    "insertText": "NormalizeTopLevelFlags(SaveArgs.TopLevelFlags, IsCooking())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIgnoreHeaderDiffs = SaveArgs . SavePackageContext -> PackageWriterCapabilities . bIgnoreHeaderDiffs ; })",
    "insertText": "if(Asset == nullptr)"
  },
  {
    "label": "FindAssetInPackage()",
    "kind": "Method",
    "detail": "Function (Asset = InPackage ->)",
    "insertText": "FindAssetInPackage()"
  },
  {
    "label": "FromLocalPath()",
    "kind": "Method",
    "detail": "Function (} TargetPackagePath =)",
    "insertText": "FromLocalPath(InFilename)"
  },
  {
    "label": "SetHeaderExtension()",
    "kind": "Method",
    "detail": "Function (TargetPackagePath .)",
    "insertText": "SetHeaderExtension(EPackageExtension::EmptyString)"
  },
  {
    "label": "CanUseUnversionedPropertySerialization()",
    "kind": "Method",
    "detail": "Function (} bCanUseUnversionedPropertySerialization =)",
    "insertText": "CanUseUnversionedPropertySerialization(SaveArgs.GetTargetPlatform())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (bTextFormat =)",
    "insertText": "FString(Filename).EndsWith(FPackageName::GetTextAssetPackageExtension()) || FString(Filename).EndsWith(FPackageName::GetTextMapPackageExtension())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const IConsoleVariable* ProcessPrestreamingRequests =)",
    "insertText": "Get().FindConsoleVariable(TEXT(\"s.ProcessPrestreamingRequests\"))"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (bIsProcessingPrestreamPackages = ProcessPrestreamingRequests ->)",
    "insertText": "GetInt()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const IConsoleVariable* FixupStandaloneFlags =)",
    "insertText": "Get().FindConsoleVariable(TEXT(\"save.FixupStandaloneFlags\"))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ObjectSaveContext .)",
    "insertText": "Set(InPackage, GetTargetPlatform(), TargetPackagePath, SaveArgs.SaveFlags)"
  },
  {
    "label": "GetCookType()",
    "kind": "Method",
    "detail": "Function (ObjectSaveContext . CookType = SaveArgs . ArchiveCookData -> CookContext .)",
    "insertText": "GetCookType()"
  },
  {
    "label": "GetCookingDLC()",
    "kind": "Method",
    "detail": "Function (ObjectSaveContext . CookingDLC = SaveArgs . ArchiveCookData -> CookContext .)",
    "insertText": "GetCookingDLC()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ArchiveSavePackageData . TargetPlatform = ObjectSaveContext . TargetPlatform ; ArchiveSavePackageData . CookContext = SaveArgs . ArchiveCookData ?& SaveArgs . ArchiveCookData -> CookContext : nullptr ;)",
    "insertText": "if(SaveArgs.InOutSaveOverrides)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ObjectSaveContext . SaveOverrides =)",
    "insertText": "MoveTemp(*SaveArgs.InOutSaveOverrides)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ObjectSaveContext . PackageWriter = PackageWriter ;)",
    "insertText": "if(PackageWriter)"
  },
  {
    "label": "SetupHarvestingRealms()",
    "kind": "Method",
    "detail": "Function (ObjectSaveContext . bDeterminismDebug = SaveArgs . SavePackageContext -> PackageWriterCapabilities . bDeterminismDebug ; })",
    "insertText": "SetupHarvestingRealms()"
  },
  {
    "label": "FSaveContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSaveContext()"
  },
  {
    "label": "CallPostSaveRoot()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "CallPostSaveRoot(Asset, ObjectSaveContext, bNeedPreSaveCleanup)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* SaveArgs . InOutSaveOverrides =)",
    "insertText": "MoveTemp(ObjectSaveContext.SaveOverrides)"
  },
  {
    "label": "GetInitialPackageFlags()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetInitialPackageFlags()"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} UPackage*)",
    "insertText": "GetPackage()"
  },
  {
    "label": "IsProceduralSave()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProceduralSave()"
  },
  {
    "label": "IsStripEditorOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStripEditorOnly()"
  },
  {
    "label": "IsForceByteSwapping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsForceByteSwapping()"
  },
  {
    "label": "IsSaveToMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaveToMemory()"
  },
  {
    "label": "IsGenerateSaveError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGenerateSaveError()"
  },
  {
    "label": "IsKeepGuid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsKeepGuid()"
  },
  {
    "label": "IsKeepDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsKeepDirty()"
  },
  {
    "label": "IsSaveUnversionedNative()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaveUnversionedNative()"
  },
  {
    "label": "IsSaveUnversionedProperties()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaveUnversionedProperties()"
  },
  {
    "label": "IsSaveOptional()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaveOptional()"
  },
  {
    "label": "IsSaveAutoOptional()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSaveAutoOptional()"
  },
  {
    "label": "IsCompareLinker()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompareLinker()"
  },
  {
    "label": "IsIgnoringHeaderDiff()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIgnoringHeaderDiff()"
  },
  {
    "label": "GetEDLCookChecker()",
    "kind": "Method",
    "detail": "Function (} FEDLCookCheckerThreadState*)",
    "insertText": "GetEDLCookChecker()"
  },
  {
    "label": "GetPortFlags()",
    "kind": "Method",
    "detail": "Function (EDLCookChecker = InCookChecker ; } uint32)",
    "insertText": "GetPortFlags()"
  },
  {
    "label": "GetPreSaveCleanup()",
    "kind": "Method",
    "detail": "Function (bPostSaveRootRequired = bInPostSaveRootRequired ; } bool)",
    "insertText": "GetPreSaveCleanup()"
  },
  {
    "label": "IsStubRequested()",
    "kind": "Method",
    "detail": "Function (bNeedPreSaveCleanup = bInNeedPreSaveCleanup ; } bool)",
    "insertText": "IsStubRequested()"
  },
  {
    "label": "GetCurrentHarvestingRealm()",
    "kind": "Method",
    "detail": "Function (bGenerateFileStub = true ; } ESaveRealm)",
    "insertText": "GetCurrentHarvestingRealm()"
  },
  {
    "label": "IsTransient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransient(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "IsUnsaveable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnsaveable(TObjectPtr<UObject> InObject, bool bEmitWarning = true)"
  },
  {
    "label": "UpdateSaveableStatus()",
    "kind": "Method",
    "detail": "Function (UE::SavePackageUtilities::FObjectStatus&)",
    "insertText": "UpdateSaveableStatus(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "GetCachedObjectStatus()",
    "kind": "Method",
    "detail": "Function (UE::SavePackageUtilities::FObjectStatus&)",
    "insertText": "GetCachedObjectStatus(TObjectPtr<UObject> InObject)"
  },
  {
    "label": "RecordIllegalReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordIllegalReference(UObject* InFrom, UObject* InTo, EIllegalRefReason InReason, FString&& InOptionalReasonText = FString())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HarvestedIllegalReferences .)",
    "insertText": "Add({ InFrom, InTo, InReason, MoveTemp(InOptionalReasonText) })"
  },
  {
    "label": "GetIllegalReferences()",
    "kind": "Method",
    "detail": "Function (} const TArray<FIllegalReference>&)",
    "insertText": "GetIllegalReferences()"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().AddImport(InObject)"
  },
  {
    "label": "AddDirectImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDirectImport(UObject* InObject)"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().AddDirectImport(InObject)"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().AddExport(MoveTemp(InTagObj))"
  },
  {
    "label": "AddExcluded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExcluded(UObject* InObject)"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().AddExcluded(InObject)"
  },
  {
    "label": "IsImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImport(UObject* InObject)"
  },
  {
    "label": "GetImports()",
    "kind": "Method",
    "detail": "Function (} const TSet<TObjectPtr<UObject>>&)",
    "insertText": "GetImports()"
  },
  {
    "label": "GetDirectImports()",
    "kind": "Method",
    "detail": "Function (} const TSet<TObjectPtr<UObject>>&)",
    "insertText": "GetDirectImports()"
  },
  {
    "label": "GetImportsUsedInGame()",
    "kind": "Method",
    "detail": "Function (} const TSet<TObjectPtr<UObject>>&)",
    "insertText": "GetImportsUsedInGame()"
  },
  {
    "label": "GetSoftPackageReferenceList()",
    "kind": "Method",
    "detail": "Function (} const TSet<FName>&)",
    "insertText": "GetSoftPackageReferenceList()"
  },
  {
    "label": "GetSoftPackagesUsedInGame()",
    "kind": "Method",
    "detail": "Function (} const TSet<FName>&)",
    "insertText": "GetSoftPackagesUsedInGame()"
  },
  {
    "label": "GetPackageBuildDependencies()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetPackageBuildDependencies(ESaveRealm SaveRealm = ESaveRealm::None)"
  },
  {
    "label": "SaveRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveRealm(SaveRealm == ESaveRealm::None) ? GetCurrentHarvestingRealm()"
  },
  {
    "label": "GetSearchableNamesObjectMap()",
    "kind": "Method",
    "detail": "Function (const TMap<TObjectPtr<UObject>,TArray<FName>>&)",
    "insertText": "GetSearchableNamesObjectMap()"
  },
  {
    "label": "GetNamesReferencedFromExportData()",
    "kind": "Method",
    "detail": "Function (} const TSet<FNameEntryId>&)",
    "insertText": "GetNamesReferencedFromExportData()"
  },
  {
    "label": "GetNamesReferencedFromPackageHeader()",
    "kind": "Method",
    "detail": "Function (} const TSet<FNameEntryId>&)",
    "insertText": "GetNamesReferencedFromPackageHeader()"
  },
  {
    "label": "GetSoftObjectPathList()",
    "kind": "Method",
    "detail": "Function (} const TSet<FSoftObjectPath>&)",
    "insertText": "GetSoftObjectPathList()"
  },
  {
    "label": "GetObjectDependencies()",
    "kind": "Method",
    "detail": "Function (} const TMap<TObjectPtr<UObject>,TSet<TObjectPtr<UObject>>>&)",
    "insertText": "GetObjectDependencies()"
  },
  {
    "label": "GetNativeObjectDependencies()",
    "kind": "Method",
    "detail": "Function (} const TMap<TObjectPtr<UObject>,TSet<TObjectPtr<UObject>>>&)",
    "insertText": "GetNativeObjectDependencies()"
  },
  {
    "label": "NameExists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NameExists(const FName& Name)"
  },
  {
    "label": "GetCustomVersions()",
    "kind": "Method",
    "detail": "Function (} const FCustomVersionContainer&)",
    "insertText": "GetCustomVersions()"
  },
  {
    "label": "AddPrestreamPackages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPrestreamPackages(UPackage* InPackage)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PrestreamPackages .)",
    "insertText": "Add(InPackage)"
  },
  {
    "label": "SetCustomVersions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomVersions(FCustomVersionContainer InCustomVersions)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (CustomVersions =)",
    "insertText": "MoveTemp(InCustomVersions)"
  },
  {
    "label": "GetLinkers()",
    "kind": "Method",
    "detail": "Function (} TArray<FLinkerSave*>)",
    "insertText": "GetLinkers()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FLinkerSave*> Linkers ;)",
    "insertText": "for(const FHarvestedRealm& Realm : HarvestedRealms)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Linkers .)",
    "insertText": "Add(Realm.GetLinker())"
  },
  {
    "label": "UpdatePackageLinkerVersions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePackageLinkerVersions()"
  },
  {
    "label": "SetLinkerPackageVersion()",
    "kind": "Method",
    "detail": "Function (Package ->)",
    "insertText": "SetLinkerPackageVersion(Linker->UEVer())"
  },
  {
    "label": "SetLinkerLicenseeVersion()",
    "kind": "Method",
    "detail": "Function (Package ->)",
    "insertText": "SetLinkerLicenseeVersion(Linker->LicenseeUEVer())"
  },
  {
    "label": "SetLinkerCustomVersions()",
    "kind": "Method",
    "detail": "Function (Package ->)",
    "insertText": "SetLinkerCustomVersions(Linker->GetCustomVersions())"
  },
  {
    "label": "UpdatePackageFileSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePackageFileSize(int64 InFileSize)"
  },
  {
    "label": "SetFileSize()",
    "kind": "Method",
    "detail": "Function (Package ->)",
    "insertText": "SetFileSize(InFileSize)"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().SetLinker(MoveTemp(InLinker))"
  },
  {
    "label": "GetTextFormatArchive()",
    "kind": "Method",
    "detail": "Function (} FArchive*)",
    "insertText": "GetTextFormatArchive()"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().SetTextFormatArchive(MoveTemp(InTextArchive))"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().SetFormatter(MoveTemp(InFormatter))"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().SetStructuredArchive(MoveTemp(InArchive))"
  },
  {
    "label": "SetTempFilename()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTempFilename(TOptional<FString> InTemp)"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().SetTempFilename(MoveTemp(InTemp))"
  },
  {
    "label": "SetTextFormatTempFilename()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextFormatTempFilename(TOptional<FString> InTemp)"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHarvestedRealm().SetTextFormatTempFilename(MoveTemp(InTemp))"
  },
  {
    "label": "GetFinalResult()",
    "kind": "Method",
    "detail": "Function (} FSavePackageResultStruct)",
    "insertText": "GetFinalResult()"
  },
  {
    "label": "GetObjectSaveContext()",
    "kind": "Method",
    "detail": "Function (FObjectSaveContextData&)",
    "insertText": "GetObjectSaveContext()"
  },
  {
    "label": "HasExternalImportValidations()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "HasExternalImportValidations()"
  },
  {
    "label": "GetExternalImportValidations()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<FSavePackageSettings::ExternalImportValidationFunc>>)",
    "insertText": "GetExternalImportValidations()"
  },
  {
    "label": "HasExternalExportValidations()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasExternalExportValidations()"
  },
  {
    "label": "GetExternalExportValidations()",
    "kind": "Method",
    "detail": "Function (} const TArray<TFunction<FSavePackageSettings::ExternalExportValidationFunc>>)",
    "insertText": "GetExternalExportValidations()"
  },
  {
    "label": "GetHarvestedRealm()",
    "kind": "Method",
    "detail": "Function (} const FHarvestedRealm&)",
    "insertText": "GetHarvestedRealm(ESaveRealm Realm = ESaveRealm::None)"
  },
  {
    "label": "GetSavedAssets()",
    "kind": "Method",
    "detail": "Function (} TArray<FAssetData>&)",
    "insertText": "GetSavedAssets()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TransientPropertyOverrides =)",
    "insertText": "MoveTemp(InTransientPropertyOverrides)"
  },
  {
    "label": "ClearSaveableCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearSaveableCache()"
  },
  {
    "label": "GetFunctorReadCachedEditorOnlyObject()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_EDITORONLY_DATA auto)",
    "insertText": "GetFunctorReadCachedEditorOnlyObject()"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (using namespace UE::SavePackageUtilities ; return [)",
    "insertText": "this(const UObject* Obj)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FObjectStatus& Status = ObjectStatusCache .)",
    "insertText": "FindOrAdd(const_cast<UObject*>(Obj))"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (using namespace UE::SavePackageUtilities ; return [)",
    "insertText": "this(const UObject* Obj, bool bEditorOnly)"
  },
  {
    "label": "GetEditorOnlyObjectFlags()",
    "kind": "Method",
    "detail": "Function (Status . bEditorOnlyValid = true ; Status . bEditorOnly = bEditorOnly ; } ; } # endif UE::SavePackageUtilities::EEditorOnlyObjectFlags)",
    "insertText": "GetEditorOnlyObjectFlags()"
  },
  {
    "label": "GetSaveableStatusNoOuter()",
    "kind": "Method",
    "detail": "Function (ESaveableStatus)",
    "insertText": "GetSaveableStatusNoOuter(TObjectPtr<UObject> Obj, UE::SavePackageUtilities::FObjectStatus& ObjectStatus)"
  },
  {
    "label": "GetExcludedObjectMarksForGameRealm()",
    "kind": "Method",
    "detail": "Function (EObjectMark)",
    "insertText": "GetExcludedObjectMarksForGameRealm(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (class FPackageHarvester ; UPackage* Package ; UObject* Asset ; FPackagePath TargetPackagePath ; const TCHAR* Filename ; FSavePackageArgs SaveArgs ; IPackageWriter* PackageWriter ; FObjectSaveContextData ObjectSaveContext ; FObjectSavePackageSerializeContext ObjectSavePackageSerializeContext ; FArchiveSavePackageData ArchiveSavePackageData ; bool bCanUseUnversionedPropertySerialization = false ; bool bTextFormat = false ; bool bIsProcessingPrestreamPackages = false ; bool bIsFixupStandaloneFlags = false ; bool bPostSaveRootRequired = false ; bool bNeedPreSaveCleanup = false ; bool bGenerateFileStub = false ; bool bIgnoreHeaderDiffs = false ; bool bIsSaveAutoOptional = false ; uint32 InitialPackageFlags ; FCanSkipEditorReferencedPackagesWhenCooking SkipEditorRefCookingSetting ; FEDLCookCheckerThreadState* EDLCookChecker = nullptr ; const EObjectMark GameRealmExcludedObjectMarks ; FCustomVersionContainer CustomVersions ; ESaveRealm CurrentHarvestingRealm = ESaveRealm::None ; TArray<FHarvestedRealm> HarvestedRealms ; TArray<FIllegalReference> HarvestedIllegalReferences ; TSet<TObjectPtr<UPackage>> PrestreamPackages ; TArray<FAssetData> SavedAssets ; TMap<UObject*,TSet<FProperty*>> TransientPropertyOverrides ; TMap<TObjectPtr<UObject>,UE::SavePackageUtilities::FObjectStatus> ObjectStatusCache ; TArray<FName> PackageBuildDependencies ; TArray<FName> EmptyList ; } ; const TCHAR*)",
    "insertText": "LexToString(ESaveableStatus Status)"
  }
]