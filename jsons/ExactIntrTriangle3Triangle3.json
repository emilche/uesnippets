[
  {
    "label": "TExactIntrTriangle3Triangle3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TExactIntrTriangle3Triangle3"
  },
  {
    "label": "TExactIntrTriangle3Triangle3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" CompGeom / ExactPredicates . h \" namespace UE::Geometry { template<Real> class TExactIntrTriangle3Triangle3 { public : TTriangle3<Real> Triangle0,Triangle1 ;)",
    "insertText": "TExactIntrTriangle3Triangle3()"
  },
  {
    "label": "TExactIntrTriangle3Triangle3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TExactIntrTriangle3Triangle3(TTriangle3<Real> Triangle0, TTriangle3<Real> Triangle1) : Triangle0(Triangle0), Triangle1(Triangle1)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Test(bool& bWasCoplanar)"
  },
  {
    "label": "FindWithoutCoplanar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindWithoutCoplanar(const TTriangle3<Real>& Triangle0, const TTriangle3<Real>& Triangle1, TVector<Real>& OutSegA, TVector<Real>& OutSegB, bool& bWasCoplanar)"
  },
  {
    "label": "TestWithoutCoplanar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestWithoutCoplanar(const TTriangle3<Real>& Triangle0, const TTriangle3<Real>& Triangle1, bool& bWasCoplanar)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (TVector<Real> Unused_SegA,Unused_SegB ; return FindOrTestWithoutCoplanar<)",
    "insertText": "false(Triangle0, Triangle1, Unused_SegA, Unused_SegB, bWasCoplanar)"
  },
  {
    "label": "FindOrTestWithoutCoplanar()",
    "kind": "Method",
    "detail": "Function (} private : template<bool bFindSegments> bool)",
    "insertText": "FindOrTestWithoutCoplanar(const TTriangle3<Real>& Triangle0, const TTriangle3<Real>& Triangle1, TVector<Real>& OutSegA, TVector<Real>& OutSegB, bool& bWasCoplanar)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bWasCoplanar = false ; const TTriangle3<Real>* Tris [ 2 ] {& Triangle0,& Triangle1 } ; int32 SignCounts [ 2 ] [ 3 ] { { 0,0,0 },{ 0,0,0 } } ; int32 SignSubIdx [ 2 ] [ 3 ] { { - 1,- 1,- 1 },{ - 1,- 1,- 1 } } ;)",
    "insertText": "for(int32 TriIdx = 0; TriIdx < 2; ++TriIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TTriangle3<Real>& CurTri =* Tris [ TriIdx ] ; const TTriangle3<Real>& OtherTri =* Tris [ 1 - TriIdx ] ;)",
    "insertText": "for(int32 SubIdx = 0; SubIdx < 3; ++SubIdx)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (Real VertSide = ExactPredicates::Orient3<)",
    "insertText": "Real(OtherTri.V[0], OtherTri.V[1], OtherTri.V[2], CurTri.V[SubIdx])"
  },
  {
    "label": "SignAsInt()",
    "kind": "Method",
    "detail": "Function (int32 Sign = TMathUtil<Real)",
    "insertText": "SignAsInt(VertSide)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SignCounts [ TriIdx ] [ Sign + 1 ] + + ; SignSubIdx [ TriIdx ] [ Sign + 1 ] = SubIdx ; })",
    "insertText": "if(SignCounts[TriIdx][0] == 3 || SignCounts[TriIdx][2] == 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 SignIdx = TrySignIdx [ Idx ] ;)",
    "insertText": "if(SignCounts[TriIdx][SignIdx] == 1)"
  },
  {
    "label": "TriIdx()",
    "kind": "Method",
    "detail": "Function (int32 OffsideIdx = SignSubIdx [ TriIdx ] [ SignIdx ] ; IdxMap [ TriIdx ] [ 0 ] = OffsideIdx ; IdxMap [)",
    "insertText": "TriIdx(OffsideIdx + 1)"
  },
  {
    "label": "TriIdx()",
    "kind": "Method",
    "detail": "Function (IdxMap [)",
    "insertText": "TriIdx(OffsideIdx + 2)"
  },
  {
    "label": "SignIdx()",
    "kind": "Method",
    "detail": "Function (OtherTriNeedsOrientationFlip [ TriIdx ] =)",
    "insertText": "SignIdx(SignIdx == 1 && SignCounts[TriIdx][2] == 2)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(IdxMap[1 - TriIdx][1], IdxMap[1 - TriIdx][2])"
  },
  {
    "label": "GetEdgePlaneCrossing()",
    "kind": "Method",
    "detail": "Function (} } const TVector<Real>& P1 = Tris [ 0 ] -> V [ IdxMap [ 0 ] [ 0 ] ] ; const TVector<Real>& Q1 = Tris [ 0 ] -> V [ IdxMap [ 0 ] [ 1 ] ] ; const TVector<Real>& R1 = Tris [ 0 ] -> V [ IdxMap [ 0 ] [ 2 ] ] ; const TVector<Real>& P2 = Tris [ 1 ] -> V [ IdxMap [ 1 ] [ 0 ] ] ; const TVector<Real>& Q2 = Tris [ 1 ] -> V [ IdxMap [ 1 ] [ 1 ] ] ; const TVector<Real>& R2 = Tris [ 1 ] -> V [ IdxMap [ 1 ] [ 2 ] ] ; auto)",
    "insertText": "GetEdgePlaneCrossing(const TVector<Real>& A, const TVector<Real>& B, const TVector<Real>& N, const TVector<Real>& O)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real AToPlane = N .)",
    "insertText": "Dot(O - A)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real ABLenInPlaneDir = N .)",
    "insertText": "Dot(B - A)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} Real FracMoveAlongAB =)",
    "insertText": "Clamp(AToPlane / ABLenInPlaneDir, (Real)0, (Real)1)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} ; if)",
    "insertText": "constexpr(!bFindSegments)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (bool bIntersects = ExactPredicates::Orient3<)",
    "insertText": "Real(P1, Q1, P2, Q2) <= 0 && ExactPredicates::Orient3<Real>(P1, R1, R2, P2)"
  },
  {
    "label": "NormalDirection()",
    "kind": "Method",
    "detail": "Function (TVector<Real> N1 =)",
    "insertText": "NormalDirection(P1, Q1, R1)"
  },
  {
    "label": "NormalDirection()",
    "kind": "Method",
    "detail": "Function (TVector<Real> N2 =)",
    "insertText": "NormalDirection(P2, Q2, R2)"
  },
  {
    "label": "GetEdgePlaneCrossing()",
    "kind": "Method",
    "detail": "Function (OutSegA =)",
    "insertText": "GetEdgePlaneCrossing(P2, Q2, N1, P1)"
  },
  {
    "label": "GetEdgePlaneCrossing()",
    "kind": "Method",
    "detail": "Function (OutSegB =)",
    "insertText": "GetEdgePlaneCrossing(P1, Q1, N2, P2)"
  },
  {
    "label": "GetEdgePlaneCrossing()",
    "kind": "Method",
    "detail": "Function (OutSegA =)",
    "insertText": "GetEdgePlaneCrossing(P1, R1, N2, P2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { return false ; } } else {)",
    "insertText": "if(ExactPredicates::Orient3<Real>(P1, R1, R2, P2) <= 0)"
  },
  {
    "label": "GetEdgePlaneCrossing()",
    "kind": "Method",
    "detail": "Function (OutSegB =)",
    "insertText": "GetEdgePlaneCrossing(P2, R2, N1, P1)"
  }
]