[
  {
    "label": "_RealType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RealType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_RT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_NORMAL_DISTRIBUTION_H # define _LIBCPP___RANDOM_NORMAL_DISTRIBUTION_H # include<__config> # include<__random / is_valid . h> # include<__random / uniform_real_distribution . h> # include<cmath> # include<iosfwd> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _RealType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { result_type __mean_ ; result_type __stddev_ ; public : typedef normal_distribution distribution_type ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "param_type(result_type __mean = 0, result_type __stddev = 1) : __mean_(__mean), __stddev_(__stddev)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "mean()"
  },
  {
    "label": "normal_distribution()",
    "kind": "Method",
    "detail": "Function (} } ; private : param_type __p_ ; result_type _V_ ; bool _V_hot_ ; public : # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "normal_distribution() : normal_distribution(0)"
  },
  {
    "label": "normal_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "normal_distribution(result_type __mean, result_type __stddev = 1) : __p_(param_type(__mean, __stddev)), _V_hot_(false)"
  },
  {
    "label": "normal_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "normal_distribution(result_type __mean = 0, result_type __stddev = 1) : __p_(param_type(__mean, __stddev)), _V_hot_(false)"
  },
  {
    "label": "normal_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "normal_distribution(const param_type& __p) : __p_(__p), _V_hot_(false)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_V_hot_ = false ; } template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "stddev()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "stddev()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "max()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const normal_distribution& __x, const normal_distribution& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits,class _RT> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const normal_distribution<_RT>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _RT> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, normal_distribution<_RT>& __x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result_type _Up ;)",
    "insertText": "if(_V_hot_)"
  },
  {
    "label": "_Uni()",
    "kind": "Method",
    "detail": "Function (_V_hot_ = false ; _Up = _V_ ; } else { uniform_real_distribution<result_type>)",
    "insertText": "_Uni(-1, 1)"
  },
  {
    "label": "_Uni()",
    "kind": "Method",
    "detail": "Function (result_type __u ; result_type __v ; result_type __s ; do { __u =)",
    "insertText": "_Uni(__g)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (__s = __u* __u + __v* __v ; })",
    "insertText": "while(__s > 1 || __s == 0)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (result_type _Fp =)",
    "insertText": "sqrt(-2 * _VSTD::log(__s) / __s)"
  },
  {
    "label": "stddev()",
    "kind": "Method",
    "detail": "Function (_V_ = __v* _Fp ; _V_hot_ = true ; _Up = __u* _Fp ; } return _Up* __p .)",
    "insertText": "stddev() + __p.mean()"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _OStream ; __os .)",
    "insertText": "flags(_OStream::dec | _OStream::left | _OStream::fixed | _OStream::scientific)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (__os<<__x .)",
    "insertText": "mean() << __sp << __x.stddev()"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef normal_distribution<_RT> _Eng ; typedef _Eng::result_type result_type ; typedef _Eng::param_type param_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result_type __mean ; result_type __stddev ; result_type _Vp = 0 ; bool _V_hot = false ; __is>> __mean>> __stddev>> _V_hot ;)",
    "insertText": "if(_V_hot)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (__x .)",
    "insertText": "param(param_type(__mean, __stddev))"
  }
]