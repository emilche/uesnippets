[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "UMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshComponent"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "MESHPAINT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESHPAINT_API"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FPaintableTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintableTexture"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FReferenceCollector ; class UMeshComponent ; class UTexture ; class IMeshPaintGeometryAdapter { public : bool)",
    "insertText": "Construct(UMeshComponent* InComponent, int32 MeshLODIndex)"
  },
  {
    "label": "IMeshPaintGeometryAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IMeshPaintGeometryAdapter()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "OnAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdded()"
  },
  {
    "label": "OnRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoved()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SupportsTexturePaint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTexturePaint()"
  },
  {
    "label": "SupportsVertexPaint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsVertexPaint()"
  },
  {
    "label": "LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceComponent(struct FHitResult& OutHit, const FVector Start, const FVector End, const struct FCollisionQueryParams& Params)"
  },
  {
    "label": "QueryPaintableTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryPaintableTextures(int32 MaterialIndex, int32& OutDefaultIndex, TArray<struct FPaintableTexture>& InOutTextureList)"
  },
  {
    "label": "ApplyOrRemoveTextureOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyOrRemoveTextureOverride(UTexture* SourceTexture, UTexture* OverrideTexture)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetMeshVertices()",
    "kind": "Method",
    "detail": "Function (const TArray<FVector>&)",
    "insertText": "GetMeshVertices()"
  },
  {
    "label": "GetMeshIndices()",
    "kind": "Method",
    "detail": "Function (const TArray<uint32>&)",
    "insertText": "GetMeshIndices()"
  },
  {
    "label": "GetVertexPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexPosition(int32 VertexIndex, FVector& OutVertex)"
  },
  {
    "label": "SetVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexColor(int32 VertexIndex, FColor Color, bool bInstance = true)"
  },
  {
    "label": "GetTextureCoordinate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureCoordinate(int32 VertexIndex, int32 ChannelIndex, FVector2D& OutTextureCoordinate)"
  },
  {
    "label": "GetVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexColor(int32 VertexIndex, FColor& OutColor, bool bInstance = true)"
  },
  {
    "label": "GetComponentToWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetComponentToWorldMatrix()"
  },
  {
    "label": "PreEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEdit()"
  },
  {
    "label": "PostEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEdit()"
  },
  {
    "label": "DefaultApplyOrRemoveTextureOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultApplyOrRemoveTextureOverride(UMeshComponent* InMeshComponent, UTexture* SourceTexture, UTexture* OverrideTexture)"
  },
  {
    "label": "DefaultQueryPaintableTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultQueryPaintableTextures(int32 MaterialIndex, const UMeshComponent* MeshComponent, int32& OutDefaultIndex, TArray<struct FPaintableTexture>& InOutTextureList)"
  },
  {
    "label": "SphereIntersectTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<uint32>)",
    "insertText": "SphereIntersectTriangles(const float ComponentSpaceSquaredBrushRadius, const FVector& ComponentSpaceBrushPosition, const FVector& ComponentSpaceCameraPosition, const bool bOnlyFrontFacing)"
  },
  {
    "label": "GetInfluencedVertexIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInfluencedVertexIndices(const float ComponentSpaceSquaredBrushRadius, const FVector& ComponentSpaceBrushPosition, const FVector& ComponentSpaceCameraPosition, const bool bOnlyFrontFacing, TSet<int32> &InfluencedVertices)"
  },
  {
    "label": "GetInfluencedVertexData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInfluencedVertexData(const float ComponentSpaceSquaredBrushRadius, const FVector& ComponentSpaceBrushPosition, const FVector& ComponentSpaceCameraPosition, const bool bOnlyFrontFacing, TArray<TPair<int32, FVector>>& OutData)"
  },
  {
    "label": "SphereIntersectVertices()",
    "kind": "Method",
    "detail": "Function (TArray<FVector>)",
    "insertText": "SphereIntersectVertices(const float ComponentSpaceSquaredBrushRadius, const FVector& ComponentSpaceBrushPosition, const FVector& ComponentSpaceCameraPosition, const bool bOnlyFrontFacing)"
  }
]