[
  {
    "label": "UMaterialExpressionFirstPersonOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionFirstPersonOutput"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Materials / MaterialExpressionCustomOutput . h \" # include \" UObject / ObjectMacros . h \" # include \" MaterialExpressionFirstPersonOutput . generated . h \")",
    "insertText": "UCLASS(MinimalAPI, collapsecategories, hidecategories = Object)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(meta = (RequiredInput = \"false\", ToolTip = \"Interpolates between world space and first person space. Valid range is [0, 1], from world space to first person space. Defaults to 'ConstFirstPersonInterpolationAlpha' if not specified.\"))"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  },
  {
    "label": "GetNumOutputs()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetNumOutputs()"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "NeedsPreviousFrameEvaluation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "NeedsPreviousFrameEvaluation()"
  }
]