[
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FMovieSceneEntitySystemRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneEntitySystemRunner"
  },
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FMovieSceneObjectCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectCache"
  },
  {
    "label": "FMovieSceneSequenceHierarchy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceHierarchy"
  },
  {
    "label": "FSharedPlaybackStateCreateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackStateCreateParams"
  },
  {
    "label": "MOVIESCENE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENE_API"
  },
  {
    "label": "FSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compilation / MovieSceneCompiledDataID . h \" # include \" CoreTypes . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" Evaluation / MovieSceneEvaluationOperand . h \" # include \" Evaluation / MovieScenePlaybackCapabilities . h \" # include \" Evaluation / MovieScenePreAnimatedState . h \" # include \" MovieSceneSequenceID . h \" class UMovieSceneSequence ; class FMovieSceneEntitySystemRunner ; class UMovieSceneCompiledDataManager ; class UMovieSceneEntitySystemLinker ; struct FMovieSceneObjectCache ; struct FMovieSceneSequenceHierarchy ; namespace UE::MovieScene { struct FSharedPlaybackStateCreateParams { UObject* PlaybackContext = nullptr ; FRootInstanceHandle RootInstanceHandle ; TObjectPtr<UMovieSceneEntitySystemLinker> Linker ; UMovieSceneCompiledDataManager* CompiledDataManager = nullptr ; } ; struct FSharedPlaybackState : TSharedFromThis<FSharedPlaybackState> { public :)",
    "insertText": "FSharedPlaybackState(UMovieSceneEntitySystemLinker* InLinker = nullptr)"
  },
  {
    "label": "FSharedPlaybackState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSharedPlaybackState(UMovieSceneSequence& InRootSequence, const FSharedPlaybackStateCreateParams& CreateParams)"
  },
  {
    "label": "GetPlaybackContext()",
    "kind": "Method",
    "detail": "Function (public : UObject*)",
    "insertText": "GetPlaybackContext()"
  },
  {
    "label": "GetRootSequence()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneSequence*)",
    "insertText": "GetRootSequence()"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneEntitySystemLinker*)",
    "insertText": "GetLinker()"
  },
  {
    "label": "GetCompiledDataManager()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<UMovieSceneCompiledDataManager>)",
    "insertText": "GetCompiledDataManager()"
  },
  {
    "label": "GetHierarchy()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneSequenceHierarchy*)",
    "insertText": "GetHierarchy()"
  },
  {
    "label": "GetSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetSequence(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "FindBoundObjects()",
    "kind": "Method",
    "detail": "Function (TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindBoundObjects(const FGuid& ObjectBindingID, FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "ClearObjectCaches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectCaches()"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (public : FPlaybackCapabilities&)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "ensureMsgf(IsInGameThread(), TEXT(\"Playback capabilities aren't meant to be thread-safe. Do not modify or access their container outside of the game thread.\"))"
  },
  {
    "label": "HasCapability()",
    "kind": "Method",
    "detail": "Function (# endif return Capabilities ; } template<T> bool)",
    "insertText": "HasCapability()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# endif return Capabilities . HasCapability<)",
    "insertText": "T()"
  },
  {
    "label": "FindCapability()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "FindCapability()"
  },
  {
    "label": "AddCapability()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . ArgTypes> T&)",
    "insertText": "AddCapability(ArgTypes&&... InArgs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# endif T& Cap = Capabilities . AddCapability<)",
    "insertText": "T(Forward<ArgTypes>(InArgs)...)"
  },
  {
    "label": "MaybeInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeInitialize(Cap)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# endif T& Cap = Capabilities . AddCapabilityRaw<)",
    "insertText": "T(InPointer)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# endif T& Cap = Capabilities . AddCapabilityShared<)",
    "insertText": "T(InSharedRef)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(HasCapability<T>())"
  },
  {
    "label": "MaybeInitialize()",
    "kind": "Method",
    "detail": "Function (private : template<T> void)",
    "insertText": "MaybeInitialize(T& Cap)"
  },
  {
    "label": "IPlaybackCapability()",
    "kind": "Method",
    "detail": "Function (IPlaybackCapability* InterfacePtr = static_cast<)",
    "insertText": "IPlaybackCapability(&Cap)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (InterfacePtr ->)",
    "insertText": "Initialize(SharedThis(this))"
  }
]