[
  {
    "label": "FSlateDynamicImageBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDynamicImageBrush"
  },
  {
    "label": "FCoreStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoreStyle"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / AppStyle . h \" struct FSlateDynamicImageBrush ; class FCoreStyle { public : TSharedRef<class ISlateStyle>)",
    "insertText": "Create(const FName& InStyleSetName = \"CoreStyle\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const ISlateStyle&)",
    "insertText": "Get()"
  },
  {
    "label": "GetCoreStyle()",
    "kind": "Method",
    "detail": "Function (} const ISlateStyle&)",
    "insertText": "GetCoreStyle()"
  },
  {
    "label": "GetDefaultFont()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<const FCompositeFont>)",
    "insertText": "GetDefaultFont()"
  },
  {
    "label": "GetDefaultFontStyle()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetDefaultFontStyle(const FName InTypefaceFontName, const float InSize, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings())"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "SetSelectorColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectorColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetInactiveSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInactiveSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetPressedSelectionColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPressedSelectionColor(const FLinearColor& NewColor)"
  },
  {
    "label": "SetFocusBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocusBrush(FSlateBrush* NewBrush)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(FName BrushTemplate, FName TextureName, const ANSICHAR* Specifier = nullptr)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(FName BrushTemplate, const ANSICHAR* Specifier, class UTexture2D* TextureResource, FName TextureName)"
  },
  {
    "label": "GetDynamicImageBrush()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicImageBrush(FName BrushTemplate, class UTexture2D* TextureResource, FName TextureName)"
  },
  {
    "label": "IsStarshipStyle()",
    "kind": "Method",
    "detail": "Function (const int32 RegularTextSize = 9 ; const int32 SmallTextSize = 8 ; bool)",
    "insertText": "IsStarshipStyle()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetStyle(const TSharedRef< class ISlateStyle >& NewStyle)"
  },
  {
    "label": "Icon5x16()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class ISlateStyle> Instance ; } ; namespace CoreStyleConstants { const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon5x16(5.0f, 16.0f)"
  },
  {
    "label": "Icon6x8()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon6x8(6.0f, 8.0f)"
  },
  {
    "label": "Icon8x4()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon8x4(8.0f, 4.0f)"
  },
  {
    "label": "Icon16x4()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon16x4(16.0f, 4.0f)"
  },
  {
    "label": "Icon8x8()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon8x8(8.0f, 8.0f)"
  },
  {
    "label": "Icon10x10()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon10x10(10.0f, 10.0f)"
  },
  {
    "label": "Icon12x12()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon12x12(12.0f, 12.0f)"
  },
  {
    "label": "Icon12x16()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon12x16(12.0f, 16.0f)"
  },
  {
    "label": "Icon14x14()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon14x14(14.0f, 14.0f)"
  },
  {
    "label": "Icon16x16()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon16x16(16.0f, 16.0f)"
  },
  {
    "label": "Icon18x18()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon18x18(18.0f, 18.0f)"
  },
  {
    "label": "Icon20x20()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon20x20(20.0f, 20.0f)"
  },
  {
    "label": "Icon22x22()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon22x22(22.0f, 22.0f)"
  },
  {
    "label": "Icon24x24()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon24x24(24.0f, 24.0f)"
  },
  {
    "label": "Icon25x25()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon25x25(25.0f, 25.0f)"
  },
  {
    "label": "Icon26x26()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon26x26(26.0f, 26.0f)"
  },
  {
    "label": "Icon32x32()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon32x32(32.0f, 32.0f)"
  },
  {
    "label": "Icon40x40()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon40x40(40.0f, 40.0f)"
  },
  {
    "label": "Icon64x64()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon64x64(64.0f, 64.0f)"
  },
  {
    "label": "Icon36x24()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon36x24(36.0f, 24.0f)"
  },
  {
    "label": "Icon128x128()",
    "kind": "Method",
    "detail": "Function (const UE::Slate::FDeprecateVector2DResult)",
    "insertText": "Icon128x128(128.0f, 128.0f)"
  },
  {
    "label": "DefaultMargins()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "DefaultMargins(8.f, 4.f)"
  },
  {
    "label": "ButtonMargins()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "ButtonMargins(12.f, 1.5f, 12.f, 1.5f)"
  },
  {
    "label": "PressedButtonMargins()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "PressedButtonMargins(12.f, 2.5f, 12.f, 0.5f)"
  },
  {
    "label": "ToggleButtonMargins()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "ToggleButtonMargins(16.0f, 2.0f)"
  },
  {
    "label": "ComboButtonMargin()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "ComboButtonMargin(8.f, 1.f, 8.f, 1.f)"
  },
  {
    "label": "PressedComboButtonMargin()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "PressedComboButtonMargin(8.f, 2.f, 8.f, 0.f)"
  }
]