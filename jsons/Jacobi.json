[
  {
    "label": "JacobiRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiRotation"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "JacobiRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiRotation"
  },
  {
    "label": "JacobiRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiRotation"
  },
  {
    "label": "JacobiRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiRotation"
  },
  {
    "label": "apply_rotation_in_the_plane_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "apply_rotation_in_the_plane_selector"
  },
  {
    "label": "apply_rotation_in_the_plane_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "apply_rotation_in_the_plane_selector"
  },
  {
    "label": "makeJacobi()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "makeJacobi(const MatrixBase<Derived>&, Index p, Index q)"
  },
  {
    "label": "makeJacobi()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "makeJacobi(const RealScalar& x, const Scalar& y, const RealScalar& z)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeGivens(const Scalar& p, const Scalar& q, Scalar* r=0)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeGivens(const Scalar& p, const Scalar& q, Scalar* r, internal::true_type)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeGivens(const Scalar& p, const Scalar& q, Scalar* r, internal::false_type)"
  },
  {
    "label": "apply_rotation_in_the_plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "apply_rotation_in_the_plane(DenseBase<VectorX>& xpr_x, DenseBase<VectorY>& xpr_y, const JacobiRotation<OtherScalar>& j)"
  }
]