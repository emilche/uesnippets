[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPropertyPermissionListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyPermissionListEntry"
  },
  {
    "label": "PROPERTYEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PROPERTYEDITOR_API"
  },
  {
    "label": "FPermissionListUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPermissionListUpdate"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Ticker . h \" # include \" UObject / SoftObjectPtr . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Misc / NamePermissionList . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPropertyEditorPermissionList, Log, All)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPermissionListUpdated, TSoftObjectPtr<const UStruct>, FName)"
  },
  {
    "label": "AddPermissionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPermissionList(TSoftObjectPtr<const UStruct> Struct, const FNamePermissionList& PermissionList, const EPropertyPermissionListRules Rules, const TConstArrayView<FName> InAdditionalOwnerNames)"
  },
  {
    "label": "RemovePermissionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePermissionList(TSoftObjectPtr<const UStruct> Struct)"
  },
  {
    "label": "ClearPermissionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPermissionList()"
  },
  {
    "label": "UnregisterOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOwner(const FName Owner)"
  },
  {
    "label": "AddToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToAllowList(TSoftObjectPtr<const UStruct> Struct, const FName PropertyName, const FName Owner)"
  },
  {
    "label": "AddToAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToAllowList(TSoftObjectPtr<const UStruct> Struct, const TArray<FName>& PropertyNames, const FName Owner)"
  },
  {
    "label": "RemoveFromAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromAllowList(TSoftObjectPtr<const UStruct> Struct, const FName PropertyName, const FName Owner)"
  },
  {
    "label": "AddToDenyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToDenyList(TSoftObjectPtr<const UStruct> Struct, const FName PropertyName, const FName Owner)"
  },
  {
    "label": "RemoveFromDenyList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromDenyList(TSoftObjectPtr<const UStruct> Struct, const FName PropertyName, const FName Owner)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (FPermissionListUpdated PermissionListUpdatedDelegate ; FSimpleMulticastDelegate PermissionListEnabledDelegate ; bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "HasFiltering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFiltering(const UStruct* ObjectStruct)"
  },
  {
    "label": "DoesPropertyPassFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPropertyPassFilter(const UStruct* ObjectStruct, FName PropertyName)"
  },
  {
    "label": "HasSpecificList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSpecificList(const UStruct* ObjectStruct)"
  },
  {
    "label": "IsSpecificPropertyAllowListed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpecificPropertyAllowListed(const UStruct* ObjectStruct, FName PropertyName)"
  },
  {
    "label": "IsSpecificPropertyDenyListed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpecificPropertyDenyListed(const UStruct* ObjectStruct, FName PropertyName)"
  },
  {
    "label": "GetRawPermissionList()",
    "kind": "Method",
    "detail": "Function (const TMap<TSoftObjectPtr<const UStruct>,FPropertyPermissionListEntry>&)",
    "insertText": "GetRawPermissionList()"
  },
  {
    "label": "FPropertyPermissionList()",
    "kind": "Method",
    "detail": "Function (bool bSuppressUpdateDelegate = false ; protected :)",
    "insertText": "FPropertyPermissionList()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RegisterOnBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnBlueprintCompiled()"
  },
  {
    "label": "ClearCacheAndBroadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCacheAndBroadcast(TSoftObjectPtr<const UStruct> ObjectStruct = nullptr, FName OwnerName = NAME_None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool bEnablePermissionList = false ; TMap<TSoftObjectPtr<const UStruct>,FPropertyPermissionListEntry> RawPropertyPermissionList ; FTSTicker::FDelegateHandle OnTickHandle ; struct FPermissionListUpdate { TSoftObjectPtr<const UStruct> ObjectStruct ; FName OwnerName ; } ; bool)",
    "insertText": "operator(const FPermissionListUpdate& A, const FPermissionListUpdate& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPermissionListUpdate& PermisisonList)"
  },
  {
    "label": "GetCachedPermissionListForStruct()",
    "kind": "Method",
    "detail": "Function (TSet<FPermissionListUpdate> PendingUpdates ; TMap<TWeakObjectPtr<const UStruct>,FPropertyPermissionListEntry> CachedPropertyPermissionList ; const FNamePermissionList&)",
    "insertText": "GetCachedPermissionListForStruct(const UStruct* Struct)"
  },
  {
    "label": "GetCachedPermissionListForStructHelper()",
    "kind": "Method",
    "detail": "Function (const FNamePermissionList&)",
    "insertText": "GetCachedPermissionListForStructHelper(const UStruct* Struct, bool& bInOutShouldAllowListAllProperties)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class FPropertyEditorPermissionList : public FPropertyPermissionList { public : FPropertyEditorPermissionList&)",
    "insertText": "Get()"
  },
  {
    "label": "ShouldShowMenuEntries()",
    "kind": "Method",
    "detail": "Function (FPropertyEditorPermissionList PermissionList ; return PermissionList ; } bool)",
    "insertText": "ShouldShowMenuEntries()"
  },
  {
    "label": "FPropertyEditorPermissionList()",
    "kind": "Method",
    "detail": "Function (bShouldShowMenuEntries = bShow ; } private :)",
    "insertText": "FPropertyEditorPermissionList()"
  },
  {
    "label": "FHiddenPropertyPermissionList()",
    "kind": "Method",
    "detail": "Function (FHiddenPropertyPermissionList PermissionList ; return PermissionList ; } private :)",
    "insertText": "FHiddenPropertyPermissionList()"
  }
]