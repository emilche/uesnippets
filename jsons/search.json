[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "_DiffT1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_DiffT1"
  },
  {
    "label": "_DiffT2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_DiffT2"
  },
  {
    "label": "_ForwardIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator1"
  },
  {
    "label": "_ForwardIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator2"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Searcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Searcher"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_SEARCH_H # define _LIBCPP___ALGORITHM_SEARCH_H # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__functional / identity . h> # include<__iterator / advance . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__type_traits / is_callable . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Iter1, class _Sent1, class _Iter2, class _Sent2, class _Pred, class _Proj1, class _Proj2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter1, _Iter1> __search_forward_impl(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2)"
  },
  {
    "label": "__advance_to()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "__advance_to(__first1, __last1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(std::__invoke(__pred, std::__invoke(__proj1, *__first1), std::__invoke(__proj2, *__first2)))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; } _Iter1 __m1 = __first1 ; _Iter2 __m2 = __first2 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!std::__invoke(__pred, std::__invoke(__proj1, *__m1), std::__invoke(__proj2, *__m2)))"
  },
  {
    "label": "__search_random_access_impl()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; break ; } } } } template<class _AlgPolicy,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Pred,class _Proj1,class _Proj2,class _DiffT1,class _DiffT2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter1,_Iter1>)",
    "insertText": "__search_random_access_impl(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2, _DiffT1 __size1, _DiffT2 __size2)"
  },
  {
    "label": "_DiffT1()",
    "kind": "Method",
    "detail": "Function (const _Iter1 __s = __first1 + __size1 -)",
    "insertText": "_DiffT1(__size2 - 1)"
  },
  {
    "label": "__search_impl()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; break ; } } } } template<class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Pred,class _Proj1,class _Proj2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter1,_Iter1>)",
    "insertText": "__search_impl(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2, __enable_if_t<__is_cpp17_random_access_iterator<_Iter1>::value && __is_cpp17_random_access_iterator<_Iter2>::value>* = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto __size2 = __last2 - __first2 ;)",
    "insertText": "if(__size2 == 0) return std::make_pair(__first1, __first1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto __size1 = __last1 - __first1 ;)",
    "insertText": "if(__size1 < __size2)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (} return std::__search_random_access_impl<)",
    "insertText": "_ClassicAlgPolicy(__first1, __last1, __first2, __last2, __pred, __proj1, __proj2, __size1, __size2)"
  },
  {
    "label": "__search_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Pred,class _Proj1,class _Proj2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter1,_Iter1>)",
    "insertText": "__search_impl(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred& __pred, _Proj1& __proj1, _Proj2& __proj2, __enable_if_t<__is_cpp17_forward_iterator<_Iter1>::value && __is_cpp17_forward_iterator<_Iter2>::value && !(__is_cpp17_random_access_iterator<_Iter1>::value && __is_cpp17_random_access_iterator<_Iter2>::value)>* = nullptr)"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator1)",
    "insertText": "search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)"
  },
  {
    "label": "__identity()",
    "kind": "Method",
    "detail": "Function (auto __proj =)",
    "insertText": "__identity()"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator1)",
    "insertText": "search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (using __v1 = iterator_traits<_ForwardIterator1>::value_type ; using __v2 = iterator_traits<_ForwardIterator2>::value_type ; return)",
    "insertText": "search(__first1, __last1, __first2, __last2, __equal_to<__v1, __v2>())"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 4 template<class _ForwardIterator,class _Searcher> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "search(_ForwardIterator __f, _ForwardIterator __l, const _Searcher& __s)"
  }
]