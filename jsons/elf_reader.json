[
  {
    "label": "ReadElfBuildId()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_ELF_READER_H_ # define BASE_DEBUG_ELF_READER_H_ # include<elf . h> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / hash / sha1 . h \" # include \" base / strings / string_piece . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # if __SIZEOF_POINTER__ = = 4 using Phdr = Elf32_Phdr ; # else using Phdr = Elf64_Phdr ; # endif namespace base { namespace debug { size_t kMaxBuildIdStringLength = kSHA1Length* 2 ; using ElfBuildIdBuffer = char [ kMaxBuildIdStringLength + 1 ] ; size_t BASE_EXPORT)",
    "insertText": "ReadElfBuildId(const void* elf_mapped_base, bool uppercase, ElfBuildIdBuffer build_id)"
  },
  {
    "label": "ReadElfLibraryName()",
    "kind": "Method",
    "detail": "Function (absl::optional<StringPiece> BASE_EXPORT)",
    "insertText": "ReadElfLibraryName(const void* elf_mapped_base)"
  },
  {
    "label": "GetElfProgramHeaders()",
    "kind": "Method",
    "detail": "Function (span<const Phdr> BASE_EXPORT)",
    "insertText": "GetElfProgramHeaders(const void* elf_mapped_base)"
  },
  {
    "label": "GetRelocationOffset()",
    "kind": "Method",
    "detail": "Function (size_t BASE_EXPORT)",
    "insertText": "GetRelocationOffset(const void* elf_mapped_base)"
  }
]