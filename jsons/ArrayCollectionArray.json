[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TArrayCollectionArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayCollectionArray"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TArrayCollectionArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Chaos / Array . h \" # include \" Chaos / ArrayCollectionArrayBase . h \" # include<algorithm> namespace Chaos { template<class T> class TArrayCollectionArray : public TArrayCollectionArrayBase,public TArray<T> { using TArray<T>::SetNum ; using TArray<T>::RemoveAt ; using TArray<T>::RemoveAtSwap ; using TArray<T>::Emplace ; using TArray<T>::Shrink ; using TArray<T>::Max ; public : EAllowShrinking AllowShrinkOnRemove = EAllowShrinking::No ; using TArray<T>::Num ;)",
    "insertText": "TArrayCollectionArray() : TArray<T>()"
  },
  {
    "label": "TArrayCollectionArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TArrayCollectionArray(const TArrayCollectionArray<T>& Other)"
  },
  {
    "label": "TArrayCollectionArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayCollectionArray(TArrayCollectionArray<T>&& Other) : TArray<T>(MoveTemp(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TArrayCollectionArray&)",
    "insertText": "operator(TArrayCollectionArray<T>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<T)",
    "insertText": "operator(MoveTemp(Other))"
  },
  {
    "label": "TArrayCollectionArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TArrayCollectionArray()"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Fill(const T& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArray<T)",
    "insertText": "operator(Idx)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} } TArrayCollectionArray<T>)",
    "insertText": "Clone()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (TArrayCollectionArray<T> NewArray ; static_cast<TArray<)",
    "insertText": "T(NewArray) = static_cast<TArray<T>>(*this)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const int32 Slack =)",
    "insertText": "Max() - Num()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Resize(const int Num)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(Num, AllowShrinkOnRemove)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAt(const int Idx, const int Count)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (TArray<T)",
    "insertText": "RemoveAt(Idx, Count, AllowShrinkOnRemove)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwap(const int Idx)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (TArray<T)",
    "insertText": "RemoveAtSwap(Idx, 1, AllowShrinkOnRemove)"
  },
  {
    "label": "MoveToOtherArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveToOtherArray(const int Idx, TArrayCollectionArrayBase& Other)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto& OtherTArray = static_cast<TArrayCollectionArray<)",
    "insertText": "T(Other)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OtherTArray .)",
    "insertText": "Emplace(MoveTemp(TArray<T>::operator [](Idx)))"
  },
  {
    "label": "SizeOfElem()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "SizeOfElem()"
  }
]