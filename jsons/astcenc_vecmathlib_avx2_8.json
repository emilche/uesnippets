[
  {
    "label": "vfloat8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vfloat8"
  },
  {
    "label": "vint8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vint8"
  },
  {
    "label": "vmask8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vmask8"
  },
  {
    "label": "astcenc_mm256_set_m128i()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTC_VECMATHLIB_AVX2_8_H_INCLUDED # define ASTC_VECMATHLIB_AVX2_8_H_INCLUDED # ifndef ASTCENC_SIMD_INLINE # error \" Include astcenc_vecmathlib . h,do not include directly \" # endif # include<cstdio> # define)",
    "insertText": "astcenc_mm256_set_m128i(m, n) _mm256_insertf128_si256(_mm256_castsi128_si256((n)), (m), 1)"
  },
  {
    "label": "vfloat8()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat8()"
  },
  {
    "label": "vfloat8()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat8(const float *p)"
  },
  {
    "label": "_mm256_loadu_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_loadu_ps(p)"
  },
  {
    "label": "vfloat8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat8(float a)"
  },
  {
    "label": "_mm256_set1_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_set1_ps(a)"
  },
  {
    "label": "vfloat8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat8(float a, float b, float c, float d, float e, float f, float g, float h)"
  },
  {
    "label": "_mm256_set_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_set_ps(h, g, f, e, d, c, b, a)"
  },
  {
    "label": "vfloat8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vfloat8(__m256 a)"
  },
  {
    "label": "lane()",
    "kind": "Method",
    "detail": "Function (m = a ; } template<int l> ASTCENC_SIMD_INLINE float)",
    "insertText": "lane()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang__) && defined(_MSC_VER)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (# else union { __m256 m ; float f [ 8 ] ; } cvt ; cvt . m = m ; return cvt . f [ l ] ; # endif } ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "zero()"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "load1(const float* p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "loada(const float* p)"
  },
  {
    "label": "lane_id()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "lane_id()"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (} __m256 m ; } ; struct vint8 { ASTCENC_SIMD_INLINE)",
    "insertText": "vint8()"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (ASTCENC_SIMD_INLINE)",
    "insertText": "vint8(const int *p)"
  },
  {
    "label": "_mm256_loadu_si256()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_loadu_si256(reinterpret_cast<const __m256i*>(p))"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint8(const uint8_t *p)"
  },
  {
    "label": "_mm256_cvtepu8_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_cvtepu8_epi32(_mm_cvtsi64_si128(*reinterpret_cast<const long long*>(p)))"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint8(int a)"
  },
  {
    "label": "_mm256_set1_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_set1_epi32(a)"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint8(int a, int b, int c, int d, int e, int f, int g, int h)"
  },
  {
    "label": "_mm256_set_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_set_epi32(h, g, f, e, d, c, b, a)"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vint8(__m256i a)"
  },
  {
    "label": "load1()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "load1(const int* p)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i a =)",
    "insertText": "_mm_set1_epi32(*p)"
  },
  {
    "label": "loada()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "loada(const int* p)"
  },
  {
    "label": "vmask8()",
    "kind": "Method",
    "detail": "Function (} __m256i m ; } ; struct vmask8 { ASTCENC_SIMD_INLINE)",
    "insertText": "vmask8(__m256 a)"
  },
  {
    "label": "vmask8()",
    "kind": "Method",
    "detail": "Function (m = a ; } ASTCENC_SIMD_INLINE)",
    "insertText": "vmask8(__m256i a)"
  },
  {
    "label": "_mm256_castsi256_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_castsi256_ps(a)"
  },
  {
    "label": "vmask8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE)",
    "insertText": "vmask8(bool a)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (vint8)",
    "insertText": "mask(a == false ? 0 : -1)"
  },
  {
    "label": "_mm256_castsi256_ps()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm256_castsi256_ps(mask.m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} __m256 m ; } ; ASTCENC_SIMD_INLINE vmask8)",
    "insertText": "operator(vmask8 a, vmask8 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vmask8)",
    "insertText": "operator(vmask8 a)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE unsigned int)",
    "insertText": "mask(vmask8 a)"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE bool)",
    "insertText": "any(vmask8 a)"
  },
  {
    "label": "all()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE bool)",
    "insertText": "all(vmask8 a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "operator(vint8 a, vint8 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8&)",
    "insertText": "operator(vint8& a, const vint8& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "operator(vint8 a)"
  },
  {
    "label": "lsl()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint8)",
    "insertText": "lsl(vint8 a)"
  },
  {
    "label": "asr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint8)",
    "insertText": "asr(vint8 a)"
  },
  {
    "label": "lsr()",
    "kind": "Method",
    "detail": "Function (} template<int s> ASTCENC_SIMD_INLINE vint8)",
    "insertText": "lsr(vint8 a)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "min(vint8 a, vint8 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "max(vint8 a, vint8 b)"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "hmin(vint8 a)"
  },
  {
    "label": "_mm_min_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i m =)",
    "insertText": "_mm_min_epi32(_mm256_extracti128_si256(a.m, 0), _mm256_extracti128_si256(a.m, 1))"
  },
  {
    "label": "_mm_min_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_min_epi32(m, _mm_shuffle_epi32(m, _MM_SHUFFLE(0,0,3,2)))"
  },
  {
    "label": "_mm_min_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_min_epi32(m, _mm_shuffle_epi32(m, _MM_SHUFFLE(0,0,0,1)))"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_shuffle_epi32(m, _MM_SHUFFLE(0,0,0,0))"
  },
  {
    "label": "astcenc_mm256_set_m128i()",
    "kind": "Method",
    "detail": "Function (__m256i r =)",
    "insertText": "astcenc_mm256_set_m128i(m, m)"
  },
  {
    "label": "vmin()",
    "kind": "Method",
    "detail": "Function (vint8)",
    "insertText": "vmin(r)"
  },
  {
    "label": "_mm_max_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i m =)",
    "insertText": "_mm_max_epi32(_mm256_extracti128_si256(a.m, 0), _mm256_extracti128_si256(a.m, 1))"
  },
  {
    "label": "_mm_max_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_max_epi32(m, _mm_shuffle_epi32(m, _MM_SHUFFLE(0,0,3,2)))"
  },
  {
    "label": "_mm_max_epi32()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "_mm_max_epi32(m, _mm_shuffle_epi32(m, _MM_SHUFFLE(0,0,0,1)))"
  },
  {
    "label": "vmax()",
    "kind": "Method",
    "detail": "Function (vint8)",
    "insertText": "vmax(r)"
  },
  {
    "label": "_mm256_store_si256()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm256_store_si256(reinterpret_cast<__m256i*>(p), a.m)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vint8 a, int* p)"
  },
  {
    "label": "_mm256_storeu_si256()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm256_storeu_si256(reinterpret_cast<__m256i*>(p), a.m)"
  },
  {
    "label": "store_nbytes()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store_nbytes(vint8 a, uint8_t* p)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64(reinterpret_cast<__m128i*>(p), _mm256_extracti128_si256(a.m, 0))"
  },
  {
    "label": "gatheri()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "gatheri(const int* base, vint8 indices)"
  },
  {
    "label": "pack_low_bytes()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "pack_low_bytes(vint8 v)"
  },
  {
    "label": "_mm256_set_epi8()",
    "kind": "Method",
    "detail": "Function (__m256i shuf =)",
    "insertText": "_mm256_set_epi8(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 24, 20, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 8, 4, 0)"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (__m256i a =)",
    "insertText": "_mm256_shuffle_epi8(v.m, shuf)"
  },
  {
    "label": "_mm256_extracti128_si256()",
    "kind": "Method",
    "detail": "Function (__m128i a0 =)",
    "insertText": "_mm256_extracti128_si256(a, 0)"
  },
  {
    "label": "_mm256_extracti128_si256()",
    "kind": "Method",
    "detail": "Function (__m128i a1 =)",
    "insertText": "_mm256_extracti128_si256(a, 1)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i b =)",
    "insertText": "_mm_unpacklo_epi32(a0, a1)"
  },
  {
    "label": "astcenc_mm256_set_m128i()",
    "kind": "Method",
    "detail": "Function (__m256i r =)",
    "insertText": "astcenc_mm256_set_m128i(b, b)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "select(vint8 a, vint8 b, vmask8 cond)"
  },
  {
    "label": "_mm256_castps_si256()",
    "kind": "Method",
    "detail": "Function (__m256i condi =)",
    "insertText": "_mm256_castps_si256(cond.m)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "operator(vfloat8 a, vfloat8 b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8&)",
    "insertText": "operator(vfloat8& a, const vfloat8& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "operator(vfloat8 a, float b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "operator(float a, vfloat8 b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "min(vfloat8 a, vfloat8 b)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "min(vfloat8 a, float b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "max(vfloat8 a, vfloat8 b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "max(vfloat8 a, float b)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "clamp(float min, float max, vfloat8 a)"
  },
  {
    "label": "_mm256_max_ps()",
    "kind": "Method",
    "detail": "Function (a . m =)",
    "insertText": "_mm256_max_ps(a.m, _mm256_set1_ps(min))"
  },
  {
    "label": "_mm256_min_ps()",
    "kind": "Method",
    "detail": "Function (a . m =)",
    "insertText": "_mm256_min_ps(a.m, _mm256_set1_ps(max))"
  },
  {
    "label": "_mm256_max_ps()",
    "kind": "Method",
    "detail": "Function (a . m =)",
    "insertText": "_mm256_max_ps(a.m, _mm256_setzero_ps())"
  },
  {
    "label": "_mm256_min_ps()",
    "kind": "Method",
    "detail": "Function (a . m =)",
    "insertText": "_mm256_min_ps(a.m, _mm256_set1_ps(1.0f))"
  },
  {
    "label": "_mm256_castsi256_ps()",
    "kind": "Method",
    "detail": "Function (__m256 msk =)",
    "insertText": "_mm256_castsi256_ps(_mm256_set1_epi32(0x7fffffff))"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "round(vfloat8 a)"
  },
  {
    "label": "vfloat8()",
    "kind": "Method",
    "detail": "Function (int flags = _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC ; return)",
    "insertText": "vfloat8(_mm256_round_ps(a.m, flags))"
  },
  {
    "label": "hmin()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "hmin(vfloat8 a)"
  },
  {
    "label": "_mm256_castps256_ps128()",
    "kind": "Method",
    "detail": "Function (__m128 vlow =)",
    "insertText": "_mm256_castps256_ps128(a.m)"
  },
  {
    "label": "_mm256_extractf128_ps()",
    "kind": "Method",
    "detail": "Function (__m128 vhigh =)",
    "insertText": "_mm256_extractf128_ps(a.m, 1)"
  },
  {
    "label": "_mm_min_ps()",
    "kind": "Method",
    "detail": "Function (vlow =)",
    "insertText": "_mm_min_ps(vlow, vhigh)"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (__m128 shuf =)",
    "insertText": "_mm_shuffle_ps(vlow, vlow, _MM_SHUFFLE(2, 3, 0, 1))"
  },
  {
    "label": "_mm_min_ps()",
    "kind": "Method",
    "detail": "Function (__m128 mins =)",
    "insertText": "_mm_min_ps(vlow, shuf)"
  },
  {
    "label": "_mm_movehl_ps()",
    "kind": "Method",
    "detail": "Function (shuf =)",
    "insertText": "_mm_movehl_ps(shuf, mins)"
  },
  {
    "label": "_mm_min_ss()",
    "kind": "Method",
    "detail": "Function (mins =)",
    "insertText": "_mm_min_ss(mins, shuf)"
  },
  {
    "label": "_mm256_insertf128_ps()",
    "kind": "Method",
    "detail": "Function (__m256 r =)",
    "insertText": "_mm256_insertf128_ps(_mm256_castps128_ps256(mins), mins, 1)"
  },
  {
    "label": "hmin_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hmin_s(vfloat8 a)"
  },
  {
    "label": "hmax()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "hmax(vfloat8 a)"
  },
  {
    "label": "_mm_max_ps()",
    "kind": "Method",
    "detail": "Function (vhigh =)",
    "insertText": "_mm_max_ps(vlow, vhigh)"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (__m128 shuf =)",
    "insertText": "_mm_shuffle_ps(vhigh, vhigh, _MM_SHUFFLE(2, 3, 0, 1))"
  },
  {
    "label": "_mm_max_ps()",
    "kind": "Method",
    "detail": "Function (__m128 maxs =)",
    "insertText": "_mm_max_ps(vhigh, shuf)"
  },
  {
    "label": "_mm_movehl_ps()",
    "kind": "Method",
    "detail": "Function (shuf =)",
    "insertText": "_mm_movehl_ps(shuf,maxs)"
  },
  {
    "label": "_mm_max_ss()",
    "kind": "Method",
    "detail": "Function (maxs =)",
    "insertText": "_mm_max_ss(maxs, shuf)"
  },
  {
    "label": "_mm256_insertf128_ps()",
    "kind": "Method",
    "detail": "Function (__m256 r =)",
    "insertText": "_mm256_insertf128_ps(_mm256_castps128_ps256(maxs), maxs, 1)"
  },
  {
    "label": "hmax_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hmax_s(vfloat8 a)"
  },
  {
    "label": "hadd_s()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE float)",
    "insertText": "hadd_s(vfloat8 a)"
  },
  {
    "label": "lo()",
    "kind": "Method",
    "detail": "Function (vfloat4)",
    "insertText": "lo(_mm256_extractf128_ps(a.m, 0))"
  },
  {
    "label": "hi()",
    "kind": "Method",
    "detail": "Function (vfloat4)",
    "insertText": "hi(_mm256_extractf128_ps(a.m, 1))"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "select(vfloat8 a, vfloat8 b, vmask8 cond)"
  },
  {
    "label": "select_msb()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "select_msb(vfloat8 a, vfloat8 b, vmask8 cond)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "haccumulate(vfloat4& accum, vfloat8 a)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "haccumulate(accum, lo)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "haccumulate(accum, hi)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "haccumulate(vfloat8& accum, vfloat8 a)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (accum + = a ; } ASTCENC_SIMD_INLINE void)",
    "insertText": "haccumulate(vfloat4& accum, vfloat8 a, vmask8 m)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "select(vfloat8::zero(), a, m)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "haccumulate(accum, a)"
  },
  {
    "label": "haccumulate()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "haccumulate(vfloat8& accum, vfloat8 a, vmask8 m)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "sqrt(vfloat8 a)"
  },
  {
    "label": "gatherf()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "gatherf(const float* base, vint8 indices)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store(vfloat8 a, float* p)"
  },
  {
    "label": "_mm256_storeu_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm256_storeu_ps(p, a.m)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "storea(vfloat8 a, float* p)"
  },
  {
    "label": "_mm256_store_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm256_store_ps(p, a.m)"
  },
  {
    "label": "float_to_int()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "float_to_int(vfloat8 a)"
  },
  {
    "label": "float_to_int_rtn()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "float_to_int_rtn(vfloat8 a)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "round(a)"
  },
  {
    "label": "int_to_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "int_to_float(vint8 a)"
  },
  {
    "label": "float_as_int()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "float_as_int(vfloat8 a)"
  },
  {
    "label": "int_as_float()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vfloat8)",
    "insertText": "int_as_float(vint8 a)"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint8& t0p)"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (__m128i t0n = t0 . m ; t0p =)",
    "insertText": "vint8(astcenc_mm256_set_m128i(t0n, t0n))"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint8& t0p, vint8& t1p)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i t1n =)",
    "insertText": "_mm_xor_si128(t0.m, t1.m)"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (t1p =)",
    "insertText": "vint8(astcenc_mm256_set_m128i(t1n, t1n))"
  },
  {
    "label": "vtable_prepare()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "vtable_prepare(vint4 t0, vint4 t1, vint4 t2, vint4 t3, vint8& t0p, vint8& t1p, vint8& t2p, vint8& t3p)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i t2n =)",
    "insertText": "_mm_xor_si128(t1.m, t2.m)"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (t2p =)",
    "insertText": "vint8(astcenc_mm256_set_m128i(t2n, t2n))"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i t3n =)",
    "insertText": "_mm_xor_si128(t2.m, t3.m)"
  },
  {
    "label": "vint8()",
    "kind": "Method",
    "detail": "Function (t3p =)",
    "insertText": "vint8(astcenc_mm256_set_m128i(t3n, t3n))"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "vtable_8bt_32bi(vint8 t0, vint8 idx)"
  },
  {
    "label": "_mm256_or_si256()",
    "kind": "Method",
    "detail": "Function (__m256i idxx =)",
    "insertText": "_mm256_or_si256(idx.m, _mm256_set1_epi32(static_cast<int>(0xFFFFFF00)))"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (__m256i result =)",
    "insertText": "_mm256_shuffle_epi8(t0.m, idxx)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "vtable_8bt_32bi(vint8 t0, vint8 t1, vint8 idx)"
  },
  {
    "label": "_mm256_sub_epi8()",
    "kind": "Method",
    "detail": "Function (idxx =)",
    "insertText": "_mm256_sub_epi8(idxx, _mm256_set1_epi8(16))"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (__m256i result2 =)",
    "insertText": "_mm256_shuffle_epi8(t1.m, idxx)"
  },
  {
    "label": "_mm256_xor_si256()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "_mm256_xor_si256(result, result2)"
  },
  {
    "label": "vtable_8bt_32bi()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "vtable_8bt_32bi(vint8 t0, vint8 t1, vint8 t2, vint8 t3, vint8 idx)"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (result2 =)",
    "insertText": "_mm256_shuffle_epi8(t2.m, idxx)"
  },
  {
    "label": "_mm256_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (result2 =)",
    "insertText": "_mm256_shuffle_epi8(t3.m, idxx)"
  },
  {
    "label": "interleave_rgba8()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE vint8)",
    "insertText": "interleave_rgba8(vint8 r, vint8 g, vint8 b, vint8 a)"
  },
  {
    "label": "store_lanes_masked()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "store_lanes_masked(int* base, vint8 data, vmask8 mask)"
  },
  {
    "label": "_mm256_maskstore_epi32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm256_maskstore_epi32(base, _mm256_castps_si256(mask.m), data.m)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "print(vint8 a)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(ASTCENC_VECALIGN)"
  },
  {
    "label": "storea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storea(a, v)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"v8_i32:\\n %8d %8d %8d %8d %8d %8d %8d %8d\\n\", v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7])"
  },
  {
    "label": "printx()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "printx(vint8 a)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"v8_i32:\\n %08x %08x %08x %08x %08x %08x %08x %08x\\n\", v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7])"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "print(vfloat8 a)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"v8_f32:\\n %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f %0.4f\\n\", static_cast<double>(v[0]), static_cast<double>(v[1]), static_cast<double>(v[2]), static_cast<double>(v[3]), static_cast<double>(v[4]), static_cast<double>(v[5]), static_cast<double>(v[6]), static_cast<double>(v[7]))"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} ASTCENC_SIMD_INLINE void)",
    "insertText": "print(vmask8 a)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(select(vint8(0), vint8(1), a))"
  }
]