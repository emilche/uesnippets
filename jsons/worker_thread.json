[
  {
    "label": "WorkerThreadObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThreadObserver"
  },
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "WaitForWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForWork(WaitableEvent* wake_up_event)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(scoped_refptr<SingleThreadTaskRunner> io_thread_task_runner_,\n             WorkerThreadObserver* worker_thread_observer = nullptr)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "MaybeUpdateThreadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateThreadType()"
  },
  {
    "label": "BeginUnusedPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUnusedPeriod()"
  },
  {
    "label": "EndUnusedPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUnusedPeriod()"
  },
  {
    "label": "UpdateThreadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadType(ThreadType desired_thread_type)"
  },
  {
    "label": "RunPooledWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPooledWorker()"
  },
  {
    "label": "RunBackgroundPooledWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundPooledWorker()"
  },
  {
    "label": "RunSharedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSharedWorker()"
  },
  {
    "label": "RunBackgroundSharedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundSharedWorker()"
  },
  {
    "label": "RunDedicatedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDedicatedWorker()"
  },
  {
    "label": "RunBackgroundDedicatedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundDedicatedWorker()"
  },
  {
    "label": "RunSharedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSharedCOMWorker()"
  },
  {
    "label": "RunBackgroundSharedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundSharedCOMWorker()"
  },
  {
    "label": "RunDedicatedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDedicatedCOMWorker()"
  },
  {
    "label": "RunBackgroundDedicatedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundDedicatedCOMWorker()"
  },
  {
    "label": "RunWorker()",
    "kind": "Method",
    "detail": "Function (NOT_TAIL_CALLED)",
    "insertText": "RunWorker()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (thread_handle_)",
    "insertText": "GUARDED_BY(thread_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_used_time_)",
    "insertText": "GUARDED_BY(thread_lock_)"
  }
]