[
  {
    "label": "WorkerThreadObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThreadObserver"
  },
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RefCountedThreadSafe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedThreadSafe"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_WORKER_THREAD_H_ # define BASE_TASK_THREAD_POOL_WORKER_THREAD_H_ # include<memory> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / ref_counted . h \" # include \" base / synchronization / atomic_flag . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / thread_pool / task_source . h \" # include \" base / task / thread_pool / tracked_ref . h \" # include \" base / thread_annotations . h \" # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" namespace base { class WorkerThreadObserver ; namespace internal { class TaskTracker ; class BASE_EXPORT WorkerThread : public RefCountedThreadSafe<WorkerThread>,public PlatformThread::Delegate { public : enum class ThreadLabel { POOLED,SHARED,DEDICATED,# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Delegate { public : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "GetThreadLabel()",
    "kind": "Method",
    "detail": "Function (ThreadLabel)",
    "insertText": "GetThreadLabel()"
  },
  {
    "label": "OnMainEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMainEntry(WorkerThread* worker)"
  },
  {
    "label": "GetWork()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "GetWork(WorkerThread* worker)"
  },
  {
    "label": "DidProcessTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidProcessTask(RegisteredTaskSource task_source)"
  },
  {
    "label": "GetSleepTimeout()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetSleepTimeout()"
  },
  {
    "label": "WaitForWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForWork(WaitableEvent* wake_up_event)"
  },
  {
    "label": "OnMainExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMainExit(WorkerThread* worker)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (} TimeDelta kPurgeThreadCacheIdleDelay =)",
    "insertText": "Seconds(1)"
  },
  {
    "label": "WorkerThread()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "WorkerThread(ThreadType thread_type_hint, std::unique_ptr<Delegate> delegate, TrackedRef<TaskTracker> task_tracker, const CheckedLock* predecessor_lock = nullptr)"
  },
  {
    "label": "WorkerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkerThread(const WorkerThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WorkerThread&)",
    "insertText": "operator(const WorkerThread&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(scoped_refptr<SingleThreadTaskRunner> io_thread_task_runner_, WorkerThreadObserver* worker_thread_observer = nullptr)"
  },
  {
    "label": "WakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUp()"
  },
  {
    "label": "delegate()",
    "kind": "Method",
    "detail": "Function (WorkerThread::Delegate*)",
    "insertText": "delegate()"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "ThreadAliveForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ThreadAliveForTesting()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "MaybeUpdateThreadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateThreadType()"
  },
  {
    "label": "BeginUnusedPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUnusedPeriod()"
  },
  {
    "label": "EndUnusedPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUnusedPeriod()"
  },
  {
    "label": "GetLastUsedTime()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "GetLastUsedTime()"
  },
  {
    "label": "WorkerThread()",
    "kind": "Method",
    "detail": "Function (private : class RefCountedThreadSafe<WorkerThread> ; class Thread ; ~)",
    "insertText": "WorkerThread()"
  },
  {
    "label": "ShouldExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExit()"
  },
  {
    "label": "GetDesiredThreadType()",
    "kind": "Method",
    "detail": "Function (ThreadType)",
    "insertText": "GetDesiredThreadType()"
  },
  {
    "label": "UpdateThreadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateThreadType(ThreadType desired_thread_type)"
  },
  {
    "label": "ThreadMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadMain()"
  },
  {
    "label": "RunPooledWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunPooledWorker()"
  },
  {
    "label": "RunBackgroundPooledWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundPooledWorker()"
  },
  {
    "label": "RunSharedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSharedWorker()"
  },
  {
    "label": "RunBackgroundSharedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundSharedWorker()"
  },
  {
    "label": "RunDedicatedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDedicatedWorker()"
  },
  {
    "label": "RunBackgroundDedicatedWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundDedicatedWorker()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) void RunSharedCOMWorker()"
  },
  {
    "label": "RunBackgroundSharedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundSharedCOMWorker()"
  },
  {
    "label": "RunDedicatedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunDedicatedCOMWorker()"
  },
  {
    "label": "RunBackgroundDedicatedCOMWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBackgroundDedicatedCOMWorker()"
  },
  {
    "label": "RunWorker()",
    "kind": "Method",
    "detail": "Function (# endif void NOT_TAIL_CALLED)",
    "insertText": "RunWorker()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<WorkerThread> self_ ; CheckedLock thread_lock_ ; PlatformThreadHandle thread_handle_)",
    "insertText": "GUARDED_BY(thread_lock_)"
  }
]