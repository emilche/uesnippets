[
  {
    "label": "FramesComparatorStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FramesComparatorStats"
  },
  {
    "label": "DefaultVideoQualityAnalyzerFramesComparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultVideoQualityAnalyzerFramesComparator"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "DefaultVideoQualityAnalyzerFramesComparator()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_FRAMES_COMPARATOR_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_FRAMES_COMPARATOR_H_ # include<deque> # include<map> # include<utility> # include<vector> # include \" api / array_view . h \" # include \" rtc_base / event . h \" # include \" rtc_base / platform_thread . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" system_wrappers / include / clock . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_cpu_measurer . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_internal_shared_objects . h \" # include \" test / pc / e2e / analyzer / video / default_video_quality_analyzer_shared_objects . h \" namespace webrtc { struct FramesComparatorStats { SamplesStatsCounter comparisons_queue_size ; int64_t comparisons_done = 0 ; int64_t cpu_overloaded_comparisons_done = 0 ; int64_t memory_overloaded_comparisons_done = 0 ; } ; class DefaultVideoQualityAnalyzerFramesComparator { public :)",
    "insertText": "DefaultVideoQualityAnalyzerFramesComparator(webrtc::Clock* clock, DefaultVideoQualityAnalyzerCpuMeasurer& cpu_measurer, DefaultVideoQualityAnalyzerOptions options = {}) : options_(options), clock_(clock), cpu_measurer_(cpu_measurer)"
  },
  {
    "label": "DefaultVideoQualityAnalyzerFramesComparator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DefaultVideoQualityAnalyzerFramesComparator()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop({})"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(int max_threads_count)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(const std::map<InternalStatsKey, Timestamp>& last_rendered_frame_times)"
  },
  {
    "label": "EnsureStatsForStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureStatsForStream(size_t stream_index, size_t sender_peer_index, size_t peers_count, Timestamp captured_time, Timestamp start_time)"
  },
  {
    "label": "RegisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParticipantInCall(rtc::ArrayView<std::pair<InternalStatsKey, Timestamp>> stream_started_time, Timestamp start_time)"
  },
  {
    "label": "AddComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComparison(InternalStatsKey stats_key, absl::optional<VideoFrame> captured, absl::optional<VideoFrame> rendered, FrameComparisonType type, FrameStats frame_stats)"
  },
  {
    "label": "AddComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComparison(InternalStatsKey stats_key, int skipped_between_rendered, absl::optional<VideoFrame> captured, absl::optional<VideoFrame> rendered, FrameComparisonType type, FrameStats frame_stats)"
  },
  {
    "label": "stream_stats()",
    "kind": "Method",
    "detail": "Function (std::map<InternalStatsKey,StreamStats>)",
    "insertText": "stream_stats()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "ProcessComparisons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessComparisons()"
  },
  {
    "label": "ProcessComparison()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessComparison(const FrameComparison& comparison)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "Now()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const DefaultVideoQualityAnalyzerOptions options_ ; webrtc::Clock* const clock_ ; DefaultVideoQualityAnalyzerCpuMeasurer& cpu_measurer_ ; Mutex mutex_ ; State state_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]