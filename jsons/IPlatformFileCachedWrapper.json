[
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "FCachedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedFileHandle"
  },
  {
    "label": "FCachedReadPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedReadPlatformFile"
  },
  {
    "label": "FCachedFileHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTemplate . h \" # include \" Math / UnrealMathUtility . h \" # include \" Serialization / Archive . h \" # include \" Containers / UnrealString . h \" # include \" Misc / Parse . h \" # include \" Logging / LogMacros . h \" # include \" Misc / DateTime . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / IPlatformFileLogWrapper . h \" # include \" Templates / UniquePtr . h \" class IAsyncReadFileHandle ; class FCachedFileHandle : public IFileHandle { public :)",
    "insertText": "FCachedFileHandle(IFileHandle* InFileHandle, bool bInReadable, bool bInWritable) : FileHandle(InFileHandle) , FilePos(InFileHandle->Tell()) , TellPos(FilePos) , FileSize(InFileHandle->Size()) , bWritable(bInWritable) , bReadable(bInReadable) , CurrentCache(0)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCache()"
  },
  {
    "label": "FCachedFileHandle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCachedFileHandle()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Tell()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Read(uint8* Destination, int64 BytesToRead)"
  },
  {
    "label": "GetCacheIndex()",
    "kind": "Method",
    "detail": "Function (int32 CacheIndex =)",
    "insertText": "GetCacheIndex(FilePos)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (int64 CopyBytes = CacheEnd [ CacheIndex ] - FilePos ;)",
    "insertText": "Memcpy(Destination, BufferCache[CacheIndex]+(FilePos-CacheStart[CacheIndex]), CopyBytes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FilePos + = CopyBytes ; BytesToRead - = CopyBytes ; Destination + = CopyBytes ; })",
    "insertText": "if(InnerSeek(FilePos))"
  },
  {
    "label": "InnerRead()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "InnerRead(Destination, BytesToRead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Result)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FilePos + = BytesToRead ; } } else { Result = true ;)",
    "insertText": "while(BytesToRead && Result)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 AlignedFilePos = FilePos& BufferSizeMask ; uint64 SizeToRead = FMath::Min<)",
    "insertText": "uint64(BufferCacheSize, FileSize-AlignedFilePos)"
  },
  {
    "label": "InnerSeek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InnerSeek(AlignedFilePos)"
  },
  {
    "label": "InnerRead()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "InnerRead(BufferCache[CurrentCache], SizeToRead)"
  },
  {
    "label": "CA_ASSUME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CA_ASSUME(CacheIndex < CacheCount)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 CorrectedBytesToRead = FMath::Min<)",
    "insertText": "uint64(BytesToRead, CacheEnd[CacheIndex]-FilePos)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Destination, BufferCache[CacheIndex]+(FilePos-CacheStart[CacheIndex]), CorrectedBytesToRead)"
  },
  {
    "label": "ReadAt()",
    "kind": "Method",
    "detail": "Function (FilePos + = CorrectedBytesToRead ; Destination + = CorrectedBytesToRead ; BytesToRead - = CorrectedBytesToRead ; } } } return Result ; } bool)",
    "insertText": "ReadAt(uint8* Destination, int64 BytesToRead, int64 Offset)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Write(const uint8* Source, int64 BytesToWrite)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool Result = FileHandle ->)",
    "insertText": "Write(Source, BytesToWrite)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (FilePos + = BytesToWrite ; FileSize = FMath::Max<)",
    "insertText": "int64(FilePos, FileSize)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (TellPos = FilePos ; } return Result ; } int64)",
    "insertText": "Size()"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "Truncate(int64 NewSize)"
  },
  {
    "label": "ShrinkBuffers()",
    "kind": "Method",
    "detail": "Function (FileHandle ->)",
    "insertText": "ShrinkBuffers()"
  },
  {
    "label": "BufferSizeMask()",
    "kind": "Method",
    "detail": "Function (} private : uint32 BufferCacheSize = 6 4* 1 0 2 4 ; uint64)",
    "insertText": "BufferSizeMask((uint64)BufferCacheSize-1)"
  },
  {
    "label": "InnerSeek()",
    "kind": "Method",
    "detail": "Function (uint32 CacheCount = 2 ; bool)",
    "insertText": "InnerSeek(uint64 Pos)"
  },
  {
    "label": "InnerRead()",
    "kind": "Method",
    "detail": "Function (TellPos = Pos ; } return bOk ; } bool)",
    "insertText": "InnerRead(uint8* Dest, uint64 BytesToRead)"
  },
  {
    "label": "GetCacheIndex()",
    "kind": "Method",
    "detail": "Function (TellPos + = BytesToRead ; return true ; } return false ; } int32)",
    "insertText": "GetCacheIndex(int64 Pos)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (CacheStart [ i ] = CacheEnd [ i ] = - 1 ; } } TUniquePtr<IFileHandle> FileHandle ; int64 FilePos ; int64 TellPos ; int64 FileSize ; bool bWritable ; bool bReadable ; uint8 BufferCache [ CacheCount ] [ BufferCacheSize ] ; int64 CacheStart [ CacheCount ] ; int64 CacheEnd [ CacheCount ] ; int32 CurrentCache ; } ; class FCachedReadPlatformFile : public IPlatformFile { IPlatformFile* LowerLevel ; public : const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "FCachedReadPlatformFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedReadPlatformFile() : LowerLevel(nullptr)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} using IPlatformFile::IterateDirectory ; using IPlatformFile::IterateDirectoryRecursively ; using IPlatformFile::IterateDirectoryStat ; using IPlatformFile::IterateDirectoryStatRecursively ; bool)",
    "insertText": "Initialize(IPlatformFile* Inner, const TCHAR* CommandLineParam)"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (LowerLevel = Inner ; return ! ! LowerLevel ; } bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "RequiresCookedData()",
    "kind": "Method",
    "detail": "Function (# ifndef PLATFORM_PROVIDES_FILE_CACHE # define PLATFORM_PROVIDES_FILE_CACHE 0 # endif bool bPlatformProvidesFileCache = PLATFORM_PROVIDES_FILE_CACHE ; bool bPlatformWindows = PLATFORM_WINDOWS ; bool bResult = ! bPlatformProvidesFileCache&& ! bPlatformWindows&&)",
    "insertText": "RequiresCookedData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(PLATFORM_DESKTOP || PLATFORM_PROVIDES_FILE_CACHE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = false ; } else)",
    "insertText": "if(FParse::Param(CmdLine, TEXT(\"CachedReadFile\")))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (bResult = true ; })",
    "insertText": "UE_LOG(LogPlatformFile, Verbose, TEXT(\"%s cached read wrapper\"), bResult ? TEXT(\"Using\") : TEXT(\"Not using\"))"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (} # endif return bResult ; } IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (LowerLevel = NewLowerLevel ; } const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (} FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (LowerLevel ->)",
    "insertText": "SetTimeStamp(Filename, DateTime)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (} FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (} IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (} IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (} FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindFiles(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension)"
  },
  {
    "label": "FindFilesRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindFilesRecursively(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CopyDirectoryTree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CopyDirectoryTree(const TCHAR* DestinationDirectory, const TCHAR* Source, bool bOverwriteAllExisting)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IFileServerMessageHandler* Handler)"
  },
  {
    "label": "OpenAsyncRead()",
    "kind": "Method",
    "detail": "Function (} IAsyncReadFileHandle*)",
    "insertText": "OpenAsyncRead(const TCHAR* Filename)"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (} IMappedFileHandle*)",
    "insertText": "OpenMapped(const TCHAR* Filename)"
  },
  {
    "label": "SetAsyncMinimumPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAsyncMinimumPriority(EAsyncIOPriorityAndFlags MinPriority)"
  },
  {
    "label": "SetAsyncMinimumPriority()",
    "kind": "Method",
    "detail": "Function (LowerLevel ->)",
    "insertText": "SetAsyncMinimumPriority(MinPriority)"
  }
]