[
  {
    "label": "ScalabilityStructureWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalabilityStructureWrapper"
  },
  {
    "label": "EnableTemporalLayers()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_SVC_SCALABILITY_STRUCTURE_TEST_HELPERS_H_ # define MODULES_VIDEO_CODING_SVC_SCALABILITY_STRUCTURE_TEST_HELPERS_H_ # include<stdint . h> # include<vector> # include \" api / array_view . h \" # include \" api / transport / rtp / dependency_descriptor . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" common_video / generic_frame_descriptor / generic_frame_info . h \" # include \" modules / video_coding / chain_diff_calculator . h \" # include \" modules / video_coding / frame_dependencies_calculator . h \" # include \" modules / video_coding / svc / scalable_video_controller . h \" namespace webrtc { VideoBitrateAllocation)",
    "insertText": "EnableTemporalLayers(int s0, int s1 = 0, int s2 = 0)"
  },
  {
    "label": "ScalabilityStructureWrapper()",
    "kind": "Method",
    "detail": "Function (class ScalabilityStructureWrapper { public :)",
    "insertText": "ScalabilityStructureWrapper(ScalableVideoController& structure) : structure_controller_(structure)"
  },
  {
    "label": "GenerateFrames()",
    "kind": "Method",
    "detail": "Function (} std::vector<GenericFrameInfo>)",
    "insertText": "GenerateFrames(int num_temporal_units)"
  },
  {
    "label": "GenerateFrames()",
    "kind": "Method",
    "detail": "Function (std::vector<GenericFrameInfo> frames ;)",
    "insertText": "GenerateFrames(num_temporal_units, frames)"
  },
  {
    "label": "FrameReferencesAreValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrameReferencesAreValid(rtc::ArrayView<const GenericFrameInfo> frames)"
  }
]