[
  {
    "label": "TCoroTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCoroTask"
  },
  {
    "label": "TLaunchedCoroTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLaunchedCoroTask"
  },
  {
    "label": "FLockedTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLockedTask"
  },
  {
    "label": "TCoroFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCoroFrame"
  },
  {
    "label": "FCoroBlockAllocationTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoroBlockAllocationTag"
  },
  {
    "label": "FPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPromise"
  },
  {
    "label": "TFramePromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFramePromise"
  },
  {
    "label": "IPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPromise"
  },
  {
    "label": "FTaskExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskExecutor"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "FCoroPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoroPromise"
  },
  {
    "label": "CoroTask_Detail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoroTask_Detail"
  },
  {
    "label": "FDummyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDummyType"
  },
  {
    "label": "TDummyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDummyType"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Fundamental / Scheduler . h \" # include \" Async / Fundamental / Task . h \" # include \" Async / TaskTrace . h \" # include \" CoreMinimal . h \" # include \" CoroLocalVariable . h \" # include \" CoroutineHandle . h \" # include \" Experimental / ConcurrentLinearAllocator . h \" # include \" HAL / Platform . h \" # include \" Misc / MemStack . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" Templates / Decay . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include<atomic> # if WITH_CPP_COROUTINES # define)",
    "insertText": "coroCheck(...) checkSlow(__VA_ARGS__) #define coroVerify(...) verifySlow(__VA_ARGS__) #define COROFORCEINLINE FORCEINLINE_DEBUGGABLE #if DO_CHECK #define COROCHECK(...) __VA_ARGS__ #else #define COROCHECK(...) #endif #if CPUPROFILERTRACE_ENABLED #define COROPROFILERTRACE(...) __VA_ARGS__ #else #define COROPROFILERTRACE(...) #endif #if UE_TASK_TRACE_ENABLED #define COROTASKTRACE_ENABLED 1 #define COROTASKTRACE(...) __VA_ARGS__ #else #define COROTASKTRACE_ENABLED 0 #define COROTASKTRACE(...) #endif #if defined(_MSC_VER) #define CORO_ALIGNMENT 32 #else #define CORO_ALIGNMENT 8 #endif #define CORO_FRAME(...) TCoroFrame<__VA_ARGS__> #define CORO_TASK(...) TCoroTask<__VA_ARGS__> #define LAUNCHED_TASK(...) TLaunchedCoroTask<__VA_ARGS__> #define CO_AWAIT co_await #define CO_RETURN co_return #define CO_RETURN_TASK(...)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (template<> class TLaunchedCoroTask ; class FLockedTask ; template<> class TCoroFrame ; namespace CoroTask_Detail { struct FCoroBlockAllocationTag : FDefaultBlockAllocationTag { uint32 BlockSize = 2* 1 0 2 4* 1 0 2 4 ; bool AllowOversizedBlocks = false ; bool RequiresAccurateSize = false ; bool InlineBlockAllocation = true ; const char* TagName = \" CoroLinear \" ; } ; class FPromise ; template<> class TFramePromise ; class IPromise { template<> class::TCoroFrame ; template<> class::TCoroTask ; template<> class::TLaunchedCoroTask ; protected : FPromise* Prerequisite = nullptr ; public : COROFORCEINLINE void)",
    "insertText": "Suspend(const FPromise* InPrerequisite)"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Prerequisite == nullptr && InPrerequisite != nullptr)"
  },
  {
    "label": "FPromise()",
    "kind": "Method",
    "detail": "Function (Prerequisite = const_cast<)",
    "insertText": "FPromise(InPrerequisite)"
  },
  {
    "label": "COROPROFILERTRACE()",
    "kind": "Method",
    "detail": "Function (} } ; class FPromise : public IPromise { using ThisType = FPromise ; template<> class::TCoroFrame ; template<> class::TCoroTask ; class::FLockedTask ; template<> class::TLaunchedCoroTask ; private : coroutine_handle_base CoroutineHandle ; LowLevelTasks::FTask Task ; std::atomic_int RefCount { 1 } ; ETaskTag TaskTag = ETaskTag::ENone ; std::atomic<FPromise*> Subsequent { nullptr } ;)",
    "insertText": "COROPROFILERTRACE(uint64 CoroId = ~0ull)"
  },
  {
    "label": "COROPROFILERTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROPROFILERTRACE(uint32 TimerScopeDepth = 0)"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(TaskTrace::FId TraceId = ~0)"
  },
  {
    "label": "IsExpeditable()",
    "kind": "Method",
    "detail": "Function (FCoroLocalState ClsData ; FMemStack MemStack ; public : COROFORCEINLINE bool)",
    "insertText": "IsExpeditable()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} private : COROFORCEINLINE void)",
    "insertText": "Lock()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Prerequisite == nullptr)"
  },
  {
    "label": "FPromise()",
    "kind": "Method",
    "detail": "Function (Prerequisite = reinterpret_cast<)",
    "insertText": "FPromise(~uintptr_t(0))"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(!IsExpeditable())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE void)",
    "insertText": "Execute()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(!CoroutineHandle.done())"
  },
  {
    "label": "SetCoroLocalState()",
    "kind": "Method",
    "detail": "Function (FCoroLocalState* PrevCls =)",
    "insertText": "SetCoroLocalState(&ClsData)"
  },
  {
    "label": "SwapTag()",
    "kind": "Method",
    "detail": "Function (TaskTag =)",
    "insertText": "SwapTag(TaskTag)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FMemStack* PrevMemStack =)",
    "insertText": "Get().Inject(&MemStack)"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(TaskTrace::Started(TraceId))"
  },
  {
    "label": "COROPROFILERTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROPROFILERTRACE(FCpuProfilerTrace::OutputResumeEvent(CoroId, TimerScopeDepth))"
  },
  {
    "label": "CoroutineHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CoroutineHandle()"
  },
  {
    "label": "COROPROFILERTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROPROFILERTRACE(FCpuProfilerTrace::OutputSuspendEvent())"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(CompleteTaskTraceContext())"
  },
  {
    "label": "coroVerify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroVerify(FCoroLocalState::SetCoroLocalState(PrevCls) == &ClsData)"
  },
  {
    "label": "coroVerify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroVerify(FMemStack::Get().Inject(PrevMemStack) == &MemStack)"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(IsExpeditable())"
  },
  {
    "label": "FTaskExecutor()",
    "kind": "Method",
    "detail": "Function (} class FTaskExecutor { FPromise* Promise ; bool bDeferCleanup = false ; public : COROFORCEINLINE)",
    "insertText": "FTaskExecutor(FPromise* InPromise) : Promise(InPromise)"
  },
  {
    "label": "FTaskExecutor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTaskExecutor(const FTaskExecutor&)"
  },
  {
    "label": "FTaskExecutor()",
    "kind": "Method",
    "detail": "Function (COROFORCEINLINE)",
    "insertText": "FTaskExecutor(FTaskExecutor&& Other) : Promise(Other.Promise), bDeferCleanup(Other.bDeferCleanup)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Other . Promise = nullptr ; } COROFORCEINLINE void)",
    "insertText": "operator()()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Promise->IsExpeditable())"
  },
  {
    "label": "done()",
    "kind": "Method",
    "detail": "Function (} bDeferCleanup = ! Promise -> CoroutineHandle .)",
    "insertText": "done()"
  },
  {
    "label": "FTaskExecutor()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE ~)",
    "insertText": "FTaskExecutor()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(CoroExecutorDestructor)"
  },
  {
    "label": "GetInitData()",
    "kind": "Method",
    "detail": "Function (LowLevelTasks::FTask::FInitData InitData = Promise -> Task .)",
    "insertText": "GetInitData()"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (Promise ->)",
    "insertText": "Reschedule(InitData.DebugName, InitData.Priority, InitData.Flags)"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (} } } ; void)",
    "insertText": "Reschedule(const TCHAR* DebugName, LowLevelTasks::ETaskPriority Priority, LowLevelTasks::ETaskFlags Flags)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(CoroReschedule)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Prerequisite && !Prerequisite->IsExpeditable()) ? (Flags & ~LowLevelTasks::ETaskFlags::AllowCancellation) : (Flags | LowLevelTasks::ETaskFlags::AllowCancellation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPromise* NullPromise = nullptr ;)",
    "insertText": "if(Prerequisite && Prerequisite->Subsequent.compare_exchange_strong(NullPromise, this, std::memory_order_release, std::memory_order_relaxed))"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(CompleteTaskTraceContext(false))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Task .)",
    "insertText": "Init(DebugName, Priority, FTaskExecutor(this), Flags)"
  },
  {
    "label": "coroVerify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroVerify(LowLevelTasks::TryLaunch(Task, QueuePreference))"
  },
  {
    "label": "FPromise()",
    "kind": "Method",
    "detail": "Function (} protected : COROFORCEINLINE)",
    "insertText": "FPromise(coroutine_handle_base InCoroutineHandle) : CoroutineHandle(InCoroutineHandle), ClsData(*this)"
  },
  {
    "label": "COROPROFILERTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROPROFILERTRACE(CoroId = FCoroLocalState::GenerateCoroId())"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(TraceId = TaskTrace::GenerateTaskId())"
  },
  {
    "label": "Complete()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE void)",
    "insertText": "Complete()"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(TaskTrace::Scheduled(LocalSubsequent->TraceId))"
  },
  {
    "label": "Yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Yield()"
  },
  {
    "label": "IsCompleted()",
    "kind": "Method",
    "detail": "Function (} } } public : COROFORCEINLINE bool)",
    "insertText": "IsCompleted()"
  },
  {
    "label": "HasSubsequent()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE bool)",
    "insertText": "HasSubsequent()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FPromise* LocalSubsequent = Subsequent .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(LocalSubsequent != reinterpret_cast<FPromise*>(~0ull))"
  },
  {
    "label": "CompleteTaskTraceContext()",
    "kind": "Method",
    "detail": "Function (} private : # if COROTASKTRACE_ENABLED void)",
    "insertText": "CompleteTaskTraceContext(bool AlwaysSchedule = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TaskTrace::FId OldTraceId = TraceId ;)",
    "insertText": "if(!CoroutineHandle.done())"
  },
  {
    "label": "GenerateTaskId()",
    "kind": "Method",
    "detail": "Function (TraceId =)",
    "insertText": "GenerateTaskId()"
  },
  {
    "label": "Launched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Launched(TraceId, GetDebugName(), true, ENamedThreads::Type::AnyThread, 0)"
  },
  {
    "label": "SubsequentAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubsequentAdded(TraceId, OldTraceId)"
  },
  {
    "label": "SubsequentAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubsequentAdded(Prerequisite->TraceId, TraceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AlwaysSchedule)"
  },
  {
    "label": "Scheduled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduled(TraceId)"
  },
  {
    "label": "Finished()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Finished(OldTraceId)"
  },
  {
    "label": "Completed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Completed(OldTraceId)"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "Launch(const TCHAR* DebugName, LowLevelTasks::ETaskPriority Priority, LowLevelTasks::EQueuePreference QueuePreference, LowLevelTasks::ETaskFlags Flags)"
  },
  {
    "label": "IncrementRefCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementRefCount()"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(TaskTrace::Launched(TraceId, DebugName, true, ENamedThreads::Type::AnyThread, 0))"
  },
  {
    "label": "COROTASKTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROTASKTRACE(TaskTrace::Scheduled(TraceId))"
  },
  {
    "label": "TryExpedite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryExpedite(bool bAllowNested)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Prerequisite && Prerequisite->TryExpedite(bAllowNested))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Prerequisite = nullptr ; continue ; })",
    "insertText": "if(CoroutineHandle.done())"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FPromise_Unlock)"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Task.IsCompleted())"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(CoroutineHandle.done())"
  },
  {
    "label": "InvokeOnceAndLaunch()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE bool)",
    "insertText": "InvokeOnceAndLaunch(const TCHAR* DebugName = nullptr, LowLevelTasks::ETaskPriority Priority = LowLevelTasks::ETaskPriority::Inherit, LowLevelTasks::ETaskFlags Flags = LowLevelTasks::ETaskFlags::DefaultFlags)"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reschedule(DebugName, Priority, Flags)"
  },
  {
    "label": "coroVerify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroVerify(RefCount.fetch_add(1, std::memory_order_acquire) <= 2)"
  },
  {
    "label": "DecrementRefCount()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE void)",
    "insertText": "DecrementRefCount()"
  },
  {
    "label": "COROPROFILERTRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "COROPROFILERTRACE(coroCheck(TimerScopeDepth == 0))"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Prerequisite == nullptr || !IsExpeditable())"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Task.GetPriority() == LowLevelTasks::ETaskPriority::Count || CoroutineHandle.done())"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(TaskTag == ETaskTag::ENone)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (CoroutineHandle .)",
    "insertText": "destroy()"
  },
  {
    "label": "unhandled_exception()",
    "kind": "Method",
    "detail": "Function (} } public : # if ! PLATFORM_EXCEPTIONS_DISABLED | | 1 COROFORCEINLINE void)",
    "insertText": "unhandled_exception()"
  },
  {
    "label": "initial_suspend()",
    "kind": "Method",
    "detail": "Function (} # endif COROFORCEINLINE auto)",
    "insertText": "initial_suspend()"
  },
  {
    "label": "final_suspend()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE auto)",
    "insertText": "final_suspend()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } ; template<TReturnType> class)",
    "insertText": "alignas((CORO_ALIGNMENT > alignof(TReturnType)) ? CORO_ALIGNMENT : alignof(TReturnType))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (using BaseType = FPromise ; using ThisType = TPromise<TReturnType> ; TReturnType ReturnValue ; public : using ReturnType = TReturnType ; void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* Ptr)"
  },
  {
    "label": "TPromise()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE)",
    "insertText": "TPromise() : BaseType(coroutine_handle<ThisType>::from_promise(*this))"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE ReturnType)",
    "insertText": "GetResult()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(this->IsCompleted())"
  },
  {
    "label": "return_value()",
    "kind": "Method",
    "detail": "Function (} template<LocalReturnValue> COROFORCEINLINE void)",
    "insertText": "return_value(LocalReturnValue&& Value)"
  },
  {
    "label": "get_return_object()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE ThisType*)",
    "insertText": "get_return_object()"
  },
  {
    "label": "return_void()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE void)",
    "insertText": "return_void()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class)",
    "insertText": "alignas(CORO_ALIGNMENT)"
  },
  {
    "label": "await_suspend()",
    "kind": "Method",
    "detail": "Function (} } ; class FCoroPromise { const IPromise* Promise = nullptr ; public : template<PromiseType> COROFORCEINLINE bool)",
    "insertText": "await_suspend(coroutine_handle<PromiseType> Continuation)"
  },
  {
    "label": "promise()",
    "kind": "Method",
    "detail": "Function (Promise =& Continuation .)",
    "insertText": "promise()"
  },
  {
    "label": "TCoroTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TCoroTask(promise_type* InPromise) : Promise(InPromise)"
  },
  {
    "label": "TCoroTask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCoroTask()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TCoroTask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCoroTask(ThisClass&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Promise =)",
    "insertText": "MoveTemp(Other.Promise)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Other . Promise = nullptr ; } ThisClass&)",
    "insertText": "operator(ThisClass&& Other)"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (Other . Promise = nullptr ; } return* this ; } TLaunchedCoroTask<ReturnType>)",
    "insertText": "Launch(const TCHAR* DebugName = nullptr, LowLevelTasks::ETaskPriority Priority = LowLevelTasks::ETaskPriority::Inherit, LowLevelTasks::EQueuePreference QueuePreference = LowLevelTasks::EQueuePreference::DefaultPreference, LowLevelTasks::ETaskFlags Flags = LowLevelTasks::ETaskFlags::DefaultFlags)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} Promise = nullptr ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(IsValid())"
  },
  {
    "label": "promise()",
    "kind": "Method",
    "detail": "Function (Continuation .)",
    "insertText": "promise().Suspend(Promise)"
  },
  {
    "label": "await_resume()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "await_resume()"
  },
  {
    "label": "FLockedTask()",
    "kind": "Method",
    "detail": "Function (} } ; class [ [ nodiscard ] ] FLockedTask : private TCoroTask<void> {)",
    "insertText": "FLockedTask(promise_type* InPromise) : TCoroTask<void>(InPromise)"
  },
  {
    "label": "FLockedTask()",
    "kind": "Method",
    "detail": "Function (} public : using promise_type = TCoroTask<void>::promise_type ;)",
    "insertText": "FLockedTask()"
  },
  {
    "label": "FLockedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLockedTask(FLockedTask&& Other) : TCoroTask<void>(MoveTemp(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FLockedTask&)",
    "insertText": "operator(FLockedTask&& Other)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "Unlock()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(Promise)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FLockedTask)",
    "insertText": "Create()"
  },
  {
    "label": "TLaunchedCoroTask()",
    "kind": "Method",
    "detail": "Function (co_return ; } } ; template<ReturnType> class [ [ nodiscard ] ] TLaunchedCoroTask : protected TCoroTask<ReturnType> { class CoroTask_Detail::IPromise ; class CoroTask_Detail::FPromise ; class TCoroTask<ReturnType> ; using ThisClass = TLaunchedCoroTask<ReturnType> ;)",
    "insertText": "TLaunchedCoroTask(TCoroTask<ReturnType>&& self) : TCoroTask<ReturnType>(MoveTemp(self))"
  },
  {
    "label": "TLaunchedCoroTask()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TLaunchedCoroTask()"
  },
  {
    "label": "TLaunchedCoroTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TLaunchedCoroTask(ThisClass&& Other) : TCoroTask<ReturnType>(MoveTemp(Other))"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (Other . Promise = nullptr ; } return* this ; } using TCoroTask<ReturnType>::IsValid ; using TCoroTask<ReturnType>::Reset ; using TCoroTask<ReturnType>::GetPromise ; const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "await_ready()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "await_ready()"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(this->IsValid())"
  },
  {
    "label": "promise()",
    "kind": "Method",
    "detail": "Function (Continuation .)",
    "insertText": "promise().Suspend(this->Promise)"
  },
  {
    "label": "TryExpedite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryExpedite()"
  },
  {
    "label": "SpinWait()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "SpinWait()"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (Promise ->)",
    "insertText": "Launch(DebugName, Priority, QueuePreference, Flags)"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (} return TLaunchedCoroTask<)",
    "insertText": "ReturnType(MoveTemp(*this))"
  },
  {
    "label": "TCoroFrame()",
    "kind": "Method",
    "detail": "Function (} template<ReturnType> class [ [ nodiscard ] ] TCoroFrame { public : using promise_type = CoroTask_Detail::TFramePromise<ReturnType> ; coroutine_handle<promise_type> CoroutineHandle ;)",
    "insertText": "TCoroFrame(const TCoroFrame&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TCoroFrame&)",
    "insertText": "operator(const TCoroFrame&)"
  },
  {
    "label": "TCoroFrame()",
    "kind": "Method",
    "detail": "Function (COROFORCEINLINE)",
    "insertText": "TCoroFrame(coroutine_handle<promise_type> InCoroutineHandle) : CoroutineHandle(InCoroutineHandle)"
  },
  {
    "label": "TCoroFrame()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE)",
    "insertText": "TCoroFrame(TCoroFrame&& Other) : CoroutineHandle(MoveTemp(Other.CoroutineHandle))"
  },
  {
    "label": "TCoroFrame()",
    "kind": "Method",
    "detail": "Function (Other . CoroutineHandle = nullptr ; } COROFORCEINLINE ~)",
    "insertText": "TCoroFrame()"
  },
  {
    "label": "AsyncIsDone()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE bool)",
    "insertText": "AsyncIsDone(const CoroTask_Detail::IPromise* ParentPromise)"
  },
  {
    "label": "coroCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "coroCheck(ParentPromise != nullptr)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (ParentPromise ->)",
    "insertText": "Suspend(Promise.Prerequisite)"
  },
  {
    "label": "SyncIsDone()",
    "kind": "Method",
    "detail": "Function (} COROFORCEINLINE bool)",
    "insertText": "SyncIsDone()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(CoroFrame_SyncIsDone)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (CoroTask_Detail::FPromise* Prerequisite = Promise . Prerequisite ;)",
    "insertText": "checkf(Prerequisite == nullptr || Prerequisite->IsExpeditable(), TEXT(\"The Prerequisite(%s) is not synchronously invokable because its execution was delayed by a FCoroEvent\"), Prerequisite->GetDebugName()) while(Prerequisite && !Prerequisite->TryExpedite(false))"
  },
  {
    "label": "SYNC_INVOKE()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "SYNC_INVOKE(...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ auto coro = __VA_ARGS__ ; \\)",
    "insertText": "while(!coro.SyncIsDone())"
  },
  {
    "label": "SYNC_INVOKE_ASSIGN()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "SYNC_INVOKE_ASSIGN(value, ...)"
  },
  {
    "label": "SYNC_INVOKE_RETURN()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SYNC_INVOKE_RETURN(...)"
  },
  {
    "label": "CORO_INVOKE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "CORO_INVOKE(...)"
  },
  {
    "label": "FCoroPromise()",
    "kind": "Method",
    "detail": "Function (\\ auto coro = __VA_ARGS__ ; \\ const CoroTask_Detail::IPromise* Promise = co_await)",
    "insertText": "FCoroPromise()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(!coro.AsyncIsDone(Promise))"
  },
  {
    "label": "suspend_always()",
    "kind": "Method",
    "detail": "Function (\\ co_await)",
    "insertText": "suspend_always()"
  },
  {
    "label": "CORO_INVOKE_ASSIGN()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "CORO_INVOKE_ASSIGN(value, ...)"
  },
  {
    "label": "CORO_INVOKE_RETURN()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "CORO_INVOKE_RETURN(...)"
  },
  {
    "label": "TDummyType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDummyType(const T& InValue) : Value(InValue)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "MakeDummyType()",
    "kind": "Method",
    "detail": "Function (} } ; TDummyType<void>)",
    "insertText": "MakeDummyType()"
  },
  {
    "label": "MakeDummyType()",
    "kind": "Method",
    "detail": "Function (TDummyType<typename TDecay<T>::Type>)",
    "insertText": "MakeDummyType(T&& Value)"
  }
]