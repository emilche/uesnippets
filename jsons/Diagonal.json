[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Diagonal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Diagonal"
  },
  {
    "label": "RowsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_DIAGONAL_H # define EIGEN_DIAGONAL_H namespace Eigen { namespace internal { template<MatrixType,int DiagIndex> struct traits<Diagonal<MatrixType,DiagIndex>> : traits<MatrixType> { typedef ref_selector<MatrixType>::type MatrixTypeNested ; typedef remove_reference<MatrixTypeNested>::type _MatrixTypeNested ; typedef MatrixType::StorageKind StorageKind ; enum {)",
    "insertText": "RowsAtCompileTime(int(DiagIndex) == DynamicIndex || int(MatrixType::SizeAtCompileTime) == Dynamic) ? Dynamic : (EIGEN_PLAIN_ENUM_MIN(MatrixType::RowsAtCompileTime - EIGEN_PLAIN_ENUM_MAX(-DiagIndex, 0), MatrixType::ColsAtCompileTime - EIGEN_PLAIN_ENUM_MAX( DiagIndex, 0))), ColsAtCompileTime = 1, MaxRowsAtCompileTime = int(MatrixType::MaxSizeAtCompileTime) == Dynamic ? Dynamic : DiagIndex == DynamicIndex ? EIGEN_SIZE_MIN_PREFER_FIXED(MatrixType::MaxRowsAtCompileTime, MatrixType::MaxColsAtCompileTime) : (EIGEN_PLAIN_ENUM_MIN(MatrixType::MaxRowsAtCompileTime - EIGEN_PLAIN_ENUM_MAX(-DiagIndex, 0), MatrixType::MaxColsAtCompileTime - EIGEN_PLAIN_ENUM_MAX( DiagIndex, 0))), MaxColsAtCompileTime = 1, MaskLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0, Flags = (unsigned int)_MatrixTypeNested::Flags & (RowMajorBit | MaskLvalueBit | DirectAccessBit)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<MatrixType,int _DiagIndex> class Diagonal : public internal::dense_xpr_base<Diagonal<MatrixType,_DiagIndex>>::type { public : enum { DiagIndex = _DiagIndex } ; typedef internal::dense_xpr_base<Diagonal>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Diagonal) EIGEN_DEVICE_FUNC explicit inline Diagonal(MatrixType& matrix, Index a_index = DiagIndex) : m_matrix(matrix), m_index(a_index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(a_index <= m_matrix.cols() && -a_index <= m_matrix.rows())"
  },
  {
    "label": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Diagonal) EIGEN_DEVICE_FUNC inline Index rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar*)",
    "insertText": "data()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index row, Index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(MatrixType) return m_matrix.coeffRef(row+rowOffset(), row+colOffset())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CoeffReturnType)",
    "insertText": "coeff(Index row, Index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index idx)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(MatrixType) return m_matrix.coeffRef(idx+rowOffset(), idx+colOffset())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CoeffReturnType)",
    "insertText": "coeff(Index idx)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<MatrixType::Nested>::type&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "absDiagIndex()",
    "kind": "Method",
    "detail": "Function (} protected : internal::ref_selector<MatrixType>::non_const_type m_matrix ; const internal::variable_if_dynamicindex<Index,DiagIndex> m_index ; private : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index)",
    "insertText": "absDiagIndex()"
  },
  {
    "label": "rowOffset()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index)",
    "insertText": "rowOffset()"
  },
  {
    "label": "colOffset()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index)",
    "insertText": "colOffset()"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> MatrixType::PacketReturnType)",
    "insertText": "packet(Index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (template<int LoadMode> MatrixType::PacketReturnType)",
    "insertText": "packet(Index,Index)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> EIGEN_DEVICE_FUNC MatrixBase<Derived>::DiagonalReturnType MatrixBase<Derived)",
    "insertText": "diagonal()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC MatrixBase<Derived>::DiagonalDynamicIndexReturnType MatrixBase<Derived)",
    "insertText": "diagonal(Index index)"
  }
]