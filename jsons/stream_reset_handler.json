[
  {
    "label": "StreamResetHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamResetHandler"
  },
  {
    "label": "CurrentRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrentRequest"
  },
  {
    "label": "StreamResetHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_STREAM_RESET_HANDLER_H_ # define NET_DCSCTP_SOCKET_STREAM_RESET_HANDLER_H_ # include<cstdint> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / functional / bind_front . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / common / internal_types . h \" # include \" net / dcsctp / packet / chunk / reconfig_chunk . h \" # include \" net / dcsctp / packet / parameter / incoming_ssn_reset_request_parameter . h \" # include \" net / dcsctp / packet / parameter / outgoing_ssn_reset_request_parameter . h \" # include \" net / dcsctp / packet / parameter / reconfiguration_response_parameter . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / rx / data_tracker . h \" # include \" net / dcsctp / rx / reassembly_queue . h \" # include \" net / dcsctp / socket / context . h \" # include \" net / dcsctp / timer / timer . h \" # include \" net / dcsctp / tx / retransmission_queue . h \" # include \" rtc_base / containers / flat_set . h \" namespace dcsctp { class StreamResetHandler { public :)",
    "insertText": "StreamResetHandler(absl::string_view log_prefix, Context* context, TimerManager* timer_manager, DataTracker* data_tracker, ReassemblyQueue* reassembly_queue, RetransmissionQueue* retransmission_queue, const DcSctpSocketHandoverState* handover_state = nullptr) : log_prefix_(std::string(log_prefix) + \"reset: \"), ctx_(context), data_tracker_(data_tracker), reassembly_queue_(reassembly_queue), retransmission_queue_(retransmission_queue), reconfig_timer_(timer_manager->CreateTimer( \"re-config\", absl::bind_front(&StreamResetHandler::OnReconfigTimerExpiry, this), TimerOptions(DurationMs(0)))), next_outgoing_req_seq_nbr_( handover_state ? ReconfigRequestSN(handover_state->tx.next_reset_req_sn) : ReconfigRequestSN(*ctx_->my_initial_tsn())), last_processed_req_seq_nbr_( handover_state ? ReconfigRequestSN( handover_state->rx.last_completed_reset_req_sn) : ReconfigRequestSN(*ctx_->peer_initial_tsn() - 1)), last_processed_req_result_( ReconfigurationResponseParameter::Result::kSuccessNothingToDo)"
  },
  {
    "label": "ResetStreams()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetStreams(rtc::ArrayView<const StreamID> outgoing_streams)"
  },
  {
    "label": "MakeStreamResetRequest()",
    "kind": "Method",
    "detail": "Function (absl::optional<ReConfigChunk>)",
    "insertText": "MakeStreamResetRequest()"
  },
  {
    "label": "HandleReConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReConfig(ReConfigChunk chunk)"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "CurrentRequest()",
    "kind": "Method",
    "detail": "Function (private : class CurrentRequest { public :)",
    "insertText": "CurrentRequest(TSN sender_last_assigned_tsn, std::vector<StreamID> streams) : req_seq_nbr_(absl::nullopt), sender_last_assigned_tsn_(sender_last_assigned_tsn), streams_(std::move(streams))"
  },
  {
    "label": "req_seq_nbr()",
    "kind": "Method",
    "detail": "Function (} ReconfigRequestSN)",
    "insertText": "req_seq_nbr()"
  },
  {
    "label": "sender_last_assigned_tsn()",
    "kind": "Method",
    "detail": "Function (} TSN)",
    "insertText": "sender_last_assigned_tsn()"
  },
  {
    "label": "PrepareRetransmission()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareRetransmission()"
  },
  {
    "label": "PrepareToSend()",
    "kind": "Method",
    "detail": "Function (req_seq_nbr_ = absl::nullopt ; } void)",
    "insertText": "PrepareToSend(ReconfigRequestSN new_req_seq_nbr)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (req_seq_nbr_ = new_req_seq_nbr ; } private : absl::optional<ReconfigRequestSN> req_seq_nbr_ ; TSN sender_last_assigned_tsn_ ; const std::vector<StreamID> streams_ ; } ; bool)",
    "insertText": "Validate(const ReConfigChunk& chunk)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::vector<ReconfigurationResponseParameter>>)",
    "insertText": "Process(const ReConfigChunk& chunk)"
  },
  {
    "label": "MakeReconfigChunk()",
    "kind": "Method",
    "detail": "Function (ReConfigChunk)",
    "insertText": "MakeReconfigChunk()"
  },
  {
    "label": "ValidateReqSeqNbr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateReqSeqNbr(ReconfigRequestSN req_seq_nbr, std::vector<ReconfigurationResponseParameter>& responses)"
  },
  {
    "label": "HandleResetOutgoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResetOutgoing(const ParameterDescriptor& descriptor, std::vector<ReconfigurationResponseParameter>& responses)"
  },
  {
    "label": "HandleResetIncoming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResetIncoming(const ParameterDescriptor& descriptor, std::vector<ReconfigurationResponseParameter>& responses)"
  },
  {
    "label": "HandleResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResponse(const ParameterDescriptor& descriptor)"
  },
  {
    "label": "OnReconfigTimerExpiry()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "OnReconfigTimerExpiry()"
  }
]