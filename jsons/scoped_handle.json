[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Traits"
  },
  {
    "label": "Verifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Verifier"
  },
  {
    "label": "GenericScopedHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericScopedHandle"
  },
  {
    "label": "HandleTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandleTraits"
  },
  {
    "label": "DummyVerifierTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DummyVerifierTraits"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_HANDLE_H_ # define BASE_WIN_SCOPED_HANDLE_H_ # include<ostream> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / dcheck_is_on . h \" # include \" base / gtest_prod_util . h \" # include \" base / location . h \" # include \" base / win / windows_types . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(COMPILER_MSVC) #include <intrin.h> #define BASE_WIN_GET_CALLER _ReturnAddress() #elif defined(COMPILER_GCC) #define BASE_WIN_GET_CALLER \\ __builtin_extract_return_addr(__builtin_return_address(0))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace win { enum class HandleOperation { kHandleAlreadyTracked,kCloseHandleNotTracked,kCloseHandleNotOwner,kCloseHandleHook,kDuplicateHandleHook } ; std::ostream&)",
    "insertText": "operator(std::ostream& os, HandleOperation operation)"
  },
  {
    "label": "GenericScopedHandle()",
    "kind": "Method",
    "detail": "Function (template<class Traits,class Verifier> class GenericScopedHandle { public : using Handle = Traits::Handle ;)",
    "insertText": "GenericScopedHandle() : handle_(Traits::NullHandle())"
  },
  {
    "label": "GenericScopedHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericScopedHandle(Handle handle) : handle_(Traits::NullHandle())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(handle)"
  },
  {
    "label": "GenericScopedHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericScopedHandle(GenericScopedHandle&& other) : handle_(Traits::NullHandle())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(other.Take())"
  },
  {
    "label": "GenericScopedHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericScopedHandle(const GenericScopedHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GenericScopedHandle&)",
    "insertText": "operator(const GenericScopedHandle&)"
  },
  {
    "label": "GenericScopedHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GenericScopedHandle()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "is_valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_valid()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericScopedHandle&)",
    "insertText": "operator(GenericScopedHandle&& other)"
  },
  {
    "label": "DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_NE(this, &other)"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (auto last_error)",
    "insertText": "GetLastError()"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (handle_ = handle ;)",
    "insertText": "StartTracking(handle, this, BASE_WIN_GET_CALLER, GetProgramCounter())"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastError(last_error)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } Handle)",
    "insertText": "get()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] Handle)",
    "insertText": "release()"
  },
  {
    "label": "NullHandle()",
    "kind": "Method",
    "detail": "Function (Handle temp = handle_ ; handle_ =)",
    "insertText": "NullHandle()"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTracking(temp, this, BASE_WIN_GET_CALLER, GetProgramCounter())"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (} return temp ; } [ [ nodiscard ] ] Handle)",
    "insertText": "Take()"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTracking(handle_, this, BASE_WIN_GET_CALLER, GetProgramCounter())"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(handle_)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ScopedHandleDeathTest, HandleVerifierWrongOwner)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ScopedHandleDeathTest, HandleVerifierUntrackedHandle)"
  },
  {
    "label": "HandleTraits()",
    "kind": "Method",
    "detail": "Function (Handle handle_ ; } ; # undef BASE_WIN_GET_CALLER class HandleTraits { public : using Handle = HANDLE ;)",
    "insertText": "HandleTraits()"
  },
  {
    "label": "HandleTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTraits(const HandleTraits&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HandleTraits&)",
    "insertText": "operator(const HandleTraits&)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (bool BASE_EXPORT)",
    "insertText": "CloseHandle(HANDLE handle)"
  },
  {
    "label": "IsHandleValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHandleValid(HANDLE handle)"
  },
  {
    "label": "DummyVerifierTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DummyVerifierTraits(const DummyVerifierTraits&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DummyVerifierTraits&)",
    "insertText": "operator(const DummyVerifierTraits&)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTracking(HANDLE handle, const void* owner, const void* pc1, const void* pc2)"
  },
  {
    "label": "StopTracking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopTracking(HANDLE handle, const void* owner, const void* pc1, const void* pc2)"
  },
  {
    "label": "VerifierTraits()",
    "kind": "Method",
    "detail": "Function (} } ; class BASE_EXPORT VerifierTraits { public : using Handle = HANDLE ;)",
    "insertText": "VerifierTraits()"
  },
  {
    "label": "VerifierTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifierTraits(const VerifierTraits&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VerifierTraits&)",
    "insertText": "operator(const VerifierTraits&)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} ; using UncheckedScopedHandle = GenericScopedHandle<HandleTraits,DummyVerifierTraits> ; using CheckedScopedHandle = GenericScopedHandle<HandleTraits,VerifierTraits> ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "DisableHandleVerifier()",
    "kind": "Method",
    "detail": "Function (# else using ScopedHandle = UncheckedScopedHandle ; # endif BASE_EXPORT void)",
    "insertText": "DisableHandleVerifier()"
  },
  {
    "label": "OnHandleBeingClosed()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "OnHandleBeingClosed(HANDLE handle, HandleOperation operation)"
  }
]