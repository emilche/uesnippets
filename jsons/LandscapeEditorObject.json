[
  {
    "label": "ULandscapeMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeMaterialInstanceConstant"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGizmoImportLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGizmoImportLayer"
  },
  {
    "label": "FLandscapeImportLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportLayer"
  },
  {
    "label": "FLandscapePatternBrushWorldSpaceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapePatternBrushWorldSpaceSettings"
  },
  {
    "label": "ULandscapeEditorObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditorObject"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" LandscapeProxy . h \" # include \" Editor / LandscapeEditor / Private / LandscapeEdMode . h \" # include \" LandscapeFileFormatInterface . h \" # include \" LandscapeBlueprintBrushBase . h \" # include \" LandscapeImportHelper . h \" # include \" LandscapeEditorObject . generated . h \" class ULandscapeMaterialInstanceConstant ; class UTexture2D ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Invalid = - 1)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "NoiseModeConversion()",
    "kind": "Method",
    "detail": "Function (# if CPP float)",
    "insertText": "NoiseModeConversion(ELandscapeToolNoiseMode Mode, float NoiseAmount, float OriginalValue)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MinusXToPlusX)",
    "insertText": "UMETA(DisplayName=\"-X to +X\"), PlusXToMinusX UMETA(DisplayName=\"+X to -X\"), MinusYToPlusY UMETA(DisplayName=\"-Y to +Y\"), PlusYToMinusY UMETA(DisplayName=\"+Y to -Y\"), RotateMinusXToPlusX UMETA(DisplayName=\"Rotate -X to +X\"), RotatePlusXToMinusX UMETA(DisplayName=\"Rotate +X to -X\"), RotateMinusYToPlusY UMETA(DisplayName=\"Rotate -Y to +Y\"), RotatePlusYToMinusY UMETA(DisplayName=\"Rotate +Y to -Y\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Category=\"Import\", EditAnywhere)"
  },
  {
    "label": "FGizmoImportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGizmoImportLayer() : LayerFilename(\"\") , LayerName(\"\") , bNoImport(false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Category=\"Import\", VisibleAnywhere)"
  },
  {
    "label": "FLandscapeImportLayer()",
    "kind": "Method",
    "detail": "Function (FLandscapeImportDescriptor ImportDescriptor ;)",
    "insertText": "FLandscapeImportLayer() : FLandscapeImportLayerInfo() , ThumbnailMIC(nullptr) , ImportResult(ELandscapeImportResult::Success) , ErrorMessage(FText()) , bSelected(false)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Category=\"World-Space\", EditAnywhere)"
  },
  {
    "label": "FLandscapePatternBrushWorldSpaceSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapePatternBrushWorldSpaceSettings() : Origin(ForceInit) , Rotation(0.0f) , bCenterTextureOnOrigin(false) , RepeatSize(0.0f)"
  },
  {
    "label": "FLandscapePatternBrushWorldSpaceSettings()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapePatternBrushWorldSpaceSettings(const FVector2D& InOrigin, float InRotation, bool bInCenterTextureOnOrigin, float bRepeatSize) : Origin(InOrigin) , Rotation(InRotation) , bCenterTextureOnOrigin(bInCenterTextureOnOrigin) , RepeatSize(bRepeatSize)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (LoadedOnly,All,} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Load()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save()"
  },
  {
    "label": "SetbUseSelectedRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetbUseSelectedRegion(bool InbUseSelectedRegion)"
  },
  {
    "label": "SetbUseNegativeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetbUseNegativeMask(bool InbUseNegativeMask)"
  },
  {
    "label": "SetPasteMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPasteMode(ELandscapeToolPasteMode InPasteMode)"
  },
  {
    "label": "SetAlphaTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlphaTexture(UTexture2D* InTexture, ELandscapeTextureColorChannel InTextureChannel)"
  },
  {
    "label": "HasValidAlphaTextureData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidAlphaTextureData()"
  },
  {
    "label": "GetImportLandscapeData()",
    "kind": "Method",
    "detail": "Function (FString LastImportPath ; const TArray<uint16>&)",
    "insertText": "GetImportLandscapeData()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ImportLandscape_Data .)",
    "insertText": "Empty()"
  },
  {
    "label": "ChooseBestComponentSizeForImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChooseBestComponentSizeForImport()"
  },
  {
    "label": "ImportLandscapeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportLandscapeData()"
  },
  {
    "label": "RefreshImportLayersList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshImportLayersList(bool bRefreshFromTarget = false)"
  },
  {
    "label": "CreateImportLayersInfo()",
    "kind": "Method",
    "detail": "Function (ELandscapeImportResult)",
    "insertText": "CreateImportLayersInfo(TArray<FLandscapeImportLayerInfo>& OutImportLayerInfos)"
  },
  {
    "label": "CreateNewLayersInfo()",
    "kind": "Method",
    "detail": "Function (ELandscapeImportResult)",
    "insertText": "CreateNewLayersInfo(TArray<FLandscapeImportLayerInfo>& OutNewLayerInfos)"
  },
  {
    "label": "InitializeDefaultHeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDefaultHeightData(TArray<uint16>& OutData)"
  },
  {
    "label": "ExpandImportData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandImportData(TArray<uint16>& OutHeightData, TArray<FLandscapeImportLayerInfo>& OutImportLayerInfos)"
  },
  {
    "label": "UpdateComponentLayerAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentLayerAllowList()"
  },
  {
    "label": "UseSingleFileImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSingleFileImport()"
  },
  {
    "label": "OnChangeImportLandscapeResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeImportLandscapeResolution(int32 DescriptorIndex)"
  },
  {
    "label": "OnImportHeightmapFilenameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImportHeightmapFilenameChanged()"
  },
  {
    "label": "RefreshImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshImports()"
  },
  {
    "label": "OnImportWeightmapFilenameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImportWeightmapFilenameChanged()"
  },
  {
    "label": "RefreshLayerImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshLayerImports()"
  },
  {
    "label": "RefreshLayerImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshLayerImport(FLandscapeImportLayer& ImportLayer)"
  },
  {
    "label": "ClampLandscapeSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ClampLandscapeSize(int32 InComponentsCount)"
  },
  {
    "label": "CalcComponentsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CalcComponentsCount(int32 InResolution)"
  },
  {
    "label": "NewLandscape_ClampSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NewLandscape_ClampSize()"
  },
  {
    "label": "ClampLandscapeSize()",
    "kind": "Method",
    "detail": "Function (NewLandscape_ComponentCount . X =)",
    "insertText": "ClampLandscapeSize(NewLandscape_ComponentCount.X)"
  },
  {
    "label": "ClampLandscapeSize()",
    "kind": "Method",
    "detail": "Function (NewLandscape_ComponentCount . Y =)",
    "insertText": "ClampLandscapeSize(NewLandscape_ComponentCount.Y)"
  },
  {
    "label": "UpdateComponentCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateComponentCount()"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (ResizeLandscape_ComponentCount . Y =)",
    "insertText": "DivideAndRoundUp(OriginalResolution.Y, ComponentSizeQuads)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (break ; case ELandscapeConvertMode::Clip : ResizeLandscape_ComponentCount . X =)",
    "insertText": "Max(1, OriginalResolution.X / ComponentSizeQuads)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ResizeLandscape_ComponentCount . Y =)",
    "insertText": "Max(1, OriginalResolution.Y / ComponentSizeQuads)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (break ; case ELandscapeConvertMode::Resample : ResizeLandscape_ComponentCount = ResizeLandscape_Original_ComponentCount ; break ; default :)",
    "insertText": "check(0)"
  },
  {
    "label": "SetGizmoSnapMode()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetGizmoSnapMode(ELandscapeGizmoSnapType SnapMode)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(FEdModeLandscape* LandscapeParent)"
  },
  {
    "label": "UpdateTargetLayerDisplayOrder()",
    "kind": "Method",
    "detail": "Function (ParentMode = LandscapeParent ; } void)",
    "insertText": "UpdateTargetLayerDisplayOrder()"
  },
  {
    "label": "GetCurrentToolStrength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentToolStrength()"
  },
  {
    "label": "SetCurrentToolStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentToolStrength(float NewToolStrength)"
  },
  {
    "label": "GetCurrentToolBrushRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentToolBrushRadius()"
  },
  {
    "label": "SetCurrentToolBrushRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentToolBrushRadius(float NewBrushStrength)"
  },
  {
    "label": "GetCurrentToolBrushFalloff()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentToolBrushFalloff()"
  },
  {
    "label": "SetCurrentToolBrushFalloff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentToolBrushFalloff(float NewBrushFalloff)"
  },
  {
    "label": "GetFlattenTarget()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFlattenTarget(bool bInReturnPreviewValueIfActive)"
  },
  {
    "label": "IsWeightmapTarget()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsWeightmapTarget()"
  },
  {
    "label": "LoadAlphaTextureSourceData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadAlphaTextureSourceData(UTexture2D* InTexture, TArray<uint8>& OutSourceData, int32& OutSourceDataSizeX, int32& OutSourceDataSizeY, ELandscapeTextureColorChannel& InOutTextureChannel)"
  }
]