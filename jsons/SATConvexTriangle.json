[
  {
    "label": "SATConvexTriangle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Collision / ConvexContactPoint . h \" # include \" Chaos / Collision / ConvexContactPointUtilities . h \" # include \" Chaos / Convex . h \" # include \" Chaos / Triangle . h \" # include \" Chaos / Utilities . h \" namespace Chaos::Private { template<ConvexType> bool)",
    "insertText": "SATConvexTriangle(const ConvexType& Convex, const FTriangle& Triangle, const FVec3& TriangleNormal, const FReal CullDistanceSq, Private::FConvexContactPoint& OutContactPoint)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal NormalTolerance =)",
    "insertText": "FReal(1.e-8)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal NormalToleranceSq = NormalTolerance* NormalTolerance ; const FReal InvalidPhi =)",
    "insertText": "FReal(-1.e10)"
  },
  {
    "label": "GetCentroid()",
    "kind": "Method",
    "detail": "Function (const FVec3& TriN = TriangleNormal ; const FVec3 TriC = Triangle .)",
    "insertText": "GetCentroid()"
  },
  {
    "label": "Mark()",
    "kind": "Method",
    "detail": "Function (FMemMark)",
    "insertText": "Mark(FMemStack::Get())"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (TArray<FReal,TMemStackAllocator<)",
    "insertText": "alignof(FReal)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ConvexVertexDs .)",
    "insertText": "SetNum(Convex.NumVertices())"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (TArrayView<FReal> ConvexVertexDsView =)",
    "insertText": "MakeArrayView(ConvexVertexDs)"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (FReal TriPlaneDMin,TriPlaneDMax ; int32 ConvexVertexIndexMin,ConvexVertexIndexMax ;)",
    "insertText": "ProjectOntoAxis(Convex, TriN, TriC, TriPlaneDMin, TriPlaneDMax, ConvexVertexIndexMin, ConvexVertexIndexMax, &ConvexVertexDsView)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (FVec3 ConvexPlaneX =)",
    "insertText": "FVec3(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal ConvexPlaneDMin = InvalidPhi ; int32 ConvexPlaneIndexMin = INDEX_NONE ; int32 ConvexPlaneTriangleIndexMin = INDEX_NONE ;)",
    "insertText": "for(int32 PlaneIndex = 0; PlaneIndex < Convex.NumPlanes(); ++PlaneIndex)"
  },
  {
    "label": "GetPlaneNX()",
    "kind": "Method",
    "detail": "Function (FVec3 ConN,ConX ; Convex .)",
    "insertText": "GetPlaneNX(PlaneIndex, ConN, ConX)"
  },
  {
    "label": "ProjectOntoAxis()",
    "kind": "Method",
    "detail": "Function (FReal DMin,DMax ; int32 IndexMin,IndexMax ;)",
    "insertText": "ProjectOntoAxis(Triangle, ConN, ConX, DMin, DMax, IndexMin, IndexMax)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (ConvexPlaneN = ConN ; ConvexPlaneX = ConX ; ConvexPlaneDMin = DMin ; ConvexPlaneIndexMin = PlaneIndex ; ConvexPlaneTriangleIndexMin = IndexMin ; } } FReal TriVertexConvexDMin0 =)",
    "insertText": "DotProduct(Triangle.GetVertex(0) - ConvexPlaneX, ConvexPlaneN)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (FReal TriVertexConvexDMin1 =)",
    "insertText": "DotProduct(Triangle.GetVertex(1) - ConvexPlaneX, ConvexPlaneN)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (FReal TriVertexConvexDMin2 =)",
    "insertText": "DotProduct(Triangle.GetVertex(2) - ConvexPlaneX, ConvexPlaneN)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FReal TriEdgeConvexDMin [ 3 ] = {)",
    "insertText": "Min(TriVertexConvexDMin2, TriVertexConvexDMin0), FMath::Min(TriVertexConvexDMin0, TriVertexConvexDMin1), FMath::Min(TriVertexConvexDMin1, TriVertexConvexDMin2)"
  },
  {
    "label": "GetWindingOrder()",
    "kind": "Method",
    "detail": "Function (FReal ConvexWinding = Convex .)",
    "insertText": "GetWindingOrder()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal EdgeEdgeDMin = InvalidPhi ; int32 ConvexEdgeIndexMin = INDEX_NONE ; int32 TriEdgeIndexMin = INDEX_NONE ;)",
    "insertText": "for(int32 ConvexEdgeLoopIndex = 0; ConvexEdgeLoopIndex < Convex.NumEdges(); ++ConvexEdgeLoopIndex)"
  },
  {
    "label": "ConvexEdgeIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ConvexEdgeIndex(ConvexWinding >= 0) ? ConvexEdgeLoopIndex : Convex.NumEdges()"
  },
  {
    "label": "ConvexEdgeVIndex0()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ConvexEdgeVIndex0(ConvexWinding >= 0)"
  },
  {
    "label": "ConvexEdgeVIndex1()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ConvexEdgeVIndex1(ConvexWinding >= 0)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 ConvexEdgeVertexIndex0 = Convex .)",
    "insertText": "GetEdgeVertex(ConvexEdgeIndex, ConvexEdgeVIndex0)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 ConvexEdgeVertexIndex1 = Convex .)",
    "insertText": "GetEdgeVertex(ConvexEdgeIndex, ConvexEdgeVIndex1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal FaceConvexD0 = ConvexVertexDs [ ConvexEdgeVertexIndex0 ] ; const FReal FaceConvexD1 = ConvexVertexDs [ ConvexEdgeVertexIndex1 ] ;)",
    "insertText": "if((Utilities::SignedSquare(FaceConvexD0) > CullDistanceSq) && (Utilities::SignedSquare(FaceConvexD1) > CullDistanceSq))"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (continue ; } const FVec3 ConvexEdgeV0 = Convex .)",
    "insertText": "GetVertex(ConvexEdgeVertexIndex0)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 ConvexEdgeV1 = Convex .)",
    "insertText": "GetVertex(ConvexEdgeVertexIndex1)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (const int32 ConvexEdgePlaneIndexA = Convex .)",
    "insertText": "GetEdgePlane(ConvexEdgeIndex, 0)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (const int32 ConvexEdgePlaneIndexB = Convex .)",
    "insertText": "GetEdgePlane(ConvexEdgeIndex, 1)"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const FVec3 ConvexEdgePlaneNormalA = Convex .)",
    "insertText": "GetPlane(ConvexEdgePlaneIndexA).Normal()"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const FVec3 ConvexEdgePlaneNormalB = Convex .)",
    "insertText": "GetPlane(ConvexEdgePlaneIndexB).Normal()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (continue ; } const FVec3& TriEdgeV0 = Triangle .)",
    "insertText": "GetVertex(TriEdgeIndex)"
  },
  {
    "label": "TriEdgeV1()",
    "kind": "Method",
    "detail": "Function (const FVec3&)",
    "insertText": "TriEdgeV1(TriEdgeIndex == 2) ? Triangle.GetVertex(0) : Triangle.GetVertex(TriEdgeIndex + 1)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (continue ; } FVec3 Axis =)",
    "insertText": "CrossProduct(ConvexEdgeV1 - ConvexEdgeV0, TriEdgeV1 - TriEdgeV0)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (const FReal AxisLenSq = Axis .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal Sign =)",
    "insertText": "DotProduct(TriEdgeV0 - TriC, Axis)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Axis = - Axis ; } const FReal ScaledSeparation =)",
    "insertText": "DotProduct(ConvexEdgeV0 - TriEdgeV0, Axis)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const FReal ScaledSeparationSq = ScaledSeparation*)",
    "insertText": "Abs(ScaledSeparation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal ScaledCullDistanceSq = CullDistanceSq* AxisLenSq ;)",
    "insertText": "if(ScaledSeparationSq > ScaledCullDistanceSq)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (const FReal AxisInvLen =)",
    "insertText": "InvSqrt(AxisLenSq)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (EdgeEdgeDMin = ScaledSeparation* AxisInvLen ; EdgeEdgeN = Axis* AxisInvLen ; ConvexEdgeIndexMin = ConvexEdgeIndex ; TriEdgeIndexMin = TriEdgeIndex ; } } } const FReal TriFaceBias =)",
    "insertText": "FReal(1.e-2)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FReal SeparatingDistance = TriPlaneDMin ; FVec3 SeparatingAxis = TriN ; const FVec3 ConvexContactPoint = Convex .)",
    "insertText": "GetVertex(ConvexVertexIndexMin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FVec3 TriangleContactPoint = ConvexContactPoint - SeparatingAxis* SeparatingDistance ; OutContactPoint . ShapeContactPoints [ 0 ] = ConvexContactPoint ; OutContactPoint . ShapeContactPoints [ 1 ] = TriangleContactPoint ; OutContactPoint . ShapeContactNormal = SeparatingAxis ; OutContactPoint . Phi = SeparatingDistance ; return true ; })",
    "insertText": "if((ConvexPlaneDMin != InvalidPhi) && (ConvexPlaneDMin > EdgeEdgeDMin))"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FReal SeparatingDistance = ConvexPlaneDMin ; FVec3 SeparatingAxis = - ConvexPlaneN ; const FVec3 TriangleContactPoint = Triangle .)",
    "insertText": "GetVertex(ConvexPlaneTriangleIndexMin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FVec3 ConvexContactPoint = TriangleContactPoint + SeparatingAxis* SeparatingDistance ; OutContactPoint . ShapeContactPoints [ 0 ] = ConvexContactPoint ; OutContactPoint . ShapeContactPoints [ 1 ] = TriangleContactPoint ; OutContactPoint . ShapeContactNormal = SeparatingAxis ; OutContactPoint . Phi = SeparatingDistance ; return true ; })",
    "insertText": "if(EdgeEdgeDMin != InvalidPhi)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 ConvexEdgeVertexIndex0 = Convex .)",
    "insertText": "GetEdgeVertex(ConvexEdgeIndexMin, ConvexEdgeVIndex0)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 ConvexEdgeVertexIndex1 = Convex .)",
    "insertText": "GetEdgeVertex(ConvexEdgeIndexMin, ConvexEdgeVIndex1)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3& TriEdgeV0 = Triangle .)",
    "insertText": "GetVertex(TriEdgeIndexMin)"
  },
  {
    "label": "TriEdgeV1()",
    "kind": "Method",
    "detail": "Function (const FVec3&)",
    "insertText": "TriEdgeV1(TriEdgeIndexMin == 2) ? Triangle.GetVertex(0) : Triangle.GetVertex(TriEdgeIndexMin + 1)"
  },
  {
    "label": "NearestPointsOnLineSegments()",
    "kind": "Method",
    "detail": "Function (FReal ConvexEdgeT,TriEdgeT ; FVec3 ConvexContactPoint,TriangleContactPoint ;)",
    "insertText": "NearestPointsOnLineSegments(ConvexEdgeV0, ConvexEdgeV1, TriEdgeV0, TriEdgeV1, ConvexEdgeT, TriEdgeT, ConvexContactPoint, TriangleContactPoint)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (OutContactPoint . ShapeContactPoints [ 0 ] = ConvexContactPoint ; OutContactPoint . ShapeContactPoints [ 1 ] = TriangleContactPoint ; OutContactPoint . ShapeContactNormal = SeparatingAxis ; OutContactPoint . Phi = SeparatingDistance ; return true ; })",
    "insertText": "ensureMsgf(false, TEXT(\"SATConvexTriangle failed to select a feature\"))"
  }
]