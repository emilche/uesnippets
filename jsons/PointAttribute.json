[
  {
    "label": "Default",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Default"
  },
  {
    "label": "AttributeTypeConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AttributeTypeConversion"
  },
  {
    "label": "MetadataStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MetadataStorage"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_ATTRIBUTE_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_ATTRIBUTE_HAS_BEEN_INCLUDED # include<openvdb / openvdb . h> # include \" AttributeArrayString . h \" # include \" AttributeSet . h \" # include \" AttributeGroup . h \" # include \" PointDataGrid . h \" namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { namespace point_attribute_internal { template<ValueType> struct Default { ValueType)",
    "insertText": "value()"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (} } ; } template<PointDataTreeT> void)",
    "insertText": "appendAttribute(PointDataTreeT& tree, const Name& name, const NamePair& type, const Index strideOrTotalSize = 1, const bool constantStride = true, const Metadata* defaultValue = nullptr, const bool hidden = false, const bool transient = false)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (template<ValueType,CodecType = NullCodec,PointDataTreeT> void)",
    "insertText": "appendAttribute(PointDataTreeT& tree, const std::string& name, const ValueType& uniformValue = point_attribute_internal::Default<ValueType>::value(), const Index strideOrTotalSize = 1, const bool constantStride = true, const TypedMetadata<ValueType>* defaultValue = nullptr, const bool hidden = false, const bool transient = false)"
  },
  {
    "label": "collapseAttribute()",
    "kind": "Method",
    "detail": "Function (template<ValueType,PointDataTreeT> void)",
    "insertText": "collapseAttribute(PointDataTreeT& tree, const Name& name, const ValueType& uniformValue = point_attribute_internal::Default<ValueType>::value())"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropAttributes(PointDataTreeT& tree, const std::vector<size_t>& indices)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropAttributes(PointDataTreeT& tree, const std::vector<Name>& names)"
  },
  {
    "label": "dropAttribute()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropAttribute(PointDataTreeT& tree, const size_t& index)"
  },
  {
    "label": "dropAttribute()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "dropAttribute(PointDataTreeT& tree, const Name& name)"
  },
  {
    "label": "renameAttributes()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "renameAttributes(PointDataTreeT& tree, const std::vector<Name>& oldNames, const std::vector<Name>& newNames)"
  },
  {
    "label": "renameAttribute()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "renameAttribute(PointDataTreeT& tree, const Name& oldName, const Name& newName)"
  },
  {
    "label": "compactAttributes()",
    "kind": "Method",
    "detail": "Function (template<PointDataTreeT> void)",
    "insertText": "compactAttributes(PointDataTreeT& tree)"
  },
  {
    "label": "collapseAttribute()",
    "kind": "Method",
    "detail": "Function (namespace point_attribute_internal { template<ValueType> void)",
    "insertText": "collapseAttribute(AttributeArray& array, const AttributeSet::Descriptor&, const ValueType& uniformValue)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (AttributeWriteHandle<ValueType>)",
    "insertText": "handle(array)"
  },
  {
    "label": "collapse()",
    "kind": "Method",
    "detail": "Function (handle .)",
    "insertText": "collapse(uniformValue)"
  },
  {
    "label": "collapseAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "collapseAttribute(AttributeArray& array, const AttributeSet::Descriptor& descriptor, const Name& uniformValue)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (StringAttributeWriteHandle)",
    "insertText": "handle(array, descriptor.getMetadata())"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} template<ValueType,CodecType> struct AttributeTypeConversion { const NamePair&)",
    "insertText": "type()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} } ; template<PointDataTreeT,ValueType> struct MetadataStorage { void)",
    "insertText": "add(PointDataTreeT&, const ValueType&)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} template<AttributeListType> void)",
    "insertText": "add(PointDataTreeT&, const AttributeListType&)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} } ; template<PointDataTreeT> struct MetadataStorage<PointDataTreeT,Name> { void)",
    "insertText": "add(PointDataTreeT& tree, const Name& uniformValue)"
  },
  {
    "label": "makeDescriptorUnique()",
    "kind": "Method",
    "detail": "Function (MetaMap& metadata =)",
    "insertText": "makeDescriptorUnique(tree)->getMetadata()"
  },
  {
    "label": "inserter()",
    "kind": "Method",
    "detail": "Function (StringMetaInserter)",
    "insertText": "inserter(metadata)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (inserter .)",
    "insertText": "insert(uniformValue)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} template<AttributeListType> void)",
    "insertText": "add(PointDataTreeT& tree, const AttributeListType& data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Name value ;)",
    "insertText": "for(size_t i = 0; i < data.size(); i++)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "get(value, i)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (inserter .)",
    "insertText": "insert(value)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<PointDataTreeT> void)",
    "insertText": "appendAttribute(PointDataTreeT& tree, const Name& name, const NamePair& type, const Index strideOrTotalSize, const bool constantStride, const Metadata* defaultValue, const bool hidden, const bool transient)"
  },
  {
    "label": "cbeginLeaf()",
    "kind": "Method",
    "detail": "Function (auto iter = tree .)",
    "insertText": "cbeginLeaf()"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const auto& descriptor = iter ->)",
    "insertText": "attributeSet().descriptor()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const size_t index = descriptor .)",
    "insertText": "find(name)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot append an attribute with a non-unique name - \" << name << \".\")"
  },
  {
    "label": "duplicateAppend()",
    "kind": "Method",
    "detail": "Function (} auto newDescriptor = descriptor .)",
    "insertText": "duplicateAppend(name, type)"
  },
  {
    "label": "setDefaultValue()",
    "kind": "Method",
    "detail": "Function (newDescriptor ->)",
    "insertText": "setDefaultValue(name, *defaultValue)"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (AttributeArray::ScopedRegistryLock lock ; tree::LeafManager<PointDataTreeT>)",
    "insertText": "leafManager(tree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&](typename PointDataTreeT::LeafNodeType& leaf, size_t ) { auto expected = leaf.attributeSet().descriptorPtr(); auto attribute = leaf.appendAttribute(*expected, newDescriptor, pos, strideOrTotalSize, constantStride, defaultValue, &lock); if (hidden) attribute->setHidden(true); if (transient) attribute->setTransient(true); }, true)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (} template<ValueType,CodecType,PointDataTreeT> void)",
    "insertText": "appendAttribute(PointDataTreeT& tree, const std::string& name, const ValueType& uniformValue, const Index strideOrTotalSize, const bool constantStride, const TypedMetadata<ValueType>* defaultValue, const bool hidden, const bool transient)"
  },
  {
    "label": "appendAttribute()",
    "kind": "Method",
    "detail": "Function (using point_attribute_internal::AttributeTypeConversion ; using point_attribute_internal::Default ; using point_attribute_internal::MetadataStorage ;)",
    "insertText": "appendAttribute(tree, name, AttributeTypeConversion<ValueType, CodecType>::type(), strideOrTotalSize, constantStride, defaultValue, hidden, transient)"
  },
  {
    "label": "isExactlyEqual()",
    "kind": "Method",
    "detail": "Function (const bool uniformIsDefault =)",
    "insertText": "isExactlyEqual(uniformValue, bool(defaultValue) ? defaultValue->value() : Default<ValueType>::value())"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (MetadataStorage<PointDataTreeT,ValueType)",
    "insertText": "add(tree, uniformValue)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (collapseAttribute<)",
    "insertText": "ValueType(tree, name, uniformValue)"
  },
  {
    "label": "collapseAttribute()",
    "kind": "Method",
    "detail": "Function (} } template<ValueType,PointDataTreeT> void)",
    "insertText": "collapseAttribute(PointDataTreeT& tree, const Name& name, const ValueType& uniformValue)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot find attribute name in PointDataTree.\")"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&](typename PointDataTreeT::LeafNodeType& leaf, size_t ) { assert(leaf.hasAttribute(index)); AttributeArray& array = leaf.attributeArray(index); point_attribute_internal::collapseAttribute( array, descriptor, uniformValue); }, true)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const size_t positionIndex = descriptor .)",
    "insertText": "find(\"P\")"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot drop mandatory position attribute.\")"
  },
  {
    "label": "duplicateDrop()",
    "kind": "Method",
    "detail": "Function (} auto newDescriptor = descriptor .)",
    "insertText": "duplicateDrop(indices)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&](typename PointDataTreeT::LeafNodeType& leaf, size_t ) { auto expected = leaf.attributeSet().descriptorPtr(); leaf.dropAttributes(indices, *expected, newDescriptor); }, true)"
  },
  {
    "label": "attributeSet()",
    "kind": "Method",
    "detail": "Function (const AttributeSet& attributeSet = iter ->)",
    "insertText": "attributeSet()"
  },
  {
    "label": "descriptor()",
    "kind": "Method",
    "detail": "Function (const AttributeSet::Descriptor& descriptor = attributeSet .)",
    "insertText": "descriptor()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<size_t> indices ;)",
    "insertText": "for(const Name& name : names)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot drop an attribute that does not exist - \" << name << \".\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} indices .)",
    "insertText": "push_back(index)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dropAttributes(tree, indices)"
  },
  {
    "label": "dropAttributes()",
    "kind": "Method",
    "detail": "Function (std::vector<Name> names { name } ;)",
    "insertText": "dropAttributes(tree, names)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"Mis-matching sizes of name vectors, cannot rename attributes.\")"
  },
  {
    "label": "beginLeaf()",
    "kind": "Method",
    "detail": "Function (} using Descriptor = AttributeSet::Descriptor ; auto iter = tree .)",
    "insertText": "beginLeaf()"
  },
  {
    "label": "descriptorPtr()",
    "kind": "Method",
    "detail": "Function (const Descriptor::Ptr descriptor = attributeSet .)",
    "insertText": "descriptorPtr()"
  },
  {
    "label": "Descriptor()",
    "kind": "Method",
    "detail": "Function (auto newDescriptor = std::make_shared<)",
    "insertText": "Descriptor(*descriptor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Name& oldName = oldNames [ i ] ;)",
    "insertText": "if(descriptor->find(oldName) == AttributeSet::INVALID_POS)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot find requested attribute - \" << oldName << \".\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const Name& newName = newNames [ i ] ;)",
    "insertText": "if(descriptor->find(newName) != AttributeSet::INVALID_POS)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot rename attribute as new name already exists - \" << newName << \".\")"
  },
  {
    "label": "getConst()",
    "kind": "Method",
    "detail": "Function (} const AttributeArray* array = attributeSet .)",
    "insertText": "getConst(oldName)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(array)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(KeyError, \"Cannot rename group attribute - \" << oldName << \".\")"
  },
  {
    "label": "rename()",
    "kind": "Method",
    "detail": "Function (} newDescriptor ->)",
    "insertText": "rename(oldName, newName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(; iter; ++iter)"
  },
  {
    "label": "renameAttributes()",
    "kind": "Method",
    "detail": "Function (iter ->)",
    "insertText": "renameAttributes(*descriptor, newDescriptor)"
  },
  {
    "label": "renameAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renameAttributes(tree, {oldName}, {newName})"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach([&](typename PointDataTreeT::LeafNodeType& leaf, size_t ) { leaf.compactAttributes(); }, true)"
  }
]