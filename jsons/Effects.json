[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEffectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEffectInfo"
  },
  {
    "label": "SEffectSetBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEffectSetBase"
  },
  {
    "label": "SEffectSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEffectSet"
  },
  {
    "label": "VERSE_ENUM_EFFECTS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Containers / RangeView . h \" namespace uLang { # define)",
    "insertText": "VERSE_ENUM_EFFECTS(v) \\ v(suspends) \\ v(decides) \\ v(diverges) \\ v(reads) \\ v(writes) \\ v(allocates) \\ v(no_rollback)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VISIT_EFFECT(Name) Name, VERSE_ENUM_EFFECTS(VISIT_EFFECT)"
  },
  {
    "label": "AllEffectInfos()",
    "kind": "Method",
    "detail": "Function (struct SEffectInfo { const char* _AttributeName ; EEffect _Effect ; } ; TRangeView<SEffectInfo*,SEffectInfo*>)",
    "insertText": "AllEffectInfos()"
  },
  {
    "label": "GetEffectInfo()",
    "kind": "Method",
    "detail": "Function (SEffectInfo)",
    "insertText": "GetEffectInfo(EEffect Effect)"
  },
  {
    "label": "SEffectSet()",
    "kind": "Method",
    "detail": "Function (struct SEffectSetBase { } ; struct SEffectSet : private SEffectSetBase {)",
    "insertText": "SEffectSet() : SEffectSetBase() #define VISIT_EFFECT(Name) , _##Name(false) VERSE_ENUM_EFFECTS(VISIT_EFFECT)"
  },
  {
    "label": "SEffectSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SEffectSet(EEffect SingleEffect) : SEffectSetBase() #define VISIT_EFFECT(Name) , _##Name(SingleEffect == EEffect::Name) VERSE_ENUM_EFFECTS(VISIT_EFFECT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SEffectSet)",
    "insertText": "operator(const SEffectSet Operand)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (SEffectSet Result ; # define)",
    "insertText": "VISIT_EFFECT(Name)"
  },
  {
    "label": "VERSE_ENUM_EFFECTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VERSE_ENUM_EFFECTS(VISIT_EFFECT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SEffectSet&)",
    "insertText": "operator(SEffectSet Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SEffectSet)",
    "insertText": "operator(const SEffectSet Lhs, const SEffectSet Rhs)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VISIT_EFFECT(Name) _##Name = (!_##Name && Rhs._##Name) || (_##Name && !Rhs._##Name)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (SEffectSet Result ; # define)",
    "insertText": "VISIT_EFFECT(Name) Result._##Name = (!Lhs._##Name && Rhs._##Name) || (Lhs._##Name && !Rhs._##Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(EEffect Effect)"
  },
  {
    "label": "HasAny()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAny(SEffectSet Rhs)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (bool Result = false ; # define)",
    "insertText": "VISIT_EFFECT(Name) Result = Result || (_##Name && Rhs._##Name)"
  },
  {
    "label": "HasAll()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAll(SEffectSet Rhs)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (bool Result = true ; # define)",
    "insertText": "VISIT_EFFECT(Name) Result = Result && (!Rhs._##Name || _##Name)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (bool Result = true ; # define)",
    "insertText": "VISIT_EFFECT(Name) Result = Result && (Lhs._##Name == Rhs._##Name)"
  },
  {
    "label": "VISIT_EFFECT()",
    "kind": "Method",
    "detail": "Function (bool Result = false ; # define)",
    "insertText": "VISIT_EFFECT(Name) Result = Result || (Lhs._##Name != Rhs._##Name)"
  },
  {
    "label": "With()",
    "kind": "Method",
    "detail": "Function (} SEffectSet)",
    "insertText": "With(EEffect SingleEffect, bool bEnable = true)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (SEffectSet Result =* this ; Result .)",
    "insertText": "Set(SingleEffect, bEnable)"
  },
  {
    "label": "VERSE_ENUM_EFFECTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VERSE_ENUM_EFFECTS(VISIT_EFFECT) #undef VISIT_EFFECT bool Get(EEffect Effect)"
  },
  {
    "label": "VERSE_ENUM_EFFECTS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VERSE_ENUM_EFFECTS(VISIT_EFFECT) #undef VISIT_EFFECT default: ULANG_UNREACHABLE()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ; } void)",
    "insertText": "Set(EEffect Effect, bool Enable)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; } } ; SEffectSet)",
    "insertText": "operator(const EEffect Lhs, const EEffect Rhs)"
  }
]