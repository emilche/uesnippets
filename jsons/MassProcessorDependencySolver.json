[
  {
    "label": "UMassProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMassProcessor"
  },
  {
    "label": "TMassExecutionAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMassExecutionAccess"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "FMassProcessorDependencySolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassProcessorDependencySolver"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "FResourceUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceUsage"
  },
  {
    "label": "FResourceUsers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceUsers"
  },
  {
    "label": "FResourceAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceAccess"
  },
  {
    "label": "FResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResult"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassProcessingTypes . h \" # include \" MassEntityTypes . h \" # include \" MassArchetypeTypes . h \" # include \" Containers / StaticArray . h \" class UMassProcessor ; namespace EMassAccessOperation { uint32 Read = 0 ; uint32 Write = 1 ; uint32 MAX = 2 ; } ; template<T> struct TMassExecutionAccess { T Read ; T Write ; T&)",
    "insertText": "operator(const uint32 OpIndex)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "AsArrayView()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TMassExecutionAccess<FMassConstSharedFragmentBitSet> { FMassConstSharedFragmentBitSet Read ; TConstArrayView<FMassConstSharedFragmentBitSet>)",
    "insertText": "AsArrayView()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMassExecutionRequirements { void)",
    "insertText": "Append(const FMassExecutionRequirements& Other)"
  },
  {
    "label": "CountResourcesUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountResourcesUsed()"
  },
  {
    "label": "GetTotalBitsUsedCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalBitsUsedCount()"
  },
  {
    "label": "AsCompositionDescriptor()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeCompositionDescriptor)",
    "insertText": "AsCompositionDescriptor()"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (TMassExecutionAccess<FMassFragmentBitSet> Fragments ; TMassExecutionAccess<FMassChunkFragmentBitSet> ChunkFragments ; TMassExecutionAccess<FMassSharedFragmentBitSet> SharedFragments ; TMassExecutionAccess<FMassConstSharedFragmentBitSet> ConstSharedFragments ; TMassExecutionAccess<FMassExternalSubsystemBitSet> RequiredSubsystems ; FMassTagBitSet RequiredAllTags ; FMassTagBitSet RequiredAnyTags ; FMassTagBitSet RequiredNoneTags ; int32 ResourcesUsedCount = INDEX_NONE ; } ; struct FMassProcessorDependencySolver { private : struct FNode {)",
    "insertText": "FNode(const FName InName, UMassProcessor* InProcessor, const int32 InNodeIndex = INDEX_NONE) : Name(InName), Processor(InProcessor), NodeIndex(InNodeIndex)"
  },
  {
    "label": "IsGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGroup()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FName Name =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "FResourceUsage()",
    "kind": "Method",
    "detail": "Function (UMassProcessor* Processor = nullptr ; TArray<int32> OriginalDependencies ; TArray<int32> TransientDependencies ; TArray<FName> ExecuteBefore ; TArray<FName> ExecuteAfter ; FMassExecutionRequirements Requirements ; int32 NodeIndex = INDEX_NONE ; int32 TotalWaitingNodes = 0 ; int32 SequencePositionIndex = 0 ; TArray<int32> SubNodeIndices ; TArray<FMassArchetypeHandle> ValidArchetypes ; } ; struct FResourceUsage {)",
    "insertText": "FResourceUsage(const TArray<FNode>& InAllNodes)"
  },
  {
    "label": "CanAccessRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAccessRequirements(const FMassExecutionRequirements& TestedRequirements, const TArray<FMassArchetypeHandle>& InArchetypes)"
  },
  {
    "label": "SubmitNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitNode(const int32 NodeIndex, FNode& InOutNode)"
  },
  {
    "label": "HandleElementType()",
    "kind": "Method",
    "detail": "Function (private : struct FResourceUsers { TArray<int32> Users ; } ; struct FResourceAccess { TArray<FResourceUsers> Access ; } ; FMassExecutionRequirements Requirements ; TMassExecutionAccess<FResourceAccess> FragmentsAccess ; TMassExecutionAccess<FResourceAccess> ChunkFragmentsAccess ; TMassExecutionAccess<FResourceAccess> SharedFragmentsAccess ; TMassExecutionAccess<FResourceAccess> RequiredSubsystemsAccess ; TConstArrayView<FNode> AllNodesView ; template<TBitSet> void)",
    "insertText": "HandleElementType(TMassExecutionAccess<FResourceAccess>& ElementAccess , const TMassExecutionAccess<TBitSet>& TestedRequirements, FMassProcessorDependencySolver::FNode& InOutNode, const int32 NodeIndex)"
  },
  {
    "label": "CanAccess()",
    "kind": "Method",
    "detail": "Function (template<TBitSet> bool)",
    "insertText": "CanAccess(const TMassExecutionAccess<TBitSet>& StoredElements, const TMassExecutionAccess<TBitSet>& TestedElements)"
  },
  {
    "label": "HasArchetypeConflict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasArchetypeConflict(TMassExecutionAccess<FResourceAccess> ElementAccess, const TArray<FMassArchetypeHandle>& InArchetypes)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; public : struct FResult { FString DependencyGraphFileName ; TArray<TSubclassOf<UMassProcessor>> PrunedProcessorClasses ; int32 MaxSequenceLength = 0 ; uint32 ArchetypeDataVersion = 0 ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FMassProcessorDependencySolver()",
    "kind": "Method",
    "detail": "Function (MaxSequenceLength = 0 ; ArchetypeDataVersion = 0 ; } } ;)",
    "insertText": "FMassProcessorDependencySolver(TArrayView<UMassProcessor* const> InProcessors, const bool bIsGameRuntime = true)"
  },
  {
    "label": "ResolveDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveDependencies(TArray<FMassProcessorOrderInfo>& OutResult, TSharedPtr<FMassEntityManager> EntityManager = nullptr, FResult* InOutOptionalResult = nullptr)"
  },
  {
    "label": "CreateSubGroupNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSubGroupNames(FName InGroupName, TArray<FString>& SubGroupNames)"
  },
  {
    "label": "IsResultUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResultUpToDate(const FResult& InResult, TSharedPtr<FMassEntityManager> EntityManager)"
  },
  {
    "label": "IsSolvingForSingleThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSolvingForSingleThread()"
  },
  {
    "label": "CreateNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateNodes(UMassProcessor& Processor)"
  },
  {
    "label": "BuildDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDependencies()"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Solve(TArray<FMassProcessorOrderInfo>& OutResult)"
  },
  {
    "label": "LogNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNode(const FNode& Node, int Indent = 0)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TArrayView<UMassProcessor* const> Processors ; bool bAnyCyclesDetected = false ; const bool bSingleThreadTarget =)",
    "insertText": "bool(!MASS_DO_PARALLEL)"
  }
]