[
  {
    "label": "SwapQueueItemVerifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwapQueueItemVerifier"
  },
  {
    "label": "SwapQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwapQueue"
  },
  {
    "label": "NoopSwapQueueItemVerifierFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SWAP_QUEUE_H_ # define RTC_BASE_SWAP_QUEUE_H_ # include<stddef . h> # include<atomic> # include<utility> # include<vector> # include \" absl / base / attributes . h \" # include \" rtc_base / checks . h \" namespace webrtc { namespace internal { template<T> bool)",
    "insertText": "NoopSwapQueueItemVerifierFunction(const T&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator()(const T& t)"
  },
  {
    "label": "SwapQueue()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,QueueItemVerifier = SwapQueueItemVerifier<T>> class SwapQueue { public :)",
    "insertText": "SwapQueue(size_t size) : queue_(size)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(VerifyQueueSlots())"
  },
  {
    "label": "SwapQueue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SwapQueue(size_t size, const QueueItemVerifier& queue_item_verifier) : queue_item_verifier_(queue_item_verifier), queue_(size)"
  },
  {
    "label": "SwapQueue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SwapQueue(size_t size, const T& prototype) : queue_(size, prototype)"
  },
  {
    "label": "SwapQueue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SwapQueue(size_t size, const T& prototype, const QueueItemVerifier& queue_item_verifier) : queue_item_verifier_(queue_item_verifier), queue_(size, prototype)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "atomic_exchange_explicit()",
    "kind": "Method",
    "detail": "Function (next_read_index_ + =)",
    "insertText": "atomic_exchange_explicit(&num_elements_, size_t{0}, std::memory_order_relaxed)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (next_read_index_ - = queue_ .)",
    "insertText": "size()"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTC_DCHECK_LT(next_read_index_, queue_.size())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} ABSL_MUST_USE_RESULT bool)",
    "insertText": "Insert(T* input)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(input)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(queue_item_verifier_(*input))"
  },
  {
    "label": "atomic_fetch_add_explicit()",
    "kind": "Method",
    "detail": "Function (const size_t old_num_elements =)",
    "insertText": "atomic_fetch_add_explicit(&num_elements_, size_t{1}, std::memory_order_release)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + next_write_index_ ;)",
    "insertText": "if(next_write_index_ == queue_.size())"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (next_write_index_ = 0 ; })",
    "insertText": "RTC_DCHECK_LT(next_write_index_, queue_.size())"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(old_num_elements, queue_.size())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(output)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(queue_item_verifier_(*output))"
  },
  {
    "label": "atomic_fetch_sub_explicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_fetch_sub_explicit(&num_elements_, size_t{1}, std::memory_order_release)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + next_read_index_ ;)",
    "insertText": "if(next_read_index_ == queue_.size())"
  },
  {
    "label": "VerifyQueueSlots()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "VerifyQueueSlots()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(queue_item_verifier_(v))"
  },
  {
    "label": "SwapQueue()",
    "kind": "Method",
    "detail": "Function (} return true ; } QueueItemVerifier queue_item_verifier_ ; size_t next_write_index_ = 0 ; size_t next_read_index_ = 0 ; std::atomic<size_t> num_elements_ { 0 } ; std::vector<T> queue_ ;)",
    "insertText": "SwapQueue(const SwapQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SwapQueue&)",
    "insertText": "operator(const SwapQueue&)"
  }
]