[
  {
    "label": "AimdRateControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AimdRateControl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "AimdRateControl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_AIMD_RATE_CONTROL_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_AIMD_RATE_CONTROL_H_ # include<stdint . h> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / timestamp . h \" # include \" modules / congestion_controller / goog_cc / link_capacity_estimator . h \" # include \" modules / remote_bitrate_estimator / include / bwe_defines . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { class AimdRateControl { public :)",
    "insertText": "AimdRateControl(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "AimdRateControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AimdRateControl(const FieldTrialsView* key_value_config, bool send_side)"
  },
  {
    "label": "AimdRateControl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AimdRateControl()"
  },
  {
    "label": "ValidEstimate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidEstimate()"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(DataRate start_bitrate)"
  },
  {
    "label": "SetMinBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinBitrate(DataRate min_bitrate)"
  },
  {
    "label": "GetFeedbackInterval()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetFeedbackInterval()"
  },
  {
    "label": "TimeToReduceFurther()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeToReduceFurther(Timestamp at_time, DataRate estimated_throughput)"
  },
  {
    "label": "InitialTimeToReduceFurther()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitialTimeToReduceFurther(Timestamp at_time)"
  },
  {
    "label": "LatestEstimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "LatestEstimate()"
  },
  {
    "label": "SetRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtt(TimeDelta rtt)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "Update(const RateControlInput* input, Timestamp at_time)"
  },
  {
    "label": "SetInApplicationLimitedRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInApplicationLimitedRegion(bool in_alr)"
  },
  {
    "label": "SetEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEstimate(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "SetNetworkStateEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetworkStateEstimate(const absl::optional<NetworkStateEstimate>& estimate)"
  },
  {
    "label": "GetExpectedBandwidthPeriod()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetExpectedBandwidthPeriod()"
  },
  {
    "label": "ChangeBitrate()",
    "kind": "Method",
    "detail": "Function (private : enum class RateControlState { kRcHold,kRcIncrease,kRcDecrease } ; class GoogCcStatePrinter ; void)",
    "insertText": "ChangeBitrate(const RateControlInput& input, Timestamp at_time)"
  },
  {
    "label": "ClampBitrate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "ClampBitrate(DataRate new_bitrate)"
  },
  {
    "label": "MultiplicativeRateIncrease()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "MultiplicativeRateIncrease(Timestamp at_time, Timestamp last_ms, DataRate current_bitrate)"
  },
  {
    "label": "AdditiveRateIncrease()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "AdditiveRateIncrease(Timestamp at_time, Timestamp last_time)"
  },
  {
    "label": "UpdateChangePeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChangePeriod(Timestamp at_time)"
  },
  {
    "label": "ChangeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeState(const RateControlInput& input, Timestamp at_time)"
  }
]