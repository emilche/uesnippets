[
  {
    "label": "PointerMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerMapper"
  },
  {
    "label": "virtual_pointer_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "virtual_pointer_t"
  },
  {
    "label": "pMapNode_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pMapNode_t"
  },
  {
    "label": "BufferT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BufferT"
  },
  {
    "label": "SortBySize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SortBySize"
  },
  {
    "label": "RangeAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangeAccess"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_USE_SYCL) && \\ !defined(EIGEN_CXX11_TENSOR_TENSOR_SYCL_STORAGE_MEMORY_H)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (namespace TensorSycl { namespace internal { using sycl_acc_target = cl::sycl::access::target ; using sycl_acc_mode = cl::sycl::access::mode ; using buffer_data_type_t = uint8_t ; const sycl_acc_target default_acc_target = sycl_acc_target::global_buffer ; const sycl_acc_mode default_acc_mode = sycl_acc_mode::read_write ; class PointerMapper { public : using base_ptr_t = std::intptr_t ; struct virtual_pointer_t { base_ptr_t m_contents ; operator)",
    "insertText": "void()"
  },
  {
    "label": "base_ptr_t()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "base_ptr_t()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(virtual_pointer_t rhs)"
  },
  {
    "label": "virtual_pointer_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "virtual_pointer_t(const void *ptr) : m_contents(reinterpret_cast<base_ptr_t>(ptr))"
  },
  {
    "label": "virtual_pointer_t()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "virtual_pointer_t(base_ptr_t u) : m_contents(u)"
  },
  {
    "label": "is_nullptr()",
    "kind": "Method",
    "detail": "Function (} ; } ; const virtual_pointer_t null_virtual_ptr = nullptr ; bool)",
    "insertText": "is_nullptr(virtual_pointer_t ptr)"
  },
  {
    "label": "pMapNode_t()",
    "kind": "Method",
    "detail": "Function (} using buffer_t = cl::sycl::buffer_mem ; struct pMapNode_t { buffer_t m_buffer ; size_t m_size ; bool m_free ;)",
    "insertText": "pMapNode_t(buffer_t b, size_t size, bool f)"
  },
  {
    "label": "set_final_data()",
    "kind": "Method",
    "detail": "Function (b },m_size { size },m_free { f } { m_buffer .)",
    "insertText": "set_final_data(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const pMapNode_t &rhs)"
  },
  {
    "label": "get_insertion_point()",
    "kind": "Method",
    "detail": "Function (} } ; using pointerMap_t = std::map<virtual_pointer_t,pMapNode_t> ; pointerMap_t::iterator)",
    "insertText": "get_insertion_point(size_t requiredSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pointerMap_t::iterator retVal ; bool reuse = false ;)",
    "insertText": "if(!m_freeList.empty())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (retVal = freeElem ; reuse = true ; m_freeList .)",
    "insertText": "erase(freeElem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "if(!reuse)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (retVal =)",
    "insertText": "prev(m_pointerMap.end())"
  },
  {
    "label": "get_node()",
    "kind": "Method",
    "detail": "Function (} return retVal ; } pointerMap_t::iterator)",
    "insertText": "get_node(const virtual_pointer_t ptr)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_pointerMap .)",
    "insertText": "clear()"
  },
  {
    "label": "EIGEN_THROW_X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_THROW_X(std::out_of_range(\"There are no pointers allocated\\n\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(is_nullptr(ptr))"
  },
  {
    "label": "EIGEN_THROW_X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_THROW_X(std::out_of_range(\"Cannot access null pointer\\n\"))"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (} auto node = m_pointerMap .)",
    "insertText": "lower_bound(ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - node ; } else)",
    "insertText": "if(node->first != ptr)"
  },
  {
    "label": "EIGEN_THROW_X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_THROW_X(std::out_of_range(\"The pointer is not registered in the map\\n\"))"
  },
  {
    "label": "get_buffer()",
    "kind": "Method",
    "detail": "Function (} - - node ; } return node ; } template<buffer_data_type = buffer_data_type_t> cl::sycl::buffer<buffer_data_type,1>)",
    "insertText": "get_buffer(const virtual_pointer_t ptr)"
  },
  {
    "label": "get_node()",
    "kind": "Method",
    "detail": "Function (using sycl_buffer_t = cl::sycl::buffer<buffer_data_type,1> ; auto node =)",
    "insertText": "get_node(ptr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(node->first == ptr || node->first < ptr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(ptr < static_cast<virtual_pointer_t>(node->second.m_size + node->first))"
  },
  {
    "label": "get_access()",
    "kind": "Method",
    "detail": "Function (} template<sycl_acc_mode access_mode = default_acc_mode,sycl_acc_target access_target = default_acc_target,buffer_data_type = buffer_data_type_t> cl::sycl::accessor<buffer_data_type,1,access_mode,access_target>)",
    "insertText": "get_access(const virtual_pointer_t ptr)"
  },
  {
    "label": "buffer_data_type()",
    "kind": "Method",
    "detail": "Function (auto buf = get_buffer<)",
    "insertText": "buffer_data_type(ptr)"
  },
  {
    "label": "get_access()",
    "kind": "Method",
    "detail": "Function (} template<sycl_acc_mode access_mode = default_acc_mode,sycl_acc_target access_target = default_acc_target,buffer_data_type = buffer_data_type_t> cl::sycl::accessor<buffer_data_type,1,access_mode,access_target>)",
    "insertText": "get_access(const virtual_pointer_t ptr, cl::sycl::handler &cgh)"
  },
  {
    "label": "get_offset()",
    "kind": "Method",
    "detail": "Function (} std::ptrdiff_t)",
    "insertText": "get_offset(const virtual_pointer_t ptr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (auto start = node -> first ;)",
    "insertText": "eigen_assert(start == ptr || start < ptr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(ptr < start + node->second.m_size)"
  },
  {
    "label": "get_element_offset()",
    "kind": "Method",
    "detail": "Function (} template<buffer_data_type> size_t)",
    "insertText": "get_element_offset(const virtual_pointer_t ptr)"
  },
  {
    "label": "PointerMapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PointerMapper(base_ptr_t baseAddress = 4096)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (},m_freeList { },m_baseAddress { baseAddress } {)",
    "insertText": "if(m_baseAddress == 0)"
  },
  {
    "label": "EIGEN_THROW_X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_THROW_X(std::invalid_argument(\"Base address cannot be zero\\n\"))"
  },
  {
    "label": "PointerMapper()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "PointerMapper(const PointerMapper &)"
  },
  {
    "label": "add_pointer()",
    "kind": "Method",
    "detail": "Function (} virtual_pointer_t)",
    "insertText": "add_pointer(const buffer_t &b)"
  },
  {
    "label": "add_pointer()",
    "kind": "Method",
    "detail": "Function (} virtual_pointer_t)",
    "insertText": "add_pointer(buffer_t &&b)"
  },
  {
    "label": "fuse_forward()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fuse_forward(typename pointerMap_t::iterator &node)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto fwd_node =)",
    "insertText": "next(node)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (break ; } auto fwd_size = fwd_node -> second . m_size ; m_freeList .)",
    "insertText": "erase(fwd_node)"
  },
  {
    "label": "fuse_backward()",
    "kind": "Method",
    "detail": "Function (node -> second . m_size + = fwd_size ; } } void)",
    "insertText": "fuse_backward(typename pointerMap_t::iterator &node)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (auto prev_node =)",
    "insertText": "prev(node)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (break ; } prev_node -> second . m_size + = node -> second . m_size ; m_freeList .)",
    "insertText": "erase(node)"
  },
  {
    "label": "remove_pointer()",
    "kind": "Method",
    "detail": "Function (node = prev_node ; } } template<bool ReUse = true> void)",
    "insertText": "remove_pointer(const virtual_pointer_t ptr)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (node -> second . m_free = true ; m_freeList .)",
    "insertText": "emplace(node)"
  },
  {
    "label": "fuse_forward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fuse_forward(node)"
  },
  {
    "label": "fuse_backward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fuse_backward(node)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} } size_t)",
    "insertText": "count()"
  },
  {
    "label": "add_pointer_impl()",
    "kind": "Method",
    "detail": "Function (} private : template<class BufferT> virtual_pointer_t)",
    "insertText": "add_pointer_impl(BufferT b)"
  },
  {
    "label": "get_count()",
    "kind": "Method",
    "detail": "Function (virtual_pointer_t retVal = nullptr ; size_t bufSize = b .)",
    "insertText": "get_count()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pMapNode_t p { b,bufSize,false } ;)",
    "insertText": "if(m_pointerMap.empty())"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (virtual_pointer_t initialVal { m_baseAddress } ; m_pointerMap .)",
    "insertText": "emplace(initialVal, p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastElemIter -> second . m_buffer = b ; lastElemIter -> second . m_free = false ;)",
    "insertText": "if(lastElemIter->second.m_size > bufSize)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (auto remainingSize = lastElemIter -> second . m_size - bufSize ; pMapNode_t p2 { b,remainingSize,true } ; lastElemIter -> second . m_size = bufSize ; auto newFreePtr = lastElemIter -> first + bufSize ; auto freeNode = m_pointerMap .)",
    "insertText": "emplace(newFreePtr, p2)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (m_freeList .)",
    "insertText": "emplace(freeNode)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} retVal = lastElemIter -> first ; } else { size_t lastSize = lastElemIter -> second . m_size ; retVal = lastElemIter -> first + lastSize ; m_pointerMap .)",
    "insertText": "emplace(retVal, p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return retVal ; } struct SortBySize { bool)",
    "insertText": "operator()(typename pointerMap_t::iterator a, typename pointerMap_t::iterator b)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} } ; pointerMap_t m_pointerMap ; std::set<pointerMap_t::iterator,SortBySize> m_freeList ; std::intptr_t m_baseAddress ; } ; template<> void PointerMapper::remove_pointer<)",
    "insertText": "false(const virtual_pointer_t ptr)"
  },
  {
    "label": "SYCLmalloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "SYCLmalloc(size_t size, PointerMapper &pMap)"
  },
  {
    "label": "SYCLfree()",
    "kind": "Method",
    "detail": "Function (} template<bool ReUse = true,PointerMapper> void)",
    "insertText": "SYCLfree(void *ptr, PointerMapper &pMap)"
  },
  {
    "label": "ReUse()",
    "kind": "Method",
    "detail": "Function (pMap . template remove_pointer<)",
    "insertText": "ReUse(ptr)"
  },
  {
    "label": "SYCLfreeAll()",
    "kind": "Method",
    "detail": "Function (} template<PointerMapper> void)",
    "insertText": "SYCLfreeAll(PointerMapper &pMap)"
  },
  {
    "label": "RangeAccess()",
    "kind": "Method",
    "detail": "Function (} template<cl::sycl::access::mode AcMd,T> struct RangeAccess { const auto global_access = cl::sycl::access::target::global_buffer ; const auto is_place_holder = cl::sycl::access::placeholder::true_t ; typedef T scalar_t ; typedef scalar_t& ref_t ; typedef cl::sycl::global_ptr<scalar_t>::pointer_t ptr_t ; typedef cl::sycl::accessor<scalar_t,1,AcMd,global_access,is_place_holder> accessor ; typedef RangeAccess<AcMd,T> self_t ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "RangeAccess(accessor access, size_t offset, std::intptr_t virtual_ptr) : access_(access), offset_(offset), virtual_ptr_(virtual_ptr)"
  },
  {
    "label": "RangeAccess()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RangeAccess(cl::sycl::buffer<scalar_t, 1> buff = cl::sycl::buffer<scalar_t, 1>(cl::sycl::range<1>(1)))"
  },
  {
    "label": "offset_()",
    "kind": "Method",
    "detail": "Function (accessor { buff } },)",
    "insertText": "offset_(0), virtual_ptr_(-1)"
  },
  {
    "label": "RangeAccess()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RangeAccess(std::nullptr_t) : RangeAccess()"
  },
  {
    "label": "get_pointer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ptr_t)",
    "insertText": "get_pointer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Index> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE self_t&)",
    "insertText": "operator(Index offset)"
  },
  {
    "label": "offset_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offset_(offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (offset_ - = offset ; return* this ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "operator(const RangeAccess &lhs, std::nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "operator(const RangeAccess &lhs, std::nullptr_t i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "operator(std::nullptr_t, const RangeAccess &rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "operator(std::nullptr_t i, const RangeAccess &rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE self_t&)",
    "insertText": "operator()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (offset_ + + ;)",
    "insertText": "return(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE self_t)",
    "insertText": "operator(int i)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(i)"
  },
  {
    "label": "temp_iterator()",
    "kind": "Method",
    "detail": "Function (self_t)",
    "insertText": "temp_iterator(*this)"
  },
  {
    "label": "get_size()",
    "kind": "Method",
    "detail": "Function (offset_ + + ; return temp_iterator ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE std::ptrdiff_t)",
    "insertText": "get_size()"
  },
  {
    "label": "get_offset()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE std::ptrdiff_t)",
    "insertText": "get_offset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ref_t)",
    "insertText": "operator(int x)"
  },
  {
    "label": "get_virtual_pointer()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_t*)",
    "insertText": "get_virtual_pointer()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE operator RangeAccess<AcMd,const)",
    "insertText": "T()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "bind(cl::sycl::handler &cgh)"
  },
  {
    "label": "require()",
    "kind": "Method",
    "detail": "Function (cgh .)",
    "insertText": "require(access_)"
  }
]