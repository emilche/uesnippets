[
  {
    "label": "ITransactionObjectAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITransactionObjectAnnotation"
  },
  {
    "label": "FTransactionObjectDeltaChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionObjectDeltaChange"
  },
  {
    "label": "FTransactionObjectId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionObjectId"
  },
  {
    "label": "FTransactionObjectChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionObjectChange"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTransactionObjectEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransactionObjectEvent"
  },
  {
    "label": "FTransactionDiff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionDiff"
  },
  {
    "label": "FTransactionObjectDeltaChange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Guid . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SharedPointer . h \" class ITransactionObjectAnnotation ; struct FTransactionObjectDeltaChange {)",
    "insertText": "FTransactionObjectDeltaChange() : bHasNameChange(false) , bHasOuterChange(false) , bHasExternalPackageChange(false) , bHasPendingKillChange(false) , bHasNonPropertyChanges(false)"
  },
  {
    "label": "HasChanged()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChanged()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Merge(const FTransactionObjectDeltaChange& InOther)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bHasNameChange | = InOther . bHasNameChange ; bHasOuterChange | = InOther . bHasOuterChange ; bHasExternalPackageChange | = InOther . bHasExternalPackageChange ; bHasPendingKillChange | = InOther . bHasPendingKillChange ; bHasNonPropertyChanges | = InOther . bHasNonPropertyChanges ;)",
    "insertText": "for(const FName& OtherChangedPropName : InOther.ChangedProperties)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ChangedProperties .)",
    "insertText": "AddUnique(OtherChangedPropName)"
  },
  {
    "label": "FTransactionObjectId()",
    "kind": "Method",
    "detail": "Function (} } bool bHasNameChange : 1 ; bool bHasOuterChange : 1 ; bool bHasExternalPackageChange : 1 ; bool bHasPendingKillChange : 1 ; bool bHasNonPropertyChanges : 1 ; TArray<FName> ChangedProperties ; } ; struct FTransactionObjectId { public :)",
    "insertText": "FTransactionObjectId()"
  },
  {
    "label": "FTransactionObjectId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransactionObjectId(const UObject* Object)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(Object)"
  },
  {
    "label": "FTransactionObjectId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTransactionObjectId(const FName InObjectPackageName, const FName InObjectName, const FName InObjectPathName, const FName InObjectOuterPathName, const FName InObjectExternalPackageName, const FName InObjectClassPathName) : ObjectPackageName(InObjectPackageName) , ObjectName(InObjectName) , ObjectPathName(InObjectPathName) , ObjectOuterPathName(InObjectOuterPathName) , ObjectExternalPackageName(InObjectExternalPackageName) , ObjectClassPathName(InObjectClassPathName)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObject(const UObject* Object)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (ObjectPackageName =)",
    "insertText": "FName()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(FTransactionObjectId& Other)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectPackageName, Other.ObjectPackageName)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectName, Other.ObjectName)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectPathName, Other.ObjectPathName)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectOuterPathName, Other.ObjectOuterPathName)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectExternalPackageName, Other.ObjectExternalPackageName)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ObjectClassPathName, Other.ObjectClassPathName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTransactionObjectId& LHS, const FTransactionObjectId& RHS)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FTransactionObjectId& Id)"
  },
  {
    "label": "FTransactionObjectEvent()",
    "kind": "Method",
    "detail": "Function (} FName ObjectPackageName ; FName ObjectName ; FName ObjectPathName ; FName ObjectOuterPathName ; FName ObjectExternalPackageName ; FName ObjectClassPathName ; } ; struct FTransactionObjectChange { FTransactionObjectId OriginalId ; EObjectFlags OriginalObjectFlags = RF_NoFlags ; FTransactionObjectDeltaChange DeltaChange ; } ; enum class ETransactionObjectChangeCreatedBy : uint8 { TransactionRecord,TransactionAnnotation,} ; enum class ETransactionObjectEventType : uint8 { UndoRedo,Finalized,Snapshot,} ; class FTransactionObjectEvent { public :)",
    "insertText": "FTransactionObjectEvent()"
  },
  {
    "label": "FTransactionObjectEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransactionObjectEvent(const FGuid& InTransactionId, const FGuid& InOperationId, const ETransactionObjectEventType InEventType, const ETransactionObjectChangeCreatedBy InObjectChangeCreatedBy, const FTransactionObjectChange& InObjectChange, const TSharedPtr<ITransactionObjectAnnotation>& InAnnotation) : TransactionId(InTransactionId) , OperationId(InOperationId) , EventType(InEventType) , ObjectChangeCreatedBy(InObjectChangeCreatedBy) , ObjectChange(InObjectChange) , Annotation(InAnnotation)"
  },
  {
    "label": "GetTransactionId()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetTransactionId()"
  },
  {
    "label": "HasPropertyChanges()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPropertyChanges()"
  },
  {
    "label": "GetChangedProperties()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetChangedProperties()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (EventType = InOther . EventType ; } ObjectChange . DeltaChange .)",
    "insertText": "Merge(InOther.ObjectChange.DeltaChange)"
  }
]