[
  {
    "label": "TaskTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTraits"
  },
  {
    "label": "WorkerThreadObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThreadObserver"
  },
  {
    "label": "SingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskRunner"
  },
  {
    "label": "DelayedTaskManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayedTaskManager"
  },
  {
    "label": "WorkerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThread"
  },
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "WorkerThreadDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThreadDelegate"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PooledSingleThreadTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PooledSingleThreadTaskRunner"
  },
  {
    "label": "ContinueOnShutdown",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ContinueOnShutdown"
  },
  {
    "label": "PooledSingleThreadTaskRunnerManager()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_POOLED_SINGLE_THREAD_TASK_RUNNER_MANAGER_H_ # define BASE_TASK_THREAD_POOL_POOLED_SINGLE_THREAD_TASK_RUNNER_MANAGER_H_ # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / single_thread_task_runner_thread_mode . h \" # include \" base / task / thread_pool / environment_config . h \" # include \" base / task / thread_pool / tracked_ref . h \" # include \" base / thread_annotations . h \" # include \" base / threading / platform_thread . h \" # include \" build / build_config . h \" namespace base { class TaskTraits ; class WorkerThreadObserver ; class SingleThreadTaskRunner ; namespace internal { class DelayedTaskManager ; class WorkerThread ; class TaskTracker ; namespace { class WorkerThreadDelegate ; } class BASE_EXPORT PooledSingleThreadTaskRunnerManager final { public :)",
    "insertText": "PooledSingleThreadTaskRunnerManager(TrackedRef<TaskTracker> task_tracker, DelayedTaskManager* delayed_task_manager)"
  },
  {
    "label": "PooledSingleThreadTaskRunnerManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PooledSingleThreadTaskRunnerManager(const PooledSingleThreadTaskRunnerManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PooledSingleThreadTaskRunnerManager&)",
    "insertText": "operator(const PooledSingleThreadTaskRunnerManager&)"
  },
  {
    "label": "PooledSingleThreadTaskRunnerManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PooledSingleThreadTaskRunnerManager()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(scoped_refptr<SingleThreadTaskRunner> io_thread_task_runner, WorkerThreadObserver* worker_thread_observer = nullptr)"
  },
  {
    "label": "DidUpdateCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidUpdateCanRunPolicy()"
  },
  {
    "label": "CreateSingleThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateSingleThreadTaskRunner(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) scoped_refptr<SingleThreadTaskRunner> CreateCOMSTATaskRunner( const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "TraitsToContinueOnShutdown()",
    "kind": "Method",
    "detail": "Function (private : class PooledSingleThreadTaskRunner ; enum ContinueOnShutdown { IS_CONTINUE_ON_SHUTDOWN,IS_NOT_CONTINUE_ON_SHUTDOWN,CONTINUE_ON_SHUTDOWN_COUNT,} ; ContinueOnShutdown)",
    "insertText": "TraitsToContinueOnShutdown(const TaskTraits& traits)"
  },
  {
    "label": "CreateTaskRunnerImpl()",
    "kind": "Method",
    "detail": "Function (template<DelegateType> scoped_refptr<PooledSingleThreadTaskRunner>)",
    "insertText": "CreateTaskRunnerImpl(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "CreateWorkerThreadDelegate()",
    "kind": "Method",
    "detail": "Function (template<DelegateType> std::unique_ptr<WorkerThreadDelegate>)",
    "insertText": "CreateWorkerThreadDelegate(const std::string& name, int id, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "CreateAndRegisterWorkerThread()",
    "kind": "Method",
    "detail": "Function (template<DelegateType> WorkerThread*)",
    "insertText": "CreateAndRegisterWorkerThread(const std::string& name, SingleThreadTaskRunnerThreadMode thread_mode, ThreadType thread_type_hint) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GetSharedWorkerThreadForTraits()",
    "kind": "Method",
    "detail": "Function (template<DelegateType> WorkerThread*&)",
    "insertText": "GetSharedWorkerThreadForTraits(const TaskTraits& traits)"
  },
  {
    "label": "UnregisterWorkerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterWorkerThread(WorkerThread* worker)"
  },
  {
    "label": "ReleaseSharedWorkerThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSharedWorkerThreads()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const TrackedRef<TaskTracker> task_tracker_ ; const raw_ptr<DelayedTaskManager> delayed_task_manager_ ; scoped_refptr<SingleThreadTaskRunner> io_thread_task_runner_ ; raw_ptr<WorkerThreadObserver> worker_thread_observer_ = nullptr ; CheckedLock lock_ ; std::vector<scoped_refptr<WorkerThread>> workers_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "BUILDFLAG(IS_WIN) WorkerThread* shared_com_worker_threads_ [ENVIRONMENT_COUNT][CONTINUE_ON_SHUTDOWN_COUNT] GUARDED_BY(lock_)"
  }
]