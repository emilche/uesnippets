[
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "IOutlinerIndicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerIndicator"
  },
  {
    "label": "FTimeWarpOutlinerIndicatorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeWarpOutlinerIndicatorBuilder"
  },
  {
    "label": "STimeWarpIndicatorWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimeWarpIndicatorWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / Views / OutlinerColumns / SColumnToggleWidget . h \" namespace UE::Sequencer { class IOutlinerColumn ; class IOutlinerIndicator ; class FTimeWarpOutlinerIndicatorBuilder ; class STimeWarpIndicatorWidget : public SColumnToggleWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimeWarpIndicatorWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TWeakPtr<IOutlinerColumn> InWeakOutlinerColumn, const FCreateOutlinerColumnParams& InParams)"
  },
  {
    "label": "GetImageColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetImageColorAndOpacity()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "SetIsActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsActive(const bool bInIsActive)"
  },
  {
    "label": "IsChildActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsChildActive()"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (protected : const FSlateBrush*)",
    "insertText": "GetBrush()"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (} protected : FReply)",
    "insertText": "HandleClick()"
  }
]