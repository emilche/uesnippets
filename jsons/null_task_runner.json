[
  {
    "label": "NullTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NullTaskRunner"
  },
  {
    "label": "NullTaskRunner()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_NULL_TASK_RUNNER_H_ # define BASE_TEST_NULL_TASK_RUNNER_H_ # include \" base / callback . h \" # include \" base / compiler_specific . h \" # include \" base / task / single_thread_task_runner . h \" namespace base { class NullTaskRunner : public base::SingleThreadTaskRunner { public :)",
    "insertText": "NullTaskRunner()"
  },
  {
    "label": "NullTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NullTaskRunner(const NullTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NullTaskRunner&)",
    "insertText": "operator(const NullTaskRunner&)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, base::OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& from_here, base::OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  }
]