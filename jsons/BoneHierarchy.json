[
  {
    "label": "FBoneHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneHierarchy"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PhysicsProxy / AnalyticImplicitGroup . h \")",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(USkeletalMeshSimulationComponentLogging, NoLogging, All)"
  },
  {
    "label": "FBoneHierarchy()",
    "kind": "Method",
    "detail": "Function (class FBoneHierarchy { public :)",
    "insertText": "FBoneHierarchy() : ActorLocalToWorldDirty(false)"
  },
  {
    "label": "FBoneHierarchy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneHierarchy(const FBoneHierarchy &)"
  },
  {
    "label": "FBoneHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoneHierarchy(FBoneHierarchy&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FBoneHierarchy&)",
    "insertText": "operator(const FBoneHierarchy&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FBoneHierarchy&)",
    "insertText": "operator(FBoneHierarchy&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ImplicitGroups =)",
    "insertText": "MoveTemp(Other.ImplicitGroups)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BoneIndices =)",
    "insertText": "MoveTemp(Other.BoneIndices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SocketIndices =)",
    "insertText": "MoveTemp(Other.SocketIndices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BoneToShapeGroup =)",
    "insertText": "MoveTemp(Other.BoneToShapeGroup)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Roots =)",
    "insertText": "MoveTemp(Other.Roots)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BoneToTransformIndex =)",
    "insertText": "MoveTemp(Other.BoneToTransformIndex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TransformToBoneIndex =)",
    "insertText": "MoveTemp(Other.TransformToBoneIndex)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (LocalSpaceTransforms =)",
    "insertText": "MoveTemp(Other.LocalSpaceTransforms)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (WorldSpaceTransforms =)",
    "insertText": "MoveTemp(Other.WorldSpaceTransforms)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PrevWorldSpaceTransforms =)",
    "insertText": "MoveTemp(Other.PrevWorldSpaceTransforms)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AnimDirty =)",
    "insertText": "MoveTemp(Other.AnimDirty)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ParentIndices =)",
    "insertText": "MoveTemp(Other.ParentIndices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ChildIndices =)",
    "insertText": "MoveTemp(Other.ChildIndices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ActorLocalToWorld =)",
    "insertText": "MoveTemp(Other.ActorLocalToWorld)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ActorLocalToWorldDirty =)",
    "insertText": "MoveTemp(Other.ActorLocalToWorldDirty)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TempTargetIndices =)",
    "insertText": "MoveTemp(Other.TempTargetIndices)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ImplicitGroups .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ImplicitGroups .)",
    "insertText": "Reserve(NumBones)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(TUniquePtr<FAnalyticImplicitGroup> &&AnalyticShapeGroupIn)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 Index = ImplicitGroups .)",
    "insertText": "Add(MoveTemp(AnalyticShapeGroupIn))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<FAnalyticImplicitGroup>& AnalyticShapeGroup = ImplicitGroups [ Index ] ;)",
    "insertText": "check(BoneIndices.Find(AnalyticShapeGroup->GetBoneIndex()) == INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BoneIndices .)",
    "insertText": "Add(AnalyticShapeGroup->GetBoneIndex())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BoneToShapeGroup .)",
    "insertText": "Add(AnalyticShapeGroup->GetBoneIndex(), AnalyticShapeGroup.Get())"
  },
  {
    "label": "InitPostAdd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitPostAdd()"
  },
  {
    "label": "InitHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHierarchy()"
  },
  {
    "label": "HasBoneIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBoneIndex(const uint32 BoneIndex)"
  },
  {
    "label": "GetBoneIndices()",
    "kind": "Method",
    "detail": "Function (} const TArray<int32>&)",
    "insertText": "GetBoneIndices()"
  },
  {
    "label": "GetSocketIndexForBone()",
    "kind": "Method",
    "detail": "Function (SocketIndices [ BoneToTransformIndex [ BoneIndex ] ] = SocketIndex ; } int32)",
    "insertText": "GetSocketIndexForBone(const uint32 BoneIndex)"
  },
  {
    "label": "SetAnimLocalSpaceTransform()",
    "kind": "Method",
    "detail": "Function (PrevWorldSpaceTransforms [ Index ] = WorldSpaceTransforms [ Index ] ; } } void)",
    "insertText": "SetAnimLocalSpaceTransform(const int32 BoneIndex, const FTransform &BoneXf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 TransformIndex = BoneToTransformIndex [ BoneIndex ] ; FTransform& TargetXf = LocalSpaceTransforms [ TransformIndex ] ;)",
    "insertText": "if(!TargetXf.GetTranslation().Equals(BoneXf.GetTranslation(), 1.0e-8f) || !TargetXf.GetRotation().Equals(BoneXf.GetRotation(), 1.0e-8f) || !TargetXf.GetScale3D().Equals(BoneXf.GetScale3D(), 1.0e-8f))"
  },
  {
    "label": "SetAnimLocalDirty()",
    "kind": "Method",
    "detail": "Function (TargetXf = BoneXf ;)",
    "insertText": "SetAnimLocalDirty(TransformIndex)"
  },
  {
    "label": "SetActorWorldSpaceTransform()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetActorWorldSpaceTransform(const FTransform &InActorLocalToWorld)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (ActorLocalToWorldDirty | = ! ActorLocalToWorld .)",
    "insertText": "GetTranslation().Equals(InActorLocalToWorld.GetTranslation(), 1.0e-8f) || !ActorLocalToWorld.GetRotation().Equals(InActorLocalToWorld.GetRotation(), 1.0e-8f) || !ActorLocalToWorld.GetScale3D().Equals(InActorLocalToWorld.GetScale3D(), 1.0e-8f)"
  },
  {
    "label": "PrepareAnimWorldSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (ActorLocalToWorld = InActorLocalToWorld ; } public : bool)",
    "insertText": "PrepareAnimWorldSpaceTransforms()"
  },
  {
    "label": "PropagateAnimDirtyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateAnimDirtyFlags()"
  },
  {
    "label": "GetDirtyAnimIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyAnimIndices(TempTargetIndices)"
  },
  {
    "label": "UpdateAnimWorldSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (bool DidSomething =)",
    "insertText": "UpdateAnimWorldSpaceTransforms(TempTargetIndices)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (const int32 TransformIndex = BoneToTransformIndex [ BoneIndex ] ; return PrevWorldSpaceTransforms .)",
    "insertText": "IsValidIndex(TransformIndex)"
  },
  {
    "label": "GetTransformIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTransformIndex(const int32 BoneIndex)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (BoneIndices .)",
    "insertText": "Sort([this](const int32 BoneIndexL, const int32 BoneIndexR) { const FAnalyticImplicitGroup* GroupL = GetAnalyticShapeGroup(BoneIndexL); const FAnalyticImplicitGroup* GroupR = GetAnalyticShapeGroup(BoneIndexR); const bool bHasBodyL = GroupL->NumStructures() > 0; const bool bHasBodyR = GroupR->NumStructures() > 0; if (bHasBodyL && !bHasBodyR) { return true; } else if (!bHasBodyL && bHasBodyR) { return false; } return BoneIndexL < BoneIndexR; })"
  },
  {
    "label": "ClearHierarchy()",
    "kind": "Method",
    "detail": "Function (Group ->)",
    "insertText": "ClearHierarchy()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NumTransforms = 0 ;)",
    "insertText": "for(TUniquePtr<FAnalyticImplicitGroup> &Group : ImplicitGroups)"
  },
  {
    "label": "GetParentBoneIndex()",
    "kind": "Method",
    "detail": "Function (const int32 ParentBoneIndex = Group ->)",
    "insertText": "GetParentBoneIndex()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Roots .)",
    "insertText": "Add(Group.Get())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(BoneToShapeGroup.Contains(ParentBoneIndex))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FAnalyticImplicitGroup* Parent = BoneToShapeGroup [ ParentBoneIndex ] ;)",
    "insertText": "check(Parent != nullptr)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (Parent ->)",
    "insertText": "AddChild(Group.Get())"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (Group ->)",
    "insertText": "SetParent(Parent)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} NumTransforms + + ; })",
    "insertText": "check(Roots.Num() != 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LocalSpaceTransforms .)",
    "insertText": "Init(FTransform::Identity, NumTransforms)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (AnimDirty .)",
    "insertText": "Init(0, NumTransforms)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (SocketIndices .)",
    "insertText": "Init(INDEX_NONE, NumTransforms)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (ChildIndices .)",
    "insertText": "AddDefaulted(NumTransforms)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<const TArray<FAnalyticImplicitGroup*>*> TraversalGroups ; TraversalGroups .)",
    "insertText": "Reserve(ImplicitGroups.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TraversalGroups .)",
    "insertText": "Add(&Roots)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TransformIndex = 0 ;)",
    "insertText": "for(int32 i = 0; i < TraversalGroups.Num(); i++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnalyticImplicitGroup*>* Groups = TraversalGroups [ i ] ;)",
    "insertText": "for(FAnalyticImplicitGroup* Group : *Groups)"
  },
  {
    "label": "GetBoneIndex()",
    "kind": "Method",
    "detail": "Function (const int32 BoneIndex = Group ->)",
    "insertText": "GetBoneIndex()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BoneToTransformIndex .)",
    "insertText": "Add(BoneIndex, TransformIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TransformToBoneIndex .)",
    "insertText": "Add(TransformIndex, BoneIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 ParentTransformIndex = BoneToTransformIndex [ ParentBoneIndex ] ; ChildIndices [ ParentTransformIndex ] .)",
    "insertText": "Add(TransformIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ParentIndices [ TransformIndex ] = ParentTransformIndex ; } else {)",
    "insertText": "check(Group->GetParentBoneIndex() == INDEX_NONE)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} const TArray<FAnalyticImplicitGroup*>& Children = Group ->)",
    "insertText": "GetChildren()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ChildIndices [ TransformIndex ] .)",
    "insertText": "Reserve(Children.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TransformIndex + + ;)",
    "insertText": "if(Children.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TraversalGroups .)",
    "insertText": "Add(&Children)"
  },
  {
    "label": "UpdateAnimWorldSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (} } } } protected : bool)",
    "insertText": "UpdateAnimWorldSpaceTransforms(const TArray<int32>& TargetIndices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 ParentTransformIndex = ParentIndices [ TransformIndex ] ; const FTransform& ChildXf = LocalSpaceTransforms [ TransformIndex ] ; FTransform& WorldParentToChildXf = WorldSpaceTransforms [ TransformIndex ] ;)",
    "insertText": "if(ParentTransformIndex == INDEX_NONE)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (WorldParentToChildXf = ChildXf* ActorLocalToWorld ; } else {)",
    "insertText": "check(GetAnimLocalDirty(ParentTransformIndex) == false)"
  },
  {
    "label": "SetAnimLocalClean()",
    "kind": "Method",
    "detail": "Function (const FTransform& ParentXf = WorldSpaceTransforms [ ParentTransformIndex ] ; WorldParentToChildXf = ChildXf* ParentXf ; })",
    "insertText": "SetAnimLocalClean(TransformIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} ActorLocalToWorldDirty = false ;)",
    "insertText": "return(TargetIndices.Num() > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 TransformIndex = 0; TransformIndex < ChildIndices.Num(); TransformIndex++) if (GetAnimLocalDirty(TransformIndex))"
  },
  {
    "label": "GetDirtyIndices()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "GetDirtyIndices(TArray<int32>& TargetIndices, const uint8 Mask)"
  },
  {
    "label": "GetDirtyAnimIndices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetDirtyAnimIndices(TArray<int32>& TargetIndices)"
  },
  {
    "label": "GetDirtyIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyIndices(TargetIndices, 0b0001)"
  },
  {
    "label": "GetAnimLocalDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAnimLocalDirty(const int32 TransformIndex)"
  },
  {
    "label": "SetAnimLocalClean()",
    "kind": "Method",
    "detail": "Function (AnimDirty [ TransformIndex ] | = 0 b0001 ; } void)",
    "insertText": "SetAnimLocalClean(const int32 TransformIndex)"
  }
]