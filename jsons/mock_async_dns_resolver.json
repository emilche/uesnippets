[
  {
    "label": "MockAsyncDnsResolverResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAsyncDnsResolverResult"
  },
  {
    "label": "MockAsyncDnsResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAsyncDnsResolver"
  },
  {
    "label": "MockAsyncDnsResolverFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAsyncDnsResolverFactory"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_MOCK_ASYNC_DNS_RESOLVER_H_ # define API_TEST_MOCK_ASYNC_DNS_RESOLVER_H_ # include<functional> # include<memory> # include \" api / async_dns_resolver . h \" # include \" test / gmock . h \" namespace webrtc { class MockAsyncDnsResolverResult : public AsyncDnsResolverResult { public :)",
    "insertText": "MOCK_METHOD(bool, GetResolvedAddress, (int, rtc::SocketAddress*), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, GetError, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (} ; class MockAsyncDnsResolver : public AsyncDnsResolverInterface { public :)",
    "insertText": "MOCK_METHOD(void, Start, (const rtc::SocketAddress&, std::function<void()>), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Start, (const rtc::SocketAddress&, int family, std::function<void()>), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(AsyncDnsResolverResult&, result, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (} ; class MockAsyncDnsResolverFactory : public AsyncDnsResolverFactoryInterface { public :)",
    "insertText": "MOCK_METHOD(std::unique_ptr<webrtc::AsyncDnsResolverInterface>, CreateAndResolve, (const rtc::SocketAddress&, std::function<void()>), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::unique_ptr<webrtc::AsyncDnsResolverInterface>, CreateAndResolve, (const rtc::SocketAddress&, int, std::function<void()>), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::unique_ptr<webrtc::AsyncDnsResolverInterface>, Create, (), (override))"
  }
]