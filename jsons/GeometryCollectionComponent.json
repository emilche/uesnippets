[
  {
    "label": "FGeometryCollectionConstantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionConstantData"
  },
  {
    "label": "FGeometryCollectionDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionDynamicData"
  },
  {
    "label": "FManagedArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedArrayBase"
  },
  {
    "label": "UGeometryCollectionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollectionComponent"
  },
  {
    "label": "UBoxComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBoxComponent"
  },
  {
    "label": "UGeometryCollectionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGeometryCollectionCache"
  },
  {
    "label": "UChaosPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChaosPhysicalMaterial"
  },
  {
    "label": "AChaosSolverActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AChaosSolverActor"
  },
  {
    "label": "FGeometryCollectionEmbeddedExemplar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionEmbeddedExemplar"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "FGeometryCollectionDecayDynamicFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionDecayDynamicFacade"
  },
  {
    "label": "FGeometryDynamicCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryDynamicCollection"
  },
  {
    "label": "FGeometryCollectionDecayContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionDecayContext"
  },
  {
    "label": "FGeometryCollectionSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionSection"
  },
  {
    "label": "FDamageCollector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDamageCollector"
  },
  {
    "label": "FPhysScene_Chaos",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysScene_Chaos"
  },
  {
    "label": "AGeometryCollectionISMPoolActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGeometryCollectionISMPoolActor"
  },
  {
    "label": "IGeometryCollectionExternalRenderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGeometryCollectionExternalRenderInterface"
  },
  {
    "label": "ESimulationInitializationState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESimulationInitializationState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "InElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InElementType"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "FGeomComponentCacheParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeomComponentCacheParameters"
  },
  {
    "label": "FGeometryCollectionEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionEdit"
  },
  {
    "label": "FScopedColorEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedColorEdit"
  },
  {
    "label": "FGeometryCollectionClusterRep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionClusterRep"
  },
  {
    "label": "FClusterState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterState"
  },
  {
    "label": "FGeometryCollectionActivatedCluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionActivatedCluster"
  },
  {
    "label": "FGeometryCollectionRepData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionRepData"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FGeometryCollectionRepStateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionRepStateData"
  },
  {
    "label": "FReleasedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReleasedData"
  },
  {
    "label": "FGeometryCollectionRepDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryCollectionRepDynamicData"
  },
  {
    "label": "FClusterData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterData"
  },
  {
    "label": "FGCCollisionProfileScopedTransaction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGCCollisionProfileScopedTransaction"
  },
  {
    "label": "FGeometryCollectionCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionCommands"
  },
  {
    "label": "FGeometryCollectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionSceneProxy"
  },
  {
    "label": "FNaniteGeometryCollectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteGeometryCollectionSceneProxy"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "ERadialImpulseFalloff",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERadialImpulseFalloff"
  },
  {
    "label": "FComponentSpaceTransforms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentSpaceTransforms"
  },
  {
    "label": "FBrokenAndDecayedStates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBrokenAndDecayedStates"
  },
  {
    "label": "GEOMETRYCOLLECTIONENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GEOMETRYCOLLECTIONENGINE_API"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / MeshComponent . h \" # include \" Chaos / Defines . h \" # include \" Field / FieldSystem . h \" # include \" Field / FieldSystemActor . h \" # include \" Field / FieldSystemNodes . h \" # include \" GameFramework / Actor . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Field / FieldSystemObjects . h \" # include \" GeometryCollection / GeometryCollection . h \" # include \" GeometryCollection / GeometryCollectionSimulationTypes . h \" # include \" GeometryCollection / GeometryCollectionSimulationCoreTypes . h \" # include \" GeometryCollectionObject . h \" # include \" GeometryCollectionProxyData . h \" # include \" Physics / Experimental / PhysScene_Chaos . h \" # endif # include \" GeometryCollectionEditorSelection . h \" # include \" GeometryCollection / GeometryCollection . h \" # include \" GeometryCollection / GeometryCollectionDamagePropagationData . h \" # include \" GeometryCollectionObject . h \" # include \" GeometryCollection / RecordedTransformTrack . h \" # include \" GeometryCollection / GeometryCollectionSimulationTypes . h \" # include \" Templates / UniquePtr . h \" # include \" Chaos / ChaosGameplayEventDispatcher . h \" # include \" Chaos / ChaosNotifyHandlerInterface . h \" # include \" Chaos / ChaosSolverComponentTypes . h \" # include \" Chaos / PBDRigidsEvolutionFwd . h \" # include \" EngineDefines . h \" # include \" Dataflow / Interfaces / DataflowPhysicsObject . h \" # include \" Math / MathFwd . h \" # include \" GeometryCollectionComponent . generated . h \" struct FGeometryCollectionConstantData ; struct FGeometryCollectionDynamicData ; class FManagedArrayBase ; class UGeometryCollectionComponent ; class UBoxComponent ; class UGeometryCollectionCache ; class UChaosPhysicalMaterial ; class AChaosSolverActor ; struct FGeometryCollectionEmbeddedExemplar ; class UInstancedStaticMeshComponent ; class FGeometryCollectionDecayDynamicFacade ; class FGeometryDynamicCollection ; struct FGeometryCollectionDecayContext ; struct FGeometryCollectionSection ; struct FDamageCollector ; class FPhysScene_Chaos ; class AGeometryCollectionISMPoolActor ; class IGeometryCollectionExternalRenderInterface ; enum ESimulationInitializationState : uint8 ; enum class EClusterConnectionTypeEnum : uint8 ; enum class EInitialVelocityTypeEnum : uint8 ; enum class EObjectStateTypeEnum : uint8 ; namespace Chaos { enum class EObjectStateType : int8 ; } template<class InElementType> class TManagedArray ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosBreakEvent, const FChaosBreakEvent&, BreakEvent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosRemovalEvent, const FChaosRemovalEvent&, RemovalEvent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnChaosCrumblingEvent, const FChaosCrumblingEvent&, CrumbleEvent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnGeometryCollectionFullyDecayedEvent)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnGeometryCollectionRootMovedEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnGeometryCollectionRootMovedNativeEvent, UGeometryCollectionComponent*)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (namespace GeometryCollection { enum class ESelectionMode : uint8 { None = 0,AllGeometry,InverseGeometry,Siblings,Neighbors,Parent,Children,Level,Leaves,Clusters } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FGeomComponentCacheParameters()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; namespace GeometryCollection { enum class EEditUpdate : uint8 { None = 0,Rest = 1<<0,Physics = 1<<1,Dynamic = 1<<2,RestPhysics = Rest | Physics,RestPhysicsDynamic = Rest | Physics | Dynamic,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EEditUpdate)"
  },
  {
    "label": "FGeometryCollectionEdit()",
    "kind": "Method",
    "detail": "Function (} class FGeometryCollectionEdit { public :)",
    "insertText": "FGeometryCollectionEdit(UGeometryCollectionComponent* InComponent, GeometryCollection::EEditUpdate EditUpdate = GeometryCollection::EEditUpdate::RestPhysicsDynamic, bool bShapeIsUnchanged = false, bool bPropagateToAllMatchingComponents = true)"
  },
  {
    "label": "FGeometryCollectionEdit()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGeometryCollectionEdit()"
  },
  {
    "label": "GetRestCollection()",
    "kind": "Method",
    "detail": "Function (UGeometryCollection*)",
    "insertText": "GetRestCollection()"
  },
  {
    "label": "FScopedColorEdit()",
    "kind": "Method",
    "detail": "Function (private : UGeometryCollectionComponent* Component ; const GeometryCollection::EEditUpdate EditUpdate ; TSet<UGeometryCollectionComponent*> HadPhysicsState ; bool bShapeIsUnchanged ; bool bPropagateToAllMatchingComponents ; } ; # if WITH_EDITOR class FScopedColorEdit { public :)",
    "insertText": "FScopedColorEdit(UGeometryCollectionComponent* InComponent, bool bForceUpdate = false)"
  },
  {
    "label": "FScopedColorEdit()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedColorEdit()"
  },
  {
    "label": "SetShowBoneColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowBoneColors(bool ShowBoneColorsIn)"
  },
  {
    "label": "GetShowBoneColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowBoneColors()"
  },
  {
    "label": "SetEnableBoneSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableBoneSelection(bool ShowSelectedBonesIn)"
  },
  {
    "label": "GetEnableBoneSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableBoneSelection()"
  },
  {
    "label": "IsBoneSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoneSelected(int BoneIndex)"
  },
  {
    "label": "Sanitize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sanitize()"
  },
  {
    "label": "SetSelectedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBones(const TArray<int32>& SelectedBonesIn)"
  },
  {
    "label": "AppendSelectedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSelectedBones(const TArray<int32>& SelectedBonesIn)"
  },
  {
    "label": "ToggleSelectedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSelectedBones(const TArray<int32>& SelectedBonesIn, bool bAdd, bool bSnapToLevel = true)"
  },
  {
    "label": "AddSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedBone(int32 BoneIndex)"
  },
  {
    "label": "ClearSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedBone(int32 BoneIndex)"
  },
  {
    "label": "GetSelectedBones()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetSelectedBones()"
  },
  {
    "label": "ResetBoneSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBoneSelection()"
  },
  {
    "label": "SelectBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBones(GeometryCollection::ESelectionMode SelectionMode)"
  },
  {
    "label": "FilterSelectionToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterSelectionToLevel(bool bPreferLowestOnly = false)"
  },
  {
    "label": "GetMaxSelectedLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxSelectedLevel(bool bOnlyRigid)"
  },
  {
    "label": "IsSelectionValidAtLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionValidAtLevel(int32 TargetLevel)"
  },
  {
    "label": "IsBoneHighlighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoneHighlighted(int BoneIndex)"
  },
  {
    "label": "SetHighlightedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighlightedBones(const TArray<int32>& HighlightedBonesIn, bool bHighlightChildren = false)"
  },
  {
    "label": "AddHighlightedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHighlightedBone(int32 BoneIndex)"
  },
  {
    "label": "GetHighlightedBones()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetHighlightedBones()"
  },
  {
    "label": "ResetHighlightedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHighlightedBones()"
  },
  {
    "label": "SetLevelViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelViewMode(int ViewLevel)"
  },
  {
    "label": "GetViewLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetViewLevel()"
  },
  {
    "label": "UpdateBoneColors()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateBoneColors()"
  },
  {
    "label": "COPY_ON_WRITE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (bool bUpdated ; UGeometryCollectionComponent* Component ; TArray<FLinearColor> RandomColors ; } ; # endif # define)",
    "insertText": "COPY_ON_WRITE_ATTRIBUTE(Type, Name, Group) \\ UE_DEPRECATED(5.4, \"Use GetGeometryCollection()->\"#Name\" instead.\") \\ GEOMETRYCOLLECTIONENGINE_API const TManagedArray<Type>& Get##Name##Array()"
  },
  {
    "label": "SetMaskedValue()",
    "kind": "Method",
    "detail": "Function (\\ private : \\ \\ \\ public : struct FGeometryCollectionClusterRep { struct FClusterState { uint8 StateMask = 0 b111 ; uint8 StateOffset = 0 ; uint8 InternalClusterMask = 0 b1 ; uint8 InternalClusterOffset = 3 ; void)",
    "insertText": "SetMaskedValue(uint8 Val, uint8 Mask, uint8 Offset)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Value& = ~ Mask ;)",
    "insertText": "Value((Val & Mask) << Offset)"
  },
  {
    "label": "GetMaskedValue()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetMaskedValue(uint8 Mask, uint8 Offset)"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObjectState(Chaos::EObjectStateType State)"
  },
  {
    "label": "SetMaskedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaskedValue((uint8)State, StateMask, StateOffset)"
  },
  {
    "label": "SetInternalCluster()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInternalCluster(bool bInternalCluster)"
  },
  {
    "label": "SetMaskedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaskedValue(bInternalCluster?1:0, InternalClusterMask, InternalClusterOffset)"
  },
  {
    "label": "GetObjectState()",
    "kind": "Method",
    "detail": "Function (} Chaos::EObjectStateType)",
    "insertText": "GetObjectState()"
  },
  {
    "label": "IsInternalCluster()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternalCluster()"
  },
  {
    "label": "ClusterChanged()",
    "kind": "Method",
    "detail": "Function (} uint8 Value = 0 ; } ; FVector_NetQuantize100 Position ; FVector_NetQuantize100 LinearVelocity ; FVector_NetQuantize100 AngularVelocity ; FQuat Rotation ; uint16 ClusterIdx ; FClusterState ClusterState ; bool)",
    "insertText": "ClusterChanged(const FGeometryCollectionClusterRep& Other)"
  },
  {
    "label": "FGeometryCollectionActivatedCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryCollectionActivatedCluster(uint16 Index, const FVector& InitialLinearVel, const FVector& InitialAngularVel ) : ActivatedIndex(Index) , InitialLinearVelocity(InitialLinearVel) , InitialAngularVelocity(InitialAngularVel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint16 ActivatedIndex ; FVector_NetQuantize100 InitialLinearVelocity ; FVector_NetQuantize100 InitialAngularVelocity ; bool)",
    "insertText": "operator(const FGeometryCollectionActivatedCluster& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FGeometryCollectionRepData() : Version(0), ServerFrame(0), bIsRootAnchored(false)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (} TArray<FGeometryCollectionActivatedCluster> OneOffActivated ; TArray<FGeometryCollectionClusterRep> Clusters ; int32 Version ; int32 ServerFrame ; TOptional<float> RepDataReceivedTime ; bool bIsRootAnchored ; bool)",
    "insertText": "Identical(const FGeometryCollectionRepData* Other, uint32 PortFlags)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "HasChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChanged(const FGeometryCollectionRepData& BaseData)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FGeometryCollectionRepStateData() : Version(0) , bIsRootAnchored(false)"
  },
  {
    "label": "SetBroken()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetBroken(int32 TransformIndex, int32 NumTransforms, bool bDisabled, const FVector& LinV, const FVector& AngVInRadiansPerSecond)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (int32 Version ; TBitArray<> BrokenState ; uint8 bIsRootAnchored ; struct FReleasedData { int16 TransformIndex ; FVector_NetQuantize10 LinearVelocity ; FVector_NetQuantize10 AngularVelocityInDegreesPerSecond ; } ; TArray<FReleasedData> ReleasedData ; bool)",
    "insertText": "Identical(const FGeometryCollectionRepStateData* Other, uint32 PortFlags)"
  },
  {
    "label": "HasChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChanged(const FGeometryCollectionRepStateData& BaseData)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "IsEqualPositionsAndVelocities()",
    "kind": "Method",
    "detail": "Function (FVector_NetQuantize10 Position ; FVector_NetQuantize10 EulerRotation ; FVector_NetQuantize10 LinearVelocity ; FVector_NetQuantize10 AngularVelocityInDegreesPerSecond ; uint16 TransformIndex = INDEX_NONE ; uint8 bIsInternalCluster = false ; int32 LastUpdatedVersion = 0 ; bool)",
    "insertText": "IsEqualPositionsAndVelocities(const FClusterData& Data)"
  },
  {
    "label": "FGeometryCollectionRepDynamicData()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FGeometryCollectionRepDynamicData() : Version(0)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} int32 Version ; TArray<FClusterData> ClusterData ; bool)",
    "insertText": "SetData(const FClusterData& Data)"
  },
  {
    "label": "RemoveOutOfDateClusterData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOutOfDateClusterData()"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FGeometryCollectionRepDynamicData* Other, uint32 PortFlags)"
  },
  {
    "label": "HasChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChanged(const FGeometryCollectionRepDynamicData& BaseData)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TStructOpsTypeTraits<FGeometryCollectionRepDynamicData> : public TStructOpsTypeTraitsBase2<FGeometryCollectionRepDynamicData> { enum { WithNetSerializer = true,WithIdentical = true,} ; } ; struct FGCCollisionProfileScopedTransaction ;)",
    "insertText": "UCLASS(meta = (BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class FScopedColorEdit ; # endif class FGeometryCollectionCommands ; class FGeometryCollectionSceneProxy ; class FNaniteGeometryCollectionSceneProxy ; public : FName DefaultCollisionProfileName ; void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "ShouldCreateRenderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateRenderState()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "SetCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCollisionObjectType(ECollisionChannel Channel)"
  },
  {
    "label": "OnActorEnableCollisionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorEnableCollisionChanged()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type ReasonEnd)"
  },
  {
    "label": "OnVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVisibilityChanged()"
  },
  {
    "label": "OnActorVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorVisibilityChanged()"
  },
  {
    "label": "OnHiddenInGameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHiddenInGameChanged()"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnGeometryCollectionPropertyChangedMulticaster)"
  },
  {
    "label": "RegisterOnGeometryCollectionPropertyChanged()",
    "kind": "Method",
    "detail": "Function (typedef FOnGeometryCollectionPropertyChangedMulticaster::FDelegate FOnGeometryCollectionPropertyChanged ; FDelegateHandle)",
    "insertText": "RegisterOnGeometryCollectionPropertyChanged(const FOnGeometryCollectionPropertyChanged& Delegate)"
  },
  {
    "label": "UnregisterOnGeometryCollectionPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnGeometryCollectionPropertyChanged(FDelegateHandle Handle)"
  },
  {
    "label": "IsNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsNavigationRelevant()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "CalcLocalBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcLocalBounds()"
  },
  {
    "label": "DoesSocketExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSocketExist(FName InSocketName)"
  },
  {
    "label": "GetSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSocketTransform(FName InSocketName, ERelativeTransformSpace TransformSpace = RTS_World)"
  },
  {
    "label": "QuerySupportedSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySupportedSockets(TArray<FComponentSocketDescription>& OutSockets)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "AsyncPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncPhysicsTickComponent(float DeltaTime, float SimTime)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (public : FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "GetBodyInstance()",
    "kind": "Method",
    "detail": "Function (FBodyInstance*)",
    "insertText": "GetBodyInstance(FName BoneName = NAME_None, bool bGetWelded = true, int32 Index = -1)"
  },
  {
    "label": "SetNotifyRigidBodyCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)"
  },
  {
    "label": "CanEditSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSimulatePhysics()"
  },
  {
    "label": "SetSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulatePhysics(bool bEnabled)"
  },
  {
    "label": "SetEnableGravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableGravity(bool bGravityEnabled)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce(FVector Force, FName BoneName = NAME_None, bool bAccelChange = false)"
  },
  {
    "label": "AddForceAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtLocation(FVector Force, FVector WorldLocation, FName BoneName = NAME_None)"
  },
  {
    "label": "AddImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulse(FVector Impulse, FName BoneName = NAME_None, bool bVelChange = false)"
  },
  {
    "label": "AddImpulseAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImpulseAtLocation(FVector Impulse, FVector WorldLocation, FName BoneName = NAME_None)"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bAccelChange = false)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(FVector Origin, float Radius, float Strength, enum ERadialImpulseFalloff Falloff, bool bVelChange = false)"
  },
  {
    "label": "AddTorqueInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorqueInRadians(FVector Torque, FName BoneName = NAME_None, bool bAccelChange = false)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "SetPhysMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial)"
  },
  {
    "label": "OnComponentCollisionSettingsChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnComponentCollisionSettingsChanged(bool bUpdateOverlaps=true)"
  },
  {
    "label": "CanBeUsedInPhysicsReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedInPhysicsReplication(const FName BoneName = NAME_None)"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 MaterialIndex)"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "GetMaterialRelevance()",
    "kind": "Method",
    "detail": "Function (FMaterialRelevance)",
    "insertText": "GetMaterialRelevance(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetRootCurrentComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRootCurrentComponentSpaceTransform()"
  },
  {
    "label": "GetRootParticleMassOffset()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetRootParticleMassOffset()"
  },
  {
    "label": "GetMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMass()"
  },
  {
    "label": "CalculateMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateMass(FName BoneName = NAME_None)"
  },
  {
    "label": "EditBoneSelection()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR FScopedColorEdit)",
    "insertText": "EditBoneSelection(bool bForceUpdate = false)"
  },
  {
    "label": "SelectEmbeddedGeometry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectEmbeddedGeometry()"
  },
  {
    "label": "SetPerParticleCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerParticleCollisionProfileName(const TSet<int32>& BoneIds, FName ProfileName)"
  },
  {
    "label": "SetParticleCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleCollisionProfileName(int32 BoneId, FName ProfileName, FGCCollisionProfileScopedTransaction& InProfileNameUpdateTransaction)"
  },
  {
    "label": "UpdatePerParticleCollisionProfilesNum()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "UpdatePerParticleCollisionProfilesNum()"
  },
  {
    "label": "GetNumElements()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetNumElements(FName Group)"
  },
  {
    "label": "UpdateCachedBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedBounds()"
  },
  {
    "label": "COPY_ON_WRITE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (# define COPY_ON_WRITE_ATTRIBUTES \\ \\)",
    "insertText": "COPY_ON_WRITE_ATTRIBUTE(FVector3f, Vertex, FGeometryCollection::VerticesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(FLinearColor, Color, FGeometryCollection::VerticesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(FVector3f, TangentU, FGeometryCollection::VerticesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(FVector3f, TangentV, FGeometryCollection::VerticesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(FVector3f, Normal, FGeometryCollection::VerticesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, BoneMap, FGeometryCollection::VerticesGroup) \\ \\ \\ COPY_ON_WRITE_ATTRIBUTE(FIntVector, Indices, FGeometryCollection::FacesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(bool, Visible, FGeometryCollection::FacesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, MaterialIndex, FGeometryCollection::FacesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, MaterialID, FGeometryCollection::FacesGroup) \\ COPY_ON_WRITE_ATTRIBUTE(bool, Internal, FGeometryCollection::FacesGroup) \\ \\ \\ COPY_ON_WRITE_ATTRIBUTE(int32, TransformIndex, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(FBox, BoundingBox, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(float, InnerRadius, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(float, OuterRadius, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, VertexStart, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, VertexCount, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, FaceStart, FGeometryCollection::GeometryGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, FaceCount, FGeometryCollection::GeometryGroup) \\ \\ \\ COPY_ON_WRITE_ATTRIBUTE(FGeometryCollectionSection, Sections, FGeometryCollection::MaterialGroup) \\ \\ \\ COPY_ON_WRITE_ATTRIBUTE(FString, BoneName, FTransformCollection::TransformGroup) \\ COPY_ON_WRITE_ATTRIBUTE(FLinearColor, BoneColor, FTransformCollection::TransformGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, TransformToGeometryIndex, FTransformCollection::TransformGroup) \\ COPY_ON_WRITE_ATTRIBUTE(int32, ExemplarIndex, FTransformCollection::TransformGroup) \\ COPY_ON_WRITE_ATTRIBUTES GEOMETRYCOLLECTIONENGINE_API int32 GetParent(int32 Index)"
  },
  {
    "label": "GetParentArrayRest()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<int32>&)",
    "insertText": "GetParentArrayRest()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FNotifyGeometryCollectionPhysicsStateChange, UGeometryCollectionComponent*, FracturedComponent)"
  },
  {
    "label": "GetIsObjectDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsObjectDynamic()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FNotifyGeometryCollectionPhysicsLoadingStateChange, UGeometryCollectionComponent*, FracturedComponent)"
  },
  {
    "label": "GetIsObjectLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsObjectLoading()"
  },
  {
    "label": "GetPhysicsSolverActor()",
    "kind": "Method",
    "detail": "Function (AChaosSolverActor*)",
    "insertText": "GetPhysicsSolverActor()"
  },
  {
    "label": "GetPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (const FGeometryCollectionPhysicsProxy*)",
    "insertText": "GetPhysicsProxy()"
  },
  {
    "label": "GetIsTransformSelectionMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsTransformSelectionMode()"
  },
  {
    "label": "MarkRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRenderStateDirty()"
  },
  {
    "label": "ForceRenderUpdateDynamicData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForceRenderUpdateDynamicData()"
  },
  {
    "label": "MarkRenderDynamicDataDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRenderDynamicDataDirty()"
  },
  {
    "label": "RegisterAndInitializePhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAndInitializePhysicsProxy()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "HasValidPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidPhysicsState()"
  },
  {
    "label": "MoveComponentImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* Hit, EMoveComponentFlags MoveFlags, ETeleportType Teleport)"
  },
  {
    "label": "OnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateTransform(EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "NotifyBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBreak(const FChaosBreakEvent& Event)"
  },
  {
    "label": "NotifyRemoval()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "NotifyRemoval(const FChaosRemovalEvent& Event)"
  },
  {
    "label": "IsFullyDecayed()",
    "kind": "Method",
    "detail": "Function (FOnChaosBreakEvent OnRootBreakEvent ; FOnGeometryCollectionFullyDecayedEvent OnFullyDecayedEvent ; FOnGeometryCollectionRootMovedEvent OnRootMovedEvent ; FOnGeometryCollectionRootMovedNativeEvent OnRootMovedNativeEvent ; bool)",
    "insertText": "IsFullyDecayed()"
  },
  {
    "label": "DispatchBreakEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchBreakEvent(const FChaosBreakEvent& Event)"
  },
  {
    "label": "DispatchRemovalEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchRemovalEvent(const FChaosRemovalEvent& Event)"
  },
  {
    "label": "DispatchCrumblingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchCrumblingEvent(const FChaosCrumblingEvent& Event)"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "GetPhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (UPhysicalMaterial*)",
    "insertText": "GetPhysicalMaterial()"
  },
  {
    "label": "InitializeEmbeddedGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeEmbeddedGeometry()"
  },
  {
    "label": "RefreshEmbeddedGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshEmbeddedGeometry()"
  },
  {
    "label": "SetEmbeddedGeometrySelectable()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetEmbeddedGeometrySelectable(bool bSelectableIn)"
  },
  {
    "label": "ForceNativeRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNativeRendering(bool bForce)"
  },
  {
    "label": "EmbeddedIndexToTransformIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "EmbeddedIndexToTransformIndex(const UInstancedStaticMeshComponent* ISMComponent, int32 InstanceIndex)"
  },
  {
    "label": "GetBoneColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneColors(TArray<FColor>& OutColors)"
  },
  {
    "label": "GetHiddenTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHiddenTransforms(TArray<bool>& OutHiddenTransforms)"
  },
  {
    "label": "GetRestTransforms()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetRestTransforms(TArray<FMatrix44f>& OutRestTransforms)"
  },
  {
    "label": "GetRunTimeDataCollector()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA const FDamageCollector*)",
    "insertText": "GetRunTimeDataCollector()"
  },
  {
    "label": "SetRestState()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetRestState(TArray<FTransform>&& InRestTransforms)"
  },
  {
    "label": "ResetRestTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRestTransforms()"
  },
  {
    "label": "SetDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDynamicState(const Chaos::EObjectStateType& NewDynamicState)"
  },
  {
    "label": "SetInitialTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialTransforms(const TArray<FTransform>& InitialTransforms)"
  },
  {
    "label": "SetInitialClusterBreaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialClusterBreaks(const TArray<int32>& ReleaseIndices)"
  },
  {
    "label": "GetComponentSpaceTransforms3f()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform3f>&)",
    "insertText": "GetComponentSpaceTransforms3f()"
  },
  {
    "label": "GetDynamicCollection()",
    "kind": "Method",
    "detail": "Function (const FGeometryDynamicCollection*)",
    "insertText": "GetDynamicCollection()"
  },
  {
    "label": "SetUpdateNavigationInTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateNavigationInTick(const bool bUpdateInTick)"
  },
  {
    "label": "GetCustomRenderer()",
    "kind": "Method",
    "detail": "Function (IGeometryCollectionExternalRenderInterface*)",
    "insertText": "GetCustomRenderer()"
  },
  {
    "label": "SetRootProxyLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootProxyLocalTransform(int32 Index, const FTransform3f& RootProxyTransform)"
  },
  {
    "label": "ClearRootProxyLocalTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRootProxyLocalTransforms()"
  },
  {
    "label": "ReregisterAllCustomRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReregisterAllCustomRenderers()"
  },
  {
    "label": "SetUpdateCustomRendererOnPostPhysicsSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateCustomRendererOnPostPhysicsSync(bool bValue)"
  },
  {
    "label": "GetUpdateCustomRendererOnPostPhysicsSync()",
    "kind": "Method",
    "detail": "Function (bUpdateCustomRendererOnPostPhysicsSync = bValue ; } bool)",
    "insertText": "GetUpdateCustomRendererOnPostPhysicsSync()"
  },
  {
    "label": "ShouldUpdateComponentTransformToRootBone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUpdateComponentTransformToRootBone()"
  },
  {
    "label": "SetEnableReplication()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnableReplication(bool bInEnableReplication)"
  },
  {
    "label": "SetReplicationAbandonAfterLevel()",
    "kind": "Method",
    "detail": "Function (bEnableReplication = bInEnableReplication ; } void)",
    "insertText": "SetReplicationAbandonAfterLevel(int32 InReplicationAbandonAfterLevel)"
  },
  {
    "label": "SetReplicationMaxPositionAndVelocityCorrectionLevel()",
    "kind": "Method",
    "detail": "Function (ReplicationAbandonAfterLevel = InReplicationAbandonAfterLevel ; } void)",
    "insertText": "SetReplicationMaxPositionAndVelocityCorrectionLevel(int32 InReplicationMaxPositionAndVelocityCorrectionLevel)"
  },
  {
    "label": "GetPreviousComponentToWorld()",
    "kind": "Method",
    "detail": "Function (ReplicationMaxPositionAndVelocityCorrectionLevel = InReplicationMaxPositionAndVelocityCorrectionLevel ; } const FTransform&)",
    "insertText": "GetPreviousComponentToWorld()"
  },
  {
    "label": "DispatchChaosPhysicsCollisionBlueprintEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchChaosPhysicsCollisionBlueprintEvents(const FChaosPhysicsCollisionInfo& CollisionInfo)"
  },
  {
    "label": "CheckFullyDecayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckFullyDecayed()"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "InitDynamicData()",
    "kind": "Method",
    "detail": "Function (FGeometryCollectionDynamicData*)",
    "insertText": "InitDynamicData(bool bInitialization = false)"
  },
  {
    "label": "ResetDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamicCollection()"
  },
  {
    "label": "GetInitializationCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInitializationCommands(TArray<FFieldSystemCommand>& CombinedCommmands)"
  },
  {
    "label": "DispatchFieldCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchFieldCommand(const FFieldSystemCommand& InCommand)"
  },
  {
    "label": "GetSolver()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsSolver*)",
    "insertText": "GetSolver(const UGeometryCollectionComponent& GeometryCollectionComponent)"
  },
  {
    "label": "ComputeBoundsFromComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeBoundsFromComponentSpaceTransforms(const FTransform& LocalToWorldWithScale, const TArray<FTransform>& ComponentSpaceTransformsArray)"
  },
  {
    "label": "ComputeBoundsFromComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeBoundsFromComponentSpaceTransforms(const FTransform& LocalToWorldWithScale, const TArray<FTransform3f>& ComponentSpaceTransformsArray)"
  },
  {
    "label": "ComputeBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeBounds(const FTransform& LocalToWorldWithScale)"
  },
  {
    "label": "RegisterForEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForEvents()"
  },
  {
    "label": "UpdateRBCollisionEventRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRBCollisionEventRegistration()"
  },
  {
    "label": "UpdateGlobalCollisionEventRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalCollisionEventRegistration()"
  },
  {
    "label": "UpdateGlobalRemovalEventRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGlobalRemovalEventRegistration()"
  },
  {
    "label": "RequestUpdateRepData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateRepData()"
  },
  {
    "label": "UpdateRepData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRepData()"
  },
  {
    "label": "UpdateRepStateAndDynamicData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRepStateAndDynamicData()"
  },
  {
    "label": "ResetRepData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRepData()"
  },
  {
    "label": "ProcessRepData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessRepData(float DeltaTime, float SimTime)"
  },
  {
    "label": "ProcessRepDataOnPT()",
    "kind": "Method",
    "detail": "Function (int32 VersionProcessed = INDEX_NONE ; int32 DynamicRepDataVersionProcessed = INDEX_NONE ; int64 LastAsyncPhysicsTickMs = 0 ; private : void)",
    "insertText": "ProcessRepDataOnPT()"
  },
  {
    "label": "ProcessRepStateDataOnPT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRepStateDataOnPT()"
  },
  {
    "label": "ProcessRepDynamicDataOnPT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRepDynamicDataOnPT()"
  },
  {
    "label": "InitializeRemovalDynamicAttributesIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeRemovalDynamicAttributesIfNeeded()"
  },
  {
    "label": "SendDynamicDataToSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendDynamicDataToSceneProxy()"
  },
  {
    "label": "RestTransformsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestTransformsChanged()"
  },
  {
    "label": "GetCurrentTransform()",
    "kind": "Method",
    "detail": "Function (FTransform3f)",
    "insertText": "GetCurrentTransform(int32 Index)"
  },
  {
    "label": "ComputeCurrentGlobalsMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCurrentGlobalsMatrices(TArray<FTransform3f>& OutTransforms)"
  },
  {
    "label": "FComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (struct FComponentSpaceTransforms { public :)",
    "insertText": "FComponentSpaceTransforms(const UGeometryCollectionComponent* InComponent = nullptr) : RootIndex(INDEX_NONE) , Component(InComponent)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bIsRootDirty = 1 ; bIsDirty = 1 ; } void)",
    "insertText": "Reset(int32 NumTransforms, int32 InRootIndex)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "SetNumUninitialized(NumTransforms)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (RootIndex = InRootIndex ;)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (bIsRootDirty = true ; bIsDirty = true ; } int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "RequestAllTransforms()",
    "kind": "Method",
    "detail": "Function (} const TArray<FTransform3f>&)",
    "insertText": "RequestAllTransforms()"
  },
  {
    "label": "RequestRootTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform3f&)",
    "insertText": "RequestRootTransform()"
  },
  {
    "label": "SwitchRenderModels()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SwitchRenderModels(const AActor* Actor)"
  },
  {
    "label": "IsEmbeddedGeometryValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA TArray<TArray<int32>> EmbeddedBoneMaps ; TArray<int32> EmbeddedInstanceIndex ; # endif bool)",
    "insertText": "IsEmbeddedGeometryValid()"
  },
  {
    "label": "ClearEmbeddedGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearEmbeddedGeometry()"
  },
  {
    "label": "IsCustomRendererAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomRendererAvailable()"
  },
  {
    "label": "IsUsingCustomRenderer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingCustomRenderer()"
  },
  {
    "label": "RegisterCustomRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomRenderer()"
  },
  {
    "label": "UnregisterCustomRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCustomRenderer()"
  },
  {
    "label": "RefreshCustomRenderer()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RefreshCustomRenderer()"
  },
  {
    "label": "RefreshRootProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshRootProxies()"
  },
  {
    "label": "CanRunSimulationInEditor()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanRunSimulationInEditor()"
  },
  {
    "label": "IncrementSleepTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementSleepTimer(float DeltaTime)"
  },
  {
    "label": "IncrementBreakTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementBreakTimer(float DeltaTime)"
  },
  {
    "label": "CalculateInnerSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateInnerSphere(int32 TransformIndex, UE::Math::TSphere<double>& SphereOut)"
  },
  {
    "label": "UpdateDecay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecay(int32 TransformIdx, float UpdatedDecay, bool UseClusterCrumbling, bool HasDynamicInternalClusterParent, FGeometryCollectionDecayContext& ContextInOut)"
  },
  {
    "label": "UpdateAttachedChildrenTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttachedChildrenTransform()"
  },
  {
    "label": "UpdateRenderSystemsIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderSystemsIfNeeded(bool bDynamicCollectionDirty)"
  },
  {
    "label": "UpdateNavigationDataIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationDataIfNeeded(bool bDynamicCollectionDirty)"
  },
  {
    "label": "UpdateRemovalIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRemovalIfNeeded()"
  },
  {
    "label": "BuildInitialFilterData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInitialFilterData()"
  },
  {
    "label": "LoadCollisionProfiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCollisionProfiles()"
  },
  {
    "label": "OnPostPhysicsSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostPhysicsSync()"
  },
  {
    "label": "OnPostCreateParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostCreateParticles()"
  },
  {
    "label": "HasVisibleGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVisibleGeometry()"
  },
  {
    "label": "ComputeGlobalMatricesFromComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (TArray<FMatrix>)",
    "insertText": "ComputeGlobalMatricesFromComponentSpaceTransforms()"
  },
  {
    "label": "ComputeMassScaleRelativeToAsset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeMassScaleRelativeToAsset()"
  },
  {
    "label": "MoveComponentToRootTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveComponentToRootTransform()"
  },
  {
    "label": "OnTransformsDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformsDirty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (private : struct FBrokenAndDecayedStates { public : void)",
    "insertText": "Reset(int32 NumTransforms)"
  },
  {
    "label": "GetIsRootBroken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsRootBroken()"
  },
  {
    "label": "GetHasDecayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasDecayed(int32 TransformIndex)"
  },
  {
    "label": "GetRootBrokenElapsedTimeInMs()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetRootBrokenElapsedTimeInMs()"
  },
  {
    "label": "SetRootIsBroken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootIsBroken(bool bIsBroken)"
  },
  {
    "label": "SetIsBroken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsBroken(int32 TransformIndex)"
  },
  {
    "label": "SetHasDecayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasDecayed(int32 TransformIndex)"
  },
  {
    "label": "SetHasDecayedRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasDecayedRecursive(int32 TransformIndex, const TArray<TSet<int32>>& Children)"
  },
  {
    "label": "HasAnyDecaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyDecaying()"
  },
  {
    "label": "HasFullyDecayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFullyDecayed()"
  },
  {
    "label": "UpdateBrokenAndDecayedStates()",
    "kind": "Method",
    "detail": "Function (private : int32 NumTransforms = 0 ; bool bIsRootBroken = false ; double RootBrokenEventTimeInMs = 0 ; TBitArray<> IsBroken ; TBitArray<> HasDecayed ; int32 NumDecaying = 0 ; } ; FBrokenAndDecayedStates BrokenAndDecayedStates ; void)",
    "insertText": "UpdateBrokenAndDecayedStates()"
  },
  {
    "label": "ShouldCreateRootProxyComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateRootProxyComponents()"
  },
  {
    "label": "FlushNetDormancyIfNeeded()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform3f> RootProxyLocalTransforms ; private : enum class ENetAwakeningMode { ForceDormancyAwake,FlushNetDormancy,} ; void)",
    "insertText": "FlushNetDormancyIfNeeded()"
  },
  {
    "label": "GetDesiredNetAwakeningMode()",
    "kind": "Method",
    "detail": "Function (ENetAwakeningMode)",
    "insertText": "GetDesiredNetAwakeningMode()"
  },
  {
    "label": "GetPhysicsObjectById()",
    "kind": "Method",
    "detail": "Function (public : Chaos::FPhysicsObject*)",
    "insertText": "GetPhysicsObjectById(Chaos::FPhysicsObjectId Id)"
  },
  {
    "label": "GetPhysicsObjectByName()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObject*)",
    "insertText": "GetPhysicsObjectByName(const FName& Name)"
  },
  {
    "label": "GetAllPhysicsObjects()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::FPhysicsObject*>)",
    "insertText": "GetAllPhysicsObjects()"
  },
  {
    "label": "GetIdFromGTParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObjectId)",
    "insertText": "GetIdFromGTParticle(Chaos::FGeometryParticle* Particle)"
  },
  {
    "label": "IsHLODRelevant()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsHLODRelevant()"
  },
  {
    "label": "GetHLODProxyComponents()",
    "kind": "Method",
    "detail": "Function (TArray<UActorComponent*>)",
    "insertText": "GetHLODProxyComponents()"
  },
  {
    "label": "RebaseDynamicCollectionTransformsOnNewWorldTransform()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RebaseDynamicCollectionTransformsOnNewWorldTransform()"
  },
  {
    "label": "FGCCollisionProfileScopedTransaction()",
    "kind": "Method",
    "detail": "Function (struct FGCCollisionProfileScopedTransaction ; } ; struct FGCCollisionProfileScopedTransaction {)",
    "insertText": "FGCCollisionProfileScopedTransaction(UGeometryCollectionComponent* InGCComponentInstance) : GCComponentInstance(InGCComponentInstance)"
  },
  {
    "label": "FGCCollisionProfileScopedTransaction()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGCCollisionProfileScopedTransaction()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FGCCollisionProfileScopedTransaction&)",
    "insertText": "operator(const FGCCollisionProfileScopedTransaction& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGCCollisionProfileScopedTransaction&)",
    "insertText": "operator(FGCCollisionProfileScopedTransaction&& Other)"
  },
  {
    "label": "FGCCollisionProfileScopedTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGCCollisionProfileScopedTransaction(FGCCollisionProfileScopedTransaction&& Other)"
  },
  {
    "label": "FGCCollisionProfileScopedTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGCCollisionProfileScopedTransaction(FGCCollisionProfileScopedTransaction& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bHasChanged = true ; } bool)",
    "insertText": "IsValid()"
  }
]