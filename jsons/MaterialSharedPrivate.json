[
  {
    "label": "FObjectPreSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPreSaveContext"
  },
  {
    "label": "FAppendToClassSchemaContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAppendToClassSchemaContext"
  },
  {
    "label": "FMaterialResourceForCooking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialResourceForCooking"
  },
  {
    "label": "FRecordedMaterialResourceForCooking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordedMaterialResourceForCooking"
  },
  {
    "label": "RecordMaterialDependenciesForCook()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" MaterialShared . h \" # include \" RHIFeatureLevel . h \" # include \" RHIShaderPlatform . h \" # include \" SceneTypes . h \" # include \" Serialization / CompactBinary . h \" # include \" Serialization / CompactBinaryWriter . h \" class FObjectPreSaveContext ; struct FAppendToClassSchemaContext ; struct FMaterialResourceForCooking ; namespace UE::MaterialInterface::Private { void)",
    "insertText": "RecordMaterialDependenciesForCook(FObjectPreSaveContext ObjectSaveContext, TConstArrayView<FMaterialResourceForCooking> Resources)"
  },
  {
    "label": "HashMaterialStaticClassDependenciesForCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashMaterialStaticClassDependenciesForCook(FAppendToClassSchemaContext& Context)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (struct FRecordedMaterialResourceForCooking { FMaterialShaderMapId ShaderMapId ; FMaterialShaderParameters ShaderParameters ; EShaderPlatform ShaderPlatform ; TArray<FString> ExpressionIncludes ; void)",
    "insertText": "Save(FCbWriter& Writer)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoad(FCbFieldView Field)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; } FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const UE::MaterialInterface::Private::FRecordedMaterialResourceForCooking& Value)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Save(Writer)"
  },
  {
    "label": "GetViewFieldAsInteger()",
    "kind": "Method",
    "detail": "Function (template<IntType> IntType)",
    "insertText": "GetViewFieldAsInteger(FCbFieldView FieldView, IntType DefaultValue)"
  },
  {
    "label": "GetViewFieldAsInteger()",
    "kind": "Method",
    "detail": "Function (} template<> uint8)",
    "insertText": "GetViewFieldAsInteger(FCbFieldView FieldView, uint8 DefaultValue)"
  },
  {
    "label": "GetViewFieldAsInteger()",
    "kind": "Method",
    "detail": "Function (} template<> uint16)",
    "insertText": "GetViewFieldAsInteger(FCbFieldView FieldView, uint16 DefaultValue)"
  },
  {
    "label": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT(EnumType, IntType, NumValues, InvalidValue) \\ inline bool LoadFromCompactBinary(FCbFieldView Field, EnumType& OutValue)"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (\\ IntType IntValue = GetViewFieldAsInteger<)",
    "insertText": "IntType(Field, static_cast<IntType>(InvalidValue))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(Field.HasError() || IntValue >= static_cast<IntType>(NumValues))"
  },
  {
    "label": "EnumType()",
    "kind": "Method",
    "detail": "Function (\\ OutValue = static_cast<)",
    "insertText": "EnumType(InvalidValue)"
  },
  {
    "label": "EnumType()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ OutValue = static_cast<)",
    "insertText": "EnumType(IntValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ return true ; \\ } \\ FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, EnumType Value)"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (\\ Writer<<static_cast<)",
    "insertText": "IntType(Value)"
  },
  {
    "label": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT()",
    "kind": "Method",
    "detail": "Function (\\ return Writer ; \\ })",
    "insertText": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT(EShaderPlatform, uint16, SP_NumPlatforms, SP_NumPlatforms)"
  },
  {
    "label": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT(EMaterialQualityLevel::Type, uint8, EMaterialQualityLevel::Num, EMaterialQualityLevel::Low)"
  },
  {
    "label": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEFINEINLINE_COMPACTBINARY_ENUM_INT(ERHIFeatureLevel::Type, uint8, ERHIFeatureLevel::Num, ERHIFeatureLevel::ES3_1)"
  }
]