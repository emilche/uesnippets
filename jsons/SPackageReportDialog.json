[
  {
    "label": "FPackageReportNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageReportNode"
  },
  {
    "label": "ReportPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReportPackageData"
  },
  {
    "label": "FChildrenState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChildrenState"
  },
  {
    "label": "SPackageReportDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPackageReportDialog"
  },
  {
    "label": "FPackageReportNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" struct FPackageReportNode ; typedef STreeView<TSharedPtr<struct FPackageReportNode>> PackageReportTree ; struct ReportPackageData { FString Name ; bool bShouldMigratePackage ; } ; struct FPackageReportNode { FString NodeName ; ECheckBoxState CheckedState ; bool* bShouldMigratePackage ; bool bIsFolder ; FPackageReportNode* Parent ; TArray<TSharedPtr<FPackageReportNode>> Children ;)",
    "insertText": "FPackageReportNode()"
  },
  {
    "label": "FPackageReportNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageReportNode(const FString& InNodeName, bool InIsFolder)"
  },
  {
    "label": "AddPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackage(const FString& PackageName, bool* bInIsPackageIncluded)"
  },
  {
    "label": "ExpandChildrenRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandChildrenRecursively(const TSharedRef<PackageReportTree>& Treeview)"
  },
  {
    "label": "AddPackage_Recursive()",
    "kind": "Method",
    "detail": "Function (private : struct FChildrenState { bool bAnyChildIsChecked ; bool bAllChildrenAreChecked ; } ; FChildrenState)",
    "insertText": "AddPackage_Recursive(TArray<FString>& PathElements, bool* bInIsPackageIncluded)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} ; class SPackageReportDialog : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE(FOnReportConfirmed) SLATE_BEGIN_ARGS( SPackageReportDialog)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs, const FText& InReportMessage, TArray<ReportPackageData>& InPackageNames, const FOnReportConfirmed& InOnReportConfirmed)"
  },
  {
    "label": "OpenPackageReportDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenPackageReportDialog(const FText& ReportMessage, TArray<ReportPackageData>& PackageNames, const FOnReportConfirmed& InOnReportConfirmed)"
  },
  {
    "label": "CloseDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDialog()"
  },
  {
    "label": "SetStateRecursive()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetStateRecursive(TSharedPtr<FPackageReportNode> TreeItem, bool bIsChecked)"
  },
  {
    "label": "GetEnabledCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetEnabledCheckState(TSharedPtr<FPackageReportNode> TreeItem)"
  },
  {
    "label": "CheckBoxStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckBoxStateChanged(ECheckBoxState InCheckBoxState, TSharedPtr<FPackageReportNode> TreeItem, TSharedRef<STableViewBase> OwnerTable)"
  },
  {
    "label": "ConstructNodeTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructNodeTree(TArray<ReportPackageData>& PackageNames)"
  },
  {
    "label": "GenerateTreeRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateTreeRow(TSharedPtr<FPackageReportNode> TreeItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetChildrenForTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildrenForTree(TSharedPtr<FPackageReportNode> TreeItem, TArray< TSharedPtr<FPackageReportNode> >& OutChildren)"
  },
  {
    "label": "GetNodeIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetNodeIcon(const TSharedPtr<FPackageReportNode>& ReportNode)"
  },
  {
    "label": "OkClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OkClicked()"
  },
  {
    "label": "CancelClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "CancelClicked()"
  }
]