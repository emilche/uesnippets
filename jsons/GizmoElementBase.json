[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UGizmoElementBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementBase"
  },
  {
    "label": "FRenderTraversalState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderTraversalState"
  },
  {
    "label": "FLineTraceTraversalState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineTraceTraversalState"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BaseGizmos / GizmoElementRenderState . h \" # include \" BaseGizmos / GizmoElementShared . h \" # include \" BaseGizmos / GizmoInterfaces . h \" # include \" BaseGizmos / GizmoRenderingUtil . h \" # include \" BaseGizmos / GizmoViewContext . h \" # include \" InputState . h \" # include \" SceneView . h \" # include \" ToolContextInterfaces . h \" # include \" UObject / GCObject . h \" # include \" GizmoElementBase . generated . h \" class UMaterialInterface ;)",
    "insertText": "UCLASS(Transient, Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (float DefaultViewDependentAxialMaxCosAngleTol = 0 . 9 9 8 f ; float DefaultViewDependentPlanarMinCosAngleTol = 0 . 0 5 2 f ; float DefaultViewAlignAngleTol = 0 . 0 5 2 f ; float DefaultViewAlignMaxCosAngleTol = 0 . 9 9 8 f ; uint32 DefaultPartIdentifier = 0 ; struct FRenderTraversalState { FTransform LocalToWorldTransform ; double PixelToWorldScale = 1 . 0 ; EGizmoElementInteractionState InteractionState = EGizmoElementInteractionState::None ; FGizmoElementMeshRenderStateAttributes MeshRenderState ; FGizmoElementLineRenderStateAttributes LineRenderState ; void)",
    "insertText": "Initialize(const FSceneView* InSceneView, FTransform InTransform)"
  },
  {
    "label": "CalculateLocalPixelToWorldScale()",
    "kind": "Method",
    "detail": "Function (LocalToWorldTransform = InTransform ; PixelToWorldScale = UE::)",
    "insertText": "CalculateLocalPixelToWorldScale(InSceneView, InTransform.GetLocation())"
  },
  {
    "label": "GetCurrentMaterial()",
    "kind": "Method",
    "detail": "Function (} const UMaterialInterface*)",
    "insertText": "GetCurrentMaterial()"
  },
  {
    "label": "GetCurrentVertexColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetCurrentVertexColor()"
  },
  {
    "label": "GetCurrentLineColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetCurrentLineColor()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLineTraceTraversalState { FTransform LocalToWorldTransform ; double PixelToWorldScale = 1 . 0 ; bool bIsPerspectiveProjection = true ; void)",
    "insertText": "Initialize(const UGizmoViewContext* InGizmoViewContext, FTransform InTransform)"
  },
  {
    "label": "CalculateLocalPixelToWorldScale()",
    "kind": "Method",
    "detail": "Function (LocalToWorldTransform = InTransform ; PixelToWorldScale = UE::)",
    "insertText": "CalculateLocalPixelToWorldScale(InGizmoViewContext, InTransform.GetLocation())"
  },
  {
    "label": "IsPerspectiveProjection()",
    "kind": "Method",
    "detail": "Function (bIsPerspectiveProjection = InGizmoViewContext ->)",
    "insertText": "IsPerspectiveProjection()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (} } ; public : void)",
    "insertText": "Render(IToolsContextRenderAPI* RenderAPI, const FRenderTraversalState& RenderState) PURE_VIRTUAL(UGizmoElementBase::Render)"
  },
  {
    "label": "LineTrace()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "LineTrace(const UGizmoViewContext* ViewContext, const FLineTraceTraversalState& LineTraceState, const FVector& RayOrigin, const FVector& RayDirection) PURE_VIRTUAL(UGizmoElementBase::LineTrace, return FInputRayHit();)"
  },
  {
    "label": "SetVisibleState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleState(bool bVisible)"
  },
  {
    "label": "GetVisibleState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVisibleState()"
  },
  {
    "label": "SetHittableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHittableState(bool bHittable)"
  },
  {
    "label": "GetHittableState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHittableState()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool bInEnabled)"
  },
  {
    "label": "GetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabled()"
  },
  {
    "label": "SetEnabledForPerspectiveProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledForPerspectiveProjection(bool bInEnabledForPerspectiveProjection)"
  },
  {
    "label": "GetEnabledForPerspectiveProjection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledForPerspectiveProjection()"
  },
  {
    "label": "SetEnabledInOrthographicProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledInOrthographicProjection(bool bInEnabledForOrthographicProjection)"
  },
  {
    "label": "GetEnabledInOrthographicProjection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledInOrthographicProjection()"
  },
  {
    "label": "SetEnabledForDefaultState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledForDefaultState(bool bInEnabledForDefaultState)"
  },
  {
    "label": "GetEnabledForDefaultState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledForDefaultState()"
  },
  {
    "label": "SetEnabledForHoveringState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledForHoveringState(bool bInEnabledForHoveringState)"
  },
  {
    "label": "GetEnabledForHoveringState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledForHoveringState()"
  },
  {
    "label": "SetEnabledForInteractingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabledForInteractingState(bool bInEnabledForInteractingState)"
  },
  {
    "label": "GetEnabledForInteractingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledForInteractingState()"
  },
  {
    "label": "SetPartIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPartIdentifier(uint32 InPartId)"
  },
  {
    "label": "GetPartIdentifier()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPartIdentifier()"
  },
  {
    "label": "SetElementState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementState(EGizmoElementState InElementState)"
  },
  {
    "label": "GetElementState()",
    "kind": "Method",
    "detail": "Function (EGizmoElementState)",
    "insertText": "GetElementState()"
  },
  {
    "label": "SetElementInteractionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementInteractionState(EGizmoElementInteractionState InInteractionState)"
  },
  {
    "label": "GetElementInteractionState()",
    "kind": "Method",
    "detail": "Function (EGizmoElementInteractionState)",
    "insertText": "GetElementInteractionState()"
  },
  {
    "label": "UpdatePartVisibleState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePartVisibleState(bool bVisible, uint32 InPartIdentifier)"
  },
  {
    "label": "GetPartVisibleState()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "GetPartVisibleState(uint32 InPartIdentifier)"
  },
  {
    "label": "UpdatePartHittableState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePartHittableState(bool bHittable, uint32 InPartIdentifier)"
  },
  {
    "label": "GetPartHittableState()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "GetPartHittableState(uint32 InPartIdentifier)"
  },
  {
    "label": "UpdatePartInteractionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePartInteractionState(EGizmoElementInteractionState InInteractionState, uint32 InPartIdentifier)"
  },
  {
    "label": "GetPartInteractionState()",
    "kind": "Method",
    "detail": "Function (TOptional<EGizmoElementInteractionState>)",
    "insertText": "GetPartInteractionState(uint32 InPartIdentifier)"
  },
  {
    "label": "SetViewDependentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewDependentType(EGizmoElementViewDependentType ViewDependentType)"
  },
  {
    "label": "GetViewDependentType()",
    "kind": "Method",
    "detail": "Function (EGizmoElementViewDependentType)",
    "insertText": "GetViewDependentType()"
  },
  {
    "label": "SetViewDependentAngleTol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewDependentAngleTol(float InMaxAngleTol)"
  },
  {
    "label": "GetViewDependentAngleTol()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewDependentAngleTol()"
  },
  {
    "label": "SetViewDependentAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewDependentAxis(FVector InAxis)"
  },
  {
    "label": "GetViewDependentAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetViewDependentAxis()"
  },
  {
    "label": "SetViewAlignType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewAlignType(EGizmoElementViewAlignType InViewAlignType)"
  },
  {
    "label": "GetViewAlignType()",
    "kind": "Method",
    "detail": "Function (EGizmoElementViewAlignType)",
    "insertText": "GetViewAlignType()"
  },
  {
    "label": "SetViewAlignAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewAlignAxis(FVector InAxis)"
  },
  {
    "label": "GetViewAlignAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetViewAlignAxis()"
  },
  {
    "label": "SetViewAlignNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewAlignNormal(FVector InAxis)"
  },
  {
    "label": "GetViewAlignNormal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetViewAlignNormal()"
  },
  {
    "label": "SetViewAlignAxialAngleTol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewAlignAxialAngleTol(float InMaxAngleTol)"
  },
  {
    "label": "GetViewAlignAxialAngleTol()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewAlignAxialAngleTol()"
  },
  {
    "label": "SetPixelHitDistanceThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPixelHitDistanceThreshold(float InPixelHitDistanceThreshold)"
  },
  {
    "label": "GetPixelHitDistanceThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPixelHitDistanceThreshold()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(TWeakObjectPtr<UMaterialInterface> InMaterial, bool InOverridesChildState = false)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (const UMaterialInterface*)",
    "insertText": "GetMaterial()"
  },
  {
    "label": "DoesMaterialOverrideChildState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMaterialOverrideChildState()"
  },
  {
    "label": "ClearMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMaterial()"
  },
  {
    "label": "SetHoverMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoverMaterial(TWeakObjectPtr<UMaterialInterface> InHoverMaterial, bool InOverridesChildState = false)"
  },
  {
    "label": "GetHoverMaterial()",
    "kind": "Method",
    "detail": "Function (const UMaterialInterface*)",
    "insertText": "GetHoverMaterial()"
  },
  {
    "label": "DoesHoverMaterialOverrideChildState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesHoverMaterialOverrideChildState()"
  },
  {
    "label": "ClearHoverMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHoverMaterial()"
  },
  {
    "label": "SetInteractMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInteractMaterial(TWeakObjectPtr<UMaterialInterface> InInteractMaterial, bool InOverridesChildState = false)"
  },
  {
    "label": "GetInteractMaterial()",
    "kind": "Method",
    "detail": "Function (const UMaterialInterface*)",
    "insertText": "GetInteractMaterial()"
  },
  {
    "label": "DoesInteractMaterialOverrideChildState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesInteractMaterialOverrideChildState()"
  },
  {
    "label": "ClearInteractMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInteractMaterial()"
  },
  {
    "label": "SetVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexColor(FLinearColor InVertexColor, bool InOverridesChildState = false)"
  },
  {
    "label": "GetVertexColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetVertexColor()"
  },
  {
    "label": "HasVertexColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVertexColor()"
  },
  {
    "label": "DoesVertexColorOverrideChildState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesVertexColorOverrideChildState()"
  },
  {
    "label": "ClearVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearVertexColor()"
  },
  {
    "label": "SetHoverVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoverVertexColor(FLinearColor InVertexColor, bool InOverridesChildState = false)"
  },
  {
    "label": "GetHoverVertexColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetHoverVertexColor()"
  },
  {
    "label": "HasHoverVertexColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHoverVertexColor()"
  },
  {
    "label": "DoesHoverVertexColorOverrideChildState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesHoverVertexColorOverrideChildState()"
  },
  {
    "label": "ClearHoverVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHoverVertexColor()"
  },
  {
    "label": "SetInteractVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInteractVertexColor(FLinearColor InVertexColor, bool InOverridesChildState = false)"
  },
  {
    "label": "GetInteractVertexColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetInteractVertexColor()"
  },
  {
    "label": "HasInteractVertexColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInteractVertexColor()"
  },
  {
    "label": "DoesInteractVertexColorOverrideChildState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesInteractVertexColorOverrideChildState()"
  },
  {
    "label": "ClearInteractVertexColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInteractVertexColor()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsVisible(const FSceneView* View, EGizmoElementInteractionState InCurrentInteractionState, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter)"
  },
  {
    "label": "IsHittable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHittable(const UGizmoViewContext* ViewContext, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter)"
  },
  {
    "label": "GetViewDependentVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewDependentVisibility(const FSceneView* View, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter)"
  },
  {
    "label": "GetViewDependentVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewDependentVisibility(const UGizmoViewContext* View, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter)"
  },
  {
    "label": "GetViewDependentVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewDependentVisibility(const FVector& InViewLocation, const FVector& InViewDirection, bool bInPerspectiveView, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter)"
  },
  {
    "label": "GetEnabledForInteractionState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledForInteractionState(EGizmoElementInteractionState InInteractionState)"
  },
  {
    "label": "GetEnabledForViewProjection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnabledForViewProjection(bool bIsPerspectiveProjection)"
  },
  {
    "label": "GetViewAlignRot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewAlignRot(const FSceneView* View, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter, FQuat& OutAlignRot)"
  },
  {
    "label": "GetViewAlignRot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewAlignRot(const UGizmoViewContext* View, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter, FQuat& OutAlignRot)"
  },
  {
    "label": "GetViewAlignRot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewAlignRot(const FVector& InViewLocation, const FVector& InViewDirection, const FVector& InViewUp, bool bInPerspectiveView, const FTransform& InLocalToWorldTransform, const FVector& InLocalCenter, FQuat& OutAlignRot)"
  },
  {
    "label": "UpdateRenderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateRenderState(IToolsContextRenderAPI* RenderAPI, const FVector& InLocalCenter, FRenderTraversalState& InOutRenderState)"
  },
  {
    "label": "UpdateRenderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateRenderState(IToolsContextRenderAPI* RenderAPI, const FVector& InLocalCenter, FRenderTraversalState& InOutRenderState, bool& bOutHasAlignRot, FQuat& OutAlignRot)"
  },
  {
    "label": "UpdateLineTraceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLineTraceState(const UGizmoViewContext* ViewContext, const FVector& InLocalCenter, FLineTraceTraversalState& InOutLineTraceState)"
  },
  {
    "label": "UpdateLineTraceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLineTraceState(const UGizmoViewContext* ViewContext, const FVector& InLocalCenter, FLineTraceTraversalState& InOutRenderState, bool& bOutHasAlignRot, FQuat& OutAlignRot)"
  },
  {
    "label": "VerifyUniformScale()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "VerifyUniformScale(const FVector& Scale)"
  },
  {
    "label": "GetAlignRotBetweenCoordSpaces()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "GetAlignRotBetweenCoordSpaces(FVector SourceForward, FVector SourceRight, FVector SourceUp, FVector TargetForward, FVector TargetRight, FVector TargetUp)"
  }
]