[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REVERSE_H # define _LIBCPP___ALGORITHM_RANGES_REVERSE_H # include<__config> # include<__iterator / concepts . h> # include<__iterator / iter_swap . h> # include<__iterator / next . h> # include<__iterator / permutable . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __reverse { struct __fn { template<bidirectional_iterator _Iter,sentinel_for<_Iter> _Sent> requires permutable<_Iter> _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "operator()(_Iter __first, _Sent __last)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __end =)",
    "insertText": "next(__first, __last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto __ret = __end ;)",
    "insertText": "while(__first < --__end)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__first, __end)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto __ret = __end ;)",
    "insertText": "while(__first != __end)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __first ; } return __ret ; } } template<bidirectional_range _Range> requires permutable<iterator_t<_Range>> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Range>)",
    "insertText": "operator()(_Range&& __range)"
  }
]