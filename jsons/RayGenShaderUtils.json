[
  {
    "label": "FRayGenShaderUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayGenShaderUtils"
  },
  {
    "label": "AddRayTraceDispatchPass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # if RHI_RAYTRACING # include \" RenderResource . h \" # include \" RenderGraphUtils . h \" # include \" PipelineStateCache . h \" # include \" ShaderParameters . h \" struct FRayGenShaderUtils { template<TShaderClass> void)",
    "insertText": "AddRayTraceDispatchPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, const TShaderRef<TShaderClass>& RayGenerationShader, typename TShaderClass::FParameters* Parameters, FIntPoint Resolution)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(RayGenerationShader, Parameters)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), Parameters, ERDGPassFlags::Compute, [RayGenerationShader, Parameters, Resolution](FRDGAsyncTask, FRHICommandList& RHICmdList) { FRHIBatchedShaderParameters& GlobalResources = RHICmdList.GetScratchShaderParameters(); SetShaderParameters(GlobalResources, RayGenerationShader, *Parameters); FRayTracingPipelineStateInitializer Initializer; FRHIRayTracingShader* RayGenShaderTable[] = { RayGenerationShader.GetRayTracingShader() }; Initializer.SetRayGenShaderTable(RayGenShaderTable); FRayTracingPipelineState* Pipeline = PipelineStateCache::GetAndOrCreateRayTracingPipelineState(RHICmdList, Initializer); RHICmdList.RayTraceDispatch(Pipeline, RayGenerationShader.GetRayTracingShader(), GlobalResources, Resolution.X, Resolution.Y); })"
  }
]