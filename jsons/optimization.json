[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_OPTIMIZATION_H_ # define ABSL_BASE_OPTIMIZATION_H_ # include<assert . h> # include \" absl / base / config . h \" # if)",
    "insertText": "defined(__pnacl__) #define ABSL_BLOCK_TAIL_CALL_OPTIMIZATION() if (volatile int x = 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(__clang__) #define ABSL_BLOCK_TAIL_CALL_OPTIMIZATION() __asm__ __volatile__(\"\") #elif defined(__GNUC__) #define ABSL_BLOCK_TAIL_CALL_OPTIMIZATION() __asm__ __volatile__(\"\") #elif defined(_MSC_VER) #include <intrin.h> #define ABSL_BLOCK_TAIL_CALL_OPTIMIZATION() __nop() #else #define ABSL_BLOCK_TAIL_CALL_OPTIMIZATION() if (volatile int x = 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if)",
    "insertText": "defined(__GNUC__) #if defined(__i386__) || defined(__x86_64__) #define ABSL_CACHELINE_SIZE 64 #elif defined(__powerpc64__) #define ABSL_CACHELINE_SIZE 128 #elif defined(__aarch64__) #define ABSL_CACHELINE_SIZE 64 #elif defined(__arm__) #if defined(__ARM_ARCH_5T__) #define ABSL_CACHELINE_SIZE 32 #elif defined(__ARM_ARCH_7A__) #define ABSL_CACHELINE_SIZE 64 #endif #endif #endif #ifndef ABSL_CACHELINE_SIZE #define ABSL_CACHELINE_SIZE 64 #endif #if defined(__clang__) || defined(__GNUC__) #define ABSL_CACHELINE_ALIGNED __attribute__((aligned(ABSL_CACHELINE_SIZE))) #elif defined(_MSC_VER) #define ABSL_CACHELINE_ALIGNED __declspec(align(ABSL_CACHELINE_SIZE)) #else #define ABSL_CACHELINE_ALIGNED #endif #if ABSL_HAVE_BUILTIN(__builtin_expect) || \\ (defined(__GNUC__) && !defined(__clang__)) #define ABSL_PREDICT_FALSE(x) (__builtin_expect(false || (x), false)) #define ABSL_PREDICT_TRUE(x) (__builtin_expect(false || (x), true)) #else #define ABSL_PREDICT_FALSE(x) (x) #define ABSL_PREDICT_TRUE(x) (x) #endif #if !defined(NDEBUG) #define ABSL_ASSUME(cond) assert(cond) #elif ABSL_HAVE_BUILTIN(__builtin_assume) #define ABSL_ASSUME(cond) __builtin_assume(cond) #elif defined(__GNUC__) || ABSL_HAVE_BUILTIN(__builtin_unreachable) #define ABSL_ASSUME(cond)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(cond)) __builtin_unreachable()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #elif defined(_MSC_VER) #define ABSL_ASSUME(cond) __assume(cond) #else #define ABSL_ASSUME(cond)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (\\ static_cast<)",
    "insertText": "void(false && (cond))"
  }
]