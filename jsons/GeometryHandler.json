[
  {
    "label": "GeometryLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeometryLoader"
  },
  {
    "label": "MX_RENDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDER_API"
  },
  {
    "label": "GeometryHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeometryHandler"
  },
  {
    "label": "GeometryLoader()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_GEOMETRYHANDLER_H # define MATERIALX_GEOMETRYHANDLER_H # include<MaterialXRender / Export . h> # include<MaterialXRender / Mesh . h> # include<MaterialXFormat / File . h> # include<map> MATERIALX_NAMESPACE_BEGIN using GeometryLoaderPtr = std::shared_ptr<class GeometryLoader> ; class GeometryLoader { public :)",
    "insertText": "GeometryLoader()"
  },
  {
    "label": "supportedExtensions()",
    "kind": "Method",
    "detail": "Function (} const StringSet&)",
    "insertText": "supportedExtensions()"
  },
  {
    "label": "GeometryHandler()",
    "kind": "Method",
    "detail": "Function (protected : StringSet _extensions ; } ; using GeometryHandlerPtr = std::shared_ptr<class GeometryHandler> ; using GeometryLoaderMap = std::multimap<string,GeometryLoaderPtr> ; class GeometryHandler { public :)",
    "insertText": "GeometryHandler()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} GeometryHandlerPtr)",
    "insertText": "create()"
  },
  {
    "label": "addLoader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addLoader(GeometryLoaderPtr loader)"
  },
  {
    "label": "supportedExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "supportedExtensions(StringSet& extensions)"
  },
  {
    "label": "clearGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearGeometry()"
  },
  {
    "label": "hasGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasGeometry(const string& location)"
  },
  {
    "label": "getGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getGeometry(MeshList& meshes, const string& location)"
  },
  {
    "label": "loadGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "loadGeometry(const FilePath& filePath, bool texcoordVerticalFlip = false)"
  },
  {
    "label": "getMeshes()",
    "kind": "Method",
    "detail": "Function (const MeshList&)",
    "insertText": "getMeshes()"
  },
  {
    "label": "getMinimumBounds()",
    "kind": "Method",
    "detail": "Function (const Vector3&)",
    "insertText": "getMinimumBounds()"
  },
  {
    "label": "computeBounds()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "computeBounds()"
  }
]