[
  {
    "label": "FMixerDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerDevice"
  },
  {
    "label": "FQuartzClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClock"
  },
  {
    "label": "FQuartzClockManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzClockManager"
  },
  {
    "label": "FPersistentQuartzSubsystemData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentQuartzSubsystemData"
  },
  {
    "label": "FQuartzClockManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioMixerClock . h \" # include \" Sound / QuartzQuantizationUtilities . h \" namespace Audio { class FMixerDevice ; class FQuartzClock ; class FQuartzClockManager ; class FQuartzClockManager : public FQuartLatencyTracker { public :)",
    "insertText": "FQuartzClockManager(Audio::FMixerDevice* InOwner = nullptr)"
  },
  {
    "label": "FQuartzClockManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FQuartzClockManager()"
  },
  {
    "label": "GetNumClocks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumClocks()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(int32 NumFramesUntilNextUpdate)"
  },
  {
    "label": "UpdateClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClock(FName InClockToAdvance, int32 NumFramesToAdvance)"
  },
  {
    "label": "LowResoultionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowResoultionUpdate(float DeltaTimeSeconds)"
  },
  {
    "label": "GetOrCreateClock()",
    "kind": "Method",
    "detail": "Function (FQuartzClockProxy)",
    "insertText": "GetOrCreateClock(const FName& InClockName, const FQuartzClockSettings& InClockSettings, bool bOverrideTickRateIfClockExists = false)"
  },
  {
    "label": "GetClock()",
    "kind": "Method",
    "detail": "Function (FQuartzClockProxy)",
    "insertText": "GetClock(const FName& InClockName)"
  },
  {
    "label": "DoesClockExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesClockExist(const FName& InClockName)"
  },
  {
    "label": "IsClockRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClockRunning(const FName& InClockName)"
  },
  {
    "label": "GetDurationOfQuantizationTypeInSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDurationOfQuantizationTypeInSeconds(const FName& InClockName, const EQuartzCommandQuantization& QuantizationType, float Multiplier)"
  },
  {
    "label": "GetCurrentTimestamp()",
    "kind": "Method",
    "detail": "Function (FQuartzTransportTimeStamp)",
    "insertText": "GetCurrentTimestamp(const FName& InClockName)"
  },
  {
    "label": "GetEstimatedRunTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEstimatedRunTime(const FName& InClockName)"
  },
  {
    "label": "RemoveClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClock(const FName& InName, bool bForceSynchronous = false)"
  },
  {
    "label": "GetTickRateForClock()",
    "kind": "Method",
    "detail": "Function (FQuartzClockTickRate)",
    "insertText": "GetTickRateForClock(const FName& InName)"
  },
  {
    "label": "SetTickRateForClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickRateForClock(const FQuartzClockTickRate& InNewTickRate, const FName& InName)"
  },
  {
    "label": "ResumeClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeClock(const FName& InName, int32 NumFramesToDelayStart = 0)"
  },
  {
    "label": "StopClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopClock(const FName& InName, bool CancelPendingEvents)"
  },
  {
    "label": "PauseClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseClock(const FName& InName)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "AddCommandToClock()",
    "kind": "Method",
    "detail": "Function (FQuartzQuantizedCommandHandle)",
    "insertText": "AddCommandToClock(FQuartzQuantizedCommandInitInfo& InQuantizationCommandInitInfo)"
  },
  {
    "label": "SubscribeToTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToTimeDivision(FName InClockName, MetronomeCommandQueuePtr InListenerQueue, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "SubscribeToAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToAllTimeDivisions(FName InClockName, MetronomeCommandQueuePtr InListenerQueue)"
  },
  {
    "label": "UnsubscribeFromTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromTimeDivision(FName InClockName, MetronomeCommandQueuePtr InListenerQueue, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "UnsubscribeFromAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromAllTimeDivisions(FName InClockName, MetronomeCommandQueuePtr InListenerQueue)"
  },
  {
    "label": "CancelCommandOnClock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelCommandOnClock(FName InOwningClockName, TSharedPtr<IQuartzQuantizedCommand> InCommandPtr)"
  },
  {
    "label": "HasClockBeenTickedThisUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClockBeenTickedThisUpdate(FName InClockName)"
  },
  {
    "label": "GetLastUpdateSizeInFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLastUpdateSizeInFrames()"
  },
  {
    "label": "TickClocks()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TickClocks(int32 NumFramesToTick)"
  },
  {
    "label": "FindClock()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FQuartzClock>)",
    "insertText": "FindClock(const FName& InName)"
  },
  {
    "label": "AddQuantizedCommand()",
    "kind": "Method",
    "detail": "Function (FMixerDevice* MixerDevice ; FCriticalSection ActiveClockCritSec ; TArray<TSharedPtr<FQuartzClock>> ActiveClocks ; FThreadSafeCounter LastClockTickedIndex { 0 } ; int32 LastUpdateSizeInFrames { 0 } ; void)",
    "insertText": "AddQuantizedCommand(FQuartzQuantizedCommandInitInfo& InQuantizationCommandInitInfo)"
  }
]