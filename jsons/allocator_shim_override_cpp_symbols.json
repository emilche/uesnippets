[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_CPP_SYMBOLS_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_CPP_SYMBOLS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_CPP_SYMBOLS_H_ # include<new> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / shim / allocator_shim_internals . h \" # include \" build / build_config . h \" # if !)",
    "insertText": "BUILDFLAG(IS_APPLE) #define SHIM_CPP_SYMBOLS_EXPORT SHIM_ALWAYS_EXPORT #else #define SHIM_CPP_SYMBOLS_EXPORT PA_NOINLINE #endif SHIM_CPP_SYMBOLS_EXPORT void* operator new(size_t size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void operator)",
    "insertText": "delete(void* p)"
  },
  {
    "label": "ShimCppDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimCppDelete(p)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void* operator)",
    "insertText": "new(size_t size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void* operator)",
    "insertText": "new(size_t size, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void operator)",
    "insertText": "delete(void* p, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void operator)",
    "insertText": "delete(void* p, size_t)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void* operator)",
    "insertText": "new(std::size_t size, std::align_val_t alignment)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void* operator)",
    "insertText": "new(std::size_t size, std::align_val_t alignment, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void operator)",
    "insertText": "delete(void* p, std::align_val_t)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void operator)",
    "insertText": "delete(void* p, std::size_t size, std::align_val_t)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} SHIM_CPP_SYMBOLS_EXPORT void operator)",
    "insertText": "delete(void* p, std::align_val_t, const std::nothrow_t&)"
  }
]