[
  {
    "label": "DefaultSingletonTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultSingletonTraits"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_ID_NAME_MANAGER_H_ # define BASE_THREADING_THREAD_ID_NAME_MANAGER_H_ # include<map> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / lock . h \" # include \" base / threading / platform_thread . h \" namespace base { template<T> struct DefaultSingletonTraits ; class BASE_EXPORT ThreadIdNameManager { public : ThreadIdNameManager*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "ThreadIdNameManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadIdNameManager(const ThreadIdNameManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadIdNameManager&)",
    "insertText": "operator(const ThreadIdNameManager&)"
  },
  {
    "label": "GetDefaultInternedString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetDefaultInternedString()"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "OnThreadNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadNameChanged(const char* name)"
  },
  {
    "label": "RegisterThread()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RegisterThread(PlatformThreadHandle::Handle handle, PlatformThreadId id)"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObserver(Observer*)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver(Observer*)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(const std::string& name)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName(PlatformThreadId id)"
  },
  {
    "label": "GetNameForCurrentThread()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetNameForCurrentThread()"
  },
  {
    "label": "RemoveName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveName(PlatformThreadHandle::Handle handle, PlatformThreadId id)"
  },
  {
    "label": "GetIds()",
    "kind": "Method",
    "detail": "Function (std::vector<PlatformThreadId>)",
    "insertText": "GetIds()"
  },
  {
    "label": "ThreadIdNameManager()",
    "kind": "Method",
    "detail": "Function (private : struct DefaultSingletonTraits<ThreadIdNameManager> ; typedef std::map<PlatformThreadId,PlatformThreadHandle::Handle> ThreadIdToHandleMap ; typedef std::map<PlatformThreadHandle::Handle,std::string*> ThreadHandleToInternedNameMap ; typedef std::map<std::string,std::string*> NameToInternedNameMap ;)",
    "insertText": "ThreadIdNameManager()"
  }
]