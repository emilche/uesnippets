[
  {
    "label": "FErrorReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FErrorReporter"
  },
  {
    "label": "FKLevelSetElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKLevelSetElem"
  },
  {
    "label": "FMTDInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMTDInfo"
  },
  {
    "label": "FTriangleMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMesh"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPlane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPlane"
  },
  {
    "label": "FCapsule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCapsule"
  },
  {
    "label": "FConvex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvex"
  },
  {
    "label": "FLevelSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelSet"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayND . h \" # include \" Chaos / Box . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / ImplicitObjectScaled . h \" # include \" Chaos / Particles . h \" # include \" Chaos / UniformGrid . h \" namespace Chaos { class FErrorReporter ; } struct FKLevelSetElem ; namespace Chaos { struct FMTDInfo ; class FTriangleMesh ; template<class T,int D> class TPlane ; class FCapsule ; class FConvex ; class FLevelSet final : public FImplicitObject { public : using FImplicitObject::SignedDistance ;)",
    "insertText": "FLevelSet(FErrorReporter& ErrorReporter, const TUniformGrid<FReal, 3>& InGrid, const FParticles& InParticles, const FTriangleMesh& Mesh, const int32 BandWidth = 0)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelSet(FErrorReporter& ErrorReporter, const TUniformGrid<FReal, 3>& InGrid, const FImplicitObject& InObject, const int32 BandWidth = 0, const bool bUseObjectPhi = false)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (# if COMPILE_WITHOUT_UNREAL_SUPPORT)",
    "insertText": "FLevelSet(std::istream& Stream)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FLevelSet(TUniformGrid<FReal, 3>&& Grid, TArrayND<FReal, 3>&& Phi, int32 BandWidth)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelSet(const FLevelSet& Other)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelSet(FLevelSet&& Other)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLevelSet()"
  },
  {
    "label": "CopyGeometry()",
    "kind": "Method",
    "detail": "Function (Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometry()"
  },
  {
    "label": "CopyGeometryWithScale()",
    "kind": "Method",
    "detail": "Function (Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometryWithScale(const FVec3& Scale)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (# if COMPILE_WITHOUT_UNREAL_SUPPORT void)",
    "insertText": "Write(std::ostream& Stream)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (# endif FReal)",
    "insertText": "PhiWithNormal(const FVec3& x, FVec3& Normal)"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "SignedDistance(const FVec3& x)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (MPhi [ i ] + = Value ; } } EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(Ar)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (Ar<<MGrid ; Ar<<MPhi ; Ar<<MNormals ; TBox<FReal,3)",
    "insertText": "SerializeAsAABB(Ar, MLocalBoundingBox)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (TBox<FReal,3)",
    "insertText": "SerializeAsAABB(Ar, MOriginalLocalBoundingBox)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<MBandWidth ; } void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "ApproximateNegativeMaterial()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "ApproximateNegativeMaterial()"
  },
  {
    "label": "Dx()",
    "kind": "Method",
    "detail": "Function (const FVec3& CellDim = MGrid .)",
    "insertText": "Dx()"
  },
  {
    "label": "AvgRadius()",
    "kind": "Method",
    "detail": "Function (const FReal)",
    "insertText": "AvgRadius(CellDim[0] + CellDim[1] + CellDim[2]) / (FReal)"
  },
  {
    "label": "Product()",
    "kind": "Method",
    "detail": "Function (const FReal CellVolume = CellDim .)",
    "insertText": "Product()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal Volume = 0 . 0 ;)",
    "insertText": "for(int32 Idx = 0; Idx < MPhi.Num(); ++Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal Phi = MPhi [ Idx ] ;)",
    "insertText": "if(Phi <= 0.0)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FReal CellRadius = AvgRadius -)",
    "insertText": "Abs(Phi)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FReal Scale =)",
    "insertText": "Min((FReal)1, CellRadius / AvgRadius)"
  },
  {
    "label": "ComputeMassProperties()",
    "kind": "Method",
    "detail": "Function (Volume + = CellVolume* Scale ; } else { Volume + = CellVolume ; } } } return Volume ; } bool)",
    "insertText": "ComputeMassProperties(FReal& OutVolume, FVec3& OutCOM, FMatrix33& OutInertia, FRotation3& OutRotationOfMass)"
  },
  {
    "label": "ComputeLevelSetError()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "ComputeLevelSetError(const FParticles& InParticles, const TArray<FVec3>& Normals, const FTriangleMesh& Mesh, FReal& AngleError, FReal& MaxDistError)"
  },
  {
    "label": "OutputDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputDebugData(FErrorReporter& ErrorReporter, const FParticles& InParticles, const TArray<FVec3>& Normals, const FTriangleMesh& Mesh, const FString FileName)"
  },
  {
    "label": "CheckData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckData(FErrorReporter& ErrorReporter, const FParticles& InParticles, const FTriangleMesh& Mesh, const TArray<FVec3> &Normals)"
  },
  {
    "label": "GetZeroIsosurfaceGridCellFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetZeroIsosurfaceGridCellFaces(TArray<FVector3f>& Vertices, TArray<FIntVector>& Tris)"
  },
  {
    "label": "GetInteriorCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInteriorCells(TArray<TVec3<int32>>& InteriorCells, const FReal InteriorThreshold)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 0 ; const int32 NumValues = MPhi .)",
    "insertText": "Num()"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "HashCombine(Result, ::GetTypeHash(MPhi[Index]))"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (} return Result ; } bool)",
    "insertText": "SweepGeom(const TSphere<FReal, 3>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TBox<FReal, 3>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const FCapsule& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const FConvex& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<TSphere<FReal, 3>>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<TBox<FReal, 3>>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<FCapsule>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepGeom(const TImplicitObjectScaled<FConvex>& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness = 0, const bool bComputeMTD = false)"
  },
  {
    "label": "SweepGeomImp()",
    "kind": "Method",
    "detail": "Function (template<QueryGeomType> bool)",
    "insertText": "SweepGeomImp(const QueryGeomType& QueryGeom, const FRigidTransform3& StartTM, const FVec3& Dir, const FReal Length, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex, const FReal Thickness, const bool bComputeMTD)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TSphere<FReal, 3>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TBox<FReal, 3>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const FCapsule& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const FConvex& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<TSphere<FReal, 3>>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<TBox<FReal, 3>>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<FCapsule>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapGeom(const TImplicitObjectScaled<FConvex>& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "OverlapGeomImp()",
    "kind": "Method",
    "detail": "Function (template<QueryGeomType> bool)",
    "insertText": "OverlapGeomImp(const QueryGeomType& QueryGeom, const FRigidTransform3& QueryTM, const FReal Thickness, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "ComputeDistancesNearZeroIsocontour()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ComputeDistancesNearZeroIsocontour(FErrorReporter& ErrorReporter, const FParticles& InParticles, const TArray<FVec3> &Normals, const FTriangleMesh& Mesh, TArrayND<bool, 3>& BlockedFaceX, TArrayND<bool, 3>& BlockedFaceY, TArrayND<bool, 3>& BlockedFaceZ, TArray<TVec3<int32>>& InterfaceIndices)"
  },
  {
    "label": "ComputeDistancesNearZeroIsocontour()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDistancesNearZeroIsocontour(const FImplicitObject& Object, const TArrayND<FReal, 3>& ObjectPhi, TArray<TVec3<int32>>& InterfaceIndices)"
  },
  {
    "label": "CorrectSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CorrectSign(const TArrayND<bool, 3>& BlockedFaceX, const TArrayND<bool, 3>& BlockedFaceY, const TArrayND<bool, 3>& BlockedFaceZ, TArray<TVec3<int32>>& InterfaceIndices)"
  },
  {
    "label": "ComputePhi()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "ComputePhi(const TArrayND<bool, 3>& Done, const TVec3<int32>& CellIndex)"
  },
  {
    "label": "FillWithFastMarchingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillWithFastMarchingMethod(const FReal StoppingDistance, const TArray<TVec3<int32>>& InterfaceIndices)"
  },
  {
    "label": "FloodFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FloodFill(const TArrayND<bool, 3>& BlockedFaceX, const TArrayND<bool, 3>& BlockedFaceY, const TArrayND<bool, 3>& BlockedFaceZ, TArrayND<int32, 3>& Color, int32& NextColor)"
  },
  {
    "label": "FloodFillFromCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FloodFillFromCell(const TVec3<int32> CellIndex, const int32 NextColor, const TArrayND<bool, 3>& BlockedFaceX, const TArrayND<bool, 3>& BlockedFaceY, const TArrayND<bool, 3>& BlockedFaceZ, TArrayND<int32, 3>& Color)"
  },
  {
    "label": "IsIntersectingWithTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntersectingWithTriangle(const FParticles& Particles, const TVec3<int32>& Elements, const TPlane<FReal, 3>& TrianglePlane, const TVec3<int32>& CellIndex, const TVec3<int32>& PrevCellIndex)"
  },
  {
    "label": "ComputeNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNormals()"
  },
  {
    "label": "ComputeConvexity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeConvexity(const TArray<TVec3<int32>>& InterfaceIndices)"
  },
  {
    "label": "ComputeNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNormals(const FParticles& InParticles, const FTriangleMesh& Mesh, const TArray<TVec3<int32>>& InterfaceIndices)"
  },
  {
    "label": "FLevelSet()",
    "kind": "Method",
    "detail": "Function (TUniformGrid<FReal,3> MGrid ; TArrayND<FReal,3> MPhi ; TArrayND<FVec3,3> MNormals ; FAABB3 MLocalBoundingBox ; FAABB3 MOriginalLocalBoundingBox ; int32 MBandWidth ; private :)",
    "insertText": "FLevelSet() : FImplicitObject(EImplicitObject::HasBoundingBox, ImplicitObjectType::LevelSet)"
  }
]