[
  {
    "label": "_Py_list_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Py_list_state"
  },
  {
    "label": "_PyList_Fini()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_LIST_H # define Py_INTERNAL_LIST_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include \" listobject . h \" void)",
    "insertText": "_PyList_Fini(PyInterpreterState *)"
  },
  {
    "label": "_PyList_ITEMS()",
    "kind": "Method",
    "detail": "Function (# ifndef WITH_FREELISTS # define PyList_MAXFREELIST 0 # endif # ifndef PyList_MAXFREELIST # define PyList_MAXFREELIST 8 0 # endif struct _Py_list_state { # if PyList_MAXFREELIST> 0 PyListObject* free_list [ PyList_MAXFREELIST ] ; int numfree ; # endif } ; # define)",
    "insertText": "_PyList_ITEMS(op) (_PyList_CAST(op)->ob_item) extern int _PyList_AppendTakeRefListResize(PyListObject *self, PyObject *newitem)"
  },
  {
    "label": "_PyList_AppendTakeRef()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyList_AppendTakeRef(PyListObject *self, PyObject *newitem)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(self != NULL && newitem != NULL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(PyList_Check(self))"
  },
  {
    "label": "PyList_GET_SIZE()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t len =)",
    "insertText": "PyList_GET_SIZE(self)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t allocated = self -> allocated ;)",
    "insertText": "assert((size_t)len + 1 < PY_SSIZE_T_MAX)"
  },
  {
    "label": "PyList_SET_ITEM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyList_SET_ITEM(self, len, newitem)"
  },
  {
    "label": "Py_SET_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_SET_SIZE(self, len + 1)"
  }
]