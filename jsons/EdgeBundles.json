[
  {
    "label": "EdgeBundles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EdgeBundles"
  },
  {
    "label": "EdgeBundles()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_EDGEBUNDLES_H # define LLVM_CODEGEN_EDGEBUNDLES_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / IntEqClasses . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" namespace llvm { class EdgeBundles : public MachineFunctionPass { const MachineFunction* MF ; IntEqClasses EC ; SmallVector<SmallVector<unsigned,8>,4> Blocks ; public : char ID ;)",
    "insertText": "EdgeBundles() : MachineFunctionPass(ID)"
  },
  {
    "label": "getBundle()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getBundle(unsigned N, bool Out)"
  },
  {
    "label": "getBlocks()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<unsigned>)",
    "insertText": "getBlocks(unsigned Bundle)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "runOnMachineFunction(MachineFunction&)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage&)"
  }
]