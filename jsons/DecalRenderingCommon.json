[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FRHIBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBlendState"
  },
  {
    "label": "FRHIRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRasterizerState"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "from",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "from"
  },
  {
    "label": "ComputeDecalBlendDesc()",
    "kind": "Method",
    "detail": "Function (FDecalBlendDesc)",
    "insertText": "ComputeDecalBlendDesc(EShaderPlatform Platform, const FMaterial& Material)"
  },
  {
    "label": "ComputeDecalBlendDesc()",
    "kind": "Method",
    "detail": "Function (FDecalBlendDesc)",
    "insertText": "ComputeDecalBlendDesc(EShaderPlatform Platform, FMaterialShaderParameters const& MaterialShaderParameters)"
  },
  {
    "label": "IsCompatibleWithRenderStage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithRenderStage(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage)"
  },
  {
    "label": "GetRenderStage()",
    "kind": "Method",
    "detail": "Function (EDecalRenderStage)",
    "insertText": "GetRenderStage(EDecalRenderTargetMode RenderTargetMode, EShadingPath ShadingPath)"
  },
  {
    "label": "GetBaseRenderStage()",
    "kind": "Method",
    "detail": "Function (EDecalRenderStage)",
    "insertText": "GetBaseRenderStage(FDecalBlendDesc DecalBlendDesc)"
  },
  {
    "label": "GetRenderTargetMode()",
    "kind": "Method",
    "detail": "Function (EDecalRenderTargetMode)",
    "insertText": "GetRenderTargetMode(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage)"
  },
  {
    "label": "GetDecalRenderTargetModeMask()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetDecalRenderTargetModeMask(const FMaterial& Material, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "IsCompatibleWithRenderTargetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithRenderTargetMode(uint8 DecalRenderTargetModeMask, EDecalRenderTargetMode DecalRenderTargetMode)"
  },
  {
    "label": "GetMeshPassType()",
    "kind": "Method",
    "detail": "Function (EMeshPass::Type)",
    "insertText": "GetMeshPassType(EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetRenderTargetCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRenderTargetCount(FDecalBlendDesc DecalBlendDesc, EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetRenderTargetWriteMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRenderTargetWriteMask(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage, EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetDecalRasterizerState()",
    "kind": "Method",
    "detail": "Function (EDecalRasterizerState)",
    "insertText": "GetDecalRasterizerState(bool bInsideDecal, bool bIsInverted, bool ViewReverseCulling)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(EShaderPlatform Platform, FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage, FShaderCompilerEnvironment& OutEnvironment)"
  }
]