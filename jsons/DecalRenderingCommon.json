[
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FRHIBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBlendState"
  },
  {
    "label": "FRHIRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRasterizerState"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ComputeDecalBlendDesc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Materials / Material . h \" # include \" RenderUtils . h \" # include \" MeshPassProcessor . h \" class FMaterial ; class FRHIBlendState ; class FRHIRasterizerState ; struct FMaterialShaderParameters ; struct FShaderCompilerEnvironment ; union FDecalBlendDesc { uint32 Packed = 0 ; struct { uint32 BlendMode : 8 ; uint32 RenderStageMask : 8 ; uint32 bWriteBaseColor : 1 ; uint32 bWriteNormal : 1 ; uint32 bWriteRoughnessSpecularMetallic : 1 ; uint32 bWriteEmissive : 1 ; uint32 bWriteAmbientOcclusion : 1 ; uint32 bWriteDBufferMask : 1 ; } ; } ; enum class EDecalRenderStage : uint8 { None = 0,BeforeBasePass = 1,BeforeLighting = 2,Mobile = 3,MobileBeforeLighting = 4,Emissive = 5,AmbientOcclusion = 6,Num,} ; enum class EDecalRenderTargetMode : uint8 { None = 0,DBuffer = 1,SceneColorAndGBuffer = 2,SceneColorAndGBufferNoNormal = 3,SceneColor = 4,AmbientOcclusion = 5,Num,} ; enum class EDecalRasterizerState : uint8 { Undefined,CCW,CW,} ; namespace DecalRendering { FDecalBlendDesc)",
    "insertText": "ComputeDecalBlendDesc(EShaderPlatform Platform, const FMaterial& Material)"
  },
  {
    "label": "ComputeDecalBlendDesc()",
    "kind": "Method",
    "detail": "Function (FDecalBlendDesc)",
    "insertText": "ComputeDecalBlendDesc(EShaderPlatform Platform, FMaterialShaderParameters const& MaterialShaderParameters)"
  },
  {
    "label": "IsCompatibleWithRenderStage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithRenderStage(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage)"
  },
  {
    "label": "GetRenderStage()",
    "kind": "Method",
    "detail": "Function (EDecalRenderStage)",
    "insertText": "GetRenderStage(EDecalRenderTargetMode RenderTargetMode, EShadingPath ShadingPath)"
  },
  {
    "label": "GetBaseRenderStage()",
    "kind": "Method",
    "detail": "Function (EDecalRenderStage)",
    "insertText": "GetBaseRenderStage(FDecalBlendDesc DecalBlendDesc)"
  },
  {
    "label": "GetRenderTargetMode()",
    "kind": "Method",
    "detail": "Function (EDecalRenderTargetMode)",
    "insertText": "GetRenderTargetMode(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage)"
  },
  {
    "label": "GetDecalRenderTargetModeMask()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetDecalRenderTargetModeMask(const FMaterial& Material, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "IsCompatibleWithRenderTargetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithRenderTargetMode(uint8 DecalRenderTargetModeMask, EDecalRenderTargetMode DecalRenderTargetMode)"
  },
  {
    "label": "GetMeshPassType()",
    "kind": "Method",
    "detail": "Function (EMeshPass::Type)",
    "insertText": "GetMeshPassType(EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetRenderTargetCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRenderTargetCount(FDecalBlendDesc DecalBlendDesc, EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetRenderTargetWriteMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRenderTargetWriteMask(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage, EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetDecalBlendState()",
    "kind": "Method",
    "detail": "Function (FRHIBlendState*)",
    "insertText": "GetDecalBlendState(FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage, EDecalRenderTargetMode RenderTargetMode)"
  },
  {
    "label": "GetDecalRasterizerState()",
    "kind": "Method",
    "detail": "Function (EDecalRasterizerState)",
    "insertText": "GetDecalRasterizerState(bool bInsideDecal, bool bIsInverted, bool ViewReverseCulling)"
  },
  {
    "label": "GetDecalRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRHIRasterizerState*)",
    "insertText": "GetDecalRasterizerState(EDecalRasterizerState DecalRasterizerState)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(EShaderPlatform Platform, FDecalBlendDesc DecalBlendDesc, EDecalRenderStage DecalRenderStage, FShaderCompilerEnvironment& OutEnvironment)"
  }
]