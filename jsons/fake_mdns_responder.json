[
  {
    "label": "FakeMdnsResponder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMdnsResponder"
  },
  {
    "label": "FakeMdnsResponder()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_FAKE_MDNS_RESPONDER_H_ # define RTC_BASE_FAKE_MDNS_RESPONDER_H_ # include<map> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / ip_address . h \" # include \" rtc_base / mdns_responder_interface . h \" # include \" rtc_base / thread . h \" namespace webrtc { class FakeMdnsResponder : public MdnsResponderInterface { public :)",
    "insertText": "FakeMdnsResponder(rtc::Thread* thread) : thread_(thread)"
  },
  {
    "label": "FakeMdnsResponder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakeMdnsResponder()"
  },
  {
    "label": "CreateNameForAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNameForAddress(const rtc::IPAddress& addr, NameCreatedCallback callback)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string name ;)",
    "insertText": "if(addr_name_map_.find(addr) != addr_name_map_.end())"
  },
  {
    "label": "to_string()",
    "kind": "Method",
    "detail": "Function (name = addr_name_map_ [ addr ] ; } else { name =)",
    "insertText": "to_string(next_available_id_++)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (addr_name_map_ [ addr ] = name ; } thread_ ->)",
    "insertText": "PostTask([callback, addr, name]() { callback(addr, name); })"
  },
  {
    "label": "RemoveNameForAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNameForAddress(const rtc::IPAddress& addr, NameRemovedCallback callback)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = addr_name_map_ .)",
    "insertText": "find(addr)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (addr_name_map_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} bool result = it ! = addr_name_map_ .)",
    "insertText": "end()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (thread_ ->)",
    "insertText": "PostTask([callback, result]() { callback(result); })"
  },
  {
    "label": "GetMappedAddressForName()",
    "kind": "Method",
    "detail": "Function (} rtc::IPAddress)",
    "insertText": "GetMappedAddressForName(absl::string_view name)"
  }
]