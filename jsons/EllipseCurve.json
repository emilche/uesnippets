[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FEllipseCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" # include \" Geo / GeoPoint . h \" # include \" Math / MathConst . h \" namespace UE::CADKernel { class FEllipseCurve : public FCurve { class FEntity ; protected : FMatrixH Matrix ; double RadiusU ; double RadiusV ;)",
    "insertText": "FEllipseCurve(const FMatrixH& InMatrix, double InRadiusU, double InRadiusV, int8 InDimension = 3) : FCurve(FLinearBoundary(0, PI * 2.), InDimension) , Matrix(InMatrix) , RadiusU(InRadiusU) , RadiusV(InRadiusV)"
  },
  {
    "label": "FEllipseCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEllipseCurve(const FMatrixH& InMatrix, double InRadiusU, double InRadiusV, const FLinearBoundary& InBounds, int8 InDimension = 3) : FCurve(InBounds, InDimension) , Matrix(InMatrix) , RadiusU(InRadiusU) , RadiusV(InRadiusV)"
  },
  {
    "label": "FEllipseCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEllipseCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<Matrix ; Ar<<RadiusU ; Ar<<RadiusV ; } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (Evaluate<FCurvePoint,)",
    "insertText": "FPoint(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (Evaluate<FCurvePoint2D,)",
    "insertText": "FPoint2D(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} private : template<CurvePointType,PointType> void)",
    "insertText": "Evaluate(double Coordinate, CurvePointType& OutPoint, int32 DerivativeOrder)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (OutPoint . DerivativeOrder = DerivativeOrder ; double CosU =)",
    "insertText": "cos(Coordinate)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function ({ PointType)",
    "insertText": "Result(RadiusU * CosU, RadiusV * SinU)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (OutPoint . Point = Matrix .)",
    "insertText": "Multiply(Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DerivativeOrder > 0)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PointType)",
    "insertText": "Result(RadiusU * (-SinU), RadiusV * CosU)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint . Gradient = Matrix .)",
    "insertText": "MultiplyVector(Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DerivativeOrder > 1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PointType)",
    "insertText": "Result(RadiusU * (-CosU), RadiusV * (-SinU))"
  }
]