[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "UAudioLinkSettingsAbstract",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioLinkSettingsAbstract"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FSoundSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSourceBusSendInfo"
  },
  {
    "label": "EAudioSpeakers",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAudioSpeakers"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FReverbSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReverbSettings"
  },
  {
    "label": "FSampleLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSampleLoop"
  },
  {
    "label": "FSoundWaveTimecodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveTimecodeInfo"
  },
  {
    "label": "ELoopingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoopingMode"
  },
  {
    "label": "FNotifyBufferFinishedHooks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotifyBufferFinishedHooks"
  },
  {
    "label": "FNotifyBufferDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotifyBufferDetails"
  },
  {
    "label": "ISourceBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceBufferListener"
  },
  {
    "label": "FOnNewBufferParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnNewBufferParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "forces",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "forces"
  },
  {
    "label": "FSoundBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundBuffer"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "version",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "version"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugInfo"
  },
  {
    "label": "FDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugInfo"
  },
  {
    "label": "FWaveCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveCue"
  },
  {
    "label": "FWaveSampleLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveSampleLoop"
  },
  {
    "label": "FWaveModInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaveModInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudio, Display, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioDebug, Display, All)"
  },
  {
    "label": "AddNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotify(USoundNode* NotifyNode, UPTRINT WaveInstanceHash)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects( FReferenceCollector& Collector )"
  },
  {
    "label": "DispatchNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchNotifies(FWaveInstance* WaveInstance, const bool bStopped)"
  },
  {
    "label": "IsAudioPluginEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioPluginEnabled(EAudioPlugin PluginType)"
  },
  {
    "label": "IsSpatializationCVarEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpatializationCVarEnabled()"
  },
  {
    "label": "FWaveInstance()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FWaveInstance(const UPTRINT InWaveInstanceHash, FActiveSound& ActiveSound)"
  },
  {
    "label": "FWaveInstance()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FWaveInstance(FWaveInstance&&)"
  },
  {
    "label": "StopWithoutNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWithoutNotification()"
  },
  {
    "label": "NotifyFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFinished(const bool bStopped = false)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe(bool bUseLongName)"
  },
  {
    "label": "GetSoundClassName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSoundClassName()"
  },
  {
    "label": "GetChannelsDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetChannelsDesc()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetPauseByGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPauseByGame(bool bInIsPauseByGame)"
  },
  {
    "label": "SetPauseManually()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPauseManually(bool bInIsPauseManually)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe(bool bUseLongName)"
  },
  {
    "label": "SetReverbApplied()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReverbApplied(bool bHardwareAvailable)"
  },
  {
    "label": "SetLFEBleed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SetLFEBleed()"
  },
  {
    "label": "SetFilterFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterFrequency()"
  },
  {
    "label": "UpdateStereoEmitterPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStereoEmitterPositions()"
  },
  {
    "label": "GetSpatializationParams()",
    "kind": "Method",
    "detail": "Function (FSpatializationParams)",
    "insertText": "GetSpatializationParams()"
  },
  {
    "label": "NotifyPlaybackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlaybackData()"
  },
  {
    "label": "InitCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCommon()"
  },
  {
    "label": "UpdateCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCommon()"
  },
  {
    "label": "UpdatePause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePause()"
  },
  {
    "label": "GetDebugVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDebugVolume(const float InVolume)"
  },
  {
    "label": "ReadWaveInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadWaveInfo(const uint8* WaveData, int32 WaveDataSize, FString* ErrorMessage = NULL, bool InHeaderDataOnly = false, void** OutFormatHeader = NULL )"
  },
  {
    "label": "ReadWaveHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadWaveHeader(const uint8* RawWaveData, int32 Size, int32 Offset )"
  },
  {
    "label": "SerializeWaveFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWaveFile(TArray<uint8>& OutWaveFileData, const uint8* InPCMData, const int32 NumBytes, const int32 NumChannels, const int32 SampleRate)"
  },
  {
    "label": "SetCompressedAudioFormatsToBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompressedAudioFormatsToBuild(const TCHAR* Platform = NULL)"
  }
]