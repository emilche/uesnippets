[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "UAudioLinkSettingsAbstract",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioLinkSettingsAbstract"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FSoundSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSourceBusSendInfo"
  },
  {
    "label": "EAudioSpeakers",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAudioSpeakers"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "FReverbSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReverbSettings"
  },
  {
    "label": "FSampleLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSampleLoop"
  },
  {
    "label": "FSoundWaveTimecodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWaveTimecodeInfo"
  },
  {
    "label": "ELoopingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoopingMode"
  },
  {
    "label": "FNotifyBufferFinishedHooks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotifyBufferFinishedHooks"
  },
  {
    "label": "FNotifyBufferDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotifyBufferDetails"
  },
  {
    "label": "ISourceBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceBufferListener"
  },
  {
    "label": "FOnNewBufferParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnNewBufferParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSoundBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundBuffer"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "FDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugInfo"
  },
  {
    "label": "FWaveCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveCue"
  },
  {
    "label": "FWaveSampleLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveSampleLoop"
  },
  {
    "label": "FWaveModInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaveModInfo"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDefines . h \" # include \" Stats / Stats . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Sound / AudioOutputTarget . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" Sound / SoundAttenuation . h \" # include \" Sound / SoundEffectSource . h \" # include \" Sound / SoundSubmixSend . h \" # include \" Sound / SoundSourceBusSend . h \" # include \" IAudioExtensionPlugin . h \" # include \" IAudioModulation . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudio, Display, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioDebug, Display, All)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Active Sounds\"), STAT_ActiveSounds, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Audio Evaluate Concurrency\"), STAT_AudioEvaluateConcurrency, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Audio Sources\"), STAT_AudioSources, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Wave Instances\"), STAT_WaveInstances, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Wave Instances Dropped\"), STAT_WavesDroppedDueToPriority, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Virtualized Loops\"), STAT_AudioVirtualLoops, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Audible Wave Instances Dropped\"), STAT_AudibleWavesDroppedDueToPriority, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Max Channels\"), STAT_AudioMaxChannels, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Max Stopping Sources\"), STAT_AudioMaxStoppingSources, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Finished delegates called\"), STAT_AudioFinishedDelegatesCalled, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Finished delegates time\"), STAT_AudioFinishedDelegates, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Audio Memory Used\"), STAT_AudioMemorySize, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Audio Buffer Time\"), STAT_AudioBufferTime, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Audio Buffer Time (w/ Channels)\"), STAT_AudioBufferTimeChannels, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Gathering WaveInstances\"), STAT_AudioGatherWaveInstances, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Processing Sources\"), STAT_AudioStartSources, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Updating Sources\"), STAT_AudioUpdateSources, STATGROUP_Audio, ENGINE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Updating Effects\"), STAT_AudioUpdateEffects, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Source Init\"), STAT_AudioSourceInitTime, STATGROUP_Audio, ENGINE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Source Create\"), STAT_AudioSourceCreateTime, STATGROUP_Audio, ENGINE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Submit Buffers\"), STAT_AudioSubmitBuffersTime, STATGROUP_Audio, ENGINE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Decompress Audio\"), STAT_AudioDecompressTime, STATGROUP_Audio, ENGINE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Prepare Audio Decompression\"), STAT_AudioPrepareDecompressionTime, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Finding Nearest Location\"), STAT_AudioFindNearestLocation, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Decompress Streamed\"), STAT_AudioStreamedDecompressTime, STATGROUP_Audio,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Buffer Creation\"), STAT_AudioResourceCreationTime, STATGROUP_Audio,)"
  },
  {
    "label": "AddNotify()",
    "kind": "Method",
    "detail": "Function (class FAudioDevice ; class USoundNode ; class USoundWave ; class USoundClass ; class USoundSubmix ; class USoundSourceBus ; class UAudioLinkSettingsAbstract ; struct FActiveSound ; struct FWaveInstance ; struct FSoundSourceBusSendInfo ; enum EAudioSpeakers : int { SPEAKER_FrontLeft,SPEAKER_FrontRight,SPEAKER_FrontCenter,SPEAKER_LowFrequency,SPEAKER_LeftSurround,SPEAKER_RightSurround,SPEAKER_LeftBack,SPEAKER_RightBack,SPEAKER_Count } ; class UAudioComponent ; class USoundNode ; struct FWaveInstance ; struct FReverbSettings ; struct FSampleLoop ; struct FSoundWaveTimecodeInfo ; enum ELoopingMode { LOOP_Never,LOOP_WithNotification,LOOP_Forever } ; struct FNotifyBufferFinishedHooks { void)",
    "insertText": "AddNotify(USoundNode* NotifyNode, UPTRINT WaveInstanceHash)"
  },
  {
    "label": "GetHashForNode()",
    "kind": "Method",
    "detail": "Function (UPTRINT)",
    "insertText": "GetHashForNode(USoundNode* NotifyNode)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "DispatchNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchNotifies(FWaveInstance* WaveInstance, const bool bStopped)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FNotifyBufferFinishedHooks& WaveInstance)"
  },
  {
    "label": "FNotifyBufferDetails()",
    "kind": "Method",
    "detail": "Function (private : struct FNotifyBufferDetails { TObjectPtr<USoundNode> NotifyNode ; UPTRINT NotifyNodeWaveInstanceHash ;)",
    "insertText": "FNotifyBufferDetails() : NotifyNode(nullptr) , NotifyNodeWaveInstanceHash(0)"
  },
  {
    "label": "FNotifyBufferDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNotifyBufferDetails(USoundNode* InNotifyNode, UPTRINT InHash) : NotifyNode(InNotifyNode) , NotifyNodeWaveInstanceHash(InHash)"
  },
  {
    "label": "IsAudioPluginEnabled()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FNotifyBufferDetails> Notifies ; } ; bool)",
    "insertText": "IsAudioPluginEnabled(EAudioPlugin PluginType)"
  },
  {
    "label": "GetAudioPluginCustomSettingsClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetAudioPluginCustomSettingsClass(EAudioPlugin PluginType)"
  },
  {
    "label": "IsSpatializationCVarEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpatializationCVarEnabled()"
  },
  {
    "label": "ISourceBufferListener()",
    "kind": "Method",
    "detail": "Function (class ISourceBufferListener { public : ~)",
    "insertText": "ISourceBufferListener()"
  },
  {
    "label": "OnNewBuffer()",
    "kind": "Method",
    "detail": "Function (struct FOnNewBufferParams { const float* AudioData = nullptr ; int32 SourceId = INDEX_NONE ; int32 NumSamples = 0 ; int32 NumChannels = 0 ; int32 SampleRate = 0 ; } ; void)",
    "insertText": "OnNewBuffer(const FOnNewBufferParams&)"
  },
  {
    "label": "OnSourceReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSourceReleased(const int32 InSourceId)"
  },
  {
    "label": "BusSends()",
    "kind": "Method",
    "detail": "Function (} ; using FSharedISourceBufferListenerPtr = TSharedPtr<ISourceBufferListener,ESPMode::ThreadSafe> ; enum class EBusSendType : uint8 { PreEffect,PostEffect,Count } ; struct FWaveInstance { private : uint32 PlayOrderCounter ; public : TObjectPtr<USoundWave> WaveData ; TObjectPtr<USoundClass> SoundClass ; USoundSubmixBase* SoundSubmix ; TArray<FSoundSubmixSendInfo> SoundSubmixSends ; TArray<FSoundSourceBusSendInfo>)",
    "insertText": "BusSends(int32)"
  },
  {
    "label": "FWaveInstance()",
    "kind": "Method",
    "detail": "Function (USoundEffectSourcePresetChain* SourceEffectChain ; FNotifyBufferFinishedHooks NotifyBufferFinishedHooks ; FActiveSound* ActiveSound ; TUniquePtr<Audio::FQuartzQuantizedRequestData> QuantizedRequestData ; FSharedISourceBufferListenerPtr SourceBufferListener ; bool bShouldSourceBufferListenerZeroBuffer = false ; bool bShouldUseAudioLink = true ; UAudioLinkSettingsAbstract* AudioLinkSettingsOverride = nullptr ; private : float Volume ; float DistanceAttenuation ; float OcclusionAttenuation ; float VolumeMultiplier ; float EnvelopValue ; float RelativeRenderCost ; public : int32 EnvelopeFollowerAttackTime ; int32 EnvelopeFollowerReleaseTime ; float Priority ; float VoiceCenterChannelVolume ; float RadioFilterVolume ; float RadioFilterVolumeThreshold ; float LFEBleed ; ELoopingMode LoopingMode ; float StartTime ; uint32 bEnableBusSends : 1 ; uint32 bEnableBaseSubmix : 1 ; uint32 bEnableSubmixSends : 1 ; uint32 bEnableSourceDataOverride : 1 ; uint32 bApplyRadioFilter : 1 ; uint32 bIsStarted : 1 ; uint32 bIsFinished : 1 ; uint32 bAlreadyNotifiedHook : 1 ; uint32 bSpatializationIsExternalSend : 1 ; private : uint32 bUseSpatialization : 1 ; public : uint32 bEnableLowPassFilter : 1 ; uint32 bEnableHighPassFilter : 1 ; uint32 bIsOccluded : 1 ; uint32 bIsUISound : 1 ; uint32 bIsMusic : 1 ; uint32 bReverb : 1 ; uint32 bCenterChannelOnly : 1 ; uint32 bIsPaused : 1 ; uint32 bReportedSpatializationWarning : 1 ; uint32 bIsAmbisonics : 1 ; uint32 bIsStopping : 1 ; uint32 bIsDynamic : 1 ; ESoundSpatializationAlgorithm SpatializationMethod ; USpatializationPluginSourceSettingsBase* SpatializationPluginSettings ; UOcclusionPluginSourceSettingsBase* OcclusionPluginSettings ; UReverbPluginSourceSettingsBase* ReverbPluginSettings ; USourceDataOverridePluginSourceSettingsBase* SourceDataOverridePluginSettings ; EAudioOutputTarget::Type OutputTarget ; float LowPassFilterFrequency ; float HighPassFilterFrequency ; float SoundClassFilterFrequency ; float OcclusionFilterFrequency ; float AmbientZoneFilterFrequency ; float AttenuationLowpassFilterFrequency ; float AttenuationHighpassFilterFrequency ; float Pitch ; FVector Location ; float NonSpatializedRadiusStart ; float NonSpatializedRadiusEnd ; ENonSpatializedRadiusSpeakerMapMode NonSpatializedRadiusMode ; float StereoSpread ; float AttenuationDistance ; float ListenerToSoundDistance ; float ListenerToSoundDistanceForPanning ; float AbsoluteAzimuth ; float PlaybackTime ; float ReverbSendLevel ; float ManualReverbSendLevel ; TArray<FAttenuationSubmixSendSettings> AttenuationSubmixSends ; private : uint32 PlayOrder ; public : UPTRINT WaveInstanceHash ; uint8 UserIndex ;)",
    "insertText": "FWaveInstance(const UPTRINT InWaveInstanceHash, FActiveSound& ActiveSound)"
  },
  {
    "label": "FWaveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWaveInstance(FWaveInstance&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWaveInstance&)",
    "insertText": "operator(FWaveInstance&&)"
  },
  {
    "label": "StopWithoutNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWithoutNotification()"
  },
  {
    "label": "NotifyFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFinished(const bool bStopped = false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FWaveInstance* WaveInstance)"
  },
  {
    "label": "ShouldStopDueToMaxConcurrency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStopDueToMaxConcurrency()"
  },
  {
    "label": "SetVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolume(const float InVolume)"
  },
  {
    "label": "SetDistanceAttenuation()",
    "kind": "Method",
    "detail": "Function (Volume = InVolume ; } void)",
    "insertText": "SetDistanceAttenuation(const float InDistanceAttenuation)"
  },
  {
    "label": "SetOcclusionAttenuation()",
    "kind": "Method",
    "detail": "Function (DistanceAttenuation = InDistanceAttenuation ; } void)",
    "insertText": "SetOcclusionAttenuation(const float InOcclusionAttenuation)"
  },
  {
    "label": "SetPitch()",
    "kind": "Method",
    "detail": "Function (OcclusionAttenuation = InOcclusionAttenuation ; } void)",
    "insertText": "SetPitch(const float InPitch)"
  },
  {
    "label": "SetVolumeMultiplier()",
    "kind": "Method",
    "detail": "Function (Pitch = InPitch ; } void)",
    "insertText": "SetVolumeMultiplier(const float InVolumeMultiplier)"
  },
  {
    "label": "SetStopping()",
    "kind": "Method",
    "detail": "Function (VolumeMultiplier = InVolumeMultiplier ; } void)",
    "insertText": "SetStopping(const bool bInIsStopping)"
  },
  {
    "label": "IsStopping()",
    "kind": "Method",
    "detail": "Function (bIsStopping = bInIsStopping ; } bool)",
    "insertText": "IsStopping()"
  },
  {
    "label": "GetVolumeMultiplier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolumeMultiplier()"
  },
  {
    "label": "GetVolumeWithDistanceAndOcclusionAttenuation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolumeWithDistanceAndOcclusionAttenuation()"
  },
  {
    "label": "GetDistanceAndOcclusionAttenuation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDistanceAndOcclusionAttenuation()"
  },
  {
    "label": "GetDistanceAttenuation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDistanceAttenuation()"
  },
  {
    "label": "GetOcclusionAttenuation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOcclusionAttenuation()"
  },
  {
    "label": "GetDynamicVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDynamicVolume()"
  },
  {
    "label": "GetPitch()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPitch()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolume()"
  },
  {
    "label": "GetVolumeWeightedPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolumeWeightedPriority()"
  },
  {
    "label": "IsSeekable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeekable()"
  },
  {
    "label": "IsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreaming()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "SetEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnvelopeValue(const float InEnvelopeValue)"
  },
  {
    "label": "GetEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (EnvelopValue = InEnvelopeValue ; } float)",
    "insertText": "GetEnvelopeValue()"
  },
  {
    "label": "GetUseSpatialization()",
    "kind": "Method",
    "detail": "Function (bUseSpatialization = InUseSpatialization ; } bool)",
    "insertText": "GetUseSpatialization()"
  },
  {
    "label": "SetSpatializationIsExternalSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpatializationIsExternalSend(const bool InSpatializationIsExternalSend)"
  },
  {
    "label": "GetSpatializationIsExternalSend()",
    "kind": "Method",
    "detail": "Function (bSpatializationIsExternalSend = InSpatializationIsExternalSend ; } bool)",
    "insertText": "GetSpatializationIsExternalSend()"
  },
  {
    "label": "GetRelativeRenderCost()",
    "kind": "Method",
    "detail": "Function (RelativeRenderCost = InRelativeRenderCost ; } float)",
    "insertText": "GetRelativeRenderCost()"
  },
  {
    "label": "FSoundBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSoundBuffer()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize() PURE_VIRTUAL(FSoundBuffer::GetSize,return 0;)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe(bool bUseLongName)"
  },
  {
    "label": "GetSoundClassName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSoundClassName()"
  },
  {
    "label": "GetChannelsDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetChannelsDesc()"
  },
  {
    "label": "ReadCompressedInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedInfo(USoundWave* SoundWave)"
  },
  {
    "label": "GetCurrentChunkIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCurrentChunkIndex()"
  },
  {
    "label": "FSoundSource()",
    "kind": "Method",
    "detail": "Function (} int32 ResourceID ; int32 NumChannels ; FString ResourceName ; bool bAllocationInPermanentPool ; class FAudioDevice* AudioDevice ; } ; class FSoundSource { public :)",
    "insertText": "FSoundSource(FAudioDevice* InAudioDevice) : AudioDevice(InAudioDevice) , WaveInstance(nullptr) , LFEBleed(0.5f) , LPFFrequency(MAX_FILTER_FREQUENCY) , HPFFrequency(MIN_FILTER_FREQUENCY) , LastLPFFrequency(MAX_FILTER_FREQUENCY) , LastHPFFrequency(MIN_FILTER_FREQUENCY) , PlaybackTime(0.0f) , Pitch(1.0f) , LastUpdate(0) , LastHeardUpdate(0) , TickCount(0) , LeftChannelSourceLocation(0) , RightChannelSourceLocation(0) , NumFramesPlayed(0) , NumTotalFrames(1) , StartFrame(0) , VoiceId(-1) , Playing(false) , bReverbApplied(false) , bIsPausedByGame(false) , bIsManuallyPaused(false) , Paused(false) , bInitialized(true) , bIsPreviewSound(false) , bIsVirtual(false)"
  },
  {
    "label": "FSoundSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSoundSource()"
  },
  {
    "label": "PrepareForInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareForInitialization(FWaveInstance* InWaveInstance)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StopNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopNow()"
  },
  {
    "label": "SetPauseByGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPauseByGame(bool bInIsPauseByGame)"
  },
  {
    "label": "SetPauseManually()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPauseManually(bool bInIsPauseManually)"
  },
  {
    "label": "IsGameOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameOnly()"
  },
  {
    "label": "GetWaveInstance()",
    "kind": "Method",
    "detail": "Function (const FWaveInstance*)",
    "insertText": "GetWaveInstance()"
  },
  {
    "label": "SetLFEBleed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SetLFEBleed()"
  },
  {
    "label": "SetFilterFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterFrequency()"
  },
  {
    "label": "UpdateStereoEmitterPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStereoEmitterPositions()"
  },
  {
    "label": "GetSpatializationParams()",
    "kind": "Method",
    "detail": "Function (FSpatializationParams)",
    "insertText": "GetSpatializationParams()"
  },
  {
    "label": "SetVirtual()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVirtual()"
  },
  {
    "label": "GetPlaybackPercent()",
    "kind": "Method",
    "detail": "Function (bIsVirtual = true ; } float)",
    "insertText": "GetPlaybackPercent()"
  },
  {
    "label": "GetSourceSampleRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSourceSampleRate()"
  },
  {
    "label": "GetNumFramesPlayed()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetNumFramesPlayed()"
  },
  {
    "label": "GetNumTotalFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTotalFrames()"
  },
  {
    "label": "GetStartFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStartFrame()"
  },
  {
    "label": "NotifyPlaybackData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlaybackData()"
  },
  {
    "label": "InitCommon()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitCommon()"
  },
  {
    "label": "UpdateCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCommon()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "UpdatePause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePause()"
  },
  {
    "label": "GetDebugVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDebugVolume(const float InVolume)"
  },
  {
    "label": "FWaveModInfo()",
    "kind": "Method",
    "detail": "Function (float LFEBleed ; float LPFFrequency ; float HPFFrequency ; float LastLPFFrequency ; float LastHPFFrequency ; float PlaybackTime ; float Pitch ; int32 LastUpdate ; int32 LastHeardUpdate ; int32 TickCount ; FVector LeftChannelSourceLocation ; FVector RightChannelSourceLocation ; int32 NumFramesPlayed ; int32 NumTotalFrames ; int32 StartFrame ; int32 NumChannels = 0 ; uint32 VoiceId ; FThreadSafeBool Playing ; uint8 bReverbApplied : 1 ; uint8 bIsPausedByGame : 1 ; uint8 bIsManuallyPaused : 1 ; uint8 Paused : 1 ; uint8 bInitialized : 1 ; uint8 bIsPreviewSound : 1 ; uint32 bIsVirtual : 1 ; class FAudioDevice ; struct FActiveSound ; # if ENABLE_AUDIO_DEBUG public : struct FDebugInfo { bool bIsSoloed = false ; bool bIsMuted = false ; FString MuteSoloReason ; double CPUCoreUtilization = 0 ; float RelativeRenderCost = 1 . f ; FCriticalSection CS ; } ; TSharedPtr<FDebugInfo,ESPMode::ThreadSafe> DebugInfo ; struct FDebugInfo ; # endif } ; struct FWaveCue { uint32 CuePointID = 0 ; uint32 Position = 0 ; FString Label ; uint32 SampleLength = 0 ; } ; struct FWaveSampleLoop { uint32 LoopID = 0 ; uint32 StartFrame = 0 ; uint32 EndFrame = 0 ; } ; class FWaveModInfo { public : uint16 WAVE_INFO_FORMAT_PCM = 0 x0001 ; uint16 WAVE_INFO_FORMAT_ADPCM = 0 x0002 ; uint16 WAVE_INFO_FORMAT_IEEE_FLOAT = 0 x0003 ; uint16 WAVE_INFO_FORMAT_DVI_ADPCM = 0 x0011 ; uint16 WAVE_INFO_FORMAT_OODLE_WAVE = 0 xFFFF ; const uint32* pSamplesPerSec ; const uint32* pAvgBytesPerSec ; const uint16* pBlockAlign ; const uint16* pBitsPerSample ; const uint16* pChannels ; uint16* pFormatTag ; const uint32* pWaveDataSize ; const uint32* pMasterSize ; const uint8* SampleDataStart ; const uint8* SampleDataEnd ; uint32 SampleDataSize ; const uint8* WaveDataEnd ; uint32 NewDataSize ; TArray<FWaveCue> WaveCues ; TArray<FWaveSampleLoop> WaveSampleLoops ; TPimplPtr<FSoundWaveTimecodeInfo,EPimplPtrMode::DeepCopy> TimecodeInfo ;)",
    "insertText": "FWaveModInfo()"
  },
  {
    "label": "Pad16Bit()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Pad16Bit(uint32 InDW)"
  },
  {
    "label": "GetRequiredWaveChunkIds()",
    "kind": "Method",
    "detail": "Function (} const TArray<uint32>&)",
    "insertText": "GetRequiredWaveChunkIds()"
  },
  {
    "label": "GetOptionalWaveChunkIds()",
    "kind": "Method",
    "detail": "Function (const TArray<uint32>&)",
    "insertText": "GetOptionalWaveChunkIds()"
  },
  {
    "label": "ReadWaveInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadWaveInfo(const uint8* WaveData, int32 WaveDataSize, FString* ErrorMessage = NULL, bool InHeaderDataOnly = false, void** OutFormatHeader = NULL)"
  },
  {
    "label": "ReadWaveHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadWaveHeader(const uint8* RawWaveData, int32 Size, int32 Offset)"
  },
  {
    "label": "ReportImportFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportImportFailure()"
  },
  {
    "label": "GetNumSamples()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumSamples()"
  },
  {
    "label": "IsFormatSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFormatSupported()"
  },
  {
    "label": "IsFormatUncompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFormatUncompressed()"
  },
  {
    "label": "SerializeWaveFile()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SerializeWaveFile(TArray<uint8>& OutWaveFileData, const uint8* InPCMData, const int32 NumBytes, const int32 NumChannels, const int32 SampleRate)"
  },
  {
    "label": "SetCompressedAudioFormatsToBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompressedAudioFormatsToBuild(const TCHAR* Platform = NULL)"
  },
  {
    "label": "GetCompressedAudioFormatsToBuild()",
    "kind": "Method",
    "detail": "Function (const TArray<FName>&)",
    "insertText": "GetCompressedAudioFormatsToBuild()"
  }
]