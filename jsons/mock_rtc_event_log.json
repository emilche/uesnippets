[
  {
    "label": "MockRtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockRtcEventLog"
  },
  {
    "label": "MockRtcEventLog()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_MOCK_MOCK_RTC_EVENT_LOG_H_ # define LOGGING_RTC_EVENT_LOG_MOCK_MOCK_RTC_EVENT_LOG_H_ # include<memory> # include \" api / rtc_event_log / rtc_event_log . h \" # include \" test / gmock . h \" namespace webrtc { class MockRtcEventLog : public RtcEventLog { public :)",
    "insertText": "MockRtcEventLog()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, StartLogging, (std::unique_ptr<RtcEventLogOutput> output, int64_t output_period_ms), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, StopLogging, (), (override))"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(std::unique_ptr<RtcEvent> event)"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(void, LogProxy, (RtcEvent*))"
  }
]