[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UDEPRECATED_PawnAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnAction"
  },
  {
    "label": "UDEPRECATED_PawnActionsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnActionsComponent"
  },
  {
    "label": "FPawnActionStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPawnActionStack"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "TActionClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActionClass"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" AITypes . h \" # include \" BrainComponent . h \" # include \" PawnAction . generated . h \" class AController ; class APawn ; class UDEPRECATED_PawnAction ; class UDEPRECATED_PawnActionsComponent ; struct FPawnActionStack ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (enum Type : int { CopyBeforeTriggering,ReuseInstances,} ; })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPawnAction, Warning, All)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FPawnActionEventDelegate, UDEPRECATED_PawnAction&, EPawnActionEventType::Type)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum Type : int { RequireSuccess,IgnoreFailure } ; })",
    "insertText": "UCLASS(abstract, EditInlineNew, deprecated, meta = (DeprecationMessage = \"PawnActions have been deprecated and are no longer being supported. It will get removed in following UE5 releases. Use GameplayTasks or AITasks instead.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (uint32 bWantsTick : 1 ; private : uint32 bPaused : 1 ; uint32 bHasBeenStarted : 1 ; uint32 bFailedToStart : 1 ; EPawnActionAbortState::Type AbortState ; EPawnActionResult::Type FinishResult ; int32 IndexOnStack ; public : UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "IsBeingAborted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBeingAborted()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (ChildAction_DEPRECATED ->)",
    "insertText": "Tick(DeltaTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!!bWantsTick && IsPaused() == false)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (} } EPawnActionAbortState::Type)",
    "insertText": "Abort(EAIForceParam::Type ShouldForce = EAIForceParam::DoNotForce)"
  },
  {
    "label": "GetController()",
    "kind": "Method",
    "detail": "Function (AController*)",
    "insertText": "GetController()"
  },
  {
    "label": "CreateActionInstance()",
    "kind": "Method",
    "detail": "Function (template<class TActionClass> TActionClass*)",
    "insertText": "CreateActionInstance(UWorld& World)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UDEPRECATED_PawnAction> ActionClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "WaitForMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForMessage(FName MessageType, FAIRequestID RequestID = FAIRequestID::AnyRequest)"
  },
  {
    "label": "HandleAIMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAIMessage(UBrainComponent*, const FAIMessage&)"
  },
  {
    "label": "SetActionObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetActionObserver(const FPawnActionEventDelegate& InActionObserver)"
  },
  {
    "label": "HasActionObserver()",
    "kind": "Method",
    "detail": "Function (ActionObserver = InActionObserver ; } bool)",
    "insertText": "HasActionObserver()"
  },
  {
    "label": "GetStateDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStateDescription()"
  },
  {
    "label": "GetPriorityName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPriorityName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Activate()"
  },
  {
    "label": "OnPopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPopped()"
  },
  {
    "label": "SendEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendEvent(EPawnActionEventType::Type Event)"
  },
  {
    "label": "StopWaitingForMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWaitingForMessages()"
  },
  {
    "label": "SetOwnerComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerComponent(UDEPRECATED_PawnActionsComponent* Component)"
  },
  {
    "label": "SetInstigator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstigator(UObject* const InInstigator)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Pause(const UDEPRECATED_PawnAction* PausedBy)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resume()"
  },
  {
    "label": "OnFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinished(EPawnActionResult::Type WithResult)"
  },
  {
    "label": "OnChildFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildFinished(UDEPRECATED_PawnAction& Action, EPawnActionResult::Type WithResult)"
  },
  {
    "label": "PushChildAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushChildAction(UDEPRECATED_PawnAction& Action)"
  },
  {
    "label": "PerformAbort()",
    "kind": "Method",
    "detail": "Function (EPawnActionAbortState::Type)",
    "insertText": "PerformAbort(EAIForceParam::Type ShouldForce)"
  },
  {
    "label": "SetFinishResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFinishResult(EPawnActionResult::Type Result)"
  },
  {
    "label": "SetAbortState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAbortState(EPawnActionAbortState::Type NewAbortState)"
  },
  {
    "label": "GetActionPriority()",
    "kind": "Method",
    "detail": "Function (} ; TEnumAsByte<EAIRequestPriority::Type>)",
    "insertText": "GetActionPriority()"
  }
]