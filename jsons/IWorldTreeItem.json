[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWorldHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldHierarchy"
  },
  {
    "label": "FLevelCollectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelCollectionModel"
  },
  {
    "label": "SWorldHierarchyImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldHierarchyImpl"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "IDropTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDropTarget"
  },
  {
    "label": "FLevelModelTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelModelTreeItem"
  },
  {
    "label": "FFolderTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFolderTreeItem"
  },
  {
    "label": "IWorldTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IWorldTreeItem"
  },
  {
    "label": "FlagsType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagsType"
  },
  {
    "label": "ValidateDrop()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Paths . h \" # include \" Misc / CoreDelegates . h \" # include \" WorldBrowserPrivateTypes . h \" # include \" LevelModel . h \" # include \" Styling / SlateBrush . h \" # include \" WorldBrowserDragDrop . h \" class SWidget ; class SWorldHierarchy ; class FLevelCollectionModel ; class SWorldHierarchyImpl ; class UToolMenu ; namespace WorldHierarchy { struct IDropTarget { FValidationInfo)",
    "insertText": "ValidateDrop(const FDragDropEvent& DragEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(const FDragDropEvent& DragEvent, TSharedRef<SWorldHierarchyImpl> Hierarchy)"
  },
  {
    "label": "FlagsType()",
    "kind": "Method",
    "detail": "Function (} ; struct FLevelModelTreeItem ; struct FFolderTreeItem ; struct IWorldTreeItem : IDropTarget,TSharedFromThis<IWorldTreeItem> { SWorldHierarchy ; struct FlagsType { bool bExpanded : 1 ; bool bFilteredOut : 1 ; bool bChildrenRequiresSort : 1 ; bool bVisible : 1 ; bool bLocked : 1 ;)",
    "insertText": "FlagsType() : bExpanded(1) , bFilteredOut(0) , bChildrenRequiresSort(1) , bVisible(1) , bLocked(0)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} } ; public : FlagsType Flags ;)",
    "insertText": "DECLARE_DELEGATE(FOnRenameRequest)"
  },
  {
    "label": "IWorldTreeItem()",
    "kind": "Method",
    "detail": "Function (FOnRenameRequest RenameRequestEvent ; TWeakPtr<FLevelCollectionModel> WorldModel ; protected :)",
    "insertText": "IWorldTreeItem()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} FWorldTreeItemPtr Parent ; TArray<FWorldTreeItemPtr> Children ; public : FWorldTreeItemPtr)",
    "insertText": "GetParent()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const IWorldTreeItem* Ancestor = this ;)",
    "insertText": "while(Ancestor->GetParent().IsValid())"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (Ancestor = Ancestor ->)",
    "insertText": "GetParent().Get()"
  },
  {
    "label": "GetModel()",
    "kind": "Method",
    "detail": "Function (} return Ancestor ->)",
    "insertText": "GetModel()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(FWorldTreeItemRef Child)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (Child -> Parent =)",
    "insertText": "AsShared()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(MoveTemp(Child))"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveChild(const FWorldTreeItemRef& Child)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (Child -> Parent = nullptr ; } } const TArray<FWorldTreeItemPtr>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetLevelModels()",
    "kind": "Method",
    "detail": "Function (} FLevelModelList)",
    "insertText": "GetLevelModels()"
  },
  {
    "label": "AppendLevelModels()",
    "kind": "Method",
    "detail": "Function (FLevelModelList Models ;)",
    "insertText": "AppendLevelModels(Models)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutLevelModels .)",
    "insertText": "Append(GetModel())"
  },
  {
    "label": "AppendLevelModels()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "AppendLevelModels(OutLevelModels)"
  },
  {
    "label": "GetAncestorPaths()",
    "kind": "Method",
    "detail": "Function (} TSet<FName>)",
    "insertText": "GetAncestorPaths()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (public : FWorldTreeItemID)",
    "insertText": "GetID()"
  },
  {
    "label": "CreateParent()",
    "kind": "Method",
    "detail": "Function (FWorldTreeItemPtr)",
    "insertText": "CreateParent()"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetLockToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLockToolTipText()"
  },
  {
    "label": "GetEditorVisibilityToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEditorVisibilityToolTipText()"
  },
  {
    "label": "GetGameVisibilityToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGameVisibilityToolTipText()"
  },
  {
    "label": "GetSaveToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSaveToolTipText()"
  },
  {
    "label": "GetPackageFileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPackageFileName()"
  },
  {
    "label": "GetParentID()",
    "kind": "Method",
    "detail": "Function (} FWorldTreeItemID)",
    "insertText": "GetParentID()"
  },
  {
    "label": "CanHaveChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveChildren()"
  },
  {
    "label": "SetExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansion(bool bExpanded)"
  },
  {
    "label": "HasModel()",
    "kind": "Method",
    "detail": "Function (Flags . bExpanded = bExpanded ; } bool)",
    "insertText": "HasModel(TSharedPtr<FLevelModel> InLevelModel)"
  },
  {
    "label": "GetSortPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSortPriority()"
  },
  {
    "label": "GetAsLevelModelTreeItem()",
    "kind": "Method",
    "detail": "Function (public : FLevelModelTreeItem*)",
    "insertText": "GetAsLevelModelTreeItem()"
  },
  {
    "label": "GetAsFolderTreeItem()",
    "kind": "Method",
    "detail": "Function (FFolderTreeItem*)",
    "insertText": "GetAsFolderTreeItem()"
  },
  {
    "label": "IsVisibleInEditor()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsVisibleInEditor()"
  },
  {
    "label": "IsVisibleInGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibleInGame()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "CanSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSave()"
  },
  {
    "label": "HasValidPackage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidPackage()"
  },
  {
    "label": "GetLevelSelectionFlag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetLevelSelectionFlag()"
  },
  {
    "label": "OnShowInEditorOnlySelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnShowInEditorOnlySelected()"
  },
  {
    "label": "OnShowInEditorAllButSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnShowInEditorAllButSelected()"
  },
  {
    "label": "OnToggleGameVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnToggleGameVisibility()"
  },
  {
    "label": "OnShowInGameOnlySelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnShowInGameOnlySelected()"
  },
  {
    "label": "OnShowInGameAllButSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnShowInGameAllButSelected()"
  },
  {
    "label": "PopulateLevelModelList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateLevelModelList(FLevelModelList& InModelList)"
  },
  {
    "label": "OnToggleLightingScenario()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnToggleLightingScenario()"
  },
  {
    "label": "OnLockOnlySelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLockOnlySelected()"
  },
  {
    "label": "OnLockAllButSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLockAllButSelected()"
  },
  {
    "label": "OnToggleLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnToggleLock()"
  },
  {
    "label": "OnSave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSave()"
  },
  {
    "label": "OnOpenKismet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnOpenKismet()"
  },
  {
    "label": "CanChangeParents()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanChangeParents()"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateContextMenu(UToolMenu* Menu, const SWorldHierarchyImpl& Hierarchy)"
  },
  {
    "label": "SetVisibleInEditor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisibleInEditor(bool bVisible)"
  },
  {
    "label": "SetVisibleInGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibleInGame(bool bVisible)"
  },
  {
    "label": "SetLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocked(bool bLocked)"
  },
  {
    "label": "GetParentPath()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetParentPath(const FName& InPath)"
  }
]