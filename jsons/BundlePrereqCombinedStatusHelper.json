[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "IInstallBundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleManager"
  },
  {
    "label": "FInstallBundlePauseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundlePauseInfo"
  },
  {
    "label": "FInstallBundleProgress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleProgress"
  },
  {
    "label": "FInstallBundleRequestResultInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstallBundleRequestResultInfo"
  },
  {
    "label": "FInstallBundleCombinedProgressTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstallBundleCombinedProgressTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCombinedProgress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCombinedProgress"
  },
  {
    "label": "FInstallBundleCombinedProgressTracker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Ticker . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" InstallBundleManagerInterface . h \" # include \" InstallBundleTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class FName ; class IInstallBundleManager ; struct FInstallBundlePauseInfo ; struct FInstallBundleProgress ; struct FInstallBundleRequestResultInfo ; class FInstallBundleCombinedProgressTracker { public : enum class ECombinedBundleStatus : int32 { Unknown,Initializing,Updating,Finishing,Finished,Count } ; struct FCombinedProgress { float ProgressPercent = 0 . 0 f ; ECombinedBundleStatus CombinedStatus = ECombinedBundleStatus::Unknown ; EInstallBundlePauseFlags CombinedPauseFlags = EInstallBundlePauseFlags::None ; bool bIsPaused = false ; bool bDoesCurrentStateSupportPausing = false ; bool bBundleRequiresUpdate = false ; } ; public :)",
    "insertText": "FInstallBundleCombinedProgressTracker(bool bAutoTick = true, TUniqueFunction<void(const FCombinedProgress&)> OnTick = nullptr)"
  },
  {
    "label": "FInstallBundleCombinedProgressTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInstallBundleCombinedProgressTracker()"
  },
  {
    "label": "FInstallBundleCombinedProgressTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstallBundleCombinedProgressTracker(const FInstallBundleCombinedProgressTracker& Other)"
  },
  {
    "label": "FInstallBundleCombinedProgressTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstallBundleCombinedProgressTracker(FInstallBundleCombinedProgressTracker&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstallBundleCombinedProgressTracker&)",
    "insertText": "operator(const FInstallBundleCombinedProgressTracker& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInstallBundleCombinedProgressTracker&)",
    "insertText": "operator(FInstallBundleCombinedProgressTracker&& Other)"
  },
  {
    "label": "SetBundlesToTrackFromContentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBundlesToTrackFromContentState(const FInstallBundleCombinedContentState& BundleContentState, TArrayView<FName> BundlesToTrack)"
  },
  {
    "label": "GetCurrentCombinedProgress()",
    "kind": "Method",
    "detail": "Function (const FCombinedProgress&)",
    "insertText": "GetCurrentCombinedProgress()"
  },
  {
    "label": "ForceTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceTick()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(0)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "Tick(float dt)"
  },
  {
    "label": "UpdateBundleCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBundleCache()"
  },
  {
    "label": "UpdateCombinedStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCombinedStatus()"
  },
  {
    "label": "SetupDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDelegates(bool bAutoTick)"
  },
  {
    "label": "CleanUpDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpDelegates()"
  },
  {
    "label": "OnBundleInstallComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBundleInstallComplete(FInstallBundleRequestResultInfo CompletedBundleInfo)"
  },
  {
    "label": "OnBundleInstallPauseChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBundleInstallPauseChanged(FInstallBundlePauseInfo PauseInfo)"
  },
  {
    "label": "GetCombinedProgressPercent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCombinedProgressPercent()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : TArray<FName> RequiredBundleNames ; TMap<FName,FInstallBundleProgress> BundleStatusCache ; TMap<FName,float> CachedBundleWeights ; FCombinedProgress CurrentCombinedProgress ; TWeakPtr<IInstallBundleManager> InstallBundleManager ; FTSTicker::FDelegateHandle TickHandle ; TUniqueFunction<)",
    "insertText": "void(const FCombinedProgress&)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} ; const TCHAR*)",
    "insertText": "LexToString(FInstallBundleCombinedProgressTracker::ECombinedBundleStatus Status)"
  }
]