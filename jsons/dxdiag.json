[
  {
    "label": "IDxDiagProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxDiagProvider"
  },
  {
    "label": "IDxDiagContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDxDiagContainer"
  },
  {
    "label": "_DXDIAG_INIT_PARAMS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_DXDIAG_INIT_PARAMS"
  },
  {
    "label": "WINAPI_FAMILY_PARTITION()",
    "kind": "Method",
    "detail": "Function (# ifndef _DXDIAG_H_ # define _DXDIAG_H_ # include<winapifamily . h> # pragma region Desktop Family # if)",
    "insertText": "WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)"
  },
  {
    "label": "DXDIAG_E_INSUFFICIENT_BUFFER()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "DXDIAG_E_INSUFFICIENT_BUFFER((HRESULT)0x8007007AL) DEFINE_GUID(CLSID_DxDiagProvider, 0xA65B8071, 0x3BFE, 0x4213, 0x9A, 0x5B, 0x49, 0x1D, 0xA4, 0x46, 0x1C, 0xA7)"
  },
  {
    "label": "DEFINE_GUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_GUID(IID_IDxDiagProvider, 0x9C6B4CB0, 0x23F8, 0x49CC, 0xA3, 0xED, 0x45, 0xA5, 0x50, 0x00, 0xA6, 0xD2)"
  },
  {
    "label": "DEFINE_GUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_GUID(IID_IDxDiagContainer, 0x7D0F462F, 0x4064, 0x4862, 0xBC, 0x7F, 0x93, 0x3E, 0x50, 0x58, 0xC1, 0x0F)"
  },
  {
    "label": "DECLARE_INTERFACE_()",
    "kind": "Method",
    "detail": "Function (typedef struct IDxDiagProvider* LPDXDIAGPROVIDER,* PDXDIAGPROVIDER ; typedef struct IDxDiagContainer* LPDXDIAGCONTAINER,* PDXDIAGCONTAINER ; typedef struct _DXDIAG_INIT_PARAMS { DWORD dwSize ; DWORD dwDxDiagHeaderVersion ; BOOL bAllowWHQLChecks ; VOID* pReserved ; } DXDIAG_INIT_PARAMS ; # undef INTERFACE # define INTERFACE IDxDiagProvider)",
    "insertText": "DECLARE_INTERFACE_(IDxDiagProvider,IUnknown)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryInterface) (THIS_ REFIID riid, LPVOID *ppvObj)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(ULONG,AddRef) (THIS)"
  },
  {
    "label": "STDMETHOD_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD_(ULONG,Release) (THIS)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Initialize) (THIS_ DXDIAG_INIT_PARAMS* pParams)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetRootContainer) (THIS_ IDxDiagContainer **ppInstance)"
  },
  {
    "label": "DECLARE_INTERFACE_()",
    "kind": "Method",
    "detail": "Function (} ; # undef INTERFACE # define INTERFACE IDxDiagContainer)",
    "insertText": "DECLARE_INTERFACE_(IDxDiagContainer,IUnknown)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetNumberOfChildContainers) (THIS_ DWORD *pdwCount)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(EnumChildContainerNames) (THIS_ DWORD dwIndex, LPWSTR pwszContainer, DWORD cchContainer)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetChildContainer) (THIS_ LPCWSTR pwszContainer, IDxDiagContainer **ppInstance)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetNumberOfProps) (THIS_ DWORD *pdwCount)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(EnumPropNames) (THIS_ DWORD dwIndex, LPWSTR pwszPropName, DWORD cchPropName)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetProp) (THIS_ LPCWSTR pwszPropName, VARIANT *pvarProp)"
  }
]