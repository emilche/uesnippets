[
  {
    "label": "APSInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APSInt"
  },
  {
    "label": "APSInt()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_APSINT_H # define LLVM_ADT_APSINT_H # include \" llvm / ADT / APInt . h \" namespace llvm { class APSInt : public APInt { bool IsUnsigned ; public :)",
    "insertText": "APSInt() : IsUnsigned(false)"
  },
  {
    "label": "APSInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APSInt(uint32_t BitWidth, bool isUnsigned = true) : APInt(BitWidth, 0), IsUnsigned(isUnsigned)"
  },
  {
    "label": "APSInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APSInt(APInt I, bool isUnsigned = true) : APInt(std::move(I)), IsUnsigned(isUnsigned)"
  },
  {
    "label": "APSInt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APSInt(StringRef Str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (APSInt&)",
    "insertText": "operator(APInt RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(std::move(RHS))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(RHS)"
  },
  {
    "label": "setIsSigned()",
    "kind": "Method",
    "detail": "Function (IsUnsigned = Val ; } void)",
    "insertText": "setIsSigned(bool Val)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (IsUnsigned = ! Val ; } void)",
    "insertText": "toString(SmallVectorImpl<char> &Str, unsigned Radix = 10)"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toString(Str, Radix, isSigned())"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "toString(unsigned Radix)"
  },
  {
    "label": "getExtValue()",
    "kind": "Method",
    "detail": "Function (} using APInt::toString ; int64_t)",
    "insertText": "getExtValue()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getMinSignedBits() <= 64 && \"Too many bits for int64_t\")"
  },
  {
    "label": "trunc()",
    "kind": "Method",
    "detail": "Function (} APSInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "trunc(uint32_t width)"
  },
  {
    "label": "extend()",
    "kind": "Method",
    "detail": "Function (} APSInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "extend(uint32_t width)"
  },
  {
    "label": "extOrTrunc()",
    "kind": "Method",
    "detail": "Function (} APSInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "extOrTrunc(uint32_t width)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const APSInt&)",
    "insertText": "operator(const APSInt &RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsUnsigned == RHS.IsUnsigned && \"Signedness mismatch!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "operator(unsigned Amt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this =* this>> Amt ; return* this ; } bool)",
    "insertText": "operator(const APSInt& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(int64_t RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "operator(unsigned Bits)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this =* this<<Amt ; return* this ; } APSInt&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "operator(int)"
  },
  {
    "label": "APInt()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "APInt(*this)"
  },
  {
    "label": "And()",
    "kind": "Method",
    "detail": "Function (} APSInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "And(const APSInt& RHS)"
  },
  {
    "label": "Or()",
    "kind": "Method",
    "detail": "Function (} APSInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "Or(const APSInt& RHS)"
  },
  {
    "label": "Xor()",
    "kind": "Method",
    "detail": "Function (} APSInt LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "Xor(const APSInt& RHS)"
  },
  {
    "label": "getMaxValue()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "getMaxValue(uint32_t numBits, bool Unsigned)"
  },
  {
    "label": "getMinValue()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "getMinValue(uint32_t numBits, bool Unsigned)"
  },
  {
    "label": "isSameValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSameValue(const APSInt &I1, const APSInt &I2)"
  },
  {
    "label": "compareValues()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compareValues(const APSInt &I1, const APSInt &I2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!I2.isSigned() && \"Expected signed mismatch\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assert(I2.isSigned() && \"Expected signed mismatch\")"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (} return I1 .)",
    "insertText": "eq(I2) ? 0 : I1.ugt(I2)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "get(int64_t X)"
  },
  {
    "label": "getUnsigned()",
    "kind": "Method",
    "detail": "Function (} APSInt)",
    "insertText": "getUnsigned(uint64_t X)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID& ID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(int64_t V1, const APSInt &V2)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (I .)",
    "insertText": "print(OS, I.isSigned())"
  }
]