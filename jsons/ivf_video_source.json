[
  {
    "label": "IVFVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVFVideoSource"
  },
  {
    "label": "MemGetLe32()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_IVF_VIDEO_SOURCE_H_ # define VPX_TEST_IVF_VIDEO_SOURCE_H_ # include<cstdio> # include<cstdlib> # include<new> # include<string> # include \" test / video_source . h \" namespace libvpx_test { const unsigned int kCodeBufferSize = 2 5 6* 1 0 2 4* 1 0 2 4 ; const unsigned int kIvfFileHdrSize = 3 2 ; const unsigned int kIvfFrameHdrSize = 1 2 ; unsigned int)",
    "insertText": "MemGetLe32(const uint8_t *mem)"
  },
  {
    "label": "IVFVideoSource()",
    "kind": "Method",
    "detail": "Function (} class IVFVideoSource : public CompressedVideoSource { public :)",
    "insertText": "IVFVideoSource(const std::string &file_name) : file_name_(file_name), input_file_(nullptr), compressed_frame_buf_(nullptr), frame_sz_(0), frame_(0), end_of_file_(false)"
  },
  {
    "label": "IVFVideoSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IVFVideoSource()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete [ ] compressed_frame_buf_ ;)",
    "insertText": "if(input_file_) fclose(input_file_)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (compressed_frame_buf_ = new uint8_t [ libvpx_test::kCodeBufferSize ] ;)",
    "insertText": "ASSERT_NE(compressed_frame_buf_, nullptr)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "OpenTestDataFile()",
    "kind": "Method",
    "detail": "Function (input_file_ =)",
    "insertText": "OpenTestDataFile(file_name_)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_NE(input_file_, nullptr)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (uint8_t file_hdr [ kIvfFileHdrSize ] ;)",
    "insertText": "ASSERT_EQ(kIvfFileHdrSize, fread(file_hdr, 1, kIvfFileHdrSize, input_file_))"
  },
  {
    "label": "ASSERT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_TRUE(file_hdr[0] == 'D' && file_hdr[1] == 'K' && file_hdr[2] == 'I' && file_hdr[3] == 'F')"
  },
  {
    "label": "FillFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFrame()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Next()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8_t frame_hdr [ kIvfFrameHdrSize ] ;)",
    "insertText": "if(fread(frame_hdr, 1, kIvfFrameHdrSize, input_file_) != kIvfFrameHdrSize)"
  },
  {
    "label": "MemGetLe32()",
    "kind": "Method",
    "detail": "Function (end_of_file_ = true ; } else { end_of_file_ = false ; frame_sz_ =)",
    "insertText": "MemGetLe32(frame_hdr)"
  },
  {
    "label": "ASSERT_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_LE(frame_sz_, kCodeBufferSize)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(frame_sz_, fread(compressed_frame_buf_, 1, frame_sz_, input_file_))"
  },
  {
    "label": "cxdata()",
    "kind": "Method",
    "detail": "Function (} } const uint8_t*)",
    "insertText": "cxdata()"
  }
]