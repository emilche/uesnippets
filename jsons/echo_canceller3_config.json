[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Buffering",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Buffering"
  },
  {
    "label": "Delay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Delay"
  },
  {
    "label": "DelaySelectionThresholds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DelaySelectionThresholds"
  },
  {
    "label": "AlignmentMixing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlignmentMixing"
  },
  {
    "label": "Filter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Filter"
  },
  {
    "label": "RefinedConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RefinedConfiguration"
  },
  {
    "label": "CoarseConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoarseConfiguration"
  },
  {
    "label": "Erle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Erle"
  },
  {
    "label": "EpStrength",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EpStrength"
  },
  {
    "label": "EchoAudibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EchoAudibility"
  },
  {
    "label": "RenderLevels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RenderLevels"
  },
  {
    "label": "EchoRemovalControl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EchoRemovalControl"
  },
  {
    "label": "EchoModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EchoModel"
  },
  {
    "label": "ComfortNoise",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComfortNoise"
  },
  {
    "label": "Suppressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Suppressor"
  },
  {
    "label": "MaskingThresholds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskingThresholds"
  },
  {
    "label": "Tuning",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tuning"
  },
  {
    "label": "DominantNearendDetection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DominantNearendDetection"
  },
  {
    "label": "SubbandNearendDetection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubbandNearendDetection"
  },
  {
    "label": "SubbandRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubbandRegion"
  },
  {
    "label": "HighBandsSuppression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HighBandsSuppression"
  },
  {
    "label": "MultiChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiChannel"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_ECHO_CANCELLER3_CONFIG_H_ # define API_AUDIO_ECHO_CANCELLER3_CONFIG_H_ # include<stddef . h> # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct RTC_EXPORT EchoCanceller3Config { bool)",
    "insertText": "Validate(EchoCanceller3Config* config)"
  },
  {
    "label": "EchoCanceller3Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EchoCanceller3Config()"
  },
  {
    "label": "EchoCanceller3Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EchoCanceller3Config(const EchoCanceller3Config& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EchoCanceller3Config&)",
    "insertText": "operator(const EchoCanceller3Config& other)"
  },
  {
    "label": "Delay()",
    "kind": "Method",
    "detail": "Function (struct Buffering { size_t excess_render_detection_interval_blocks = 2 5 0 ; size_t max_allowed_excess_render_blocks = 8 ; } buffering ; struct Delay {)",
    "insertText": "Delay()"
  },
  {
    "label": "Delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delay(const Delay& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Delay&)",
    "insertText": "operator(const Delay& e)"
  },
  {
    "label": "EchoModel()",
    "kind": "Method",
    "detail": "Function (size_t default_delay = 5 ; size_t down_sampling_factor = 4 ; size_t num_filters = 5 ; size_t delay_headroom_samples = 3 2 ; size_t hysteresis_limit_blocks = 1 ; size_t fixed_capture_delay_samples = 0 ; float delay_estimate_smoothing = 0 . 7 f ; float delay_estimate_smoothing_delay_found = 0 . 7 f ; float delay_candidate_detection_threshold = 0 . 2 f ; struct DelaySelectionThresholds { int initial ; int converged ; } delay_selection_thresholds = { 5,2 0 } ; bool use_external_delay_estimator = false ; bool log_warning_on_delay_changes = false ; struct AlignmentMixing { bool downmix ; bool adaptive_selection ; float activity_power_threshold ; bool prefer_first_two_channels ; } ; AlignmentMixing render_alignment_mixing = { false,true,1 0 0 0 0 . f,true } ; AlignmentMixing capture_alignment_mixing = { false,true,1 0 0 0 0 . f,false } ; bool detect_pre_echo = true ; } delay ; struct Filter { struct RefinedConfiguration { size_t length_blocks ; float leakage_converged ; float leakage_diverged ; float error_floor ; float error_ceil ; float noise_gate ; } ; struct CoarseConfiguration { size_t length_blocks ; float rate ; float noise_gate ; } ; RefinedConfiguration refined = { 1 3,0 . 0 0 0 0 5 f,0 . 0 5 f,0 . 0 0 1 f,2 . f,2 0 0 7 5 3 4 4 . f } ; CoarseConfiguration coarse = { 1 3,0 . 7 f,2 0 0 7 5 3 4 4 . f } ; RefinedConfiguration refined_initial = { 1 2,0 . 0 0 5 f,0 . 5 f,0 . 0 0 1 f,2 . f,2 0 0 7 5 3 4 4 . f } ; CoarseConfiguration coarse_initial = { 1 2,0 . 9 f,2 0 0 7 5 3 4 4 . f } ; size_t config_change_duration_blocks = 2 5 0 ; float initial_state_seconds = 2 . 5 f ; int coarse_reset_hangover_blocks = 2 5 ; bool conservative_initial_phase = false ; bool enable_coarse_filter_output_usage = true ; bool use_linear_filter = true ; bool high_pass_filter_echo_reference = false ; bool export_linear_aec_output = false ; } filter ; struct Erle { float min = 1 . f ; float max_l = 4 . f ; float max_h = 1 . 5 f ; bool onset_detection = true ; size_t num_sections = 1 ; bool clamp_quality_estimate_to_zero = true ; bool clamp_quality_estimate_to_one = true ; } erle ; struct EpStrength { float default_gain = 1 . f ; float default_len = 0 . 8 3 f ; float nearend_len = 0 . 8 3 f ; bool echo_can_saturate = true ; bool bounded_erl = false ; bool erle_onset_compensation_in_dominant_nearend = false ; bool use_conservative_tail_frequency_response = true ; } ep_strength ; struct EchoAudibility { float low_render_limit = 4* 6 4 . f ; float normal_render_limit = 6 4 . f ; float floor_power = 2* 6 4 . f ; float audibility_threshold_lf = 1 0 ; float audibility_threshold_mf = 1 0 ; float audibility_threshold_hf = 1 0 ; bool use_stationarity_properties = false ; bool use_stationarity_properties_at_init = false ; } echo_audibility ; struct RenderLevels { float active_render_limit = 1 0 0 . f ; float poor_excitation_render_limit = 1 5 0 . f ; float poor_excitation_render_limit_ds8 = 2 0 . f ; float render_power_gain_db = 0 . f ; } render_levels ; struct EchoRemovalControl { bool has_clock_drift = false ; bool linear_and_stable_echo_path = false ; } echo_removal_control ; struct EchoModel {)",
    "insertText": "EchoModel()"
  },
  {
    "label": "EchoModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EchoModel(const EchoModel& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EchoModel&)",
    "insertText": "operator(const EchoModel& e)"
  },
  {
    "label": "Suppressor()",
    "kind": "Method",
    "detail": "Function (size_t noise_floor_hold = 5 0 ; float min_noise_floor_power = 1 6 3 8 4 0 0 . f ; float stationary_gate_slope = 1 0 . f ; float noise_gate_power = 2 7 5 0 9 . 4 2 f ; float noise_gate_slope = 0 . 3 f ; size_t render_pre_window_size = 1 ; size_t render_post_window_size = 1 ; bool model_reverb_in_nonlinear_mode = true ; } echo_model ; struct ComfortNoise { float noise_floor_dbfs = - 9 6 . 0 3 4 0 6 f ; } comfort_noise ; struct Suppressor {)",
    "insertText": "Suppressor()"
  },
  {
    "label": "Suppressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suppressor(const Suppressor& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Suppressor&)",
    "insertText": "operator(const Suppressor& e)"
  },
  {
    "label": "MaskingThresholds()",
    "kind": "Method",
    "detail": "Function (size_t nearend_average_blocks = 4 ; struct MaskingThresholds {)",
    "insertText": "MaskingThresholds(float enr_transparent, float enr_suppress, float emr_transparent)"
  },
  {
    "label": "MaskingThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaskingThresholds(const MaskingThresholds& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MaskingThresholds&)",
    "insertText": "operator(const MaskingThresholds& e)"
  },
  {
    "label": "Tuning()",
    "kind": "Method",
    "detail": "Function (float enr_transparent ; float enr_suppress ; float emr_transparent ; } ; struct Tuning {)",
    "insertText": "Tuning(MaskingThresholds mask_lf, MaskingThresholds mask_hf, float max_inc_factor, float max_dec_factor_lf)"
  },
  {
    "label": "Tuning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tuning(const Tuning& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Tuning&)",
    "insertText": "operator(const Tuning& e)"
  },
  {
    "label": "Tuning()",
    "kind": "Method",
    "detail": "Function (MaskingThresholds mask_lf ; MaskingThresholds mask_hf ; float max_inc_factor ; float max_dec_factor_lf ; } ; Tuning normal_tuning =)",
    "insertText": "Tuning(MaskingThresholds(.3f, .4f, .3f), MaskingThresholds(.07f, .1f, .3f), 2.0f, 0.25f)"
  },
  {
    "label": "Tuning()",
    "kind": "Method",
    "detail": "Function (Tuning nearend_tuning =)",
    "insertText": "Tuning(MaskingThresholds(1.09f, 1.1f, .3f), MaskingThresholds(.1f, .3f, .3f), 2.0f, 0.25f)"
  }
]