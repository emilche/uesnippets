[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FMovieSceneSectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSectionData"
  },
  {
    "label": "FSegmentBlendData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSegmentBlendData"
  },
  {
    "label": "FMovieSceneTrackRowSegmentBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackRowSegmentBlender"
  },
  {
    "label": "FMovieSceneTrackSegmentBlender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackSegmentBlender"
  },
  {
    "label": "FMovieSceneSectionData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreFwd . h \" # include \" CoreTypes . h \" # include \" Evaluation / MovieSceneSegment . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / InlineValue . h \" # include \" Misc / Optional . h \" class UMovieSceneSection ; struct FFrameNumber ; template<ElementType> class TRange ; template<T> struct TIsContiguousContainer ; struct FMovieSceneSectionData {)",
    "insertText": "FMovieSceneSectionData() : Section(nullptr), TemplateIndex(INDEX_NONE), Flags(ESectionEvaluationFlags::None)"
  },
  {
    "label": "FMovieSceneSectionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSectionData(const UMovieSceneSection* InSection, int32 InTemplateIndex, ESectionEvaluationFlags InFlags) : Section(InSection), TemplateIndex(InTemplateIndex), Flags(InFlags)"
  },
  {
    "label": "AddToSegment()",
    "kind": "Method",
    "detail": "Function (} const UMovieSceneSection* Section ; int32 TemplateIndex ; ESectionEvaluationFlags Flags ; } ; struct FSegmentBlendData : TArray<FMovieSceneSectionData,TInlineAllocator<4>> { void)",
    "insertText": "AddToSegment(FMovieSceneSegment& Segment)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Segment . Impls .)",
    "insertText": "Add(FSectionEvaluationData(SectionData.TemplateIndex, SectionData.Flags))"
  },
  {
    "label": "FMovieSceneTrackRowSegmentBlender()",
    "kind": "Method",
    "detail": "Function (} } } ; template<> struct TIsContiguousContainer<FSegmentBlendData> { enum { Value = true } ; } ; struct FMovieSceneTrackRowSegmentBlender { ~)",
    "insertText": "FMovieSceneTrackRowSegmentBlender()"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Blend(FSegmentBlendData& BlendData)"
  },
  {
    "label": "FMovieSceneTrackSegmentBlender()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMovieSceneTrackSegmentBlender {)",
    "insertText": "FMovieSceneTrackSegmentBlender()"
  },
  {
    "label": "AllowEmptySegments()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowEmptySegments()"
  }
]