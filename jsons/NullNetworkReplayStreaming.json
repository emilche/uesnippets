[
  {
    "label": "FNetworkReplayVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkReplayVersion"
  },
  {
    "label": "FNullReplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullReplayInfo"
  },
  {
    "label": "FNullNetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullNetworkReplayStreamer"
  },
  {
    "label": "FNullNetworkReplayStreamingFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullNetworkReplayStreamingFactory"
  },
  {
    "label": "FNullReplayInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Serialization / JsonSerializerMacros . h \" # include \" NetworkReplayStreaming . h \" # include \" Tickable . h \" class FNetworkReplayVersion ; class FNullReplayInfo : public FJsonSerializable { public :)",
    "insertText": "FNullReplayInfo() : LengthInMS(0), NetworkVersion(0), Changelist(0), DemoFileLastOffset(0), bIsValid(false)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (} int32 LengthInMS ; uint32 NetworkVersion ; uint32 Changelist ; FString FriendlyName ; int32 DemoFileLastOffset ; bool bIsValid ; BEGIN_JSON_SERIALIZER)",
    "insertText": "JSON_SERIALIZE(\"LengthInMS\", LengthInMS)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"NetworkVersion\", NetworkVersion)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"Changelist\", Changelist)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"FriendlyName\", FriendlyName)"
  },
  {
    "label": "JSON_SERIALIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSON_SERIALIZE(\"DemoFileLastOffset\", DemoFileLastOffset)"
  },
  {
    "label": "FNullNetworkReplayStreamer()",
    "kind": "Method",
    "detail": "Function (END_JSON_SERIALIZER } ; class FNullNetworkReplayStreamer : public INetworkReplayStreamer,public FTickableGameObject { public :)",
    "insertText": "FNullNetworkReplayStreamer() : StreamerState(EReplayStreamerState::Idle), CurrentCheckpointIndex( 0 ), LastKnownFileSize( 0)"
  },
  {
    "label": "StartStreaming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartStreaming(const FStartStreamingParameters& Params, const FStartStreamingCallback& Delegate)"
  },
  {
    "label": "StopStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStreaming()"
  },
  {
    "label": "GetHeaderArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetHeaderArchive()"
  },
  {
    "label": "GetStreamingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetStreamingArchive()"
  },
  {
    "label": "GetCheckpointArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetCheckpointArchive()"
  },
  {
    "label": "FlushCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpoint(const uint32 TimeInMS)"
  },
  {
    "label": "GotoCheckpointIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndex(const int32 CheckpointIndex, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "GotoTimeInMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoTimeInMS(const uint32 TimeInMS, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "UpdateTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTotalDemoTime(uint32 TimeInMS)"
  },
  {
    "label": "UpdatePlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackTime(uint32 TimeInMS)"
  },
  {
    "label": "GetTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTotalDemoTime()"
  },
  {
    "label": "SetHighPriorityTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPriorityTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsDataAvailableForTimeRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDataAvailableForTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const int32 UserIndex, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "EnumerateStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateStreams(const FNetworkReplayVersion& InReplayVersion, const int32 UserIndex, const FString& MetaString, const TArray< FString >& ExtraParms, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "EnumerateRecentStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateRecentStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& Name, const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& EnumerationCompleteDelegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const FEnumerateEventsCallback& EnumerationCompleteDelegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventID, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventId, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "SearchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchEvents(const FString& EventGroup, const FSearchEventsCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const int32 UserIndex, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "GetReplayID()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplayID()"
  },
  {
    "label": "RefreshHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshHeader()"
  },
  {
    "label": "DownloadHeader()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DownloadHeader(const FDownloadHeaderCallback& Delegate)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FDownloadHeaderResult Result ; Result . Result = EStreamingOperationResult::Success ; Delegate .)",
    "insertText": "Execute(Result)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  },
  {
    "label": "IsCheckpointTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckpointTypeSupported(EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "IsNamedStreamLive()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IsNamedStreamLive(const FString& StreamName)"
  },
  {
    "label": "GotoCheckpointIndexInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndexInternal(int32 CheckpointIndex, const FGotoCallback& Delegate, int32 TimeInMS)"
  },
  {
    "label": "ReopenStreamFileForReading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReopenStreamFileForReading()"
  },
  {
    "label": "UpdateReplayInfoIfValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReplayInfoIfValid()"
  },
  {
    "label": "CreateReplayStreamer()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive> HeaderAr ; TUniquePtr<FArchive> FileAr ; TUniquePtr<FArchive> CheckpointAr ; EReplayStreamerState StreamerState ; FString CurrentStreamName ; int32 CurrentCheckpointIndex ; FNullReplayInfo ReplayInfo ; int64 LastKnownFileSize ; } ; class FNullNetworkReplayStreamingFactory : public INetworkReplayStreamingFactory { public : TSharedPtr<INetworkReplayStreamer>)",
    "insertText": "CreateReplayStreamer()"
  }
]