[
  {
    "label": "FCanvasTileRendererItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTileRendererItem"
  },
  {
    "label": "FTileVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileVertexFactory"
  },
  {
    "label": "FRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderData"
  },
  {
    "label": "FTileInst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileInst"
  },
  {
    "label": "FCanvasTriangleRendererItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasTriangleRendererItem"
  },
  {
    "label": "FTriangleVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleVertexFactory"
  },
  {
    "label": "FTriangleInst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleInst"
  },
  {
    "label": "FCanvasTileRendererItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CanvasTypes . h \" # include \" LocalVertexFactory . h \" # include \" StaticMeshResources . h \" class FCanvasTileRendererItem : public FCanvasBaseRenderItem { public :)",
    "insertText": "FCanvasTileRendererItem(ERHIFeatureLevel::Type InFeatureLevel, const FMaterialRenderProxy* InMaterialRenderProxy = NULL, const FCanvas::FTransformEntry& InTransform = FCanvas::FTransformEntry(FMatrix::Identity), bool bInFreezeTime = false) : Data(MakeShared<FRenderData>(InFeatureLevel, InMaterialRenderProxy, InTransform)) , bFreezeTime(bInFreezeTime)"
  },
  {
    "label": "GetCanvasTileRendererItem()",
    "kind": "Method",
    "detail": "Function (} class FCanvasTileRendererItem*)",
    "insertText": "GetCanvasTileRendererItem()"
  },
  {
    "label": "Render_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Render_GameThread(const FCanvas* Canvas, FCanvasRenderThreadScope& RenderScope)"
  },
  {
    "label": "IsMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMatch(const FMaterialRenderProxy* InMaterialRenderProxy, const FCanvas::FTransformEntry& InTransform)"
  },
  {
    "label": "AddTile()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "AddTile(float X, float Y, float SizeX, float SizeY, float U, float V, float SizeU, float SizeV, FHitProxyId HitProxyId, FColor InColor)"
  },
  {
    "label": "FTileVertexFactory()",
    "kind": "Method",
    "detail": "Function (} ; private : class FTileVertexFactory : public FLocalVertexFactory { public :)",
    "insertText": "FTileVertexFactory(const FStaticMeshVertexBuffers* VertexBuffers, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResource(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FRenderData()",
    "kind": "Method",
    "detail": "Function (private : const FStaticMeshVertexBuffers* VertexBuffers ; } ; class FRenderData { public :)",
    "insertText": "FRenderData(ERHIFeatureLevel::Type InFeatureLevel, const FMaterialRenderProxy* InMaterialRenderProxy, const FCanvas::FTransformEntry& InTransform)"
  },
  {
    "label": "FRenderData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRenderData()"
  },
  {
    "label": "RenderTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTiles(FCanvasRenderContext& RenderContext, FMeshPassProcessorRenderState& DrawRenderState, const FSceneView& View, bool bIsHitTesting, bool bUse128bitRT = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FTileInst NewTile = { X,Y,SizeX,SizeY,U,V,SizeU,SizeV,HitProxyId,InColor } ; return Tiles .)",
    "insertText": "Add(NewTile)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetNumIndices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumIndices()"
  },
  {
    "label": "AllocTileMeshBatch()",
    "kind": "Method",
    "detail": "Function (private : FMeshBatch*)",
    "insertText": "AllocTileMeshBatch(FCanvasRenderContext& InRenderContext, FHitProxyId InHitProxyId)"
  },
  {
    "label": "InitTileMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTileMesh(FRHICommandListBase& RHICmdList, const FSceneView& View)"
  },
  {
    "label": "ReleaseTileMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTileMesh()"
  },
  {
    "label": "FCanvasTriangleRendererItem()",
    "kind": "Method",
    "detail": "Function (FRawIndexBuffer16or32 IndexBuffer ; FStaticMeshVertexBuffers StaticMeshVertexBuffers ; FTileVertexFactory VertexFactory ; struct FTileInst { float X,Y ; float SizeX,SizeY ; float U,V ; float SizeU,SizeV ; FHitProxyId HitProxyId ; FColor InColor ; } ; TArray<FTileInst> Tiles ; } ; TSharedPtr<FRenderData> Data ; const bool bFreezeTime ; } ; class FCanvasTriangleRendererItem : public FCanvasBaseRenderItem { public :)",
    "insertText": "FCanvasTriangleRendererItem(ERHIFeatureLevel::Type InFeatureLevel, const FMaterialRenderProxy* InMaterialRenderProxy = NULL, const FCanvas::FTransformEntry& InTransform = FCanvas::FTransformEntry(FMatrix::Identity), bool bInFreezeTime = false) : Data(MakeShared<FRenderData>(InFeatureLevel, InMaterialRenderProxy, InTransform)) , bFreezeTime(bInFreezeTime)"
  },
  {
    "label": "GetCanvasTriangleRendererItem()",
    "kind": "Method",
    "detail": "Function (} class FCanvasTriangleRendererItem*)",
    "insertText": "GetCanvasTriangleRendererItem()"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "AddTriangle(const FCanvasUVTri& Tri, FHitProxyId HitProxyId)"
  },
  {
    "label": "AddReserveTriangles()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddReserveTriangles(int32 NumTriangles)"
  },
  {
    "label": "AddReserveTriangles()",
    "kind": "Method",
    "detail": "Function (Data ->)",
    "insertText": "AddReserveTriangles(NumTriangles)"
  },
  {
    "label": "ReserveTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveTriangles(int32 NumTriangles)"
  },
  {
    "label": "ReserveTriangles()",
    "kind": "Method",
    "detail": "Function (Data ->)",
    "insertText": "ReserveTriangles(NumTriangles)"
  },
  {
    "label": "FTriangleVertexFactory()",
    "kind": "Method",
    "detail": "Function (} private : class FTriangleVertexFactory : public FLocalVertexFactory { public :)",
    "insertText": "FTriangleVertexFactory(const FStaticMeshVertexBuffers* VertexBuffers, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "FRenderData()",
    "kind": "Method",
    "detail": "Function (private : const FStaticMeshVertexBuffers* VertexBuffers ; } ; class FRenderData { public :)",
    "insertText": "FRenderData(ERHIFeatureLevel::Type InFeatureLevel, const FMaterialRenderProxy* InMaterialRenderProxy, const FCanvas::FTransformEntry& InTransform) : MaterialRenderProxy(InMaterialRenderProxy) , Transform(InTransform) , VertexFactory(&StaticMeshVertexBuffers, InFeatureLevel)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FTriangleInst NewTri = { Tri,HitProxyId } ; return Triangles .)",
    "insertText": "Add(NewTri)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Reserve(Triangles.Num() + NumTriangles)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Triangles .)",
    "insertText": "Reserve(NumTriangles)"
  },
  {
    "label": "RenderTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RenderTriangles(FCanvasRenderContext& RenderContext, FMeshPassProcessorRenderState& DrawRenderState, const FSceneView& View, bool bIsHitTesting)"
  },
  {
    "label": "AllocTriangleMeshBatch()",
    "kind": "Method",
    "detail": "Function (private : FMeshBatch*)",
    "insertText": "AllocTriangleMeshBatch(FCanvasRenderContext& InRenderContext, FHitProxyId InHitProxyId)"
  },
  {
    "label": "InitTriangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTriangleMesh(FRHICommandListBase& RHICmdList, const FSceneView& View)"
  },
  {
    "label": "ReleaseTriangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTriangleMesh()"
  }
]