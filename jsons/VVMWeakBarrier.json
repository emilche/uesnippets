[
  {
    "label": "TWeakBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakBarrier"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "TWeakBarrier()",
    "kind": "Method",
    "detail": "Function (template<T> struct TWeakBarrier { bool bIsVValue = std::is_same_v<T,VValue> ; bool bIsAux = IsTAux<T> ; using TValue = std::conditional_t<bIsAux,T,std::conditional_t<bIsVValue,VValue,T*>> ; using TEncodedValue = std::conditional<bIsVValue,uint64,T*>::type ;)",
    "insertText": "TWeakBarrier()"
  },
  {
    "label": "TWeakBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWeakBarrier(const TWeakBarrier& Other)"
  },
  {
    "label": "RunReadBarrier()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "RunReadBarrier(FAccessContextPromise(), Other.Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TWeakBarrier&)",
    "insertText": "operator(const TWeakBarrier& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TWeakBarrier&)",
    "insertText": "operator(TWeakBarrier&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TWeakBarrier&)",
    "insertText": "operator(TValue InValue)"
  },
  {
    "label": "RunReadBarrier()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "RunReadBarrier(FAccessContextPromise(), InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Value =& NewValue ; } void)",
    "insertText": "Set(TValue NewValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Value = { } ; } else { Value = nullptr ; } } TValue)",
    "insertText": "Get(FAccessContext Context)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} TValue)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TResult = TValue> std::enable_if_t<! bIsVValue&& ! bIsAux,TResult>)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "ClearWeakDuringCensus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ClearWeakDuringCensus()"
  },
  {
    "label": "TEncodedValue()",
    "kind": "Method",
    "detail": "Function (std::atomic<TEncodedValue>* ValuePtr = reinterpret_cast<std::atomic<)",
    "insertText": "TEncodedValue(&Value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (TValue ValueCopy = Value ; if)",
    "insertText": "constexpr(bIsVValue)"
  },
  {
    "label": "GetEncodedBits()",
    "kind": "Method",
    "detail": "Function (uint64 EncodedValueCopy = ValueCopy .)",
    "insertText": "GetEncodedBits()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "if(ValueCopy && !FHeap::IsMarked(ValueCopy))"
  },
  {
    "label": "RunReadBarrier()",
    "kind": "Method",
    "detail": "Function (} } return false ; } private : TValue Value { } ; template<ContextType> TValue)",
    "insertText": "RunReadBarrier(ContextType Context, TValue Value)"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAccessContext(Context).RunAuxWeakReadBarrierUnmarkedWhenActive(Value.GetPtr())"
  },
  {
    "label": "FAccessContext()",
    "kind": "Method",
    "detail": "Function (Cell =)",
    "insertText": "FAccessContext(Context).RunWeakReadBarrierUnmarkedWhenActive(Cell)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } return Value ; } else {)",
    "insertText": "if(Value)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } else { return nullptr ; } } } } ; template<T> uint32)",
    "insertText": "GetTypeHash(const TWeakBarrier<T>& WeakBarrier)"
  }
]