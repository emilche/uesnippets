[
  {
    "label": "createLevelSetPlatonic()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVELSETPLATONIC_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVELSETPLATONIC_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / Types . h> # include<openvdb / math / Math . h> # include<openvdb / math / Transform . h> # include<openvdb / tools / MeshToVolume . h> # include<openvdb / util / NullInterrupter . h> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetPlatonic(int faceCount, float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr)"
  },
  {
    "label": "createLevelSetPlatonic()",
    "kind": "Method",
    "detail": "Function (template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetPlatonic(int faceCount, float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; return createLevelSetPlatonic<)",
    "insertText": "GridType(faceCount, scale, center, voxelSize, halfWidth, &tmp)"
  },
  {
    "label": "createLevelSetTetrahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetTetrahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr)"
  },
  {
    "label": "createLevelSetTetrahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetTetrahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; return createLevelSetPlatonic<)",
    "insertText": "GridType(4, scale, center, voxelSize, halfWidth, &tmp)"
  },
  {
    "label": "createLevelSetCube()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetCube(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr)"
  },
  {
    "label": "createLevelSetCube()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetCube(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; return createLevelSetPlatonic<)",
    "insertText": "GridType(6, scale, center, voxelSize, halfWidth, &tmp)"
  },
  {
    "label": "createLevelSetOctahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetOctahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr)"
  },
  {
    "label": "createLevelSetOctahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetOctahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; return createLevelSetPlatonic<)",
    "insertText": "GridType(8, scale, center, voxelSize, halfWidth, &tmp)"
  },
  {
    "label": "createLevelSetDodecahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetDodecahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr)"
  },
  {
    "label": "createLevelSetDodecahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetDodecahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; return createLevelSetPlatonic<)",
    "insertText": "GridType(12, scale, center, voxelSize, halfWidth, &tmp)"
  },
  {
    "label": "createLevelSetIcosahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetIcosahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH), InterruptT* interrupt = nullptr)"
  },
  {
    "label": "createLevelSetIcosahedron()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "createLevelSetIcosahedron(float scale = 1.0f, const Vec3f& center = Vec3f(0.0f), float voxelSize = 0.1f, float halfWidth = float(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; return createLevelSetPlatonic<)",
    "insertText": "GridType(20, scale, center, voxelSize, halfWidth, &tmp)"
  },
  {
    "label": "createLevelSetPlatonic()",
    "kind": "Method",
    "detail": "Function (} template<GridType,InterruptT> GridType::Ptr)",
    "insertText": "createLevelSetPlatonic(int faceCount,float scale, const Vec3f& center, float voxelSize, float halfWidth, InterruptT *interrupt)"
  },
  {
    "label": "createLinearTransform()",
    "kind": "Method",
    "detail": "Function (const math::Transform::Ptr xform = math::)",
    "insertText": "createLinearTransform(voxelSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<Vec3f> vtx ; std::vector<Vec3I> tri ; std::vector<Vec4I> qua ;)",
    "insertText": "if(faceCount == 4)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, 1.0f, 0.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.942810297f, -0.333329707f, 0.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.471405149f, -0.333329707f, 0.816497624f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.471405149f, -0.333329707f, -0.816497624f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 2, 3))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 3, 1))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 1, 2))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(1, 3, 2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(faceCount == 6)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.5f, -0.5f, -0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.5f, -0.5f, -0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.5f, -0.5f, 0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.5f, -0.5f, 0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.5f, 0.5f, -0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.5f, 0.5f, -0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.5f, 0.5f, 0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.5f, 0.5f, 0.5f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(1, 0, 4, 5))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(2, 1, 5, 6))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(3, 2, 6, 7))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(0, 3, 7, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(2, 3, 0, 1))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(5, 4, 7, 6))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(faceCount == 8)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, 0.0f, -1.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 1.0f, 0.0f, 0.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, 0.0f, 1.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-1.0f, 0.0f, 0.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f,-1.0f, 0.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 4, 3))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 1, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(1, 2, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(2, 3, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 3, 5))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 5, 1))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(1, 5, 2))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(2, 5, 3))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(faceCount == 12)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.354437858f, 0.487842113f, -0.789344311f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.573492587f, -0.186338872f, -0.78934437f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, -0.603005826f, -0.78934443f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.573492587f, -0.186338872f, -0.78934437f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.354437858f, 0.487842113f, -0.789344311f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.573492587f, 0.789345026f, -0.186338797f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.927930415f, -0.301502913f, -0.186338872f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, -0.975683928f, -0.186338902f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.927930415f, -0.301502913f, -0.186338872f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.573492587f, 0.789345026f, -0.186338797f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, 0.975683868f, 0.186338902f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.927930415f, 0.301502913f, 0.186338872f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.573492587f, -0.789345026f, 0.186338797f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.573492587f, -0.789345026f, 0.186338797f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.927930415f, 0.301502913f, 0.186338872f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.0f, 0.603005826f, 0.78934443f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.573492587f, 0.186338872f, 0.78934437f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f( 0.354437858f, -0.487842113f, 0.789344311f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.354437858f, -0.487842113f, 0.789344311f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.573492587f, 0.186338872f, 0.78934437f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(0, 1, 2, 3))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 3, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(0, 4, 5, 10))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 10, 9))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(0, 9, 14, 8))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(0, 8, 1))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(1, 8, 13, 7))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(1, 7, 2))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(2, 7, 12, 6))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(2, 6, 3))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(3, 6, 11, 5))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(3, 5, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(5, 11, 19, 15))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(5, 15, 10))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(6, 12, 18, 19))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(6, 19, 11))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(7, 13, 17, 18))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(7, 18, 12))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(8, 14, 16, 17))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(8, 17, 13))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(9, 10, 15, 16))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(9, 16, 14))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (qua .)",
    "insertText": "push_back(Vec4I(15, 19, 18, 17))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(15, 17, 16))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(faceCount == 20)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.0f, 0.0f, -1.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.0f, 0.894427359f, -0.447213143f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.850650847f, 0.276393682f, -0.447213203f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.525731206f, -0.723606944f, -0.447213262f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.525731206f, -0.723606944f, -0.447213262f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.850650847f, 0.276393682f, -0.447213203f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.525731206f, 0.723606944f, 0.447213262f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(-0.850650847f, -0.276393682f, 0.447213203f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.0f, -0.894427359f, 0.447213143f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.850650847f, -0.276393682f, 0.447213203f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.525731206f, 0.723606944f, 0.447213262f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vtx .)",
    "insertText": "push_back(Vec3f(0.0f, 0.0f, 1.0f))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 2, 0, 1))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 3, 0, 2))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 4, 0, 3))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 5, 0, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 1, 0, 5))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 6, 1, 5))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 7, 5, 4))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 8, 4, 3))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 9, 3, 2))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(10, 2, 1))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(10, 1, 6))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 6, 5, 7))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 7, 4, 8))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 8, 3, 9))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 9, 2, 10))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 6, 11, 10))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I(10, 11, 9))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 9, 11, 8))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 8, 11, 7))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (tri .)",
    "insertText": "push_back(Vec3I( 7, 11, 6))"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"Invalid face count\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t i = 0; i<vtx.size(); ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr grid ;)",
    "insertText": "if(interrupt == nullptr)"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter tmp ; grid = meshToLevelSet<)",
    "insertText": "GridType(tmp, *xform, vtx, tri, qua, halfWidth)"
  },
  {
    "label": "GridType()",
    "kind": "Method",
    "detail": "Function (} else { grid = meshToLevelSet<)",
    "insertText": "GridType(*interrupt, *xform, vtx, tri, qua, halfWidth)"
  }
]