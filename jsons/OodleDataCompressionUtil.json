[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "CompressData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" HAL / Platform . h \" # include \" OodleDataCompression . h \" namespace FOodleCompressedArray { bool)",
    "insertText": "CompressData(TArray<uint8>& OutCompressed, const void* InData, int32 InDataSize, FOodleDataCompression::ECompressor InCompressor, FOodleDataCompression::ECompressionLevel InLevel)"
  },
  {
    "label": "CompressData64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressData64(TArray64<uint8>& OutCompressed, const void* InData, int64 InDataSize, FOodleDataCompression::ECompressor InCompressor, FOodleDataCompression::ECompressionLevel InLevel)"
  },
  {
    "label": "PeekSizes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PeekSizes(TArray<uint8> const& InCompressed, int32& OutCompressedSize, int32& OutDecompressedSize)"
  },
  {
    "label": "BYTESWAP_ORDER32()",
    "kind": "Method",
    "detail": "Function (OutDecompressedSize = Sizes [ 0 ] ; OutCompressedSize = Sizes [ 1 ] ; # if ! PLATFORM_LITTLE_ENDIAN OutDecompressedSize =)",
    "insertText": "BYTESWAP_ORDER32(OutDecompressedSize)"
  },
  {
    "label": "BYTESWAP_ORDER32()",
    "kind": "Method",
    "detail": "Function (OutCompressedSize =)",
    "insertText": "BYTESWAP_ORDER32(OutCompressedSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(OutCompressedSize & 0x80000000)"
  },
  {
    "label": "PeekSizes64()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PeekSizes64(TArray64<uint8> const& InCompressed, int64& OutCompressedSize, int64& OutDecompressedSize)"
  },
  {
    "label": "BYTESWAP_ORDER32()",
    "kind": "Method",
    "detail": "Function (int32 DecompressedSize32 = Sizes [ 0 ] ; int32 CompressedSize32 = Sizes [ 1 ] ; # if ! PLATFORM_LITTLE_ENDIAN DecompressedSize32 =)",
    "insertText": "BYTESWAP_ORDER32(DecompressedSize32)"
  },
  {
    "label": "BYTESWAP_ORDER32()",
    "kind": "Method",
    "detail": "Function (CompressedSize32 =)",
    "insertText": "BYTESWAP_ORDER32(CompressedSize32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif OutCompressedSize = CompressedSize32 ; OutDecompressedSize = DecompressedSize32 ;)",
    "insertText": "if(CompressedSize32 & 0x80000000)"
  },
  {
    "label": "BYTESWAP_ORDER64()",
    "kind": "Method",
    "detail": "Function (int64 DecompressedSize64 = Sizes64 [ 0 ] ; int64 CompressedSize64 = Sizes64 [ 1 ] ; # if ! PLATFORM_LITTLE_ENDIAN DecompressedSize64 =)",
    "insertText": "BYTESWAP_ORDER64(DecompressedSize64)"
  },
  {
    "label": "BYTESWAP_ORDER64()",
    "kind": "Method",
    "detail": "Function (CompressedSize64 =)",
    "insertText": "BYTESWAP_ORDER64(CompressedSize64)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif DecompressedSize64& = ~ 0 x8000000000000000ULL ; OutDecompressedSize = DecompressedSize64 ; OutCompressedSize = CompressedSize64 ; return)",
    "insertText": "sizeof(int64)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "sizeof(int32)"
  },
  {
    "label": "DecompressToExistingBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DecompressToExistingBuffer(void* InDestinationBuffer, int64 InDestinationBufferSize, TArray<uint8> const& InCompressed)"
  },
  {
    "label": "DecompressToExistingBuffer64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressToExistingBuffer64(void* InDestinationBuffer, int64 InDestinationBufferSize, TArray64<uint8> const& InCompressed)"
  },
  {
    "label": "DecompressToAllocatedBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressToAllocatedBuffer(void*& OutDestinationBuffer, int32& OutDestinationBufferSize, TArray<uint8> const& InCompressed)"
  },
  {
    "label": "DecompressToAllocatedBuffer64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressToAllocatedBuffer64(void*& OutDestinationBuffer, int64& OutDestinationBufferSize, TArray64<uint8> const& InCompressed)"
  },
  {
    "label": "CompressTArray()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "CompressTArray(TArray<uint8>& OutCompressed, const TArray<T>& InBuffer, FOodleDataCompression::ECompressor InCompressor, FOodleDataCompression::ECompressionLevel InLevel)"
  },
  {
    "label": "CompressTArray64()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "CompressTArray64(TArray64<uint8>& OutCompressed, const TArray64<T>& InBuffer, FOodleDataCompression::ECompressor InCompressor, FOodleDataCompression::ECompressionLevel InLevel)"
  },
  {
    "label": "DecompressToTArray()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "DecompressToTArray(TArray<T>& OutDecompressed, TArray<uint8> const& InCompressed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 DecompressedSize,CompressedSize ;)",
    "insertText": "if(PeekSizes(InCompressed, CompressedSize, DecompressedSize) == 0)"
  },
  {
    "label": "DecompressToTArray64()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "DecompressToTArray64(TArray64<T>& OutDecompressed, TArray64<uint8> const& InCompressed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 DecompressedSize,CompressedSize ;)",
    "insertText": "if(PeekSizes64(InCompressed, CompressedSize, DecompressedSize) == 0)"
  }
]