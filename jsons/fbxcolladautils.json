[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "DAE_Flow",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DAE_Flow"
  },
  {
    "label": "XmlNodeDeletionPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "XmlNodeDeletionPolicy"
  },
  {
    "label": "ColladaLayerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ColladaLayerTraits"
  },
  {
    "label": "FbxRenamingStrategyCollada()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_FILEIO_COLLADA_UTILS_H_ # define _FBXSDK_FILEIO_COLLADA_UTILS_H_ # include<fbxsdk . h> # include<fbxsdk / fileio / collada / fbxcolladatokens . h> # include<fbxsdk / fileio / collada / fbxcolladaiostream . h> # include<fbxsdk / scene / fbxscene . h> # include<fbxsdk / utils / fbxrenamingstrategybase . h> # include<fbxsdk / utils / fbxnamehandler . h> # include<libxml / globals . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxRenamingStrategyCollada : public FbxRenamingStrategyBase { public :)",
    "insertText": "FbxRenamingStrategyCollada()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "DecodeScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeScene(FbxScene* pScene)"
  },
  {
    "label": "EncodeScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodeScene(FbxScene* pScene)"
  },
  {
    "label": "DecodeString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeString(FbxNameHandler& pName)"
  },
  {
    "label": "EncodeString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodeString(FbxNameHandler& pName, bool pIsPropertyName = false)"
  },
  {
    "label": "DeleteIt()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef INT_MAX # define INT_MAX 0 x7FFFFFFF # endif # ifndef CENTIMETERS_TO_INCHES # define CENTIMETERS_TO_INCHES 2 . 5 4 f # endif # ifndef RADIANS_TO_DEGREES # define RADIANS_TO_DEGREES 5 7 . 2 9 5 7 9 9 f # endif enum DAE_Flow { kCOLLADAFlowIn,kCOLLADAFlowOut,kCOLLADAFlowInOut } ; const int MATRIX_STRIDE = 1 6 ; const int VECTOR_STRIDE = 3 ; # define COLLADA_ID_PROPERTY_NAME \" COLLADA_ID \" class XmlNodeDeletionPolicy { public : void)",
    "insertText": "DeleteIt(xmlNode ** ptr)"
  },
  {
    "label": "xmlFreeNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmlFreeNode(*ptr)"
  },
  {
    "label": "ColladaLayerTraits()",
    "kind": "Method",
    "detail": "Function (* ptr = NULL ; } } } ; typedef FbxAutoPtr<xmlNode,XmlNodeDeletionPolicy> XmlNodePtr ; typedef FbxMap<FbxString,xmlNode*> SourceElementMapType ; typedef FbxMap<FbxString,xmlNode*> SkinMapType ; struct ColladaLayerTraits {)",
    "insertText": "ColladaLayerTraits() : mLayerType(FbxLayerElement::eUnknown), mLayerElementLength(0)"
  },
  {
    "label": "ColladaLayerTraits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ColladaLayerTraits(FbxLayerElement::EType pType, int pLength) : mLayerType(pType), mLayerElementLength(pLength)"
  },
  {
    "label": "GetLayerTraits()",
    "kind": "Method",
    "detail": "Function (} FbxLayerElement::EType mLayerType ; int mLayerElementLength ; const ColladaLayerTraits)",
    "insertText": "GetLayerTraits(const FbxString & pLabel)"
  },
  {
    "label": "DAE_AddNotificationError()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DAE_AddNotificationError(const FbxManager * pSdkManger, const FbxString & pErrorMessage)"
  },
  {
    "label": "DAE_AddNotificationWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddNotificationWarning(const FbxManager * pSdkManger, const FbxString & pWarningMessage)"
  },
  {
    "label": "DAE_ExportArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportArray(xmlNode* parentXmlNode, const char* id, FbxArray<FbxVector4>& arr)"
  },
  {
    "label": "DAE_ExportArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportArray(xmlNode* parentXmlNode, const char* id, FbxArray<FbxVector2>& arr)"
  },
  {
    "label": "DAE_ExportArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportArray(xmlNode* parentXmlNode, const char* id, FbxArray<FbxColor>& arr)"
  },
  {
    "label": "DAE_ExportArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportArray(xmlNode* parentXmlNode, const char* id, FbxArray<double>& arr)"
  },
  {
    "label": "DAE_ExportArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportArray(xmlNode* parentXmlNode, const char* id, FbxStringList& arr)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxStringList& accessorParams, FbxArray<double>& arr, bool isCommonProfile=true)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxArray<FbxVector4>& arr)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxArray<FbxVector2>& arr)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxArray<FbxColor>& arr)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxArray<FbxAMatrix>& arr)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxArray<FbxMatrix>& arr)"
  },
  {
    "label": "DAE_ExportSource14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportSource14(xmlNode* parentXmlNode, const char* id, FbxStringList& arr, const char* type, bool isCommonProfile=true)"
  },
  {
    "label": "DAE_ExportSourceArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportSourceArray(xmlNode* sourceNode, const char* id, FbxArray<FbxColor>& arr)"
  },
  {
    "label": "DAE_ExportSourceArray14()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_ExportSourceArray14(xmlNode* sourceNode, const char* id, FbxArray<FbxColor>& arr)"
  },
  {
    "label": "DAE_ExportAccessor()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportAccessor(xmlNode* parentXmlNode, const char* id, const char* arrayRef, int count, int stride, const char* name, const char* type)"
  },
  {
    "label": "DAE_ExportAccessor14()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_ExportAccessor14(xmlNode* parentXmlNode, const char* id, const char* arrayRef, int count, int stride, const char* name, const char* type)"
  },
  {
    "label": "DAE_AddXYZAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddXYZAccessor(xmlNode* parentXmlNode, const char* profile, const char* arrayName, const char* arrayRef, int count)"
  },
  {
    "label": "DAE_AddSTAccessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddSTAccessor(xmlNode* parentXmlNode, const char* profile, const char* arrayName, const char* arrayRef, int count)"
  },
  {
    "label": "DAE_AddFlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddFlow(xmlNode* node, DAE_Flow flow)"
  },
  {
    "label": "DAE_AddXYZAccessor14()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddXYZAccessor14(xmlNode* parentXmlNode, const char* profile, const char* arrayName, const char* arrayRef, int count)"
  },
  {
    "label": "DAE_AddSTAccessor14()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddSTAccessor14(xmlNode* parentXmlNode, const char* profile, const char* arrayName, const char* arrayRef, int count)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const FbxColor& color, DAE_Flow flow)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const FbxVector4& vector, DAE_Flow flow)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, double value, DAE_Flow flow)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, bool value, DAE_Flow flow)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const char* type, const char* value, DAE_Flow flow)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const FbxDouble3& color)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const FbxColor& color)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const FbxVector4& vector)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, double value)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, bool value)"
  },
  {
    "label": "DAE_AddParameter()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddParameter(xmlNode* parentXmlNode, const char* name, const char* type, const char* value)"
  },
  {
    "label": "DAE_AddTechnique()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_AddTechnique(xmlNode* parentXmlNode, const char* technique)"
  },
  {
    "label": "DAE_AddInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddInput(xmlNode* parentXmlNode, const char* semantic, const char* source, int idx = -1)"
  },
  {
    "label": "DAE_AddInput14()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_AddInput14(xmlNode* parentXmlNode, const char* semantic, const char* source, int offset = -1, int set=-1)"
  },
  {
    "label": "matrixToString()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "matrixToString(const FbxAMatrix& mx)"
  },
  {
    "label": "findChildrenByType()",
    "kind": "Method",
    "detail": "Function (typedef FbxArray<xmlNode*> CNodeList ; void)",
    "insertText": "findChildrenByType(xmlNode* pParentElement, const FbxSet<FbxString>& pTypes, CNodeList& pChildrenElements)"
  },
  {
    "label": "findChildrenByType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findChildrenByType(xmlNode* pParentElement, const char * pType, CNodeList& pChildrenElements)"
  },
  {
    "label": "getSourceAccessor()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "getSourceAccessor(xmlNode* sourceNode)"
  },
  {
    "label": "getTechniqueNode()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "getTechniqueNode(xmlNode* parent, const char * profile)"
  },
  {
    "label": "inchesToCentimeters()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "inchesToCentimeters(double val)"
  },
  {
    "label": "centimetersToInches()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "centimetersToInches(double val)"
  },
  {
    "label": "degreesToRadians()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "degreesToRadians(double val)"
  },
  {
    "label": "radiansToDegrees()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "radiansToDegrees(double val)"
  },
  {
    "label": "DAE_FindChildElementByAttribute()",
    "kind": "Method",
    "detail": "Function (} xmlNode*)",
    "insertText": "DAE_FindChildElementByAttribute(xmlNode* pParentElement, const char * pAttributeName, const char * pAttributeValue, const char * pDefaultAttributeValue = \"\")"
  },
  {
    "label": "DAE_FindChildElementByTag()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_FindChildElementByTag(xmlNode* pParentElement, const char * pTag, xmlNode* pFindFrom = NULL)"
  },
  {
    "label": "DAE_GetElementContent()",
    "kind": "Method",
    "detail": "Function (template<TYPE> void)",
    "insertText": "DAE_GetElementContent(xmlNode * pElement, TYPE & pData)"
  },
  {
    "label": "xmlNodeGetContent()",
    "kind": "Method",
    "detail": "Function (xmlChar* lContent =)",
    "insertText": "xmlNodeGetContent(pElement)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(&pData, (const char *)lContent)"
  },
  {
    "label": "xmlFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmlFree(lContent)"
  },
  {
    "label": "DAE_CheckCompatibility()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "DAE_CheckCompatibility(xmlNode * pNodeElement)"
  },
  {
    "label": "DAE_GetElementTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_GetElementTag(xmlNode * pElement, FbxString & pTag)"
  },
  {
    "label": "DAE_GetElementAttributeValue()",
    "kind": "Method",
    "detail": "Function (const FbxString)",
    "insertText": "DAE_GetElementAttributeValue(xmlNode * pElement, const char * pAttributeName)"
  },
  {
    "label": "DAE_GetElementAttributeValue()",
    "kind": "Method",
    "detail": "Function (template<TYPE> bool)",
    "insertText": "DAE_GetElementAttributeValue(xmlNode * pElement, const char * pAttributeName, TYPE & pData)"
  },
  {
    "label": "xmlGetProp()",
    "kind": "Method",
    "detail": "Function (xmlChar* lPropertyValue =)",
    "insertText": "xmlGetProp(pElement, (const xmlChar *)pAttributeName)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(&pData, (const char *)lPropertyValue)"
  },
  {
    "label": "xmlFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xmlFree(lPropertyValue)"
  },
  {
    "label": "pData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pData(const char *)"
  },
  {
    "label": "DAE_GetIDFromUrlAttribute()",
    "kind": "Method",
    "detail": "Function (const FbxString)",
    "insertText": "DAE_GetIDFromUrlAttribute(xmlNode * pElement, FbxString& pExternalRef)"
  },
  {
    "label": "DAE_GetIDFromSourceAttribute()",
    "kind": "Method",
    "detail": "Function (const FbxString)",
    "insertText": "DAE_GetIDFromSourceAttribute(xmlNode * pElement)"
  },
  {
    "label": "DAE_GetIDFromTargetAttribute()",
    "kind": "Method",
    "detail": "Function (const FbxString)",
    "insertText": "DAE_GetIDFromTargetAttribute(xmlNode * pElement)"
  },
  {
    "label": "DAE_SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DAE_SetName(FbxObject * pObject, const FbxString & pName, const FbxString & pID)"
  },
  {
    "label": "DAE_GetSourceWithSemantic()",
    "kind": "Method",
    "detail": "Function (xmlNode*)",
    "insertText": "DAE_GetSourceWithSemantic(xmlNode * pConsumerElement, const char * pSemantic, const SourceElementMapType & pSourceElements)"
  },
  {
    "label": "DAE_AddChildElement()",
    "kind": "Method",
    "detail": "Function (template<T> xmlNode*)",
    "insertText": "DAE_AddChildElement(xmlNode * pParentElement, const char * pTag, const T & pContent)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const FbxString lRepr =)",
    "insertText": "ToString(pContent)"
  },
  {
    "label": "DAE_AddChildElement()",
    "kind": "Method",
    "detail": "Function (} xmlNode*)",
    "insertText": "DAE_AddChildElement(xmlNode * pParentElement, const char * pTag)"
  },
  {
    "label": "DAE_NewElement()",
    "kind": "Method",
    "detail": "Function (} xmlNode*)",
    "insertText": "DAE_NewElement(const char * pTag)"
  },
  {
    "label": "DAE_AddAttribute()",
    "kind": "Method",
    "detail": "Function (} template<T> xmlAttr*)",
    "insertText": "DAE_AddAttribute(xmlNode * pElement, const FbxString & pAttributeName, const T & pAttributeValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const FbxString lRepr =)",
    "insertText": "ToString(pAttributeValue)"
  },
  {
    "label": "DAE_ImportUnit()",
    "kind": "Method",
    "detail": "Function (} const FbxSystemUnit)",
    "insertText": "DAE_ImportUnit(xmlNode * pUnitElement)"
  },
  {
    "label": "IncreaseLclTranslationAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseLclTranslationAnimation(FbxNode * pNode, FbxDouble3 & pOffset)"
  },
  {
    "label": "RecursiveSearchElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveSearchElement(xmlNode * pBaseElement, const char * pTag, FbxArray<xmlNode*> & pResult)"
  }
]