[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "IConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleVariable"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UReplicationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationSystem"
  },
  {
    "label": "UObjectReplicationBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectReplicationBridge"
  },
  {
    "label": "FGameInstancePIEParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameInstancePIEParameters"
  },
  {
    "label": "FScopedCVarOverrideInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCVarOverrideInt"
  },
  {
    "label": "FScopedTestSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTestSettings"
  },
  {
    "label": "FScopedNetTestPIERestoration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedNetTestPIERestoration"
  },
  {
    "label": "FTestWorldInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestWorldInstance"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContext"
  },
  {
    "label": "FTestWorlds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestWorlds"
  },
  {
    "label": "PredicateT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredicateT"
  },
  {
    "label": "FScopedCVarOverrideInt()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Engine / NetDriver . h \" class APlayerController ; class IConsoleVariable ; class UGameInstance ; class UWorld ; class UReplicationSystem ; class UObjectReplicationBridge ; struct FGameInstancePIEParameters ; # if WITH_EDITOR namespace UE::Net { class FScopedCVarOverrideInt { public :)",
    "insertText": "FScopedCVarOverrideInt(const TCHAR* VariableName, int32 Value)"
  },
  {
    "label": "FScopedCVarOverrideInt()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedCVarOverrideInt()"
  },
  {
    "label": "FScopedCVarOverrideInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedCVarOverrideInt(FScopedCVarOverrideInt&&)"
  },
  {
    "label": "FScopedCVarOverrideInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedCVarOverrideInt(const FScopedCVarOverrideInt&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedCVarOverrideInt&)",
    "insertText": "operator(FScopedCVarOverrideInt&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedCVarOverrideInt&)",
    "insertText": "operator(const FScopedCVarOverrideInt&)"
  },
  {
    "label": "FScopedTestSettings()",
    "kind": "Method",
    "detail": "Function (private : IConsoleVariable* Variable = nullptr ; int32 SavedValue = 0 ; } ; class FScopedTestSettings { public :)",
    "insertText": "FScopedTestSettings()"
  },
  {
    "label": "FScopedTestSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedTestSettings(FScopedTestSettings&&)"
  },
  {
    "label": "FScopedTestSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedTestSettings(const FScopedTestSettings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedTestSettings&)",
    "insertText": "operator(FScopedTestSettings&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedTestSettings&)",
    "insertText": "operator(const FScopedTestSettings&)"
  },
  {
    "label": "FScopedNetTestPIERestoration()",
    "kind": "Method",
    "detail": "Function (private : FScopedCVarOverrideInt AddressResolutionDisabled ; FScopedCVarOverrideInt BandwidthThrottlingDisabled ; FScopedCVarOverrideInt RepGraphBandwidthThrottlingDisabled ; FScopedCVarOverrideInt RandomNetUpdateDelayDisabled ; FScopedCVarOverrideInt GameplayDebuggerDisabled ; } ; class FScopedNetTestPIERestoration { public :)",
    "insertText": "FScopedNetTestPIERestoration()"
  },
  {
    "label": "FScopedNetTestPIERestoration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedNetTestPIERestoration(FScopedNetTestPIERestoration&&)"
  },
  {
    "label": "FScopedNetTestPIERestoration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedNetTestPIERestoration(const FScopedNetTestPIERestoration&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedNetTestPIERestoration&)",
    "insertText": "operator(FScopedNetTestPIERestoration&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedNetTestPIERestoration&)",
    "insertText": "operator(const FScopedNetTestPIERestoration&)"
  },
  {
    "label": "CreateServer()",
    "kind": "Method",
    "detail": "Function (private : UWorld* OldGWorld = nullptr ; int32 OldPIEID = 0 ; bool OldGIsPlayInEditorWorld = false ; } ; struct FTestWorldInstance { struct FContext ; public : FTestWorldInstance)",
    "insertText": "CreateServer(const TCHAR* InURL)"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (FTestWorldInstance)",
    "insertText": "CreateClient(int32 ServerPort)"
  },
  {
    "label": "FTestWorldInstance()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTestWorldInstance()"
  },
  {
    "label": "FTestWorldInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestWorldInstance(const FTestWorldInstance&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTestWorldInstance&)",
    "insertText": "operator(const FTestWorldInstance&)"
  },
  {
    "label": "FTestWorldInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTestWorldInstance(bool bDelayedInit) : GameInstance(nullptr)"
  },
  {
    "label": "FTestWorldInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTestWorldInstance(FTestWorldInstance&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTestWorldInstance&)",
    "insertText": "operator(FTestWorldInstance&& Other)"
  },
  {
    "label": "GetWorldContext()",
    "kind": "Method",
    "detail": "Function (FWorldContext*)",
    "insertText": "GetWorldContext()"
  },
  {
    "label": "GetTestContext()",
    "kind": "Method",
    "detail": "Function (FContext)",
    "insertText": "GetTestContext()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetNetDriver()",
    "kind": "Method",
    "detail": "Function (UNetDriver*)",
    "insertText": "GetNetDriver()"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPort()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds = 0.0166f)"
  },
  {
    "label": "LoadStreamingLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStreamingLevel(FName LevelName)"
  },
  {
    "label": "UnloadStreamingLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadStreamingLevel(FName LevelName)"
  },
  {
    "label": "FTestWorldInstance()",
    "kind": "Method",
    "detail": "Function (public : struct FContext { UWorld* World = nullptr ; UNetDriver* NetDriver = nullptr ; # if UE_WITH_IRIS UReplicationSystem* IrisRepSystem = nullptr ; UObjectReplicationBridge* IrisRepBridge = nullptr ; # endif } ; public : UGameInstance* GameInstance = nullptr ; private :)",
    "insertText": "FTestWorldInstance(const FGameInstancePIEParameters& InstanceParams)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FindUnusedPIEInstance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindUnusedPIEInstance()"
  },
  {
    "label": "FTestWorlds()",
    "kind": "Method",
    "detail": "Function (int32 LevelStreamRequestUUID = 0 ; } ; struct FTestWorlds {)",
    "insertText": "FTestWorlds(const TCHAR* ServerURL, float DeltaSeconds = 0.0166f)"
  },
  {
    "label": "FTestWorlds()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTestWorlds()"
  },
  {
    "label": "CreateAndConnectClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAndConnectClient()"
  },
  {
    "label": "TickAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAll(int32 NumTicks=1)"
  },
  {
    "label": "TickServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickServer()"
  },
  {
    "label": "TickClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickClients()"
  },
  {
    "label": "TickServerAndDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickServerAndDrop()"
  },
  {
    "label": "TickClientsAndDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickClientsAndDrop()"
  },
  {
    "label": "TickServerAndDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickServerAndDelay(uint32 NumFramesToDelay = 1)"
  },
  {
    "label": "TickClientsAndDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickClientsAndDelay(uint32 NumFramesToDelay = 1)"
  },
  {
    "label": "TickAllUntil()",
    "kind": "Method",
    "detail": "Function (template<class PredicateT> bool)",
    "insertText": "TickAllUntil(const PredicateT& Predicate, float DeltaSeconds = 0.0166f, int32 MaxTicks = 60)"
  },
  {
    "label": "WaitForClientConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForClientConnect(FTestWorldInstance& Client)"
  },
  {
    "label": "GetServerPlayerControllerOfClient()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "GetServerPlayerControllerOfClient(uint32 ClientIndex)"
  },
  {
    "label": "FindReplicatedObjectOnClient()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindReplicatedObjectOnClient(UObject* ServerObject, uint32 ClientIndex)"
  },
  {
    "label": "OnNetDriverCreated()",
    "kind": "Method",
    "detail": "Function (public : FTestWorldInstance Server ; TArray<FTestWorldInstance> Clients ; private : void)",
    "insertText": "OnNetDriverCreated(UWorld* InWorld, UNetDriver* InNetDriver)"
  },
  {
    "label": "TickAllUntil()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle NetDriverCreatedHandle ; private : float TickDeltaSeconds = 0 . 0 1 6 6 f ; FScopedTestSettings TestSettings ; FScopedNetTestPIERestoration PIERestoration ; } ; template<class PredicateT> bool)",
    "insertText": "TickAllUntil(const PredicateT& Predicate, float DeltaSeconds, int32 MaxTicks)"
  },
  {
    "label": "Predicate()",
    "kind": "Method",
    "detail": "Function (int32 TickCount = 0 ; bool bPredicateResult =)",
    "insertText": "Predicate()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (Server .)",
    "insertText": "Tick(DeltaSeconds)"
  }
]