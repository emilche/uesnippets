[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "ICursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICursor"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FMenuStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuStack"
  },
  {
    "label": "FNavigationConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationConfig"
  },
  {
    "label": "FSlateVirtualUserHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateVirtualUserHandle"
  },
  {
    "label": "FSlateUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUser"
  },
  {
    "label": "FDragDetectionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDragDetectionState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FActiveTooltipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveTooltipInfo"
  },
  {
    "label": "FSlateVirtualUserHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SlateScope . h \" # include \" Layout / WidgetPath . h \" # include \" GestureDetector . h \" class SWidget ; class SWindow ; class ICursor ; class FDragDropOperation ; class FMenuStack ; class FNavigationConfig ; class FSlateVirtualUserHandle { public : ~)",
    "insertText": "FSlateVirtualUserHandle()"
  },
  {
    "label": "FSlateUser()",
    "kind": "Method",
    "detail": "Function (private : int32 UserIndex ; int32 VirtualUserIndex ; } ; class FSlateUser : public TSharedFromThis<FSlateUser> { public : ~)",
    "insertText": "FSlateUser()"
  },
  {
    "label": "GetFocusedWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetFocusedWidget()"
  },
  {
    "label": "ShouldShowFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowFocus(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "SetFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFocus(const TSharedRef<SWidget>& WidgetToFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "ClearFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFocus(EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly)"
  },
  {
    "label": "HasFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<EFocusCause>)",
    "insertText": "HasFocus(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "HasFocusedDescendants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocusedDescendants(TSharedRef<const SWidget> Widget)"
  },
  {
    "label": "IsWidgetInFocusPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetInFocusPath(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "HasAnyCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyCapture()"
  },
  {
    "label": "HasCursorCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCursorCapture()"
  },
  {
    "label": "HasCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCapture(uint32 PointerIndex)"
  },
  {
    "label": "DoesWidgetHaveAnyCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetHaveAnyCapture(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "DoesWidgetHaveCursorCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetHaveCursorCapture(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "DoesWidgetHaveCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetHaveCapture(TSharedPtr<const SWidget> Widget, uint32 PointerIndex)"
  },
  {
    "label": "SetCursorCaptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCursorCaptor(TSharedRef<const SWidget> Widget, const FWidgetPath& EventPath)"
  },
  {
    "label": "SetPointerCaptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPointerCaptor(uint32 PointerIndex, TSharedRef<const SWidget> Widget, const FWidgetPath& EventPath)"
  },
  {
    "label": "ReleaseAllCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllCapture()"
  },
  {
    "label": "ReleaseCursorCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCursorCapture()"
  },
  {
    "label": "ReleaseCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseCapture(uint32 PointerIndex)"
  },
  {
    "label": "GetCaptorPaths()",
    "kind": "Method",
    "detail": "Function (TArray<FWidgetPath>)",
    "insertText": "GetCaptorPaths()"
  },
  {
    "label": "GetCursorCaptorPath()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "GetCursorCaptorPath(FWeakWidgetPath::EInterruptedPathHandling::Type InterruptedPathHandling = FWeakWidgetPath::EInterruptedPathHandling::Truncate, const FPointerEvent* PointerEvent = nullptr)"
  },
  {
    "label": "GetCaptorPath()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "GetCaptorPath(uint32 PointerIndex, FWeakWidgetPath::EInterruptedPathHandling::Type InterruptedPathHandling = FWeakWidgetPath::EInterruptedPathHandling::Truncate, const FPointerEvent* PointerEvent = nullptr)"
  },
  {
    "label": "GetWeakCursorCapturePath()",
    "kind": "Method",
    "detail": "Function (FWeakWidgetPath)",
    "insertText": "GetWeakCursorCapturePath()"
  },
  {
    "label": "GetWeakCapturePath()",
    "kind": "Method",
    "detail": "Function (FWeakWidgetPath)",
    "insertText": "GetWeakCapturePath(uint32 PointerIndex)"
  },
  {
    "label": "GetCaptorWidgets()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<SWidget>>)",
    "insertText": "GetCaptorWidgets()"
  },
  {
    "label": "GetCursorCaptor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetCursorCaptor()"
  },
  {
    "label": "GetPointerCaptor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetPointerCaptor(uint32 PointerIndex)"
  },
  {
    "label": "SetCursorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorVisibility(bool bDrawCursor)"
  },
  {
    "label": "SetCursorPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorPosition(int32 PosX, int32 PosY)"
  },
  {
    "label": "SetCursorPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorPosition(const UE::Slate::FDeprecateVector2DParameter& NewCursorPos)"
  },
  {
    "label": "SetPointerPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPointerPosition(uint32 PointerIndex, int32 PosX, int32 PosY)"
  },
  {
    "label": "SetPointerPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPointerPosition(uint32 PointerIndex, const UE::Slate::FDeprecateVector2DParameter& NewPointerPos)"
  },
  {
    "label": "GetCursorPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetCursorPosition()"
  },
  {
    "label": "GetPreviousCursorPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetPreviousCursorPosition()"
  },
  {
    "label": "GetPointerPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetPointerPosition(uint32 PointerIndex)"
  },
  {
    "label": "GetPreviousPointerPosition()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetPreviousPointerPosition(uint32 PointerIndex)"
  },
  {
    "label": "IsWidgetUnderCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetUnderCursor(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "IsWidgetUnderPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetUnderPointer(TSharedPtr<const SWidget> Widget, uint32 PointerIndex)"
  },
  {
    "label": "IsWidgetUnderAnyPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetUnderAnyPointer(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "IsWidgetDirectlyUnderCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetDirectlyUnderCursor(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "IsWidgetDirectlyUnderPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetDirectlyUnderPointer(TSharedPtr<const SWidget> Widget, uint32 PointerIndex)"
  },
  {
    "label": "IsWidgetDirectlyUnderAnyPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWidgetDirectlyUnderAnyPointer(TSharedPtr<const SWidget> Widget)"
  },
  {
    "label": "GetLastWidgetsUnderCursor()",
    "kind": "Method",
    "detail": "Function (FWeakWidgetPath)",
    "insertText": "GetLastWidgetsUnderCursor()"
  },
  {
    "label": "GetLastWidgetsUnderPointer()",
    "kind": "Method",
    "detail": "Function (FWeakWidgetPath)",
    "insertText": "GetLastWidgetsUnderPointer(uint32 PointerIndex)"
  },
  {
    "label": "GetWidgetsUnderPointerLastEventByIndex()",
    "kind": "Method",
    "detail": "Function (const TMap<uint32,FWeakWidgetPath>&)",
    "insertText": "GetWidgetsUnderPointerLastEventByIndex()"
  },
  {
    "label": "IsDragDroppingAffected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDragDroppingAffected(const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "CancelDragDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelDragDrop()"
  },
  {
    "label": "ShowTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTooltip(const TSharedRef<IToolTip>& InTooltip, const UE::Slate::FDeprecateVector2DParameter& InSpawnLocation)"
  },
  {
    "label": "CloseTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseTooltip()"
  },
  {
    "label": "GetTooltipPosition()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetTooltipPosition()"
  },
  {
    "label": "GetGestureDetector()",
    "kind": "Method",
    "detail": "Function (const FGestureDetector&)",
    "insertText": "GetGestureDetector()"
  },
  {
    "label": "GetUserNavigationConfig()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FNavigationConfig>)",
    "insertText": "GetUserNavigationConfig()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FSlateUser>)",
    "insertText": "Create(FPlatformUserId InPlatformUserId, TSharedPtr<ICursor> InCursor)"
  },
  {
    "label": "GetWeakFocusPath()",
    "kind": "Method",
    "detail": "Function (} const FWeakWidgetPath&)",
    "insertText": "GetWeakFocusPath()"
  },
  {
    "label": "ToWidgetPathRef()",
    "kind": "Method",
    "detail": "Function (StrongFocusPath = WeakFocusPath .)",
    "insertText": "ToWidgetPathRef()"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (} return StrongFocusPath .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "DrawWindowlessDragDropContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawWindowlessDragDropContent(const TSharedRef<SWindow>& WindowToDraw, FSlateWindowElementList& WindowElementList, int32& MaxLayerId)"
  },
  {
    "label": "DrawCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCursor(const TSharedRef<SWindow>& WindowToDraw, FSlateWindowElementList& WindowElementList, int32& MaxLayerId)"
  },
  {
    "label": "QueueSyntheticCursorMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueSyntheticCursorMove()"
  },
  {
    "label": "SynthesizeCursorMoveIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SynthesizeCursorMoveIfNeeded()"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ICursor>)",
    "insertText": "GetCursor()"
  },
  {
    "label": "UnlockCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockCursor()"
  },
  {
    "label": "UpdateCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCursor()"
  },
  {
    "label": "ProcessCursorReply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCursorReply(const FCursorReply& CursorReply)"
  },
  {
    "label": "RequestCursorQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCursorQuery()"
  },
  {
    "label": "QueryCursor()",
    "kind": "Method",
    "detail": "Function (bQueryCursorRequested = true ; } void)",
    "insertText": "QueryCursor()"
  },
  {
    "label": "OverrideCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideCursor(const TSharedPtr<ICursor> InCursor)"
  },
  {
    "label": "SetFocusPath()",
    "kind": "Method",
    "detail": "Function (Cursor = InCursor ; } void)",
    "insertText": "SetFocusPath(const FWidgetPath& NewFocusPath, EFocusCause InFocusCause, bool bInShowFocus)"
  },
  {
    "label": "FinishFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishFrame()"
  },
  {
    "label": "NotifyWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyWindowDestroyed(TSharedRef<SWindow> DestroyedWindow)"
  },
  {
    "label": "IsTouchPointerActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTouchPointerActive(int32 TouchPointerIndex)"
  },
  {
    "label": "NotifyTouchStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyTouchStarted(const FPointerEvent& TouchEvent)"
  },
  {
    "label": "NotifyPointerMoveBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPointerMoveBegin(const FPointerEvent& PointerEvent)"
  },
  {
    "label": "NotifyPointerMoveComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPointerMoveComplete(const FPointerEvent& PointerEvent, const FWidgetPath& WidgetsUnderPointer)"
  },
  {
    "label": "NotifyPointerReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPointerReleased(const FPointerEvent& PointerEvent, const FWidgetPath& WidgetsUnderCursor, TSharedPtr<FDragDropOperation> DroppedContent, bool bWasHandled)"
  },
  {
    "label": "UpdatePointerPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePointerPosition(const FPointerEvent& PointerEvent)"
  },
  {
    "label": "StartDragDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDragDetection(const FWidgetPath& PathToWidget, int32 PointerIndex, FKey DragButton, UE::Slate::FDeprecateVector2DParameter StartLocation)"
  },
  {
    "label": "DetectDrag()",
    "kind": "Method",
    "detail": "Function (FWidgetPath)",
    "insertText": "DetectDrag(const FPointerEvent& PointerEvent, float DragTriggerDistance)"
  },
  {
    "label": "IsDetectingDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDetectingDrag(uint32 PointerIndex)"
  },
  {
    "label": "ResetDragDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDragDetection()"
  },
  {
    "label": "SetDragDropContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDragDropContent(TSharedRef<FDragDropOperation> InDragDropContent)"
  },
  {
    "label": "ResetDragDropContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDragDropContent()"
  },
  {
    "label": "GetFocusVersion()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFocusVersion()"
  },
  {
    "label": "UpdateTooltip()",
    "kind": "Method",
    "detail": "Function (FocusVersion + + ; } void)",
    "insertText": "UpdateTooltip(const FMenuStack& MenuStack, bool bCanSpawnNewTooltip)"
  },
  {
    "label": "ResetTooltipWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTooltipWindow()"
  },
  {
    "label": "IsWindowHousingInteractiveTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowHousingInteractiveTooltip(const TSharedRef<const SWindow>& WindowToTest)"
  },
  {
    "label": "FSlateUser()",
    "kind": "Method",
    "detail": "Function (PointerCaptorPathsByIndex = InPointerCaptorPathsByIndex ; } # endif private :)",
    "insertText": "FSlateUser(int32 InUserIndex, TSharedPtr<ICursor> InCursor)"
  },
  {
    "label": "FSlateUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateUser(FPlatformUserId InPlatformUser, TSharedPtr<ICursor> InCursor)"
  },
  {
    "label": "UpdatePointerPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePointerPosition(uint32 PointerIndex, const FVector2f& Position)"
  },
  {
    "label": "LockCursorInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockCursorInternal(const FWidgetPath& WidgetPath)"
  },
  {
    "label": "GetOrCreateTooltipWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "GetOrCreateTooltipWindow()"
  },
  {
    "label": "FDragDetectionState()",
    "kind": "Method",
    "detail": "Function (int32 UserIndex = INDEX_NONE ; FPlatformUserId PlatformUser = PLATFORMUSERID_NONE ; TSharedPtr<ICursor> Cursor ; double LastCursorSignificantMoveTime = 0 . 0 ; TSharedPtr<FNavigationConfig> UserNavigationConfig ; bool bCanDrawCursor = true ; bool bQueryCursorRequested = false ; int32 NumPendingSyntheticCursorMoves = 0 ; TWeakPtr<SWindow> CursorWindowPtr ; TWeakPtr<SWidget> CursorWidgetPtr ; FWeakWidgetPath WeakFocusPath ; TSharedPtr<FWidgetPath> StrongFocusPath ; EFocusCause FocusCause = EFocusCause::Cleared ; bool bShowFocus = false ; int32 FocusVersion = 0 ; TMap<uint32,FVector2f> PointerPositionsByIndex ; TMap<uint32,FVector2f> PreviousPointerPositionsByIndex ; TMap<uint32,FWeakWidgetPath> PointerCaptorPathsByIndex ; struct FDragDetectionState {)",
    "insertText": "FDragDetectionState(const FWidgetPath& PathToWidget, int32 PointerIndex, FKey DragButton, const FVector2f& StartLocation) : DetectDragForWidget(PathToWidget) , DragStartLocation(StartLocation) , TriggerButton(DragButton) , PointerIndex(PointerIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} FWeakWidgetPath DetectDragForWidget ; FVector2f DragStartLocation = FVector2f::ZeroVector ; FKey TriggerButton = EKeys::Invalid ; int32 PointerIndex = INDEX_NONE ; } ; TMap<uint32,FDragDetectionState> DragStatesByPointerIndex ; TSharedPtr<FDragDropOperation> DragDropContent ; TWeakPtr<SWindow> DragDropWindowPtr ; TMap<uint32,FWeakWidgetPath> WidgetsUnderPointerLastEventByIndex ; FWeakWidgetPath LockingWidgetPath ; FSlateRect LastComputedLockBounds ; TWeakPtr<SWindow> TooltipWindowPtr ; enum class ETooltipOffsetDirection : uint8 { Undetermined,Down,Right } ; struct FActiveTooltipInfo { void)",
    "insertText": "Reset()"
  }
]