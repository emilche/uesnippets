[
  {
    "label": "IMovieSceneConstrainedSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieSceneConstrainedSection"
  },
  {
    "label": "ITransformConstraintChannelInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITransformConstraintChannelInterface"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UTickableConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableConstraint"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UTickableTransformConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableTransformConstraint"
  },
  {
    "label": "UTickableParentConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableParentConstraint"
  },
  {
    "label": "UTransformableHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTransformableHandle"
  },
  {
    "label": "FMovieSceneConstraintChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneConstraintChannel"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FConstraintAndActiveChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintAndActiveChannel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "FCompensationEvaluator()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectPtr . h \" # include \" MovieSceneSection . h \" class IMovieSceneConstrainedSection ; struct ITransformConstraintChannelInterface ; class UWorld ; class UTickableConstraint ; class ISequencer ; class UMovieSceneSection ; class UTickableTransformConstraint ; class UTickableParentConstraint ; class UTransformableHandle ; struct FMovieSceneConstraintChannel ; struct FFrameNumber ; struct FConstraintAndActiveChannel ; enum class EMovieSceneKeyInterpolation : uint8 ; struct FCompensationEvaluator { public : TArray<FTransform> ChildLocals ; TArray<FTransform> ChildGlobals ; TArray<FTransform> SpaceGlobals ;)",
    "insertText": "FCompensationEvaluator(UTickableTransformConstraint* InConstraint)"
  },
  {
    "label": "ComputeLocalTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLocalTransforms(UWorld* InWorld, const TSharedPtr<ISequencer>& InSequencer, const TArray<FFrameNumber>& InFrames, const bool bToActive)"
  },
  {
    "label": "ComputeLocalTransformsBeforeDeletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLocalTransformsBeforeDeletion(UWorld* InWorld, const TSharedPtr<ISequencer>& InSequencer, const TArray<FFrameNumber>& InFrames)"
  },
  {
    "label": "ComputeCompensation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCompensation(UWorld* InWorld, const TSharedPtr<ISequencer>& InSequencer, const FFrameNumber& InTime)"
  },
  {
    "label": "ComputeLocalTransformsForBaking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLocalTransformsForBaking(UWorld* InWorld, const TSharedPtr<ISequencer>& InSequencer, const TArray<FFrameNumber>& InFrames)"
  },
  {
    "label": "CacheTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheTransforms(UWorld* InWorld, const TSharedPtr<ISequencer>& InSequencer, const TArray<FFrameNumber>& InFrames)"
  },
  {
    "label": "ComputeCurrentTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCurrentTransforms(UWorld* InWorld)"
  },
  {
    "label": "GetHandleTransformConstraints()",
    "kind": "Method",
    "detail": "Function (private : const TArray<TWeakObjectPtr<UTickableConstraint>>)",
    "insertText": "GetHandleTransformConstraints(UWorld* InWorld)"
  },
  {
    "label": "AddConstraintToSequencer()",
    "kind": "Method",
    "detail": "Function (UTickableTransformConstraint* Constraint = nullptr ; UTransformableHandle* Handle = nullptr ; } ; struct FConstraintSections { UMovieSceneSection* ConstraintSection = nullptr ; UMovieSceneSection* ChildTransformSection = nullptr ; UMovieSceneSection* ParentTransformSection = nullptr ; FConstraintAndActiveChannel* ActiveChannel = nullptr ; ITransformConstraintChannelInterface* Interface = nullptr ; } ; struct FMovieSceneConstraintChannelHelper { public : bool)",
    "insertText": "AddConstraintToSequencer(const TSharedPtr<ISequencer>& InSequencer, UTickableTransformConstraint* InConstraint)"
  },
  {
    "label": "SmartConstraintKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SmartConstraintKey(const TSharedPtr<ISequencer>& InSequencer, UTickableTransformConstraint* InConstraint, const TOptional<bool>& InOptActive, const TOptional<FFrameNumber>& InOptFrameTime)"
  },
  {
    "label": "Compensate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compensate(const TSharedPtr<ISequencer>& InSequencer, const UTickableTransformConstraint* InConstraint, const TOptional<FFrameNumber>& InOptTime, const bool bCompPreviousTick)"
  },
  {
    "label": "CompensateIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompensateIfNeeded(const TSharedPtr<ISequencer>& InSequencer, IMovieSceneConstrainedSection* Section, const TOptional<FFrameNumber>& OptionalTime, const bool bCompPreviousTick, const int32 InChildHash = INDEX_NONE)"
  },
  {
    "label": "HandleConstraintRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintRemoved(UTickableConstraint* InConstraint, const FMovieSceneConstraintChannel* InChannel, const TSharedPtr<ISequencer>& InSequencer, UMovieSceneSection* InSection)"
  },
  {
    "label": "HandleConstraintKeyDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintKeyDeleted(UTickableTransformConstraint* InConstraint, const FMovieSceneConstraintChannel* InConstraintChannel, const TSharedPtr<ISequencer>& InSequencer, UMovieSceneSection* InSection, const FFrameNumber& InTime)"
  },
  {
    "label": "HandleConstraintKeyMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintKeyMoved(const UTickableTransformConstraint* InConstraint, const FMovieSceneConstraintChannel* InConstraintChannel, UMovieSceneSection* InSection, const FFrameNumber& InCurrentFrame, const FFrameNumber& InNextFrame)"
  },
  {
    "label": "GetConstraintSectionAndChannel()",
    "kind": "Method",
    "detail": "Function (FConstraintSections)",
    "insertText": "GetConstraintSectionAndChannel(const UTickableTransformConstraint* InConstraint, const TSharedPtr<ISequencer>& InSequencer)"
  },
  {
    "label": "GetTransformFramesForConstraintHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTransformFramesForConstraintHandles(const UTickableTransformConstraint* InConstraint, const TSharedPtr<ISequencer>& InSequencer, const FFrameNumber& StartFrame, const FFrameNumber& EndFrame, TArray<FFrameNumber>& OutFramesToBake)"
  },
  {
    "label": "GetFramesToCompensate()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "GetFramesToCompensate(const FMovieSceneConstraintChannel& InActiveChannel, const bool InActiveValueToBeSet, const FFrameNumber& InTime, const TArrayView<ChannelType*>& InChannels, TArray<FFrameNumber>& OutFramesAfter)"
  },
  {
    "label": "GetFramesAfter()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "GetFramesAfter(const FMovieSceneConstraintChannel& InActiveChannel, const FFrameNumber& InTime, const TArrayView<ChannelType*>& InChannels, TArray<FFrameNumber>& OutFrames)"
  },
  {
    "label": "GetFramesWithinActiveState()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "GetFramesWithinActiveState(const FMovieSceneConstraintChannel& InActiveChannel, const TArrayView<ChannelType*>& InChannels, TArray<FFrameNumber>& OutFrames)"
  },
  {
    "label": "MoveTransformKeys()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "MoveTransformKeys(const TArrayView<ChannelType*>& InChannels, const FFrameNumber& InCurrentTime, const FFrameNumber& InNextTime)"
  },
  {
    "label": "DeleteTransformKeys()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "DeleteTransformKeys(const TArrayView<ChannelType*>& InChannels, const FFrameNumber& InTime)"
  },
  {
    "label": "ChangeKeyInterpolation()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "ChangeKeyInterpolation(const TArrayView<ChannelType*>& InChannels, const FFrameNumber& InTime, EMovieSceneKeyInterpolation KeyInterpolation)"
  },
  {
    "label": "HandleConstraintPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConstraintPropertyChanged(UTickableTransformConstraint* InConstraint, const FMovieSceneConstraintChannel& InActiveChannel, const FPropertyChangedEvent& InPropertyChangedEvent, const TSharedPtr<ISequencer>& InSequencer, UMovieSceneSection* InSection)"
  },
  {
    "label": "GetTransformTimes()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TArray<FFrameNumber>)",
    "insertText": "GetTransformTimes(const TArrayView<ChannelType*>& InChannels, const FFrameNumber& StartTime, const FFrameNumber& EndTime)"
  },
  {
    "label": "DeleteTransformTimes()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "DeleteTransformTimes(const TArrayView<ChannelType*>& InChannels, const FFrameNumber& StartTime, const FFrameNumber& EndTime, EMovieSceneTransformChannel Channels = EMovieSceneTransformChannel::AllTransform)"
  },
  {
    "label": "SetTransformTimes()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "SetTransformTimes(const TArrayView<ChannelType*>& InChannels, const TArray<FFrameNumber>& Frames, const TArray<FTransform>& Transforms)"
  },
  {
    "label": "GetHandleInterface()",
    "kind": "Method",
    "detail": "Function (bool bDoNotCompensate ; private : ITransformConstraintChannelInterface*)",
    "insertText": "GetHandleInterface(const UTransformableHandle* InHandle)"
  },
  {
    "label": "CreateBindingIDForHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBindingIDForHandle(const TSharedPtr<ISequencer>& InSequencer, UTransformableHandle* InHandle)"
  },
  {
    "label": "CompensateScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompensateScale(UTickableParentConstraint* InParentConstraint, const FMovieSceneConstraintChannel& InActiveChannel, const TSharedPtr<ISequencer>& InSequencer, UMovieSceneSection* InSection)"
  },
  {
    "label": "HandleOffsetChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOffsetChanged(UTickableTransformConstraint* InConstraint, const FMovieSceneConstraintChannel& InActiveChannel, const TSharedPtr<ISequencer>& InSequencer)"
  }
]