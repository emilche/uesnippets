[
  {
    "label": "FReplicationProtocol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationProtocol"
  },
  {
    "label": "FReplicationInstanceProtocol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationInstanceProtocol"
  },
  {
    "label": "FNetPushObjectHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetPushObjectHandle"
  },
  {
    "label": "FNetHandleLegacyPushModelHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetHandleLegacyPushModelHelper"
  },
  {
    "label": "IsIrisPushModelEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_PUSH_MODEL # include \" CoreTypes . h \" # include \" Net / Core / NetHandle / NetHandle . h \" # include \" Net / Core / PushModel / PushModel . h \" namespace UE::Net { struct FReplicationProtocol ; struct FReplicationInstanceProtocol ; } namespace UE::Net::Private { bool bIsIrisPushModelForceEnabled ; int IrisPushModelMode ; bool)",
    "insertText": "IsIrisPushModelEnabled(bool bIsPushModelEnabled = IS_PUSH_MODEL_ENABLED())"
  },
  {
    "label": "FNetPushObjectHandle()",
    "kind": "Method",
    "detail": "Function (} class FNetPushObjectHandle { public :)",
    "insertText": "FNetPushObjectHandle(FNetHandle InNetHandle)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FNetPushObjectHandle()",
    "kind": "Method",
    "detail": "Function (private : struct FNetHandleLegacyPushModelHelper ;)",
    "insertText": "FNetPushObjectHandle(UEPushModelPrivate::FNetIrisPushObjectId PushId)"
  },
  {
    "label": "GetNetHandle()",
    "kind": "Method",
    "detail": "Function (FNetHandle)",
    "insertText": "GetNetHandle()"
  },
  {
    "label": "GetPushObjectId()",
    "kind": "Method",
    "detail": "Function (UEPushModelPrivate::FNetIrisPushObjectId)",
    "insertText": "GetPushObjectId()"
  },
  {
    "label": "InitPushModel()",
    "kind": "Method",
    "detail": "Function (FNetHandle NetHandle ; } ; struct FNetHandleLegacyPushModelHelper { void)",
    "insertText": "InitPushModel()"
  },
  {
    "label": "ShutdownPushModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownPushModel()"
  },
  {
    "label": "SetNetPushID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetPushID(UObject* Object, FNetPushObjectHandle PushHandle)"
  },
  {
    "label": "ClearNetPushID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNetPushID(UObject* Object)"
  },
  {
    "label": "MarkPropertyOwnerDirty()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MarkPropertyOwnerDirty(const UObject* Object, UEPushModelPrivate::FNetIrisPushObjectId PushId, const int32 RepIndex)"
  },
  {
    "label": "MarkPropertiesOwnerDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPropertiesOwnerDirty(const UObject* Object, UEPushModelPrivate::FNetIrisPushObjectId PushId, const int32 StartRepIndex, const int32 EndRepIndex)"
  },
  {
    "label": "OptionallyMarkPropertyOwnerDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptionallyMarkPropertyOwnerDirty(const UObject* Object, UEPushModelPrivate::FNetIrisPushObjectId PushId, const int32 RepIndex)"
  },
  {
    "label": "OptionallyMarkPropertiesOwnerDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptionallyMarkPropertiesOwnerDirty(const UObject* Object, UEPushModelPrivate::FNetIrisPushObjectId PushId, const int32 StartRepIndex, const int32 EndRepIndex)"
  },
  {
    "label": "FNetPushObjectHandle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FNetPushObjectHandle(FNetHandle InNetHandle) : NetHandle(InNetHandle)"
  },
  {
    "label": "FNetPushObjectHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetPushObjectHandle(UEPushModelPrivate::FNetIrisPushObjectId PushId) : NetHandle(static_cast<uint64>(PushId))"
  },
  {
    "label": "UE_NET_IRIS_SET_PUSH_ID()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "UE_NET_IRIS_SET_PUSH_ID(...) UE::Net::Private::FNetHandleLegacyPushModelHelper::SetNetPushID(__VA_ARGS__) #define UE_NET_IRIS_CLEAR_PUSH_ID(...) UE::Net::Private::FNetHandleLegacyPushModelHelper::ClearNetPushID(__VA_ARGS__) #define UE_NET_IRIS_INIT_LEGACY_PUSH_MODEL() UE::Net::Private::FNetHandleLegacyPushModelHelper::InitPushModel() #define UE_NET_IRIS_SHUTDOWN_LEGACY_PUSH_MODEL() UE::Net::Private::FNetHandleLegacyPushModelHelper::ShutdownPushModel()"
  },
  {
    "label": "IsIrisPushModelEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIrisPushModelEnabled(bool = false)"
  }
]