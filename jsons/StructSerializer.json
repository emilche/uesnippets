[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "IStructSerializerBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStructSerializerBackend"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStructSerializerPolicies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructSerializerPolicies"
  },
  {
    "label": "FStructSerializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructSerializer"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" class Error ; class FProperty ; class IStructSerializerBackend ; class UStruct ; enum class EStructSerializerNullValuePolicies { Ignore,Serialize } ; enum class EStructSerializerReferenceLoopPolicies { Error,Ignore,Serialize } ; enum class EStructSerializerMapPolicies { KeyValuePair,Array,} ; struct FStructSerializerPolicies { EStructSerializerNullValuePolicies NullValues ; EStructSerializerReferenceLoopPolicies ReferenceLoops ; EStructSerializerMapPolicies MapSerialization ; TFunction<)",
    "insertText": "bool(const FProperty* , const FProperty*)"
  },
  {
    "label": "FStructSerializerPolicies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructSerializerPolicies() : NullValues(EStructSerializerNullValuePolicies::Serialize) , ReferenceLoops(EStructSerializerReferenceLoopPolicies::Ignore) , MapSerialization(EStructSerializerMapPolicies::KeyValuePair) , PropertyFilter()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } ; class FStructSerializer { public : void)",
    "insertText": "Serialize(const void* Struct, UStruct& TypeInfo, IStructSerializerBackend& Backend, const FStructSerializerPolicies& Policies)"
  },
  {
    "label": "SerializeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeElement(const void* Address, FProperty* Property, int32 ElementIndex, IStructSerializerBackend& Backend, const FStructSerializerPolicies& Policies)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const void* Struct, UStruct& TypeInfo, IStructSerializerBackend& Backend)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Struct, TypeInfo, Backend, FStructSerializerPolicies())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : template<StructType> void)",
    "insertText": "Serialize(const StructType& Struct, IStructSerializerBackend& Backend)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(&Struct, *Struct.StaticStruct(), Backend, FStructSerializerPolicies())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} template<StructType> void)",
    "insertText": "Serialize(const StructType& Struct, IStructSerializerBackend& Backend, const FStructSerializerPolicies& Policies)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(&Struct, *Struct.StaticStruct(), Backend, Policies)"
  }
]