[
  {
    "label": "ILevelInstanceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelInstanceInterface"
  },
  {
    "label": "APackedLevelActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APackedLevelActor"
  },
  {
    "label": "ALevelInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelInstance"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "FMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLog"
  },
  {
    "label": "FWorldPartitionActorFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionActorFilter"
  },
  {
    "label": "FPackedLevelActorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedLevelActorBuilder"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FPackedLevelActorBuilderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedLevelActorBuilderContext"
  },
  {
    "label": "FPackedLevelActorBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" PackedLevelActor / PackedLevelActorTypes . h \" # include \" PackedLevelActor / IPackedLevelActorBuilder . h \" # include \" UObject / SoftObjectPtr . h \" # include \" Containers / Set . h \" # include \" PreviewScene . h \" class ILevelInstanceInterface ; class APackedLevelActor ; class ALevelInstance ; class AActor ; class UActorComponent ; class UBlueprint ; class FMessageLog ; struct FWorldPartitionActorFilter ; class FPackedLevelActorBuilder { public :)",
    "insertText": "FPackedLevelActorBuilder()"
  },
  {
    "label": "CreateDefaultBuilder()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPackedLevelActorBuilder>)",
    "insertText": "CreateDefaultBuilder()"
  },
  {
    "label": "PackActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PackActor(APackedLevelActor* InPackedLevelActor, ILevelInstanceInterface* InLevelInstanceToPack)"
  },
  {
    "label": "PackActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PackActor(APackedLevelActor* InPackedLevelActor)"
  },
  {
    "label": "PackActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PackActor(APackedLevelActor* InPackedLevelActor, TSoftObjectPtr<UWorld> InWorldAsset)"
  },
  {
    "label": "CreateOrUpdateBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrUpdateBlueprint(ILevelInstanceInterface* InLevelInstance, TSoftObjectPtr<UBlueprint> InBlueprintAsset, bool bCheckoutAndSave = true, bool bPromptForSave = true)"
  },
  {
    "label": "CreateOrUpdateBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrUpdateBlueprint(TSoftObjectPtr<UWorld> InWorldAsset, TSoftObjectPtr<UBlueprint> InBlueprintAsset, bool bCheckoutAndSave = true, bool bPromptForSave = true)"
  },
  {
    "label": "UpdateBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBlueprint(UBlueprint* Blueprint, bool bCheckoutAndSave = true)"
  },
  {
    "label": "GetPackedBPPrefix()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetPackedBPPrefix()"
  },
  {
    "label": "CreatePackedLevelActorBlueprintWithDialog()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "CreatePackedLevelActorBlueprintWithDialog(TSoftObjectPtr<UBlueprint> InBlueprintAsset, TSoftObjectPtr<UWorld> InWorldAsset, bool bInCompile)"
  },
  {
    "label": "CreatePackedLevelActorBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "CreatePackedLevelActorBlueprint(TSoftObjectPtr<UBlueprint> InBlueprintAsset, TSoftObjectPtr<UWorld> InWorldAsset, bool bInCompile)"
  },
  {
    "label": "AddBuilder()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "AddBuilder()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Builders .)",
    "insertText": "Add(T::BuilderID, MakeUnique<T>(*this))"
  },
  {
    "label": "ClusterActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClusterActor(FPackedLevelActorBuilderContext& InContext, AActor* InActor)"
  },
  {
    "label": "PackActor()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "PackActor(FPackedLevelActorBuilderContext& InContext)"
  },
  {
    "label": "CreateOrUpdateBlueprintFromPacked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrUpdateBlueprintFromPacked(APackedLevelActor* InPackedActor, TSoftObjectPtr<UBlueprint> InBlueprintAsset, bool bCheckoutAndSave, bool bPromptForSave)"
  },
  {
    "label": "CreateOrUpdateBlueprintFromUnpacked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrUpdateBlueprintFromUnpacked(ILevelInstanceInterface* InLevelInstance, TSoftObjectPtr<UBlueprint> InBlueprintAsset, bool bCheckoutAndSave, bool bPromptForSave)"
  },
  {
    "label": "CreateTransientLevelInstanceForPacking()",
    "kind": "Method",
    "detail": "Function (ALevelInstance*)",
    "insertText": "CreateTransientLevelInstanceForPacking(TSoftObjectPtr<UWorld> InWorldAsset, const FVector& InLocation, const FRotator& InRotator, const FWorldPartitionActorFilter& InFilter)"
  },
  {
    "label": "FPackedLevelActorBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackedLevelActorBuilder(const FPackedLevelActorBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackedLevelActorBuilder&)",
    "insertText": "operator(const FPackedLevelActorBuilder&)"
  },
  {
    "label": "FPackedLevelActorBuilderContext()",
    "kind": "Method",
    "detail": "Function (public : class FPackedLevelActorBuilderContext ; private : TSet<UClass*> ClassDiscards ; TMap<FPackedLevelActorBuilderID,TUniquePtr<IPackedLevelActorBuilder>> Builders ; FPreviewScene PreviewScene ; } ; class FPackedLevelActorBuilderContext { public :)",
    "insertText": "FPackedLevelActorBuilderContext(APackedLevelActor* InPackedLevelActor, ILevelInstanceInterface* InLevelInstanceToPack, const TSet<UClass*>& InClassDiscards) : ClassDiscards(InClassDiscards), PackedLevelActor(InPackedLevelActor), LevelInstanceToPack(InLevelInstanceToPack), RelativePivotTransform(FTransform::Identity)"
  },
  {
    "label": "FindOrAddCluster()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindOrAddCluster(FPackedLevelActorBuilderClusterID&& InClusterID, UActorComponent* InComponent = nullptr)"
  },
  {
    "label": "DiscardActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardActor(AActor* InActor)"
  },
  {
    "label": "Report()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Report(FMessageLog& Log)"
  },
  {
    "label": "GetClusters()",
    "kind": "Method",
    "detail": "Function (const TMap<FPackedLevelActorBuilderClusterID,TArray<UActorComponent*>>&)",
    "insertText": "GetClusters()"
  },
  {
    "label": "GetRelativePivotTransform()",
    "kind": "Method",
    "detail": "Function (RelativePivotTransform = InRelativePivotTransform ; } const FTransform)",
    "insertText": "GetRelativePivotTransform()"
  },
  {
    "label": "GetPackedLevelActor()",
    "kind": "Method",
    "detail": "Function (APackedLevelActor*)",
    "insertText": "GetPackedLevelActor()"
  }
]