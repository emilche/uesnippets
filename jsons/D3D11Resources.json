[
  {
    "label": "TTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeTraits"
  },
  {
    "label": "FD3D11VertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11VertexDeclaration"
  },
  {
    "label": "FD3D11ShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D11ShaderData"
  },
  {
    "label": "FD3D11VertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11VertexShader"
  },
  {
    "label": "FD3D11GeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11GeometryShader"
  },
  {
    "label": "FD3D11PixelShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11PixelShader"
  },
  {
    "label": "FD3D11ComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11ComputeShader"
  },
  {
    "label": "FD3D11BoundShaderState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11BoundShaderState"
  },
  {
    "label": "FD3D11ViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11ViewableResource"
  },
  {
    "label": "FD3D11ShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11ShaderResourceView"
  },
  {
    "label": "FD3D11UnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11UnorderedAccessView"
  },
  {
    "label": "FD3D11View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11View"
  },
  {
    "label": "FD3D11Texture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11Texture"
  },
  {
    "label": "EAliasResourceParam",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAliasResourceParam"
  },
  {
    "label": "FD3D11DynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11DynamicRHI"
  },
  {
    "label": "FD3D11RenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11RenderQuery"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D11RenderQuery_RHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11RenderQuery_RHI"
  },
  {
    "label": "FD3D11ConstantsRingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11ConstantsRingBuffer"
  },
  {
    "label": "FRingAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRingAllocation"
  },
  {
    "label": "FD3D11UniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11UniformBuffer"
  },
  {
    "label": "FD3D11Buffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11Buffer"
  },
  {
    "label": "FD3D11StagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D11StagingBuffer"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TD3D11ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D11ResourceTraits"
  },
  {
    "label": "FD3D11VertexDeclaration()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoundShaderStateCache . h \" # include \" ShaderCore . h \" # include \" Windows / D3D11ThirdParty . h \" typedef ID3D11DeviceContext FD3D11DeviceContext ; template<> struct TTypeTraits<D3D11_INPUT_ELEMENT_DESC> : public TTypeTraitsBase<D3D11_INPUT_ELEMENT_DESC> { enum { IsBytewiseComparable = true } ; } ; typedef TArray<D3D11_INPUT_ELEMENT_DESC,TFixedAllocator<MaxVertexElementCount>> FD3D11VertexElements ; class FD3D11VertexDeclaration : public FRHIVertexDeclaration { public : FD3D11VertexElements VertexElements ; uint16 StreamStrides [ MaxVertexElementCount ] ;)",
    "insertText": "FD3D11VertexDeclaration(const FD3D11VertexElements& InElements, const uint16* InStrides) : VertexElements(InElements)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(StreamStrides, InStrides, sizeof(StreamStrides))"
  },
  {
    "label": "FD3D11BoundShaderState()",
    "kind": "Method",
    "detail": "Function (} } ; struct FD3D11ShaderData { TArray<FShaderCodeVendorExtension> VendorExtensions ; bool bShaderNeedsGlobalConstantBuffer ; bool bIsSm6Shader ; uint16 UAVMask ; } ; class FD3D11VertexShader : public FRHIVertexShader,public FD3D11ShaderData { public : enum { StaticFrequency = SF_Vertex } ; TRefCountPtr<ID3D11VertexShader> Resource ; TArray<uint8> Code ; int32 Offset ; } ; class FD3D11GeometryShader : public FRHIGeometryShader,public FD3D11ShaderData { public : enum { StaticFrequency = SF_Geometry } ; TRefCountPtr<ID3D11GeometryShader> Resource ; } ; class FD3D11PixelShader : public FRHIPixelShader,public FD3D11ShaderData { public : enum { StaticFrequency = SF_Pixel } ; TRefCountPtr<ID3D11PixelShader> Resource ; } ; class FD3D11ComputeShader : public FRHIComputeShader,public FD3D11ShaderData { public : enum { StaticFrequency = SF_Compute } ; TRefCountPtr<ID3D11ComputeShader> Resource ; } ; class FD3D11BoundShaderState : public FRHIBoundShaderState { public : FCachedBoundShaderStateLink CacheLink ; uint16 StreamStrides [ MaxVertexElementCount ] ; TRefCountPtr<ID3D11InputLayout> InputLayout ; TRefCountPtr<ID3D11VertexShader> VertexShader ; TRefCountPtr<ID3D11PixelShader> PixelShader ; TRefCountPtr<ID3D11GeometryShader> GeometryShader ; bool bShaderNeedsGlobalConstantBuffer [ SF_NumStandardFrequencies ] ;)",
    "insertText": "FD3D11BoundShaderState(FRHIVertexDeclaration* InVertexDeclarationRHI, FRHIVertexShader* InVertexShaderRHI, FRHIPixelShader* InPixelShaderRHI, FRHIGeometryShader* InGeometryShaderRHI, ID3D11Device* Direct3DDevice)"
  },
  {
    "label": "FD3D11BoundShaderState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D11BoundShaderState()"
  },
  {
    "label": "GetPixelShader()",
    "kind": "Method",
    "detail": "Function (} FD3D11PixelShader*)",
    "insertText": "GetPixelShader()"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (} FD3D11GeometryShader*)",
    "insertText": "GetGeometryShader()"
  },
  {
    "label": "FD3D11ViewableResource()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D11ViewableResource { public : ~)",
    "insertText": "FD3D11ViewableResource()"
  },
  {
    "label": "HasLinkedViews()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLinkedViews()"
  },
  {
    "label": "FD3D11Texture()",
    "kind": "Method",
    "detail": "Function (private : class FD3D11ShaderResourceView ; class FD3D11UnorderedAccessView ; class FD3D11View* LinkedViews = nullptr ; } ; class FD3D11Texture final : public FRHITexture,public FD3D11ViewableResource { public : D3D11RHI_API)",
    "insertText": "FD3D11Texture(const FRHITextureCreateDesc& InDesc, ID3D11Resource* InResource, ID3D11ShaderResourceView* InShaderResourceView, int32 InRTVArraySize, bool bInCreatedRTVsPerSlice, TConstArrayView<TRefCountPtr<ID3D11RenderTargetView>> InRenderTargetViews, TConstArrayView<TRefCountPtr<ID3D11DepthStencilView>> InDepthStencilViews)"
  },
  {
    "label": "FD3D11Texture()",
    "kind": "Method",
    "detail": "Function (enum EAliasResourceParam { CreateAlias } ; D3D11RHI_API)",
    "insertText": "FD3D11Texture(FD3D11Texture const& Other, const FString& Name, EAliasResourceParam)"
  },
  {
    "label": "AliasResource()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "AliasResource(FD3D11Texture const& Other)"
  },
  {
    "label": "FD3D11Texture()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API ~)",
    "insertText": "FD3D11Texture()"
  },
  {
    "label": "GetMemorySize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMemorySize()"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (} ID3D11Resource*)",
    "insertText": "GetResource()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (FRHITextureDesc const& Desc =)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetD3D11Texture3D()",
    "kind": "Method",
    "detail": "Function (} ID3D11Texture3D*)",
    "insertText": "GetD3D11Texture3D()"
  },
  {
    "label": "IsTexture3D()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTexture3D()"
  },
  {
    "label": "GetNativeResource()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeResource()"
  },
  {
    "label": "GetNativeShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeShaderResourceView()"
  },
  {
    "label": "GetTextureBaseRHI()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetTextureBaseRHI()"
  },
  {
    "label": "GetIHVResourceHandle()",
    "kind": "Method",
    "detail": "Function (IHVResourceHandle = InHandle ; } void*)",
    "insertText": "GetIHVResourceHandle()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ArrayIndex = MipIndex ;)",
    "insertText": "if(bCreatedRTVsPerSlice)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = MipIndex* RTVArraySize + ArraySliceIndex ; } else {)",
    "insertText": "check(ArraySliceIndex == -1 || ArraySliceIndex == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((uint32)ArrayIndex < (uint32)RenderTargetViews.Num())"
  },
  {
    "label": "GetResourceInfo()",
    "kind": "Method",
    "detail": "Function (} # if RHI_ENABLE_RESOURCE_INFO bool)",
    "insertText": "GetResourceInfo(FRHIResourceInfo& OutResourceInfo)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (OutResourceInfo = FRHIResourceInfo { } ; OutResourceInfo . Name =)",
    "insertText": "GetName()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (OutResourceInfo . Type =)",
    "insertText": "GetType()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (D3D11RHI_API void)",
    "insertText": "Unlock(class FD3D11DynamicRHI* D3DRHI, uint32 MipIndex, uint32 ArrayIndex)"
  },
  {
    "label": "FD3D11RenderQuery()",
    "kind": "Method",
    "detail": "Function (private : void* IHVResourceHandle = nullptr ; TRefCountPtr<ID3D11Resource> Resource ; TRefCountPtr<ID3D11ShaderResourceView> ShaderResourceView ; TArray<TRefCountPtr<ID3D11RenderTargetView>> RenderTargetViews ; TRefCountPtr<ID3D11DepthStencilView> DepthStencilViews [ FExclusiveDepthStencil::MaxIndex ] ; int32 RTVArraySize ; uint8 bCreatedRTVsPerSlice : 1 ; uint8 bAlias : 1 ; } ; class FD3D11RenderQuery { private : TRefCountPtr<ID3D11Query> Resource ; uint64* Target = nullptr ; FD3D11RenderQuery** Prev = nullptr ; FD3D11RenderQuery* Next = nullptr ; public : uint8 TOPCounter = 0 ; uint8 BOPCounter = 0 ; std::atomic<uint8> LastCachedBOPCounter = 0 ; enum class EType : uint8 { Timestamp,Occlusion,Profiler } const Type ;)",
    "insertText": "FD3D11RenderQuery(EType Type)"
  },
  {
    "label": "FD3D11RenderQuery()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D11RenderQuery()"
  },
  {
    "label": "CacheResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheResult(class FD3D11DynamicRHI& RHI, bool bWait)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Begin(ID3D11DeviceContext* Context)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(ID3D11DeviceContext* Context, uint64* Target)"
  },
  {
    "label": "IsLinked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLinked()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "FD3D11RenderQuery_RHI()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D11RenderQuery_RHI : public FRHIRenderQuery,public FD3D11RenderQuery { public : uint64 Result = 0 ;)",
    "insertText": "FD3D11RenderQuery_RHI(EType Type) : FD3D11RenderQuery(Type)"
  },
  {
    "label": "FRingAllocation()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D11ConstantsRingBuffer ; struct FRingAllocation { ID3D11Buffer* Buffer ; void* DataPtr ; uint32 Offset ; uint32 Size ;)",
    "insertText": "FRingAllocation() : Buffer(NULL)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FD3D11UniformBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D11UniformBuffer()"
  },
  {
    "label": "GetResourceTable()",
    "kind": "Method",
    "detail": "Function (TArray<TRefCountPtr<FRHIResource>>&)",
    "insertText": "GetResourceTable()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (OutResourceInfo . VRamAllocation . AllocationSize =)",
    "insertText": "GetSize()"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeOwnership(FD3D11Buffer& Other)"
  },
  {
    "label": "ReleaseOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOwnership()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "FD3D11StagingBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D11StagingBuffer final : public FRHIStagingBuffer { class FD3D11DynamicRHI ; public :)",
    "insertText": "FD3D11StagingBuffer() : FRHIStagingBuffer()"
  },
  {
    "label": "FD3D11StagingBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D11StagingBuffer()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Lock(uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes()"
  },
  {
    "label": "UpdateBufferStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBufferStats(FD3D11Buffer& Buffer, bool bAllocating)"
  },
  {
    "label": "FD3D11View()",
    "kind": "Method",
    "detail": "Function (} class FD3D11View : public TIntrusiveLinkedList<FD3D11View> { public : ~)",
    "insertText": "FD3D11View()"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateView()"
  },
  {
    "label": "FD3D11ShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D11ShaderResourceView final : public FRHIShaderResourceView,public FD3D11View { public : TRefCountPtr<ID3D11ShaderResourceView> View ;)",
    "insertText": "FD3D11ShaderResourceView(FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "GetBaseResource()",
    "kind": "Method",
    "detail": "Function (FD3D11ViewableResource*)",
    "insertText": "GetBaseResource()"
  },
  {
    "label": "FD3D11UnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} ; class FD3D11UnorderedAccessView final : public FRHIUnorderedAccessView,public FD3D11View { public : TRefCountPtr<ID3D11UnorderedAccessView> View ;)",
    "insertText": "FD3D11UnorderedAccessView(FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  }
]