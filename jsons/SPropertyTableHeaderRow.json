[
  {
    "label": "SPropertyTableHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyTableHeaderRow"
  },
  {
    "label": "IPropertyTableCustomColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCustomColumn"
  },
  {
    "label": "IPropertyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTable"
  },
  {
    "label": "IPropertyTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableColumn"
  },
  {
    "label": "IPropertyTableUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableUtilities"
  },
  {
    "label": "ColumnWidgetFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ColumnWidgetFactory"
  },
  {
    "label": "SColumnHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColumnHeader"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Textures / SlateIcon . h \" # include \" Styling / AppStyle . h \" # include \" Framework / Commands / UIAction . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" IPropertyTable . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" IPropertyTableColumn . h \" # include \" UserInterface / PropertyTable / SColumnHeader . h \" # include \" UserInterface / PropertyTable / ColumnWidgetFactory . h \" # define LOCTEXT_NAMESPACE \" PropertyTableHeaderRow \" class SPropertyTableHeaderRow : public SHeaderRow { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyTableHeaderRow ) : _Style( TEXT(\"PropertyTable\") ) , _Customizations()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, Style ) SLATE_ARGUMENT( TArray< TSharedRef< class IPropertyTableCustomColumn > >, Customizations ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef< class IPropertyTable >& InPropertyTable)"
  },
  {
    "label": "Style()",
    "kind": "Method",
    "detail": "Function (Style = InArgs . _Style ; SHeaderRow::FArguments HeaderRowArgs ; HeaderRowArgs .)",
    "insertText": "Style(FAppStyle::Get(), FAppStyle::Join( Style, \".HeaderRow\" ))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(HeaderRowArgs)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (PropertyTable = InPropertyTable ; ColumnFactory =)",
    "insertText": "MakeShareable(new ColumnWidgetFactory())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Customizations .)",
    "insertText": "Append(InArgs._Customizations)"
  },
  {
    "label": "OnColumnsChanged()",
    "kind": "Method",
    "detail": "Function (PropertyTable ->)",
    "insertText": "OnColumnsChanged()->AddSP( this, &SPropertyTableHeaderRow::UpdateColumns)"
  },
  {
    "label": "UpdateColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateColumns()"
  },
  {
    "label": "ClearColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearColumns()"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<IPropertyTableColumn>> PropertyTableColumns = PropertyTable ->)",
    "insertText": "GetColumns()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ColumnHeaders .)",
    "insertText": "Empty()"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyTable> TableRef = PropertyTable .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyTableColumn> Column =* ColumnIter ;)",
    "insertText": "if(!ColumnFactory->Supports( Column ))"
  },
  {
    "label": "SetHidden()",
    "kind": "Method",
    "detail": "Function (Column ->)",
    "insertText": "SetHidden(true)"
  },
  {
    "label": "SetHidden()",
    "kind": "Method",
    "detail": "Function (continue ; } Column ->)",
    "insertText": "SetHidden(false)"
  },
  {
    "label": "ConstructColumnHeader()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SColumnHeader> ColumnHeader =)",
    "insertText": "ConstructColumnHeader(Column, TableRef, Style)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (const FName ColumnId = Column ->)",
    "insertText": "GetId()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ColumnHeaders .)",
    "insertText": "Add(ColumnId, ColumnHeader)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(SHeaderRow::Column( ColumnId ) .SortMode( TableRef, &IPropertyTable::GetColumnSortMode, Column ) .HeaderComboVisibility(EHeaderComboVisibility::Never) .SortPriority( TableRef, &IPropertyTable::GetColumnSortPriority, Column) .OnSort( TableRef, &IPropertyTable::SortByColumnWithId ) .MenuContent() [ GenerateColumnMenu( Column ) ] .FixedWidth( Column->GetWidth() ) [ ColumnHeader ])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { TAttribute<EColumnSortMode::Type> SortMode = EColumnSortMode::None ; TAttribute<EColumnSortPriority::Type> SortPriority = EColumnSortPriority::Max ; FOnSortModeChanged OnSort ;)",
    "insertText": "if(Column->CanSortBy())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (SortMode = TAttribute<EColumnSortMode::Type)",
    "insertText": "Create(TAttribute< EColumnSortMode::Type >::FGetter::CreateSP( TableRef, &IPropertyTable::GetColumnSortMode, Column ))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (SortPriority = TAttribute<EColumnSortPriority::Type)",
    "insertText": "Create(TAttribute< EColumnSortPriority::Type >::FGetter::CreateSP(TableRef, &IPropertyTable::GetColumnSortPriority, Column ))"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (OnSort =)",
    "insertText": "CreateSP(TableRef, &IPropertyTable::SortByColumnWithId)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AddColumn(SHeaderRow::Column( ColumnId ) .SortMode( SortMode ) .HeaderComboVisibility(EHeaderComboVisibility::Never) .SortPriority( SortPriority ) .OnSort( OnSort ) .MenuContent() [ GenerateColumnMenu( Column ) ] .FillWidth( Column, &IPropertyTableColumn::GetWidth ) .OnWidthChanged( Column, &IPropertyTableColumn::SetWidth ) [ ColumnHeader ])"
  },
  {
    "label": "OnFrozenStateChanged()",
    "kind": "Method",
    "detail": "Function (} Column ->)",
    "insertText": "OnFrozenStateChanged()->RemoveAll(this)"
  },
  {
    "label": "OnFrozenStateChanged()",
    "kind": "Method",
    "detail": "Function (Column ->)",
    "insertText": "OnFrozenStateChanged()->AddSP(this, &SPropertyTableHeaderRow::RegenerateColumnMenu)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<SColumnHeader>)",
    "insertText": "Find(const FName& ColumnId)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<SColumnHeader>* ColumnHeaderView = ColumnHeaders .)",
    "insertText": "Find(ColumnId)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyTableCustomColumn> Customization ;)",
    "insertText": "for(auto CustomizationIter = Customizations.CreateIterator(); CustomizationIter; ++CustomizationIter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto PotentialCustomization =* CustomizationIter ;)",
    "insertText": "if(PotentialCustomization->Supports( Column, Utilities ))"
  },
  {
    "label": "CreateColumnHeaderWidget()",
    "kind": "Method",
    "detail": "Function (Customization = PotentialCustomization ; break ; } } return ColumnFactory ->)",
    "insertText": "CreateColumnHeaderWidget(Column, Utilities, Customization, InStyle)"
  },
  {
    "label": "GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GenerateColumnMenu(const TSharedRef< IPropertyTableColumn >& Column)"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function ({ { FUIAction)",
    "insertText": "Action(FExecuteAction::CreateSP(SharedThis(this), &SPropertyTableHeaderRow::RemoveColumn, Column), FCanExecuteAction())"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"RemoveColumn_Name\", \"Remove\"), LOCTEXT(\"RemoveColumn_ToolTip\", \"Removes the column from the table view\"), FSlateIcon(), Action, NAME_None, EUserInterfaceActionType::Button)"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (} { FUIAction)",
    "insertText": "Action(FExecuteAction::CreateSP(SharedThis(this), &SPropertyTableHeaderRow::RemoveAllButThisColumn, Column), FCanExecuteAction())"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"RemoveAllButThisColumn_Name\", \"Remove All But This\"), LOCTEXT(\"RemoveAllButThisColumn_ToolTip\", \"Removes all the columns from the table view except this\"), FSlateIcon(), Action, NAME_None, EUserInterfaceActionType::Button)"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (} } return MenuBuilder .)",
    "insertText": "MakeWidget()"
  },
  {
    "label": "RegenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegenerateColumnMenu(const TSharedRef< IPropertyTableColumn >& Column)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveColumn(const TSharedRef< IPropertyTableColumn > Column)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (PropertyTable ->)",
    "insertText": "RemoveColumn(Column)"
  },
  {
    "label": "RemoveAllButThisColumn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllButThisColumn(const TSharedRef<IPropertyTableColumn> ColumnToKeep)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (continue ; } PropertyTable ->)",
    "insertText": "RemoveColumn(ExistingColumn)"
  }
]