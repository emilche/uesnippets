[
  {
    "label": "string16_char_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "string16_char_traits"
  },
  {
    "label": "std",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "std"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_STRING16_H_ # define CEF_INCLUDE_BASE_CEF_STRING16_H_ # pragma once # if)",
    "insertText": "defined(BASE_STRINGS_STRING16_H_) #elif defined(USING_CHROMIUM_INCLUDES) #include \"base/strings/string16.h\" #else #include <stdio.h> #include <string> #include \"include/base/cef_basictypes.h\" #if defined(WCHAR_T_IS_UTF16)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef wchar_t char16 ; typedef std::wstring string16 ; typedef std::char_traits<wchar_t> string16_char_traits ; } # elif)",
    "insertText": "defined(WCHAR_T_IS_UTF32)"
  },
  {
    "label": "c16memcmp()",
    "kind": "Method",
    "detail": "Function (namespace base { typedef uint16_t char16 ; int)",
    "insertText": "c16memcmp(const char16* s1, const char16* s2, size_t n)"
  },
  {
    "label": "c16len()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "c16len(const char16* s)"
  },
  {
    "label": "c16memchr()",
    "kind": "Method",
    "detail": "Function (const char16*)",
    "insertText": "c16memchr(const char16* s, char16 c, size_t n)"
  },
  {
    "label": "c16memmove()",
    "kind": "Method",
    "detail": "Function (char16*)",
    "insertText": "c16memmove(char16* s1, const char16* s2, size_t n)"
  },
  {
    "label": "c16memcpy()",
    "kind": "Method",
    "detail": "Function (char16*)",
    "insertText": "c16memcpy(char16* s1, const char16* s2, size_t n)"
  },
  {
    "label": "c16memset()",
    "kind": "Method",
    "detail": "Function (char16*)",
    "insertText": "c16memset(char16* s, char16 c, size_t n)"
  },
  {
    "label": "COMPILE_ASSERT()",
    "kind": "Method",
    "detail": "Function (struct string16_char_traits { typedef char16 char_type ; typedef int int_type ;)",
    "insertText": "COMPILE_ASSERT(sizeof(int_type) > sizeof(char_type), unexpected_type_width)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef std::streamoff off_type ; typedef mbstate_t state_type ; typedef std::fpos<state_type> pos_type ; void)",
    "insertText": "assign(char_type& c1, const char_type& c2)"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (c1 = c2 ; } bool)",
    "insertText": "eq(const char_type& c1, const char_type& c2)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "length(const char_type* s)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} const char_type*)",
    "insertText": "find(const char_type* s, size_t n, const char_type& a)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} char_type*)",
    "insertText": "move(char_type* s1, const char_type* s2, int_type n)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (} char_type*)",
    "insertText": "copy(char_type* s1, const char_type* s2, size_t n)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} char_type*)",
    "insertText": "assign(char_type* s, size_t n, char_type a)"
  },
  {
    "label": "not_eof()",
    "kind": "Method",
    "detail": "Function (} int_type)",
    "insertText": "not_eof(const int_type& c)"
  },
  {
    "label": "to_char_type()",
    "kind": "Method",
    "detail": "Function (} char_type)",
    "insertText": "to_char_type(const int_type& c)"
  },
  {
    "label": "to_int_type()",
    "kind": "Method",
    "detail": "Function (} int_type)",
    "insertText": "to_int_type(const char_type& c)"
  },
  {
    "label": "eq_int_type()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "eq_int_type(const int_type& c1, const int_type& c2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::basic_string<char16,string16_char_traits> string16 ; } } namespace base { typedef cef::base::char16 char16 ; typedef cef::base::string16 string16 ; std::ostream&)",
    "insertText": "operator(std::ostream& out, const string16& str)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const string16& str, std::ostream* out)"
  }
]