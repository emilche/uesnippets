[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChaosVDOptionalDataChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDOptionalDataChannel"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # if WITH_CHAOS_VISUAL_DEBUGGER # include \" Templates / SharedPointer . h \" class FText ; class FName ; enum class EChaosVDDataChannelInitializationFlags : uint8 { StartEnabled = 1<<0,CanChangeEnabledState = 1<<1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChaosVDDataChannelInitializationFlags)"
  },
  {
    "label": "FChaosVDOptionalDataChannel()",
    "kind": "Method",
    "detail": "Function (struct FChaosVDOptionalDataChannel : TSharedFromThis<FChaosVDOptionalDataChannel> {)",
    "insertText": "FChaosVDOptionalDataChannel(const TSharedRef<FName>& InChannelID, const TSharedRef<FText>& InDisplayName, EChaosVDDataChannelInitializationFlags InitializationFlags) : LocalizableChannelName(InDisplayName), ChannelId(InChannelID)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (bIsEnabled =)",
    "insertText": "EnumHasAnyFlags(InitializationFlags, EChaosVDDataChannelInitializationFlags::StartEnabled)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (bCanChangeEnabledState =)",
    "insertText": "EnumHasAnyFlags(InitializationFlags, EChaosVDDataChannelInitializationFlags::CanChangeEnabledState)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetId()"
  },
  {
    "label": "CanChangeEnabledState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeEnabledState()"
  },
  {
    "label": "EnumerateChannels()",
    "kind": "Method",
    "detail": "Function (template<TCallback> void)",
    "insertText": "EnumerateChannels(TCallback Callback)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AvailableChannels .)",
    "insertText": "Add(NewChannel->GetId(), NewChannel)"
  },
  {
    "label": "ParseChannelListFromCommandArgument()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,TSharedPtr<FChaosVDOptionalDataChannel>> AvailableChannels ; FChaosVDOptionalDataChannel ; } ; void)",
    "insertText": "ParseChannelListFromCommandArgument(TArray<FString>& OutParsedChannelList, const FString& InCommandArgument)"
  },
  {
    "label": "CreateDataChannel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FChaosVDOptionalDataChannel>)",
    "insertText": "CreateDataChannel(FName InChannelID, const TSharedRef<FText>& InDisplayName, EChaosVDDataChannelInitializationFlags InitializationFlags)"
  },
  {
    "label": "CVD_CONCAT_NX()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef CVD_CONCAT_NX # define)",
    "insertText": "CVD_CONCAT_NX(A, B) A ## B #endif #ifndef CVD_CONCAT #define CVD_CONCAT(A, B) CVD_CONCAT_NX(A,B) #endif #ifndef CVD_STRINGIZE_NX #define CVD_STRINGIZE_NX(A) #A #endif #ifndef CVD_STRINGIZE #define CVD_STRINGIZE(A) CVD_STRINGIZE_NX(A) #endif #if WITH_CHAOS_VISUAL_DEBUGGER #ifndef CVD_DECLARE_OPTIONAL_DATA_CHANNEL #define CVD_DECLARE_OPTIONAL_DATA_CHANNEL(DataChannelName)"
  },
  {
    "label": "CVD_DEFINE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef CVD_DEFINE_OPTIONAL_DATA_CHANNEL # define)",
    "insertText": "CVD_DEFINE_OPTIONAL_DATA_CHANNEL(DataChannelName, InitializationFlags) \\ TSharedRef<Chaos::VisualDebugger::FChaosVDOptionalDataChannel> CVDDC_##DataChannelName = Chaos::VisualDebugger::CreateDataChannel(#DataChannelName, MakeShared<FText>(NSLOCTEXT(CVD_STRINGIZE(ChaosVisualDebugger), CVD_STRINGIZE(CVD_CONCAT(DataChannelName,_ChannelName)), #DataChannelName)), InitializationFlags)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(Default)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(EvolutionStart)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(PostIntegrate)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(PreConstraintSolve)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(CollisionDetectionBroadPhase)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(CollisionDetectionNarrowPhase)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(EndOfEvolutionCollisionConstraints)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(PostConstraintSolve)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(EvolutionEnd)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(SceneQueries)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(JointConstraints)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(CharacterGroundConstraints)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(AccelerationStructures)"
  },
  {
    "label": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_DECLARE_OPTIONAL_DATA_CHANNEL(ClusterParticlesChildData)"
  }
]