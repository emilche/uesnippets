[
  {
    "label": "TImplicitFunction3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitFunction3"
  },
  {
    "label": "TBoundedImplicitFunction3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBoundedImplicitFunction3"
  },
  {
    "label": "TImplicitPoint3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitPoint3"
  },
  {
    "label": "TImplicitLine3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitLine3"
  },
  {
    "label": "TSkeletalImplicitLine3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSkeletalImplicitLine3"
  },
  {
    "label": "TDistanceFieldToSkeletalField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDistanceFieldToSkeletalField"
  },
  {
    "label": "TSkeletalRicciNaryBlend3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSkeletalRicciNaryBlend3"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" SegmentTypes . h \" # include \" BoxTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TImplicitFunction3 { TUniqueFunction<)",
    "insertText": "RealType(TVector<RealType>)> Value()"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<TAxisAlignedBox3<RealType>>)",
    "insertText": "Bounds()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} ; template<RealType> struct TImplicitPoint3 { TVector<RealType> Position ; RealType Radius ; RealType)",
    "insertText": "Value(const TVector<RealType>& Point)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (RealType DistanceSqr = Segment .)",
    "insertText": "DistanceSquared(Point)"
  },
  {
    "label": "SetScaleFromRadius()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TImplicitLine3<float> FImplicitLine3f ; typedef TImplicitLine3<double> FImplicitLine3d ; template<RealType> struct TSkeletalImplicitLine3 { TSegment3<RealType> Segment ; RealType Scale = 1 . 0 ; void)",
    "insertText": "SetScaleFromRadius(double TargetRadius, double DefaultIsoValue = 0.5)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (Scale = TargetRadius / DefaultIsoValue ; } float)",
    "insertText": "GetRadius(double DefaultIsoValue = 0.5)"
  },
  {
    "label": "DistanceSqr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DistanceSqr(Scale * Scale)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RealType T =)",
    "insertText": "Max(1.0 - DistanceSqr, 0.0)"
  },
  {
    "label": "TDistanceFieldToSkeletalField()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TSkeletalImplicitLine3<float> FSkeletalImplicitLine3f ; typedef TSkeletalImplicitLine3<double> FSkeletalImplicitLine3d ; template<InputBoundedImplicitType,RealType> struct TDistanceFieldToSkeletalField { InputBoundedImplicitType* DistanceField = nullptr ; RealType FalloffDistance = 1 0 ;)",
    "insertText": "TDistanceFieldToSkeletalField(InputBoundedImplicitType* DistanceField = nullptr, RealType FalloffDistance = 10) : DistanceField(DistanceField), FalloffDistance(FalloffDistance)"
  },
  {
    "label": "ZeroIsocontour()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "ZeroIsocontour(RealType)"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (B .)",
    "insertText": "Expand(FalloffDistance)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (RealType Dist = DistanceField ->)",
    "insertText": "Value(Pt)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "t(Dist + FalloffDistance) / (2 * FalloffDistance)"
  },
  {
    "label": "expr()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "expr(t * t)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int N = Children .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType Scale = bSubtract ? - 1 : 1 ;)",
    "insertText": "if(BlendPower == 1.0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} f = TMathUtil<RealType)",
    "insertText": "Max(0, f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(BlendPower == 2.0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (f = f* f ;)",
    "insertText": "for(int k = 1; k < N; ++k)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (f + = v* v* Scale ; } f = TMathUtil<RealType)",
    "insertText": "Sqrt(TMathUtil<RealType>::Max(0, f))"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} else { f = TMathUtil<RealType)",
    "insertText": "Pow(f, BlendPower)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (f + = TMathUtil<RealType)",
    "insertText": "Pow(v, BlendPower)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} f = TMathUtil<RealType)",
    "insertText": "Pow(TMathUtil<RealType>::Max(0, f), 1.0 / BlendPower)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Box .)",
    "insertText": "Contain(Children[k]->Bounds())"
  }
]