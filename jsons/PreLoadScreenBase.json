[
  {
    "label": "FPreLoadScreenBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreLoadScreenBase"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PreLoadScreen . h \" class FPreLoadScreenBase : public IPreLoadScreen { public : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "ShouldRender()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRender()"
  },
  {
    "label": "OnStop()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnStop()"
  },
  {
    "label": "OnPlay()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPlay(TWeakPtr<SWindow> TargetWindow)"
  },
  {
    "label": "GetAddedTickDelay()",
    "kind": "Method",
    "detail": "Function (OwningWindow = TargetWindow ; } float)",
    "insertText": "GetAddedTickDelay()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "GetPreLoadScreenTag()",
    "kind": "Method",
    "detail": "Function (bIsEngineLoadingFinished = IsEngineLoadingFinished ; } FName)",
    "insertText": "GetPreLoadScreenTag()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "FPreLoadScreenBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPreLoadScreenBase() : bIsEngineLoadingFinished(false)"
  },
  {
    "label": "FPreLoadScreenBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPreLoadScreenBase()"
  },
  {
    "label": "InitSettingsFromConfig()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "InitSettingsFromConfig(const FString& ConfigFileName)"
  },
  {
    "label": "SetPluginName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPluginName(const FString& PluginNameIn)"
  }
]