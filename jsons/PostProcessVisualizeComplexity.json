[
  {
    "label": "FVisualizeComplexityInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizeComplexityInputs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetMaxShaderComplexityCount()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" DebugViewModeHelpers . h \" # include \" OverridePassSequence . h \" const uint32 MaxNumShaderComplexityColors = 1 1 ; const float NormalizedQuadComplexityValue = 1 . f / 1 6 . f ; float)",
    "insertText": "GetMaxShaderComplexityCount(ERHIFeatureLevel::Type InFeatureType)"
  },
  {
    "label": "AddVisualizeComplexityPass()",
    "kind": "Method",
    "detail": "Function (struct FVisualizeComplexityInputs { enum class EColorSamplingMethod : uint32 { Ramp,Linear,Stair } ; FScreenPassRenderTarget OverrideOutput ; FScreenPassTexture SceneColor ; TArrayView<const FLinearColor> Colors ; EColorSamplingMethod ColorSamplingMethod = EColorSamplingMethod::Ramp ; float ComplexityScale = 1 . 0 f ; bool bDrawLegend = false ; } ; FScreenPassTexture)",
    "insertText": "AddVisualizeComplexityPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FVisualizeComplexityInputs& Inputs)"
  }
]