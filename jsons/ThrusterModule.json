[
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FThrusterSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / SimulationModuleBase . h \" namespace Chaos { struct FAllInputs ; class FSimModuleTree ; struct FThrusterSettings {)",
    "insertText": "FThrusterSettings() : MaxThrustForce(0) , ForceAxis(FVector(1.0f, 0.0f, 0.0f)) , SteeringAxis(FVector(0.0f, 0.0f, 1.0f)) , ForceOffset(FVector::ZeroVector) , MaxSteeringAngle(0) , SteeringForceEffect(1.0f) , BoostMultiplier(2.0f) , MaxSpeed(125.0f) , SteeringEnabled(false)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} float MaxThrustForce ; FVector ForceAxis ; FVector SteeringAxis ; FVector ForceOffset ; float MaxSteeringAngle ; float SteeringForceEffect ; float BoostMultiplier ; float MaxSpeed ; bool SteeringEnabled ; } ; class FThrusterSimModule : public ISimulationModuleBase,public TSimModuleSettings<FThrusterSettings>,public TSimulationModuleTypeable<FThrusterSimModule> { public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FThrusterSimModule)"
  },
  {
    "label": "FThrusterSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FThrusterSimModule(const FThrusterSettings& Settings)"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FModuleNetData>)",
    "insertText": "GenerateNetData(const int32 NodeArrayIndex)"
  },
  {
    "label": "IsBehaviourType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBehaviourType(eSimModuleTypeFlags InType)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Simulate(float DeltaTime, const FAllInputs& Inputs, FSimModuleTree& VehicleModuleSystem)"
  },
  {
    "label": "Animate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Animate(Chaos::FClusterUnionPhysicsProxy* Proxy)"
  },
  {
    "label": "GetSteerAngleDegrees()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSteerAngleDegrees()"
  }
]