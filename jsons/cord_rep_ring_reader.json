[
  {
    "label": "CordRepRingReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepRingReader"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_RING_READER_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_RING_READER_H_ # include<cassert> # include<cstddef> # include<cstdint> # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cord_rep_ring . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class CordRepRingReader { public : operator)",
    "insertText": "bool()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "length()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ring_)"
  },
  {
    "label": "remaining()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "remaining()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ring_ = nullptr ; } absl::string_view)",
    "insertText": "Reset(CordRepRing* ring)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ring)"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (ring_ = ring ; index_ = ring_ ->)",
    "insertText": "head()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "Next()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(remaining())"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (index_ = ring_ ->)",
    "insertText": "advance(index_)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "Seek(size_t offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(offset < length())"
  },
  {
    "label": "entry_end_offset()",
    "kind": "Method",
    "detail": "Function (size_t current = ring_ ->)",
    "insertText": "entry_end_offset(index_)"
  },
  {
    "label": "hint()",
    "kind": "Method",
    "detail": "Function (CordRepRing::index_type)",
    "insertText": "hint(offset >= current) ? index_ : ring_->head()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const CordRepRing::Position head = ring_ ->)",
    "insertText": "Find(hint, offset)"
  },
  {
    "label": "entry_data()",
    "kind": "Method",
    "detail": "Function (index_ = head . index ; auto data = ring_ ->)",
    "insertText": "entry_data(head.index)"
  },
  {
    "label": "remove_prefix()",
    "kind": "Method",
    "detail": "Function (data .)",
    "insertText": "remove_prefix(head.offset)"
  }
]