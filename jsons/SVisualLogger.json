[
  {
    "label": "AVisualLoggerCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVisualLoggerCameraController"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SVisualLoggerFilters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLoggerFilters"
  },
  {
    "label": "SVisualLoggerLogsList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLoggerLogsList"
  },
  {
    "label": "SVisualLoggerStatusView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLoggerStatusView"
  },
  {
    "label": "SVisualLoggerView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLoggerView"
  },
  {
    "label": "FLogEntryItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogEntryItem"
  },
  {
    "label": "FVisualLoggerCanvasRenderer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerCanvasRenderer"
  },
  {
    "label": "FVisualLoggerDBRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerDBRow"
  },
  {
    "label": "SVisualLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVisualLogger"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "AVisualLoggerFilterVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVisualLoggerFilterVolume"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VisualLogger / VisualLoggerTypes . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / Docking / TabManager . h \" class AVisualLoggerCameraController ; class FMenuBuilder ; class SVisualLoggerFilters ; class SVisualLoggerLogsList ; class SVisualLoggerStatusView ; class SVisualLoggerView ; struct FLogEntryItem ; struct FVisualLoggerCanvasRenderer ; struct FVisualLoggerDBRow ; class SVisualLogger : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SVisualLogger)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: SVisualLogger()"
  },
  {
    "label": "SVisualLogger()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SVisualLogger()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<SDockTab>& ConstructUnderMajorTab, const TSharedPtr<SWindow>& ConstructUnderWindow)"
  },
  {
    "label": "HandleTabManagerSpawnTab()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<SDockTab>)",
    "insertText": "HandleTabManagerSpawnTab(const FSpawnTabArgs& Args, FName TabIdentifier)"
  },
  {
    "label": "FillWindowMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillWindowMenu(FMenuBuilder& MenuBuilder, const TSharedPtr<FTabManager> TabManager)"
  },
  {
    "label": "HandleMajorTabPersistVisualState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMajorTabPersistVisualState()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFiltersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFiltersChanged()"
  },
  {
    "label": "OnObjectSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectSelectionChanged(const TArray<FName>& RowNames)"
  },
  {
    "label": "OnItemsSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemsSelectionChanged(const FVisualLoggerDBRow&, int32)"
  },
  {
    "label": "OnNewItemHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewItemHandler(const FVisualLoggerDBRow& BDRow, int32 ItemIndex)"
  },
  {
    "label": "UpdateVisibilityForEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisibilityForEntry(const FVisualLoggerDBRow& BDRow, int32 ItemIndex)"
  },
  {
    "label": "OnScrubPositionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScrubPositionChanged(double NewScrubPosition, bool bScrubbing)"
  },
  {
    "label": "OnFiltersSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFiltersSearchChanged(const FText& Filter)"
  },
  {
    "label": "OnLogLineSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLogLineSelectionChanged(TSharedPtr<struct FLogEntryItem> SelectedItem, int64 UserData, FName TagName)"
  },
  {
    "label": "OnKeyboardRedirection()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyboardRedirection(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleStartRecordingCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStartRecordingCommandCanExecute()"
  },
  {
    "label": "HandleStartRecordingCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStartRecordingCommandExecute()"
  },
  {
    "label": "HandleStartRecordingCommandIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStartRecordingCommandIsVisible()"
  },
  {
    "label": "HandleStopRecordingCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStopRecordingCommandCanExecute()"
  },
  {
    "label": "HandleStopRecordingCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStopRecordingCommandExecute()"
  },
  {
    "label": "HandleStopRecordingCommandIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStopRecordingCommandIsVisible()"
  },
  {
    "label": "HandlePauseCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePauseCommandCanExecute()"
  },
  {
    "label": "HandlePauseCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePauseCommandExecute()"
  },
  {
    "label": "HandlePauseCommandIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePauseCommandIsVisible()"
  },
  {
    "label": "HandleResumeCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResumeCommandCanExecute()"
  },
  {
    "label": "HandleResumeCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResumeCommandExecute()"
  },
  {
    "label": "HandleResumeCommandIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResumeCommandIsVisible()"
  },
  {
    "label": "HandleLoadCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLoadCommandCanExecute()"
  },
  {
    "label": "HandleLoadCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLoadCommandExecute()"
  },
  {
    "label": "HandleSaveCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSaveCommandCanExecute()"
  },
  {
    "label": "HandleSaveCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSaveCommandExecute()"
  },
  {
    "label": "HandleSaveAllCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSaveAllCommandExecute()"
  },
  {
    "label": "HandleSaveCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSaveCommand(bool bSaveAllData)"
  },
  {
    "label": "HandleRefreshCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRefreshCommandCanExecute()"
  },
  {
    "label": "HandleRefreshCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRefreshCommandExecute()"
  },
  {
    "label": "HandleCameraCommandCanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCameraCommandCanExecute()"
  },
  {
    "label": "HandleCameraCommandExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCameraCommandExecute()"
  },
  {
    "label": "HandleCameraCommandIsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCameraCommandIsChecked()"
  },
  {
    "label": "GetVisualLoggerFilters()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SVisualLoggerFilters>)",
    "insertText": "GetVisualLoggerFilters()"
  },
  {
    "label": "OnNewWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewWorld(UWorld* NewWorld)"
  },
  {
    "label": "OnLevelActorAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorAdded(AActor* Actor)"
  },
  {
    "label": "OnLevelActorDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorDeleted(AActor* Actor)"
  },
  {
    "label": "OnActorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorMoved(AActor* Actor)"
  },
  {
    "label": "OnSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSettingsChanged(FName PropertyName)"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetData()"
  },
  {
    "label": "CollectFilterVolumes()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CollectFilterVolumes()"
  },
  {
    "label": "ProcessFilterVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFilterVolumes()"
  }
]