[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFTDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFTDescription"
  },
  {
    "label": "ComplexFFTImage1D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComplexFFTImage1D"
  },
  {
    "label": "TwoForOneRealFFTImage1D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TwoForOneRealFFTImage1D"
  },
  {
    "label": "ConvolutionWithTextureImage1D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvolutionWithTextureImage1D"
  },
  {
    "label": "GetInverseOfXForm()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / NumericLimits . h \" # include \" GlobalShader . h \" # include \" RendererInterface . h \" # include \" RHI . h \" # include \" RHIStaticStates . h \" # include \" Shader . h \" # include \" ShaderParameterUtils . h \" namespace GPUFFT { enum class FFT_XFORM_TYPE : int { FORWARD_HORIZONTAL = 0,FORWARD_VERTICAL = 1,INVERSE_HORIZONTAL = 2,INVERSE_VERTICAL = 3 } ; FFT_XFORM_TYPE)",
    "insertText": "GetInverseOfXForm(const FFT_XFORM_TYPE& XForm)"
  },
  {
    "label": "IsHorizontal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHorizontal(const FFT_XFORM_TYPE& XFormType)"
  },
  {
    "label": "IsForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForward(const FFT_XFORM_TYPE& XFormType)"
  },
  {
    "label": "FFTDescription()",
    "kind": "Method",
    "detail": "Function (class FFTDescription { public :)",
    "insertText": "FFTDescription(const FFT_XFORM_TYPE& XForm, const FIntPoint& XFormExtent)"
  },
  {
    "label": "FFTDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFTDescription()"
  },
  {
    "label": "TransformExtent()",
    "kind": "Method",
    "detail": "Function (} ; FIntPoint)",
    "insertText": "TransformExtent()"
  },
  {
    "label": "IsHorizontal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHorizontal()"
  },
  {
    "label": "IsForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForward()"
  },
  {
    "label": "FFT_TypeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "FFT_TypeName()"
  },
  {
    "label": "MaxScanLineLength()",
    "kind": "Method",
    "detail": "Function (FFT_XFORM_TYPE XFormType = FFT_XFORM_TYPE::FORWARD_HORIZONTAL ; uint32 SignalLength = 0 ; uint32 NumScanLines = 0 ; ERDGPassFlags ComputePassFlags = ERDGPassFlags::Compute ; } ; uint32)",
    "insertText": "MaxScanLineLength()"
  },
  {
    "label": "PixelFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "PixelFormat()"
  },
  {
    "label": "MultiPass()",
    "kind": "Method",
    "detail": "Function (} struct ComplexFFTImage1D { void)",
    "insertText": "MultiPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* ShaderMap, const FFTDescription& FFTDesc, FRDGTextureSRVRef SrcTexture, const FIntRect& SrcWindow, FRDGTextureRef DstTexture, FRDGBufferRef PostFilterParameters = nullptr, const bool bScrubNaNs = false)"
  },
  {
    "label": "MultiPass()",
    "kind": "Method",
    "detail": "Function (} ; struct TwoForOneRealFFTImage1D { void)",
    "insertText": "MultiPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* ShaderMap, const FFTDescription& FFTDesc, FRDGTextureSRVRef SrcTexture, const FIntRect& SrcWindow, FRDGTextureRef DstTexture, const FIntRect& DstWindow, const FPreFilter& PreFilter = FPreFilter(TNumericLimits<float>::Max(), TNumericLimits<float>::Lowest(), 0.f), FRDGBufferRef PostFilterParameters = nullptr)"
  },
  {
    "label": "MultiPass()",
    "kind": "Method",
    "detail": "Function (} ; struct ConvolutionWithTextureImage1D { void)",
    "insertText": "MultiPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* ShaderMap, const FFTDescription& FFTDesc, FRDGTextureSRVRef SrcTexture, const FIntRect& SrcWindow, FRDGTextureRef TransformedKernel, FRDGTextureRef DstTexture)"
  },
  {
    "label": "FFTImage2D()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "FFTImage2D(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* ShaderMap, const FIntPoint& FrequencySize, bool bHorizontalFirst, FRDGTextureSRVRef SrcTexture, const FIntRect& ROIRect, FRDGTextureRef ResultTexture)"
  },
  {
    "label": "ConvolutionWithTextureImage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvolutionWithTextureImage2D(FRDGBuilder& GraphBuilder, ERDGPassFlags ComputePassFlags, const FGlobalShaderMap* ShaderMap, const FIntPoint& FrequencySize, bool bHorizontalFirst, FRDGTextureRef TransformedKernel, FRDGTextureSRVRef SrcTexture, const FIntRect& ROIRect, FRDGTextureRef DstTexture, const FIntRect& DstRect, const FPreFilter& PreFilter, FRDGBufferRef PostFilterParameters, ETextureCreateFlags AdditionalTextureCreateFlags)"
  },
  {
    "label": "Convolution2DBufferSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "Convolution2DBufferSize(const FIntPoint& FrequencySize, const bool bHorizontalFirst, const FIntPoint& SrcExtent)"
  },
  {
    "label": "CopyImage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyImage2D(FRDGBuilder& GraphBuilder, ERDGPassFlags ComputePassFlags, const FGlobalShaderMap* ShaderMap, FRDGTextureSRVRef SrcTexture, const FIntRect& SrcWindow, FRDGTextureRef DstTexture, const FIntRect& DstWindow, const FPreFilter& PreFilter = FPreFilter(TNumericLimits<float>::Max(), TNumericLimits<float>::Lowest(), 0.f))"
  }
]