[
  {
    "label": "ArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRef"
  },
  {
    "label": "MutableArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MutableArrayRef"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_ARRAYREF_H # define LLVM_ADT_ARRAYREF_H # include \" llvm / ADT / None . h \" # include \" llvm / ADT / SmallVector . h \" # include<vector> namespace llvm { template<T> class ArrayRef { public : typedef const T* iterator ; typedef const T* const_iterator ; typedef size_t size_type ; typedef std::reverse_iterator<iterator> reverse_iterator ; private : const T* Data ; size_type Length ; public :)",
    "insertText": "ArrayRef() : Data(nullptr), Length(0)"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayRef(NoneType) : Data(nullptr), Length(0)"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayRef(const T &OneElt) : Data(&OneElt), Length(1)"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayRef(const T *data, size_t length) : Data(data), Length(length)"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayRef(const T *begin, const T *end) : Data(begin), Length(end - begin)"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "ArrayRef(const SmallVectorTemplateCommon<T, U> &Vec) : Data(Vec.data()), Length(Vec.size())"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<A>)",
    "insertText": "ArrayRef(const std::vector<T, A> &Vec) : Data(Vec.data()), Length(Vec.size())"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> LLVM_CONSTEXPR)",
    "insertText": "ArrayRef(const T (&Arr)[N]) : Data(Arr), Length(N)"
  },
  {
    "label": "LLVM_GNUC_PREREQ()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "LLVM_GNUC_PREREQ(9, 0, 0) #pragma GCC diagnostic push #pragma GCC diagnostic ignored \"-Winit-list-lifetime\" #endif ArrayRef(const std::initializer_list<T> &Vec) : Data(Vec.begin() == Vec.end() ? (T*)0 : Vec.begin()), Length(Vec.size())"
  },
  {
    "label": "LLVM_GNUC_PREREQ()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "LLVM_GNUC_PREREQ(9, 0, 0) #pragma GCC diagnostic pop #endif template <typename U> ArrayRef(const ArrayRef<U *> &A, typename std::enable_if< std::is_convertible<U *const *, T const *>::value>::type* = 0) : Data(A.data()), Length(A.size())"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<U,DummyT>)",
    "insertText": "ArrayRef(const SmallVectorTemplateCommon<U*, DummyT> &Vec, typename std::enable_if< std::is_convertible<U *const *, T const *>::value>::type* = 0) : Data(Vec.data()), Length(Vec.size())"
  },
  {
    "label": "ArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<U,A>)",
    "insertText": "ArrayRef(const std::vector<U *, A> &Vec, typename std::enable_if< std::is_convertible<U *const *, T const *>::value>::type* = 0) : Data(Vec.data()), Length(Vec.size())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Buff = A . template Allocate<)",
    "insertText": "T(Length)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(begin(), end(), Buff)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equals(ArrayRef RHS)"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<T>)",
    "insertText": "slice(unsigned N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N <= size() && \"Invalid specifier\")"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<T>)",
    "insertText": "slice(unsigned N, unsigned M)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N+M <= size() && \"Invalid specifier\")"
  },
  {
    "label": "drop_back()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<T>)",
    "insertText": "drop_back(unsigned N = 1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size() >= N && \"Dropping more elements than exist\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "operator(size_t Index)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index < Length && \"Invalid index!\")"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator std::vector<)",
    "insertText": "T()"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class MutableArrayRef : public ArrayRef<T> { public : typedef T* iterator ; typedef std::reverse_iterator<iterator> reverse_iterator ;)",
    "insertText": "MutableArrayRef() : ArrayRef<T>()"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutableArrayRef(NoneType) : ArrayRef<T>()"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutableArrayRef(T &OneElt) : ArrayRef<T>(OneElt)"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutableArrayRef(T *data, size_t length) : ArrayRef<T>(data, length)"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutableArrayRef(T *begin, T *end) : ArrayRef<T>(begin, end)"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutableArrayRef(SmallVectorImpl<T> &Vec) : ArrayRef<T>(Vec)"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MutableArrayRef(std::vector<T> &Vec) : ArrayRef<T>(Vec)"
  },
  {
    "label": "MutableArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> LLVM_CONSTEXPR)",
    "insertText": "MutableArrayRef(T (&Arr)[N]) : ArrayRef<T>(Arr)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "data()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "front()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!this->empty())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "back()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N <= this->size() && \"Invalid specifier\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N+M <= this->size() && \"Invalid specifier\")"
  },
  {
    "label": "drop_back()",
    "kind": "Method",
    "detail": "Function (} MutableArrayRef<T>)",
    "insertText": "drop_back(unsigned N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->size() >= N && \"Dropping more elements than exist\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index < this->size() && \"Invalid index!\")"
  },
  {
    "label": "makeArrayRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> ArrayRef<T>)",
    "insertText": "makeArrayRef(const T &OneElt)"
  },
  {
    "label": "makeArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<T> ArrayRef<T>)",
    "insertText": "makeArrayRef(const T *begin, const T *end)"
  },
  {
    "label": "makeArrayRef()",
    "kind": "Method",
    "detail": "Function (} template<T> ArrayRef<T>)",
    "insertText": "makeArrayRef(const SmallVectorImpl<T> &Vec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(ArrayRef<T> LHS, ArrayRef<T> RHS)"
  }
]