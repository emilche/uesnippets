[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "FClothCollisionSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothCollisionSource"
  },
  {
    "label": "FConstraintInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstance"
  },
  {
    "label": "FConstraintProfileProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintProfileProperties"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FAnimationEvaluationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationEvaluationContext"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSkeletalMeshComponentEndPhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshComponentEndPhysicsTickFunction"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FSkeletalMeshComponentClothTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshComponentClothTickFunction"
  },
  {
    "label": "FClosestPointOnPhysicsAsset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClosestPointOnPhysicsAsset"
  },
  {
    "label": "FSkinnedMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "FParallelAnimationCompletionTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParallelAnimationCompletionTask"
  },
  {
    "label": "FAnimNode_LinkedAnimGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimGraph"
  },
  {
    "label": "FAnimNode_LinkedAnimLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LinkedAnimLayer"
  },
  {
    "label": "FLinkedInstancesAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkedInstancesAdapter"
  },
  {
    "label": "FLinkedAnimLayerClassData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkedAnimLayerClassData"
  },
  {
    "label": "FRigUnit_AnimNextWriteSkeletalMeshComponentPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigUnit_AnimNextWriteSkeletalMeshComponentPose"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintGeneratedClass"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "FSingleAnimationPlayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleAnimationPlayData"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UClothingSimulationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClothingSimulationFactory"
  },
  {
    "label": "FPendingRadialForces",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingRadialForces"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "UParticleSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemComponent"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "FBodyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBodyInstance"
  },
  {
    "label": "FParallelClothCompletionTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParallelClothCompletionTask"
  },
  {
    "label": "UDebugSkelMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDebugSkelMeshComponent"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FComponentQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentQueryParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "USkelControlLookAt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkelControlLookAt"
  },
  {
    "label": "FSkeletalMeshComponentDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshComponentDetails"
  },
  {
    "label": "FParallelBlendPhysicsTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParallelBlendPhysicsTask"
  },
  {
    "label": "FParallelClothTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParallelClothTask"
  },
  {
    "label": "FParallelBlendPhysicsCompletionTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParallelBlendPhysicsCompletionTask"
  },
  {
    "label": "FClothingSimulationContextCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClothingSimulationContextCommon"
  },
  {
    "label": "FTickClothingTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickClothingTask"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FPoseWatchDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseWatchDynamicData"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Components / SceneComponent . h \" # include \" EngineDefines . h \" # include \" CollisionQueryParams . h \" # include \" Interfaces / Interface_CollisionDataProvider . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimCurveTypes . h \" # include \" Components / SkinnedMeshComponent . h \" # include \" ClothSimData . h \" # include \" SingleAnimationPlayData . h \" # include \" Animation / PoseSnapshot . h \" # include \" ClothingSystemRuntimeTypes . h \" # include \" ClothingSimulationInterface . h \" # include \" ClothingSimulationFactory . h \" # include \" Animation / AttributesRuntime . h \" # if WITH_ENGINE # include \" Engine / PoseWatchRenderData . h \" # endif # include \" SkeletalMeshComponent . generated . h \" class Error ; class FPrimitiveDrawInterface ; class FCanvas ; class FSceneView ; class UAnimInstance ; class UPhysicalMaterial ; class USkeletalMesh ; class USkeletalMeshComponent ; struct FClothCollisionSource ; struct FConstraintInstance ; struct FConstraintProfileProperties ; struct FNavigableGeometryExport ; struct FCompactPose ; enum class EClothingTeleportMode : uint8 ; # ifndef WITH_CLOTH_COLLISION_DETECTION # define WITH_CLOTH_COLLISION_DETECTION 1 # endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSkelMeshPhysicsCreatedMultiCast)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (typedef FOnSkelMeshPhysicsCreatedMultiCast::FDelegate FOnSkelMeshPhysicsCreated ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnAnimInitialized)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSkelMeshTeleportedMultiCast)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnBoneTransformsFinalized)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_ThreeParams(FOnLODRequiredBonesUpdateMulticast, USkeletalMeshComponent*, int32, const TArray<FBoneIndexType>&)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (typedef FOnLODRequiredBonesUpdateMulticast::FDelegate FOnLODRequiredBonesUpdate ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FAnimationEvaluationContext()",
    "kind": "Method",
    "detail": "Function (BoneOnly,ImmediateParent,ParentHierarchy } ; struct FAnimationEvaluationContext { UAnimInstance* AnimInstance ; UAnimInstance* PostProcessAnimInstance ; USkeletalMesh* SkeletalMesh ; TArray<FTransform> ComponentSpaceTransforms ; TArray<FTransform> BoneSpaceTransforms ; TArray<FTransform> CachedComponentSpaceTransforms ; TArray<FTransform> CachedBoneSpaceTransforms ; FVector RootBoneTranslation ; bool bDoInterpolation ; bool bDoEvaluation ; bool bDuplicateToCacheBones ; bool bDuplicateToCacheCurve ; bool bDuplicateToCachedAttributes ; bool bForceRefPose ; FBlendedHeapCurve Curve ; FBlendedHeapCurve CachedCurve ; UE::Anim::FMeshAttributeContainer CustomAttributes ; UE::Anim::FMeshAttributeContainer CachedCustomAttributes ;)",
    "insertText": "FAnimationEvaluationContext()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Copy(const FAnimationEvaluationContext& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (AnimInstance = Other . AnimInstance ; PostProcessAnimInstance = Other . PostProcessAnimInstance ; SkeletalMesh = Other . SkeletalMesh ; ComponentSpaceTransforms .)",
    "insertText": "Reset()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ComponentSpaceTransforms .)",
    "insertText": "Append(Other.ComponentSpaceTransforms)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (BoneSpaceTransforms .)",
    "insertText": "Append(Other.BoneSpaceTransforms)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CachedComponentSpaceTransforms .)",
    "insertText": "Append(Other.CachedComponentSpaceTransforms)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CachedBoneSpaceTransforms .)",
    "insertText": "Append(Other.CachedBoneSpaceTransforms)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (RootBoneTranslation = Other . RootBoneTranslation ; Curve .)",
    "insertText": "CopyFrom(Other.Curve)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (CachedCurve .)",
    "insertText": "CopyFrom(Other.CachedCurve)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (bDoInterpolation = Other . bDoInterpolation ; bDoEvaluation = Other . bDoEvaluation ; bDuplicateToCacheBones = Other . bDuplicateToCacheBones ; bDuplicateToCacheCurve = Other . bDuplicateToCacheCurve ; bDuplicateToCachedAttributes = Other . bDuplicateToCachedAttributes ; bForceRefPose = Other . bForceRefPose ; CustomAttributes .)",
    "insertText": "CopyFrom(Other.CustomAttributes)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (CachedCustomAttributes .)",
    "insertText": "CopyFrom(Other.CachedCustomAttributes)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { AnimationBlueprint)",
    "insertText": "UMETA(DisplayName=\"Use Animation Blueprint\"), AnimationSingleNode UMETA(DisplayName=\"Use Animation Asset\"), AnimationCustomMode UMETA(DisplayName = \"Use Custom Mode\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { SimulationUpatesComponentTransform,ComponentTransformIsKinematic } ; } enum class EAllowKinematicDeferral { AllowDeferral,DisallowDeferral } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "ExecuteTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTick(float DeltaTime, enum ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "DiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DiagnosticMessage()"
  },
  {
    "label": "DiagnosticContext()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "DiagnosticContext(bool bDetailed)"
  },
  {
    "label": "FClosestPointOnPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FSkeletalMeshComponentClothTickFunction> : public TStructOpsTypeTraitsBase2<FSkeletalMeshComponentClothTickFunction> { enum { WithCopy = false } ; } ; struct FClosestPointOnPhysicsAsset { FVector ClosestWorldPosition ; FVector Normal ; FName BoneName ; float Distance ;)",
    "insertText": "FClosestPointOnPhysicsAsset() : ClosestWorldPosition(FVector::ZeroVector) , Normal(FVector::ZeroVector) , BoneName(NAME_None) , Distance(-1.f)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup=(Rendering, Common), hidecategories=(Object, \"Mesh|SkeletalAsset\"), config=Engine, editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "SetSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeletalMesh(NewMesh, false)"
  },
  {
    "label": "GetSharedRequiredBones()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<struct FBoneContainer>)",
    "insertText": "GetSharedRequiredBones()"
  },
  {
    "label": "GetPostProcessAnimBPClassToBeUsed()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UAnimInstance>)",
    "insertText": "GetPostProcessAnimBPClassToBeUsed()"
  },
  {
    "label": "GetBoneSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform>)",
    "insertText": "GetBoneSpaceTransforms()"
  },
  {
    "label": "GetBoneSpaceTransformsView()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTransform>)",
    "insertText": "GetBoneSpaceTransformsView()"
  },
  {
    "label": "GetCachedComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (FBlendedHeapCurve AnimCurves ; const TArray<FTransform>&)",
    "insertText": "GetCachedComponentSpaceTransforms()"
  },
  {
    "label": "FindAttributeChecked()",
    "kind": "Method",
    "detail": "Function (protected : template<DataType,CustomAttributeType> bool)",
    "insertText": "FindAttributeChecked(const FName& BoneName, const FName& AttributeName, DataType DefaultValue, DataType& OutValue, ECustomBoneAttributeLookup LookupType)"
  },
  {
    "label": "GetAnimationModePropertyNameChecked()",
    "kind": "Method",
    "detail": "Function (public : const FName&)",
    "insertText": "GetAnimationModePropertyNameChecked()"
  },
  {
    "label": "GetSkeletalMeshAssetPropertyNameChecked()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FName)",
    "insertText": "GetSkeletalMeshAssetPropertyNameChecked()"
  },
  {
    "label": "CreateBodySetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBodySetup()"
  },
  {
    "label": "SendRenderDebugPhysics()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING void)",
    "insertText": "SendRenderDebugPhysics(FPrimitiveSceneProxy* OverrideSceneProxy = nullptr)"
  },
  {
    "label": "FPendingRadialForces()",
    "kind": "Method",
    "detail": "Function (struct FPendingRadialForces { enum EType { AddImpulse,AddForce } ; FVector Origin ; float Radius ; float Strength ; ERadialImpulseFalloff Falloff ; bool bIgnoreMass ; EType Type ; int32 FrameNum ;)",
    "insertText": "FPendingRadialForces(FVector InOrigin, float InRadius, float InStrength, ERadialImpulseFalloff InFalloff, bool InIgnoreMass, EType InType) : Origin(InOrigin) , Radius(InRadius) , Strength(InStrength) , Falloff(InFalloff) , bIgnoreMass(InIgnoreMass) , Type(InType) , FrameNum(GFrameNumber)"
  },
  {
    "label": "GetPendingRadialForces()",
    "kind": "Method",
    "detail": "Function (} } ; const TArray<FPendingRadialForces>&)",
    "insertText": "GetPendingRadialForces()"
  },
  {
    "label": "SetAnimInstanceClass_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetAnimInstanceClass_Internal(const TSubclassOf<UAnimInstance>& InAnimClass)"
  },
  {
    "label": "GetLinkedAnimInstances()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS const TArray<UAnimInstance*>&)",
    "insertText": "GetLinkedAnimInstances()"
  },
  {
    "label": "ResetToRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToRefPose()"
  },
  {
    "label": "GetLinkedAnimGraphInstancesByTag()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "GetLinkedAnimGraphInstancesByTag(InTag, OutSubInstances)"
  },
  {
    "label": "LinkAnimGraphByTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAnimGraphByTag(InTag, InClass)"
  },
  {
    "label": "LinkAnimClassLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAnimClassLayers(InClass)"
  },
  {
    "label": "UnlinkAnimClassLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkAnimClassLayers(InClass)"
  },
  {
    "label": "ForEachAnimInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachAnimInstance(TFunctionRef<void(UAnimInstance*)> InFunction)"
  },
  {
    "label": "BindClothToLeaderPoseComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindClothToLeaderPoseComponent()"
  },
  {
    "label": "UnbindClothFromLeaderPoseComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindClothFromLeaderPoseComponent(bRestoreSimulationSpace)"
  },
  {
    "label": "GetUpdateAnimationInEditor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetUpdateAnimationInEditor()"
  },
  {
    "label": "SkelMeshCompOnParticleSystemFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC)"
  },
  {
    "label": "GetSingleNodeInstance()",
    "kind": "Method",
    "detail": "Function (class UAnimSingleNodeInstance*)",
    "insertText": "GetSingleNodeInstance()"
  },
  {
    "label": "InitializeAnimScriptInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeAnimScriptInstance(bool bForceReinit = true, bool bInDeferRootNodeInitialization = false)"
  },
  {
    "label": "IsWindEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindEnabled()"
  },
  {
    "label": "ReportAnimNotifyError()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ReportAnimNotifyError(const FText& Error, UObject* InSourceNotify)"
  },
  {
    "label": "ClearAnimNotifyErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAnimNotifyErrors(UObject* InSourceNotify)"
  },
  {
    "label": "SetRootBodyIndex()",
    "kind": "Method",
    "detail": "Function (} # endif public : struct { int32 BodyIndex ; FTransform TransformToRoot ; } RootBodyData ; void)",
    "insertText": "SetRootBodyIndex(int32 InBodyIndex)"
  },
  {
    "label": "ResetRootBodyIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRootBodyIndex()"
  },
  {
    "label": "ComputeTeleportRotationThresholdInRadians()",
    "kind": "Method",
    "detail": "Function (float ClothTeleportCosineThresholdInRad ; float ClothTeleportDistThresholdSquared ; void)",
    "insertText": "ComputeTeleportRotationThresholdInRadians()"
  },
  {
    "label": "ComputeTeleportDistanceThresholdInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTeleportDistanceThresholdInRadians()"
  },
  {
    "label": "PoseTickedThisFrame()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "PoseTickedThisFrame()"
  },
  {
    "label": "IsClothBoundToLeaderComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClothBoundToLeaderComponent()"
  },
  {
    "label": "GetClothingSimulation()",
    "kind": "Method",
    "detail": "Function (} const IClothingSimulation*)",
    "insertText": "GetClothingSimulation()"
  },
  {
    "label": "GetClothingSimulationContext()",
    "kind": "Method",
    "detail": "Function (const IClothingSimulationContext*)",
    "insertText": "GetClothingSimulationContext()"
  },
  {
    "label": "CompleteParallelClothSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteParallelClothSimulation()"
  },
  {
    "label": "GetCurrentClothingData_GameThread()",
    "kind": "Method",
    "detail": "Function (const TMap<int32,FClothSimulData>&)",
    "insertText": "GetCurrentClothingData_GameThread()"
  },
  {
    "label": "GetCurrentClothingData_AnyThread()",
    "kind": "Method",
    "detail": "Function (const TMap<int32,FClothSimulData>&)",
    "insertText": "GetCurrentClothingData_AnyThread()"
  },
  {
    "label": "WaitForExistingParallelClothSimulation_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForExistingParallelClothSimulation_GameThread()"
  },
  {
    "label": "UpdateClothSimulationContext()",
    "kind": "Method",
    "detail": "Function (private : FSkeletalMeshComponentClothTickFunction ; class FParallelClothCompletionTask ; class UDebugSkelMeshComponent ; void)",
    "insertText": "UpdateClothSimulationContext(float InDeltaTime)"
  },
  {
    "label": "ShouldWaitForClothInTickFunction()",
    "kind": "Method",
    "detail": "Function (TArray<FClothCollisionSource> ClothCollisionSources ; FGraphEventRef ParallelClothTask ; bool)",
    "insertText": "ShouldWaitForClothInTickFunction()"
  },
  {
    "label": "HandleExistingParallelClothSimulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExistingParallelClothSimulation()"
  },
  {
    "label": "WritebackClothingSimulationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritebackClothingSimulationData()"
  },
  {
    "label": "GetClothingSimFactory()",
    "kind": "Method",
    "detail": "Function (UClothingSimulationFactory*)",
    "insertText": "GetClothingSimFactory()"
  },
  {
    "label": "OnConstraintBrokenWrapper()",
    "kind": "Method",
    "detail": "Function (protected : TMap<int32,FClothSimulData> CurrentSimulationData ; private : void)",
    "insertText": "OnConstraintBrokenWrapper(int32 ConstraintIndex)"
  },
  {
    "label": "OnPlasticDeformationWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlasticDeformationWrapper(int32 ConstraintIndex)"
  },
  {
    "label": "GetMorphTargetCurves()",
    "kind": "Method",
    "detail": "Function (TMap<FName,float> MorphTargetCurves ; public : const TMap<FName,float>&)",
    "insertText": "GetMorphTargetCurves()"
  },
  {
    "label": "ShouldOnlyTickMontages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOnlyTickMontages(const float DeltaTime)"
  },
  {
    "label": "ShouldOnlyTickMontagesAndRefreshBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOnlyTickMontagesAndRefreshBones(const float DeltaTime)"
  },
  {
    "label": "ShouldTickAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTickAnimation()"
  },
  {
    "label": "TickAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAnimation(float DeltaTime, bool bNeedsValidRootMotion)"
  },
  {
    "label": "TickAnimInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAnimInstances(float DeltaTime, bool bNeedsValidRootMotion)"
  },
  {
    "label": "TickClothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickClothing(float DeltaTime, FTickFunction& ThisTickFunction)"
  },
  {
    "label": "GetUpdateClothSimulationData_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUpdateClothSimulationData_AnyThread(TMap<int32, FClothSimulData>& OutClothSimulData, FMatrix& OutLocalToWorld, float& OutClothBlendWeight)"
  },
  {
    "label": "RemoveAllClothingActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllClothingActors()"
  },
  {
    "label": "ReleaseAllClothingResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAllClothingResources()"
  },
  {
    "label": "DebugDrawClothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawClothing(FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DebugDrawClothingTexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawClothingTexts(FCanvas* Canvas, const FSceneView* SceneView)"
  },
  {
    "label": "UpdatePoseWatches()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdatePoseWatches()"
  },
  {
    "label": "SetNotifyRigidBodyCollision()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNodePoseWatch> PoseWatches ; # endif void)",
    "insertText": "SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)"
  },
  {
    "label": "RecalcRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredBones(int32 LODIndex)"
  },
  {
    "label": "ComputeRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeRequiredBones(TArray<FBoneIndexType>& OutRequiredBones, TArray<FBoneIndexType>& OutFillComponentSpaceTransformsRequiredBones, int32 LODIndex, bool bIgnorePhysicsAsset)"
  },
  {
    "label": "GetRequiredVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequiredVirtualBones(const USkeletalMesh* SkeletalMesh, TArray<FBoneIndexType>& OutRequiredBones)"
  },
  {
    "label": "ExcludeHiddenBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExcludeHiddenBones(const USkeletalMeshComponent* SkeletalMeshComponent, const USkeletalMesh* SkeletalMesh, TArray<FBoneIndexType>& OutRequiredBones)"
  },
  {
    "label": "GetShadowShapeRequiredBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadowShapeRequiredBones(const USkeletalMeshComponent* SkeletalMeshComponent, TArray<FBoneIndexType>& OutRequiredBones)"
  },
  {
    "label": "RecalcRequiredCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalcRequiredCurves()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSkeletalMeshPropertyChangedMulticaster)"
  },
  {
    "label": "RegisterOnSkeletalMeshPropertyChanged()",
    "kind": "Method",
    "detail": "Function (typedef FOnSkeletalMeshPropertyChangedMulticaster::FDelegate FOnSkeletalMeshPropertyChanged ; FDelegateHandle)",
    "insertText": "RegisterOnSkeletalMeshPropertyChanged(const FOnSkeletalMeshPropertyChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSkeletalMeshPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSkeletalMeshPropertyChanged(FDelegateHandle Handle)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "ValidateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateAnimation()"
  },
  {
    "label": "LoadedFromAnotherClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadedFromAnotherClass(const FName& OldClassName)"
  },
  {
    "label": "UpdateCollisionProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisionProfile()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "RegisterComponentTickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentTickFunctions(bool bRegister)"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "SetComponentTickEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComponentTickEnabled(bool bEnabled)"
  },
  {
    "label": "OnComponentDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentDestroyed(bool bDestroyingHierarchy)"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "RegisterEndPhysicsTick()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RegisterEndPhysicsTick(bool bRegister)"
  },
  {
    "label": "RequiresPreEndOfFrameSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresPreEndOfFrameSync()"
  },
  {
    "label": "OnPreEndOfFrameSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreEndOfFrameSync()"
  },
  {
    "label": "RegisterClothTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterClothTick(bool bRegister)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "IsAnySimulatingPhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnySimulatingPhysics()"
  },
  {
    "label": "OnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateTransform(EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "UpdateOverlapsImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOverlapsImpl(const TOverlapArrayView* PendingOverlaps=NULL, bool bDoNotifies=true, const TOverlapArrayView* OverlapsAtEndLocation=NULL)"
  },
  {
    "label": "ComponentOverlapMultiImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ComponentOverlapMultiImpl(TArray<struct FOverlapResult>& OutOverlaps, const class UWorld* InWorld, const FVector& Pos, const FQuat& Rot, ECollisionChannel TestChannel, const struct FComponentQueryParams& Params, const struct FCollisionObjectQueryParams& ObjectQueryParams = FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "ComponentOverlapComponentImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapComponentImpl(class UPrimitiveComponent* PrimComp, const FVector Pos, const FQuat& Quat, const FCollisionQueryParams& Params)"
  },
  {
    "label": "MoveComponentImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* OutHit = NULL, EMoveComponentFlags MoveFlags = MOVECOMP_NoFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (public : class UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "CanEditSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditSimulatePhysics()"
  },
  {
    "label": "IsSimulatingPhysics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulatingPhysics(FName BoneName = NAME_None)"
  },
  {
    "label": "GetBodyInstance()",
    "kind": "Method",
    "detail": "Function (FBodyInstance*)",
    "insertText": "GetBodyInstance(FName BoneName = NAME_None, bool bGetWelded = true, int32 Index = INDEX_NONE)"
  },
  {
    "label": "UpdatePhysicsToRBChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicsToRBChannels()"
  },
  {
    "label": "SetAllPhysicsAngularVelocityInRadians()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsAngularVelocityInRadians(FVector const& NewVel, bool bAddToCurrent = false)"
  },
  {
    "label": "SetAllPhysicsPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsPosition(FVector NewPos)"
  },
  {
    "label": "SetAllPhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsRotation(FRotator NewRot)"
  },
  {
    "label": "SetAllPhysicsRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsRotation(const FQuat& NewRot)"
  },
  {
    "label": "WakeAllRigidBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeAllRigidBodies()"
  },
  {
    "label": "PutAllRigidBodiesToSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PutAllRigidBodiesToSleep()"
  },
  {
    "label": "IsAnyRigidBodyAwake()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyRigidBodyAwake()"
  },
  {
    "label": "SetEnableGravity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableGravity(bool bGravityEnabled)"
  },
  {
    "label": "IsGravityEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGravityEnabled()"
  },
  {
    "label": "OnComponentCollisionSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentCollisionSettingsChanged(bool bUpdateOverlaps=true)"
  },
  {
    "label": "SetPhysMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial)"
  },
  {
    "label": "GetSquaredDistanceToCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSquaredDistanceToCollision(const FVector& Point, float& OutSquaredDistance, FVector& OutClosestPointOnCollision)"
  },
  {
    "label": "GetClosestPointOnPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClosestPointOnPhysicsAsset(const FVector& WorldPosition, FClosestPointOnPhysicsAsset& ClosestPointOnPhysicsAsset, bool bApproximate)"
  },
  {
    "label": "LineTraceComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FCollisionQueryParams& Params)"
  },
  {
    "label": "SweepComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepComponent(FHitResult& OutHit, const FVector Start, const FVector End, const FQuat& ShapRotation, const FCollisionShape& CollisionShape, bool bTraceComplex=false)"
  },
  {
    "label": "OverlapComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapComponent(const FVector& Pos, const FQuat& Rot, const FCollisionShape& CollisionShape)"
  },
  {
    "label": "SetSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulatePhysics(bool bEnabled)"
  },
  {
    "label": "AddRadialImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialImpulse(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bVelChange=false)"
  },
  {
    "label": "AddRadialForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForce(FVector Origin, float Radius, float Strength, ERadialImpulseFalloff Falloff, bool bAccelChange=false)"
  },
  {
    "label": "SetAllPhysicsLinearVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllPhysicsLinearVelocity(FVector NewVel,bool bAddToCurrent = false)"
  },
  {
    "label": "SetAllMassScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllMassScale(float InMassScale = 1.f)"
  },
  {
    "label": "GetMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMass()"
  },
  {
    "label": "SetAllUseCCD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllUseCCD(bool InUseCCD)"
  },
  {
    "label": "CalculateMass()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateMass(FName BoneName = NAME_None)"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShown(const FEngineShowFlags& ShowFlags)"
  },
  {
    "label": "ComponentIsTouchingSelectionBox()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "ComponentIsTouchingSelectionBox(const FBox& InSelBBox, const bool bConsiderOnlyBSP, const bool bMustEncompassEntireComponent)"
  },
  {
    "label": "ComponentIsTouchingSelectionFrustum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentIsTouchingSelectionFrustum(const FConvexVolume& InFrustum, const bool bConsiderOnlyBSP, const bool bMustEncompassEntireComponent)"
  },
  {
    "label": "GetComponentTransformFromBodyInstance()",
    "kind": "Method",
    "detail": "Function (# endif protected : FTransform)",
    "insertText": "GetComponentTransformFromBodyInstance(FBodyInstance* UseBI)"
  },
  {
    "label": "UpdateLODStatus()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "UpdateLODStatus()"
  },
  {
    "label": "SetPredictedLODLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPredictedLODLevel(int32 InPredictedLODLevel)"
  },
  {
    "label": "UpdateVisualizeLODString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisualizeLODString(FString& DebugString)"
  },
  {
    "label": "RefreshBoneTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneTransforms(FActorComponentTickFunction* TickFunction = NULL)"
  },
  {
    "label": "DispatchParallelTickPose()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DispatchParallelTickPose(FActorComponentTickFunction* TickFunction)"
  },
  {
    "label": "TickPose()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TickPose(float DeltaTime, bool bNeedsValidRootMotion)"
  },
  {
    "label": "UpdateFollowerComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFollowerComponent()"
  },
  {
    "label": "ShouldUpdateTransform()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ShouldUpdateTransform(bool bLODHasChanged)"
  },
  {
    "label": "ShouldTickPose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTickPose()"
  },
  {
    "label": "AllocateTransformData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateTransformData()"
  },
  {
    "label": "DeallocateTransformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateTransformData()"
  },
  {
    "label": "HideBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideBone(int32 BoneIndex, EPhysBodyOp PhysBodyOption)"
  },
  {
    "label": "UnHideBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnHideBone(int32 BoneIndex)"
  },
  {
    "label": "SetPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset,bool bForceReInit = false)"
  },
  {
    "label": "SetSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose = true)"
  },
  {
    "label": "SetSkinnedAssetAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkinnedAssetAndUpdate(class USkinnedAsset* InSkinnedAsset, bool bReinitPose = true)"
  },
  {
    "label": "GetSkinnedVertexPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetSkinnedVertexPosition(USkeletalMeshComponent* Component, int32 VertexIndex, const FSkeletalMeshLODRenderData& Model, const FSkinWeightVertexBuffer& SkinWeightBuffer)"
  },
  {
    "label": "GetSkinnedVertexPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetSkinnedVertexPosition(USkeletalMeshComponent* Component, int32 VertexIndex, const FSkeletalMeshLODRenderData& Model, const FSkinWeightVertexBuffer& SkinWeightBuffer, TArray<FMatrix44f>& CachedRefToLocals)"
  },
  {
    "label": "ComputeSkinnedPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSkinnedPositions(USkeletalMeshComponent* Component, TArray<FVector3f> & OutPositions, TArray<FMatrix44f>& CachedRefToLocals, const FSkeletalMeshLODRenderData& Model, const FSkinWeightVertexBuffer& SkinWeightBuffer)"
  },
  {
    "label": "GetSkinnedTangentBasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSkinnedTangentBasis(USkeletalMeshComponent* Component, int32 VertexIndex, const FSkeletalMeshLODRenderData& Model, const FSkinWeightVertexBuffer& SkinWeightBuffer, TArray<FMatrix44f>& CachedRefToLocals, FVector3f& OutTangentX, FVector3f& OutTangentY, FVector3f& OutTangentZ)"
  },
  {
    "label": "ComputeSkinnedTangentBasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSkinnedTangentBasis(USkeletalMeshComponent* Component, TArray<FVector3f>& OutTangenXYZ, TArray<FMatrix44f>& CachedRefToLocals, const FSkeletalMeshLODRenderData& Model, const FSkinWeightVertexBuffer& SkinWeightBuffer)"
  },
  {
    "label": "IsPlayingRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingRootMotion()"
  },
  {
    "label": "IsPlayingNetworkedRootMotionMontage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingNetworkedRootMotionMontage()"
  },
  {
    "label": "IsPlayingRootMotionFromEverything()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingRootMotionFromEverything()"
  },
  {
    "label": "FinalizeBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeBoneTransform()"
  },
  {
    "label": "SetRefPoseOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRefPoseOverride(const TArray<FTransform>& NewRefPoseTransforms)"
  },
  {
    "label": "ClearRefPoseOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRefPoseOverride()"
  },
  {
    "label": "ShouldEvaluatePostProcessAnimBP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEvaluatePostProcessAnimBP()"
  },
  {
    "label": "ShouldUpdatePostProcessInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdatePostProcessInstance()"
  },
  {
    "label": "ShouldPostUpdatePostProcessInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPostUpdatePostProcessInstance()"
  },
  {
    "label": "ShouldEvaluatePostProcessInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEvaluatePostProcessInstance()"
  },
  {
    "label": "UpdateRBJointMotors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRBJointMotors()"
  },
  {
    "label": "PerformAnimationEvaluation()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PerformAnimationEvaluation(const USkeletalMesh* InSkeletalMesh, UAnimInstance* InAnimInstance, TArray<FTransform>& OutSpaceBases, TArray<FTransform>& OutBoneSpaceTransforms, FVector& OutRootBoneTranslation, FBlendedHeapCurve& OutCurve, UE::Anim::FMeshAttributeContainer& OutAttributes)"
  },
  {
    "label": "PerformAnimationProcessing()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PerformAnimationProcessing(const USkeletalMesh* InSkeletalMesh, UAnimInstance* InAnimInstance, bool bInDoEvaluation, bool bInForceRefPose, TArray<FTransform>& OutSpaceBases, TArray<FTransform>& OutBoneSpaceTransforms, FVector& OutRootBoneTranslation, FBlendedHeapCurve& OutCurve, UE::Anim::FMeshAttributeContainer& OutAttributes)"
  },
  {
    "label": "EvaluatePostProcessMeshInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePostProcessMeshInstance(TArray<FTransform>& OutBoneSpaceTransforms, FCompactPose& InOutPose, FBlendedHeapCurve& OutCurve, const USkeletalMesh* InSkeletalMesh, FVector& OutRootBoneTranslation, UE::Anim::FHeapAttributeContainer& OutAttributes, bool bInForceRefPose)"
  },
  {
    "label": "PostAnimEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAnimEvaluation(FAnimationEvaluationContext& EvaluationContext)"
  },
  {
    "label": "InitCollisionRelationships()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCollisionRelationships()"
  },
  {
    "label": "TermCollisionRelationships()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermCollisionRelationships()"
  },
  {
    "label": "PerformBlendPhysicsBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformBlendPhysicsBones(Bones, AnimEvaluationContext.BoneSpaceTransforms, AnimEvaluationContext.BoneSpaceTransforms)"
  },
  {
    "label": "BlendInPhysicsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendInPhysicsInternal(ThisTickFunction)"
  },
  {
    "label": "InitArticulated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitArticulated(FPhysScene* PhysScene)"
  },
  {
    "label": "InstantiatePhysicsAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiatePhysicsAsset(const UPhysicsAsset& PhysAsset, const FVector& Scale3D, TArray<FBodyInstance*>& OutBodies, TArray<FConstraintInstance*>& OutConstraints, FPhysScene* PhysScene = nullptr, USkeletalMeshComponent* OwningComponent = nullptr, int32 UseRootBodyIndex = INDEX_NONE, const FPhysicsAggregateHandle& UseAggregate = FPhysicsAggregateHandle())"
  },
  {
    "label": "InstantiatePhysicsAssetBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiatePhysicsAssetBodies(const UPhysicsAsset& PhysAsset, TArray<FBodyInstance*>& OutBodies, FPhysScene* PhysScene = nullptr, USkeletalMeshComponent* OwningComponent = nullptr, int32 UseRootBodyIndex = INDEX_NONE, const FPhysicsAggregateHandle& UseAggregate = FPhysicsAggregateHandle())"
  },
  {
    "label": "InstantiatePhysicsAssetRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiatePhysicsAssetRefPose(const UPhysicsAsset& PhysAsset, const FVector& Scale3D, TArray<FBodyInstance*>& OutBodies, TArray<FConstraintInstance*>& OutConstraints, FPhysScene* PhysScene = nullptr, USkeletalMeshComponent* OwningComponent = nullptr, int32 UseRootBodyIndex = INDEX_NONE, const FPhysicsAggregateHandle& UseAggregate = FPhysicsAggregateHandle(), bool bCreateBodiesInRefPose = false)"
  },
  {
    "label": "TermArticulated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermArticulated()"
  },
  {
    "label": "FindRootBodyIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindRootBodyIndex()"
  },
  {
    "label": "FindConstraintInstance()",
    "kind": "Method",
    "detail": "Function (FConstraintInstance*)",
    "insertText": "FindConstraintInstance(FName ConName)"
  },
  {
    "label": "GetConstraintInstanceByIndex()",
    "kind": "Method",
    "detail": "Function (FConstraintInstance*)",
    "insertText": "GetConstraintInstanceByIndex(uint32 Index)"
  },
  {
    "label": "GetTotalMassBelowBone()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalMassBelowBone(FName InBoneName)"
  },
  {
    "label": "SetCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionObjectType(ECollisionChannel Channel)"
  },
  {
    "label": "SetAllBodiesCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllBodiesCollisionObjectType(ECollisionChannel NewChannel)"
  },
  {
    "label": "SetAllBodiesNotifyRigidBodyCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllBodiesNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)"
  },
  {
    "label": "GetConstraintProfilePropertiesOrDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetConstraintProfilePropertiesOrDefault(FConstraintProfileProperties& OutProperties, FName JointName, FName ProfileName)"
  },
  {
    "label": "SetNamedMotorsAngularPositionDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, const TArray<FName>& BoneNames, bool bSetOtherBodiesToComplement = false)"
  },
  {
    "label": "SetNamedMotorsAngularVelocityDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, const TArray<FName>& BoneNames, bool bSetOtherBodiesToComplement = false)"
  },
  {
    "label": "GetWeldedBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeldedBodies(TArray<FBodyInstance*> & OutWeldedBodies, TArray<FName> & OutChildrenLabels, bool bIncludingAutoWeld = false)"
  },
  {
    "label": "ForEachBodyBelow()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForEachBodyBelow(FName BoneName, bool bIncludeSelf, bool bSkipCustomType, TFunctionRef<void(FBodyInstance*)> Func)"
  },
  {
    "label": "SetForceRefPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceRefPose(bool bNewForceRefPose)"
  },
  {
    "label": "UpdateHasValidBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHasValidBodies()"
  },
  {
    "label": "UpdateBoneBodyMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoneBodyMapping()"
  },
  {
    "label": "InitSkelControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkelControls()"
  },
  {
    "label": "FindConstraintIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindConstraintIndex(FName ConstraintName)"
  },
  {
    "label": "UpdateKinematicBonesToAnim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKinematicBonesToAnim(const TArray<FTransform>& InComponentSpaceTransforms, ETeleportType Teleport, bool bNeedsSkinning, EAllowKinematicDeferral DeferralAllowed = EAllowKinematicDeferral::AllowDeferral)"
  },
  {
    "label": "UpdateMeshForBrokenConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMeshForBrokenConstraints()"
  },
  {
    "label": "NotifySkelControlBeyondLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt)"
  },
  {
    "label": "GetClosestCollidingRigidBodyLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetClosestCollidingRigidBodyLocation(const FVector& TestLocation)"
  },
  {
    "label": "ApplyDeltaToAllPhysicsTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToAllPhysicsTransforms(const FVector& DeltaLocation, const FQuat& DeltaRotation)"
  },
  {
    "label": "AddClothingBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClothingBounds(FBoxSphereBounds& InOutBounds, const FTransform& LocalToWorld)"
  },
  {
    "label": "CheckClothTeleport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckClothTeleport()"
  },
  {
    "label": "UpdateClothStateAndSimulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothStateAndSimulate(float DeltaTime, FTickFunction& ThisTickFunction)"
  },
  {
    "label": "UpdateClothTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothTransform(ETeleportType TeleportType)"
  },
  {
    "label": "UpdateClothTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothTransform()"
  },
  {
    "label": "UpdateClothTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothTransform(ETeleportType::None)"
  },
  {
    "label": "UpdateClothCollision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateClothCollision()"
  },
  {
    "label": "GetClothSimulatedPosition_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetClothSimulatedPosition_GameThread(const FGuid& AssetGuid, int32 VertexIndex, FVector& OutSimulPos)"
  },
  {
    "label": "GetClothCollisionSources()",
    "kind": "Method",
    "detail": "Function (const TArray<FClothCollisionSource>&)",
    "insertText": "GetClothCollisionSources()"
  },
  {
    "label": "RemoveClothCollisionSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClothCollisionSources(InSourceComponent)"
  },
  {
    "label": "CopyClothCollisionSources()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_CLOTH_COLLISION_DETECTION void)",
    "insertText": "CopyClothCollisionSources()"
  },
  {
    "label": "ProcessClothCollisionWithEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClothCollisionWithEnvironment()"
  },
  {
    "label": "CopyClothCollisionsToChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyClothCollisionsToChildren()"
  },
  {
    "label": "CopyChildrenClothCollisionsToParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChildrenClothCollisionsToParent()"
  },
  {
    "label": "FindClothCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindClothCollisions(FClothCollisionData& OutCollisions)"
  },
  {
    "label": "IsAnimBlueprintInstanced()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "IsAnimBlueprintInstanced()"
  },
  {
    "label": "ClearAnimScriptInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAnimScriptInstance()"
  },
  {
    "label": "ClearCachedAnimProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedAnimProperties()"
  },
  {
    "label": "NeedToSpawnAnimScriptInstance()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "NeedToSpawnAnimScriptInstance()"
  },
  {
    "label": "NeedToSpawnPostPhysicsInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedToSpawnPostPhysicsInstance(bool bForceReinit)"
  },
  {
    "label": "ShouldBlendPhysicsBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBlendPhysicsBones()"
  },
  {
    "label": "ExtractCollisionsForCloth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractCollisionsForCloth(USkeletalMeshComponent* SourceComponent, UPhysicsAsset* PhysicsAsset, USkeletalMeshComponent* DestClothComponent, FClothCollisionData& OutCollisions, FClothCollisionSource& ClothCollisionSource)"
  },
  {
    "label": "OnSyncComponentToRBPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSyncComponentToRBPhysics()"
  },
  {
    "label": "OnClearAnimScriptInstance()",
    "kind": "Method",
    "detail": "Function (} FSkeletalMeshComponentEndPhysicsTickFunction EndPhysicsTickFunction ; private : void)",
    "insertText": "OnClearAnimScriptInstance()"
  },
  {
    "label": "EndPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (} ; struct FSkeletalMeshComponentEndPhysicsTickFunction ; void)",
    "insertText": "EndPhysicsTickComponent(FSkeletalMeshComponentEndPhysicsTickFunction& ThisTickFunction)"
  },
  {
    "label": "EvaluateAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAnimation(const USkeletalMesh* InSkeletalMesh, UAnimInstance* InAnimInstance, bool bInForceRefPose, FVector& OutRootBoneTranslation, FBlendedHeapCurve& OutCurve, FCompactPose& OutPose, UE::Anim::FHeapAttributeContainer& OutAttributes)"
  },
  {
    "label": "DispatchParallelEvaluationTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchParallelEvaluationTasks(FActorComponentTickFunction* TickFunction)"
  },
  {
    "label": "DoParallelEvaluationTasks_OnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoParallelEvaluationTasks_OnGameThread()"
  },
  {
    "label": "SwapEvaluationContextBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapEvaluationContextBuffers()"
  },
  {
    "label": "ParallelDuplicateAndInterpolate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelDuplicateAndInterpolate(FAnimationEvaluationContext& InAnimEvaluationContext)"
  },
  {
    "label": "DoAnyPhysicsBodiesHaveWeight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoAnyPhysicsBodiesHaveWeight()"
  },
  {
    "label": "RefreshMorphTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshMorphTargets()"
  },
  {
    "label": "GetWindForCloth_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindForCloth_GameThread(FVector& WindVector, float& WindAdaption)"
  },
  {
    "label": "InstantiatePhysicsAsset_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiatePhysicsAsset_Internal(const UPhysicsAsset& PhysAsset, const FVector& Scale3D, TArray<FBodyInstance*>& OutBodies, TArray<FConstraintInstance*>& OutConstraints, TFunctionRef<FTransform(int32)> BoneTransformGetter, FPhysScene* PhysScene = nullptr, USkeletalMeshComponent* OwningComponent = nullptr, int32 UseRootBodyIndex = INDEX_NONE, const FPhysicsAggregateHandle& UseAggregate = FPhysicsAggregateHandle())"
  },
  {
    "label": "InstantiatePhysicsAssetBodies_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiatePhysicsAssetBodies_Internal(const UPhysicsAsset& PhysAsset, TArray<FBodyInstance*>& OutBodies, TFunctionRef<FTransform(int32)> BoneTransformGetter, TMap<FName, FBodyInstance*>* OutNameToBodyMap = nullptr, FPhysScene* PhysScene = nullptr, USkeletalMeshComponent* OwningComponent = nullptr, int32 UseRootBodyIndex = INDEX_NONE, const FPhysicsAggregateHandle& UseAggregate = FPhysicsAggregateHandle())"
  },
  {
    "label": "ParallelAnimationEvaluation()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef ParallelAnimationEvaluationTask ; FGraphEventRef ParallelBlendPhysicsCompletionTask ; FAnimationEvaluationContext AnimEvaluationContext ; public : void)",
    "insertText": "ParallelAnimationEvaluation()"
  },
  {
    "label": "CompleteParallelAnimationEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteParallelAnimationEvaluation(bool bDoPostAnimEvaluation)"
  },
  {
    "label": "IsRunningParallelEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningParallelEvaluation()"
  },
  {
    "label": "HandleExistingParallelEvaluationTask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleExistingParallelEvaluationTask(bool bBlockOnTask, bool bPerformPostAnimEvaluation)"
  },
  {
    "label": "ApplyAnimationCurvesToComponent()",
    "kind": "Method",
    "detail": "Function (class FSkeletalMeshComponentDetails ; void)",
    "insertText": "ApplyAnimationCurvesToComponent(const TMap<FName, float>* InMaterialParameterCurves, const TMap<FName, float>* InAnimationMorphCurves)"
  },
  {
    "label": "CanSimulateClothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSimulateClothing()"
  },
  {
    "label": "DoInstancePreEvaluation()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DoInstancePreEvaluation()"
  },
  {
    "label": "DoInstancePostEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInstancePostEvaluation()"
  },
  {
    "label": "ShouldRunClothTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunClothTick()"
  },
  {
    "label": "AddFollowerPoseComponent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddFollowerPoseComponent(USkinnedMeshComponent* SkinnedMeshComponent)"
  },
  {
    "label": "RemoveFollowerPoseComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFollowerPoseComponent(USkinnedMeshComponent* SkinnedMeshComponent)"
  },
  {
    "label": "ShouldRunEndPhysicsTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRunEndPhysicsTick()"
  },
  {
    "label": "UpdateEndPhysicsTickRegisteredState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEndPhysicsTickRegisteredState()"
  },
  {
    "label": "UpdateClothTickRegisteredState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothTickRegisteredState()"
  },
  {
    "label": "UpdateDuringAnimationTickRegisteredState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDuringAnimationTickRegisteredState()"
  },
  {
    "label": "FinalizePoseEvaluationResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizePoseEvaluationResult(const USkeletalMesh* InMesh, TArray<FTransform>& OutBoneSpaceTransforms, FVector& OutRootBoneTranslation, FCompactPose& InFinalPose)"
  },
  {
    "label": "FinalizeAttributeEvaluationResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeAttributeEvaluationResults(const FBoneContainer& BoneContainer, const UE::Anim::FHeapAttributeContainer& FinalContainer, UE::Anim::FMeshAttributeContainer& OutContainer)"
  },
  {
    "label": "BlendInPhysicsInternal()",
    "kind": "Method",
    "detail": "Function (class FParallelBlendPhysicsTask ; void)",
    "insertText": "BlendInPhysicsInternal(FTickFunction& ThisTickFunction)"
  },
  {
    "label": "ParallelBlendPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelBlendPhysics()"
  },
  {
    "label": "PerformBlendPhysicsBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformBlendPhysicsBones(RequiredBones, AnimEvaluationContext.ComponentSpaceTransforms, AnimEvaluationContext.BoneSpaceTransforms)"
  },
  {
    "label": "PerformBlendPhysicsBones()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PerformBlendPhysicsBones(const TArray<FBoneIndexType>& InRequiredBones, TArray<FTransform>& InOutComponentSpaceTransforms, TArray<FTransform>& InOutBoneSpaceTransforms)"
  },
  {
    "label": "CompleteParallelBlendPhysics()",
    "kind": "Method",
    "detail": "Function (class FParallelClothTask ; class FParallelBlendPhysicsCompletionTask ; void)",
    "insertText": "CompleteParallelBlendPhysics()"
  },
  {
    "label": "FinalizeAnimationUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeAnimationUpdate()"
  },
  {
    "label": "UpdateClothTransformImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateClothTransformImp()"
  },
  {
    "label": "UpdateMorphTargetOverrideCurves()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateMorphTargetOverrideCurves()"
  },
  {
    "label": "ResetMorphTargetCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMorphTargetCurves()"
  },
  {
    "label": "ConvertLocalRootMotionToWorld()",
    "kind": "Method",
    "detail": "Function (public : FTransform)",
    "insertText": "ConvertLocalRootMotionToWorld(const FTransform& InTransform)"
  },
  {
    "label": "ConsumeRootMotion()",
    "kind": "Method",
    "detail": "Function (FRootMotionMovementParams)",
    "insertText": "ConsumeRootMotion()"
  },
  {
    "label": "ApplyEditedComponentSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ApplyEditedComponentSpaceTransforms()"
  },
  {
    "label": "ConsumeRootMotion_Internal()",
    "kind": "Method",
    "detail": "Function (# endif protected : FRootMotionMovementParams)",
    "insertText": "ConsumeRootMotion_Internal(float InAlpha)"
  },
  {
    "label": "GetAnimationCurves()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR FBlendedHeapCurve CurvesArray [ 2 ] ; public : const FBlendedHeapCurve&)",
    "insertText": "GetAnimationCurves()"
  },
  {
    "label": "UnregisterOnPhysicsCreatedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnPhysicsCreatedDelegate(const FDelegateHandle& DelegateHandle)"
  },
  {
    "label": "RegisterOnTeleportDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnTeleportDelegate(const FOnSkelMeshTeleported& Delegate)"
  },
  {
    "label": "UnregisterOnTeleportDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnTeleportDelegate(const FDelegateHandle& DelegateHandle)"
  },
  {
    "label": "RegisterOnBoneTransformsFinalizedDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnBoneTransformsFinalizedDelegate(const FOnBoneTransformsFinalizedMultiCast::FDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnBoneTransformsFinalizedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnBoneTransformsFinalizedDelegate(const FDelegateHandle& DelegateHandle)"
  },
  {
    "label": "RegisterOnLODRequiredBonesUpdate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnLODRequiredBonesUpdate(const FOnLODRequiredBonesUpdate& Delegate)"
  },
  {
    "label": "UnregisterOnLODRequiredBonesUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnLODRequiredBonesUpdate(const FDelegateHandle& DelegateHandle)"
  },
  {
    "label": "MarkRequiredCurveUpToDate()",
    "kind": "Method",
    "detail": "Function (# endif private : FOnSkelMeshPhysicsCreatedMultiCast OnSkelMeshPhysicsCreated ; FOnSkelMeshTeleportedMultiCast OnSkelMeshPhysicsTeleported ; FOnBoneTransformsFinalizedMultiCast OnBoneTransformsFinalizedMC ; FOnLODRequiredBonesUpdateMulticast OnLODRequiredBonesUpdate ; void)",
    "insertText": "MarkRequiredCurveUpToDate()"
  },
  {
    "label": "AreRequiredCurvesUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreRequiredCurvesUpToDate()"
  },
  {
    "label": "ConditionallyDispatchQueuedAnimEvents()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ConditionallyDispatchQueuedAnimEvents()"
  },
  {
    "label": "IsPostEvaluatingAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostEvaluatingAnimation()"
  },
  {
    "label": "GetPhysicsObjectByName()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObject*)",
    "insertText": "GetPhysicsObjectByName(const FName& Name)"
  },
  {
    "label": "GetAllPhysicsObjects()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::FPhysicsObject*>)",
    "insertText": "GetAllPhysicsObjects()"
  },
  {
    "label": "FPoseWatchDynamicData()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR struct FPoseWatchDynamicData { public :)",
    "insertText": "FPoseWatchDynamicData(USkeletalMeshComponent* InComponent)"
  },
  {
    "label": "AddLinkedInstance()",
    "kind": "Method",
    "detail": "Function (TArray<FAnimNodePoseWatch> PoseWatches ; } ; # endif struct FLinkedInstancesAdapter { void)",
    "insertText": "AddLinkedInstance(USkeletalMeshComponent* InComponent, UAnimInstance* InAnimInstance)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (InComponent -> LinkedInstances .)",
    "insertText": "AddUnique(InAnimInstance)"
  },
  {
    "label": "RemoveLinkedInstance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveLinkedInstance(USkeletalMeshComponent* InComponent, UAnimInstance* InAnimInstance)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InComponent -> LinkedInstances .)",
    "insertText": "Remove(InAnimInstance)"
  },
  {
    "label": "ResetLinkedInstance()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetLinkedInstance(USkeletalMeshComponent* InComponent)"
  }
]