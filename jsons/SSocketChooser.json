[
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "SSocketChooserPopup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSocketChooserPopup"
  },
  {
    "label": "FSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSocketInfo"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Components / SceneComponent . h \" # include \" Layout / SlateRect . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Styling / AppStyle . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Input / SSearchBox . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" class UStaticMesh ; class SSocketChooserPopup : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSocketChosen, FName)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (struct FSocketInfo { FComponentSocketDescription Description ; FBasicStringFilterExpressionContext FilterContext ; TSharedRef<FSocketInfo>)",
    "insertText": "Make(FComponentSocketDescription Description)"
  },
  {
    "label": "FSocketInfo()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FSocketInfo(FComponentSocketDescription InDescription) : Description(InDescription) , FilterContext(InDescription.Name.ToString())"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; TWeakObjectPtr<USceneComponent> SceneComponent ; TWeakObjectPtr<UStaticMesh> StaticMesh ; TArray<TSharedPtr<FSocketInfo>> Sockets ; TArray<TSharedPtr<FSocketInfo>> FilteredSockets ; FOnSocketChosen OnSocketChosen ; TSharedPtr<SListView<TSharedPtr<FSocketInfo>>> SocketListView ; TSharedPtr<FTextFilterExpressionEvaluator> TextFilterPtr ; TSharedPtr<SWidget> SearchBox ;)",
    "insertText": "SLATE_BEGIN_ARGS(SSocketChooserPopup ) : _SceneComponent(NULL) , _ProvideNoSocketOption(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(USceneComponent*, SceneComponent ) SLATE_EVENT( FOnSocketChosen, OnSocketChosen ) SLATE_ARGUMENT(bool, ProvideNoSocketOption) SLATE_END_ARGS()"
  },
  {
    "label": "MakeItemWidget()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<ITableRow>)",
    "insertText": "MakeItemWidget(TSharedPtr<FSocketInfo> SocketInfo, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* Brush =)",
    "insertText": "GetBrush(TEXT(\"SocketIcon.None\"))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Brush =)",
    "insertText": "GetBrush(TEXT(\"SocketIcon.Socket\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SocketInfo->Description.Type == EComponentSocketType::Bone)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (Brush =)",
    "insertText": "GetBrush(TEXT(\"SocketIcon.Bone\"))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "SNew(STableRow< TSharedPtr<FSocketInfo> >, OwnerTable ) . Content() [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() .Padding(2) .VAlign(VAlign_Center) [ SNew(SImage) .Image(Brush) ] +SHorizontalBox::Slot() .FillWidth(1.f) .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(FText::FromName(SocketInfo->Description.Name)) .HighlightText_Lambda([this]() { return TextFilterPtr->GetFilterText(); })"
  },
  {
    "label": "SelectedSocket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectedSocket(TSharedPtr<FSocketInfo> SocketInfo, ESelectInfo::Type SelectType)"
  },
  {
    "label": "ChooseSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseSocket(SocketInfo)"
  },
  {
    "label": "ChooseSocket()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ChooseSocket(TSharedPtr<FSocketInfo> SocketInfo)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FName SocketName = SocketInfo -> Description . Name ;)",
    "insertText": "Get().DismissAllMenus()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnSocketChosen .)",
    "insertText": "Execute(SocketName)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OnSocketChosen = InArgs . _OnSocketChosen ; SceneComponent = InArgs . _SceneComponent ;)",
    "insertText": "if(InArgs._ProvideNoSocketOption)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sockets .)",
    "insertText": "Add(SSocketChooserPopup::FSocketInfo::Make(FComponentSocketDescription(NAME_None, EComponentSocketType::Invalid)))"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (} TextFilterPtr =)",
    "insertText": "MakeShareable(new FTextFilterExpressionEvaluator(ETextFilterExpressionEvaluatorMode::BasicString))"
  },
  {
    "label": "QuerySupportedSockets()",
    "kind": "Method",
    "detail": "Function (TArray<FComponentSocketDescription> Descriptions ; SceneComponent ->)",
    "insertText": "QuerySupportedSockets(Descriptions)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sockets .)",
    "insertText": "Add(SSocketChooserPopup::FSocketInfo::Make(*DescriptionIt))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} FilteredSockets .)",
    "insertText": "Append(Sockets)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} this -> ChildSlot [)",
    "insertText": "SNew(SBorder) .BorderImage(FAppStyle::GetBrush(TEXT(\"Menu.Background\"))) .Padding(5) .Content() [ SNew(SVerticalBox) +SVerticalBox::Slot() .AutoHeight() .Padding(0.0f, 1.0f) [ SNew(STextBlock) .Font( FAppStyle::GetFontStyle(TEXT(\"SocketChooser.TitleFont\")) ) .Text( NSLOCTEXT(\"SocketChooser\", \"ChooseSocketOrBoneLabel\", \"Choose Socket or Bone\") ) ] +SVerticalBox::Slot() .AutoHeight() .Padding(0.0f, 1.0f) [ SAssignNew(SearchBox, SSearchBox) .OnTextChanged(this, &SSocketChooserPopup::HandleSearchTextChanged) ] +SVerticalBox::Slot() .AutoHeight() .MaxHeight(512) [ SNew(SBox) .WidthOverride(256) .Content() [ SAssignNew(SocketListView, SListView< TSharedPtr<FSocketInfo> >) .ListItemsSource( &FilteredSockets) .OnGenerateRow( this, &SSocketChooserPopup::MakeItemWidget ) .OnSelectionChanged( this, &SSocketChooserPopup::SelectedSocket ) .SelectionMode(ESelectionMode::Single)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "CheckAndGetWindowPtr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow> Window =)",
    "insertText": "CheckAndGetWindowPtr()"
  },
  {
    "label": "IsMorphing()",
    "kind": "Method",
    "detail": "Function (FVector2D WindowLocation = Window ->)",
    "insertText": "IsMorphing() ? Window->GetMorphTargetPosition() : Window->GetPositionInScreen()"
  },
  {
    "label": "GetDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D WindowSize = Window ->)",
    "insertText": "GetDesiredSize()"
  },
  {
    "label": "Anchor()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "Anchor(WindowLocation.X, WindowLocation.Y, WindowLocation.X, WindowLocation.Y)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (WindowLocation =)",
    "insertText": "Get().CalculatePopupWindowPosition( Anchor, WindowSize, false)"
  },
  {
    "label": "UpdateMorphTargetShape()",
    "kind": "Method",
    "detail": "Function (Window ->)",
    "insertText": "UpdateMorphTargetShape(FSlateRect(WindowLocation.X, WindowLocation.Y, WindowLocation.X + WindowSize.X, WindowLocation.Y + WindowSize.Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(WindowLocation != Window->GetPositionInScreen())"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (Window ->)",
    "insertText": "MoveWindowTo(WindowLocation)"
  },
  {
    "label": "HandleSearchTextChanged()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "HandleSearchTextChanged(const FText& InText)"
  },
  {
    "label": "SetFilterText()",
    "kind": "Method",
    "detail": "Function (TextFilterPtr ->)",
    "insertText": "SetFilterText(InText)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FilteredSockets .)",
    "insertText": "Reset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(TSharedPtr<FSocketInfo>& SocketInfo : Sockets)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FilteredSockets .)",
    "insertText": "Add(SocketInfo)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (} } } SocketListView ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FSocketInfo>> SelectedItems = SocketListView ->)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "ChooseSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseSocket(SelectedItems[0])"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else { TSharedPtr<SWindow> Window =)",
    "insertText": "Get().FindWidgetWindow(AsShared())"
  }
]