[
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "FVulkanCommonPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommonPipelineDescriptorState"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipelineDescriptorState"
  },
  {
    "label": "FVulkanPendingComputeState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingComputeState"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanGraphicsPipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGraphicsPipelineDescriptorState"
  },
  {
    "label": "FVulkanPendingGfxState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingGfxState"
  },
  {
    "label": "FVulkanCommonPipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanConfiguration . h \" # include \" VulkanMemory . h \" # include \" VulkanCommandBuffer . h \" # include \" VulkanDescriptorSets . h \" # include \" VulkanPipeline . h \" # include \" VulkanRHIPrivate . h \" # include \" Containers / ArrayView . h \" class FVulkanComputePipeline ; TAutoConsoleVariable<int32> GDynamicGlobalUBs ; class FVulkanCommonPipelineDescriptorState : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanCommonPipelineDescriptorState(FVulkanDevice* InDevice, uint32 InMaxNumSets) : VulkanRHI::FDeviceChild(InDevice) , MaxNumSets(InMaxNumSets) , bUseBindless(InDevice->SupportsBindless())"
  },
  {
    "label": "FVulkanCommonPipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanCommonPipelineDescriptorState()"
  },
  {
    "label": "GetDSetsKey()",
    "kind": "Method",
    "detail": "Function (} const FVulkanDSetsKey&)",
    "insertText": "GetDSetsKey()"
  },
  {
    "label": "GenerateFromData()",
    "kind": "Method",
    "detail": "Function (DSetsKey .)",
    "insertText": "GenerateFromData(DSWriteContainer.HashableDescriptorInfo.GetData(), sizeof(FVulkanHashableDescriptorInfo) * DSWriteContainer.HashableDescriptorInfo.Num())"
  },
  {
    "label": "HasVolatileResources()",
    "kind": "Method",
    "detail": "Function (bIsDSetsKeyDirty = false ; } return DSetsKey ; } bool)",
    "insertText": "HasVolatileResources()"
  },
  {
    "label": "SetSRV()",
    "kind": "Method",
    "detail": "Function (bIsResourcesDirty | = bDirty ; bIsDSetsKeyDirty | = bDirty ; } void)",
    "insertText": "SetSRV(FVulkanCmdBuffer* CmdBuffer, bool bCompute, uint8 DescriptorSet, uint32 BindingIndex, FVulkanShaderResourceView* SRV)"
  },
  {
    "label": "SetUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUAV(FVulkanCmdBuffer* CmdBuffer, bool bCompute, uint8 DescriptorSet, uint32 BindingIndex, FVulkanUnorderedAccessView* UAV)"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTexture(uint8 DescriptorSet, uint32 BindingIndex, const FVulkanTexture* Texture, VkImageLayout Layout)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(DSWriter[DescriptorSet].WriteImage(BindingIndex, Texture->PartialView->GetTextureView(), Layout))"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "MarkDirty(DSWriter[DescriptorSet].WriteStorageImage(BindingIndex, Texture->PartialView->GetTextureView(), Layout))"
  },
  {
    "label": "SetSamplerState()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetSamplerState(uint8 DescriptorSet, uint32 BindingIndex, const FVulkanSamplerState* Sampler)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(DSWriter[DescriptorSet].WriteSampler(BindingIndex, *Sampler))"
  },
  {
    "label": "SetInputAttachment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInputAttachment(uint8 DescriptorSet, uint32 BindingIndex, const FVulkanView::FTextureView& TextureView, VkImageLayout Layout)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(DSWriter[DescriptorSet].WriteInputAttachment(BindingIndex, TextureView, Layout))"
  },
  {
    "label": "SetUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} template<bool bDynamic> void)",
    "insertText": "SetUniformBuffer(uint8 DescriptorSet, uint32 BindingIndex, const FVulkanUniformBuffer* UniformBuffer)"
  },
  {
    "label": "IsUniformView()",
    "kind": "Method",
    "detail": "Function (const VulkanRHI::FVulkanAllocation& Allocation = UniformBuffer -> Allocation ; VkDeviceSize Range = UniformBuffer ->)",
    "insertText": "IsUniformView() ? PLATFORM_MAX_UNIFORM_BUFFER_RANGE : UniformBuffer->GetSize()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty(DSWriter[DescriptorSet].WriteDynamicUniformBuffer(BindingIndex, Allocation.GetBufferHandle(), Allocation.HandleId, 0, Range, UniformBuffer->GetOffset()))"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "MarkDirty(DSWriter[DescriptorSet].WriteUniformBuffer(BindingIndex, Allocation.GetBufferHandle(), Allocation.HandleId, UniformBuffer->GetOffset(), Range))"
  },
  {
    "label": "SetUniformBufferDynamicOffset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetUniformBufferDynamicOffset(uint8 DescriptorSet, uint32 BindingIndex, uint32 DynamicOffset)"
  },
  {
    "label": "GetDescriptorType()",
    "kind": "Method",
    "detail": "Function (const uint8 DynamicOffsetIndex = DSWriter [ DescriptorSet ] . BindingToDynamicOffsetMap [ BindingIndex ] ; DSWriter [ DescriptorSet ] . DynamicOffsets [ DynamicOffsetIndex ] = DynamicOffset ; } VkDescriptorType)",
    "insertText": "GetDescriptorType(uint8 DescriptorSet, uint32 BindingIndex)"
  },
  {
    "label": "GetLayouts()",
    "kind": "Method",
    "detail": "Function (const TArray<FVulkanDescriptorSetsLayout::FSetLayout>& Layouts = DescriptorSetsLayout ->)",
    "insertText": "GetLayouts()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "Reset()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Bind(VkCommandBuffer CmdBuffer, VkPipelineLayout PipelineLayout, VkPipelineBindPoint BindPoint)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (const uint32 FirstSet =)",
    "insertText": "CountTrailingZeros(UsedSetsMask)"
  },
  {
    "label": "CountLeadingZeros()",
    "kind": "Method",
    "detail": "Function (const uint32 NumSets = 3 2 -)",
    "insertText": "CountLeadingZeros(UsedSetsMask)"
  },
  {
    "label": "vkCmdBindDescriptorSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vkCmdBindDescriptorSets(CmdBuffer, BindPoint, PipelineLayout, FirstSet, NumSets, &DescriptorSetHandles[FirstSet], (uint32)DynamicOffsets.Num(), DynamicOffsets.GetData())"
  },
  {
    "label": "CreateDescriptorWriteInfos()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateDescriptorWriteInfos()"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (const uint32 MaxNumSets ; FVulkanDescriptorSetWriteContainer DSWriteContainer ; const FVulkanDescriptorSetsLayout* DescriptorSetsLayout = nullptr ; TArray<VkDescriptorSet> DescriptorSetHandles ; uint32 UsedSetsMask = 0 ; TArray<uint32> DynamicOffsets ; bool bIsResourcesDirty = true ; TArray<FVulkanDescriptorSetWriter> DSWriter ; FVulkanDSetsKey DSetsKey ; bool bIsDSetsKeyDirty = true ; const bool bUseBindless ; } ; class FVulkanComputePipelineDescriptorState : public FVulkanCommonPipelineDescriptorState { public :)",
    "insertText": "FVulkanComputePipelineDescriptorState(FVulkanDevice* InDevice, FVulkanComputePipeline* InComputePipeline)"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanComputePipelineDescriptorState()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ComputePipeline ->)",
    "insertText": "Release()"
  },
  {
    "label": "SetPackedGlobalShaderParameter()",
    "kind": "Method",
    "detail": "Function (PackedUniformBuffersDirty = PackedUniformBuffersMask ; } void)",
    "insertText": "SetPackedGlobalShaderParameter(uint32 BufferIndex, uint32 ByteOffset, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "SetPackedGlobalParameter()",
    "kind": "Method",
    "detail": "Function (PackedUniformBuffers .)",
    "insertText": "SetPackedGlobalParameter(ByteOffset, NumBytes, NewValue, PackedUniformBuffersDirty)"
  },
  {
    "label": "UpdateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateDescriptorSets(FVulkanCommandListContext* CmdListContext, FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "bUseDynamicGlobalUBs()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bUseDynamicGlobalUBs(GDynamicGlobalUBs->GetInt() > 0)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { return InternalUpdateDescriptorSets<)",
    "insertText": "false(CmdListContext, CmdBuffer)"
  },
  {
    "label": "UpdateBindlessDescriptors()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateBindlessDescriptors(FVulkanCommandListContext* CmdListContext, FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "BindDescriptorSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindDescriptorSets(VkCommandBuffer CmdBuffer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(CmdBuffer, ComputePipeline->GetLayout().GetPipelineLayout(), VK_PIPELINE_BIND_POINT_COMPUTE)"
  },
  {
    "label": "InternalUpdateDescriptorSets()",
    "kind": "Method",
    "detail": "Function (} protected : FPackedUniformBuffers PackedUniformBuffers ; uint32 PackedUniformBuffersMask ; uint32 PackedUniformBuffersDirty ; FVulkanComputePipeline* ComputePipeline ; template<bool bUseDynamicGlobalUBs> bool)",
    "insertText": "InternalUpdateDescriptorSets(FVulkanCommandListContext* CmdListContext, FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "FVulkanGraphicsPipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (class FVulkanPendingComputeState ; class FVulkanCommandListContext ; } ; class FVulkanGraphicsPipelineDescriptorState : public FVulkanCommonPipelineDescriptorState { public :)",
    "insertText": "FVulkanGraphicsPipelineDescriptorState(FVulkanDevice* InDevice, FVulkanRHIGraphicsPipelineState* InGfxPipeline)"
  },
  {
    "label": "FVulkanGraphicsPipelineDescriptorState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanGraphicsPipelineDescriptorState()"
  },
  {
    "label": "SetPackedGlobalShaderParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPackedGlobalShaderParameter(uint8 Stage, uint32 BufferIndex, uint32 ByteOffset, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "SetPackedGlobalParameter()",
    "kind": "Method",
    "detail": "Function (PackedUniformBuffers [ Stage ] .)",
    "insertText": "SetPackedGlobalParameter(ByteOffset, NumBytes, NewValue, PackedUniformBuffersDirty[Stage])"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind(CmdBuffer, GfxPipeline->GetLayout().GetPipelineLayout(), VK_PIPELINE_BIND_POINT_GRAPHICS)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(PackedUniformBuffersDirty, PackedUniformBuffersMask)"
  },
  {
    "label": "SubmitPackedUniformBuffers()",
    "kind": "Method",
    "detail": "Function (class FVulkanPendingGfxState ; class FVulkanCommandListContext ; } ; template<bool bIsDynamic> bool)",
    "insertText": "SubmitPackedUniformBuffers(FVulkanDescriptorSetWriter& DescriptorWriteSet, const VulkanRHI::FVulkanAllocation& TempAllocation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 BindingIndex = 0 ;)",
    "insertText": "if(bIsDynamic)"
  },
  {
    "label": "WriteUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} else { return DescriptorWriteSet .)",
    "insertText": "WriteUniformBuffer(BindingIndex, TempAllocation.GetBufferHandle(), TempAllocation.HandleId, TempAllocation.Offset, TempAllocation.Size)"
  }
]