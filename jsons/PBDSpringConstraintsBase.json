[
  {
    "label": "FPBDSpringConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSpringConstraintsBase"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / Utilities . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / PBDStiffness . h \" # include \" Containers / Array . h \" # include \" Templates / EnableIf . h \" namespace Chaos::Softs { class FPBDSpringConstraintsBase { public : template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> FPBDSpringConstraintsBase( const FSolverParticlesRange& Particles, const TArray<TVector<int32, Valence>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints = false, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness) : Constraints(TrimConstraints(InConstraints, [&Particles, bTrimKinematicConstraints](int32 Index0, int32 Index1) { return bTrimKinematicConstraints && Particles.InvM(Index0) == (FSolverReal)0. && Particles.InvM(Index1) == (FSolverReal)0.; })) , ParticleOffset(0) , ParticleCount(Particles.GetRangeSize()) , Stiffness( InStiffness, StiffnessMultipliers, TConstArrayView<TVec2<int32>>(Constraints), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Dists .)",
    "insertText": "Reset(Constraints.Num())"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P0 = Particles .)",
    "insertText": "X(Constraint[0])"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = Particles .)",
    "insertText": "X(Constraint[1])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Dists .)",
    "insertText": "Add((P1 - P0).Size())"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} } template<int32 Valence)",
    "insertText": "UE_REQUIRES(Valence >= 2 && Valence <= 4)> FPBDSpringConstraintsBase( const FSolverParticles& Particles, int32 InParticleOffset, int32 InParticleCount, const TArray<TVector<int32, Valence>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints = false, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness) : Constraints(TrimConstraints(InConstraints, [&Particles, bTrimKinematicConstraints](int32 Index0, int32 Index1) { return bTrimKinematicConstraints && Particles.InvM(Index0) == (FSolverReal)0. && Particles.InvM(Index1) == (FSolverReal)0.; })) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Stiffness( InStiffness, StiffnessMultipliers, TConstArrayView<TVec2<int32>>(Constraints), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P0 = Particles .)",
    "insertText": "GetX(Constraint[0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = Particles .)",
    "insertText": "GetX(Constraint[1])"
  },
  {
    "label": "FPBDSpringConstraintsBase()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPBDSpringConstraintsBase()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyPBDValues(Dt, NumIterations)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (} const TArray<TVec2<int32>>&)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const auto& Constraint = Constraints [ ConstraintIndex ] ; const int32 i1 = Constraint [ 0 ] ; const int32 i2 = Constraint [ 1 ] ;)",
    "insertText": "if(Particles.InvM(i2) == (FSolverReal)0. && Particles.InvM(i1) == (FSolverReal)0.)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (} const FSolverReal CombinedMass = Particles .)",
    "insertText": "InvM(i2) + Particles.InvM(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = Particles .)",
    "insertText": "P(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "P(i2)"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (FSolverVec3 Direction = P1 - P2 ; const FSolverReal Distance = Direction .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "Delta(Distance - Dists[ConstraintIndex])"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSet<TVec2<int32>> TrimmedConstraints ; TrimmedConstraints .)",
    "insertText": "Reserve(Valence == 2 ? InConstraints.Num() : InConstraints.Num() * Chaos::Utilities::NChooseR(Valence, 2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 IndexI = ConstraintV [ i ] ; const int32 IndexJ = ConstraintV [ j ] ;)",
    "insertText": "if(!TrimPredicate(IndexI, IndexJ))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TrimmedConstraints .)",
    "insertText": "Add(IndexI <= IndexJ ? TVec2<int32>(IndexI, IndexJ) : TVec2<int32>(IndexJ, IndexI))"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (} } } } return TrimmedConstraints .)",
    "insertText": "Array()"
  }
]