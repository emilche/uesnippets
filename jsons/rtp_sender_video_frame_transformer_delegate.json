[
  {
    "label": "RTPSenderVideo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderVideo"
  },
  {
    "label": "RTPSenderVideoFrameTransformerDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderVideoFrameTransformerDelegate"
  },
  {
    "label": "RTPSenderVideoFrameTransformerDelegate()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RTPSenderVideoFrameTransformerDelegate(\n      RTPSenderVideo* sender,\n      rtc::scoped_refptr<FrameTransformerInterface> frame_transformer,\n      uint32_t ssrc,\n      TaskQueueFactory* send_transport_queue)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "TransformFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformFrame(int payload_type,\n                      absl::optional<VideoCodecType> codec_type,\n                      uint32_t rtp_timestamp,\n                      const EncodedImage& encoded_image,\n                      RTPVideoHeader video_header,\n                      absl::optional<int64_t> expected_retransmission_time_ms)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(encoder_queue_)"
  },
  {
    "label": "SetVideoStructureUnderLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructureUnderLock(\n      const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoLayersAllocationUnderLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocationUnderLock(VideoLayersAllocation allocation)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sender_)",
    "insertText": "RTC_GUARDED_BY(sender_lock_)"
  }
]