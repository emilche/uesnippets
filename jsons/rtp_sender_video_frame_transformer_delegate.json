[
  {
    "label": "RTPSenderVideo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderVideo"
  },
  {
    "label": "RTPSenderVideoFrameTransformerDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderVideoFrameTransformerDelegate"
  },
  {
    "label": "RTPSenderVideoFrameTransformerDelegate()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_SENDER_VIDEO_FRAME_TRANSFORMER_DELEGATE_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_SENDER_VIDEO_FRAME_TRANSFORMER_DELEGATE_H_ # include<memory> # include \" api / frame_transformer_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / video / video_layers_allocation . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class RTPSenderVideo ; class RTPSenderVideoFrameTransformerDelegate : public TransformedFrameCallback { public :)",
    "insertText": "RTPSenderVideoFrameTransformerDelegate(RTPSenderVideo* sender, rtc::scoped_refptr<FrameTransformerInterface> frame_transformer, uint32_t ssrc, TaskQueueFactory* send_transport_queue)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "TransformFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformFrame(int payload_type, absl::optional<VideoCodecType> codec_type, uint32_t rtp_timestamp, const EncodedImage& encoded_image, RTPVideoHeader video_header, absl::optional<int64_t> expected_retransmission_time_ms)"
  },
  {
    "label": "OnTransformedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformedFrame(std::unique_ptr<TransformableFrameInterface> frame)"
  },
  {
    "label": "SendVideo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendVideo(std::unique_ptr<TransformableFrameInterface> frame) const RTC_RUN_ON(encoder_queue_)"
  },
  {
    "label": "SetVideoStructureUnderLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoStructureUnderLock(const FrameDependencyStructure* video_structure)"
  },
  {
    "label": "SetVideoLayersAllocationUnderLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoLayersAllocationUnderLock(VideoLayersAllocation allocation)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RTPSenderVideoFrameTransformerDelegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "RTPSenderVideoFrameTransformerDelegate()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex sender_lock_ ; RTPSenderVideo* sender_)",
    "insertText": "RTC_GUARDED_BY(sender_lock_)"
  }
]