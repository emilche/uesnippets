[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FContextCacheData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextCacheData"
  },
  {
    "label": "DATAFLOWCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATAFLOWCORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FContextCacheData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Dataflow / DataflowNodeParameters . h \" class FArchive ; namespace UE::Dataflow { struct FContextCacheData {)",
    "insertText": "FContextCacheData(FName InType, FGuid InNodeGuid, FContextCacheElementBase* InData, uint32 InNodeHash, FTimestamp InTimestamp) : Type(InType), NodeGuid(InNodeGuid), Data(InData), NodeHash(InNodeHash), Timestamp(InTimestamp)"
  },
  {
    "label": "FContextCacheElementBase()",
    "kind": "Method",
    "detail": "Function (} FName Type ; FGuid NodeGuid ; FContextCacheElementBase* Data = nullptr ; uint32 NodeHash ; FTimestamp Timestamp = FTimestamp::Invalid ; } ; class FContextCachingFactory { typedef TFunction<)",
    "insertText": "FContextCacheElementBase(FArchive& Ar, FContextCacheElementBase* InData)"
  },
  {
    "label": "FContextCachingFactory()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FSerializeFunction> CachingMap ; FContextCachingFactory* Instance ;)",
    "insertText": "FContextCachingFactory()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (delete Instance ; } FContextCachingFactory*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "RegisterSerializeFunction()",
    "kind": "Method",
    "detail": "Function (} return Instance ; } void)",
    "insertText": "RegisterSerializeFunction(const FName& Type, FSerializeFunction InSerializeFunc)"
  },
  {
    "label": "GetTypedElement()",
    "kind": "Method",
    "detail": "Function (template<class T> const T&)",
    "insertText": "GetTypedElement(const FContextCacheElementBase* InElement, const T& Default)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TContextCacheElement<T>* TypedElement = static_cast<const TContextCacheElement<)",
    "insertText": "T(InElement)"
  },
  {
    "label": "NewTypedElement()",
    "kind": "Method",
    "detail": "Function (} return Default ; } template<class T> FContextCacheElementBase*)",
    "insertText": "NewTypedElement(T&& Data)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} FContextCacheElementBase*)",
    "insertText": "Serialize(FArchive& Ar, FContextCacheData&& Data)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(FName InType)"
  }
]