[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ArrayRecycler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRecycler"
  },
  {
    "label": "FreeList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FreeList"
  },
  {
    "label": "Capacity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Capacity"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_ARRAYRECYCLER_H # define LLVM_SUPPORT_ARRAYRECYCLER_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / MathExtras . h \" namespace llvm { template<class T,size_t Align = AlignOf<T>::Alignment> class ArrayRecycler { struct FreeList { FreeList* Next ; } ;)",
    "insertText": "static_assert(Align >= AlignOf<FreeList>::Alignment, \"Object underaligned\")"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (SmallVector<FreeList*,8> Bucket ; T*)",
    "insertText": "pop(unsigned Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FreeList* Entry = Bucket [ Idx ] ;)",
    "insertText": "if(!Entry)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Bucket [ Idx ] = Entry -> Next ; return reinterpret_cast<)",
    "insertText": "T(Entry)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push(unsigned Idx, T *Ptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ptr && \"Cannot recycle NULL pointer\")"
  },
  {
    "label": "FreeList()",
    "kind": "Method",
    "detail": "Function (FreeList* Entry = reinterpret_cast<)",
    "insertText": "FreeList(Ptr)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (Entry -> Next = Bucket [ Idx ] ; Bucket [ Idx ] = Entry ; } public : class Capacity { uint8_t Index ;)",
    "insertText": "Capacity(uint8_t idx) : Index(idx)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "Capacity() : Index(0)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} Capacity)",
    "insertText": "get(size_t N)"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getSize()"
  },
  {
    "label": "getBucket()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getBucket()"
  },
  {
    "label": "ArrayRecycler()",
    "kind": "Method",
    "detail": "Function (} } ; ~)",
    "insertText": "ArrayRecycler()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Bucket.empty() && \"Non-empty ArrayRecycler deleted!\")"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType> void)",
    "insertText": "clear(AllocatorType &Allocator)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear(BumpPtrAllocator&)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Bucket .)",
    "insertText": "clear()"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType> T*)",
    "insertText": "allocate(Capacity Cap, AllocatorType &Allocator)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(Capacity Cap, T *Ptr)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(Cap.getBucket(), Ptr)"
  }
]