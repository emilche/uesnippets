[
  {
    "label": "MCSymbolMachO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolMachO"
  },
  {
    "label": "MachOSymbolFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MachOSymbolFlags"
  },
  {
    "label": "MCSymbolMachO()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSYMBOLMACHO_H # define LLVM_MC_MCSYMBOLMACHO_H # include \" llvm / MC / MCSymbol . h \" namespace llvm { class MCSymbolMachO : public MCSymbol { enum MachOSymbolFlags : uint16_t { SF_DescFlagsMask = 0 xFFFF,SF_ReferenceTypeMask = 0 x0007,SF_ReferenceTypeUndefinedNonLazy = 0 x0000,SF_ReferenceTypeUndefinedLazy = 0 x0001,SF_ReferenceTypeDefined = 0 x0002,SF_ReferenceTypePrivateDefined = 0 x0003,SF_ReferenceTypePrivateUndefinedNonLazy = 0 x0004,SF_ReferenceTypePrivateUndefinedLazy = 0 x0005,SF_ThumbFunc = 0 x0008,SF_NoDeadStrip = 0 x0020,SF_WeakReference = 0 x0040,SF_WeakDefinition = 0 x0080,SF_SymbolResolver = 0 x0100,SF_CommonAlignmentMask = 0 xF0FF,SF_CommonAlignmentShift = 8 } ; public :)",
    "insertText": "MCSymbolMachO(const StringMapEntry<bool> *Name, bool isTemporary) : MCSymbol(SymbolKindMachO, Name, isTemporary)"
  },
  {
    "label": "clearReferenceType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearReferenceType()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(0, SF_ReferenceTypeMask)"
  },
  {
    "label": "setReferenceTypeUndefinedLazy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setReferenceTypeUndefinedLazy(bool Value)"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(Value ? SF_ReferenceTypeUndefinedLazy : 0, SF_ReferenceTypeUndefinedLazy)"
  },
  {
    "label": "setThumbFunc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setThumbFunc()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_ThumbFunc, SF_ThumbFunc)"
  },
  {
    "label": "isNoDeadStrip()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNoDeadStrip()"
  },
  {
    "label": "setNoDeadStrip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNoDeadStrip()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_NoDeadStrip, SF_NoDeadStrip)"
  },
  {
    "label": "isWeakReference()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWeakReference()"
  },
  {
    "label": "setWeakReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setWeakReference()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_WeakReference, SF_WeakReference)"
  },
  {
    "label": "isWeakDefinition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWeakDefinition()"
  },
  {
    "label": "setWeakDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setWeakDefinition()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_WeakDefinition, SF_WeakDefinition)"
  },
  {
    "label": "isSymbolResolver()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSymbolResolver()"
  },
  {
    "label": "setSymbolResolver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSymbolResolver()"
  },
  {
    "label": "modifyFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyFlags(SF_SymbolResolver, SF_SymbolResolver)"
  },
  {
    "label": "setDesc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDesc(unsigned Value)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Value == (Value & SF_DescFlagsMask) && \"Invalid .desc value!\")"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFlags(Value & SF_DescFlagsMask)"
  },
  {
    "label": "getEncodedFlags()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "getEncodedFlags()"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (uint16_t Flags =)",
    "insertText": "getFlags()"
  },
  {
    "label": "Log2_32()",
    "kind": "Method",
    "detail": "Function (unsigned Log2Size =)",
    "insertText": "Log2_32(Align)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((1U << Log2Size) == Align && \"Invalid 'common' alignment!\")"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & SF_CommonAlignmentMask) | (Log2Size << SF_CommonAlignmentShift)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} } return Flags ; } bool)",
    "insertText": "classof(const MCSymbol *S)"
  }
]