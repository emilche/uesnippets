[
  {
    "label": "storeu_int32()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_MEM_SSE2_H_ # define VPX_VPX_DSP_X86_MEM_SSE2_H_ # include<emmintrin . h> # include<string . h> # include \" . / vpx_config . h \" void)",
    "insertText": "storeu_int32(void *dst, int32_t v)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst, &v, sizeof(v))"
  },
  {
    "label": "loadu_int32()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "loadu_int32(const void *src)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (int32_t v ;)",
    "insertText": "memcpy(&v, src, sizeof(v))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (int val ;)",
    "insertText": "memcpy(&val, a, sizeof(val))"
  },
  {
    "label": "store_unaligned_u32()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_unaligned_u32(void *const a, const __m128i v)"
  },
  {
    "label": "_mm_cvtsi128_si32()",
    "kind": "Method",
    "detail": "Function (const int val =)",
    "insertText": "_mm_cvtsi128_si32(v)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(a, &val, sizeof(val))"
  },
  {
    "label": "mm_storelu()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "mm_storelu(dst, v) memcpy((dst), (const char *)&(v), 8) #define mm_storehu(dst, v) memcpy((dst), (const char *)&(v) + 8, 8) static INLINE __m128i loadh_epi64(const __m128i s, const void *const src)"
  },
  {
    "label": "load_8bit_4x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_8bit_4x4(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "_mm_cvtsi32_si128()",
    "kind": "Method",
    "detail": "Function (d [ 0 ] =)",
    "insertText": "_mm_cvtsi32_si128(*(const int *)(s + 0 * stride))"
  },
  {
    "label": "_mm_cvtsi32_si128()",
    "kind": "Method",
    "detail": "Function (d [ 1 ] =)",
    "insertText": "_mm_cvtsi32_si128(*(const int *)(s + 1 * stride))"
  },
  {
    "label": "_mm_cvtsi32_si128()",
    "kind": "Method",
    "detail": "Function (d [ 2 ] =)",
    "insertText": "_mm_cvtsi32_si128(*(const int *)(s + 2 * stride))"
  },
  {
    "label": "_mm_cvtsi32_si128()",
    "kind": "Method",
    "detail": "Function (d [ 3 ] =)",
    "insertText": "_mm_cvtsi32_si128(*(const int *)(s + 3 * stride))"
  },
  {
    "label": "load_8bit_4x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_8bit_4x8(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "load_8bit_4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_8bit_4x4(s + 0 * stride, stride, &d[0])"
  },
  {
    "label": "load_8bit_4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_8bit_4x4(s + 4 * stride, stride, &d[4])"
  },
  {
    "label": "load_8bit_8x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_8bit_8x4(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (d [ 0 ] =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(s + 0 * stride))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (d [ 1 ] =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(s + 1 * stride))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (d [ 2 ] =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(s + 2 * stride))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (d [ 3 ] =)",
    "insertText": "_mm_loadl_epi64((const __m128i *)(s + 3 * stride))"
  },
  {
    "label": "load_8bit_8x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_8bit_8x8(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "load_8bit_8x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_8bit_8x4(s + 0 * stride, stride, &d[0])"
  },
  {
    "label": "load_8bit_8x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_8bit_8x4(s + 4 * stride, stride, &d[4])"
  },
  {
    "label": "load_8bit_16x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load_8bit_16x8(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 0 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 0 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 1 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 1 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 2 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 2 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 3 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 3 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 4 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 4 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 5 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 5 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 6 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 6 * stride))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (d [ 7 ] =)",
    "insertText": "_mm_load_si128((const __m128i *)(s + 7 * stride))"
  },
  {
    "label": "loadu_8bit_16x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "loadu_8bit_16x4(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (d [ 0 ] =)",
    "insertText": "_mm_loadu_si128((const __m128i *)(s + 0 * stride))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (d [ 1 ] =)",
    "insertText": "_mm_loadu_si128((const __m128i *)(s + 1 * stride))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (d [ 2 ] =)",
    "insertText": "_mm_loadu_si128((const __m128i *)(s + 2 * stride))"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (d [ 3 ] =)",
    "insertText": "_mm_loadu_si128((const __m128i *)(s + 3 * stride))"
  },
  {
    "label": "loadu_8bit_16x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "loadu_8bit_16x8(const uint8_t *const s, const ptrdiff_t stride, __m128i *const d)"
  },
  {
    "label": "loadu_8bit_16x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "loadu_8bit_16x4(s + 0 * stride, stride, &d[0])"
  },
  {
    "label": "loadu_8bit_16x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "loadu_8bit_16x4(s + 4 * stride, stride, &d[4])"
  },
  {
    "label": "_mm_storeh_epi64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_mm_storeh_epi64(__m128i *const d, const __m128i s)"
  },
  {
    "label": "_mm_storeh_pi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeh_pi((__m64 *)d, _mm_castsi128_ps(s))"
  },
  {
    "label": "store_8bit_4x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_8bit_4x4(const __m128i *const s, uint8_t *const d, const ptrdiff_t stride)"
  },
  {
    "label": "store_8bit_4x4_sse2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_8bit_4x4_sse2(const __m128i s, uint8_t *const d, const ptrdiff_t stride)"
  },
  {
    "label": "_mm_srli_si128()",
    "kind": "Method",
    "detail": "Function (__m128i ss [ 4 ] ; ss [ 0 ] = s ; ss [ 1 ] =)",
    "insertText": "_mm_srli_si128(s, 4)"
  },
  {
    "label": "_mm_srli_si128()",
    "kind": "Method",
    "detail": "Function (ss [ 2 ] =)",
    "insertText": "_mm_srli_si128(s, 8)"
  },
  {
    "label": "_mm_srli_si128()",
    "kind": "Method",
    "detail": "Function (ss [ 3 ] =)",
    "insertText": "_mm_srli_si128(s, 12)"
  },
  {
    "label": "store_8bit_4x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_8bit_4x4(ss, d, stride)"
  },
  {
    "label": "store_8bit_8x4_from_16x2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_8bit_8x4_from_16x2(const __m128i *const s, uint8_t *const d, const ptrdiff_t stride)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 0 * stride), s[0])"
  },
  {
    "label": "_mm_storeh_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeh_epi64((__m128i *)(d + 1 * stride), s[0])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 2 * stride), s[1])"
  },
  {
    "label": "_mm_storeh_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeh_epi64((__m128i *)(d + 3 * stride), s[1])"
  },
  {
    "label": "store_8bit_8x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_8bit_8x8(const __m128i *const s, uint8_t *const d, const ptrdiff_t stride)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 1 * stride), s[1])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 2 * stride), s[2])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 3 * stride), s[3])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 4 * stride), s[4])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 5 * stride), s[5])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 6 * stride), s[6])"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *)(d + 7 * stride), s[7])"
  },
  {
    "label": "storeu_8bit_16x4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "storeu_8bit_16x4(const __m128i *const s, uint8_t *const d, const ptrdiff_t stride)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(d + 0 * stride), s[0])"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(d + 1 * stride), s[1])"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(d + 2 * stride), s[2])"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(d + 3 * stride), s[3])"
  }
]