[
  {
    "label": "DeviceInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeviceInfoImpl"
  },
  {
    "label": "DeviceInfoImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CAPTURE_MAIN_SOURCE_DEVICE_INFO_IMPL_H_ # define MODULES_VIDEO_CAPTURE_MAIN_SOURCE_DEVICE_INFO_IMPL_H_ # include<stdint . h> # include<vector> # include \" api / video / video_rotation . h \" # include \" modules / video_capture / video_capture . h \" # include \" modules / video_capture / video_capture_defines . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { namespace videocapturemodule { class DeviceInfoImpl : public VideoCaptureModule::DeviceInfo { public :)",
    "insertText": "DeviceInfoImpl()"
  },
  {
    "label": "DeviceInfoImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DeviceInfoImpl(void)"
  },
  {
    "label": "NumberOfCapabilities()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "NumberOfCapabilities(const char* deviceUniqueIdUTF8)"
  },
  {
    "label": "GetCapability()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetCapability(const char* deviceUniqueIdUTF8, uint32_t deviceCapabilityNumber, VideoCaptureCapability& capability)"
  },
  {
    "label": "GetBestMatchedCapability()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetBestMatchedCapability(const char* deviceUniqueIdUTF8, const VideoCaptureCapability& requested, VideoCaptureCapability& resulting)"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetOrientation(const char* deviceUniqueIdUTF8, VideoRotation& orientation)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : int32_t)",
    "insertText": "Init()"
  },
  {
    "label": "CreateCapabilityMap()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "CreateCapabilityMap(const char* deviceUniqueIdUTF8) RTC_EXCLUSIVE_LOCKS_REQUIRED(_apiLock)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (protected : typedef std::vector<VideoCaptureCapability> VideoCaptureCapabilities ; VideoCaptureCapabilities _captureCapabilities)",
    "insertText": "RTC_GUARDED_BY(_apiLock)"
  }
]