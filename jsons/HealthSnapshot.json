[
  {
    "label": "FPerformanceTrackingChart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceTrackingChart"
  },
  {
    "label": "UHealthSnapshotBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHealthSnapshotBlueprintLibrary"
  },
  {
    "label": "FHealthSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHealthSnapshot"
  },
  {
    "label": "FMemoryStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryStat"
  },
  {
    "label": "FThreadStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadStat"
  },
  {
    "label": "FMmaStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMmaStat"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" HealthSnapshot . generated . h \" class FPerformanceTrackingChart ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UFUNCTION(Exec, BlueprintCallable, Category = \"Performance | HealthSnapshot\") static ENGINE_API void StartPerformanceSnapshots()"
  },
  {
    "label": "FHealthSnapshot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPerformanceTrackingChart> PerformanceChart ; } ; class FHealthSnapshot { public :)",
    "insertText": "FHealthSnapshot(const TCHAR* Title)"
  },
  {
    "label": "FHealthSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHealthSnapshot(const TCHAR* Title, const FPerformanceTrackingChart* GameplayFPSChart)"
  },
  {
    "label": "FHealthSnapshot()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHealthSnapshot()"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dump(FOutputDevice& Ar)"
  },
  {
    "label": "CaptureMemoryStats()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CaptureMemoryStats()"
  },
  {
    "label": "CapturePerformanceStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapturePerformanceStats(const FPerformanceTrackingChart* GameplayFPSChart)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats(FOutputDevice& Ar, FName CategoryName)"
  },
  {
    "label": "FMemoryStat()",
    "kind": "Method",
    "detail": "Function (public : template<T> struct FMemoryStat {)",
    "insertText": "FMemoryStat() : Size(T()) , Used(T()) , Peak(T())"
  },
  {
    "label": "FThreadStat()",
    "kind": "Method",
    "detail": "Function (} T Size ; T Used ; T Peak ; } ; struct FThreadStat {)",
    "insertText": "FThreadStat() : PercentFramesBound(0) , HitchesPerMinute(0) , AvgTime(0)"
  },
  {
    "label": "FMmaStat()",
    "kind": "Method",
    "detail": "Function (} float PercentFramesBound ; float HitchesPerMinute ; float AvgTime ; } ; template<T> struct FMmaStat {)",
    "insertText": "FMmaStat() : Min() , Max() , Avg()"
  }
]