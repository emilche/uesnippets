[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FIPv4SubnetMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIPv4SubnetMask"
  },
  {
    "label": "GCC_ALIGN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Serialization / Archive . h \" # include \" Templates / TypeHash . h \" namespace EIPv4SubnetClasses { enum Type { Invalid,ClassA,ClassB,ClassC } ; } struct FIPv4SubnetMask { union { struct { # if PLATFORM_LITTLE_ENDIAN # ifdef _MSC_VER uint8 D,C,B,A ; # else uint8 D)",
    "insertText": "GCC_ALIGN(4)"
  },
  {
    "label": "FIPv4SubnetMask()",
    "kind": "Method",
    "detail": "Function (uint8 C,B,A ; # endif # else uint8 A,B,C,D ; # endif } ; int32 Value ; } ; public :)",
    "insertText": "FIPv4SubnetMask()"
  },
  {
    "label": "FIPv4SubnetMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIPv4SubnetMask(uint8 InA, uint8 InB, uint8 InC, uint8 InD) #if PLATFORM_LITTLE_ENDIAN : D(InD) , C(InC) , B(InB) , A(InA) #else : A(InA) , B(InB) , C(InC) , D(InD)"
  },
  {
    "label": "FIPv4SubnetMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIPv4SubnetMask(uint32 InValue) : Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(const FIPv4SubnetMask& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FIPv4SubnetMask)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FIPv4SubnetMask& SubnetMask)"
  },
  {
    "label": "ToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToText()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} public : uint32)",
    "insertText": "GetTypeHash(const FIPv4SubnetMask& SubnetMask)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Parse(const FString& MaskString, FIPv4SubnetMask& OutMask)"
  }
]