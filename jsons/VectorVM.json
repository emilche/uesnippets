[
  {
    "label": "FVectorVMSerializeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMSerializeState"
  },
  {
    "label": "FVectorVMExternalFunctionContextProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorVMExternalFunctionContextProxy"
  },
  {
    "label": "FVectorVMExecArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMExecArgs"
  },
  {
    "label": "FUserPtrHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUserPtrHandler"
  },
  {
    "label": "FExternalFuncInputHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalFuncInputHandler"
  },
  {
    "label": "FExternalFuncRegisterHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalFuncRegisterHandler"
  },
  {
    "label": "FExternalFuncConstHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExternalFuncConstHandler"
  },
  {
    "label": "FVectorVMExternalFunctionContextProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Math / RandomStream . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ByteSwap . h \" # include \" Templates / AlignmentTemplates . h \" # include \" UObject / ObjectMacros . h \" # include \" VectorVMExperimental . h \" # include \" VectorVMLegacy . h \" # include \" VectorVMCommon . h \" struct FVectorVMSerializeState ; # if VECTORVM_SUPPORTS_EXPERIMENTAL&& VECTORVM_SUPPORTS_LEGACY class FVectorVMExternalFunctionContextProxy { public : const bool UsingExperimentalVM ; FVectorVMExternalFunctionContextExperimental Experimental ; FVectorVMExternalFunctionContextLegacy Legacy ;)",
    "insertText": "FVectorVMExternalFunctionContextProxy(const FVectorVMExternalFunctionContextExperimental& InExperimental) : UsingExperimentalVM(true) , Experimental(InExperimental) , Legacy()"
  },
  {
    "label": "FVectorVMExternalFunctionContextProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVectorVMExternalFunctionContextProxy(const FVectorVMExternalFunctionContextLegacy& InLegacy) : UsingExperimentalVM(false) , Experimental() , Legacy(InLegacy)"
  },
  {
    "label": "GetRandCounters()",
    "kind": "Method",
    "detail": "Function (} int32*)",
    "insertText": "GetRandCounters()"
  },
  {
    "label": "GetRandStream()",
    "kind": "Method",
    "detail": "Function (} FRandomStream&)",
    "insertText": "GetRandStream()"
  },
  {
    "label": "GetNumInstances()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumInstances()"
  },
  {
    "label": "GetNumLoops()",
    "kind": "Method",
    "detail": "Function (} template<uint32 InstancesPerOp> int32)",
    "insertText": "GetNumLoops()"
  },
  {
    "label": "FVectorVMExternalFunctionContextProxy()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FVectorVMExternalFunctionContextProxy()"
  },
  {
    "label": "GetNumOpCodes()",
    "kind": "Method",
    "detail": "Function (} ; using FVectorVMExternalFunctionContext = FVectorVMExternalFunctionContextProxy ; # elif VECTORVM_SUPPORTS_EXPERIMENTAL using FVectorVMExternalFunctionContext = FVectorVMExternalFunctionContextExperimental ; # elif VECTORVM_SUPPORTS_LEGACY using FVectorVMExternalFunctionContext = FVectorVMExternalFunctionContextLegacy ; # else # error \" At least one of VECTORVM_SUPPORTS_EXPERIMENTAL | VECTORVM_SUPPORTS_LEGACY must be defined \" # endif namespace VectorVM { uint8)",
    "insertText": "GetNumOpCodes()"
  },
  {
    "label": "GetOpName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FString)",
    "insertText": "GetOpName(EVectorVMOp Op)"
  },
  {
    "label": "GetOperandLocationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOperandLocationName(EVectorVMOperandLocation Location)"
  },
  {
    "label": "CreateSrcOperandMask()",
    "kind": "Method",
    "detail": "Function (# endif uint8)",
    "insertText": "CreateSrcOperandMask(EVectorVMOperandLocation Type0, EVectorVMOperandLocation Type1 = EVectorVMOperandLocation::Register, EVectorVMOperandLocation Type2 = EVectorVMOperandLocation::Register)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (struct FVectorVMExecArgs { uint8 const* ByteCode = nullptr ; uint8 const* OptimizedByteCode = nullptr ; int32 NumTempRegisters = 0 ; int32 ConstantTableCount = 0 ; const uint8* const* ConstantTable = nullptr ; const int32* ConstantTableSizes = nullptr ; TArrayView<FDataSetMeta> DataSetMetaTable ; const FVMExternalFunction* const* ExternalFunctionTable = nullptr ; void** UserPtrTable = nullptr ; int32 NumInstances = 0 ; bool bAllowParallel = true ; # if STATS TArrayView<FStatScopeData> StatScopes ; # elif ENABLE_STATNAMEDEVENTS TArrayView<const FString> StatNamedEventsScopes ; # endif } ; # if VECTORVM_SUPPORTS_LEGACY void)",
    "insertText": "Exec(FVectorVMExecArgs& Args, FVectorVMSerializeState *SerializeState)"
  },
  {
    "label": "OptimizeByteCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptimizeByteCode(const uint8* ByteCode, TArray<uint8>& OptimizedCode, TArrayView<uint8> ExternalFunctionRegisterCounts)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Init()"
  },
  {
    "label": "VVM_EXT_FUNC_INPUT_LOC_BIT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VVM_EXT_FUNC_INPUT_LOC_BIT(unsigned short)(1<<15) #define VVM_EXT_FUNC_INPUT_LOC_MASK (unsigned short)"
  },
  {
    "label": "FUserPtrHandler()",
    "kind": "Method",
    "detail": "Function (int32 UserPtrIdx ; T* Ptr ;)",
    "insertText": "FUserPtrHandler(FVectorVMExternalFunctionContext& Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if VECTORVM_SUPPORTS_EXPERIMENTAL&& VECTORVM_SUPPORTS_LEGACY)",
    "insertText": "if(Context.UsingExperimentalVM)"
  },
  {
    "label": "ConstPtr()",
    "kind": "Method",
    "detail": "Function (int32 AdvanceOffset ; int32*)",
    "insertText": "ConstPtr(int32*)Context.Experimental.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (UserPtrIdx =* ConstPtr ;)",
    "insertText": "check(UserPtrIdx != INDEX_NONE)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ptr(T*)Context.Experimental.GetUserPtrTable(UserPtrIdx)"
  },
  {
    "label": "DecodeU16()",
    "kind": "Method",
    "detail": "Function (} else { const uint16 VariableOffset = Context . Legacy .)",
    "insertText": "DecodeU16()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const uint16 ConstantTableOffset = VariableOffset& VVM_EXT_FUNC_INPUT_LOC_MASK ; UserPtrIdx =* Context . Legacy . GetConstant<)",
    "insertText": "int32(ConstantTableOffset)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ptr = static_cast<)",
    "insertText": "T(Context.Legacy.GetUserPtrTable(UserPtrIdx))"
  },
  {
    "label": "ConstPtr()",
    "kind": "Method",
    "detail": "Function (} # elif VECTORVM_SUPPORTS_EXPERIMENTAL int32 AdvanceOffset ; int32*)",
    "insertText": "ConstPtr(int32*)Context.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ptr(T*)Context.GetUserPtrTable(UserPtrIdx)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ptr = static_cast<)",
    "insertText": "T(Context.GetUserPtrTable(UserPtrIdx))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# else # error \" Not supported \" # endif } T*)",
    "insertText": "Get()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Context)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FVectorVMExternalFunctionContext& Context)"
  },
  {
    "label": "InputPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputPtr(T*)Context.Experimental.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "bIsRegister()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsRegister(InputOffset & VVM_EXT_FUNC_INPUT_LOC_BIT)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = InputOffset& VVM_EXT_FUNC_INPUT_LOC_MASK ; AdvanceOffset = bIsRegister ? 1 : 0 ; InputPtr = bIsRegister ? reinterpret_cast<)",
    "insertText": "T(Context.Legacy.GetTempRegister(Offset)) : Context.Legacy.GetConstant<T>(Offset)"
  },
  {
    "label": "GetExternalFunctionInstanceOffset()",
    "kind": "Method",
    "detail": "Function (InputPtr + = Context . Legacy .)",
    "insertText": "GetExternalFunctionInstanceOffset()"
  },
  {
    "label": "InputPtr()",
    "kind": "Method",
    "detail": "Function (} # elif VECTORVM_SUPPORTS_EXPERIMENTAL)",
    "insertText": "InputPtr(T*)Context.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = InputOffset& VVM_EXT_FUNC_INPUT_LOC_MASK ; AdvanceOffset = bIsRegister ? 1 : 0 ; InputPtr = bIsRegister ? reinterpret_cast<)",
    "insertText": "T(Context.GetTempRegister(Offset)) : Context.GetConstant<T>(Offset)"
  },
  {
    "label": "IsConstant()",
    "kind": "Method",
    "detail": "Function (# else # error \" Not supported \" # endif StartPtr = InputPtr ; } bool)",
    "insertText": "IsConstant()"
  },
  {
    "label": "IsRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRegister()"
  },
  {
    "label": "GetAndAdvance()",
    "kind": "Method",
    "detail": "Function (InputPtr + = AdvanceOffset* Count ; } const T)",
    "insertText": "GetAndAdvance()"
  },
  {
    "label": "GetDestAndAdvance()",
    "kind": "Method",
    "detail": "Function (const T* Ret = InputPtr ; InputPtr + = AdvanceOffset ; return* Ret ; } const T*)",
    "insertText": "GetDestAndAdvance()"
  },
  {
    "label": "FExternalFuncRegisterHandler()",
    "kind": "Method",
    "detail": "Function (const T* Ret = InputPtr ; InputPtr + = AdvanceOffset ; return Ret ; } } ; template<T> struct FExternalFuncRegisterHandler { private : T* RESTRICT Register = nullptr ; int32 AdvanceOffset = 0 ; # if VECTORVM_SUPPORTS_LEGACY T Dummy ; # endif public : # if VECTORVM_SUPPORTS_EXPERIMENTAL&& VECTORVM_SUPPORTS_LEGACY)",
    "insertText": "FExternalFuncRegisterHandler(FVectorVMExternalFunctionContext& Context)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(T*)Context.Experimental.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Register =& Dummy ; AdvanceOffset = 0 ; } else {)",
    "insertText": "checkSlow(RegisterIndex < Context.Legacy.GetNumTempRegisters())"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(T*)Context.Legacy.GetTempRegister(RegisterIndex)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(T*)Context.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Register =& Dummy ; AdvanceOffset = 0 ; } else {)",
    "insertText": "checkSlow(RegisterIndex < Context.GetNumTempRegisters())"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(T*)Context.GetTempRegister(RegisterIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } # else # error \" Not supported \" # endif bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (Register + = AdvanceOffset ; } void)",
    "insertText": "Advance(int32 Count)"
  },
  {
    "label": "FExternalFuncConstHandler()",
    "kind": "Method",
    "detail": "Function (T* Ret = Register ; Register + = AdvanceOffset ; return Ret ; } } ; template<T> struct FExternalFuncConstHandler { T Constant ; # if VECTORVM_SUPPORTS_EXPERIMENTAL&& VECTORVM_SUPPORTS_LEGACY)",
    "insertText": "FExternalFuncConstHandler(FVectorVMExternalFunctionContext& Context)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (int32 AdvanceOffset ; const T*)",
    "insertText": "Register(const T*)Context.Experimental.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "ConstantIndex()",
    "kind": "Method",
    "detail": "Function (Register + = Context . Experimental . PerInstanceFnInstanceIdx* AdvanceOffset ; Constant =* Register ; } else { const uint16)",
    "insertText": "ConstantIndex(Context.Legacy.DecodeU16() & VVM_EXT_FUNC_INPUT_LOC_MASK)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Constant(*Context.Legacy.GetConstant<T>(ConstantIndex))"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (int32 AdvanceOffset ; const T*)",
    "insertText": "Register(const T*)Context.GetNextRegister(&AdvanceOffset)"
  },
  {
    "label": "FExternalFuncConstHandler()",
    "kind": "Method",
    "detail": "Function (Register + = Context . PerInstanceFnInstanceIdx* AdvanceOffset ; Constant =* Register ; } # elif VECTORVM_SUPPORTS_LEGACY)",
    "insertText": "FExternalFuncConstHandler(FVectorVMExternalFunctionContext& Context) : Constant(*Context.GetConstant<T>(Context.DecodeU16()& VVM_EXT_FUNC_INPUT_LOC_MASK))"
  }
]