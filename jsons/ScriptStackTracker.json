[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FScriptStackTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptStackTracker"
  },
  {
    "label": "FCallStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallStack"
  },
  {
    "label": "FScriptStackTracker()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" class FOutputDevice ; struct FFrame ; struct FScriptStackTracker { private : const int32 MAX_BACKTRACE_DEPTH = 5 0 ; struct FCallStack { int64 StackCount ; FString StackTrace ; } ; TArray<FCallStack> CallStacks ; TMap<uint32,int32> CRCToCallStackIndexMap ; bool bAvoidCapturing ; bool bIsEnabled ; uint64 StartFrameCounter ; uint64 StopFrameCounter ; public :)",
    "insertText": "FScriptStackTracker(bool bInIsEnabled = false ) : bAvoidCapturing(false) , bIsEnabled(bInIsEnabled) , StartFrameCounter(0) , StopFrameCounter(0)"
  },
  {
    "label": "CaptureStackTrace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CaptureStackTrace(const FFrame* StackFrame, int32 EntriesToIgnore = 0)"
  },
  {
    "label": "DumpStackTraces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStackTraces(int32 StackThreshold, FOutputDevice& Ar)"
  },
  {
    "label": "ResetTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTracking()"
  },
  {
    "label": "ToggleTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTracking()"
  }
]