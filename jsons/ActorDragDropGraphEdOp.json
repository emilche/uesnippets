[
  {
    "label": "FActorDragDropGraphEdOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDragDropGraphEdOp"
  },
  {
    "label": "ToolTipTextType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ToolTipTextType"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / DragAndDrop . h \" # include \" Styling / AppStyle . h \" # include \" DragAndDrop / ActorDragDropOp . h \" # define LOCTEXT_NAMESPACE \" ActorDragDrop \" class FActorDragDropGraphEdOp : public FActorDragDropOp { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FActorDragDropGraphEdOp, FActorDragDropOp)"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (ToolTip_Compatible,ToolTip_Incompatible,ToolTip_MultipleSelection_Incompatible,ToolTip_CompatibleAttach,ToolTip_IncompatibleGeneric,ToolTip_CompatibleGeneric,ToolTip_CompatibleMultipleAttach,ToolTip_IncompatibleMultipleAttach,ToolTip_CompatibleDetach,ToolTip_CompatibleMultipleDetach } ; void)",
    "insertText": "SetToolTip(ToolTipTextType TextType, FText ParamText = FText::GetEmpty())"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (CurrentIconBrush =)",
    "insertText": "GetBrush(TEXT(\"Graph.ConnectorFeedback.OK\"))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_Incompatible : { CurrentHoverText =)",
    "insertText": "Format(LOCTEXT(\"ToolTipIncompatible\", \"'{0}' is not compatible to replace object reference\"), FText::FromString(Actors[0].Get()->GetActorLabel()))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (CurrentIconBrush =)",
    "insertText": "GetBrush(TEXT(\"Graph.ConnectorFeedback.Error\"))"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_MultipleSelection_Incompatible : { CurrentHoverText =)",
    "insertText": "LOCTEXT(\"ToolTipMultipleSelectionIncompatible\", \"Cannot replace object reference when multiple objects are selected\")"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_CompatibleAttach : { CurrentHoverText =)",
    "insertText": "Format(LOCTEXT(\"ToolTipCompatibleAttach\", \"Attach {0} to {1}\"), FText::FromString(Actors[0].Get()->GetActorLabel()), ParamText)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_CompatibleMultipleAttach : { CurrentHoverText =)",
    "insertText": "Format(LOCTEXT(\"ToolTipCompatibleMultipleAttach\", \"Attach multiple objects to {0}\"), ParamText)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_IncompatibleMultipleAttach : { CurrentHoverText =)",
    "insertText": "Format(LOCTEXT(\"ToolTipIncompatibleMultipleAttach\", \"Cannot attach multiple objects to {0}\"), ParamText)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_CompatibleDetach : { CurrentHoverText =)",
    "insertText": "Format(LOCTEXT(\"ToolTipCompatibleDetach\", \"Detach {0} from {1}\"), FText::FromString(Actors[0].Get()->GetActorLabel()), ParamText)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (break ; } case ToolTip_CompatibleMultipleDetach : { CurrentHoverText =)",
    "insertText": "Format(LOCTEXT(\"ToolTipCompatibleDetachMultiple\", \"Detach multiple objects from {0}\"), ParamText)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (break ; } } } TSharedRef<FActorDragDropGraphEdOp>)",
    "insertText": "New(const TArray< TWeakObjectPtr<AActor> >& InActors)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FActorDragDropGraphEdOp> Operation =)",
    "insertText": "MakeShareable(new FActorDragDropGraphEdOp)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Operation ->)",
    "insertText": "Init(InActors)"
  },
  {
    "label": "SetupDefaults()",
    "kind": "Method",
    "detail": "Function (Operation ->)",
    "insertText": "SetupDefaults()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Operation ->)",
    "insertText": "Construct()"
  }
]