[
  {
    "label": "FInstanceCullingMergedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingMergedContext"
  },
  {
    "label": "FBatchItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchItem"
  },
  {
    "label": "FContextBatchInfoPacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextBatchInfoPacked"
  },
  {
    "label": "FInstanceCullingMergedContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InstanceCulling / InstanceCullingContext . h \" # include \" InstanceCulling / InstanceCullingLoadBalancer . h \" class FInstanceCullingMergedContext { public :)",
    "insertText": "FInstanceCullingMergedContext(EShaderPlatform InShaderPlatform, bool bInMustAddAllContexts = false, int32 InNumBins = 2)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (struct FBatchItem { FInstanceCullingContext* Context = nullptr ; FInstanceCullingDrawParams* Result = nullptr ; int32 GenericBinIndex = - 1 ; } ; struct FContextBatchInfoPacked { uint32 IndirectArgsOffset ; uint32 InstanceDataWriteOffset ; uint32 PayloadDataOffset ; uint32 CompactionDataOffset ; uint32 ViewIdsOffset ; uint32 NumViewIds_bAllowOcclusionCulling ; uint32 DynamicInstanceIdOffset ; uint32 DynamicInstanceIdMax ; uint32 ItemDataOffset [)",
    "insertText": "uint32(EBatchProcessingMode::Num)"
  },
  {
    "label": "MergeBatches()",
    "kind": "Method",
    "detail": "Function (} ; uint32 FirstGenericBinIndex = 1 ; TArray<FBatchItem,SceneRenderingAllocator> Batches ; TArray<FBatchItem,SceneRenderingAllocator> AsyncBatches ; TArray<int32,SceneRenderingAllocator> ViewIds ; TArray<FRHIDrawIndexedIndirectParameters,SceneRenderingAllocator> IndirectArgs ; TArray<uint32,SceneRenderingAllocator> DrawCommandDescs ; TArray<FInstanceCullingContext::FPayloadData,SceneRenderingAllocator> PayloadData ; TArray<uint32,SceneRenderingAllocator> InstanceIdOffsets ; TArray<FInstanceCullingContext::FCompactionData,SceneRenderingAllocator> DrawCommandCompactionData ; TArray<uint32,SceneRenderingAllocator> CompactionBlockDataIndices ; TArray<TInstanceCullingLoadBalancer<SceneRenderingAllocator>,SceneRenderingAllocator> LoadBalancers ; TArray<TArray<uint32,SceneRenderingAllocator>,SceneRenderingAllocator> BatchInds ; TArray<FContextBatchInfoPacked,SceneRenderingAllocator> BatchInfos ; EShaderPlatform ShaderPlatform = SP_NumPlatforms ; bool bMustAddAllContexts = false ; uint32 InstanceIdBufferElements = 0 U ; TArray<int32,TInlineAllocator<5>> TotalBatches ; TArray<int32,TInlineAllocator<5>> TotalItems ; int32 TotalIndirectArgs = 0 ; int32 TotalPayloads = 0 ; int32 TotalViewIds = 0 ; int32 TotalInstances = 0 ; int32 TotalCompactionDrawCommands = 0 ; int32 TotalCompactionBlocks = 0 ; int32 TotalCompactionInstances = 0 ; int32 NumCullingViews = 0 ; void)",
    "insertText": "MergeBatches()"
  },
  {
    "label": "AddBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBatch(FRDGBuilder& GraphBuilder, FInstanceCullingContext* Context, FInstanceCullingDrawParams* InstanceCullingDrawParams)"
  },
  {
    "label": "AddBatchItem()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddBatchItem(const FBatchItem& BatchItem)"
  },
  {
    "label": "GetLoadBalancerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLoadBalancerIndex(EBatchProcessingMode Mode, const FBatchItem& BatchItem)"
  }
]