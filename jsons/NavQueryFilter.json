[
  {
    "label": "INavigationQueryFilterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationQueryFilterInterface"
  },
  {
    "label": "FNavigationQueryFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationQueryFilter"
  },
  {
    "label": "INavigationQueryFilterInterface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class INavigationQueryFilterInterface { public : ~)",
    "insertText": "INavigationQueryFilterInterface()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetAreaCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAreaCost(uint8 AreaType, float Cost)"
  },
  {
    "label": "SetFixedAreaEnteringCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixedAreaEnteringCost(uint8 AreaType, float Cost)"
  },
  {
    "label": "SetExcludedArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludedArea(uint8 AreaType)"
  },
  {
    "label": "SetAllAreaCosts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllAreaCosts(const float* CostArray, const int32 Count)"
  },
  {
    "label": "GetAllAreaCosts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllAreaCosts(float* CostArray, float* FixedCostArray, const int32 Count)"
  },
  {
    "label": "SetBacktrackingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBacktrackingEnabled(const bool bBacktracking)"
  },
  {
    "label": "IsBacktrackingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBacktrackingEnabled()"
  },
  {
    "label": "GetHeuristicScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHeuristicScale()"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEqual(const INavigationQueryFilterInterface* Other)"
  },
  {
    "label": "SetIncludeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncludeFlags(uint16 Flags)"
  },
  {
    "label": "GetIncludeFlags()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetIncludeFlags()"
  },
  {
    "label": "SetExcludeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludeFlags(uint16 Flags)"
  },
  {
    "label": "GetExcludeFlags()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetExcludeFlags()"
  },
  {
    "label": "GetAdjustedEndLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAdjustedEndLocation(const FVector& EndLocation)"
  },
  {
    "label": "FNavigationQueryFilter()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavigationQueryFilter ; typedef TSharedPtr<FNavigationQueryFilter,ESPMode::ThreadSafe> FSharedNavQueryFilter ; typedef TSharedPtr<const FNavigationQueryFilter,ESPMode::ThreadSafe> FSharedConstNavQueryFilter ; struct FNavigationQueryFilter : public TSharedFromThis<FNavigationQueryFilter,ESPMode::ThreadSafe> {)",
    "insertText": "FNavigationQueryFilter() : QueryFilterImpl(NULL), MaxSearchNodes(DefaultMaxSearchNodes)"
  },
  {
    "label": "FNavigationQueryFilter()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FNavigationQueryFilter(const FNavigationQueryFilter& Source)"
  },
  {
    "label": "FNavigationQueryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationQueryFilter(const FNavigationQueryFilter* Source)"
  },
  {
    "label": "FNavigationQueryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationQueryFilter(const FSharedNavQueryFilter Source)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavigationQueryFilter&)",
    "insertText": "operator(const FNavigationQueryFilter& Source)"
  },
  {
    "label": "SetAllAreaCosts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllAreaCosts(const TArray<float>& CostArray)"
  },
  {
    "label": "SetMaxSearchNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSearchNodes(const uint32 MaxNodes)"
  },
  {
    "label": "GetMaxSearchNodes()",
    "kind": "Method",
    "detail": "Function (MaxSearchNodes = MaxNodes ; } uint32)",
    "insertText": "GetMaxSearchNodes()"
  },
  {
    "label": "SetBacktrackingEnabled()",
    "kind": "Method",
    "detail": "Function (QueryFilterImpl ->)",
    "insertText": "SetBacktrackingEnabled(bBacktracking)"
  },
  {
    "label": "GetAdjustedEndLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetAdjustedEndLocation(const FVector& EndPoint)"
  },
  {
    "label": "SetFilterType()",
    "kind": "Method",
    "detail": "Function (} template<FilterType> void)",
    "insertText": "SetFilterType()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (QueryFilterImpl =)",
    "insertText": "MakeShareable(new FilterType())"
  },
  {
    "label": "SetFilterImplementation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFilterImplementation(const INavigationQueryFilterInterface* InQueryFilterImpl)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (QueryFilterImpl =)",
    "insertText": "MakeShareable(InQueryFilterImpl->CreateCopy())"
  },
  {
    "label": "GetImplementation()",
    "kind": "Method",
    "detail": "Function (} const INavigationQueryFilterInterface*)",
    "insertText": "GetImplementation()"
  },
  {
    "label": "GetImplementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetImplementation()->Reset()"
  },
  {
    "label": "GetCopy()",
    "kind": "Method",
    "detail": "Function (} FSharedNavQueryFilter)",
    "insertText": "GetCopy()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} const uint32 DefaultMaxSearchNodes ; protected : void)",
    "insertText": "Assign(const FNavigationQueryFilter& Source)"
  }
]