[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "TREEMAP_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TREEMAP_API"
  },
  {
    "label": "FTreeMapNodeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeMapNodeData"
  },
  {
    "label": "FTreeMapNodeVisualInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeMapNodeVisualInfo"
  },
  {
    "label": "ITreeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITreeMap"
  },
  {
    "label": "ITreeMapCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITreeMapCustomization"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / Reply . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Animation / CurveSequence . h \" # include \" Widgets / SLeafWidget . h \" # include \" ITreeMap . h \" # include \" ITreeMapCustomization . h \" # include \" TreeMapStyle . h \" class FPaintArgs ; class FSlateWindowElementList ; class FWidgetPath ; class STreeMap : public SLeafWidget { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnTreeMapNodeInteracted, FTreeMapNodeData&, const FPointerEvent&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(STreeMap ) : _AllowEditing( false ) , _BackgroundImage( FTreeMapStyle::Get().GetBrush( \"TreeMap.Background\" ) ) , _NodeBackground( FTreeMapStyle::Get().GetBrush( \"TreeMap.NodeBackground\" ) ) , _HoveredNodeBackground( FTreeMapStyle::Get().GetBrush( \"TreeMap.HoveredNodeBackground\" ) ) , _NameFont() , _Name2Font() , _CenterTextFont() , _BorderPadding( FTreeMapStyle::Get().GetVector( \"TreeMap.BorderPadding\" ) ) , _MinimumInteractiveTreeNodeSize( 64 * 64 ) , _MinimumVisibleTreeNodeSize( 6 * 6 ) , _NavigationTransitionTime( 0.25f ) , _TopLevelContainerOuterPadding( 4.0f ) , _NestedContainerOuterPadding( 0.0f ) , _ContainerInnerPadding( 4.0f ) , _ChildContainerTextPadding( 2.0f)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ATTRIBUTE(bool, AllowEditing ) SLATE_ATTRIBUTE( const FSlateBrush*, BackgroundImage ) SLATE_ATTRIBUTE( const FSlateBrush*, NodeBackground ) SLATE_ATTRIBUTE( const FSlateBrush*, HoveredNodeBackground ) SLATE_ATTRIBUTE( FSlateFontInfo, NameFont ) SLATE_ATTRIBUTE( FSlateFontInfo, Name2Font)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(FSlateFontInfo, CenterTextFont)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ATTRIBUTE(FVector2D, BorderPadding ) SLATE_ARGUMENT( int32, MinimumInteractiveTreeNodeSize)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(int32, MinimumVisibleTreeNodeSize)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, NavigationTransitionTime)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, TopLevelContainerOuterPadding)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, NestedContainerOuterPadding)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, ContainerInnerPadding)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(float, ChildContainerTextPadding)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnTreeMapNodeInteracted, OnTreeMapNodeDoubleClicked ) SLATE_EVENT( FOnTreeMapNodeInteracted, OnTreeMapNodeRightClicked ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<class FTreeMapNodeData>& InTreeMapNodeData, const TSharedPtr< ITreeMapCustomization >& InCustomization)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyboardEvent)"
  },
  {
    "label": "SetTreeRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeRoot(const FTreeMapNodeDataRef& NewRoot, const bool bShouldPlayTransition)"
  },
  {
    "label": "CanZoomOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanZoomOut()"
  },
  {
    "label": "ZoomOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomOut()"
  },
  {
    "label": "GetTreeRoot()",
    "kind": "Method",
    "detail": "Function (FTreeMapNodeDataPtr)",
    "insertText": "GetTreeRoot()"
  },
  {
    "label": "RebuildTreeMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTreeMap(const bool bShouldPlayTransition)"
  },
  {
    "label": "FindNodeVisualUnderCursor()",
    "kind": "Method",
    "detail": "Function (protected : struct FTreeMapNodeVisualInfo*)",
    "insertText": "FindNodeVisualUnderCursor(const FGeometry& MyGeometry, const FVector2D& ScreenSpaceCursorPosition)"
  },
  {
    "label": "MakeBlendedNodeVisual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBlendedNodeVisual(const int32 VisualIndex, const float NavigationAlpha, FTreeMapNodeVisualInfo& OutVisual)"
  },
  {
    "label": "IsNavigationTransitionActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationTransitionActive()"
  },
  {
    "label": "TakeUndoSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeUndoSnapshot()"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Undo()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "ReparentNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReparentNode(const FTreeMapNodeDataRef DroppedNode, const FTreeMapNodeDataRef NewParentNode)"
  },
  {
    "label": "DeleteHoveredNode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DeleteHoveredNode()"
  },
  {
    "label": "InsertNewNodeAsChildOfHoveredNode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "InsertNewNodeAsChildOfHoveredNode(const FGeometry& MyGeometry)"
  },
  {
    "label": "FindNodeInCopiedTree()",
    "kind": "Method",
    "detail": "Function (FTreeMapNodeDataPtr)",
    "insertText": "FindNodeInCopiedTree(const FTreeMapNodeDataRef& NodeToFind, const FTreeMapNodeDataRef& OriginalNode, const FTreeMapNodeDataRef& CopiedRootNode)"
  },
  {
    "label": "StartRenamingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRenamingNode(const FGeometry& MyGeometry, const FTreeMapNodeDataRef& NodeData, const FVector2D& RelativePosition, const bool bIsNewNode)"
  },
  {
    "label": "RenamingNode_OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenamingNode_OnTextCommitted(const FText& NewText, ETextCommit::Type, TSharedRef<FTreeMapNodeData> NodeToRename)"
  },
  {
    "label": "StopRenamingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRenamingNode()"
  },
  {
    "label": "ApplyVisualizationToNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVisualizationToNodes(const FTreeMapNodeDataRef& Node)"
  },
  {
    "label": "ApplyVisualizationToNodesRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVisualizationToNodesRecursively(const FTreeMapNodeDataRef& Node, const FLinearColor& DefaultColor, const int32 TreeDepth)"
  },
  {
    "label": "ShowOptionsMenuAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOptionsMenuAt(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ShowOptionsMenuAtInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ShowOptionsMenuAtInternal(const FVector2D& ScreenSpacePosition, const FWidgetPath& WidgetPath)"
  }
]