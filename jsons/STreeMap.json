[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "TREEMAP_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TREEMAP_API"
  },
  {
    "label": "FTreeMapNodeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeMapNodeData"
  },
  {
    "label": "FTreeMapNodeVisualInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeMapNodeVisualInfo"
  },
  {
    "label": "ITreeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITreeMap"
  },
  {
    "label": "ITreeMapCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITreeMapCustomization"
  },
  {
    "label": "ITreeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITreeMap"
  },
  {
    "label": "FTreeMapNodeVisualInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeMapNodeVisualInfo"
  },
  {
    "label": "FTreeMapNodeVisualInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeMapNodeVisualInfo"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs, const TSharedRef<class FTreeMapNodeData>& InTreeMapNodeData, const TSharedPtr< ITreeMapCustomization >& InCustomization )"
  },
  {
    "label": "SetTreeRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeRoot( const FTreeMapNodeDataRef& NewRoot, const bool bShouldPlayTransition )"
  },
  {
    "label": "ZoomOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomOut()"
  },
  {
    "label": "RebuildTreeMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTreeMap( const bool bShouldPlayTransition )"
  },
  {
    "label": "TakeUndoSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeUndoSnapshot()"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Undo()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "ReparentNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReparentNode( const FTreeMapNodeDataRef DroppedNode, const FTreeMapNodeDataRef NewParentNode )"
  },
  {
    "label": "DeleteHoveredNode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DeleteHoveredNode()"
  },
  {
    "label": "InsertNewNodeAsChildOfHoveredNode()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "InsertNewNodeAsChildOfHoveredNode( const FGeometry& MyGeometry )"
  },
  {
    "label": "StartRenamingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRenamingNode( const FGeometry& MyGeometry, const FTreeMapNodeDataRef& NodeData, const FVector2D& RelativePosition, const bool bIsNewNode )"
  },
  {
    "label": "RenamingNode_OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenamingNode_OnTextCommitted( const FText& NewText, ETextCommit::Type, TSharedRef<FTreeMapNodeData> NodeToRename )"
  },
  {
    "label": "StopRenamingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRenamingNode()"
  },
  {
    "label": "ApplyVisualizationToNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVisualizationToNodes( const FTreeMapNodeDataRef& Node )"
  },
  {
    "label": "ApplyVisualizationToNodesRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVisualizationToNodesRecursively( const FTreeMapNodeDataRef& Node, const FLinearColor& DefaultColor, const int32 TreeDepth )"
  },
  {
    "label": "ShowOptionsMenuAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOptionsMenuAt( const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "ShowOptionsMenuAtInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOptionsMenuAtInternal(const FVector2D& ScreenSpacePosition, const FWidgetPath& WidgetPath)"
  }
]