[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TArrayDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArrayDeleter"
  },
  {
    "label": "ArraySample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_ArraySample_h # define Alembic_AbcCoreAbstract_ArraySample_h # include<Alembic / Util / Export . h> # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / ArraySampleKey . h> # include<Alembic / AbcCoreAbstract / DataType . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT ArraySample { public : typedef ArraySample this_type ; typedef ArraySampleKey Key ; typedef Key key_type ;)",
    "insertText": "ArraySample() : m_data( NULL ) , m_dataType() , m_dimensions()"
  },
  {
    "label": "ArraySample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArraySample(const void * iData, const DataType &iDataType, const Dimensions & iDims ) : m_data( iData ) , m_dataType( iDataType ) , m_dimensions( iDims)"
  },
  {
    "label": "getData()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "getData()"
  },
  {
    "label": "getKey()",
    "kind": "Method",
    "detail": "Function (} Key)",
    "insertText": "getKey()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "valid()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (m_data = NULL ; m_dataType =)",
    "insertText": "DataType()"
  },
  {
    "label": "Dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions =)",
    "insertText": "Dimensions()"
  },
  {
    "label": "AllocateArraySample()",
    "kind": "Method",
    "detail": "Function (} private : const void* m_data ; DataType m_dataType ; Dimensions m_dimensions ; } ; typedef Alembic::Util::shared_ptr<ArraySample> ArraySamplePtr ; ALEMBIC_EXPORT ArraySamplePtr)",
    "insertText": "AllocateArraySample(const DataType &iDtype, const Dimensions &iDims)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class T> struct TArrayDeleter { void)",
    "insertText": "operator()( void *memory)"
  },
  {
    "label": "ArraySample()",
    "kind": "Method",
    "detail": "Function (ArraySample* arraySample = static_cast<)",
    "insertText": "ArraySample(memory)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* data = reinterpret_cast<)",
    "insertText": "T(const_cast<void*>( arraySample->getData() ))"
  },
  {
    "label": "TAllocateArraySample()",
    "kind": "Method",
    "detail": "Function (delete [ ] data ; } delete arraySample ; } } ; template<class T> ArraySamplePtr)",
    "insertText": "TAllocateArraySample(size_t iDataTypeExtent, const Dimensions &iDims)"
  },
  {
    "label": "dtype()",
    "kind": "Method",
    "detail": "Function (DataType)",
    "insertText": "dtype(PODTraitsFromType<T>::pod_enum, iDataTypeExtent)"
  },
  {
    "label": "numPoints()",
    "kind": "Method",
    "detail": "Function (size_t numPODs = iDims .)",
    "insertText": "numPoints()"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (T* data = new T [ numPODs ] ; ArraySamplePtr)",
    "insertText": "ret(new ArraySample( reinterpret_cast<const void *>( data ), dtype, iDims ), TArrayDeleter<T>())"
  }
]