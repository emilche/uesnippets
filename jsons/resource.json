[
  {
    "label": "Resource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Resource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "ResourceUsageStateToString()",
    "kind": "Method",
    "detail": "Function (# ifndef API_ADAPTATION_RESOURCE_H_ # define API_ADAPTATION_RESOURCE_H_ # include<string> # include \" api / scoped_refptr . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class Resource ; enum class ResourceUsageState { kOveruse,kUnderuse,} ; RTC_EXPORT const char*)",
    "insertText": "ResourceUsageStateToString(ResourceUsageState usage_state)"
  },
  {
    "label": "ResourceListener()",
    "kind": "Method",
    "detail": "Function (class RTC_EXPORT ResourceListener { public : ~)",
    "insertText": "ResourceListener()"
  },
  {
    "label": "OnResourceUsageStateMeasured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResourceUsageStateMeasured(rtc::scoped_refptr<Resource> resource, ResourceUsageState usage_state)"
  },
  {
    "label": "Resource()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT Resource : public rtc::RefCountInterface { public :)",
    "insertText": "Resource()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Name()"
  },
  {
    "label": "SetResourceListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceListener(ResourceListener* listener)"
  }
]