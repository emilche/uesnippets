[
  {
    "label": "IDRS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDRS"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "omega()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_IDRS_H # define EIGEN_IDRS_H namespace Eigen { namespace internal { template<Vector,RealScalar> Vector::Scalar)",
    "insertText": "omega(const Vector& t, const Vector& s, RealScalar angle)"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (using numext::abs ; typedef Vector::Scalar Scalar ; const RealScalar ns = s .)",
    "insertText": "norm()"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (const Scalar ts = t .)",
    "insertText": "dot(s)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (const RealScalar rho =)",
    "insertText": "abs(ts / (nt * ns))"
  },
  {
    "label": "angle()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "angle(ns / nt) * (ts / abs(ts))"
  },
  {
    "label": "ts()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ts(nt * nt)"
  },
  {
    "label": "idrs()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,Rhs,Dest,Preconditioner> bool)",
    "insertText": "idrs(const MatrixType& A, const Rhs& b, Dest& x, const Preconditioner& precond, Index& iter, typename Dest::RealScalar& relres, Index S, bool smoothing, typename Dest::RealScalar angle, bool replacement)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (typedef Dest::RealScalar RealScalar ; typedef Dest::Scalar Scalar ; typedef Matrix<Scalar,Dynamic,1> VectorType ; typedef Matrix<Scalar,Dynamic,Dynamic,ColMajor> DenseMatrixType ; const Index N = b .)",
    "insertText": "size()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (S = S<x .)",
    "insertText": "rows() ? S : x.rows()"
  },
  {
    "label": "qr()",
    "kind": "Method",
    "detail": "Function (const RealScalar tol = relres ; const Index maxit = iter ; Index replacements = 0 ; bool trueres = false ; FullPivLU<DenseMatrixType> lu_solver ; DenseMatrixType P ; { HouseholderQR<DenseMatrixType>)",
    "insertText": "qr(DenseMatrixType::Random(N, S))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(qr.householderQ() * DenseMatrixType::Identity(N, S))"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (iter = 0 ; relres = 0 ; return true ; } const RealScalar mp =)",
    "insertText": "RealScalar(1e3) * NumTraits<Scalar>::epsilon()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const RealScalar tolb = tol* normb ; VectorType r = b - A* x ; VectorType x_s,r_s ;)",
    "insertText": "if(smoothing)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (iter = 0 ; relres = normr / normb ; return true ; } DenseMatrixType G =)",
    "insertText": "Zero(N, S)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (DenseMatrixType M =)",
    "insertText": "Identity(S, S)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "t(N), v(N)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Scalar om = 1 . ; iter = 0 ;)",
    "insertText": "while(normr > tolb && iter < maxit)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "f(r.adjoint() * P).adjoint()"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (lu_solver .)",
    "insertText": "compute(M.block(k , k , S -k, S - k ))"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (VectorType c = lu_solver .)",
    "insertText": "solve(f.segment(k , S - k ))"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (v = r - G .)",
    "insertText": "rightCols(S - k)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (v = precond .)",
    "insertText": "solve(v)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (U .)",
    "insertText": "col(k) = U.rightCols(S - k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "col(k) = A * U.col(k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Scalar alpha = P .)",
    "insertText": "col(i ).dot(G.col(k )) / M(i, i)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "col(k ) = G.col(k ) - alpha * G.col(i)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (U .)",
    "insertText": "col(k ) = U.col(k ) - alpha * U.col(i)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} M .)",
    "insertText": "block(k , k , S - k , 1) = (G.col(k ).adjoint() * P.rightCols(S - k )).adjoint()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (r = r - beta* G .)",
    "insertText": "col(k)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (t = r_s - r ; Scalar gamma = t .)",
    "insertText": "dot(r_s) / t.norm()"
  },
  {
    "label": "gamma()",
    "kind": "Method",
    "detail": "Function (r_s = r_s - gamma* t ; x_s = x_s -)",
    "insertText": "gamma(x_s - x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(normr < tolb || iter == maxit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(k < S-1)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "segment(k + 1, S - (k + 1) ) = f.segment(k + 1 , S - (k + 1)) - beta * M.block(k + 1 , k , S - (k + 1), 1)"
  },
  {
    "label": "omega()",
    "kind": "Method",
    "detail": "Function (t = A* v ; om =)",
    "insertText": "omega(t, r, angle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (trueres = true ; })",
    "insertText": "if(trueres && normr < normb)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (t = r_s - r ; Scalar gamma = t .)",
    "insertText": "dot(r_s) /t.norm()"
  },
  {
    "label": "IDRS()",
    "kind": "Method",
    "detail": "Function (x = x_s ; } relres = normr / normb ; return true ; } } template<_MatrixType,_Preconditioner = DiagonalPreconditioner<_MatrixType::Scalar>> class IDRS ; namespace internal { template<_MatrixType,_Preconditioner> struct traits<Eigen::IDRS<_MatrixType,_Preconditioner>> { typedef _MatrixType MatrixType ; typedef _Preconditioner Preconditioner ; } ; } template<_MatrixType,_Preconditioner> class IDRS : public IterativeSolverBase<IDRS<_MatrixType,_Preconditioner>> { public : typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef _Preconditioner Preconditioner ; private : typedef IterativeSolverBase<IDRS> Base ; using Base::m_error ; using Base::m_info ; using Base::m_isInitialized ; using Base::m_iterations ; using Base::matrix ; Index m_S ; bool m_smoothing ; RealScalar m_angle ; bool m_residual ; public :)",
    "insertText": "IDRS(): m_S(4), m_smoothing(false), m_angle(RealScalar(0.7)), m_residual(false)"
  },
  {
    "label": "IDRS()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "IDRS(const EigenBase<MatrixDerived>& A) : Base(A.derived()), m_S(4), m_smoothing(false), m_angle(RealScalar(0.7)), m_residual(false)"
  },
  {
    "label": "_solve_vector_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_vector_with_guess_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "maxIterations()",
    "kind": "Method",
    "detail": "Function (m_iterations =)",
    "insertText": "maxIterations()"
  },
  {
    "label": "idrs()",
    "kind": "Method",
    "detail": "Function (m_error = Base::m_tolerance ; bool ret =)",
    "insertText": "idrs(matrix(), b, x, Base::m_preconditioner, m_iterations, m_error, m_S,m_smoothing,m_angle,m_residual)"
  },
  {
    "label": "m_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_info(!ret)"
  },
  {
    "label": "setS()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setS(Index S)"
  },
  {
    "label": "setSmoothing()",
    "kind": "Method",
    "detail": "Function (S = 4 ; } m_S = S ; } void)",
    "insertText": "setSmoothing(bool smoothing)"
  },
  {
    "label": "setAngle()",
    "kind": "Method",
    "detail": "Function (m_smoothing = smoothing ; } void)",
    "insertText": "setAngle(RealScalar angle)"
  },
  {
    "label": "setResidualUpdate()",
    "kind": "Method",
    "detail": "Function (m_angle = angle ; } void)",
    "insertText": "setResidualUpdate(bool update)"
  }
]