[
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "UEnvQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQuery"
  },
  {
    "label": "UAITask_RunEQS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAITask_RunEQS"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / EngineTypes . h \" # include \" Tasks / AITask . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" AITask_RunEQS . generated . h \" class AAIController ; class UEnvQuery ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AIMODULE_API UAITask_RunEQS(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "SetQueryTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueryTemplate(UEnvQuery& InQueryTemplate)"
  },
  {
    "label": "SetNotificationDelegate()",
    "kind": "Method",
    "detail": "Function (EQSRequest . QueryTemplate =& InQueryTemplate ; } void)",
    "insertText": "SetNotificationDelegate(const FQueryFinishedSignature& InNotificationDelegate)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (NotificationDelegate = InNotificationDelegate ; } protected : void)",
    "insertText": "Activate()"
  },
  {
    "label": "OnEQSRequestFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEQSRequestFinished(TSharedPtr<FEnvQueryResult> Result)"
  }
]