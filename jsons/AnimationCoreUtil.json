[
  {
    "label": "FComponentBlendHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentBlendHelper"
  },
  {
    "label": "FMultiTransformBlendHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultiTransformBlendHelper"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FComponentBlendHelper { void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddParent(const FTransform& InTransform, float Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "Add(InTransform)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParentWeights .)",
    "insertText": "Add(Weight)"
  },
  {
    "label": "AddTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTranslation(const FVector& Translation, float Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Translations .)",
    "insertText": "Add(Translation)"
  },
  {
    "label": "AddRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRotation(const FQuat& Rotation, float Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Rotations .)",
    "insertText": "Add(Rotation)"
  },
  {
    "label": "AddScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddScale(const FVector& Scale, float Weight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Scales .)",
    "insertText": "Add(Scale)"
  },
  {
    "label": "GetBlendedParent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetBlendedParent(FTransform& OutTransform)"
  },
  {
    "label": "GetTotalWeight()",
    "kind": "Method",
    "detail": "Function (float TotalWeight =)",
    "insertText": "GetTotalWeight(ParentWeights)"
  },
  {
    "label": "MultiplyWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MultiplyWeight(TotalWeight > 1.f)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumBlends = Transforms .)",
    "insertText": "Num()"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (float ParentWeight = ParentWeights [ 0 ]* MultiplyWeight ; FVector OutTranslation = Transforms [ 0 ] .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (FQuat OutRotation = Transforms [ 0 ] .)",
    "insertText": "GetRotation()"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (FVector OutScale = Transforms [ 0 ] .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (ParentWeight = ParentWeights [ Index ]* MultiplyWeight ; OutTranslation =)",
    "insertText": "Lerp(OutTranslation, Transforms[Index].GetTranslation(), ParentWeight)"
  },
  {
    "label": "FastLerp()",
    "kind": "Method",
    "detail": "Function (OutRotation =)",
    "insertText": "FastLerp(OutRotation, Transforms[Index].GetRotation(), ParentWeight)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (} OutRotation .)",
    "insertText": "Normalize()"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (OutTransform =)",
    "insertText": "FTransform(OutRotation, OutTranslation, OutScale)"
  },
  {
    "label": "GetTotalWeight()",
    "kind": "Method",
    "detail": "Function (float TotalWeight =)",
    "insertText": "GetTotalWeight(TranslationWeights)"
  },
  {
    "label": "Translations()",
    "kind": "Method",
    "detail": "Function (Output =)",
    "insertText": "Translations(TranslationWeights[0] * MultiplyWeight)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Output + = Translations [)",
    "insertText": "Index(TranslationWeights[Index] * MultiplyWeight)"
  },
  {
    "label": "GetBlendedRotation()",
    "kind": "Method",
    "detail": "Function (} return true ; } } return false ; } bool)",
    "insertText": "GetBlendedRotation(FQuat& Output)"
  },
  {
    "label": "GetTotalWeight()",
    "kind": "Method",
    "detail": "Function (float TotalWeight =)",
    "insertText": "GetTotalWeight(RotationWeights)"
  },
  {
    "label": "Rotations()",
    "kind": "Method",
    "detail": "Function (Output =)",
    "insertText": "Rotations(RotationWeights[0] * MultiplyWeight)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (FQuat BlendRotation = Rotations [)",
    "insertText": "Index(RotationWeights[Index] * MultiplyWeight)"
  },
  {
    "label": "GetTotalWeight()",
    "kind": "Method",
    "detail": "Function (float TotalWeight =)",
    "insertText": "GetTotalWeight(ScaleWeights)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Output = FVector::ZeroVector ;)",
    "insertText": "for(int32 Index = 0; Index < Scales.Num(); ++Index)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Output + = Scales [)",
    "insertText": "Index(ScaleWeights[Index] * MultiplyWeight)"
  },
  {
    "label": "GetTotalWeight()",
    "kind": "Method",
    "detail": "Function (} return true ; } } return false ; } private : TArray<FTransform> Transforms ; TArray<FVector> Translations ; TArray<FQuat> Rotations ; TArray<FVector> Scales ; TArray<float> ParentWeights ; TArray<float> TranslationWeights ; TArray<float> RotationWeights ; TArray<float> ScaleWeights ; float)",
    "insertText": "GetTotalWeight(const TArray<float>& Weights)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float TotalWeight = 0 . f ;)",
    "insertText": "for(float Weight : Weights)"
  },
  {
    "label": "ScalarRegister()",
    "kind": "Method",
    "detail": "Function (OutTransform = Transforms [ 0 ]*)",
    "insertText": "ScalarRegister(ParentWeights[0] * MultiplyWeight)"
  },
  {
    "label": "AccumulateWithShortestRotation()",
    "kind": "Method",
    "detail": "Function (OutTransform .)",
    "insertText": "AccumulateWithShortestRotation(Transforms[Index], ScalarRegister(ParentWeights[Index] * MultiplyWeight))"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (} OutTransform .)",
    "insertText": "NormalizeRotation()"
  }
]