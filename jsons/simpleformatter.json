[
  {
    "label": "SimpleModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleModifier"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "number",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "number"
  },
  {
    "label": "SimpleFormatter()",
    "kind": "Method",
    "detail": "Function (# ifndef __SIMPLEFORMATTER_H__ # define __SIMPLEFORMATTER_H__ # include \" unicode / utypes . h \" # include \" unicode / unistr . h \" U_NAMESPACE_BEGIN namespace number { namespace impl { class SimpleModifier ; } } class SimpleFormatter U_FINAL : public UMemory { public :)",
    "insertText": "SimpleFormatter() : compiledPattern((char16_t)0)"
  },
  {
    "label": "SimpleFormatter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimpleFormatter(const UnicodeString& pattern, UErrorCode &errorCode)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(pattern, errorCode)"
  },
  {
    "label": "SimpleFormatter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimpleFormatter(const UnicodeString& pattern, int32_t min, int32_t max, UErrorCode &errorCode)"
  },
  {
    "label": "applyPatternMinMaxArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPatternMinMaxArguments(pattern, min, max, errorCode)"
  },
  {
    "label": "SimpleFormatter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimpleFormatter(const SimpleFormatter& other) : compiledPattern(other.compiledPattern)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SimpleFormatter&)",
    "insertText": "operator(const SimpleFormatter& other)"
  },
  {
    "label": "SimpleFormatter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleFormatter()"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "applyPattern(const UnicodeString &pattern, UErrorCode &errorCode)"
  },
  {
    "label": "applyPatternMinMaxArguments()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "applyPatternMinMaxArguments(const UnicodeString &pattern, int32_t min, int32_t max, UErrorCode &errorCode)"
  },
  {
    "label": "getArgumentLimit()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getArgumentLimit()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} UnicodeString&)",
    "insertText": "format(const UnicodeString &value0, UnicodeString &appendTo, UErrorCode &errorCode)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const UnicodeString &value0, const UnicodeString &value1, UnicodeString &appendTo, UErrorCode &errorCode)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const UnicodeString &value0, const UnicodeString &value1, const UnicodeString &value2, UnicodeString &appendTo, UErrorCode &errorCode)"
  },
  {
    "label": "formatAndAppend()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatAndAppend(const UnicodeString *const *values, int32_t valuesLength, UnicodeString &appendTo, int32_t *offsets, int32_t offsetsLength, UErrorCode &errorCode)"
  },
  {
    "label": "formatAndReplace()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatAndReplace(const UnicodeString *const *values, int32_t valuesLength, UnicodeString &result, int32_t *offsets, int32_t offsetsLength, UErrorCode &errorCode)"
  },
  {
    "label": "getTextWithNoArguments()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getTextWithNoArguments()"
  },
  {
    "label": "getTextWithNoArguments()",
    "kind": "Method",
    "detail": "Function (} # ifndef UnicodeString)",
    "insertText": "getTextWithNoArguments(int32_t *offsets, int32_t offsetsLength)"
  },
  {
    "label": "getArgumentLimit()",
    "kind": "Method",
    "detail": "Function (} # endif private : UnicodeString compiledPattern ; int32_t)",
    "insertText": "getArgumentLimit(const char16_t *compiledPattern, int32_t compiledPatternLength)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const char16_t *compiledPattern, int32_t compiledPatternLength, const UnicodeString *const *values, UnicodeString &result, const UnicodeString *resultCopy, UBool forbidResultAsValue, int32_t *offsets, int32_t offsetsLength, UErrorCode &errorCode)"
  }
]