[
  {
    "label": "segmentation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "segmentation"
  },
  {
    "label": "tx_probs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tx_probs"
  },
  {
    "label": "tx_counts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tx_counts"
  },
  {
    "label": "get_segment_id()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_COMMON_VP9_PRED_COMMON_H_ # define VPX_VP9_COMMON_VP9_PRED_COMMON_H_ # include \" vp9 / common / vp9_blockd . h \" # include \" vp9 / common / vp9_onyxc_int . h \" # include \" vpx_dsp / vpx_dsp_common . h \" # ifdef __cplusplus \" C \" { # endif int)",
    "insertText": "get_segment_id(const VP9_COMMON *cm, const uint8_t *segment_ids, BLOCK_SIZE bsize, int mi_row, int mi_col)"
  },
  {
    "label": "VPXMIN()",
    "kind": "Method",
    "detail": "Function (const int mi_offset = mi_row* cm -> mi_cols + mi_col ; const int bw = num_8x8_blocks_wide_lookup [ bsize ] ; const int bh = num_8x8_blocks_high_lookup [ bsize ] ; const int xmis =)",
    "insertText": "VPXMIN(cm->mi_cols - mi_col, bw)"
  },
  {
    "label": "VPXMIN()",
    "kind": "Method",
    "detail": "Function (const int ymis =)",
    "insertText": "VPXMIN(cm->mi_rows - mi_row, bh)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int x,y,segment_id = MAX_SEGMENTS ;)",
    "insertText": "for(y = 0; y < ymis; ++y) for (x = 0; x < xmis; ++x) segment_id = VPXMIN(segment_id, segment_ids[mi_offset + y * cm->mi_cols + x])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(segment_id >= 0 && segment_id < MAX_SEGMENTS)"
  },
  {
    "label": "above_sip()",
    "kind": "Method",
    "detail": "Function (seg_id_predicted : 0)",
    "insertText": "above_sip(above_mi != NULL)"
  },
  {
    "label": "left_sip()",
    "kind": "Method",
    "detail": "Function (seg_id_predicted : 0)",
    "insertText": "left_sip(left_mi != NULL)"
  },
  {
    "label": "vp9_get_skip_context()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp9_get_skip_context(const MACROBLOCKD *xd)"
  },
  {
    "label": "above_skip()",
    "kind": "Method",
    "detail": "Function (skip : 0)",
    "insertText": "above_skip(above_mi != NULL)"
  },
  {
    "label": "left_skip()",
    "kind": "Method",
    "detail": "Function (skip : 0)",
    "insertText": "left_skip(left_mi != NULL)"
  },
  {
    "label": "get_pred_context_switchable_interp()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "get_pred_context_switchable_interp(const MACROBLOCKD *xd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const MODE_INFO* const left_mi = xd -> left_mi ; const int left_type = left_mi ? left_mi -> interp_filter : SWITCHABLE_FILTERS ; const MODE_INFO* const above_mi = xd -> above_mi ; const int above_type = above_mi ? above_mi -> interp_filter : SWITCHABLE_FILTERS ;)",
    "insertText": "if(left_type == above_type)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const MODE_INFO* const above_mi = xd -> above_mi ; const MODE_INFO* const left_mi = xd -> left_mi ; const int has_above = ! ! above_mi ; const int has_left = ! ! left_mi ;)",
    "insertText": "if(has_above && has_left)"
  },
  {
    "label": "is_inter_block()",
    "kind": "Method",
    "detail": "Function (const int above_intra = !)",
    "insertText": "is_inter_block(above_mi)"
  },
  {
    "label": "is_inter_block()",
    "kind": "Method",
    "detail": "Function (const int left_intra = !)",
    "insertText": "is_inter_block(left_mi)"
  },
  {
    "label": "vp9_get_intra_inter_prob()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } vpx_prob)",
    "insertText": "vp9_get_intra_inter_prob(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_reference_mode_context()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp9_get_reference_mode_context(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_reference_mode_prob()",
    "kind": "Method",
    "detail": "Function (vpx_prob)",
    "insertText": "vp9_get_reference_mode_prob(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_pred_context_comp_ref_p()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp9_get_pred_context_comp_ref_p(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_pred_prob_comp_ref_p()",
    "kind": "Method",
    "detail": "Function (vpx_prob)",
    "insertText": "vp9_get_pred_prob_comp_ref_p(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_pred_context_comp_ref_p()",
    "kind": "Method",
    "detail": "Function (const int pred_context =)",
    "insertText": "vp9_get_pred_context_comp_ref_p(cm, xd)"
  },
  {
    "label": "vp9_get_pred_prob_single_ref_p1()",
    "kind": "Method",
    "detail": "Function (vpx_prob)",
    "insertText": "vp9_get_pred_prob_single_ref_p1(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_pred_context_single_ref_p2()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp9_get_pred_context_single_ref_p2(const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_get_pred_prob_single_ref_p2()",
    "kind": "Method",
    "detail": "Function (vpx_prob)",
    "insertText": "vp9_get_pred_prob_single_ref_p2(const VP9_COMMON *cm, const MACROBLOCKD *xd)"
  },
  {
    "label": "vp9_compound_reference_allowed()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "vp9_compound_reference_allowed(const VP9_COMMON *cm)"
  },
  {
    "label": "vp9_setup_compound_reference_mode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_setup_compound_reference_mode(VP9_COMMON *cm)"
  },
  {
    "label": "get_tx_size_context()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_tx_size_context(const MACROBLOCKD *xd)"
  },
  {
    "label": "above_ctx()",
    "kind": "Method",
    "detail": "Function (tx_size : max_tx_size)",
    "insertText": "above_ctx(has_above && !above_mi->skip) ? (int)"
  },
  {
    "label": "left_ctx()",
    "kind": "Method",
    "detail": "Function (tx_size : max_tx_size)",
    "insertText": "left_ctx(has_left && !left_mi->skip) ? (int)"
  },
  {
    "label": "get_tx_probs()",
    "kind": "Method",
    "detail": "Function (} const vpx_prob*)",
    "insertText": "get_tx_probs(TX_SIZE max_tx_size, int ctx, const struct tx_probs *tx_probs)"
  }
]