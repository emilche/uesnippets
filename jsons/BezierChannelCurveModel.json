[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FCurveAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveAttributes"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FKeyDrawInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawInfo"
  },
  {
    "label": "FKeyPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPosition"
  },
  {
    "label": "FBezierChannelBufferedCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBezierChannelBufferedCurveModel"
  },
  {
    "label": "FBezierChannelCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBezierChannelCurveModel"
  },
  {
    "label": "FBezierChannelBufferedCurveModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / ChannelCurveModel . h \" # include \" Channels / MovieSceneChannelHandle . h \" # include \" Channels / MovieSceneDoubleChannel . h \" # include \" Channels / MovieSceneFloatChannel . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" Curves / KeyHandle . h \" # include \" IBufferedCurveModel . h \" # include \" MovieSceneSection . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FCurveEditor ; class ISequencer ; class UMovieSceneSection ; struct FCurveAttributes ; struct FCurveEditorScreenSpace ; struct FKeyAttributes ; struct FKeyDrawInfo ; struct FKeyPosition ; template<ChannelType> class FBezierChannelBufferedCurveModel : public IBufferedCurveModel { public :)",
    "insertText": "FBezierChannelBufferedCurveModel(const ChannelType* InChannel, TWeakObjectPtr<UMovieSceneSection> InWeakSection, TArray<FKeyPosition>&& InKeyPositions, TArray<FKeyAttributes>&& InKeyAttributes, const FString& InLongDisplayName, const double InValueMin, const double InValueMax)"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurve(const FCurveEditor& InCurveEditor, const FCurveEditorScreenSpace& InScreenSpace, TArray<TTuple<double, double>>& OutInterpolatingPoints)"
  },
  {
    "label": "FBezierChannelCurveModel()",
    "kind": "Method",
    "detail": "Function (private : ChannelType Channel ; TWeakObjectPtr<UMovieSceneSection> WeakSection ; } ; template<ChannelType,ChannelValue,KeyType> class FBezierChannelCurveModel : public FChannelCurveModel<ChannelType,ChannelValue,KeyType> { public :)",
    "insertText": "FBezierChannelCurveModel(TMovieSceneChannelHandle<ChannelType> InChannel, UMovieSceneSection* InOwningSection, TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "FBezierChannelCurveModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBezierChannelCurveModel(TMovieSceneChannelHandle<ChannelType> InChannel, UMovieSceneSection* InOwningSection, UObject* InOwningObject, TWeakPtr<ISequencer> InWeakSequencer)"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurve(const FCurveEditor& CurveEditor, const FCurveEditorScreenSpace& ScreenSpace, TArray<TTuple<double, double>>& InterpolatingPoints)"
  },
  {
    "label": "GetKeyDrawInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyDrawInfo(ECurvePointType PointType, const FKeyHandle InKeyHandle, FKeyDrawInfo& OutDrawInfo)"
  },
  {
    "label": "GetKeyAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyAttributes(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyAttributes> OutAttributes)"
  },
  {
    "label": "SetKeyAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyAttributes(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyAttributes> InAttributes, EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (TPair<ERichCurveInterpMode,ERichCurveTangentMode>)",
    "insertText": "GetInterpolationMode(const double& InTime, ERichCurveInterpMode DefaultInterpolationMode, ERichCurveTangentMode DefaultTangentMode)"
  },
  {
    "label": "GetCurveAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurveAttributes(FCurveAttributes& OutCurveAttributes)"
  },
  {
    "label": "SetCurveAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveAttributes(const FCurveAttributes& InCurveAttributes)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double InMinTime, double InMaxTime, double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (protected : double)",
    "insertText": "GetKeyValue(TArrayView<const ChannelValue> Values, int32 Index)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(int32 Index, double KeyValue)"
  },
  {
    "label": "FeaturePointMethod()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FeaturePointMethod(double StartTime, double EndTime, double StartValue, double Mu, int Depth, int MaxDepth, double& MaxV, double& MinVal)"
  }
]