[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "VectorBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorBlock"
  },
  {
    "label": "IsColVector()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_VECTORBLOCK_H # define EIGEN_VECTORBLOCK_H namespace Eigen { namespace internal { template<VectorType,int Size> struct traits<VectorBlock<VectorType,Size>> : public traits<Block<VectorType,traits<VectorType>::Flags& RowMajorBit ? 1 : Size,traits<VectorType>::Flags& RowMajorBit ? Size : 1>> { } ; } template<VectorType,int Size> class VectorBlock : public Block<VectorType,internal::traits<VectorType>::Flags& RowMajorBit ? 1 : Size,internal::traits<VectorType>::Flags& RowMajorBit ? Size : 1> { typedef Block<VectorType,internal::traits<VectorType>::Flags& RowMajorBit ? 1 : Size,internal::traits<VectorType>::Flags& RowMajorBit ? Size : 1> Base ; enum {)",
    "insertText": "IsColVector(internal::traits<VectorType>::Flags & RowMajorBit)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(VectorBlock)"
  },
  {
    "label": "VectorBlock()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "VectorBlock(VectorType& vector, Index start, Index size) : Base(vector, IsColVector ? start : 0, IsColVector ? 0 : start, IsColVector ? size : 1, IsColVector ? 1 : size)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(VectorBlock)"
  },
  {
    "label": "VectorBlock()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "VectorBlock(VectorType& vector, Index start) : Base(vector, IsColVector ? start : 0, IsColVector ? 0 : start)"
  }
]