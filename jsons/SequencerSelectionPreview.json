[
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequencerSelectionPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelectionPreview"
  },
  {
    "label": "GetDefinedKeyStates()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" HAL / Platform . h \" # include \" Misc / Optional . h \" # include \" Curves / KeyHandle . h \" # include \" Templates / SharedPointer . h \" # include \" MVVM / ViewModels / ChannelModel . h \" # include \" MVVM / ViewModelPtr . h \" namespace UE::Sequencer { class FViewModel ; } enum class ESelectionPreviewState { Undefined,Selected,NotSelected } ; class FSequencerSelectionPreview { public : const TMap<FKeyHandle,ESelectionPreviewState>&)",
    "insertText": "GetDefinedKeyStates()"
  },
  {
    "label": "SetSelectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionState(TWeakPtr<UE::Sequencer::FViewModel> InModel, ESelectionPreviewState InState)"
  },
  {
    "label": "GetSelectionState()",
    "kind": "Method",
    "detail": "Function (ESelectionPreviewState)",
    "insertText": "GetSelectionState(FKeyHandle Key)"
  },
  {
    "label": "GetSelectionState()",
    "kind": "Method",
    "detail": "Function (ESelectionPreviewState)",
    "insertText": "GetSelectionState(TWeakPtr<UE::Sequencer::FViewModel> InModel)"
  },
  {
    "label": "GetChannelForKey()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::TViewModelPtr<UE::Sequencer::FChannelModel>)",
    "insertText": "GetChannelForKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "EmptyDefinedKeyStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyDefinedKeyStates()"
  },
  {
    "label": "EmptyDefinedModelStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyDefinedModelStates()"
  },
  {
    "label": "GetSelectionHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSelectionHash()"
  }
]