[
  {
    "label": "recursive_directory_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "recursive_directory_iterator"
  },
  {
    "label": "_LIBCPP_HIDDEN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_HIDDEN"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FILESYSTEM_RECURSIVE_DIRECTORY_ITERATOR_H # define _LIBCPP___FILESYSTEM_RECURSIVE_DIRECTORY_ITERATOR_H # include<__availability> # include<__config> # include<__filesystem / directory_entry . h> # include<__filesystem / directory_options . h> # include<__filesystem / path . h> # include<__iterator / iterator_traits . h> # include<__memory / shared_ptr . h> # include<__ranges / enable_borrowed_range . h> # include<__ranges / enable_view . h> # include<cstddef> # include<system_error> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (public : using value_type = directory_entry ; using difference_type = ptrdiff_t ; using pointer = directory_entry const* ; using reference = directory_entry const& ; using iterator_category = input_iterator_tag ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "recursive_directory_iterator() noexcept : __rec_(false)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "recursive_directory_iterator(const path& __p, directory_options __xoptions = directory_options::none) : recursive_directory_iterator(__p, __xoptions, nullptr)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "recursive_directory_iterator(const path& __p, directory_options __xoptions, error_code& __ec) : recursive_directory_iterator(__p, __xoptions, &__ec)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "recursive_directory_iterator(const path& __p, error_code& __ec) : recursive_directory_iterator(__p, directory_options::none, &__ec)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "recursive_directory_iterator(const recursive_directory_iterator&)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recursive_directory_iterator(recursive_directory_iterator&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (recursive_directory_iterator&)",
    "insertText": "operator(const recursive_directory_iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY recursive_directory_iterator&)",
    "insertText": "operator(recursive_directory_iterator&& __o)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__imp_ =)",
    "insertText": "move(__o.__imp_)"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (__rec_ = __o . __rec_ ; } return* this ; } ~)",
    "insertText": "recursive_directory_iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY const directory_entry&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY __dir_element_proxy)",
    "insertText": "operator(int)"
  },
  {
    "label": "__p()",
    "kind": "Method",
    "detail": "Function (__dir_element_proxy)",
    "insertText": "__p(**this)"
  },
  {
    "label": "__increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__increment()"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_FUNC_VIS directory_options)",
    "insertText": "options()"
  },
  {
    "label": "depth()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS int)",
    "insertText": "depth()"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "pop()"
  },
  {
    "label": "__pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__pop()"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "pop(error_code& __ec)"
  },
  {
    "label": "__pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__pop(&__ec)"
  },
  {
    "label": "recursion_pending()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "recursion_pending()"
  },
  {
    "label": "recursive_directory_iterator()",
    "kind": "Method",
    "detail": "Function (__rec_ = false ; } private : _LIBCPP_FUNC_VIS)",
    "insertText": "recursive_directory_iterator(const path& __p, directory_options __opt, error_code* __ec)"
  },
  {
    "label": "__dereference()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS const directory_entry&)",
    "insertText": "__dereference()"
  },
  {
    "label": "__try_recursion()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS bool)",
    "insertText": "__try_recursion(error_code* __ec)"
  },
  {
    "label": "__advance()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS void)",
    "insertText": "__advance(error_code* __ec = nullptr)"
  },
  {
    "label": "__increment()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS recursive_directory_iterator&)",
    "insertText": "__increment(error_code* __ec = nullptr)"
  },
  {
    "label": "__pop()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS void)",
    "insertText": "__pop(error_code* __ec = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const recursive_directory_iterator&, const recursive_directory_iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct _LIBCPP_HIDDEN __shared_imp ; shared_ptr<__shared_imp> __imp_ ; bool __rec_ ; } ; _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const recursive_directory_iterator& __lhs, const recursive_directory_iterator& __rhs)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY recursive_directory_iterator)",
    "insertText": "begin(recursive_directory_iterator __iter)"
  }
]