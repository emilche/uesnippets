[
  {
    "label": "SStatusBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SStatusBar"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FWidgetDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetDrawerConfig"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "FStatusBarMessageHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatusBarMessageHandle"
  },
  {
    "label": "UStatusBarSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStatusBarSubsystem"
  },
  {
    "label": "FStatusBarData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatusBarData"
  },
  {
    "label": "STATUSBAR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STATUSBAR_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStatusBarMessageHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EditorSubsystem . h \" # include \" Framework / Notifications / NotificationManager . h \" # include \" GlobalStatusBarExtension . h \" # include \" StatusBarSubsystem . generated . h \" class SStatusBar ; class SWindow ; class SWidget ; class SDockTab ; struct FWidgetDrawerConfig ; template<ObjectType> class TAttribute ; struct FStatusBarMessageHandle { class UStatusBarSubsystem ;)",
    "insertText": "FStatusBarMessageHandle() : Id(INDEX_NONE)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Id = INDEX_NONE ; } bool)",
    "insertText": "operator(const FStatusBarMessageHandle& OtherHandle)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} int32 Id ; } ; struct FStatusBarData { TWeakPtr<SStatusBar> StatusBarWidget ; TSharedPtr<SWidget> ConsoleEditBox ; } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual void Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "ToggleDebugConsole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleDebugConsole(TSharedRef<SWindow> ParentWindow, bool bAlwaysToggleDrawer=false)"
  },
  {
    "label": "OpenOutputLogDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenOutputLogDrawer()"
  },
  {
    "label": "OpenContentBrowserDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenContentBrowserDrawer()"
  },
  {
    "label": "ToggleContentBrowserDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleContentBrowserDrawer()"
  },
  {
    "label": "DismissContentBrowserDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DismissContentBrowserDrawer()"
  },
  {
    "label": "TryToggleDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToggleDrawer(const FName DrawerId)"
  },
  {
    "label": "ForceDismissDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForceDismissDrawer()"
  },
  {
    "label": "MakeStatusBarWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeStatusBarWidget(FName UniqueStatusBarName, const TSharedRef<SDockTab>& InParentTab)"
  },
  {
    "label": "ActiveWindowHasStatusBar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActiveWindowHasStatusBar()"
  },
  {
    "label": "ActiveWindowBehindNotificationHasStatusBar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActiveWindowBehindNotificationHasStatusBar()"
  },
  {
    "label": "RegisterDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDrawer(FName StatusBarName, FWidgetDrawerConfig&& Drawer, int32 SlotIndex = INDEX_NONE)"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDrawer(FName StatusBarName, FName DrawerId)"
  },
  {
    "label": "PushStatusBarMessage()",
    "kind": "Method",
    "detail": "Function (FStatusBarMessageHandle)",
    "insertText": "PushStatusBarMessage(FName StatusBarName, const TAttribute<FText>& InMessage, const TAttribute<FText>& InHintText)"
  },
  {
    "label": "PushStatusBarMessage()",
    "kind": "Method",
    "detail": "Function (FStatusBarMessageHandle)",
    "insertText": "PushStatusBarMessage(FName StatusBarName, const TAttribute<FText>& InMessage)"
  },
  {
    "label": "PopStatusBarMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopStatusBarMessage(FName StatusBarName, FStatusBarMessageHandle InHandle)"
  },
  {
    "label": "ClearStatusBarMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStatusBarMessages(FName StatusBarName)"
  },
  {
    "label": "RegisterGlobalStatusBarExtension()",
    "kind": "Method",
    "detail": "Function (IGlobalStatusBarExtension&)",
    "insertText": "RegisterGlobalStatusBarExtension(TUniquePtr<IGlobalStatusBarExtension>&& Extension)"
  },
  {
    "label": "UnregisterGlobalStatusBarExtension()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IGlobalStatusBarExtension>)",
    "insertText": "UnregisterGlobalStatusBarExtension(IGlobalStatusBarExtension* Extension)"
  },
  {
    "label": "StartProgressNotification()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "StartProgressNotification(FProgressNotificationHandle Handle, FText DisplayText, int32 TotalWorkToDo)"
  },
  {
    "label": "UpdateProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProgressNotification(FProgressNotificationHandle Handle, int32 TotalWorkDone, int32 UpdatedTotalWorkToDo, FText UpdatedDisplayText)"
  },
  {
    "label": "CancelProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelProgressNotification(FProgressNotificationHandle Handle)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EDrawerTriggerMode : uint8 { None = 0,Open = 1<<0,Dismiss = 1<<1,Toggle = Open | Dismiss } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EDrawerTriggerMode)"
  },
  {
    "label": "TriggerContentBrowser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TriggerContentBrowser(EDrawerTriggerMode DrawerTriggerMode)"
  },
  {
    "label": "OnDebugConsoleClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDebugConsoleClosed(TWeakPtr<SStatusBar> OwningStatusBar)"
  },
  {
    "label": "CreateContentBrowserIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateContentBrowserIfNeeded()"
  },
  {
    "label": "CreateAndShowNewUserTipIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndShowNewUserTipIfNeeded(TSharedPtr<SWindow> ParentWindow, bool bIsRunningStartupDialog)"
  },
  {
    "label": "GetNewUserTipState()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetNewUserTipState()"
  },
  {
    "label": "CreateAndShowOneTimeIndustryQueryIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndShowOneTimeIndustryQueryIfNeeded(TSharedPtr<SWindow> ParentWindow, bool bIsRunningStartupDialog)"
  },
  {
    "label": "GetOneTimeStateWithFallback()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetOneTimeStateWithFallback(const FString StoreId, const FString SectionName, const FString KeyName, const FString FallbackIniLocation, const FString FallbackIniKey)"
  },
  {
    "label": "SetOneTimeStateWithFallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOneTimeStateWithFallback(const FString StoreId, const FString SectionName, const FString KeyName, const FString FallbackIniLocation, const FString FallbackIniKey)"
  },
  {
    "label": "GetStatusBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SStatusBar>)",
    "insertText": "GetStatusBar(FName StatusBarName)"
  },
  {
    "label": "OnGetContentBrowser()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetContentBrowser()"
  },
  {
    "label": "OnContentBrowserOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentBrowserOpened(FName StatusBarWithDrawerName)"
  },
  {
    "label": "OnContentBrowserDismissed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentBrowserDismissed(const TSharedPtr<SWidget>& NewlyFocusedWidget)"
  },
  {
    "label": "HandleDeferredOpenContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeferredOpenContentBrowser(TSharedPtr<SWindow> ParentWindow)"
  },
  {
    "label": "OnGetOutputLog()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetOutputLog()"
  },
  {
    "label": "OnOutputLogOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputLogOpened(FName StatusBarWithDrawerName)"
  },
  {
    "label": "OnOutputLogDismised()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputLogDismised(const TSharedPtr<SWidget>& NewlyFocusedWidget)"
  },
  {
    "label": "OnDebugConsoleDrawerClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDebugConsoleDrawerClosed()"
  }
]