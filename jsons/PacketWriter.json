[
  {
    "label": "HORDE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HORDE_API"
  },
  {
    "label": "FPacketWriter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FPacketWriter(FBlobHandle InBundleHandle, FBlobHandle InPacketHandle)"
  },
  {
    "label": "AddImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImport(FBlobHandle Import)"
  },
  {
    "label": "GetOutputBuffer()",
    "kind": "Method",
    "detail": "Function (FMutableMemoryView)",
    "insertText": "GetOutputBuffer(size_t UsedSize, size_t DesiredSize)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(size_t Size)"
  },
  {
    "label": "CompleteBlob()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompleteBlob(const FBlobType& Type)"
  },
  {
    "label": "CompletePacket()",
    "kind": "Method",
    "detail": "Function (FPacket)",
    "insertText": "CompletePacket()"
  },
  {
    "label": "GetOutputBufferInternal()",
    "kind": "Method",
    "detail": "Function (FMutableMemoryView)",
    "insertText": "GetOutputBufferInternal(size_t UsedSize, size_t DesiredSize)"
  },
  {
    "label": "FindOrAddType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddType(FBlobType Type)"
  },
  {
    "label": "FindOrAddImport()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddImport(const FBlobHandle& Handle)"
  },
  {
    "label": "WriteTypeTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTypeTable()"
  },
  {
    "label": "WriteImportTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteImportTable()"
  },
  {
    "label": "WriteExportTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteExportTable()"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Align(size_t Offset)"
  }
]