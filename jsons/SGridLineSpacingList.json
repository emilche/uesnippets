[
  {
    "label": "SGridLineSpacingList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGridLineSpacingList"
  },
  {
    "label": "FNamedValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedValue"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Input / Events . h \" # include \" Widgets / SWidget . h \" # include \" Textures / SlateIcon . h \" # include \" Layout / Margin . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Widgets / Input / SEditableTextBox . h \" # include \" Widgets / Input / SComboButton . h \" class SGridLineSpacingList : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnValueChanged, TOptional<float>)"
  },
  {
    "label": "FNamedValue()",
    "kind": "Method",
    "detail": "Function (public : class FNamedValue { public :)",
    "insertText": "FNamedValue(TOptional<float> InValue, FText InName, FText InDescription)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Value = InValue ; Name = InName ; Description = InDescription ; } TOptional<float>)",
    "insertText": "GetValue()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TArray<FNamedValue>, DropDownValues ) SLATE_ATTRIBUTE( float, MinDesiredValueWidth ) SLATE_ATTRIBUTE( TOptional<float>, Value ) SLATE_ATTRIBUTE(bool, bShowNamedValue) SLATE_ATTRIBUTE( FText, HeaderText) SLATE_EVENT( FOnValueChanged, OnValueChanged ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (DropDownValues = InArgs . _DropDownValues ; Value = InArgs . _Value ; OnValueChanged = InArgs . _OnValueChanged ; FMenuBuilder)",
    "insertText": "MenuBuilder(true, nullptr)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"Header\", InArgs._HeaderText.Get())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const FNamedValue& NamedValue : DropDownValues)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuEntry(MenuBuilder, NamedValue)"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (} MenuBuilder .)",
    "insertText": "AddWidget(SNew(SBox) .HAlign(HAlign_Right) .Padding(FMargin(8, 0, 0, 0)) [ SNew(SEditableTextBox) .RevertTextOnEscape(true) .SelectAllTextWhenFocused(true) .Text(this, &SGridLineSpacingList::GetValueText) .OnTextCommitted(this, &SGridLineSpacingList::ValueTextCommitted) .MinDesiredWidth(InArgs._MinDesiredValueWidth) ], NSLOCTEXT(\"SNumericList\", \"CustomNumberDisplayLabel\", \"Custom\"))"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (ChildSlot [ MenuBuilder .)",
    "insertText": "MakeWidget()"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddMenuEntry(FMenuBuilder& MenuBuilder, const FNamedValue& Info)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(Info.GetName(), Info.GetDescription(), FSlateIcon(), FUIAction( FExecuteAction::CreateSP(this, &SGridLineSpacingList::SetValue, Info.GetValue()), FCanExecuteAction(), FIsActionChecked::CreateSP(this, &SGridLineSpacingList::IsSameValue, Info.GetValue()) ), NAME_None, EUserInterfaceActionType::RadioButton)"
  },
  {
    "label": "IsSameValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSameValue(TOptional<float> InValue)"
  },
  {
    "label": "GetValueText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetValueText()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "FromString(LexToSanitizedString(Value.Get() ? Value.Get().GetValue() : 0.0f))"
  },
  {
    "label": "ValueTextCommitted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValueTextCommitted(const FText& InNewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TOptional<float> NewValue = 0 . 0 f ; TTypeFromString<float)",
    "insertText": "FromString(NewValue.GetValue(), *InNewText.ToString())"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnValueChanged .)",
    "insertText": "ExecuteIfBound(NewValue)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetValue(TOptional<float> InValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ClearKeyboardFocus( EFocusCause::Cleared)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnValueChanged .)",
    "insertText": "ExecuteIfBound(InValue)"
  }
]