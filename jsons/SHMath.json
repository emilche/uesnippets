[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "MS_ALIGN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MS_ALIGN"
  },
  {
    "label": "TSHVectorRGB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSHVectorRGB"
  },
  {
    "label": "LegendrePolynomial()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / Color . h \" # include \" Math / MathFwd . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" # include \" Math / VectorRegister . h \" class FArchive ; float NormalizationConstants [ 9 ] ; int32 BasisL [ 9 ] ; int32 BasisM [ 9 ] ; float)",
    "insertText": "LegendrePolynomial(int32 L, int32 M, float X)"
  },
  {
    "label": "SHGetLuminanceFactors()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "SHGetLuminanceFactors()"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (} template<int32 Order> class)",
    "insertText": "MS_ALIGN(16)"
  },
  {
    "label": "NumSIMDVectors()",
    "kind": "Method",
    "detail": "Function (public : enum { MaxSHOrder = Order } ; enum { MaxSHBasis = MaxSHOrder* MaxSHOrder } ; enum { NumComponentsPerSIMDVector = 4 } ; enum {)",
    "insertText": "NumSIMDVectors(MaxSHBasis + NumComponentsPerSIMDVector - 1)"
  },
  {
    "label": "TSHVector()",
    "kind": "Method",
    "detail": "Function (enum { NumTotalFloats = NumSIMDVectors* NumComponentsPerSIMDVector } ; float V [ NumTotalFloats ] ; float ConstantBasisIntegral = 3 . 5 4 4 9 0 7 7 0 1 8 1 1 0 3 2 0 5 4 5 9 6 3 3 4 9 6 6 6 8 2 3 f ;)",
    "insertText": "TSHVector()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(V,sizeof(V))"
  },
  {
    "label": "TSHVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSHVector(float V0, float V1, float V2, float V3)"
  },
  {
    "label": "TSHVector()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = V0 ; V [ 1 ] = V1 ; V [ 2 ] = V2 ; V [ 3 ] = V3 ; })",
    "insertText": "TSHVector(const FVector4f& Vector)"
  },
  {
    "label": "TSHVector()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] = Vector . X ; V [ 1 ] = Vector . Y ; V [ 2 ] = Vector . Z ; V [ 3 ] = Vector . W ; } template<int32 OtherOrder>)",
    "insertText": "TSHVector(const TSHVector<OtherOrder>& Other)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(V, Other.V, sizeof(V))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Memzero(V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } TSHVector)",
    "insertText": "operator(const TSHVector& A,const float& B)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float ReplicatedScalar =)",
    "insertText": "VectorLoadFloat1(&B)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSHVector Result ;)",
    "insertText": "for(int32 BasisIndex = 0;BasisIndex < NumSIMDVectors;BasisIndex++)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float MulResult =)",
    "insertText": "VectorMultiply(VectorLoadAligned(&A.V[BasisIndex * NumComponentsPerSIMDVector]), ReplicatedScalar)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(MulResult, &Result.V[BasisIndex * NumComponentsPerSIMDVector])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TSHVector)",
    "insertText": "operator(const TSHVector& A,const float& Scalar)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "B(1.0f / Scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TSHVector)",
    "insertText": "operator(const TSHVector& A,const TSHVector& B)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float AddResult =)",
    "insertText": "VectorAdd(VectorLoadAligned(&A.V[BasisIndex * NumComponentsPerSIMDVector]), VectorLoadAligned(&B.V[BasisIndex * NumComponentsPerSIMDVector]))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(AddResult, &Result.V[BasisIndex * NumComponentsPerSIMDVector])"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float SubResult =)",
    "insertText": "VectorSubtract(VectorLoadAligned(&A.V[BasisIndex * NumComponentsPerSIMDVector]), VectorLoadAligned(&B.V[BasisIndex * NumComponentsPerSIMDVector]))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(SubResult, &Result.V[BasisIndex * NumComponentsPerSIMDVector])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (} return Result ; } float)",
    "insertText": "Dot(const TSHVector& A,const TSHVector& B)"
  },
  {
    "label": "VectorZero()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float ReplicatedResult =)",
    "insertText": "VectorZero()"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (ReplicatedResult =)",
    "insertText": "VectorAdd(ReplicatedResult, VectorDot4( VectorLoadAligned(&A.V[BasisIndex * NumComponentsPerSIMDVector]), VectorLoadAligned(&B.V[BasisIndex * NumComponentsPerSIMDVector]) ))"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} float Result ;)",
    "insertText": "VectorStoreFloat1(ReplicatedResult,&Result)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float AddResult =)",
    "insertText": "VectorAdd(VectorLoadAligned(&V[BasisIndex * NumComponentsPerSIMDVector]), VectorLoadAligned(&B.V[BasisIndex * NumComponentsPerSIMDVector]))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(AddResult, &V[BasisIndex * NumComponentsPerSIMDVector])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TSHVector&)",
    "insertText": "operator(const TSHVector& B)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float SubResult =)",
    "insertText": "VectorSubtract(VectorLoadAligned(&V[BasisIndex * NumComponentsPerSIMDVector]), VectorLoadAligned(&B.V[BasisIndex * NumComponentsPerSIMDVector]))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(SubResult, &V[BasisIndex * NumComponentsPerSIMDVector])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TSHVector&)",
    "insertText": "operator(const float& Scalar)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "B(1.0f/Scalar)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float MulResult =)",
    "insertText": "VectorMultiply(VectorLoadAligned(&V[BasisIndex * NumComponentsPerSIMDVector]), ReplicatedScalar)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(MulResult, &V[BasisIndex * NumComponentsPerSIMDVector])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TSHVector&)",
    "insertText": "operator(const float& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, TSHVector& SH)"
  },
  {
    "label": "CalcIntegral()",
    "kind": "Method",
    "detail": "Function (Ar<<SH . V [ BasisIndex ] ; } return Ar ; } float)",
    "insertText": "CalcIntegral()"
  },
  {
    "label": "ApplyWindowing()",
    "kind": "Method",
    "detail": "Function (* this / = Integral ; } } void)",
    "insertText": "ApplyWindowing(float Lambda)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (const float BandScaleFactor = 1 . 0)",
    "insertText": "f(1.0f + Lambda * float(l * l * (l + 1) * (l + 1)))"
  },
  {
    "label": "SHGetBasisIndex()",
    "kind": "Method",
    "detail": "Function (V [)",
    "insertText": "SHGetBasisIndex(l, m)"
  },
  {
    "label": "AreFloatsValid()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "AreFloatsValid()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bValid = true ;)",
    "insertText": "for(int32 BasisIndex = 0; BasisIndex < MaxSHBasis; BasisIndex++)"
  },
  {
    "label": "IsFinite()",
    "kind": "Method",
    "detail": "Function (bValid = bValid&&)",
    "insertText": "IsFinite(V[BasisIndex]) && !FMath::IsNaN(V[BasisIndex])"
  },
  {
    "label": "GetMaximumDirection()",
    "kind": "Method",
    "detail": "Function (} return bValid ; } FVector)",
    "insertText": "GetMaximumDirection()"
  },
  {
    "label": "CalcDiffuseTransfer()",
    "kind": "Method",
    "detail": "Function (} TSHVector)",
    "insertText": "CalcDiffuseTransfer(const FVector& Normal)"
  },
  {
    "label": "SHBasisFunction()",
    "kind": "Method",
    "detail": "Function (TSHVector Result =)",
    "insertText": "SHBasisFunction(Normal)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float L0 = UE_PI ; float L1 = 2* UE_PI / 3 ; float L2 = UE_PI / 4 ;)",
    "insertText": "for(int32 BasisIndex = 0;BasisIndex < MaxSHBasis;BasisIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Scale = 1 . 0 f ;)",
    "insertText": "if(BasisIndex < 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scale = L0 ; } else)",
    "insertText": "if(BasisIndex < 4)"
  },
  {
    "label": "SHBasisFunction()",
    "kind": "Method",
    "detail": "Function (Scale = L1 ; } else { Scale = L2 ; } Result . V [ BasisIndex ]* = Scale ; } return Result ; } TSHVector)",
    "insertText": "SHBasisFunction(const FVector& Vector)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSHVector Result ;)",
    "insertText": "for(int32 BasisIndex = 0; BasisIndex < TSHVector::MaxSHBasis; BasisIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Result . V [ BasisIndex ] = NormalizationConstants [ BasisIndex ] ; })",
    "insertText": "if(FMath::Abs(Vector.X) > UE_KINDA_SMALL_NUMBER || FMath::Abs(Vector.Y) > UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Phi()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Phi(float)FMath::Atan2(Vector.Y, Vector.X)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (const float SinPhiM =)",
    "insertText": "Sin((float)BandIndex * Phi)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (const float CosPhiM =)",
    "insertText": "Cos((float)BandIndex * Phi)"
  },
  {
    "label": "SHGetBasisIndex()",
    "kind": "Method",
    "detail": "Function (Result . V [)",
    "insertText": "SHGetBasisIndex(RecurrentBandIndex, -BandIndex)"
  },
  {
    "label": "SHGetBasisIndex()",
    "kind": "Method",
    "detail": "Function (Result . V [)",
    "insertText": "SHGetBasisIndex(RecurrentBandIndex, +BandIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int32 BasisIndex = 1; BasisIndex < TSHVector::MaxSHBasis; BasisIndex++)"
  },
  {
    "label": "LegendrePolynomial()",
    "kind": "Method",
    "detail": "Function (Result . V [ BasisIndex ]* =)",
    "insertText": "LegendrePolynomial(BasisL[BasisIndex], FMath::Abs(BasisM[BasisIndex]), (float)Vector.Z)"
  },
  {
    "label": "AmbientFunction()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TSHVector)",
    "insertText": "AmbientFunction()"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (TSHVector AmbientFunctionSH ; AmbientFunctionSH . V [ 0 ] = 1 . 0)",
    "insertText": "f(2.0f * FMath::Sqrt(UE_PI))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float TableL [ TSHVector::MaxSHOrder ] ; float TableB [ TSHVector::MaxSHOrder ] ; TableL [ 0 ] = 0 . 0 f ; TableB [ 0 ] = 0 . 0 f ;)",
    "insertText": "for(int32 l = 1; l < TSHVector::MaxSHOrder; l++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (TableL [ l ] =)",
    "insertText": "float(l * l * (l + 1) * (l + 1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float B = 0 . 0 f ;)",
    "insertText": "for(int32 m = -1; m <= l; m++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (B + = Coefficient* Coefficient ; } TableB [ l ] = B ; } float SquaredLaplacian = 0 . 0 f ;)",
    "insertText": "for(int32 l = 1; l < TSHVector::MaxSHOrder; ++l)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SquaredLaplacian + = TableL [ l ]* TableB [ l ] ; } const float TargetSquaredLaplacian = TargetLaplacian* TargetLaplacian ;)",
    "insertText": "if(SquaredLaplacian <= TargetSquaredLaplacian)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (float Temp = 1 . 0 f + Lambda* TableL [ l ] ; f + = TableL [ l ]* TableB [)",
    "insertText": "l(Temp * Temp)"
  },
  {
    "label": "fd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fd(2.0f * TableL[l] * TableL[l] * TableB[l]) / (Temp * Temp * Temp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} f = TargetSquaredLaplacian - f ; float delta = - f / fd ; Lambda + = delta ;)",
    "insertText": "if(FMath::Abs(delta) < UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GCC_ALIGN()",
    "kind": "Method",
    "detail": "Function (break ; } } return Lambda ; } })",
    "insertText": "GCC_ALIGN(16)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (TSHVector<2> Result ; Result . V [ 0 ] = 0 . 2 8 2 0 9 5 f ; Result . V [ 1 ] = - 0 . 4 8 8 6 0 3)",
    "insertText": "f(float)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FVector VectorSquared = Vector* Vector ; Result . V [ 4 ] = 1 . 0 9 2 5 4 8 f*)",
    "insertText": "float(Vector.X * Vector.Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Result . V [ 5 ] = - 1 . 0 9 2 5 4 8 f*)",
    "insertText": "float(Vector.Y * Vector.Z)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Result . V [ 6 ] = 0 . 3 1 5 3 9 2 f*)",
    "insertText": "float(3.0f * VectorSquared.Z - 1.0f)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Result . V [ 7 ] = - 1 . 0 9 2 5 4 8 f*)",
    "insertText": "float(Vector.X * Vector.Z)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Result . V [ 8 ] = 0 . 5 4 6 2 7 4 f*)",
    "insertText": "float(VectorSquared.X - VectorSquared.Y)"
  },
  {
    "label": "TSHVectorRGB()",
    "kind": "Method",
    "detail": "Function (} template<int32 OtherOrder>)",
    "insertText": "TSHVectorRGB(const TSHVectorRGB<OtherOrder>& Other)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "R(TSHVector<MaxSHOrder>)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "G(TSHVector<MaxSHOrder>)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "B(TSHVector<MaxSHOrder>)"
  },
  {
    "label": "GetLuminance()",
    "kind": "Method",
    "detail": "Function (} TSHVector<MaxSHOrder>)",
    "insertText": "GetLuminance()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (R =)",
    "insertText": "R(1 - DesaturateFraction)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (G =)",
    "insertText": "G(1 - DesaturateFraction)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (B =)",
    "insertText": "B(1 - DesaturateFraction)"
  },
  {
    "label": "ApplyWindowing()",
    "kind": "Method",
    "detail": "Function (R .)",
    "insertText": "ApplyWindowing(Lambda)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSHVectorRGB)",
    "insertText": "operator(const TSHVectorRGB& A, const float& Scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSHVectorRGB Result ; Result . R = A . R* Scalar ; Result . G = A . G* Scalar ; Result . B = A . B* Scalar ; return Result ; } TSHVectorRGB)",
    "insertText": "operator(const float& Scalar,const TSHVectorRGB& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSHVectorRGB Result ; Result . R = A . R* Scalar ; Result . G = A . G* Scalar ; Result . B = A . B* Scalar ; return Result ; } TSHVectorRGB)",
    "insertText": "operator(const TSHVectorRGB& A,const FLinearColor& Color)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSHVectorRGB Result ; Result . R = A . R* Color . R ; Result . G = A . G* Color . G ; Result . B = A . B* Color . B ; return Result ; } TSHVectorRGB)",
    "insertText": "operator(const FLinearColor& Color,const TSHVectorRGB& A)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSHVectorRGB Result ; Result . R = A . R* Color . R ; Result . G = A . G* Color . G ; Result . B = A . B* Color . B ; return Result ; } TSHVectorRGB)",
    "insertText": "operator(const TSHVectorRGB& A,const float& InB)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSHVectorRGB Result ; Result . R = A . R / InB ; Result . G = A . G / InB ; Result . B = A . B / InB ; return Result ; } TSHVectorRGB)",
    "insertText": "operator(const TSHVectorRGB& A,const TSHVectorRGB& InB)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TSHVectorRGB Result ; Result . R = A . R - InB . R ; Result . G = A . G - InB . G ; Result . B = A . B - InB . B ; return Result ; } FLinearColor)",
    "insertText": "Dot(const TSHVectorRGB& A,const TSHVector<MaxSHOrder>& InB)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (FLinearColor Result ; Result . R =)",
    "insertText": "Dot(A.R,InB)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Result . G =)",
    "insertText": "Dot(A.G,InB)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Result . B =)",
    "insertText": "Dot(A.B,InB)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Result . A = 1 . 0 f ; return Result ; } TSHVectorRGB&)",
    "insertText": "operator(const TSHVectorRGB& InB)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (R* = Scalar ; G* = Scalar ; B* = Scalar ; return* this ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, TSHVectorRGB& SH)"
  },
  {
    "label": "SHBasisFunction()",
    "kind": "Method",
    "detail": "Function (* this + = TSHVector<MaxSHOrder)",
    "insertText": "SHBasisFunction(WorldSpaceDirection) * (IncomingRadiance * Weight)"
  },
  {
    "label": "AddAmbient()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAmbient(const FLinearColor& Intensity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<int32 Order> TSHVectorRGB<Order>)",
    "insertText": "operator(const TSHVector<Order>& A,const FLinearColor& B)"
  }
]