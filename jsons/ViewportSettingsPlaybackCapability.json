[
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "EMovieSceneViewportParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EMovieSceneViewportParams"
  },
  {
    "label": "SetViewportParam",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SetViewportParam"
  },
  {
    "label": "MOVIESCENETRACKS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETRACKS_API"
  },
  {
    "label": "EMovieSceneViewportParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Evaluation / MovieScenePlaybackCapabilities . h \" # include \" Math / Vector . h \" class FViewportClient ; struct EMovieSceneViewportParams {)",
    "insertText": "EMovieSceneViewportParams()"
  },
  {
    "label": "SetViewportSettings()",
    "kind": "Method",
    "detail": "Function (FadeAmount = 0 . f ; FadeColor = FLinearColor::Black ; bEnableColorScaling = false ; } enum SetViewportParam { SVP_FadeAmount = 0 x00000001,SVP_FadeColor = 0 x00000002,SVP_ColorScaling = 0 x00000004,SVP_All = SVP_FadeAmount | SVP_FadeColor | SVP_ColorScaling } ; SetViewportParam SetWhichViewportParam ; float FadeAmount ; FLinearColor FadeColor ; FVector ColorScale ; bool bEnableColorScaling ; } ; namespace UE::MovieScene { struct FViewportSettingsPlaybackCapability { TPlaybackCapabilityID<FViewportSettingsPlaybackCapability> ID ; void)",
    "insertText": "SetViewportSettings(const TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  },
  {
    "label": "GetViewportSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewportSettings(TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  }
]