[
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FInstanceRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceRegistry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieSceneEntitySystemRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneEntitySystemRunner"
  },
  {
    "label": "FMovieSceneEntitySystemEvaluationReentrancyWindow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEntitySystemEvaluationReentrancyWindow"
  },
  {
    "label": "FDissectedUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDissectedUpdate"
  },
  {
    "label": "FQueuedUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedUpdateParams"
  },
  {
    "label": "FUpdateParamsAndContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateParamsAndContext"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MovieSceneEntityIDs . h \" # include \" MovieSceneSequenceID . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Delegates / Delegate . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneSequenceInstance . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" HAL / Platform . h \" # include \" MovieSceneEntityIDs . h \" # include \" MovieSceneSequenceID . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class UMovieSceneEntitySystemLinker ; namespace UE::MovieScene { class FEntityManager ; struct FInstanceRegistry ; enum class ERunnerFlushState { None = 0,Start = 1<<0,ConditionalRecompile = 1<<1,Import = 1<<2,ReimportAfterCompile = 1<<3,Spawn = 1<<4,Instantiation = 1<<5,Evaluation = 1<<6,Finalization = 1<<7,EventTriggers = 1<<8,PostEvaluation = 1<<9,End = 1<<1 0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERunnerFlushState)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,Flush = 1<<0,Finish = 1<<1,Destroy = 1<<2,FinalDissectionMask = Finish | Destroy,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERunnerUpdateFlags)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (ContinueAllowBudget,ContinueNoBudgeting,Break,} ; })",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FMovieSceneEntitySystemEventTriggers)"
  },
  {
    "label": "FMovieSceneEntitySystemRunner()",
    "kind": "Method",
    "detail": "Function (class FMovieSceneEntitySystemRunner : public TSharedFromThis<FMovieSceneEntitySystemRunner> { public : using FEntityManager = UE::MovieScene::FEntityManager ; using FInstanceHandle = UE::MovieScene::FInstanceHandle ; using FInstanceRegistry = UE::MovieScene::FInstanceRegistry ; public : ~)",
    "insertText": "FMovieSceneEntitySystemRunner()"
  },
  {
    "label": "GetQueuedUpdateCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetQueuedUpdateCount()"
  },
  {
    "label": "HasQueuedUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasQueuedUpdates()"
  },
  {
    "label": "HasQueuedUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasQueuedUpdates(FInstanceHandle Instance)"
  },
  {
    "label": "QueueUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueUpdate(const FMovieSceneContext& Context, FInstanceHandle Instance, UE::MovieScene::ERunnerUpdateFlags UpdateFlags = UE::MovieScene::ERunnerUpdateFlags::None)"
  },
  {
    "label": "QueueUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueUpdate(const FMovieSceneContext& Context, FInstanceHandle Instance, FSimpleDelegate&& InOnFlushedDelegate, UE::MovieScene::ERunnerUpdateFlags UpdateFlags = UE::MovieScene::ERunnerUpdateFlags::None)"
  },
  {
    "label": "QueueFinalUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueFinalUpdate(FInstanceHandle Instance)"
  },
  {
    "label": "QueueFinalUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueFinalUpdate(FInstanceHandle Instance, FSimpleDelegate&& InOnLastFlushDelegate)"
  },
  {
    "label": "QueueFinalUpdateAndDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueFinalUpdateAndDestroy(FInstanceHandle Instance)"
  },
  {
    "label": "AbandonAndDestroyInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbandonAndDestroyInstance(FInstanceHandle Instance)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(double BudgetMs = 0.f, UE::MovieScene::ERunnerFlushState TargetState = UE::MovieScene::ERunnerFlushState::None)"
  },
  {
    "label": "FlushOutstanding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushOutstanding(double BudgetMs = 0.f, UE::MovieScene::ERunnerFlushState TargetState = UE::MovieScene::ERunnerFlushState::None)"
  },
  {
    "label": "ResetFlushState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetFlushState()"
  },
  {
    "label": "DiscardQueuedUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardQueuedUpdates(FInstanceHandle Instance)"
  },
  {
    "label": "GetCurrentPhase()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ESystemPhase)",
    "insertText": "GetCurrentPhase()"
  },
  {
    "label": "IsUpdatingSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUpdatingSequence()"
  },
  {
    "label": "FlushSingleEvaluationPhase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlushSingleEvaluationPhase()"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneEntitySystemLinker*)",
    "insertText": "GetLinker()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetEntityManager()",
    "kind": "Method",
    "detail": "Function (} FEntityManager*)",
    "insertText": "GetEntityManager()"
  },
  {
    "label": "GetInstanceRegistry()",
    "kind": "Method",
    "detail": "Function (FInstanceRegistry*)",
    "insertText": "GetInstanceRegistry()"
  },
  {
    "label": "MarkForUpdate()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "MarkForUpdate(FInstanceHandle InInstanceHandle, UE::MovieScene::ERunnerUpdateFlags UpdateFlags)"
  },
  {
    "label": "GetQueuedEventTriggers()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntitySystemEventTriggers&)",
    "insertText": "GetQueuedEventTriggers()"
  },
  {
    "label": "FMovieSceneEntitySystemRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneEntitySystemRunner(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "QueueFinalUpdateImpl()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "QueueFinalUpdateImpl(FInstanceHandle Instance, FSimpleDelegate&& InOnLastFlushDelegate, bool bDestroyInstance)"
  },
  {
    "label": "FlushNext()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "FlushNext(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "StartEvaluation()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "StartEvaluation(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_ConditionalRecompile()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_ConditionalRecompile(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_UpdateSequenceInstances()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_UpdateSequenceInstances(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_ReimportSequenceInstances()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_ReimportSequenceInstances(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_SpawnPhase()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_SpawnPhase(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_InstantiationPhase()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_InstantiationPhase(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_PostInstantiation()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_PostInstantiation(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_EvaluationPhase()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ERunnerFlushResult)",
    "insertText": "GameThread_EvaluationPhase(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_EvaluationFinalizationPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThread_EvaluationFinalizationPhase(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_EventTriggerPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThread_EventTriggerPhase(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "GameThread_PostEvaluationPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThread_PostEvaluationPhase(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "EndEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEvaluation(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "EnterFlushState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterFlushState(UE::MovieScene::ERunnerFlushState EnteredFlushState)"
  },
  {
    "label": "SkipFlushState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipFlushState(UE::MovieScene::ERunnerFlushState FlushStateToSkip)"
  }
]