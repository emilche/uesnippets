[
  {
    "label": "FGraphPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphPartitioner"
  },
  {
    "label": "FBuilderSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuilderSettings"
  },
  {
    "label": "FMaterialRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialRange"
  },
  {
    "label": "FStripDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStripDesc"
  },
  {
    "label": "FCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCluster"
  },
  {
    "label": "GetVertSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StaticMeshResources . h \" # include \" Rendering / NaniteResources . h \" # include \" Math / Bounds . h \" # include \" MeshSimplify . h \" # include \" TriangleUtil . h \" class FGraphPartitioner ; namespace Nanite { struct FBuilderSettings { uint32 NumTexCoords = 0 ; uint32 NumBoneInfluences = 0 ; float MaxEdgeLengthFactor = 0 . 0 f ; bool bHasTangents : 1 = false ; bool bHasColors : 1 = false ; bool bPreserveArea : 1 = false ; bool bLerpUVs : 1 = true ; uint32)",
    "insertText": "GetVertSize()"
  },
  {
    "label": "GetColorOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetColorOffset()"
  },
  {
    "label": "GetUVOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetUVOffset()"
  },
  {
    "label": "GetBoneInfluenceOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetBoneInfluenceOffset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMaterialRange { uint32 RangeStart ; uint32 RangeLength ; uint32 MaterialIndex ; TArray<uint8,TInlineAllocator<1 2>> BatchTriCounts ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMaterialRange& Range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FStripDesc { uint32 Bitmasks [ 4 ] [ 3 ] ; uint32 NumPrevRefVerticesBeforeDwords ; uint32 NumPrevNewVerticesBeforeDwords ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FStripDesc& Desc)"
  },
  {
    "label": "FCluster()",
    "kind": "Method",
    "detail": "Function (} ; class FCluster { public :)",
    "insertText": "FCluster()"
  },
  {
    "label": "FCluster()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCluster(const FConstMeshBuildVertexView& InVerts, const TConstArrayView< const uint32 >& InIndexes, const TConstArrayView< const int32 >& InMaterialIndexes, FBuilderSettings& InSettings, uint32 TriBegin, uint32 TriEnd, const TConstArrayView< const uint32 >& TriIndexes, const TConstArrayView< const uint32 >& SortedTo, const FAdjacency& Adjacency)"
  },
  {
    "label": "FCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCluster(FCluster& SrcCluster, uint32 TriBegin, uint32 TriEnd, const TConstArrayView< const uint32 >& TriIndexes, const TConstArrayView< const uint32 >& SortedTo, const FAdjacency& Adjacency)"
  },
  {
    "label": "FCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCluster(TArrayView< const FCluster* > Children)"
  },
  {
    "label": "Simplify()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Simplify(uint32 TargetNumTris, float TargetError = 0.0f, uint32 LimitNumTris = 0)"
  },
  {
    "label": "BuildAdjacency()",
    "kind": "Method",
    "detail": "Function (FAdjacency)",
    "insertText": "BuildAdjacency()"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Split(FGraphPartitioner& Partitioner, const FAdjacency& Adjacency)"
  },
  {
    "label": "Bound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bound()"
  },
  {
    "label": "Voxelize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Voxelize(float VoxelSize)"
  },
  {
    "label": "BuildMaterialRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMaterialRanges()"
  },
  {
    "label": "AddVert()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "AddVert(const float* Vert, FHashTable& HashTable)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f&)",
    "insertText": "GetPosition(uint32 VertIndex)"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "GetAttributes(uint32 VertIndex)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f&)",
    "insertText": "GetNormal(uint32 VertIndex)"
  },
  {
    "label": "GetTangentX()",
    "kind": "Method",
    "detail": "Function (FVector3f&)",
    "insertText": "GetTangentX(uint32 VertIndex)"
  },
  {
    "label": "GetTangentYSign()",
    "kind": "Method",
    "detail": "Function (float&)",
    "insertText": "GetTangentYSign(uint32 VertIndex)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor&)",
    "insertText": "GetColor(uint32 VertIndex)"
  },
  {
    "label": "GetUVs()",
    "kind": "Method",
    "detail": "Function (FVector2f*)",
    "insertText": "GetUVs(uint32 VertIndex)"
  },
  {
    "label": "GetBoneInfluences()",
    "kind": "Method",
    "detail": "Function (FVector2f*)",
    "insertText": "GetBoneInfluences(uint32 VertIndex)"
  },
  {
    "label": "SanitizeVertexData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeVertexData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCluster& Cluster)"
  }
]