[
  {
    "label": "FNetResultHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetResultHandler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetResultManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetResultManager"
  },
  {
    "label": "EHandleNetResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" HAL / Platform . h \" # include \" Net / Core / Connection / NetResult . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" namespace UE { namespace Net { class FNetResultHandler ; enum class EHandleNetResult : uint8 { Closed,Handled,NotHandled } ; enum class EAddResultHandlerPos : uint8 { First,Last } ; class FNetResultManager final { public : using FUnhandledResultFunc = TUniqueFunction<)",
    "insertText": "EHandleNetResult(FNetResult&& InResult)"
  },
  {
    "label": "FNetResultManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNetResultManager()"
  },
  {
    "label": "FNetResultManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetResultManager(FNetResultManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetResultManager&)",
    "insertText": "operator(const FNetResultManager&)"
  },
  {
    "label": "FNetResultManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetResultManager(FNetResultManager&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetResultManager&)",
    "insertText": "operator(FNetResultManager&&)"
  },
  {
    "label": "AddResultHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResultHandler(TUniquePtr<FNetResultHandler>&& InResultHandler, EAddResultHandlerPos Position=EAddResultHandlerPos::Last)"
  },
  {
    "label": "AddResultHandlerPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResultHandlerPtr(FNetResultHandler* InResultHandler, EAddResultHandlerPos Position=EAddResultHandlerPos::Last)"
  },
  {
    "label": "HandleNetResult()",
    "kind": "Method",
    "detail": "Function (EHandleNetResult)",
    "insertText": "HandleNetResult(FNetResult&& InResult)"
  },
  {
    "label": "SetUnhandledResultCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUnhandledResultCallback(FUnhandledResultFunc InCallback)"
  },
  {
    "label": "FNetResultHandler()",
    "kind": "Method",
    "detail": "Function (private : TArray<FNetResultHandler*,TInlineAllocator<8>> ResultHandlers ; TArray<TUniquePtr<FNetResultHandler>> OwnedResultHandlers ; FUnhandledResultFunc UnhandledResultCallback ; } ; class FNetResultHandler { FNetResultManager ; public :)",
    "insertText": "FNetResultHandler()"
  },
  {
    "label": "FNetResultHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetResultHandler(const FNetResultHandler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetResultHandler&)",
    "insertText": "operator(const FNetResultHandler&)"
  },
  {
    "label": "FNetResultHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNetResultHandler(FNetResultHandler&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNetResultHandler&)",
    "insertText": "operator(FNetResultHandler&&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "HandleNetResult()",
    "kind": "Method",
    "detail": "Function (} EHandleNetResult)",
    "insertText": "HandleNetResult(FNetResult&& InCloseResult)"
  }
]