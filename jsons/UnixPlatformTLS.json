[
  {
    "label": "FUnixTLS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnixTLS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Unix / UnixSystemIncludes . h \" # include \" Misc / AssertionMacros . h \" # include \" GenericPlatform / GenericPlatformTLS . h \" # if)",
    "insertText": "defined(_GNU_SOURCE)"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentThreadId(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_GNU_SOURCE) #if !IS_MONOLITHIC uint32 ThreadIdTLS = static_cast<uint32>(reinterpret_cast<UPTRINT>(GetTlsValue(ThreadIdTLSKey)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(UNLIKELY(ThreadIdTLS == 0))"
  },
  {
    "label": "pid_t()",
    "kind": "Method",
    "detail": "Function (pid_t ThreadId = static_cast<)",
    "insertText": "pid_t(syscall(SYS_gettid))"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (ThreadIdTLS = static_cast<)",
    "insertText": "uint32(ThreadId)"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (# if ! IS_MONOLITHIC)",
    "insertText": "SetTlsValue(ThreadIdTLSKey, reinterpret_cast<void *>(static_cast<UPTRINT>(ThreadIdTLS)))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif } return ThreadIdTLS ; # else)",
    "insertText": "static_assert(sizeof(uint32) == sizeof(pthread_t), \"pthread_t cannot be converted to uint32 one to one - different number of bits. Review FUnixTLS::GetCurrentThreadId() implementation.\")"
  },
  {
    "label": "ClearThreadIdTLS()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "ClearThreadIdTLS(void)"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (# if IS_MONOLITHIC ThreadIdTLS = 0 ; # else)",
    "insertText": "SetTlsValue(ThreadIdTLSKey, nullptr)"
  },
  {
    "label": "AllocTlsSlot()",
    "kind": "Method",
    "detail": "Function (# endif } uint32)",
    "insertText": "AllocTlsSlot(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pthread_key_t Key = 0 ;)",
    "insertText": "if(pthread_key_create(&Key, nullptr) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(static_cast<uint32>(Key) == static_cast<uint32>(INDEX_NONE))"
  },
  {
    "label": "pthread_key_create()",
    "kind": "Method",
    "detail": "Function (pthread_key_t NewKey = 0 ; int SecondKeyAllocResult =)",
    "insertText": "pthread_key_create(&NewKey, nullptr)"
  },
  {
    "label": "pthread_key_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_key_delete((pthread_key_t)Key)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkf(NewKey != static_cast<uint32>(INDEX_NONE), TEXT(\"Could not allocate a usable TLS slot id.\"))"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (Key = NewKey ; } return Key ; } void)",
    "insertText": "SetTlsValue(uint32 SlotIndex,void* Value)"
  },
  {
    "label": "pthread_setspecific()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_setspecific((pthread_key_t)SlotIndex, Value)"
  },
  {
    "label": "GetTlsValue()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetTlsValue(uint32 SlotIndex)"
  },
  {
    "label": "FreeTlsSlot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeTlsSlot(uint32 SlotIndex)"
  },
  {
    "label": "pthread_key_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_key_delete((pthread_key_t)SlotIndex)"
  }
]