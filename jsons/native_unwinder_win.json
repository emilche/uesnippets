[
  {
    "label": "NativeUnwinderWin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NativeUnwinderWin"
  },
  {
    "label": "NativeUnwinderWin()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_NATIVE_UNWINDER_WIN_H_ # define BASE_PROFILER_NATIVE_UNWINDER_WIN_H_ # include<vector> # include \" base / profiler / unwinder . h \" namespace base { class NativeUnwinderWin : public Unwinder { public :)",
    "insertText": "NativeUnwinderWin()"
  },
  {
    "label": "NativeUnwinderWin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeUnwinderWin(const NativeUnwinderWin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NativeUnwinderWin&)",
    "insertText": "operator(const NativeUnwinderWin&)"
  },
  {
    "label": "CanUnwindFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnwindFrom(const Frame& current_frame)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (UnwindResult)",
    "insertText": "TryUnwind(RegisterContext* thread_context, uintptr_t stack_top, std::vector<Frame>* stack)"
  }
]