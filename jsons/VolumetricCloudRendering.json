[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "UVolumetricCloudComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVolumetricCloudComponent"
  },
  {
    "label": "FVolumetricCloudSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricCloudSceneProxy"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FVolumetricCloudRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricCloudRenderSceneInfo"
  },
  {
    "label": "FCloudRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCloudRenderContext"
  },
  {
    "label": "FCloudShadowAOData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCloudShadowAOData"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" RendererInterface . h \" # include \" RenderResource . h \" # include \" VolumeLighting . h \" class FScene ; class FViewInfo ; class FLightSceneInfo ; class UVolumetricCloudComponent ; class FVolumetricCloudSceneProxy ; class FLightSceneProxy ; struct FEngineShowFlags ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FVolumetricCloudCommonShaderParameters, ) SHADER_PARAMETER(FLinearColor, GroundAlbedo) SHADER_PARAMETER(FVector3f, CloudLayerCenterKm) SHADER_PARAMETER(float, PlanetRadiusKm) SHADER_PARAMETER(float, BottomRadiusKm) SHADER_PARAMETER(float, TopRadiusKm) SHADER_PARAMETER(float, TracingStartDistanceFromCamera) SHADER_PARAMETER(float, TracingStartMaxDistance) SHADER_PARAMETER(int32, TracingMaxDistanceMode) SHADER_PARAMETER(float, TracingMaxDistance) SHADER_PARAMETER(int32, SampleCountMin) SHADER_PARAMETER(int32, SampleCountMax) SHADER_PARAMETER(float, InvDistanceToSampleCountMax) SHADER_PARAMETER(int32, ShadowSampleCountMax) SHADER_PARAMETER(float, ShadowTracingMaxDistance) SHADER_PARAMETER(float, StopTracingTransmittanceThreshold) SHADER_PARAMETER(float, SkyLightCloudBottomVisibility) SHADER_PARAMETER_ARRAY(FLinearColor, AtmosphericLightCloudScatteredLuminanceScale, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapFarDepthKm, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapStrength, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapDepthBias, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapSampleCount, [2]) SHADER_PARAMETER_ARRAY(FVector4f,CloudShadowmapSizeInvSize, [2]) SHADER_PARAMETER_ARRAY(FVector4f,CloudShadowmapTracingSizeInvSize, [2]) SHADER_PARAMETER_ARRAY(FMatrix44f, CloudShadowmapTranslatedWorldToLightClipMatrix, [2]) SHADER_PARAMETER_ARRAY(FMatrix44f, CloudShadowmapTranslatedWorldToLightClipMatrixInv, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapTracingPixelScaleOffset, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapLightDir, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapLightPos, [2]) SHADER_PARAMETER_ARRAY(FVector4f, CloudShadowmapLightAnchorPos, [2]) SHADER_PARAMETER(float, CloudSkyAOFarDepthKm) SHADER_PARAMETER(float, CloudSkyAOStrength) SHADER_PARAMETER(float, CloudSkyAOSampleCount) SHADER_PARAMETER(FVector4f, CloudSkyAOSizeInvSize) SHADER_PARAMETER(FMatrix44f, CloudSkyAOTranslatedWorldToLightClipMatrix) SHADER_PARAMETER(FMatrix44f, CloudSkyAOTranslatedWorldToLightClipMatrixInv) SHADER_PARAMETER(FVector3f, CloudSkyAOTraceDir) END_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FVolumetricCloudCommonGlobalShaderParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FVolumetricCloudCommonShaderParameters, VolumetricCloudCommonParams) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FLightCloudTransmittanceParameters, ) SHADER_PARAMETER(FMatrix44f, CloudShadowmapTranslatedWorldToLightClipMatrix) SHADER_PARAMETER(float, CloudShadowmapFarDepthKm) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<float3>, CloudShadowmapTexture) SHADER_PARAMETER_SAMPLER(SamplerState, CloudShadowmapSampler) SHADER_PARAMETER(float, CloudShadowmapStrength) END_SHADER_PARAMETER_STRUCT() bool SetupLightCloudTransmittanceParameters(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, const FLightSceneInfo* LightSceneInfo, FLightCloudTransmittanceParameters& OutParameters)"
  },
  {
    "label": "LightMayCastCloudShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LightMayCastCloudShadow(const FScene* Scene, const FViewInfo& View, const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "FVolumetricCloudRenderSceneInfo()",
    "kind": "Method",
    "detail": "Function (class FVolumetricCloudRenderSceneInfo { public :)",
    "insertText": "FVolumetricCloudRenderSceneInfo(FVolumetricCloudSceneProxy& VolumetricCloudSceneProxy)"
  },
  {
    "label": "FVolumetricCloudRenderSceneInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVolumetricCloudRenderSceneInfo()"
  },
  {
    "label": "GetVolumetricCloudSceneProxy()",
    "kind": "Method",
    "detail": "Function (FVolumetricCloudSceneProxy&)",
    "insertText": "GetVolumetricCloudSceneProxy()"
  },
  {
    "label": "ShouldRenderVolumetricCloudWithBlueNoise_GameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderVolumetricCloudWithBlueNoise_GameThread(const FScene* Scene, const FSceneView& View)"
  },
  {
    "label": "ShouldViewVisualizeVolumetricCloudConservativeDensity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldViewVisualizeVolumetricCloudConservativeDensity(const FViewInfo& ViewInfo, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "VolumetricCloudWantsToSampleLocalLights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VolumetricCloudWantsToSampleLocalLights(const FScene* Scene, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "GetVolumetricCloudDebugViewMode()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetVolumetricCloudDebugViewMode(const FEngineShowFlags& ShowFlags)"
  },
  {
    "label": "ShouldVolumetricCloudTraceWithMinMaxDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVolumetricCloudTraceWithMinMaxDepth(const FViewInfo& ViewInfo)"
  },
  {
    "label": "ShouldVolumetricCloudTraceWithMinMaxDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVolumetricCloudTraceWithMinMaxDepth(const TArray<FViewInfo>& Views)"
  },
  {
    "label": "VolumetricCloudWantsSeparatedAtmosphereMieRayLeigh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VolumetricCloudWantsSeparatedAtmosphereMieRayLeigh(const FScene* Scene)"
  },
  {
    "label": "ShouldVolumetricCloudsApplyFogDuringReconstruction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVolumetricCloudsApplyFogDuringReconstruction(const FViewInfo& ViewInfo)"
  },
  {
    "label": "FCloudRenderContext()",
    "kind": "Method",
    "detail": "Function (struct FCloudRenderContext { FVolumetricCloudRenderSceneInfo* CloudInfo ; FMaterialRenderProxy* CloudVolumeMaterialProxy ; FRDGTextureRef SceneDepthZ = nullptr ; FRDGTextureRef SceneDepthMinAndMax = nullptr ; FViewInfo* MainView ; TUniformBufferRef<FViewUniformShaderParameters> ViewUniformBuffer ; FRenderTargetBindingSlots RenderTargets ; FRDGTextureRef SecondaryCloudTracingDataTexture = nullptr ; bool bShouldViewRenderVolumetricRenderTarget ; bool bSkipAerialPerspective ; bool bSkipHeightFog ; bool bIsReflectionRendering ; bool bIsSkyRealTimeReflectionRendering ; bool bSkipAtmosphericLightShadowmap ; bool bSecondAtmosphereLightEnabled ; bool bAsyncCompute ; bool bCloudDebugViewModeEnabled ; bool bAccumulateAlphaHoldOut ; FUintVector4 TracingCoordToZbufferCoordScaleBias ; FUintVector4 TracingCoordToFullResPixelCoordScaleBias ; uint32 NoiseFrameIndexModPattern ; FVolumeShadowingShaderParametersGlobal0 LightShadowShaderParams0 ; FRDGTextureRef VolumetricCloudShadowTexture [ 2 ] ; int VirtualShadowMapId0 = INDEX_NONE ; FRDGTextureRef DefaultCloudColorCubeTexture = nullptr ; FRDGTextureRef DefaultCloudColor02DTexture = nullptr ; FRDGTextureRef DefaultCloudColor12DTexture = nullptr ; FRDGTextureRef DefaultCloudDepthTexture = nullptr ; FRDGTextureUAVRef DefaultCloudColorCubeTextureUAV = nullptr ; FRDGTextureUAVRef DefaultCloudColor02DTextureUAV = nullptr ; FRDGTextureUAVRef DefaultCloudColor12DTextureUAV = nullptr ; FRDGTextureUAVRef DefaultCloudDepthTextureUAV = nullptr ; FRDGTextureUAVRef ComputeOverlapCloudColorCubeTextureUAVWithoutBarrier = nullptr ;)",
    "insertText": "FCloudRenderContext()"
  },
  {
    "label": "CreateDefaultTexturesIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultTexturesIfNeeded(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (private : } ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FVolumetricCloudShadowAOParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, ShadowMap0) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, ShadowMap1) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, SkyAO) END_SHADER_PARAMETER_STRUCT() FVolumetricCloudShadowAOParameters GetCloudShadowAOParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FVolumetricCloudRenderSceneInfo* CloudInfo)"
  },
  {
    "label": "GetCloudShadowAOData()",
    "kind": "Method",
    "detail": "Function (struct FCloudShadowAOData { bool bShouldSampleCloudShadow ; bool bShouldSampleCloudSkyAO ; FRDGTextureRef VolumetricCloudShadowMap [ 2 ] ; FRDGTextureRef VolumetricCloudSkyAO ; } ; void)",
    "insertText": "GetCloudShadowAOData(const FVolumetricCloudRenderSceneInfo* CloudInfo, const FViewInfo& View, FRDGBuilder& GraphBuilder, FCloudShadowAOData& OutData)"
  }
]