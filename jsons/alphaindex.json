[
  {
    "label": "UAlphabeticIndexLabelType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UAlphabeticIndexLabelType"
  },
  {
    "label": "UHashtable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UHashtable"
  },
  {
    "label": "BucketList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketList"
  },
  {
    "label": "Collator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Collator"
  },
  {
    "label": "RuleBasedCollator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuleBasedCollator"
  },
  {
    "label": "StringEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringEnumeration"
  },
  {
    "label": "UnicodeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeSet"
  },
  {
    "label": "UVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "AlphabeticIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlphabeticIndex"
  },
  {
    "label": "Record",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Record"
  },
  {
    "label": "Bucket()",
    "kind": "Method",
    "detail": "Function (# ifndef INDEXCHARS_H # define INDEXCHARS_H # include \" unicode / utypes . h \" # include \" unicode / uobject . h \" # include \" unicode / locid . h \" # include \" unicode / unistr . h \" # if ! UCONFIG_NO_COLLATION U_CDECL_BEGIN typedef enum UAlphabeticIndexLabelType { U_ALPHAINDEX_NORMAL = 0,U_ALPHAINDEX_UNDERFLOW = 1,U_ALPHAINDEX_INFLOW = 2,U_ALPHAINDEX_OVERFLOW = 3 } UAlphabeticIndexLabelType ; struct UHashtable ; U_CDECL_END U_NAMESPACE_BEGIN class BucketList ; class Collator ; class RuleBasedCollator ; class StringEnumeration ; class UnicodeSet ; class UVector ; class U_I18N_API AlphabeticIndex : public UObject { public : class U_I18N_API Bucket : public UObject { public : ~)",
    "insertText": "Bucket()"
  },
  {
    "label": "getLabel()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getLabel()"
  },
  {
    "label": "ImmutableIndex()",
    "kind": "Method",
    "detail": "Function (} ; class U_I18N_API ImmutableIndex : public UObject { public : ~)",
    "insertText": "ImmutableIndex()"
  },
  {
    "label": "getBucketCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBucketCount()"
  },
  {
    "label": "getBucketIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBucketIndex(const UnicodeString &name, UErrorCode &errorCode)"
  },
  {
    "label": "getBucket()",
    "kind": "Method",
    "detail": "Function (const Bucket*)",
    "insertText": "getBucket(int32_t index)"
  },
  {
    "label": "ImmutableIndex()",
    "kind": "Method",
    "detail": "Function (private : class AlphabeticIndex ;)",
    "insertText": "ImmutableIndex(BucketList *bucketList, Collator *collatorPrimaryOnly) : buckets_(bucketList), collatorPrimaryOnly_(collatorPrimaryOnly)"
  },
  {
    "label": "AlphabeticIndex()",
    "kind": "Method",
    "detail": "Function (} BucketList* buckets_ ; Collator* collatorPrimaryOnly_ ; } ;)",
    "insertText": "AlphabeticIndex(const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "AlphabeticIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlphabeticIndex(RuleBasedCollator *collator, UErrorCode &status)"
  },
  {
    "label": "addLabels()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "addLabels(const UnicodeSet &additions, UErrorCode &status)"
  },
  {
    "label": "addLabels()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "addLabels(const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "AlphabeticIndex()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AlphabeticIndex()"
  },
  {
    "label": "buildImmutableIndex()",
    "kind": "Method",
    "detail": "Function (ImmutableIndex*)",
    "insertText": "buildImmutableIndex(UErrorCode &errorCode)"
  },
  {
    "label": "getCollator()",
    "kind": "Method",
    "detail": "Function (const RuleBasedCollator&)",
    "insertText": "getCollator()"
  },
  {
    "label": "getInflowLabel()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getInflowLabel()"
  },
  {
    "label": "setInflowLabel()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "setInflowLabel(const UnicodeString &inflowLabel, UErrorCode &status)"
  },
  {
    "label": "getOverflowLabel()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getOverflowLabel()"
  },
  {
    "label": "setOverflowLabel()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "setOverflowLabel(const UnicodeString &overflowLabel, UErrorCode &status)"
  },
  {
    "label": "getUnderflowLabel()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getUnderflowLabel()"
  },
  {
    "label": "setUnderflowLabel()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "setUnderflowLabel(const UnicodeString &underflowLabel, UErrorCode &status)"
  },
  {
    "label": "getMaxLabelCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getMaxLabelCount()"
  },
  {
    "label": "setMaxLabelCount()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "setMaxLabelCount(int32_t maxLabelCount, UErrorCode &status)"
  },
  {
    "label": "addRecord()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "addRecord(const UnicodeString &name, const void *data, UErrorCode &status)"
  },
  {
    "label": "clearRecords()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "clearRecords(UErrorCode &status)"
  },
  {
    "label": "getBucketCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBucketCount(UErrorCode &status)"
  },
  {
    "label": "getRecordCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRecordCount(UErrorCode &status)"
  },
  {
    "label": "getBucketIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBucketIndex(const UnicodeString &itemName, UErrorCode &status)"
  },
  {
    "label": "getBucketIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBucketIndex()"
  },
  {
    "label": "nextBucket()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextBucket(UErrorCode &status)"
  },
  {
    "label": "getBucketLabel()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getBucketLabel()"
  },
  {
    "label": "getBucketLabelType()",
    "kind": "Method",
    "detail": "Function (UAlphabeticIndexLabelType)",
    "insertText": "getBucketLabelType()"
  },
  {
    "label": "getBucketRecordCount()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getBucketRecordCount()"
  },
  {
    "label": "resetBucketIterator()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "resetBucketIterator(UErrorCode &status)"
  },
  {
    "label": "nextRecord()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextRecord(UErrorCode &status)"
  },
  {
    "label": "getRecordName()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getRecordName()"
  },
  {
    "label": "getRecordData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "getRecordData()"
  },
  {
    "label": "resetRecordIterator()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "resetRecordIterator()"
  },
  {
    "label": "AlphabeticIndex()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "AlphabeticIndex(const AlphabeticIndex &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AlphabeticIndex&)",
    "insertText": "operator(const AlphabeticIndex &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const AlphabeticIndex& other)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const Locale *locale, UErrorCode &status)"
  },
  {
    "label": "addIndexExemplars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addIndexExemplars(const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "addChineseIndexCharacters()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "addChineseIndexCharacters(UErrorCode &errorCode)"
  },
  {
    "label": "firstStringsInScript()",
    "kind": "Method",
    "detail": "Function (UVector*)",
    "insertText": "firstStringsInScript(UErrorCode &status)"
  },
  {
    "label": "separated()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "separated(const UnicodeString &item)"
  },
  {
    "label": "initLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initLabels(UVector &indexCharacters, UErrorCode &errorCode)"
  },
  {
    "label": "createBucketList()",
    "kind": "Method",
    "detail": "Function (BucketList*)",
    "insertText": "createBucketList(UErrorCode &errorCode)"
  },
  {
    "label": "initBuckets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initBuckets(UErrorCode &errorCode)"
  },
  {
    "label": "clearBuckets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearBuckets()"
  },
  {
    "label": "internalResetBucketIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internalResetBucketIterator()"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (public : # ifndef struct Record : public UMemory { const UnicodeString name_ ; const void* data_ ;)",
    "insertText": "Record(const UnicodeString &name, const void *data)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Record()"
  }
]