[
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FD3D12CommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12CommandContext"
  },
  {
    "label": "FD3D12ContextArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ContextArray"
  },
  {
    "label": "TD3D12DualLinkedObjectIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TD3D12DualLinkedObjectIterator"
  },
  {
    "label": "FD3D12AdapterChild",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12AdapterChild"
  },
  {
    "label": "FD3D12DeviceChild",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DeviceChild"
  },
  {
    "label": "FD3D12GPUObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12GPUObject"
  },
  {
    "label": "FD3D12SingleNodeGPUObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SingleNodeGPUObject"
  },
  {
    "label": "FD3D12MultiNodeGPUObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12MultiNodeGPUObject"
  },
  {
    "label": "FD3D12LinkedAdapterObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12LinkedAdapterObject"
  },
  {
    "label": "FLinkedObjectIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkedObjectIterator"
  },
  {
    "label": "FLinkedObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkedObjects"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TD3D12ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ResourceTraits"
  },
  {
    "label": "TD3D12ObjectPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ObjectPool"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" RHIPipeline . h \" # include \" D3D12ThirdParty . h \" # include \" D3D12RHI . h \" # include \" D3D12RHIDefinitions . h \" # include \" Containers / StaticArray . h \" # include \" MultiGPU . h \" # include \" Stats / Stats . h \" class FD3D12Adapter ; class FD3D12Device ; class FD3D12CommandContext ; class FD3D12ContextArray ; template<ObjectType0,ObjectType1> class TD3D12DualLinkedObjectIterator ; typedef uint16 CBVSlotMask ;)",
    "insertText": "static_assert(MAX_ROOT_CBVS <= MAX_CBS, \"MAX_ROOT_CBVS must be <= MAX_CBS.\")"
  },
  {
    "label": "GRootCBVSlotMask()",
    "kind": "Method",
    "detail": "Function (const CBVSlotMask)",
    "insertText": "GRootCBVSlotMask(1 << MAX_ROOT_CBVS)"
  },
  {
    "label": "CBVSlotMask()",
    "kind": "Method",
    "detail": "Function (const CBVSlotMask GDescriptorTableCBVSlotMask = static_cast<)",
    "insertText": "CBVSlotMask((1<<MAX_CBS) - 1) & ~(GRootCBVSlotMask)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if MAX_SRVS> 3 2 typedef uint64 SRVSlotMask ; # else typedef uint32 SRVSlotMask ; # endif)",
    "insertText": "static_assert((8 * sizeof(SRVSlotMask)) >= MAX_SRVS, \"SRVSlotMask isn't large enough to cover all SRVs. Please increase the size.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (typedef uint32 SamplerSlotMask ;)",
    "insertText": "static_assert((8 * sizeof(SamplerSlotMask)) >= MAX_SAMPLERS, \"SamplerSlotMask isn't large enough to cover all Samplers. Please increase the size.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (typedef uint16 UAVSlotMask ;)",
    "insertText": "static_assert((8 * sizeof(UAVSlotMask)) >= MAX_UAVS, \"UAVSlotMask isn't large enough to cover all UAVs. Please increase the size.\")"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogD3D12RHI, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogD3D12GapRecorder, Log, All)"
  },
  {
    "label": "FD3D12AdapterChild()",
    "kind": "Method",
    "detail": "Function (class FD3D12AdapterChild { protected : FD3D12Adapter* ParentAdapter ; public :)",
    "insertText": "FD3D12AdapterChild(FD3D12Adapter* InParent = nullptr) : ParentAdapter(InParent)"
  },
  {
    "label": "GetParentAdapter()",
    "kind": "Method",
    "detail": "Function (} FD3D12Adapter*)",
    "insertText": "GetParentAdapter()"
  },
  {
    "label": "FD3D12DeviceChild()",
    "kind": "Method",
    "detail": "Function (ParentAdapter = InParent ; } } ; class FD3D12DeviceChild { protected : FD3D12Device* Parent ; public :)",
    "insertText": "FD3D12DeviceChild(FD3D12Device* InParent = nullptr) : Parent(InParent)"
  },
  {
    "label": "GetParentDevice()",
    "kind": "Method",
    "detail": "Function (} FD3D12Device*)",
    "insertText": "GetParentDevice()"
  },
  {
    "label": "GetGPUMask()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MGPU FRHIGPUMask)",
    "insertText": "GetGPUMask()"
  },
  {
    "label": "GetVisibilityMask()",
    "kind": "Method",
    "detail": "Function (} SGPU_CONSTEXPR FRHIGPUMask)",
    "insertText": "GetVisibilityMask()"
  },
  {
    "label": "FD3D12SingleNodeGPUObject()",
    "kind": "Method",
    "detail": "Function (} # endif protected : # if WITH_MGPU const FRHIGPUMask GPUMask ; const FRHIGPUMask VisibilityMask ; # endif } ; class FD3D12SingleNodeGPUObject : public FD3D12GPUObject { public :)",
    "insertText": "FD3D12SingleNodeGPUObject(FRHIGPUMask GPUMask) : FD3D12GPUObject(GPUMask, GPUMask) #if WITH_MGPU , GPUIndex(GPUMask.ToIndex())"
  },
  {
    "label": "GetGPUIndex()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MGPU uint32)",
    "insertText": "GetGPUIndex()"
  },
  {
    "label": "FD3D12LinkedAdapterObject()",
    "kind": "Method",
    "detail": "Function (} } ; template<ObjectType> class FD3D12LinkedAdapterObject { public : using LinkedObjectType = ObjectType ; using FDualLinkedObjectIterator = TD3D12DualLinkedObjectIterator<ObjectType,ObjectType> ; ~)",
    "insertText": "FD3D12LinkedAdapterObject()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FLinkedObjectIterator,TInlineAllocator<MAX_NUM_GPUS>> ObjectsToBeReleased ;)",
    "insertText": "for(auto It = ++FLinkedObjectIterator(this); It; ++It)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ObjectsToBeReleased .)",
    "insertText": "Add(It)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto ObjectToRelease : ObjectsToBeReleased)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ObjectToRelease ->)",
    "insertText": "Release()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ObjectsToBeReleased .)",
    "insertText": "Empty()"
  },
  {
    "label": "IsHeadLink()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsHeadLink()"
  },
  {
    "label": "CreateLinkedObjects()",
    "kind": "Method",
    "detail": "Function (} template<ReturnType,CreationCoreFunction,CreationParameterFunction> ReturnType*)",
    "insertText": "CreateLinkedObjects(FRHIGPUMask GPUMask, const CreationParameterFunction& pfnGetCreationParameter, const CreationCoreFunction& pfnCreationCore)"
  },
  {
    "label": "CA_ASSUME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CA_ASSUME(NewObject != nullptr)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (ObjectOut = NewObject ; } else { NewObject ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ObjectOut -> LinkedObjects . Objects [ GPUIndex ] = NewObject ; })",
    "insertText": "if(ObjectOut != nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ObjectOut -> LinkedObjects . GPUMask = GPUMask ;)",
    "insertText": "for(auto GPUIterator = ++FRHIGPUMask::FIterator(GPUMask); GPUIterator; ++GPUIterator)"
  },
  {
    "label": "GetLinkedObject()",
    "kind": "Method",
    "detail": "Function (LinkedObjects = ObjectOut->LinkedObjects)",
    "insertText": "GetLinkedObject(*GPUIterator)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } # else)",
    "insertText": "check(GPUMask == FRHIGPUMask::GPU0())"
  },
  {
    "label": "pfnCreationCore()",
    "kind": "Method",
    "detail": "Function (ObjectOut =)",
    "insertText": "pfnCreationCore(pfnGetCreationParameter(0), nullptr)"
  },
  {
    "label": "GetLinkedObject()",
    "kind": "Method",
    "detail": "Function (# endif return ObjectOut ; } ObjectType*)",
    "insertText": "GetLinkedObject(uint32 GPUIndex)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return LinkedObjects . Objects [ GPUIndex ] ; # else)",
    "insertText": "checkSlow(GPUIndex == 0)"
  },
  {
    "label": "GetFirstLinkedObject()",
    "kind": "Method",
    "detail": "Function (# endif } ObjectType*)",
    "insertText": "GetFirstLinkedObject()"
  },
  {
    "label": "GetFirstIndex()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return LinkedObjects . Objects [ LinkedObjects . GPUMask .)",
    "insertText": "GetFirstIndex()"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<)",
    "insertText": "ObjectType(const_cast<FD3D12LinkedAdapterObject*>(this))"
  },
  {
    "label": "GetLinkedObjectsGPUMask()",
    "kind": "Method",
    "detail": "Function (# endif } FRHIGPUMask)",
    "insertText": "GetLinkedObjectsGPUMask()"
  },
  {
    "label": "GPU0()",
    "kind": "Method",
    "detail": "Function (# if WITH_MGPU return LinkedObjects . GPUMask ; # else return)",
    "insertText": "GPU0()"
  },
  {
    "label": "FLinkedObjectIterator()",
    "kind": "Method",
    "detail": "Function (# endif } class FLinkedObjectIterator { public :)",
    "insertText": "FLinkedObjectIterator(FD3D12LinkedAdapterObject* InObject) : GPUIterator(0) , Object(nullptr)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (GPUIterator =)",
    "insertText": "FIterator(InObject->GetLinkedObjectsGPUMask())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FLinkedObjectIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FLinkedObjectIterator)",
    "insertText": "end()"
  },
  {
    "label": "FLinkedObjects()",
    "kind": "Method",
    "detail": "Function (} private : # if WITH_MGPU struct FLinkedObjects {)",
    "insertText": "FLinkedObjects() : Objects(InPlace, nullptr)"
  },
  {
    "label": "TD3D12DualLinkedObjectIterator()",
    "kind": "Method",
    "detail": "Function (} FRHIGPUMask GPUMask ; TStaticArray<ObjectType*,MAX_NUM_GPUS> Objects ; } ; FLinkedObjects LinkedObjects ; # endif } ; template<ObjectType0,ObjectType1> class TD3D12DualLinkedObjectIterator { public :)",
    "insertText": "TD3D12DualLinkedObjectIterator(FD3D12LinkedAdapterObject<typename ObjectType0::LinkedObjectType>* InObject0, FD3D12LinkedAdapterObject<typename ObjectType1::LinkedObjectType>* InObject1) : GPUIterator(0)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (GPUIterator =)",
    "insertText": "FIterator(GPUMask)"
  },
  {
    "label": "ObjectType0()",
    "kind": "Method",
    "detail": "Function (Object0 = static_cast<)",
    "insertText": "ObjectType0(InObject0->GetLinkedObject(*GPUIterator))"
  },
  {
    "label": "ObjectType1()",
    "kind": "Method",
    "detail": "Function (Object1 = static_cast<)",
    "insertText": "ObjectType1(InObject1->GetLinkedObject(*GPUIterator))"
  },
  {
    "label": "ObjectType0()",
    "kind": "Method",
    "detail": "Function (Object0 = static_cast<)",
    "insertText": "ObjectType0(Object0->GetLinkedObject(*GPUIterator))"
  },
  {
    "label": "ObjectType1()",
    "kind": "Method",
    "detail": "Function (Object1 = static_cast<)",
    "insertText": "ObjectType1(Object1->GetLinkedObject(*GPUIterator))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} else { Object0 = nullptr ; Object1 = nullptr ; } return* this ; } operator)",
    "insertText": "bool()"
  }
]