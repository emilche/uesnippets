[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FPackageIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageIndex"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectResource"
  },
  {
    "label": "FObjectExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectExport"
  },
  {
    "label": "FObjectTextExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectTextExport"
  },
  {
    "label": "FObjectImport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectImport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FObjectDataResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectDataResource"
  },
  {
    "label": "FPackageIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Serialization / BulkDataCookedIndex . h \" # include \" Serialization / StructuredArchive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" Serialization / StructuredArchiveSlots . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" class FArchive ; class FLinkerLoad ; class FPackageIndex ; class UClass ; class UObject ; class FPackageIndex { int32 Index ;)",
    "insertText": "FPackageIndex(int32 InIndex) : Index(InIndex)"
  },
  {
    "label": "FPackageIndex()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FPackageIndex() : Index(0)"
  },
  {
    "label": "IsImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImport()"
  },
  {
    "label": "FromExport()",
    "kind": "Method",
    "detail": "Function (} FPackageIndex)",
    "insertText": "FromExport(int32 ExportIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPackageIndex& Other)"
  },
  {
    "label": "FStructuredArchiveFromArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructuredArchiveFromArchive(Ar).GetSlot()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Slot<<Value . Index ; } [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(const FPackageIndex& In)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const FPackageIndex& Value)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LexFromString(FPackageIndex& Value, const TCHAR* String)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (Value . Index =)",
    "insertText": "Atoi(String)"
  },
  {
    "label": "FObjectResource()",
    "kind": "Method",
    "detail": "Function (} } ; struct FObjectResource { FName ObjectName ; FPackageIndex OuterIndex ; # if WITH_EDITORONLY_DATA FName OldClassName ; # endif)",
    "insertText": "FObjectResource()"
  },
  {
    "label": "FObjectResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectResource(UObject* InObject)"
  },
  {
    "label": "FObjectExport()",
    "kind": "Method",
    "detail": "Function (} ; struct FObjectExport : public FObjectResource { FPackageIndex ClassIndex ; FPackageIndex ThisIndex ; FPackageIndex SuperIndex ; FPackageIndex TemplateIndex ; EObjectFlags ObjectFlags ; int64 SerialSize ; int64 SerialOffset ; int64 ScriptSerializationStartOffset ; int64 ScriptSerializationEndOffset ; UObject* Object ; int32 HashNext ; bool bForcedExport : 1 ; bool bNotForClient : 1 ; bool bNotForServer : 1 ; bool bNotAlwaysLoadedForEditorGame : 1 ; bool bIsAsset : 1 ; bool bIsInheritedInstance : 1 ; bool bGeneratePublicHash : 1 ; bool bExportLoadFailed : 1 ; bool bWasFiltered : 1 ; uint32 PackageFlags ; int32 FirstExportDependency ; int32 SerializationBeforeSerializationDependencies ; int32 CreateBeforeSerializationDependencies ; int32 SerializationBeforeCreateDependencies ; int32 CreateBeforeCreateDependencies ;)",
    "insertText": "FObjectExport()"
  },
  {
    "label": "FObjectExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectExport(UObject* InObject, bool bInNotAlwaysLoadedForEditorGame = true)"
  },
  {
    "label": "FObjectExport()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FObjectExport(FObjectExport&&)"
  },
  {
    "label": "FObjectExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectExport(const FObjectExport&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FObjectExport&)",
    "insertText": "operator(FObjectExport&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FObjectExport&)",
    "insertText": "operator(const FObjectExport&)"
  },
  {
    "label": "ResetObject()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "ResetObject()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FObjectExport& E)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FObjectExport& E)"
  },
  {
    "label": "FObjectTextExport()",
    "kind": "Method",
    "detail": "Function (} ; struct FObjectTextExport {)",
    "insertText": "FObjectTextExport(FObjectExport& InExport, UObject* InOuter) : Export(InExport) , Outer(InOuter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FObjectExport& Export ; UObject* Outer ; FString ClassName ; FString SuperStructName ; FString OuterName ; void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FObjectTextExport& E)"
  },
  {
    "label": "FObjectImport()",
    "kind": "Method",
    "detail": "Function (} ; struct FObjectImport : public FObjectResource { FName ClassPackage ; FName ClassName ; # if WITH_EDITORONLY_DATA FName PackageName ; # endif int32 SourceIndex ; bool bImportOptional ; bool bImportPackageHandled ; bool bImportSearchedFor ; bool bImportFailed ; UObject* XObject ; FLinkerLoad* SourceLinker ;)",
    "insertText": "FObjectImport()"
  },
  {
    "label": "FObjectImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectImport(UObject* InObject)"
  },
  {
    "label": "FObjectImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectImport(UObject* InObject, UClass* InClass)"
  },
  {
    "label": "HasPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPackageName()"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return ! PackageName .)",
    "insertText": "IsNone()"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } FName)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "SetPackageName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return PackageName ; # else return NAME_None ; # endif } void)",
    "insertText": "SetPackageName(FName InPackageName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA PackageName = InPackageName ; # endif } FArchive&)",
    "insertText": "operator(FArchive& Ar, FObjectImport& I)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FObjectImport& I)"
  },
  {
    "label": "Inline()",
    "kind": "Method",
    "detail": "Function (} ; enum class EObjectDataResourceFlags : uint32 { None = 0,)",
    "insertText": "Inline(1 << 0), Streaming = (1 << 1), Optional = (1 << 2), Duplicate = (1 << 3), MemoryMapped = (1 << 4), DerivedDataReference = (1 << 5)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EObjectDataResourceFlags)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (struct FObjectDataResource { enum class EVersion : uint32 { Invalid,Initial,AddedCookedIndex,LatestPlusOne,Latest = LatestPlusOne - 1 } ; EObjectDataResourceFlags Flags = EObjectDataResourceFlags::None ; FBulkDataCookedIndex CookedIndex ; int64 SerialOffset = - 1 ; int64 DuplicateSerialOffset = - 1 ; int64 SerialSize = - 1 ; int64 RawSize = - 1 ; FPackageIndex OuterIndex ; uint32 LegacyBulkDataFlags = 0 ; FArchive&)",
    "insertText": "Serialize(FArchive& Ar, TArray<FObjectDataResource>& DataResources)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot, TArray<FObjectDataResource>& DataResources)"
  }
]