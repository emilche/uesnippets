[
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FNaniteVisualizationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteVisualizationData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FModeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModeRecord"
  },
  {
    "label": "FNaniteVisualizationData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class UWorld ; class FNaniteVisualizationData { public : enum class FModeType : uint8 { Overview,Standard,Advanced,} ; struct FModeRecord { FString ModeString ; FName ModeName ; FText ModeText ; FText ModeDesc ; FModeType ModeType ; int32 ModeID ; bool DefaultComposited ; } ; typedef TMultiMap<FName,FModeRecord> TModeMap ; public :)",
    "insertText": "FNaniteVisualizationData() : bIsInitialized(false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(const FName& InViewMode)"
  },
  {
    "label": "GetModeDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetModeDisplayName(const FName& InModeName)"
  },
  {
    "label": "GetModeID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetModeID(const FName& InModeName)"
  },
  {
    "label": "GetModeDefaultComposited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetModeDefaultComposited(const FName& InModeName)"
  },
  {
    "label": "SetCurrentOverviewModeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentOverviewModeList(const FString& InNameList)"
  },
  {
    "label": "IsDifferentToCurrentOverviewModeList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDifferentToCurrentOverviewModeList(const FString& InNameList)"
  },
  {
    "label": "GetActiveModeID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActiveModeID()"
  },
  {
    "label": "GetOverviewConsoleCommandName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetOverviewConsoleCommandName()"
  },
  {
    "label": "Pick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Pick(UWorld* World)"
  },
  {
    "label": "GetPickingMousePos()",
    "kind": "Method",
    "detail": "Function (const FVector2f&)",
    "insertText": "GetPickingMousePos()"
  },
  {
    "label": "AddVisualizationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVisualizationMode(const TCHAR* ModeString, const FText& ModeText, const FModeType ModeType, int32 ModeID, bool DefaultComposited)"
  },
  {
    "label": "SetActiveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveMode(int32 ModeID, const FName& ModeName, bool bDefaultComposited)"
  },
  {
    "label": "GetNaniteVisualizationData()",
    "kind": "Method",
    "detail": "Function (private : TModeMap ModeMap ; int32 ActiveVisualizationModeID = INDEX_NONE ; FName ActiveVisualizationModeName = NAME_None ; bool bActiveVisualizationModeComposited = true ; FString CurrentOverviewModeList ; TArray<FName,TInlineAllocator<3 2>> CurrentOverviewModeNames ; TArray<int32,TInlineAllocator<3 2>> CurrentOverviewModeIDs ; bool bOverviewListEmpty = true ; FString ConsoleDocumentationVisualizationMode ; FString ConsoleDocumentationOverviewTargets ; FVector2f MousePos ; FIntPoint ScreenSize ; bool bIsInitialized ; } ; FNaniteVisualizationData&)",
    "insertText": "GetNaniteVisualizationData()"
  }
]