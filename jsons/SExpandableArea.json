[
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SExpandableArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SExpandableArea"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Layout / Margin . h \" # include \" Animation / CurveSequence . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" class SBorder ; class SButton ; class SExpandableArea : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SExpandableArea ) : _Style( &FCoreStyle::Get().GetWidgetStyle<FExpandableAreaStyle>(\"ExpandableArea\") ) , _BorderBackgroundColor( FLinearColor::White ) , _BorderImage( FCoreStyle::Get().GetBrush(\"ExpandableArea.Border\") ) , _BodyBorderBackgroundColor(FLinearColor::White) , _BodyBorderImage() , _AreaTitle( ) , _InitiallyCollapsed( false ) , _MinWidth( 0.0f ) , _MaxHeight( 0.0f ) , _AreaTitlePadding(FMargin(0.0f, 0.0f, 3.0f, 0.0f)) , _HeaderPadding(FMargin(4.0f, 2.0f)) , _Padding( 1.0f ) , _AreaTitleFont( FCoreStyle::Get().GetFontStyle(\"ExpandableArea.TitleFont\") ) , _HeaderCursor( ) , _AllowAnimatedTransition(true)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FExpandableAreaStyle, Style ) SLATE_ATTRIBUTE( FSlateColor, BorderBackgroundColor ) SLATE_ATTRIBUTE( const FSlateBrush*, BorderImage ) SLATE_ATTRIBUTE( FSlateColor, BodyBorderBackgroundColor ) SLATE_ARGUMENT( const FSlateBrush*, BodyBorderImage ) SLATE_NAMED_SLOT( FArguments, HeaderContent ) SLATE_NAMED_SLOT( FArguments, BodyContent ) SLATE_ATTRIBUTE( FText, AreaTitle ) SLATE_ARGUMENT( bool, InitiallyCollapsed ) SLATE_ARGUMENT( float, MinWidth ) SLATE_ARGUMENT( float, MaxHeight ) SLATE_ATTRIBUTE(FMargin, AreaTitlePadding) SLATE_ATTRIBUTE( FMargin, HeaderPadding ) SLATE_ATTRIBUTE( FMargin, Padding ) SLATE_EVENT( FOnBooleanValueChanged, OnAreaExpansionChanged ) SLATE_ATTRIBUTE( FSlateFontInfo, AreaTitleFont ) SLATE_ATTRIBUTE( TOptional<EMouseCursor::Type>, HeaderCursor ) SLATE_ARGUMENT(bool, AllowAnimatedTransition) SLATE_END_ARGS() public: SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "IsExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExpanded()"
  },
  {
    "label": "SetExpanded_Animated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpanded_Animated(bool bExpanded)"
  },
  {
    "label": "IsTitleHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTitleHovered()"
  },
  {
    "label": "SetMaxHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxHeight(float InMaxHeight)"
  },
  {
    "label": "SetBorderBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBorderBackgroundColor(const FSlateColor& InBorderColor)"
  },
  {
    "label": "SetHeaderPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderPadding(FMargin InHeaderPadding)"
  },
  {
    "label": "SetAreaPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAreaPadding(FMargin InAreaPadding)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const FExpandableAreaStyle* InStyle)"
  },
  {
    "label": "InvalidateStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateStyle()"
  },
  {
    "label": "InvalidateBorderBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateBorderBrush()"
  },
  {
    "label": "SetBorderBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBorderBrush(const FSlateBrush* InBorderBrush)"
  },
  {
    "label": "ConstructHeaderWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "ConstructHeaderWidget(const FArguments& InArgs, TSharedRef<SWidget> HeaderContent)"
  },
  {
    "label": "OnGetContentVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetContentVisibility()"
  },
  {
    "label": "OnHeaderClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnHeaderClicked()"
  },
  {
    "label": "OnToggleContentVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleContentVisibility()"
  },
  {
    "label": "OnGetCollapseImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "OnGetCollapseImage()"
  },
  {
    "label": "GetSectionScale()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetSectionScale()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  }
]