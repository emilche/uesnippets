[
  {
    "label": "TSampleProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSampleProducer"
  },
  {
    "label": "CSampleConsumer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CSampleConsumer"
  },
  {
    "label": "CPeekMeasurements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CPeekMeasurements"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBinnedMovingValueBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinnedMovingValueBase"
  },
  {
    "label": "FBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBin"
  },
  {
    "label": "TBinnedMovingValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBinnedMovingValue"
  },
  {
    "label": "TBinnedDeltaMovingValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBinnedDeltaMovingValue"
  },
  {
    "label": "EMinMaxValueMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMinMaxValueMode"
  },
  {
    "label": "FSampleMinMaxAvg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSampleMinMaxAvg"
  },
  {
    "label": "TSampleMinMaxAvg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSampleMinMaxAvg"
  },
  {
    "label": "FUsingNetStatsUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUsingNetStatsUtils"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Misc / Optional . h \" # include \" Templates / EnableIf . h \" # include \" Templates / Models . h \" # include<limits> namespace UE::Net { template<ConsumerType> class TSampleProducer { struct CSampleConsumer { template<T> auto)",
    "insertText": "Requires(T& A) -> decltype( A.AddSample(0.0))"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} ; struct CPeekMeasurements { template<T> auto)",
    "insertText": "Requires(T& A) -> decltype( A.PeekMeasurement(0.0, 0.0))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(TModels_V<CSampleConsumer, ConsumerType>, \"ConsumerType must implement AddSample(double Val)\")"
  },
  {
    "label": "SetConsumer()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetConsumer(ConsumerType* InConsumer)"
  },
  {
    "label": "OutputSample()",
    "kind": "Method",
    "detail": "Function (Consumer = InConsumer ; } protected : void)",
    "insertText": "OutputSample(double Value)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (Consumer ->)",
    "insertText": "AddSample(Value)"
  },
  {
    "label": "PeekMeasurement()",
    "kind": "Method",
    "detail": "Function (} } template<InnerConsumerType = ConsumerType,= TEnableIf<TModels_V<CPeekMeasurements,InnerConsumerType>>::Type> void)",
    "insertText": "PeekMeasurement(double TimeVal, double Value)"
  },
  {
    "label": "PeekMeasurement()",
    "kind": "Method",
    "detail": "Function (Consumer ->)",
    "insertText": "PeekMeasurement(TimeVal, Value)"
  },
  {
    "label": "FBinnedMovingValueBase()",
    "kind": "Method",
    "detail": "Function (} private : ConsumerType* Consumer ; } ; enum class EBinnedValueMode : uint8 { MovingAvg,MovingSum } ; class FBinnedMovingValueBase { protected : struct FBin { double Sum = 0 . 0 ; int32 Count = 0 ; } ; protected :)",
    "insertText": "FBinnedMovingValueBase()"
  },
  {
    "label": "FBinnedMovingValueBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBinnedMovingValueBase(const TArrayView<FBin> InBins, double InTimePerBin, EBinnedValueMode InMode)"
  },
  {
    "label": "AddMeasurement_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeasurement_Implementation(double TimeVal, double Value, TOptional<double>& OutSample)"
  },
  {
    "label": "GetSample()",
    "kind": "Method",
    "detail": "Function (public : double)",
    "insertText": "GetSample()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetNewAndSkippedBins()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetNewAndSkippedBins(int32 BinIdx, TOptional<double>& OutSample)"
  },
  {
    "label": "TBinnedMovingValue()",
    "kind": "Method",
    "detail": "Function (private : const TArrayView<FBin> BinsView ; const double TimePerBin = 0 . 0 ; const double BinRange = 0 . 0 ; const EBinnedValueMode SampleMode = EBinnedValueMode::MovingAvg ; int32 FirstBinIndex = INDEX_NONE ; int32 LastWrittenBinIndex = INDEX_NONE ; double TotalSum = 0 . 0 ; int32 TotalCount = 0 ; } ; template<ConsumerType,int32 NumBins,EBinnedValueMode InMode> class TBinnedMovingValue : public FBinnedMovingValueBase,public TSampleProducer<ConsumerType> { public :)",
    "insertText": "TBinnedMovingValue(double TimePerBin) : FBinnedMovingValueBase(MakeArrayView(Bins, NumBins), TimePerBin, InMode)"
  },
  {
    "label": "AddMeasurement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMeasurement(double TimeVal, double Value)"
  },
  {
    "label": "AddMeasurement_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeasurement_Implementation(TimeVal, Value, FinalSample)"
  },
  {
    "label": "OutputSample()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "OutputSample(FinalSample.GetValue())"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Flush()"
  },
  {
    "label": "OutputSample()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "OutputSample(GetSample())"
  },
  {
    "label": "AddMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeasurement(TimeVal, (Value - LastValue))"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (LastValue = std::numeric_limits<double)",
    "insertText": "min()"
  },
  {
    "label": "NumBins()",
    "kind": "Method",
    "detail": "Function (} ; template<ConsumerType,int32 NumBins> using TBinnedMovingAvg = TBinnedMovingValue<ConsumerType,NumBins,EBinnedValueMode::MovingAvg> ; template<ConsumerType,int32 NumBins> using TDeltaBinnedMovingAvg = TBinnedDeltaMovingValue<ConsumerType,NumBins,EBinnedValueMode::MovingAvg> ; template<ConsumerType,int32 NumBins> using TBinnedMovingSum = TBinnedMovingValue<ConsumerType,NumBins,EBinnedValueMode::MovingSum> ; template<ConsumerType,int32 NumBins> using TDeltaBinnedMovingSum = TBinnedDeltaMovingValue<ConsumerType,NumBins,EBinnedValueMode::MovingSum> ; } namespace TBinParms { int32)",
    "insertText": "NumBins(int32 InNumBins)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetMax()"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "GetSum()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetSum()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinValue = Value ; })",
    "insertText": "if(Value > MaxValue)"
  },
  {
    "label": "AddSample_Internal()",
    "kind": "Method",
    "detail": "Function (MaxValue = Value ; })",
    "insertText": "AddSample_Internal(Value)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class TSampleMinMaxAvg<EMinMaxValueMode::PerMeasurement> : public FSampleMinMaxAvg { public : void)",
    "insertText": "AddSample(double Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinMaxPeriodStart = TimeVal ; } else)",
    "insertText": "if((TimeVal - MinMaxPeriodStart) >= static_cast<double>(MinMaxTimeSeconds))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double NewMinMaxSample = MinMaxPeriodSum / MinMaxPeriodCount ;)",
    "insertText": "if(NewMinMaxSample < MinValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinValue = NewMinMaxSample ; })",
    "insertText": "if(NewMinMaxSample > MaxValue)"
  },
  {
    "label": "TimeSeconds()",
    "kind": "Method",
    "detail": "Function (MaxValue = NewMinMaxSample ; } MinMaxPeriodStart = TimeVal ; MinMaxPeriodSum = 0 . 0 ; MinMaxPeriodCount = 0 ; } MinMaxPeriodSum + = Value ; MinMaxPeriodCount + + ; } private : double MinMaxPeriodStart = 0 . 0 ; double MinMaxPeriodSum = 0 . 0 ; int32 MinMaxPeriodCount = 0 ; } ; class FUsingNetStatsUtils { public : template<ConsumerType> using TSampleProducer = TSampleProducer<ConsumerType> ; using EBinnedValueMode = EBinnedValueMode ; template<ConsumerType,int32 NumBins,EBinnedValueMode InMode> using TBinnedMovingValue = TBinnedMovingValue<ConsumerType,NumBins,InMode> ; template<ConsumerType,int32 NumBins,EBinnedValueMode InMode> using TBinnedDeltaMovingValue = TBinnedDeltaMovingValue<ConsumerType,NumBins,InMode> ; template<ConsumerType,int32 NumBins> using TBinnedMovingAvg = TBinnedMovingAvg<ConsumerType,NumBins> ; template<ConsumerType,int32 NumBins> using TDeltaBinnedMovingAvg = TDeltaBinnedMovingAvg<ConsumerType,NumBins> ; template<ConsumerType,int32 NumBins> using TBinnedMovingSum = TBinnedMovingSum<ConsumerType,NumBins> ; template<ConsumerType,int32 NumBins> using TDeltaBinnedMovingSum = TDeltaBinnedMovingSum<ConsumerType,NumBins> ; using EMinMaxValueMode = EMinMaxValueMode ; using FSampleMinMaxAvg = FSampleMinMaxAvg ; template<EMinMaxValueMode Mode,int32 MinMaxTimeSeconds = 1> using TSampleMinMaxAvg = TSampleMinMaxAvg<Mode,MinMaxTimeSeconds> ; } ; } namespace TSampleParms { int32)",
    "insertText": "TimeSeconds(int32 InTimeSeconds)"
  }
]