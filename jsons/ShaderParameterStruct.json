[
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "FRHIComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeShader"
  },
  {
    "label": "FRHIGraphicsShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGraphicsShader"
  },
  {
    "label": "FRHIResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIResource"
  },
  {
    "label": "FShaderParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameterMap"
  },
  {
    "label": "FShaderParametersMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParametersMetadata"
  },
  {
    "label": "FRHIUniformBufferLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferLayout"
  },
  {
    "label": "BindForLegacyShaderParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" RHI . h \" # include \" RHIDefinitions . h \" # include \" RenderGraphResources . h \" # include \" Serialization / MemoryImage . h \" # include \" Shader . h \" class FRHICommandList ; class FRHIComputeCommandList ; class FRHIComputeShader ; class FRHIGraphicsShader ; class FRHIResource ; class FShaderParameterMap ; class FShaderParametersMetadata ; struct FRHIUniformBufferLayout ; template<FParameterStruct> void)",
    "insertText": "BindForLegacyShaderParameters(FShader* Shader, int32 PermutationId, const FShaderParameterMap& ParameterMap, bool bShouldBindEverything = false)"
  },
  {
    "label": "BindForLegacyShaderParameters()",
    "kind": "Method",
    "detail": "Function (Shader -> Bindings .)",
    "insertText": "BindForLegacyShaderParameters(Shader, PermutationId, ParameterMap, *FParameterStruct::FTypeInfo::GetStructMetadata(), bShouldBindEverything)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT_INTERNAL()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT_INTERNAL(ShaderClass, ShaderParentClass, bShouldBindEverything) \\ ShaderClass()"
  },
  {
    "label": "ShaderClass()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ShaderClass(const ShaderMetaType::CompiledShaderInitializerType& Initializer) \\ : ShaderParentClass(Initializer)"
  },
  {
    "label": "FParameters()",
    "kind": "Method",
    "detail": "Function (\\ BindForLegacyShaderParameters<)",
    "insertText": "FParameters(this, Initializer.PermutationId, Initializer.ParameterMap, bShouldBindEverything)"
  },
  {
    "label": "SHADER_ROOT_PARAMETERS_SIGNATURE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SHADER_ROOT_PARAMETERS_SIGNATURE() \\ static inline const FShaderParametersMetadata* GetRootParametersMetadata()"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(ShaderClass, ShaderParentClass) \\ SHADER_USE_PARAMETER_STRUCT_INTERNAL(ShaderClass, ShaderParentClass, true) \\ SHADER_ROOT_PARAMETERS_SIGNATURE() #define SHADER_USE_PARAMETER_STRUCT_WITH_LEGACY_BASE(ShaderClass, ShaderParentClass) \\ SHADER_USE_PARAMETER_STRUCT_INTERNAL(ShaderClass, ShaderParentClass, false) #define SHADER_USE_PARAMETER_STRUCT_MIXED(ShaderClass, ShaderParentClass) \\ SHADER_USE_PARAMETER_STRUCT_INTERNAL(ShaderClass, ShaderParentClass, false) \\ SHADER_ROOT_PARAMETERS_SIGNATURE() #define SHADER_USE_ROOT_PARAMETER_STRUCT(ShaderClass, ShaderParentClass) \\ SHADER_ROOT_PARAMETERS_SIGNATURE() \\ ShaderClass()"
  },
  {
    "label": "BindForRootShaderParameters()",
    "kind": "Method",
    "detail": "Function (\\ this -> Bindings .)",
    "insertText": "BindForRootShaderParameters(this, Initializer.PermutationId, Initializer.ParameterMap)"
  },
  {
    "label": "GetShaderParameterResourceRHI()",
    "kind": "Method",
    "detail": "Function (\\ } FRHIResource*)",
    "insertText": "GetShaderParameterResourceRHI(const void* Contents, uint16 MemberOffset, EUniformBufferBaseType MemberType)"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (const FRDGResource* ResourcePtr =* reinterpret_cast<const FRDGResource*)",
    "insertText": "const(MemberPtr)"
  },
  {
    "label": "ValidateShaderParameterResourcesRHI()",
    "kind": "Method",
    "detail": "Function (} } # if DO_CHECK void)",
    "insertText": "ValidateShaderParameterResourcesRHI(const void* Contents, const FRHIUniformBufferLayout& Layout)"
  },
  {
    "label": "EmitNullShaderParameterFatalError()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "EmitNullShaderParameterFatalError(const TShaderRef<FShader>& Shader, const FShaderParametersMetadata* ParametersMetadata, uint16 MemberOffset)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK void)",
    "insertText": "ValidateShaderParameters(const TShaderRef<FShader>& Shader, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (} # endif template<TShaderClass> void)",
    "insertText": "ValidateShaderParameters(const TShaderRef<TShaderClass>& Shader, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "CollectUAVsToUnset()",
    "kind": "Method",
    "detail": "Function (} template<TParameterType> void)",
    "insertText": "CollectUAVsToUnset(FRHIBatchedShaderUnbinds& BatchedUnbinds, const TMemoryImageArray<TParameterType>& InParameters)"
  },
  {
    "label": "UnsetUAV()",
    "kind": "Method",
    "detail": "Function (BatchedUnbinds .)",
    "insertText": "UnsetUAV(GetParameterIndex(Parameter))"
  },
  {
    "label": "CollectSRVsToUnset()",
    "kind": "Method",
    "detail": "Function (} } } template<TParameterType> void)",
    "insertText": "CollectSRVsToUnset(FRHIBatchedShaderUnbinds& BatchedUnbinds, const TMemoryImageArray<TParameterType>& InParameters)"
  },
  {
    "label": "UnsetSRV()",
    "kind": "Method",
    "detail": "Function (BatchedUnbinds .)",
    "insertText": "UnsetSRV(GetParameterIndex(Parameter))"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "UnsetShaderUAVs(FRHIBatchedShaderUnbinds& BatchedUnbinds, const FShaderParameterBindings& Bindings)"
  },
  {
    "label": "CollectUAVsToUnset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectUAVsToUnset(BatchedUnbinds, Bindings.ResourceParameters)"
  },
  {
    "label": "UnsetShaderSRVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnsetShaderSRVs(FRHIBatchedShaderUnbinds& BatchedUnbinds, const FShaderParameterBindings& Bindings)"
  },
  {
    "label": "CollectSRVsToUnset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectSRVsToUnset(BatchedUnbinds, Bindings.ResourceParameters)"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "UnsetShaderUAVs(FRHIBatchedShaderUnbinds& BatchedUnbinds, const TShaderRef<TShaderClass>& Shader)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (const FShaderParameterBindings& Bindings = Shader -> Bindings ;)",
    "insertText": "checkf(Bindings.RootParameterBufferIndex == FShaderParameterBindings::kInvalidBufferIndex, TEXT(\"Can't use UnsetShaderUAVs() for root parameter buffer index.\"))"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetShaderUAVs(BatchedUnbinds, Bindings)"
  },
  {
    "label": "UnsetShaderSRVs()",
    "kind": "Method",
    "detail": "Function (} template<TShaderClass> void)",
    "insertText": "UnsetShaderSRVs(FRHIBatchedShaderUnbinds& BatchedUnbinds, const TShaderRef<TShaderClass>& Shader)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (const FShaderParameterBindings& Bindings = Shader -> Bindings ;)",
    "insertText": "checkf(Bindings.RootParameterBufferIndex == FShaderParameterBindings::kInvalidBufferIndex, TEXT(\"Can't use UnsetShaderSRVs() for root parameter buffer index.\"))"
  },
  {
    "label": "UnsetShaderSRVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetShaderSRVs(BatchedUnbinds, Bindings)"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderClass> void)",
    "insertText": "UnsetShaderUAVs(TRHICmdList& RHICmdList, const TShaderRef<TShaderClass>& Shader, FRHIComputeShader* ShaderRHI)"
  },
  {
    "label": "GetScratchShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderUnbinds& BatchedUnbinds = RHICmdList .)",
    "insertText": "GetScratchShaderUnbinds()"
  },
  {
    "label": "UnsetShaderUAVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetShaderUAVs(BatchedUnbinds, Shader)"
  },
  {
    "label": "SetBatchedShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderUnbinds(ShaderRHI, BatchedUnbinds)"
  },
  {
    "label": "UnsetShaderSRVs()",
    "kind": "Method",
    "detail": "Function (} } template<TRHICmdList,TShaderClass> void)",
    "insertText": "UnsetShaderSRVs(TRHICmdList& RHICmdList, const TShaderRef<TShaderClass>& Shader, FRHIComputeShader* ShaderRHI)"
  },
  {
    "label": "UnsetShaderSRVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetShaderSRVs(BatchedUnbinds, Shader)"
  },
  {
    "label": "UnsetShaderSRVs()",
    "kind": "Method",
    "detail": "Function (} } template<TRHICmdList,TShaderClass> void)",
    "insertText": "UnsetShaderSRVs(TRHICmdList& RHICmdList, const TShaderRef<TShaderClass>& Shader, FRHIGraphicsShader* ShaderRHI)"
  },
  {
    "label": "SetAllShaderParametersAsBindless()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetAllShaderParametersAsBindless(FRHIBatchedShaderParameters& BatchedParameters, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetAllShaderParametersAsBindless()",
    "kind": "Method",
    "detail": "Function (template<TParameters> void)",
    "insertText": "SetAllShaderParametersAsBindless(FRHIBatchedShaderParameters& BatchedParameters, const TParameters& InParameters)"
  },
  {
    "label": "SetAllShaderParametersAsBindless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllShaderParametersAsBindless(BatchedParameters, TParameters::FTypeInfo::GetStructMetadata(), &InParameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderParameters(FRHIBatchedShaderParameters& BatchedParameters, const FShaderParameterBindings& Bindings, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (template<TShaderClass> void)",
    "insertText": "SetShaderParameters(FRHIBatchedShaderParameters& BatchedParameters, const TShaderRef<TShaderClass>& Shader, const FShaderParametersMetadata* ParametersMetadata, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(Shader, ParametersMetadata, &Parameters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING)",
    "insertText": "if(IsRayTracingShaderFrequency(Shader->GetFrequency()))"
  },
  {
    "label": "SetRayTracingShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRayTracingShaderParameters(BatchedParameters, Shader->Bindings, ParametersMetadata, &Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} else # endif {)",
    "insertText": "SetShaderParameters(BatchedParameters, Shader->Bindings, ParametersMetadata, &Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} } template<TShaderClass> void)",
    "insertText": "SetShaderParameters(FRHIBatchedShaderParameters& BatchedParameters, const TShaderRef<TShaderClass>& Shader, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "GetStructMetadata()",
    "kind": "Method",
    "detail": "Function (const FShaderParametersMetadata* ParametersMetadata = TShaderClass::FParameters::)",
    "insertText": "GetStructMetadata()"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(BatchedParameters, Shader, ParametersMetadata, Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderParameters(FRHIComputeCommandList& RHICmdList, FRHIComputeShader* ShaderRHI, const FShaderParameterBindings& Bindings, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(FRHICommandList& RHICmdList, FRHIGraphicsShader* ShaderRHI, const FShaderParameterBindings& Bindings, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(FRHICommandList& RHICmdList, FRHIComputeShader* ShaderRHI, const FShaderParameterBindings& Bindings, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (template<TRHICmdList,TShaderClass,TShaderRHI> void)",
    "insertText": "SetShaderParameters(TRHICmdList& RHICmdList, const TShaderRef<TShaderClass>& Shader, TShaderRHI* ShaderRHI, const FShaderParametersMetadata* ParametersMetadata, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RHICmdList, ShaderRHI, Shader->Bindings, ParametersMetadata, &Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderClass,TShaderRHI> void)",
    "insertText": "SetShaderParameters(TRHICmdList& RHICmdList, const TShaderRef<TShaderClass>& Shader, TShaderRHI* ShaderRHI, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RHICmdList, Shader, ShaderRHI, ParametersMetadata, Parameters)"
  },
  {
    "label": "SetRayTracingShaderParameters()",
    "kind": "Method",
    "detail": "Function (} # if RHI_RAYTRACING void)",
    "insertText": "SetRayTracingShaderParameters(FRHIBatchedShaderParameters& BatchedParameters, const FShaderParameterBindings& Bindings, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "SetShaderParameters(FRayTracingShaderBindingsWriter& RTBindingsWriter, const FShaderParameterBindings& Bindings, const FShaderParametersMetadata* ParametersMetadata, const void* ParametersData)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (template<TShaderClass> void)",
    "insertText": "SetShaderParameters(FRayTracingShaderBindingsWriter& RTBindingsWriter, const TShaderRef<TShaderClass>& Shader, const typename TShaderClass::FParameters& Parameters)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RTBindingsWriter, Shader->Bindings, ParametersMetadata, &Parameters)"
  }
]