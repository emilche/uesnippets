[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "UClothConfigBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClothConfigBase"
  },
  {
    "label": "UClothPhysicalMeshDataBase_Legacy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClothPhysicalMeshDataBase_Legacy"
  },
  {
    "label": "FPointWeightMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointWeightMap"
  },
  {
    "label": "TObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectPtr"
  },
  {
    "label": "FClothPhysicalMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClothPhysicalMeshData"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ClothTetherData . h \" # include \" ClothVertBoneData . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" PointWeightMap . h \" # include \" UObject / ObjectMacros . h \" # include \" ClothPhysicalMeshData . generated . h \" class FName ; class UClothConfigBase ; class UClothPhysicalMeshDataBase_Legacy ; struct FPointWeightMap ; template<T> struct TObjectPtr ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() CLOTHINGSYSTEMRUNTIMECOMMON_API FClothPhysicalMeshData()"
  },
  {
    "label": "FClothPhysicalMeshData()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FClothPhysicalMeshData()"
  },
  {
    "label": "FClothPhysicalMeshData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClothPhysicalMeshData(const FClothPhysicalMeshData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FClothPhysicalMeshData&)",
    "insertText": "operator(const FClothPhysicalMeshData&)"
  },
  {
    "label": "MigrateFrom()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "MigrateFrom(FClothPhysicalMeshData& ClothPhysicalMeshData)"
  },
  {
    "label": "MigrateFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MigrateFrom(UClothPhysicalMeshDataBase_Legacy* ClothPhysicalMeshDataBase)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const int32 InNumVerts, const int32 InNumIndices)"
  },
  {
    "label": "ClearWeightMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWeightMaps()"
  },
  {
    "label": "BuildSelfCollisionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSelfCollisionData(float SelfCollisionRadius)"
  },
  {
    "label": "CalculateInverseMasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateInverseMasses()"
  },
  {
    "label": "CalculateNumInfluences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateNumInfluences()"
  },
  {
    "label": "CalculateTethers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTethers(bool bUseEuclideanDistance, bool bUseGeodesicDistance)"
  },
  {
    "label": "HasWeightMap()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "HasWeightMap(const T Target)"
  },
  {
    "label": "FindWeightMap()",
    "kind": "Method",
    "detail": "Function (} template<T> const FPointWeightMap*)",
    "insertText": "FindWeightMap(const T Target)"
  },
  {
    "label": "AddWeightMap()",
    "kind": "Method",
    "detail": "Function (} template<T> FPointWeightMap&)",
    "insertText": "AddWeightMap(const T Target)"
  },
  {
    "label": "FindOrAddWeightMap()",
    "kind": "Method",
    "detail": "Function (} template<T> FPointWeightMap&)",
    "insertText": "FindOrAddWeightMap(const T Target)"
  },
  {
    "label": "GetWeightMap()",
    "kind": "Method",
    "detail": "Function (} template<T> const FPointWeightMap&)",
    "insertText": "GetWeightMap(const T Target)"
  }
]