[
  {
    "label": "FMetalShaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalShaderData"
  },
  {
    "label": "TMetalBaseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMetalBaseShader"
  },
  {
    "label": "ValidateVersion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Paths . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformFileManager . h \" # include \" MetalCommandQueue . h \" # include \" MetalDevice . h \" # include \" MetalProfiler . h \" # include \" MetalShaderResources . h \" # include \" Misc / FileHelper . h \" # include \" Misc / ScopeExit . h \" # include \" Serialization / MemoryReader . h \" # include \" Shaders / Debugging / MetalShaderDebugCache . h \" # include \" Shaders / MetalCompiledShaderKey . h \" # include \" Shaders / MetalCompiledShaderCache . h \" # include \" RHICoreShader . h \" # pragma mark - Metal RHI Base Shader Class Support Routines MTL::LanguageVersion)",
    "insertText": "ValidateVersion(uint32 Version)"
  },
  {
    "label": "DEBUG_METAL_SHADERS()",
    "kind": "Method",
    "detail": "Function (# pragma mark - Metal RHI Base Shader Class Template Defines # define)",
    "insertText": "DEBUG_METAL_SHADERS(UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT)"
  },
  {
    "label": "TMetalBaseShader()",
    "kind": "Method",
    "detail": "Function (FMetalShaderBindings Bindings ; TMap<uint32,MTL::ArgumentEncoder*> ArgumentEncoders ; TMap<uint32,TBitArray<>> ArgumentBitmasks ; TArray<FUniformBufferStaticSlot> StaticSlots ; int32 SideTableBinding = - 1 ; uint32 SourceLen = 0 ; uint32 SourceCRC = 0 ; uint32 ConstantValueHash = 0 ; MTLFunctionPtr Function ; MTLLibraryPtr Library ; NS::String* GlslCodeNSString = nullptr ; TArray<uint8> CompressedSource ; uint32 CodeSize = 0 ; bool bHasFunctionConstants = false ; bool bDeviceFunctionConstants = false ; uint32 LibraryFunctionIndex = - 1 ; } ; template<BaseResourceType,int32 ShaderType> class TMetalBaseShader : public BaseResourceType,public FMetalShaderData { public : enum { StaticFrequency = ShaderType } ;)",
    "insertText": "TMetalBaseShader(FMetalDevice& MetalDevice) : Device(MetalDevice)"
  },
  {
    "label": "TMetalBaseShader()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TMetalBaseShader()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Destroy()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(TArrayView<const uint8> InCode, FMetalCodeHeader& Header, MTLLibraryPtr InLibrary)"
  },
  {
    "label": "GetSourceCode()",
    "kind": "Method",
    "detail": "Function (NS::String*)",
    "insertText": "GetSourceCode()"
  },
  {
    "label": "GetCompiledFunction()",
    "kind": "Method",
    "detail": "Function (protected : FMetalDevice& Device ; MTLFunctionPtr)",
    "insertText": "GetCompiledFunction(bool const bAsync = false, const int32 FunctionIndex = -1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; # pragma mark - Metal RHI Base Shader Class Template Member Functions template<BaseResourceType,int32 ShaderType> void TMetalBaseShader<BaseResourceType,ShaderType)",
    "insertText": "Init(TArrayView<const uint8> InShaderCode, FMetalCodeHeader& Header, MTLLibraryPtr InLibrary)"
  },
  {
    "label": "ShaderCode()",
    "kind": "Method",
    "detail": "Function (FShaderCodeReader)",
    "insertText": "ShaderCode(InShaderCode)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (FMemoryReaderView)",
    "insertText": "Ar(InShaderCode, true)"
  },
  {
    "label": "SetLimitSize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetLimitSize(ShaderCode.GetActualShaderCodeSize())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint8 OfflineCompiledFlag ; Ar<<OfflineCompiledFlag ;)",
    "insertText": "check(OfflineCompiledFlag == 0 || OfflineCompiledFlag == 1)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Header .)",
    "insertText": "Serialize(Ar, BaseResourceType::ShaderResourceTable)"
  },
  {
    "label": "ValidateVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateVersion(Header.Version)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (SourceLen = Header . SourceLen ; SourceCRC = Header . SourceCRC ;)",
    "insertText": "UE_CLOG(Header.SourceLen == 0 || Header.SourceCRC == 0, LogMetal, Fatal, TEXT(\"Invalid Shader Bytecode provided.\"))"
  },
  {
    "label": "bDeviceFunctionConstants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bDeviceFunctionConstants(Header.bDeviceFunctionConstants == 0 ? false : true)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int32 CodeOffset = Ar .)",
    "insertText": "Tell()"
  },
  {
    "label": "GetActualShaderCodeSize()",
    "kind": "Method",
    "detail": "Function (uint32 BufferSize = ShaderCode .)",
    "insertText": "GetActualShaderCodeSize()"
  },
  {
    "label": "SourceCode()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR*)",
    "insertText": "SourceCode(ANSICHAR*)InShaderCode.GetData()"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(InLibrary && !(Header.CompileFlags & (1 << CFLAG_Archive)), LogMetal, Warning, TEXT(\"Shader being loaded wasn't marked for archiving but a MTLLibrary was provided - this is unsupported.\"))"
  },
  {
    "label": "bOfflineCompile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "bOfflineCompile(OfflineCompiledFlag > 0)"
  },
  {
    "label": "FindOptionalData()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR* ShaderSource = ShaderCode .)",
    "insertText": "FindOptionalData(EShaderOptionalDataKey::SourceCode)"
  },
  {
    "label": "bHasShaderSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bHasShaderSource(ShaderSource && FCStringAnsi::Strlen(ShaderSource) > 0)"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bool bForceTextShaders = Device .)",
    "insertText": "SupportsFeature(EMetalFeaturesGPUTrace)"
  },
  {
    "label": "FindOptionalDataAndSize()",
    "kind": "Method",
    "detail": "Function (int32 LZMASourceSize = 0 ; int32 SourceSize = 0 ; const uint8* LZMASource = ShaderCode .)",
    "insertText": "FindOptionalDataAndSize(EShaderOptionalDataKey::CompressedDebugCode, LZMASourceSize)"
  },
  {
    "label": "FindOptionalDataAndSize()",
    "kind": "Method",
    "detail": "Function (const uint8* UnSourceLen = ShaderCode .)",
    "insertText": "FindOptionalDataAndSize(EShaderOptionalDataKey::UncompressedSize, SourceSize)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CompressedSource .)",
    "insertText": "Append(LZMASource, LZMASourceSize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&CodeSize, UnSourceLen, sizeof(uint32))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasShaderSource = false ; } # if ! UE_BUILD_SHIPPING else)",
    "insertText": "if(bForceTextShaders)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (GlslCodeNSString =)",
    "insertText": "Get().GetShaderCode(SourceLen, SourceCRC)"
  },
  {
    "label": "retain()",
    "kind": "Method",
    "detail": "Function (GlslCodeNSString ->)",
    "insertText": "retain()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } # endif)",
    "insertText": "if(bForceTextShaders && CodeSize && CompressedSource.Num())"
  },
  {
    "label": "bHasShaderSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bHasShaderSource(GetSourceCode() != nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(bOfflineCompile && bHasShaderSource)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (GlslCodeNSString = NS::)",
    "insertText": "string(ShaderSource, NS::UTF8StringEncoding)"
  },
  {
    "label": "bHasFunctionConstants()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "bHasFunctionConstants(Header.bDeviceFunctionConstants == 0 ? false : true)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (ConstantValueHash = 0 ; Library = InLibrary ; bool bNeedsCompiling = false ; uint32 FunctionConstantHash = ConstantValueHash ; FMetalCompiledShaderKey)",
    "insertText": "Key(Header.SourceLen, Header.SourceCRC, FunctionConstantHash)"
  },
  {
    "label": "GetMetalCompiledShaderCache()",
    "kind": "Method",
    "detail": "Function (Function =)",
    "insertText": "GetMetalCompiledShaderCache().FindRef(Key)"
  },
  {
    "label": "GetMetalCompiledShaderCache()",
    "kind": "Method",
    "detail": "Function (Library =)",
    "insertText": "GetMetalCompiledShaderCache().FindLibrary(Function)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { bNeedsCompiling = true ; } Bindings = Header . Bindings ;)",
    "insertText": "if(bNeedsCompiling || !Library)"
  },
  {
    "label": "METAL_GPUPROFILE()",
    "kind": "Method",
    "detail": "Function (Library = InLibrary ; } else {)",
    "insertText": "METAL_GPUPROFILE(FScopedMetalCPUStats CPUStat(FString::Printf(TEXT(\"NewLibraryBinary: %d_%d\"), SourceLen, SourceCRC)))"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (NS::Error* AError ; void* Buffer =)",
    "insertText": "Malloc(BufferSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Buffer, InShaderCode.GetData() + CodeOffset, BufferSize)"
  },
  {
    "label": "dispatch_data_create()",
    "kind": "Method",
    "detail": "Function (dispatch_data_t GCDBuffer =)",
    "insertText": "dispatch_data_create(Buffer, BufferSize, dispatch_get_main_queue(), ^(void) { FMemory::Free(Buffer); })"
  },
  {
    "label": "TransferPtr()",
    "kind": "Method",
    "detail": "Function (Library =)",
    "insertText": "TransferPtr(Device.GetDevice()->newLibrary(GCDBuffer, &AError))"
  },
  {
    "label": "dispatch_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dispatch_release(GCDBuffer)"
  },
  {
    "label": "METAL_GPUPROFILE()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "METAL_GPUPROFILE(FScopedMetalCPUStats CPUStat(FString::Printf(TEXT(\"NewLibrarySource: %d_%d\"), SourceLen, SourceCRC)))"
  },
  {
    "label": "ShaderString()",
    "kind": "Method",
    "detail": "Function (NS::String*)",
    "insertText": "ShaderString((OfflineCompiledFlag == 0) ? NS::String::string(SourceCode, NS::UTF8StringEncoding) : GlslCodeNSString)"
  },
  {
    "label": "FinalShaderString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FinalShaderString(TEXT(\"\"))"
  },
  {
    "label": "FindOptionalData()",
    "kind": "Method",
    "detail": "Function (const FString ShaderName = ShaderCode .)",
    "insertText": "FindOptionalData(FShaderCodeName::Key)"
  }
]