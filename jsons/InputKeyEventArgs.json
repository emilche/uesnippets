[
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FInputKeyEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputKeyEventArgs"
  },
  {
    "label": "FInputKeyEventArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / EngineBaseTypes . h \" # include \" GenericPlatform / GenericPlatformInputDeviceMapper . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" InputCoreTypes . h \" class FViewport ; struct FInputKeyEventArgs { public :)",
    "insertText": "FInputKeyEventArgs(FViewport* InViewport, int32 InControllerId, FKey InKey, EInputEvent InEvent) : Viewport(InViewport) , ControllerId(InControllerId) , InputDevice(FInputDeviceId::CreateFromInternalId(InControllerId)) , Key(InKey) , Event(InEvent) , AmountDepressed(1.0f) , bIsTouchEvent(false)"
  },
  {
    "label": "FInputKeyEventArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputKeyEventArgs(FViewport* InViewport, FInputDeviceId InInputDevice, FKey InKey, EInputEvent InEvent) : Viewport(InViewport) , InputDevice(InInputDevice) , Key(InKey) , Event(InEvent) , AmountDepressed(1.0f) , bIsTouchEvent(false)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FPlatformUserId UserID =)",
    "insertText": "Get().GetUserForInputDevice(InInputDevice)"
  },
  {
    "label": "GetUserIndexForPlatformUser()",
    "kind": "Method",
    "detail": "Function (ControllerId =)",
    "insertText": "GetUserIndexForPlatformUser(UserID)"
  },
  {
    "label": "FInputKeyEventArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputKeyEventArgs(FViewport* InViewport, int32 InControllerId, FKey InKey, EInputEvent InEvent, float InAmountDepressed, bool bInIsTouchEvent) : Viewport(InViewport) , ControllerId(InControllerId) , InputDevice(FInputDeviceId::CreateFromInternalId(InControllerId)) , Key(InKey) , Event(InEvent) , AmountDepressed(InAmountDepressed) , bIsTouchEvent(bInIsTouchEvent)"
  },
  {
    "label": "FInputKeyEventArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputKeyEventArgs(FViewport* InViewport, FInputDeviceId InInputDevice, FKey InKey, EInputEvent InEvent, float InAmountDepressed, bool bInIsTouchEvent) : Viewport(InViewport) , InputDevice(InInputDevice) , Key(InKey) , Event(InEvent) , AmountDepressed(InAmountDepressed) , bIsTouchEvent(bInIsTouchEvent)"
  },
  {
    "label": "IsGamepad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGamepad()"
  }
]