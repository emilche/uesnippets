[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSplineMeshParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshParams"
  },
  {
    "label": "USplineMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMeshComponent"
  },
  {
    "label": "FSplineMeshInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshInstanceData"
  },
  {
    "label": "FStaticMeshStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStaticLightingMesh"
  },
  {
    "label": "FTriMeshCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionData"
  },
  {
    "label": "FTriMeshCollisionDataEstimates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionDataEstimates"
  },
  {
    "label": "PackSplineMeshParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Interfaces / Interface_CollisionDataProvider . h \" # include \" Components / StaticMeshComponent . h \" # include \" SplineMeshShaderParams . h \" # include \" SplineMeshComponent . generated . h \" class FPrimitiveSceneProxy ; class ULightComponent ; struct FNavigableGeometryExport ; class UBodySetup ; void)",
    "insertText": "PackSplineMeshParams(const FSplineMeshShaderParams& Params, const TArrayView<FVector4f>& Output)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { X,Y,Z,} ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=SplineMesh)"
  },
  {
    "label": "FSplineMeshParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSplineMeshParams() : StartPos(ForceInit) , StartTangent(ForceInit) , StartScale(ForceInit) , StartRoll(0) , EndRoll(0) , StartOffset(ForceInit) , EndPos(ForceInit) , EndScale(ForceInit) , EndTangent(ForceInit) , EndOffset(ForceInit) , NaniteClusterBoundsScale(1.0f)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(ClassGroup=Rendering, hidecategories=(Physics), meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=SplineMesh, meta=(ShowOnlyInnerProperties))"
  },
  {
    "label": "InitVertexFactory()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitVertexFactory(int32 InLODIndex, FColorVertexBuffer* InOverrideColorVertexBuffer)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (# endif TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "ApplyComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyComponentInstanceData(struct FSplineMeshInstanceData* ComponentInstanceData)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "GetSocketTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSocketTransform(FName InSocketName, ERelativeTransformSpace TransformSpace = RTS_World)"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "ComputeRatioAlongSpline()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeRatioAlongSpline(float DistanceAlong)"
  },
  {
    "label": "ComputeVisualMeshSplineTRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeVisualMeshSplineTRange(float& MinT, float& MaxT)"
  },
  {
    "label": "ComputeDistortedBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeDistortedBounds(const FTransform& InLocalToWorld, const FBoxSphereBounds& InMeshBounds, const FBoxSphereBounds* InBoundsToDistort = nullptr)"
  },
  {
    "label": "GetBodySetup()",
    "kind": "Method",
    "detail": "Function (public : class UBodySetup*)",
    "insertText": "GetBodySetup()"
  },
  {
    "label": "ShouldRenderSelected()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "ShouldRenderSelected()"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "GetVirtualTextureMainPassMaxDrawDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVirtualTextureMainPassMaxDrawDistance()"
  },
  {
    "label": "CreateStaticMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (protected : FPrimitiveSceneProxy*)",
    "insertText": "CreateStaticMeshSceneProxy(::Nanite::FMaterialAudit& NaniteMaterials, bool bCreateNanite)"
  },
  {
    "label": "GetPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "GetPhysicsTriMeshData(struct FTriMeshCollisionData* CollisionData, bool InUseAllTriData)"
  },
  {
    "label": "ContainsPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPhysicsTriMeshData(bool InUseAllTriData)"
  },
  {
    "label": "WantsNegXTriMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsNegXTriMesh()"
  },
  {
    "label": "GetTriMeshSizeEstimates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTriMeshSizeEstimates(struct FTriMeshCollisionDataEstimates& OutTriMeshEstimates, bool bInUseAllTriData)"
  },
  {
    "label": "GetNavigationBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavigationBounds()"
  },
  {
    "label": "CalculateShaderParams()",
    "kind": "Method",
    "detail": "Function (FSplineMeshShaderParams)",
    "insertText": "CalculateShaderParams()"
  },
  {
    "label": "UpdateRenderStateAndCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderStateAndCollision()"
  },
  {
    "label": "UpdateMesh_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh_Concurrent()"
  },
  {
    "label": "SetbNeverNeedsCookedCollisionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetbNeverNeedsCookedCollisionData(bool bInValue)"
  },
  {
    "label": "GetbNeverNeedsCookedCollisionData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetbNeverNeedsCookedCollisionData()"
  },
  {
    "label": "RecreateCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCollision()"
  },
  {
    "label": "CalcSliceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "CalcSliceTransform(const float DistanceAlong)"
  },
  {
    "label": "CalcSliceTransformAtSplineOffset()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "CalcSliceTransformAtSplineOffset(const float Alpha, const float MinT=0.f, const float MaxT=1.0f)"
  },
  {
    "label": "GetAxisValueRef()",
    "kind": "Method",
    "detail": "Function (const double&)",
    "insertText": "GetAxisValueRef(const FVector3d& InVector, ESplineMeshAxis::Type InAxis)"
  },
  {
    "label": "GetAxisValueRef()",
    "kind": "Method",
    "detail": "Function (double&)",
    "insertText": "GetAxisValueRef(FVector3d& InVector, ESplineMeshAxis::Type InAxis)"
  },
  {
    "label": "GetAxisValueRef()",
    "kind": "Method",
    "detail": "Function (const float&)",
    "insertText": "GetAxisValueRef(const FVector3f& InVector, ESplineMeshAxis::Type InAxis)"
  },
  {
    "label": "GetAxisValueRef()",
    "kind": "Method",
    "detail": "Function (float&)",
    "insertText": "GetAxisValueRef(FVector3f& InVector, ESplineMeshAxis::Type InAxis)"
  },
  {
    "label": "GetAxisMask()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAxisMask(ESplineMeshAxis::Type InAxis)"
  },
  {
    "label": "GetTextureStreamingTransformScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTextureStreamingTransformScale()"
  },
  {
    "label": "CollectPSOPrecacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOPrecacheData(const FPSOPrecacheParams& BasePrecachePSOParams, FMaterialInterfacePSOPrecacheParamsList& OutParams)"
  },
  {
    "label": "UpdateRenderStateAndCollision_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateRenderStateAndCollision_Internal(bool bConcurrent)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FSplineMeshInstanceData()"
  },
  {
    "label": "FSplineMeshInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSplineMeshInstanceData(const USplineMeshComponent* SourceComponent)"
  },
  {
    "label": "FSplineMeshInstanceData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSplineMeshInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(Component, CacheApplyPhase)"
  },
  {
    "label": "USplineMeshComponent()",
    "kind": "Method",
    "detail": "Function (CastChecked<)",
    "insertText": "USplineMeshComponent(Component)->ApplyComponentInstanceData(this)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "check(0)"
  }
]