[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSplineMeshParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshParams"
  },
  {
    "label": "USplineMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMeshComponent"
  },
  {
    "label": "FSplineMeshInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshInstanceData"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FStaticMeshStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshStaticLightingMesh"
  },
  {
    "label": "FTriMeshCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionData"
  },
  {
    "label": "FTriMeshCollisionDataEstimates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionDataEstimates"
  },
  {
    "label": "FSplineMeshInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplineMeshInstanceData"
  },
  {
    "label": "PackSplineMeshParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackSplineMeshParams(const FSplineMeshShaderParams& Params, const TArrayView<FVector4f>& Output)"
  },
  {
    "label": "InitVertexFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitVertexFactory(int32 InLODIndex, FColorVertexBuffer* InOverrideColorVertexBuffer)"
  },
  {
    "label": "ApplyComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyComponentInstanceData(struct FSplineMeshInstanceData* ComponentInstanceData)"
  },
  {
    "label": "UpdateRenderStateAndCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderStateAndCollision()"
  },
  {
    "label": "UpdateMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh()"
  },
  {
    "label": "UpdateMesh_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh_Concurrent()"
  },
  {
    "label": "SetStartPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartPosition(FVector StartPos, bool bUpdateMesh = true)"
  },
  {
    "label": "SetStartTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartTangent(FVector StartTangent, bool bUpdateMesh = true)"
  },
  {
    "label": "SetEndPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndPosition(FVector EndPos, bool bUpdateMesh = true)"
  },
  {
    "label": "SetEndTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndTangent(FVector EndTangent, bool bUpdateMesh = true)"
  },
  {
    "label": "SetStartAndEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh = true)"
  },
  {
    "label": "SetStartRoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartRoll(float StartRoll, bool bUpdateMesh = true)"
  },
  {
    "label": "SetStartRollDegrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartRollDegrees(float StartRollDegrees, bool bUpdateMesh = true)"
  },
  {
    "label": "SetStartOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartOffset(FVector2D StartOffset, bool bUpdateMesh = true)"
  },
  {
    "label": "SetEndRoll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndRoll(float EndRoll, bool bUpdateMesh = true)"
  },
  {
    "label": "SetEndRollDegrees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndRollDegrees(float EndRollDegrees, bool bUpdateMesh = true)"
  },
  {
    "label": "SetEndOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndOffset(FVector2D EndOffset, bool bUpdateMesh = true)"
  },
  {
    "label": "SetForwardAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForwardAxis(ESplineMeshAxis::Type InForwardAxis, bool bUpdateMesh = true)"
  },
  {
    "label": "SetSplineUpDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSplineUpDir(const FVector& InSplineUpDir, bool bUpdateMesh = true)"
  },
  {
    "label": "SetBoundaryMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh = true)"
  },
  {
    "label": "SetBoundaryMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh = true)"
  },
  {
    "label": "SetbNeverNeedsCookedCollisionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetbNeverNeedsCookedCollisionData(bool bInValue)"
  },
  {
    "label": "DestroyBodySetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyBodySetup()"
  },
  {
    "label": "RecreateCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCollision()"
  },
  {
    "label": "GetAxisMask()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAxisMask(ESplineMeshAxis::Type InAxis)"
  },
  {
    "label": "UpdateRenderStateAndCollision_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderStateAndCollision_Internal(bool bConcurrent)"
  },
  {
    "label": "FSplineMeshInstanceData()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FSplineMeshInstanceData(const USplineMeshComponent* SourceComponent)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(0)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector(0, 1, 1)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector(1, 0, 1)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector(1, 1, 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(0)"
  }
]