[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FQueryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryResult"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Misc / EnumClassFlags . h \" namespace UE::Editor::DataStorage { using IndexHash = uint64 ; enum class EQueryTickPhase : uint8 { PrePhysics,DuringPhysics,PostPhysics,FrameEnd,Max } ; enum class EQueryTickGroups : uint8 { Default,PreUpdate,Update,PostUpdate,SyncExternalToDataStorage,SyncDataStorageToExternal,SyncWidgets,Max } ; enum class EQueryCallbackType : uint8 { None,Processor,ObserveAdd,ObserveRemove,PhasePreparation,PhaseFinalization,Max } ; enum class EExecutionMode : uint8 { Default,GameThread,Threaded,ThreadedChunks } ; enum class EQueryAccessType : uint8 { ReadOnly,OptionalReadOnly,ReadWrite } ; enum class EQueryDependencyFlags : uint8 { None = 0,ReadOnly = 1<<0,GameThreadBound = 1<<1,AlwaysRefresh = 1<<2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EQueryDependencyFlags)"
  }
]