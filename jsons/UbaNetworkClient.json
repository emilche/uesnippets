[
  {
    "label": "NetworkBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkBackend"
  },
  {
    "label": "NetworkBackendTcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkBackendTcp"
  },
  {
    "label": "BinaryReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryReader"
  },
  {
    "label": "BinaryWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryWriter"
  },
  {
    "label": "CasKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CasKey"
  },
  {
    "label": "NetworkMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkMessage"
  },
  {
    "label": "NetworkClientCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkClientCreateInfo"
  },
  {
    "label": "NetworkClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkClient"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Connection"
  },
  {
    "label": "NetworkClientCreateInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCrypto . h \" # include \" UbaLogger . h \" # include \" UbaNetwork . h \" # include \" UbaWorkManager . h \" # include \" UbaTimer . h \" # include \" UbaEvent . h \" namespace uba { class NetworkBackend ; class NetworkBackendTcp ; struct BinaryReader ; struct BinaryWriter ; struct CasKey ; struct NetworkMessage ; struct NetworkClientCreateInfo {)",
    "insertText": "NetworkClientCreateInfo(LogWriter& w = g_consoleLogWriter) : logWriter(w)"
  },
  {
    "label": "NetworkClient()",
    "kind": "Method",
    "detail": "Function (} LogWriter& logWriter ; u32 sendSize = SendDefaultSize ; u32 receiveTimeoutSeconds = 0 ; u32 workerCount = 0 ; const u8* cryptoKey128 = nullptr ; } ; class NetworkClient : public WorkManagerImpl { public :)",
    "insertText": "NetworkClient(bool& outCtorSuccess, const NetworkClientCreateInfo& info = {}, const tchar* name = TC(\"UbaClient\"))"
  },
  {
    "label": "NetworkClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkClient()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(NetworkBackend& backend, const tchar* ip, u16 port = DefaultPort, bool* timedOut = nullptr)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "StartListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListen(NetworkBackend& backend, u16 port = DefaultPort, const tchar* ip = TC(\"0.0.0.0\"))"
  },
  {
    "label": "SetConnectionCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConnectionCount(u32 count)"
  },
  {
    "label": "SendKeepAlive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendKeepAlive()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected(u32 waitTimeoutMs = 0)"
  },
  {
    "label": "IsOrWasConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOrWasConnected(u32 waitTimeoutMs = 0)"
  },
  {
    "label": "PrintSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummary(Logger& logger)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnConnectedFunction = Function<)",
    "insertText": "void()"
  },
  {
    "label": "RegisterOnConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnConnected(const OnConnectedFunction& function)"
  },
  {
    "label": "RegisterOnDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnDisconnected(const OnDisconnectedFunction& function)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using OnVersionMismatchFunction = Function<)",
    "insertText": "void(const CasKey& exeKey, const CasKey& dllKey)"
  },
  {
    "label": "RegisterOnVersionMismatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnVersionMismatch(const OnVersionMismatchFunction& function)"
  },
  {
    "label": "InvokeVersionMismatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeVersionMismatch(const CasKey& exeKey, const CasKey& dllKey)"
  },
  {
    "label": "GetMessageHeaderSize()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetMessageHeaderSize()"
  },
  {
    "label": "GetMessageMaxSize()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetMessageMaxSize()"
  },
  {
    "label": "GetMessageReceiveHeaderSize()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetMessageReceiveHeaderSize()"
  },
  {
    "label": "GetUid()",
    "kind": "Method",
    "detail": "Function (const Guid&)",
    "insertText": "GetUid()"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (private : struct Connection {)",
    "insertText": "Connection(NetworkClient& o) : owner(o), disconnectedEvent(true)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (} NetworkClient& owner ; void* backendConnection = nullptr ; Atomic<u32> connected ; Event disconnectedEvent ; NetworkBackend* backend = nullptr ; } ; bool)",
    "insertText": "AddConnection(NetworkBackend& backend, void* backendConnection, bool* timedOut)"
  },
  {
    "label": "ConnectedCallback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectedCallback(NetworkBackend& backend, void* backendConnection)"
  },
  {
    "label": "DisconnectCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectCallback(void* context, const Guid& connectionUid, void* connection)"
  },
  {
    "label": "ReceiveResponseHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceiveResponseHeader(void* context, const Guid& connectionUid, u8* headerData, void*& outBodyContext, u8*& outBodyData, u32& outBodySize)"
  },
  {
    "label": "ReceiveResponseBody()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceiveResponseBody(void* context, bool recvError, u8* headerData, void* bodyContext, u8* bodyData, u32 bodySize)"
  },
  {
    "label": "OnDisconnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisconnected(Connection& connection, u32 reason)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(NetworkMessage& message, void* response, u32 responseCapacity, bool async)"
  },
  {
    "label": "ReturnMessageId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnMessageId(u16 id)"
  },
  {
    "label": "SetGetPrefix()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "SetGetPrefix(const tchar* originalPrefix)"
  },
  {
    "label": "NetworkClient()",
    "kind": "Method",
    "detail": "Function (LogWriter& m_logWriter ; Guid m_uid ; TString m_prefix ; LoggerWithWriter m_logger ; u32 m_sendSize ; u32 m_receiveTimeoutSeconds ; Atomic<u64> m_sendBytes ; Atomic<u64> m_recvBytes ; Atomic<u32> m_recvCount ; Atomic<bool> m_isDisconnecting ; Timer m_sendTimer ; ReaderWriterLock m_serverUidLock ; Guid m_serverUid ; Event m_isConnected ; Event m_isOrWasConnected ; Atomic<u32> m_connectionCount ; ReaderWriterLock m_onConnectedFunctionsLock ; Vector<OnConnectedFunction> m_onConnectedFunctions ; ReaderWriterLock m_onDisconnectedFunctionsLock ; Vector<OnDisconnectedFunction> m_onDisconnectedFunctions ; OnVersionMismatchFunction m_versionMismatchFunction ; ReaderWriterLock m_connectionsLock ; List<Connection> m_connections ; ReaderWriterLock m_connectionsItLock ; List<Connection>::iterator m_connectionsIt ; ReaderWriterLock m_activeMessagesLock ; u16 m_activeMessageIdMax = 1 ; Vector<u16> m_availableMessageIds ; Vector<NetworkMessage*> m_activeMessages ; CryptoKey m_cryptoKey = InvalidCryptoKey ; Timer m_encryptTimer ; Timer m_decryptTimer ; NetworkMessage ;)",
    "insertText": "NetworkClient(const NetworkClient&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NetworkClient&)",
    "insertText": "operator(const NetworkClient&)"
  }
]