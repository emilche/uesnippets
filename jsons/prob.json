[
  {
    "label": "vpx_prob_half()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_PROB_H_ # define VPX_VPX_DSP_PROB_H_ # include<assert . h> # include \" . / vpx_config . h \" # include \" . / vpx_dsp_common . h \" # include \" vpx_ports / mem . h \" # ifdef __cplusplus \" C \" { # endif typedef uint8_t vpx_prob ; # define MAX_PROB 2 5 5 # define)",
    "insertText": "vpx_prob_half((vpx_prob)128)"
  },
  {
    "label": "TREE_SIZE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TREE_SIZE(leaf_count) (2 * (leaf_count)-2) #define vpx_complement(x) (255 - (x))"
  },
  {
    "label": "get_prob()",
    "kind": "Method",
    "detail": "Function (vpx_prob)",
    "insertText": "get_prob(unsigned int num, unsigned int den)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(den != 0)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function ({ const int)",
    "insertText": "p(int)(((uint64_t)num * 256 + (den >> 1)) / den)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (const int clipped_prob =)",
    "insertText": "p((255 - p) >> 23) | (p == 0)"
  },
  {
    "label": "get_binary_prob()",
    "kind": "Method",
    "detail": "Function (} } vpx_prob)",
    "insertText": "get_binary_prob(unsigned int n0, unsigned int n1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const unsigned int den = n0 + n1 ;)",
    "insertText": "if(den == 0)"
  },
  {
    "label": "weighted_prob()",
    "kind": "Method",
    "detail": "Function (} vpx_prob)",
    "insertText": "weighted_prob(int prob1, int prob2, int factor)"
  },
  {
    "label": "merge_probs()",
    "kind": "Method",
    "detail": "Function (} vpx_prob)",
    "insertText": "merge_probs(vpx_prob pre_prob, const unsigned int ct[2], unsigned int count_sat, unsigned int max_update_factor)"
  },
  {
    "label": "get_binary_prob()",
    "kind": "Method",
    "detail": "Function (const vpx_prob prob =)",
    "insertText": "get_binary_prob(ct[0], ct[1])"
  },
  {
    "label": "VPXMIN()",
    "kind": "Method",
    "detail": "Function (const unsigned int count =)",
    "insertText": "VPXMIN(ct[0] + ct[1], count_sat)"
  },
  {
    "label": "weighted_prob()",
    "kind": "Method",
    "detail": "Function (const unsigned int factor = max_update_factor* count / count_sat ; return)",
    "insertText": "weighted_prob(pre_prob, prob, factor)"
  },
  {
    "label": "mode_mv_merge_probs()",
    "kind": "Method",
    "detail": "Function (} const int count_to_update_factor [ MODE_MV_COUNT_SAT + 1 ] = { 0,6,1 2,1 9,2 5,3 2,3 8,4 4,5 1,5 7,6 4,7 0,7 6,8 3,8 9,9 6,1 0 2,1 0 8,1 1 5,1 2 1,1 2 8 } ; vpx_prob)",
    "insertText": "mode_mv_merge_probs(vpx_prob pre_prob, const unsigned int ct[2])"
  },
  {
    "label": "get_prob()",
    "kind": "Method",
    "detail": "Function (const unsigned int factor = count_to_update_factor [ count ] ; const vpx_prob prob =)",
    "insertText": "get_prob(ct[0], den)"
  },
  {
    "label": "vpx_tree_merge_probs()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "vpx_tree_merge_probs(const vpx_tree_index *tree, const vpx_prob *pre_probs, const unsigned int *counts, vpx_prob *probs)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, extern const uint8_t, vpx_norm[256])"
  }
]