[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMeshBones",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshBones"
  },
  {
    "label": "GetBoneChildren()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Math / MathFwd . h \" namespace UE::Geometry { class FDynamicMesh3 ; } class FName ; namespace UE { namespace Geometry { class FMeshBones { public : bool)",
    "insertText": "GetBoneChildren(const FDynamicMesh3& Mesh, int32 BoneIndex, TArray<int32>& ChildrenIndices, bool bRecursive = false)"
  },
  {
    "label": "GetBonesInIncreasingOrder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBonesInIncreasingOrder(const FDynamicMesh3& Mesh, TArray<FName>& BoneNames, TArray<int32>& BoneParentIdx, TArray<FTransform>& BonePose, bool& bOrderChanged)"
  },
  {
    "label": "CombineLodBonesToReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CombineLodBonesToReferenceSkeleton(const TArray<FDynamicMesh3>& Meshes, TArray<FName>& BoneNames, TArray<int32>& BoneParentIdx, TArray<FTransform>& BonePose, bool& bOrderChanged)"
  }
]