[
  {
    "label": "FMonotonicTimeSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMonotonicTimeSpan"
  },
  {
    "label": "FMonotonicTimePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMonotonicTimePoint"
  },
  {
    "label": "FMonotonicTimeSpan()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformMath . h \" # include<limits> # define namespace UE { struct FMonotonicTimeSpan { public :)",
    "insertText": "FMonotonicTimeSpan()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (FMonotonicTimeSpan)",
    "insertText": "Zero()"
  },
  {
    "label": "Infinity()",
    "kind": "Method",
    "detail": "Function (} FMonotonicTimeSpan)",
    "insertText": "Infinity()"
  },
  {
    "label": "FromSeconds()",
    "kind": "Method",
    "detail": "Function (} FMonotonicTimeSpan)",
    "insertText": "FromSeconds(double Seconds)"
  },
  {
    "label": "FromMilliseconds()",
    "kind": "Method",
    "detail": "Function (FMonotonicTimeSpan TimeSpan ; TimeSpan . Time = Seconds ; return TimeSpan ; } FMonotonicTimeSpan)",
    "insertText": "FromMilliseconds(double Milliseconds)"
  },
  {
    "label": "ToSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ToSeconds()"
  },
  {
    "label": "IsInfinity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInfinity()"
  },
  {
    "label": "IsNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNaN()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMonotonicTimeSpan Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMonotonicTimeSpan)",
    "insertText": "operator(const FMonotonicTimeSpan Span)"
  },
  {
    "label": "FMonotonicTimePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMonotonicTimePoint()"
  },
  {
    "label": "FromSeconds()",
    "kind": "Method",
    "detail": "Function (} FMonotonicTimePoint)",
    "insertText": "FromSeconds(const double Seconds)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMonotonicTimePoint Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMonotonicTimeSpan)",
    "insertText": "operator(const FMonotonicTimePoint Point)"
  }
]