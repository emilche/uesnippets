[
  {
    "label": "VideoQualityAnalyzerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoQualityAnalyzerConfig"
  },
  {
    "label": "VideoLayerAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoLayerAnalyzer"
  },
  {
    "label": "VideoQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoQualityAnalyzer"
  },
  {
    "label": "CallStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallStatsCollector"
  },
  {
    "label": "AudioReceiveStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioReceiveStatsCollector"
  },
  {
    "label": "VideoSendStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSendStatsCollector"
  },
  {
    "label": "VideoReceiveStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiveStatsCollector"
  },
  {
    "label": "CallStatsCollectors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallStatsCollectors"
  },
  {
    "label": "HandleCapturedFrame()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_STATS_COLLECTION_H_ # define TEST_SCENARIO_STATS_COLLECTION_H_ # include<map> # include<memory> # include \" absl / types / optional . h \" # include \" call / call . h \" # include \" rtc_base / thread . h \" # include \" test / logging / log_writer . h \" # include \" test / scenario / performance_stats . h \" namespace webrtc { namespace test { struct VideoQualityAnalyzerConfig { double psnr_coverage = 1 ; rtc::Thread* thread = nullptr ; } ; class VideoLayerAnalyzer { public : void)",
    "insertText": "HandleCapturedFrame(const VideoFramePair& sample)"
  },
  {
    "label": "HandleRenderedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRenderedFrame(const VideoFramePair& sample)"
  },
  {
    "label": "HandleFramePair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFramePair(VideoFramePair sample, double psnr, RtcEventLogOutput* writer)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (VideoQualityStats stats_ ; Timestamp last_capture_time_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "VideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (int skip_count_ = 0 ; } ; class VideoQualityAnalyzer { public :)",
    "insertText": "VideoQualityAnalyzer(VideoQualityAnalyzerConfig config = VideoQualityAnalyzerConfig(), std::unique_ptr<RtcEventLogOutput> writer = nullptr)"
  },
  {
    "label": "VideoQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoQualityAnalyzer()"
  },
  {
    "label": "HandleFramePair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFramePair(VideoFramePair sample)"
  },
  {
    "label": "layer_stats()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoQualityStats>)",
    "insertText": "layer_stats()"
  },
  {
    "label": "stats()",
    "kind": "Method",
    "detail": "Function (VideoQualityStats&)",
    "insertText": "stats()"
  },
  {
    "label": "PrintHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintHeaders()"
  },
  {
    "label": "PrintFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFrameInfo(const VideoFramePair& sample)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void(const VideoFramePair&)> Handler()"
  },
  {
    "label": "HandleFramePair()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleFramePair(VideoFramePair sample, double psnr)"
  },
  {
    "label": "AddStats()",
    "kind": "Method",
    "detail": "Function (const VideoQualityAnalyzerConfig config_ ; std::map<int,VideoLayerAnalyzer> layer_analyzers_ ; const std::unique_ptr<RtcEventLogOutput> writer_ ; absl::optional<VideoQualityStats> cached_ ; } ; class CallStatsCollector { public : void)",
    "insertText": "AddStats(Call::Stats sample)"
  },
  {
    "label": "AddStats()",
    "kind": "Method",
    "detail": "Function (size_t last_fec_bytes_ = 0 ; } ; class VideoReceiveStatsCollector { public : void)",
    "insertText": "AddStats(VideoReceiveStreamInterface::Stats sample)"
  }
]