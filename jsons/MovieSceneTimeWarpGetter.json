[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FMovieSceneTimeWarpVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpVariant"
  },
  {
    "label": "FMovieSceneChannelProxyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelProxyData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FInverseTransformTimeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInverseTransformTimeParams"
  },
  {
    "label": "UMovieSceneTimeWarpGetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTimeWarpGetter"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Range . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Optional . h \" # include \" Channels / IMovieSceneChannelOwner . h \" # include \" Channels / MovieSceneTimeWarpChannel . h \" # include \" Variants / MovieSceneNumericVariantGetter . h \" # include \" MovieSceneTimeWarpGetter . generated . h \" class FName ; struct FMovieSceneTimeWarpVariant ; struct FMovieSceneChannelProxyData ; enum class EMovieSceneChannelProxyType : uint8 ; template<> class TFunctionRef ; namespace UE::MovieScene { struct FInverseTransformTimeParams ; })",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UMovieSceneTimeWarpGetter()",
    "kind": "Method",
    "detail": "Function (Yes,No } ;)",
    "insertText": "UMovieSceneTimeWarpGetter()"
  },
  {
    "label": "ScaleBy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ScaleBy(double UnwarpedScaleFactor) PURE_VIRTUAL(UMovieSceneTimeWarpGetter::ScaleBy, ) virtual FFrameTime RemapTime(FFrameTime In) const PURE_VIRTUAL(UMovieSceneTimeWarpGetter::RemapTime, return In; ) virtual TRange<FFrameTime> ComputeTraversedHull(const TRange<FFrameTime>& Range) const PURE_VIRTUAL(UMovieSceneTimeWarpGetter::ComputeTraversedHull, return TRange<FFrameTime>(); ) virtual TOptional<FFrameTime> InverseRemapTimeCycled(FFrameTime InValue, FFrameTime InTimeHint, const UE::MovieScene::FInverseTransformTimeParams& Params) const PURE_VIRTUAL(UMovieSceneTimeWarpGetter::InverseRemapTimeCycled, return TOptional<FFrameTime>(); ) virtual bool InverseRemapTimeWithinRange(FFrameTime InTime, FFrameTime RangeStart, FFrameTime RangeEnd, const TFunctionRef<bool(FFrameTime)>& VisitorCallback) const PURE_VIRTUAL(UMovieSceneTimeWarpGetter::InverseRemapTimeWithinRange, return true; ) virtual UE::MovieScene::ETimeWarpChannelDomain GetDomain() const PURE_VIRTUAL(UMovieSceneTimeWarpGetter::GetDomain, return UE::MovieScene::ETimeWarpChannelDomain::Time; ) MOVIESCENE_API virtual UE::MovieScene::FChannelOwnerCapabilities GetCapabilities(FName ChannelName)"
  },
  {
    "label": "IsMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMuted(FName ChannelName)"
  },
  {
    "label": "SetIsMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsMuted(FName ChannelName, bool bIsMuted)"
  },
  {
    "label": "IsMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMuted()"
  },
  {
    "label": "SetIsMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsMuted(bool bIsMuted)"
  },
  {
    "label": "InitializeDefaults()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitializeDefaults()"
  },
  {
    "label": "PopulateChannelProxy()",
    "kind": "Method",
    "detail": "Function (} EMovieSceneChannelProxyType)",
    "insertText": "PopulateChannelProxy(FMovieSceneChannelProxyData& OutProxyData, EAllowTopLevelChannels AllowTopLevel)"
  },
  {
    "label": "DeleteChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteChannel(FMovieSceneTimeWarpVariant& OutVariant, FName ChannelName)"
  }
]