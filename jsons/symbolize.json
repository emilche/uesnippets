[
  {
    "label": "SymbolDecoratorArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolDecoratorArgs"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_DEBUGGING_INTERNAL_SYMBOLIZE_H_ # define ABSL_DEBUGGING_INTERNAL_SYMBOLIZE_H_ # ifdef __cplusplus # include<cstddef> # include<cstdint> # include \" absl / base / config . h \" # include \" absl / strings / string_view . h \" # ifdef ABSL_INTERNAL_HAVE_ELF_SYMBOLIZE # error ABSL_INTERNAL_HAVE_ELF_SYMBOLIZE cannot be directly set # elif)",
    "insertText": "defined(__ELF__) && defined(__GLIBC__) && !defined(__native_client__) \\ && !defined(__asmjs__) && !defined(__wasm__)"
  },
  {
    "label": "ForEachSection()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace debugging_internal { bool)",
    "insertText": "ForEachSection(int fd, const std::function<bool(absl::string_view name, const ElfW(Shdr) &)>& callback)"
  },
  {
    "label": "GetSectionHeaderByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSectionHeaderByName(int fd, const char *name, size_t name_len, ElfW(Shdr) *out)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ABSL_NAMESPACE_END } # endif # ifdef ABSL_INTERNAL_HAVE_DARWIN_SYMBOLIZE # error ABSL_INTERNAL_HAVE_DARWIN_SYMBOLIZE cannot be directly set # elif)",
    "insertText": "defined(__APPLE__) #define ABSL_INTERNAL_HAVE_DARWIN_SYMBOLIZE 1 #endif #ifdef ABSL_INTERNAL_HAVE_EMSCRIPTEN_SYMBOLIZE #error ABSL_INTERNAL_HAVE_EMSCRIPTEN_SYMBOLIZE cannot be directly set #elif defined(__EMSCRIPTEN__)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace debugging_internal { struct SymbolDecoratorArgs { const void* pc ; ptrdiff_t relocation ; int fd ; char* const symbol_buf ; size_t symbol_buf_size ; char* const tmp_buf ; size_t tmp_buf_size ; void* arg ; } ; using SymbolDecorator =)",
    "insertText": "void(*)(const SymbolDecoratorArgs *)"
  },
  {
    "label": "InstallSymbolDecorator()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InstallSymbolDecorator(SymbolDecorator decorator, void* arg)"
  },
  {
    "label": "RemoveSymbolDecorator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSymbolDecorator(int ticket)"
  },
  {
    "label": "RemoveAllSymbolDecorators()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllSymbolDecorators(void)"
  },
  {
    "label": "RegisterFileMappingHint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterFileMappingHint(const void* start, const void* end, uint64_t offset, const char* filename)"
  },
  {
    "label": "GetFileMappingHint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileMappingHint(const void** start, const void** end, uint64_t* offset, const char** filename)"
  },
  {
    "label": "AbslInternalGetFileMappingHint()",
    "kind": "Method",
    "detail": "Function (} ABSL_NAMESPACE_END } # endif # include<stdbool . h> # ifdef __cplusplus \" C \" # endif bool)",
    "insertText": "AbslInternalGetFileMappingHint(const void** start, const void** end, uint64_t* offset, const char** filename)"
  }
]