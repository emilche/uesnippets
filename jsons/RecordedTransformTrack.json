[
  {
    "label": "FSolverCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverCollisionData"
  },
  {
    "label": "FSolverBreakingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverBreakingData"
  },
  {
    "label": "FSolverTrailingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverTrailingData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRecordedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordedFrame"
  },
  {
    "label": "FRecordedTransformTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecordedTransformTrack"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" HAL / IConsoleManager . h \" # include \" Serialization / ArchiveCountMem . h \" # include \" Features / IModularFeatures . h \" # include \" RecordedTransformTrack . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSolverCollisionData() : Location(FVector(0.f)) , AccumulatedImpulse(FVector(0.f)) , Normal(FVector(0.f)) , Velocity1(FVector(0.f)) , Velocity2(FVector(0.f)) , AngularVelocity1(FVector(0.f)) , AngularVelocity2(FVector(0.f)) , Mass1(0.f) , Mass2(0.f) , ParticleIndex(INDEX_NONE) , LevelsetIndex(INDEX_NONE) , ParticleIndexMesh(INDEX_NONE) , LevelsetIndexMesh(INDEX_NONE)"
  },
  {
    "label": "FSolverCollisionData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverCollisionData(FVector InLocation , FVector InAccumulatedImpulse , FVector InNormal , FVector InVelocity1 , FVector InVelocity2 , FVector InAngularVelocity1 , FVector InAngularVelocity2 , float InMass1 , float InMass2 , int32 InParticleIndex , int32 InLevelsetIndex , int32 InParticleIndexMesh , int32 InLevelsetIndexMesh) : Location(InLocation) , AccumulatedImpulse(InAccumulatedImpulse) , Normal(InNormal) , Velocity1(InVelocity1) , Velocity2(InVelocity2) , AngularVelocity1(InAngularVelocity1) , AngularVelocity2(InAngularVelocity2) , Mass1(InMass1) , Mass2(InMass2) , ParticleIndex(InParticleIndex) , LevelsetIndex(InLevelsetIndex) , ParticleIndexMesh(InParticleIndexMesh) , LevelsetIndexMesh(InLevelsetIndexMesh)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSolverBreakingData() : Location(FVector(0.f)) , Velocity(FVector(0.f)) , AngularVelocity(FVector(0.f)) , Mass(0.f) , ParticleIndex(INDEX_NONE) , ParticleIndexMesh(INDEX_NONE)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSolverTrailingData() : Location(FVector(0.f)) , Velocity(FVector(0.f)) , AngularVelocity(FVector(0.f)) , Mass(0.f) , ParticleIndex(INDEX_NONE) , ParticleIndexMesh(INDEX_NONE)"
  },
  {
    "label": "FSolverTrailingData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverTrailingData(FVector InLocation , FVector InVelocity , FVector InAngularVelocity , float InMass , int32 InParticleIndex , int32 InParticleIndexMesh) : Location(InLocation) , Velocity(InVelocity) , AngularVelocity(InAngularVelocity) , Mass(InMass) , ParticleIndex(InParticleIndex) , ParticleIndexMesh(InParticleIndexMesh)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FSolverTrailingData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSolverTrailingData& A, const FSolverTrailingData& B)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 InNum = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "Reset(InNum)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Transforms .)",
    "insertText": "AddDefaulted(InNum)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} Timestamp = - MAX_flt ; Collisions .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetDt()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDt()"
  },
  {
    "label": "IsTimeValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimeValid(float InTime)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const FRecordedFrame& First = Records [ 0 ] ; const FRecordedFrame& Last = Records .)",
    "insertText": "Last()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumKeys = Records .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float FirstKeyTime = Records [ 0 ] . Timestamp ; float LastKeyTime = Records [ NumKeys - 1 ] . Timestamp ;)",
    "insertText": "if(LastKeyTime <= InTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float CurrTime = Records [ KeyIndex ] . Timestamp ;)",
    "insertText": "if(CurrTime > InTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FRecordedFrame& Frame = Records [ FrameIndex ] ;)",
    "insertText": "if(FMath::IsNearlyEqual(Frame.Timestamp, InTime, InTolerance))"
  },
  {
    "label": "FindLastKeyBefore()",
    "kind": "Method",
    "detail": "Function (OutFirst = ExactFrame ; OutSecond = nullptr ; return ; } const int32 KeyBeforeIndex =)",
    "insertText": "FindLastKeyBefore(InTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 KeyAfterIndex = KeyBeforeIndex + 1 ;)",
    "insertText": "if(KeyBeforeIndex == Records.Num() - 1)"
  },
  {
    "label": "GetTransformAtTime()",
    "kind": "Method",
    "detail": "Function (OutSecond = nullptr ; return ; } OutFirst =& Records [ KeyBeforeIndex ] ; OutSecond =& Records [ KeyAfterIndex ] ; } FTransform)",
    "insertText": "GetTransformAtTime(int32 InIndex, float InTime)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (} const FRecordedFrame& BeforeFrame = Records [ KeyBeforeIndex ] ; const FRecordedFrame& AfterFrame = Records [ KeyAfterIndex ] ; const float BeforeTime = BeforeFrame . Timestamp ; const float AfterTime = AfterFrame . Timestamp ; const float)",
    "insertText": "Alpha(InTime - BeforeTime) / (AfterTime - BeforeTime)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (FTransform Result ; Result .)",
    "insertText": "Blend(BeforeFrame.Transforms[InIndex], AfterFrame.Transforms[InIndex], Alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InBeginTime > InEndTime)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(InBeginTime, InEndTime)"
  },
  {
    "label": "FindLastKeyBefore()",
    "kind": "Method",
    "detail": "Function (} const int32 KeyBeforeBeginIndex =)",
    "insertText": "FindLastKeyBefore(InBeginTime)"
  },
  {
    "label": "FindLastKeyBefore()",
    "kind": "Method",
    "detail": "Function (const int32 KeyBeforeEndIndex =)",
    "insertText": "FindLastKeyBefore(InEndTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = KeyBeforeEndIndex - KeyBeforeBeginIndex ;)",
    "insertText": "if(Offset < 2)"
  },
  {
    "label": "GetTransformAtTime()",
    "kind": "Method",
    "detail": "Function (FTransform Curr =)",
    "insertText": "GetTransformAtTime(InIndex, InTime)"
  },
  {
    "label": "GetAngularVelocityAtTime()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetAngularVelocityAtTime(int32 InIndex, float InTime, float SampleWidth = 1.0f / 120.0f)"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (FQuat Delta = Curr .)",
    "insertText": "GetRotation() * Prev.GetRotation().Inverse()"
  },
  {
    "label": "ToAxisAndAngle()",
    "kind": "Method",
    "detail": "Function (FVector Axis ; FVector::FReal Angle ; Delta .)",
    "insertText": "ToAxisAndAngle(Axis, Angle)"
  },
  {
    "label": "ProcessRawRecordedData()",
    "kind": "Method",
    "detail": "Function (} FRecordedTransformTrack)",
    "insertText": "ProcessRawRecordedData(const FRecordedTransformTrack& InCache)"
  }
]