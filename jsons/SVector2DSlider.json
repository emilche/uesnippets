[
  {
    "label": "SVector2DSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVector2DSlider"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # include \" NumericPropertyParams . h \" # include \" Editor . h \" # define LOCTEXT_NAMESPACE \" Vector2DTextBox \" template<NumericType> class SVector2DSlider : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnNumericValueCommitted, NumericType, ETextCommit::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SVector2DSlider)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FString, VisibleText_X ) SLATE_ATTRIBUTE( FString, VisibleText_Y ) SLATE_EVENT( FOnNumericValueCommitted, OnNumericCommitted_Box_X ) SLATE_EVENT( FOnNumericValueCommitted, OnNumericCommitted_Box_Y ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, FProperty* InProperty)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (PinProperty = InProperty ; VisibleText_X = InArgs . _VisibleText_X ; VisibleText_Y = InArgs . _VisibleText_Y ; OnNumericCommitted_X = InArgs . _OnNumericCommitted_Box_X ; OnNumericCommitted_Y = InArgs . _OnNumericCommitted_Box_Y ; const FLinearColor LabelClr =)",
    "insertText": "FLinearColor(1.f, 1.f, 1.f, 0.4f)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (const TNumericPropertyParams<NumericType>::FMetaDataGetter MetaDataGetter = TNumericPropertyParams<NumericType>::)",
    "insertText": "CreateLambda([&](const FName& Key) { return PinProperty->GetMetaData(Key); })"
  },
  {
    "label": "NumericPropertyParams()",
    "kind": "Method",
    "detail": "Function (TNumericPropertyParams<NumericType>)",
    "insertText": "NumericPropertyParams(PinProperty, PinProperty ? MetaDataGetter : nullptr)"
  },
  {
    "label": "bAllowSpin()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bAllowSpin(PinProperty && PinProperty->GetBoolMetaData(\"NoSpinbox\"))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot [)",
    "insertText": "SNew(SVerticalBox) +SVerticalBox::Slot() .AutoHeight() .Padding(0) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth().Padding(2) .HAlign(HAlign_Fill) [ SNew( SNumericEntryBox<NumericType> ) .LabelVAlign(VAlign_Center) .MaxFractionalDigits(3) .MinDesiredValueWidth(45.0f) .Label() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .Text( LOCTEXT(\"VectorNodeXAxisValueLabel\", \"X\") ) .ColorAndOpacity( LabelClr ) ] .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .Value( this, &SVector2DSlider::GetTypeInValue_X ) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .AllowSpin(bAllowSpin) .OnValueCommitted( InArgs._OnNumericCommitted_Box_X ) .OnValueChanged(this, &SVector2DSlider::OnValueChanged_X) .OnBeginSliderMovement(this, &SVector2DSlider::OnBeginSliderMovement_X) .OnEndSliderMovement(this, &SVector2DSlider::OnEndSliderMovement_X) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .UndeterminedString( LOCTEXT(\"MultipleValues\", \"Multiple Values\") ) .ToolTipText(LOCTEXT(\"VectorNodeXAxisValueLabel_ToolTip\", \"X value\") ) .EditableTextBoxStyle( &FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>( \"Graph.VectorEditableTextBox\" )) .BorderForegroundColor( FLinearColor::White ) .BorderBackgroundColor( FLinearColor::White ) ] +SHorizontalBox::Slot() .AutoWidth().Padding(2) .HAlign(HAlign_Fill) [ SNew( SNumericEntryBox<NumericType> ) .LabelVAlign(VAlign_Center) .MaxFractionalDigits(3) .MinDesiredValueWidth(45.0f) .Label() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .Text( LOCTEXT(\"VectorNodeYAxisValueLabel\", \"Y\") ) .ColorAndOpacity( LabelClr ) ] .Value( this, &SVector2DSlider::GetTypeInValue_Y ) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .AllowWheel(bAllowSpin) .WheelStep(NumericPropertyParams.WheelStep) .AllowSpin(bAllowSpin) .OnValueCommitted( InArgs._OnNumericCommitted_Box_Y ) .OnValueChanged(this, &SVector2DSlider::OnValueChanged_Y) .OnBeginSliderMovement(this, &SVector2DSlider::OnBeginSliderMovement_Y) .OnEndSliderMovement(this, &SVector2DSlider::OnEndSliderMovement_Y) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .UndeterminedString( LOCTEXT(\"MultipleValues\", \"Multiple Values\") ) .ToolTipText(LOCTEXT(\"VectorNodeYAxisValueLabel_ToolTip\", \"Y value\")) .EditableTextBoxStyle( &FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>( \"Graph.VectorEditableTextBox\" )) .BorderForegroundColor( FLinearColor::White ) .BorderBackgroundColor( FLinearColor::White)"
  },
  {
    "label": "OnValueChanged_X()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnValueChanged_X(NumericType NewValue)"
  },
  {
    "label": "OnValueChanged_Y()",
    "kind": "Method",
    "detail": "Function (SliderValue_X = NewValue ; } void)",
    "insertText": "OnValueChanged_Y(NumericType NewValue)"
  },
  {
    "label": "OnBeginSliderMovement_X()",
    "kind": "Method",
    "detail": "Function (SliderValue_Y = NewValue ; } void)",
    "insertText": "OnBeginSliderMovement_X()"
  },
  {
    "label": "SyncValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncValues()"
  },
  {
    "label": "OnEndSliderMovement_X()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement_X(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue_X != NewValue)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnNumericCommitted_X .)",
    "insertText": "ExecuteIfBound(NewValue, ETextCommit::Default)"
  },
  {
    "label": "OnBeginSliderMovement_Y()",
    "kind": "Method",
    "detail": "Function (LastSliderCommittedValue_X = NewValue ; } } void)",
    "insertText": "OnBeginSliderMovement_Y()"
  },
  {
    "label": "OnEndSliderMovement_Y()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = true ; } void)",
    "insertText": "OnEndSliderMovement_Y(NumericType NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsUsingSlider = false ;)",
    "insertText": "if(LastSliderCommittedValue_Y != NewValue)"
  },
  {
    "label": "GetTypeInValue_X()",
    "kind": "Method",
    "detail": "Function (SliderValue_X = LastSliderCommittedValue_X =)",
    "insertText": "GetTypeInValue_X().GetValue()"
  },
  {
    "label": "GetTypeInValue_Y()",
    "kind": "Method",
    "detail": "Function (SliderValue_Y = LastSliderCommittedValue_Y =)",
    "insertText": "GetTypeInValue_Y().GetValue()"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "GetValueType(const FString& InString)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<double, NumericType>)"
  },
  {
    "label": "GetTypeInValue_X()",
    "kind": "Method",
    "detail": "Function (} else { return NumericType { } ; } } TOptional<NumericType>)",
    "insertText": "GetTypeInValue_X()"
  },
  {
    "label": "GetTypeInValue_Y()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetTypeInValue_Y()"
  }
]