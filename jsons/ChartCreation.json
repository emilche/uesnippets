[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPerformanceDataConsumer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPerformanceDataConsumer"
  },
  {
    "label": "FFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameData"
  },
  {
    "label": "FPerformanceTrackingChart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceTrackingChart"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FFineGrainedPerformanceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFineGrainedPerformanceTracker"
  },
  {
    "label": "FPerformanceTrackingSystem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerformanceTrackingSystem"
  },
  {
    "label": "FDumpFPSChartToEndpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDumpFPSChartToEndpoint"
  },
  {
    "label": "FPerformanceTrackingChart()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPerformanceTrackingChart()"
  },
  {
    "label": "FPerformanceTrackingChart()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPerformanceTrackingChart(const FDateTime& InStartTime, const FString& InChartLabel)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const FDateTime& InStartTime)"
  },
  {
    "label": "AccumulateWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateWith(const FPerformanceTrackingChart& Chart)"
  },
  {
    "label": "DumpFPSChart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpFPSChart(const FString& InMapName)"
  },
  {
    "label": "DumpChartsToOutputLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpChartsToOutputLog(double WallClockElapsed, const TArray<const FPerformanceTrackingChart*>& Charts, const FString& InMapName)"
  },
  {
    "label": "DumpChartsToHTML()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpChartsToHTML(double WallClockElapsed, const TArray<const FPerformanceTrackingChart*>& Charts, const FString& InMapName, const FString& HTMLFilename)"
  },
  {
    "label": "DumpChartsToLogFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpChartsToLogFile(double WallClockElapsed, const TArray<const FPerformanceTrackingChart*>& Charts, const FString& InMapName, const FString& LogFileName)"
  },
  {
    "label": "PauseCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseCharting()"
  },
  {
    "label": "ResumeCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeCharting()"
  },
  {
    "label": "FFineGrainedPerformanceTracker()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FFineGrainedPerformanceTracker(const FDateTime& InStartTime)"
  },
  {
    "label": "Presize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presize(int32 NumFrames)"
  },
  {
    "label": "DumpFrameTimesToStatsLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpFrameTimesToStatsLog(const FString& FrameTimeFilename)"
  },
  {
    "label": "GetPercentileValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPercentileValue(TArray<float>& Samples, int32 Percentile)"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (Current)",
    "insertText": "context(user-specified integer stored per frame, could be used to signal game mode changes without doing discrete captures */\n\tint32 CurrentModeContext;\n};\n\n#endif\n\n//////////////////////////////////////////////////////////////////////\n// FPerformanceTrackingSystem\n\n// Overall state of the built-in performance tracking\nstruct FPerformanceTrackingSystem\n{\npublic:\n\tENGINE_API FPerformanceTrackingSystem()"
  },
  {
    "label": "AnalyzeFrame()",
    "kind": "Method",
    "detail": "Function (IPerformanceDataConsumer::FFrameData)",
    "insertText": "AnalyzeFrame(float DeltaSeconds)"
  },
  {
    "label": "StartCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCharting()"
  },
  {
    "label": "StopCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCharting()"
  },
  {
    "label": "CreateFileNameForChart()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateFileNameForChart(const FString& ChartType, const FString& InMapName, const FString& FileExtension)"
  },
  {
    "label": "CreateOutputDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateOutputDirectory(const FDateTime& CaptureStartTime)"
  },
  {
    "label": "ShouldExcludeIdleTimeFromCharts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExcludeIdleTimeFromCharts()"
  },
  {
    "label": "FillOutMemberStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillOutMemberStats()"
  },
  {
    "label": "HandleHitchBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHitchBucket(const FHistogram& HitchHistogram, int32 BucketIndex)"
  },
  {
    "label": "HandleHitchSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHitchSummary(int32 TotalHitchCount, double TotalTimeSpentInHitchBuckets)"
  },
  {
    "label": "HandleFPSThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFPSThreshold(int32 TargetFPS, float PctMissedFrames)"
  },
  {
    "label": "HandleDynamicResThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDynamicResThreshold(int32 TargetScreenPercentage, float PctTimeAbove)"
  },
  {
    "label": "HandleBasicStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBasicStats()"
  }
]