[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPerformanceDataConsumer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPerformanceDataConsumer"
  },
  {
    "label": "FFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameData"
  },
  {
    "label": "FPerformanceTrackingChart",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceTrackingChart"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FFineGrainedPerformanceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFineGrainedPerformanceTracker"
  },
  {
    "label": "FPerformanceTrackingSystem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerformanceTrackingSystem"
  },
  {
    "label": "FDumpFPSChartToEndpoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDumpFPSChartToEndpoint"
  },
  {
    "label": "FFrameData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ProfilingDebugging / Histogram . h \" # include \" Scalability . h \" # include \" Delegates / IDelegateInstance . h \" enum class EFrameHitchType : uint8 { NoHitch,UnknownUnit,GameThread,RenderThread,RHIThread,GPU } ; class IPerformanceDataConsumer { public : struct FFrameData { double DeltaSeconds ; double TrueDeltaSeconds ; double IdleSeconds ; double IdleOvershootSeconds ; double GameThreadTimeSeconds ; double RenderThreadTimeSeconds ; double RHIThreadTimeSeconds ; double GPUTimeSeconds ; double GameDriverTickFlushTimeSeconds ; double DemoDriverTickFlushTimeSeconds ; double DynamicResolutionScreenPercentage ; double FlushAsyncLoadingTime ; uint32 FlushAsyncLoadingCount ; uint32 SyncLoadCount ; int32 NumAsyncPackages ; bool bBinThisFrame ; bool bGameThreadBound ; bool bRenderThreadBound ; bool bRHIThreadBound ; bool bGPUBound ; EFrameHitchType HitchStatus ;)",
    "insertText": "FFrameData() : DeltaSeconds(0.0) , TrueDeltaSeconds(0.0) , IdleSeconds(0.0) , IdleOvershootSeconds(0.0) , GameThreadTimeSeconds(0.0) , RenderThreadTimeSeconds(0.0) , RHIThreadTimeSeconds(0.0) , GPUTimeSeconds(0.0) , GameDriverTickFlushTimeSeconds(0.0) , DemoDriverTickFlushTimeSeconds(0.0) , DynamicResolutionScreenPercentage(0.0) , FlushAsyncLoadingTime(0.0) , FlushAsyncLoadingCount(0) , SyncLoadCount(0) , NumAsyncPackages(0) , bBinThisFrame(false) , bGameThreadBound(false) , bRenderThreadBound(false) , bRHIThreadBound(false) , bGPUBound(false) , HitchStatus(EFrameHitchType::NoHitch)"
  },
  {
    "label": "StartCharting()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "StartCharting()"
  },
  {
    "label": "ProcessFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFrame(const FFrameData& FrameData)"
  },
  {
    "label": "StopCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCharting()"
  },
  {
    "label": "IPerformanceDataConsumer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IPerformanceDataConsumer()"
  },
  {
    "label": "FPerformanceTrackingChart()",
    "kind": "Method",
    "detail": "Function (} } ; class FPerformanceTrackingChart : public IPerformanceDataConsumer { public : FString ChartLabel ; FHistogram FrametimeHistogram ; FHistogram HitchTimeHistogram ; FHistogram DynamicResHistogram ; FHistogram AsyncPackageQueueHistogram ; uint32 NumFramesBound_GameThread ; uint32 NumFramesBound_RenderThread ; uint32 NumFramesBound_RHIThread ; uint32 NumFramesBound_GPU ; double TotalFramesBoundTime_GameThread ; double TotalFramesBoundTime_RenderThread ; double TotalFramesBoundTime_RHIThread ; double TotalFramesBoundTime_GPU ; double TotalFrameTime_GameThread ; double TotalFrameTime_RenderThread ; double TotalFrameTime_RHIThread ; double TotalFrameTime_GPU ; double TotalFlushAsyncLoadingTime ; int32 TotalFlushAsyncLoadingCalls ; double MaxFlushAsyncLoadingTime ; uint32 TotalSyncLoadCount ; int32 TotalGameThreadBoundHitchCount ; int32 TotalRenderThreadBoundHitchCount ; int32 TotalRHIThreadBoundHitchCount ; int32 TotalGPUBoundHitchCount ; int32 MaxDrawCalls ; int32 MinDrawCalls ; int32 TotalDrawCalls ; int32 MaxPlayerTicks ; int32 MinPlayerTicks ; int32 TotalPlayerTicks ; int32 MaxVehicleTicks ; int32 TotalVehicleTicks ; int32 MaxDrawnPrimitives ; int32 MinDrawnPrimitives ; int64 TotalDrawnPrimitives ; FDateTime CaptureStartTime ; double AccumulatedChartTime ; double TimeDisregarded ; int FramesDisregarded ; float StartTemperatureLevel ; float StopTemperatureLevel ; int StartBatteryLevel ; int StopBatteryLevel ; FString DeviceProfileName ; bool bIsChartingPaused ; uint32 NumFramesAtCriticalMemoryPressure ; uint64 MaxPhysicalMemory ; uint64 MaxVirtualMemory ; uint64 MinPhysicalMemory ; uint64 MinVirtualMemory ; uint64 MinAvailablePhysicalMemory ; uint64 TotalPhysicalMemoryUsed ; uint64 TotalVirtualMemoryUsed ; public :)",
    "insertText": "FPerformanceTrackingChart()"
  },
  {
    "label": "FPerformanceTrackingChart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPerformanceTrackingChart(const FDateTime& InStartTime, const FString& InChartLabel)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const FDateTime& InStartTime)"
  },
  {
    "label": "AccumulateWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateWith(const FPerformanceTrackingChart& Chart)"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "GetAverageFramerate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAverageFramerate()"
  },
  {
    "label": "GetNumHitches()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetNumHitches()"
  },
  {
    "label": "GetTotalHitchFrameTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTotalHitchFrameTime(bool bSubtractHitchThreshold = true)"
  },
  {
    "label": "GetTotalTime()",
    "kind": "Method",
    "detail": "Function (const double TotalTime =)",
    "insertText": "GetTotalTime()"
  },
  {
    "label": "GetTotalHitchFrameTime()",
    "kind": "Method",
    "detail": "Function (const double TotalHitchTime =)",
    "insertText": "GetTotalHitchFrameTime(bSubtractHitchThreshold)"
  },
  {
    "label": "GetPercentMissedVSync()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetPercentMissedVSync(int32 TargetFPS)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 TotalTargetFrames = static_cast<)",
    "insertText": "int64(TargetFPS * GetTotalTime())"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (const int64 MissedFrames = FMath::Max<)",
    "insertText": "int64(TotalTargetFrames - GetNumFrames(), 0)"
  },
  {
    "label": "GetAvgHitchesPerMinute()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAvgHitchesPerMinute()"
  },
  {
    "label": "TotalHitchCount()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "TotalHitchCount(int32)GetNumHitches()"
  },
  {
    "label": "GetAvgHitchFrameLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAvgHitchFrameLength()"
  },
  {
    "label": "GetPercentFramesIOBusy()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetPercentFramesIOBusy(int32 StartingBin=0)"
  },
  {
    "label": "ChangeLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeLabel(const FString& NewLabel)"
  },
  {
    "label": "DumpFPSChart()",
    "kind": "Method",
    "detail": "Function (ChartLabel = NewLabel ; } void)",
    "insertText": "DumpFPSChart(const FString& InMapName)"
  },
  {
    "label": "DumpChartToAnalyticsParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpChartToAnalyticsParams(const FString& InMapName, TArray<struct FAnalyticsEventAttribute>& InParamArray, bool bIncludeClientHWInfo, bool bIncludeHistograms = true)"
  },
  {
    "label": "DumpChartsToOutputLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpChartsToOutputLog(double WallClockElapsed, const TArray<const FPerformanceTrackingChart*>& Charts, const FString& InMapName)"
  },
  {
    "label": "DumpChartsToHTML()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_DEBUG_FILES void)",
    "insertText": "DumpChartsToHTML(double WallClockElapsed, const TArray<const FPerformanceTrackingChart*>& Charts, const FString& InMapName, const FString& HTMLFilename)"
  },
  {
    "label": "DumpChartsToLogFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpChartsToLogFile(double WallClockElapsed, const TArray<const FPerformanceTrackingChart*>& Charts, const FString& InMapName, const FString& LogFileName)"
  },
  {
    "label": "PauseCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseCharting()"
  },
  {
    "label": "ResumeCharting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeCharting()"
  },
  {
    "label": "FFineGrainedPerformanceTracker()",
    "kind": "Method",
    "detail": "Function (} ; # if ALLOW_DEBUG_FILES class FFineGrainedPerformanceTracker : public IPerformanceDataConsumer { public :)",
    "insertText": "FFineGrainedPerformanceTracker(const FDateTime& InStartTime)"
  },
  {
    "label": "Presize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presize(int32 NumFrames)"
  },
  {
    "label": "DumpFrameTimesToStatsLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpFrameTimesToStatsLog(const FString& FrameTimeFilename)"
  },
  {
    "label": "GetPercentileValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPercentileValue(TArray<float>& Samples, int32 Percentile)"
  },
  {
    "label": "FPerformanceTrackingSystem()",
    "kind": "Method",
    "detail": "Function (public : TArray<float> RenderThreadFrameTimes ; TArray<float> GameThreadFrameTimes ; TArray<float> GPUFrameTimes ; TArray<float> FrameTimes ; TArray<int32> ActiveModes ; TArray<float> DynamicResolutionScreenPercentages ; const FDateTime CaptureStartTime ; int32 CurrentModeContext ; } ; # endif struct FPerformanceTrackingSystem { public :)",
    "insertText": "FPerformanceTrackingSystem()"
  },
  {
    "label": "AnalyzeFrame()",
    "kind": "Method",
    "detail": "Function (IPerformanceDataConsumer::FFrameData)",
    "insertText": "AnalyzeFrame(float DeltaSeconds)"
  },
  {
    "label": "CreateFileNameForChart()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateFileNameForChart(const FString& ChartType, const FString& InMapName, const FString& FileExtension)"
  },
  {
    "label": "CreateOutputDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateOutputDirectory(const FDateTime& CaptureStartTime)"
  },
  {
    "label": "ShouldExcludeIdleTimeFromCharts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExcludeIdleTimeFromCharts()"
  },
  {
    "label": "DumpChart()",
    "kind": "Method",
    "detail": "Function (private : double FPSChartStartTime ; double FPSChartStopTime ; double LastTimeChartCreationTicked ; float LastDeltaSeconds ; double LastHitchTime ; } ; struct FDumpFPSChartToEndpoint { protected : const FPerformanceTrackingChart& Chart ; public : void)",
    "insertText": "DumpChart(double InWallClockTimeFromStartOfCharting, FString InMapName, FString InDeviceProfileName = FString(TEXT(\"Unknown\")))"
  },
  {
    "label": "FDumpFPSChartToEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDumpFPSChartToEndpoint(const FPerformanceTrackingChart& InChart) : Chart(InChart)"
  },
  {
    "label": "FDumpFPSChartToEndpoint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDumpFPSChartToEndpoint()"
  },
  {
    "label": "PrintToEndpoint()",
    "kind": "Method",
    "detail": "Function (} protected : double WallClockTimeFromStartOfCharting ; FString MapName ; FString DeviceProfileName ; float AvgGPUFrameTime ; float AvgRenderThreadFrameTime ; float AvgGameThreadFrameTime ; double TotalFlushAsyncLoadingTimeInMS ; int32 TotalFlushAsyncLoadingCalls ; double MaxFlushAsyncLoadingTimeInMS ; double AvgFlushAsyncLoadingTimeInMS ; int32 TotalSyncLoadCount ; float BoundGameThreadPct ; float BoundRenderThreadPct ; float BoundGPUPct ; Scalability::FQualityLevels ScalabilityQuality ; FIntPoint GameResolution ; FString WindowMode ; FString OSMajor ; FString OSMinor ; FString CPUVendor ; FString CPUBrand ; FString DesktopGPUBrand ; FString ActualGPUBrand ; protected : void)",
    "insertText": "PrintToEndpoint(const FString& Text)"
  },
  {
    "label": "FillOutMemberStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillOutMemberStats()"
  },
  {
    "label": "HandleHitchBucket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHitchBucket(const FHistogram& HitchHistogram, int32 BucketIndex)"
  },
  {
    "label": "HandleHitchSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHitchSummary(int32 TotalHitchCount, double TotalTimeSpentInHitchBuckets)"
  },
  {
    "label": "HandleFPSThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleFPSThreshold(int32 TargetFPS, float PctMissedFrames)"
  },
  {
    "label": "HandleDynamicResThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDynamicResThreshold(int32 TargetScreenPercentage, float PctTimeAbove)"
  },
  {
    "label": "HandleBasicStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBasicStats()"
  }
]