[
  {
    "label": "FObjectInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectInitializer"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FAppendToClassSchemaContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAppendToClassSchemaContext"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FClassReloadVersionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassReloadVersionInfo"
  },
  {
    "label": "FTopLevelAssetPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelAssetPath"
  },
  {
    "label": "chain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "chain"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "and"
  },
  {
    "label": "array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "array"
  },
  {
    "label": "ELoadFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoadFlags"
  },
  {
    "label": "ESaveFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESaveFlags"
  },
  {
    "label": "EPackageFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPackageFlags"
  },
  {
    "label": "EStaticConstructor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStaticConstructor"
  },
  {
    "label": "EInternal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInternal"
  },
  {
    "label": "ECppProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECppProperty"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FVTableHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVTableHelper"
  },
  {
    "label": "EClassFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClassFlags"
  },
  {
    "label": "data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "data"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "need",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "need"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "default",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "browser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "browser"
  },
  {
    "label": "when",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "when"
  },
  {
    "label": "selection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "selection"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "only",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "only"
  },
  {
    "label": "cast",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cast"
  },
  {
    "label": "EClassCastFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClassCastFlags"
  },
  {
    "label": "EPropertyFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPropertyFlags"
  },
  {
    "label": "CPF_EditConst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPF_EditConst"
  },
  {
    "label": "like",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "like"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "serializers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "serializers"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "properties"
  },
  {
    "label": "EObjectFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EObjectFlags"
  },
  {
    "label": "RF_ArchetypeObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RF_ArchetypeObject"
  },
  {
    "label": "constructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constructor"
  },
  {
    "label": "instead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "instead"
  },
  {
    "label": "default",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "constructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constructor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FObjectInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectInitializer"
  },
  {
    "label": "FReferencerInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferencerInformation"
  },
  {
    "label": "FReferencerInformationList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferencerInformationList"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "cannot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cannot"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "won",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "won"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "selection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "selection"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "going",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "going"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "SparseClassDataType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseClassDataType"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "members",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "members"
  },
  {
    "label": "instances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "instances"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "properties"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "should"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "as"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "should"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "and"
  },
  {
    "label": "comment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "comment"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "cannot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cannot"
  },
  {
    "label": "cannot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cannot"
  },
  {
    "label": "ignore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ignore"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "cannot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cannot"
  },
  {
    "label": "using",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "using"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "as"
  },
  {
    "label": "uses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uses"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "types"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "viewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "viewer"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "viewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "viewer"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "picker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "picker"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "properties"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "that"
  },
  {
    "label": "properties",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "properties"
  },
  {
    "label": "properties",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "properties"
  },
  {
    "label": "properties",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "properties"
  },
  {
    "label": "customization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "customization"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "specified",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "specified"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "or"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "or"
  },
  {
    "label": "when",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "when"
  },
  {
    "label": "argument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "argument"
  },
  {
    "label": "argument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "argument"
  },
  {
    "label": "as",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "as"
  },
  {
    "label": "when",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "when"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "or"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "or"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "as",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "as"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "at",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "at"
  },
  {
    "label": "belongs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "belongs"
  },
  {
    "label": "being",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "being"
  },
  {
    "label": "TWithinClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWithinClass"
  },
  {
    "label": "where",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "where"
  },
  {
    "label": "FUObjectCppClassStaticFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectCppClassStaticFunctions"
  },
  {
    "label": "guarantee",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "guarantee"
  },
  {
    "label": "at",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "at"
  },
  {
    "label": "Z_Construct_UClass_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UClass_"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "ELoadConfigPropagationFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELoadConfigPropagationFlags"
  },
  {
    "label": "default",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "default"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "FRestoreForUObjectOverwrite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRestoreForUObjectOverwrite"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (safety)",
    "insertText": "ENUM_CLASS_FLAGS(EClassFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EObjectFlags Flags)"
  },
  {
    "label": "FReferencerInformation()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FReferencerInformation( UObject* inReferencer )"
  },
  {
    "label": "FReferencerInformation()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FReferencerInformation( UObject* inReferencer, int32 InReferences, const TArray<const FProperty*>& InProperties )"
  },
  {
    "label": "FReferencerInformationList()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FReferencerInformationList()"
  },
  {
    "label": "FReferencerInformationList()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FReferencerInformationList( const TArray<FReferencerInformation>& InternalRefs, const TArray<FReferencerInformation>& ExternalRefs )"
  },
  {
    "label": "FuncName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FuncName(const FMyStruct&)"
  },
  {
    "label": "FuncName()",
    "kind": "Method",
    "detail": "Function (FMyStruct)",
    "insertText": "FuncName(const FMyStruct&)"
  },
  {
    "label": "FuncName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FuncName(const FMyStruct, OtherType)"
  },
  {
    "label": "FuncName()",
    "kind": "Method",
    "detail": "Function (ReturnType)",
    "insertText": "FuncName(const FMyStruct&, OtherType)"
  },
  {
    "label": "FuncName()",
    "kind": "Method",
    "detail": "Function (FMyStruct)",
    "insertText": "FuncName(const FMyStruct&, OtherType)"
  },
  {
    "label": "GetPrivateStaticClass()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetPrivateStaticClass()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(InMem)"
  },
  {
    "label": "TClass()",
    "kind": "Method",
    "detail": "Function (API)",
    "insertText": "TClass(FVTableHelper& Helper)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (constructor)",
    "insertText": "check(InAddReferencedObjects)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (WITH_EDITORONLY_DATA)",
    "insertText": "check(InDeclareCustomVersions)"
  }
]