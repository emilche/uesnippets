[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FConsoleSlateDebuggerUtility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleSlateDebuggerUtility"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Debugging / SlateDebugging . h \" # include \" SlateGlobals . h \" # if WITH_SLATE_DEBUGGING # include \" CoreMinimal . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSlateDebugger, Log, All)"
  },
  {
    "label": "FConsoleSlateDebuggerUtility()",
    "kind": "Method",
    "detail": "Function (class SWidget ; class SWindow ; struct FConsoleSlateDebuggerUtility {)",
    "insertText": "FConsoleSlateDebuggerUtility()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_WITH_WIDGET_UNIQUE_IDENTIFIER using TSWidgetId = UPTRINT ; using TSWindowId = UPTRINT ; # else using TSWidgetId = uint64 ; using TSWindowId = uint64 ; # endif const TSWidgetId InvalidWidgetId = 0 ; const TSWindowId InvalidWindowId = 0 ; TSWidgetId)",
    "insertText": "GetId(const SWidget& Widget)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (TSWidgetId)",
    "insertText": "GetId(const SWidget* Widget)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (TSWindowId)",
    "insertText": "GetId(const SWindow& Widget)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (TSWindowId)",
    "insertText": "GetId(const SWindow* Widget)"
  },
  {
    "label": "FindWindowId()",
    "kind": "Method",
    "detail": "Function (TSWindowId)",
    "insertText": "FindWindowId(const SWidget& Widget)"
  },
  {
    "label": "FindWindowId()",
    "kind": "Method",
    "detail": "Function (TSWindowId)",
    "insertText": "FindWindowId(const SWidget* Widget)"
  }
]