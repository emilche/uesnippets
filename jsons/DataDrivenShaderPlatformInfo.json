[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FGenericDataDrivenShaderPlatformInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericDataDrivenShaderPlatformInfo"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" RHIShaderPlatform . h \" # include \" RHIFeatureLevel . h \" # include \" UObject / NameTypes . h \" class FText ; const FName LANGUAGE_D3D ; const FName LANGUAGE_Metal ; const FName LANGUAGE_OpenGL ; const FName LANGUAGE_Vulkan ; const FName LANGUAGE_Sony ; const FName LANGUAGE_Nintendo ; class FGenericDataDrivenShaderPlatformInfo { FName Name ; FName PlatformName ; FName Language ; ERHIFeatureLevel::Type MaxFeatureLevel ; FName ShaderFormat ; uint32 ShaderPropertiesHash ; uint32 bIsMobile : 1 ; uint32 bIsMetalMRT : 1 ; uint32 bIsPC : 1 ; uint32 bIsConsole : 1 ; uint32 bIsAndroidOpenGLES : 1 ; uint32 bSupportsDebugViewShaders : 1 ; uint32 bSupportsMobileMultiView : 1 ; uint32 bSupportsArrayTextureCompression : 1 ; uint32 bSupportsDistanceFields : 1 ; uint32 bSupportsDiaphragmDOF : 1 ; uint32 bSupportsRGBColorBuffer : 1 ; uint32 bSupportsPercentageCloserShadows : 1 ; uint32 bSupportsIndexBufferUAVs : 1 ; uint32 bSupportsInstancedStereo : 1 ; uint32 SupportsMultiViewport :)",
    "insertText": "int32(ERHIFeatureSupport::NumBits)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint32 bSupportsManualVertexFetch : 1 ; uint32 bRequiresReverseCullingOnMobile : 1 ; uint32 bOverrideFMaterial_NeedsGBufferEnabled : 1 ; uint32 bSupportsFFTBloom : 1 ; uint32 bSupportsInlineRayTracing : 1 ; uint32 bSupportsRayTracingShaders : 1 ; uint32 bSupportsVertexShaderLayer : 1 ; uint32 BindlessSupport :)",
    "insertText": "int32(ERHIBindlessSupport::NumBits)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint32 StaticShaderBindingLayoutSupport :)",
    "insertText": "int32(ERHIStaticShaderBindingLayoutSupport::NumBits)"
  },
  {
    "label": "FGenericDataDrivenShaderPlatformInfo()",
    "kind": "Method",
    "detail": "Function (uint32 bSupportsWave64 : 1 ; uint32 bSupportsIndependentSamplers : 1 ; uint32 bSupportsWorkGraphs : 1 ; # if WITH_EDITOR uint32 bCanUsePreviewPlatformForMaterialValidation : 1 ; # endif uint32 bContainsValidPlatformInfo : 1 ;)",
    "insertText": "FGenericDataDrivenShaderPlatformInfo()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(*this))"
  },
  {
    "label": "SetDefaultValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValues()"
  },
  {
    "label": "FGenericDataDrivenShaderPlatformInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGenericDataDrivenShaderPlatformInfo(const FGenericDataDrivenShaderPlatformInfo&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetShaderPlatformFromName()",
    "kind": "Method",
    "detail": "Function (const EShaderPlatform)",
    "insertText": "GetShaderPlatformFromName(const FName ShaderPlatformName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetName(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetSupportsMSAA()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetSupportsMSAA(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetSupportsWavePermute()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetSupportsWavePermute(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetSupportsManualVertexFetch()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetSupportsManualVertexFetch(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetStaticShaderBindingLayoutSupport()",
    "kind": "Method",
    "detail": "Function (} const ERHIStaticShaderBindingLayoutSupport)",
    "insertText": "GetStaticShaderBindingLayoutSupport(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetSupportsVolumeTextureAtomics()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetSupportsVolumeTextureAtomics(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetEnablesHLSL2021ByDefault()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetEnablesHLSL2021ByDefault(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetSupportsWave64()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetSupportsWave64(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFriendlyName(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetPreviewShaderPlatformParent()",
    "kind": "Method",
    "detail": "Function (const EShaderPlatform)",
    "insertText": "GetPreviewShaderPlatformParent(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TMap<FString,TFunction<)",
    "insertText": "bool(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "ParseDataDrivenShaderInfo()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "ParseDataDrivenShaderInfo(const FConfigSection& Section, uint32 Index)"
  },
  {
    "label": "IMPLEMENT_DDPSPI_SETTING_WITH_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (FGenericDataDrivenShaderPlatformInfo Infos [ SP_NumPlatforms ] ; } ; # if USE_STATIC_SHADER_PLATFORM_ENUMS | | USE_STATIC_FEATURE_LEVEL_ENUMS | | USE_STATIC_SHADER_PLATFORM_INFO # define)",
    "insertText": "IMPLEMENT_DDPSPI_SETTING_WITH_RETURN_TYPE(ReturnType, Function, Value) \\ static FORCEINLINE_DEBUGGABLE const ReturnType Function(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "checkSlow(!FGenericDataDrivenShaderPlatformInfo::IsValid(Platform) || FGenericDataDrivenShaderPlatformInfo::Function(Platform) == Value)"
  },
  {
    "label": "IMPLEMENT_DDPSPI_SETTING()",
    "kind": "Method",
    "detail": "Function (\\ return Value ; \\ } # define)",
    "insertText": "IMPLEMENT_DDPSPI_SETTING(Function, Value) IMPLEMENT_DDPSPI_SETTING_WITH_RETURN_TYPE(bool, Function, Value) #include COMPILED_PLATFORM_HEADER(DataDrivenShaderPlatformInfo.inl)"
  },
  {
    "label": "IsPCPlatform()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsPCPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMobilePlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMobilePlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsOpenGLPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOpenGLPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMetalPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMetalPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMetalMobilePlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMetalMobilePlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMetalMRTPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMetalMRTPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMetalSM5Platform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMetalSM5Platform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsMetalSM6Platform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMetalSM6Platform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsConsolePlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConsolePlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsAndroidPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAndroidPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsVulkanPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVulkanPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsVulkanMobileSM5Platform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVulkanMobileSM5Platform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsVulkanMobilePlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVulkanMobilePlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsD3DPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsD3DPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsHlslccShaderPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHlslccShaderPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetMaxSupportedFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} FStaticFeatureLevel)",
    "insertText": "GetMaxSupportedFeatureLevel(const FStaticShaderPlatform InShaderPlatform)"
  },
  {
    "label": "IsSimulatedPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulatedPlatform(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "GetSimulatedPlatform()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR EShaderPlatform)",
    "insertText": "GetSimulatedPlatform(FStaticShaderPlatform Platform)"
  },
  {
    "label": "IsFeatureLevelSupported()",
    "kind": "Method",
    "detail": "Function (} return Platform ; } # endif bool)",
    "insertText": "IsFeatureLevelSupported(const FStaticShaderPlatform InShaderPlatform, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "RHISupportsSeparateMSAAAndResolveTextures()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsSeparateMSAAAndResolveTextures(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsGeometryShaders()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsGeometryShaders(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHIHasTiledGPU()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIHasTiledGPU(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsMobileMultiView()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsMobileMultiView(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsNativeShaderLibraries()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsNativeShaderLibraries(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsShaderPipelines()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsShaderPipelines(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsDualSourceBlending()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsDualSourceBlending(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsIndexBufferUAVs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsIndexBufferUAVs(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsInstancedStereo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsInstancedStereo(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsMultiViewport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsMultiViewport(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsMSAA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsMSAA(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsBufferLoadTypeConversion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsBufferLoadTypeConversion(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsVolumeTextures()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsVolumeTextures(const FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "RHIVolumeTextureRenderingSupportGuaranteed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIVolumeTextureRenderingSupportGuaranteed(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupports4ComponentUAVReadWrite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupports4ComponentUAVReadWrite(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsManualVertexFetch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsManualVertexFetch(const FStaticShaderPlatform InShaderPlatform)"
  },
  {
    "label": "RHISupportsSwapchainUAVs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsSwapchainUAVs(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsAbsoluteVertexID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsAbsoluteVertexID(const FStaticShaderPlatform InShaderPlatform)"
  },
  {
    "label": "RHISupportsRayTracing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsRayTracing(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsRayTracingShaders()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsRayTracingShaders(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsInlineRayTracing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsInlineRayTracing(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsRayTracingCallableShaders()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsRayTracingCallableShaders(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsMeshShadersTier0()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsMeshShadersTier0(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsMeshShadersTier1()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsMeshShadersTier1(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHIMaxMeshShaderThreadGroupSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIMaxMeshShaderThreadGroupSize(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsWaveOperations()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsWaveOperations(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsShaderRootConstants()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsShaderRootConstants(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsShaderBundleDispatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsShaderBundleDispatch(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsRenderTargetWriteMask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsRenderTargetWriteMask(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsConservativeRasterization()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsConservativeRasterization(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHIGetBindlessSupport()",
    "kind": "Method",
    "detail": "Function (} ERHIBindlessSupport)",
    "insertText": "RHIGetBindlessSupport(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHIGetStaticShaderBindingLayoutSupport()",
    "kind": "Method",
    "detail": "Function (} ERHIStaticShaderBindingLayoutSupport)",
    "insertText": "RHIGetStaticShaderBindingLayoutSupport(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsVolumeTextureAtomics()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsVolumeTextureAtomics(EShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsWaveSize64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsWaveSize64(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHISupportsWorkGraphs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHISupportsWorkGraphs(const FStaticShaderPlatform Platform)"
  }
]