[
  {
    "label": "MemoryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryPool"
  },
  {
    "label": "MemPoolPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemPoolPolicy"
  },
  {
    "label": "MemPoolError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MemPoolError"
  },
  {
    "label": "scalable_allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scalable_allocator"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "scalable_resource_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scalable_resource_impl"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_scalable_allocator_H # define __TBB_scalable_allocator_H # include<stddef . h> # if ! _MSC_VER # include<stdint . h> # endif # if !)",
    "insertText": "defined(__cplusplus) && __ICC==1100 #pragma warning (push) #pragma warning (disable: 991)"
  },
  {
    "label": "scalable_malloc()",
    "kind": "Method",
    "detail": "Function (# endif # if _MSC_VER> = 1 4 0 0 # define __TBB_EXPORTED_FUNC __cdecl # else # define __TBB_EXPORTED_FUNC # endif void* __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_malloc(size_t size)"
  },
  {
    "label": "scalable_free()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_free(void* ptr)"
  },
  {
    "label": "scalable_realloc()",
    "kind": "Method",
    "detail": "Function (void* __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_realloc(void* ptr, size_t size)"
  },
  {
    "label": "scalable_calloc()",
    "kind": "Method",
    "detail": "Function (void* __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_calloc(size_t nobj, size_t size)"
  },
  {
    "label": "scalable_posix_memalign()",
    "kind": "Method",
    "detail": "Function (int __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_posix_memalign(void** memptr, size_t alignment, size_t size)"
  },
  {
    "label": "scalable_aligned_malloc()",
    "kind": "Method",
    "detail": "Function (void* __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_aligned_malloc(size_t size, size_t alignment)"
  },
  {
    "label": "scalable_aligned_realloc()",
    "kind": "Method",
    "detail": "Function (void* __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_aligned_realloc(void* ptr, size_t size, size_t alignment)"
  },
  {
    "label": "scalable_aligned_free()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_aligned_free(void* ptr)"
  },
  {
    "label": "scalable_msize()",
    "kind": "Method",
    "detail": "Function (size_t __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_msize(void* ptr)"
  },
  {
    "label": "scalable_allocation_mode()",
    "kind": "Method",
    "detail": "Function (typedef enum { TBBMALLOC_OK,TBBMALLOC_INVALID_PARAM,TBBMALLOC_UNSUPPORTED,TBBMALLOC_NO_MEMORY,TBBMALLOC_NO_EFFECT } ScalableAllocationResult ; typedef enum { TBBMALLOC_USE_HUGE_PAGES,USE_HUGE_PAGES = TBBMALLOC_USE_HUGE_PAGES,TBBMALLOC_SET_SOFT_HEAP_LIMIT,TBBMALLOC_SET_HUGE_SIZE_THRESHOLD } AllocationModeParam ; int __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_allocation_mode(int param, intptr_t value)"
  },
  {
    "label": "scalable_allocation_command()",
    "kind": "Method",
    "detail": "Function (typedef enum { TBBMALLOC_CLEAN_ALL_BUFFERS,TBBMALLOC_CLEAN_THREAD_BUFFERS } ScalableAllocationCmd ; int __TBB_EXPORTED_FUNC)",
    "insertText": "scalable_allocation_command(int cmd, void *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # endif # ifdef __cplusplus namespace rml { class MemoryPool ; typedef)",
    "insertText": "void(*rawAllocType)(intptr_t pool_id, size_t &bytes)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*rawFreeType)(intptr_t pool_id, void* raw_ptr, size_t raw_bytes)"
  },
  {
    "label": "MemPoolPolicy()",
    "kind": "Method",
    "detail": "Function (struct MemPoolPolicy { enum { TBBMALLOC_POOL_VERSION = 1 } ; rawAllocType pAlloc ; rawFreeType pFree ; size_t granularity ; int version ; unsigned fixedPool : 1,keepAllMemory : 1,reserved : 3 0 ;)",
    "insertText": "MemPoolPolicy(rawAllocType pAlloc_, rawFreeType pFree_, size_t granularity_ = 0, bool fixedPool_ = false, bool keepAllMemory_ = false) : pAlloc(pAlloc_), pFree(pFree_), granularity(granularity_), version(TBBMALLOC_POOL_VERSION), fixedPool(fixedPool_), keepAllMemory(keepAllMemory_), reserved(0)"
  },
  {
    "label": "pool_create_v1()",
    "kind": "Method",
    "detail": "Function (} } ; enum MemPoolError { POOL_OK = TBBMALLOC_OK,INVALID_POLICY = TBBMALLOC_INVALID_PARAM,UNSUPPORTED_POLICY = TBBMALLOC_UNSUPPORTED,NO_MEMORY = TBBMALLOC_NO_MEMORY,NO_EFFECT = TBBMALLOC_NO_EFFECT } ; MemPoolError)",
    "insertText": "pool_create_v1(intptr_t pool_id, const MemPoolPolicy *policy, rml::MemoryPool **pool)"
  },
  {
    "label": "pool_destroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pool_destroy(MemoryPool* memPool)"
  },
  {
    "label": "pool_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pool_malloc(MemoryPool* memPool, size_t size)"
  },
  {
    "label": "pool_realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pool_realloc(MemoryPool* memPool, void *object, size_t size)"
  },
  {
    "label": "pool_aligned_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pool_aligned_malloc(MemoryPool* mPool, size_t size, size_t alignment)"
  },
  {
    "label": "pool_aligned_realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "pool_aligned_realloc(MemoryPool* mPool, void *ptr, size_t size, size_t alignment)"
  },
  {
    "label": "pool_reset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pool_reset(MemoryPool* memPool)"
  },
  {
    "label": "pool_free()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pool_free(MemoryPool *memPool, void *object)"
  },
  {
    "label": "pool_identify()",
    "kind": "Method",
    "detail": "Function (MemoryPool*)",
    "insertText": "pool_identify(void *object)"
  },
  {
    "label": "pool_msize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "pool_msize(MemoryPool *memPool, void *object)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # include<new> # ifndef __TBB_NO_IMPLICIT_LINKAGE # define __TBB_NO_IMPLICIT_LINKAGE 1 # include \" tbb_stddef . h \" # undef __TBB_NO_IMPLICIT_LINKAGE # else # include \" tbb_stddef . h \" # endif # if __TBB_ALLOCATOR_CONSTRUCT_VARIADIC # include<utility> # endif # if __TBB_CPP17_MEMORY_RESOURCE_PRESENT # include<memory_resource> # endif namespace tbb { # if _MSC_VER&& !)",
    "insertText": "defined(__INTEL_COMPILER) #pragma warning (push) #pragma warning (disable: 4100)"
  },
  {
    "label": "__TBB_NOINLINE()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_EXCEPTIONS template<E>)",
    "insertText": "__TBB_NOINLINE(void throw_exception(const E &e))"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (# endif template<E> void)",
    "insertText": "throw_exception(const E &e)"
  },
  {
    "label": "__TBB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_THROW(e)"
  },
  {
    "label": "scalable_allocator()",
    "kind": "Method",
    "detail": "Function (} } template<T> class scalable_allocator { public : typedef internal::allocator_type<T>::value_type value_type ; typedef value_type* pointer ; typedef const value_type* const_pointer ; typedef value_type& reference ; typedef const value_type& const_reference ; typedef size_t size_type ; typedef ptrdiff_t difference_type ; template<class U> struct rebind { typedef scalable_allocator<U> other ; } ;)",
    "insertText": "scalable_allocator() throw()"
  },
  {
    "label": "scalable_allocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scalable_allocator(const scalable_allocator& ) throw()"
  },
  {
    "label": "scalable_allocator()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "scalable_allocator(const scalable_allocator<U>&) throw()"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "address(reference x)"
  },
  {
    "label": "pointer()",
    "kind": "Method",
    "detail": "Function (pointer p = static_cast<)",
    "insertText": "pointer(scalable_malloc( n * sizeof(value_type) ))"
  },
  {
    "label": "scalable_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scalable_free(p)"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size() const throw()"
  },
  {
    "label": "size_type()",
    "kind": "Method",
    "detail": "Function (size_type absolutemax = static_cast<)",
    "insertText": "size_type(-1) / sizeof (value_type)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_ALLOCATOR_CONSTRUCT_VARIADIC template<U,. . . Args> void)",
    "insertText": "construct(U *p, Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void *)p) U(std::forward<Args>(args)...)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} # else # if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "construct(pointer p, value_type&& value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)(p)) value_type( std::move( value ))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "construct(pointer p, const value_type& value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)(p)) value_type(value)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "destroy(pointer p)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (p -> ~)",
    "insertText": "value_type()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if _MSC_VER&& !)",
    "insertText": "defined(__INTEL_COMPILER) #pragma warning (pop)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : typedef void* pointer ; typedef const void* const_pointer ; typedef void value_type ; template<class U> struct rebind { typedef scalable_allocator<U> other ; } ; } ; template<T,U> bool)",
    "insertText": "operator(const scalable_allocator<T>&, const scalable_allocator<U>&)"
  },
  {
    "label": "scalable_aligned_malloc()",
    "kind": "Method",
    "detail": "Function (void* ptr =)",
    "insertText": "scalable_aligned_malloc(bytes, alignment)"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "throw_exception(std::bad_alloc())"
  },
  {
    "label": "do_deallocate()",
    "kind": "Method",
    "detail": "Function (} return ptr ; } void)",
    "insertText": "do_deallocate(void* ptr, size_t , size_t)"
  },
  {
    "label": "scalable_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scalable_free(ptr)"
  },
  {
    "label": "do_is_equal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "do_is_equal(const std::pmr::memory_resource& other)"
  },
  {
    "label": "scalable_memory_resource()",
    "kind": "Method",
    "detail": "Function (# else false ; # endif } } ; } std::pmr::memory_resource*)",
    "insertText": "scalable_memory_resource()"
  }
]