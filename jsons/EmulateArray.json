[
  {
    "label": "array",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "array"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "array_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "array_size"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_EMULATE_ARRAY_H # define EIGEN_EMULATE_ARRAY_H #)",
    "insertText": "if(__cplusplus <= 199711L && EIGEN_COMP_MSVC < 1900) || defined(EIGEN_GPUCC) || defined(EIGEN_AVOID_STL_ARRAY)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T,size_t n> class array { public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T&)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(index < size())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < size())"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==1, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==2, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2, const T& v3)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==3, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; values [ 2 ] = v3 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2, const T& v3, const T& v4)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==4, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; values [ 2 ] = v3 ; values [ 3 ] = v4 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2, const T& v3, const T& v4, const T& v5)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==5, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; values [ 2 ] = v3 ; values [ 3 ] = v4 ; values [ 4 ] = v5 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2, const T& v3, const T& v4, const T& v5, const T& v6)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==6, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; values [ 2 ] = v3 ; values [ 3 ] = v4 ; values [ 4 ] = v5 ; values [ 5 ] = v6 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2, const T& v3, const T& v4, const T& v5, const T& v6, const T& v7)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==7, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; values [ 2 ] = v3 ; values [ 3 ] = v4 ; values [ 4 ] = v5 ; values [ 5 ] = v6 ; values [ 6 ] = v7 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(const T& v1, const T& v2, const T& v3, const T& v4, const T& v5, const T& v6, const T& v7, const T& v8)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(n==8, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (values [ 1 ] = v2 ; values [ 2 ] = v3 ; values [ 3 ] = v4 ; values [ 4 ] = v5 ; values [ 5 ] = v6 ; values [ 6 ] = v7 ; values [ 7 ] = v8 ; } # if EIGEN_HAS_VARIADIC_TEMPLATES EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "array(std::initializer_list<T> l)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(l.size() == n)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(l.begin(), l.end(), values)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<T> class array<T,0> { public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T&)",
    "insertText": "operator(size_t)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"Can't index a zero size array\")"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES EIGEN_DEVICE_FUNC)",
    "insertText": "array(std::initializer_list<T> l) : dummy()"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(l)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(l.size() == 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif private : T dummy ; } ; template<class T,std::size_t N> EIGEN_DEVICE_FUNC bool)",
    "insertText": "operator(const array<T,N>& lhs, const array<T,N>& rhs)"
  },
  {
    "label": "array_get()",
    "kind": "Method",
    "detail": "Function (} template<std::size_t I_,class T,std::size_t N> T&&)",
    "insertText": "array_get(std::array<T,N>&& a)"
  },
  {
    "label": "array_get()",
    "kind": "Method",
    "detail": "Function (} template<std::size_t I_,class T,std::size_t N> T const&)",
    "insertText": "array_get(std::array<T,N> const& a)"
  }
]