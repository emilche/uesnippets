[
  {
    "label": "FAnimNode_Root",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Root"
  },
  {
    "label": "UAnimGraphNode_Root",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Root"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimNodeBase . h \" # include \" AnimNode_Root . generated . h \")",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links)"
  },
  {
    "label": "FAnimNode_Root()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "FAnimNode_Root()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "SetName(FName InName)"
  },
  {
    "label": "SetGroup()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } void)",
    "insertText": "SetGroup(FName InGroup)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (LayerGroup = InGroup ; } # endif FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGroup()"
  }
]