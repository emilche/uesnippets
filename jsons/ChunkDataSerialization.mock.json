[
  {
    "label": "FMockChunkDataSerialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockChunkDataSerialization"
  },
  {
    "label": "LoadFromFile()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Data / ChunkData . h \" # include \" Tests / TestHelpers . h \" # include \" Common / StatsCollector . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockChunkDataSerialization : public IChunkDataSerialization { public : typedef TTuple<FString,EChunkLoadResult> FRxLoadFromFile ; typedef TTuple<FString,const IChunkDataAccess*> FRxSaveToFile ; typedef TTuple<TArray<uint8>,EChunkLoadResult> FRxLoadFromMemory ; typedef TTuple<EChunkLoadResult> FRxLoadFromArchive ; typedef TTuple<const IChunkDataAccess*> FRxSaveToArchive ; typedef TTuple<TArray<uint8>,FSHAHash> FRxInjectShaToChunkData ; typedef TTuple<IChunkDataAccess*,EChunkLoadResult> FTxLoadFromFile ; typedef TTuple<IChunkDataAccess*,EChunkLoadResult> FTxLoadFromMemory ; typedef TTuple<IChunkDataAccess*,EChunkLoadResult> FTxLoadFromArchive ; public : IChunkDataAccess*)",
    "insertText": "LoadFromFile(const FString& Filename, EChunkLoadResult& OutLoadResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IChunkDataAccess* Result = nullptr ;)",
    "insertText": "if(TxLoadFromFile.Num())"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (FTxLoadFromFile LoadFromFileResult = TxLoadFromFile .)",
    "insertText": "Pop()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result = LoadFromFileResult .)",
    "insertText": "Get()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxLoadFromFile .)",
    "insertText": "Emplace(Filename, OutLoadResult)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxSaveToFile .)",
    "insertText": "Emplace(Filename, ChunkDataAccess)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IChunkDataAccess* Result = nullptr ;)",
    "insertText": "if(TxLoadFromMemory.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxLoadFromMemory .)",
    "insertText": "Emplace(Memory, OutLoadResult)"
  },
  {
    "label": "MOCK_FUNC_NOT_IMPLEMENTED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_FUNC_NOT_IMPLEMENTED(\"FMockChunkDataSerialization::SaveToMemory\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IChunkDataAccess* Result = nullptr ;)",
    "insertText": "if(TxLoadFromArchive.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxLoadFromArchive .)",
    "insertText": "Emplace(OutLoadResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EChunkSaveResult Result = EChunkSaveResult::Success ;)",
    "insertText": "if(SaveToArchiveFunc)"
  },
  {
    "label": "SaveToArchiveFunc()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "SaveToArchiveFunc(Archive, ChunkDataAccess)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} RxSaveToArchive .)",
    "insertText": "Emplace(ChunkDataAccess)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxInjectShaToChunkData .)",
    "insertText": "Emplace(Memory, ShaHashData)"
  },
  {
    "label": "EChunkSaveResult()",
    "kind": "Method",
    "detail": "Function (} public : TArray<FRxLoadFromFile> RxLoadFromFile ; TArray<FRxSaveToFile> RxSaveToFile ; TArray<FRxLoadFromMemory> RxLoadFromMemory ; TArray<FRxLoadFromArchive> RxLoadFromArchive ; TArray<FRxSaveToArchive> RxSaveToArchive ; TArray<FRxInjectShaToChunkData> RxInjectShaToChunkData ; TArray<FTxLoadFromFile> TxLoadFromFile ; TArray<FTxLoadFromMemory> TxLoadFromMemory ; TArray<FTxLoadFromArchive> TxLoadFromArchive ; TFunction<)",
    "insertText": "EChunkSaveResult(FArchive&, const IChunkDataAccess*)"
  }
]