[
  {
    "label": "IEditorDataStorageProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditorDataStorageProvider"
  },
  {
    "label": "FAttributeBinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributeBinder"
  },
  {
    "label": "FAttributeBinder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Common / TypedElementHandles . h \" # include \" Elements / Interfaces / TypedElementDataStorageInterface . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" TypedElementAttributeBindingText . h \" class IEditorDataStorageProvider ; namespace UE::Editor::DataStorage { class FAttributeBinder { public :)",
    "insertText": "FAttributeBinder(RowHandle InTargetRow)"
  },
  {
    "label": "FAttributeBinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBinder(RowHandle InTargetRow, IEditorDataStorageProvider* InDataStorage)"
  },
  {
    "label": "BindData()",
    "kind": "Method",
    "detail": "Function (template<AttributeType,TDataColumnType ColumnType> TAttribute<AttributeType>)",
    "insertText": "BindData(AttributeType ColumnType::* InVariable, const AttributeType& InDefaultValue = AttributeType(), const FName& InIdentifier = NAME_None)"
  },
  {
    "label": "BindData()",
    "kind": "Method",
    "detail": "Function (template<AttributeType,DataType,TDataColumnType ColumnType> TAttribute<AttributeType>)",
    "insertText": "BindData(DataType ColumnType::* InVariable, TFunction<AttributeType(const DataType&)> InConverter, const DataType& InDefaultValue = DataType(), const FName& InIdentifier = NAME_None)"
  },
  {
    "label": "BindData()",
    "kind": "Method",
    "detail": "Function (template<DataType,TDataColumnType ColumnType,FunctionType> requires Private::AttributeBinderInvocable<FunctionType,DataType> auto)",
    "insertText": "BindData(DataType ColumnType::* InVariable, FunctionType InConverter, const DataType& InDefaultValue = DataType(), const FName& InIdentifier = NAME_None)"
  },
  {
    "label": "InRetValType()",
    "kind": "Method",
    "detail": "Function (template<InRetValType,. . . ParamTypes,TDataColumnType ColumnType> TDelegate<)",
    "insertText": "InRetValType(ParamTypes...)> BindEvent(TDelegate<InRetValType(ParamTypes...)> ColumnType::* InVariable, const FName& InIdentifier = NAME_None)"
  },
  {
    "label": "BindText()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ColumnType> TAttribute<FText>)",
    "insertText": "BindText(FString ColumnType::* InFStringVariable, const FName& InIdentifier = NAME_None)"
  },
  {
    "label": "BindText()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ColumnType> TAttribute<FText>)",
    "insertText": "BindText(FName ColumnType::* InFNameVariable, const FName& InIdentifier = NAME_None)"
  },
  {
    "label": "BindTextFormat()",
    "kind": "Method",
    "detail": "Function (FTextAttributeFormatted)",
    "insertText": "BindTextFormat(FTextFormat Format)"
  }
]