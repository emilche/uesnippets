[
  {
    "label": "ASSETTOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASSETTOOLS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Tasks / Task . h \" # include \" Containers / ContainersFwd . h \" # include \" UObject / CoreRedirects . h \")",
    "insertText": "DECLARE_DELEGATE_TwoParams(FAssetHeaderPatcherCompletionDelegate, const FString& , const FString&)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (enum class EResult { NotStarted,Cancelled,InProgress,Success,ErrorFailedToLoadSourceAsset,ErrorFailedToDeserializeSourceAsset,ErrorUnexpectedSectionOrder,ErrorBadOffset,ErrorUnkownSection,ErrorFailedToOpenDestinationFile,ErrorFailedToWriteToDestinationFile,ErrorEmptyRequireSection,} ; UE_INTERNAL struct FContext {)",
    "insertText": "FContext()"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContext(const TMap<FString, FString>& InSrcAndDstPackagePaths, const bool bInGatherDependentPackages = true)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContext(const FString& InSrcRoot, const FString& InDstRoot, const FString& InSrcBaseDir, const TMap<FString, FString>& InSrcAndDstFilePaths, const TMap<FString, FString>& InMountPointReplacements)"
  },
  {
    "label": "GetLongPackagePathRemapping()",
    "kind": "Method",
    "detail": "Function (const TMap<FString,FString>&)",
    "insertText": "GetLongPackagePathRemapping()"
  },
  {
    "label": "GatherDependentPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDependentPackages()"
  },
  {
    "label": "GenerateFilePathsFromPackagePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFilePathsFromPackagePaths()"
  },
  {
    "label": "GeneratePackagePathsFromFilePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratePackagePathsFromFilePaths(const FString& InSrcRoot, const FString& InDstRoot, const FString& InSrcBaseDir)"
  },
  {
    "label": "GenerateAdditionalRemappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateAdditionalRemappings()"
  },
  {
    "label": "FAssetHeaderPatcher()",
    "kind": "Method",
    "detail": "Function (TArray<FString> VerseMountPoints ; TMap<FString,FString> PackagePathRenameMap ; TMap<FString,FString> FilePathRenameMap ; TArray<FCoreRedirect> Redirects ; TMap<FString,FString> StringReplacements ; TMap<FString,FString> StringMountReplacements ; } ;)",
    "insertText": "FAssetHeaderPatcher()"
  },
  {
    "label": "FAssetHeaderPatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetHeaderPatcher(FContext InContext) : Context(InContext)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContext(FContext InContext)"
  },
  {
    "label": "PatchAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "PatchAsync(int32* InOutNumFilesToPatch = nullptr, int32* InOutNumFilesPatched = nullptr)"
  },
  {
    "label": "PatchAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "PatchAsync(int32* InOutNumFilesToPatch, int32* InOutNumFilesPatched, FAssetHeaderPatcherCompletionDelegate InOnSuccess, FAssetHeaderPatcherCompletionDelegate InOnError)"
  },
  {
    "label": "GetPatchResult()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "GetPatchResult()"
  },
  {
    "label": "HasErrors()",
    "kind": "Method",
    "detail": "Function (} return PatchedFiles ; } bool)",
    "insertText": "HasErrors()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&ErroredFilesLock)"
  },
  {
    "label": "GetErrorFiles()",
    "kind": "Method",
    "detail": "Function (} TMap<FString,EResult>)",
    "insertText": "GetErrorFiles()"
  },
  {
    "label": "CancelPatching()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CancelPatching()"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FContext Context ; TMap<FString,EResult> ErroredFiles ; FCriticalSection ErroredFilesLock ; TMap<FString,FString> PatchedFiles ; UE::Tasks::FTask PatchingTask ; EResult Status = EResult::NotStarted ; std::atomic<bool> bCancelled = false ; } ; UE_INTERNAL FString)",
    "insertText": "LexToString(FAssetHeaderPatcher::EResult InResult)"
  }
]