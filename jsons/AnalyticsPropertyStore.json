[
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FAnalyticsPropertyStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalyticsPropertyStore"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFlushWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFlushWorker"
  },
  {
    "label": "FAnalyticsPropertyStore()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Interfaces / IAnalyticsPropertyStore . h \" # include \" Misc / DateTime . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Timespan . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryReader . h \" # include \" Serialization / MemoryWriter . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" class IFileHandle ; struct FAnalyticsEventAttribute ; class FAnalyticsPropertyStore : public IAnalyticsPropertyStore { public :)",
    "insertText": "FAnalyticsPropertyStore()"
  },
  {
    "label": "FAnalyticsPropertyStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalyticsPropertyStore(const FAnalyticsPropertyStore&)"
  },
  {
    "label": "FAnalyticsPropertyStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalyticsPropertyStore(FAnalyticsPropertyStore&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnalyticsPropertyStore&)",
    "insertText": "operator(const FAnalyticsPropertyStore&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnalyticsPropertyStore&)",
    "insertText": "operator(FAnalyticsPropertyStore&&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(const FString& Pathname, uint32 CapacityHint = 4 * 1024)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const FString& Pathname)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FString& Key)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(const FString& Key)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, int32 Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, uint32 Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, int64 Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, uint64 Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, float Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, double Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, bool Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, const FString& Value, uint32 CharCountCapacityHint = 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, const FDateTime& Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, int32 Value, const TFunction<bool(const int32* , const int32& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, uint32 Value, const TFunction<bool(const uint32* , const uint32& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, int64 Value, const TFunction<bool(const int64* , const int64& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, uint64 Value, const TFunction<bool(const uint64* , const uint64& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, float Value, const TFunction<bool(const float* , const float& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, double Value, const TFunction<bool(const double* , const double& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, bool Value, const TFunction<bool(const bool* , const bool& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, const FString& Value, const TFunction<bool(const FString* , const FString& )>& ConditionFn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Set(const FString& Key, const FDateTime& Value, const TFunction<bool(const FDateTime* , const FDateTime& )>& ConditionFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(int32&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(uint32&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(int64&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(uint64&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(float&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(double&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(bool&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(FString&)>& UpdateFn)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Update(const FString& Key, const TFunction<bool(FDateTime&)>& UpdateFn)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, int32& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, uint32& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, int64& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, uint64& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, float& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, double& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, bool& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, FString& OutValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "Get(const FString& Key, FDateTime& OutValue)"
  },
  {
    "label": "VisitAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAll(const TFunction<void(FAnalyticsEventAttribute&&)>& VisitFn)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Flush(bool bAsync = false, const FTimespan& Timeout = FTimespan::MaxValue())"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : enum class ETypeCode : uint8 { I32 = 0 x00,U32 = 0 x01,I64 = 0 x02,U64 = 0 x03,Flt = 0 x04,Dbl = 0 x05,Bool = 0 x06,Date = 0 x07,Str = 0 x08,RawMask = 0 x0F,Dead = 0 x80,} ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(ETypeCode)"
  },
  {
    "label": "FFlushWorker()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FFlushWorker(FAnalyticsPropertyStore& InStore)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "Name()"
  },
  {
    "label": "SetFixedSizeValueInternal()",
    "kind": "Method",
    "detail": "Function (} private : FAnalyticsPropertyStore& Store ; TArray<uint8> Data ; } ; class FFlushWorker ; private : EStatusCode)",
    "insertText": "SetFixedSizeValueInternal(const FString& Key, ETypeCode TypeCode, const uint8* Value, uint32 Size)"
  },
  {
    "label": "GetFixedSizeValueInternal()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "GetFixedSizeValueInternal(const FString& Key, ETypeCode TypeCode, uint8* OutValue, uint32 Size)"
  },
  {
    "label": "SetStringValueInternal()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "SetStringValueInternal(const FString& Key, const FString& Value, uint32 CharCountCapacityHint = 0)"
  },
  {
    "label": "GetStringValueInternal()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "GetStringValueInternal(const FString& Key, FString& OutValue)"
  },
  {
    "label": "SetDateTimeValueInternal()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "SetDateTimeValueInternal(const FString& Key, const FDateTime& Value)"
  },
  {
    "label": "GetDateTimeValueInternal()",
    "kind": "Method",
    "detail": "Function (EStatusCode)",
    "insertText": "GetDateTimeValueInternal(const FString& Key, FDateTime& OutValue)"
  },
  {
    "label": "Defragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Defragment()"
  },
  {
    "label": "IsFixedSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFixedSize(ETypeCode Type)"
  },
  {
    "label": "RawType()",
    "kind": "Method",
    "detail": "Function (} ETypeCode)",
    "insertText": "RawType(ETypeCode Type)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetFixedSizeValueInternal()",
    "kind": "Method",
    "detail": "Function (template<T> IAnalyticsPropertyStore::EStatusCode)",
    "insertText": "SetFixedSizeValueInternal(const FString& Key, ETypeCode TypeCode, T Value)"
  },
  {
    "label": "GetFixedSizeValueInternal()",
    "kind": "Method",
    "detail": "Function (} template<T> EStatusCode)",
    "insertText": "GetFixedSizeValueInternal(const FString& Key, ETypeCode TypeCode, T& OutValue)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} private : FCriticalSection StoreLock ; TArray<uint8> StorageBuf ; FMemoryWriter StorageWriter ; FMemoryReader StorageReader ; TMap<FString,uint32> NameOffsetMap ; TUniquePtr<IFileHandle> FileHandle ; bool bFragmented = false ; TUniquePtr<FAsyncTask<FFlushWorker>> FlushTask ; TArray<uint8> AsyncFlushDataCopy ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FAnalyticsPropertyStore::ETypeCode)"
  }
]