[
  {
    "label": "FPackedNormal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedNormal"
  },
  {
    "label": "FDeprecatedSerializedPackedNormal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeprecatedSerializedPackedNormal"
  },
  {
    "label": "FPackedRGB10A2N",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedRGB10A2N"
  },
  {
    "label": "FPackedRGBA16N",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedRGBA16N"
  },
  {
    "label": "FPackedNormal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / MemoryLayout . h \" struct FPackedNormal { union { struct { int8 X,Y,Z,W ; } ; uint32 Packed ; } Vector ;)",
    "insertText": "FPackedNormal()"
  },
  {
    "label": "FPackedNormal()",
    "kind": "Method",
    "detail": "Function (Vector . Packed = 0 ; })",
    "insertText": "FPackedNormal(const FVector3f& InVector)"
  },
  {
    "label": "FPackedNormal()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedNormal(const FVector3d& InVector)"
  },
  {
    "label": "FPackedNormal()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedNormal(const FVector4f& InVector)"
  },
  {
    "label": "FPackedNormal()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedNormal(const FVector4d& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; } void)",
    "insertText": "operator(const FVector3f& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FVector3d& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FVector4f& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FVector4d& InVector)"
  },
  {
    "label": "GetVectorRegister()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "GetVectorRegister()"
  },
  {
    "label": "ToFVector()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ToFVector()"
  },
  {
    "label": "ToFVector3f()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "ToFVector3f()"
  },
  {
    "label": "ToFVector4()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "ToFVector4()"
  },
  {
    "label": "ToFVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "ToFVector4f()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FVector& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; } bool)",
    "insertText": "operator(const FPackedNormal& B)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackedNormal& N)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FPackedNormal)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (class FDeprecatedSerializedPackedNormal { union { struct { uint8 X,Y,Z,W ; } ; uint32 Packed ; } Vector ; public : operator)",
    "insertText": "FVector3f()"
  },
  {
    "label": "VectorLoadByte4()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float VectorToUnpack =)",
    "insertText": "VectorLoadByte4(this)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorToUnpack =)",
    "insertText": "VectorMultiplyAdd(VectorToUnpack, VectorSetFloat1(1.0f / 127.5f), VectorSetFloat1(-1.0f))"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (FVector3f UnpackedVector ;)",
    "insertText": "VectorStoreFloat3(VectorToUnpack, &UnpackedVector)"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (FVector3f AsFloat =* this ; return)",
    "insertText": "FVector3d(AsFloat)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FVector4f()"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (FVector4f UnpackedVector ;)",
    "insertText": "VectorStore(VectorToUnpack, &UnpackedVector)"
  },
  {
    "label": "FVector4d()",
    "kind": "Method",
    "detail": "Function (FVector4f AsFloat =* this ; return)",
    "insertText": "FVector4d(AsFloat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FDeprecatedSerializedPackedNormal& N)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const float Scale = MAX_int8 ; Vector .)",
    "insertText": "X(int8)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.X * Scale), MIN_int8, MAX_int8)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "Y(int8)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.Y * Scale), MIN_int8, MAX_int8)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "Z(int8)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.Z * Scale), MIN_int8, MAX_int8)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "W(int8)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.W * Scale), MIN_int8, MAX_int8)"
  },
  {
    "label": "VectorLoadSignedByte4()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float VectorToUnpack =)",
    "insertText": "VectorLoadSignedByte4(this)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorToUnpack =)",
    "insertText": "VectorMultiply(VectorToUnpack, VectorSetFloat1(1.0f / 127.0f))"
  },
  {
    "label": "FPackedRGB10A2N()",
    "kind": "Method",
    "detail": "Function (Vector . Packed = 0 ; })",
    "insertText": "FPackedRGB10A2N(const FVector3f& InVector)"
  },
  {
    "label": "FPackedRGB10A2N()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedRGB10A2N(const FVector3d& InVector)"
  },
  {
    "label": "FPackedRGB10A2N()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedRGB10A2N(const FVector4f& InVector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FVector3f& InVector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; } void)",
    "insertText": "Set(const FVector3d& InVector)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; } void)",
    "insertText": "Set(const FVector4f& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; } bool)",
    "insertText": "operator(const FPackedRGB10A2N& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackedRGB10A2N& N)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Vector . X =)",
    "insertText": "Clamp(FMath::TruncToInt32(InVector.X * 511.5f + 511.5f), 0, 1023)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Vector . Y =)",
    "insertText": "Clamp(FMath::TruncToInt32(InVector.Y * 511.5f + 511.5f), 0, 1023)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Vector . Z =)",
    "insertText": "Clamp(FMath::TruncToInt32(InVector.Z * 511.5f + 511.5f), 0, 1023)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Vector . W =)",
    "insertText": "Clamp(FMath::TruncToInt32(InVector.W * 1.5f + 1.5f), 0, 3)"
  },
  {
    "label": "VectorLoadURGB10A2N()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float VectorToUnpack =)",
    "insertText": "VectorLoadURGB10A2N((void*)this)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorToUnpack =)",
    "insertText": "VectorMultiplyAdd(VectorToUnpack, MakeVectorRegister(2.0f, 2.0f, 2.0f, 2.0f), MakeVectorRegister(-1.0f, -1.0f, -1.0f, -1.0f))"
  },
  {
    "label": "VectorResetFloatRegisters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorResetFloatRegisters()"
  },
  {
    "label": "FPackedRGBA16N()",
    "kind": "Method",
    "detail": "Function (X = 0 ; Y = 0 ; Z = 0 ; W = 0 ; })",
    "insertText": "FPackedRGBA16N(const FVector3d& InVector)"
  },
  {
    "label": "FPackedRGBA16N()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedRGBA16N(const FVector3f& InVector)"
  },
  {
    "label": "FPackedRGBA16N()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; })",
    "insertText": "FPackedRGBA16N(const FVector4f& InVector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = InVector ; } bool)",
    "insertText": "operator(const FPackedRGBA16N& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackedRGBA16N& N)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FPackedRGBA16N)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const float Scale = MAX_int16 ;)",
    "insertText": "X(int16)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.X * Scale), MIN_int16, MAX_int16)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Y(int16)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.Y * Scale), MIN_int16, MAX_int16)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Z(int16)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.Z * Scale), MIN_int16, MAX_int16)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "W(int16)FMath::Clamp<int32>(FMath::RoundToInt32(InVector.W * Scale), MIN_int16, MAX_int16)"
  },
  {
    "label": "VectorLoadSRGBA16N()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float VectorToUnpack =)",
    "insertText": "VectorLoadSRGBA16N((void*)this)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorToUnpack =)",
    "insertText": "VectorMultiply(VectorToUnpack, VectorSetFloat1(1.0f / 32767.0f))"
  }
]