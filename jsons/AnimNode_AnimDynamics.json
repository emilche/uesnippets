[
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimPhysBoneRigidBody",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPhysBoneRigidBody"
  },
  {
    "label": "FAnimPhysLinkedBody",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPhysLinkedBody"
  },
  {
    "label": "FAnimPhysConstraintSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPhysConstraintSetup"
  },
  {
    "label": "FAnimPhysPlanarLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPhysPlanarLimit"
  },
  {
    "label": "FAnimPhysSphericalLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPhysSphericalLimit"
  },
  {
    "label": "FAnimPhysBodyDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimPhysBodyDefinition"
  },
  {
    "label": "FAnimConstraintOffsetPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimConstraintOffsetPair"
  },
  {
    "label": "FAnimNode_AnimDynamics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AnimDynamics"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneContainer . h \" # include \" Animation / AnimPhysicsSolver . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" Animation / AnimInstanceProxy . h \" # include \" CommonAnimationTypes . h \" # include \" AnimNode_AnimDynamics . generated . h \" class UAnimInstance ; class USkeletalMeshComponent ; TAutoConsoleVariable<int32> CVarEnableDynamics ; TAutoConsoleVariable<int32> CVarLODThreshold ; TAutoConsoleVariable<int32> CVarEnableWind ; # if ENABLE_ANIM_DRAW_DEBUG TAutoConsoleVariable<int32> CVarShowDebug ; TAutoConsoleVariable<FString> CVarDebugBone ; # endif)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Anim Dynamics Overall\"), STAT_AnimDynamicsOverall, STATGROUP_Physics, ANIMGRAPHRUNTIME_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Anim Dynamics Wind Data Update\"), STAT_AnimDynamicsWindData, STATGROUP_Physics, ANIMGRAPHRUNTIME_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Anim Dynamics Bone Evaluation\"), STAT_AnimDynamicsBoneEval, STATGROUP_Physics, ANIMGRAPHRUNTIME_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Anim Dynamics Sub-Steps\"), STAT_AnimDynamicsSubSteps, STATGROUP_Physics, ANIMGRAPHRUNTIME_API)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Free,Limited,} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Component)",
    "insertText": "UMETA(ToolTip = \"Sim origin is the location/orientation of the skeletal mesh component.\"), Actor UMETA(ToolTip = \"Sim origin is the location/orientation of the actor containing the skeletal mesh component.\"), World UMETA(ToolTip = \"Sim origin is the world origin. Teleporting characters is not recommended in this mode.\"), RootRelative UMETA(ToolTip = \"Sim origin is the location/orientation of the root bone.\"), BoneRelative UMETA(ToolTip = \"Sim origin is the location/orientation of the bone specified in RelativeSpaceBone\")"
  },
  {
    "label": "FAnimPhysBoneRigidBody()",
    "kind": "Method",
    "detail": "Function (struct FAnimPhysBoneRigidBody {)",
    "insertText": "FAnimPhysBoneRigidBody(TArray<FAnimPhysShape>& Shapes, const FVector& Position, const FBoneReference& LinkedBone) : PhysBody(Shapes, Position) , BoundBone(LinkedBone)"
  },
  {
    "label": "FAnimPhysLinkedBody()",
    "kind": "Method",
    "detail": "Function (} FAnimPhysRigidBody PhysBody ; FBoneReference BoundBone ; } ; struct FAnimPhysLinkedBody {)",
    "insertText": "FAnimPhysLinkedBody(TArray<FAnimPhysShape>& Shapes, const FVector& Position, const FBoneReference& LinkedBone) : RigidBody(Shapes, Position, LinkedBone) , ParentBody(nullptr)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} FAnimPhysBoneRigidBody RigidBody ; FAnimPhysBoneRigidBody* ParentBody ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FAnimPhysConstraintSetup() : LinearXLimitType(AnimPhysLinearConstraintType::Limited) , LinearYLimitType(AnimPhysLinearConstraintType::Limited) , LinearZLimitType(AnimPhysLinearConstraintType::Limited) , bLinearFullyLocked(false) , LinearAxesMin(ForceInitToZero) , LinearAxesMax(ForceInitToZero) , AngularConstraintType(AnimPhysAngularConstraintType::Angular) , TwistAxis(AnimPhysTwistAxis::AxisX) , AngularTargetAxis(AnimPhysTwistAxis::AxisX) , ConeAngle(0.0f) #if WITH_EDITORONLY_DATA , AngularXAngle_DEPRECATED(0.0f) , AngularYAngle_DEPRECATED(0.0f) , AngularZAngle_DEPRECATED(0.0f) #endif , AngularLimitsMin(ForceInitToZero) , AngularLimitsMax(ForceInitToZero) , AngularTarget(ForceInitToZero)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FAnimPhysSphericalLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimPhysSphericalLimit() : SphereLocalOffset(FVector::ZeroVector) , LimitRadius(0.0f) , LimitType(ESphericalLimitType::Outer)"
  },
  {
    "label": "FAnimPhysBodyDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimPhysBodyDefinition() : BoxExtents(10.0f, 10.0f, 10.0f) , LocalJointOffset(FVector::ZeroVector) , CollisionType(AnimPhysCollisionType::CoM) , SphereCollisionRadius(10.0f)"
  },
  {
    "label": "FAnimConstraintOffsetPair()",
    "kind": "Method",
    "detail": "Function (} ; struct FAnimConstraintOffsetPair {)",
    "insertText": "FAnimConstraintOffsetPair(const FVector& InBody0Offset, const FVector InBody1Offset) : Body0Offset(InBody0Offset) , Body1Offset(InBody1Offset)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} FVector Body0Offset ; FVector Body1Offset ; } ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "FAnimNode_AnimDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNode_AnimDynamics()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternal(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateSkeletalControl_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateSkeletalControl_AnyThread(FComponentSpacePoseContext& Output, TArray<FBoneTransform>& OutBoneTransforms)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "HasPreUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreUpdate()"
  },
  {
    "label": "PreUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreUpdate(const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "NeedsDynamicReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsDynamicReset()"
  },
  {
    "label": "RequestInitialise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInitialise(InTeleportType)"
  },
  {
    "label": "GetLODThreshold()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLODThreshold()"
  },
  {
    "label": "RequestInitialise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInitialise(ETeleportType InTeleportType)"
  },
  {
    "label": "InitPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPhysics(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "TermPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TermPhysics()"
  },
  {
    "label": "UpdateChainPhysicsBodyDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChainPhysicsBodyDefinitions(const FReferenceSkeleton& ReferenceSkeleton)"
  },
  {
    "label": "ValidateChainPhysicsBodyDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateChainPhysicsBodyDefinitions(const FReferenceSkeleton& ReferenceSkeleton)"
  },
  {
    "label": "FindChainBoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindChainBoneNames(const FReferenceSkeleton& ReferenceSkeleton, TArray<FName>& ChainBoneNames)"
  },
  {
    "label": "UpdateLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLimits(FComponentSpacePoseContext& Output)"
  },
  {
    "label": "GetNumBodies()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBodies()"
  },
  {
    "label": "GetPhysBody()",
    "kind": "Method",
    "detail": "Function (const FAnimPhysRigidBody&)",
    "insertText": "GetPhysBody(int32 BodyIndex)"
  },
  {
    "label": "GetBodyComponentSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetBodyComponentSpaceTransform(const FAnimPhysRigidBody& Body, const USkeletalMeshComponent* const SkelComp)"
  },
  {
    "label": "GetBodyLocalJointOffset()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FVector)",
    "insertText": "GetBodyLocalJointOffset(const int32 BodyIndex)"
  },
  {
    "label": "ShouldDoPhysicsUpdate()",
    "kind": "Method",
    "detail": "Function (bool bDoPhysicsUpdateInEditor ; # endif bool)",
    "insertText": "ShouldDoPhysicsUpdate()"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetBoneTransformInSimSpace()",
    "kind": "Method",
    "detail": "Function (private : FTransform)",
    "insertText": "GetBoneTransformInSimSpace(FComponentSpacePoseContext& Output, const FCompactPoseBoneIndex& BoneIndex)"
  },
  {
    "label": "GetComponentSpaceTransformFromSimSpace()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransformFromSimSpace(AnimPhysSimSpaceType SimSpace, FComponentSpacePoseContext& Output, const FTransform& InSimTransform)"
  },
  {
    "label": "GetComponentSpaceTransformFromSimSpace()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransformFromSimSpace(AnimPhysSimSpaceType SimSpace, FComponentSpacePoseContext& Output, const FTransform& InSimTransform, const FTransform& InCompWorldSpaceTM, const FTransform& InActorWorldSpaceTM)"
  },
  {
    "label": "GetComponentSpaceTransformFromSimSpace()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetComponentSpaceTransformFromSimSpace(AnimPhysSimSpaceType SimSpace, const USkeletalMeshComponent* const SkelComp, const FTransform& InSimTransform)"
  },
  {
    "label": "GetSimSpaceTransformFromComponentSpace()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSimSpaceTransformFromComponentSpace(AnimPhysSimSpaceType SimSpace, FComponentSpacePoseContext& Output, const FTransform& InComponentTransform)"
  },
  {
    "label": "TransformWorldVectorToSimSpace()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "TransformWorldVectorToSimSpace(FComponentSpacePoseContext& Output, const FVector& InVec)"
  },
  {
    "label": "ConvertSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertSimulationSpace(FComponentSpacePoseContext& Output, AnimPhysSimSpaceType From, AnimPhysSimSpaceType To)"
  },
  {
    "label": "DrawBodies()",
    "kind": "Method",
    "detail": "Function (const float MaxTimeDebt ; float NextTimeStep ; float TimeDebt ; float AnimPhysicsMinDeltaTime ; float MaxPhysicsDeltaTime ; float MaxSubstepDeltaTime ; int32 MaxSubsteps ; TArray<FAnimPhysLinkedBody> Bodies ; TArray<FAnimPhysLinkedBody*> BodiesToReset ; TArray<FAnimPhysRigidBody*> BaseBodyPtrs ; TArray<FAnimPhysLinearLimit> LinearLimits ; TArray<FAnimPhysAngularLimit> AngularLimits ; TArray<FAnimPhysSpring> Springs ; TArray<FVector> PhysicsBodyJointOffsets ; TArray<FAnimConstraintOffsetPair> ConstraintOffsets ; TArray<int32> ActiveBoneIndices ; FVector SimSpaceGravityDirection ; FVector PreviousComponentLinearVelocity ; # if ENABLE_ANIM_DRAW_DEBUG void)",
    "insertText": "DrawBodies(FComponentSpacePoseContext& InContext, const TArray<FAnimPhysRigidBody*>& InBodies)"
  },
  {
    "label": "IsAnimDynamicsSystemEnabledFor()",
    "kind": "Method",
    "detail": "Function (int32 FilteredBoneIndex ; # endif public : bool)",
    "insertText": "IsAnimDynamicsSystemEnabledFor(int32 InLOD)"
  }
]