[
  {
    "label": "GeometryScope",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GeometryScope"
  },
  {
    "label": "SetGeometryScope()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_GeometryScope_h # define Alembic_AbcGeom_GeometryScope_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { enum GeometryScope { kConstantScope = 0,kUniformScope = 1,kVaryingScope = 2,kVertexScope = 3,kFacevaryingScope = 4,kUnknownScope = 1 2 7 } ; void)",
    "insertText": "SetGeometryScope(AbcA::MetaData &ioMetaData, GeometryScope iScope)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const std::string val = iMetaData .)",
    "insertText": "get(\"geoScope\")"
  },
  {
    "label": "GeometryScopeNumValuesPolygon()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesPolygon(GeometryScope iScope, size_t iNumVerts)"
  },
  {
    "label": "GeometryScopeNumValuesPointsPolygons()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesPointsPolygons(GeometryScope iScope, size_t iNumPolys, size_t iNumVerts, size_t iSumOfCounts)"
  },
  {
    "label": "GeometryScopeNumValuesPoints()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesPoints(GeometryScope iScope, size_t iNumPoints)"
  },
  {
    "label": "GeometryScopeNumValuesSubdivisionMesh()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesSubdivisionMesh(GeometryScope iScope, size_t iNumFaces, size_t iNumVerts, size_t iSumOfCounts)"
  },
  {
    "label": "GeometryScopeNumValuesBilinearPatch()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesBilinearPatch(GeometryScope iScope)"
  },
  {
    "label": "GeometryScopeNumValuesBicubicPatch()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesBicubicPatch(GeometryScope iScope)"
  },
  {
    "label": "GeometryScopeNumValuesBilinearPatchMesh()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesBilinearPatchMesh(GeometryScope iScope, size_t iNu, bool iUNoWrap, size_t iNv, bool iVNoWrap)"
  },
  {
    "label": "GeometryScopeNumValuesBicubicPatchMesh()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesBicubicPatchMesh(GeometryScope iScope, size_t iNu, bool iUNoWrap, size_t iNv, bool iVNoWrap)"
  },
  {
    "label": "GeometryScopeNumValuesNuPatch()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesNuPatch(GeometryScope iScope, size_t iNu, size_t iUorder, size_t iNv, size_t iVorder)"
  },
  {
    "label": "GeometryScopeNumValuesLinearCurves()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesLinearCurves(GeometryScope iScope, size_t iNumCurves, bool iNoWrap, size_t iSumOfCounts)"
  },
  {
    "label": "GeometryScopeNumValuesCubicCurves()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT size_t)",
    "insertText": "GeometryScopeNumValuesCubicCurves(GeometryScope iScope, size_t iNumCurves, bool iNoWrap, size_t iSumOfCounts)"
  },
  {
    "label": "SetIsUV()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT void)",
    "insertText": "SetIsUV(AbcA::MetaData &ioMetaData, bool isUV)"
  },
  {
    "label": "isUV()",
    "kind": "Method",
    "detail": "Function (ALEMBIC_EXPORT bool)",
    "insertText": "isUV(const AbcA::PropertyHeader & iHeader)"
  }
]