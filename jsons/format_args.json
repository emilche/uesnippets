[
  {
    "label": "_Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Context"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMAT_ARGS_H # define _LIBCPP___FORMAT_FORMAT_ARGS_H # include<__availability> # include<__config> # include<__format / format_arg . h> # include<__format / format_arg_store . h> # include<__format / format_fwd . h> # include<cstddef> # include<cstdint> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "basic_format_args()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "basic_format_args()"
  },
  {
    "label": "basic_format_args()",
    "kind": "Method",
    "detail": "Function (template<class . . . _Args> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "basic_format_args(const __format_arg_store<_Context, _Args...>& __store) noexcept : __size_(sizeof...(_Args))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (__values_ = __store . __storage . __values_ ; __types_ = __store . __storage . __types_ ; } else __args_ = __store . __storage . __args_ ; } } _LIBCPP_HIDE_FROM_ABI basic_format_arg<_Context>)",
    "insertText": "get(size_t __id)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(__format::__use_packed_format_arg_store(__size_))"
  },
  {
    "label": "__get_packed_type()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__get_packed_type(__types_, __id)"
  }
]