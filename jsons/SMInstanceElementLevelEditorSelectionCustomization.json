[
  {
    "label": "FSMInstanceElementLevelEditorSelectionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSMInstanceElementLevelEditorSelectionCustomization"
  },
  {
    "label": "CanSelectElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementSelectionSet . h \" # include \" Elements / Framework / TypedElementAssetEditorToolkitHostMixin . h \" class FSMInstanceElementLevelEditorSelectionCustomization : public FTypedElementSelectionCustomization,public FTypedElementAssetEditorToolkitHostMixin { public : bool)",
    "insertText": "CanSelectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "CanDeselectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeselectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "SelectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListRef InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "DeselectElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeselectElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListRef InSelectionSet, const FTypedElementSelectionOptions& InSelectionOptions)"
  },
  {
    "label": "GetSelectionElement()",
    "kind": "Method",
    "detail": "Function (FTypedElementHandle)",
    "insertText": "GetSelectionElement(const TTypedElement<ITypedElementSelectionInterface>& InElementSelectionHandle, FTypedElementListConstRef InCurrentSelection, const ETypedElementSelectionMethod InSelectionMethod)"
  }
]