[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FScopeCycleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeCycleCounter"
  },
  {
    "label": "FThreadStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadStats"
  },
  {
    "label": "TStatId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStatId"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "TThreadSingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TThreadSingleton"
  },
  {
    "label": "FScopeNonCriticalPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeNonCriticalPath"
  },
  {
    "label": "FScopeIdle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeIdle"
  },
  {
    "label": "FStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TStatIdData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStatIdData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EStatDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatDataType"
  },
  {
    "label": "EStatOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatOperation"
  },
  {
    "label": "EStatMetaFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatMetaFlags"
  },
  {
    "label": "EMemoryRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EMemoryRegion"
  },
  {
    "label": "FStatNameAndInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatNameAndInfo"
  },
  {
    "label": "FStatMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatMessage"
  },
  {
    "label": "TStatMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStatMessage"
  },
  {
    "label": "EComplexStatField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EComplexStatField"
  },
  {
    "label": "EStatMessagesArrayConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStatMessagesArrayConstants"
  },
  {
    "label": "FStatPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatPacket"
  },
  {
    "label": "FStatMessageLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatMessageLock"
  },
  {
    "label": "FThreadStatsPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadStatsPool"
  },
  {
    "label": "EConstructor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstructor"
  },
  {
    "label": "FStatsMallocProfilerProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsMallocProfilerProxy"
  },
  {
    "label": "FStatsThreadState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsThreadState"
  },
  {
    "label": "FStatsThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsThread"
  },
  {
    "label": "FCycleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCycleCounter"
  },
  {
    "label": "FSimpleScopeSecondsStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleScopeSecondsStat"
  },
  {
    "label": "FStartupMessages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStartupMessages"
  },
  {
    "label": "IStatGroupEnableManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStatGroupEnableManager"
  },
  {
    "label": "FThreadSafeStaticStatBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeStaticStatBase"
  },
  {
    "label": "TStatData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStatData"
  },
  {
    "label": "FThreadSafeStaticStatInner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeStaticStatInner"
  },
  {
    "label": "FThreadSafeStaticStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeStaticStat"
  },
  {
    "label": "FStatGroup_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatGroup_"
  },
  {
    "label": "FStat_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStat_"
  },
  {
    "label": "FThreadIdleStats()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ChunkedArray . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / LockFreeList . h \" # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateBase . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMemory . h \" # include \" HAL / PlatformMisc . h \" # include \" HAL / PlatformTLS . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / ThreadSingleton . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / Color . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Misc / CString . h \" # include \" Misc / EnumClassFlags . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" ProfilingDebugging / MiscTrace . h \" # include \" StatsCommon . h \" # include \" StatsTrace . h \" # include \" Templates / Atomic . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Trace / Detail / Channel . h \" # include \" Trace / Detail / Channel . inl \" # include \" Trace / Trace . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FOutputDevice ; class FScopeCycleCounter ; class FThreadStats ; struct TStatId ; template<T> struct TIsPODType ; class FThreadIdleStats : public TThreadSingleton<FThreadIdleStats> { class TThreadSingleton<FThreadIdleStats> ;)",
    "insertText": "FThreadIdleStats() : Waits(0) , WaitsCriticalPath(0) , IsCriticalPathCounter(1) , bInIdleScope(false)"
  },
  {
    "label": "BeginCriticalPath()",
    "kind": "Method",
    "detail": "Function (} public : uint32 Waits ; uint32 WaitsCriticalPath ; int IsCriticalPathCounter ; bool bInIdleScope ; void)",
    "insertText": "BeginCriticalPath()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()"
  },
  {
    "label": "EndCriticalPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndCriticalPath()"
  },
  {
    "label": "FScopeNonCriticalPath()",
    "kind": "Method",
    "detail": "Function (} struct FScopeNonCriticalPath {)",
    "insertText": "FScopeNonCriticalPath()"
  },
  {
    "label": "IsCriticalPath()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "IsCriticalPath()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (Waits = 0 ; WaitsCriticalPath = 0 ; IsCriticalPathCounter = 1 ; } struct FScopeIdle { # if)",
    "insertText": "defined(DISABLE_THREAD_IDLE_STATS) && DISABLE_THREAD_IDLE_STATS FScopeIdle( bool bInIgnore = false)"
  },
  {
    "label": "FScopeIdle()",
    "kind": "Method",
    "detail": "Function (} # else const uint32 Start ; const bool bIgnore ; # if CPUPROFILERTRACE_ENABLED FCpuProfilerTrace::FEventScope TraceEventScope ; # endif)",
    "insertText": "FScopeIdle(bool bInIgnore = false)"
  },
  {
    "label": "FScopeIdle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopeIdle()"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (uint32 CyclesElapsed =)",
    "insertText": "Cycles()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IdleStats . Waits + = CyclesElapsed ;)",
    "insertText": "if(IdleStats.IsCriticalPath())"
  },
  {
    "label": "DirectStatsCommand()",
    "kind": "Method",
    "detail": "Function (IdleStats . WaitsCriticalPath + = CyclesElapsed ; } IdleStats . bInIdleScope = false ; } } # endif } ; } ; bool)",
    "insertText": "DirectStatsCommand(const TCHAR* Cmd, bool bBlockForCompletion = false, FOutputDevice* Ar = nullptr)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (struct FStats {)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnAdvanceRenderingThreadStats, bool , int64 , int32)"
  },
  {
    "label": "AdvanceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceFrame(bool bDiscardCallstack, const FOnAdvanceRenderingThreadStats& AdvanceRenderingThreadStatsDelegate = FOnAdvanceRenderingThreadStats())"
  },
  {
    "label": "TickCommandletStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCommandletStats()"
  },
  {
    "label": "EnabledForCommandlet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnabledForCommandlet()"
  },
  {
    "label": "HasLoadTimeStatsForCommandletToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLoadTimeStatsForCommandletToken()"
  },
  {
    "label": "HasLoadTimeFileForCommandletToken()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLoadTimeFileForCommandletToken()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (TAtomic<int32> GameThreadStatsFrame ; } ; enum class EStatFlags : uint8 { None = 0,ClearEveryFrame = 1<<0,CycleStat = 1<<1,Verbose = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EStatFlags)"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (# if STATS struct TStatIdData { bool)",
    "insertText": "IsNone()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (FMinimalName LocalName = Name .)",
    "insertText": "Load(EMemoryOrder::Relaxed)"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (} TAtomic<FMinimalName> Name ; TUniquePtr<WIDECHAR [ ]> StatDescriptionWide ; TUniquePtr<ANSICHAR [ ]> StatDescriptionAnsi ; } ; struct TStatId {)",
    "insertText": "TStatId() : StatIdPtr(&TStatId_NAME_None)"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStatId(TStatIdData const* InStatIdPtr) : StatIdPtr(InStatIdPtr)"
  },
  {
    "label": "IsValidStat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidStat()"
  },
  {
    "label": "GetRawPointer()",
    "kind": "Method",
    "detail": "Function (} TStatIdData const*)",
    "insertText": "GetRawPointer()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetStatNone()",
    "kind": "Method",
    "detail": "Function (} const TStatIdData&)",
    "insertText": "GetStatNone()"
  },
  {
    "label": "GetStatDescriptionWIDE()",
    "kind": "Method",
    "detail": "Function (} const WIDECHAR*)",
    "insertText": "GetStatDescriptionWIDE()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TStatId Other)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; struct EStatMetaFlags { enum Type { Invalid = 0 x00,DummyAlwaysOne = 0 x01,HasLongNameAndMetaInfo = 0 x02,IsCycle = 0 x04,IsMemory = 0 x08,IsPackedCCAndDuration = 0 x10,ShouldClearEveryFrame = 0 x20,SendingFName = 0 x40,Num = 0 x80,Mask = 0 xff,Shift = EStatOperation::Shift + EStatOperation::NumBits,NumBits = 8 } ; } ; struct EMemoryRegion { enum Type { Invalid = FPlatformMemory::MCR_Invalid,Num = FPlatformMemory::MCR_MAX,Mask = 0 xf,Shift = EStatMetaFlags::Shift + EStatMetaFlags::NumBits,NumBits = 4 } ;)",
    "insertText": "static_assert(FPlatformMemory::MCR_MAX < (1 << NumBits), \"Need to expand memory region field.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Invalid,Alloc,Free,Realloc,Num,Mask = 0 x7,NumBits = 3,} ; namespace EStatAllFields { enum Type { NumBits = EMemoryRegion::Shift + EMemoryRegion::NumBits,StartShift = 2 8 - NumBits,} ; })",
    "insertText": "static_assert(EStatAllFields::StartShift > 0, \"Too many stat fields.\")"
  },
  {
    "label": "FromPackedCallCountDuration_CallCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FromPackedCallCountDuration_CallCount(int64 Both)"
  },
  {
    "label": "FromPackedCallCountDuration_Duration()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FromPackedCallCountDuration_Duration(int64 Both)"
  },
  {
    "label": "FStatNameAndInfo()",
    "kind": "Method",
    "detail": "Function (} class FStatNameAndInfo { FNameEntryId Index ; int32 Number ; public : FORCEINLINE_STATS)",
    "insertText": "FStatNameAndInfo()"
  },
  {
    "label": "FStatNameAndInfo()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatNameAndInfo(FName Other, bool bAlreadyHasMeta) : Index(Other.GetComparisonIndex()) , Number(Other.GetNumber())"
  },
  {
    "label": "DummyAlwaysOne()",
    "kind": "Method",
    "detail": "Function (Number | =)",
    "insertText": "DummyAlwaysOne(EStatMetaFlags::Shift + EStatAllFields::StartShift)"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "FStatNameAndInfo()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatNameAndInfo(FName InStatName, char const* InGroup, char const* InCategory, TCHAR const* InDescription, EStatDataType::Type InStatType, bool bShouldClearEveryFrame, bool bCycleStat, bool bSortByName, FPlatformMemory::EMemoryCounterRegion MemoryRegion = FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "ToLongName()",
    "kind": "Method",
    "detail": "Function (FName LongName =)",
    "insertText": "ToLongName(InStatName, InGroup, InCategory, InDescription, bSortByName)"
  },
  {
    "label": "GetComparisonIndex()",
    "kind": "Method",
    "detail": "Function (Index = LongName .)",
    "insertText": "GetComparisonIndex()"
  },
  {
    "label": "GetNumber()",
    "kind": "Method",
    "detail": "Function (Number = LongName .)",
    "insertText": "GetNumber()"
  },
  {
    "label": "Number()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Number(EStatMetaFlags::DummyAlwaysOne | EStatMetaFlags::HasLongNameAndMetaInfo) << (EStatMetaFlags::Shift + EStatAllFields::StartShift)"
  },
  {
    "label": "EStatDataType()",
    "kind": "Method",
    "detail": "Function (SetField<)",
    "insertText": "EStatDataType(InStatType)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlag(EStatMetaFlags::ShouldClearEveryFrame, bShouldClearEveryFrame)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlag(EStatMetaFlags::IsCycle, bCycleStat)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlag(EStatMetaFlags::IsMemory, true)"
  },
  {
    "label": "EMemoryRegion()",
    "kind": "Method",
    "detail": "Function (SetField<)",
    "insertText": "EMemoryRegion(EMemoryRegion::Type(MemoryRegion))"
  },
  {
    "label": "SetNumberDirect()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "SetNumberDirect(int32 InNumber)"
  },
  {
    "label": "GetRawNumber()",
    "kind": "Method",
    "detail": "Function (Number = InNumber ; } FORCEINLINE_STATS int32)",
    "insertText": "GetRawNumber()"
  },
  {
    "label": "LocalNumber()",
    "kind": "Method",
    "detail": "Function (int32 LocalNumber = Number ;)",
    "insertText": "LocalNumber((1 << EStatAllFields::StartShift) - 1)"
  },
  {
    "label": "Number()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Number(LocalNumber | RawName.GetNumber())"
  },
  {
    "label": "GetRawName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FName)",
    "insertText": "GetRawName()"
  },
  {
    "label": "GetEncodedName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FName)",
    "insertText": "GetEncodedName()"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FName)",
    "insertText": "GetShortName()"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FName)",
    "insertText": "GetGroupName()"
  },
  {
    "label": "GetGroupCategory()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FName)",
    "insertText": "GetGroupCategory()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetSortByName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS bool)",
    "insertText": "GetSortByName()"
  },
  {
    "label": "GetField()",
    "kind": "Method",
    "detail": "Function (} template<TField> TField::Type)",
    "insertText": "GetField()"
  },
  {
    "label": "LocalNumber()",
    "kind": "Method",
    "detail": "Function (int32 LocalNumber = Number ;)",
    "insertText": "LocalNumber(LocalNumber >> (EStatAllFields::StartShift + TField::Shift))"
  },
  {
    "label": "SetField()",
    "kind": "Method",
    "detail": "Function (} template<TField> void)",
    "insertText": "SetField(typename TField::Type Value)"
  },
  {
    "label": "LocalNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalNumber(TField::Mask << (EStatAllFields::StartShift + TField::Shift))"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (LocalNumber | =)",
    "insertText": "Value(EStatAllFields::StartShift + TField::Shift)"
  },
  {
    "label": "GetFlag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetFlag(EStatMetaFlags::Type Bit)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlag(EStatMetaFlags::Type Bit, bool Value)"
  },
  {
    "label": "LocalNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LocalNumber(Bit << (EStatAllFields::StartShift + EStatMetaFlags::Shift))"
  },
  {
    "label": "ToLongName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "ToLongName(FName InStatName, char const* InGroup, char const* InCategory, TCHAR const* InDescription, bool InSortByName)"
  },
  {
    "label": "GetShortNameFrom()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShortNameFrom(FName InLongName)"
  },
  {
    "label": "GetGroupNameFrom()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGroupNameFrom(FName InLongName)"
  },
  {
    "label": "GetGroupCategoryFrom()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGroupCategoryFrom(FName InLongName)"
  },
  {
    "label": "GetDescriptionFrom()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescriptionFrom(FName InLongName)"
  },
  {
    "label": "GetSortByNameFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSortByNameFrom(FName InLongName)"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStatMessage { enum { DATA_SIZE = 8,DATA_ALIGN = 8,} ; union { # if UE_BUILD_DEBUG UStatData DebugStatData ; # endif TAlignedBytes<DATA_SIZE,DATA_ALIGN> StatData ; } ; FStatNameAndInfo NameAndInfo ;)",
    "insertText": "FStatMessage()"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStatMessage(FName InStatName, EStatDataType::Type InStatType, char const* InGroup, char const* InCategory, TCHAR const* InDescription, bool bShouldClearEveryFrame, bool bCycleStat, bool bSortByName, FPlatformMemory::EMemoryCounterRegion MemoryRegion = FPlatformMemory::MCR_Invalid) : NameAndInfo(InStatName, InGroup, InCategory, InDescription, InStatType, bShouldClearEveryFrame, bCycleStat, bSortByName, MemoryRegion)"
  },
  {
    "label": "EStatOperation()",
    "kind": "Method",
    "detail": "Function (NameAndInfo . SetField<)",
    "insertText": "EStatOperation(EStatOperation::SetLongName)"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatMessage(FStatNameAndInfo InStatName) : NameAndInfo(InStatName)"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatMessage(FName InStatName, EStatOperation::Type InStatOperation) : NameAndInfo(InStatName, true)"
  },
  {
    "label": "EStatOperation()",
    "kind": "Method",
    "detail": "Function (NameAndInfo . SetField<)",
    "insertText": "EStatOperation(InStatOperation)"
  },
  {
    "label": "GetValue_int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_int64()= int64(FPlatformTime::Cycles())"
  },
  {
    "label": "checkStats()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkStats(0)"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} } FORCEINLINE_STATS)",
    "insertText": "FStatMessage(FName InStatName, EStatOperation::Type InStatOperation, int64 Value, bool bIsCycle) : NameAndInfo(InStatName, true)"
  },
  {
    "label": "GetValue_int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_int64()"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatMessage(FName InStatName, EStatOperation::Type InStatOperation, double Value, bool) : NameAndInfo(InStatName, true)"
  },
  {
    "label": "GetValue_double()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_double()"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatMessage(FName InStatName, EStatOperation::Type InStatOperation, FName Value, bool) : NameAndInfo(InStatName, true)"
  },
  {
    "label": "GetValue_FMinimalName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_FMinimalName() = NameToMinimalName(Value)"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FStatMessage(FName InStatName, EStatOperation::Type InStatOperation, uint64 Value, bool) : NameAndInfo(InStatName, true)"
  },
  {
    "label": "GetValue_Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_Ptr()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetValue_Duration()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS int64)",
    "insertText": "GetValue_Duration()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(int64 const*)"
  },
  {
    "label": "GetValue_CallCount()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS uint32)",
    "insertText": "GetValue_CallCount()"
  },
  {
    "label": "GetValue_FMinimalName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FMinimalName&)",
    "insertText": "GetValue_FMinimalName()"
  },
  {
    "label": "GetValue_FName()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS FName)",
    "insertText": "GetValue_FName()"
  },
  {
    "label": "GetPermanentStats()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TIsPODType<FStatMessage> { enum { Value = true } ; } ; void)",
    "insertText": "GetPermanentStats(TArray<FStatMessage>& OutStats)"
  },
  {
    "label": "TStatMessage()",
    "kind": "Method",
    "detail": "Function (template<TEnum> struct TStatMessage { typedef TEnum TStructEnum ; int32 EnumCount = TEnum::Num ; enum { DATA_SIZE = 8* EnumCount,DATA_ALIGN = 8,} ; union { # if UE_BUILD_DEBUG UStatData DebugStatData [ EnumCount ] ; # endif TAlignedBytes<DATA_SIZE,DATA_ALIGN> StatData ; } ; FStatNameAndInfo NameAndInfo ;)",
    "insertText": "TStatMessage()"
  },
  {
    "label": "TStatMessage()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "TStatMessage(const FStatMessage& Other) : NameAndInfo(Other.NameAndInfo)"
  },
  {
    "label": "EStatDataType()",
    "kind": "Method",
    "detail": "Function (NameAndInfo . SetField<)",
    "insertText": "EStatDataType(EStatDataType::ST_None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TStatMessage&)",
    "insertText": "operator(const FStatMessage& Other)"
  },
  {
    "label": "EStatDataType()",
    "kind": "Method",
    "detail": "Function (const EStatDataType::Type OldType = NameAndInfo . GetField<)",
    "insertText": "EStatDataType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 OldValues [ TEnum::Num ] ;)",
    "insertText": "for(int32 FieldIndex = 0; FieldIndex < EnumCount; ++FieldIndex)"
  },
  {
    "label": "GetValue_int64()",
    "kind": "Method",
    "detail": "Function (OldValues [ FieldIndex ] =)",
    "insertText": "GetValue_int64((typename TEnum::Type)FieldIndex)"
  },
  {
    "label": "EStatDataType()",
    "kind": "Method",
    "detail": "Function (} NameAndInfo . SetField<)",
    "insertText": "EStatDataType(NewType)"
  },
  {
    "label": "GetValue_double()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_double((typename TEnum::Type)FieldIndex) = (double)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(OldType == EStatDataType::ST_double && NewType == EStatDataType::ST_int64)"
  },
  {
    "label": "GetValue_double()",
    "kind": "Method",
    "detail": "Function (OldValues [ FieldIndex ] =)",
    "insertText": "GetValue_double((typename TEnum::Type)FieldIndex)"
  },
  {
    "label": "GetValue_int64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue_int64((typename TEnum::Type)FieldIndex) = (int64)"
  },
  {
    "label": "GetValue_int64()",
    "kind": "Method",
    "detail": "Function (} } FORCEINLINE_STATS int64&)",
    "insertText": "GetValue_int64(typename TEnum::Type Index)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (int64&)",
    "insertText": "Value((int64*)&StatData+(uint32)Index)"
  },
  {
    "label": "FromPackedCallCountDuration_Duration()",
    "kind": "Method",
    "detail": "Function (const uint32 Value =)",
    "insertText": "FromPackedCallCountDuration_Duration(*((int64 const*)&StatData+(uint32)Index))"
  },
  {
    "label": "FromPackedCallCountDuration_CallCount()",
    "kind": "Method",
    "detail": "Function (const uint32 Value =)",
    "insertText": "FromPackedCallCountDuration_CallCount(*((int64 const*)&StatData+(uint32)Index))"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "Value((double const*)&StatData+(uint32)Index)"
  },
  {
    "label": "FStatMessage()",
    "kind": "Method",
    "detail": "Function (} } ; struct EComplexStatField { enum Type { IncSum,IncAve,IncMax,IncMin,ExcSum,ExcAve,ExcMax,ExcMin,Num,} ; } ; typedef TStatMessage<EComplexStatField> FComplexStatMessage ; template<> struct TIsPODType<FComplexStatMessage> { enum { Value = true } ; } ; struct EStatMessagesArrayConstants { enum { # if WITH_EDITOR MESSAGES_CHUNK_SIZE = 4* 1 0 2 4,# else MESSAGES_CHUNK_SIZE = 6 4* 1 0 2 4,# endif } ; } ; typedef TChunkedArray<)",
    "insertText": "FStatMessage(uint32)"
  },
  {
    "label": "FStatPacket()",
    "kind": "Method",
    "detail": "Function (struct FStatPacket { int64 Frame ; uint32 ThreadId ; EThreadType::Type ThreadType ; bool bBrokenCallstacks ; FStatMessagesArray StatMessages ; TArray<int32> StatMessagesPresize ;)",
    "insertText": "FStatPacket() : Frame(1) , ThreadId(0) , ThreadType(EThreadType::Invalid) , bBrokenCallstacks(false)"
  },
  {
    "label": "FStatPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStatPacket(FStatPacket const& Other) : Frame(Other.Frame) , ThreadId(Other.ThreadId) , ThreadType(Other.ThreadType) , bBrokenCallstacks(false) , StatMessagesPresize(Other.StatMessagesPresize)"
  },
  {
    "label": "SetThreadProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetThreadProperties()"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (ThreadId =)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(ThreadId == GGameThreadId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ThreadType = EThreadType::Game ; } else)",
    "insertText": "if(ThreadId == GRenderThreadId)"
  },
  {
    "label": "AssignFrame()",
    "kind": "Method",
    "detail": "Function (ThreadType = EThreadType::Renderer ; } else { ThreadType = EThreadType::Other ; } PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "AssignFrame(int64 InFrame)"
  },
  {
    "label": "FStatMessageLock()",
    "kind": "Method",
    "detail": "Function (Frame = InFrame ; } } ; struct FStatMessageLock {)",
    "insertText": "FStatMessageLock(int32& InMessageScope) : MessageScope(InMessageScope)"
  },
  {
    "label": "FStatMessageLock()",
    "kind": "Method",
    "detail": "Function (MessageScope + + ; } ~)",
    "insertText": "FStatMessageLock()"
  },
  {
    "label": "FThreadStatsPool()",
    "kind": "Method",
    "detail": "Function (MessageScope - - ; } protected : int32& MessageScope ; } ; struct FThreadStatsPool { private : enum { NUM_ELEMENTS_IN_POOL = 5 1 2 } ; TLockFreePointerListUnordered<FThreadStats,0> Pool ; public :)",
    "insertText": "FThreadStatsPool()"
  },
  {
    "label": "GetFromPool()",
    "kind": "Method",
    "detail": "Function (FThreadStats*)",
    "insertText": "GetFromPool()"
  },
  {
    "label": "ReturnToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnToPool(FThreadStats* Instance)"
  },
  {
    "label": "FThreadStats()",
    "kind": "Method",
    "detail": "Function (} ; enum EConstructor { FOR_POOL } ; class FThreadStats : FNoncopyable { class FStatsMallocProfilerProxy ; class FStatsThreadState ; class FStatsThread ; struct FThreadStatsPool ; FThreadSafeCounter PrimaryEnableCounter ; FThreadSafeCounter PrimaryEnableUpdateNumber ; FThreadSafeCounter PrimaryDisableChangeTagLock ; uint32 TlsSlot ; bool bPrimaryEnable ; bool bPrimaryDisableForever ; bool bIsRawStatsActive ; FStatPacket Packet ; int32 CurrentGameFrame ; int32 ScopeCount ; int32 bWaitForExplicitFlush ; int32 MemoryMessageScope ; bool bReentranceGuard ; bool bSawExplicitFlush ;)",
    "insertText": "FThreadStats()"
  },
  {
    "label": "FThreadStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FThreadStats(EConstructor)"
  },
  {
    "label": "SendMessage_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage_Async(FStatPacket* ToSend)"
  },
  {
    "label": "GetThreadStats()",
    "kind": "Method",
    "detail": "Function (public : FORCEINLINE_STATS FThreadStats*)",
    "insertText": "GetThreadStats()"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (FThreadStats*)",
    "insertText": "Stats(FThreadStats*)FPlatformTLS::GetTlsValue(TlsSlot)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Stats =)",
    "insertText": "Get().GetFromPool()"
  },
  {
    "label": "CheckEnable()",
    "kind": "Method",
    "detail": "Function (} return Stats ; } void)",
    "insertText": "CheckEnable()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Frame = FStats::GameThreadStatsFrame ; const bool bFrameHasChanged = Frame> CurrentGameFrame ;)",
    "insertText": "if(bFrameHasChanged)"
  },
  {
    "label": "AssignFrame()",
    "kind": "Method",
    "detail": "Function (CurrentGameFrame = Frame ; Packet .)",
    "insertText": "AssignFrame(CurrentGameFrame)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (bSawExplicitFlush = false ; bWaitForExplicitFlush = 1 ; ScopeCount + + ; } } void)",
    "insertText": "Flush(bool bHasBrokenCallstacks = false, bool bForceFlush = false)"
  },
  {
    "label": "FlushRegularStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRegularStats(bool bHasBrokenCallstacks, bool bForceFlush)"
  },
  {
    "label": "FlushRawStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRawStats(bool bHasBrokenCallstacks = false, bool bForceFlush = false)"
  },
  {
    "label": "CheckForCollectingStartupStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForCollectingStartupStats()"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::Stats)"
  },
  {
    "label": "MessageLock()",
    "kind": "Method",
    "detail": "Function (FStatMessageLock)",
    "insertText": "MessageLock(MemoryMessageScope)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (Packet . StatMessages .)",
    "insertText": "AddElement(StatMessage)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "IsThreadingReady()",
    "kind": "Method",
    "detail": "Function (FThreadStats* Stats =)",
    "insertText": "IsThreadingReady() ? (FThreadStats*)FPlatformTLS::GetTlsValue(TlsSlot)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (Stats ->)",
    "insertText": "Flush(false, true)"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTlsValue(TlsSlot, nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ReturnToPool(Stats)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (} } FORCEINLINE_STATS void)",
    "insertText": "AddMessage(FName InStatName, EStatOperation::Type InStatOperation)"
  },
  {
    "label": "AddStatMessage()",
    "kind": "Method",
    "detail": "Function (ThreadStats -> ScopeCount + + ; ThreadStats ->)",
    "insertText": "AddStatMessage(FStatMessage(InStatName, InStatOperation))"
  },
  {
    "label": "FlushRawStats()",
    "kind": "Method",
    "detail": "Function (ThreadStats ->)",
    "insertText": "FlushRawStats()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(InStatOperation == EStatOperation::CycleScopeEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ThreadStats -> ScopeCount - - ;)",
    "insertText": "if(!ThreadStats->ScopeCount)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (ThreadStats ->)",
    "insertText": "Flush()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bIsRawStatsActive)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (} } } } template<TValue> FORCEINLINE_STATS void)",
    "insertText": "AddMessage(FName InStatName, EStatOperation::Type InStatOperation, TValue Value, bool bIsCycle = false)"
  },
  {
    "label": "AddStatMessage()",
    "kind": "Method",
    "detail": "Function (ThreadStats ->)",
    "insertText": "AddStatMessage(FStatMessage(InStatName, InStatOperation, Value, bIsCycle))"
  },
  {
    "label": "AddStatMessage()",
    "kind": "Method",
    "detail": "Function (# if UE_STATS_MEMORY_PROFILER_ENABLED)",
    "insertText": "AddStatMessage(FStatMessage(InStatName, EStatOperation::Memory, Value, false))"
  },
  {
    "label": "ExplicitFlush()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "ExplicitFlush(bool DiscardCallstack = false)"
  },
  {
    "label": "IsCollectingData()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE_STATS bool)",
    "insertText": "IsCollectingData()"
  },
  {
    "label": "WillEverCollectData()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS bool)",
    "insertText": "WillEverCollectData()"
  },
  {
    "label": "PrimaryEnableAdd()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "PrimaryEnableAdd(int32 Value = 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PrimaryEnableCounter .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "PrimaryEnableSubtract()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "PrimaryEnableSubtract(int32 Value = 1)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (PrimaryEnableCounter .)",
    "insertText": "Subtract(Value)"
  },
  {
    "label": "PrimaryDisableForever()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "PrimaryDisableForever()"
  },
  {
    "label": "PrimaryDisableChangeTagLockAdd()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "PrimaryDisableChangeTagLockAdd(int32 Value = 1)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (PrimaryEnableUpdateNumber .)",
    "insertText": "Increment()"
  },
  {
    "label": "PrimaryDisableChangeTagLockSubtract()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "PrimaryDisableChangeTagLockSubtract(int32 Value = 1)"
  },
  {
    "label": "PrimaryDisableChangeTag()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS int32)",
    "insertText": "PrimaryDisableChangeTag()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} return PrimaryEnableUpdateNumber .)",
    "insertText": "GetValue()"
  },
  {
    "label": "PrimaryEnableAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimaryEnableAdd(Value)"
  },
  {
    "label": "PrimaryEnableSubtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimaryEnableSubtract(Value)"
  },
  {
    "label": "PrimaryDisableChangeTagLockAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimaryDisableChangeTagLockAdd(Value)"
  },
  {
    "label": "PrimaryDisableChangeTagLockSubtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrimaryDisableChangeTagLockSubtract(Value)"
  },
  {
    "label": "FrameDataIsIncomplete()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "FrameDataIsIncomplete()"
  },
  {
    "label": "EnableRawStats()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "EnableRawStats()"
  },
  {
    "label": "DisableRawStats()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "DisableRawStats()"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartThread()"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThread()"
  },
  {
    "label": "WaitForStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForStats()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} ; class FCycleCounter { enum { NamedEvent = 1<<0,TraceEvent = 1<<1,ThreadStatsEvent = 1<<2,} ; FName StatId ; uint8 EmittedEvent = 0 ; public : FORCEINLINE_STATS void)",
    "insertText": "Start(TStatId InStatId, EStatFlags InStatFlags, bool bAlways = false)"
  },
  {
    "label": "GetMinimalName()",
    "kind": "Method",
    "detail": "Function (FMinimalName StatMinimalName = InStatId .)",
    "insertText": "GetMinimalName(EMemoryOrder::Relaxed)"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_USES_ANSI_STRING_FOR_EXTERNAL_PROFILING)",
    "insertText": "BeginNamedEvent(FColor(0), InStatId.GetStatDescriptionANSI())"
  },
  {
    "label": "BeginNamedEvent()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "BeginNamedEvent(FColor(0), InStatId.GetStatDescriptionWIDE())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif EmittedEvent | = NamedEvent ; # if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(UE_TRACE_CHANNELEXPR_IS_ENABLED(CpuChannel))"
  },
  {
    "label": "MinimalNameToName()",
    "kind": "Method",
    "detail": "Function (FName StatName =)",
    "insertText": "MinimalNameToName(StatMinimalName)"
  },
  {
    "label": "OutputBeginDynamicEventWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEventWithId(StatName, InStatId.GetStatDescriptionWIDE())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EmittedEvent | = TraceEvent ; } # endif })",
    "insertText": "if((bAlways && FThreadStats::WillEverCollectData()) || FThreadStats::IsCollectingData())"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (StatId = StatName ;)",
    "insertText": "AddMessage(StatName, EStatOperation::CycleScopeStart)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (EmittedEvent | = ThreadStatsEvent ; } } FORCEINLINE_STATS void)",
    "insertText": "Start(TStatId InStatId, bool bAlways = false)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(InStatId, EStatFlags::None, bAlways)"
  },
  {
    "label": "StartTrace()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS void)",
    "insertText": "StartTrace(const FName Name)"
  },
  {
    "label": "OutputBeginDynamicEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEvent(Name)"
  },
  {
    "label": "StartTrace()",
    "kind": "Method",
    "detail": "Function (EmittedEvent | = TraceEvent ; } # endif } FORCEINLINE_STATS void)",
    "insertText": "StartTrace(const FName Name, const TCHAR* Desc)"
  },
  {
    "label": "OutputBeginDynamicEventWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginDynamicEventWithId(Name, Desc)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (EmittedEvent | = TraceEvent ; } # endif } FORCEINLINE_STATS void)",
    "insertText": "Stop()"
  },
  {
    "label": "EndNamedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNamedEvent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # if CPUPROFILERTRACE_ENABLED)",
    "insertText": "if(EmittedEvent & TraceEvent)"
  },
  {
    "label": "OutputEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndEvent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(EmittedEvent & ThreadStatsEvent)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessage(StatId, EStatOperation::CycleScopeEnd)"
  },
  {
    "label": "StopAndResetStatId()",
    "kind": "Method",
    "detail": "Function (} EmittedEvent = 0 ; } FORCEINLINE_STATS void)",
    "insertText": "StopAndResetStatId()"
  },
  {
    "label": "FSimpleScopeSecondsStat()",
    "kind": "Method",
    "detail": "Function (StatId = NAME_None ; } } ; class FSimpleScopeSecondsStat { public :)",
    "insertText": "FSimpleScopeSecondsStat(TStatId InStatId, double InScale=1.0) : StartTime(FPlatformTime::Seconds()) , StatId(InStatId) , Scale(InScale)"
  },
  {
    "label": "FSimpleScopeSecondsStat()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSimpleScopeSecondsStat()"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessage(StatId.GetName(), EStatOperation::Add, TotalTime)"
  },
  {
    "label": "AddThreadMetadata()",
    "kind": "Method",
    "detail": "Function (} private : double StartTime ; TStatId StatId ; double Scale ; } ; class FStartupMessages { class FStatsThread ; TArray64<FStatMessage> DelayedMessages ; FCriticalSection CriticalSection ; public : void)",
    "insertText": "AddThreadMetadata(const FName InThreadFName, uint32 InThreadID)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMetadata(FName InStatName, const TCHAR* InStatDesc, const char* InGroupName, const char* InGroupCategory, const TCHAR* InGroupDesc, bool bShouldClearEveryFrame, EStatDataType::Type InStatType, bool bCycleStat, bool bSortByName, FPlatformMemory::EMemoryCounterRegion InMemoryRegion = FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "IStatGroupEnableManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IStatGroupEnableManager()"
  },
  {
    "label": "GetHighPerformanceEnableForStat()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetHighPerformanceEnableForStat(FName StatShortName, const char* InGroup, const char* InCategory, bool bDefaultEnable, bool bShouldClearEveryFrame, EStatDataType::Type InStatType, TCHAR const* InDescription, bool bCycleStat, bool bSortByName, FPlatformMemory::EMemoryCounterRegion MemoryRegion = FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "SetHighPerformanceEnableForGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPerformanceEnableForGroup(FName Group, bool Enable)"
  },
  {
    "label": "SetHighPerformanceEnableForAllGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPerformanceEnableForAllGroups(bool Enable)"
  },
  {
    "label": "ResetHighPerformanceEnableForAllGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHighPerformanceEnableForAllGroups()"
  },
  {
    "label": "StatGroupEnableManagerCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatGroupEnableManagerCommand(FString const& Cmd)"
  },
  {
    "label": "UpdateMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMemoryUsage()"
  },
  {
    "label": "DoSetup()",
    "kind": "Method",
    "detail": "Function (} ; struct FThreadSafeStaticStatBase { protected : TAtomic<const TStatIdData*> HighPerformanceEnable ; const TStatIdData*)",
    "insertText": "DoSetup(const char* InStatName, const TCHAR* InStatDesc, const char* InGroupName, const char* InGroupCategory, const TCHAR* InGroupDesc, bool bDefaultEnable, bool bShouldClearEveryFrame, EStatDataType::Type InStatType, bool bCycleStat, bool bSortByName, FPlatformMemory::EMemoryCounterRegion InMemoryRegion)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} ; template<class TStatData,bool TCompiledIn> struct FThreadSafeStaticStatInner : public FThreadSafeStaticStatBase { FORCEINLINE_STATS TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "DoSetup()",
    "kind": "Method",
    "detail": "Function (LocalHighPerformanceEnable =)",
    "insertText": "DoSetup(TStatData::GetStatName(), TStatData::GetDescription(), TStatData::TGroup::GetGroupName(), TStatData::TGroup::GetGroupCategory(), TStatData::TGroup::GetDescription(), TStatData::TGroup::IsDefaultEnabled(), TStatData::IsClearEveryFrame(), TStatData::GetStatType(), TStatData::IsCycleStat(), TStatData::TGroup::GetSortByName(), TStatData::GetMemoryRegion())"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TStatId(LocalHighPerformanceEnable)"
  },
  {
    "label": "GetStatFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetStatFName()"
  },
  {
    "label": "FThreadSafeStaticStat()",
    "kind": "Method",
    "detail": "Function (} } ; template<class TStatData> struct FThreadSafeStaticStat : public FThreadSafeStaticStatInner<TStatData,TStatData::TGroup::CompileTimeEnable> {)",
    "insertText": "FThreadSafeStaticStat()"
  },
  {
    "label": "DECLARE_STAT_GROUP()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "DECLARE_STAT_GROUP(Description, StatName, StatCategory, InDefaultEnable, InCompileTimeEnable, InSortByName)"
  },
  {
    "label": "IsDefaultEnabled()",
    "kind": "Method",
    "detail": "Function (\\ return Description ; \\ } \\ bool)",
    "insertText": "IsDefaultEnabled()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(bool)"
  },
  {
    "label": "IsCompileTimeEnable()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool)",
    "insertText": "IsCompileTimeEnable()"
  },
  {
    "label": "DECLARE_STAT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; # define)",
    "insertText": "DECLARE_STAT(Description, StatName, GroupName, StatType, StatFlags, MemoryRegion)"
  },
  {
    "label": "GetStatName()",
    "kind": "Method",
    "detail": "Function (\\ typedef FStatGroup_ # # GroupName TGroup ; \\ const char*)",
    "insertText": "GetStatName()"
  },
  {
    "label": "GetStatType()",
    "kind": "Method",
    "detail": "Function (\\ return Description ; \\ } \\ EStatDataType::Type)",
    "insertText": "GetStatType()"
  },
  {
    "label": "IsClearEveryFrame()",
    "kind": "Method",
    "detail": "Function (\\ return StatType ; \\ } \\ bool)",
    "insertText": "IsClearEveryFrame()"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "EnumHasAnyFlags(GetFlags(), EStatFlags::ClearEveryFrame)"
  },
  {
    "label": "IsCycleStat()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool)",
    "insertText": "IsCycleStat()"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "EnumHasAnyFlags(GetFlags(), EStatFlags::CycleStat)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (\\ } \\ EStatFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "GetMemoryRegion()",
    "kind": "Method",
    "detail": "Function (\\ return StatFlags ; \\ } \\ FPlatformMemory::EMemoryCounterRegion)",
    "insertText": "GetMemoryRegion()"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (\\ return MemoryRegion ; \\ } \\ } ; # define)",
    "insertText": "GET_STATID(Stat) (StatPtr_##Stat.GetStatId()) #define GET_STATFNAME(Stat) (StatPtr_##Stat.GetStatFName()) #define GET_STATDESCRIPTION(Stat) (FStat_##Stat::GetDescription()) #define GET_STATISEVERYFRAME(Stat) (FStat_##Stat::IsClearEveryFrame()) #define GET_STATFLAGS(Stat) (FStat_##Stat::GetFlags()) #define STAT_GROUP_TO_FStatGroup(Group) FStatGroup_##Group #define DEFINE_STAT(Stat)"
  },
  {
    "label": "RETURN_QUICK_DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RETURN_QUICK_DECLARE_CYCLE_STAT(StatId,GroupId) \\ DECLARE_STAT(TEXT(#StatId),StatId,GroupId,EStatDataType::ST_int64, EStatFlags::ClearEveryFrame | EStatFlags::CycleStat, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) \\ return GET_STATID(StatId)"
  },
  {
    "label": "QUICK_USE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "QUICK_USE_CYCLE_STAT(StatId,GroupId) []()"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_CYCLE_STAT_WITH_FLAGS(CounterName,StatId,GroupId,StatFlags) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, (StatFlags) | EStatFlags::ClearEveryFrame | EStatFlags::CycleStat, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_FLOAT_COUNTER_STAT(CounterName,StatId,GroupId) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_double,EStatFlags::ClearEveryFrame, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_DWORD_COUNTER_STAT(CounterName,StatId,GroupId) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64,EStatFlags::ClearEveryFrame, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_FLOAT_ACCUMULATOR_STAT(CounterName,StatId,GroupId) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_double, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_DWORD_ACCUMULATOR_STAT(CounterName,StatId,GroupId) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_FNAME_STAT(CounterName,StatId,GroupId) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_FName, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_PTR_STAT(CounterName,StatId,GroupId)\\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_Ptr, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_MEMORY_STAT(CounterName,StatId,GroupId) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::None, FPlatformMemory::MCR_Physical)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_MEMORY_STAT_POOL(CounterName,StatId,GroupId,Pool) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::None, Pool)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(StatId) #define DECLARE_CYCLE_STAT_EXTERN(CounterName,StatId,GroupId, APIX) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::ClearEveryFrame | EStatFlags::CycleStat, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\ APIX)",
    "insertText": "DEFINE_STAT(StatId)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_WITH_FLAGS_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_CYCLE_STAT_WITH_FLAGS_EXTERN(CounterName,StatId,GroupId,StatFlags, APIX) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, (StatFlags) | EStatFlags::ClearEveryFrame | EStatFlags::CycleStat, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_double, EStatFlags::ClearEveryFrame, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::ClearEveryFrame, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_double, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_FNAME_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_FNAME_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_FName, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_PTR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_PTR_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_Ptr, EStatFlags::None, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(CounterName,StatId,GroupId, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::None, FPlatformMemory::MCR_Physical)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_POOL_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_MEMORY_STAT_POOL_EXTERN(CounterName,StatId,GroupId,Pool, API) \\ DECLARE_STAT(CounterName,StatId,GroupId,EStatDataType::ST_int64, EStatFlags::None, Pool)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_STATS_GROUP(GroupDesc, GroupId, GroupCat) \\ DECLARE_STAT_GROUP(GroupDesc, GroupId, GroupCat, true, true, false)"
  },
  {
    "label": "DECLARE_STATS_GROUP_SORTBYNAME()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_STATS_GROUP_SORTBYNAME(GroupDesc, GroupId, GroupCat) \\ DECLARE_STAT_GROUP(GroupDesc, GroupId, GroupCat, true, true, true)"
  },
  {
    "label": "DECLARE_STATS_GROUP_VERBOSE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_STATS_GROUP_VERBOSE(GroupDesc, GroupId, GroupCat) \\ DECLARE_STAT_GROUP(GroupDesc, GroupId, GroupCat, false, true, false)"
  },
  {
    "label": "DECLARE_STATS_GROUP_MAYBE_COMPILED_OUT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_STATS_GROUP_MAYBE_COMPILED_OUT(GroupDesc, GroupId, GroupCat, CompileIn) \\ DECLARE_STAT_GROUP(GroupDesc, GroupId, GroupCat, false, CompileIn, false)"
  },
  {
    "label": "DECLARE_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_SCOPE_CYCLE_COUNTER(CounterName,Stat,GroupId) \\ DECLARE_STAT(CounterName,Stat,GroupId,EStatDataType::ST_int64, EStatFlags::ClearEveryFrame | EStatFlags::CycleStat, FPlatformMemory::MCR_Invalid)"
  },
  {
    "label": "DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEFINE_STAT(Stat) \\ FScopeCycleCounter CycleCount_##Stat(GET_STATID(Stat), GET_STATFLAGS(Stat))"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(Stat) \\ DECLARE_SCOPE_CYCLE_COUNTER(TEXT(#Stat),Stat,STATGROUP_Quick) #define SCOPE_CYCLE_COUNTER(Stat) \\ FScopeCycleCounter CycleCount_##Stat(GET_STATID(Stat), GET_STATFLAGS(Stat))"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER_STATID()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_CYCLE_COUNTER_STATID(StatId) \\ FScopeCycleCounter CycleCount_FromStatId(StatId)"
  },
  {
    "label": "CONDITIONAL_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CONDITIONAL_SCOPE_CYCLE_COUNTER(Stat,bCondition) \\ FScopeCycleCounter CycleCount_##Stat(bCondition ? GET_STATID(Stat) : TStatId(), GET_STATFLAGS(Stat))"
  },
  {
    "label": "SCOPE_SECONDS_ACCUMULATOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_SECONDS_ACCUMULATOR(Stat) \\ FSimpleScopeSecondsStat SecondsAccum_##Stat(GET_STATID(Stat))"
  },
  {
    "label": "SCOPE_MS_ACCUMULATOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPE_MS_ACCUMULATOR(Stat) \\ FSimpleScopeSecondsStat SecondsAccum_##Stat(GET_STATID(Stat), 1000.0)"
  },
  {
    "label": "SET_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SET_CYCLE_COUNTER(Stat,Cycles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(FThreadStats::IsCollectingData() || !GET_STATISEVERYFRAME(Stat)) \\ FThreadStats::AddMessage(GET_STATFNAME(Stat), EStatOperation::Set, int64(Cycles), true)"
  },
  {
    "label": "INC_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "INC_DWORD_STAT(Stat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(FThreadStats::IsCollectingData() || !GET_STATISEVERYFRAME(Stat))"
  },
  {
    "label": "GET_STATFNAME()",
    "kind": "Method",
    "detail": "Function (\\ const FName StatName =)",
    "insertText": "GET_STATFNAME(Stat)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(StatName, EStatOperation::Add, int64(1))"
  },
  {
    "label": "TRACE_STAT_INCREMENT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_INCREMENT(StatName)"
  },
  {
    "label": "INC_FLOAT_STAT_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "INC_FLOAT_STAT_BY(Stat, Amount)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (\\ double AddAmount =)",
    "insertText": "double(Amount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(AddAmount != 0.0)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(StatName, EStatOperation::Add, AddAmount)"
  },
  {
    "label": "TRACE_STAT_ADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_ADD(StatName, AddAmount)"
  },
  {
    "label": "INC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "INC_DWORD_STAT_BY(Stat, Amount)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (\\ int64 AddAmount =)",
    "insertText": "int64(Amount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(AddAmount != 0)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "INC_MEMORY_STAT_BY(Stat, Amount)"
  },
  {
    "label": "DEC_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "DEC_DWORD_STAT(Stat)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(StatName, EStatOperation::Subtract, int64(1))"
  },
  {
    "label": "TRACE_STAT_DECREMENT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_DECREMENT(StatName)"
  },
  {
    "label": "DEC_FLOAT_STAT_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DEC_FLOAT_STAT_BY(Stat,Amount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(SubtractAmount != 0.0)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(StatName, EStatOperation::Subtract, SubtractAmount)"
  },
  {
    "label": "TRACE_STAT_ADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_ADD(StatName, -SubtractAmount)"
  },
  {
    "label": "DEC_DWORD_STAT_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "DEC_DWORD_STAT_BY(Stat,Amount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(SubtractAmount != 0)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "DEC_MEMORY_STAT_BY(Stat,Amount)"
  },
  {
    "label": "SET_MEMORY_STAT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "SET_MEMORY_STAT(Stat,Value)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (\\ int64 SetValue =)",
    "insertText": "int64(Value)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(StatName, EStatOperation::Set, SetValue)"
  },
  {
    "label": "TRACE_STAT_SET()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_SET(StatName, SetValue)"
  },
  {
    "label": "SET_DWORD_STAT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "SET_DWORD_STAT(Stat,Value)"
  },
  {
    "label": "SET_FLOAT_STAT()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "SET_FLOAT_STAT(Stat,Value)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (\\ double SetValue =)",
    "insertText": "double(Value)"
  },
  {
    "label": "STAT_ADD_CUSTOMMESSAGE_NAME()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "STAT_ADD_CUSTOMMESSAGE_NAME(Stat,Value)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(GET_STATFNAME(Stat), EStatOperation::SpecialMessageMarker, FName(Value))"
  },
  {
    "label": "STAT_ADD_CUSTOMMESSAGE_PTR()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "STAT_ADD_CUSTOMMESSAGE_PTR(Stat,Value)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(GET_STATFNAME(Stat), EStatOperation::SpecialMessageMarker, uint64(Value))"
  },
  {
    "label": "SET_CYCLE_COUNTER_FName()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SET_CYCLE_COUNTER_FName(Stat,Cycles)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(Stat, EStatOperation::Set, int64(Cycles), true)"
  },
  {
    "label": "INC_DWORD_STAT_FName()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "INC_DWORD_STAT_FName(Stat)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(Stat, EStatOperation::Add, int64(1))"
  },
  {
    "label": "TRACE_STAT_INCREMENT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_INCREMENT(Stat)"
  },
  {
    "label": "INC_FLOAT_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "INC_FLOAT_STAT_BY_FName(Stat, Amount)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(Stat, EStatOperation::Add, AddAmount)"
  },
  {
    "label": "TRACE_STAT_ADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_ADD(Stat, AddAmount)"
  },
  {
    "label": "INC_DWORD_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "INC_DWORD_STAT_BY_FName(Stat, Amount)"
  },
  {
    "label": "INC_DWORD_STAT_FNAME_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "INC_DWORD_STAT_FNAME_BY(Stat, Amount) INC_DWORD_STAT_BY_FName(Stat, Amount) #define INC_MEMORY_STAT_BY_FName(Stat, Amount)"
  },
  {
    "label": "DEC_DWORD_STAT_FName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DEC_DWORD_STAT_FName(Stat)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(Stat, EStatOperation::Subtract, int64(1))"
  },
  {
    "label": "TRACE_STAT_DECREMENT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_DECREMENT(Stat)"
  },
  {
    "label": "DEC_FLOAT_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEC_FLOAT_STAT_BY_FName(Stat,Amount)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(Stat, EStatOperation::Subtract, SubtractAmount)"
  },
  {
    "label": "TRACE_STAT_ADD()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_ADD(Stat, -SubtractAmount)"
  },
  {
    "label": "DEC_DWORD_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DEC_DWORD_STAT_BY_FName(Stat,Amount)"
  },
  {
    "label": "DEC_DWORD_STAT_FNAME_BY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "DEC_DWORD_STAT_FNAME_BY(Stat,Amount) DEC_DWORD_STAT_BY_FName(Stat,Amount) #define DEC_MEMORY_STAT_BY_FName(Stat,Amount)"
  },
  {
    "label": "SET_MEMORY_STAT_FName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "SET_MEMORY_STAT_FName(Stat,Value)"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AddMessage(Stat, EStatOperation::Set, SetValue)"
  },
  {
    "label": "TRACE_STAT_SET()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_STAT_SET(Stat, SetValue)"
  },
  {
    "label": "SET_DWORD_STAT_FName()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SET_DWORD_STAT_FName(Stat,Value)"
  },
  {
    "label": "SET_FLOAT_STAT_FName()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SET_FLOAT_STAT_FName(Stat,Value)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"AI\"),STATGROUP_AI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Anim\"),STATGROUP_Anim, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Async I/O\"),STATGROUP_AsyncIO, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Audio\"), STATGROUP_Audio, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Beam Particles\"),STATGROUP_BeamParticles, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"CPU Stalls\"), STATGROUP_CPUStalls, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Canvas\"),STATGROUP_Canvas, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Character\"), STATGROUP_Character, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Collision\"),STATGROUP_Collision, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"CollisionTags\"), STATGROUP_CollisionTags, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP_VERBOSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP_VERBOSE(TEXT(\"CollisionVerbose\"),STATGROUP_CollisionVerbose, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"D3D11RHI\"),STATGROUP_D3D11RHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"DDC\"),STATGROUP_DDC, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Default Stat Group\"),STATGROUP_Default, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Engine\"),STATGROUP_Engine, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"FPS Chart\"),STATGROUP_FPSChart, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"GPU\"), STATGROUP_GPU, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"GPU Particles\"),STATGROUP_GPUParticles, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Game\"),STATGROUP_Game, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"GPU Defrag\"), STATGROUP_GPUDEFRAG, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Gnm\"),STATGROUP_PS4RHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Init Views\"),STATGROUP_InitViews, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Landscape\"),STATGROUP_Landscape, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Light Rendering\"),STATGROUP_LightRendering, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"LoadTime\"), STATGROUP_LoadTime, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"LoadTimeClass\"), STATGROUP_LoadTimeClass, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"LoadTimeClassCount\"), STATGROUP_LoadTimeClassCount, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP_VERBOSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP_VERBOSE(TEXT(\"LoadTimeVerbose\"), STATGROUP_LoadTimeVerbose, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Media\"),STATGROUP_Media, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Memory Allocator\"),STATGROUP_MemoryAllocator, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Memory Platform\"),STATGROUP_MemoryPlatform, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Memory StaticMesh\"),STATGROUP_MemoryStaticMesh, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Memory\"),STATGROUP_Memory, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Mesh Particles\"),STATGROUP_MeshParticles, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Metal\"),STATGROUP_MetalRHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"AGX\"),STATGROUP_AGXRHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Morph\"),STATGROUP_MorphTarget, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Navigation\"),STATGROUP_Navigation, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Net\"),STATGROUP_Net, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Packet\"),STATGROUP_Packet, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Object\"),STATGROUP_Object, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP_VERBOSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP_VERBOSE(TEXT(\"ObjectVerbose\"),STATGROUP_ObjectVerbose, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"OpenGL RHI\"),STATGROUP_OpenGLRHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Pak File\"),STATGROUP_PakFile, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Particle Mem\"),STATGROUP_ParticleMem, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Particles\"),STATGROUP_Particles, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Physics\"),STATGROUP_Physics, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Platform\"), STATGROUP_Platform, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Profiler\"), STATGROUP_Profiler, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Quick\"), STATGROUP_Quick, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"RHI\"), STATGROUP_RHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"RDG\"), STATGROUP_RDG, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Render Thread\"),STATGROUP_RenderThreadProcessing, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Render Target Pool\"), STATGROUP_RenderTargetPool, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Render Scaling\"), STATGROUP_RenderScaling, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Scene Memory\"),STATGROUP_SceneMemory, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Scene Rendering\"),STATGROUP_SceneRendering, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Scene Update\"),STATGROUP_SceneUpdate, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Server CPU\"),STATGROUP_ServerCPU, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"MapBuildData\"),STATGROUP_MapBuildData, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Shader Compiling\"),STATGROUP_ShaderCompiling, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Shader Compression\"),STATGROUP_Shaders, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Shadow Rendering\"),STATGROUP_ShadowRendering, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Stat System\"),STATGROUP_StatSystem, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP_SORTBYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP_SORTBYNAME(TEXT(\"Streaming Overview\"),STATGROUP_StreamingOverview, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP_SORTBYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP_SORTBYNAME(TEXT(\"Streaming Details\"),STATGROUP_StreamingDetails, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP_SORTBYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP_SORTBYNAME(TEXT(\"Streaming\"),STATGROUP_Streaming, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Target Platform\"),STATGROUP_TargetPlatform, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Text\"),STATGROUP_Text, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"ThreadPool Async Tasks\"),STATGROUP_ThreadPoolAsyncTasks, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Threading\"),STATGROUP_Threading, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Threads\"),STATGROUP_Threads, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Tickables\"),STATGROUP_Tickables, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Trail Particles\"),STATGROUP_TrailParticles, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"UI\"),STATGROUP_UI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"UObjects\"),STATGROUP_UObjects, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"User\"),STATGROUP_User, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"FrameTime\"),STAT_FrameTime,STATGROUP_Engine, CORE_API)"
  },
  {
    "label": "DECLARE_FNAME_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FNAME_STAT_EXTERN(TEXT(\"NamedMarker\"),STAT_NamedMarker,STATGROUP_StatSystem, CORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_COUNTER_STAT_EXTERN(TEXT(\"Seconds Per Cycle\"),STAT_SecondsPerCycle,STATGROUP_Engine, CORE_API)"
  },
  {
    "label": "UE_TRACE_CHANNELEXPR_IS_ENABLED()",
    "kind": "Method",
    "detail": "Function (# if STATS&& CPUPROFILERTRACE_ENABLED return)",
    "insertText": "UE_TRACE_CHANNELEXPR_IS_ENABLED(CpuChannel) || FThreadStats::IsCollectingData()"
  }
]