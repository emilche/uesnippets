[
  {
    "label": "ShaderNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderNode"
  },
  {
    "label": "ShaderPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderPort"
  },
  {
    "label": "ShaderInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderInput"
  },
  {
    "label": "ShaderOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderOutput"
  },
  {
    "label": "ShaderGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGraph"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "Classification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Classification"
  },
  {
    "label": "ScopeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopeInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ShaderMetadata()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_SHADERNODE_H # define MATERIALX_SHADERNODE_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / ShaderNodeImpl . h> # include<MaterialXGenShader / TypeDesc . h> # include<MaterialXGenShader / GenUserData . h> # include<MaterialXCore / Node . h> MATERIALX_NAMESPACE_BEGIN class ShaderNode ; class ShaderPort ; class ShaderInput ; class ShaderOutput ; class ShaderGraph ; using ShaderPortPtr = shared_ptr<class ShaderPort> ; using ShaderInputPtr = shared_ptr<class ShaderInput> ; using ShaderOutputPtr = shared_ptr<class ShaderOutput> ; using ShaderNodePtr = shared_ptr<class ShaderNode> ; using ShaderInputVec = vector<ShaderInput*> ; struct ShaderMetadata { string name ; const TypeDesc* type ; ValuePtr value ;)",
    "insertText": "ShaderMetadata(const string& n, const TypeDesc* t, ValuePtr v = nullptr) : name(n), type(t), value(v)"
  },
  {
    "label": "addMetadata()",
    "kind": "Method",
    "detail": "Function (} } ; using ShaderMetadataVec = vector<ShaderMetadata> ; using ShaderMetadataVecPtr = shared_ptr<ShaderMetadataVec> ; class ShaderMetadataRegistry : public GenUserData { public : const string USER_DATA_NAME ; void)",
    "insertText": "addMetadata(const string& name, const TypeDesc* type, ValuePtr value = nullptr)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (_entryIndex [ name ] = _entries .)",
    "insertText": "size()"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (_entries .)",
    "insertText": "emplace_back(name, type, value)"
  },
  {
    "label": "findMetadata()",
    "kind": "Method",
    "detail": "Function (} } const ShaderMetadata*)",
    "insertText": "findMetadata(const string& name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = _entryIndex .)",
    "insertText": "find(name)"
  },
  {
    "label": "getAllMetadata()",
    "kind": "Method",
    "detail": "Function (} const ShaderMetadataVec&)",
    "insertText": "getAllMetadata()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (_entryIndex .)",
    "insertText": "clear()"
  },
  {
    "label": "ShaderPort()",
    "kind": "Method",
    "detail": "Function (} protected : vector<ShaderMetadata> _entries ; std::unordered_map<string,size_t> _entryIndex ; } ; using ShaderMetadataRegistryPtr = shared_ptr<ShaderMetadataRegistry> ; class ShaderPortFlag { public : const uint32_t UNIFORM = 1 u<<0 ; const uint32_t EMITTED = 1 u<<1 ; const uint32_t BIND_INPUT = 1 u<<2 ; } ; class ShaderPort : public std::enable_shared_from_this<ShaderPort> { public :)",
    "insertText": "ShaderPort(ShaderNode* node, const TypeDesc* type, const string& name, ValuePtr value = nullptr)"
  },
  {
    "label": "getSelf()",
    "kind": "Method",
    "detail": "Function (ShaderPortPtr)",
    "insertText": "getSelf()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} ShaderNode*)",
    "insertText": "getNode()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (_type = type ; } const TypeDesc*)",
    "insertText": "getType()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (_name = name ; } const string&)",
    "insertText": "getName()"
  },
  {
    "label": "setVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVariable(const string& name)"
  },
  {
    "label": "getVariable()",
    "kind": "Method",
    "detail": "Function (_variable = name ; } const string&)",
    "insertText": "getVariable()"
  },
  {
    "label": "getSemantic()",
    "kind": "Method",
    "detail": "Function (_semantic = semantic ; } const string&)",
    "insertText": "getSemantic()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (_value = value ; } ValuePtr)",
    "insertText": "getValue()"
  },
  {
    "label": "getColorSpace()",
    "kind": "Method",
    "detail": "Function (_colorspace = colorspace ; } const string&)",
    "insertText": "getColorSpace()"
  },
  {
    "label": "getUnit()",
    "kind": "Method",
    "detail": "Function (_unit = unit ; } const string&)",
    "insertText": "getUnit()"
  },
  {
    "label": "getGeomProp()",
    "kind": "Method",
    "detail": "Function (_geomprop = geomprop ; } const string&)",
    "insertText": "getGeomProp()"
  },
  {
    "label": "getPath()",
    "kind": "Method",
    "detail": "Function (_path = path ; } const string&)",
    "insertText": "getPath()"
  },
  {
    "label": "getFlags()",
    "kind": "Method",
    "detail": "Function (_flags = flags ; } uint32_t)",
    "insertText": "getFlags()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (_flags =)",
    "insertText": "value(_flags | flag) : (_flags & ~flag)"
  },
  {
    "label": "getFlag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getFlag(uint32_t flag)"
  },
  {
    "label": "setUniform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUniform()"
  },
  {
    "label": "isUniform()",
    "kind": "Method",
    "detail": "Function (_flags | = ShaderPortFlag::UNIFORM ; } bool)",
    "insertText": "isUniform()"
  },
  {
    "label": "setEmitted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setEmitted()"
  },
  {
    "label": "isEmitted()",
    "kind": "Method",
    "detail": "Function (_flags | = ShaderPortFlag::EMITTED ; } bool)",
    "insertText": "isEmitted()"
  },
  {
    "label": "setBindInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBindInput()"
  },
  {
    "label": "isBindInput()",
    "kind": "Method",
    "detail": "Function (_flags | = ShaderPortFlag::BIND_INPUT ; } bool)",
    "insertText": "isBindInput()"
  },
  {
    "label": "setMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setMetadata(ShaderMetadataVecPtr metadata)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (_metadata = metadata ; } ShaderMetadataVecPtr)",
    "insertText": "getMetadata()"
  },
  {
    "label": "getConnection()",
    "kind": "Method",
    "detail": "Function (ShaderOutput*)",
    "insertText": "getConnection()"
  },
  {
    "label": "breakConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "breakConnection()"
  },
  {
    "label": "setChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setChannels(const string& channels)"
  },
  {
    "label": "getChannels()",
    "kind": "Method",
    "detail": "Function (_channels = channels ; } const string&)",
    "insertText": "getChannels()"
  },
  {
    "label": "ShaderOutput()",
    "kind": "Method",
    "detail": "Function (protected : ShaderOutput* _connection ; string _channels ; class ShaderOutput ; } ; class ShaderOutput : public ShaderPort { public :)",
    "insertText": "ShaderOutput(ShaderNode* node, const TypeDesc* type, const string& name)"
  },
  {
    "label": "getConnections()",
    "kind": "Method",
    "detail": "Function (const ShaderInputVec&)",
    "insertText": "getConnections()"
  },
  {
    "label": "breakConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "breakConnection(ShaderInput* dst)"
  },
  {
    "label": "breakConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "breakConnections()"
  },
  {
    "label": "ShaderNode()",
    "kind": "Method",
    "detail": "Function (protected : ShaderInputVec _connections ; class ShaderInput ; } ; class ShaderNode { public : ~)",
    "insertText": "ShaderNode()"
  },
  {
    "label": "ScopeInfo()",
    "kind": "Method",
    "detail": "Function (} class Classification { public : const uint32_t TEXTURE = 1<<0 ; const uint32_t CLOSURE = 1<<1 ; const uint32_t SHADER = 1<<2 ; const uint32_t MATERIAL = 1<<3 ; const uint32_t FILETEXTURE = 1<<4 ; const uint32_t CONDITIONAL = 1<<5 ; const uint32_t CONSTANT = 1<<6 ; const uint32_t BSDF = 1<<7 ; const uint32_t BSDF_R = 1<<8 ; const uint32_t BSDF_T = 1<<9 ; const uint32_t EDF = 1<<1 0 ; const uint32_t VDF = 1<<1 1 ; const uint32_t LAYER = 1<<1 2 ; const uint32_t THINFILM = 1<<1 3 ; const uint32_t SURFACE = 1<<1 4 ; const uint32_t VOLUME = 1<<1 5 ; const uint32_t LIGHT = 1<<1 6 ; const uint32_t UNLIT = 1<<1 7 ; const uint32_t IFELSE = 1<<1 8 ; const uint32_t SWITCH = 1<<1 9 ; const uint32_t SAMPLE2D = 1<<2 0 ; const uint32_t SAMPLE3D = 1<<2 1 ; } ; struct ScopeInfo { enum Type { UNKNOWN,GLOBAL,SINGLE,MULTIPLE } ;)",
    "insertText": "ScopeInfo() : type(UNKNOWN), conditionalNode(nullptr), conditionBitmask(0), fullConditionMask(0)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "merge(const ScopeInfo& fromScope)"
  },
  {
    "label": "adjustAtConditionalInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adjustAtConditionalInput(ShaderNode* condNode, int branch, uint32_t fullMask)"
  },
  {
    "label": "usedByBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "usedByBranch(int branchIndex)"
  },
  {
    "label": "ShaderNode()",
    "kind": "Method",
    "detail": "Function (} Type type ; ShaderNode* conditionalNode ; uint32_t conditionBitmask ; uint32_t fullConditionMask ; } ; const ShaderNodePtr NONE ; const string CONSTANT ; const string IMAGE ; const string COMPARE ; const string SWITCH ; const string SURFACESHADER ; const string SCATTER_MODE ; const string BSDF_R ; const string BSDF_T ; const string TRANSFORM_POINT ; const string TRANSFORM_VECTOR ; const string TRANSFORM_NORMAL ; const string TEXTURE2D_GROUPNAME ; const string TEXTURE3D_GROUPNAME ; const string PROCEDURAL2D_GROUPNAME ; const string PROCEDURAL3D_GROUPNAME ; public :)",
    "insertText": "ShaderNode(const ShaderGraph* parent, const string& name)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderNodePtr)",
    "insertText": "create(const ShaderGraph* parent, const string& name, const NodeDef& nodeDef, GenContext& context)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderNodePtr)",
    "insertText": "create(const ShaderGraph* parent, const string& name, ShaderNodeImplPtr impl, unsigned int classification = Classification::TEXTURE)"
  },
  {
    "label": "isAGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAGraph()"
  },
  {
    "label": "getClassification()",
    "kind": "Method",
    "detail": "Function (_classification = c ; } uint32_t)",
    "insertText": "getClassification()"
  },
  {
    "label": "hasClassification()",
    "kind": "Method",
    "detail": "Function (_classification | = c ; } bool)",
    "insertText": "hasClassification(uint32_t c)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const Node& node, const NodeDef& nodeDef, GenContext& context)"
  },
  {
    "label": "addInput()",
    "kind": "Method",
    "detail": "Function (ShaderInput*)",
    "insertText": "addInput(const string& name, const TypeDesc* type)"
  },
  {
    "label": "addOutput()",
    "kind": "Method",
    "detail": "Function (ShaderOutput*)",
    "insertText": "addOutput(const string& name, const TypeDesc* type)"
  },
  {
    "label": "numInputs()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "numInputs()"
  },
  {
    "label": "numOutputs()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "numOutputs()"
  },
  {
    "label": "getInput()",
    "kind": "Method",
    "detail": "Function (} ShaderInput*)",
    "insertText": "getInput(size_t index)"
  },
  {
    "label": "getOutput()",
    "kind": "Method",
    "detail": "Function (ShaderOutput*)",
    "insertText": "getOutput(const string& name)"
  },
  {
    "label": "getInput()",
    "kind": "Method",
    "detail": "Function (const ShaderInput*)",
    "insertText": "getInput(const string& name)"
  },
  {
    "label": "getInputs()",
    "kind": "Method",
    "detail": "Function (const vector<ShaderInput*>&)",
    "insertText": "getInputs()"
  },
  {
    "label": "isEditable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEditable(const ShaderGraphInputSocket& input)"
  },
  {
    "label": "createMetadata()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "createMetadata(const NodeDef& nodeDef, GenContext& context)"
  }
]