[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "UBoxComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBoxComponent"
  },
  {
    "label": "FCollisionShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionShape"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / ShapeComponent . h \" # include \" ShowFlags . h \" # include \" BoxComponent . generated . h \" class FPrimitiveSceneProxy ;)",
    "insertText": "UCLASS(ClassGroup=\"Collision\", hidecategories=(Object,LOD,Lighting,TextureStreaming), editinlinenew, meta=(DisplayName=\"Box Collision\", BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY(EditAnywhere, BlueprintReadOnly, export, Category=Shape)"
  },
  {
    "label": "IsZeroExtent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZeroExtent()"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "GetCollisionShape()",
    "kind": "Method",
    "detail": "Function (struct FCollisionShape)",
    "insertText": "GetCollisionShape(float Inflation = 0.0f)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "UpdateBodySetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBodySetup()"
  },
  {
    "label": "GetShowFlags()",
    "kind": "Method",
    "detail": "Function (BoxExtent = InBoxExtent ; } # if WITH_EDITOR FEngineShowFlags)",
    "insertText": "GetShowFlags()"
  },
  {
    "label": "GetScaledBoxExtent()",
    "kind": "Method",
    "detail": "Function (# endif } ; FVector)",
    "insertText": "GetScaledBoxExtent()"
  },
  {
    "label": "GetUnscaledBoxExtent()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetUnscaledBoxExtent()"
  }
]