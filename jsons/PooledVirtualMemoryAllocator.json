[
  {
    "label": "FPooledVirtualMemoryAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPooledVirtualMemoryAllocator"
  },
  {
    "label": "FPoolDescriptorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolDescriptorBase"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "Limits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Limits"
  },
  {
    "label": "FPooledVirtualMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Allocators / CachedOSPageAllocator . h \" struct FPooledVirtualMemoryAllocator {)",
    "insertText": "FPooledVirtualMemoryAllocator()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(SIZE_T Size, uint32 AllocationHint = 0, FCriticalSection* Mutex = nullptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Ptr, SIZE_T Size, FCriticalSection* Mutex = nullptr, bool ThreadIsTimeCritical = false)"
  },
  {
    "label": "FreeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeAll(FCriticalSection* Mutex = nullptr)"
  },
  {
    "label": "GetCachedFreeTotal()",
    "kind": "Method",
    "detail": "Function (struct FPoolDescriptorBase { FPoolDescriptorBase* Next ; SIZE_T VMSizeDivVirtualSizeAlignment ; } ; uint64)",
    "insertText": "GetCachedFreeTotal()"
  },
  {
    "label": "GetCachedImmediatelyFreeable()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCachedImmediatelyFreeable()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Refresh()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "GetAllocationSizeClass()",
    "kind": "Method",
    "detail": "Function (private : enum Limits { NumAllocationSizeClasses = 6 4,MaxAllocationSizeToPool = NumAllocationSizeClasses* 6 5 5 3 6,MaxOSAllocCacheSize = 6 4* 1 0 2 4* 1 0 2 4,MaxOSAllocsCached = 6 4 } ; int32)",
    "insertText": "GetAllocationSizeClass(SIZE_T Size)"
  },
  {
    "label": "CalculateAllocationSizeFromClass()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "CalculateAllocationSizeFromClass(int32 Class)"
  },
  {
    "label": "DecideOnTheNextPoolSize()",
    "kind": "Method",
    "detail": "Function (} int32 NextPoolSize [ Limits::NumAllocationSizeClasses ] ; FPoolDescriptorBase* ClassesListHeads [ Limits::NumAllocationSizeClasses ] ; FCriticalSection ClassesLocks [ Limits::NumAllocationSizeClasses ] ; void)",
    "insertText": "DecideOnTheNextPoolSize(int32 SizeClass, bool bGrowing)"
  },
  {
    "label": "CreatePool()",
    "kind": "Method",
    "detail": "Function (FPoolDescriptorBase*)",
    "insertText": "CreatePool(SIZE_T AllocationSize, int32 NumPooledAllocations)"
  },
  {
    "label": "DestroyPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPool(FPoolDescriptorBase* Pool)"
  }
]