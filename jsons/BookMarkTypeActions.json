[
  {
    "label": "FBookMarkTypeActions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBookMarkTypeActions"
  },
  {
    "label": "UBookmarkBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBookmarkBase"
  },
  {
    "label": "FBookmarkBaseJumpToSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBookmarkBaseJumpToSettings"
  },
  {
    "label": "GetBookmarkClass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Bookmarks / IBookmarkTypeActions . h \" # include \" Editor . h \" # include \" Editor / EditorEngine . h \" # include \" Engine / BookMark . h \" # include \" Engine / LevelStreaming . h \" # include \" Engine / World . h \" # include \" LevelEditorViewport . h \" class FBookMarkTypeActions : public IBookmarkTypeActions { public : TSubclassOf<class UBookmarkBase>)",
    "insertText": "GetBookmarkClass()"
  },
  {
    "label": "InitFromViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFromViewport(UBookmarkBase* InBookmark, FEditorViewportClient& InViewportClient)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (Bookmark ->)",
    "insertText": "Modify()"
  },
  {
    "label": "Rotation()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "Rotation(0, 0, 0)"
  },
  {
    "label": "GetViewRotation()",
    "kind": "Method",
    "detail": "Function (Rotation = InViewportClient .)",
    "insertText": "GetViewRotation()"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (} Bookmark -> Location = InViewportClient .)",
    "insertText": "GetViewLocation()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Bookmark -> Rotation = Rotation ; Bookmark -> HiddenLevels .)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Bookmark -> HiddenLevels .)",
    "insertText": "Add(StreamingLevel->GetFullName())"
  },
  {
    "label": "JumpToBookmark()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "JumpToBookmark(UBookmarkBase* InBookmark, const TSharedPtr<struct FBookmarkBaseJumpToSettings> InSettings, FEditorViewportClient& InViewportClient)"
  },
  {
    "label": "ApplyBookmarkToViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBookmarkToViewportClient(Bookmark, LevelVC)"
  },
  {
    "label": "ApplyBookmarkToViewportClient()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "ApplyBookmarkToViewportClient(UBookMark* InBookmark, FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (InViewportClient ->)",
    "insertText": "SetViewLocation(InBookmark->Location)"
  },
  {
    "label": "SetViewRotation()",
    "kind": "Method",
    "detail": "Function (InViewportClient ->)",
    "insertText": "SetViewRotation(InBookmark->Rotation)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} InViewportClient ->)",
    "insertText": "Invalidate()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (FEditorDelegates::OnEditorCameraMoved .)",
    "insertText": "Broadcast(InBookmark->Location, InBookmark->Rotation, InViewportClient->ViewportType, InViewportClient->ViewIndex)"
  }
]