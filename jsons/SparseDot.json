[
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_DOT_H # define EIGEN_SPARSE_DOT_H namespace Eigen { template<Derived> template<OtherDerived> internal::traits<Derived>::Scalar SparseMatrixBase<Derived)",
    "insertText": "dot(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived) EIGEN_STATIC_ASSERT_SAME_VECTOR_SIZE(Derived,OtherDerived) EIGEN_STATIC_ASSERT((internal::is_same<Scalar, typename OtherDerived::Scalar>::value), YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY) eigen_assert(size() == other.size())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(other.size()>0 && \"you are using a non initialized vector\")"
  },
  {
    "label": "thisEval()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<Derived>)",
    "insertText": "thisEval(derived())"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<Derived>::InnerIterator)",
    "insertText": "i(thisEval, 0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "res(0)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (res + =)",
    "insertText": "conj(i.value()) * other.coeff(i.index())"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (+ + i ; } return res ; } template<Derived> template<OtherDerived> internal::traits<Derived>::Scalar SparseMatrixBase<Derived)",
    "insertText": "dot(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "otherEval()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<OtherDerived>)",
    "insertText": "otherEval(other.derived())"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (internal::evaluator<OtherDerived>::InnerIterator)",
    "insertText": "j(otherEval, 0)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (res + =)",
    "insertText": "conj(i.value()) * j.value()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + i ; + + j ; } else)",
    "insertText": "if(i.index()<j.index())"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (} template<Derived> NumTraits<internal::traits<Derived>::Scalar>::Real SparseMatrixBase<Derived)",
    "insertText": "norm()"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; return)",
    "insertText": "sqrt(squaredNorm())"
  },
  {
    "label": "blueNorm()",
    "kind": "Method",
    "detail": "Function (} template<Derived> NumTraits<internal::traits<Derived>::Scalar>::Real SparseMatrixBase<Derived)",
    "insertText": "blueNorm()"
  }
]