[
  {
    "label": "stack_st_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stack_st_"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_SAFESTACK_H # define HEADER_SAFESTACK_H # include<openssl / stack . h> # include<openssl / e_os2 . h> # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "STACK_OF(type) struct stack_st_##type # define SKM_DEFINE_STACK_OF(t1, t2, t3) \\ STACK_OF(t1)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (\\ typedef)",
    "insertText": "int(*sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (\\ typedef)",
    "insertText": "void(*sk_##t1##_freefunc)(t3 *a)"
  },
  {
    "label": "t3()",
    "kind": "Method",
    "detail": "Function (\\ typedef)",
    "insertText": "t3(*sk_##t1##_copyfunc)(const t3 *a)"
  },
  {
    "label": "_num()",
    "kind": "Method",
    "detail": "Function (\\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_num(const STACK_OF(t1) *sk)"
  },
  {
    "label": "OPENSSL_sk_num()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_num((const OPENSSL_STACK *)sk)"
  },
  {
    "label": "_value()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline t2* sk_ # # t1 # #)",
    "insertText": "_value(const STACK_OF(t1) *sk, int idx)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(t2 *)OPENSSL_sk_value((const OPENSSL_STACK *)sk, idx)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline)",
    "insertText": "STACK_OF(t1) *sk_##t1##_new(sk_##t1##_compfunc compare)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(STACK_OF(t1) *)OPENSSL_sk_new((OPENSSL_sk_compfunc)compare)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline)",
    "insertText": "STACK_OF(t1) *sk_##t1##_new_null(void)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(STACK_OF(t1) *)OPENSSL_sk_new_null()"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline)",
    "insertText": "STACK_OF(t1) *sk_##t1##_new_reserve(sk_##t1##_compfunc compare, int n)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(STACK_OF(t1) *)OPENSSL_sk_new_reserve((OPENSSL_sk_compfunc)compare, n)"
  },
  {
    "label": "_reserve()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_reserve(STACK_OF(t1) *sk, int n)"
  },
  {
    "label": "OPENSSL_sk_reserve()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_reserve((OPENSSL_STACK *)sk, n)"
  },
  {
    "label": "_free()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline void sk_ # # t1 # #)",
    "insertText": "_free(STACK_OF(t1) *sk)"
  },
  {
    "label": "OPENSSL_sk_free()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OPENSSL_sk_free((OPENSSL_STACK *)sk)"
  },
  {
    "label": "_zero()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline void sk_ # # t1 # #)",
    "insertText": "_zero(STACK_OF(t1) *sk)"
  },
  {
    "label": "OPENSSL_sk_zero()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OPENSSL_sk_zero((OPENSSL_STACK *)sk)"
  },
  {
    "label": "_delete()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline t2* sk_ # # t1 # #)",
    "insertText": "_delete(STACK_OF(t1) *sk, int i)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(t2 *)OPENSSL_sk_delete((OPENSSL_STACK *)sk, i)"
  },
  {
    "label": "_delete_ptr()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline t2* sk_ # # t1 # #)",
    "insertText": "_delete_ptr(STACK_OF(t1) *sk, t2 *ptr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(t2 *)OPENSSL_sk_delete_ptr((OPENSSL_STACK *)sk, \\ (const void *)ptr)"
  },
  {
    "label": "_push()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_push(STACK_OF(t1) *sk, t2 *ptr)"
  },
  {
    "label": "OPENSSL_sk_push()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_push((OPENSSL_STACK *)sk, (const void *)ptr)"
  },
  {
    "label": "_unshift()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_unshift(STACK_OF(t1) *sk, t2 *ptr)"
  },
  {
    "label": "OPENSSL_sk_unshift()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_unshift((OPENSSL_STACK *)sk, (const void *)ptr)"
  },
  {
    "label": "_pop()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline t2* sk_ # # t1 # #)",
    "insertText": "_pop(STACK_OF(t1) *sk)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(t2 *)OPENSSL_sk_pop((OPENSSL_STACK *)sk)"
  },
  {
    "label": "_shift()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline t2* sk_ # # t1 # #)",
    "insertText": "_shift(STACK_OF(t1) *sk)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(t2 *)OPENSSL_sk_shift((OPENSSL_STACK *)sk)"
  },
  {
    "label": "_pop_free()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline void sk_ # # t1 # #)",
    "insertText": "_pop_free(STACK_OF(t1) *sk, sk_##t1##_freefunc freefunc)"
  },
  {
    "label": "OPENSSL_sk_pop_free()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OPENSSL_sk_pop_free((OPENSSL_STACK *)sk, (OPENSSL_sk_freefunc)freefunc)"
  },
  {
    "label": "_insert()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_insert(STACK_OF(t1) *sk, t2 *ptr, int idx)"
  },
  {
    "label": "OPENSSL_sk_insert()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_insert((OPENSSL_STACK *)sk, (const void *)ptr, idx)"
  },
  {
    "label": "_set()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline t2* sk_ # # t1 # #)",
    "insertText": "_set(STACK_OF(t1) *sk, int idx, t2 *ptr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(t2 *)OPENSSL_sk_set((OPENSSL_STACK *)sk, idx, (const void *)ptr)"
  },
  {
    "label": "_find()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_find(STACK_OF(t1) *sk, t2 *ptr)"
  },
  {
    "label": "OPENSSL_sk_find()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_find((OPENSSL_STACK *)sk, (const void *)ptr)"
  },
  {
    "label": "_find_ex()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_find_ex(STACK_OF(t1) *sk, t2 *ptr)"
  },
  {
    "label": "OPENSSL_sk_find_ex()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_find_ex((OPENSSL_STACK *)sk, (const void *)ptr)"
  },
  {
    "label": "_sort()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline void sk_ # # t1 # #)",
    "insertText": "_sort(STACK_OF(t1) *sk)"
  },
  {
    "label": "OPENSSL_sk_sort()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OPENSSL_sk_sort((OPENSSL_STACK *)sk)"
  },
  {
    "label": "_is_sorted()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline int sk_ # # t1 # #)",
    "insertText": "_is_sorted(const STACK_OF(t1) *sk)"
  },
  {
    "label": "OPENSSL_sk_is_sorted()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "OPENSSL_sk_is_sorted((const OPENSSL_STACK *)sk)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline)",
    "insertText": "STACK_OF(t1) * sk_##t1##_dup(const STACK_OF(t1) *sk)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(STACK_OF(t1) *)OPENSSL_sk_dup((const OPENSSL_STACK *)sk)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline)",
    "insertText": "STACK_OF(t1) *sk_##t1##_deep_copy(const STACK_OF(t1) *sk, \\ sk_##t1##_copyfunc copyfunc, \\ sk_##t1##_freefunc freefunc)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(STACK_OF(t1) *)OPENSSL_sk_deep_copy((const OPENSSL_STACK *)sk, \\ (OPENSSL_sk_copyfunc)copyfunc, \\ (OPENSSL_sk_freefunc)freefunc)"
  },
  {
    "label": "_set_cmp_func()",
    "kind": "Method",
    "detail": "Function (\\ } \\ ossl_unused ossl_inline sk_ # # t1 # # _compfunc sk_ # # t1 # #)",
    "insertText": "_set_cmp_func(STACK_OF(t1) *sk, sk_##t1##_compfunc compare)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(sk_##t1##_compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK *)sk, (OPENSSL_sk_compfunc)compare)"
  },
  {
    "label": "DEFINE_SPECIAL_STACK_OF()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_SPECIAL_STACK_OF(t1, t2) SKM_DEFINE_STACK_OF(t1, t2, t2) # define DEFINE_STACK_OF(t) SKM_DEFINE_STACK_OF(t, t, t) # define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2) \\ SKM_DEFINE_STACK_OF(t1, const t2, t2) # define DEFINE_STACK_OF_CONST(t) SKM_DEFINE_STACK_OF(t, const t, t)"
  },
  {
    "label": "DEFINE_SPECIAL_STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef const char* OPENSSL_CSTRING ;)",
    "insertText": "DEFINE_SPECIAL_STACK_OF(OPENSSL_STRING, char) DEFINE_SPECIAL_STACK_OF_CONST(OPENSSL_CSTRING, char)"
  }
]