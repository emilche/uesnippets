[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlowTask"
  },
  {
    "label": "FMeshMaterialShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshMaterialShaderPermutationParameters"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EDebugViewShaderMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDebugViewShaderMode"
  },
  {
    "label": "WITH_DEBUG_VIEW_MODES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # define)",
    "insertText": "WITH_DEBUG_VIEW_MODES(WITH_EDITOR || !(UE_BUILD_SHIPPING || UE_BUILD_TEST))"
  },
  {
    "label": "DebugViewShaderModeToString()",
    "kind": "Method",
    "detail": "Function (struct FSlowTask ; struct FMeshMaterialShaderPermutationParameters ; enum EShaderPlatform : uint16 ; namespace ERHIFeatureLevel { enum Type : int ; } namespace EMaterialQualityLevel { enum Type : uint8 ; } enum EDebugViewShaderMode { DVSM_None,DVSM_ShaderComplexity,DVSM_ShaderComplexityContainedQuadOverhead,DVSM_ShaderComplexityBleedingQuadOverhead,DVSM_QuadComplexity,DVSM_PrimitiveDistanceAccuracy,DVSM_MeshUVDensityAccuracy,DVSM_MaterialTextureScaleAccuracy,DVSM_OutputMaterialTextureScales,DVSM_RequiredTextureResolution,DVSM_VirtualTexturePendingMips,DVSM_LODColoration,DVSM_VisualizeGPUSkinCache,DVSM_LWCComplexity,DVSM_MAX } ; const TCHAR*)",
    "insertText": "DebugViewShaderModeToString(EDebugViewShaderMode InShaderMode)"
  },
  {
    "label": "AllowDebugViewVSDSHS()",
    "kind": "Method",
    "detail": "Function (# if WITH_DEBUG_VIEW_MODES bool)",
    "insertText": "AllowDebugViewVSDSHS(EShaderPlatform Platform)"
  },
  {
    "label": "AllowDebugViewShaderMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowDebugViewShaderMode(EDebugViewShaderMode ShaderMode, EShaderPlatform Platform, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "ShouldCompileDebugViewModeShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileDebugViewModeShader(const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "GetUsedMaterialsInWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUsedMaterialsInWorld(UWorld* InWorld, OUT TSet<UMaterialInterface*>& OutMaterials, FSlowTask* Task)"
  },
  {
    "label": "CompileDebugViewModeShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompileDebugViewModeShaders(EDebugViewShaderMode Mode, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, TSet<UMaterialInterface*>& Materials, FSlowTask* ProgressTask)"
  },
  {
    "label": "WaitForShaderCompilation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForShaderCompilation(const FText& Message, FSlowTask* ProgressTask)"
  }
]