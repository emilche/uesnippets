[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Notifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Notifier"
  },
  {
    "label": "Notifier()",
    "kind": "Method",
    "detail": "Function (# ifndef API_NOTIFIER_H_ # define API_NOTIFIER_H_ # include<list> # include \" api / media_stream_interface . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / no_unique_address . h \" namespace webrtc { template<class T> class Notifier : public T { public :)",
    "insertText": "Notifier()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (sequence_checker_ .)",
    "insertText": "Detach()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterObserver(ObserverInterface* observer)"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(observer != nullptr)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (observers_ .)",
    "insertText": "push_back(observer)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterObserver(ObserverInterface* observer)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (observers_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "FireOnChanged()",
    "kind": "Method",
    "detail": "Function (break ; } } } void)",
    "insertText": "FireOnChanged()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::list<ObserverInterface*> observers = observers_ ;)",
    "insertText": "for(std::list<ObserverInterface*>::iterator it = observers.begin(); it != observers.end(); ++it)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} } protected : std::list<ObserverInterface*> observers_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  }
]