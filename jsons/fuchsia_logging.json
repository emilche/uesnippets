[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Location",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Location"
  },
  {
    "label": "ZxLogMessage()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_FUCHSIA_LOGGING_H_ # define BASE_FUCHSIA_FUCHSIA_LOGGING_H_ # include<lib / fit / function . h> # include<zircon / types . h> # include \" base / base_export . h \" # include \" base / logging . h \" # include \" base / strings / string_piece_forward . h \" # include \" build / build_config . h \" namespace logging { class BASE_EXPORT ZxLogMessage : public logging::LogMessage { public :)",
    "insertText": "ZxLogMessage(const char* file_path, int line, LogSeverity severity, zx_status_t zx_status)"
  },
  {
    "label": "ZxLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZxLogMessage(const ZxLogMessage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ZxLogMessage&)",
    "insertText": "operator(const ZxLogMessage&)"
  },
  {
    "label": "ZxLogMessage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ZxLogMessage()"
  },
  {
    "label": "ZX_LOG_STREAM()",
    "kind": "Method",
    "detail": "Function (private : zx_status_t zx_status_ ; } ; } # define)",
    "insertText": "ZX_LOG_STREAM(severity, zx_status) \\ COMPACT_GOOGLE_LOG_EX_##severity(ZxLogMessage, zx_status).stream() #define ZX_LOG(severity, zx_status) \\ LAZY_STREAM(ZX_LOG_STREAM(severity, zx_status), LOG_IS_ON(severity)) #define ZX_LOG_IF(severity, condition, zx_status) \\ LAZY_STREAM(ZX_LOG_STREAM(severity, zx_status), \\ LOG_IS_ON(severity) && (condition)) #define ZX_CHECK(condition, zx_status) \\ LAZY_STREAM(ZX_LOG_STREAM(FATAL, zx_status), !(condition)) \\ << \"Check failed: \" #condition << \". \" #define ZX_DLOG(severity, zx_status) \\ LAZY_STREAM(ZX_LOG_STREAM(severity, zx_status), DLOG_IS_ON(severity)) #if DCHECK_IS_ON() #define ZX_DLOG_IF(severity, condition, zx_status) \\ LAZY_STREAM(ZX_LOG_STREAM(severity, zx_status), \\ DLOG_IS_ON(severity) && (condition)) #else #define ZX_DLOG_IF(severity, condition, zx_status) EAT_STREAM_PARAMETERS #endif #define ZX_DCHECK(condition, zx_status) \\ LAZY_STREAM(ZX_LOG_STREAM(DCHECK, zx_status), \\ DCHECK_IS_ON() && !(condition))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class Location ; BASE_EXPORT fit::function<)",
    "insertText": "void(zx_status_t)> LogFidlErrorAndExitProcess( const Location& from_here, StringPiece protocol_name)"
  }
]