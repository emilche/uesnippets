[
  {
    "label": "NodeType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeType"
  },
  {
    "label": "TIntrusiveDoubleLinkedListIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveDoubleLinkedListIterator"
  },
  {
    "label": "ElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementType"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "TIntrusiveDoubleLinkedList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveDoubleLinkedList"
  },
  {
    "label": "InElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InElementType"
  },
  {
    "label": "TIntrusiveDoubleLinkedListNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveDoubleLinkedListNode"
  },
  {
    "label": "TIntrusiveDoubleLinkedListNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" template<class NodeType> class TIntrusiveDoubleLinkedListIterator ; template<class ElementType,class ContainerType> class TIntrusiveDoubleLinkedList ; template<class InElementType,class ContainerType = InElementType> class TIntrusiveDoubleLinkedListNode { public : using NodeType = TIntrusiveDoubleLinkedListNode<InElementType,ContainerType> ; using ElementType = InElementType ;)",
    "insertText": "TIntrusiveDoubleLinkedListNode() : Next(GetThisElement()) , Prev(GetThisElement())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetThisElement()",
    "kind": "Method",
    "detail": "Function (Next = Prev =)",
    "insertText": "GetThisElement()"
  },
  {
    "label": "IsInList()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInList()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "GetNext()"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Prev = Prev)",
    "insertText": "NodeType(Next)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Next = Next)",
    "insertText": "NodeType(Prev)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertAfter(ElementType* NewPrev)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Next)",
    "insertText": "NodeType(NewPrev)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Next = NewNext ; Prev = NewPrev ; static_cast<)",
    "insertText": "NodeType(NewNext)->Prev = GetThisElement()"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(NewPrev)->Next = GetThisElement()"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertBefore(ElementType* NewNext)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Prev)",
    "insertText": "NodeType(NewNext)"
  },
  {
    "label": "TIntrusiveDoubleLinkedListIterator()",
    "kind": "Method",
    "detail": "Function (} ElementType* Next ; ElementType* Prev ; } ; template<class NodeType> class TIntrusiveDoubleLinkedListIterator { public : using ElementType = NodeType::ElementType ;)",
    "insertText": "TIntrusiveDoubleLinkedListIterator(ElementType* Node) : CurrentNode(Node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TIntrusiveDoubleLinkedListIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrentNode = CurrentNode -> NodeType::Next ; return* this ; } TIntrusiveDoubleLinkedListIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto Tmp =*)",
    "insertText": "this(*this)"
  },
  {
    "label": "TIntrusiveDoubleLinkedList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrusiveDoubleLinkedList(const TIntrusiveDoubleLinkedList&)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsFilled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFilled()"
  },
  {
    "label": "AddHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddHead(ElementType* Element)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(Element)->InsertAfter(GetSentinel())"
  },
  {
    "label": "AddHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddHead(TIntrusiveDoubleLinkedList&& Other)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Next = Sentinel.Next)",
    "insertText": "NodeType(Other.Sentinel.Prev)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(Other.Sentinel.Next)->Prev = GetSentinel()"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Prev = Other.Sentinel.Prev)",
    "insertText": "NodeType(Sentinel.Next)"
  },
  {
    "label": "GetSentinel()",
    "kind": "Method",
    "detail": "Function (Sentinel . Next = Other . Sentinel . Next ; Other . Sentinel . Next = Other . Sentinel . Prev = Other .)",
    "insertText": "GetSentinel()"
  },
  {
    "label": "AddTail()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddTail(ElementType* Element)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(Element)->InsertBefore(GetSentinel())"
  },
  {
    "label": "AddTail()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTail(TIntrusiveDoubleLinkedList&& Other)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Prev = Sentinel.Prev)",
    "insertText": "NodeType(Other.Sentinel.Next)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(Other.Sentinel.Prev)->Next = GetSentinel()"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (Next = Other.Sentinel.Next)",
    "insertText": "NodeType(Sentinel.Prev)"
  },
  {
    "label": "GetHead()",
    "kind": "Method",
    "detail": "Function (} } ElementType*)",
    "insertText": "GetHead()"
  },
  {
    "label": "GetTail()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "GetTail()"
  },
  {
    "label": "PopHead()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "PopHead()"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(Element)->Remove()"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertAfter(ElementType* InsertThis, ElementType* AfterThis)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(InsertThis)->InsertAfter(AfterThis)"
  },
  {
    "label": "InsertBefore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertBefore(ElementType* InsertThis, ElementType* BeforeThis)"
  },
  {
    "label": "NodeType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "NodeType(InsertThis)->InsertBefore(BeforeThis)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} using TIterator = TIntrusiveDoubleLinkedListIterator<NodeType> ; using TConstIterator = TIntrusiveDoubleLinkedListIterator<const NodeType> ; TIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "end()"
  }
]