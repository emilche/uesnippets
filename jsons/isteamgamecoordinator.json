[
  {
    "label": "EGCResults",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGCResults"
  },
  {
    "label": "ISteamGameCoordinator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamGameCoordinator"
  },
  {
    "label": "GCMessageAvailable_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCMessageAvailable_t"
  },
  {
    "label": "GCMessageFailed_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCMessageFailed_t"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMGAMECOORDINATOR # define ISTEAMGAMECOORDINATOR # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" enum EGCResults { k_EGCResultOK = 0,k_EGCResultNoMessage = 1,k_EGCResultBufferTooSmall = 2,k_EGCResultNotLoggedOn = 3,k_EGCResultInvalidMessage = 4,} ; class ISteamGameCoordinator { public : EGCResults)",
    "insertText": "SendMessage(uint32 unMsgType, const void *pubData, uint32 cubData)"
  },
  {
    "label": "IsMessageAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMessageAvailable(uint32 *pcubMsgSize)"
  },
  {
    "label": "RetrieveMessage()",
    "kind": "Method",
    "detail": "Function (EGCResults)",
    "insertText": "RetrieveMessage(uint32 *punMsgType, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMGAMECOORDINATOR_INTERFACE_VERSION \" SteamGameCoordinator001 \" # if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]