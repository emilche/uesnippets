[
  {
    "label": "FLiveLinkManifestHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkManifestHeader"
  },
  {
    "label": "FLiveLinkFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkFileHeader"
  },
  {
    "label": "FLiveLinkManifestHeader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / FrameRate . h \" # include \" LiveLinkRole . h \" # include \" LiveLinkTypes . h \" # include \" LiveLinkCustomVersion . h \" # include \" Serializers / MovieSceneSectionSerialization . h \" struct FLiveLinkManifestHeader { const int32 cVersion = 2 ;)",
    "insertText": "FLiveLinkManifestHeader() : Version(cVersion)"
  },
  {
    "label": "FLiveLinkManifestHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiveLinkManifestHeader(const FName& InSerializedType) : Version(cVersion) , SerializedType(InSerializedType) , bIsManifest(true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLiveLinkManifestHeader& Header)"
  },
  {
    "label": "FLiveLinkFileHeader()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . Version ; Ar<<Header . SerializedType ; Ar<<Header . bIsManifest ; Ar<<Header . SubjectNames ; return Ar ; } int32 Version ; FName SerializedType ; bool bIsManifest ; TArray<FName> SubjectNames ; } ; using FLiveLinkManifestSerializer = TMovieSceneSerializer<FLiveLinkManifestHeader,FLiveLinkManifestHeader> ; PRAGMA_DISABLE_DEPRECATION_WARNINGS struct FLiveLinkFileHeader {)",
    "insertText": "FLiveLinkFileHeader()"
  },
  {
    "label": "FLiveLinkFileHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLiveLinkFileHeader(const FName& InSubjectName, double InSecondsDiff, TSubclassOf<ULiveLinkRole> InSubjectRole, const TSharedPtr<FLiveLinkStaticDataStruct>& InStaticData, const FName& InSerializedType, const FGuid& InGuid) : bIsManifest(false) , SecondsDiff(InSecondsDiff) , SubjectName(InSubjectName) , SerializedType(InSerializedType) , Guid(InGuid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLiveLinkFileHeader& Header)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FLiveLinkCustomVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . SerializedType ; Ar<<Header . bIsManifest ; Ar<<Header . Guid ; Ar<<Header . SecondsDiff ; Ar<<Header . SubjectName ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . CurveNames ;)",
    "insertText": "StaticStruct()->SerializeItem(Ar, (void*)& Header.RefSkeleton, nullptr)"
  }
]