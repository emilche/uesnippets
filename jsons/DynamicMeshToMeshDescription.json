[
  {
    "label": "TMeshTangents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshTangents"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FTriangleID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriangleID"
  },
  {
    "label": "FVertexID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexID"
  },
  {
    "label": "FDynamicMeshToMeshDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshToMeshDescription"
  },
  {
    "label": "PREDECLARE_GEOMETRY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" GeometryBase . h \" # include \" MeshConversionOptions . h \" # include \" MeshDescription . h \")",
    "insertText": "PREDECLARE_GEOMETRY(template<typename RealType> class TMeshTangents)"
  },
  {
    "label": "SetMaterialIDMapFromInverseMap()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Geometry { class FDynamicMesh3 ; } } struct FMeshDescription ; struct FTriangleID ; struct FVertexID ; using UE::Geometry::FDynamicMesh3 ; class FDynamicMeshToMeshDescription { public : bool bPrintDebugMessages = false ; FConversionToMeshDescriptionOptions ConversionOptions ; void)",
    "insertText": "SetMaterialIDMapFromInverseMap(TArrayView<const int32> PolygroupIDToMaterialIDMap)"
  },
  {
    "label": "FDynamicMeshToMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicMeshToMeshDescription()"
  },
  {
    "label": "FDynamicMeshToMeshDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDynamicMeshToMeshDescription(FConversionToMeshDescriptionOptions ConversionOptions) : ConversionOptions(ConversionOptions)"
  },
  {
    "label": "HaveMatchingElementCounts()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HaveMatchingElementCounts(const FDynamicMesh3* DynamicMesh, const FMeshDescription* MeshDescription, bool bVerticesOnly, bool bAttributesOnly)"
  },
  {
    "label": "HaveMatchingElementCounts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveMatchingElementCounts(const FDynamicMesh3* DynamicMesh, const FMeshDescription* MeshDescription)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, bool bCopyTangents = false)"
  },
  {
    "label": "UpdateUsingConversionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUsingConversionOptions(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, bool bUpdateNormals = true, bool bUpdateTangents = false, bool bUpdateUVs = false)"
  },
  {
    "label": "UpdateAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttributes(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, bool bUpdateNormals, bool bUpdateTangents, bool bUpdateUVs)"
  },
  {
    "label": "UpdateTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTangents(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, const UE::Geometry::TMeshTangents<double>* SrcTangents)"
  },
  {
    "label": "UpdateTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTangents(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut)"
  },
  {
    "label": "UpdateVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertexColors(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut)"
  },
  {
    "label": "Convert_NoAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert_NoAttributes(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut)"
  },
  {
    "label": "Convert_SharedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert_SharedInstances(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut)"
  },
  {
    "label": "Convert_NoSharedInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert_NoSharedInstances(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, bool bCopyTangents)"
  },
  {
    "label": "ConvertPolygroupLayers()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConvertPolygroupLayers(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, const TArray<FTriangleID>& IndexToTriangleIDMap)"
  },
  {
    "label": "ConvertWeightLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertWeightLayers(const FDynamicMesh3* MeshIn, FMeshDescription& MeshOut, const TArray<FVertexID>& IndexToVertexIDMap)"
  },
  {
    "label": "ApplyVertexColorTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVertexColorTransform(FVector4f& Color)"
  }
]