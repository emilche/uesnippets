[
  {
    "label": "optional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "optional"
  },
  {
    "label": "init_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "init_t"
  },
  {
    "label": "empty_struct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "empty_struct"
  },
  {
    "label": "optional_data_dtor_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "optional_data_dtor_base"
  },
  {
    "label": "dummy_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dummy_type"
  },
  {
    "label": "optional_data_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "optional_data_base"
  },
  {
    "label": "optional_data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "optional_data"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "optional_ctor_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "optional_ctor_base"
  },
  {
    "label": "optional_assign_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "optional_assign_base"
  },
  {
    "label": "ctor_copy_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ctor_copy_traits"
  },
  {
    "label": "assign_copy_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "assign_copy_traits"
  },
  {
    "label": "is_constructible_convertible_from_optional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_constructible_convertible_from_optional"
  },
  {
    "label": "is_constructible_convertible_assignable_from_optional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_constructible_convertible_assignable_from_optional"
  },
  {
    "label": "optional_hash_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "optional_hash_base"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TYPES_INTERNAL_OPTIONAL_H_ # define ABSL_TYPES_INTERNAL_OPTIONAL_H_ # include<functional> # include<new> # include<type_traits> # include<utility> # include \" absl / base / internal / inline_variable . h \" # include \" absl / memory / memory . h \" # include \" absl / meta / type_traits . h \" # include \" absl / utility / utility . h \" # if)",
    "insertText": "defined(__clang__) #if __has_feature(cxx_inheriting_constructors) #define ABSL_OPTIONAL_USE_INHERITING_CONSTRUCTORS 1 #endif #elif (defined(__GNUC__) && \\ (__GNUC__ > 4 || __GNUC__ == 4 && __GNUC_MINOR__ >= 8)) || \\ (__cpp_inheriting_constructors >= 200802) || \\ (defined(_MSC_VER) && _MSC_VER >= 1910)"
  },
  {
    "label": "init_t()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN template<T> class optional ; namespace optional_internal { struct init_t {)",
    "insertText": "init_t()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; struct empty_struct { } ; template<T,bool unused = std::is_trivially_destructible<T>::value> class optional_data_dtor_base { struct dummy_type {)",
    "insertText": "static_assert(sizeof(T) % sizeof(empty_struct) == 0, \"\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (empty_struct data [)",
    "insertText": "sizeof(T) / sizeof(empty_struct)"
  },
  {
    "label": "destruct()",
    "kind": "Method",
    "detail": "Function (} ; protected : bool engaged_ ; union { T data_ ; dummy_type dummy_ ; } ; void)",
    "insertText": "destruct()"
  },
  {
    "label": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0) #pragma GCC diagnostic push #pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\" #endif data_.~T()"
  },
  {
    "label": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)"
  },
  {
    "label": "optional_data_dtor_base()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "optional_data_dtor_base() noexcept : engaged_(false)"
  },
  {
    "label": "optional_data_dtor_base()",
    "kind": "Method",
    "detail": "Function ({ } } { } template<. . . Args>)",
    "insertText": "optional_data_dtor_base(in_place_t, Args&&... args) : engaged_(true), data_(absl::forward<Args>(args)...)"
  },
  {
    "label": "optional_data_dtor_base()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "optional_data_dtor_base()"
  },
  {
    "label": "optional_data_base()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class optional_data_base : public optional_data_dtor_base<T> { protected : using base = optional_data_dtor_base<T> ; # ifdef ABSL_OPTIONAL_USE_INHERITING_CONSTRUCTORS using base::base ; # else)",
    "insertText": "optional_data_base()"
  },
  {
    "label": "optional_data_base()",
    "kind": "Method",
    "detail": "Function (template<. . . Args>)",
    "insertText": "optional_data_base(in_place_t t, Args&&... args) : base(t, absl::forward<Args>(args)...)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} # endif template<. . . Args> void)",
    "insertText": "construct(Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<void*>(&this->dummy_)) T(std::forward<Args>(args)...)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this -> engaged_ = true ; } template<U> void)",
    "insertText": "assign(U&& u)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (this -> data_ = std::forward<)",
    "insertText": "U(u)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "construct(std::forward<U>(u))"
  },
  {
    "label": "optional_data()",
    "kind": "Method",
    "detail": "Function (} } } ; template<T,bool unused = absl::is_trivially_copy_constructible<T>::value&& absl::is_trivially_copy_assignable<std::remove_cv<T>::type>::value&& std::is_trivially_destructible<T>::value> class optional_data ; template<T> class optional_data<T,true> : public optional_data_base<T> { protected : # ifdef ABSL_OPTIONAL_USE_INHERITING_CONSTRUCTORS using optional_data_base<T>::optional_data_base ; # else)",
    "insertText": "optional_data()"
  },
  {
    "label": "optional_data()",
    "kind": "Method",
    "detail": "Function (template<. . . Args>)",
    "insertText": "optional_data(in_place_t t, Args&&... args) : optional_data_base<T>(t, absl::forward<Args>(args)...)"
  },
  {
    "label": "optional_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_data(const optional_data& rhs) : optional_data_base<T>()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "construct(rhs.data_)"
  },
  {
    "label": "optional_data()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "optional_data(optional_data&& rhs) noexcept( absl::default_allocator_is_nothrow::value || std::is_nothrow_move_constructible<T>::value) : optional_data_base<T>()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "construct(std::move(rhs.data_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } optional_data&)",
    "insertText": "operator(const optional_data& rhs)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "assign(rhs.data_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } optional_data&)",
    "insertText": "operator(optional_data&& rhs) noexcept( std::is_nothrow_move_assignable<T>::value&& std::is_nothrow_move_constructible<T>::value)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "assign(std::move(rhs.data_))"
  },
  {
    "label": "optional_ctor_base()",
    "kind": "Method",
    "detail": "Function (} return* this ; } } ; enum class copy_traits { copyable = 0,movable = 1,non_movable = 2 } ; template<copy_traits> class optional_ctor_base ; template<> class optional_ctor_base<copy_traits::copyable> { public :)",
    "insertText": "optional_ctor_base()"
  },
  {
    "label": "optional_ctor_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_ctor_base(const optional_ctor_base&)"
  },
  {
    "label": "optional_ctor_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_ctor_base(optional_ctor_base&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (optional_ctor_base&)",
    "insertText": "operator(const optional_ctor_base&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (optional_ctor_base&)",
    "insertText": "operator(optional_ctor_base&&)"
  },
  {
    "label": "optional_assign_base()",
    "kind": "Method",
    "detail": "Function (} ; template<copy_traits> class optional_assign_base ; template<> class optional_assign_base<copy_traits::copyable> { public :)",
    "insertText": "optional_assign_base()"
  },
  {
    "label": "optional_assign_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_assign_base(const optional_assign_base&)"
  },
  {
    "label": "optional_assign_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_assign_base(optional_assign_base&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (optional_assign_base&)",
    "insertText": "operator(const optional_assign_base&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (optional_assign_base&)",
    "insertText": "operator(optional_assign_base&&)"
  },
  {
    "label": "convertible_to_bool()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct ctor_copy_traits { copy_traits traits = std::is_copy_constructible<T>::value ? copy_traits::copyable : std::is_move_constructible<T>::value ? copy_traits::movable : copy_traits::non_movable ; } ; template<T> struct assign_copy_traits { copy_traits traits = absl::is_copy_assignable<T>::value&& std::is_copy_constructible<T>::value ? copy_traits::copyable : absl::is_move_assignable<T>::value&& std::is_move_constructible<T>::value ? copy_traits::movable : copy_traits::non_movable ; } ; template<T,U> struct is_constructible_convertible_from_optional : std::integral_constant<bool,std::is_constructible<T,optional<U>&>::value | | std::is_constructible<T,optional<U>&&>::value | | std::is_constructible<T,const optional<U>&>::value | | std::is_constructible<T,const optional<U>&&>::value | | std::is_convertible<optional<U>&,T>::value | | std::is_convertible<optional<U>&&,T>::value | | std::is_convertible<const optional<U>&,T>::value | | std::is_convertible<const optional<U>&&,T>::value> { } ; template<T,U> struct is_constructible_convertible_assignable_from_optional : std::integral_constant<bool,is_constructible_convertible_from_optional<T,U>::value | | std::is_assignable<T&,optional<U>&>::value | | std::is_assignable<T&,optional<U>&&>::value | | std::is_assignable<T&,const optional<U>&>::value | | std::is_assignable<T&,const optional<U>&&>::value> { } ; bool)",
    "insertText": "convertible_to_bool(bool)"
  },
  {
    "label": "optional_hash_base()",
    "kind": "Method",
    "detail": "Function (template<T,= size_t> struct optional_hash_base {)",
    "insertText": "optional_hash_base()"
  },
  {
    "label": "optional_hash_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_hash_base(const optional_hash_base&)"
  },
  {
    "label": "optional_hash_base()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optional_hash_base(optional_hash_base&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (optional_hash_base&)",
    "insertText": "operator(const optional_hash_base&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (optional_hash_base&)",
    "insertText": "operator(optional_hash_base&&)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct optional_hash_base<T,)",
    "insertText": "decltype(std::hash<absl::remove_const_t<T> >()( std::declval<absl::remove_const_t<T> >()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using argument_type = absl::optional<T> ; using result_type = size_t ; size_t)",
    "insertText": "operator()(const absl::optional<T>& opt)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (absl::type_traits_internal::AssertHashEnabled<absl::remove_const_t<)",
    "insertText": "T()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} else { return static_cast<)",
    "insertText": "size_t(0x297814aaad196e6dULL)"
  }
]& v, const optional<T>& x) -> decltype(optional_internal::convertible_to_bool(v <= *x))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> auto)",
    "insertText": "operator(const optional<T>& x, const U& v) -> decltype(optional_internal::convertible_to_bool(*x > v))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> auto)",
    "insertText": "operator(const U& v, const optional<T>& x) -> decltype(optional_internal::convertible_to_bool(v > *x))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> auto)",
    "insertText": "operator(const optional<T>& x, const U& v) -> decltype(optional_internal::convertible_to_bool(*x >= v))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> auto)",
    "insertText": "operator(const U& v, const optional<T>& x) -> decltype(optional_internal::convertible_to_bool(v >= *x))"
  }
]