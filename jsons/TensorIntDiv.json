[
  {
    "label": "UnsignedTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnsignedTraits"
  },
  {
    "label": "DividerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DividerTraits"
  },
  {
    "label": "DividerHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DividerHelper"
  },
  {
    "label": "TensorIntDivisor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorIntDivisor"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_INTDIV_H # define EIGEN_CXX11_TENSOR_TENSOR_INTDIV_H namespace Eigen { namespace internal { namespace { template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE internal::enable_if<)",
    "insertText": "sizeof(T)==4,int>::type count_leading_zeros(const T val)"
  },
  {
    "label": "__clz()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_GPU_COMPILE_PHASE return)",
    "insertText": "__clz(val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(SYCL_DEVICE_ONLY) return cl::sycl::clz(val)"
  },
  {
    "label": "_BitScanReverse()",
    "kind": "Method",
    "detail": "Function (# elif EIGEN_COMP_MSVC unsigned long index ;)",
    "insertText": "_BitScanReverse(&index, val)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE internal::enable_if<)",
    "insertText": "sizeof(T)==8,int>::type count_leading_zeros(const T val)"
  },
  {
    "label": "__clzll()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_GPU_COMPILE_PHASE return)",
    "insertText": "__clzll(val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(SYCL_DEVICE_ONLY) return static_cast<int>(cl::sycl::clz(val))"
  },
  {
    "label": "_BitScanReverse64()",
    "kind": "Method",
    "detail": "Function (# elif EIGEN_COMP_MSVC&& EIGEN_ARCH_x86_64 unsigned long index ;)",
    "insertText": "_BitScanReverse64(&index, val)"
  },
  {
    "label": "hi()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "hi(unsigned int)((val>>32)&0xffffffff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int n ;)",
    "insertText": "if(hi==0) n = 32 + count_leading_zeros<unsigned int>(lo)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> struct UnsignedTraits { typedef conditional<)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "muluh()",
    "kind": "Method",
    "detail": "Function (} ; template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE uint32_t)",
    "insertText": "muluh(const uint32_t a, const T b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_GPU_COMPILE_PHASE) return __umulhi(a, b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(SYCL_DEVICE_ONLY) return cl::sycl::mul_hi(a, static_cast<uint32_t>(b))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(static_cast<uint64_t>(a) * b)"
  },
  {
    "label": "muluh()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE uint64_t)",
    "insertText": "muluh(const uint64_t a, const T b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_GPU_COMPILE_PHASE) return __umul64hi(a, b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(SYCL_DEVICE_ONLY) return cl::sycl::mul_hi(a, static_cast<uint64_t>(b))"
  },
  {
    "label": "__uint128_t()",
    "kind": "Method",
    "detail": "Function (# elif EIGEN_HAS_BUILTIN_INT128 __uint128_t v = static_cast<)",
    "insertText": "__uint128_t(a) * static_cast<__uint128_t>(b)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(TensorUInt128<static_val<0>, uint64_t>(a) * TensorUInt128<static_val<0>, uint64_t>(b)).upper()"
  },
  {
    "label": "computeMultiplier()",
    "kind": "Method",
    "detail": "Function (# endif } template<int N,T> struct DividerHelper { EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE uint32_t)",
    "insertText": "computeMultiplier(const int log_div, const T divider)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(N == 32, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_HAS_BUILTIN_INT128&& !)",
    "insertText": "defined(EIGEN_GPU_COMPILE_PHASE) && !defined(SYCL_DEVICE_ONLY) return static_cast<uint64_t>((static_cast<__uint128_t>(1) << (64+log_div)) / static_cast<__uint128_t>(divider) - (static_cast<__uint128_t>(1) << 64) + 1)"
  },
  {
    "label": "static_val()",
    "kind": "Method",
    "detail": "Function (# else const uint64_t shift = 1 ULL<<log_div ; TensorUInt128<uint64_t,uint64_t> result = TensorUInt128<uint64_t,)",
    "insertText": "static_val(shift, 0) / TensorUInt128<static_val<0>, uint64_t>(divider) - TensorUInt128<static_val<1>, static_val<0> >(1, 0) + TensorUInt128<static_val<0>, static_val<1> >(1)"
  },
  {
    "label": "TensorIntDivisor()",
    "kind": "Method",
    "detail": "Function (# endif } } ; } template<T,bool div_gt_one = false> struct TensorIntDivisor { public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorIntDivisor()"
  },
  {
    "label": "TensorIntDivisor()",
    "kind": "Method",
    "detail": "Function (multiplier = 0 ; shift1 = 0 ; shift2 = 0 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorIntDivisor(const T divider)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const int N = DividerTraits<T>::N ;)",
    "insertText": "eigen_assert(static_cast<typename UnsignedTraits<T>::type>(divider) < NumTraits<UnsignedType>::highest()/2)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(divider > 0)"
  },
  {
    "label": "count_leading_zeros()",
    "kind": "Method",
    "detail": "Function (const int leading_zeros =)",
    "insertText": "count_leading_zeros(static_cast<UnsignedType>(divider))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int log_div = N - leading_zeros ;)",
    "insertText": "if((static_cast<typename UnsignedTraits<T>::type>(1) << (log_div-1)) == static_cast<typename UnsignedTraits<T>::type>(divider))"
  },
  {
    "label": "computeMultiplier()",
    "kind": "Method",
    "detail": "Function (multiplier = DividerHelper<N,T)",
    "insertText": "computeMultiplier(log_div, divider)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (shift1 = log_div> 1 ? 1 : log_div ; shift2 = log_div> 1 ? log_div - 1 : 0 ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "divide(const T numerator)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(static_cast<typename UnsignedTraits<T>::type>(numerator) < NumTraits<UnsignedType>::highest()/2)"
  },
  {
    "label": "muluh()",
    "kind": "Method",
    "detail": "Function (UnsignedType t1 =)",
    "insertText": "muluh(multiplier, numerator)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (UnsignedType)",
    "insertText": "t(static_cast<UnsignedType>(numerator) - t1)"
  },
  {
    "label": "TensorIntDivisor()",
    "kind": "Method",
    "detail": "Function (magic = 0 ; shift = 0 ; } EIGEN_DEVICE_FUNC)",
    "insertText": "TensorIntDivisor(int32_t divider)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(divider >= 2)"
  },
  {
    "label": "calcMagic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calcMagic(divider)"
  },
  {
    "label": "divide()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE int)",
    "insertText": "divide(const int32_t n)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_GPU_COMPILE_PHASE)",
    "insertText": "return(__umulhi(magic, n) >> shift)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(SYCL_DEVICE_ONLY) return (cl::sycl::mul_hi(magic, static_cast<uint32_t>(n)) >> shift)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (# else uint64_t v = static_cast<)",
    "insertText": "uint64_t(magic) * static_cast<uint64_t>(n)"
  },
  {
    "label": "calcMagic()",
    "kind": "Method",
    "detail": "Function (# endif } private : EIGEN_DEVICE_FUNC void)",
    "insertText": "calcMagic(int32_t d)"
  },
  {
    "label": "two31()",
    "kind": "Method",
    "detail": "Function (const unsigned two31 = 0 x80000000 ; unsigned ad = d ; unsigned t =)",
    "insertText": "two31(ad >> 31)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned anc = t - 1 - t % ad ; int p = 3 1 ; unsigned q1 = two31 / anc ; unsigned r1 = two31 - q1* anc ; unsigned q2 = two31 / ad ; unsigned r2 = two31 - q2* ad ; unsigned delta = 0 ; do { p = p + 1 ; q1 = 2* q1 ; r1 = 2* r1 ;)",
    "insertText": "if(r1 >= anc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (q1 = q1 + 1 ; r1 = r1 - anc ; } q2 = 2* q2 ; r2 = 2* r2 ;)",
    "insertText": "if(r2 >= ad)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (q2 = q2 + 1 ; r2 = r2 - ad ; } delta = ad - r2 ; })",
    "insertText": "while(q1 < delta || (q1 == delta && r1 == 0))"
  },
  {
    "label": "magic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "magic(unsigned)(q2 + 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (shift = p - 3 2 ; } uint32_t magic ; int32_t shift ; } ; template<T,bool div_gt_one> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "operator(const T& numerator, const TensorIntDivisor<T, div_gt_one>& divisor)"
  }
]