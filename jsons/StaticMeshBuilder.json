[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FStaticMeshLODGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODGroup"
  },
  {
    "label": "FOverlappingCorners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingCorners"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FMeshBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBuildSettings"
  },
  {
    "label": "MESHBUILDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESHBUILDER_API"
  },
  {
    "label": "FSkeletalMeshBuildParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMeshBuildParameters"
  },
  {
    "label": "FStaticMeshComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshComponentRecreateRenderStateContext"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MeshBuilder . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStaticMeshBuilder, Log, All)"
  },
  {
    "label": "FStaticMeshBuilder()",
    "kind": "Method",
    "detail": "Function (class ITargetPlatform ; class UStaticMesh ; class FStaticMeshRenderData ; class FStaticMeshLODGroup ; struct FOverlappingCorners ; struct FMeshDescription ; struct FMeshBuildSettings ; class FStaticMeshBuilder : public FMeshBuilder { public :)",
    "insertText": "FStaticMeshBuilder()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Build(FStaticMeshRenderData& OutRenderData, const FStaticMeshBuildParameters& BuildParameters)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Build(const struct FSkeletalMeshBuildParameters& SkeletalMeshBuildParameters)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bool No_Support_For_SkeletalMesh_Build_In_FStaticMeshBuilder_Class = false ;)",
    "insertText": "check(No_Support_For_SkeletalMesh_Build_In_FStaticMeshBuilder_Class)"
  },
  {
    "label": "OnBuildRenderMeshStart()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBuildRenderMeshStart(class UStaticMesh* StaticMesh, const bool bInvalidateLighting)"
  },
  {
    "label": "OnBuildRenderMeshFinish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBuildRenderMeshFinish(class UStaticMesh* StaticMesh, const bool bRebuildBoundsAndCollision)"
  },
  {
    "label": "BuildVertexBuffer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FStaticMeshComponentRecreateRenderStateContext> RecreateRenderStateContext ; } ; namespace UE::Private::StaticMeshBuilder { void)",
    "insertText": "BuildVertexBuffer(UStaticMesh* StaticMesh, const FMeshDescription& MeshDescription, const FMeshBuildSettings& BuildSettings, TArray<int32>& OutWedgeMap, FStaticMeshSectionArray& OutSections, TArray<TArray<uint32>>& OutPerSectionIndices, FMeshBuildVertexData& BuildVertexData, const FOverlappingCorners& OverlappingCorners, TArray<int32>& RemapVerts, FBoxSphereBounds& MeshBounds, bool bNeedTangents, bool bNeedWedgeMap)"
  },
  {
    "label": "BuildCombinedSectionIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCombinedSectionIndices(const TArray<TArray<uint32>>& PerSectionIndices, FStaticMeshSectionArray& SectionsOut, TArray<uint32>& CombinedIndicesOut, bool& bNeeds32BitIndicesOut)"
  }
]