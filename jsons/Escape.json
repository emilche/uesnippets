[
  {
    "label": "UnescapeRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnescapeRule"
  },
  {
    "label": "EscapeAllExceptUnreserved()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_ESCAPE_H_ # define BASE_STRINGS_ESCAPE_H_ # include<stdint . h> # include<set> # include<string> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / utf_offset_string_conversions . h \" namespace base { BASE_EXPORT std::string)",
    "insertText": "EscapeAllExceptUnreserved(StringPiece text)"
  },
  {
    "label": "EscapeQueryParamValue()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "EscapeQueryParamValue(StringPiece text, bool use_plus)"
  },
  {
    "label": "EscapePath()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "EscapePath(StringPiece path)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) BASE_EXPORT std::string EscapeNSURLPrecursor(StringPiece precursor)"
  },
  {
    "label": "EscapeUrlEncodedData()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT std::string)",
    "insertText": "EscapeUrlEncodedData(StringPiece path, bool use_plus)"
  },
  {
    "label": "EscapeNonASCIIAndPercent()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "EscapeNonASCIIAndPercent(StringPiece input)"
  },
  {
    "label": "EscapeNonASCII()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "EscapeNonASCII(StringPiece input)"
  },
  {
    "label": "EscapeExternalHandlerValue()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "EscapeExternalHandlerValue(StringPiece text)"
  },
  {
    "label": "AppendEscapedCharForHTML()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "AppendEscapedCharForHTML(char c, std::string* output)"
  },
  {
    "label": "EscapeForHTML()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "EscapeForHTML(StringPiece text)"
  },
  {
    "label": "EscapeForHTML()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "EscapeForHTML(StringPiece16 text)"
  },
  {
    "label": "UnescapeURLComponent()",
    "kind": "Method",
    "detail": "Function (class UnescapeRule { public : typedef uint32_t Type ; Type NONE = 0 ; Type NORMAL = 1<<0 ; Type SPACES = 1<<1 ; Type PATH_SEPARATORS = 1<<2 ; Type URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS = 1<<3 ; Type REPLACE_PLUS_WITH_SPACE = 1<<4 ; } ; BASE_EXPORT std::string)",
    "insertText": "UnescapeURLComponent(StringPiece escaped_text, UnescapeRule::Type rules)"
  },
  {
    "label": "UnescapeAndDecodeUTF8URLComponentWithAdjustments()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "UnescapeAndDecodeUTF8URLComponentWithAdjustments(StringPiece text, UnescapeRule::Type rules, OffsetAdjuster::Adjustments* adjustments)"
  },
  {
    "label": "UnescapeBinaryURLComponent()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "UnescapeBinaryURLComponent(StringPiece escaped_text, UnescapeRule::Type rules = UnescapeRule::NORMAL)"
  },
  {
    "label": "UnescapeBinaryURLComponentSafe()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "UnescapeBinaryURLComponentSafe(StringPiece escaped_text, bool fail_on_path_separators, std::string* unescaped_text)"
  },
  {
    "label": "ContainsEncodedBytes()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ContainsEncodedBytes(StringPiece escaped_text, const std::set<unsigned char>& bytes)"
  },
  {
    "label": "UnescapeForHTML()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::u16string)",
    "insertText": "UnescapeForHTML(StringPiece16 text)"
  }
]