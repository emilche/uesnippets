[
  {
    "label": "FNNEModelRaw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNNEModelRaw"
  },
  {
    "label": "FAttributeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttributeMap"
  },
  {
    "label": "IModelValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModelValidator"
  },
  {
    "label": "IModelOptimizerPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModelOptimizerPass"
  },
  {
    "label": "IModelOptimizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModelOptimizer"
  },
  {
    "label": "IModelValidator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Templates / SharedPointerFwd . h \" struct FNNEModelRaw ; namespace UE::NNE { class FAttributeMap ; } namespace UE::NNE::Internal { using FOptimizerOptionsMap = UE::NNE::FAttributeMap ; class IModelValidator { public : ~)",
    "insertText": "IModelValidator()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "ValidateModel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateModel(const FNNEModelRaw& InputModel, const FOptimizerOptionsMap& Options)"
  },
  {
    "label": "IModelOptimizerPass()",
    "kind": "Method",
    "detail": "Function (} ; class IModelOptimizerPass { public : ~)",
    "insertText": "IModelOptimizerPass()"
  },
  {
    "label": "ApplyPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyPass(FNNEModelRaw& Model, const FOptimizerOptionsMap& Options)"
  },
  {
    "label": "IModelOptimizer()",
    "kind": "Method",
    "detail": "Function (} ; class IModelOptimizer { public : ~)",
    "insertText": "IModelOptimizer()"
  },
  {
    "label": "AddOptimizationPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOptimizationPass(TSharedPtr<IModelOptimizerPass> ModelOptimizerPass)"
  },
  {
    "label": "AddValidator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValidator(TSharedPtr<IModelValidator>)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Optimize(const FNNEModelRaw& InputModel, FNNEModelRaw& OutModel, const FOptimizerOptionsMap& Options)"
  }
]