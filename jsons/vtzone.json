[
  {
    "label": "VTZWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VTZWriter"
  },
  {
    "label": "VTZReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VTZReader"
  },
  {
    "label": "UVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "VTimeZone()",
    "kind": "Method",
    "detail": "Function (# ifndef VTZONE_H # define VTZONE_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / basictz . h \" U_NAMESPACE_BEGIN class VTZWriter ; class VTZReader ; class UVector ; class U_I18N_API VTimeZone : public BasicTimeZone { public :)",
    "insertText": "VTimeZone(const VTimeZone& source)"
  },
  {
    "label": "VTimeZone()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VTimeZone()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VTimeZone&)",
    "insertText": "operator(const VTimeZone& right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const TimeZone& that)"
  },
  {
    "label": "createVTimeZoneByID()",
    "kind": "Method",
    "detail": "Function (VTimeZone*)",
    "insertText": "createVTimeZoneByID(const UnicodeString& ID)"
  },
  {
    "label": "createVTimeZoneFromBasicTimeZone()",
    "kind": "Method",
    "detail": "Function (VTimeZone*)",
    "insertText": "createVTimeZoneFromBasicTimeZone(const BasicTimeZone& basicTZ, UErrorCode &status)"
  },
  {
    "label": "createVTimeZone()",
    "kind": "Method",
    "detail": "Function (VTimeZone*)",
    "insertText": "createVTimeZone(const UnicodeString& vtzdata, UErrorCode& status)"
  },
  {
    "label": "getTZURL()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getTZURL(UnicodeString& url)"
  },
  {
    "label": "setTZURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTZURL(const UnicodeString& url)"
  },
  {
    "label": "getLastModified()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getLastModified(UDate& lastModified)"
  },
  {
    "label": "setLastModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLastModified(UDate lastModified)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(UDate start, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "writeSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeSimple(UDate time, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (TimeZone*)",
    "insertText": "clone(void)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getOffset(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, UErrorCode& status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getOffset(uint8_t era, int32_t year, int32_t month, int32_t day, uint8_t dayOfWeek, int32_t millis, int32_t monthLength, UErrorCode& status)"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getOffset(UDate date, UBool local, int32_t& rawOffset, int32_t& dstOffset, UErrorCode& ec)"
  },
  {
    "label": "setRawOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRawOffset(int32_t offsetMillis)"
  },
  {
    "label": "getRawOffset()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRawOffset(void)"
  },
  {
    "label": "useDaylightTime()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "useDaylightTime(void)"
  },
  {
    "label": "inDaylightTime()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "inDaylightTime(UDate date, UErrorCode& status)"
  },
  {
    "label": "hasSameRules()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasSameRules(const TimeZone& other)"
  },
  {
    "label": "getNextTransition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getNextTransition(UDate base, UBool inclusive, TimeZoneTransition& result)"
  },
  {
    "label": "getPreviousTransition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getPreviousTransition(UDate base, UBool inclusive, TimeZoneTransition& result)"
  },
  {
    "label": "countTransitionRules()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countTransitionRules(UErrorCode& status)"
  },
  {
    "label": "getTimeZoneRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTimeZoneRules(const InitialTimeZoneRule*& initial, const TimeZoneRule* trsrules[], int32_t& trscount, UErrorCode& status)"
  },
  {
    "label": "createVTimeZone()",
    "kind": "Method",
    "detail": "Function (VTimeZone*)",
    "insertText": "createVTimeZone(VTZReader* reader)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(VTZWriter& writer, UErrorCode& status)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write(UDate start, VTZWriter& writer, UErrorCode& status)"
  },
  {
    "label": "writeSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeSimple(UDate time, VTZWriter& writer, UErrorCode& status)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load(VTZReader& reader, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parse(UErrorCode& status)"
  },
  {
    "label": "writeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZone(VTZWriter& w, BasicTimeZone& basictz, UVector* customProps, UErrorCode& status)"
  },
  {
    "label": "writeHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeHeaders(VTZWriter& w, UErrorCode& status)"
  },
  {
    "label": "writeFooter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeFooter(VTZWriter& writer, UErrorCode& status)"
  },
  {
    "label": "writeZonePropsByTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZonePropsByTime(VTZWriter& writer, UBool isDst, const UnicodeString& zonename, int32_t fromOffset, int32_t toOffset, UDate time, UBool withRDATE, UErrorCode& status)"
  },
  {
    "label": "writeZonePropsByDOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZonePropsByDOM(VTZWriter& writer, UBool isDst, const UnicodeString& zonename, int32_t fromOffset, int32_t toOffset, int32_t month, int32_t dayOfMonth, UDate startTime, UDate untilTime, UErrorCode& status)"
  },
  {
    "label": "writeZonePropsByDOW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZonePropsByDOW(VTZWriter& writer, UBool isDst, const UnicodeString& zonename, int32_t fromOffset, int32_t toOffset, int32_t month, int32_t weekInMonth, int32_t dayOfWeek, UDate startTime, UDate untilTime, UErrorCode& status)"
  },
  {
    "label": "writeZonePropsByDOW_GEQ_DOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZonePropsByDOW_GEQ_DOM(VTZWriter& writer, UBool isDst, const UnicodeString& zonename, int32_t fromOffset, int32_t toOffset, int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, UDate startTime, UDate untilTime, UErrorCode& status)"
  },
  {
    "label": "writeZonePropsByDOW_GEQ_DOM_sub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZonePropsByDOW_GEQ_DOM_sub(VTZWriter& writer, int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, int32_t numDays, UDate untilTime, int32_t fromOffset, UErrorCode& status)"
  },
  {
    "label": "writeZonePropsByDOW_LEQ_DOM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeZonePropsByDOW_LEQ_DOM(VTZWriter& writer, UBool isDst, const UnicodeString& zonename, int32_t fromOffset, int32_t toOffset, int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, UDate startTime, UDate untilTime, UErrorCode& status)"
  },
  {
    "label": "writeFinalRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "writeFinalRule(VTZWriter& writer, UBool isDst, const AnnualTimeZoneRule* rule, int32_t fromRawOffset, int32_t fromDSTSavings, UDate startTime, UErrorCode& status)"
  },
  {
    "label": "beginZoneProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "beginZoneProps(VTZWriter& writer, UBool isDst, const UnicodeString& zonename, int32_t fromOffset, int32_t toOffset, UDate startTime, UErrorCode& status)"
  },
  {
    "label": "endZoneProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "endZoneProps(VTZWriter& writer, UBool isDst, UErrorCode& status)"
  },
  {
    "label": "beginRRULE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "beginRRULE(VTZWriter& writer, int32_t month, UErrorCode& status)"
  },
  {
    "label": "appendUNTIL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "appendUNTIL(VTZWriter& writer, const UnicodeString& until, UErrorCode& status)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (BasicTimeZone* tz ; UVector* vtzlines ; UnicodeString tzurl ; UDate lastmod ; UnicodeString olsonzid ; UnicodeString icutzver ; public : UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  }
]