[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__from_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__from_tag"
  },
  {
    "label": "__forward_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__forward_tag"
  },
  {
    "label": "__wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__wrapper"
  },
  {
    "label": "_Fn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fn"
  },
  {
    "label": "__empty_cache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__empty_cache"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_NON_PROPAGATING_CACHE_H # define _LIBCPP___RANGES_NON_PROPAGATING_CACHE_H # include<__config> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__utility / forward . h> # include<concepts> # include<optional> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__wrapper()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> requires is_object_v<_Tp> class _LIBCPP_TEMPLATE_VIS __non_propagating_cache { struct __from_tag { } ; struct __forward_tag { } ; struct __wrapper { template<class . . . _Args>)",
    "insertText": "__wrapper(__forward_tag, _Args&& ...__args) : __t_(std::forward<_Args>(__args)...)"
  },
  {
    "label": "__wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class _Fn>)",
    "insertText": "__wrapper(__from_tag, _Fn const& __f) : __t_(__f())"
  },
  {
    "label": "__non_propagating_cache()",
    "kind": "Method",
    "detail": "Function (} _Tp __t_ ; } ; optional<__wrapper> __value_ = nullopt ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__non_propagating_cache()"
  },
  {
    "label": "__non_propagating_cache()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__non_propagating_cache(__non_propagating_cache const&) noexcept : __value_(nullopt)"
  },
  {
    "label": "__non_propagating_cache()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__non_propagating_cache(__non_propagating_cache&& __other) noexcept : __value_(nullopt)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (__other . __value_ .)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI __non_propagating_cache&)",
    "insertText": "operator(__non_propagating_cache const& __other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } _LIBCPP_HIDE_FROM_ABI __non_propagating_cache&)",
    "insertText": "operator(__non_propagating_cache&& __other)"
  },
  {
    "label": "__emplace_from()",
    "kind": "Method",
    "detail": "Function (} template<class _Fn> _LIBCPP_HIDE_FROM_ABI _Tp&)",
    "insertText": "__emplace_from(_Fn const& __f)"
  },
  {
    "label": "__emplace()",
    "kind": "Method",
    "detail": "Function (} template<class . . . _Args> _LIBCPP_HIDE_FROM_ABI _Tp&)",
    "insertText": "__emplace(_Args&& ...__args)"
  }
]