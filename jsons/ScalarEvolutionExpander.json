[
  {
    "label": "TargetTransformInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransformInfo"
  },
  {
    "label": "SCEVExpander",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVExpander"
  },
  {
    "label": "SCEVVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCEVVisitor"
  },
  {
    "label": "isSafeToExpand()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_SCALAREVOLUTIONEXPANDER_H # define LLVM_ANALYSIS_SCALAREVOLUTIONEXPANDER_H # include \" llvm / Analysis / ScalarEvolutionExpressions . h \" # include \" llvm / Analysis / ScalarEvolutionNormalization . h \" # include \" llvm / Analysis / TargetFolder . h \" # include \" llvm / IR / IRBuilder . h \" # include \" llvm / IR / ValueHandle . h \" # include<set> namespace llvm { class TargetTransformInfo ; bool)",
    "insertText": "isSafeToExpand(const SCEV *S, ScalarEvolution &SE)"
  },
  {
    "label": "SCEVExpander()",
    "kind": "Method",
    "detail": "Function (class SCEVExpander : public SCEVVisitor<SCEVExpander,Value*> { ScalarEvolution& SE ; const DataLayout& DL ; const char* IVName ; std::map<std::pair<const SCEV*,Instruction*>,TrackingVH<Value>> InsertedExpressions ; std::set<AssertingVH<Value>> InsertedValues ; std::set<AssertingVH<Value>> InsertedPostIncValues ; DenseMap<const SCEV*,const Loop*> RelevantLoops ; PostIncLoopSet PostIncLoops ; const Loop* IVIncInsertLoop ; Instruction* IVIncInsertPos ; std::set<AssertingVH<PHINode>> ChainedPhis ; bool CanonicalMode ; bool LSRMode ; typedef IRBuilder<true,TargetFolder> BuilderType ; BuilderType Builder ; # ifndef NDEBUG const char* DebugType ; # endif struct SCEVVisitor<SCEVExpander,Value*> ; public :)",
    "insertText": "SCEVExpander(ScalarEvolution &se, const DataLayout &DL, const char *name) : SE(se), DL(DL), IVName(name), IVIncInsertLoop(nullptr), IVIncInsertPos(nullptr), CanonicalMode(true), LSRMode(false), Builder(se.getContext(), TargetFolder(DL))"
  },
  {
    "label": "setDebugType()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG DebugType = \" \" ; # endif } # ifndef NDEBUG void)",
    "insertText": "setDebugType(const char* s)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (DebugType = s ; } # endif void)",
    "insertText": "clear()"
  },
  {
    "label": "isHighCostExpansion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isHighCostExpansion(const SCEV *Expr, Loop *L)"
  },
  {
    "label": "isHighCostExpansionHelper()",
    "kind": "Method",
    "detail": "Function (SmallPtrSet<const SCEV*,8> Processed ; return)",
    "insertText": "isHighCostExpansionHelper(Expr, L, Processed)"
  },
  {
    "label": "getOrInsertCanonicalInductionVariable()",
    "kind": "Method",
    "detail": "Function (} PHINode*)",
    "insertText": "getOrInsertCanonicalInductionVariable(const Loop *L, Type *Ty)"
  },
  {
    "label": "getIVIncOperand()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "getIVIncOperand(Instruction *IncV, Instruction *InsertPos, bool allowScale)"
  },
  {
    "label": "hoistIVInc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hoistIVInc(Instruction *IncV, Instruction *InsertPos)"
  },
  {
    "label": "replaceCongruentIVs()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "replaceCongruentIVs(Loop *L, const DominatorTree *DT, SmallVectorImpl<WeakVH> &DeadInsts, const TargetTransformInfo *TTI = nullptr)"
  },
  {
    "label": "expandCodeFor()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "expandCodeFor(const SCEV *SH, Type *Ty, Instruction *I)"
  },
  {
    "label": "setIVIncInsertPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIVIncInsertPos(const Loop *L, Instruction *Pos)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!CanonicalMode && \"IV increment positions are not supported in CanonicalMode\")"
  },
  {
    "label": "setPostInc()",
    "kind": "Method",
    "detail": "Function (IVIncInsertLoop = L ; IVIncInsertPos = Pos ; } void)",
    "insertText": "setPostInc(const PostIncLoopSet &L)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!CanonicalMode && \"Post-inc expansion is not supported in CanonicalMode\")"
  },
  {
    "label": "clearPostInc()",
    "kind": "Method",
    "detail": "Function (PostIncLoops = L ; } void)",
    "insertText": "clearPostInc()"
  },
  {
    "label": "disableCanonicalMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "disableCanonicalMode()"
  },
  {
    "label": "enableLSRMode()",
    "kind": "Method",
    "detail": "Function (CanonicalMode = false ; } void)",
    "insertText": "enableLSRMode()"
  },
  {
    "label": "clearInsertPoint()",
    "kind": "Method",
    "detail": "Function (LSRMode = true ; } void)",
    "insertText": "clearInsertPoint()"
  },
  {
    "label": "ClearInsertionPoint()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "ClearInsertionPoint()"
  },
  {
    "label": "isInsertedInstruction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInsertedInstruction(Instruction *I)"
  },
  {
    "label": "setChainedPhi()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setChainedPhi(PHINode *PN)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (ChainedPhis .)",
    "insertText": "insert(PN)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (} private : LLVMContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "isHighCostExpansionHelper()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isHighCostExpansionHelper(const SCEV *S, Loop *L, SmallPtrSetImpl<const SCEV *> &Processed)"
  },
  {
    "label": "InsertBinop()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "InsertBinop(Instruction::BinaryOps Opcode, Value *LHS, Value *RHS)"
  },
  {
    "label": "ReuseOrCreateCast()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "ReuseOrCreateCast(Value *V, Type *Ty, Instruction::CastOps Op, BasicBlock::iterator IP)"
  },
  {
    "label": "InsertNoopCastOfTo()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "InsertNoopCastOfTo(Value *V, Type *Ty)"
  },
  {
    "label": "expandAddToGEP()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "expandAddToGEP(const SCEV *const *op_begin, const SCEV *const *op_end, PointerType *PTy, Type *Ty, Value *V)"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "expand(const SCEV *S)"
  },
  {
    "label": "expandCodeFor()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "expandCodeFor(const SCEV *SH, Type *Ty = nullptr)"
  },
  {
    "label": "getRelevantLoop()",
    "kind": "Method",
    "detail": "Function (const Loop*)",
    "insertText": "getRelevantLoop(const SCEV *)"
  },
  {
    "label": "visitConstant()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitConstant(const SCEVConstant *S)"
  },
  {
    "label": "visitTruncateExpr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "visitTruncateExpr(const SCEVTruncateExpr *S)"
  },
  {
    "label": "visitZeroExtendExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitZeroExtendExpr(const SCEVZeroExtendExpr *S)"
  },
  {
    "label": "visitSignExtendExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitSignExtendExpr(const SCEVSignExtendExpr *S)"
  },
  {
    "label": "visitAddExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitAddExpr(const SCEVAddExpr *S)"
  },
  {
    "label": "visitMulExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitMulExpr(const SCEVMulExpr *S)"
  },
  {
    "label": "visitUDivExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitUDivExpr(const SCEVUDivExpr *S)"
  },
  {
    "label": "visitAddRecExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitAddRecExpr(const SCEVAddRecExpr *S)"
  },
  {
    "label": "visitSMaxExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitSMaxExpr(const SCEVSMaxExpr *S)"
  },
  {
    "label": "visitUMaxExpr()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitUMaxExpr(const SCEVUMaxExpr *S)"
  },
  {
    "label": "visitUnknown()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "visitUnknown(const SCEVUnknown *S)"
  },
  {
    "label": "rememberInstruction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rememberInstruction(Value *I)"
  },
  {
    "label": "isNormalAddRecExprPHI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNormalAddRecExprPHI(PHINode *PN, Instruction *IncV, const Loop *L)"
  },
  {
    "label": "isExpandedAddRecExprPHI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isExpandedAddRecExprPHI(PHINode *PN, Instruction *IncV, const Loop *L)"
  },
  {
    "label": "expandAddRecExprLiterally()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "expandAddRecExprLiterally(const SCEVAddRecExpr *)"
  },
  {
    "label": "getAddRecExprPHILiterally()",
    "kind": "Method",
    "detail": "Function (PHINode*)",
    "insertText": "getAddRecExprPHILiterally(const SCEVAddRecExpr *Normalized, const Loop *L, Type *ExpandTy, Type *IntTy, Type *&TruncTy, bool &InvertStep)"
  },
  {
    "label": "expandIVInc()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "expandIVInc(PHINode *PN, Value *StepV, const Loop *L, Type *ExpandTy, Type *IntTy, bool useSubtract)"
  }
]