[
  {
    "label": "FBuildOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildOptions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEditorBuildUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBuildUtils"
  },
  {
    "label": "EAutomatedBuildBehavior",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAutomatedBuildBehavior"
  },
  {
    "label": "FEditorAutomatedBuildSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorAutomatedBuildSettings"
  },
  {
    "label": "FBuildAllHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildAllHandler"
  },
  {
    "label": "FCustomBuildType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomBuildType"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" SceneTypes . h \" # include \" RHIDefinitions . h \" struct FBuildOptions { const FName BuildGeometry ; const FName BuildVisibleGeometry ; const FName BuildLighting ; const FName BuildAIPaths ; const FName BuildSelectedAIPaths ; const FName BuildAll ; const FName BuildAllSubmit ; const FName BuildAllOnlySelectedPaths ; const FName BuildHierarchicalLOD ; const FName BuildMinimap ; const FName BuildLandscapeSplineMeshes ; const FName BuildTextureStreaming ; const FName BuildVirtualTexture ; const FName BuildAllLandscape ; } ; enum class EEditorBuildResult : uint8 { Success,Skipped,InProgress,} ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FCanDoEditorBuildDelegate, const UWorld*, FName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(EEditorBuildResult, FDoEditorBuildDelegate, UWorld*, FName)"
  },
  {
    "label": "FEditorAutomatedBuildSettings()",
    "kind": "Method",
    "detail": "Function (class FEditorBuildUtils { public : enum EAutomatedBuildBehavior { ABB_PromptOnError,ABB_FailOnError,ABB_ProceedOnError } ; struct FEditorAutomatedBuildSettings {)",
    "insertText": "FEditorAutomatedBuildSettings()"
  },
  {
    "label": "EditorAutomatedBuildAndSubmit()",
    "kind": "Method",
    "detail": "Function (EAutomatedBuildBehavior BuildErrorBehavior ; EAutomatedBuildBehavior UnableToCheckoutFilesBehavior ; EAutomatedBuildBehavior NewMapBehavior ; EAutomatedBuildBehavior FailedToSaveBehavior ; bool bUseSCC ; bool bAutoAddNewFiles ; bool bShutdownEditorOnCompletion ; bool bCheckInPackages ; TArray<FString> PackagesToCheckIn ; FString ChangeDescription ; } ; bool)",
    "insertText": "EditorAutomatedBuildAndSubmit(const FEditorAutomatedBuildSettings& BuildSettings, FText& OutErrorMessages)"
  },
  {
    "label": "EditorCanBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorCanBuild(UWorld* InWorld, FName Id)"
  },
  {
    "label": "EditorBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorBuild(UWorld* InWorld, FName Id, const bool bAllowLightingDialog = true)"
  },
  {
    "label": "UpdateTextureStreamingMaterialBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureStreamingMaterialBindings(UWorld* InWorld)"
  },
  {
    "label": "EditorBuildTextureStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorBuildTextureStreaming(UWorld* InWorld, EViewModeIndex SelectedViewMode = VMI_Unknown)"
  },
  {
    "label": "EditorBuildMaterialTextureStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorBuildMaterialTextureStreamingData(UPackage* Package)"
  },
  {
    "label": "EditorBuildVirtualTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorBuildVirtualTexture(UWorld* InWorld)"
  },
  {
    "label": "EditorBuildAllLandscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorBuildAllLandscape(UWorld* InWorld)"
  },
  {
    "label": "IsBuildingNavigationFromUserRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildingNavigationFromUserRequest()"
  },
  {
    "label": "AsyncBuildCompleted()",
    "kind": "Method",
    "detail": "Function (bBuildingNavigationFromUserRequest = false ; } void)",
    "insertText": "AsyncBuildCompleted()"
  },
  {
    "label": "IsBuildCurrentlyRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildCurrentlyRunning()"
  },
  {
    "label": "RegisterCustomBuildType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomBuildType(const FName Id, const FDoEditorBuildDelegate& DoBuild, const FName BuildAllExtensionPoint, const FText& MenuEntryLabel = FText::GetEmpty(), const FText& MenuSectionLabel = FText::GetEmpty(), bool bExternalProcess = false)"
  },
  {
    "label": "RegisterCustomBuildType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomBuildType(const FName Id, const FCanDoEditorBuildDelegate& CanDoBuild, const FDoEditorBuildDelegate& DoBuild, const FName BuildAllExtensionPoint, const FText& MenuEntryLabel = FText::GetEmpty(), const FText& MenuSectionLabel = FText::GetEmpty(), bool bExternalProcess = false)"
  },
  {
    "label": "UnregisterCustomBuildType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCustomBuildType(FName Id)"
  },
  {
    "label": "GetBuildTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildTypes(TArray<FName>& RegisteredBuildTypes)"
  },
  {
    "label": "GetBuildTypesLocalizedLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildTypesLocalizedLabels(TArray<FText>& RegisteredBuildTypesEntryLabels, TArray<FText>& RegisteredBuildTypesSectionLabels)"
  },
  {
    "label": "RunWorldPartitionBuilder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunWorldPartitionBuilder(const FString& MapToLoad, const FText& ProgressText, const FText& CancelledText, const FText& FailureText, const FString& CommandLineArguments)"
  },
  {
    "label": "LogErrorMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "LogErrorMessage(const FText& InErrorMessage, FText& OutAccumulatedErrors)"
  },
  {
    "label": "ProcessAutomatedBuildBehavior()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessAutomatedBuildBehavior(EAutomatedBuildBehavior InBehavior, const FText& InErrorMsg, FText& OutAccumulatedErrors)"
  },
  {
    "label": "PrepForAutomatedBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepForAutomatedBuild(const FEditorAutomatedBuildSettings& BuildSettings, TSet<UPackage*>& OutPkgsToSubmit, FText& OutErrorMessages)"
  },
  {
    "label": "SubmitPackagesForAutomatedBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitPackagesForAutomatedBuild(const TSet<UPackage*>& InPkgsToSubmit, const FEditorAutomatedBuildSettings& BuildSettings)"
  },
  {
    "label": "TriggerNavigationBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerNavigationBuilder(UWorld*& InOutWorld, FName Id)"
  },
  {
    "label": "WorldPartitionBuildNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WorldPartitionBuildNavigation(const FString& InLongPackageName)"
  },
  {
    "label": "TriggerHierarchicalLODBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerHierarchicalLODBuilder(UWorld* InWorld)"
  },
  {
    "label": "TriggerMinimapBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMinimapBuilder(UWorld* InWorld)"
  },
  {
    "label": "TriggerLandscapeSplineMeshesBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerLandscapeSplineMeshesBuilder(UWorld* InWorld)"
  },
  {
    "label": "FEditorBuildUtils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorBuildUtils()"
  },
  {
    "label": "FEditorBuildUtils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorBuildUtils(const FEditorBuildUtils&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEditorBuildUtils)",
    "insertText": "operator(const FEditorBuildUtils&)"
  },
  {
    "label": "FCustomBuildType()",
    "kind": "Method",
    "detail": "Function (class FBuildAllHandler ; bool bBuildingNavigationFromUserRequest ; struct FCustomBuildType { FCanDoEditorBuildDelegate CanDoBuild ; FDoEditorBuildDelegate DoBuild ; FName BuildAllExtensionPoint ; const FText MenuEntryLabel ; const FText MenuSectionLabel ; bool bExternalProcess ;)",
    "insertText": "FCustomBuildType(const FDoEditorBuildDelegate& InDoBuild, const FName InBuildAllExtensionPoint, const FText& InMenuEntryLabel, const FText& InMenuSectionLabel, bool bInExternalProcess) : DoBuild(InDoBuild) , BuildAllExtensionPoint(InBuildAllExtensionPoint) , MenuEntryLabel(InMenuEntryLabel) , MenuSectionLabel(InMenuSectionLabel) , bExternalProcess(bInExternalProcess)"
  },
  {
    "label": "FCustomBuildType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomBuildType(const FCanDoEditorBuildDelegate& InCanDoBuild, const FDoEditorBuildDelegate& InDoBuild, const FName InBuildAllExtensionPoint, const FText& InMenuEntryLabel, const FText& InMenuSectionLabel, bool bInExternalProcess) : FCustomBuildType(InDoBuild, InBuildAllExtensionPoint, InMenuEntryLabel, InMenuSectionLabel, bInExternalProcess)"
  }
]