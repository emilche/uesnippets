[
  {
    "label": "IAnimClassInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimClassInterface"
  },
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimNode_TransitionPoseEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_TransitionPoseEvaluator"
  },
  {
    "label": "FAnimationActiveTransitionEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationActiveTransitionEntry"
  },
  {
    "label": "FAnimationPotentialTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPotentialTransition"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "UAnimationStateMachineLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationStateMachineLibrary"
  },
  {
    "label": "FAnimationActiveTransitionEntry()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAnimationActiveTransitionEntry()"
  },
  {
    "label": "InitializeCustomGraphLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCustomGraphLinks(const FAnimationUpdateContext& Context, const FBakedStateExitTransition& TransitionRule)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FAnimationUpdateContext& Context, int32 CurrentStateIndex, bool &OutFinished)"
  },
  {
    "label": "UpdateCustomTransitionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomTransitionGraph(const FAnimationUpdateContext& Context, FAnimNode_StateMachine& StateMachine, int32 ActiveTransitionIndex)"
  },
  {
    "label": "EvaluateCustomTransitionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateCustomTransitionGraph(FPoseContext& Output, FAnimNode_StateMachine& StateMachine, bool IntermediatePoseIsValid, int32 ActiveTransitionIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "FAnimationPotentialTransition()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FAnimationPotentialTransition()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ConditionallyCacheBonesForState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyCacheBonesForState(int32 StateIndex, FAnimationBaseContext Context)"
  },
  {
    "label": "CacheMachineDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheMachineDescription(IAnimClassInterface* AnimBlueprintClass)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(const FAnimationBaseContext& Context, int32 NewStateIndex)"
  },
  {
    "label": "TransitionToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionToState(const FAnimationUpdateContext& Context, const FAnimationTransitionBetweenStates& TransitionInfo, const FAnimationPotentialTransition* BakedTransitionInfo = nullptr)"
  },
  {
    "label": "SetStateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateInternal(int32 NewStateIndex)"
  },
  {
    "label": "FindValidTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindValidTransition(const FAnimationUpdateContext& Context, \n\t\t\t\t\t\t\tconst FBakedAnimationState& StateInfo,\n\t\t\t\t\t\t\t/*OUT*/ FAnimationPotentialTransition& OutPotentialTransition,\n\t\t\t\t\t\t\t/*OUT*/ TArray<int32, TInlineAllocator<4>>& OutVisitedStateIndices)"
  },
  {
    "label": "UpdateTransitionStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransitionStates(const FAnimationUpdateContext& Context, FAnimationActiveTransitionEntry& Transition)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(int32 StateIndex, const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateTransitionStandardBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransitionStandardBlend(FPoseContext& Output, FAnimationActiveTransitionEntry& Transition, bool bIntermediatePoseIsValid)"
  },
  {
    "label": "EvaluateTransitionStandardBlendInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransitionStandardBlendInternal(FPoseContext& Output, FAnimationActiveTransitionEntry& Transition, const FPoseContext& PreviousStateResult, const FPoseContext& NextStateResult)"
  },
  {
    "label": "EvaluateTransitionCustomBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransitionCustomBlend(FPoseContext& Output, FAnimationActiveTransitionEntry& Transition, bool bIntermediatePoseIsValid)"
  },
  {
    "label": "GetRelevantAnimTimeRemaining()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRelevantAnimTimeRemaining(Context.AnimInstanceProxy, StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemainingFraction()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRelevantAnimTimeRemainingFraction(Context.AnimInstanceProxy, StateIndex)"
  },
  {
    "label": "GetRelevantAssetPlayerInterfaceFromState()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetRelevantAssetPlayerInterfaceFromState(Context.AnimInstanceProxy, StateInfo)"
  },
  {
    "label": "LogInertializationRequestError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogInertializationRequestError(const FAnimationUpdateContext& Context, int32 PreviousState, int32 NextState)"
  },
  {
    "label": "RequestTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestTransitionEvent(const FTransitionEvent& InTransitionEvent)"
  },
  {
    "label": "ClearTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTransitionEvents(const FName& EventName)"
  },
  {
    "label": "ClearAllTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllTransitionEvents()"
  },
  {
    "label": "QueryAndMarkTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAndMarkTransitionEvent(const int32 TransitionIndex, const FName& EventName)"
  },
  {
    "label": "ConsumeMarkedTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeMarkedTransitionEvents()"
  }
]