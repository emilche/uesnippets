[
  {
    "label": "IAnimClassInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnimClassInterface"
  },
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimNode_TransitionPoseEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_TransitionPoseEvaluator"
  },
  {
    "label": "FAnimationActiveTransitionEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationActiveTransitionEntry"
  },
  {
    "label": "FAnimationPotentialTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPotentialTransition"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "UAnimationStateMachineLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationStateMachineLibrary"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" AlphaBlend . h \" # include \" Animation / AnimStateMachineTypes . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / AnimInstance . h \" # include \" Animation / BlendProfile . h \" # include \" AnimNode_StateMachine . generated . h \" class IAnimClassInterface ; struct FAnimNode_AssetPlayerBase ; struct FAnimNode_AssetPlayerRelevancyBase ; struct FAnimNode_StateMachine ; struct FAnimNode_TransitionPoseEvaluator ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAnimationActiveTransitionEntry()",
    "kind": "Method",
    "detail": "Function (EAlphaBlendOption BlendOption ; TEnumAsByte<ETransitionLogicType::Type> LogicType ; bool bActive ; public :)",
    "insertText": "FAnimationActiveTransitionEntry()"
  },
  {
    "label": "FAnimationActiveTransitionEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimationActiveTransitionEntry(int32 NextStateID, float ExistingWeightOfNextState, int32 PreviousStateID, const FAnimationTransitionBetweenStates& ReferenceTransitionInfo, float CrossfadeTimeAdjustment)"
  },
  {
    "label": "InitializeCustomGraphLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCustomGraphLinks(const FAnimationUpdateContext& Context, const FBakedStateExitTransition& TransitionRule)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FAnimationUpdateContext& Context, int32 CurrentStateIndex, bool &OutFinished)"
  },
  {
    "label": "UpdateCustomTransitionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomTransitionGraph(const FAnimationUpdateContext& Context, FAnimNode_StateMachine& StateMachine, int32 ActiveTransitionIndex)"
  },
  {
    "label": "EvaluateCustomTransitionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateCustomTransitionGraph(FPoseContext& Output, FAnimNode_StateMachine& StateMachine, bool IntermediatePoseIsValid, int32 ActiveTransitionIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "CalculateInverseAlpha()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "CalculateInverseAlpha(EAlphaBlendOption BlendMode, float InFraction)"
  },
  {
    "label": "CalculateAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateAlpha(float InFraction)"
  },
  {
    "label": "FAnimationPotentialTransition()",
    "kind": "Method",
    "detail": "Function (float CrossfadeTimeAdjustment ; const FBakedStateExitTransition* TransitionRule ; TArray<int32,TInlineAllocator<3>> SourceTransitionIndices ; public :)",
    "insertText": "FAnimationPotentialTransition()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY()"
  },
  {
    "label": "GetCurrentState()",
    "kind": "Method",
    "detail": "Function (private : bool bFirstUpdate ; public : int32)",
    "insertText": "GetCurrentState()"
  },
  {
    "label": "IsTransitionActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransitionActive(int32 TransIndex)"
  },
  {
    "label": "FAnimNode_StateMachine()",
    "kind": "Method",
    "detail": "Function (protected : int32 CurrentState ; float ElapsedTime ; int32 EvaluatingTransitionIndex ; const FBakedAnimationStateMachine* PRIVATE_MachineDescription ; TArray<FAnimationActiveTransitionEntry> ActiveTransitionArray ; TArray<FPoseLink> StatePoseLinks ; TArray<int32> StatesUpdated ; TArray<FOnGraphStateChanged> OnGraphStatesEntered ; TArray<FOnGraphStateChanged> OnGraphStatesExited ; TArray<FTransitionEvent> QueuedTransitionEvents ; # if WITH_EDITORONLY_DATA TArray<FTransitionEvent> HandledTransitionEvents ; # endif private : TArray<FPoseContext*> StateCachedPoses ; FGraphTraversalCounter UpdateCounter ; TArray<FGraphTraversalCounter> StateCacheBoneCounters ; public :)",
    "insertText": "FAnimNode_StateMachine() : StateMachineIndexInClass(0) , MaxTransitionsPerFrame(3) , bSkipFirstUpdateTransition(true) , bReinitializeOnBecomingRelevant(true) , bCreateNotifyMetaData(true) , bAllowConduitEntryStates(false) , bFirstUpdate(true) , CurrentState(INDEX_NONE) , ElapsedTime(0.0f) , PRIVATE_MachineDescription(NULL)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "ConditionallyCacheBonesForState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyCacheBonesForState(int32 StateIndex, FAnimationBaseContext Context)"
  },
  {
    "label": "GetStateWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStateWeight(int32 StateIndex)"
  },
  {
    "label": "GetStateInfo()",
    "kind": "Method",
    "detail": "Function (const FBakedAnimationState&)",
    "insertText": "GetStateInfo(int32 StateIndex)"
  },
  {
    "label": "GetTransitionInfo()",
    "kind": "Method",
    "detail": "Function (const FAnimationTransitionBetweenStates&)",
    "insertText": "GetTransitionInfo(int32 TransIndex)"
  },
  {
    "label": "IsValidTransitionIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTransitionIndex(int32 TransitionIndex)"
  },
  {
    "label": "CacheMachineDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheMachineDescription(IAnimClassInterface* AnimBlueprintClass)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(const FAnimationBaseContext& Context, int32 NewStateIndex)"
  },
  {
    "label": "TransitionToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionToState(const FAnimationUpdateContext& Context, const FAnimationTransitionBetweenStates& TransitionInfo, const FAnimationPotentialTransition* BakedTransitionInfo = nullptr)"
  },
  {
    "label": "GetStateIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetStateIndex(FName StateName)"
  },
  {
    "label": "GetMachineDescription()",
    "kind": "Method",
    "detail": "Function (protected : const FBakedAnimationStateMachine*)",
    "insertText": "GetMachineDescription()"
  },
  {
    "label": "SetStateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateInternal(int32 NewStateIndex)"
  },
  {
    "label": "GetStateInfo()",
    "kind": "Method",
    "detail": "Function (const FBakedAnimationState&)",
    "insertText": "GetStateInfo()"
  },
  {
    "label": "GetStateIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetStateIndex(const FBakedAnimationState& StateInfo)"
  },
  {
    "label": "FindValidTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindValidTransition(const FAnimationUpdateContext& Context, const FBakedAnimationState& StateInfo, FAnimationPotentialTransition& OutPotentialTransition, TArray<int32, TInlineAllocator<4>>& OutVisitedStateIndices)"
  },
  {
    "label": "UpdateTransitionStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransitionStates(const FAnimationUpdateContext& Context, FAnimationActiveTransitionEntry& Transition)"
  },
  {
    "label": "IsAConduitState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAConduitState(int32 StateIndex)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(int32 StateIndex, const FAnimationUpdateContext& Context)"
  },
  {
    "label": "EvaluateState()",
    "kind": "Method",
    "detail": "Function (const FPoseContext&)",
    "insertText": "EvaluateState(int32 StateIndex, const FPoseContext& Context)"
  },
  {
    "label": "EvaluateTransitionStandardBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransitionStandardBlend(FPoseContext& Output, FAnimationActiveTransitionEntry& Transition, bool bIntermediatePoseIsValid)"
  },
  {
    "label": "EvaluateTransitionStandardBlendInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransitionStandardBlendInternal(FPoseContext& Output, FAnimationActiveTransitionEntry& Transition, const FPoseContext& PreviousStateResult, const FPoseContext& NextStateResult)"
  },
  {
    "label": "EvaluateTransitionCustomBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateTransitionCustomBlend(FPoseContext& Output, FAnimationActiveTransitionEntry& Transition, bool bIntermediatePoseIsValid)"
  },
  {
    "label": "GetRelevantAnimTimeRemaining()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemaining(const FAnimInstanceProxy* InAnimInstanceProxy, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemaining()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemaining(const FAnimationUpdateContext& Context, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemainingFraction()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRelevantAnimTimeRemainingFraction(const FAnimInstanceProxy* InAnimInstanceProxy, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAnimTimeRemainingFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemainingFraction(const FAnimationUpdateContext& Context, int32 StateIndex)"
  },
  {
    "label": "GetRelevantAssetPlayerInterfaceFromState()",
    "kind": "Method",
    "detail": "Function (const FAnimNode_AssetPlayerRelevancyBase*)",
    "insertText": "GetRelevantAssetPlayerInterfaceFromState(const FAnimationUpdateContext& Context, const FBakedAnimationState& StateInfo)"
  },
  {
    "label": "LogInertializationRequestError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogInertializationRequestError(const FAnimationUpdateContext& Context, int32 PreviousState, int32 NextState)"
  },
  {
    "label": "RequestTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestTransitionEvent(const FTransitionEvent& InTransitionEvent)"
  },
  {
    "label": "ClearTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTransitionEvents(const FName& EventName)"
  },
  {
    "label": "ClearAllTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllTransitionEvents()"
  },
  {
    "label": "QueryTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryTransitionEvent(const int32 TransitionIndex, const FName& EventName)"
  },
  {
    "label": "QueryAndMarkTransitionEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryAndMarkTransitionEvent(const int32 TransitionIndex, const FName& EventName)"
  },
  {
    "label": "ConsumeMarkedTransitionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeMarkedTransitionEvents()"
  }
]