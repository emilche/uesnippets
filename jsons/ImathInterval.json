[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IMATH_EXPORT_TEMPLATE_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMATH_EXPORT_TEMPLATE_TYPE"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHINTERVAL_H # define INCLUDED_IMATHINTERVAL_H # include \" ImathExport . h \" # include \" ImathNamespace . h \" # include \" ImathVec . h \" IMATH_INTERNAL_NAMESPACE_HEADER_ENTER template<class T> class IMATH_EXPORT_TEMPLATE_TYPE Interval { public : T min ; T max ; IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Interval()"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Interval(const T& point)"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14)",
    "insertText": "Interval(const T& minT, const T& maxT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE bool)",
    "insertText": "operator(const Interval<T>& src)"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE void)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "extendBy()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE void)",
    "insertText": "extendBy(const T& point)"
  },
  {
    "label": "extendBy()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE void)",
    "insertText": "extendBy(const Interval<T>& interval)"
  },
  {
    "label": "makeInfinite()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE void)",
    "insertText": "makeInfinite()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 T)",
    "insertText": "size()"
  },
  {
    "label": "center()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 T)",
    "insertText": "center()"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "intersects(const T& point)"
  },
  {
    "label": "intersects()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "intersects(const Interval<T>& interval)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "hasVolume()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "hasVolume()"
  },
  {
    "label": "isInfinite()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_CONSTEXPR14 bool)",
    "insertText": "isInfinite()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& s, const Interval<T>& v)"
  },
  {
    "label": "Interval()",
    "kind": "Method",
    "detail": "Function (min = point ; max = point ; } template<class T> IMATH_HOSTDEVICE IMATH_CONSTEXPR14 Interval<T)",
    "insertText": "Interval(const T& minV, const T& maxV)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (min = std::numeric_limits<T)",
    "insertText": "max()"
  },
  {
    "label": "lowest()",
    "kind": "Method",
    "detail": "Function (max = std::numeric_limits<T)",
    "insertText": "lowest()"
  }
]