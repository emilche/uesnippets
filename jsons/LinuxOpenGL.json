[
  {
    "label": "FLinuxOpenGL",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinuxOpenGL"
  },
  {
    "label": "InitDebugContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OpenGLThirdParty . h \" # include \" OpenGLPlatform . h \" # include \" OpenGL4 . h \" struct FLinuxOpenGL : public FOpenGL4 { void)",
    "insertText": "InitDebugContext()"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (bDebugContext =)",
    "insertText": "glIsEnabled(GL_DEBUG_OUTPUT)"
  },
  {
    "label": "LabelObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LabelObject(GLenum Type, GLuint Object, const ANSICHAR* Name)"
  },
  {
    "label": "glObjectLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glObjectLabel(Type, Object, FCStringAnsi::Strlen(Name), Name)"
  },
  {
    "label": "PushGroupMarker()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PushGroupMarker(const ANSICHAR* Name)"
  },
  {
    "label": "glPushDebugGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPushDebugGroup(GL_DEBUG_SOURCE_APPLICATION, 1, FCStringAnsi::Strlen(Name), Name)"
  },
  {
    "label": "PopGroupMarker()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopGroupMarker()"
  },
  {
    "label": "glPopDebugGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPopDebugGroup()"
  },
  {
    "label": "TexStorage2D()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "TexStorage2D(GLenum Target, GLint Levels, GLint InternalFormat, GLsizei Width, GLsizei Height, GLenum Format, GLenum Type, ETextureCreateFlags Flags)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage2D(Target, Levels, InternalFormat, Width, Height)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage3D(Target, Levels, InternalFormat, Width, Height, Depth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { const bool bArrayTexture = Target = = GL_TEXTURE_2D_ARRAY | | Target = = GL_TEXTURE_CUBE_MAP_ARRAY ;)",
    "insertText": "for(uint32 MipIndex = 0; MipIndex < uint32(Levels); MipIndex++)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexImage3D(Target, MipIndex, InternalFormat, FMath::Max<uint32>(1, (Width >> MipIndex)), FMath::Max<uint32>(1, (Height >> MipIndex)), (bArrayTexture) ? Depth : FMath::Max<uint32>(1, (Depth >> MipIndex)), 0, Format, Type, NULL)"
  },
  {
    "label": "CopyImageSubData()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CopyImageSubData(GLuint SrcName, GLenum SrcTarget, GLint SrcLevel, GLint SrcX, GLint SrcY, GLint SrcZ, GLuint DstName, GLenum DstTarget, GLint DstLevel, GLint DstX, GLint DstY, GLint DstZ, GLsizei Width, GLsizei Height, GLsizei Depth)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyImageSubData(SrcName, SrcTarget, SrcLevel, SrcX, SrcY, SrcZ, DstName, DstTarget, DstLevel, DstX, DstY, DstZ, Width, Height, Depth)"
  },
  {
    "label": "ProcessExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessExtensions(const FString& ExtensionsString)"
  },
  {
    "label": "ProcessExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExtensions(ExtensionsString)"
  },
  {
    "label": "VendorName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "VendorName(ANSI_TO_TCHAR((const ANSICHAR*)glGetString(GL_VENDOR)))"
  }
]