[
  {
    "label": "FAnimNode_AssetPlayerRelevancyBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerRelevancyBase"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimNodeBase . h \" # include \" AnimNode_RelevantAssetPlayerBase . generated . h \")",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API virtual class UAnimationAsset* GetAnimAsset()"
  },
  {
    "label": "GetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAccumulatedTime()"
  },
  {
    "label": "SetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccumulatedTime(float NewTime)"
  },
  {
    "label": "GetCurrentAssetLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAssetLength()"
  },
  {
    "label": "GetCurrentAssetTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAssetTime()"
  },
  {
    "label": "GetCurrentAssetTimePlayRateAdjusted()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAssetTimePlayRateAdjusted()"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "GetIgnoreForRelevancyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreForRelevancyTest()"
  },
  {
    "label": "SetIgnoreForRelevancyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIgnoreForRelevancyTest(bool bInIgnoreForRelevancyTest)"
  },
  {
    "label": "GetCachedBlendWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCachedBlendWeight()"
  },
  {
    "label": "ClearCachedBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedBlendWeight()"
  },
  {
    "label": "GetDeltaTimeRecord()",
    "kind": "Method",
    "detail": "Function (const FDeltaTimeRecord*)",
    "insertText": "GetDeltaTimeRecord()"
  }
]