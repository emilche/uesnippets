[
  {
    "label": "RTCCertificateGeneratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTCCertificateGeneratorInterface"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_RTC_CERTIFICATE_GENERATOR_H_ # define RTC_BASE_RTC_CERTIFICATE_GENERATOR_H_ # include<stdint . h> # include \" absl / functional / any_invocable . h \" # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / rtc_certificate . h \" # include \" rtc_base / ssl_identity . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread . h \" namespace rtc { class RTCCertificateGeneratorInterface { public : using Callback = absl::AnyInvocable<)",
    "insertText": "void(scoped_refptr<RTCCertificate>)"
  },
  {
    "label": "RTCCertificateGeneratorInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RTCCertificateGeneratorInterface()"
  },
  {
    "label": "GenerateCertificateAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCertificateAsync(const KeyParams& key_params, const absl::optional<uint64_t>& expires_ms, Callback callback)"
  },
  {
    "label": "GenerateCertificate()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT RTCCertificateGenerator : public RTCCertificateGeneratorInterface { public : scoped_refptr<RTCCertificate>)",
    "insertText": "GenerateCertificate(const KeyParams& key_params, const absl::optional<uint64_t>& expires_ms)"
  },
  {
    "label": "RTCCertificateGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTCCertificateGenerator(Thread* signaling_thread, Thread* worker_thread)"
  },
  {
    "label": "RTCCertificateGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RTCCertificateGenerator()"
  }
]