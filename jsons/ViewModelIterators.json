[
  {
    "label": "TTypedIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedIterator"
  },
  {
    "label": "FViewModelIterationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelIterationState"
  },
  {
    "label": "FViewModelSubListIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelSubListIterator"
  },
  {
    "label": "FViewModelListIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelListIterator"
  },
  {
    "label": "FViewModelVariantIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelVariantIterator"
  },
  {
    "label": "FParentFirstChildIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentFirstChildIterator"
  },
  {
    "label": "FParentModelIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentModelIterator"
  },
  {
    "label": "TTypedIteratorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedIteratorBase"
  },
  {
    "label": "FViewModelIterationState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Invoke . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" namespace UE { namespace Sequencer { template<T,IteratorType> struct TTypedIterator ; struct FViewModelIterationState { FViewModelPtr ViewModel ;)",
    "insertText": "FViewModelIterationState()"
  },
  {
    "label": "FViewModelIterationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModelIterationState(FViewModelPtr&& InViewModel)"
  },
  {
    "label": "FViewModelIterationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModelIterationState(const FViewModelIterationState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FViewModelIterationState&)",
    "insertText": "operator(const FViewModelIterationState&)"
  },
  {
    "label": "FViewModelIterationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModelIterationState(FViewModelIterationState&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FViewModelIterationState&)",
    "insertText": "operator(FViewModelIterationState&&)"
  },
  {
    "label": "FViewModelSubListIterator()",
    "kind": "Method",
    "detail": "Function (} ; struct FViewModelSubListIterator {)",
    "insertText": "FViewModelSubListIterator()"
  },
  {
    "label": "FViewModelSubListIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModelSubListIterator(const FViewModelListHead* List) : State(List ? List->GetHead() : nullptr)"
  },
  {
    "label": "FViewModelSubListIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewModelSubListIterator(TSharedPtr<FViewModel> InStart) : State(InStart)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FViewModelSubListIterator& A, const FViewModelSubListIterator& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FViewModel*)",
    "insertText": "operator()"
  },
  {
    "label": "FViewModelIterationState()",
    "kind": "Method",
    "detail": "Function (State =)",
    "insertText": "FViewModelIterationState(State.ViewModel->GetNextSibling())"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (} FViewModelPtr)",
    "insertText": "GetCurrentItem()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Add(*Temp)"
  },
  {
    "label": "ToArray()",
    "kind": "Method",
    "detail": "Function (} } TArray<FViewModelPtr>)",
    "insertText": "ToArray()"
  },
  {
    "label": "ToArray()",
    "kind": "Method",
    "detail": "Function (TArray<FViewModelPtr> Temp ;)",
    "insertText": "ToArray(Temp)"
  },
  {
    "label": "FViewModelListIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewModelListIterator(const TSharedPtr<FViewModel>& InModel, EViewModelListType InFilter = EViewModelListType::Everything) : NextList(InModel ? InModel->FirstChildListHead : nullptr) , Filter(InFilter)"
  },
  {
    "label": "FindNextValidIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNextValidIterator()"
  },
  {
    "label": "FViewModelListIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewModelListIterator(const FViewModelListHead* InListHead, EViewModelListType InFilter = EViewModelListType::Everything) : NextList(InListHead) , Filter(InFilter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FViewModelListIterator& A, const FViewModelListIterator& B)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} FViewModelListIterator)",
    "insertText": "begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FViewModelPtr Item =* Temp ;)",
    "insertText": "if(Invoke(Proj, *Item) == Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextList = NextList -> NextListHead ; })",
    "insertText": "if(NextList)"
  },
  {
    "label": "FViewModelSubListIterator()",
    "kind": "Method",
    "detail": "Function (ListIterator =)",
    "insertText": "FViewModelSubListIterator(NextList)"
  },
  {
    "label": "FViewModelVariantIterator()",
    "kind": "Method",
    "detail": "Function (NextList = NextList -> NextListHead ; } } } private : const FViewModelListHead* NextList ; FViewModelSubListIterator ListIterator ; EViewModelListType Filter ; } ; struct FViewModelVariantIterator {)",
    "insertText": "FViewModelVariantIterator() : Value(nullptr) , Data(nullptr) , ArrayProjection(nullptr) , ArrayIndex(0) , ArrayNum(0)"
  },
  {
    "label": "FViewModelVariantIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewModelVariantIterator(const FViewModelListHead* DirectList) : Value(DirectList->GetHead()) , Data(DirectList) , ArrayProjection(nullptr) , ArrayIndex(0) , ArrayNum(0)"
  },
  {
    "label": "FViewModelVariantIterator()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FViewModelVariantIterator(const TArray<TWeakViewModelPtr<T>>* InWeakArrayView) : Data(InWeakArrayView->GetData()) , ArrayIndex(-1) , ArrayNum(InWeakArrayView->Num())"
  },
  {
    "label": "FViewModelVariantIterator()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FViewModelVariantIterator(const TArray<TViewModelPtr<T>>* InStrongArrayView) : Data(InStrongArrayView->GetData()) , ArrayIndex(-1) , ArrayNum(InStrongArrayView->Num())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Value = nullptr ;)",
    "insertText": "while(!Value && ArrayIndex < ArrayNum-1)"
  },
  {
    "label": "ArrayProjection()",
    "kind": "Method",
    "detail": "Function (+ + ArrayIndex ; Value =)",
    "insertText": "ArrayProjection(ArrayIndex, Data)"
  },
  {
    "label": "GetNextSibling()",
    "kind": "Method",
    "detail": "Function (} } else { Value = Value ->)",
    "insertText": "GetNextSibling()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FViewModelVariantIterator& A, const FViewModelVariantIterator& B)"
  },
  {
    "label": "ProjectWeak()",
    "kind": "Method",
    "detail": "Function (FViewModelVariantIterator List ; List . Data = Data ; return List ; } private : template<T> TSharedPtr<FViewModel>)",
    "insertText": "ProjectWeak(int32 Index, const void* InData)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TWeakPtr<T>* DataPtr = static_cast<const TWeakPtr<)",
    "insertText": "T(InData)"
  },
  {
    "label": "ProjectStrong()",
    "kind": "Method",
    "detail": "Function (} template<T> TSharedPtr<FViewModel>)",
    "insertText": "ProjectStrong(int32 Index, const void* InData)"
  },
  {
    "label": "FParentFirstChildIterator()",
    "kind": "Method",
    "detail": "Function (FViewModelPtr Value ; const void* Data ; ProjectionType ArrayProjection ; int32 ArrayIndex ; int32 ArrayNum ; } ; struct FParentFirstChildIterator {)",
    "insertText": "FParentFirstChildIterator(EViewModelListType InFilter = EViewModelListType::Everything) : Filter(InFilter) , DepthLimit(-1) , bIgnoreCurrentChildren(false)"
  },
  {
    "label": "FParentFirstChildIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FParentFirstChildIterator(const TSharedPtr<FViewModel>& StartAt, bool bIncludeThis = false, EViewModelListType InFilter = EViewModelListType::Everything)"
  },
  {
    "label": "IterateToNextSibling()",
    "kind": "Method",
    "detail": "Function (bIgnoreCurrentChildren = false ;)",
    "insertText": "IterateToNextSibling()"
  },
  {
    "label": "IterateToNext()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "IterateToNext()"
  },
  {
    "label": "SetMaxDepth()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetMaxDepth()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (DepthLimit = IterStack .)",
    "insertText": "Num()"
  },
  {
    "label": "SetMaxDepth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxDepth(int32 InDepthLimit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DepthLimit = InDepthLimit ; } bool)",
    "insertText": "operator(const FParentFirstChildIterator& A, const FParentFirstChildIterator& B)"
  },
  {
    "label": "IterateToNextChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateToNextChild()"
  },
  {
    "label": "FParentModelIterator()",
    "kind": "Method",
    "detail": "Function (protected : FViewModelPtr CurrentItem ; TArray<FViewModelListIterator,TInlineAllocator<8>> IterStack ; EViewModelListType Filter ; int32 DepthLimit ; bool bIgnoreCurrentChildren ; } ; struct FParentModelIterator {)",
    "insertText": "FParentModelIterator()"
  },
  {
    "label": "FParentModelIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParentModelIterator(TSharedPtr<FViewModel> StartAtChild, bool bIncludeThis = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Node = StartAtChild ; } else)",
    "insertText": "if(StartAtChild)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (Node = StartAtChild ->)",
    "insertText": "GetParent()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FParentModelIterator& A, const FParentModelIterator& B)"
  },
  {
    "label": "TTypedIteratorBase()",
    "kind": "Method",
    "detail": "Function (} protected : FViewModelPtr Node ; } ; template<T,IteratorType> struct TTypedIteratorBase : public IteratorType { template<. . . ArgTypes>)",
    "insertText": "TTypedIteratorBase(ArgTypes&&... InArgs) : IteratorType(Forward<ArgTypes>(InArgs)...)"
  },
  {
    "label": "GetCastResultOrContinue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCastResultOrContinue()"
  },
  {
    "label": "ToArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToArray(TArray<TViewModelPtr<T>>& OutArray)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TTypedIterator<T,IteratorType>)",
    "insertText": "end()"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (TypedValue =)",
    "insertText": "GetCurrentItem()->template CastThisShared<T>()"
  },
  {
    "label": "TTypedIterator()",
    "kind": "Method",
    "detail": "Function (} } TViewModelPtr<T> TypedValue ; } ; template<T,IteratorType> struct TTypedIterator : TTypedIteratorBase<T,IteratorType> { template<. . . ArgTypes>)",
    "insertText": "TTypedIterator(ArgTypes&&... InArgs) : TTypedIteratorBase<T, IteratorType>(Forward<ArgTypes>(InArgs)...)"
  },
  {
    "label": "TTypedIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TTypedIterator<T,FParentFirstChildIterator> : TTypedIteratorBase<T,FParentFirstChildIterator> { template<. . . ArgTypes>)",
    "insertText": "TTypedIterator(ArgTypes&&... InArgs) : TTypedIteratorBase<T, FParentFirstChildIterator>(Forward<ArgTypes>(InArgs)...)"
  }
]