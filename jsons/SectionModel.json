[
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "ITrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITrackExtension"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "FOverlappingSections",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingSections"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelHandle . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" MVVM / Extensions / ILayerBarExtension . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" # include \" MVVM / Extensions / IGeometryExtension . h \" # include \" MVVM / Extensions / ISelectableExtension . h \" # include \" MVVM / Extensions / ISnappableExtension . h \" # include \" MVVM / Extensions / IDraggableTrackAreaExtension . h \" # include \" MVVM / Extensions / IStretchableExtension . h \" # include \" MVVM / Extensions / LinkedOutlinerExtension . h \" # include \" MVVM / Extensions / IConditionableExtension . h \" # include \" Delegates / DelegateCombinations . h \" # include \" EventHandlers / ISignedObjectEventHandler . h \" # include \" EventHandlers / ISectionEventHandler . h \" class ISequencerSection ; class UMovieSceneSection ; namespace UE { namespace Sequencer { class ITrackExtension ; class FChannelModel ; struct FOverlappingSections ; class FSectionModel : public FViewModel,public FLinkedOutlinerExtension,public ILayerBarExtension,public ITrackLaneExtension,public ISelectableExtension,public ISnappableExtension,public IDraggableTrackAreaExtension,public IStretchableExtension,public IConditionableExtension,public UE::MovieScene::TIntrusiveEventHandler<UE::MovieScene::ISignedObjectEventHandler>,public UE::MovieScene::TIntrusiveEventHandler<UE::MovieScene::ISectionEventHandler> { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSectionModel, FViewModel , FLinkedOutlinerExtension , ILayerBarExtension , ITrackLaneExtension , ISelectableExtension , ISnappableExtension , IDraggableTrackAreaExtension , IStretchableExtension , IConditionableExtension)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnModelUpdated, FSectionModel*) UE_DEPRECATED(5.5, \"This member is no longer supported, please subscribe to UMovieSceneSignedObject::OnModifiedDirectly.\")"
  },
  {
    "label": "FSectionModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionModel(UMovieSceneSection* InSection, TSharedPtr<ISequencerSection> InSectionInterface)"
  },
  {
    "label": "FSectionModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSectionModel()"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetRange()"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "GetSection()"
  },
  {
    "label": "GetSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerSection>)",
    "insertText": "GetSectionInterface()"
  },
  {
    "label": "GetParentTrackModel()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<ITrackExtension>)",
    "insertText": "GetParentTrackModel()"
  },
  {
    "label": "GetParentTrackExtension()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<ITrackExtension>)",
    "insertText": "GetParentTrackExtension()"
  },
  {
    "label": "GetUnderlappingSections()",
    "kind": "Method",
    "detail": "Function (TArray<FOverlappingSections>)",
    "insertText": "GetUnderlappingSections()"
  },
  {
    "label": "GetEasingSegments()",
    "kind": "Method",
    "detail": "Function (TArray<FOverlappingSections>)",
    "insertText": "GetEasingSegments()"
  },
  {
    "label": "GetPreRollFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPreRollFrames()"
  },
  {
    "label": "GetPostRollFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPostRollFrames()"
  },
  {
    "label": "GetLayerBarRange()",
    "kind": "Method",
    "detail": "Function (public : TRange<FFrameNumber>)",
    "insertText": "GetLayerBarRange()"
  },
  {
    "label": "OffsetLayerBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetLayerBar(FFrameNumber Amount)"
  },
  {
    "label": "CreateTrackLaneView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITrackLaneWidget>)",
    "insertText": "CreateTrackLaneView(const FCreateTrackLaneViewParams& InParams)"
  },
  {
    "label": "ArrangeVirtualTrackLaneView()",
    "kind": "Method",
    "detail": "Function (FTrackLaneVirtualAlignment)",
    "insertText": "ArrangeVirtualTrackLaneView()"
  },
  {
    "label": "IsSelectable()",
    "kind": "Method",
    "detail": "Function (ESelectionIntent)",
    "insertText": "IsSelectable()"
  },
  {
    "label": "AddToSnapField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSnapField(const ISnapCandidate& Candidate, ISnapField& SnapField)"
  },
  {
    "label": "OnModifiedDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModifiedDirectly(UMovieSceneSignedObject*)"
  },
  {
    "label": "OnRowChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRowChanged(UMovieSceneSection*)"
  },
  {
    "label": "CanDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDrag()"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDrag(IDragOperation& DragOperation)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(IDragOperation& DragOperation)"
  },
  {
    "label": "OnInitiateStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitiateStretch(IStretchOperation& StretchOperation, EStretchConstraint Constraint, FStretchParameters* InOutGlobalParameters)"
  },
  {
    "label": "OnBeginStretch()",
    "kind": "Method",
    "detail": "Function (EStretchResult)",
    "insertText": "OnBeginStretch(const IStretchOperation& StretchOperation, const FStretchScreenParameters& ScreenParameters, FStretchParameters* InOutParameters)"
  },
  {
    "label": "OnStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStretch(const IStretchOperation& StretchOperation, const FStretchScreenParameters& ScreenParameters, FStretchParameters* InOutParameters)"
  },
  {
    "label": "OnEndStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndStretch(const IStretchOperation& StretchOperation, const FStretchScreenParameters& ScreenParameters, FStretchParameters* InOutParameters)"
  },
  {
    "label": "GetCondition()",
    "kind": "Method",
    "detail": "Function (const UMovieSceneCondition*)",
    "insertText": "GetCondition()"
  },
  {
    "label": "GetConditionState()",
    "kind": "Method",
    "detail": "Function (EConditionableConditionState)",
    "insertText": "GetConditionState()"
  },
  {
    "label": "SetConditionEditorForceTrue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConditionEditorForceTrue(bool bEditorForceTrue)"
  },
  {
    "label": "UpdateCachedData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateCachedData()"
  }
]