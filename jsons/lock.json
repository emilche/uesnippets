[
  {
    "label": "LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LOCKABLE"
  },
  {
    "label": "ConditionVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConditionVariable"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNCHRONIZATION_LOCK_H_ # define BASE_SYNCHRONIZATION_LOCK_H_ # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / synchronization / lock_impl . h \" # include \" base / thread_annotations . h \" # include \" build / build_config . h \" # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (class LOCKABLE BASE_EXPORT Lock { public : # if !)",
    "insertText": "DCHECK_IS_ON() Lock() : lock_()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Lock(const Lock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Lock&)",
    "insertText": "operator(const Lock&)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Lock()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Acquire() EXCLUSIVE_LOCK_FUNCTION()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release() UNLOCK_FUNCTION()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (lock_ .)",
    "insertText": "Unlock()"
  },
  {
    "label": "Try()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Try() EXCLUSIVE_TRYLOCK_FUNCTION(true)"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssertAcquired() const ASSERT_EXCLUSIVE_LOCK()"
  },
  {
    "label": "Try()",
    "kind": "Method",
    "detail": "Function (bool rv = lock_ .)",
    "insertText": "Try()"
  },
  {
    "label": "HandlesMultipleThreadPriorities()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HandlesMultipleThreadPriorities()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) return internal::LockImpl::PriorityInheritanceAvailable()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# else # error Unsupported platform # endif } class ConditionVariable ; private : # if)",
    "insertText": "DCHECK_IS_ON() void CheckHeldAndUnmark()"
  },
  {
    "label": "CheckUnheldAndMark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckUnheldAndMark()"
  }
]