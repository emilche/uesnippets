[
  {
    "label": "UBlueprintSetLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintSetLibrary"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Script . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealType . h \" # include \" UObject / ScriptMacros . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" BlueprintSetLibrary . generated . h \")",
    "insertText": "UCLASS(meta=(BlueprintThreadSafe), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, CustomThunk, meta=(DisplayName = \"Add\", CompactNodeTitle = \"ADD\", SetParam = \"TargetSet|NewItem\", AutoCreateRefTerm = \"NewItem\"), Category=\"Utilities|Set\") static ENGINE_API void Set_Add(const TSet<int32>& TargetSet, const int32& NewItem)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FUNCTION(execSet_Add)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (Stack . MostRecentProperty = nullptr ; Stack . StepCompiledIn<)",
    "insertText": "FSetProperty(NULL)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (void* SetAddr = Stack . MostRecentPropertyAddress ; FSetProperty* SetProperty = CastField<)",
    "insertText": "FSetProperty(Stack.MostRecentProperty)"
  },
  {
    "label": "GetElementSize()",
    "kind": "Method",
    "detail": "Function (ArrayDim)",
    "insertText": "GetElementSize()"
  },
  {
    "label": "FMemory_Alloca()",
    "kind": "Method",
    "detail": "Function (void* StorageSpace =)",
    "insertText": "FMemory_Alloca(PropertySize)"
  },
  {
    "label": "InitializeValue()",
    "kind": "Method",
    "detail": "Function (ElementProp ->)",
    "insertText": "InitializeValue(StorageSpace)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (Stack . MostRecentPropertyAddress = nullptr ; Stack . MostRecentPropertyContainer = nullptr ; Stack . StepCompiledIn<)",
    "insertText": "FProperty(StorageSpace)"
  },
  {
    "label": "GenericSet_Add()",
    "kind": "Method",
    "detail": "Function (void* ItemPtr = StorageSpace ; P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_Add(SetAddr, SetProperty, ItemPtr)"
  },
  {
    "label": "DestroyValue()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; ElementProp ->)",
    "insertText": "DestroyValue(StorageSpace)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_FUNCTION(execSet_AddItems)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } Stack . MostRecentProperty = nullptr ; Stack . StepCompiledIn<)",
    "insertText": "FArrayProperty(NULL)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (void* TargetArrayAddr = Stack . MostRecentPropertyAddress ; FArrayProperty* TargetArrayProperty = CastField<)",
    "insertText": "FArrayProperty(Stack.MostRecentProperty)"
  },
  {
    "label": "GenericSet_AddItems()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_AddItems(SetAddr, SetProperty, TargetArrayAddr, TargetArrayProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Remove)"
  },
  {
    "label": "P_NATIVE_BEGIN()",
    "kind": "Method",
    "detail": "Function (void* ItemPtr = StorageSpace ; P_FINISH ;)",
    "insertText": "P_NATIVE_BEGIN(bool*)RESULT_PARAM = GenericSet_Remove(SetAddr, SetProperty, ItemPtr)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_FUNCTION(execSet_RemoveItems)"
  },
  {
    "label": "GenericSet_RemoveItems()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_RemoveItems(SetAddr, SetProperty, TargetArrayAddr, TargetArrayProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_ToArray)"
  },
  {
    "label": "GenericSet_ToArray()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_ToArray(SetAddr, SetProperty, TargetArrayAddr, TargetArrayProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Clear)"
  },
  {
    "label": "GenericSet_Clear()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_Clear(SetAddr, SetProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Length)"
  },
  {
    "label": "P_NATIVE_BEGIN()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ;)",
    "insertText": "P_NATIVE_BEGIN(int32*)RESULT_PARAM = GenericSet_Length(SetAddr, SetProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Contains)"
  },
  {
    "label": "P_NATIVE_BEGIN()",
    "kind": "Method",
    "detail": "Function (void* ItemToFindPtr = StorageSpace ; P_FINISH ;)",
    "insertText": "P_NATIVE_BEGIN(bool*)RESULT_PARAM = GenericSet_Contains(SetAddr, SetProperty, ItemToFindPtr)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_FUNCTION(execSet_IsEmpty)"
  },
  {
    "label": "FSetProperty()",
    "kind": "Method",
    "detail": "Function (Stack . MostRecentProperty = nullptr ; Stack . StepCompiledIn<)",
    "insertText": "FSetProperty(nullptr)"
  },
  {
    "label": "P_NATIVE_BEGIN()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ;)",
    "insertText": "P_NATIVE_BEGIN(bool*)RESULT_PARAM = GenericSet_IsEmpty(SetAddr, SetProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_IsNotEmpty)"
  },
  {
    "label": "P_NATIVE_BEGIN()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ;)",
    "insertText": "P_NATIVE_BEGIN(bool*)RESULT_PARAM = GenericSet_IsNotEmpty(SetAddr, SetProperty)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Intersection)"
  },
  {
    "label": "GenericSet_Intersect()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_Intersect(SetAddrA, SetPropertyA, SetAddrB, SetPropertyB, SetAddrResult, SetPropertyResult)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Union)"
  },
  {
    "label": "GenericSet_Union()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_Union(SetAddrA, SetPropertyA, SetAddrB, SetPropertyB, SetAddrResult, SetPropertyResult)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSet_Difference)"
  },
  {
    "label": "GenericSet_Difference()",
    "kind": "Method",
    "detail": "Function (Stack . bArrayContextFailed = true ; return ; } P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_Difference(SetAddrA, SetPropertyA, SetAddrB, SetPropertyB, SetAddrResult, SetPropertyResult)"
  },
  {
    "label": "DECLARE_FUNCTION()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; })",
    "insertText": "DECLARE_FUNCTION(execSetSetPropertyByName)"
  },
  {
    "label": "P_GET_OBJECT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P_GET_OBJECT(UObject, OwnerObject)"
  },
  {
    "label": "P_GET_PROPERTY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P_GET_PROPERTY(FNameProperty, SetPropertyName)"
  },
  {
    "label": "GenericSet_SetSetPropertyByName()",
    "kind": "Method",
    "detail": "Function (void* SrcSetAddr = Stack . MostRecentPropertyAddress ; P_FINISH ; P_NATIVE_BEGIN ;)",
    "insertText": "GenericSet_SetSetPropertyByName(OwnerObject, SetPropertyName, SrcSetAddr)"
  },
  {
    "label": "GenericSet_Add()",
    "kind": "Method",
    "detail": "Function (P_NATIVE_END ; } void)",
    "insertText": "GenericSet_Add(const void* TargetSet, const FSetProperty* SetProperty, const void* ItemPtr)"
  },
  {
    "label": "GenericSet_AddItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_AddItems(const void* TargetSet, const FSetProperty* SetProperty, const void* TargetArray, const FArrayProperty* ArrayProperty)"
  },
  {
    "label": "GenericSet_Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_Remove(const void* TargetSet, const FSetProperty* SetProperty, const void* ItemPtr)"
  },
  {
    "label": "GenericSet_RemoveItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_RemoveItems(const void* TargetSet, const FSetProperty* SetProperty, const void* TargetArray, const FArrayProperty* ArrayProperty)"
  },
  {
    "label": "GenericSet_ToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_ToArray(const void* TargetSet, const FSetProperty* SetProperty, void* TargetArray, const FArrayProperty* ArrayProperty)"
  },
  {
    "label": "GenericSet_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Clear(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericSet_Length(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_Contains(const void* TargetSet, const FSetProperty* SetProperty, const void* ItemToFind)"
  },
  {
    "label": "GenericSet_IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_IsEmpty(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_IsNotEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_IsNotEmpty(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_Intersect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Intersect(const void* SetA, const FSetProperty* SetPropertyA, const void* SetB, const FSetProperty* SetPropertyB, const void* SetResult, const FSetProperty* SetPropertyResult)"
  },
  {
    "label": "GenericSet_Union()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Union(const void* SetA, const FSetProperty* SetPropertyA, const void* SetB, const FSetProperty* SetPropertyB, const void* SetResult, const FSetProperty* SetPropertyResult)"
  },
  {
    "label": "GenericSet_Difference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Difference(const void* SetA, const FSetProperty* SetPropertyA, const void* SetB, const FSetProperty* SetPropertyB, const void* SetResult, const FSetProperty* SetPropertyResult)"
  },
  {
    "label": "GenericSet_SetSetPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_SetSetPropertyByName(UObject* OwnerObject, FName SetPropertyName, const void* SrcSetAddr)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (private : int32 MaxSupportedSetSize = TNumericLimits<int32)",
    "insertText": "Max()"
  }
]