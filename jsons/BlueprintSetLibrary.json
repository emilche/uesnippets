[
  {
    "label": "UBlueprintSetLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintSetLibrary"
  },
  {
    "label": "Set_Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_Add(const TSet<int32>& TargetSet, const int32& NewItem)"
  },
  {
    "label": "Set_AddItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_AddItems(const TSet<int32>& TargetSet, const TArray<int32>& NewItems)"
  },
  {
    "label": "Set_Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set_Remove(const TSet<int32>& TargetSet, const int32& Item)"
  },
  {
    "label": "Set_IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set_IsEmpty(const TSet<int32>& TargetSet)"
  },
  {
    "label": "Set_IsNotEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set_IsNotEmpty(const TSet<int32>& TargetSet)"
  },
  {
    "label": "Set_RemoveItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_RemoveItems(const TSet<int32>& TargetSet, const  TArray<int32>& Items)"
  },
  {
    "label": "Set_ToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_ToArray(const TSet<int32>& A, TArray<int32>& Result)"
  },
  {
    "label": "Set_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_Clear(const TSet<int32>& TargetSet)"
  },
  {
    "label": "Set_Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Set_Length(const TSet<int32>& TargetSet)"
  },
  {
    "label": "Set_Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Set_Contains(const TSet<int32>& TargetSet, const int32& ItemToFind)"
  },
  {
    "label": "Set_Intersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_Intersection(const TSet<int32>& A, const TSet<int32>& B, TSet<int32>& Result )"
  },
  {
    "label": "Set_Union()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_Union(const TSet<int32>& A, const TSet<int32>& B, TSet<int32>& Result )"
  },
  {
    "label": "Set_Difference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set_Difference(const TSet<int32>& A, const TSet<int32>& B, TSet<int32>& Result )"
  },
  {
    "label": "SetSetPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSetPropertyByName(UObject* Object, FName PropertyName, const TSet<int32>& Value)"
  },
  {
    "label": "GenericSet_Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Add(const void* TargetSet, const FSetProperty* SetProperty, const void* ItemPtr)"
  },
  {
    "label": "GenericSet_AddItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_AddItems(const void* TargetSet, const FSetProperty* SetProperty, const void* TargetArray, const FArrayProperty* ArrayProperty)"
  },
  {
    "label": "GenericSet_Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_Remove(const void* TargetSet, const FSetProperty* SetProperty, const void* ItemPtr)"
  },
  {
    "label": "GenericSet_RemoveItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_RemoveItems(const void* TargetSet, const FSetProperty* SetProperty, const void* TargetArray, const FArrayProperty* ArrayProperty)"
  },
  {
    "label": "GenericSet_ToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_ToArray(const void* TargetSet, const FSetProperty* SetProperty, void* TargetArray, const FArrayProperty* ArrayProperty)"
  },
  {
    "label": "GenericSet_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Clear(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericSet_Length(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_Contains(const void* TargetSet, const FSetProperty* SetProperty, const void* ItemToFind)"
  },
  {
    "label": "GenericSet_IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_IsEmpty(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_IsNotEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericSet_IsNotEmpty(const void* TargetSet, const FSetProperty* SetProperty)"
  },
  {
    "label": "GenericSet_Intersect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Intersect(const void* SetA, const FSetProperty* SetPropertyA, const void* SetB, const FSetProperty* SetPropertyB, const void* SetResult, const FSetProperty* SetPropertyResult)"
  },
  {
    "label": "GenericSet_Union()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Union(const void* SetA, const FSetProperty* SetPropertyA, const void* SetB, const FSetProperty* SetPropertyB, const void* SetResult, const FSetProperty* SetPropertyResult)"
  },
  {
    "label": "GenericSet_Difference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_Difference(const void* SetA, const FSetProperty* SetPropertyA, const void* SetB, const FSetProperty* SetPropertyB, const void* SetResult, const FSetProperty* SetPropertyResult)"
  },
  {
    "label": "GenericSet_SetSetPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericSet_SetSetPropertyByName(UObject* OwnerObject, FName SetPropertyName, const void* SrcSetAddr)"
  }
]