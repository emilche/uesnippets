[
  {
    "label": "TSphericalFibonacci",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSphericalFibonacci"
  },
  {
    "label": "TFibonacciLattice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFibonacciLattice"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "THemisphericalFibonacci",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THemisphericalFibonacci"
  },
  {
    "label": "TSphericalFibonacci()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" MatrixTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TSphericalFibonacci { public : int32 N = 6 4 ;)",
    "insertText": "TSphericalFibonacci(int32 NumPoints = 64) : N(NumPoints)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "PHI()",
    "kind": "Method",
    "detail": "Function (const RealType)",
    "insertText": "PHI(TMathUtil<RealType>::Sqrt(5.0) + 1.0)"
  },
  {
    "label": "div()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "div(RealType)"
  },
  {
    "label": "TwoPi()",
    "kind": "Method",
    "detail": "Function (RealType phi = TMathUtil<RealType)",
    "insertText": "TwoPi(div - TMathUtil<RealType>::Floor(div))"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (RealType cos_phi = TMathUtil<RealType)",
    "insertText": "Cos(phi), sin_phi = TMathUtil<RealType>::Sin(phi)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "z(2.0 * (RealType)Index + 1.0) / (RealType)"
  },
  {
    "label": "ACos()",
    "kind": "Method",
    "detail": "Function (RealType theta = TMathUtil<RealType)",
    "insertText": "ACos(z)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (RealType sin_theta = TMathUtil<RealType)",
    "insertText": "Sin(theta)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindIndex(const TVector<RealType>& P)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (RealType phi = TMathUtil<RealType)",
    "insertText": "Min(TMathUtil<RealType>::Atan2(P.Y, P.X), TMathUtil<RealType>::Pi)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RealType cosTheta = P . Z ; RealType k = TMathUtil<RealType)",
    "insertText": "Max(2.0, TMathUtil<RealType>::Floor( TMathUtil<RealType>::Log(N * TMathUtil<RealType>::Pi * TMathUtil<RealType>::Sqrt(5.0) * (1.0 - cosTheta * cosTheta)) / TMathUtil<RealType>::Log(PHI * PHI)))"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (RealType Fk = TMathUtil<RealType)",
    "insertText": "Pow(PHI, k) / TMathUtil<RealType>::Sqrt(5.0)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (RealType F0 = TMathUtil<RealType)",
    "insertText": "Round(Fk)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (RealType F1 = TMathUtil<RealType)",
    "insertText": "Round(Fk * PHI)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (TMatrix2<RealType>)",
    "insertText": "B(2.0 * TMathUtil<RealType>::Pi * MultiplyAddFrac(F0 + 1.0, PHI - 1.0) - 2.0 * TMathUtil<RealType>::Pi * (PHI - 1), 2.0 * TMathUtil<RealType>::Pi * MultiplyAddFrac(F1 + 1.0, PHI - 1.0) - 2.0 * TMathUtil<RealType>::Pi * (PHI - 1), -2.0 * F0 / N, -2.0 * F1 / N)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (TMatrix2<RealType> invB = B .)",
    "insertText": "Inverse()"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "c(phi, cosTheta - (1.0 - 1.0/N))"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (c = invB* c ; c . X = TMathUtil<RealType)",
    "insertText": "Floor(c.X)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (c . Y = TMathUtil<RealType)",
    "insertText": "Floor(c.Y)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealType d = TMathUtil<RealType>::MaxReal,j = 0 ;)",
    "insertText": "for(int32 s = 0; s < 4; ++s)"
  },
  {
    "label": "cosTheta_second()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType>)",
    "insertText": "cosTheta_second((RealType)(s % 2) + c.X, (RealType)(s / 2) + c.Y)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (cosTheta = B . Row1 .)",
    "insertText": "Dot(cosTheta_second) + (1.0 - 1.0 / N)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (cosTheta = TMathUtil<RealType)",
    "insertText": "Clamp(cosTheta, -1.0, +1.0)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (RealType i = TMathUtil<RealType)",
    "insertText": "Floor(N * 0.5 - cosTheta * N * 0.5)"
  },
  {
    "label": "MultiplyAddFrac()",
    "kind": "Method",
    "detail": "Function (phi = 2 . 0* TMathUtil<RealType>::Pi*)",
    "insertText": "MultiplyAddFrac(i, PHI - 1)"
  },
  {
    "label": "cosTheta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cosTheta(2.0 * i + 1.0) * (1.0 / N)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (RealType sinTheta = TMathUtil<RealType)",
    "insertText": "Sqrt(1.0 - cosTheta * cosTheta)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "q(TMathUtil<RealType>::Cos(phi) * sinTheta, TMathUtil<RealType>::Sin(phi) * sinTheta, cosTheta)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (RealType SquaredDistance =)",
    "insertText": "DistanceSquared(q, P)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (d = SquaredDistance ; j = i ; } })",
    "insertText": "return(int32)"
  },
  {
    "label": "MultiplyAddFrac()",
    "kind": "Method",
    "detail": "Function (} protected : RealType)",
    "insertText": "MultiplyAddFrac(RealType a, RealType b)"
  },
  {
    "label": "TFibonacciLattice()",
    "kind": "Method",
    "detail": "Function (} } ; template<RealType> class TFibonacciLattice { public : int32 N = 6 4 ; enum class EType { Square,Disc } ; EType Type = EType::Square ; public :)",
    "insertText": "TFibonacciLattice(int32 NumPoints = 64, EType InType = EType::Square) : N(NumPoints), Type(InType)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = Index + 1 ; const int32 NumPts = N + 1 ; RealType)",
    "insertText": "Div(RealType)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "X(Div - TMathUtil<RealType>::Floor(Div))"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "Y(RealType)Idx / (RealType)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (RealType Theta = TMathUtil<RealType>::TwoPi* X ; RealType R = TMathUtil<RealType)",
    "insertText": "Sqrt(Y)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (X = R* TMathUtil<RealType)",
    "insertText": "Cos(Theta)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (Y = R* TMathUtil<RealType)",
    "insertText": "Sin(Theta)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (} return TVector2<)",
    "insertText": "RealType(X,Y)"
  },
  {
    "label": "THemisphericalFibonacci()",
    "kind": "Method",
    "detail": "Function (} } ; template<RealType> class THemisphericalFibonacci { public : int32 N = 6 4 ; enum class EDistribution { Uniform,Cosine } ; EDistribution Distribution = EDistribution::Uniform ; public :)",
    "insertText": "THemisphericalFibonacci(int32 NumPoints = 64, EDistribution Dist = EDistribution::Uniform) : N(NumPoints), Distribution(Dist)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> Point = { } ;)",
    "insertText": "switch(Distribution)"
  },
  {
    "label": "Points()",
    "kind": "Method",
    "detail": "Function (Point = Points [ Index ] ; break ; } case EDistribution::Cosine : { TFibonacciLattice<RealType>)",
    "insertText": "Points(N, TFibonacciLattice<RealType>::EType::Disc)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const TVector2<RealType> Pt = Points [ Index ] ; RealType Z = TMathUtil<RealType)",
    "insertText": "Sqrt(TMathUtil<RealType>::Max(0.0, 1.0 - Pt.X * Pt.X - Pt.Y * Pt.Y))"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Point = TVector<)",
    "insertText": "RealType(Pt.X, Pt.Y, Z)"
  }
]