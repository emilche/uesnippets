[
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "ActorDescContPtrType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActorDescContPtrType"
  },
  {
    "label": "TActorDescContainerCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorDescContainerCollection"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "ActorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActorType"
  },
  {
    "label": "TBaseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseIterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" WorldPartition / ActorDescContainer . h \" class FWorldPartitionActorDesc ; class FReferenceCollector ; template<class ActorDescContPtrType> class TActorDescContainerCollection { # if WITH_EDITOR public : template<class> class TActorDescContainerCollection ;)",
    "insertText": "TActorDescContainerCollection()"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (template<class U>)",
    "insertText": "TActorDescContainerCollection(std::initializer_list<U> ActorDescContainerArray)"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (template<class U>)",
    "insertText": "TActorDescContainerCollection(const TArray<U>& ActorDescContainers)"
  },
  {
    "label": "AddContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContainer(ActorDescContPtrType Container)"
  },
  {
    "label": "RemoveContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveContainer(ActorDescContPtrType Container)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FName& ContainerPackageName)"
  },
  {
    "label": "FindContainer()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType)",
    "insertText": "FindContainer(const FName& ContainerPackageName)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<class U> void)",
    "insertText": "Append(const TActorDescContainerCollection<U>& OtherCollection)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetActorDescContainerCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetActorDescContainerCount()"
  },
  {
    "label": "GetActorDesc()",
    "kind": "Method",
    "detail": "Function (} FWorldPartitionActorDesc*)",
    "insertText": "GetActorDesc(const FGuid& Guid)"
  },
  {
    "label": "GetActorDescChecked()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionActorDesc&)",
    "insertText": "GetActorDescChecked(const FGuid& Guid)"
  },
  {
    "label": "GetActorDescByPath()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc*)",
    "insertText": "GetActorDescByPath(const FString& ActorPath)"
  },
  {
    "label": "GetActorDescByPath()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc*)",
    "insertText": "GetActorDescByPath(const FSoftObjectPath& ActorPath)"
  },
  {
    "label": "GetActorDescByName()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc*)",
    "insertText": "GetActorDescByName(FName ActorName)"
  },
  {
    "label": "RemoveActor()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> bool)",
    "insertText": "RemoveActor(const FGuid& ActorGuid)"
  },
  {
    "label": "OnPackageDeleted()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> void)",
    "insertText": "OnPackageDeleted(UPackage* Package)"
  },
  {
    "label": "IsActorDescHandled()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> bool)",
    "insertText": "IsActorDescHandled(const AActor* Actor)"
  },
  {
    "label": "LoadAllActors()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> void)",
    "insertText": "LoadAllActors(TArray<FWorldPartitionReference>& OutReferences)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UWorldPartition, FActorDescAddedEvent, FWorldPartitionActorDesc*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (FActorDescAddedEvent OnActorDescAddedEvent ;)",
    "insertText": "DECLARE_EVENT_OneParam(UWorldPartition, FActorDescRemovedEvent, FWorldPartitionActorDesc*)"
  },
  {
    "label": "GetActorDescContainer()",
    "kind": "Method",
    "detail": "Function (FActorDescRemovedEvent OnActorDescRemovedEvent ; ActorDescContPtrType)",
    "insertText": "GetActorDescContainer(const FGuid& ActorGuid)"
  },
  {
    "label": "FindHandlingContainer()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType)",
    "insertText": "FindHandlingContainer(const AActor* Actor)"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachActorDescContainerBreakable(TFunctionRef<bool(ActorDescContPtrType)> Func)"
  },
  {
    "label": "ForEachActorDescContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachActorDescContainer(TFunctionRef<void(ActorDescContPtrType)> Func)"
  },
  {
    "label": "OnCollectionChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnCollectionChanged()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (} ; TArray<ActorDescContPtrType> ActorDescContainerCollection ; private : void)",
    "insertText": "RegisterDelegates(ActorDescContPtrType Container)"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates(ActorDescContPtrType Container)"
  },
  {
    "label": "OnActorDescAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescAdded(FWorldPartitionActorDesc* ActorDesc)"
  },
  {
    "label": "OnActorDescRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescRemoved(FWorldPartitionActorDesc* ActorDesc)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public : template<bool bConst,class ActorType> class TBaseIterator {)",
    "insertText": "static_assert(TIsDerivedFrom<ActorType, AActor>::IsDerived, \"Type is not derived from AActor.\")"
  },
  {
    "label": "TBaseIterator()",
    "kind": "Method",
    "detail": "Function (protected : typedef UActorDescContainer ContainerType ; typedef TArray<ActorDescContPtrType> ContainerCollectionType ; typedef std::conditional_t<bConst,ContainerCollectionType::TConstIterator,ContainerCollectionType::TIterator> ContainerIteratorType ; typedef std::conditional_t<bConst,ContainerType::TConstIterator<ActorType>,ContainerType::TIterator<ActorType>> ActDescIteratorType ; typedef FWorldPartitionActorDescType<ActorType>::Type ValueType ; typedef std::conditional_t<bConst,const ValueType*,ValueType*> ReturnType ; public : template<class T>)",
    "insertText": "TBaseIterator(T* Collection) : ContainerIterator(Collection->ActorDescContainerCollection)"
  },
  {
    "label": "ActDescIteratorType()",
    "kind": "Method",
    "detail": "Function (ActorsIterator = MakeUnique<)",
    "insertText": "ActDescIteratorType(*ContainerIterator)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()"
  },
  {
    "label": "AdvanceToRelevantActorInNextContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceToRelevantActorInNextContainer()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + ContainerIterator ;)",
    "insertText": "if(ContainerIterator)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} } } ContainerIteratorType ContainerIterator ; TUniquePtr<ActDescIteratorType> ActorsIterator ; } ; template<class ActorType = AActor> class TIterator : public TBaseIterator<false,ActorType> { typedef TBaseIterator<false,ActorType> BaseType ; public : template<class T>)",
    "insertText": "TIterator(T* Collection) : BaseType(Collection)"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class ActorType = AActor> class TConstIterator : public TBaseIterator<true,ActorType> { typedef TBaseIterator<true,ActorType> BaseType ; public : template<class T>)",
    "insertText": "TConstIterator(T* Collection) : BaseType(Collection)"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (} } ; # endif } ; # if WITH_EDITOR template<class ActorDescContPtrType> template<class U> TActorDescContainerCollection<ActorDescContPtrType)",
    "insertText": "TActorDescContainerCollection(std::initializer_list<U> ActorDescContainerArray) : ActorDescContainerCollection(ActorDescContainerArray)"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (} template<class ActorDescContPtrType> template<class U> TActorDescContainerCollection<ActorDescContPtrType)",
    "insertText": "TActorDescContainerCollection(const TArray<U>& ActorDescContainers) : ActorDescContainerCollection(ActorDescContainers)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorDescContainerCollection .)",
    "insertText": "Add(Container)"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates(Container)"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates(Container)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 AppendedContainerIndex = ActorDescContainerCollection .)",
    "insertText": "Num() - OtherCollection.ActorDescContainerCollection.Num()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates(ActorDescContainerCollection[AppendedContainerIndex])"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (auto ContainerPtr = ActorDescContainerCollection .)",
    "insertText": "FindByPredicate([&ContainerPackageName](ActorDescContPtrType ActorDescContainer) { return ActorDescContainer->GetContainerPackage() == ContainerPackageName; })"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescAddedEvent.AddRaw(this, &TActorDescContainerCollection<ActorDescContPtrType>::OnActorDescAdded)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescRemovedEvent.AddRaw(this, &TActorDescContainerCollection::OnActorDescRemoved)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescAddedEvent.RemoveAll(this)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescRemovedEvent.RemoveAll(this)"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc* ActorDesc = nullptr ;)",
    "insertText": "ForEachActorDescContainerBreakable([&Guid, &ActorDesc](ActorDescContPtrType ActorDescContainer) { ActorDesc = ActorDescContainer->GetActorDesc(Guid); return ActorDesc == nullptr; })"
  },
  {
    "label": "GetActorDesc()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc* ActorDesc =)",
    "insertText": "GetActorDesc(Guid)"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc* ActorDesc = nullptr ;)",
    "insertText": "ForEachActorDescContainerBreakable([&ActorPath, &ActorDesc](ActorDescContPtrType ActorDescContainer) { ActorDesc = ActorDescContainer->GetActorDescByPath(ActorPath); return ActorDesc == nullptr; })"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDesc* ActorDesc = nullptr ;)",
    "insertText": "ForEachActorDescContainerBreakable([&ActorName, &ActorDesc](ActorDescContPtrType ActorDescContainer) { ActorDesc = ActorDescContainer->GetActorDescByName(ActorName); return ActorDesc == nullptr; })"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (bool bRemoved = false ;)",
    "insertText": "ForEachActorDescContainerBreakable([&ActorGuid, &bRemoved](ActorDescContPtrType ActorDescContainer) { bRemoved = ActorDescContainer->RemoveActor(ActorGuid); return !bRemoved; })"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (bool bIsHandled = false ;)",
    "insertText": "ForEachActorDescContainerBreakable([Actor, &bIsHandled](ActorDescContPtrType ActorDescContainer) { bIsHandled = ActorDescContainer->IsActorDescHandled(Actor); return !bIsHandled; })"
  },
  {
    "label": "ForEachActorDescContainerBreakable()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType ActorDescContainer = nullptr ;)",
    "insertText": "ForEachActorDescContainerBreakable([&ActorGuid, &ActorDescContainer](ActorDescContPtrType InActorDescContainer) { if (InActorDescContainer->GetActorDesc(ActorGuid) != nullptr) { ActorDescContainer = InActorDescContainer; } return ActorDescContainer == nullptr; })"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (const_cast<const)",
    "insertText": "TActorDescContainerCollection(this)->ForEachActorDescContainerBreakable(Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(ActorDescContainer)"
  },
  {
    "label": "TActorDescContainerCollection()",
    "kind": "Method",
    "detail": "Function (const_cast<const)",
    "insertText": "TActorDescContainerCollection(this)->ForEachActorDescContainer(Func)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnActorDescAddedEvent .)",
    "insertText": "Broadcast(ActorDesc)"
  }
]