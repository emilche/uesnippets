[
  {
    "label": "concurrent_unordered_set_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_set_traits"
  },
  {
    "label": "concurrent_unordered_multiset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_multiset"
  },
  {
    "label": "concurrent_unordered_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_set"
  },
  {
    "label": "concurrent_unordered_set_traits()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_unordered_set_H # define __TBB_concurrent_unordered_set_H # include \" internal / _concurrent_unordered_impl . h \" namespace tbb { namespace interface5 { template<Key,Hash_compare,Allocator,bool Allow_multimapping> class concurrent_unordered_set_traits { protected : typedef Key value_type ; typedef Key key_type ; typedef Hash_compare hash_compare ; typedef tbb::internal::allocator_rebind<Allocator,value_type>::type allocator_type ; # if __TBB_UNORDERED_NODE_HANDLE_PRESENT typedef tbb::internal::node_handle<key_type,key_type,internal::split_ordered_list<key_type,allocator_type>::node,allocator_type> node_type ; # endif enum { allow_multimapping = Allow_multimapping } ;)",
    "insertText": "concurrent_unordered_set_traits() : my_hash_compare()"
  },
  {
    "label": "concurrent_unordered_set_traits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set_traits(const hash_compare& hc) : my_hash_compare(hc)"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (} const Key&)",
    "insertText": "get_key(const value_type& value)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set(size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set(size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set(const Allocator& a) : base_type(base_type::initial_bucket_number, key_compare(), a)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_set(Iterator first, Iterator last, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(first, last)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_set(Iterator first, Iterator last, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_set(Iterator first, Iterator last, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_INITIALIZER_LISTS_PRESENT)",
    "insertText": "concurrent_unordered_set(std::initializer_list<value_type> il, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(il.begin(),il.end())"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set(std::initializer_list<value_type> il, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(il.begin(), il.end())"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set(std::initializer_list<value_type> il, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT&& ! __TBB_IMPLICIT_MOVE_PRESENT)",
    "insertText": "concurrent_unordered_set(const concurrent_unordered_set& table) : base_type(table)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_set&)",
    "insertText": "operator(const concurrent_unordered_set& table)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_set(concurrent_unordered_set&& table) : base_type(std::move(table))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_set&)",
    "insertText": "operator(concurrent_unordered_set&& table)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_unordered_set(concurrent_unordered_set&& table, const Allocator& a) : base_type(std::move(table), a)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_UNORDERED_NODE_HANDLE_PRESENT template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_set<Key, Hash, Equality, Allocator>& source)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_merge(source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_set<Key, Hash, Equality, Allocator>&& source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_multiset<Key, Hash, Equality, Allocator>& source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_multiset<Key, Hash, Equality, Allocator>&& source)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "concurrent_unordered_set(const concurrent_unordered_set& table, const Allocator& a) : base_type(table, a)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (} } ; # if __TBB_CPP17_DEDUCTION_GUIDES_PRESENT namespace internal { using namespace tbb::internal ; template<template<. . .> Set,T,. . . Args> using cu_set_t = Set<T,)",
    "insertText": "conditional_t(sizeof...(Args)>0) && !is_allocator_v< pack_element_t<0, Args...> >, pack_element_t<0, Args...>, tbb_hash<T> >, std::conditional_t< (sizeof...(Args)>1) && !is_allocator_v< pack_element_t<1, Args...> >, pack_element_t<1, Args...>, std::equal_to<T> >, std::conditional_t< (sizeof...(Args)>0) && is_allocator_v< pack_element_t<sizeof...(Args)-1, Args...> >, pack_element_t<sizeof...(Args)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_set, internal::iterator_value_t<I>>)",
    "insertText": "concurrent_unordered_set(I, I)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_set, internal::iterator_value_t<I>, Args...>)",
    "insertText": "concurrent_unordered_set(I, I, size_t, Args...)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_set, T>)",
    "insertText": "concurrent_unordered_set(std::initializer_list<T>)"
  },
  {
    "label": "concurrent_unordered_set()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_set, T, Args...>)",
    "insertText": "concurrent_unordered_set(std::initializer_list<T>, size_t, Args...)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (# endif template<Key,Hasher = tbb::tbb_hash<Key>,Key_equality = std::equal_to<Key>,Allocator = tbb::tbb_allocator<Key>> class concurrent_unordered_multiset : public internal::concurrent_unordered_base<concurrent_unordered_set_traits<Key,internal::hash_compare<Key,Hasher,Key_equality>,Allocator,true>> { typedef internal::hash_compare<Key,Hasher,Key_equality> hash_compare ; typedef concurrent_unordered_set_traits<Key,hash_compare,Allocator,true> traits_type ; typedef internal::concurrent_unordered_base<traits_type> base_type ; # if __TBB_EXTRA_DEBUG public : # endif using traits_type::allow_multimapping ; public : using base_type::insert ; typedef Key key_type ; typedef base_type::value_type value_type ; typedef Key mapped_type ; typedef Hasher hasher ; typedef Key_equality key_equal ; typedef hash_compare key_compare ; typedef base_type::allocator_type allocator_type ; typedef base_type::pointer pointer ; typedef base_type::const_pointer const_pointer ; typedef base_type::reference reference ; typedef base_type::const_reference const_reference ; typedef base_type::size_type size_type ; typedef base_type::difference_type difference_type ; typedef base_type::iterator iterator ; typedef base_type::const_iterator const_iterator ; typedef base_type::iterator local_iterator ; typedef base_type::const_iterator const_local_iterator ; # if __TBB_UNORDERED_NODE_HANDLE_PRESENT typedef base_type::node_type node_type ; # endif)",
    "insertText": "concurrent_unordered_multiset(size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multiset(size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multiset(size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multiset(const Allocator& a) : base_type(base_type::initial_bucket_number, key_compare(), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_multiset(Iterator first, Iterator last, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_multiset(Iterator first, Iterator last, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_multiset(Iterator first, Iterator last, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_INITIALIZER_LISTS_PRESENT)",
    "insertText": "concurrent_unordered_multiset(std::initializer_list<value_type> il, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multiset(std::initializer_list<value_type> il, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multiset(std::initializer_list<value_type> il, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT&& ! __TBB_IMPLICIT_MOVE_PRESENT)",
    "insertText": "concurrent_unordered_multiset(const concurrent_unordered_multiset& table) : base_type(table)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_multiset&)",
    "insertText": "operator(const concurrent_unordered_multiset& table)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multiset(concurrent_unordered_multiset&& table) : base_type(std::move(table))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_multiset&)",
    "insertText": "operator(concurrent_unordered_multiset&& table)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_unordered_multiset(concurrent_unordered_multiset&& table, const Allocator& a) : base_type(std::move(table), a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "concurrent_unordered_multiset(const concurrent_unordered_multiset& table, const Allocator& a) : base_type(table, a)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_multiset, internal::iterator_value_t<I>>)",
    "insertText": "concurrent_unordered_multiset(I, I)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_multiset, internal::iterator_value_t<I>, Args...>)",
    "insertText": "concurrent_unordered_multiset(I, I, size_t, Args...)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_multiset, T>)",
    "insertText": "concurrent_unordered_multiset(std::initializer_list<T>)"
  },
  {
    "label": "concurrent_unordered_multiset()",
    "kind": "Method",
    "detail": "Function (internal::cu_set_t<concurrent_unordered_multiset, T, Args...>)",
    "insertText": "concurrent_unordered_multiset(std::initializer_list<T>, size_t, Args...)"
  }
]