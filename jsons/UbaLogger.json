[
  {
    "label": "LogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LogEntry"
  },
  {
    "label": "Logger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Logger"
  },
  {
    "label": "LoggerWithWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoggerWithWriter"
  },
  {
    "label": "MutableLogger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MutableLogger"
  },
  {
    "label": "FilteredLogWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilteredLogWriter"
  },
  {
    "label": "BytesToText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BytesToText"
  },
  {
    "label": "CountToText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CountToText"
  },
  {
    "label": "Logger()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaLogWriter . h \" # include \" UbaSynchronization . h \" # include<stdarg . h> # define UBA_DEBUG_LOGGER 0 namespace uba { struct LogEntry { LogEntryType type ; const tchar* string ; } ; class Logger { public :)",
    "insertText": "Logger()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Error(const tchar* format, ...)"
  },
  {
    "label": "Warning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Warning(const tchar* format, ...)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Info(const tchar* format, ...)"
  },
  {
    "label": "Detail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detail(const tchar* format, ...)"
  },
  {
    "label": "Debug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Debug(const tchar* format, ...)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Logf(LogEntryType type, const tchar* format, ...)"
  },
  {
    "label": "LogArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogArg(LogEntryType type, const tchar* format, va_list& args)"
  },
  {
    "label": "BeginScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginScope()"
  },
  {
    "label": "EndScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndScope()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(LogEntryType type, const tchar* str, u32 strLen)"
  },
  {
    "label": "LoggerWithWriter()",
    "kind": "Method",
    "detail": "Function (} } ; class LoggerWithWriter : public Logger { public :)",
    "insertText": "LoggerWithWriter(LogWriter& writer, const tchar* prefix = nullptr)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (m_writer .)",
    "insertText": "Log(type, str, strLen, m_prefix, m_prefixLen)"
  },
  {
    "label": "MutableLogger()",
    "kind": "Method",
    "detail": "Function (} LogWriter& m_writer ; const tchar* m_prefix ; u32 m_prefixLen ; } ; struct MutableLogger : public LoggerWithWriter {)",
    "insertText": "MutableLogger(LogWriter& writer, const tchar* prefix) : LoggerWithWriter(writer, prefix)"
  },
  {
    "label": "FilteredLogWriter()",
    "kind": "Method",
    "detail": "Function (} Atomic<u32> isMuted ; } ; class FilteredLogWriter : public LogWriter { public :)",
    "insertText": "FilteredLogWriter(LogWriter& writer, LogEntryType level = LogEntryType_Detail) : m_writer(writer), m_level(level)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Log(LogEntryType type, const tchar* str, u32 strLen, const tchar* prefix = nullptr, u32 prefixLen = 0)"
  },
  {
    "label": "BytesToText()",
    "kind": "Method",
    "detail": "Function (private : LogWriter& m_writer ; LogEntryType m_level ; } ; struct BytesToText {)",
    "insertText": "BytesToText(u64 bytes)"
  },
  {
    "label": "tchar()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "tchar()"
  },
  {
    "label": "StopDebugLogger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDebugLogger()"
  },
  {
    "label": "PrintContentionSummary()",
    "kind": "Method",
    "detail": "Function (LoggerWithWriter g_debugLogger ; # endif void)",
    "insertText": "PrintContentionSummary(class Logger& logger)"
  }
]