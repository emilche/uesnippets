[
  {
    "label": "_tls",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_tls"
  },
  {
    "label": "tls_initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tls_initialize(void)"
  },
  {
    "label": "tls_shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tls_shutdown(void)"
  },
  {
    "label": "tls_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tls_free(tls_t *tls)"
  },
  {
    "label": "tls_set_credentials()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_set_credentials(tls_t *tls, const char *cafilename)"
  },
  {
    "label": "tls_set_hostname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_set_hostname(tls_t *tls, const char *hostname)"
  },
  {
    "label": "tls_start()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_start(tls_t *tls)"
  },
  {
    "label": "tls_stop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_stop(tls_t *tls)"
  },
  {
    "label": "tls_error()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_error(tls_t *tls)"
  },
  {
    "label": "tls_pending()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_pending(tls_t *tls)"
  },
  {
    "label": "tls_read()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_read(tls_t *tls, void * const buff, const size_t len)"
  },
  {
    "label": "tls_write()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_write(tls_t *tls, const void * const buff, const size_t len)"
  },
  {
    "label": "tls_clear_pending_write()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_clear_pending_write(tls_t *tls)"
  },
  {
    "label": "tls_is_recoverable()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "tls_is_recoverable(int error)"
  }
]