[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SendDataParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SendDataParams"
  },
  {
    "label": "DataChannelSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataChannelSink"
  },
  {
    "label": "DataChannelTransportInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataChannelTransportInterface"
  },
  {
    "label": "DataChannelSink()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TRANSPORT_DATA_CHANNEL_TRANSPORT_INTERFACE_H_ # define API_TRANSPORT_DATA_CHANNEL_TRANSPORT_INTERFACE_H_ # include \" absl / types / optional . h \" # include \" api / rtc_error . h \" # include \" rtc_base / copy_on_write_buffer . h \" namespace webrtc { enum class DataMessageType { kText,kBinary,kControl,} ; struct SendDataParams { DataMessageType type = DataMessageType::kText ; bool ordered = false ; absl::optional<int> max_rtx_count ; absl::optional<int> max_rtx_ms ; } ; class DataChannelSink { public : ~)",
    "insertText": "DataChannelSink()"
  },
  {
    "label": "OnDataReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataReceived(int channel_id, DataMessageType type, const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "OnChannelClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelClosing(int channel_id)"
  },
  {
    "label": "OnChannelClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelClosed(int channel_id)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend()"
  },
  {
    "label": "OnTransportClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportClosed(RTCError error)"
  },
  {
    "label": "DataChannelTransportInterface()",
    "kind": "Method",
    "detail": "Function (} } ; class DataChannelTransportInterface { public : ~)",
    "insertText": "DataChannelTransportInterface()"
  },
  {
    "label": "OpenChannel()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "OpenChannel(int channel_id)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SendData(int channel_id, const SendDataParams& params, const rtc::CopyOnWriteBuffer& buffer)"
  },
  {
    "label": "CloseChannel()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "CloseChannel(int channel_id)"
  },
  {
    "label": "SetDataSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataSink(DataChannelSink* sink)"
  },
  {
    "label": "IsReadyToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToSend()"
  }
]