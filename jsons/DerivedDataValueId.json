[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbObjectId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectId"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FIoHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoHash"
  },
  {
    "label": "FValueId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueId"
  },
  {
    "label": "FValueId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" Memory / MemoryView . h \" # include \" String / BytesToHex . h \" # define class FCbFieldView ; class FCbObjectId ; class FCbWriter ; struct FIoHash ; namespace UE::DerivedData { struct FValueId { public : using ByteArray = uint8 [ 1 2 ] ;)",
    "insertText": "FValueId()"
  },
  {
    "label": "FValueId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueId(const ByteArray& Id)"
  },
  {
    "label": "FValueId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueId(FMemoryView Id)"
  },
  {
    "label": "FValueId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueId(const FCbObjectId& Id)"
  },
  {
    "label": "FCbObjectId()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FCbObjectId()"
  },
  {
    "label": "FromHash()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FValueId)",
    "insertText": "FromHash(const FIoHash& Hash)"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FValueId)",
    "insertText": "FromName(FUtf8StringView Name)"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FValueId)",
    "insertText": "FromName(FWideStringView Name)"
  },
  {
    "label": "MakeIndexed()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FValueId)",
    "insertText": "MakeIndexed(int32 Index)"
  },
  {
    "label": "GetBytes()",
    "kind": "Method",
    "detail": "Function (const ByteArray&)",
    "insertText": "GetBytes()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} const FValueId Null ; private :)",
    "insertText": "alignas(uint32)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Bytes, Id, sizeof(ByteArray))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FValueId& A, const FValueId& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FValueId& Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FValueId& Id)"
  },
  {
    "label": "BytesToHexLower()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "BytesToHexLower(Id.GetBytes(), Builder)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FValueId& Id)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FValueId& OutId)"
  }
]