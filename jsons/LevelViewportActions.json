[
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "FShowMenuCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShowMenuCommand"
  },
  {
    "label": "TwoPanesHoriz()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Framework / Commands / Commands . h \" # include \" Styling / AppStyle . h \" # include \" BufferVisualizationMenuCommands . h \" # include \" NaniteVisualizationMenuCommands . h \" # include \" LumenVisualizationMenuCommands . h \" # include \" SubstrateVisualizationMenuCommands . h \" # include \" GroomVisualizationMenuCommands . h \" # include \" VirtualShadowMapVisualizationMenuCommands . h \" namespace LevelViewportConfigurationNames { FName)",
    "insertText": "TwoPanesHoriz(\"TwoPanesHoriz\")"
  },
  {
    "label": "TwoPanesVert()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "TwoPanesVert(\"TwoPanesVert\")"
  },
  {
    "label": "ThreePanesLeft()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ThreePanesLeft(\"ThreePanesLeft\")"
  },
  {
    "label": "ThreePanesRight()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ThreePanesRight(\"ThreePanesRight\")"
  },
  {
    "label": "ThreePanesTop()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ThreePanesTop(\"ThreePanesTop\")"
  },
  {
    "label": "ThreePanesBottom()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ThreePanesBottom(\"ThreePanesBottom\")"
  },
  {
    "label": "FourPanesLeft()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FourPanesLeft(\"FourPanesLeft\")"
  },
  {
    "label": "FourPanesRight()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FourPanesRight(\"FourPanesRight\")"
  },
  {
    "label": "FourPanesTop()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FourPanesTop(\"FourPanesTop\")"
  },
  {
    "label": "FourPanesBottom()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FourPanesBottom(\"FourPanesBottom\")"
  },
  {
    "label": "FourPanes2x2()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FourPanes2x2(\"FourPanes2x2\")"
  },
  {
    "label": "OnePane()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OnePane(\"OnePane\")"
  },
  {
    "label": "FLevelViewportCommands()",
    "kind": "Method",
    "detail": "Function (} class FLevelViewportCommands : public TCommands<FLevelViewportCommands> { public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FLevelViewportCommands() : TCommands<FLevelViewportCommands> ( TEXT(\"LevelViewport\"), NSLOCTEXT(\"Contexts\", \"LevelViewports\", \"Level Viewports\"), TEXT(\"EditorViewport\"), FAppStyle::GetAppStyleSetName() ), ClearAllBookMarks(nullptr)"
  },
  {
    "label": "FLevelViewportCommands()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelViewportCommands(const FLevelViewportCommands&)"
  },
  {
    "label": "FLevelViewportCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelViewportCommands(FLevelViewportCommands&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLevelViewportCommands&)",
    "insertText": "operator(const FLevelViewportCommands&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLevelViewportCommands&)",
    "insertText": "operator(FLevelViewportCommands&&)"
  },
  {
    "label": "FLevelViewportCommands()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FLevelViewportCommands()"
  },
  {
    "label": "FShowMenuCommand()",
    "kind": "Method",
    "detail": "Function (} struct FShowMenuCommand { TSharedPtr<FUICommandInfo> ShowMenuItem ; FText LabelOverride ;)",
    "insertText": "FShowMenuCommand(TSharedPtr<FUICommandInfo> InShowMenuItem, const FText& InLabelOverride ) : ShowMenuItem( InShowMenuItem ) , LabelOverride( InLabelOverride)"
  },
  {
    "label": "FShowMenuCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShowMenuCommand(TSharedPtr<FUICommandInfo> InShowMenuItem ) : ShowMenuItem( InShowMenuItem)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandInfo> ClearAllBookmarks ; TSharedPtr<FUICommandInfo> SelectPilotedActor ; TSharedPtr<FUICommandInfo> EjectActorPilot ; TSharedPtr<FUICommandInfo> PilotSelectedActor ; TSharedPtr<FUICommandInfo> ToggleActorPilotCameraView ; TSharedPtr<FUICommandInfo> ViewportConfig_OnePane ; TSharedPtr<FUICommandInfo> ViewportConfig_TwoPanesH ; TSharedPtr<FUICommandInfo> ViewportConfig_TwoPanesV ; TSharedPtr<FUICommandInfo> ViewportConfig_ThreePanesLeft ; TSharedPtr<FUICommandInfo> ViewportConfig_ThreePanesRight ; TSharedPtr<FUICommandInfo> ViewportConfig_ThreePanesTop ; TSharedPtr<FUICommandInfo> ViewportConfig_ThreePanesBottom ; TSharedPtr<FUICommandInfo> ViewportConfig_FourPanesLeft ; TSharedPtr<FUICommandInfo> ViewportConfig_FourPanesRight ; TSharedPtr<FUICommandInfo> ViewportConfig_FourPanesTop ; TSharedPtr<FUICommandInfo> ViewportConfig_FourPanesBottom ; TSharedPtr<FUICommandInfo> ViewportConfig_FourPanes2x2 ; TSharedPtr<FUICommandInfo> SetDefaultViewportType ; TSharedPtr<FUICommandInfo> ToggleViewportToolbar ; TSharedPtr<FUICommandInfo> EnablePreviewMesh ; TSharedPtr<FUICommandInfo> CyclePreviewMesh ;)",
    "insertText": "DECLARE_EVENT_TwoParams(FLevelViewportCommands, FOnNewStatCommandAdded, const TSharedPtr<FUICommandInfo>, const FString&)"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (FOnNewStatCommandAdded NewStatCommandDelegate ; public : void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "RegisterShowVolumeCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterShowVolumeCommands()"
  },
  {
    "label": "RegisterShowSpriteCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterShowSpriteCommands()"
  },
  {
    "label": "HandleNewStatGroup()",
    "kind": "Method",
    "detail": "Function (private : # if STATS void)",
    "insertText": "HandleNewStatGroup(const TArray<FStatNameAndInfo>& NameAndInfos)"
  },
  {
    "label": "HandleNewStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleNewStat(const FName& InStatName, const FName& InStatCategory, const FText& InStatDescription)"
  },
  {
    "label": "FindStatIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindStatIndex(const TArray< FShowMenuCommand >* ShowStatCommands, const FString& InCommandName)"
  },
  {
    "label": "Dummy()",
    "kind": "Method",
    "detail": "Function (# endif PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "Dummy()"
  },
  {
    "label": "CommandsCopy()",
    "kind": "Method",
    "detail": "Function (FLevelViewportCommands Commands ; FLevelViewportCommands)",
    "insertText": "CommandsCopy(Commands)"
  },
  {
    "label": "CommandsCopy2()",
    "kind": "Method",
    "detail": "Function (FLevelViewportCommands)",
    "insertText": "CommandsCopy2(MoveTemp(Commands))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Commands = CommandsCopy2 ; CommandsCopy =)",
    "insertText": "MoveTemp(Commands)"
  }
]