[
  {
    "label": "FMassDebuggerQueryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassDebuggerQueryData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SMassBitSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMassBitSet"
  },
  {
    "label": "SMassBitSetDiff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMassBitSetDiff"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Text / STextBlock . h \" # include \" MassDebuggerStyle . h \" # include \" Widgets / Layout / SWrapBox . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / SBoxPanel . h \" # include \" MassProcessingTypes . h \" # define LOCTEXT_NAMESPACE \" SMassDebugger \" struct FMassDebuggerQueryData ; enum class EMassBitSetDisplayMode { ReadOnly,ReadWrite,MAX } ; template<TBitSet> class SMassBitSet : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMassBitSet) : _SlotPadding(5.f) , _TextColor(FLinearColor(1.f, 1.f, 1.f)) , _BackgroundBrush(FMassDebuggerStyle::GetBrush(\"MassDebug.Fragment\"))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FMargin, SlotPadding) SLATE_ATTRIBUTE(FLinearColor, TextColor) SLATE_ATTRIBUTE(const FSlateBrush*, BackgroundBrush) SLATE_END_ARGS() void Construct(const SMassBitSet::FArguments& InArgs, const FString& Label, const TBitSet& BitSet)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(InArgs, Label, MakeArrayView(&BitSet, 1))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const SMassBitSet::FArguments& InArgs, const FString& Label, TConstArrayView<TBitSet> BitSets, TConstArrayView<const FSlateBrush*> InBrushes = TConstArrayView<const FSlateBrush*>())"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWrapBox> ButtonBox =)",
    "insertText": "SNew(SWrapBox).UseAllottedSize(true)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* Brush = InBrushes .)",
    "insertText": "IsValidIndex(i) ? InBrushes[i] : InArgs._BackgroundBrush.Get()"
  },
  {
    "label": "AddBitSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBitSet(InArgs, ButtonBox, BitSets[i], Brush)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() [ SNew(SBox) .MinDesiredWidth(150.0f) .Padding(FMargin(0.0f, InArgs._SlotPadding.Get().Top, 0.0f, InArgs._SlotPadding.Get().Bottom)) [ SNew(STextBlock) .Text(FText::FromString(Label)) ] ] + SHorizontalBox::Slot()"
  },
  {
    "label": "AddBitSet()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AddBitSet(const SMassBitSet::FArguments& InArgs, TSharedRef<SWrapBox>& ButtonBox, const TBitSet& BitSet, const FSlateBrush* Brush)"
  },
  {
    "label": "DebugGetIndividualNames()",
    "kind": "Method",
    "detail": "Function (# if WITH_MASSENTITY_DEBUG TArray<FName> TypeNames ; BitSet .)",
    "insertText": "DebugGetIndividualNames(TypeNames)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ButtonBox ->)",
    "insertText": "AddSlot() .Padding(InArgs._SlotPadding) [ SNew(SBorder) .ColorAndOpacity(InArgs._TextColor) .BorderImage(Brush) [ SNew(STextBlock) .Text(FText::FromName(Name))"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} # endif } } ; enum class EMassBitSetDiffPrune : uint8 { None,Same,} ; template<TBitSet> class SMassBitSetDiff : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMassBitSetDiff) : _SlotPadding(5.f) , _TextColor(FLinearColor(1.f, 1.f, 1.f)) , _BackgroundBrush(FMassDebuggerStyle::GetBrush(\"MassDebug.Fragment\"))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FMargin, SlotPadding) SLATE_ATTRIBUTE(FLinearColor, TextColor) SLATE_ATTRIBUTE(const FSlateBrush*, BackgroundBrush) SLATE_END_ARGS() void Construct(const SMassBitSetDiff::FArguments& InArgs, const FString& Label, const TBitSet& BaseBitSet, const TBitSet& BitSet, const EMassBitSetDiffPrune Prune)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* Brush = InArgs . _BackgroundBrush .)",
    "insertText": "Get()"
  },
  {
    "label": "AddBitSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBitSet(InArgs, ButtonBox, BaseBitSet, BitSet, Brush, Prune)"
  },
  {
    "label": "AddBitSet()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AddBitSet(const SMassBitSetDiff::FArguments& InArgs, TSharedRef<SWrapBox>& ButtonBox, const TBitSet& BaseBitSet, const TBitSet& BitSet, const FSlateBrush* Brush, const EMassBitSetDiffPrune Prune)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if WITH_MASSENTITY_DEBUG TBitSet CombinedBitSet = BaseBitSet + BitSet ; int32 SameCount = 0 ;)",
    "insertText": "for(auto It = CombinedBitSet.GetIndexIterator(); It; ++It)"
  },
  {
    "label": "IsBitSet()",
    "kind": "Method",
    "detail": "Function (const bool bInBase = BaseBitSet .)",
    "insertText": "IsBitSet(*It)"
  },
  {
    "label": "DebugGetStructTypeName()",
    "kind": "Method",
    "detail": "Function (SameCount + + ; continue ; } FString Name = CombinedBitSet .)",
    "insertText": "DebugGetStructTypeName(*It).ToString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FText Tooltip ; const FSlateBrush* Icon = nullptr ;)",
    "insertText": "if(bInBase && bInCurr)"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (BorderColor . A* = 0 . 6 f ; TextColor . A* = 0 . 7 5 f ; Tooltip =)",
    "insertText": "LOCTEXT(\"DiffExistsInBase\", \"Exists in base.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!bInBase && bInCurr)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (TextColor =)",
    "insertText": "Lerp(TextColor, FLinearColor::White, 0.9f)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Icon =)",
    "insertText": "Get().GetBrush(\"Icons.Plus\")"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (Tooltip =)",
    "insertText": "LOCTEXT(\"DiffAddedToBase\", \"Added to base.\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else { BorderColor . A* = 0 . 2 5 f ; TextColor . A* = 0 . 5 f ; Icon =)",
    "insertText": "Get().GetBrush(\"Icons.Minus\")"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (Tooltip =)",
    "insertText": "LOCTEXT(\"DiffRemovedFromBase\", \"Removed from base.\")"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} ButtonBox ->)",
    "insertText": "AddSlot() .Padding(InArgs._SlotPadding) [ SNew(SBorder) .BorderImage(Brush) .BorderBackgroundColor(BorderColor) .ColorAndOpacity(TextColor) .ToolTipText(Tooltip) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() .Padding(3,0) .VAlign(VAlign_Center) [ SNew(SImage) .Image(Icon) .Visibility_Lambda([Icon] { return Icon != nullptr ? EVisibility::Visible : EVisibility::Collapsed; }) .DesiredSizeOverride(FVector2D(10.0f, 10.0f)) ] + SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(FText::FromString(Name))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SameCount > 0)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ButtonBox ->)",
    "insertText": "AddSlot() .Padding(InArgs._SlotPadding) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(FText::Format(LOCTEXT(\"SameFragmentsFormat\", \"{0} same fragments\"), FText::AsNumber(SameCount)))"
  },
  {
    "label": "AddBitSet()",
    "kind": "Method",
    "detail": "Function (} # endif } } ; namespace UE::Mass::Debugger::UI { template<TBitSet> void)",
    "insertText": "AddBitSet(TSharedRef<SVerticalBox>& Box, const TBitSet& BitSetAccess, const FString& Label, const FSlateBrush* Brush)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Box ->)",
    "insertText": "AddSlot() .AutoHeight() .Padding(0, 8) [ SNew(SMassBitSet<TBitSet>, Label, BitSetAccess) .BackgroundBrush(Brush) .SlotPadding(5.0f)"
  },
  {
    "label": "AddBitSetDiff()",
    "kind": "Method",
    "detail": "Function (} } template<TBitSet> void)",
    "insertText": "AddBitSetDiff(TSharedRef<SVerticalBox>& Box, const TBitSet& BaseBitSet, const TBitSet& BitSet, const FString& Label, const FSlateBrush* Brush, const EMassBitSetDiffPrune Prune)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Box ->)",
    "insertText": "AddSlot() .AutoHeight() .Padding(0, 8) [ SNew(SMassBitSetDiff<TBitSet>, Label, BaseBitSet, BitSet, Prune) .BackgroundBrush(Brush) .SlotPadding(5.0f)"
  }
]