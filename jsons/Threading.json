[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef THREADING_H_938743 # define THREADING_H_938743 # if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef POOL_MT # define POOL_MT 1 # endif # if POOL_MT&&)",
    "insertText": "defined(_WIN32) #undef WINVER #define WINVER 0x0600 #undef _WIN32_WINNT #define _WIN32_WINNT 0x0600 #ifndef WIN32_LEAN_AND_MEAN # define WIN32_LEAN_AND_MEAN #endif #include <windows.h> #include <stdio.h> #define ZSTD_pthread_mutex_t CRITICAL_SECTION #define ZSTD_pthread_mutex_init(a, b) ((void)(b), InitializeCriticalSection((a)), 0) #define ZSTD_pthread_mutex_destroy(a) DeleteCriticalSection((a)) #define ZSTD_pthread_mutex_lock(a) EnterCriticalSection((a)) #define ZSTD_pthread_mutex_unlock(a) LeaveCriticalSection((a)) #define ZSTD_pthread_cond_t CONDITION_VARIABLE #define ZSTD_pthread_cond_init(a, b) ((void)(b), InitializeConditionVariable((a)), 0) #define ZSTD_pthread_cond_destroy(a) ((void)(a)) #define ZSTD_pthread_cond_wait(a, b) SleepConditionVariableCS((a), (b), INFINITE) #define ZSTD_pthread_cond_signal(a) WakeConditionVariable((a)) #define ZSTD_pthread_cond_broadcast(a) WakeAllConditionVariable((a))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (HANDLE handle ;)",
    "insertText": "void(*start_routine)(void*)"
  },
  {
    "label": "ZSTD_pthread_create()",
    "kind": "Method",
    "detail": "Function (void* arg ; } ZSTD_pthread_t ; int)",
    "insertText": "ZSTD_pthread_create(ZSTD_pthread_t* thread, const void* unused, void* (*start_routine) (void*), void* arg)"
  },
  {
    "label": "ZSTD_pthread_join()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ZSTD_pthread_join(ZSTD_pthread_t thread, void** value_ptr)"
  },
  {
    "label": "ZSTD_pthread_mutex_init()",
    "kind": "Method",
    "detail": "Function (# elif POOL_MT # include<pthread . h> # define ZSTD_pthread_mutex_t pthread_mutex_t # define)",
    "insertText": "ZSTD_pthread_mutex_init(a, b) pthread_mutex_init((a), (b)) #define ZSTD_pthread_mutex_destroy(a) pthread_mutex_destroy((a)) #define ZSTD_pthread_mutex_lock(a) pthread_mutex_lock((a)) #define ZSTD_pthread_mutex_unlock(a) pthread_mutex_unlock((a)) #define ZSTD_pthread_cond_t pthread_cond_t #define ZSTD_pthread_cond_init(a, b) pthread_cond_init((a), (b)) #define ZSTD_pthread_cond_destroy(a) pthread_cond_destroy((a)) #define ZSTD_pthread_cond_wait(a, b) pthread_cond_wait((a), (b)) #define ZSTD_pthread_cond_signal(a) pthread_cond_signal((a)) #define ZSTD_pthread_cond_broadcast(a) pthread_cond_broadcast((a)) #define ZSTD_pthread_t pthread_t #define ZSTD_pthread_create(a, b, c, d) pthread_create((a), (b), (c), (d)) #define ZSTD_pthread_join(a, b) pthread_join((a),(b))"
  },
  {
    "label": "ZSTD_pthread_mutex_init()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ZSTD_pthread_mutex_init(a, b) ((void)(a), (void)(b), 0) #define ZSTD_pthread_mutex_destroy(a) ((void)(a)) #define ZSTD_pthread_mutex_lock(a) ((void)(a)) #define ZSTD_pthread_mutex_unlock(a) ((void)(a))"
  }
]