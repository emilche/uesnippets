[
  {
    "label": "AlwaysValidPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlwaysValidPointer"
  },
  {
    "label": "AlwaysValidPointerNoDefault",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlwaysValidPointerNoDefault"
  },
  {
    "label": "AlwaysValidPointer()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_MEMORY_ALWAYS_VALID_POINTER_H_ # define RTC_BASE_MEMORY_ALWAYS_VALID_POINTER_H_ # include<memory> # include<utility> # include \" rtc_base / checks . h \" namespace webrtc { template<Interface,Default = Interface> class AlwaysValidPointer { public :)",
    "insertText": "AlwaysValidPointer(Interface* pointer) : owned_instance_(pointer ? nullptr : std::make_unique<Default>()), pointer_(pointer ? pointer : owned_instance_.get())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(pointer_)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<Arg,)",
    "insertText": "enable_if(std::is_invocable<Arg>::value), bool>::type = true> AlwaysValidPointer(Interface* pointer, Arg arg) : owned_instance_(pointer ? nullptr : std::make_unique<Default>(std::move(arg))), pointer_(pointer ? pointer : owned_instance_.get())"
  },
  {
    "label": "AlwaysValidPointer()",
    "kind": "Method",
    "detail": "Function (} template<Arg1,. . . Args>)",
    "insertText": "AlwaysValidPointer(Interface* pointer, Arg1 arg1, Args... args) : owned_instance_(pointer ? nullptr : std::make_unique<Default>(std::move(arg1), std::move(args...))), pointer_(pointer ? pointer : owned_instance_.get())"
  },
  {
    "label": "AlwaysValidPointer()",
    "kind": "Method",
    "detail": "Function (} template<Func,std::enable_if<std::is_invocable<Func>::value,bool>::type = true>)",
    "insertText": "AlwaysValidPointer(Interface* pointer, Func function) : owned_instance_(pointer ? nullptr : function()), pointer_(owned_instance_ ? owned_instance_.get() : pointer)"
  },
  {
    "label": "AlwaysValidPointer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlwaysValidPointer(std::unique_ptr<Interface>&& instance, Interface* pointer) : owned_instance_( instance ? std::move(instance) : (pointer == nullptr ? std::make_unique<Default>() : nullptr)), pointer_(owned_instance_ ? owned_instance_.get() : pointer)"
  },
  {
    "label": "AlwaysValidPointer()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "AlwaysValidPointer(std::unique_ptr<Interface>&& instance, Interface* pointer, Args... args) : owned_instance_( instance ? std::move(instance) : (pointer == nullptr ? std::make_unique<Default>(std::move(args...)) : nullptr)), pointer_(owned_instance_ ? owned_instance_.get() : pointer)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} Interface*)",
    "insertText": "get()"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(pointer_)"
  },
  {
    "label": "AlwaysValidPointerNoDefault()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AlwaysValidPointerNoDefault(std::unique_ptr<Interface> instance, Interface* pointer = nullptr) : owned_instance_(std::move(instance)), pointer_(owned_instance_ ? owned_instance_.get() : pointer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U,V,W> bool)",
    "insertText": "operator(const AlwaysValidPointer<T, U>& a, const AlwaysValidPointer<V, W>& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> bool)",
    "insertText": "operator(const AlwaysValidPointer<T, U>& a, std::nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> bool)",
    "insertText": "operator(std::nullptr_t, const AlwaysValidPointer<T, U>& a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> bool)",
    "insertText": "operator(const AlwaysValidPointerNoDefault<T>& a, const AlwaysValidPointerNoDefault<U>& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(const AlwaysValidPointerNoDefault<T>& a, std::nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(std::nullptr_t, const AlwaysValidPointerNoDefault<T>& a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U,V> bool)",
    "insertText": "operator(const AlwaysValidPointer<T, U>& a, const V* b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U,V> bool)",
    "insertText": "operator(const T* a, const AlwaysValidPointer<U, V>& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> bool)",
    "insertText": "operator(const AlwaysValidPointerNoDefault<T>& a, const U* b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> bool)",
    "insertText": "operator(const T* a, const AlwaysValidPointerNoDefault<U>& b)"
  }
]