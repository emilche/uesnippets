[
  {
    "label": "FPointSetHashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointSetHashtable"
  },
  {
    "label": "FPointSetHashtable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" PointSetAdapter . h \" # include \" Spatial / SparseGrid3 . h \" # include \" Util / GridIndexing3 . h \" namespace UE { namespace Geometry { class FPointSetHashtable { protected : typedef TArray<int> PointList ; FPointSetAdapterd* Points ; TSparseGrid3<PointList> Grid ; FShiftGridIndexer3d GridIndexer ; FVector3d Origin ; double CellSize ; public :)",
    "insertText": "FPointSetHashtable(FPointSetAdapterd* PointSetIn)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (Points = PointSetIn ; } void)",
    "insertText": "Build(double CellSize, const FVector3d& Origin)"
  },
  {
    "label": "FindPointsInBall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPointsInBall(const FVector3d& QueryPt, double QueryRadius, TArray<int>& ResultOut)"
  }
]