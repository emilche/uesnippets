[
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTreeNodeGrouping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeNodeGrouping"
  },
  {
    "label": "STableTreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableTreeView"
  },
  {
    "label": "TRACEINSIGHTSCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACEINSIGHTSCORE_API"
  },
  {
    "label": "FTableTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableTreeNode"
  },
  {
    "label": "FTableRowId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" # include \" InsightsCore / Table / ViewModels / TableCellValue . h \" namespace UE::Insights { class FTable ; class FTreeNodeGrouping ; class STableTreeView ; struct FTableRowId { int32 InvalidRowIndex = - 1 ;)",
    "insertText": "FTableRowId(int32 InRowIndex) : RowIndex(InRowIndex)"
  },
  {
    "label": "HasValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidIndex()"
  },
  {
    "label": "FTableTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableTreeNode(const FName InGroupName, TWeakPtr<FTable> InParentTable) : FBaseTreeNode(InGroupName, true) , ParentTable(InParentTable) , RowId(FTableRowId::InvalidRowIndex) , AggregatedValues(nullptr)"
  },
  {
    "label": "FTableTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTableTreeNode(const FName InName, TWeakPtr<FTable> InParentTable, int32 InRowIndex, bool IsGroup) : FBaseTreeNode(InName, IsGroup) , ParentTable(InParentTable) , RowId(InRowIndex) , AggregatedValues(nullptr)"
  },
  {
    "label": "FTableTreeNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTableTreeNode()"
  },
  {
    "label": "CleanupAggregatedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupAggregatedValues()"
  },
  {
    "label": "GetParentTable()",
    "kind": "Method",
    "detail": "Function (} const TWeakPtr<FTable>&)",
    "insertText": "GetParentTable()"
  },
  {
    "label": "FTableCellValue()",
    "kind": "Method",
    "detail": "Function (AggregatedValues = new TMap<FName,)",
    "insertText": "FTableCellValue()"
  },
  {
    "label": "ResetAggregatedValues()",
    "kind": "Method",
    "detail": "Function (delete AggregatedValues ; AggregatedValues = nullptr ; } } void)",
    "insertText": "ResetAggregatedValues()"
  },
  {
    "label": "ResetAggregatedValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetAggregatedValue(const FName& ColumnId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (AggregatedValues ->)",
    "insertText": "Remove(ColumnId)"
  },
  {
    "label": "HasAggregatedValue()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasAggregatedValue(const FName& ColumnId)"
  },
  {
    "label": "FindAggregatedValue()",
    "kind": "Method",
    "detail": "Function (} const FTableCellValue*)",
    "insertText": "FindAggregatedValue(const FName& ColumnId)"
  },
  {
    "label": "GetAggregatedValue()",
    "kind": "Method",
    "detail": "Function (} const FTableCellValue&)",
    "insertText": "GetAggregatedValue(const FName& ColumnId)"
  },
  {
    "label": "SetAggregatedValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAggregatedValue(const FName& ColumnId, const FTableCellValue& Value)"
  },
  {
    "label": "InitAggregatedValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAggregatedValues()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AggregatedValues ->)",
    "insertText": "Add(ColumnId, Value)"
  },
  {
    "label": "IsFiltered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFiltered()"
  },
  {
    "label": "OnLazyCreateChildren()",
    "kind": "Method",
    "detail": "Function (bIsFiltered = InValue ; } bool)",
    "insertText": "OnLazyCreateChildren(TSharedPtr<STableTreeView> InTableTreeView)"
  },
  {
    "label": "FCustomTableTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomTableTreeNode(const FName InName, TWeakPtr<FTable> InParentTable, int32 InRowIndex, const FSlateBrush* InIconBrush, FLinearColor InIconColor, FLinearColor InColor, bool IsGroup) : FTableTreeNode(InName, InParentTable, InRowIndex, IsGroup) , IconBrush(InIconBrush) , IconColor(InIconColor) , Color(InColor)"
  },
  {
    "label": "FCustomTableTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomTableTreeNode(const FName InName, TWeakPtr<FTable> InParentTable, const FSlateBrush* InIconBrush, FLinearColor InColor) : FTableTreeNode(InName, InParentTable) , IconBrush(InIconBrush) , IconColor(InColor) , Color(InColor)"
  },
  {
    "label": "FCustomTableTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomTableTreeNode(const FName InName, TWeakPtr<FTable> InParentTable, const FSlateBrush* InIconBrush, FLinearColor InIconColor, FLinearColor InColor) : FTableTreeNode(InName, InParentTable) , IconBrush(InIconBrush) , IconColor(InIconColor) , Color(InColor)"
  },
  {
    "label": "FCustomTableTreeNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCustomTableTreeNode()"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetIcon()"
  },
  {
    "label": "GetIconColor()",
    "kind": "Method",
    "detail": "Function (IconBrush = InIconBrush ; } FLinearColor)",
    "insertText": "GetIconColor()"
  }
]