[
  {
    "label": "IMutualComponentInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMutualComponentInitializer"
  },
  {
    "label": "FEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityRange"
  },
  {
    "label": "FEntityAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocation"
  },
  {
    "label": "FMutualComponentInitializers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMutualComponentInitializers"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FEntityFactories",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityFactories"
  },
  {
    "label": "DuplicateChildComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateChildComponent(TComponentTypeID<ComponentType> InComponent)"
  },
  {
    "label": "ConditionallyDuplicateChildComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyDuplicateChildComponent(TComponentTypeID<ComponentType> InComponent, FComponentMask InParentComponentMask)"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineChildComponent(TComponentTypeID<ParentComponent> InParentType, TComponentTypeID<ChildComponent> InChildType, InitializerCallback&& InInitializer)"
  },
  {
    "label": "DefineChildComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineChildComponent(TInlineValue<FChildEntityInitializer>&& InInitializer)"
  },
  {
    "label": "DefineMutuallyInclusiveComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineMutuallyInclusiveComponents(FComponentTypeID InComponentA, std::initializer_list<FComponentTypeID> InMutualComponents)"
  },
  {
    "label": "DefineMutuallyInclusiveComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineMutuallyInclusiveComponents(FComponentTypeID InComponentA, std::initializer_list<FComponentTypeID> InMutualComponents, FMutuallyInclusiveComponentParams&& Params)"
  },
  {
    "label": "DefineComplexInclusiveComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComplexInclusiveComponents(const FComplexInclusivityFilter& InFilter, FComponentTypeID InComponent)"
  },
  {
    "label": "DefineComplexInclusiveComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineComplexInclusiveComponents(const FComplexInclusivityFilter& InFilter, std::initializer_list<FComponentTypeID> InComponents, FMutuallyInclusiveComponentParams&& Params)"
  },
  {
    "label": "ComputeChildComponents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeChildComponents(const FComponentMask& ParentComponentMask, FComponentMask& ChildComponentMask)"
  },
  {
    "label": "ComputeMutuallyInclusiveComponents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeMutuallyInclusiveComponents(EMutuallyInclusiveComponentType MutualTypes, FComponentMask& ComponentMask, FMutualComponentInitializers& OutInitializers)"
  },
  {
    "label": "RunInitializers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunInitializers(const FComponentMask& ParentType, const FComponentMask& ChildType, const FEntityAllocation* ParentAllocation, TArrayView<const int32> ParentAllocationOffsets, const FEntityRange& InChildEntityRange)"
  }
]