[
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TIsWeakPointerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsWeakPointerType"
  },
  {
    "label": "FUniqueObjectGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueObjectGuid"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FLazyObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLazyObjectPtr"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TLazyObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLazyObjectPtr"
  },
  {
    "label": "FUniqueObjectGuid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreGlobals . h \" # include \" HAL / Platform . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Misc / Guid . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / Casts . h \" # include \" Templates / Requires . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Object . h \" # include \" UObject / PersistentObjectPtr . h \" # include<type_traits> template<T> struct TIsPODType ; template<T> struct TIsWeakPointerType ; struct FUniqueObjectGuid {)",
    "insertText": "FUniqueObjectGuid()"
  },
  {
    "label": "FUniqueObjectGuid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueObjectGuid(const FGuid& InGuid) : Guid(InGuid)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (Guid .)",
    "insertText": "Invalidate()"
  },
  {
    "label": "FUniqueObjectGuid()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueObjectGuid(const class UObject* InObject)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const FString& From)"
  },
  {
    "label": "FixupForPIE()",
    "kind": "Method",
    "detail": "Function (FUniqueObjectGuid)",
    "insertText": "FixupForPIE(int32 PlayInEditorID = UE::GetPlayInEditorID())"
  },
  {
    "label": "ResolveObject()",
    "kind": "Method",
    "detail": "Function (class UObject*)",
    "insertText": "ResolveObject()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FUniqueObjectGuid& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FUniqueObjectGuid& ObjectGuid)"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<ObjectGuid . Guid ; return Ar ; } void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FUniqueObjectGuid& ObjectGuid)"
  },
  {
    "label": "FLazyObjectPtr()",
    "kind": "Method",
    "detail": "Function (private : FGuid Guid ; } ; template<> struct TIsPODType<FUniqueObjectGuid> { enum { Value = true } ; } ; struct FLazyObjectPtr : public TPersistentObjectPtr<FUniqueObjectGuid> { public :)",
    "insertText": "FLazyObjectPtr()"
  },
  {
    "label": "FLazyObjectPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLazyObjectPtr(const UObject* Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const UObject *Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPersistentObjectPtr<FUniqueObjectGuid)",
    "insertText": "operator(Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FUniqueObjectGuid& InObjectID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPersistentObjectPtr<FUniqueObjectGuid)",
    "insertText": "operator(InObjectID)"
  },
  {
    "label": "FixupForPIE()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FixupForPIE(int32 PIEInstance)"
  },
  {
    "label": "GetUniqueID()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "GetUniqueID().FixupForPIE(PIEInstance)"
  },
  {
    "label": "PossiblySerializeObjectGuid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PossiblySerializeObjectGuid(UObject* Object, FStructuredArchive::FRecord Record)"
  },
  {
    "label": "ResetPIEFixups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPIEFixups()"
  },
  {
    "label": "TLazyObjectPtr()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TIsPODType<FLazyObjectPtr> { enum { Value = TIsPODType<TPersistentObjectPtr<FUniqueObjectGuid>>::Value } ; } ; template<> struct TIsWeakPointerType<FLazyObjectPtr> { enum { Value = TIsWeakPointerType<TPersistentObjectPtr<FUniqueObjectGuid>>::Value } ; } ; template<class T = UObject> struct TLazyObjectPtr : private FLazyObjectPtr { public : using ElementType = T ;)",
    "insertText": "TLazyObjectPtr()"
  },
  {
    "label": "TLazyObjectPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TLazyObjectPtr(TLazyObjectPtr<T>&&)"
  },
  {
    "label": "TLazyObjectPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TLazyObjectPtr(const TLazyObjectPtr<T>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TLazyObjectPtr<T>&)",
    "insertText": "operator(TLazyObjectPtr<T>&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TLazyObjectPtr<T>&)",
    "insertText": "operator(const TLazyObjectPtr<T>&)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U*, T*>) > FORCEINLINE TLazyObjectPtr(const TLazyObjectPtr<U>& Other) : FLazyObjectPtr((const FLazyObjectPtr&)Other)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U*, T*>) > FORCEINLINE TLazyObjectPtr<T>& operator=(const TLazyObjectPtr<U>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator((const FLazyObjectPtr&)Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(T* Object)"
  },
  {
    "label": "GetUniqueID()",
    "kind": "Method",
    "detail": "Function (} const FUniqueObjectGuid&)",
    "insertText": "GetUniqueID()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStale()"
  },
  {
    "label": "IsPending()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPending()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetLazyObjecPtrTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLazyObjecPtrTypeHash()"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializePtr(FArchive& Ar)"
  },
  {
    "label": "FLazyObjectPtr()",
    "kind": "Method",
    "detail": "Function (Ar<<static_cast<)",
    "insertText": "FLazyObjectPtr(*this)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,=)",
    "insertText": "decltype((T*)nullptr == (U*)nullptr)> FORCEINLINE bool operator==(const TLazyObjectPtr<U>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,=)",
    "insertText": "decltype((T*)nullptr != (U*)nullptr)> FORCEINLINE bool operator!=(const TLazyObjectPtr<U>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,=)",
    "insertText": "decltype((T*)nullptr == (U*)nullptr)> FORCEINLINE bool operator==(const U* Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TYPE_OF_NULLPTR)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,=)",
    "insertText": "decltype((T*)nullptr != (U*)nullptr)> FORCEINLINE bool operator!=(const U* Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> uint32)",
    "insertText": "GetTypeHash(const TLazyObjectPtr<T>& LazyObjectPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> FArchive&)",
    "insertText": "operator(FArchive& Ar, TLazyObjectPtr<T>& LazyObjectPtr)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (LazyObjectPtr .)",
    "insertText": "SerializePtr(Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(TYPE_OF_NULLPTR, const TLazyObjectPtr<T>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T,U,=)",
    "insertText": "decltype((T*)nullptr != (U*)nullptr)> FORCEINLINE bool operator!=(const U* Lhs, const TLazyObjectPtr<T>& Rhs)"
  }
]