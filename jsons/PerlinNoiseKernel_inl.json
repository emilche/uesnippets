[
  {
    "label": "CPerlinNoiseKernel()",
    "kind": "Method",
    "detail": "Function (ST_INLINE)",
    "insertText": "CPerlinNoiseKernel(st_int32 nSize) : m_nSize(nSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_aKernel .)",
    "insertText": "resize(m_nSize * m_nSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CRandom cDice ;)",
    "insertText": "for(st_int32 i = 0; i < m_nSize * m_nSize; ++i) m_aKernel[i] = cDice.GetFloat(0.0f, 1.0f)"
  },
  {
    "label": "Kernel()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "Kernel(st_int32 nCol, st_int32 nRow)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size_t(nRow * m_nSize + nCol) < m_aKernel.size( ))"
  },
  {
    "label": "fabs()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "fabs(x)"
  },
  {
    "label": "fabs()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "fabs(y)"
  },
  {
    "label": "st_int32()",
    "kind": "Method",
    "detail": "Function (st_float32 fFractX = x -)",
    "insertText": "st_int32(x)"
  },
  {
    "label": "st_int32()",
    "kind": "Method",
    "detail": "Function (st_float32 fFractY = y -)",
    "insertText": "st_int32(y)"
  },
  {
    "label": "x1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "x1(st_int32(x) + m_nSize)"
  },
  {
    "label": "y1()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "y1(st_int32(y) + m_nSize)"
  },
  {
    "label": "x2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "x2(x1 + m_nSize - 1)"
  },
  {
    "label": "y2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "y2(y1 + m_nSize - 1)"
  },
  {
    "label": "Kernel()",
    "kind": "Method",
    "detail": "Function (float fBilinearSample = 0 . 0 f ; fBilinearSample + = fFractX* fFractY*)",
    "insertText": "Kernel(x1, y1)"
  },
  {
    "label": "fFractX()",
    "kind": "Method",
    "detail": "Function (fBilinearSample + =)",
    "insertText": "fFractX(1 - fFractY) * Kernel(x1, y2)"
  },
  {
    "label": "fBilinearSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fBilinearSample(1 - fFractX) * fFractY * Kernel(x2, y1)"
  },
  {
    "label": "fBilinearSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fBilinearSample(1 - fFractX) * (1 - fFractY) * Kernel(x2, y2)"
  }
]