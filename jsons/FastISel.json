[
  {
    "label": "FastISel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastISel"
  },
  {
    "label": "ArgListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArgListEntry"
  },
  {
    "label": "CallLoweringInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallLoweringInfo"
  },
  {
    "label": "SavePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SavePoint"
  },
  {
    "label": "ArgListEntry()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_FASTISEL_H # define LLVM_CODEGEN_FASTISEL_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / CodeGen / CallingConvLower . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include \" llvm / IR / CallingConv . h \" # include \" llvm / IR / IntrinsicInst . h \" # include \" llvm / Target / TargetLowering . h \" namespace llvm { class FastISel { public : struct ArgListEntry { Value* Val ; Type* Ty ; bool IsSExt : 1 ; bool IsZExt : 1 ; bool IsInReg : 1 ; bool IsSRet : 1 ; bool IsNest : 1 ; bool IsByVal : 1 ; bool IsInAlloca : 1 ; bool IsReturned : 1 ; uint16_t Alignment ;)",
    "insertText": "ArgListEntry() : Val(nullptr), Ty(nullptr), IsSExt(false), IsZExt(false), IsInReg(false), IsSRet(false), IsNest(false), IsByVal(false), IsInAlloca(false), IsReturned(false), Alignment(0)"
  },
  {
    "label": "setAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAttributes(ImmutableCallSite *CS, unsigned AttrIdx)"
  },
  {
    "label": "CallLoweringInfo()",
    "kind": "Method",
    "detail": "Function (} ; typedef std::vector<ArgListEntry> ArgListTy ; struct CallLoweringInfo { Type* RetTy ; bool RetSExt : 1 ; bool RetZExt : 1 ; bool IsVarArg : 1 ; bool IsInReg : 1 ; bool DoesNotReturn : 1 ; bool IsReturnValueUsed : 1 ; bool IsTailCall ; unsigned NumFixedArgs ; CallingConv::ID CallConv ; const Value* Callee ; MCSymbol* Symbol ; ArgListTy Args ; ImmutableCallSite* CS ; MachineInstr* Call ; unsigned ResultReg ; unsigned NumResultRegs ; bool IsPatchPoint ; SmallVector<Value*,1 6> OutVals ; SmallVector<ISD::ArgFlagsTy,1 6> OutFlags ; SmallVector<unsigned,1 6> OutRegs ; SmallVector<ISD::InputArg,4> Ins ; SmallVector<unsigned,4> InRegs ;)",
    "insertText": "CallLoweringInfo() : RetTy(nullptr), RetSExt(false), RetZExt(false), IsVarArg(false), IsInReg(false), DoesNotReturn(false), IsReturnValueUsed(true), IsTailCall(false), NumFixedArgs(-1), CallConv(CallingConv::C), Callee(nullptr), Symbol(nullptr), CS(nullptr), Call(nullptr), ResultReg(0), NumResultRegs(0), IsPatchPoint(false)"
  },
  {
    "label": "setCallee()",
    "kind": "Method",
    "detail": "Function (} CallLoweringInfo&)",
    "insertText": "setCallee(Type *ResultTy, FunctionType *FuncTy, const Value *Target, ArgListTy &&ArgsList, ImmutableCallSite &Call)"
  },
  {
    "label": "paramHasAttr()",
    "kind": "Method",
    "detail": "Function (RetTy = ResultTy ; Callee = Target ; IsInReg = Call .)",
    "insertText": "paramHasAttr(0, Attribute::InReg)"
  },
  {
    "label": "isVarArg()",
    "kind": "Method",
    "detail": "Function (IsVarArg = FuncTy ->)",
    "insertText": "isVarArg()"
  },
  {
    "label": "getInstruction()",
    "kind": "Method",
    "detail": "Function (IsReturnValueUsed = ! Call .)",
    "insertText": "getInstruction()->use_empty()"
  },
  {
    "label": "paramHasAttr()",
    "kind": "Method",
    "detail": "Function (RetSExt = Call .)",
    "insertText": "paramHasAttr(0, Attribute::SExt)"
  },
  {
    "label": "paramHasAttr()",
    "kind": "Method",
    "detail": "Function (RetZExt = Call .)",
    "insertText": "paramHasAttr(0, Attribute::ZExt)"
  },
  {
    "label": "getCallingConv()",
    "kind": "Method",
    "detail": "Function (CallConv = Call .)",
    "insertText": "getCallingConv()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Args =)",
    "insertText": "move(ArgsList)"
  },
  {
    "label": "getNumParams()",
    "kind": "Method",
    "detail": "Function (NumFixedArgs = FuncTy ->)",
    "insertText": "getNumParams()"
  },
  {
    "label": "setCallee()",
    "kind": "Method",
    "detail": "Function (CS =& Call ; return* this ; } CallLoweringInfo&)",
    "insertText": "setCallee(Type *ResultTy, FunctionType *FuncTy, MCSymbol *Target, ArgListTy &&ArgsList, ImmutableCallSite &Call, unsigned FixedArgs = ~0U)"
  },
  {
    "label": "getCalledValue()",
    "kind": "Method",
    "detail": "Function (RetTy = ResultTy ; Callee = Call .)",
    "insertText": "getCalledValue()"
  },
  {
    "label": "NumFixedArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumFixedArgs(FixedArgs == ~0U) ? FuncTy->getNumParams()"
  },
  {
    "label": "setCallee()",
    "kind": "Method",
    "detail": "Function (CS =& Call ; return* this ; } CallLoweringInfo&)",
    "insertText": "setCallee(CallingConv::ID CC, Type *ResultTy, const Value *Target, ArgListTy &&ArgsList, unsigned FixedArgs = ~0U)"
  },
  {
    "label": "NumFixedArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumFixedArgs(FixedArgs == ~0U) ? Args.size()"
  },
  {
    "label": "setCallee()",
    "kind": "Method",
    "detail": "Function (CallLoweringInfo&)",
    "insertText": "setCallee(CallingConv::ID CC, Type *ResultTy, MCSymbol *Target, ArgListTy &&ArgsList, unsigned FixedArgs = ~0U)"
  },
  {
    "label": "setIsPatchPoint()",
    "kind": "Method",
    "detail": "Function (IsTailCall = Value ; return* this ; } CallLoweringInfo&)",
    "insertText": "setIsPatchPoint(bool Value = true)"
  },
  {
    "label": "getArgs()",
    "kind": "Method",
    "detail": "Function (IsPatchPoint = Value ; return* this ; } ArgListTy&)",
    "insertText": "getArgs()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (OutVals .)",
    "insertText": "clear()"
  },
  {
    "label": "clearIns()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clearIns()"
  },
  {
    "label": "getLastLocalValue()",
    "kind": "Method",
    "detail": "Function (} } ; protected : DenseMap<const Value*,unsigned> LocalValueMap ; FunctionLoweringInfo& FuncInfo ; MachineFunction* MF ; MachineRegisterInfo& MRI ; MachineFrameInfo& MFI ; MachineConstantPool& MCP ; DebugLoc DbgLoc ; const TargetMachine& TM ; const DataLayout& DL ; const TargetInstrInfo& TII ; const TargetLowering& TLI ; const TargetRegisterInfo& TRI ; const TargetLibraryInfo* LibInfo ; bool SkipTargetIndependentISel ; MachineInstr* LastLocalValue ; MachineInstr* EmitStartPt ; public : MachineInstr*)",
    "insertText": "getLastLocalValue()"
  },
  {
    "label": "startNewBlock()",
    "kind": "Method",
    "detail": "Function (EmitStartPt = I ; LastLocalValue = I ; } void)",
    "insertText": "startNewBlock()"
  },
  {
    "label": "getCurDebugLoc()",
    "kind": "Method",
    "detail": "Function (DebugLoc)",
    "insertText": "getCurDebugLoc()"
  },
  {
    "label": "selectInstruction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectInstruction(const Instruction *I)"
  },
  {
    "label": "selectOperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectOperator(const User *I, unsigned Opcode)"
  },
  {
    "label": "getRegForValue()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getRegForValue(const Value *V)"
  },
  {
    "label": "lookUpRegForValue()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "lookUpRegForValue(const Value *V)"
  },
  {
    "label": "getRegForGEPIndex()",
    "kind": "Method",
    "detail": "Function (std::pair<unsigned,bool>)",
    "insertText": "getRegForGEPIndex(const Value *V)"
  },
  {
    "label": "tryToFoldLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tryToFoldLoad(const LoadInst *LI, const Instruction *FoldInst)"
  },
  {
    "label": "tryToFoldLoadIntoMI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tryToFoldLoadIntoMI(MachineInstr * , unsigned , const LoadInst *)"
  },
  {
    "label": "removeDeadCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDeadCode(MachineBasicBlock::iterator I, MachineBasicBlock::iterator E)"
  },
  {
    "label": "enterLocalValueArea()",
    "kind": "Method",
    "detail": "Function (struct SavePoint { MachineBasicBlock::iterator InsertPt ; DebugLoc DL ; } ; SavePoint)",
    "insertText": "enterLocalValueArea()"
  },
  {
    "label": "leaveLocalValueArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "leaveLocalValueArea(SavePoint Old)"
  },
  {
    "label": "FastISel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FastISel()"
  },
  {
    "label": "FastISel()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FastISel(FunctionLoweringInfo &FuncInfo, const TargetLibraryInfo *LibInfo, bool SkipTargetIndependentISel = false)"
  },
  {
    "label": "fastSelectInstruction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fastSelectInstruction(const Instruction *I)"
  },
  {
    "label": "fastLowerArguments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fastLowerArguments()"
  },
  {
    "label": "fastLowerCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fastLowerCall(CallLoweringInfo &CLI)"
  },
  {
    "label": "fastLowerIntrinsicCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fastLowerIntrinsicCall(const IntrinsicInst *II)"
  },
  {
    "label": "fastEmit_()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_(MVT VT, MVT RetVT, unsigned Opcode)"
  },
  {
    "label": "fastEmit_r()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_r(MVT VT, MVT RetVT, unsigned Opcode, unsigned Op0, bool Op0IsKill)"
  },
  {
    "label": "fastEmit_rr()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_rr(MVT VT, MVT RetVT, unsigned Opcode, unsigned Op0, bool Op0IsKill, unsigned Op1, bool Op1IsKill)"
  },
  {
    "label": "fastEmit_ri()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_ri(MVT VT, MVT RetVT, unsigned Opcode, unsigned Op0, bool Op0IsKill, uint64_t Imm)"
  },
  {
    "label": "fastEmit_rf()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_rf(MVT VT, MVT RetVT, unsigned Opcode, unsigned Op0, bool Op0IsKill, const ConstantFP *FPImm)"
  },
  {
    "label": "fastEmit_rri()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_rri(MVT VT, MVT RetVT, unsigned Opcode, unsigned Op0, bool Op0IsKill, unsigned Op1, bool Op1IsKill, uint64_t Imm)"
  },
  {
    "label": "fastEmit_ri_()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_ri_(MVT VT, unsigned Opcode, unsigned Op0, bool Op0IsKill, uint64_t Imm, MVT ImmType)"
  },
  {
    "label": "fastEmit_i()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_i(MVT VT, MVT RetVT, unsigned Opcode, uint64_t Imm)"
  },
  {
    "label": "fastEmit_f()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmit_f(MVT VT, MVT RetVT, unsigned Opcode, const ConstantFP *FPImm)"
  },
  {
    "label": "fastEmitInst_()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_(unsigned MachineInstOpcode, const TargetRegisterClass *RC)"
  },
  {
    "label": "fastEmitInst_r()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_r(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill)"
  },
  {
    "label": "fastEmitInst_rr()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_rr(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, unsigned Op1, bool Op1IsKill)"
  },
  {
    "label": "fastEmitInst_rrr()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_rrr(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, unsigned Op1, bool Op1IsKill, unsigned Op2, bool Op2IsKill)"
  },
  {
    "label": "fastEmitInst_ri()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_ri(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, uint64_t Imm)"
  },
  {
    "label": "fastEmitInst_rii()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_rii(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, uint64_t Imm1, uint64_t Imm2)"
  },
  {
    "label": "fastEmitInst_rf()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_rf(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, const ConstantFP *FPImm)"
  },
  {
    "label": "fastEmitInst_rri()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_rri(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, unsigned Op1, bool Op1IsKill, uint64_t Imm)"
  },
  {
    "label": "fastEmitInst_rrii()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_rrii(unsigned MachineInstOpcode, const TargetRegisterClass *RC, unsigned Op0, bool Op0IsKill, unsigned Op1, bool Op1IsKill, uint64_t Imm1, uint64_t Imm2)"
  },
  {
    "label": "fastEmitInst_i()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_i(unsigned MachineInstrOpcode, const TargetRegisterClass *RC, uint64_t Imm)"
  },
  {
    "label": "fastEmitInst_ii()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_ii(unsigned MachineInstrOpcode, const TargetRegisterClass *RC, uint64_t Imm1, uint64_t Imm2)"
  },
  {
    "label": "fastEmitInst_extractsubreg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitInst_extractsubreg(MVT RetVT, unsigned Op0, bool Op0IsKill, uint32_t Idx)"
  },
  {
    "label": "fastEmitZExtFromI1()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastEmitZExtFromI1(MVT VT, unsigned Op0, bool Op0IsKill)"
  },
  {
    "label": "fastEmitBranch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fastEmitBranch(MachineBasicBlock *MBB, DebugLoc DL)"
  },
  {
    "label": "updateValueMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateValueMap(const Value *I, unsigned Reg, unsigned NumRegs = 1)"
  },
  {
    "label": "createResultReg()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "createResultReg(const TargetRegisterClass *RC)"
  },
  {
    "label": "constrainOperandRegClass()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "constrainOperandRegClass(const MCInstrDesc &II, unsigned Op, unsigned OpNum)"
  },
  {
    "label": "fastMaterializeConstant()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "fastMaterializeConstant(const Constant *C)"
  },
  {
    "label": "hasTrivialKill()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasTrivialKill(const Value *V)"
  },
  {
    "label": "createMachineMemOperandFor()",
    "kind": "Method",
    "detail": "Function (MachineMemOperand*)",
    "insertText": "createMachineMemOperandFor(const Instruction *I)"
  },
  {
    "label": "optimizeCmpPredicate()",
    "kind": "Method",
    "detail": "Function (CmpInst::Predicate)",
    "insertText": "optimizeCmpPredicate(const CmpInst *CI)"
  },
  {
    "label": "lowerCallTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lowerCallTo(const CallInst *CI, MCSymbol *Symbol, unsigned NumArgs)"
  },
  {
    "label": "lowerCallTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lowerCallTo(const CallInst *CI, const char *SymbolName, unsigned NumArgs)"
  },
  {
    "label": "lowerCallTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lowerCallTo(CallLoweringInfo &CLI)"
  },
  {
    "label": "isCommutativeIntrinsic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCommutativeIntrinsic(IntrinsicInst const *II)"
  },
  {
    "label": "selectBinaryOp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectBinaryOp(const User *I, unsigned ISDOpcode)"
  },
  {
    "label": "selectFNeg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectFNeg(const User *I)"
  },
  {
    "label": "selectGetElementPtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectGetElementPtr(const User *I)"
  },
  {
    "label": "selectStackmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectStackmap(const CallInst *I)"
  },
  {
    "label": "selectPatchpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectPatchpoint(const CallInst *I)"
  },
  {
    "label": "selectCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectCall(const User *Call)"
  },
  {
    "label": "selectIntrinsicCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectIntrinsicCall(const IntrinsicInst *II)"
  },
  {
    "label": "selectBitCast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectBitCast(const User *I)"
  },
  {
    "label": "selectCast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectCast(const User *I, unsigned Opcode)"
  },
  {
    "label": "selectExtractValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectExtractValue(const User *I)"
  },
  {
    "label": "selectInsertValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "selectInsertValue(const User *I)"
  },
  {
    "label": "handlePHINodesInSuccessorBlocks()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "handlePHINodesInSuccessorBlocks(const BasicBlock *LLVMBB)"
  },
  {
    "label": "materializeConstant()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "materializeConstant(const Value *V, MVT VT)"
  },
  {
    "label": "materializeRegForValue()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "materializeRegForValue(const Value *V, MVT VT)"
  },
  {
    "label": "flushLocalValueMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flushLocalValueMap()"
  },
  {
    "label": "addStackMapLiveVars()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::iterator SavedInsertPt ; bool)",
    "insertText": "addStackMapLiveVars(SmallVectorImpl<MachineOperand> &Ops, const CallInst *CI, unsigned StartIdx)"
  },
  {
    "label": "lowerCallOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lowerCallOperands(const CallInst *CI, unsigned ArgIdx, unsigned NumArgs, const Value *Callee, bool ForceRetVoidTy, CallLoweringInfo &CLI)"
  }
]