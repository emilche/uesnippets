[
  {
    "label": "ObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectFile"
  },
  {
    "label": "COFFObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COFFObjectFile"
  },
  {
    "label": "MachOObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachOObjectFile"
  },
  {
    "label": "SymbolRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SymbolRef"
  },
  {
    "label": "symbol_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "symbol_iterator"
  },
  {
    "label": "SectionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SectionRef"
  },
  {
    "label": "RelocationRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RelocationRef"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "RelocationRef()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_OBJECTFILE_H # define LLVM_OBJECT_OBJECTFILE_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / Object / SymbolicFile . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / FileSystem . h \" # include \" llvm / Support / MemoryBuffer . h \" # include<cstring> # include<vector> namespace llvm { namespace object { class ObjectFile ; class COFFObjectFile ; class MachOObjectFile ; class SymbolRef ; class symbol_iterator ; class SectionRef ; typedef content_iterator<SectionRef> section_iterator ; class RelocationRef { DataRefImpl RelocationPimpl ; const ObjectFile* OwningObject ; public :)",
    "insertText": "RelocationRef() : OwningObject(nullptr)"
  },
  {
    "label": "RelocationRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RelocationRef(DataRefImpl RelocationP, const ObjectFile *Owner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RelocationRef &Other)"
  },
  {
    "label": "moveNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveNext()"
  },
  {
    "label": "getOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getOffset()"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (symbol_iterator)",
    "insertText": "getSymbol()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getType()"
  },
  {
    "label": "getTypeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getTypeName(SmallVectorImpl<char> &Result)"
  },
  {
    "label": "getRawDataRefImpl()",
    "kind": "Method",
    "detail": "Function (DataRefImpl)",
    "insertText": "getRawDataRefImpl()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (const ObjectFile*)",
    "insertText": "getObject()"
  },
  {
    "label": "SectionRef()",
    "kind": "Method",
    "detail": "Function (} ; typedef content_iterator<RelocationRef> relocation_iterator ; class SectionRef { class SymbolRef ; DataRefImpl SectionPimpl ; const ObjectFile* OwningObject ; public :)",
    "insertText": "SectionRef() : OwningObject(nullptr)"
  },
  {
    "label": "SectionRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SectionRef(DataRefImpl SectionP, const ObjectFile *Owner)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const SectionRef &Other)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getName(StringRef &Result)"
  },
  {
    "label": "getAddress()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getAddress()"
  },
  {
    "label": "getSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSize()"
  },
  {
    "label": "getContents()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getContents(StringRef &Result)"
  },
  {
    "label": "getAlignment()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getAlignment()"
  },
  {
    "label": "isText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isText()"
  },
  {
    "label": "isData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isData()"
  },
  {
    "label": "isBSS()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBSS()"
  },
  {
    "label": "isVirtual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVirtual()"
  },
  {
    "label": "containsSymbol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "containsSymbol(SymbolRef S)"
  },
  {
    "label": "relocation_begin()",
    "kind": "Method",
    "detail": "Function (relocation_iterator)",
    "insertText": "relocation_begin()"
  },
  {
    "label": "relocation_end()",
    "kind": "Method",
    "detail": "Function (relocation_iterator)",
    "insertText": "relocation_end()"
  },
  {
    "label": "relocations()",
    "kind": "Method",
    "detail": "Function (iterator_range<relocation_iterator>)",
    "insertText": "relocations()"
  },
  {
    "label": "getRelocatedSection()",
    "kind": "Method",
    "detail": "Function (} section_iterator)",
    "insertText": "getRelocatedSection()"
  },
  {
    "label": "SymbolRef()",
    "kind": "Method",
    "detail": "Function (} ; class SymbolRef : public BasicSymbolRef { class SectionRef ; public :)",
    "insertText": "SymbolRef() : BasicSymbolRef()"
  },
  {
    "label": "SymbolRef()",
    "kind": "Method",
    "detail": "Function (} enum Type { ST_Unknown,ST_Data,ST_Debug,ST_File,ST_Function,ST_Other } ;)",
    "insertText": "SymbolRef(DataRefImpl SymbolP, const ObjectFile *Owner)"
  },
  {
    "label": "SymbolRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SymbolRef(const BasicSymbolRef &B) : BasicSymbolRef(B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<ObjectFile>(BasicSymbolRef::getObject()))"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<StringRef>)",
    "insertText": "getName()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getValue()"
  },
  {
    "label": "getCommonSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getCommonSize()"
  },
  {
    "label": "getSection()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSection(section_iterator &Result)"
  },
  {
    "label": "symbol_iterator()",
    "kind": "Method",
    "detail": "Function (} ; class symbol_iterator : public basic_symbol_iterator { public :)",
    "insertText": "symbol_iterator(SymbolRef Sym) : basic_symbol_iterator(Sym)"
  },
  {
    "label": "symbol_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "symbol_iterator(const basic_symbol_iterator &B) : basic_symbol_iterator(SymbolRef(B->getRawDataRefImpl(), cast<ObjectFile>(B->getObject())))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const SymbolRef*)",
    "insertText": "operator()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} } ; class ObjectFile : public SymbolicFile { void)",
    "insertText": "anchor()"
  },
  {
    "label": "ObjectFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectFile()"
  },
  {
    "label": "ObjectFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectFile(const ObjectFile &other)"
  },
  {
    "label": "ObjectFile()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ObjectFile(unsigned int Type, MemoryBufferRef Source)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "base()"
  },
  {
    "label": "getSymbolName()",
    "kind": "Method",
    "detail": "Function (} class SymbolRef ; ErrorOr<StringRef>)",
    "insertText": "getSymbolName(DataRefImpl Symb)"
  },
  {
    "label": "printSymbolName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "printSymbolName(raw_ostream &OS, DataRefImpl Symb)"
  },
  {
    "label": "getSymbolAddress()",
    "kind": "Method",
    "detail": "Function (ErrorOr<uint64_t>)",
    "insertText": "getSymbolAddress(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolValueImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSymbolValueImpl(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolAlignment()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getSymbolAlignment(DataRefImpl Symb)"
  },
  {
    "label": "getCommonSymbolSizeImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getCommonSymbolSizeImpl(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolType()",
    "kind": "Method",
    "detail": "Function (SymbolRef::Type)",
    "insertText": "getSymbolType(DataRefImpl Symb)"
  },
  {
    "label": "getSymbolSection()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSymbolSection(DataRefImpl Symb, section_iterator &Res)"
  },
  {
    "label": "moveSectionNext()",
    "kind": "Method",
    "detail": "Function (class SectionRef ; void)",
    "insertText": "moveSectionNext(DataRefImpl &Sec)"
  },
  {
    "label": "getSectionName()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSectionName(DataRefImpl Sec, StringRef &Res)"
  },
  {
    "label": "getSectionAddress()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionAddress(DataRefImpl Sec)"
  },
  {
    "label": "getSectionSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionSize(DataRefImpl Sec)"
  },
  {
    "label": "getSectionContents()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getSectionContents(DataRefImpl Sec, StringRef &Res)"
  },
  {
    "label": "getSectionAlignment()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSectionAlignment(DataRefImpl Sec)"
  },
  {
    "label": "isSectionText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionText(DataRefImpl Sec)"
  },
  {
    "label": "isSectionData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionData(DataRefImpl Sec)"
  },
  {
    "label": "isSectionBSS()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionBSS(DataRefImpl Sec)"
  },
  {
    "label": "isSectionVirtual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSectionVirtual(DataRefImpl Sec)"
  },
  {
    "label": "section_rel_begin()",
    "kind": "Method",
    "detail": "Function (relocation_iterator)",
    "insertText": "section_rel_begin(DataRefImpl Sec)"
  },
  {
    "label": "section_rel_end()",
    "kind": "Method",
    "detail": "Function (relocation_iterator)",
    "insertText": "section_rel_end(DataRefImpl Sec)"
  },
  {
    "label": "getRelocatedSection()",
    "kind": "Method",
    "detail": "Function (section_iterator)",
    "insertText": "getRelocatedSection(DataRefImpl Sec)"
  },
  {
    "label": "moveRelocationNext()",
    "kind": "Method",
    "detail": "Function (class RelocationRef ; void)",
    "insertText": "moveRelocationNext(DataRefImpl &Rel)"
  },
  {
    "label": "getRelocationOffset()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getRelocationOffset(DataRefImpl Rel)"
  },
  {
    "label": "getRelocationSymbol()",
    "kind": "Method",
    "detail": "Function (symbol_iterator)",
    "insertText": "getRelocationSymbol(DataRefImpl Rel)"
  },
  {
    "label": "getRelocationType()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getRelocationType(DataRefImpl Rel)"
  },
  {
    "label": "getRelocationTypeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getRelocationTypeName(DataRefImpl Rel, SmallVectorImpl<char> &Result)"
  },
  {
    "label": "getSymbolValue()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getSymbolValue(DataRefImpl Symb)"
  },
  {
    "label": "getCommonSymbolSize()",
    "kind": "Method",
    "detail": "Function (public : uint64_t)",
    "insertText": "getCommonSymbolSize(DataRefImpl Symb)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getSymbolFlags(Symb) & SymbolRef::SF_Common)"
  },
  {
    "label": "symbols()",
    "kind": "Method",
    "detail": "Function (} typedef iterator_range<symbol_iterator> symbol_iterator_range ; symbol_iterator_range)",
    "insertText": "symbols()"
  },
  {
    "label": "section_begin()",
    "kind": "Method",
    "detail": "Function (} section_iterator)",
    "insertText": "section_begin()"
  },
  {
    "label": "section_end()",
    "kind": "Method",
    "detail": "Function (section_iterator)",
    "insertText": "section_end()"
  },
  {
    "label": "sections()",
    "kind": "Method",
    "detail": "Function (typedef iterator_range<section_iterator> section_iterator_range ; section_iterator_range)",
    "insertText": "sections()"
  },
  {
    "label": "getBytesInAddress()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "getBytesInAddress()"
  },
  {
    "label": "getFileFormatName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getFileFormatName()"
  },
  {
    "label": "getArch()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getArch()"
  },
  {
    "label": "getPlatformFlags()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getPlatformFlags(unsigned &Result)"
  },
  {
    "label": "isRelocatableObject()",
    "kind": "Method",
    "detail": "Function (Result = 0 ; return object_error::invalid_file_type ; } bool)",
    "insertText": "isRelocatableObject()"
  },
  {
    "label": "createObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<OwningBinary<ObjectFile>>)",
    "insertText": "createObjectFile(StringRef ObjectPath)"
  },
  {
    "label": "createObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<ObjectFile>>)",
    "insertText": "createObjectFile(MemoryBufferRef Object, sys::fs::file_magic Type)"
  },
  {
    "label": "createObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<ObjectFile>>)",
    "insertText": "createObjectFile(MemoryBufferRef Object)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Binary *v)"
  },
  {
    "label": "createCOFFObjectFile()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<std::unique_ptr<COFFObjectFile>>)",
    "insertText": "createCOFFObjectFile(MemoryBufferRef Object)"
  },
  {
    "label": "createELFObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<ObjectFile>>)",
    "insertText": "createELFObjectFile(MemoryBufferRef Object)"
  },
  {
    "label": "createMachOObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<MachOObjectFile>>)",
    "insertText": "createMachOObjectFile(MemoryBufferRef Object)"
  },
  {
    "label": "SymbolRef()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SymbolRef(DataRefImpl SymbolP, const ObjectFile *Owner) : BasicSymbolRef(SymbolP, Owner)"
  },
  {
    "label": "SectionRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SectionRef(DataRefImpl SectionP, const ObjectFile *Owner) : SectionPimpl(SectionP) , OwningObject(Owner)"
  }
]