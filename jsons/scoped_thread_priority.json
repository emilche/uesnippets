[
  {
    "label": "Location",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Location"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "INTERNAL_SCOPED_THREAD_PRIORITY_CONCAT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SCOPED_THREAD_PRIORITY_H_ # define BASE_THREADING_SCOPED_THREAD_PRIORITY_H_ # include<atomic> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class Location ; enum class ThreadType : int ; # define)",
    "insertText": "INTERNAL_SCOPED_THREAD_PRIORITY_CONCAT(a, b) a##b #define INTERNAL_SCOPED_THREAD_PRIORITY_CONCAT1(a, b) \\ INTERNAL_SCOPED_THREAD_PRIORITY_CONCAT(a, b) #define INTERNAL_SCOPED_THREAD_PRIORITY_APPEND_LINE(name) \\ INTERNAL_SCOPED_THREAD_PRIORITY_CONCAT1(name, __LINE__) #define SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY() \\ static std::atomic_bool INTERNAL_SCOPED_THREAD_PRIORITY_APPEND_LINE( \\ already_loaded)"
  },
  {
    "label": "INTERNAL_SCOPED_THREAD_PRIORITY_APPEND_LINE()",
    "kind": "Method",
    "detail": "Function (false } ; \\ base::internal::ScopedMayLoadLibraryAtBackgroundPriority \\)",
    "insertText": "INTERNAL_SCOPED_THREAD_PRIORITY_APPEND_LINE(\\ scoped_may_load_library_at_background_priority)( \\ FROM_HERE, \\ &INTERNAL_SCOPED_THREAD_PRIORITY_APPEND_LINE(already_loaded))"
  },
  {
    "label": "SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY_REPEATEDLY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCOPED_MAY_LOAD_LIBRARY_AT_BACKGROUND_PRIORITY_REPEATEDLY() \\ base::internal::ScopedMayLoadLibraryAtBackgroundPriority \\ INTERNAL_SCOPED_THREAD_PRIORITY_APPEND_LINE( \\ scoped_may_load_library_at_background_priority)(FROM_HERE, nullptr)"
  },
  {
    "label": "ScopedBoostPriority()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ScopedBoostPriority { public :)",
    "insertText": "ScopedBoostPriority(ThreadType target_thread_type)"
  },
  {
    "label": "ScopedBoostPriority()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedBoostPriority()"
  },
  {
    "label": "ScopedBoostPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedBoostPriority(const ScopedBoostPriority&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedBoostPriority&)",
    "insertText": "operator(const ScopedBoostPriority&)"
  },
  {
    "label": "ScopedMayLoadLibraryAtBackgroundPriority()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<ThreadType> original_thread_type_ ; } ; namespace internal { class BASE_EXPORT ScopedMayLoadLibraryAtBackgroundPriority { public :)",
    "insertText": "ScopedMayLoadLibraryAtBackgroundPriority(const Location& from_here, std::atomic_bool* already_loaded)"
  },
  {
    "label": "ScopedMayLoadLibraryAtBackgroundPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedMayLoadLibraryAtBackgroundPriority(const ScopedMayLoadLibraryAtBackgroundPriority&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMayLoadLibraryAtBackgroundPriority&)",
    "insertText": "operator(const ScopedMayLoadLibraryAtBackgroundPriority&)"
  },
  {
    "label": "ScopedMayLoadLibraryAtBackgroundPriority()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedMayLoadLibraryAtBackgroundPriority()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  }
]