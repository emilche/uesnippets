[
  {
    "label": "MockClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockClass"
  },
  {
    "label": "NiceMock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NiceMock"
  },
  {
    "label": "NaggyMock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NaggyMock"
  },
  {
    "label": "StrictMock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrictMock"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_ # include \" gmock / gmock - spec - builders . h \" # include \" gmock / internal / gmock - port . h \" namespace testing { template<class MockClass> class NiceMock : public MockClass { public :)",
    "insertText": "NiceMock() : MockClass()"
  },
  {
    "label": "AllowUninterestingCalls()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "AllowUninterestingCalls(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A>)",
    "insertText": "NiceMock(A&& arg) : MockClass(std::forward<A>(arg))"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,. . . An>)",
    "insertText": "NiceMock(A1&& arg1, A2&& arg2, An&&... args) : MockClass(std::forward<A1>(arg1), std::forward<A2>(arg2), std::forward<An>(args)...)"
  },
  {
    "label": "NiceMock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "NiceMock()"
  },
  {
    "label": "UnregisterCallReaction()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "UnregisterCallReaction(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(NiceMock)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} ; template<class MockClass> class NaggyMock : public MockClass { public :)",
    "insertText": "NaggyMock() : MockClass()"
  },
  {
    "label": "WarnUninterestingCalls()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "WarnUninterestingCalls(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A>)",
    "insertText": "NaggyMock(A&& arg) : MockClass(std::forward<A>(arg))"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,. . . An>)",
    "insertText": "NaggyMock(A1&& arg1, A2&& arg2, An&&... args) : MockClass(std::forward<A1>(arg1), std::forward<A2>(arg2), std::forward<An>(args)...)"
  },
  {
    "label": "NaggyMock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "NaggyMock()"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(NaggyMock)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} ; template<class MockClass> class StrictMock : public MockClass { public :)",
    "insertText": "StrictMock() : MockClass()"
  },
  {
    "label": "FailUninterestingCalls()",
    "kind": "Method",
    "detail": "Function (::testing::)",
    "insertText": "FailUninterestingCalls(internal::ImplicitCast_<MockClass*>(this))"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A>)",
    "insertText": "StrictMock(A&& arg) : MockClass(std::forward<A>(arg))"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} template<A1,A2,. . . An>)",
    "insertText": "StrictMock(A1&& arg1, A2&& arg2, An&&... args) : MockClass(std::forward<A1>(arg1), std::forward<A2>(arg2), std::forward<An>(args)...)"
  },
  {
    "label": "StrictMock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StrictMock()"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(StrictMock)"
  }
]