[
  {
    "label": "_SDL_Haptic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SDL_Haptic"
  },
  {
    "label": "SDL_HapticDirection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticDirection"
  },
  {
    "label": "SDL_HapticConstant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticConstant"
  },
  {
    "label": "SDL_HapticPeriodic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticPeriodic"
  },
  {
    "label": "SDL_HapticCondition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticCondition"
  },
  {
    "label": "SDL_HapticRamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticRamp"
  },
  {
    "label": "SDL_HapticLeftRight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticLeftRight"
  },
  {
    "label": "SDL_HapticCustom",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_HapticCustom"
  },
  {
    "label": "SDL_HAPTIC_CONSTANT()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_haptic_h_ # define SDL_haptic_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # include \" SDL_joystick . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif struct _SDL_Haptic ; typedef struct _SDL_Haptic SDL_Haptic ; # define)",
    "insertText": "SDL_HAPTIC_CONSTANT(1u<<0) #define SDL_HAPTIC_SINE (1u<<1) #define SDL_HAPTIC_LEFTRIGHT (1u<<2) #define SDL_HAPTIC_TRIANGLE (1u<<3) #define SDL_HAPTIC_SAWTOOTHUP (1u<<4) #define SDL_HAPTIC_SAWTOOTHDOWN (1u<<5) #define SDL_HAPTIC_RAMP (1u<<6) #define SDL_HAPTIC_SPRING (1u<<7) #define SDL_HAPTIC_DAMPER (1u<<8) #define SDL_HAPTIC_INERTIA (1u<<9) #define SDL_HAPTIC_FRICTION (1u<<10) #define SDL_HAPTIC_CUSTOM (1u<<11) #define SDL_HAPTIC_GAIN (1u<<12) #define SDL_HAPTIC_AUTOCENTER (1u<<13) #define SDL_HAPTIC_STATUS (1u<<14) #define SDL_HAPTIC_PAUSE (1u<<15)"
  },
  {
    "label": "SDL_NumHaptics()",
    "kind": "Method",
    "detail": "Function (Uint8 type ; Sint32 dir [ 3 ] ; } SDL_HapticDirection ; typedef struct SDL_HapticConstant { Uint16 type ; SDL_HapticDirection direction ; Uint32 length ; Uint16 delay ; Uint16 button ; Uint16 interval ; Sint16 level ; Uint16 attack_length ; Uint16 attack_level ; Uint16 fade_length ; Uint16 fade_level ; } SDL_HapticConstant ; typedef struct SDL_HapticPeriodic { Uint16 type ; SDL_HapticDirection direction ; Uint32 length ; Uint16 delay ; Uint16 button ; Uint16 interval ; Uint16 period ; Sint16 magnitude ; Sint16 offset ; Uint16 phase ; Uint16 attack_length ; Uint16 attack_level ; Uint16 fade_length ; Uint16 fade_level ; } SDL_HapticPeriodic ; typedef struct SDL_HapticCondition { Uint16 type ; SDL_HapticDirection direction ; Uint32 length ; Uint16 delay ; Uint16 button ; Uint16 interval ; Uint16 right_sat [ 3 ] ; Uint16 left_sat [ 3 ] ; Sint16 right_coeff [ 3 ] ; Sint16 left_coeff [ 3 ] ; Uint16 deadband [ 3 ] ; Sint16 center [ 3 ] ; } SDL_HapticCondition ; typedef struct SDL_HapticRamp { Uint16 type ; SDL_HapticDirection direction ; Uint32 length ; Uint16 delay ; Uint16 button ; Uint16 interval ; Sint16 start ; Sint16 end ; Uint16 attack_length ; Uint16 attack_level ; Uint16 fade_length ; Uint16 fade_level ; } SDL_HapticRamp ; typedef struct SDL_HapticLeftRight { Uint16 type ; Uint32 length ; Uint16 large_magnitude ; Uint16 small_magnitude ; } SDL_HapticLeftRight ; typedef struct SDL_HapticCustom { Uint16 type ; SDL_HapticDirection direction ; Uint32 length ; Uint16 delay ; Uint16 button ; Uint16 interval ; Uint8 channels ; Uint16 period ; Uint16 samples ; Uint16* data ; Uint16 attack_length ; Uint16 attack_level ; Uint16 fade_length ; Uint16 fade_level ; } SDL_HapticCustom ; typedef union SDL_HapticEffect { Uint16 type ; SDL_HapticConstant constant ; SDL_HapticPeriodic periodic ; SDL_HapticCondition condition ; SDL_HapticRamp ramp ; SDL_HapticLeftRight leftright ; SDL_HapticCustom custom ; } SDL_HapticEffect ; DECLSPEC int SDLCALL)",
    "insertText": "SDL_NumHaptics(void)"
  },
  {
    "label": "SDL_HapticName()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_HapticName(int device_index)"
  },
  {
    "label": "SDL_HapticOpen()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_Haptic* SDLCALL)",
    "insertText": "SDL_HapticOpen(int device_index)"
  },
  {
    "label": "SDL_HapticOpened()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticOpened(int device_index)"
  },
  {
    "label": "SDL_HapticIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticIndex(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_MouseIsHaptic()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_MouseIsHaptic(void)"
  },
  {
    "label": "SDL_HapticOpenFromMouse()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_Haptic* SDLCALL)",
    "insertText": "SDL_HapticOpenFromMouse(void)"
  },
  {
    "label": "SDL_JoystickIsHaptic()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_JoystickIsHaptic(SDL_Joystick * joystick)"
  },
  {
    "label": "SDL_HapticOpenFromJoystick()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_Haptic* SDLCALL)",
    "insertText": "SDL_HapticOpenFromJoystick(SDL_Joystick * joystick)"
  },
  {
    "label": "SDL_HapticClose()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_HapticClose(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticNumEffects()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticNumEffects(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticNumEffectsPlaying()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticQuery()",
    "kind": "Method",
    "detail": "Function (DECLSPEC unsigned int SDLCALL)",
    "insertText": "SDL_HapticQuery(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticNumAxes()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticNumAxes(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticEffectSupported()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticEffectSupported(SDL_Haptic * haptic, SDL_HapticEffect * effect)"
  },
  {
    "label": "SDL_HapticNewEffect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticNewEffect(SDL_Haptic * haptic, SDL_HapticEffect * effect)"
  },
  {
    "label": "SDL_HapticUpdateEffect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticUpdateEffect(SDL_Haptic * haptic, int effect, SDL_HapticEffect * data)"
  },
  {
    "label": "SDL_HapticRunEffect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticRunEffect(SDL_Haptic * haptic, int effect, Uint32 iterations)"
  },
  {
    "label": "SDL_HapticStopEffect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticStopEffect(SDL_Haptic * haptic, int effect)"
  },
  {
    "label": "SDL_HapticDestroyEffect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_HapticDestroyEffect(SDL_Haptic * haptic, int effect)"
  },
  {
    "label": "SDL_HapticGetEffectStatus()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticGetEffectStatus(SDL_Haptic * haptic, int effect)"
  },
  {
    "label": "SDL_HapticSetGain()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticSetGain(SDL_Haptic * haptic, int gain)"
  },
  {
    "label": "SDL_HapticSetAutocenter()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticSetAutocenter(SDL_Haptic * haptic, int autocenter)"
  },
  {
    "label": "SDL_HapticPause()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticPause(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticUnpause()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticUnpause(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticStopAll()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticStopAll(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticRumbleSupported()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticRumbleSupported(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticRumbleInit()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticRumbleInit(SDL_Haptic * haptic)"
  },
  {
    "label": "SDL_HapticRumblePlay()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length)"
  },
  {
    "label": "SDL_HapticRumbleStop()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_HapticRumbleStop(SDL_Haptic * haptic)"
  }
]