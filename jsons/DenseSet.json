[
  {
    "label": "DenseSetEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseSetEmpty"
  },
  {
    "label": "DenseSetPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseSetPair"
  },
  {
    "label": "DenseSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseSet"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "LookupKeyT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LookupKeyT"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_DENSESET_H # define LLVM_ADT_DENSESET_H # include \" llvm / ADT / DenseMap . h \" namespace llvm { namespace detail { struct DenseSetEmpty { } ; template<KeyT> class DenseSetPair : public DenseSetEmpty { KeyT key ; public : KeyT&)",
    "insertText": "getFirst()"
  },
  {
    "label": "DenseSet()",
    "kind": "Method",
    "detail": "Function (MapTy TheMap ; public : typedef ValueT key_type ; typedef ValueT value_type ; typedef unsigned size_type ;)",
    "insertText": "DenseSet(unsigned NumInitBuckets = 0) : TheMap(NumInitBuckets)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "getMemorySize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getMemorySize()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_t Size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (TheMap .)",
    "insertText": "resize(Size)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const ValueT &V)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(const ValueT &V)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(DenseSet& RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (TheMap .)",
    "insertText": "swap(RHS.TheMap)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} class Iterator { MapTy::iterator I ; class DenseSet ; public : typedef MapTy::iterator::difference_type difference_type ; typedef ValueT value_type ; typedef value_type* pointer ; typedef value_type& reference ; typedef std::forward_iterator_tag iterator_category ;)",
    "insertText": "Iterator(const typename MapTy::iterator &i) : I(i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueT&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + I ; return* this ; } bool)",
    "insertText": "operator(const Iterator& X)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + I ; return* this ; } bool)",
    "insertText": "operator(const ConstIterator& X)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(const ValueT &V)"
  },
  {
    "label": "find_as()",
    "kind": "Method",
    "detail": "Function (} template<class LookupKeyT> iterator)",
    "insertText": "find_as(const LookupKeyT &Val)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(Iterator I)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(ConstIterator CI)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(const ValueT &V)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (detail::DenseSetEmpty Empty ; return TheMap .)",
    "insertText": "insert(std::make_pair(V, Empty))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<InputIt> void)",
    "insertText": "insert(InputIt I, InputIt E)"
  }
]