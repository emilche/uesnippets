[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCompressedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressedBuffer"
  },
  {
    "label": "FSharedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedBuffer"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FEndLoadPackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndLoadPackageContext"
  },
  {
    "label": "FBulkDataRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataRegistryImpl"
  },
  {
    "label": "FRegisteredBulk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredBulk"
  },
  {
    "label": "FPendingPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingPackage"
  },
  {
    "label": "EFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFlags"
  },
  {
    "label": "FTempLoadedPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTempLoadedPayload"
  },
  {
    "label": "FTaskSharedDataLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskSharedDataLock"
  },
  {
    "label": "FUpdatePayloadWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdatePayloadWorker"
  },
  {
    "label": "FUpdatingPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdatingPayload"
  },
  {
    "label": "FPendingPayloadId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingPayloadId"
  },
  {
    "label": "FRegisteredBulk()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / RingBuffer . h \" # include \" DerivedDataRequestOwner . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Misc / Guid . h \" # include \" Serialization / BulkDataRegistry . h \" # include \" Serialization / EditorBulkData . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Tickable . h \" # include \" TickableEditorObject . h \" # include \" UObject / NameTypes . h \" # include<atomic> class FArchive ; class FCompressedBuffer ; class FSharedBuffer ; class UPackage ; struct FEndLoadPackageContext ; namespace UE::BulkDataRegistry::Private { class FBulkDataRegistryImpl ; struct FRegisteredBulk {)",
    "insertText": "FRegisteredBulk() : bHasTempPayload(false), bAllowedToWritePayloadIdToCache(false), bRegistered(false), bInMemory(false), bPayloadAvailable(false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} UE::Serialization::FEditorBulkData BulkData ; FName PackageName ; bool bHasTempPayload : 1 ; bool bAllowedToWritePayloadIdToCache : 1 ; bool bRegistered : 1 ; bool bInMemory : 1 ; bool bPayloadAvailable : 1 ; } ; void)",
    "insertText": "Serialize(FArchive& Ar, TArray<UE::Serialization::FEditorBulkData>& InDatas)"
  },
  {
    "label": "FPendingPackage()",
    "kind": "Method",
    "detail": "Function (class FPendingPackage { public :)",
    "insertText": "FPendingPackage(FName PackageName, FBulkDataRegistryImpl* InOwner)"
  },
  {
    "label": "FPendingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingPackage(FPendingPackage&& Other)"
  },
  {
    "label": "FPendingPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingPackage(const FPendingPackage& Other)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "AddBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBulkData(UE::Serialization::FEditorBulkData&& BulkData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BulkDatas .)",
    "insertText": "Add(MoveTemp(BulkData))"
  },
  {
    "label": "OnEndLoad()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndLoad(bool& bOutShouldRemove, bool& bOutShouldWriteCache)"
  },
  {
    "label": "IsLoadInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadInProgress()"
  },
  {
    "label": "OnBulkDataListResults()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBulkDataListResults(FSharedBuffer Buffer)"
  },
  {
    "label": "ReadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadCache(bool& bOutAbort)"
  },
  {
    "label": "FUpdatePayloadWorker()",
    "kind": "Method",
    "detail": "Function (enum EFlags : int32 { Flag_EndLoad = 1<<0,Flag_BulkDataListResults = 1<<1,Flag_Canceled = 1<<2,} ; FName PackageName ; TArray<UE::Serialization::FEditorBulkData> BulkDatas ; TArray<UE::Serialization::FEditorBulkData> CachedBulkDatas ; UE::DerivedData::FRequestOwner BulkDataListCacheRequest ; FBulkDataRegistryImpl* Owner ; std::atomic<int32> PendingOperations ; bool bLoadInProgress = true ; } ; struct FTempLoadedPayload { FGuid Guid ; uint64 PayloadSize ; double EndTime ; } ; class FTaskSharedDataLock : public FThreadSafeRefCountedObject { public : FRWLock ActiveLock ; bool bActive = true ; std::atomic<uint32> UpdatePayloadWorkerInFlight = 0 ; } ; class FUpdatePayloadWorker : public FNonAbandonableTask { public :)",
    "insertText": "FUpdatePayloadWorker(FBulkDataRegistryImpl* InBulkDataRegistry, const UE::Serialization::FEditorBulkData& InSourceBulk, bool bInKeepTempLoadedPayload)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : UE::Serialization::FEditorBulkData BulkData ; TRefCountPtr<FTaskSharedDataLock> SharedDataLock ; FBulkDataRegistryImpl* BulkDataRegistry ; bool bKeepTempLoadedPayload ; } ; struct FUpdatingPayload { FAutoDeleteAsyncTask<FUpdatePayloadWorker>* AsyncTask = nullptr ; TArray<TUniqueFunction<)",
    "insertText": "void(bool bValid, const FCompressedBuffer& Buffer)"
  },
  {
    "label": "FPendingPayloadId()",
    "kind": "Method",
    "detail": "Function (} ; class FPendingPayloadId : public FThreadSafeRefCountedObject { public :)",
    "insertText": "FPendingPayloadId(const FGuid& InBulkDataId)"
  },
  {
    "label": "FPendingPayloadId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingPayloadId(FPendingPayloadId&& Other)"
  },
  {
    "label": "FPendingPayloadId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingPayloadId(const FPendingPayloadId& Other)"
  },
  {
    "label": "GetRequestOwner()",
    "kind": "Method",
    "detail": "Function (UE::DerivedData::FRequestOwner&)",
    "insertText": "GetRequestOwner()"
  },
  {
    "label": "FBulkDataRegistryImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBulkDataRegistryImpl()"
  },
  {
    "label": "TryRegister()",
    "kind": "Method",
    "detail": "Function (UE::BulkDataRegistry::ERegisterResult)",
    "insertText": "TryRegister(UPackage* Owner, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "UpdateRegistrationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegistrationData(UPackage* Owner, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "OnExitMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitMemory(const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "UpdatePlaceholderPayloadId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaceholderPayloadId(const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "GetMeta()",
    "kind": "Method",
    "detail": "Function (TFuture<UE::BulkDataRegistry::FMetaData>)",
    "insertText": "GetMeta(const FGuid& BulkDataId)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (TFuture<UE::BulkDataRegistry::FData>)",
    "insertText": "GetData(const FGuid& BulkDataId)"
  },
  {
    "label": "TryGetBulkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetBulkData(const FGuid& BulkDataId, UE::Serialization::FEditorBulkData* OutBulk = nullptr, FName* OutOwner = nullptr)"
  },
  {
    "label": "GetBulkDataResaveSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetBulkDataResaveSize(FName PackageName)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "TickCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickCook(float DeltaTime, bool bTickComplete)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "AddPendingPackageBulkData()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddPendingPackageBulkData(FName PackageName, UE::Serialization::FEditorBulkData&& BulkData)"
  },
  {
    "label": "PollPendingPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollPendingPackages(bool bWaitForCooldown)"
  },
  {
    "label": "AddTempLoadedPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTempLoadedPayload(const FGuid& RegistryKey, uint64 PayloadSize)"
  },
  {
    "label": "PruneTempLoadedPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneTempLoadedPayloads()"
  },
  {
    "label": "OnEndLoadPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndLoadPackage(const FEndLoadPackageContext& Context)"
  },
  {
    "label": "WritePayloadIdToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePayloadIdToCache(FName PackageName, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "ReadPayloadIdsFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadPayloadIdsFromCache(FName PackageName, TArray<TRefCountPtr<FPendingPayloadId>>&& OldPendings, TArray<TRefCountPtr<FPendingPayloadId>>&& NewPendings)"
  },
  {
    "label": "OnEnginePreExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnginePreExit()"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  }
]