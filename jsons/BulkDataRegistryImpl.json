[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCompressedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressedBuffer"
  },
  {
    "label": "FSharedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedBuffer"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FEndLoadPackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndLoadPackageContext"
  },
  {
    "label": "FBulkDataRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataRegistryImpl"
  },
  {
    "label": "FRegisteredBulk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredBulk"
  },
  {
    "label": "FPendingPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingPackage"
  },
  {
    "label": "EFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFlags"
  },
  {
    "label": "FTempLoadedPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTempLoadedPayload"
  },
  {
    "label": "FTaskSharedDataLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTaskSharedDataLock"
  },
  {
    "label": "FUpdatePayloadWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdatePayloadWorker"
  },
  {
    "label": "FUpdatingPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdatingPayload"
  },
  {
    "label": "FPendingPayloadId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingPayloadId"
  },
  {
    "label": "FBulkDataRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataRegistryImpl"
  },
  {
    "label": "FPendingPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPendingPackage"
  },
  {
    "label": "FUpdatePayloadWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdatePayloadWorker"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, TArray<UE::Serialization::FEditorBulkData>& InDatas)"
  },
  {
    "label": "FPendingPackage()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FPendingPackage(FName PackageName, FBulkDataRegistryImpl* InOwner)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "OnEndLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndLoad(bool& bOutShouldRemove, bool& bOutShouldWriteCache)"
  },
  {
    "label": "WriteCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCache()"
  },
  {
    "label": "OnBulkDataListResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBulkDataListResults(FSharedBuffer Buffer)"
  },
  {
    "label": "ReadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadCache(bool& bOutAbort)"
  },
  {
    "label": "FUpdatePayloadWorker()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FUpdatePayloadWorker(FBulkDataRegistryImpl* InBulkDataRegistry,\n\t\tconst UE::Serialization::FEditorBulkData& InSourceBulk, bool bInKeepTempLoadedPayload)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "FPendingPayloadId()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FPendingPayloadId(const FGuid& InBulkDataId)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "FBulkDataRegistryImpl()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FBulkDataRegistryImpl()"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TStatId()"
  },
  {
    "label": "AddPendingPackageBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingPackageBulkData(FName PackageName, UE::Serialization::FEditorBulkData&& BulkData)"
  },
  {
    "label": "PollPendingPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollPendingPackages(bool bWaitForCooldown)"
  },
  {
    "label": "AddTempLoadedPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTempLoadedPayload(const FGuid& RegistryKey, uint64 PayloadSize)"
  },
  {
    "label": "PruneTempLoadedPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneTempLoadedPayloads()"
  },
  {
    "label": "OnEndLoadPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndLoadPackage(const FEndLoadPackageContext& Context)"
  },
  {
    "label": "WritePayloadIdToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePayloadIdToCache(FName PackageName, const UE::Serialization::FEditorBulkData& BulkData)"
  },
  {
    "label": "ReadPayloadIdsFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadPayloadIdsFromCache(FName PackageName, TArray<TRefCountPtr<FPendingPayloadId>>&& OldPendings,\n\t\tTArray<TRefCountPtr<FPendingPayloadId>>&& NewPendings)"
  },
  {
    "label": "OnEnginePreExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnginePreExit()"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  }
]