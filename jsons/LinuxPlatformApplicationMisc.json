[
  {
    "label": "FLinuxPlatformApplicationMisc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinuxPlatformApplicationMisc"
  },
  {
    "label": "FOutputDeviceConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceConsole"
  },
  {
    "label": "FOutputDeviceError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceError"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "PreInit()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GenericPlatform / GenericPlatformApplicationMisc . h \" struct FLinuxPlatformApplicationMisc : public FGenericPlatformApplicationMisc { void)",
    "insertText": "PreInit()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "InitSDL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitSDL()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "LoadPreInitModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPreInitModules()"
  },
  {
    "label": "LoadStartupModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStartupModules()"
  },
  {
    "label": "WindowStyle()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WindowStyle()"
  },
  {
    "label": "CreateConsoleOutputDevice()",
    "kind": "Method",
    "detail": "Function (class FOutputDeviceConsole*)",
    "insertText": "CreateConsoleOutputDevice()"
  },
  {
    "label": "GetErrorOutputDevice()",
    "kind": "Method",
    "detail": "Function (class FOutputDeviceError*)",
    "insertText": "GetErrorOutputDevice()"
  },
  {
    "label": "GetFeedbackContext()",
    "kind": "Method",
    "detail": "Function (class FFeedbackContext*)",
    "insertText": "GetFeedbackContext()"
  },
  {
    "label": "CreateApplication()",
    "kind": "Method",
    "detail": "Function (class GenericApplication*)",
    "insertText": "CreateApplication()"
  },
  {
    "label": "IsThisApplicationForeground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThisApplicationForeground()"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages(bool bFromMainLoop)"
  },
  {
    "label": "IsScreensaverEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScreensaverEnabled()"
  },
  {
    "label": "ControlScreensaver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ControlScreensaver(EScreenSaverAction Action)"
  },
  {
    "label": "GetDPIScaleFactorAtPoint()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScaleFactorAtPoint(float X, float Y)"
  },
  {
    "label": "ClipboardCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipboardCopy(const TCHAR* Str)"
  },
  {
    "label": "ClipboardPaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipboardPaste(class FString& Dest)"
  },
  {
    "label": "FullscreenSameAsWindowedFullscreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FullscreenSameAsWindowedFullscreen()"
  },
  {
    "label": "ShouldIncreaseProcessLimits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldIncreaseProcessLimits()"
  },
  {
    "label": "UsingOpenGL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsingOpenGL()"
  }
]