[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "ISlateBrushSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateBrushSource"
  },
  {
    "label": "SVirtualJoystick",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVirtualJoystick"
  },
  {
    "label": "FControlInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FControlInfo"
  },
  {
    "label": "FControlData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FControlData"
  },
  {
    "label": "EVirtualJoystickState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVirtualJoystickState"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; class ISlateBrushSource ; class SVirtualJoystick : public SLeafWidget { public : struct FControlInfo { bool bTreatAsButton = false ; TSharedPtr<ISlateBrushSource> Image1 ; TSharedPtr<ISlateBrushSource> Image2 ; FVector2D Center = FVector2D::ZeroVector ; FVector2D VisualSize = FVector2D::ZeroVector ; FVector2D ThumbSize = FVector2D::ZeroVector ; FVector2D InteractionSize = FVector2D::ZeroVector ; FVector2D InputScale =)",
    "insertText": "FVector2D(1.f, 1.f)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FKey MainInputKey ; FKey AltInputKey ; } ; struct FControlData { FControlInfo Info ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (FVector2D ThumbPosition = FVector2D::ZeroVector ; FVector2D VisualCenter = FVector2D::ZeroVector ; FVector2D CorrectedCenter = FVector2D::ZeroVector ; FVector2D CorrectedVisualSize = FVector2D::ZeroVector ; FVector2D CorrectedThumbSize = FVector2D::ZeroVector ; FVector2D CorrectedInteractionSize = FVector2D::ZeroVector ; FVector2D CorrectedInputScale = FVector2D::ZeroVector ; int32 CapturedPointerIndex = - 1 ; float ElapsedTime = 0 . 0 f ; FVector2D NextCenter = FVector2D::ZeroVector ; bool bSendOneMoreEvent = false ; bool bHasBeenPositioned = false ; bool bNeedUpdatedCenter = false ; } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SVirtualJoystick)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() SLATE_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ShouldDisplayTouchInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisplayTouchInterface()"
  },
  {
    "label": "SetJoystickVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJoystickVisibility(const bool bVisible, const bool bFade)"
  },
  {
    "label": "AddControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddControl(const FControlInfo& Control)"
  },
  {
    "label": "ClearControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearControls()"
  },
  {
    "label": "SetControls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControls(const TArray<FControlInfo>& InControls)"
  },
  {
    "label": "SetGlobalParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalParameters(float InActiveOpacity, float InInactiveOpacity, float InTimeUntilDeactive, float InTimeUntilReset, float InActivationDelay, bool InbPreventReCenter, float InStartupDelay)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& Event)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& Event)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& Event)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HandleDisplayMetricsChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "HandleDisplayMetricsChanged(const FDisplayMetrics& NewDisplayMetric)"
  },
  {
    "label": "AlignBoxIntoScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignBoxIntoScreen(FVector2D& Position, const FVector2D& Size, const FVector2D& ScreenSize)"
  },
  {
    "label": "ComputeThumbPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeThumbPosition(int32 ControlIndex, const FVector2D& LocalCoord, float* OutDistanceToTouchSqr = nullptr, float* OutDistanceToEdgeSqr = nullptr)"
  },
  {
    "label": "HandleTouch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTouch(int32 ControlIndex, const FVector2D& LocalCoord, const FVector2D& ScreenSize)"
  },
  {
    "label": "GetBaseOpacity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBaseOpacity()"
  }
]