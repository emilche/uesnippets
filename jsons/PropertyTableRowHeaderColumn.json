[
  {
    "label": "FPropertyTableRowHeaderColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyTableRowHeaderColumn"
  },
  {
    "label": "FPropertyPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyPath"
  },
  {
    "label": "IPropertyTableCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCell"
  },
  {
    "label": "IPropertyTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableRow"
  },
  {
    "label": "IPropertyTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTable"
  },
  {
    "label": "FCompareRowByColumnBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareRowByColumnBase"
  },
  {
    "label": "FPropertyTableRowHeaderColumn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PropertyPath . h \" # include \" IPropertyTableColumn . h \" # include \" IPropertyTable . h \" # include \" IPropertyTableCell . h \" # include \" IPropertyTableRow . h \" # include \" Presentation / PropertyTable / PropertyTableColumn . h \" # include \" Presentation / PropertyTable / PropertyTableCell . h \" # include \" Presentation / PropertyTable / DataSource . h \" class FPropertyTableRowHeaderColumn : public TSharedFromThis<FPropertyTableRowHeaderColumn>,public IPropertyTableColumn { public :)",
    "insertText": "FPropertyTableRowHeaderColumn(const TSharedRef< IPropertyTable >& InTable ) : Table( InTable ) , Cells() , bIsHidden( false ) , DataSource( MakeShareable( new NoDataSource() ))"
  },
  {
    "label": "FPropertyTableRowHeaderColumn()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPropertyTableRowHeaderColumn()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetId()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetDataSource()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IDataSource>)",
    "insertText": "GetDataSource()"
  },
  {
    "label": "GetPartialPath()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class FPropertyPath>)",
    "insertText": "GetPartialPath()"
  },
  {
    "label": "GetCell()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IPropertyTableCell>)",
    "insertText": "GetCell(const TSharedRef< class IPropertyTableRow >& Row)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IPropertyTableCell>* CellPtr = Cells .)",
    "insertText": "Find(Row)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Add(Row, Cell)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Remove(Row)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class IPropertyTable>)",
    "insertText": "GetTable()"
  },
  {
    "label": "CanSelectCells()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSelectCells()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHidden()"
  },
  {
    "label": "IsFrozen()",
    "kind": "Method",
    "detail": "Function (bIsHidden = InIsHidden ; } bool)",
    "insertText": "IsFrozen()"
  },
  {
    "label": "CanSortBy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSortBy()"
  },
  {
    "label": "GetPropertySorter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<struct FCompareRowByColumnBase>)",
    "insertText": "GetPropertySorter(const FProperty* Property, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DERIVED_EVENT(FPropertyTableColumn, IPropertyTableColumn::FFrozenStateChanged, FFrozenStateChanged)"
  },
  {
    "label": "OnFrozenStateChanged()",
    "kind": "Method",
    "detail": "Function (FFrozenStateChanged*)",
    "insertText": "OnFrozenStateChanged()"
  }
]