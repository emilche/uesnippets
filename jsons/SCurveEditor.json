[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IPropertyUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyUtilities"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SErrorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SErrorText"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "UCurveEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorSettings"
  },
  {
    "label": "UCurveFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTrackScaleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackScaleInfo"
  },
  {
    "label": "FCurveViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveViewModel"
  },
  {
    "label": "SCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditor"
  },
  {
    "label": "FSelectedCurveKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedCurveKey"
  },
  {
    "label": "FSelectedTangent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedTangent"
  },
  {
    "label": "SColorGradientEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorGradientEditor"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / SharedPointer . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Curves / KeyHandle . h \" # include \" Widgets / SWidget . h \" # include \" SColorGradientEditor . h \" # include \" UObject / GCObject . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" Curves / CurveBase . h \" # include \" EditorUndoClient . h \" class FPaintArgs ; class FSlateWindowElementList ; class FUICommandList ; class IPropertyUtilities ; class IMenu ; class SBox ; class SErrorText ; class SToolTip ; class UCurveEditorSettings ; class UCurveFactory ; enum class ECheckBoxState : uint8 ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCurveEditor, Log, All)"
  },
  {
    "label": "FTrackScaleInfo()",
    "kind": "Method",
    "detail": "Function (struct FTrackScaleInfo { float ViewMinInput ; float ViewMaxInput ; float ViewInputRange ; float PixelsPerInput ; float ViewMinOutput ; float ViewMaxOutput ; float ViewOutputRange ; float PixelsPerOutput ; FVector2D WidgetSize ;)",
    "insertText": "FTrackScaleInfo(float InViewMinInput, float InViewMaxInput, float InViewMinOutput, float InViewMaxOutput, const FVector2D InWidgetSize)"
  },
  {
    "label": "ViewInputRange()",
    "kind": "Method",
    "detail": "Function (WidgetSize = InWidgetSize ; ViewMinInput = InViewMinInput ; ViewMaxInput = InViewMaxInput ; ViewInputRange = ViewMaxInput - ViewMinInput ; PixelsPerInput =)",
    "insertText": "ViewInputRange(WidgetSize.X / ViewInputRange)"
  },
  {
    "label": "ViewOutputRange()",
    "kind": "Method",
    "detail": "Function (ViewMinOutput = InViewMinOutput ; ViewMaxOutput = InViewMaxOutput ; ViewOutputRange = InViewMaxOutput - InViewMinOutput ; PixelsPerOutput =)",
    "insertText": "ViewOutputRange(WidgetSize.Y / ViewOutputRange)"
  },
  {
    "label": "LocalXToInput()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "LocalXToInput(float ScreenX)"
  },
  {
    "label": "InputToLocalX()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "InputToLocalX(float Input)"
  },
  {
    "label": "LocalYToOutput()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "LocalYToOutput(float ScreenY)"
  },
  {
    "label": "OutputToLocalY()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "OutputToLocalY(float Output)"
  },
  {
    "label": "GetTrackCenterY()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTrackCenterY()"
  },
  {
    "label": "FCurveViewModel()",
    "kind": "Method",
    "detail": "Function (} } ; class FCurveViewModel { public : FRichCurveEditInfo CurveInfo ; FLinearColor Color ; bool bIsVisible ; bool bIsLocked ; bool bIsSelected ;)",
    "insertText": "FCurveViewModel(FRichCurveEditInfo InCurveInfo, FLinearColor InColor, bool bInIsLocked)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (CurveInfo = InCurveInfo ; Color = InColor ; bIsVisible = true ; bIsLocked = bInIsLocked ; bIsSelected = true ; } } ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnSetInputViewRange, float, float ) DECLARE_DELEGATE_TwoParams( FOnSetOutputViewRange, float, float ) DECLARE_DELEGATE_OneParam( FOnSetAreCurvesVisible, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : enum class EDragState { PreDrag,DragKey,FreeDrag,DragTangent,MarqueeSelect,Pan,Zoom,None } ; enum class EMovementAxisLock { AxisLock_Horizontal,AxisLock_Vertical,None } ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCurveEditor ) : _ViewMinInput(0.0f) , _ViewMaxInput(10.0f) , _ViewMinOutput(0.0f) , _ViewMaxOutput(1.0f) , _InputSnap(0.1f) , _OutputSnap(0.05f) , _InputSnappingEnabled(false) , _OutputSnappingEnabled(false) , _ShowTimeInFrames(false) , _TimelineLength(5.0f) , _DesiredSize(FVector2D::ZeroVector) , _DrawCurve(true) , _HideUI(true) , _AllowZoomOutput(true) , _AlwaysDisplayColorCurves(false) , _AlwaysHideGradientEditor(false) , _ZoomToFitVertical(true) , _ZoomToFitHorizontal(true) , _ShowZoomButtons(true) , _XAxisName() , _YAxisName() , _ShowInputGridNumbers(true) , _ShowOutputGridNumbers(true) , _ShowCurveSelector(true) , _GridColor(FLinearColor(0.0f, 0.0f, 0.0f, 0.3f))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_ATTRIBUTE(float, ViewMinInput ) SLATE_ATTRIBUTE( float, ViewMaxInput ) SLATE_ATTRIBUTE( TOptional<float>, DataMinInput ) SLATE_ATTRIBUTE( TOptional<float>, DataMaxInput ) SLATE_ATTRIBUTE( float, ViewMinOutput ) SLATE_ATTRIBUTE( float, ViewMaxOutput ) SLATE_ATTRIBUTE( float, InputSnap ) SLATE_ATTRIBUTE( float, OutputSnap ) SLATE_ATTRIBUTE( bool, InputSnappingEnabled ) SLATE_ATTRIBUTE( bool, OutputSnappingEnabled ) SLATE_ATTRIBUTE( bool, ShowTimeInFrames ) SLATE_ATTRIBUTE( float, TimelineLength ) SLATE_ATTRIBUTE( FVector2D, DesiredSize ) SLATE_ATTRIBUTE( bool, AreCurvesVisible ) SLATE_ARGUMENT( bool, DrawCurve ) SLATE_ARGUMENT( bool, HideUI ) SLATE_ARGUMENT( bool, AllowZoomOutput ) SLATE_ARGUMENT( bool, AlwaysDisplayColorCurves ) SLATE_ARGUMENT( bool, AlwaysHideGradientEditor ) SLATE_ARGUMENT( bool, ZoomToFitVertical ) SLATE_ARGUMENT( bool, ZoomToFitHorizontal ) SLATE_ARGUMENT( bool, ShowZoomButtons ) SLATE_ARGUMENT( TOptional<FString>, XAxisName ) SLATE_ARGUMENT( TOptional<FString>, YAxisName ) SLATE_ARGUMENT( bool, ShowInputGridNumbers ) SLATE_ARGUMENT( bool, ShowOutputGridNumbers ) SLATE_ARGUMENT( bool, ShowCurveSelector ) SLATE_ARGUMENT( FLinearColor, GridColor ) SLATE_EVENT( FOnSetInputViewRange, OnSetInputViewRange ) SLATE_EVENT( FOnSetOutputViewRange, OnSetOutputViewRange ) SLATE_EVENT( FOnSetAreCurvesVisible, OnSetAreCurvesVisible ) SLATE_EVENT( FSimpleDelegate, OnCreateAsset ) SLATE_END_ARGS() UNREALED_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SCurveEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SCurveEditor()"
  },
  {
    "label": "SetCurveOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveOwner(FCurveOwnerInterface* InCurveOwner, bool bCanEdit = true)"
  },
  {
    "label": "SetPropertyUtils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyUtils(const TSharedPtr<IPropertyUtilities>& InPropertyUtils)"
  },
  {
    "label": "SetZoomToFit()",
    "kind": "Method",
    "detail": "Function (PropertyUtilitiesWeak = InPropertyUtils ; } void)",
    "insertText": "SetZoomToFit(bool bNewZoomToFitVertical, bool bNewZoomToFitHorizontal)"
  },
  {
    "label": "GetCurveOwner()",
    "kind": "Method",
    "detail": "Function (FCurveOwnerInterface*)",
    "insertText": "GetCurveOwner()"
  },
  {
    "label": "GetCurveFactory()",
    "kind": "Method",
    "detail": "Function (UCurveFactory*)",
    "insertText": "GetCurveFactory()"
  },
  {
    "label": "CreateCurveObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateCurveObject(TSubclassOf<UCurveBase> CurveType, UObject* PackagePtr, FName& AssetName)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetCommands()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FUICommandList>)",
    "insertText": "GetCommands()"
  },
  {
    "label": "GetAllowAutoFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowAutoFrame()"
  },
  {
    "label": "GetAutoFrame()",
    "kind": "Method",
    "detail": "Function (bAllowAutoFrame = bInAllowAutoFrame ; } bool)",
    "insertText": "GetAutoFrame()"
  },
  {
    "label": "GetCurvesToFit()",
    "kind": "Method",
    "detail": "Function (TArray<FRealCurve*>)",
    "insertText": "GetCurvesToFit()"
  },
  {
    "label": "ZoomToFitHorizontal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitHorizontal(const bool bZoomToFitAll = false)"
  },
  {
    "label": "ZoomToFitVertical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitVertical(const bool bZoomToFitAll = false)"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(const bool bZoomToFitAll = false)"
  },
  {
    "label": "SetRequireFocusToZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequireFocusToZoom(bool bInRequireFocusToZoom)"
  },
  {
    "label": "OnQueryShowFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "OnQueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "FSelectedCurveKey()",
    "kind": "Method",
    "detail": "Function (private : struct FSelectedCurveKey {)",
    "insertText": "FSelectedCurveKey(FRealCurve* InCurve, FKeyHandle InKeyHandle) : Curve(InCurve), KeyHandle(InKeyHandle)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsSameCurve()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSameCurve(const FSelectedCurveKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSelectedCurveKey& Other)"
  },
  {
    "label": "FSelectedTangent()",
    "kind": "Method",
    "detail": "Function (} FRealCurve* Curve ; FKeyHandle KeyHandle ; } ; struct FSelectedTangent {)",
    "insertText": "FSelectedTangent(): Key(NULL,FKeyHandle()),bIsArrival(false)"
  },
  {
    "label": "FSelectedTangent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSelectedTangent(FSelectedCurveKey InKey) : Key(InKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSelectedTangent& Other)"
  },
  {
    "label": "AddNewKey()",
    "kind": "Method",
    "detail": "Function (FSelectedCurveKey Key ; bool bIsArrival ; } ; private : void)",
    "insertText": "AddNewKey(FGeometry InMyGeometry, FVector2D ScreenPosition, TSharedPtr<TArray<TSharedPtr<FCurveViewModel>>> CurvesToAddKeysTo, bool bAddKeysInline)"
  },
  {
    "label": "IsValidCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCurve(FRealCurve* Curve)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (FRealCurve*)",
    "insertText": "GetCurve(int32 CurveIndex)"
  },
  {
    "label": "NewValueEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewValueEntered(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "NewHorizontalGridScaleEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewHorizontalGridScaleEntered(const FString& NewText, bool bCommitFromEnter)"
  },
  {
    "label": "NewVerticalGridScaleEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewVerticalGridScaleEntered(const FString& NewText, bool bCommitFromEnter)"
  },
  {
    "label": "DeleteSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedKeys()"
  },
  {
    "label": "HitTestKeys()",
    "kind": "Method",
    "detail": "Function (FSelectedCurveKey)",
    "insertText": "HitTestKeys(const FGeometry& InMyGeometry, const FVector2D& HitScreenPosition)"
  },
  {
    "label": "HitTestCubicTangents()",
    "kind": "Method",
    "detail": "Function (FSelectedTangent)",
    "insertText": "HitTestCubicTangents(const FGeometry& InMyGeometry, const FVector2D& HitScreenPosition)"
  },
  {
    "label": "GetTangentPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangentPoints(FTrackScaleInfo &ScaleInfo,const FSelectedCurveKey &Key, FVector2D& Arrive, FVector2D& Leave)"
  },
  {
    "label": "GetEditableKeysWithinMarquee()",
    "kind": "Method",
    "detail": "Function (TArray<FSelectedCurveKey>)",
    "insertText": "GetEditableKeysWithinMarquee(const FGeometry& InMyGeometry, FVector2D MarqueeTopLeft, FVector2D MarqueeBottomRight)"
  },
  {
    "label": "GetEditableTangentsWithinMarquee()",
    "kind": "Method",
    "detail": "Function (TArray<FSelectedTangent>)",
    "insertText": "GetEditableTangentsWithinMarquee(const FGeometry& InMyGeometry, FVector2D MarqueeTopLeft, FVector2D MarqueeBottomRight)"
  },
  {
    "label": "EmptyKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyKeySelection()"
  },
  {
    "label": "AddToKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToKeySelection(FSelectedCurveKey Key)"
  },
  {
    "label": "RemoveFromKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromKeySelection(FSelectedCurveKey Key)"
  },
  {
    "label": "IsKeySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeySelected(FSelectedCurveKey Key)"
  },
  {
    "label": "AreKeysSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreKeysSelected()"
  },
  {
    "label": "EmptyTangentSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyTangentSelection()"
  },
  {
    "label": "AddToTangentSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToTangentSelection(FSelectedTangent Tangent)"
  },
  {
    "label": "RemoveFromTangentSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromTangentSelection(FSelectedTangent Tangent)"
  },
  {
    "label": "IsTangentSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentSelected(FSelectedTangent Tangent)"
  },
  {
    "label": "AreTangentsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreTangentsSelected()"
  },
  {
    "label": "IsTangentVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentVisible(FRichCurve*, FKeyHandle, bool& IsTangentSelected, bool& IsArrivalSelected, bool& IsLeaveSelected)"
  },
  {
    "label": "EmptyAllSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyAllSelection()"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetKeyValue(FSelectedCurveKey Key)"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetKeyTime(FSelectedCurveKey Key)"
  },
  {
    "label": "MoveSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedKeys(FVector2D Delta)"
  },
  {
    "label": "IsEditingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditingEnabled()"
  },
  {
    "label": "ZoomToFitHorizontalClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ZoomToFitHorizontalClicked()"
  },
  {
    "label": "ZoomToFitVerticalClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ZoomToFitVerticalClicked()"
  },
  {
    "label": "ToggleInputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInputSnapping()"
  },
  {
    "label": "ToggleOutputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOutputSnapping()"
  },
  {
    "label": "IsInputSnappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputSnappingEnabled()"
  },
  {
    "label": "IsOutputSnappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputSnappingEnabled()"
  },
  {
    "label": "ShowTimeInFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowTimeInFrames()"
  },
  {
    "label": "OnGetTime()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "OnGetTime()"
  },
  {
    "label": "OnTimeComitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeComitted(float NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnTimeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeChanged(float NewValue)"
  },
  {
    "label": "OnGetTimeInFrames()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "OnGetTimeInFrames()"
  },
  {
    "label": "OnTimeInFramesComitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeInFramesComitted(int32 NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnTimeInFramesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeInFramesChanged(int32 NewValue)"
  },
  {
    "label": "UpdateCurveTimeSingleKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveTimeSingleKey(FSelectedCurveKey Key, float NewTime, bool bSetFromFrame = false)"
  },
  {
    "label": "UpdateCurveTimeSingleKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveTimeSingleKey(FSelectedCurveKey Key, int32 NewFrame)"
  },
  {
    "label": "LogAndToastCurveTimeWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAndToastCurveTimeWarning(FRealCurve* Curve)"
  },
  {
    "label": "OnGetValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "OnGetValue()"
  },
  {
    "label": "OnValueComitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueComitted(float NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueChanged(float NewValue)"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSliderMovement(FText TransactionName)"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(float NewValue)"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(int32 NewValue)"
  },
  {
    "label": "GetCurveAreaVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCurveAreaVisibility()"
  },
  {
    "label": "GetCurveSelectorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCurveSelectorVisibility()"
  },
  {
    "label": "GetEditVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditVisibility()"
  },
  {
    "label": "GetColorGradientVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetColorGradientVisibility()"
  },
  {
    "label": "GetZoomButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetZoomButtonVisibility()"
  },
  {
    "label": "GetTimeEditVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTimeEditVisibility()"
  },
  {
    "label": "GetFrameEditVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFrameEditVisibility()"
  },
  {
    "label": "GetInputEditEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInputEditEnabled()"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateContextMenu(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnCreateExternalCurveClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateExternalCurveClicked()"
  },
  {
    "label": "OnShowCurveToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowCurveToggled()"
  },
  {
    "label": "OnShowGradientToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowGradientToggled()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (bIsGradientEditorVisible = ! bIsGradientEditorVisible ; } FSimpleDelegate OnCreateAsset ; FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "PaintCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintCurve(TSharedPtr<FCurveViewModel> CurveViewModel, const FGeometry &AllottedGeometry, FTrackScaleInfo &ScaleInfo, FSlateWindowElementList &OutDrawElements, int32 LayerId, const FSlateRect& MyCullingRect, ESlateDrawEffect DrawEffects, const FWidgetStyle &InWidgetStyle, bool bAnyCurveViewModelsSelected)"
  },
  {
    "label": "PaintKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintKeys(TSharedPtr<FCurveViewModel> CurveViewModel, FTrackScaleInfo &ScaleInfo, FSlateWindowElementList &OutDrawElements, int32 LayerId, int32 SelectedLayerId, const FGeometry &AllottedGeometry, const FSlateRect& MyCullingRect, ESlateDrawEffect DrawEffects, const FWidgetStyle &InWidgetStyle, bool bAnyCurveViewModelsSelected)"
  },
  {
    "label": "PaintTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintTangent(TSharedPtr<FCurveViewModel> CurveViewModel, FTrackScaleInfo &ScaleInfo, FRichCurve* Curve, FKeyHandle KeyHandle, FVector2D KeyLocation, FSlateWindowElementList &OutDrawElements, int32 LayerId, const FGeometry &AllottedGeometry, const FSlateRect& MyCullingRect, ESlateDrawEffect DrawEffects, int32 LayerToUse, const FWidgetStyle &InWidgetStyle, bool bTangentSelected, bool bIsArrivalSelected, bool bIsLeaveSelected, bool bAnyCurveViewModelsSelected)"
  },
  {
    "label": "PaintGridLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintGridLines(const FGeometry &AllottedGeometry, FTrackScaleInfo &ScaleInfo, FSlateWindowElementList &OutDrawElements, int32 LayerId, const FSlateRect& MyCullingRect, ESlateDrawEffect DrawEffects)"
  },
  {
    "label": "PaintMarquee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintMarquee(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "GetInputNumericEntryBoxDelta()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInputNumericEntryBoxDelta()"
  },
  {
    "label": "GetOutputNumericEntryBoxDelta()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOutputNumericEntryBoxDelta()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "TryStartDrag()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TryStartDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ProcessDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "EndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "CreateLinesForSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLinesForSegment(FRealCurve* Curve, ERichCurveInterpMode InterpMode, const TPair<float,float>& Key1_TimeValue, const TPair<float,float>& Key2_TimeValue, TArray<FVector2D>& Points, FTrackScaleInfo &ScaleInfo)"
  },
  {
    "label": "HitTestCurves()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveViewModel>)",
    "insertText": "HitTestCurves(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "MoveTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTangents(FTrackScaleInfo& ScaleInfo, FVector2D Delta)"
  },
  {
    "label": "CreateCurveSelectionWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateCurveSelectionWidget()"
  },
  {
    "label": "PushWarningMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushWarningMenu(FVector2D Position, const FText& Message)"
  },
  {
    "label": "PushKeyMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushKeyMenu(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnSelectInterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectInterpolationMode(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "IsInterpolationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterpolationModeSelected(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "HasRichCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRichCurves()"
  },
  {
    "label": "OnFlattenOrStraightenTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlattenOrStraightenTangents(bool bFlattenTangents)"
  },
  {
    "label": "OnBakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBakeCurve()"
  },
  {
    "label": "OnBakeCurveSampleRateCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBakeCurveSampleRateCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnReduceCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReduceCurve()"
  },
  {
    "label": "OnReduceCurveToleranceCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReduceCurveToleranceCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnSelectPreInfinityExtrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectPreInfinityExtrap(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "IsPreInfinityExtrapSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreInfinityExtrapSelected(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "OnSelectPostInfinityExtrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectPostInfinityExtrap(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "IsPostInfinityExtrapSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostInfinityExtrapSelected(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "BeginDragTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDragTransaction()"
  },
  {
    "label": "EndDragTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDragTransaction()"
  },
  {
    "label": "CalcGridLineStepDistancePow2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcGridLineStepDistancePow2(double RawValue)"
  },
  {
    "label": "UndoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoAction()"
  },
  {
    "label": "RedoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedoAction()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "AreCurvesVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreCurvesVisible()"
  },
  {
    "label": "IsGradientEditorVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGradientEditorVisible()"
  },
  {
    "label": "IsCurveSelectable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurveSelectable(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "SnapLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "SnapLocation(FVector2D InLocation)"
  },
  {
    "label": "GetIsCurveVisibleToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIsCurveVisibleToolTip(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "IsCurveVisible()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsCurveVisible(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "OnCurveIsVisibleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveIsVisibleChanged(ECheckBoxState NewCheckboxState, TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "GetIsCurveLockedToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetIsCurveLockedToolTip(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "IsCurveLocked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsCurveLocked(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "OnCurveIsLockedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveIsLockedChanged(ECheckBoxState NewCheckboxState, TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "RemoveCurveKeysFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurveKeysFromSelection(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "GetCurveToolTipNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurveToolTipNameText()"
  },
  {
    "label": "GetCurveToolTipInputText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurveToolTipInputText()"
  },
  {
    "label": "GetCurveToolTipOutputText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurveToolTipOutputText()"
  },
  {
    "label": "GetInputAxisName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetInputAxisName()"
  },
  {
    "label": "UpdateCurveToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveToolTip(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetViewModelForCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveViewModel>)",
    "insertText": "GetViewModelForCurve(FRealCurve* InCurve)"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* Object, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "HandlePackageReloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePackageReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  },
  {
    "label": "SetDefaultOutput()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetDefaultOutput(const float MinZoomRange)"
  },
  {
    "label": "GetTimeStep()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeStep(FTrackScaleInfo &ScaleInfo)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "SetInputMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMinMax(float NewMin, float NewMax)"
  },
  {
    "label": "SetOutputMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputMinMax(float NewMin, float NewMax)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (UCurveEditorSettings*)",
    "insertText": "GetSettings()"
  },
  {
    "label": "ClearSelectedCurveViewModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedCurveViewModels()"
  },
  {
    "label": "SetSelectedCurveViewModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedCurveViewModel(FRealCurve* Curve)"
  },
  {
    "label": "AnyCurveViewModelsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyCurveViewModelsSelected()"
  },
  {
    "label": "ValidateSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSelection()"
  },
  {
    "label": "GenericTextEntryModeless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericTextEntryModeless(const FText& DialogText, const FText& DefaultText, FOnTextCommitted OnTextComitted)"
  },
  {
    "label": "CloseEntryPopupMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopupMenu()"
  },
  {
    "label": "TimeToFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TimeToFrame(float InTime)"
  },
  {
    "label": "FrameToTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FrameToTime(int32 InFrame)"
  }
]