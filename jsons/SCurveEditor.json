[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IPropertyUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyUtilities"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SErrorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SErrorText"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "UCurveEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorSettings"
  },
  {
    "label": "UCurveFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FTrackScaleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackScaleInfo"
  },
  {
    "label": "FCurveViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveViewModel"
  },
  {
    "label": "SCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSelectedCurveKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedCurveKey"
  },
  {
    "label": "FSelectedTangent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedTangent"
  },
  {
    "label": "SColorGradientEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorGradientEditor"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCurveEditor, Log, All)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetCurveOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveOwner(FCurveOwnerInterface* InCurveOwner, bool bCanEdit = true)"
  },
  {
    "label": "SetZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetZoomToFit(bool bNewZoomToFitVertical, bool bNewZoomToFitHorizontal)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"SCurveEditor\")"
  },
  {
    "label": "GetCommands()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "GetCommands()"
  },
  {
    "label": "ZoomToFitHorizontal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitHorizontal(const bool bZoomToFitAll = false)"
  },
  {
    "label": "ZoomToFitVertical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitVertical(const bool bZoomToFitAll = false)"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(const bool bZoomToFitAll = false)"
  },
  {
    "label": "SetRequireFocusToZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequireFocusToZoom(bool bInRequireFocusToZoom)"
  },
  {
    "label": "AddNewKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewKey(FGeometry InMyGeometry, FVector2D ScreenPosition, TSharedPtr<TArray<TSharedPtr<FCurveViewModel>>> CurvesToAddKeysTo, bool bAddKeysInline)"
  },
  {
    "label": "NewValueEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewValueEntered( const FText& NewText, ETextCommit::Type CommitInfo )"
  },
  {
    "label": "NewHorizontalGridScaleEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewHorizontalGridScaleEntered(const FString& NewText, bool bCommitFromEnter )"
  },
  {
    "label": "NewVerticalGridScaleEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewVerticalGridScaleEntered(const FString& NewText, bool bCommitFromEnter )"
  },
  {
    "label": "DeleteSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedKeys()"
  },
  {
    "label": "HitTestKeys()",
    "kind": "Method",
    "detail": "Function (FSelectedCurveKey)",
    "insertText": "HitTestKeys(const FGeometry& InMyGeometry, const FVector2D& HitScreenPosition)"
  },
  {
    "label": "HitTestCubicTangents()",
    "kind": "Method",
    "detail": "Function (FSelectedTangent)",
    "insertText": "HitTestCubicTangents(const FGeometry& InMyGeometry, const FVector2D& HitScreenPosition)"
  },
  {
    "label": "EmptyKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyKeySelection()"
  },
  {
    "label": "AddToKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToKeySelection(FSelectedCurveKey Key)"
  },
  {
    "label": "RemoveFromKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromKeySelection(FSelectedCurveKey Key)"
  },
  {
    "label": "EmptyTangentSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyTangentSelection()"
  },
  {
    "label": "AddToTangentSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToTangentSelection(FSelectedTangent Tangent)"
  },
  {
    "label": "RemoveFromTangentSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromTangentSelection(FSelectedTangent Tangent)"
  },
  {
    "label": "EmptyAllSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyAllSelection()"
  },
  {
    "label": "MoveSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectedKeys(FVector2D Delta)"
  },
  {
    "label": "ZoomToFitHorizontalClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ZoomToFitHorizontalClicked()"
  },
  {
    "label": "ZoomToFitVerticalClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ZoomToFitVerticalClicked()"
  },
  {
    "label": "ToggleInputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInputSnapping()"
  },
  {
    "label": "ToggleOutputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOutputSnapping()"
  },
  {
    "label": "OnTimeComitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeComitted(float NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnTimeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeChanged(float NewValue)"
  },
  {
    "label": "OnTimeInFramesComitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeInFramesComitted(int32 NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnTimeInFramesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimeInFramesChanged(int32 NewValue)"
  },
  {
    "label": "UpdateCurveTimeSingleKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveTimeSingleKey(FSelectedCurveKey Key, float NewTime, bool bSetFromFrame = false)"
  },
  {
    "label": "UpdateCurveTimeSingleKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveTimeSingleKey(FSelectedCurveKey Key, int32 NewFrame)"
  },
  {
    "label": "LogAndToastCurveTimeWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAndToastCurveTimeWarning(FRealCurve* Curve)"
  },
  {
    "label": "OnValueComitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueComitted(float NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnValueChanged(float NewValue)"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSliderMovement(FText TransactionName)"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(float NewValue)"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSliderMovement(int32 NewValue)"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateContextMenu(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnCreateExternalCurveClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateExternalCurveClicked()"
  },
  {
    "label": "OnShowCurveToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowCurveToggled()"
  },
  {
    "label": "TryStartDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryStartDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ProcessDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "EndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDrag(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ZoomView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomView(FVector2D Delta)"
  },
  {
    "label": "HitTestCurves()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveViewModel>)",
    "insertText": "HitTestCurves(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "MoveTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTangents(FTrackScaleInfo& ScaleInfo, FVector2D Delta)"
  },
  {
    "label": "PushWarningMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushWarningMenu(FVector2D Position, const FText& Message)"
  },
  {
    "label": "PushKeyMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushKeyMenu(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnSelectInterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectInterpolationMode(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "IsInterpolationModeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterpolationModeSelected(ERichCurveInterpMode InterpMode, ERichCurveTangentMode TangentMode)"
  },
  {
    "label": "OnFlattenOrStraightenTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlattenOrStraightenTangents(bool bFlattenTangents)"
  },
  {
    "label": "OnBakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBakeCurve()"
  },
  {
    "label": "OnBakeCurveSampleRateCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBakeCurveSampleRateCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnReduceCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReduceCurve()"
  },
  {
    "label": "OnReduceCurveToleranceCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReduceCurveToleranceCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnSelectPreInfinityExtrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectPreInfinityExtrap(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "IsPreInfinityExtrapSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreInfinityExtrapSelected(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "OnSelectPostInfinityExtrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectPostInfinityExtrap(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "IsPostInfinityExtrapSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostInfinityExtrapSelected(ERichCurveExtrapolation Extrapolation)"
  },
  {
    "label": "BeginDragTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDragTransaction()"
  },
  {
    "label": "EndDragTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDragTransaction()"
  },
  {
    "label": "CalcGridLineStepDistancePow2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcGridLineStepDistancePow2(double RawValue)"
  },
  {
    "label": "UndoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoAction()"
  },
  {
    "label": "RedoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedoAction()"
  },
  {
    "label": "SnapLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "SnapLocation(FVector2D InLocation)"
  },
  {
    "label": "OnCurveIsVisibleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveIsVisibleChanged(ECheckBoxState NewCheckboxState, TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "OnCurveIsLockedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveIsLockedChanged(ECheckBoxState NewCheckboxState, TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "RemoveCurveKeysFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurveKeysFromSelection(TSharedPtr<FCurveViewModel> CurveViewModel)"
  },
  {
    "label": "UpdateCurveToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveToolTip( const FGeometry& MyGeometry, const FPointerEvent& MouseEvent )"
  },
  {
    "label": "GetViewModelForCurve()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveViewModel>)",
    "insertText": "GetViewModelForCurve(FRealCurve* InCurve)"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* Object, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "HandlePackageReloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePackageReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  },
  {
    "label": "SetDefaultOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultOutput(const float MinZoomRange)"
  },
  {
    "label": "SetInputMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputMinMax(float NewMin, float NewMax)"
  },
  {
    "label": "SetOutputMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputMinMax(float NewMin, float NewMax)"
  },
  {
    "label": "EmptyAllCurveViewModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyAllCurveViewModels()"
  },
  {
    "label": "ClearSelectedCurveViewModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedCurveViewModels()"
  },
  {
    "label": "SetSelectedCurveViewModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedCurveViewModel(FRealCurve* Curve)"
  },
  {
    "label": "ValidateSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSelection()"
  },
  {
    "label": "GenericTextEntryModeless()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericTextEntryModeless(const FText& DialogText, const FText& DefaultText, FOnTextCommitted OnTextComitted)"
  },
  {
    "label": "CloseEntryPopupMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopupMenu()"
  }
]