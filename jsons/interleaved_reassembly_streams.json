[
  {
    "label": "InterleavedReassemblyStreams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterleavedReassemblyStreams"
  },
  {
    "label": "FullStreamId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FullStreamId"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Stream"
  },
  {
    "label": "InterleavedReassemblyStreams()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_RX_INTERLEAVED_REASSEMBLY_STREAMS_H_ # define NET_DCSCTP_RX_INTERLEAVED_REASSEMBLY_STREAMS_H_ # include<cstdint> # include<map> # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / common / sequence_numbers . h \" # include \" net / dcsctp / packet / chunk / forward_tsn_common . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / rx / reassembly_streams . h \" namespace dcsctp { class InterleavedReassemblyStreams : public ReassemblyStreams { public :)",
    "insertText": "InterleavedReassemblyStreams(absl::string_view log_prefix, OnAssembledMessage on_assembled_message)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Add(UnwrappedTSN tsn, Data data)"
  },
  {
    "label": "HandleForwardTsn()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "HandleForwardTsn(UnwrappedTSN new_cumulative_ack_tsn, rtc::ArrayView<const AnyForwardTsnChunk::SkippedStream> skipped_streams)"
  },
  {
    "label": "ResetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStreams(rtc::ArrayView<const StreamID> stream_ids)"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "FullStreamId()",
    "kind": "Method",
    "detail": "Function (private : struct FullStreamId { const IsUnordered unordered ; const StreamID stream_id ;)",
    "insertText": "FullStreamId(IsUnordered unordered, StreamID stream_id) : unordered(unordered), stream_id(stream_id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FullStreamId a, FullStreamId b)"
  },
  {
    "label": "Stream()",
    "kind": "Method",
    "detail": "Function (} } ; class Stream { public :)",
    "insertText": "Stream(FullStreamId stream_id, InterleavedReassemblyStreams* parent, MID next_mid = MID(0)) : stream_id_(stream_id), parent_(*parent), next_mid_(mid_unwrapper_.Unwrap(next_mid))"
  },
  {
    "label": "EraseTo()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EraseTo(MID message_id)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (next_mid_ = mid_unwrapper_ .)",
    "insertText": "Unwrap(MID(0))"
  },
  {
    "label": "has_unassembled_chunks()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_unassembled_chunks()"
  },
  {
    "label": "TryToAssembleMessage()",
    "kind": "Method",
    "detail": "Function (private : using ChunkMap = std::map<FSN,std::pair<UnwrappedTSN,Data>> ; size_t)",
    "insertText": "TryToAssembleMessage(UnwrappedMID mid)"
  },
  {
    "label": "AssembleMessage()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "AssembleMessage(const ChunkMap& tsn_chunks)"
  },
  {
    "label": "TryToAssembleMessages()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "TryToAssembleMessages()"
  },
  {
    "label": "GetOrCreateStream()",
    "kind": "Method",
    "detail": "Function (const FullStreamId stream_id_ ; InterleavedReassemblyStreams& parent_ ; std::map<UnwrappedMID,ChunkMap> chunks_by_mid_ ; UnwrappedMID::Unwrapper mid_unwrapper_ ; UnwrappedMID next_mid_ ; } ; Stream&)",
    "insertText": "GetOrCreateStream(const FullStreamId& stream_id)"
  }
]