[
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FReadErased",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadErased"
  },
  {
    "label": "FReadErasedOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadErasedOptional"
  },
  {
    "label": "FWriteErased",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteErased"
  },
  {
    "label": "FWriteErasedOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteErasedOptional"
  },
  {
    "label": "TComponentLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentLock"
  },
  {
    "label": "TRead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRead"
  },
  {
    "label": "TReadOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReadOptional"
  },
  {
    "label": "TWrite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWrite"
  },
  {
    "label": "TWriteOptional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteOptional"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInterrogationChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterrogationChannel"
  },
  {
    "label": "FInterrogationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterrogationKey"
  },
  {
    "label": "FInterrogationInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterrogationInstance"
  },
  {
    "label": "FEntityComponentFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityComponentFilter"
  },
  {
    "label": "FComplexMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComplexMask"
  },
  {
    "label": "FEntityAllocationWriteContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationWriteContext"
  },
  {
    "label": "FComponentHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentHeader"
  },
  {
    "label": "IComponentDebuggingTypedPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IComponentDebuggingTypedPtr"
  },
  {
    "label": "FAutoRTFMCompiledOutAtomicInt32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoRTFMCompiledOutAtomicInt32"
  },
  {
    "label": "FScopedHeaderReadLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedHeaderReadLock"
  },
  {
    "label": "FScopedHeaderWriteLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedHeaderWriteLock"
  },
  {
    "label": "FEntityAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocation"
  },
  {
    "label": "FEntityInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityInitializer"
  },
  {
    "label": "FEntityAllocationMutexGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationMutexGuard"
  },
  {
    "label": "FEntityAllocationProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationProxy"
  },
  {
    "label": "FEntityAllocationIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationIterator"
  },
  {
    "label": "FEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityRange"
  },
  {
    "label": "FEntityDataLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityDataLocation"
  },
  {
    "label": "FEntityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityInfo"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Find . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / BitArray . h \" # include \" MovieSceneFwd . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" HAL / CriticalSection . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / TransactionallySafeRWLock . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / UnrealTemplate . h \" # include<atomic> # include<initializer_list> class UMovieSceneSequence ; namespace UE { namespace MovieScene { class FEntityManager ; } })",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Movie Scene Evaluation Systems\"), STATGROUP_MovieSceneECS, STATCAT_Advanced)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (namespace MovieScene { struct FReadErased ; struct FReadErasedOptional ; struct FWriteErased ; struct FWriteErasedOptional ; template<T> struct TComponentLock ; template<T> struct TRead ; template<T> struct TReadOptional ; template<T> struct TWrite ; template<T> struct TWriteOptional ; enum class ESystemPhase : uint8 { None = 0,Import = 1<<0,Spawn = 1<<1,Instantiation = 1<<2,Scheduling = 1<<3,Evaluation = 1<<4,Finalization = 1<<5,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESystemPhase)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EComponentTypeFlags : uint8 { None = 0 x00,Preserved = 0 x1,CopyToChildren = 0 x2,CopyToOutput = 0 x4,MigrateToOutput = 0 x8,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EComponentTypeFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EComplexFilterMode : uint8 { OneOf = 1<<0,OneOrMoreOf = 1<<1,AllOf = 1<<2,Negate = 1<<7,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EComplexFilterMode)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EMutuallyInclusiveComponentType : uint8 { Mandatory = 1 u<<0,Optional = 1 u<<1,All = Mandatory | Optional,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMutuallyInclusiveComponentType)"
  },
  {
    "label": "FInterrogationChannel()",
    "kind": "Method",
    "detail": "Function (LockFree,Mutex,} ; struct FInterrogationChannel {)",
    "insertText": "FInterrogationChannel() : Value(INDEX_NONE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FInterrogationChannel)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} FInterrogationChannel)",
    "insertText": "First()"
  },
  {
    "label": "FromIndex()",
    "kind": "Method",
    "detail": "Function (} FInterrogationChannel)",
    "insertText": "FromIndex(int32 InIndex)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} FInterrogationChannel)",
    "insertText": "Last()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FInterrogationChannel)",
    "insertText": "Invalid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FInterrogationChannel In)"
  },
  {
    "label": "FInterrogationKey()",
    "kind": "Method",
    "detail": "Function (} int32 Value ; } ; struct FInterrogationKey { FInterrogationChannel Channel ; int32 InterrogationIndex ;)",
    "insertText": "FInterrogationKey() : InterrogationIndex(-1)"
  },
  {
    "label": "FInterrogationKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInterrogationKey(FInterrogationChannel InChannel, int32 InInterrogationIndex) : Channel(InChannel) , InterrogationIndex(InInterrogationIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FInterrogationKey& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInterrogationKey& A, const FInterrogationKey& B)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (AllMask .)",
    "insertText": "Reset()"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Match(const FComponentMask& Input)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FEntityComponentFilter&)",
    "insertText": "All(const FComponentMask& InComponentMask)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (AllMask .)",
    "insertText": "CombineWithBitwiseOR(InComponentMask, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (AllMask .)",
    "insertText": "SetAll(InComponentTypes)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (} FEntityComponentFilter&)",
    "insertText": "Any(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "AnyLenient()",
    "kind": "Method",
    "detail": "Function (} FEntityComponentFilter&)",
    "insertText": "AnyLenient(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FComponentMask Mask ;)",
    "insertText": "for(FComponentTypeID TypeID : InComponentTypes)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Mask .)",
    "insertText": "Set(TypeID)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Any(Mask)"
  },
  {
    "label": "Deny()",
    "kind": "Method",
    "detail": "Function (} FEntityComponentFilter&)",
    "insertText": "Deny(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "Deny()",
    "kind": "Method",
    "detail": "Function (} FEntityComponentFilter&)",
    "insertText": "Deny(const FComponentMask& InComponentMask)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (} FEntityComponentFilter&)",
    "insertText": "Complex(std::initializer_list<FComponentTypeID> InComponentTypes, EComplexFilterMode ComplexMode)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (FComplexMask& ComplexMask = ComplexMasks .)",
    "insertText": "Emplace_GetRef(ComplexMode)"
  },
  {
    "label": "Complex()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FEntityComponentFilter&)",
    "insertText": "Complex(const FComponentMask& InComponentMask, EComplexFilterMode ComplexMode)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (ComplexMasks .)",
    "insertText": "Emplace_GetRef(InComponentMask, ComplexMode)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FEntityComponentFilter&)",
    "insertText": "Combine(const FEntityComponentFilter& CombineWith)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (AllMask .)",
    "insertText": "CombineWithBitwiseOR(CombineWith.AllMask, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CombineWith.NoneMask.Num() > 0)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (NoneMask .)",
    "insertText": "CombineWithBitwiseOR(CombineWith.NoneMask, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CombineWith.ComplexMasks.Num() > 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ComplexMasks .)",
    "insertText": "Append(CombineWith.ComplexMasks)"
  },
  {
    "label": "FComplexMask()",
    "kind": "Method",
    "detail": "Function (} return* this ; } private : struct FComplexMask {)",
    "insertText": "FComplexMask(EComplexFilterMode InMode) : Mode(InMode)"
  },
  {
    "label": "FComplexMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FComplexMask(const FComponentMask& InMask, EComplexFilterMode InMode) : Mask(InMask), Mode(InMode)"
  },
  {
    "label": "FEntityAllocationWriteContext()",
    "kind": "Method",
    "detail": "Function (} FComponentMask Mask ; EComplexFilterMode Mode ; } ; FComponentMask AllMask ; FComponentMask NoneMask ; TArray<FComplexMask> ComplexMasks ; } ; struct FEntityAllocationWriteContext {)",
    "insertText": "FEntityAllocationWriteContext(const FEntityManager& EntityManager)"
  },
  {
    "label": "NewAllocation()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationWriteContext)",
    "insertText": "NewAllocation()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FEntityAllocationWriteContext)",
    "insertText": "Add(FEntityAllocationWriteContext InOther)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationWriteContext Context ; Context . SystemSerial = SystemSerial + InOther . SystemSerial ; return Context ; } FEntityAllocationWriteContext)",
    "insertText": "Subtract(FEntityAllocationWriteContext InOther)"
  },
  {
    "label": "GetSystemSerial()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationWriteContext Context ; Context . SystemSerial = SystemSerial - InOther . SystemSerial ; return Context ; } uint64)",
    "insertText": "GetSystemSerial()"
  },
  {
    "label": "FComponentHeader()",
    "kind": "Method",
    "detail": "Function (} uint64 SystemSerial ; } ; struct FComponentHeader {)",
    "insertText": "FComponentHeader()"
  },
  {
    "label": "FComponentHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComponentHeader(FComponentHeader&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComponentHeader&)",
    "insertText": "operator(FComponentHeader&&)"
  },
  {
    "label": "FComponentHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComponentHeader(const FComponentHeader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComponentHeader&)",
    "insertText": "operator(const FComponentHeader&)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (struct IComponentDebuggingTypedPtr* DebugComponents = nullptr ; const uint16* Size = nullptr ; # endif uint8* Components ; FTransactionallySafeRWLock ReadWriteLock ; private : uint64 SerialNumber ; public : struct FAutoRTFMCompiledOutAtomicInt32 final { int32)",
    "insertText": "fetch_add(const int32 Value, const std::memory_order)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (SerialNumber =)",
    "insertText": "Max(SerialNumber, InWriteContext.GetSystemSerial())"
  },
  {
    "label": "HasBeenWrittenToSince()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenWrittenToSince(uint64 InSystemSerial)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedHeaderReadLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedHeaderReadLock(const FScopedHeaderReadLock& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FScopedHeaderReadLock& RHS)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedHeaderReadLock(FScopedHeaderReadLock&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedHeaderReadLock&)",
    "insertText": "operator(FScopedHeaderReadLock&& RHS)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedHeaderReadLock()"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (private : const FComponentHeader* Header ; EComponentHeaderLockMode LockMode ; } ; struct FScopedHeaderWriteLock {)",
    "insertText": "FScopedHeaderWriteLock()"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedHeaderWriteLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode, FEntityAllocationWriteContext InWriteContext)"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedHeaderWriteLock(const FScopedHeaderWriteLock& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FScopedHeaderWriteLock& RHS)"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedHeaderWriteLock(FScopedHeaderWriteLock&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedHeaderWriteLock&)",
    "insertText": "operator(FScopedHeaderWriteLock&& RHS)"
  },
  {
    "label": "FEntityAllocation()",
    "kind": "Method",
    "detail": "Function (private : const FComponentHeader* Header ; FEntityAllocationWriteContext WriteContext ; EComponentHeaderLockMode LockMode ; } ; struct FEntityAllocation {)",
    "insertText": "FEntityAllocation() : SerialNumber(0) , NumComponents(0) , Size(0) , Capacity(0) , MaxCapacity(0) , LockMode(EComponentHeaderLockMode::Mutex)"
  },
  {
    "label": "FEntityAllocation()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FEntityAllocation()"
  },
  {
    "label": "FEntityAllocation()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FEntityAllocation(const FEntityAllocation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEntityAllocation&)",
    "insertText": "operator(const FEntityAllocation&)"
  },
  {
    "label": "GetComponentHeaders()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FComponentHeader>)",
    "insertText": "GetComponentHeaders()"
  },
  {
    "label": "HasComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasComponent(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "FindComponentHeader()",
    "kind": "Method",
    "detail": "Function (} const FComponentHeader*)",
    "insertText": "FindComponentHeader(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "GetComponentHeaderChecked()",
    "kind": "Method",
    "detail": "Function (} const FComponentHeader&)",
    "insertText": "GetComponentHeaderChecked(FComponentTypeID ComponentTypeID)"
  },
  {
    "label": "FindComponentHeader()",
    "kind": "Method",
    "detail": "Function (const FComponentHeader* Header =)",
    "insertText": "FindComponentHeader(ComponentTypeID)"
  },
  {
    "label": "GetRawEntityIDs()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneEntityID*)",
    "insertText": "GetRawEntityIDs()"
  },
  {
    "label": "PostModifyStructure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostModifyStructure(FEntityAllocationWriteContext InWriteContext)"
  },
  {
    "label": "PostWriteComponents()",
    "kind": "Method",
    "detail": "Function (Header .)",
    "insertText": "PostWriteComponents(InWriteContext)"
  },
  {
    "label": "GetNumComponentTypes()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetNumComponentTypes()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetMaxCapacity()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxCapacity()"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "GetSlack()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSlack()"
  },
  {
    "label": "GetCurrentLockMode()",
    "kind": "Method",
    "detail": "Function (} EComponentHeaderLockMode)",
    "insertText": "GetCurrentLockMode()"
  },
  {
    "label": "WriteComponentsErased()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TComponentLock<FWriteErased>)",
    "insertText": "WriteComponentsErased(FComponentTypeID ComponentType, FEntityAllocationWriteContext InWriteContext)"
  },
  {
    "label": "TryReadComponentsErased()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TComponentLock<FReadErasedOptional>)",
    "insertText": "TryReadComponentsErased(FComponentTypeID ComponentType)"
  },
  {
    "label": "TryWriteComponentsErased()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TComponentLock<FWriteErasedOptional>)",
    "insertText": "TryWriteComponentsErased(FComponentTypeID ComponentType, FEntityAllocationWriteContext InWriteContext)"
  },
  {
    "label": "ReadComponents()",
    "kind": "Method",
    "detail": "Function (template<T> [ [ nodiscard ] ] TComponentLock<TRead<T>>)",
    "insertText": "ReadComponents(TComponentTypeID<T> ComponentType)"
  },
  {
    "label": "GetComponentHeaderChecked()",
    "kind": "Method",
    "detail": "Function (const FComponentHeader& Header =)",
    "insertText": "GetComponentHeaderChecked(ComponentType)"
  },
  {
    "label": "TryReadComponents()",
    "kind": "Method",
    "detail": "Function (} template<T> [ [ nodiscard ] ] TComponentLock<TReadOptional<T>>)",
    "insertText": "TryReadComponents(TComponentTypeID<T> ComponentType)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return TComponentLock<TReadOptional<)",
    "insertText": "T()"
  },
  {
    "label": "WriteComponents()",
    "kind": "Method",
    "detail": "Function (} template<T> [ [ nodiscard ] ] TComponentLock<TWrite<T>>)",
    "insertText": "WriteComponents(TComponentTypeID<T> ComponentType, FEntityAllocationWriteContext InWriteContext)"
  },
  {
    "label": "TryWriteComponents()",
    "kind": "Method",
    "detail": "Function (} template<T> [ [ nodiscard ] ] TComponentLock<TWriteOptional<T>>)",
    "insertText": "TryWriteComponents(TComponentTypeID<T> ComponentType, FEntityAllocationWriteContext InWriteContext)"
  },
  {
    "label": "FEntityAllocationMutexGuard()",
    "kind": "Method",
    "detail": "Function (} private : struct FEntityInitializer ; struct FEntityAllocationMutexGuard ; uint64 SerialNumber ; uint32 UniqueID ; uint16 NumComponents ; uint16 Size ; uint16 Capacity ; uint16 MaxCapacity ; EComponentHeaderLockMode LockMode ; FMovieSceneEntityID* EntityIDs ; uint8* ComponentData ; public : FComponentHeader* ComponentHeaders ; } ; struct FEntityAllocationMutexGuard {)",
    "insertText": "FEntityAllocationMutexGuard(FEntityAllocation* InAllocation, EComponentHeaderLockMode InLockMode)"
  },
  {
    "label": "FEntityAllocationMutexGuard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEntityAllocationMutexGuard()"
  },
  {
    "label": "FEntityAllocationMutexGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityAllocationMutexGuard(const FEntityAllocationMutexGuard&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FEntityAllocationMutexGuard&)"
  },
  {
    "label": "FEntityAllocationMutexGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityAllocationMutexGuard(const FEntityAllocationMutexGuard&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FEntityAllocationMutexGuard&&)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (private : FEntityAllocation* Allocation ; } ; struct FEntityAllocationProxy { const FEntityAllocation*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "GetAllocationType()",
    "kind": "Method",
    "detail": "Function (const FComponentMask&)",
    "insertText": "GetAllocationType()"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationProxy)",
    "insertText": "MakeInstance(const FEntityManager* InManager, int32 InAllocationIndex)"
  },
  {
    "label": "GetAllocationIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAllocationIndex()"
  },
  {
    "label": "FComponentMask()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "FComponentMask()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEntityAllocationProxy& A, const FEntityAllocationProxy& B)"
  },
  {
    "label": "AsRange()",
    "kind": "Method",
    "detail": "Function (} const FEntityManager* Manager ; int32 AllocationIndex ; } ; struct FEntityRange { const FEntityAllocation* Allocation = nullptr ; int32 ComponentStartOffset = 0 ; int32 Num = 0 ; } ; struct FEntityDataLocation { FEntityAllocation* Allocation ; int32 ComponentOffset ; FEntityRange)",
    "insertText": "AsRange()"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (Allocation -> LockMode = EComponentHeaderLockMode::Mutex ; } })",
    "insertText": "FScopedHeaderReadLock() : Header(nullptr)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedHeaderReadLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode) : Header(InHeader) , LockMode(InLockMode)"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (InHeader -> ReadWriteLock .)",
    "insertText": "ReadLock()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (} InHeader -> ScheduledAccessCount .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "FScopedHeaderReadLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedHeaderReadLock(FScopedHeaderReadLock&& RHS) : Header(RHS.Header) , LockMode(RHS.LockMode)"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (Header -> ReadWriteLock .)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (Header -> ScheduledAccessCount .)",
    "insertText": "fetch_sub(1, std::memory_order_relaxed)"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "FScopedHeaderWriteLock() : Header(nullptr) , WriteContext(FEntityAllocationWriteContext::NewAllocation()) , LockMode(EComponentHeaderLockMode::Mutex)"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedHeaderWriteLock(const FComponentHeader* InHeader, EComponentHeaderLockMode InLockMode, FEntityAllocationWriteContext InWriteContext) : Header(InHeader) , WriteContext(InWriteContext) , LockMode(InLockMode)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (InHeader -> ReadWriteLock .)",
    "insertText": "WriteLock()"
  },
  {
    "label": "FScopedHeaderWriteLock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedHeaderWriteLock(FScopedHeaderWriteLock&& RHS) : Header(RHS.Header) , WriteContext(RHS.WriteContext) , LockMode(RHS.LockMode)"
  },
  {
    "label": "PostWriteComponents()",
    "kind": "Method",
    "detail": "Function (Header ->)",
    "insertText": "PostWriteComponents(WriteContext)"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (Header -> ReadWriteLock .)",
    "insertText": "WriteUnlock()"
  }
]