[
  {
    "label": "FTemporalAAHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemporalAAHistory"
  },
  {
    "label": "FTranslucencyPassResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyPassResources"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTAAOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTAAOutputs"
  },
  {
    "label": "FTAAPassParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTAAPassParameters"
  },
  {
    "label": "FDefaultTemporalUpscaler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultTemporalUpscaler"
  },
  {
    "label": "FInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputs"
  },
  {
    "label": "FOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputs"
  },
  {
    "label": "FVisualizeTemporalUpscalerInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualizeTemporalUpscalerInputs"
  },
  {
    "label": "IsTAAUpsamplingConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" PostProcess / PostProcessMotionBlur . h \" # include \" PostProcess / LensDistortion . h \" # include \" TemporalUpscaler . h \" struct FTemporalAAHistory ; struct FTranslucencyPassResources ; enum class EMainTAAPassConfig : uint8 { Disabled,TAA,TSR,ThirdParty,} ; enum class ETAAPassConfig { Main,MainUpsampling,MainSuperSampling,ScreenSpaceReflections,LightShaft,DiaphragmDOF,DiaphragmDOFUpsampling,Hair,MAX } ; bool)",
    "insertText": "IsTAAUpsamplingConfig(ETAAPassConfig Pass)"
  },
  {
    "label": "SetupViewRect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupViewRect(const FViewInfo& View, int32 InResolutionDivisor = 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ResolutionDivisor = InResolutionDivisor ; InputViewRect = View . ViewRect ;)",
    "insertText": "if(IsTAAUpsamplingConfig(Pass))"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (OutputViewRect . Min =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "GetSecondaryViewRectSize()",
    "kind": "Method",
    "detail": "Function (OutputViewRect . Max = View .)",
    "insertText": "GetSecondaryViewRectSize()"
  },
  {
    "label": "TopLeftCornerViewRects()",
    "kind": "Method",
    "detail": "Function (} else { OutputViewRect = InputViewRect ; } } void)",
    "insertText": "TopLeftCornerViewRects()"
  },
  {
    "label": "GetOutputExtent()",
    "kind": "Method",
    "detail": "Function (InputViewRect . Max - = InputViewRect . Min ; InputViewRect . Min = FIntPoint::ZeroValue ; OutputViewRect . Max - = OutputViewRect . Min ; OutputViewRect . Min = FIntPoint::ZeroValue ; } FIntPoint)",
    "insertText": "GetOutputExtent()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate()"
  },
  {
    "label": "AddTemporalAAPass()",
    "kind": "Method",
    "detail": "Function (} ; FTAAOutputs)",
    "insertText": "AddTemporalAAPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FTAAPassParameters& Inputs, const FTemporalAAHistory& InputHistory, FTemporalAAHistory* OutputHistory)"
  },
  {
    "label": "IsTSRLensDistortionSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTSRLensDistortionSupported(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "IsTSRLensDistortionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTSRLensDistortionEnabled(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "NeedTSRMoireLuma()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedTSRMoireLuma(const FViewInfo& View)"
  },
  {
    "label": "IsVisualizeTSREnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizeTSREnabled(const FViewInfo& View)"
  },
  {
    "label": "AddTSRMeasureFlickeringLuma()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddTSRMeasureFlickeringLuma(FRDGBuilder& GraphBuilder, FGlobalShaderMap* ShaderMap, FScreenPassTexture SceneColor)"
  },
  {
    "label": "GetMainTAAPassConfig()",
    "kind": "Method",
    "detail": "Function (EMainTAAPassConfig)",
    "insertText": "GetMainTAAPassConfig(const FViewInfo& View)"
  },
  {
    "label": "AddGen4MainTemporalAAPasses()",
    "kind": "Method",
    "detail": "Function (struct FDefaultTemporalUpscaler { struct FInputs { bool bAllowFullResSlice = false ; bool bGenerateSceneColorHalfRes = false ; bool bGenerateSceneColorQuarterRes = false ; bool bGenerateSceneColorEighthRes = false ; bool bGenerateOutputMip1 = false ; bool bGenerateVelocityFlattenTextures = false ; EPixelFormat DownsampleOverrideFormat ; FScreenPassTexture SceneColor ; FScreenPassTexture SceneDepth ; FScreenPassTexture SceneVelocity ; FTranslucencyPassResources PostDOFTranslucencyResources ; FScreenPassTexture FlickeringInputTexture ; FLensDistortionLUT LensDistortionLUT ; } ; struct FOutputs { FScreenPassTextureSlice FullRes ; FScreenPassTextureSlice HalfRes ; FScreenPassTextureSlice QuarterRes ; FScreenPassTextureSlice EighthRes ; FVelocityFlattenTextures VelocityFlattenTextures ; } ; } ; FDefaultTemporalUpscaler::FOutputs)",
    "insertText": "AddGen4MainTemporalAAPasses(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FDefaultTemporalUpscaler::FInputs& PassInputs)"
  },
  {
    "label": "AddTemporalSuperResolutionPasses()",
    "kind": "Method",
    "detail": "Function (FDefaultTemporalUpscaler::FOutputs)",
    "insertText": "AddTemporalSuperResolutionPasses(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FDefaultTemporalUpscaler::FInputs& PassInputs)"
  },
  {
    "label": "AddVisualizeTemporalUpscalerPass()",
    "kind": "Method",
    "detail": "Function (struct FVisualizeTemporalUpscalerInputs { FScreenPassRenderTarget OverrideOutput ; FScreenPassTexture SceneColor ; EMainTAAPassConfig TAAConfig = EMainTAAPassConfig::Disabled ; const UE::Renderer::Private::ITemporalUpscaler* UpscalerUsed = nullptr ; FDefaultTemporalUpscaler::FInputs Inputs ; FDefaultTemporalUpscaler::FOutputs Outputs ; } ; FScreenPassTexture)",
    "insertText": "AddVisualizeTemporalUpscalerPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FVisualizeTemporalUpscalerInputs& Inputs)"
  }
]