[
  {
    "label": "FMalloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMalloc"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FMallocDoubleFreeFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocDoubleFreeFinder"
  },
  {
    "label": "TrackedAllocationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrackedAllocationData"
  },
  {
    "label": "FMallocDoubleFreeFinder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" HAL / MallocCallstackHandler . h \" # include \" HAL / Platform . h \" class FMalloc ; class FOutputDevice ; class UWorld ; class FMallocDoubleFreeFinder final : public FMallocCallstackHandler { public :)",
    "insertText": "FMallocDoubleFreeFinder(FMalloc* InMalloc)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (# if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "TrackSpecial()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "TrackSpecial(void* Ptr)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "OverrideIfEnabled()",
    "kind": "Method",
    "detail": "Function (FMalloc*)",
    "insertText": "OverrideIfEnabled(FMalloc*InUsedAlloc)"
  },
  {
    "label": "TrackMalloc()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TrackMalloc(void* Ptr, uint32 Size, int32 CallStackIndex)"
  },
  {
    "label": "TrackFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackFree(void* Ptr, uint32 OldSize, int32 CallStackIndex)"
  },
  {
    "label": "TrackedAllocationData()",
    "kind": "Method",
    "detail": "Function (struct TrackedAllocationData { SIZE_T Size ; int32 CallStackIndex ;)",
    "insertText": "TrackedAllocationData() : Size(0), CallStackIndex(-1)"
  },
  {
    "label": "TrackedAllocationData()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TrackedAllocationData(SIZE_T InRequestedSize, int32 InCallStackIndex)"
  },
  {
    "label": "TrackedAllocationData()",
    "kind": "Method",
    "detail": "Function (Size = InRequestedSize ; CallStackIndex = InCallStackIndex ; } ; ~)",
    "insertText": "TrackedAllocationData()"
  }
]