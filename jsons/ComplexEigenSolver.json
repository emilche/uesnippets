[
  {
    "label": "ComplexEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComplexEigenSolver"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COMPLEX_EIGEN_SOLVER_H # define EIGEN_COMPLEX_EIGEN_SOLVER_H # include \" . / ComplexSchur . h \" namespace Eigen { template<_MatrixType> class ComplexEigenSolver { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; typedef std::complex<RealScalar> ComplexScalar ; typedef Matrix<ComplexScalar,ColsAtCompileTime,1,)",
    "insertText": "Options(~RowMajor)"
  },
  {
    "label": "ComplexEigenSolver()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<ComplexScalar,RowsAtCompileTime,ColsAtCompileTime,Options,MaxRowsAtCompileTime,MaxColsAtCompileTime> EigenvectorType ;)",
    "insertText": "ComplexEigenSolver() : m_eivec(), m_eivalues(), m_schur(), m_isInitialized(false), m_eigenvectorsOk(false), m_matX()"
  },
  {
    "label": "ComplexEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ComplexEigenSolver(Index size) : m_eivec(size, size), m_eivalues(size), m_schur(size), m_isInitialized(false), m_eigenvectorsOk(false), m_matX(size, size)"
  },
  {
    "label": "ComplexEigenSolver()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "ComplexEigenSolver(const EigenBase<InputType>& matrix, bool computeEigenvectors = true) : m_eivec(matrix.rows(),matrix.cols()), m_eivalues(matrix.cols()), m_schur(matrix.rows()), m_isInitialized(false), m_eigenvectorsOk(false), m_matX(matrix.rows(),matrix.cols())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived(), computeEigenvectors)"
  },
  {
    "label": "eigenvectors()",
    "kind": "Method",
    "detail": "Function (} const EigenvectorType&)",
    "insertText": "eigenvectors()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"ComplexEigenSolver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_eigenvectorsOk && \"The eigenvectors have not been computed together with the eigenvalues.\")"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "setMaxIterations()",
    "kind": "Method",
    "detail": "Function (} ComplexEigenSolver&)",
    "insertText": "setMaxIterations(Index maxIters)"
  },
  {
    "label": "setMaxIterations()",
    "kind": "Method",
    "detail": "Function (m_schur .)",
    "insertText": "setMaxIterations(maxIters)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "doComputeEigenvectors()",
    "kind": "Method",
    "detail": "Function (} EigenvectorType m_eivec ; EigenvalueType m_eivalues ; ComplexSchur<MatrixType> m_schur ; bool m_isInitialized ; bool m_eigenvectorsOk ; EigenvectorType m_matX ; private : void)",
    "insertText": "doComputeEigenvectors(RealScalar matrixnorm)"
  },
  {
    "label": "sortEigenvalues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sortEigenvalues(bool computeEigenvectors)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> template<InputType> ComplexEigenSolver<MatrixType>& ComplexEigenSolver<MatrixType)",
    "insertText": "compute(const EigenBase<InputType>& matrix, bool computeEigenvectors)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(matrix.cols() == matrix.rows())"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (m_eivalues = m_schur .)",
    "insertText": "matrixT().diagonal()"
  },
  {
    "label": "sortEigenvalues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sortEigenvalues(computeEigenvectors)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index n = m_eivalues .)",
    "insertText": "size()"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (matrixnorm =)",
    "insertText": "maxi(matrixnorm,(std::numeric_limits<RealScalar>::min)())"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (m_matX =)",
    "insertText": "Zero(n, n)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matX .)",
    "insertText": "coeffRef(k,k) = ComplexScalar(1.0,0.0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matX .)",
    "insertText": "coeffRef(i,k) = -m_schur.matrixT().coeff(i,k)"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (ComplexScalar z = m_schur .)",
    "insertText": "matrixT().coeff(i,i) - m_schur.matrixT().coeff(k,k)"
  },
  {
    "label": "real_ref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "real_ref(z) = NumTraits<RealScalar>::epsilon()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} m_matX .)",
    "insertText": "coeffRef(i,k) = m_matX.coeff(i,k)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (} } m_eivec .)",
    "insertText": "noalias() = m_schur.matrixU()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "col(k).normalize()"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (Index k ; m_eivalues .)",
    "insertText": "cwiseAbs().tail(n-i).minCoeff(&k)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (k + = i ;)",
    "insertText": "swap(m_eivalues[k],m_eivalues[i])"
  }
]