[
  {
    "label": "FbxDynamicArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxDynamicArray"
  },
  {
    "label": "FbxDynamicArray()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_DYNAMICARRAY_H_ # define _FBXSDK_CORE_BASE_DYNAMICARRAY_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxcontainerallocators . h> # include<fbxsdk / fbxsdk_nsbegin . h> template<Type,Allocator = FbxBaseAllocator> class FbxDynamicArray { public :)",
    "insertText": "FbxDynamicArray() : mArray(NULL), mCapacity(0), mSize(0), mAllocator(sizeof(Type))"
  },
  {
    "label": "FbxDynamicArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxDynamicArray(const size_t pInitialSize) : mArray(NULL), mCapacity(0), mSize(0), mAllocator(sizeof(Type))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(pInitialSize)"
  },
  {
    "label": "FbxDynamicArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxDynamicArray(const FbxDynamicArray& pArray) : mArray(NULL), mCapacity(0), mSize(0), mAllocator(sizeof(Type))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(pArray.mCapacity)"
  },
  {
    "label": "CopyArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyArray(mArray, pArray.mArray, pArray.mSize)"
  },
  {
    "label": "FbxDynamicArray()",
    "kind": "Method",
    "detail": "Function (mSize = pArray . mSize ; } ~)",
    "insertText": "FbxDynamicArray()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (mArray [ i ] . ~)",
    "insertText": "Type()"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (} mAllocator .)",
    "insertText": "FreeMemory(mArray)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Capacity()"
  },
  {
    "label": "lNewArray()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "lNewArray(Type*)mAllocator.AllocateRecords(pCount)"
  },
  {
    "label": "MoveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveArray(lNewArray, mArray, mSize)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (mArray = lNewArray ; mCapacity = pCount ; } } void)",
    "insertText": "PushBack(const Type& pItem, const size_t pNCopies = 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t lNewSize = mCapacity + mCapacity / 2 ;)",
    "insertText": "if(mSize + pNCopies > lNewSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (lNewSize = mSize + pNCopies ; })",
    "insertText": "Reserve(lNewSize)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBX_ASSERT(mSize + pNCopies <= mCapacity)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(mArray + mSize, pItem, pNCopies)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (mSize + = pNCopies ; } void)",
    "insertText": "Insert(const size_t pIndex, const Type& pItem, const size_t pNCopies=1)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pIndex >= 0)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pIndex <= mSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Type lValue = pItem ;)",
    "insertText": "if(pNCopies == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(pIndex >= mSize)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(pItem, pNCopies)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mSize + pNCopies > mCapacity)"
  },
  {
    "label": "lNewArray()",
    "kind": "Method",
    "detail": "Function (lNewSize = mSize + pNCopies ; } Type*)",
    "insertText": "lNewArray(Type*)mAllocator.AllocateRecords(lNewSize)"
  },
  {
    "label": "MoveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveArray(lNewArray, mArray, pIndex)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(lNewArray + pIndex, pItem, pNCopies)"
  },
  {
    "label": "MoveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveArray(lNewArray + pIndex + pNCopies, mArray + pIndex, mSize - pIndex)"
  },
  {
    "label": "MoveArrayBackwards()",
    "kind": "Method",
    "detail": "Function (mArray = lNewArray ; mSize + = pNCopies ; mCapacity = lNewSize ; } else {)",
    "insertText": "MoveArrayBackwards(mArray + pIndex + pNCopies, mArray + pIndex, mSize - pIndex)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(mArray + pIndex, pItem, pNCopies)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (mSize + = pNCopies ; } } void)",
    "insertText": "PopBack(size_t pNElements=1)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pNElements <= mSize)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} mSize - = pNElements ; } void)",
    "insertText": "Remove(const size_t pIndex, size_t pNElements=1)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pIndex + pNElements <= mSize)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBack(pNElements)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(size_t i = pIndex; i < pIndex + pNElements; ++i)"
  },
  {
    "label": "MoveOverlappingArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MoveOverlappingArray(&mArray[pIndex], &mArray[pIndex + pNElements], mSize - pIndex - pNElements)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mSize - = pNElements ; } } Type&)",
    "insertText": "operator(const size_t pIndex)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} const Type&)",
    "insertText": "First()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} Type&)",
    "insertText": "Last()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Find(const Type& pItem, const size_t pStartIndex=0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } FbxDynamicArray&)",
    "insertText": "operator(const FbxDynamicArray& pArray)"
  },
  {
    "label": "CopyArray()",
    "kind": "Method",
    "detail": "Function (mSize = pArray . mSize ; return* this ; } # ifndef DOXYGEN_SHOULD_SKIP_THIS private : void)",
    "insertText": "CopyArray(Type* pDest, const Type* pSrc, size_t pCount)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&(pDest[i])) Type(pSrc[i])"
  },
  {
    "label": "MoveArray()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveArray(Type* pDest, const Type* pSrc, size_t pCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < int(pCount); i++)"
  },
  {
    "label": "MoveOverlappingArray()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveOverlappingArray(Type* pDest, const Type* pSrc, size_t pCount)"
  },
  {
    "label": "MoveArrayBackwards()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MoveArrayBackwards(Type* pDest, const Type* pSrc, size_t pCount)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&(pDest[pCount-1-i])) Type(pSrc[pCount-1-i])"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Fill(Type* pDest, const Type& pItem, size_t pCount)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&(pDest[i])) Type(pItem)"
  }
]