[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FEdgeCollapseInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeCollapseInfo"
  },
  {
    "label": "FEdgeFlipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeFlipInfo"
  },
  {
    "label": "FEdgeSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdgeSplitInfo"
  },
  {
    "label": "FMergeEdgesInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeEdgesInfo"
  },
  {
    "label": "FPokeTriangleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPokeTriangleInfo"
  },
  {
    "label": "FVertexSplitInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexSplitInfo"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "TDynamicMeshOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicMeshOverlay"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "TDynamicMeshVectorOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicMeshVectorOverlay"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "UE_EXTERN_TEMPLATE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_EXTERN_TEMPLATE_API"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (data)",
    "insertText": "GetElement(iLastE, Data)"
  },
  {
    "label": "ClearElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearElements()"
  },
  {
    "label": "AppendElement()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendElement(RealType ConstantValue)"
  },
  {
    "label": "AppendElement()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AppendElement(const RealType* Value)"
  },
  {
    "label": "InitializeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTriangles(int MaxTriangleID)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "SetTriangle(int TriangleID, const FIndex3i& TriElements, bool bAllowElementFreeing = true)"
  },
  {
    "label": "FreeUnusedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeUnusedElements(const TSet<int>* ElementsToCheck = nullptr)"
  },
  {
    "label": "UnsetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetTriangle(int TriangleID, bool bAllowElementFreeing = true)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (unset)",
    "insertText": "checkSlow(ElementTriangles[3 * TID + 1] >= 0 == bIsSet)"
  },
  {
    "label": "MergeElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeElement(int SourceElementID, int TargetElementID)"
  },
  {
    "label": "SplitElement()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SplitElement(int ElementID, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "SplitElementWithNewParent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SplitElementWithNewParent(int ElementID, int SplitParentVertexID, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "SplitBowtiesAtVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBowtiesAtVertex(int32 Vid, TArray<int32>* NewElementIDs = nullptr)"
  },
  {
    "label": "SplitBowties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBowties()"
  },
  {
    "label": "InsertElement()",
    "kind": "Method",
    "detail": "Function (EMeshResult)",
    "insertText": "InsertElement(int ElementID, const RealType* Value, bool bUnsafe = false)"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FIndex3i(ElementTriangles[i], ElementTriangles[i + 1], ElementTriangles[i + 2])"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, const FCompactMaps* CompactMaps, bool bUseCompression)"
  },
  {
    "label": "InitializeNewTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNewTriangle(int TriangleID)"
  },
  {
    "label": "OnRemoveTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveTriangle(int TriangleID)"
  },
  {
    "label": "OnReverseTriOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReverseTriOrientation(int TriangleID)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitEdge(const DynamicMeshInfo::FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlipEdge(const DynamicMeshInfo::FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseEdge(const DynamicMeshInfo::FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPokeTriangle(const DynamicMeshInfo::FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeEdges(const DynamicMeshInfo::FMergeEdgesInfo& MergeInfo)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMergeVertices(const DynamicMeshInfo::FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitVertex(const DynamicMeshInfo::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "SetElementFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementFromLerp(int SetElement, int ElementA, int ElementB, double Alpha)"
  },
  {
    "label": "SetElementFromBary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementFromBary(int SetElement, int ElementA, int ElementB, int ElementC, const FVector3d& BaryCoords)"
  },
  {
    "label": "InternalSetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSetTriangle(int TriangleID, const FIndex3i& TriElements, bool bUpdateRefCounts, bool bAllowElementFreeing = true)"
  }
]