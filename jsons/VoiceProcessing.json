[
  {
    "label": "FMovingAverager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovingAverager"
  },
  {
    "label": "FMovingVectorAverager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovingVectorAverager"
  },
  {
    "label": "FSilenceDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSilenceDetection"
  },
  {
    "label": "FSlowAdaptiveGainControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlowAdaptiveGainControl"
  },
  {
    "label": "FMovingAverager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Delay . h \" # include \" DSP / AudioFFT . h \" # include \" DSP / MultithreadedPatching . h \" namespace Audio { class FMovingAverager { public :)",
    "insertText": "FMovingAverager(uint32 NumSamples)"
  },
  {
    "label": "ProcessInput()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ProcessInput(const float& Input, float& Output)"
  },
  {
    "label": "SetNumSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumSamples(uint32 NumSamples)"
  },
  {
    "label": "FMovingAverager()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMovingAverager()"
  },
  {
    "label": "FMovingVectorAverager()",
    "kind": "Method",
    "detail": "Function (TArray<float> AudioBuffer ; int32 BufferCursor ; float AccumulatedSum ; FCriticalSection ProcessCriticalSection ; } ; class FMovingVectorAverager { public :)",
    "insertText": "FMovingVectorAverager(uint32 NumSamples)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ProcessAudio(const VectorRegister4Float& Input, VectorRegister4Float& Output)"
  },
  {
    "label": "FMovingVectorAverager()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMovingVectorAverager()"
  },
  {
    "label": "FSilenceDetection()",
    "kind": "Method",
    "detail": "Function (TArray<VectorRegister4Float> AudioBuffer ; int32 BufferCursor ; VectorRegister4Float AccumulatedSum ; FCriticalSection ProcessCriticalSection ; } ; class FSilenceDetection { public :)",
    "insertText": "FSilenceDetection(float InOnsetThreshold, float InReleaseThreshold, int32 AttackDurationInSamples, int32 ReleaseDurationInSamples)"
  },
  {
    "label": "ProcessBuffer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessBuffer(const float* InAudio, float* OutAudio, int32 NumSamples)"
  },
  {
    "label": "SetThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreshold(float InThreshold)"
  },
  {
    "label": "GetCurrentAmplitude()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAmplitude()"
  },
  {
    "label": "FSilenceDetection()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSilenceDetection()"
  },
  {
    "label": "FSlowAdaptiveGainControl()",
    "kind": "Method",
    "detail": "Function (FMovingVectorAverager Averager ; float ReleaseTau ; float OnsetThreshold ; float ReleaseThreshold ; float CurrentAmplitude ; bool bOnsetWasInLastBuffer ; } ; class FSlowAdaptiveGainControl { public :)",
    "insertText": "FSlowAdaptiveGainControl(float InGainTarget, int32 InAdaptiveRate, float InGainMin = 0.01f, float InGainMax = 2.0f)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ProcessAudio(float* InAudio, int32 NumSamples, float InAmplitude)"
  },
  {
    "label": "SetAdaptiveRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdaptiveRate(int32 InAdaptiveRate)"
  },
  {
    "label": "FSlowAdaptiveGainControl()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSlowAdaptiveGainControl()"
  },
  {
    "label": "GetTargetGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTargetGain(float InAmplitude)"
  }
]