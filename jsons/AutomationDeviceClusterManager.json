[
  {
    "label": "FAutomationDeviceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationDeviceInfo"
  },
  {
    "label": "FAutomationDeviceClusterManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationDeviceClusterManager"
  },
  {
    "label": "FDeviceState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeviceState"
  },
  {
    "label": "FDeviceCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeviceCluster"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" IAutomationReport . h \" # include \" AutomationWorkerMessages . h \" # include \" IMessageContext . h \" # include \" AutomationDeviceClusterManager . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; class FAutomationDeviceClusterManager { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddDeviceFromMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDeviceFromMessage(const FMessageAddress& MessageAddress, const FAutomationWorkerFindWorkersResponse& Message, const uint32 GroupFlags)"
  },
  {
    "label": "UpdateDeviceFromMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceFromMessage(const FMessageAddress& MessageAddress, const FAutomationWorkerMessageBase& Message)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FGuid& DeviceInstanceId)"
  },
  {
    "label": "GetNumClusters()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumClusters()"
  },
  {
    "label": "GetTotalNumDevices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalNumDevices()"
  },
  {
    "label": "GetNumDevicesInCluster()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDevicesInCluster(const int32 ClusterIndex)"
  },
  {
    "label": "GetNumActiveDevicesInCluster()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveDevicesInCluster(const int32 ClusterIndex)"
  },
  {
    "label": "GetClusterGroupName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClusterGroupName(const int32 ClusterIndex)"
  },
  {
    "label": "GetClusterDeviceType()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClusterDeviceType(const int32 ClusterIndex)"
  },
  {
    "label": "GetClusterDeviceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClusterDeviceName(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetClusterGameInstance()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetClusterGameInstance(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetClusterGameInstanceId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetClusterGameInstanceId(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetDeviceInfo()",
    "kind": "Method",
    "detail": "Function (const FAutomationDeviceInfo&)",
    "insertText": "GetDeviceInfo(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "FindDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDevice(const FGuid& InstanceId, int32& OutClusterIndex, int32& OutDeviceIndex)"
  },
  {
    "label": "GetDeviceMessageAddress()",
    "kind": "Method",
    "detail": "Function (FMessageAddress)",
    "insertText": "GetDeviceMessageAddress(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "GetDevicesReservedForTest()",
    "kind": "Method",
    "detail": "Function (TArray<FMessageAddress>)",
    "insertText": "GetDevicesReservedForTest(const int32 ClusterIndex, TSharedPtr <IAutomationReport> Report)"
  },
  {
    "label": "GetTest()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAutomationReport>)",
    "insertText": "GetTest(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "SetTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTest(const int32 ClusterIndex, const int32 DeviceIndex, TSharedPtr <IAutomationReport> NewReport)"
  },
  {
    "label": "ResetAllDevicesRunningTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllDevicesRunningTest(const int32 ClusterIndex, IAutomationReportPtr InTest)"
  },
  {
    "label": "DisableDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableDevice(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "DeviceEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeviceEnabled(const int32 ClusterIndex, const int32 DeviceIndex)"
  },
  {
    "label": "HasActiveDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveDevice()"
  },
  {
    "label": "ReGroupDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReGroupDevices(const uint32 GroupFlags)"
  },
  {
    "label": "FDeviceState()",
    "kind": "Method",
    "detail": "Function (private : class FDeviceState { public :)",
    "insertText": "FDeviceState(FMessageAddress NewMessageAddress, const FAutomationWorkerFindWorkersResponse& Message)"
  },
  {
    "label": "GetGroupNameForDevice()",
    "kind": "Method",
    "detail": "Function (IsDeviceAvailable = true ; } FMessageAddress DeviceMessageAddress ; FAutomationDeviceInfo Info ; TSharedPtr<IAutomationReport> Report ; bool IsDeviceAvailable ; } ; class FDeviceCluster { public : FString ClusterName ; FString DeviceTypeName ; TArray<FDeviceState> Devices ; } ; FString)",
    "insertText": "GetGroupNameForDevice(const FDeviceState& DeviceState, const uint32 DeviceGroupFlags)"
  }
]