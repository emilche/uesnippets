[
  {
    "label": "FRDGScopeState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGScopeState"
  },
  {
    "label": "RENDERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RENDERCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRDGScope_GPU",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGScope_GPU"
  },
  {
    "label": "FRDGScope_CSVExclusive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGScope_CSVExclusive"
  },
  {
    "label": "FRDGScope_Budget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGScope_Budget"
  },
  {
    "label": "FRDGTimingFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTimingFrame"
  },
  {
    "label": "FRDGScope_RHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGScope_RHI"
  },
  {
    "label": "FRDGScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGScope"
  },
  {
    "label": "TStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStorage"
  },
  {
    "label": "TRDGEventScopeGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRDGEventScopeGuard"
  },
  {
    "label": "FState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FState"
  },
  {
    "label": "FRDGEventName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / StaticArray . h \" # include \" Containers / UnrealString . h \" # include \" DynamicRenderScaling . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / AssertionMacros . h \" # include \" MultiGPU . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" ProfilingDebugging / CsvProfilerConfig . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" ProfilingDebugging / RealtimeGPUProfiler . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RenderGraphAllocator . h \" # include \" RenderGraphDefinitions . h \" # include \" RendererInterface . h \" # include \" Stats / Stats2 . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" class FRDGScopeState ; class FRDGEventName final { public :)",
    "insertText": "FRDGEventName()"
  },
  {
    "label": "FRDGEventName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGEventName(const TCHAR* EventFormat, ...)"
  },
  {
    "label": "FRDGEventName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGEventName(int32 NonVariadic, const TCHAR* EventName)"
  },
  {
    "label": "FRDGEventName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRDGEventName(const FRDGEventName& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRDGEventName&)",
    "insertText": "operator(const FRDGEventName& Other)"
  },
  {
    "label": "GetTCHAR()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTCHAR()"
  },
  {
    "label": "AllocBreadcrumb()",
    "kind": "Method",
    "detail": "Function (# if WITH_RHI_BREADCRUMBS FRHIBreadcrumbNode*)",
    "insertText": "AllocBreadcrumb(FRHIBreadcrumbData&& Data, FRHIBreadcrumbAllocator& Allocator)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# endif private : # if RDG_EVENTS> = RDG_EVENTS_STRING_REF const TCHAR* EventFormat =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# endif # if RDG_EVENTS = = RDG_EVENTS_STRING_COPY FString FormattedEventName ; # endif } ; enum class ERDGScopeFlags : uint8 { None = 0,Final = 1<<0,AlwaysEnable = 1<<1,Stat = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERDGScopeFlags)"
  },
  {
    "label": "HAS_GPU_STATS()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "HAS_GPU_STATS(RHI_NEW_GPU_PROFILER == 0)"
  },
  {
    "label": "FRDGScope_GPU()",
    "kind": "Method",
    "detail": "Function (FRealtimeGPUProfilerQuery StartQuery ; FRealtimeGPUProfilerQuery StopQuery ; FName StatName ; TStatId StatId ; FString StatDescription ; TOptional<FRHIDrawStatsCategory const*> PreviousCategory { } ; FRHIDrawStatsCategory const* CurrentCategory = nullptr ; bool bEmitDuringExecute ;)",
    "insertText": "FRDGScope_GPU(FRDGScopeState& State, FRHIGPUMask GPUMask, const FName& CsvStatName, const TStatId& Stat, const TCHAR* Description, FRHIDrawStatsCategory const& Category)"
  },
  {
    "label": "FRDGScope_GPU()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRDGScope_GPU()"
  },
  {
    "label": "ImmediateEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImmediateEnd(FRDGScopeState& State)"
  },
  {
    "label": "BeginCPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCPU(FRHIComputeCommandList& RHICmdList, bool bPreScope)"
  },
  {
    "label": "EndCPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCPU(FRHIComputeCommandList& RHICmdList, bool bPreScope)"
  },
  {
    "label": "BeginGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGPU(FRHIComputeCommandList& RHICmdList)"
  },
  {
    "label": "EndGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndGPU(FRHIComputeCommandList& RHICmdList)"
  },
  {
    "label": "FRDGScope_CSVExclusive()",
    "kind": "Method",
    "detail": "Function (} ; # endif # if CSV_PROFILER_STATS struct FRDGScope_CSVExclusive { const char* const StatName ;)",
    "insertText": "FRDGScope_CSVExclusive(FRDGScopeState&, const char* StatName) : StatName(StatName)"
  },
  {
    "label": "BeginExclusiveStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginExclusiveStat(StatName)"
  },
  {
    "label": "ImmediateEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ImmediateEnd(FRDGScopeState&)"
  },
  {
    "label": "EndExclusiveStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndExclusiveStat(StatName)"
  },
  {
    "label": "FRDGScope_Budget()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FRDGScope_Budget { class FRDGTimingFrame* Frame = nullptr ; int32 ScopeId ; bool bPop ;)",
    "insertText": "FRDGScope_Budget(FRDGScopeState& State, DynamicRenderScaling::FBudget const& Budget)"
  },
  {
    "label": "FRDGScope_RHI()",
    "kind": "Method",
    "detail": "Function (} ; # if RDG_EVENTS struct FRDGScope_RHI { FRDGEventName Name ; # if WITH_RHI_BREADCRUMBS FRHIBreadcrumbNode* Node = nullptr ; # endif)",
    "insertText": "FRDGScope_RHI(FRDGScopeState& State, FRHIBreadcrumbData&& Data, FRDGEventName&& Name)"
  },
  {
    "label": "BeginBreadcrumbCPU()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "BeginBreadcrumbCPU(Node, !bPreScope)"
  },
  {
    "label": "BeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "BeginBreadcrumbGPU(Node, RHICmdList.GetPipeline())"
  },
  {
    "label": "EndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "EndBreadcrumbGPU(Node, RHICmdList.GetPipeline())"
  },
  {
    "label": "EndBreadcrumbCPU()",
    "kind": "Method",
    "detail": "Function (} RHICmdList .)",
    "insertText": "EndBreadcrumbCPU(Node, !bPreScope)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FRDGScope { FRDGScope* const Parent ; FRDGPass* CPUFirstPass = nullptr ; FRDGPass* CPULastPass = nullptr ; TRHIPipelineArray<FRDGPass*> GPUFirstPass { InPlace,nullptr } ; TRHIPipelineArray<FRDGPass*> GPULastPass { InPlace,nullptr } ; template<. . . TTypes> class TStorage { typedef TVariant<FEmptyVariantState,TTypes . . .> TImpl ; TImpl Impl ; public : template<TCallback> void)",
    "insertText": "Dispatch(TCallback&& Callback)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (size_t Index = Impl .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} template<TScopeType,. . . TArgs> void)",
    "insertText": "Emplace(TArgs&&... Args)"
  },
  {
    "label": "TScopeType()",
    "kind": "Method",
    "detail": "Function (Impl . template Emplace<)",
    "insertText": "TScopeType(Forward<TArgs>(Args)...)"
  },
  {
    "label": "GetTypeIndex()",
    "kind": "Method",
    "detail": "Function (} template<TScopeType> SIZE_T)",
    "insertText": "GetTypeIndex()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<TScopeType> TScopeType*)",
    "insertText": "Get()"
  },
  {
    "label": "FRDGScope()",
    "kind": "Method",
    "detail": "Function (FStorage Impl ; # if RDG_ENABLE_TRACE bool bVisited = false ; # endif)",
    "insertText": "FRDGScope(FRDGScope* Parent) : Parent(Parent)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (Impl .)",
    "insertText": "Dispatch([&](auto& Scope) { Scope.ImmediateEnd(State); })"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (Impl .)",
    "insertText": "Dispatch([&](auto& Scope) { Scope.BeginCPU(RHICmdList, bPreScope); })"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (Impl .)",
    "insertText": "Dispatch([&](auto& Scope) { Scope.BeginGPU(RHICmdList ); })"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (Impl .)",
    "insertText": "Dispatch([&](auto& Scope) { Scope.EndCPU (RHICmdList, bPreScope); })"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (Impl .)",
    "insertText": "Dispatch([&](auto& Scope) { Scope.EndGPU (RHICmdList ); })"
  },
  {
    "label": "GetFullPath()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFullPath(FRDGEventName const& PassName)"
  },
  {
    "label": "TRDGEventScopeGuard()",
    "kind": "Method",
    "detail": "Function (} ; template<TScopeType> class TRDGEventScopeGuard { FRDGScopeState& State ; FRDGScope* const Scope ; public : template<. . . TArgs>)",
    "insertText": "TRDGEventScopeGuard(FRDGScopeState& State, ERDGScopeFlags Flags, TArgs&&... Args)"
  },
  {
    "label": "TRDGEventScopeGuard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TRDGEventScopeGuard()"
  },
  {
    "label": "TScopeType()",
    "kind": "Method",
    "detail": "Function (private : uint32 TypeMask = 1 u<<FRDGScope::FStorage::GetTypeIndex<)",
    "insertText": "TScopeType()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (FRDGScope*)",
    "insertText": "Allocate(FRDGScopeState& State, ERDGScopeFlags Flags)"
  },
  {
    "label": "RDG_EVENT_NAME()",
    "kind": "Method",
    "detail": "Function (} ; # if RDG_EVENTS # define)",
    "insertText": "RDG_EVENT_NAME(Format, ...) (sizeof(#__VA_ARGS__ \"\") > 1 ? FRDGEventName(TEXT(Format), ##__VA_ARGS__) : FRDGEventName(1, TEXT(Format))) #define RDG_EVENT_SCOPE(GraphBuilder, Format, ...) \\ TRDGEventScopeGuard<FRDGScope_RHI> PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__)( \\ (GraphBuilder) \\ , ERDGScopeFlags::None \\ , FRHIBreadcrumbData(__FILE__, __LINE__, TStatId(), NAME_None) \\ , RDG_EVENT_NAME(Format, ##__VA_ARGS__) \\ ) #if HAS_GPU_STATS #define RDG_EVENT_SCOPE_STAT(GraphBuilder, StatName, Format, ...) \\ TRDGEventScopeGuard<FRDGScope_RHI> PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__)( \\ (GraphBuilder) \\ , ERDGScopeFlags::Stat \\ , FRHIBreadcrumbData( \\ __FILE__ \\ , __LINE__ \\ , GET_STATID(Stat_GPU_##StatName) \\ , CSV_STAT_FNAME(StatName) \\ ) \\ , RDG_EVENT_NAME(Format, ##__VA_ARGS__) \\ ) #else #define RDG_EVENT_SCOPE_STAT(GraphBuilder, StatName, Format, ...) \\ RDG_EVENT_SCOPE(GraphBuilder, Format, ##__VA_ARGS__) #endif #define RDG_EVENT_SCOPE_CONDITIONAL(GraphBuilder, Condition, Format, ...) \\ TOptional<TRDGEventScopeGuard<FRDGScope_RHI>> PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ do \\ { \\)",
    "insertText": "if(Condition)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__).Emplace( \\ (GraphBuilder) \\ , ERDGScopeFlags::None \\ , FRHIBreadcrumbData( \\ __FILE__ \\ , __LINE__ \\ , TStatId() \\ , NAME_None \\ ) \\ , RDG_EVENT_NAME(Format, ##__VA_ARGS__) \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(false) #if HAS_GPU_STATS #define RDG_EVENT_SCOPE_CONDITIONAL_STAT(GraphBuilder, Condition, StatName, Format, ...) \\ TOptional<TRDGEventScopeGuard<FRDGScope_RHI>> PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__).Emplace( \\ (GraphBuilder) \\ , ERDGScopeFlags::Stat \\ , FRHIBreadcrumbData( \\ __FILE__ \\ , __LINE__ \\ , GET_STATID(Stat_GPU_##StatName) \\ , CSV_STAT_FNAME(StatName) \\ ) \\ , RDG_EVENT_NAME(Format, ##__VA_ARGS__) \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(false) #else #define RDG_EVENT_SCOPE_CONDITIONAL_STAT(GraphBuilder, Condition, StatName, Format, ...) \\ RDG_EVENT_SCOPE_CONDITIONAL(GraphBuilder, Condition, Format, ##__VA_ARGS__) #endif #define RDG_EVENT_SCOPE_FINAL(GraphBuilder, Format, ...) \\ TOptional<TRDGEventScopeGuard<FRDGScope_RHI>> PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ do \\ { \\)",
    "insertText": "PREPROCESSOR_JOIN(__RDG_ScopeRef_,__LINE__).Emplace( \\ (GraphBuilder) \\ , ERDGScopeFlags::Final \\ , FRHIBreadcrumbData(__FILE__, __LINE__, TStatId(), NAME_None) \\ , RDG_EVENT_NAME(Format, ##__VA_ARGS__) \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(false) #else #define RDG_EVENT_NAME(...) FRDGEventName() #define RDG_EVENT_SCOPE(...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define RDG_EVENT_SCOPE_STAT(...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define RDG_EVENT_SCOPE_CONDITIONAL(...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define RDG_EVENT_SCOPE_CONDITIONAL_STAT(...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define RDG_EVENT_SCOPE_FINAL(...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #endif #if HAS_GPU_STATS && (RHI_NEW_GPU_PROFILER == 0) #define RDG_GPU_STAT_SCOPE(GraphBuilder, StatName) TRDGEventScopeGuard<FRDGScope_GPU> PREPROCESSOR_JOIN(__RDG_GPUStatEvent_##StatName,__LINE__) ((GraphBuilder), ERDGScopeFlags::AlwaysEnable, (GraphBuilder).RHICmdList.GetGPUMask(), CSV_STAT_FNAME(StatName), GET_STATID(Stat_GPU_##StatName), nullptr , DrawcallCountCategory_##StatName)"
  },
  {
    "label": "RDG_GPU_STAT_SCOPE_VERBOSE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RDG_GPU_STAT_SCOPE_VERBOSE(GraphBuilder, StatName, Description) TRDGEventScopeGuard<FRDGScope_GPU> PREPROCESSOR_JOIN(__RDG_GPUStatEvent_##StatName,__LINE__) ((GraphBuilder), ERDGScopeFlags::AlwaysEnable, (GraphBuilder).RHICmdList.GetGPUMask(), CSV_STAT_FNAME(StatName), GET_STATID(Stat_GPU_##StatName), Description, DrawcallCountCategory_##StatName)"
  },
  {
    "label": "RDG_GPU_STAT_SCOPE()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "RDG_GPU_STAT_SCOPE(GraphBuilder, StatName) #define RDG_GPU_STAT_SCOPE_VERBOSE(GraphBuilder, StatName, Description) #endif #if CSV_PROFILER_STATS #define RDG_CSV_STAT_EXCLUSIVE_SCOPE(GraphBuilder, StatName) TRDGEventScopeGuard<FRDGScope_CSVExclusive> PREPROCESSOR_JOIN(__RDG_CSVStat_##StatName,__LINE__) ((GraphBuilder), ERDGScopeFlags::AlwaysEnable, #StatName)"
  },
  {
    "label": "RDG_CSV_STAT_EXCLUSIVE_SCOPE()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "RDG_CSV_STAT_EXCLUSIVE_SCOPE(GraphBuilder, StatName) #endif #define RDG_RHI_EVENT_SCOPE( GraphBuilder, Name) RDG_EVENT_SCOPE(GraphBuilder, #Name)"
  },
  {
    "label": "RHI_BREADCRUMB_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_BREADCRUMB_EVENT(GraphBuilder.RHICmdList, #Name) #define RDG_RHI_EVENT_SCOPE_STAT(GraphBuilder, Stat, Name) RDG_EVENT_SCOPE_STAT(GraphBuilder, Stat, #Name)"
  },
  {
    "label": "RHI_BREADCRUMB_EVENT_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHI_BREADCRUMB_EVENT_STAT(GraphBuilder.RHICmdList, Stat, #Name) #define RDG_RHI_GPU_STAT_SCOPE( GraphBuilder, StatName) RDG_GPU_STAT_SCOPE(GraphBuilder, StatName)"
  },
  {
    "label": "SCOPED_GPU_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_GPU_STAT(GraphBuilder.RHICmdList, StatName)"
  },
  {
    "label": "FRDGScope()",
    "kind": "Method",
    "detail": "Function (namespace DynamicRenderScaling { class FRDGScope final : public TRDGEventScopeGuard<FRDGScope_Budget> { public :)",
    "insertText": "FRDGScope(FRDGScopeState& State, FBudget const& Budget) : TRDGEventScopeGuard(State, ERDGScopeFlags::AlwaysEnable, Budget)"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (} } ; } enum class ERDGScopeMode : uint8 { Disabled = 0,TopLevelOnly = 1,AllEvents = 2,AllEventsAndPassNames = 3 } ; class FRDGScopeState { protected : struct FState { struct FRDGScope* Current = nullptr ; DynamicRenderScaling::FBudget const* ActiveBudget = nullptr ; uint32 Mask = 0 ; bool const bImmediate ; bool const bParallelExecute ; # if RDG_EVENTS = = RDG_EVENTS_NONE ERDGScopeMode const ScopeMode = ERDGScopeMode::Disabled ; # else ERDGScopeMode const ScopeMode ; # endif)",
    "insertText": "FState(bool bInImmediate, bool bInParallelExecute)"
  },
  {
    "label": "GetBreadcrumbAllocator()",
    "kind": "Method",
    "detail": "Function (} ScopeState ; public : FRHICommandListImmediate& RHICmdList ; # if WITH_RHI_BREADCRUMBS protected : FRHIBreadcrumbNode* LocalCurrentBreadcrumb = FRHIBreadcrumbNode::Sentinel ; FRHIBreadcrumbList LocalBreadcrumbList { } ; TSharedPtr<FRHIBreadcrumbAllocator> LocalBreadcrumbAllocator ; public : FRHIBreadcrumbNode*& CurrentBreadcrumbRef ; FRHIBreadcrumbAllocator&)",
    "insertText": "GetBreadcrumbAllocator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!LocalBreadcrumbAllocator.IsValid())"
  },
  {
    "label": "FRHIBreadcrumbAllocator()",
    "kind": "Method",
    "detail": "Function (LocalBreadcrumbAllocator = MakeShared<)",
    "insertText": "FRHIBreadcrumbAllocator()"
  },
  {
    "label": "FRDGScopeState()",
    "kind": "Method",
    "detail": "Function (} return* LocalBreadcrumbAllocator ; } } # endif public :)",
    "insertText": "FRDGScopeState(FRHICommandListImmediate& InRHICmdList, bool bImmediate, bool bParallelExecute) : ScopeState(bImmediate, bParallelExecute) , RHICmdList(InRHICmdList) #if WITH_RHI_BREADCRUMBS , CurrentBreadcrumbRef(bImmediate ? InRHICmdList.GetCurrentBreadcrumbRef() : LocalCurrentBreadcrumb)"
  },
  {
    "label": "ShouldEmitEvents()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldEmitEvents()"
  }
]