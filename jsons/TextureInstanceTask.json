[
  {
    "label": "ETaskState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETaskState"
  },
  {
    "label": "TDoWorkTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDoWorkTask"
  },
  {
    "label": "FRefreshVisibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefreshVisibility"
  },
  {
    "label": "FRefreshFull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefreshFull"
  },
  {
    "label": "FNormalizeLightmapTexelFactor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNormalizeLightmapTexelFactor"
  },
  {
    "label": "FCreateViewWithUninitializedBounds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCreateViewWithUninitializedBounds"
  },
  {
    "label": "FDoWorkTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDoWorkTask"
  },
  {
    "label": "FDoWorkAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDoWorkAsyncTask"
  },
  {
    "label": "TDoWorkTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Streaming / TextureInstanceState . h \" # include \" Async / AsyncWork . h \" namespace RenderAssetInstanceTask { enum ETaskState { TS_Done,TS_WorkPending,TS_WorkInProgress,TS_SyncPending } ; template<TWork> class TDoWorkTask : public FRefCountedObject { public : template<. . . T>)",
    "insertText": "TDoWorkTask(T&&... Args) : Work(Forward<T>(Args)...), TaskState(TS_Done)"
  },
  {
    "label": "TDoWorkTask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TDoWorkTask()"
  },
  {
    "label": "TryWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryWork(bool bAsync)"
  },
  {
    "label": "Work()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Work(bAsync)"
  },
  {
    "label": "TrySync()",
    "kind": "Method",
    "detail": "Function (TaskState = TS_SyncPending ; } } void)",
    "insertText": "TrySync()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(0)"
  },
  {
    "label": "Sync()",
    "kind": "Method",
    "detail": "Function (} Work .)",
    "insertText": "Sync()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} TaskState = TS_Done ; } template<. . . T> void)",
    "insertText": "Init(T&&... Args)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Work .)",
    "insertText": "Init(Forward<T>(Args)...)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (TaskState = TS_WorkPending ; } private : TWork Work ; volatile int32 TaskState ; } ; class FRefreshVisibility { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnWorkDone, int32, int32)"
  },
  {
    "label": "FRefreshVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRefreshVisibility(const FOnWorkDone& InOnWorkDoneDelegate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FRenderAssetInstanceState* InState, int32 InBeginIndex, int32 InEndIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(bool bAsync)"
  },
  {
    "label": "DECLARE_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (private : FOnWorkDone OnWorkDoneDelegate ; TRefCountPtr<FRenderAssetInstanceState> State ; int32 BeginIndex ; int32 EndIndex ; } ; class FRefreshFull { public :)",
    "insertText": "DECLARE_DELEGATE_FiveParams(FOnWorkDone, int32, int32, const TArray<int32>&, int32, int32)"
  },
  {
    "label": "FRefreshFull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRefreshFull(const FOnWorkDone& InOnWorkDoneDelegate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : FOnWorkDone OnWorkDoneDelegate ; int32 FirstFreeBound = INDEX_NONE ; int32 LastUsedBound = INDEX_NONE ; TArray<int32> SkippedIndices ; TRefCountPtr<FRenderAssetInstanceState> State ; int32 BeginIndex ; int32 EndIndex ; } ; class FNormalizeLightmapTexelFactor { public : void)",
    "insertText": "Init(FRenderAssetInstanceState* InState)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (State .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FRenderAssetInstanceState> State ; } ; class FCreateViewWithUninitializedBounds : public FNonAbandonableTask { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnWorkDone, FRenderAssetInstanceView*)"
  },
  {
    "label": "FCreateViewWithUninitializedBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCreateViewWithUninitializedBounds(const FOnWorkDone& InOnWorkDoneDelegate) : OnWorkDoneDelegate(InOnWorkDoneDelegate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FRenderAssetInstanceState* InState, const FRenderAssetInstanceView* InViewToRelease)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (private : FOnWorkDone OnWorkDoneDelegate ; TRefCountPtr<FRenderAssetInstanceView> View ; TRefCountPtr<const FRenderAssetInstanceState> State ; TRefCountPtr<const FRenderAssetInstanceView> ViewToRelease ; } ; typedef TDoWorkTask<FRefreshFull> FRefreshFullTask ; typedef TDoWorkTask<FRefreshVisibility> FRefreshVisibilityTask ; typedef TDoWorkTask<FNormalizeLightmapTexelFactor> FNormalizeLightmapTexelFactorTask ; typedef TDoWorkTask<FCreateViewWithUninitializedBounds> FCreateViewWithUninitializedBoundsTask ; class FDoWorkTask : public FNonAbandonableTask { public : void)",
    "insertText": "DoWork()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FRefreshFullTask* RefreshFullTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RefreshFullTasks .)",
    "insertText": "Add(RefreshFullTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FRefreshVisibilityTask* RefreshVisibilityTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RefreshVisibilityTasks .)",
    "insertText": "Add(RefreshVisibilityTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FNormalizeLightmapTexelFactorTask* NormalizeLightmapTexelFactorTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NormalizeLightmapTexelFactorTasks .)",
    "insertText": "Add(NormalizeLightmapTexelFactorTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FCreateViewWithUninitializedBoundsTask* CreateViewWithUninitializedBoundsTask)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CreateViewWithUninitializedBoundsTasks .)",
    "insertText": "Add(CreateViewWithUninitializedBoundsTask)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "ProcessTasks()",
    "kind": "Method",
    "detail": "Function (} private : template<TTask> void)",
    "insertText": "ProcessTasks(TArray< TRefCountPtr<TTask> >& Tasks)"
  }
]