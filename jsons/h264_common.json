[
  {
    "label": "NaluType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NaluType"
  },
  {
    "label": "SliceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SliceType"
  },
  {
    "label": "NaluIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NaluIndex"
  },
  {
    "label": "FindNaluIndices()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_VIDEO_H264_H264_COMMON_H_ # define COMMON_VIDEO_H264_H264_COMMON_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" rtc_base / buffer . h \" namespace webrtc { namespace H264 { const size_t kNaluLongStartSequenceSize = 4 ; const size_t kNaluShortStartSequenceSize = 3 ; const size_t kNaluTypeSize = 1 ; enum NaluType : uint8_t { kSlice = 1,kIdr = 5,kSei = 6,kSps = 7,kPps = 8,kAud = 9,kEndOfSequence = 1 0,kEndOfStream = 1 1,kFiller = 1 2,kPrefix = 1 4,kStapA = 2 4,kFuA = 2 8 } ; enum SliceType : uint8_t { kP = 0,kB = 1,kI = 2,kSp = 3,kSi = 4 } ; struct NaluIndex { size_t start_offset ; size_t payload_start_offset ; size_t payload_size ; } ; std::vector<NaluIndex>)",
    "insertText": "FindNaluIndices(const uint8_t* buffer, size_t buffer_size)"
  },
  {
    "label": "ParseNaluType()",
    "kind": "Method",
    "detail": "Function (NaluType)",
    "insertText": "ParseNaluType(uint8_t data)"
  },
  {
    "label": "ParseRbsp()",
    "kind": "Method",
    "detail": "Function (std::vector<uint8_t>)",
    "insertText": "ParseRbsp(const uint8_t* data, size_t length)"
  },
  {
    "label": "WriteRbsp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRbsp(const uint8_t* bytes, size_t length, rtc::Buffer* destination)"
  }
]