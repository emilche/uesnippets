[
  {
    "label": "StackMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackMarker"
  },
  {
    "label": "StackMarker()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_JSON_JSON_COMMON_H_ # define BASE_JSON_JSON_COMMON_H_ # include<stddef . h> # include \" base / check_op . h \" # include \" base / memory / raw_ptr . h \" namespace base { namespace internal { const size_t kAbsoluteMaxDepth = 2 0 0 ; class StackMarker { public :)",
    "insertText": "StackMarker(size_t max_depth, size_t* depth) : max_depth_(max_depth), depth_(depth)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(*depth_, max_depth_)"
  },
  {
    "label": "StackMarker()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StackMarker(const StackMarker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StackMarker&)",
    "insertText": "operator(const StackMarker&)"
  },
  {
    "label": "StackMarker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StackMarker()"
  },
  {
    "label": "IsTooDeep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTooDeep()"
  }
]