[
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRCAT_INTERNAL_H_ # define BASE_STRINGS_STRCAT_INTERNAL_H_ # include<string> # include \" base / containers / span . h \" # include \" base / template_util . h \" namespace base { namespace internal { template<CharT> auto)",
    "insertText": "Resize(std::basic_string<CharT>& str, size_t total_size, priority_tag<1>) -> decltype(str.__resize_default_init(total_size))"
  },
  {
    "label": "__resize_default_init()",
    "kind": "Method",
    "detail": "Function (str .)",
    "insertText": "__resize_default_init(total_size)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} template<CharT> void)",
    "insertText": "Resize(std::basic_string<CharT>& str, size_t total_size, priority_tag<0>)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (str .)",
    "insertText": "resize(total_size)"
  },
  {
    "label": "StrAppendT()",
    "kind": "Method",
    "detail": "Function (} template<CharT,StringT> void)",
    "insertText": "StrAppendT(std::basic_string<CharT>& dest, span<const StringT> pieces)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t initial_size = dest .)",
    "insertText": "size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t total_size = initial_size ;)",
    "insertText": "for(const auto& cur : pieces) total_size += cur.size()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(dest, total_size, priority_tag<1>())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CharT* dest_char =& dest [ initial_size ] ;)",
    "insertText": "for(const auto& cur : pieces)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (std::char_traits<CharT)",
    "insertText": "copy(dest_char, cur.data(), cur.size())"
  },
  {
    "label": "StrCatT()",
    "kind": "Method",
    "detail": "Function (} } template<StringT> auto)",
    "insertText": "StrCatT(span<const StringT> pieces)"
  },
  {
    "label": "StrAppendT()",
    "kind": "Method",
    "detail": "Function (std::basic_string<StringT::value_type> result ;)",
    "insertText": "StrAppendT(result, pieces)"
  }
]