[
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedItem(TSharedPtr<FString> InSelectedItem, ESelectInfo::Type InSelectInfo = ESelectInfo::OnNavigation)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "RefreshOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshOptions()"
  },
  {
    "label": "SetOptionsSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOptionsSource(const TArray< TSharedPtr<FString> >* InOptionsSource)"
  },
  {
    "label": "GenerateMenuItemRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateMenuItemRow(TSharedPtr<FString> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnMenuOpenChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuOpenChanged(bool bOpen)"
  },
  {
    "label": "OnSelectionChanged_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged_Internal(TSharedPtr<FString> ProposedSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnSearchTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextChanged(const FText& ChangedText)"
  },
  {
    "label": "OnSearchTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "OnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDownHandler(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  }
]