[
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Widgets / Input / SEditableTextBox . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Input / SComboBox . h \" class SSearchableComboBox : public SComboButton { public : typedef SListView<TSharedPtr<FString>> SComboListType ; typedef TSlateDelegates<TSharedPtr<FString>>::FOnGenerateWidget FOnGenerateWidget ; typedef TSlateDelegates<TSharedPtr<FString>>::FOnSelectionChanged FOnSelectionChanged ;)",
    "insertText": "SLATE_BEGIN_ARGS(SSearchableComboBox) : _Content() , _ComboBoxStyle(&FAppStyle::Get().GetWidgetStyle<FComboBoxStyle>(\"ComboBox\")) , _ButtonStyle(nullptr) , _ItemStyle(&FAppStyle::Get().GetWidgetStyle<FTableRowStyle>(\"ComboBox.Row\")) , _ContentPadding(_ComboBoxStyle->ContentPadding) , _ForegroundColor(FSlateColor::UseStyle()) , _OptionsSource() , _OnSelectionChanged() , _bAlwaysSelectItem(false) , _OnGenerateWidget() , _InitiallySelectedItem(nullptr) , _Method() , _MaxListHeight(450.0f) , _HasDownArrow(true) , _SearchVisibility()"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_STYLE_ARGUMENT(FComboBoxStyle, ComboBoxStyle) SLATE_STYLE_ARGUMENT(FButtonStyle, ButtonStyle) SLATE_STYLE_ARGUMENT(FTableRowStyle, ItemStyle) SLATE_ATTRIBUTE(FMargin, ContentPadding) SLATE_ATTRIBUTE(FSlateColor, ForegroundColor) SLATE_ARGUMENT(const TArray< TSharedPtr<FString> >*, OptionsSource) SLATE_EVENT(FOnSelectionChanged, OnSelectionChanged) SLATE_ARGUMENT(bool, bAlwaysSelectItem) SLATE_EVENT(FOnGenerateWidget, OnGenerateWidget) SLATE_EVENT(FOnComboBoxOpening, OnComboBoxOpening) SLATE_ARGUMENT(TSharedPtr<SScrollBar>, CustomScrollbar) SLATE_ARGUMENT(TSharedPtr<FString>, InitiallySelectedItem) SLATE_ARGUMENT(TOptional<EPopupMethod>, Method) SLATE_ARGUMENT(float, MaxListHeight) SLATE_ARGUMENT(bool, HasDownArrow) SLATE_ATTRIBUTE(EVisibility, SearchVisibility) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedItem(TSharedPtr<FString> InSelectedItem, ESelectInfo::Type InSelectInfo = ESelectInfo::OnNavigation)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "RefreshOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshOptions()"
  },
  {
    "label": "SetOptionsSource()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetOptionsSource(const TArray< TSharedPtr<FString> >* InOptionsSource)"
  },
  {
    "label": "GenerateMenuItemRow()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "GenerateMenuItemRow(TSharedPtr<FString> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnMenuOpenChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuOpenChanged(bool bOpen)"
  },
  {
    "label": "OnSelectionChanged_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged_Internal(TSharedPtr<FString> ProposedSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnSearchTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextChanged(const FText& ChangedText)"
  },
  {
    "label": "OnSearchTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchTextCommitted(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "OnButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClicked()"
  },
  {
    "label": "OnKeyDownHandler()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDownHandler(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  }
]