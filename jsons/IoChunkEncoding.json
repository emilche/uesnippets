[
  {
    "label": "FIoBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBuffer"
  },
  {
    "label": "FIoHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoHash"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIoChunkEncodingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoChunkEncodingParams"
  },
  {
    "label": "FIoChunkDecodingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoChunkDecodingParams"
  },
  {
    "label": "FIoChunkEncoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoChunkEncoding"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "AES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IO / IoOffsetLength . h \" # include \" IO / IoStatus . h \" # include \" Memory / MemoryView . h \" # include \" UObject / NameTypes . h \" class FIoBuffer ; struct FIoHash ; using FIoBlockHash = uint32 ; enum class EIoEncryptionMethod : uint8 { None = 0,)",
    "insertText": "AES(1 << 0)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (struct FIoChunkEncodingParams { FName CompressionFormat =)",
    "insertText": "TEXT(\"Oodle\")"
  },
  {
    "label": "BlockSize()",
    "kind": "Method",
    "detail": "Function (FMemoryView EncryptionKey ; uint32)",
    "insertText": "BlockSize(64 << 10)"
  },
  {
    "label": "DefaultBlockSize()",
    "kind": "Method",
    "detail": "Function (} ; struct FIoChunkDecodingParams : public FIoChunkEncodingParams { uint64 TotalRawSize = 0 ; uint64 RawOffset = 0 ; uint64 EncodedOffset = 0 ; TConstArrayView<uint32> EncodedBlockSize ; TConstArrayView<FIoBlockHash> BlockHash ; } ; class FIoChunkEncoding { public : uint32 ExpectedMagic = 0 x2e696f ; uint32)",
    "insertText": "DefaultBlockSize(64 << 10)"
  },
  {
    "label": "MaxBlockCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "MaxBlockCount(1 << 24)"
  },
  {
    "label": "MaxSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "MaxSize(uint64(1) << 40)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FHeader { uint64 Magic : 2 4 ; uint64 RawSize : 4 0 ; uint64 EncodedSize : 4 0 ; uint64 BlockSizeExponent : 8 ; uint64 Flags : 8 ; uint64 Pad : 8 ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetBlockSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBlockSize()"
  },
  {
    "label": "GetBlockCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBlockCount()"
  },
  {
    "label": "GetBlocks()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<uint32>)",
    "insertText": "GetBlocks()"
  },
  {
    "label": "GetTotalHeaderSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalHeaderSize()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (const FHeader*)",
    "insertText": "Decode(FMemoryView HeaderData)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(sizeof(FHeader) == 16, \"I/O chunk header size mismatch\")"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Encode(const FIoChunkEncodingParams& Params, FMemoryView RawData, FIoBuffer& OutEncodedData)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Encode(const FIoChunkEncodingParams& Params, FMemoryView RawData, FIoBuffer& OutHeader, FIoBuffer& OutEncodedBlocks)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Decode(const FIoChunkDecodingParams& Params, FMemoryView EncodedBlocks, FMutableMemoryView OutRawData)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Decode(FMemoryView EncodedData, FName CompressionFormat, FMemoryView EncryptionKey, FMutableMemoryView OutRawData, uint64 Offset = 0)"
  },
  {
    "label": "GetChunkRange()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoOffsetAndLength>)",
    "insertText": "GetChunkRange(uint64 TotalRawSize, uint32 RawBlockSize, TConstArrayView<uint32> EncodedBlockSize, uint64 RawOffset, uint64 RawSize)"
  },
  {
    "label": "GetChunkRange()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoOffsetAndLength>)",
    "insertText": "GetChunkRange(const FIoChunkDecodingParams& Params, uint64 RawSize)"
  },
  {
    "label": "GetTotalEncodedSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalEncodedSize(TConstArrayView<uint32> EncodedBlockSize)"
  },
  {
    "label": "HashBlock()",
    "kind": "Method",
    "detail": "Function (FIoBlockHash)",
    "insertText": "HashBlock(FMemoryView Block)"
  }
]