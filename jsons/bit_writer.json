[
  {
    "label": "BitWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitWriter"
  },
  {
    "label": "BitWriter()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_ENCODER_BIT_WRITER_H_ # define LOGGING_RTC_EVENT_LOG_ENCODER_BIT_WRITER_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" rtc_base / bit_buffer . h \" # include \" rtc_base / checks . h \" namespace webrtc { class BitWriter final { public :)",
    "insertText": "BitWriter(size_t byte_count) : buffer_(byte_count, '\\0'), bit_writer_(reinterpret_cast<uint8_t*>(&buffer_[0]), buffer_.size()), written_bits_(0), valid_(true)"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(byte_count, 0)"
  },
  {
    "label": "BitWriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitWriter(const BitWriter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BitWriter&)",
    "insertText": "operator(const BitWriter&)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBits(uint64_t val, size_t bit_count)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBits(absl::string_view input)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetString()"
  }
]