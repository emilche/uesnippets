[
  {
    "label": "EIGEN_LAPACKE_SVD()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_JACOBISVD_LAPACKE_H # define EIGEN_JACOBISVD_LAPACKE_H namespace Eigen { # define)",
    "insertText": "EIGEN_LAPACKE_SVD(EIGTYPE, LAPACKE_TYPE, LAPACKE_RTYPE, LAPACKE_PREFIX, EIGCOLROW, LAPACKE_COLROW) \\ template<> inline \\ JacobiSVD<Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW, Dynamic, Dynamic>, ColPivHouseholderQRPreconditioner>& \\ JacobiSVD<Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW, Dynamic, Dynamic>, ColPivHouseholderQRPreconditioner>::compute(const Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW, Dynamic, Dynamic>& matrix, unsigned int computationOptions)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (\\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,EIGCOLROW,Dynamic,Dynamic> MatrixType ; \\ \\ \\)",
    "insertText": "allocate(matrix.rows(), matrix.cols(), computationOptions)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ m_nonzeroSingularValues = m_diagSize ; \\ \\ lapack_int lda = internal::convert_index<)",
    "insertText": "lapack_int(matrix.outerStride())"
  },
  {
    "label": "jobu()",
    "kind": "Method",
    "detail": "Function (\\ lapack_int matrix_order = LAPACKE_COLROW ; \\ char jobu,jobvt ; \\ LAPACKE_TYPE* u,* vt,dummy ; \\)",
    "insertText": "jobu(m_computeFullU) ? 'A' : (m_computeThinU)"
  },
  {
    "label": "jobvt()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "jobvt(m_computeFullV) ? 'A' : (m_computeThinV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(computeU())"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ ldu = internal::convert_index<)",
    "insertText": "lapack_int(m_matrixU.outerStride())"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "u(LAPACKE_TYPE*)m_matrixU.data()"
  },
  {
    "label": "vt_rows()",
    "kind": "Method",
    "detail": "Function (\\ } else { ldu = 1 ; u =& dummy ; } \\ MatrixType localV ; \\ lapack_int)",
    "insertText": "vt_rows(m_computeFullV) ? internal::convert_index<lapack_int>(m_cols) : (m_computeThinV) ? internal::convert_index<lapack_int>(m_diagSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(computeV())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (\\ localV .)",
    "insertText": "resize(vt_rows, m_cols)"
  },
  {
    "label": "lapack_int()",
    "kind": "Method",
    "detail": "Function (\\ ldvt = internal::convert_index<)",
    "insertText": "lapack_int(localV.outerStride())"
  },
  {
    "label": "vt()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "vt(LAPACKE_TYPE*)localV.data()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (\\ } else { ldvt = 1 ; vt =& dummy ; } \\ Matrix<LAPACKE_RTYPE,Dynamic,Dynamic> superb ; superb .)",
    "insertText": "resize(m_diagSize, 1)"
  },
  {
    "label": "gesvd()",
    "kind": "Method",
    "detail": "Function (\\ MatrixType m_temp ; m_temp = matrix ; \\ LAPACKE_ # # LAPACKE_PREFIX # #)",
    "insertText": "gesvd(matrix_order, jobu, jobvt, internal::convert_index<lapack_int>(m_rows), internal::convert_index<lapack_int>(m_cols), (LAPACKE_TYPE*)m_temp.data(), lda, (LAPACKE_RTYPE*)m_singularValues.data(), u, ldu, vt, ldvt, superb.data())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(computeV()) m_matrixV = localV.adjoint()"
  }
]