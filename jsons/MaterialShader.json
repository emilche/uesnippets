[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformExpressionSet"
  },
  {
    "label": "FViewUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewUniformShaderParameters"
  },
  {
    "label": "TUniformBufferRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformBufferRef"
  },
  {
    "label": "FDebugUniformExpressionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugUniformExpressionSet"
  },
  {
    "label": "FMaterialShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderPermutationParameters"
  },
  {
    "label": "FMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShader"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MaterialShaderType . h \" # include \" MaterialShared . h \" # include \" SceneView . h \" # include \" Shader . h \" # include \" ShaderParameterUtils . h \" # include \" RHIFwd . h \" # include \" Serialization / MemoryLayout . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # include \" GlobalShader . h \" # include \" HAL / IConsoleManager . h \" # include \" RHI . h \" # include \" ShaderParameters . h \" # include \" ShaderParameterUtils . h \" # endif class FScene ; class FUniformExpressionSet ; class FViewUniformShaderParameters ; template<TBufferStruct> class TUniformBufferRef ; class FDebugUniformExpressionSet {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FDebugUniformExpressionSet, NonVirtual)"
  },
  {
    "label": "FDebugUniformExpressionSet()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FDebugUniformExpressionSet()"
  },
  {
    "label": "FDebugUniformExpressionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDebugUniformExpressionSet(const FUniformExpressionSet& InUniformExpressionSet)"
  },
  {
    "label": "InitFromExpressionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromExpressionSet(const FUniformExpressionSet& InUniformExpressionSet)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const FUniformExpressionSet& InUniformExpressionSet)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(int32, NumPreshaders)"
  },
  {
    "label": "LAYOUT_ARRAY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_ARRAY(int32, NumTextureExpressions, NumMaterialTextureParameterTypes)"
  },
  {
    "label": "FMaterialShaderPermutationParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct FMaterialShaderPermutationParameters : public FShaderPermutationParameters { FMaterialShaderParameters MaterialParameters ;)",
    "insertText": "FMaterialShaderPermutationParameters(EShaderPlatform InPlatform, const FMaterialShaderParameters& InMaterialParameters, int32 InPermutationId, EShaderPermutationFlags InFlags) : FShaderPermutationParameters(InPlatform, InPermutationId, InFlags) , MaterialParameters(InMaterialParameters)"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FMaterialShader : public FShader {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FMaterialShader, RENDERER_API, NonVirtual)"
  },
  {
    "label": "FMaterialShader()",
    "kind": "Method",
    "detail": "Function (public : using FPermutationParameters = FMaterialShaderPermutationParameters ; using ShaderMetaType = FMaterialShaderType ; FName UniformBufferLayoutName ;)",
    "insertText": "FMaterialShader()"
  },
  {
    "label": "FMaterialShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialShader(const FMaterialShaderType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "GetParameterCollectionBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer*)",
    "insertText": "GetParameterCollectionBuffer(const FGuid& Id, const FSceneInterface* SceneInterface)"
  },
  {
    "label": "SetViewParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView& View, const TUniformBufferRef<FViewUniformShaderParameters>& ViewUniformBuffer)"
  },
  {
    "label": "SetViewParameters()",
    "kind": "Method",
    "detail": "Function (template<ShaderRHIParamRef,TRHICommandList> void)",
    "insertText": "SetViewParameters(TRHICommandList& RHICmdList, const ShaderRHIParamRef ShaderRHI, const FSceneView& View, const TUniformBufferRef<FViewUniformShaderParameters>& ViewUniformBuffer)"
  },
  {
    "label": "GetScratchShaderParameters()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderParameters& BatchedParameters = RHICmdList .)",
    "insertText": "GetScratchShaderParameters()"
  },
  {
    "label": "SetViewParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewParameters(BatchedParameters, View, ViewUniformBuffer)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderParameters(ShaderRHI, BatchedParameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial& Material, const FSceneView& View)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(BatchedParameters, MaterialRenderProxy, Material, View.Family->Scene)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial& Material, const FSceneInterface* Scene)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (template<TRHIShader,TRHICommandList> void)",
    "insertText": "SetParameters(TRHICommandList& RHICmdList, TRHIShader* ShaderRHI, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial& Material, const FSceneView& View)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(BatchedParameters, MaterialRenderProxy, Material, View)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderBindings(const FSceneInterface* Scene, ERHIFeatureLevel::Type FeatureLevel, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (private : int32 bAllowCachedUniformExpressions ; FAutoConsoleVariableRef CVarAllowCachedUniformExpressions ; #)",
    "insertText": "if(UE_BUILD_TEST || UE_BUILD_SHIPPING || !WITH_EDITOR) RENDERER_API void VerifyExpressionAndShaderMaps(const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial& Material, const FUniformExpressionCache* UniformExpressionCache)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "LAYOUT_FIELD(TMemoryImageArray<FShaderUniformBufferParameter>, ParameterCollectionUniformBuffers)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, MaterialUniformBuffer)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, VTFeedbackBuffer)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FDebugUniformExpressionSet, DebugUniformExpressionSet)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FRHIUniformBufferLayoutInitializer, DebugUniformExpressionUBLayout)"
  },
  {
    "label": "LAYOUT_FIELD_EDITORONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_EDITORONLY(FMemoryImageString, DebugDescription)"
  }
]