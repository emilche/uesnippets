[
  {
    "label": "TSQVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSQVisitor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TBPVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBPVisitor"
  },
  {
    "label": "FillHitHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / DebugDrawQueue . h \" # include \" Chaos / GeometryQueries . h \" # include \" Chaos / Interface / SQTypes . h \" # include \" Chaos / ISpatialAcceleration . h \" # include \" Chaos / ParticleHandle . h \" # include \" ChaosInterfaceWrapperCore . h \" # include \" CollisionQueryFilterCallbackCore . h \" # include \" PhysicsInterfaceTypesCore . h \" # include \" PhysicsInterfaceUtilsCore . h \" # include<type_traits> # if WITH_CHAOS_VISUAL_DEBUGGER # include \" DataWrappers / ChaosVDQueryDataWrappers . h \" # endif # include \" ChaosVDSQVisitorHelpers . h \" # if CHAOS_DEBUG_DRAW int32 ChaosSQDrawDebugVisitorQueries ; FAutoConsoleVariableRef CVarChaosSQDrawDebugQueries ; # endif template<TLocationHit> void)",
    "insertText": "FillHitHelper(TLocationHit& Hit, const Chaos::FReal Distance, const FVector& WorldPosition, const FVector& WorldNormal, int32 FaceIdx, bool bComputeMTD)"
  },
  {
    "label": "TSQVisitor()",
    "kind": "Method",
    "detail": "Function (Hit . Distance = Distance ; Hit . WorldPosition = WorldPosition ; Hit . WorldNormal = WorldNormal ; Hit . Flags = Distance> 0 . f | | bComputeMTD ? EHitFlags::Distance | EHitFlags::Normal | EHitFlags::Position : EHitFlags::Distance | EHitFlags::FaceIndex ; Hit . FaceIndex = FaceIdx ; } } template<QueryGeometryType,TPayload,THitType,bool bGTData = true> struct TSQVisitor : public Chaos::ISpatialVisitor<TPayload,Chaos::FReal> { using TGeometryType = std::conditional_t<bGTData,Chaos::FGeometryParticle,Chaos::FGeometryParticleHandle> ;)",
    "insertText": "TSQVisitor(const FVector& InStartPoint, const FVector& InDir, ChaosInterface::FSQHitBuffer<THitType>& InHitBuffer, EHitFlags InOutputFlags, const ChaosInterface::FQueryFilterData& InQueryFilterData, ICollisionQueryFilterCallbackBase& InQueryCallback, const ChaosInterface::FQueryDebugParams& InDebugParams) : StartPoint(InStartPoint) , Dir(InDir) , HalfExtents(0) , OutputFlags(InOutputFlags) , bAnyHit(false) , DebugParams(InDebugParams) , HitFaceNormal(Chaos::FVec3::ZeroVector) , HitBuffer(InHitBuffer) , QueryFilterData(InQueryFilterData) , QueryFilterDataConcrete(C2UFilterData(QueryFilterData.data)) , QueryCallback(InQueryCallback)"
  },
  {
    "label": "TSQVisitor()",
    "kind": "Method",
    "detail": "Function (bAnyHit = QueryFilterData . flags& FChaosQueryFlag::eANY_HIT ; })",
    "insertText": "TSQVisitor(const FTransform& InStartTM, const FVector& InDir, ChaosInterface::FSQHitBuffer<THitType>& InHitBuffer, EHitFlags InOutputFlags, const ChaosInterface::FQueryFilterData& InQueryFilterData, ICollisionQueryFilterCallbackBase& InQueryCallback, const QueryGeometryType& InQueryGeom, const ChaosInterface::FQueryDebugParams& InDebugParams) : Dir(InDir) , HalfExtents(InQueryGeom.BoundingBox().Extents() * 0.5) , OutputFlags(InOutputFlags) , bAnyHit(false) , DebugParams(InDebugParams) , HitFaceNormal(Chaos::FVec3::ZeroVector) , HitBuffer(InHitBuffer) , QueryFilterData(InQueryFilterData) , QueryFilterDataConcrete(C2UFilterData(QueryFilterData.data)) , QueryGeom(&InQueryGeom) , QueryCallback(InQueryCallback) , StartTM(InStartTM)"
  },
  {
    "label": "TSQVisitor()",
    "kind": "Method",
    "detail": "Function (bAnyHit = QueryFilterData . flags& FChaosQueryFlag::eANY_HIT ; })",
    "insertText": "TSQVisitor(const FTransform& InWorldTM, ChaosInterface::FSQHitBuffer<THitType>& InHitBuffer, const ChaosInterface::FQueryFilterData& InQueryFilterData, ICollisionQueryFilterCallbackBase& InQueryCallback, const QueryGeometryType& InQueryGeom, const ChaosInterface::FQueryDebugParams& InDebugParams) : HalfExtents(InQueryGeom.BoundingBox().Extents() * 0.5) , bAnyHit(false) , DebugParams(InDebugParams) , HitFaceNormal(Chaos::FVec3::ZeroVector) , HitBuffer(InHitBuffer) , QueryFilterData(InQueryFilterData) , QueryFilterDataConcrete(C2UFilterData(QueryFilterData.data)) , QueryGeom(&InQueryGeom) , QueryCallback(InQueryCallback) , StartTM(InWorldTM)"
  },
  {
    "label": "TSQVisitor()",
    "kind": "Method",
    "detail": "Function (bAnyHit = QueryFilterData . flags& FChaosQueryFlag::eANY_HIT ; } ~)",
    "insertText": "TSQVisitor()"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Raycast(const Chaos::TSpatialVisitorData<TPayload>& Instance, Chaos::FQueryFastData& CurData)"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Sweep(const Chaos::TSpatialVisitorData<TPayload>& Instance, Chaos::FQueryFastData& CurData)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Overlap(const Chaos::TSpatialVisitorData<TPayload>& Instance)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetQueryData()"
  },
  {
    "label": "GetPayloadForThread()",
    "kind": "Method",
    "detail": "Function (} private : enum class ESQType { Raycast,Sweep,Overlap } ; TGeometryType*)",
    "insertText": "GetPayloadForThread(const TPayload& Payload)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TPayload::bHasPayloadOnInternalThread)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } } template<ESQType SQ> bool)",
    "insertText": "Visit(const Chaos::TSpatialVisitorData<TPayload>& Instance, Chaos::FQueryFastData* CurData)"
  },
  {
    "label": "GetPayloadForThread()",
    "kind": "Method",
    "detail": "Function (TPayload Payload = Instance . Payload ; using namespace Chaos ; TGeometryType* GeometryParticle =)",
    "insertText": "GetPayloadForThread(Payload)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const bool bTestShapeBounds = Shapes .)",
    "insertText": "Num()"
  },
  {
    "label": "ActorTM()",
    "kind": "Method",
    "detail": "Function (bool bContinue = true ; const FRigidTransform3)",
    "insertText": "ActorTM(GeometryParticle->GetX(), GeometryParticle->GetR())"
  },
  {
    "label": "CalculateTransformedBounds()",
    "kind": "Method",
    "detail": "Function (const TAABB<FReal,3> QueryGeomWorldBounds = QueryGeom ? QueryGeom ->)",
    "insertText": "CalculateTransformedBounds(StartTM) : TAABB<FReal, 3>(-HalfExtents, HalfExtents)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_DRAW bool bAllShapesIgnoredInPrefilter = true ; bool bHitBufferIncreased = false ; # endif)",
    "insertText": "for(int32 ShapeIndex = 0; ShapeIndex < Shapes.Num(); ++ShapeIndex)"
  },
  {
    "label": "GetGeometry()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<FPerShapeData>& Shape = Shapes [ ShapeIndex ] ; const FImplicitObject* Geom = Shape ->)",
    "insertText": "GetGeometry()"
  },
  {
    "label": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER(EChaosVDSceneQueryVisitorType::NarrowPhase, FTransform(GeometryParticle->GetR(), GeometryParticle->GetX()), Payload.UniqueIdx().Idx, ShapeIndex, CurData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FAABB3 InflatedWorldBounds ;)",
    "insertText": "if(SQ == ESQType::Raycast)"
  },
  {
    "label": "GetWorldSpaceShapeBounds()",
    "kind": "Method",
    "detail": "Function (InflatedWorldBounds = Shape ->)",
    "insertText": "GetWorldSpaceShapeBounds()"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (} else { const FVec3 WorldHalfExtent = QueryGeom ? QueryGeomWorldBounds .)",
    "insertText": "Extents() * 0.5f : FVec3(HalfExtents)"
  },
  {
    "label": "FAABB3()",
    "kind": "Method",
    "detail": "Function (InflatedWorldBounds =)",
    "insertText": "FAABB3(Shape->GetWorldSpaceShapeBounds().Min() - WorldHalfExtent, Shape->GetWorldSpaceShapeBounds().Max() + WorldHalfExtent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SQ != ESQType::Overlap)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (Chaos::FReal TmpTime,TmpExitTime ; const FVec3 InflatedBoundsTraceStart = SQ = = ESQType::Raycast ? StartPoint : QueryGeomWorldBounds .)",
    "insertText": "Center()"
  },
  {
    "label": "CVD_SET_SQ_SHAPE_REJECT_REASON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_SET_SQ_SHAPE_REJECT_REASON(EChaosVDSQVisitRejectReason::FailedFastBoundTest)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (continue ; } } else { const FVec3 QueryCenter = QueryGeom ? QueryGeomWorldBounds .)",
    "insertText": "Center() : StartTM.GetLocation()"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (continue ; } } } ECollisionQueryHitType HitType = QueryFilterData . flags& FChaosQueryFlag::ePREFILTER ? QueryCallback .)",
    "insertText": "PreFilter(QueryFilterDataConcrete, *Shape, *GeometryParticle)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_DRAW bAllShapesIgnoredInPrefilter = false ; # endif THitType Hit ; Hit . Actor = GeometryParticle ; Hit . Shape = Shape .)",
    "insertText": "Get()"
  },
  {
    "label": "bComputeMTD()",
    "kind": "Method",
    "detail": "Function (bool bHit = false ; FVec3 WorldPosition { 0 . 0 f },WorldNormal { 0 . 0 f } ; Chaos::FReal Distance = 0 ; int32 FaceIdx = INDEX_NONE ; FVec3 FaceNormal = FVec3::ZeroVector ; const bool)",
    "insertText": "bComputeMTD((uint16)(OutputFlags.HitFlags & EHitFlags::MTD))"
  },
  {
    "label": "InverseTransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (FVec3 LocalNormal ; FVec3 LocalPosition ; const FVec3 DirLocal = ActorTM .)",
    "insertText": "InverseTransformVectorNoScale(Dir)"
  },
  {
    "label": "InverseTransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 StartLocal = ActorTM .)",
    "insertText": "InverseTransformPositionNoScale(StartPoint)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (bHit = Geom ->)",
    "insertText": "Raycast(StartLocal, DirLocal, CurData->CurrentLength, 0.0, Distance, LocalPosition, LocalNormal, FaceIdx)"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (WorldPosition = ActorTM .)",
    "insertText": "TransformPositionNoScale(LocalPosition)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (WorldNormal = ActorTM .)",
    "insertText": "TransformVectorNoScale(LocalNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(SQ == ESQType::Sweep && CurData->CurrentLength > 0 && ensure(QueryGeom))"
  },
  {
    "label": "SweepQuery()",
    "kind": "Method",
    "detail": "Function (bHit =)",
    "insertText": "SweepQuery(*Geom, ActorTM, *QueryGeom, StartTM, CurData->Dir, CurData->CurrentLength, Distance, WorldPosition, WorldNormal, FaceIdx, FaceNormal, 0.f, bComputeMTD)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((SQ == ESQType::Overlap || (SQ == ESQType::Sweep && CurData->CurrentLength == 0)) && ensure(QueryGeom))"
  },
  {
    "label": "OverlapQuery()",
    "kind": "Method",
    "detail": "Function (FMTDInfo MTDInfo ; bHit =)",
    "insertText": "OverlapQuery(*Geom, ActorTM, *QueryGeom, StartTM, 0, &MTDInfo)"
  },
  {
    "label": "OverlapQuery()",
    "kind": "Method",
    "detail": "Function (WorldNormal = MTDInfo . Normal ; WorldPosition = MTDInfo . Position ; Distance = - MTDInfo . Penetration ; } } else { bHit =)",
    "insertText": "OverlapQuery(*Geom, ActorTM, *QueryGeom, StartTM, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bHit)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (bool bAcceptHit = true ; if)",
    "insertText": "constexpr(SQ == ESQType::Sweep && std::is_same_v<THitType, ChaosInterface::FSweepHit>)"
  },
  {
    "label": "GetCurrentHit()",
    "kind": "Method",
    "detail": "Function (const THitType* CurrentHit = HitBuffer .)",
    "insertText": "GetCurrentHit()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FReal CoLocationEpsilon = 1 e - 6 ; const FReal DistDelta =)",
    "insertText": "Abs(Distance - CurrentHit->Distance)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal OldDot =)",
    "insertText": "DotProduct(CurData->Dir, HitFaceNormal)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal NewDot =)",
    "insertText": "DotProduct(CurData->Dir, FaceNormal)"
  },
  {
    "label": "CVD_SET_SQ_SHAPE_REJECT_REASON()",
    "kind": "Method",
    "detail": "Function (HitFaceNormal = FaceNormal ; } else {)",
    "insertText": "CVD_SET_SQ_SHAPE_REJECT_REASON(EChaosVDSQVisitRejectReason::ColocatedHitHasWorseNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bAcceptHit = false ; } } })",
    "insertText": "if(bAcceptHit)"
  },
  {
    "label": "FillHitHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillHitHelper(Hit, Distance, WorldPosition, WorldNormal, FaceIdx, bComputeMTD)"
  },
  {
    "label": "PostFilter()",
    "kind": "Method",
    "detail": "Function (Hit . FaceNormal = HitFaceNormal ; } HitType = QueryFilterData . flags& FChaosQueryFlag::ePOSTFILTER ? QueryCallback .)",
    "insertText": "PostFilter(QueryFilterDataConcrete, Hit)"
  },
  {
    "label": "bBlocker()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bBlocker(HitType == ECollisionQueryHitType::Block || bAnyHit || HitBuffer.WantsSingleResult())"
  },
  {
    "label": "InsertHit()",
    "kind": "Method",
    "detail": "Function (HitBuffer .)",
    "insertText": "InsertHit(Hit, bBlocker)"
  },
  {
    "label": "CVD_FILL_HIT_DATA_HELPER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_FILL_HIT_DATA_HELPER(Hit, HitType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_DRAW bHitBufferIncreased = true ; # endif)",
    "insertText": "if(bBlocker && SQ != ESQType::Overlap)"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (CurData ->)",
    "insertText": "SetLength(FMath::Max((FReal)0., Distance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bContinue = false ; break ; } })",
    "insertText": "if(bAnyHit)"
  },
  {
    "label": "CVD_SET_SQ_SHAPE_REJECT_REASON()",
    "kind": "Method",
    "detail": "Function (bContinue = false ; break ; } } else {)",
    "insertText": "CVD_SET_SQ_SHAPE_REJECT_REASON(EChaosVDSQVisitRejectReason::PostFilter)"
  },
  {
    "label": "CVD_SET_SQ_SHAPE_REJECT_REASON()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "CVD_SET_SQ_SHAPE_REJECT_REASON(EChaosVDSQVisitRejectReason::NoHit)"
  },
  {
    "label": "CVD_SET_SQ_SHAPE_REJECT_REASON()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "CVD_SET_SQ_SHAPE_REJECT_REASON(EChaosVDSQVisitRejectReason::PreFilter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } # if CHAOS_DEBUG_DRAW)",
    "insertText": "if(DebugParams.IsDebugQuery() && ChaosSQDrawDebugVisitorQueries)"
  },
  {
    "label": "SQ()",
    "kind": "Method",
    "detail": "Function (DebugDraw<)",
    "insertText": "SQ(Instance, CurData, bAllShapesIgnoredInPrefilter, bHitBufferIncreased)"
  },
  {
    "label": "DebugDrawPayloadImpl()",
    "kind": "Method",
    "detail": "Function (} # endif return bContinue ; } # if CHAOS_DEBUG_DRAW void)",
    "insertText": "DebugDrawPayloadImpl(const TPayload& Payload, const bool bExternal, const bool bHit, decltype(&TPayload::DebugDraw))"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (Payload .)",
    "insertText": "DebugDraw(bExternal, bHit)"
  },
  {
    "label": "DebugDrawPayloadImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugDrawPayloadImpl(const TPayload& Payload, const bool bExternal, const bool bHit, ...)"
  },
  {
    "label": "DebugDrawPayload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugDrawPayload(const TPayload& Payload, const bool bExternal, const bool bHit)"
  },
  {
    "label": "DebugDrawPayloadImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawPayloadImpl(Payload, bExternal, bHit, 0)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (} template<ESQType SQ> void)",
    "insertText": "DebugDraw(const Chaos::TSpatialVisitorData<TPayload>& Instance, const Chaos::FQueryFastData* CurData, const bool bPrefiltered, const bool bHit)"
  },
  {
    "label": "StartPoint()",
    "kind": "Method",
    "detail": "Function (const FVector EndPoint =)",
    "insertText": "StartPoint(Dir * CurData->CurrentLength)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugDirectionalArrow(StartPoint, EndPoint, 5.f, bHit ? FColor::Red : FColor::Green)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SQ == ESQType::Overlap)"
  },
  {
    "label": "DrawShape()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "DrawShape(StartTM, QueryGeom, nullptr, bHit ? FColor::Red : FColor::Green, 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Instance.bHasBounds)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (Chaos::)",
    "insertText": "GetInstance().DrawDebugBox(Instance.Bounds.Center(), Instance.Bounds.Extents(), FQuat::Identity, bHit ? FColor(100, 50, 50) : FColor(50, 100, 50), false, -1.f, 0, 0.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bPrefiltered)"
  },
  {
    "label": "DebugDrawPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawPayload(Instance.Payload, DebugParams.bExternalQuery, bHit)"
  },
  {
    "label": "TBPVisitor()",
    "kind": "Method",
    "detail": "Function (} } # endif const FVector StartPoint = FVector::ZeroVector ; const FVector Dir = FVector::ZeroVector ; const FVector HalfExtents = FVector::ZeroVector ; FHitFlags OutputFlags ; bool bAnyHit ; const ChaosInterface::FQueryDebugParams DebugParams ; Chaos::FVec3 HitFaceNormal ; ChaosInterface::FSQHitBuffer<THitType>& HitBuffer ; const ChaosInterface::FQueryFilterData& QueryFilterData ; const FCollisionFilterData QueryFilterDataConcrete ; const QueryGeometryType* QueryGeom = nullptr ; ICollisionQueryFilterCallbackBase& QueryCallback ; const FTransform StartTM ; } ; template<QueryGeometryType,TPayload,THitType,bool bGTData = true> struct TBPVisitor : public Chaos::ISpatialVisitor<TPayload,Chaos::FReal> { using TGeometryType = std::conditional_t<bGTData,Chaos::FGeometryParticle,Chaos::FGeometryParticleHandle> ;)",
    "insertText": "TBPVisitor(const FTransform& InWorldTM, ChaosInterface::FSQHitBuffer<THitType>& InHitBuffer, const ChaosInterface::FQueryFilterData& InQueryFilterData, ICollisionQueryFilterCallbackBase& InQueryCallback, const QueryGeometryType& InQueryGeom, const ChaosInterface::FQueryDebugParams& InDebugParams) : HalfExtents(InQueryGeom.BoundingBox().Extents() * 0.5) , bAnyHit(false) , DebugParams(InDebugParams) , HitBuffer(InHitBuffer) , QueryFilterData(InQueryFilterData) , QueryFilterDataConcrete(ToUnrealFilterData(InQueryFilterData.data)) , QueryGeom(&InQueryGeom) , QueryCallback(InQueryCallback) , StartTM(InWorldTM)"
  },
  {
    "label": "TBPVisitor()",
    "kind": "Method",
    "detail": "Function (bAnyHit = QueryFilterData . flags& FPhysicsQueryFlag::eANY_HIT ; } ~)",
    "insertText": "TBPVisitor()"
  },
  {
    "label": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<FPerShapeData>& Shape = Shapes [ ShapeIndex ] ;)",
    "insertText": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER(EChaosVDSceneQueryVisitorType::BroadPhase, FTransform(GeometryParticle->GetR(), GeometryParticle->GetX()), Payload.UniqueIdx().Idx, ShapeIndex, CurData)"
  },
  {
    "label": "SweepHelper()",
    "kind": "Method",
    "detail": "Function (} } return bContinue ; } const FVector StartPoint = FVector::ZeroVector ; const FVector Dir = FVector::ZeroVector ; const FVector HalfExtents = FVector::ZeroVector ; FHitFlags OutputFlags ; bool bAnyHit ; const ChaosInterface::FQueryDebugParams DebugParams ; ChaosInterface::FSQHitBuffer<THitType>& HitBuffer ; const ChaosInterface::FQueryFilterData& QueryFilterData ; const FCollisionFilterData QueryFilterDataConcrete ; const QueryGeometryType* QueryGeom ; ICollisionQueryFilterCallbackBase& QueryCallback ; const FTransform StartTM ; } ; template<QueryGeomType,TSweepHit,TPayload> void)",
    "insertText": "SweepHelper(const QueryGeomType& QueryGeom, const Chaos::ISpatialAcceleration<TPayload, Chaos::FReal, 3>& SpatialAcceleration, const FTransform& StartTM, const FVector& Dir, const float DeltaMagnitude, ChaosInterface::FSQHitBuffer<TSweepHit>& HitBuffer, EHitFlags OutputFlags, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (using namespace Chaos ; using namespace ChaosInterface ; const FAABB3 Bounds = QueryGeom .)",
    "insertText": "BoundingBox().TransformedAABB(StartTM)"
  },
  {
    "label": "SweepVisitor()",
    "kind": "Method",
    "detail": "Function (const bool bSweepAsOverlap = DeltaMagnitude = = 0 ; TSQVisitor<QueryGeomType,TPayload,TSweepHit,std::is_same<TSweepHit,FSweepHit>::value>)",
    "insertText": "SweepVisitor(StartTM, Dir, HitBuffer, OutputFlags, QueryFilterData, QueryCallback, QueryGeom, DebugParams)"
  },
  {
    "label": "IncFlushCount()",
    "kind": "Method",
    "detail": "Function (HitBuffer .)",
    "insertText": "IncFlushCount()"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (SpatialAcceleration .)",
    "insertText": "Overlap(Bounds, SweepVisitor)"
  },
  {
    "label": "Extents()",
    "kind": "Method",
    "detail": "Function (} else { const FVector HalfExtents = Bounds .)",
    "insertText": "Extents()"
  },
  {
    "label": "Sweep()",
    "kind": "Method",
    "detail": "Function (SpatialAcceleration .)",
    "insertText": "Sweep(Bounds.GetCenter(), Dir, DeltaMagnitude, HalfExtents, SweepVisitor)"
  },
  {
    "label": "DecFlushCount()",
    "kind": "Method",
    "detail": "Function (} HitBuffer .)",
    "insertText": "DecFlushCount()"
  },
  {
    "label": "OverlapHelper()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType,TOverlapHit,TPayload> void)",
    "insertText": "OverlapHelper(const QueryGeomType& QueryGeom, const Chaos::ISpatialAcceleration<TPayload, Chaos::FReal, 3>& SpatialAcceleration, const FTransform& GeomPose, ChaosInterface::FSQHitBuffer<TOverlapHit>& HitBuffer, const ChaosInterface::FQueryFilterData& QueryFilterData, ICollisionQueryFilterCallbackBase& QueryCallback, const ChaosInterface::FQueryDebugParams& DebugParams)"
  },
  {
    "label": "CalculateTransformedBounds()",
    "kind": "Method",
    "detail": "Function (using namespace Chaos ; using namespace ChaosInterface ; const FAABB3 Bounds = QueryGeom .)",
    "insertText": "CalculateTransformedBounds(GeomPose)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSkipNarrowPhase = QueryFilterData . flags& FPhysicsQueryFlag::eSKIPNARROWPHASE ; bool bGTData = std::is_same<TOverlapHit,FOverlapHit>::value ;)",
    "insertText": "if(bSkipNarrowPhase)"
  },
  {
    "label": "OverlapVisitor()",
    "kind": "Method",
    "detail": "Function (TBPVisitor<QueryGeomType,TPayload,TOverlapHit,bGTData>)",
    "insertText": "OverlapVisitor(GeomPose, HitBuffer, QueryFilterData, QueryCallback, QueryGeom, DebugParams)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (SpatialAcceleration .)",
    "insertText": "Overlap(Bounds, OverlapVisitor)"
  }
]