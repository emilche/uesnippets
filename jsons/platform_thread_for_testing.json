[
  {
    "label": "PlatformThreadForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlatformThreadForTesting"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "ThreadMain()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_THREADING_PLATFORM_THREAD_FOR_TESTING_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_THREADING_PLATFORM_THREAD_FOR_TESTING_H_ # include<stddef . h> # include<iosfwd> # include \" base / allocator / partition_allocator / partition_alloc_base / migration_adapter . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / threading / platform_thread . h \" # include \" build / build_config . h \" namespace partition_alloc::internal::base { class PlatformThreadForTesting : public PlatformThread { public : class Delegate { public : void)",
    "insertText": "ThreadMain()"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "PlatformThreadForTesting()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PlatformThreadForTesting()"
  },
  {
    "label": "PlatformThreadForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformThreadForTesting(const PlatformThreadForTesting&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PlatformThreadForTesting&)",
    "insertText": "operator(const PlatformThreadForTesting&)"
  },
  {
    "label": "YieldCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YieldCurrentThread()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(size_t stack_size, Delegate* delegate, PlatformThreadHandle* thread_handle)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join(PlatformThreadHandle thread_handle)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) static size_t GetDefaultThreadStackSize()"
  }
]