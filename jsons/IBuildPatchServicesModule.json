[
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IBuildPatchServicesModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildPatchServicesModule"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Interfaces / IBuildInstaller . h \" # include \" Interfaces / IBuildStatistics . h \" # include \" Interfaces / IBuildInstallStreamer . h \" # include \" Interfaces / IPatchDataEnumeration . h \" # include \" BuildPatchSettings . h \" class IAnalyticsProvider ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FBuildPatchInstallerDelegate, const IBuildInstallerRef&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FBuildPatchBoolManifestDelegate, bool, IBuildManifestRef)"
  },
  {
    "label": "IBuildPatchServicesModule()",
    "kind": "Method",
    "detail": "Function (namespace ECompactifyMode { enum Type { Preview,Full } ; } class IBuildPatchServicesModule : public IModuleInterface { public : ~)",
    "insertText": "IBuildPatchServicesModule()"
  },
  {
    "label": "CreateBuildInstallStreamer()",
    "kind": "Method",
    "detail": "Function (} IBuildInstallStreamerRef)",
    "insertText": "CreateBuildInstallStreamer(BuildPatchServices::FBuildInstallStreamerConfiguration Configuration)"
  },
  {
    "label": "CreateBuildInstaller()",
    "kind": "Method",
    "detail": "Function (IBuildInstallerRef)",
    "insertText": "CreateBuildInstaller(BuildPatchServices::FBuildInstallerConfiguration Configuration, FBuildPatchInstallerDelegate OnComplete)"
  },
  {
    "label": "CreateBuildInstallerSharedContext()",
    "kind": "Method",
    "detail": "Function (IBuildInstallerSharedContextRef)",
    "insertText": "CreateBuildInstallerSharedContext(const TCHAR* DebugName)"
  },
  {
    "label": "CreateBuildStatistics()",
    "kind": "Method",
    "detail": "Function (BuildPatchServices::IBuildStatisticsRef)",
    "insertText": "CreateBuildStatistics(const IBuildInstallerRef& Installer)"
  },
  {
    "label": "CreatePatchDataEnumeration()",
    "kind": "Method",
    "detail": "Function (BuildPatchServices::IPatchDataEnumerationRef)",
    "insertText": "CreatePatchDataEnumeration(BuildPatchServices::FPatchDataEnumerationConfiguration Configuration)"
  },
  {
    "label": "LoadManifestFromFile()",
    "kind": "Method",
    "detail": "Function (IBuildManifestPtr)",
    "insertText": "LoadManifestFromFile(const FString& Filename)"
  },
  {
    "label": "MakeManifestFromData()",
    "kind": "Method",
    "detail": "Function (IBuildManifestPtr)",
    "insertText": "MakeManifestFromData(const TArray<uint8>& ManifestData)"
  },
  {
    "label": "SaveManifestToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveManifestToFile(const FString& Filename, IBuildManifestRef Manifest)"
  },
  {
    "label": "GetInstalledPrereqIds()",
    "kind": "Method",
    "detail": "Function (TSet<FString>)",
    "insertText": "GetInstalledPrereqIds()"
  },
  {
    "label": "GetInstallers()",
    "kind": "Method",
    "detail": "Function (const TArray<IBuildInstallerRef>&)",
    "insertText": "GetInstallers()"
  },
  {
    "label": "SetStagingDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStagingDirectory(const FString& StagingDir)"
  },
  {
    "label": "SetCloudDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCloudDirectory(FString CloudDir)"
  },
  {
    "label": "SetCloudDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCloudDirectories(TArray<FString> CloudDirs)"
  },
  {
    "label": "SetBackupDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackupDirectory(const FString& BackupDir)"
  },
  {
    "label": "SetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyticsProvider(TSharedPtr< IAnalyticsProvider > AnalyticsProvider)"
  },
  {
    "label": "RegisterAppInstallation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAppInstallation(IBuildManifestRef AppManifest, const FString AppInstallDirectory)"
  },
  {
    "label": "UnregisterAppInstallation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterAppInstallation(const FString AppInstallDirectory)"
  },
  {
    "label": "CancelAllInstallers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllInstallers(bool WaitForThreads)"
  },
  {
    "label": "ChunkBuildDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChunkBuildDirectory(const BuildPatchServices::FChunkBuildConfiguration& Configuration)"
  },
  {
    "label": "OptimiseChunkDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OptimiseChunkDelta(const BuildPatchServices::FChunkDeltaOptimiserConfiguration& Configuration)"
  },
  {
    "label": "CompactifyCloudDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompactifyCloudDirectory(const BuildPatchServices::FCompactifyConfiguration& Configuration)"
  },
  {
    "label": "EnumeratePatchData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumeratePatchData(const BuildPatchServices::FPatchDataEnumerationConfiguration& Configuration)"
  },
  {
    "label": "VerifyChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyChunkData(const FString& SearchPath, const FString& OutputFile)"
  },
  {
    "label": "PackageChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PackageChunkData(const BuildPatchServices::FPackageChunksConfiguration& Configuration)"
  },
  {
    "label": "MergeManifests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeManifests(const FString& ManifestFilePathA, const FString& ManifestFilePathB, const FString& ManifestFilePathC, const FString& NewVersionString, const FString& SelectionDetailFilePath)"
  },
  {
    "label": "DiffManifests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DiffManifests(const BuildPatchServices::FDiffManifestsConfiguration& Configuration)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IBuildPatchServicesModule, FSimpleEvent) virtual FSimpleEvent& OnStartBuildInstall()"
  },
  {
    "label": "InstallerConfiguration()",
    "kind": "Method",
    "detail": "Function (BuildPatchServices::FBuildInstallerConfiguration)",
    "insertText": "InstallerConfiguration({ BuildPatchServices::FInstallerAction::MakeInstallOrUpdate(CurrentManifest, InstallManifest.ToSharedRef(), InstallTags) })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (FBuildPatchInstallerDelegate CompleteDelegate =)",
    "insertText": "CreateLambda([OnCompleteDelegate, InstallManifest](const IBuildInstallerRef& Installer) { OnCompleteDelegate.ExecuteIfBound(Installer->CompletedSuccessfully(), InstallManifest.ToSharedRef()); })"
  },
  {
    "label": "CreateBuildInstaller()",
    "kind": "Method",
    "detail": "Function (IBuildInstallerRef Installer =)",
    "insertText": "CreateBuildInstaller(InstallerConfiguration, CompleteDelegate)"
  },
  {
    "label": "StartInstallation()",
    "kind": "Method",
    "detail": "Function (Installer ->)",
    "insertText": "StartInstallation()"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (FBuildPatchInstallerDelegate CompleteDelegate =)",
    "insertText": "CreateLambda([Configuration, OnCompleteDelegate](const IBuildInstallerRef& Installer) { OnCompleteDelegate.ExecuteIfBound(Installer->CompletedSuccessfully(), Configuration.InstallManifest); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<BuildPatchServices::FInstallerAction> Actions ;)",
    "insertText": "if(Configuration.bIsRepair)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Actions .)",
    "insertText": "Add(BuildPatchServices::FInstallerAction::MakeRepair(Configuration.InstallManifest, Configuration.InstallTags))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { Actions .)",
    "insertText": "Add(BuildPatchServices::FInstallerAction::MakeInstallOrUpdate(Configuration.CurrentManifest, Configuration.InstallManifest, Configuration.InstallTags))"
  },
  {
    "label": "BuildInstallerConfiguration()",
    "kind": "Method",
    "detail": "Function (} BuildPatchServices::FBuildInstallerConfiguration)",
    "insertText": "BuildInstallerConfiguration(MoveTemp(Actions))"
  },
  {
    "label": "CreateBuildInstaller()",
    "kind": "Method",
    "detail": "Function (BuildInstallerConfiguration . InstallDirectory = Configuration . InstallDirectory ; BuildInstallerConfiguration . StagingDirectory = Configuration . StagingDirectory ; BuildInstallerConfiguration . BackupDirectory = Configuration . BackupDirectory ; BuildInstallerConfiguration . ChunkDatabaseFiles = Configuration . ChunkDatabaseFiles ; BuildInstallerConfiguration . CloudDirectories = Configuration . CloudDirectories ; BuildInstallerConfiguration . InstallMode = Configuration . InstallMode ; BuildInstallerConfiguration . VerifyMode = Configuration . VerifyMode ; BuildInstallerConfiguration . DeltaPolicy = Configuration . DeltaPolicy ; BuildInstallerConfiguration . bRunRequiredPrereqs = Configuration . bRunRequiredPrereqs ; BuildInstallerConfiguration . bAllowConcurrentExecution = Configuration . bAllowConcurrentExecution ; IBuildInstallerRef Installer =)",
    "insertText": "CreateBuildInstaller(BuildInstallerConfiguration, CompleteDelegate)"
  }
]