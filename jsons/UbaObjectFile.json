[
  {
    "label": "FileAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileAccessor"
  },
  {
    "label": "ExportInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExportInfo"
  },
  {
    "label": "ObjectFileType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObjectFileType"
  },
  {
    "label": "ObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectFile"
  },
  {
    "label": "AnsiStringView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnsiStringView"
  },
  {
    "label": "SymbolFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolFile"
  },
  {
    "label": "OpenAndParse()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaLogger . h \" # include \" UbaStringBuffer . h \" namespace uba { class FileAccessor ; using UnorderedSymbols = UnorderedSet<std::string> ; struct ExportInfo { std::string extra ; u32 index = 0 ; } ; using UnorderedExports = UnorderedMap<std::string,ExportInfo> ; enum ObjectFileType : u8 { ObjectFileType_Unknown,ObjectFileType_Coff,ObjectFileType_Elf,ObjectFileType_LLVMIR,} ; class ObjectFile { public : ObjectFile*)",
    "insertText": "OpenAndParse(Logger& logger, const tchar* hint)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (ObjectFile*)",
    "insertText": "Parse(Logger& logger, u8* data, u64 dataSize, const tchar* hint)"
  },
  {
    "label": "CopyMemoryAndClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyMemoryAndClose()"
  },
  {
    "label": "StripExports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StripExports(Logger& logger)"
  },
  {
    "label": "WriteImportsAndExports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteImportsAndExports(Logger& logger, MemoryBlock& memoryBlock)"
  },
  {
    "label": "WriteImportsAndExports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteImportsAndExports(Logger& logger, const tchar* exportsFilename)"
  },
  {
    "label": "GetLibName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetLibName()"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetFileName()"
  },
  {
    "label": "GetImports()",
    "kind": "Method",
    "detail": "Function (const UnorderedSymbols&)",
    "insertText": "GetImports()"
  },
  {
    "label": "GetExports()",
    "kind": "Method",
    "detail": "Function (const UnorderedExports&)",
    "insertText": "GetExports()"
  },
  {
    "label": "GetPotentialDuplicates()",
    "kind": "Method",
    "detail": "Function (const UnorderedSymbols&)",
    "insertText": "GetPotentialDuplicates()"
  },
  {
    "label": "CreateExtraFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateExtraFile(Logger& logger, const StringView& extraObjFilename, const StringView& moduleName, const StringView& platform, const UnorderedSymbols& allExternalImports, const UnorderedSymbols& allInternalImports, const UnorderedExports& allExports, bool includeExportsInFile)"
  },
  {
    "label": "ObjectFile()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ObjectFile()"
  },
  {
    "label": "RemoveExportedSymbol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExportedSymbol(const char* symbol)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (u8*)",
    "insertText": "GetData()"
  },
  {
    "label": "StripExports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StripExports(Logger& logger, u8* newData, const UnorderedSymbols& allExternalImports)"
  },
  {
    "label": "CreateDynamicListFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDynamicListFile(Logger& logger, MemoryBlock& memoryBlock, const UnorderedSymbols& allExternalImports, const UnorderedSymbols& allInternalImports, const UnorderedExports& allExports, bool includeExportsInFile)"
  },
  {
    "label": "CreateEmdFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateEmdFile(Logger& logger, MemoryBlock& memoryBlock, const StringView& moduleName, const UnorderedSymbols& allExternalImports, const UnorderedSymbols& allInternalImports, const UnorderedExports& allExports, bool includeExportsInFile)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (FileAccessor* m_file = nullptr ; u8* m_data = nullptr ; u64 m_dataSize = 0 ; bool m_ownsData = false ; ObjectFileType m_type ; UnorderedSymbols m_imports ; UnorderedExports m_exports ; UnorderedSymbols m_potentialDuplicates ; public : struct AnsiStringView { const char* strBegin ; const char* strEnd ; u32)",
    "insertText": "Length()"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartsWith(const char* str, u32 strLen)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const char* str, u32 strLen)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const char* it = strBegin ; const char* itEnd = strEnd - strLen + 1 ;)",
    "insertText": "while(it < itEnd)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (+ + it ; } return false ; } bool)",
    "insertText": "Equals(const char* str, u32 strLen)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string&)",
    "insertText": "ToString(std::string& out)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "assign(strBegin, strEnd)"
  }
]