[
  {
    "label": "FrameEncryptorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameEncryptorInterface"
  },
  {
    "label": "RateLimiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateLimiter"
  },
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "RTPSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSender"
  },
  {
    "label": "Transport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transport"
  },
  {
    "label": "VideoBitrateAllocationObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocationObserver"
  },
  {
    "label": "RtpRtcpInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpRtcpInterface"
  },
  {
    "label": "Configuration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Configuration"
  },
  {
    "label": "SenderReportStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SenderReportStats"
  },
  {
    "label": "NonSenderRttStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NonSenderRttStats"
  },
  {
    "label": "Configuration()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_RTCP_INTERFACE_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_RTCP_INTERFACE_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / frame_transformer_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" modules / rtp_rtcp / include / receive_statistics . h \" # include \" modules / rtp_rtcp / include / report_block_data . h \" # include \" modules / rtp_rtcp / include / rtp_packet_sender . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / rtp_rtcp / source / rtp_sequence_number_map . h \" # include \" modules / rtp_rtcp / source / video_fec_generator . h \" # include \" system_wrappers / include / ntp_time . h \" namespace webrtc { class FrameEncryptorInterface ; class RateLimiter ; class RtcEventLog ; class RTPSender ; class Transport ; class VideoBitrateAllocationObserver ; class RtpRtcpInterface : public RtcpFeedbackSenderInterface { public : struct Configuration {)",
    "insertText": "Configuration()"
  },
  {
    "label": "Configuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Configuration(Configuration&& rhs)"
  },
  {
    "label": "Configuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Configuration(const Configuration&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Configuration&)",
    "insertText": "operator(const Configuration&)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (bool audio = false ; bool receiver_only = false ; Clock* clock = nullptr ; ReceiveStatisticsProvider* receive_statistics = nullptr ; Transport* outgoing_transport = nullptr ; RtcpIntraFrameObserver* intra_frame_callback = nullptr ; RtcpLossNotificationObserver* rtcp_loss_notification_observer = nullptr ; RtcpBandwidthObserver* bandwidth_callback = nullptr ; NetworkStateEstimateObserver* network_state_estimate_observer = nullptr ; TransportFeedbackObserver* transport_feedback_callback = nullptr ; VideoBitrateAllocationObserver* bitrate_allocation_observer = nullptr ; RtcpRttStats* rtt_stats = nullptr ; RtcpPacketTypeCounterObserver* rtcp_packet_type_counter_observer = nullptr ; RtcpCnameCallback* rtcp_cname_callback = nullptr ; ReportBlockDataObserver* report_block_data_observer = nullptr ; RtpPacketSender* paced_sender = nullptr ; VideoFecGenerator* fec_generator = nullptr ; BitrateStatisticsObserver* send_bitrate_observer = nullptr ; SendSideDelayObserver* send_side_delay_observer = nullptr ; RtcEventLog* event_log = nullptr ; SendPacketObserver* send_packet_observer = nullptr ; RateLimiter* retransmission_rate_limiter = nullptr ; StreamDataCountersCallback* rtp_stats_callback = nullptr ; int rtcp_report_interval_ms = 0 ; bool populate_network2_timestamp = false ; rtc::scoped_refptr<FrameTransformerInterface> frame_transformer ; FrameEncryptorInterface* frame_encryptor = nullptr ; bool require_frame_encryption = false ; bool extmap_allow_mixed = false ; bool always_send_mid_and_rid = false ; const FieldTrialsView* field_trials = nullptr ; uint32_t local_media_ssrc = 0 ; absl::optional<uint32_t> rtx_send_ssrc ; bool need_rtp_packet_infos = false ; bool enable_rtx_padding_prioritization = true ; bool non_sender_rtt_measurement = false ; std::string rid ; } ; struct SenderReportStats { NtpTime last_arrival_timestamp ; NtpTime last_remote_timestamp ; uint32_t packets_sent ; uint64_t bytes_sent ; uint64_t reports_count ; } ; struct NonSenderRttStats { absl::optional<TimeDelta> round_trip_time ; TimeDelta total_round_trip_time =)",
    "insertText": "Zero()"
  },
  {
    "label": "IncomingRtcpPacket()",
    "kind": "Method",
    "detail": "Function (int round_trip_time_measurements = 0 ; } ; void)",
    "insertText": "IncomingRtcpPacket(const uint8_t* incoming_packet, size_t incoming_packet_length)"
  },
  {
    "label": "SetRemoteSSRC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteSSRC(uint32_t ssrc)"
  },
  {
    "label": "SetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSsrc(uint32_t ssrc)"
  },
  {
    "label": "SetMaxRtpPacketSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxRtpPacketSize(size_t size)"
  },
  {
    "label": "MaxRtpPacketSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxRtpPacketSize()"
  },
  {
    "label": "RegisterSendPayloadFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSendPayloadFrequency(int payload_type, int payload_frequency)"
  },
  {
    "label": "DeRegisterSendPayload()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "DeRegisterSendPayload(int8_t payload_type)"
  },
  {
    "label": "SetExtmapAllowMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtmapAllowMixed(bool extmap_allow_mixed)"
  },
  {
    "label": "RegisterRtpHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterRtpHeaderExtension(absl::string_view uri, int id)"
  },
  {
    "label": "DeregisterSendRtpHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeregisterSendRtpHeaderExtension(absl::string_view uri)"
  },
  {
    "label": "SupportsPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPadding()"
  },
  {
    "label": "SupportsRtxPayloadPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsRtxPayloadPadding()"
  },
  {
    "label": "StartTimestamp()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "StartTimestamp()"
  },
  {
    "label": "SetStartTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartTimestamp(uint32_t timestamp)"
  },
  {
    "label": "SequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "SequenceNumber()"
  },
  {
    "label": "SetSequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequenceNumber(uint16_t seq)"
  },
  {
    "label": "SetRtpState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpState(const RtpState& rtp_state)"
  },
  {
    "label": "SetRtxState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtxState(const RtpState& rtp_state)"
  },
  {
    "label": "GetRtpState()",
    "kind": "Method",
    "detail": "Function (RtpState)",
    "insertText": "GetRtpState()"
  },
  {
    "label": "GetRtxState()",
    "kind": "Method",
    "detail": "Function (RtpState)",
    "insertText": "GetRtxState()"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "SSRC()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "SSRC()"
  },
  {
    "label": "SetMid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMid(absl::string_view mid)"
  },
  {
    "label": "SetCsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCsrcs(const std::vector<uint32_t>& csrcs)"
  },
  {
    "label": "SetRtxSendStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtxSendStatus(int modes)"
  },
  {
    "label": "RtxSendStatus()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RtxSendStatus()"
  },
  {
    "label": "RtxSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "RtxSsrc()"
  },
  {
    "label": "SetRtxSendPayloadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtxSendPayloadType(int payload_type, int associated_payload_type)"
  },
  {
    "label": "FlexfecSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "FlexfecSsrc()"
  },
  {
    "label": "SetSendingStatus()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSendingStatus(bool sending)"
  },
  {
    "label": "Sending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Sending()"
  },
  {
    "label": "SetSendingMediaStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendingMediaStatus(bool sending)"
  },
  {
    "label": "SendingMedia()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendingMedia()"
  },
  {
    "label": "IsAudioConfigured()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioConfigured()"
  },
  {
    "label": "SetAsPartOfAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsPartOfAllocation(bool part_of_allocation)"
  },
  {
    "label": "GetSendRates()",
    "kind": "Method",
    "detail": "Function (RtpSendRates)",
    "insertText": "GetSendRates()"
  },
  {
    "label": "RtpSender()",
    "kind": "Method",
    "detail": "Function (RTPSender*)",
    "insertText": "RtpSender()"
  },
  {
    "label": "OnSendingRtpFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSendingRtpFrame(uint32_t timestamp, int64_t capture_time_ms, int payload_type, bool force_sender_report)"
  },
  {
    "label": "TrySendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrySendPacket(RtpPacketToSend* packet, const PacedPacketInfo& pacing_info)"
  },
  {
    "label": "SetFecProtectionParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecProtectionParams(const FecProtectionParams& delta_params, const FecProtectionParams& key_params)"
  },
  {
    "label": "FetchFecPackets()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "FetchFecPackets()"
  },
  {
    "label": "OnAbortedRetransmissions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbortedRetransmissions(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "OnPacketsAcknowledged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketsAcknowledged(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "GeneratePadding()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "GeneratePadding(size_t target_size_bytes)"
  },
  {
    "label": "GetSentRtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSequenceNumberMap::Info>)",
    "insertText": "GetSentRtpPacketInfos(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "ExpectedPerPacketOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ExpectedPerPacketOverhead()"
  },
  {
    "label": "OnPacketSendingThreadSwitched()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSendingThreadSwitched()"
  },
  {
    "label": "RTCP()",
    "kind": "Method",
    "detail": "Function (RtcpMode)",
    "insertText": "RTCP()"
  },
  {
    "label": "SetRTCPStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRTCPStatus(RtcpMode method)"
  },
  {
    "label": "SetCNAME()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetCNAME(absl::string_view cname)"
  },
  {
    "label": "RemoteNTP()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RemoteNTP(uint32_t* received_ntp_secs, uint32_t* received_ntp_frac, uint32_t* rtcp_arrival_time_secs, uint32_t* rtcp_arrival_time_frac, uint32_t* rtcp_timestamp)"
  },
  {
    "label": "RTT()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RTT(uint32_t remote_ssrc, int64_t* rtt, int64_t* avg_rtt, int64_t* min_rtt, int64_t* max_rtt)"
  },
  {
    "label": "ExpectedRetransmissionTimeMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ExpectedRetransmissionTimeMs()"
  },
  {
    "label": "SendRTCP()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendRTCP(RTCPPacketType rtcp_packet_type)"
  },
  {
    "label": "GetSendStreamDataCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSendStreamDataCounters(StreamDataCounters* rtp_counters, StreamDataCounters* rtx_counters)"
  },
  {
    "label": "GetLatestReportBlockData()",
    "kind": "Method",
    "detail": "Function (std::vector<ReportBlockData>)",
    "insertText": "GetLatestReportBlockData()"
  },
  {
    "label": "GetSenderReportStats()",
    "kind": "Method",
    "detail": "Function (absl::optional<SenderReportStats>)",
    "insertText": "GetSenderReportStats()"
  },
  {
    "label": "GetNonSenderRttStats()",
    "kind": "Method",
    "detail": "Function (absl::optional<NonSenderRttStats>)",
    "insertText": "GetNonSenderRttStats()"
  },
  {
    "label": "SetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemb(int64_t bitrate_bps, std::vector<uint32_t> ssrcs)"
  },
  {
    "label": "UnsetRemb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetRemb()"
  },
  {
    "label": "SendNACK()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendNACK(const uint16_t* nack_list, uint16_t size)"
  },
  {
    "label": "SendNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNack(const std::vector<uint16_t>& sequence_numbers)"
  },
  {
    "label": "SetStorePacketsStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStorePacketsStatus(bool enable, uint16_t numberToStore)"
  },
  {
    "label": "SetVideoBitrateAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoBitrateAllocation(const VideoBitrateAllocation& bitrate)"
  },
  {
    "label": "SendPictureLossIndication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPictureLossIndication()"
  },
  {
    "label": "SendRTCP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRTCP(kRtcpPli)"
  },
  {
    "label": "SendFullIntraRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendFullIntraRequest()"
  },
  {
    "label": "SendRTCP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRTCP(kRtcpFir)"
  },
  {
    "label": "SendLossNotification()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "SendLossNotification(uint16_t last_decoded_seq_num, uint16_t last_received_seq_num, bool decodability_flag, bool buffering_allowed)"
  }
]