[
  {
    "label": "LevelSetMorphing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetMorphing"
  },
  {
    "label": "Morph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Morph"
  },
  {
    "label": "ThreadingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ThreadingMode"
  },
  {
    "label": "LevelSetMorphing()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVEL_SET_MORPH_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVEL_SET_MORPH_HAS_BEEN_INCLUDED # include \" LevelSetTracker . h \" # include \" Interpolation . h \" # include<openvdb / math / FiniteDifference . h> # include<functional> # include<limits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT,InterruptT = util::NullInterrupter> class LevelSetMorphing { public : using GridType = GridT ; using TreeType = GridT::TreeType ; using TrackerT = LevelSetTracker<GridT,InterruptT> ; using LeafRange = TrackerT::LeafRange ; using LeafType = TrackerT::LeafType ; using BufferType = TrackerT::BufferType ; using ValueType = TrackerT::ValueType ;)",
    "insertText": "LevelSetMorphing(GridT& sourceGrid, const GridT& targetGrid, InterruptT* interrupt = nullptr) : mTracker(sourceGrid, interrupt) , mTarget(&targetGrid) , mMask(nullptr) , mSpatialScheme(math::HJWENO5_BIAS) , mTemporalScheme(math::TVD_RK2) , mMinMask(0) , mDeltaMask(1) , mInvertMask(false)"
  },
  {
    "label": "LevelSetMorphing()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LevelSetMorphing()"
  },
  {
    "label": "setTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTarget(const GridT& targetGrid)"
  },
  {
    "label": "setAlphaMask()",
    "kind": "Method",
    "detail": "Function (mTarget =& targetGrid ; } void)",
    "insertText": "setAlphaMask(const GridT& maskGrid)"
  },
  {
    "label": "getSpatialScheme()",
    "kind": "Method",
    "detail": "Function (mMask =& maskGrid ; } math::BiasedGradientScheme)",
    "insertText": "getSpatialScheme()"
  },
  {
    "label": "getTemporalScheme()",
    "kind": "Method",
    "detail": "Function (mSpatialScheme = scheme ; } math::TemporalIntegrationScheme)",
    "insertText": "getTemporalScheme()"
  },
  {
    "label": "getTrackerSpatialScheme()",
    "kind": "Method",
    "detail": "Function (mTemporalScheme = scheme ; } math::BiasedGradientScheme)",
    "insertText": "getTrackerSpatialScheme()"
  },
  {
    "label": "setTrackerSpatialScheme()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTrackerSpatialScheme(math::BiasedGradientScheme scheme)"
  },
  {
    "label": "setSpatialScheme()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setSpatialScheme(scheme)"
  },
  {
    "label": "getTrackerTemporalScheme()",
    "kind": "Method",
    "detail": "Function (} math::TemporalIntegrationScheme)",
    "insertText": "getTrackerTemporalScheme()"
  },
  {
    "label": "setTrackerTemporalScheme()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTrackerTemporalScheme(math::TemporalIntegrationScheme scheme)"
  },
  {
    "label": "setTemporalScheme()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setTemporalScheme(scheme)"
  },
  {
    "label": "getNormCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getNormCount()"
  },
  {
    "label": "setNormCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNormCount(int n)"
  },
  {
    "label": "setNormCount()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setNormCount(n)"
  },
  {
    "label": "getGrainSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getGrainSize()"
  },
  {
    "label": "setGrainSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setGrainSize(int grainsize)"
  },
  {
    "label": "setGrainSize()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "setGrainSize(grainsize)"
  },
  {
    "label": "minMask()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "minMask()"
  },
  {
    "label": "isMaskInverted()",
    "kind": "Method",
    "detail": "Function (mMinMask = min ; mDeltaMask = max - min ; } bool)",
    "insertText": "isMaskInverted()"
  },
  {
    "label": "advect()",
    "kind": "Method",
    "detail": "Function (mInvertMask = invert ; } size_t)",
    "insertText": "advect(ValueType time0, ValueType time1)"
  },
  {
    "label": "LevelSetMorphing()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LevelSetMorphing(const LevelSetMorphing&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LevelSetMorphing&)",
    "insertText": "operator(const LevelSetMorphing&)"
  },
  {
    "label": "advect1()",
    "kind": "Method",
    "detail": "Function (template<math::BiasedGradientScheme SpatialScheme> size_t)",
    "insertText": "advect1(ValueType time0, ValueType time1)"
  },
  {
    "label": "advect2()",
    "kind": "Method",
    "detail": "Function (template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> size_t)",
    "insertText": "advect2(ValueType time0, ValueType time1)"
  },
  {
    "label": "advect3()",
    "kind": "Method",
    "detail": "Function (template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme,MapType> size_t)",
    "insertText": "advect3(ValueType time0, ValueType time1)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (TrackerT mTracker ; const GridT* mTarget,* mMask ; math::BiasedGradientScheme mSpatialScheme ; math::TemporalIntegrationScheme mTemporalScheme ; ValueType mMinMask,mDeltaMask ; bool mInvertMask ; template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> struct Morph {)",
    "insertText": "Morph(LevelSetMorphing<GridT, InterruptT>& parent)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Morph(const Morph& other)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Morph(Morph& other, tbb::split)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Morph()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const LeafRange& r)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(const Morph& other)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (mMaxAbsS =)",
    "insertText": "Max(mMaxAbsS, other.mMaxAbsS)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} enum ThreadingMode { PARALLEL_FOR,PARALLEL_REDUCE } ; void)",
    "insertText": "cook(ThreadingMode mode, size_t swapBuffer = 0)"
  },
  {
    "label": "sampleSpeed()",
    "kind": "Method",
    "detail": "Function (GridT::ValueType)",
    "insertText": "sampleSpeed(ValueType time0, ValueType time1, Index speedBuffer)"
  },
  {
    "label": "sampleXformedSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sampleXformedSpeed(const LeafRange& r, Index speedBuffer)"
  },
  {
    "label": "sampleAlignedSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sampleAlignedSpeed(const LeafRange& r, Index speedBuffer)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (template<int Nominator,int Denominator> void)",
    "insertText": "euler(const LeafRange&, ValueType, Index, Index, Index)"
  },
  {
    "label": "euler01()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "euler01(const LeafRange& r, ValueType t, Index s)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r,t,0,1,s)"
  },
  {
    "label": "euler12()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler12(const LeafRange& r, ValueType t)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, t, 1, 1, 2)"
  },
  {
    "label": "euler34()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler34(const LeafRange& r, ValueType t)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, t, 1, 2, 3)"
  },
  {
    "label": "euler13()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler13(const LeafRange& r, ValueType t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} using FuncType = std::function<)",
    "insertText": "void(Morph*, const LeafRange&)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const math::Transform& trans = mTracker .)",
    "insertText": "grid().transform()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(trans.mapType() == math::UniformScaleTranslateMap::mapType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(trans.mapType() == math::UnitaryMap::mapType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(trans.mapType() == math::TranslationMap::mapType())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OPENVDB_THROW(ValueError, \"MapType not supported!\")"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Morph<MapT,SpatialScheme,TemporalScheme>)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "Morph(LevelSetMorphing<GridT, InterruptT>& parent) : mParent(&parent) , mMinAbsS(ValueType(1e-6)) , mMap(parent.mTracker.grid().transform().template constMap<MapT>().get()) , mTask(nullptr)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "Morph(const Morph& other) : mParent(other.mParent) , mMinAbsS(other.mMinAbsS) , mMaxAbsS(other.mMaxAbsS) , mMap(other.mMap) , mTask(other.mTask)"
  },
  {
    "label": "Morph()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "Morph(Morph& other, tbb::split) : mParent(other.mParent) , mMinAbsS(other.mMinAbsS) , mMaxAbsS(other.mMaxAbsS) , mMap(other.mMap) , mTask(other.mTask)"
  },
  {
    "label": "auxBuffers()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ; const Index)",
    "insertText": "auxBuffers(TemporalScheme == math::TVD_RK3 ? 2 : 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t countCFL = 0 ;)",
    "insertText": "while(time0 < time1 && mParent->mTracker.checkInterrupter())"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (mParent -> mTracker .)",
    "insertText": "leafs().rebuildAuxBuffers(auxBuffers)"
  },
  {
    "label": "sampleSpeed()",
    "kind": "Method",
    "detail": "Function (const ValueType dt = this ->)",
    "insertText": "sampleSpeed(time0, time1, auxBuffers)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "switch(TemporalScheme)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(PARALLEL_FOR, 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (break ; case math::TVD_RK2 : mTask =)",
    "insertText": "bind(&Morph::euler01, ph::_1, ph::_2, dt, 2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Morph::euler12, ph::_1, ph::_2, dt)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (break ; case math::TVD_RK3 : mTask =)",
    "insertText": "bind(&Morph::euler01, ph::_1, ph::_2, dt, 3)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Morph::euler34, ph::_1, ph::_2, dt)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(PARALLEL_FOR, 2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Morph::euler13, ph::_1, ph::_2, dt)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (break ; case math::UNKNOWN_TIS : default :)",
    "insertText": "OPENVDB_THROW(ValueError, \"Temporal integration scheme not supported!\")"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (} OPENVDB_NO_UNREACHABLE_CODE_WARNING_END time0 + = dt ; + + countCFL ; mParent -> mTracker .)",
    "insertText": "leafs().removeAuxBuffers()"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (mParent -> mTracker .)",
    "insertText": "track()"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ; mMaxAbsS = mMinAbsS ; const size_t leafCount = mParent -> mTracker .)",
    "insertText": "leafs().leafCount()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Morph::sampleAlignedSpeed, ph::_1, ph::_2, speedBuffer)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} else { mTask =)",
    "insertText": "bind(&Morph::sampleXformedSpeed, ph::_1, ph::_2, speedBuffer)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "cook(PARALLEL_REDUCE)"
  },
  {
    "label": "CFL()",
    "kind": "Method",
    "detail": "Function (const ValueType)",
    "insertText": "CFL(TemporalScheme == math::TVD_RK1 ? ValueType(0.3) : TemporalScheme == math::TVD_RK2 ? ValueType(0.9) : ValueType(1.0))/math::Sqrt(ValueType(3.0))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const ValueType dt =)",
    "insertText": "Abs(time1 - time0), dx = mParent->mTracker.voxelSize()"
  },
  {
    "label": "sampleXformedSpeed()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> void LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "sampleXformedSpeed(const LeafRange& range, Index speedBuffer)"
  },
  {
    "label": "checkInterrupter()",
    "kind": "Method",
    "detail": "Function (using VoxelIterT = LeafType::ValueOnCIter ; using SamplerT = tools::GridSampler<GridT::ConstAccessor,tools::BoxSampler> ; const MapT& map =* mMap ; mParent -> mTracker .)",
    "insertText": "checkInterrupter()"
  },
  {
    "label": "getAccessor()",
    "kind": "Method",
    "detail": "Function (GridT::ConstAccessor targetAcc = mParent -> mTarget ->)",
    "insertText": "getAccessor()"
  },
  {
    "label": "target()",
    "kind": "Method",
    "detail": "Function (SamplerT)",
    "insertText": "target(targetAcc, mParent->mTarget->transform())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueType* speed = leafIter .)",
    "insertText": "buffer(speedBuffer).data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool isZero = true ;)",
    "insertText": "for(VoxelIterT voxelIter = leafIter->cbeginValueOn(); voxelIter; ++voxelIter)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (ValueType& s = speed [ voxelIter .)",
    "insertText": "pos()"
  },
  {
    "label": "wsSample()",
    "kind": "Method",
    "detail": "Function (s - = target .)",
    "insertText": "wsSample(map.applyMap(voxelIter.getCoord().asVec3d()))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (mMaxAbsS =)",
    "insertText": "Max(mMaxAbsS, math::Abs(s))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(isZero) speed[0] = std::numeric_limits<ValueType>::max()"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (} } else { const ValueType min = mParent -> mMinMask,invNorm = 1 . 0)",
    "insertText": "f(mParent->mDeltaMask)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (SamplerT)",
    "insertText": "mask(maskAcc, mParent->mMask->transform())"
  },
  {
    "label": "applyMap()",
    "kind": "Method",
    "detail": "Function (const Vec3R xyz = map .)",
    "insertText": "applyMap(voxelIter.getCoord().asVec3d())"
  },
  {
    "label": "SmoothUnitStep()",
    "kind": "Method",
    "detail": "Function (const ValueType a =)",
    "insertText": "SmoothUnitStep((mask.wsSample(xyz)-min)*invNorm)"
  },
  {
    "label": "wsSample()",
    "kind": "Method",
    "detail": "Function (s - = target .)",
    "insertText": "wsSample(xyz)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s* = invMask ? 1 - a : a ;)",
    "insertText": "if(!math::isApproxZero(s))"
  },
  {
    "label": "sampleAlignedSpeed()",
    "kind": "Method",
    "detail": "Function (} } } template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> void LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "sampleAlignedSpeed(const LeafRange& range, Index speedBuffer)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (s - = target .)",
    "insertText": "getValue(voxelIter.getCoord())"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const Coord ijk = voxelIter .)",
    "insertText": "getCoord()"
  },
  {
    "label": "SmoothUnitStep()",
    "kind": "Method",
    "detail": "Function (const ValueType a =)",
    "insertText": "SmoothUnitStep((mask.getValue(ijk)-min)*invNorm)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (s - = target .)",
    "insertText": "getValue(ijk)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} } } template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> void LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "cook(ThreadingMode mode, size_t swapBuffer)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent -> mTracker .)",
    "insertText": "startInterrupter(\"Morphing level set\")"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (const LeafRange range = mParent -> mTracker .)",
    "insertText": "leafs().leafRange(grainSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mode == PARALLEL_FOR)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, *this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mode == PARALLEL_REDUCE)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(range, *this)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OPENVDB_THROW(ValueError, \"expected threading mode \" << int(PARALLEL_FOR) << \" or \" << int(PARALLEL_REDUCE) << \", got \" << int(mode))"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (} mParent -> mTracker .)",
    "insertText": "leafs().swapLeafBuffer(swapBuffer, grainSize == 0)"
  },
  {
    "label": "endInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent -> mTracker .)",
    "insertText": "endInterrupter()"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> template<MapT,math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme> template<int Nominator,int Denominator> void LevelSetMorphing<GridT,InterruptT>::Morph<MapT,SpatialScheme,TemporalScheme)",
    "insertText": "euler(const LeafRange& range, ValueType dt, Index phiBuffer, Index resultBuffer, Index speedBuffer)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (using SchemeT = math::BIAS_SCHEME<SpatialScheme> ; using StencilT = SchemeT::template ISStencil<GridType>::StencilType ; using VoxelIterT = LeafType::ValueOnCIter ; using NumGrad = math::GradientNormSqrd<MapT,SpatialScheme> ; const ValueType Alpha =)",
    "insertText": "ValueType(Nominator)/ValueType(Denominator)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const ValueType Beta =)",
    "insertText": "ValueType(1)"
  },
  {
    "label": "stencil()",
    "kind": "Method",
    "detail": "Function (const MapT& map =* mMap ; StencilT)",
    "insertText": "stencil(mParent->mTracker.grid())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueType* phi = leafIter .)",
    "insertText": "buffer(phiBuffer).data()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueType* result = leafIter .)",
    "insertText": "buffer(resultBuffer).data()"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (stencil .)",
    "insertText": "moveTo(voxelIter)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ValueType v = stencil .)",
    "insertText": "getValue() - dt * speed[n] * NumGrad::result(map, stencil)"
  }
]