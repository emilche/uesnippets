[
  {
    "label": "Invoker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Invoker"
  },
  {
    "label": "UnretainedWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnretainedWrapper"
  },
  {
    "label": "UnretainedRefWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnretainedRefWrapper"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_RAW_PTR_ASAN_BOUND_ARG_TRACKER_H_ # define BASE_MEMORY_RAW_PTR_ASAN_BOUND_ARG_TRACKER_H_ # include \" base / allocator / buildflags . h \" # if)",
    "insertText": "BUILDFLAG(USE_ASAN_BACKUP_REF_PTR)"
  },
  {
    "label": "GetProtectedArgPtr()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<,> struct Invoker ; template<T,Impl> class UnretainedWrapper ; template<T,bool> class UnretainedRefWrapper ; } class BASE_EXPORT RawPtrAsanBoundArgTracker { public : uintptr_t)",
    "insertText": "GetProtectedArgPtr(uintptr_t ptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (private : template<,> struct internal::Invoker ; void)",
    "insertText": "Add(uintptr_t pointer)"
  },
  {
    "label": "RawPtrAsanBoundArgTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawPtrAsanBoundArgTracker()"
  },
  {
    "label": "AddArg()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "AddArg(const T& arg)"
  },
  {
    "label": "AddArg()",
    "kind": "Method",
    "detail": "Function (} template<T,Impl> void)",
    "insertText": "AddArg(const internal::UnretainedWrapper<T, Impl>& arg)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(reinterpret_cast<uintptr_t>(arg.get()))"
  },
  {
    "label": "AddArg()",
    "kind": "Method",
    "detail": "Function (} } template<T,bool IsSupportedType> void)",
    "insertText": "AddArg(const internal::UnretainedRefWrapper<T, IsSupportedType>& arg)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(reinterpret_cast<uintptr_t>(&arg.get()))"
  },
  {
    "label": "AddArgs()",
    "kind": "Method",
    "detail": "Function (} } template<. . . Args> void)",
    "insertText": "AddArgs(Args&&... args)"
  },
  {
    "label": "CurrentProtectedArgs()",
    "kind": "Method",
    "detail": "Function (} } size_t kInlineArgsCount = 3 ; using ProtectedArgsVector = base::StackVector<uintptr_t,kInlineArgsCount> ; ThreadLocalPointer<ProtectedArgsVector>&)",
    "insertText": "CurrentProtectedArgs()"
  }
]