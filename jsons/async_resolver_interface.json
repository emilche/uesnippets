[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "AsyncResolverInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_ASYNC_RESOLVER_INTERFACE_H_ # define RTC_BASE_ASYNC_RESOLVER_INTERFACE_H_ # include \" rtc_base / checks . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace rtc { class RTC_EXPORT AsyncResolverInterface { public :)",
    "insertText": "AsyncResolverInterface()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const SocketAddress& addr)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const SocketAddress& addr, int family)"
  },
  {
    "label": "GetResolvedAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResolvedAddress(int family, SocketAddress* addr)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(bool wait)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "address()"
  },
  {
    "label": "GetResolvedAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress addr ;)",
    "insertText": "GetResolvedAddress(AF_INET, &addr)"
  }
]