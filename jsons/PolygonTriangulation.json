[
  {
    "label": "FIndex3i",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndex3i"
  },
  {
    "label": "TVector2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVector2"
  },
  {
    "label": "TVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVector"
  },
  {
    "label": "TriangulateSimplePolygon()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" GeometryBase . h \" # include \" IndexTypes . h \" # include \" Math / MathFwd . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { struct FIndex3i ; } } namespace UE { namespace Math { template<T> struct TVector2 ; } } namespace UE { namespace Math { template<T> struct TVector ; } } namespace PolygonTriangulation { using namespace UE::Geometry ; using namespace UE::Math ; template<RealType> void)",
    "insertText": "TriangulateSimplePolygon(const TArray<TVector2<RealType>>& VertexPositions, TArray<FIndex3i>& OutTriangles, bool bOrientAsHoleFill = true)"
  },
  {
    "label": "ComputePolygonPlane()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "ComputePolygonPlane(const TArray<TVector<RealType>>& VertexPositions, TVector<RealType>& PlaneNormalOut, TVector<RealType>& PlanePointOut)"
  },
  {
    "label": "TriangulateSimplePolygon()",
    "kind": "Method",
    "detail": "Function (template<RealType> void)",
    "insertText": "TriangulateSimplePolygon(const TArray<TVector<RealType>>& VertexPositions, TArray<FIndex3i>& OutTriangles, bool bOrientAsHoleFill = true)"
  }
]