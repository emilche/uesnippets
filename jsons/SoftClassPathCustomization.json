[
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FSoftClassPathCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoftClassPathCustomization"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" IPropertyTypeCustomization . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class IPropertyHandle ; class UClass ; class FSoftClassPathCustomization : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeHeader(TSharedRef<class IPropertyHandle> InPropertyHandle, class FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeChildren(TSharedRef<class IPropertyHandle> InPropertyHandle, class IDetailChildrenBuilder& StructBuilder, IPropertyTypeCustomizationUtils& StructCustomizationUtils)"
  },
  {
    "label": "OnGetClass()",
    "kind": "Method",
    "detail": "Function (private : const UClass*)",
    "insertText": "OnGetClass()"
  },
  {
    "label": "OnSetClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetClass(const UClass* NewClass)"
  },
  {
    "label": "StringToClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "StringToClass(const FString& ClassName)"
  }
]