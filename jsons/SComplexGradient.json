[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SComplexGradient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComplexGradient"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; class SComplexGradient : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SComplexGradient) : _GradientColors() , _HasAlphaBackground(false) , _Orientation(Orient_Vertical)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_ATTRIBUTE(TArray<FLinearColor>, GradientColors) SLATE_ARGUMENT(bool, HasAlphaBackground) SLATE_ARGUMENT(EOrientation, Orientation) SLATE_ATTRIBUTE(TOptional<FVector2D>, DesiredSizeOverride) SLATE_END_ARGS() SLATE_API SComplexGradient()"
  },
  {
    "label": "SComplexGradient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SComplexGradient()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  }
]