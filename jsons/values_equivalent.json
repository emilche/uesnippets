[
  {
    "label": "ValuesEquivalent()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_VALUES_EQUIVALENT_H_ # define BASE_MEMORY_VALUES_EQUIVALENT_H_ # include<memory> # include \" base / memory / scoped_refptr . h \" namespace base { template<T> bool)",
    "insertText": "ValuesEquivalent(const T* a, const T* b)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if_t<std::is_pointer_v<)",
    "insertText": "decltype(std::declval<T>().Get())>>* = nullptr> bool ValuesEquivalent(const T& x, const T& y)"
  }
]