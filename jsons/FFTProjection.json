[
  {
    "label": "FFFTProjection3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFFTProjection3"
  },
  {
    "label": "IsPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ArrayND . h \" # include \" Chaos / FFT . h \" # include \" Chaos / UniformGrid . h \" namespace Chaos { template<int d> bool)",
    "insertText": "IsPowerOfTwo(const TVector<int32, d>& Counts)"
  },
  {
    "label": "FFFTProjection3()",
    "kind": "Method",
    "detail": "Function (} return true ; } class FFFTProjection3 { public :)",
    "insertText": "FFFTProjection3(const int32 NumIterations = 1) : MNumIterations(NumIterations)"
  },
  {
    "label": "FFFTProjection3()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFFTProjection3()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(const TUniformGrid<FReal, 3>& Grid, TArrayND<FVec3, 3>& Velocity, const TArrayND<bool, 3>& BoundaryConditions, const FReal dt)"
  },
  {
    "label": "Counts()",
    "kind": "Method",
    "detail": "Function (int32 size = Grid .)",
    "insertText": "Counts().Product()"
  },
  {
    "label": "Counts()",
    "kind": "Method",
    "detail": "Function (TVec3<int32> Counts = Grid .)",
    "insertText": "Counts()"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (Counts [ 2 ] = Counts [ 2 ] / 2 + 1 ; TArrayND<FComplex,3>)",
    "insertText": "u(Counts), v(Counts), w(Counts)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (TArrayND<FVec3,3> VelocitySaved = Velocity .)",
    "insertText": "Copy()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transform(Grid, Velocity, u, v, w)"
  },
  {
    "label": "MakeDivergenceFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDivergenceFree(Grid, u, v, w)"
  },
  {
    "label": "InverseTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InverseTransform(Grid, Velocity, u, v, w, true)"
  }
]