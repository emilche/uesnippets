[
  {
    "label": "FAudioFormatSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFormatSettings"
  },
  {
    "label": "FTargetPlatformControlsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetPlatformControlsBase"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "TTargetPlatformControlsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTargetPlatformControlsBase"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "TNonDesktopTargetPlatformControlsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNonDesktopTargetPlatformControlsBase"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Interfaces / ITargetPlatformControls . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / PlatformFileManager . h \" # include \" CoreGlobals . h \" # include \" PlatformInfo . h \" # include \" Interfaces / ITargetDevice . h \" # include \" Interfaces / ITargetPlatformSettings . h \" # include \" Templates / PimplPtr . h \" # include \" Misc / Paths . h \" # include \" Misc / ConfigCacheIni . h \" namespace Audio { class FAudioFormatSettings ; } class FTargetPlatformControlsBase : public ITargetPlatformControls { public : bool)",
    "insertText": "AddDevice(const FString& DeviceName, bool bDefault)"
  },
  {
    "label": "DisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "DisplayName()"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "FinalizeVirtualTextureLayerFormat()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE FName)",
    "insertText": "FinalizeVirtualTextureLayerFormat(FName Format)"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDependencySCArrayHelper(TArray<FString>& OutDependencies, const FString& DependencyRelativePath)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IPlatformFile& PlatformFile =)",
    "insertText": "Get().GetPlatformFile()"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString DependencyAbsolutePath = PlatformFile .)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(*(FPaths::EngineDir() / DependencyRelativePath))"
  },
  {
    "label": "NormalizeDirectoryName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeDirectoryName(DependencyAbsolutePath)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutDependencies .)",
    "insertText": "AddUnique(DependencyAbsolutePath)"
  },
  {
    "label": "IsSdkInstalled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSdkInstalled(bool bProjectHasCode, FString& OutDocumentationPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 bReadyToBuild = ETargetPlatformReadyStatus::Ready ;)",
    "insertText": "if(!IsSdkInstalled(bProjectHasCode, OutTutorialPath))"
  },
  {
    "label": "RequiresTempTarget()",
    "kind": "Method",
    "detail": "Function (bReadyToBuild | = ETargetPlatformReadyStatus::SDKNotFound ; } return bReadyToBuild ; } bool)",
    "insertText": "RequiresTempTarget(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FText& OutReason)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsVariants()"
  },
  {
    "label": "SendLowerCaseFilePaths()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendLowerCaseFilePaths()"
  },
  {
    "label": "AllowsDevelopmentObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowsDevelopmentObjects()"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBuildProjectSettingKeys(FString& OutSection, TArray<FString>& InBoolKeys, TArray<FString>& InIntKeys, TArray<FString>& InStringKeys)"
  },
  {
    "label": "GetPlatformOrdinal()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlatformOrdinal()"
  },
  {
    "label": "ShouldExpandTo32Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExpandTo32Bit(const uint16* Indices, const int32 NumIndices)"
  },
  {
    "label": "AllowObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowObject(const class UObject* Object)"
  },
  {
    "label": "NAME_MeshBuilder()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "NAME_MeshBuilder(TEXT(\"MeshBuilder\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"TextureFormatUncompressed\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"TextureFormatDXT\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"TextureFormatIntelISPCTexComp\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString TextureCompressionFormat ;)",
    "insertText": "if(TargetPlatformSettings->GetConfigSystem()->GetString(TEXT(\"AlternateTextureCompression\"), TEXT(\"TextureCompressionFormat\"), TextureCompressionFormat, GEngineIni))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(*TextureCompressionFormat)"
  },
  {
    "label": "GetWaveFormat()",
    "kind": "Method",
    "detail": "Function (} } FName)",
    "insertText": "GetWaveFormat(const class USoundWave* Wave)"
  },
  {
    "label": "GetAllWaveFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllWaveFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetWaveFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWaveFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "GetTextureSizeLimitsDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureSizeLimitsDefault(FConfigCacheIni* ConfigSystem,uint64 & OutMaximumSurfaceBytes, uint64 & OutMaximumPackageBytes)"
  },
  {
    "label": "GetTextureSizeLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureSizeLimits(uint64 & OutMaximumSurfaceBytes, uint64 & OutMaximumPackageBytes)"
  },
  {
    "label": "GetTextureSizeLimitsDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureSizeLimitsDefault(TargetPlatformSettings->GetConfigSystem(),OutMaximumSurfaceBytes,OutMaximumPackageBytes)"
  },
  {
    "label": "CopyFileToTarget()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "CopyFileToTarget(const FString& TargetAddress, const FString& HostFilename, const FString& TargetFilename, const TMap<FString, FString>& CustomPlatformData)"
  },
  {
    "label": "GetExtraPackagesToCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetExtraPackagesToCook(TArray<FName>& PackageNames)"
  },
  {
    "label": "InitializeHostPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitializeHostPlatform()"
  },
  {
    "label": "GetAudioFormatSettings()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* PlatformInfo ; int32 PlatformOrdinal ; const Audio::FAudioFormatSettings&)",
    "insertText": "GetAudioFormatSettings()"
  },
  {
    "label": "AppendAnalyticsEventConfigBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigBool(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigInt(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigFloat(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigString(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "HasDefaultBuildSettings()",
    "kind": "Method",
    "detail": "Function (private : TPimplPtr<Audio::FAudioFormatSettings> AudioFormatSettings ; bool)",
    "insertText": "HasDefaultBuildSettings()"
  },
  {
    "label": "DoProjectSettingsMatchDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoProjectSettingsMatchDefault(const FString& InPlatformName, const FString& InSection, const TArray<FString>* InBoolKeys, const TArray<FString>* InIntKeys, const TArray<FString>* InStringKeys)"
  },
  {
    "label": "IsPluginEnabledForTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPluginEnabledForTarget(const IPlugin& Plugin, const struct FProjectDescriptor* Project, const FString& Platform, EBuildConfiguration Configuration, EBuildTargetType TargetType)"
  },
  {
    "label": "IsUsable()",
    "kind": "Method",
    "detail": "Function (} ; template<TPlatformProperties> class TTargetPlatformControlsBase : public FTargetPlatformControlsBase { public : bool)",
    "insertText": "IsUsable()"
  },
  {
    "label": "TTargetPlatformControlsBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTargetPlatformControlsBase(ITargetPlatformSettings* TargetPlatformSettings) : TTargetPlatformControlsBase(new PlatformInfo::FTargetPlatformInfo( TPlatformProperties::IniPlatformName(), TPlatformProperties::HasEditorOnlyData() ? EBuildTargetType::Editor : TPlatformProperties::IsServerOnly() ? EBuildTargetType::Server : TPlatformProperties::IsClientOnly() ? EBuildTargetType::Client : EBuildTargetType::Game, TEXT(\"\")), TargetPlatformSettings)"
  },
  {
    "label": "HasEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasEditorOnlyData()"
  },
  {
    "label": "IsLittleEndian()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLittleEndian()"
  },
  {
    "label": "IsServerOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsServerOnly()"
  },
  {
    "label": "IsClientOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClientOnly()"
  },
  {
    "label": "PlatformName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "PlatformName()"
  },
  {
    "label": "CookingDeviceProfileName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "CookingDeviceProfileName()"
  },
  {
    "label": "RequiresCookedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresCookedData()"
  },
  {
    "label": "RequiresOriginalReleaseVersionForPatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresOriginalReleaseVersionForPatch()"
  },
  {
    "label": "HasSecurePackageFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSecurePackageFormat()"
  },
  {
    "label": "RequiresUserCredentials()",
    "kind": "Method",
    "detail": "Function (} EPlatformAuthentication)",
    "insertText": "RequiresUserCredentials()"
  },
  {
    "label": "GetRuntimePlatformType()",
    "kind": "Method",
    "detail": "Function (} EBuildTargetType)",
    "insertText": "GetRuntimePlatformType()"
  },
  {
    "label": "GetZlibReplacementFormat()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetZlibReplacementFormat()"
  },
  {
    "label": "GetMemoryMappingAlignment()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetMemoryMappingAlignment()"
  },
  {
    "label": "GetPhysicsFormat()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ENGINE FName)",
    "insertText": "GetPhysicsFormat(class UBodySetup* Body)"
  },
  {
    "label": "TNonDesktopTargetPlatformControlsBase()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<TPlatformProperties> class TNonDesktopTargetPlatformControlsBase : public TTargetPlatformControlsBase<TPlatformProperties> { public :)",
    "insertText": "TNonDesktopTargetPlatformControlsBase(bool bInIsClientOnly, ITargetPlatformSettings* InTargetPlatformSettings, const TCHAR* CookFlavor = nullptr, const TCHAR* OverrideIniPlatformName = nullptr) : TTargetPlatformControlsBase<TPlatformProperties>(new PlatformInfo::FTargetPlatformInfo( OverrideIniPlatformName ? FString(OverrideIniPlatformName) : FString(TPlatformProperties::IniPlatformName()), bInIsClientOnly ? EBuildTargetType::Client : EBuildTargetType::Game, CookFlavor), InTargetPlatformSettings) , bIsClientOnly(bInIsClientOnly)"
  }
]