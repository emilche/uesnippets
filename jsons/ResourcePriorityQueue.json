[
  {
    "label": "ResourcePriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourcePriorityQueue"
  },
  {
    "label": "resource_sort",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "resource_sort"
  },
  {
    "label": "resource_sort()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_RESOURCEPRIORITYQUEUE_H # define LLVM_CODEGEN_RESOURCEPRIORITYQUEUE_H # include \" llvm / CodeGen / DFAPacketizer . h \" # include \" llvm / CodeGen / ScheduleDAG . h \" # include \" llvm / CodeGen / SelectionDAGISel . h \" # include \" llvm / MC / MCInstrItineraries . h \" # include \" llvm / Target / TargetInstrInfo . h \" # include \" llvm / Target / TargetRegisterInfo . h \" namespace llvm { class ResourcePriorityQueue ; struct resource_sort : public std::binary_function<SUnit*,SUnit*,bool> { ResourcePriorityQueue* PQ ;)",
    "insertText": "resource_sort(ResourcePriorityQueue *pq) : PQ(pq)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const SUnit* left, const SUnit* right)"
  },
  {
    "label": "ResourcePriorityQueue()",
    "kind": "Method",
    "detail": "Function (} ; class ResourcePriorityQueue : public SchedulingPriorityQueue { std::vector<SUnit>* SUnits ; std::vector<unsigned> NumNodesSolelyBlocking ; std::vector<SUnit*> Queue ; std::vector<unsigned> RegPressure ; std::vector<unsigned> RegLimit ; resource_sort Picker ; const TargetRegisterInfo* TRI ; const TargetLowering* TLI ; const TargetInstrInfo* TII ; const InstrItineraryData* InstrItins ; std::unique_ptr<DFAPacketizer> ResourcesModel ; std::vector<SUnit*> Packet ; unsigned ParallelLiveRanges ; signed HorizontalVerticalBalance ; public :)",
    "insertText": "ResourcePriorityQueue(SelectionDAGISel *IS)"
  },
  {
    "label": "isBottomUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBottomUp()"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNode(const SUnit *SU)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (NumNodesSolelyBlocking .)",
    "insertText": "resize(SUnits->size(), 0)"
  },
  {
    "label": "updateNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "updateNode(const SUnit *SU)"
  },
  {
    "label": "releaseState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "releaseState()"
  },
  {
    "label": "getLatency()",
    "kind": "Method",
    "detail": "Function (SUnits = nullptr ; } unsigned)",
    "insertText": "getLatency(unsigned NodeNum)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NodeNum < (*SUnits).size())"
  },
  {
    "label": "getNumSolelyBlockNodes()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumSolelyBlockNodes(unsigned NodeNum)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NodeNum < NumNodesSolelyBlocking.size())"
  },
  {
    "label": "initNumRegDefsLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initNumRegDefsLeft(SUnit *SU)"
  },
  {
    "label": "updateNumRegDefsLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateNumRegDefsLeft(SUnit *SU)"
  },
  {
    "label": "regPressureDelta()",
    "kind": "Method",
    "detail": "Function (signed)",
    "insertText": "regPressureDelta(SUnit *SU, bool RawPressure = false)"
  },
  {
    "label": "rawRegPressureDelta()",
    "kind": "Method",
    "detail": "Function (signed)",
    "insertText": "rawRegPressureDelta(SUnit *SU, unsigned RCId)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push(SUnit *U)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (SUnit*)",
    "insertText": "pop()"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remove(SUnit *SU)"
  },
  {
    "label": "scheduledNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scheduledNode(SUnit *Node)"
  },
  {
    "label": "isResourceAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isResourceAvailable(SUnit *SU)"
  },
  {
    "label": "reserveResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserveResources(SUnit *SU)"
  },
  {
    "label": "adjustPriorityOfUnscheduledPreds()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "adjustPriorityOfUnscheduledPreds(SUnit *SU)"
  },
  {
    "label": "getSingleUnscheduledPred()",
    "kind": "Method",
    "detail": "Function (SUnit*)",
    "insertText": "getSingleUnscheduledPred(SUnit *SU)"
  },
  {
    "label": "numberRCValPredInSU()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "numberRCValPredInSU(SUnit *SU, unsigned RCId)"
  },
  {
    "label": "numberRCValSuccInSU()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "numberRCValSuccInSU(SUnit *SU, unsigned RCId)"
  }
]