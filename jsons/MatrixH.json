[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FMatrixH()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / MathConst . h \" # include \" Math / Point . h \" namespace UE::CADKernel { class FMatrixH { private : double Matrix [ 1 6 ] ; public : const FMatrixH Identity ;)",
    "insertText": "FMatrixH()"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "FMatrixH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMatrixH(const double* const InMatrix16)"
  },
  {
    "label": "FMatrixH()",
    "kind": "Method",
    "detail": "Function (Matrix [ Index ] = InMatrix16 [ Index ] ; } })",
    "insertText": "FMatrixH(const double InMatrix44[][4])"
  },
  {
    "label": "FMatrixH()",
    "kind": "Method",
    "detail": "Function (Matrix [ 4* Row + Column ] = InMatrix44 [ Row ] [ Column ] ; } } })",
    "insertText": "FMatrixH(const FPoint& Origin, const FPoint& Ox, const FPoint& Oy, const FPoint& Oz)"
  },
  {
    "label": "BuildChangeOfCoordinateSystemMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChangeOfCoordinateSystemMatrix(Ox, Oy, Oz, Origin)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMatrixH& InMatrix)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(InMatrix.Matrix, 16 * sizeof(double))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(Row, Column)"
  },
  {
    "label": "FromAxisOrigin()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "FromAxisOrigin(const FPoint& Axis, const FPoint& Origin)"
  },
  {
    "label": "BuildChangeOfCoordinateSystemMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChangeOfCoordinateSystemMatrix(const FPoint& Xaxis, const FPoint& Yaxis, const FPoint& Zaxis, const FPoint& Origin)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "Multiply(const FPoint& InPoint)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "MultiplyVector(const FPoint& InVector)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "MultiplyVector(const FVector& InVector)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "MultiplyVector(const FVector3f& InVector)"
  },
  {
    "label": "MakeRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} FMatrixH)",
    "insertText": "MakeRotationMatrix(double InAngle, const FPoint InAxe)"
  },
  {
    "label": "MakeTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrixH)",
    "insertText": "MakeTranslationMatrix(const FPoint& InPoint)"
  },
  {
    "label": "MakeScaleMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrixH)",
    "insertText": "MakeScaleMatrix(FPoint& Scale)"
  },
  {
    "label": "MakeScaleMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrixH)",
    "insertText": "MakeScaleMatrix(double ScaleX, double ScaleY, double ScaleZ)"
  },
  {
    "label": "PointRotation()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "PointRotation(const FPoint& PointToRotate, const FPoint& Origin)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FPoint Result = Origin ;)",
    "insertText": "for(int32 Index = 0; Index < 3; Index++)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result [ Index ] + =)",
    "insertText": "Get(Index, Jndex) * (PointToRotate[Jndex] - Origin[Jndex])"
  },
  {
    "label": "PointRotation()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } FVector)",
    "insertText": "PointRotation(const FVector& PointToRotate, const FVector& Origin)"
  },
  {
    "label": "PointRotation()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } FPoint2D)",
    "insertText": "PointRotation(const FPoint2D& PointToRotate, const FPoint2D& Origin)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FPoint2D Result = Origin ;)",
    "insertText": "for(int32 Index = 0; Index < 2; Index++)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } void)",
    "insertText": "Inverse()"
  },
  {
    "label": "GetInverse()",
    "kind": "Method",
    "detail": "Function (FMatrixH)",
    "insertText": "GetInverse()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FMatrixH Tmp =* this ;)",
    "insertText": "for(int32 Index = 0; Index < 4; Index++)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(Index, Jndex) = Tmp.Get(Jndex, Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } } double&)",
    "insertText": "Get(int32 Row, int32 Column)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Get(Index, Jndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Get(Index, Jndex) = Result.Get(Index, Jndex) + (Get(Index, Kndex) * InMatrix.Get(Kndex, Jndex))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } return Result ; } void)",
    "insertText": "operator(const FMatrixH& InMatrix)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (FMatrixH Result =* this* InMatrix ;)",
    "insertText": "Move(*this, Result)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "operator(const FPoint& Point)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FMatrixH Result ;)",
    "insertText": "for(int32 i = 0; i < 16; i++)"
  },
  {
    "label": "GetMatrixDouble()",
    "kind": "Method",
    "detail": "Function (Result . Matrix [ i ] = Matrix [ i ] + InMatrix . Matrix [ i ] ; } return Result ; } void)",
    "insertText": "GetMatrixDouble(double* OutMatrix)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(OutMatrix, Matrix, 16 * sizeof(double))"
  },
  {
    "label": "Column()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "Column(int32 Index)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "Row(int32 Index)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Print(EVerboseLevel level)"
  },
  {
    "label": "IsId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!FMath::IsNearlyZero(Get(Row, Column)))"
  },
  {
    "label": "InverseMatrixN()",
    "kind": "Method",
    "detail": "Function (} } } return true ; } } ; void)",
    "insertText": "InverseMatrixN(double* Matrix, int32 n)"
  },
  {
    "label": "MatrixProduct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatrixProduct(int32 ARowNum, int32 AColumnNum, int32 ResultRank, const double* InMatrixA, const double* InMatrixB, double* OutMatrix)"
  },
  {
    "label": "TransposeMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransposeMatrix(int32 RowNum, int32 ColumnNum, const double* InMatrix, double* OutMatrix)"
  }
]