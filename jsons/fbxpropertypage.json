[
  {
    "label": "FbxNameMapCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FbxNameMapCompare"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EValueIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EValueIndex"
  },
  {
    "label": "FbxPropertyPage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxPropertyPage"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxPropertyHandle"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_PROPERTY_PAGE_H_ # define _FBXSDK_CORE_PROPERTY_PAGE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxstringlist . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / core / fbxsymbol . h> # include<fbxsdk / core / fbxpropertydef . h> # include<fbxsdk / fbxsdk_nsbegin . h> typedef FbxPair<FbxInt,const char*> FbxNameMapKey ; struct FbxNameMapCompare { int)",
    "insertText": "operator()(const FbxNameMapKey& pKeyA, const FbxNameMapKey& pKeyB)"
  },
  {
    "label": "FBXSDK_FRIEND_NEW()",
    "kind": "Method",
    "detail": "Function (} } ; class FBXSDK_DLL FbxPropertyInfo { public :)",
    "insertText": "FBXSDK_FRIEND_NEW()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxPropertyInfo*)",
    "insertText": "Create(const char* pName, FbxPropertyPage* pTypeInfo)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyInfo*)",
    "insertText": "Create(const char* pName, EFbxType pType=eFbxUndefined)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(this)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyInfo*)",
    "insertText": "Clone(FbxPropertyPage*)"
  },
  {
    "label": "FbxPropertyInfo()",
    "kind": "Method",
    "detail": "Function (} else { return FbxNew<)",
    "insertText": "FbxPropertyInfo(mName,mType)"
  },
  {
    "label": "IncRef()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "IncRef()"
  },
  {
    "label": "DecRef()",
    "kind": "Method",
    "detail": "Function (mRef + + ; } void)",
    "insertText": "DecRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mRef - - ;)",
    "insertText": "if(mRef==0) FbxDelete(this)"
  },
  {
    "label": "GetRef()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetRef()"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage*)",
    "insertText": "GetTypeInfo()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (mLabel = pLabel ; } const char*)",
    "insertText": "GetLabel()"
  },
  {
    "label": "SetUserTag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUserTag(int pUserTag)"
  },
  {
    "label": "GetUserTag()",
    "kind": "Method",
    "detail": "Function (mUserTag = pUserTag ; } int)",
    "insertText": "GetUserTag()"
  },
  {
    "label": "mUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mUserData(void*)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetUserData()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EFbxType lType =)",
    "insertText": "GetType()"
  },
  {
    "label": "lCanAdd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lCanAdd(lType == eFbxEnumM || mEnumList->FindIndex( pStringValue ) == -1)"
  },
  {
    "label": "InsertEnumValue()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } void)",
    "insertText": "InsertEnumValue(int pIndex, const char* pStringValue)"
  },
  {
    "label": "GetEnumCount()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "GetEnumCount()"
  },
  {
    "label": "SetEnumValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnumValue(int pIndex, const char* pStringValue)"
  },
  {
    "label": "RemoveEnumValue()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveEnumValue(int pIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (mEnumList ->)",
    "insertText": "RemoveAt(pIndex)"
  },
  {
    "label": "GetEnumValue()",
    "kind": "Method",
    "detail": "Function (} } char*)",
    "insertText": "GetEnumValue(int pIndex)"
  },
  {
    "label": "GetStringAt()",
    "kind": "Method",
    "detail": "Function (lValue = mEnumList ? mEnumList ->)",
    "insertText": "GetStringAt(pIndex)"
  },
  {
    "label": "HasMinMax()",
    "kind": "Method",
    "detail": "Function (} return lValue ; } enum EValueIndex { eValueMin,eValueSoftMin,eValueMax,eValueSoftMax,eValueCount } ; bool)",
    "insertText": "HasMinMax(EValueIndex pId)"
  },
  {
    "label": "SetMinMax()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "SetMinMax(EValueIndex pId, const void* pValue, EFbxType pValueType)"
  },
  {
    "label": "FbxTypeSizeOf()",
    "kind": "Method",
    "detail": "Function (size_t lSize =)",
    "insertText": "FbxTypeSizeOf(GetType())"
  },
  {
    "label": "FbxMalloc()",
    "kind": "Method",
    "detail": "Function (mMinMaxValue [ pId ] =)",
    "insertText": "FbxMalloc(lSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(mMinMaxValue[pId])"
  },
  {
    "label": "FbxPropertyInfo()",
    "kind": "Method",
    "detail": "Function (} return false ; } private :)",
    "insertText": "FbxPropertyInfo(const char* pName, FbxPropertyPage* pTypeInfo) : mRef(0) , mName(pName) , mType(eFbxUndefined) , mTypeInfo(pTypeInfo) , mUserTag(0) , mUserData(0) , mFilter(0)"
  },
  {
    "label": "FbxPropertyInfo()",
    "kind": "Method",
    "detail": "Function (mMinMaxValue [ i ] = 0 ; } })",
    "insertText": "FbxPropertyInfo(FbxStringSymbol pName,FbxPropertyPage *pTypeInfo) : mRef(0) , mName(pName) , mType(eFbxUndefined) , mTypeInfo(pTypeInfo) , mUserTag(0) , mUserData(0) , mFilter(0)"
  },
  {
    "label": "FbxPropertyInfo()",
    "kind": "Method",
    "detail": "Function (mMinMaxValue [ i ] = 0 ; } })",
    "insertText": "FbxPropertyInfo(const char* pName, EFbxType pType) : mRef(0) , mName(pName) , mType(pType) , mTypeInfo(0) , mUserTag(0) , mUserData(0) , mFilter(0)"
  },
  {
    "label": "FbxPropertyInfo()",
    "kind": "Method",
    "detail": "Function (mMinMaxValue [ i ] = 0 ; } } ~)",
    "insertText": "FbxPropertyInfo()"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(mMinMaxValue[i])"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } int mRef ; FbxStringSymbol mName ; FbxStringSymbol mLabel ; EFbxType mType ; FbxPropertyPage* mTypeInfo ; int mUserTag ; void* mMinMaxValue [ eValueCount ] ; void* mUserData ; FbxConnectionPointFilter* mFilter ; FbxAutoDeletePtr<FbxStringList> mEnumList ; } ; # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) #pragma warning (push) #pragma warning (disable: 4355)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxPropertyConnect*)",
    "insertText": "Create(FbxPropertyPage* pPage,FbxInt pId)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyConnect*)",
    "insertText": "Clone(FbxPropertyPage* pPage)"
  },
  {
    "label": "SubConnectRemoveAll()",
    "kind": "Method",
    "detail": "Function (mConnectionPoint .)",
    "insertText": "SubConnectRemoveAll()"
  },
  {
    "label": "WipeAllConnections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WipeAllConnections()"
  },
  {
    "label": "WipeConnectionList()",
    "kind": "Method",
    "detail": "Function (mConnectionPoint .)",
    "insertText": "WipeConnectionList()"
  },
  {
    "label": "ConnectSrc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ConnectSrc(FbxPropertyConnect* pSrc, FbxConnection::EType pType)"
  },
  {
    "label": "DisconnectSrc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DisconnectSrc(FbxPropertyConnect* pSrc)"
  },
  {
    "label": "IsConnectedSrc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnectedSrc(FbxPropertyConnect* pSrc)"
  },
  {
    "label": "GetSrcCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetSrcCount(FbxConnectionPointFilter* pFilter)"
  },
  {
    "label": "GetSrc()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyConnect*)",
    "insertText": "GetSrc(FbxConnectionPointFilter* pFilter, int pIndex)"
  },
  {
    "label": "GetSrc()",
    "kind": "Method",
    "detail": "Function (FbxConnectionPoint* lCP = mConnectionPoint .)",
    "insertText": "GetSrc(pIndex,pFilter)"
  },
  {
    "label": "ConnectDst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ConnectDst(FbxPropertyConnect* pDst, FbxConnection::EType pType)"
  },
  {
    "label": "IsConnectedDst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnectedDst(FbxPropertyConnect* pSrc)"
  },
  {
    "label": "DisconnectDst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DisconnectDst(FbxPropertyConnect* pDst)"
  },
  {
    "label": "GetDstCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetDstCount(FbxConnectionPointFilter* pFilter)"
  },
  {
    "label": "GetDst()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyConnect*)",
    "insertText": "GetDst(FbxConnectionPointFilter* pFilter, int pIndex)"
  },
  {
    "label": "GetDst()",
    "kind": "Method",
    "detail": "Function (FbxConnectionPoint* lCP = mConnectionPoint .)",
    "insertText": "GetDst(pIndex,pFilter)"
  },
  {
    "label": "FbxPropertyConnect()",
    "kind": "Method",
    "detail": "Function (} int mRef ; FbxConnectionPoint mConnectionPoint ; FbxPropertyPage* mPage ; FbxInt mId ; private :)",
    "insertText": "FbxPropertyConnect(FbxPropertyPage* pPage,FbxInt pId) : mRef(0), mConnectionPoint(this), mPage(pPage), mId(pId)"
  },
  {
    "label": "FbxPropertyConnect()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxPropertyConnect()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) #pragma warning (pop)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : FbxPropertyEntry*)",
    "insertText": "Create(FbxInt pParentId, FbxPropertyInfo* pInfo, FbxPropertyValue* pValue, FbxPropertyConnect* pConnect)"
  },
  {
    "label": "GetParentId()",
    "kind": "Method",
    "detail": "Function (} FbxInt)",
    "insertText": "GetParentId()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyInfo*)",
    "insertText": "Get(const FbxPropertyInfo*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxPropertyInfo* lInfo = mInfo ;)",
    "insertText": "if(pInfo ) pInfo->IncRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mInfo = pInfo ;)",
    "insertText": "if(lInfo ) lInfo->DecRef()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyValue*)",
    "insertText": "Get(const FbxPropertyValue*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxPropertyValue* lValue = mValue ;)",
    "insertText": "if(pValue ) pValue->IncRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mValue = pValue ;)",
    "insertText": "if(lValue ) lValue->DecRef()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyConnect*)",
    "insertText": "Get(const FbxPropertyConnect*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxPropertyConnect* lConnect = mConnect ;)",
    "insertText": "if(pConnect ) pConnect->IncRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mConnect = pConnect ;)",
    "insertText": "if(lConnect ) lConnect->DecRef()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyFlags*)",
    "insertText": "Get(const FbxPropertyFlags*)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (mFlags = pType ; } void)",
    "insertText": "Set(FbxPropertyFlags* pType)"
  },
  {
    "label": "FbxPropertyFlags()",
    "kind": "Method",
    "detail": "Function (mFlags = pType ?* pType :)",
    "insertText": "FbxPropertyFlags(FbxPropertyFlags::eNone)"
  },
  {
    "label": "FbxPropertyEntry()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FbxPropertyEntry(FbxInt pParentId,FbxPropertyInfo *pInfo,FbxPropertyValue *pValue,FbxPropertyConnect *pConnect) : mInfo(pInfo), mValue(pValue), mConnect(pConnect), mParentId(pParentId), mFlags(FbxPropertyFlags::eNone)"
  },
  {
    "label": "FbxPropertyEntry()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxPropertyEntry()"
  },
  {
    "label": "FbxPropertyIdGenerator()",
    "kind": "Method",
    "detail": "Function (class FbxPropertyPage ; } ; class FBXSDK_DLL FbxPropertyIdGenerator { public :)",
    "insertText": "FbxPropertyIdGenerator() : mRef(0), mNextId(0)"
  },
  {
    "label": "GetNextId()",
    "kind": "Method",
    "detail": "Function (} FbxInt)",
    "insertText": "GetNextId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mRef - - ;)",
    "insertText": "if(mRef == 0 ) FbxDelete(this)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage*)",
    "insertText": "Create(FbxPropertyPage* pInstanceOf=0)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetPropertyItem(const T* pItemType,FbxInt pIndex,FbxPropertyPage **pFoundIn=0)"
  },
  {
    "label": "GetPropertyEntry()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage = 0 ; FbxPropertyEntry* lReferenceEntry =)",
    "insertText": "GetPropertyEntry(pIndex,&lReferencePage)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (T* lItem = lReferenceEntry ->)",
    "insertText": "Get(FBX_TYPE(T))"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (} } return 0 ; } template<class T> T*)",
    "insertText": "ChangePropertyItemState(const T* pItemType, FbxInt pIndex, FbxPropertyFlags::EInheritType pInheritType)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage = NULL ; T* lItem =)",
    "insertText": "GetPropertyItem(pItemType, pIndex, &lReferencePage)"
  },
  {
    "label": "ChangePropertyEntryState()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry =)",
    "insertText": "ChangePropertyEntryState(pIndex, FbxPropertyFlags::eOverride)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lEntry ->)",
    "insertText": "Set(lItem->Clone(this))"
  },
  {
    "label": "mInstanceOf()",
    "kind": "Method",
    "detail": "Function (} } else { bool lOwnEntry = !)",
    "insertText": "mInstanceOf(mInstanceOf->GetPropertyItem(pItemType, pIndex) == NULL)"
  },
  {
    "label": "GetPropertyEntry()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry =)",
    "insertText": "GetPropertyEntry(pIndex)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lEntry ->)",
    "insertText": "Set((T*)0)"
  },
  {
    "label": "ChangePropertyEntryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangePropertyEntryState(pIndex, FbxPropertyFlags::eInherit)"
  },
  {
    "label": "GetFirstPropertyItem()",
    "kind": "Method",
    "detail": "Function (} } return 0 ; } return 0 ; } template<class T> FbxPropertyPage*)",
    "insertText": "GetFirstPropertyItem(FbxInt pId, const T* pItem)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage = NULL ;)",
    "insertText": "GetPropertyItem(FBX_TYPE(T), pId, &lReferencePage)"
  },
  {
    "label": "GetFirstPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage2 = lReferencePage -> mInstanceOf ->)",
    "insertText": "GetFirstPropertyItem(pId, pItem)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyInfo* lPropertyInfo =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyInfo),pId)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetLabel(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT)"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetLabel(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT, const char* pLabel=\"\")"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (lPropertyInfo ->)",
    "insertText": "SetLabel(pLabel)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetUserData(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT, const void* pUserData=0)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (lPropertyInfo ->)",
    "insertText": "SetUserData(pUserData)"
  },
  {
    "label": "SetUserTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetUserTag(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT,int pUserTag=0)"
  },
  {
    "label": "SetUserTag()",
    "kind": "Method",
    "detail": "Function (lPropertyInfo ->)",
    "insertText": "SetUserTag(pUserTag)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} FbxInt)",
    "insertText": "GetParent(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT)"
  },
  {
    "label": "GetPropertyEntry()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lPropertyEntry =)",
    "insertText": "GetPropertyEntry(pId)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyPage*)",
    "insertText": "GetTypeInfo(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FbxInt)",
    "insertText": "Add(FbxInt pParentId, const char* pName, EFbxType pType)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FbxInt)",
    "insertText": "Add(FbxInt pParentId, const char* pName, FbxPropertyPage* pTypeInfo)"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Reparent(FbxInt , FbxInt)"
  },
  {
    "label": "IsDescendentOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDescendentOf(FbxInt pId,FbxInt pAncestorId)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FbxInt lParentId =)",
    "insertText": "GetParent(pId)"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (} return false ; } else { return true ; } } FbxInt)",
    "insertText": "GetChild(FbxInt pParentId=FBXSDK_PROPERTY_ID_ROOT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef PROPERTY_PAGE_SANITY_CHECK FbxInt ret0 = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(pParentId!=FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetMinimumPropertyId()",
    "kind": "Method",
    "detail": "Function (FbxInt lId =)",
    "insertText": "GetMinimumPropertyId(pParentId)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FbxInt lParentId =)",
    "insertText": "GetParent(lId)"
  },
  {
    "label": "GetPropertyEntryCount()",
    "kind": "Method",
    "detail": "Function (const FbxInt lLastId =)",
    "insertText": "GetPropertyEntryCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ret0 = lId<lLastId ? lId : FBXSDK_PROPERTY_ID_NULL ; } else { ret0 = FBXSDK_PROPERTY_ID_NULL ; } # endif FbxInt ret1 = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(pParentId != FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetMinimumPropertyIdAndEntry()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry ; FbxInt lId = pParentId ; do { lId =)",
    "insertText": "GetMinimumPropertyIdAndEntry(lId, &lEntry)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(lId != FBXSDK_PROPERTY_ID_NULL && lEntry->GetParentId() != pParentId)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (ret1 = lId ; } # ifdef PROPERTY_PAGE_SANITY_CHECK)",
    "insertText": "FBX_ASSERT(ret0==ret1)"
  },
  {
    "label": "GetSibling()",
    "kind": "Method",
    "detail": "Function (# endif return ret1 ; } FbxInt)",
    "insertText": "GetSibling(FbxInt pId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef PROPERTY_PAGE_SANITY_CHECK FbxInt pIdBackup = pId ; FbxInt ret0 = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(pId!=FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (FbxInt lParentId =)",
    "insertText": "GetParent(++pId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ret0 = pId<lLastId ? pId : FBXSDK_PROPERTY_ID_NULL ; } else { ret0 = FBXSDK_PROPERTY_ID_NULL ; } pId = pIdBackup ; # endif FbxInt ret1 = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(pId != FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetMinimumPropertyIdAndEntry()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry ; do { pId =)",
    "insertText": "GetMinimumPropertyIdAndEntry(pId, &lEntry)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(pId != FBXSDK_PROPERTY_ID_NULL && lEntry->GetParentId() != lReferenceParentId)"
  },
  {
    "label": "GetFirstDescendent()",
    "kind": "Method",
    "detail": "Function (# endif return ret1 ; } FbxInt)",
    "insertText": "GetFirstDescendent(FbxInt pAnscestorId=FBXSDK_PROPERTY_ID_ROOT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef PROPERTY_PAGE_SANITY_CHECK FbxInt ret0 = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(pAnscestorId!=FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetMinimumPropertyId()",
    "kind": "Method",
    "detail": "Function (FbxInt lId =)",
    "insertText": "GetMinimumPropertyId(pAnscestorId)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (ret0 = lId ; break ; } lParentId =)",
    "insertText": "GetParent(++lId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } # endif FbxInt ret1 = FBXSDK_PROPERTY_ID_NULL ; FbxInt lId = pAnscestorId ; FbxPropertyEntry* lEntry ;)",
    "insertText": "if(pAnscestorId != FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetNextDescendent()",
    "kind": "Method",
    "detail": "Function (# endif return ret1 ; } FbxInt)",
    "insertText": "GetNextDescendent(FbxInt pAnscestorId, FbxInt pId)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "FastFind()",
    "kind": "Method",
    "detail": "Function (# endif return ret1 ; } FbxInt)",
    "insertText": "FastFind(FbxInt pId, const char* pName, FbxPropertyPage* pTypeInfo, bool pCaseSensitive)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxInt lId = FBXSDK_PROPERTY_ID_NULL ; bool lSlowQuery = true ;)",
    "insertText": "if(mNameMap.mSecond.GetSize() > 0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (lSlowQuery = false ; NameMap::RecordType* lIterator = mNameMap . mSecond .)",
    "insertText": "Find(FbxNameMapKey( pId, pName ))"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (lId = FBXSDK_PROPERTY_ID_NULL ; } else { lId = lIterator ->)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (lSlowQuery = true ; FbxPropertyInfo* lPropertyInfo =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyInfo), lId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lSlowQuery = false ; } } } } })",
    "insertText": "if(!lSlowQuery)"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (lId =)",
    "insertText": "GetChild(pId)"
  },
  {
    "label": "lSearchSymbol()",
    "kind": "Method",
    "detail": "Function (FbxStringSymbol)",
    "insertText": "lSearchSymbol(pName)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} return FBXSDK_PROPERTY_ID_NULL ; } FbxInt)",
    "insertText": "Find(FbxInt pId, const char* pName, FbxPropertyPage* pTypeInfo, bool pCaseSensitive, const char* pChildrenSeparators)"
  },
  {
    "label": "strcspn()",
    "kind": "Method",
    "detail": "Function (FbxInt lId ; size_t lFoundIndex =)",
    "insertText": "strcspn(pName,pChildrenSeparators)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FbxString pRootName ; pRootName .)",
    "insertText": "Append(pName,lFoundIndex)"
  },
  {
    "label": "FastFind()",
    "kind": "Method",
    "detail": "Function (lId =)",
    "insertText": "FastFind(pId,pRootName.Buffer(),NULL,pCaseSensitive)"
  },
  {
    "label": "FastFind()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FastFind(pId,pName,pTypeInfo,pCaseSensitive)"
  },
  {
    "label": "AddEnumValue()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "AddEnumValue(FbxInt pId, const char* pStringValue)"
  },
  {
    "label": "InsertEnumValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertEnumValue(FbxInt pId, int pIndex, const char* pStringValue)"
  },
  {
    "label": "GetEnumCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetEnumCount(FbxInt pId)"
  },
  {
    "label": "SetEnumValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnumValue(FbxInt pId, int pIndex, const char* pStringValue)"
  },
  {
    "label": "RemoveEnumValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveEnumValue(FbxInt pId, int pIndex)"
  },
  {
    "label": "GetEnumValue()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "GetEnumValue(FbxInt pId,int pIndex)"
  },
  {
    "label": "ClearConnectCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearConnectCache(FbxInt pId)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage = 0 ; FbxPropertyConnect* lPropertyConnect =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyConnect),pId,&lReferencePage)"
  },
  {
    "label": "ClearConnectCache()",
    "kind": "Method",
    "detail": "Function (lPropertyConnect ->)",
    "insertText": "ClearConnectCache()"
  },
  {
    "label": "WipeAllConnections()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "WipeAllConnections(FbxInt pId)"
  },
  {
    "label": "ConnectSrc()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "ConnectSrc(FbxInt pDstId, FbxPropertyPage* pSrcPage, FbxInt pSrcId, FbxConnection::EType pType)"
  },
  {
    "label": "ChangePropertyEntryState()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lDstEntry =)",
    "insertText": "ChangePropertyEntryState(pDstId,FbxPropertyFlags::eOverride)"
  },
  {
    "label": "ChangePropertyEntryState()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lSrcEntry = pSrcPage ->)",
    "insertText": "ChangePropertyEntryState(pSrcId,FbxPropertyFlags::eOverride)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FbxPropertyConnect* lDstConnect = lDstEntry ->)",
    "insertText": "Get(FBX_TYPE(FbxPropertyConnect))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (lDstConnect =)",
    "insertText": "Create(this,pDstId)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lDstEntry ->)",
    "insertText": "Set(lDstConnect)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!lSrcConnect)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (lSrcConnect =)",
    "insertText": "Create(pSrcPage,pSrcId)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lSrcEntry ->)",
    "insertText": "Set(lSrcConnect)"
  },
  {
    "label": "ConnectSrc()",
    "kind": "Method",
    "detail": "Function (} return lDstConnect ->)",
    "insertText": "ConnectSrc(lSrcConnect,pType)"
  },
  {
    "label": "DisconnectSrc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DisconnectSrc(FbxInt pDstId,FbxPropertyPage* pSrcPage,FbxInt pSrcId)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lDstReferencePage = 0 ; FbxPropertyConnect* lDstConnect =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyConnect),pDstId,&lDstReferencePage)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lSrcReferencePage = 0 ; FbxPropertyConnect* lSrcConnect = pSrcPage ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyConnect),pSrcId,&lSrcReferencePage)"
  },
  {
    "label": "IsConnectedSrc()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsConnectedSrc(FbxInt pDstId, FbxPropertyPage* pSrcPage, FbxInt pSrcId)"
  },
  {
    "label": "GetSrcCount()",
    "kind": "Method",
    "detail": "Function (} return false ; } int)",
    "insertText": "GetSrcCount(FbxInt pId, FbxConnectionPointFilter* pFilter)"
  },
  {
    "label": "GetSrc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSrc(FbxInt pId, int pIndex, FbxConnectionPointFilter* pFilter, FbxPropertyPage** pSrcPage, FbxInt* pSrcId)"
  },
  {
    "label": "GetSrc()",
    "kind": "Method",
    "detail": "Function (FbxPropertyConnect* lSrc = lPropertyConnect ->)",
    "insertText": "GetSrc(pFilter,pIndex)"
  },
  {
    "label": "DisconnectDst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DisconnectDst(FbxInt pSrcId, FbxPropertyPage* pDstPage, FbxInt pDstId)"
  },
  {
    "label": "IsConnectedDst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConnectedDst(FbxInt pSrcId, FbxPropertyPage* pDstPage, FbxInt pDstId)"
  },
  {
    "label": "GetDstCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetDstCount(FbxInt pId, FbxConnectionPointFilter* pFilter)"
  },
  {
    "label": "GetDst()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDst(FbxInt pId, int pIndex, FbxConnectionPointFilter* pFilter, FbxPropertyPage** pDstPage, FbxInt* pDstId)"
  },
  {
    "label": "GetDst()",
    "kind": "Method",
    "detail": "Function (FbxPropertyConnect* lDst = lPropertyConnect ->)",
    "insertText": "GetDst(pFilter,pIndex)"
  },
  {
    "label": "GetMinMax()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetMinMax(FbxInt pId, FbxPropertyInfo::EValueIndex pValueId, void* pValue, EFbxType pValueType)"
  },
  {
    "label": "SetMinMax()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetMinMax(FbxInt pId, FbxPropertyInfo::EValueIndex pValueId, const void* pValue, EFbxType pValueType)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Get(FbxInt pId, void* pValue, EFbxType pValueType)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyValue* lPropertyValue =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyValue),pId)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Set(FbxInt pId, const void* pValue, EFbxType pValueType, bool pCheckValueEquality)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage = NULL ; FbxPropertyValue* lPropertyValue =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyValue),pId,&lReferencePage)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (union { void* lCurrentValue ; char buffer [)",
    "insertText": "sizeof(FbxDouble4x4)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FBX_ASSERT(sizeof(buffer) >= FbxTypeSizeOf(pValueType))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool lValuesEqual = false ; bool lValueChanged = false ;)",
    "insertText": "if(lReferencePage && lReferencePage != this)"
  },
  {
    "label": "FbxTypeAllocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxTypeAllocate(pValueType, lCurrentValue, sizeof(buffer))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (lPropertyValue ->)",
    "insertText": "Get(&lCurrentValue, pValueType)"
  },
  {
    "label": "FbxTypeCompare()",
    "kind": "Method",
    "detail": "Function (lValuesEqual =)",
    "insertText": "FbxTypeCompare(pValue, &lCurrentValue, pValueType)"
  },
  {
    "label": "FbxTypeDeallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxTypeDeallocate(pValueType, lCurrentValue, sizeof(buffer))"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (} } else { FbxPropertyPage* lReferencePage2 = NULL ; FbxPropertyValue* lPropertyValue2 = mInstanceOf ? mInstanceOf ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyValue),pId,&lReferencePage2)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyValue), pId, FbxPropertyFlags::eInherit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lValueChanged = true ; } } })",
    "insertText": "if(lValuesEqual)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyValue* lPropertyValue =)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyValue),pId,FbxPropertyFlags::eOverride)"
  },
  {
    "label": "GetValueInherit()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyFlags::EInheritType)",
    "insertText": "GetValueInherit(FbxInt pId, bool pCheckInstanceOf)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage = NULL ;)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyValue), pId, &lReferencePage)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyValue* lPropertyValue = lReferencePage -> mInstanceOf ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyValue), pId)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyValue), pId, pType)"
  },
  {
    "label": "GetDefaultValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDefaultValue(FbxInt pId, void* pValue, EFbxType pValueType)"
  },
  {
    "label": "GetFirstPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lReferencePage =)",
    "insertText": "GetFirstPropertyItem(pId, FBX_TYPE(FbxPropertyValue))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "Set(FbxInt pId, const T& pValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "Get(FbxInt pId, const T* pFBX_TYPE)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (T lValue ;)",
    "insertText": "Get(pId,&lValue,FbxTypeOf(lValue))"
  },
  {
    "label": "GetDataPtr()",
    "kind": "Method",
    "detail": "Function (mDataPtr = pDataPtr ; } void*)",
    "insertText": "GetDataPtr()"
  },
  {
    "label": "ChangePropertyEntryState()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lParentEntry = mInstanceOf ->)",
    "insertText": "ChangePropertyEntryState((FbxInt)i,FbxPropertyFlags::eOverride)"
  },
  {
    "label": "GetPropertyEntry()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry =)",
    "insertText": "GetPropertyEntry((FbxInt)i)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (lParentEntry =)",
    "insertText": "Create(lEntry->GetParentId(), 0, 0, 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (mInstanceOf -> mEntryMap .)",
    "insertText": "Insert(i, lParentEntry)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBX_ASSERT(lParentEntry)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lParentEntry ->)",
    "insertText": "Set(lEntry->Get(FBX_TYPE(FbxPropertyInfo)))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lParentEntry ->)",
    "insertText": "Set(lEntry->Get(FBX_TYPE(FbxPropertyValue)))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (lParentEntry ->)",
    "insertText": "Set(lEntry->Get(FBX_TYPE(FbxPropertyFlags)))"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyInfo), i,FbxPropertyFlags::eInherit)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyValue), i,FbxPropertyFlags::eInherit)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyFlags), i,FbxPropertyFlags::eInherit)"
  },
  {
    "label": "GetInstanceOf()",
    "kind": "Method",
    "detail": "Function (} } } const FbxPropertyPage*)",
    "insertText": "GetInstanceOf()"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lFoundIn = NULL ; FbxPropertyFlags* lPropertyFlags =)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyFlags), pId, &lFoundIn)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxPropertyFlags::EFlags lFlags = FbxPropertyFlags::eNone ;)",
    "insertText": "if(lPropertyFlags)"
  },
  {
    "label": "GetMergedFlags()",
    "kind": "Method",
    "detail": "Function (lFlags = lPropertyFlags ->)",
    "insertText": "GetMergedFlags(lFlags)"
  },
  {
    "label": "ModifyFlags()",
    "kind": "Method",
    "detail": "Function (} } return lFlags ; } bool)",
    "insertText": "ModifyFlags(FbxInt pId=FBXSDK_PROPERTY_ID_ROOT,FbxPropertyFlags::EFlags pFlags=FbxPropertyFlags::eNone,bool pValue=true,bool pCheckFlagEquality=true)"
  },
  {
    "label": "ModifyFlags()",
    "kind": "Method",
    "detail": "Function (lFlag ->)",
    "insertText": "ModifyFlags(pFlags, pValue)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyFlags* lInheritedFlags = mInstanceOf ? mInstanceOf ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyFlags), pId)"
  },
  {
    "label": "UnsetMask()",
    "kind": "Method",
    "detail": "Function (lFlag ->)",
    "insertText": "UnsetMask(pFlags)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (} } } FbxPropertyFlags* lPropertyFlags =)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyFlags), pId, FbxPropertyFlags::eOverride)"
  },
  {
    "label": "GetFlagsInheritType()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyFlags::EInheritType)",
    "insertText": "GetFlagsInheritType(FbxPropertyFlags::EFlags pFlags, bool pCheckInstanceOf, FbxInt pId=FBXSDK_PROPERTY_ID_ROOT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxPropertyPage* lFoundIn = NULL ; FbxPropertyFlags* lPropertyFlags = NULL ;)",
    "insertText": "if(FbxPropertyFlags::eOverride == pInheritType)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (FbxPropertyFlags::EFlags lParentValues = lParentFlags ->)",
    "insertText": "GetFlags()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (lPropertyFlags ->)",
    "insertText": "SetFlags(pFlags, lParentValues)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; } else)",
    "insertText": "if(FbxPropertyFlags::eInherit == pInheritType)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (mNameMap . mSecond .)",
    "insertText": "Reserve(20)"
  },
  {
    "label": "GetPropertyEntry()",
    "kind": "Method",
    "detail": "Function (FbxInt lFoundId = FBXSDK_PROPERTY_ID_ROOT ; FbxPropertyEntry* lEntry =)",
    "insertText": "GetPropertyEntry(lFoundId)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FbxPropertyInfo* lInfo = lEntry ->)",
    "insertText": "Get(FBX_TYPE(FbxPropertyInfo))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (mNameMap . mSecond .)",
    "insertText": "Insert(FbxNameMapKey(lEntry->GetParentId(), lInfo->GetName()), lFoundId)"
  },
  {
    "label": "GetMinimumPropertyIdAndEntry()",
    "kind": "Method",
    "detail": "Function (} lFoundId =)",
    "insertText": "GetMinimumPropertyIdAndEntry(lFoundId, &lEntry)"
  },
  {
    "label": "EndCreateOrFindProperty()",
    "kind": "Method",
    "detail": "Function (} mNameMap . mFirst + + ; } } void)",
    "insertText": "EndCreateOrFindProperty()"
  },
  {
    "label": "FbxPropertyPage()",
    "kind": "Method",
    "detail": "Function (} } protected :)",
    "insertText": "FbxPropertyPage(FbxPropertyPage* pInstanceOf=0) : mInstanceOf(0) , mDataPtr(0) , mPropNextId(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (mEntryMap .)",
    "insertText": "Reserve(32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mNameMap . mFirst = 0 ;)",
    "insertText": "if(!pInstanceOf)"
  },
  {
    "label": "FbxPropertyIdGenerator()",
    "kind": "Method",
    "detail": "Function (mPropNextId = FbxNew<)",
    "insertText": "FbxPropertyIdGenerator()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FBXSDK_PROPERTY_ID_NULL,\"\",eFbxUndefined)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} mInstanceOf = pInstanceOf ;)",
    "insertText": "if(mInstanceOf)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (mInstanceOf -> mInstances .)",
    "insertText": "Add(this)"
  },
  {
    "label": "FbxPropertyPage()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FbxPropertyPage(const char* pName, EFbxType pType) : mInstanceOf(0) , mDataPtr(0) , mPropNextId(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FBXSDK_PROPERTY_ID_NULL,pName,pType)"
  },
  {
    "label": "FbxPropertyPage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxPropertyPage(const char* pName, FbxPropertyPage* pTypeInfo) : mInstanceOf(0) , mDataPtr(0) , mPropNextId(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FBXSDK_PROPERTY_ID_NULL,pName,pTypeInfo)"
  },
  {
    "label": "FbxPropertyPage()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxPropertyPage()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i = 0,j = 0 ;)",
    "insertText": "for(i = 0; i < mInstances.GetCount(); ++i)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (mInstances [ i ] ->)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyInfo), (FbxInt)j, FbxPropertyFlags::eOverride)"
  },
  {
    "label": "ChangePropertyItemState()",
    "kind": "Method",
    "detail": "Function (mInstances [ i ] ->)",
    "insertText": "ChangePropertyItemState(FBX_TYPE(FbxPropertyValue), (FbxInt)j, FbxPropertyFlags::eOverride)"
  },
  {
    "label": "SetFlagsInheritType()",
    "kind": "Method",
    "detail": "Function (mInstances [ i ] ->)",
    "insertText": "SetFlagsInheritType(FbxPropertyFlags::eOverride, FbxPropertyFlags::eAllFlags, (FbxInt)j)"
  },
  {
    "label": "FbxMapDestroy()",
    "kind": "Method",
    "detail": "Function (} } mInstances [ i ] -> mInstanceOf = NULL ; })",
    "insertText": "FbxMapDestroy(mEntryMap)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int lIndex = mInstanceOf -> mInstances .)",
    "insertText": "Find(this)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (int lLastItem = mInstanceOf -> mInstances .)",
    "insertText": "GetCount()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (mInstanceOf -> mInstances .)",
    "insertText": "RemoveAt(lLastItem)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (mPropNextId = NULL ; mInstanceOf = NULL ; mInstances .)",
    "insertText": "Clear()"
  },
  {
    "label": "Is()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Is(FbxPropertyPage* pPage)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (FbxInt lMin = FBXSDK_PROPERTY_ID_NULL ; const EntryMap::RecordType* lElement = mEntryMap .)",
    "insertText": "UpperBound(pId)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (lMin = lElement ->)",
    "insertText": "GetKey()"
  },
  {
    "label": "GetMinimumPropertyId()",
    "kind": "Method",
    "detail": "Function (} FbxInt lParentMin = mInstanceOf ? mInstanceOf ->)",
    "insertText": "GetMinimumPropertyId(pId,false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool lParentNull = lParentMin = = FBXSDK_PROPERTY_ID_NULL ; bool lMinNull = lMin = = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(lParentNull && lMinNull)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FbxInt lFoundId = FBXSDK_PROPERTY_ID_NULL ; FbxPropertyEntry* lFoundEntry = NULL ;)",
    "insertText": "if(pId == FBXSDK_PROPERTY_ID_NULL)"
  },
  {
    "label": "GetMinimumPropertyIdAndEntry()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyEntry* lParentEntry = NULL ; FbxInt lParentMin = mInstanceOf ? mInstanceOf ->)",
    "insertText": "GetMinimumPropertyIdAndEntry(pId, &lParentEntry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool lParentNull = lParentMin = = FBXSDK_PROPERTY_ID_NULL ; bool lMinNull = lFoundId = = FBXSDK_PROPERTY_ID_NULL ;)",
    "insertText": "if(lMinNull && !lParentNull)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lFoundId = lParentMin ; lFoundEntry = lParentEntry ; } else)",
    "insertText": "if(!lMinNull && !lParentNull)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lFoundId = lFoundId<lParentMin ? lFoundId : lParentMin ; lFoundEntry = lFoundId<lParentMin ? lFoundEntry : lParentEntry ; })",
    "insertText": "if(pEntry)"
  },
  {
    "label": "Maximum()",
    "kind": "Method",
    "detail": "Function (int lCount = 0 ; const EntryMap::RecordType* lElement = mEntryMap .)",
    "insertText": "Maximum()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const EntryMap::RecordType* lElement = mEntryMap .)",
    "insertText": "Find(pIndex)"
  },
  {
    "label": "FbxPropertyPage()",
    "kind": "Method",
    "detail": "Function (* pFoundIn = const_cast<)",
    "insertText": "FbxPropertyPage(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pFoundIn)"
  },
  {
    "label": "GetPropertyEntry()",
    "kind": "Method",
    "detail": "Function (* pFoundIn = 0 ; } return mInstanceOf ? mInstanceOf ->)",
    "insertText": "GetPropertyEntry(pIndex,pFoundIn)"
  },
  {
    "label": "ChangePropertyEntryState()",
    "kind": "Method",
    "detail": "Function (} FbxPropertyEntry*)",
    "insertText": "ChangePropertyEntryState(FbxInt pIndex,FbxPropertyFlags::EInheritType pInheritType)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry =)",
    "insertText": "Create(lReferenceEntry->GetParentId(),0,0,0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (mEntryMap .)",
    "insertText": "Insert(pIndex, lEntry)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (mEntryMap .)",
    "insertText": "Remove(pIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } return 0 ; } FbxInt)",
    "insertText": "Add(FbxInt pParentId,FbxPropertyInfo* pInfo,FbxPropertyValue* pValue,FbxPropertyConnect* pConnect,bool pRecursive=true)"
  },
  {
    "label": "GetNextIdAndInc()",
    "kind": "Method",
    "detail": "Function (FbxInt lId = mPropNextId ->)",
    "insertText": "GetNextIdAndInc()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxPropertyEntry* lEntry =)",
    "insertText": "Create(pParentId,pInfo,pValue,pConnect)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FbxPropertyFlags* lFlags = lEntry ->)",
    "insertText": "Get(FBX_TYPE(FbxPropertyFlags))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (mEntryMap .)",
    "insertText": "Insert(lId, lEntry)"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (FbxInt lChildId ; lChildId = lTypeInfo ->)",
    "insertText": "GetChild()"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyInfo* lPropertyInfo = lTypeInfo ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyInfo),lChildId)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyValue* lPropertyValue = lTypeInfo ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyValue),lChildId)"
  },
  {
    "label": "GetPropertyItem()",
    "kind": "Method",
    "detail": "Function (FbxPropertyConnect* lPropertyConnect = lTypeInfo ->)",
    "insertText": "GetPropertyItem(FBX_TYPE(FbxPropertyConnect),lChildId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(lId, lPropertyInfo ? lPropertyInfo->Clone(this) : 0 , lPropertyValue ? lPropertyValue->Clone(this) : 0, lPropertyConnect ? lPropertyConnect->Clone(this) : 0)"
  },
  {
    "label": "GetSibling()",
    "kind": "Method",
    "detail": "Function (lChildId = lTypeInfo ->)",
    "insertText": "GetSibling(lChildId)"
  }
]