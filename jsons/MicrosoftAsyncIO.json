[
  {
    "label": "FMicrosoftReadRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicrosoftReadRequest"
  },
  {
    "label": "FMicrosoftAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicrosoftAsyncReadFileHandle"
  },
  {
    "label": "FMicrosoftReadRequestWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicrosoftReadRequestWorker"
  },
  {
    "label": "FMicrosoftSizeRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicrosoftSizeRequest"
  },
  {
    "label": "FMicrosoftFailedRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMicrosoftFailedRequest"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ProfilingDebugging / PlatformFileTrace . h \" PRAGMA_DISABLE_UNSAFE_TYPECAST_WARNINGS class FMicrosoftReadRequest ; class FMicrosoftAsyncReadFileHandle ; # if !)",
    "insertText": "defined(USE_WINAPI_CREATEFILE2)"
  },
  {
    "label": "FMicrosoftReadRequestWorker()",
    "kind": "Method",
    "detail": "Function (FMicrosoftReadRequest& ReadRequest ; public :)",
    "insertText": "FMicrosoftReadRequestWorker(FMicrosoftReadRequest* InReadRequest) : ReadRequest(*InReadRequest)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "GetIOPooledEvent()",
    "kind": "Method",
    "detail": "Function (} } ; TLockFreePointerListUnordered<void,PLATFORM_CACHE_LINE_SIZE> MicrosoftAsyncIOEventPool ; HANDLE)",
    "insertText": "GetIOPooledEvent()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (void* Popped = MicrosoftAsyncIOEventPool .)",
    "insertText": "Pop()"
  },
  {
    "label": "Popped()",
    "kind": "Method",
    "detail": "Function (HANDLE Result =)",
    "insertText": "Popped(HANDLE)UPTRINT(Popped)"
  },
  {
    "label": "CreateEvent()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "CreateEvent(nullptr, true, 0, nullptr)"
  },
  {
    "label": "FreeIOPooledEvent()",
    "kind": "Method",
    "detail": "Function (} return Result ; } void)",
    "insertText": "FreeIOPooledEvent(HANDLE ToFree)"
  },
  {
    "label": "ResetEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEvent(ToFree)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (MicrosoftAsyncIOEventPool .)",
    "insertText": "Push((void*)(UPTRINT)ToFree)"
  },
  {
    "label": "FMicrosoftReadRequest()",
    "kind": "Method",
    "detail": "Function (} class FMicrosoftReadRequest : public IAsyncReadRequest { FAsyncTask<FMicrosoftReadRequestWorker>* Task ; FMicrosoftAsyncReadFileHandle* Owner ; int64 Offset ; int64 BytesToRead ; int64 FileSize ; HANDLE FileHandle ; EAsyncIOPriorityAndFlags PriorityAndFlags ; uint8* TempMemory ; int64 AlignedOffset ; int64 AlignedBytesToRead ; OVERLAPPED OverlappedIO ; public :)",
    "insertText": "FMicrosoftReadRequest(FMicrosoftAsyncReadFileHandle* InOwner, FAsyncFileCallBack* CompleteCallback, uint8* InUserSuppliedMemory, int64 InOffset, int64 InBytesToRead, int64 InFileSize, HANDLE InHandle, EAsyncIOPriorityAndFlags InPriorityAndFlags) : IAsyncReadRequest(CompleteCallback, false, InUserSuppliedMemory) , Task(nullptr) , Owner(InOwner) , Offset(InOffset) , BytesToRead(InBytesToRead) , FileSize(InFileSize) , FileHandle(InHandle) , PriorityAndFlags(InPriorityAndFlags) , TempMemory(nullptr)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(OverlappedIO)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (OverlappedIO . hEvent = INVALID_HANDLE_VALUE ;)",
    "insertText": "check(Offset >= 0 && BytesToRead > 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (BytesToRead = FileSize - Offset ;)",
    "insertText": "check(BytesToRead > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} AlignedOffset = Offset ; AlignedBytesToRead = BytesToRead ;)",
    "insertText": "if(CheckForPrecache())"
  },
  {
    "label": "SetComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComplete()"
  },
  {
    "label": "AlignDown()",
    "kind": "Method",
    "detail": "Function (} else { AlignedOffset =)",
    "insertText": "AlignDown(Offset, 4096)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (AlignedBytesToRead =)",
    "insertText": "Align(Offset + BytesToRead, 4096)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bMemoryHasBeenAcquired = bUserSuppliedMemory ;)",
    "insertText": "if(bUserSuppliedMemory && (AlignedOffset != Offset || AlignedBytesToRead != BytesToRead))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumMessages = 0 ;)",
    "insertText": "if(NumMessages < 10)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (NumMessages + + ;)",
    "insertText": "UE_LOG(LogTemp, Log, TEXT(\"FMicrosoftReadRequest request was not aligned. This is expected with loose files, but not a pak file.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(NumMessages == 10)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (NumMessages + + ;)",
    "insertText": "UE_LOG(LogTemp, Log, TEXT(\"LAST NOTIFICATION THIS RUN: FMicrosoftReadRequest request was not aligned.\"))"
  },
  {
    "label": "TempMemory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TempMemory(uint8*)FMemory::Malloc(AlignedBytesToRead)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_AsyncFileMemory, AlignedBytesToRead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!bMemoryHasBeenAcquired)"
  },
  {
    "label": "Memory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memory(uint8*)FMemory::Malloc(AlignedBytesToRead)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Memory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 NumRead = 0 ;)",
    "insertText": "if(Offset + BytesToRead > FileSize || AlignedOffset < 0 || AlignedBytesToRead < 1)"
  },
  {
    "label": "TRACE_PLATFORMFILE_BEGIN_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_PLATFORMFILE_BEGIN_READ(&OverlappedIO, FileHandle, AlignedOffset, AlignedBytesToRead)"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (uint32 ErrorCode =)",
    "insertText": "GetLastError()"
  },
  {
    "label": "FMicrosoftReadRequestWorker()",
    "kind": "Method",
    "detail": "Function (} } Task = new FAsyncTask<)",
    "insertText": "FMicrosoftReadRequestWorker(this)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "FMicrosoftReadRequest()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FMicrosoftReadRequest()"
  },
  {
    "label": "CheckForPrecache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForPrecache()"
  },
  {
    "label": "GetFileNameForErrorMessagesAndPanicRetry()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetFileNameForErrorMessagesAndPanicRetry()"
  },
  {
    "label": "PerformRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformRequest()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if 0)",
    "insertText": "if(!HasOverlappedIoCompleted(&OverlappedIO))"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(OverlappedIO.hEvent, 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "check(AlignedOffset <= Offset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 BytesRead = 0 ; bool bFailed = false ; FString FailedMessage ; bool GTriggerFailedMicrosoftRead ;)",
    "insertText": "if(GTriggerFailedMicrosoftRead || !GetOverlappedResult(FileHandle, &OverlappedIO, (LPDWORD)&BytesRead, TRUE))"
  },
  {
    "label": "TRACE_PLATFORMFILE_END_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_PLATFORMFILE_END_READ(&OverlappedIO, 0)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FailedMessage =)",
    "insertText": "Printf(TEXT(\"FMicrosoftReadRequest GetOverlappedResult Code = %x Offset = %lld Size = %lld FileSize = %lld File = %s\"), ErrorCode, AlignedOffset, AlignedBytesToRead, FileSize, GetFileNameForErrorMessagesAndPanicRetry())"
  },
  {
    "label": "TRACE_PLATFORMFILE_END_READ()",
    "kind": "Method",
    "detail": "Function (bFailed = true ; } else {)",
    "insertText": "TRACE_PLATFORMFILE_END_READ(&OverlappedIO, BytesRead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bFailed && int64(BytesRead) < BytesToRead + (Offset - AlignedOffset))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FailedMessage =)",
    "insertText": "Printf(TEXT(\"FMicrosoftReadRequest Short Read Code = %x BytesRead = %lld Offset = %lld AlignedOffset = %lld BytesToRead = %lld Size = %lld File = %s\"), ErrorCode, int64(BytesRead), Offset, AlignedOffset, BytesToRead, FileSize, GetFileNameForErrorMessagesAndPanicRetry())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bFailed = true ; })",
    "insertText": "if(bFailed)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# if USE_WINAPI_CREATEFILE2 DWORD Access = GENERIC_READ ; DWORD WinFlags = FILE_SHARE_READ ; DWORD Create = OPEN_EXISTING ; CREATEFILE2_EXTENDED_PARAMETERS Params = { 0 } ; Params . dwSize =)",
    "insertText": "sizeof(CREATEFILE2_EXTENDED_PARAMETERS)"
  },
  {
    "label": "CreateFile2()",
    "kind": "Method",
    "detail": "Function (Params . dwFileAttributes = FILE_ATTRIBUTE_READONLY ; Params . dwFileFlags = FILE_FLAG_NO_BUFFERING ; Params . dwSecurityQosFlags = SECURITY_ANONYMOUS ; HANDLE Handle =)",
    "insertText": "CreateFile2(GetFileNameForErrorMessagesAndPanicRetry(), Access, WinFlags, Create, &Params)"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (# else uint32 Access = GENERIC_READ ; uint32 WinFlags = FILE_SHARE_READ ; uint32 Create = OPEN_EXISTING ; HANDLE Handle =)",
    "insertText": "CreateFileW(GetFileNameForErrorMessagesAndPanicRetry(), Access, WinFlags, NULL, Create, FILE_ATTRIBUTE_NORMAL, NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(Handle != INVALID_HANDLE_VALUE)"
  },
  {
    "label": "CA_SUPPRESS()",
    "kind": "Method",
    "detail": "Function (ULARGE_INTEGER LI ; LI . QuadPart = AlignedOffset ;)",
    "insertText": "CA_SUPPRESS(6001)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ReadFile(Handle, TempMemory ? TempMemory : Memory, AlignedBytesToRead, (LPDWORD)&BytesRead, nullptr) && !(int64(BytesRead) < BytesToRead + (Offset - AlignedOffset)))"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CloseHandle(Handle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bFailed && Try < 9)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(.2f)"
  },
  {
    "label": "FinalizeReadAndSetComplete()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FinalizeReadAndSetComplete()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Memory, TempMemory + (Offset - AlignedOffset), BytesToRead)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(TempMemory)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (TempMemory = nullptr ;)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_AsyncFileMemory, AlignedBytesToRead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(AlignedOffset != Offset)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memmove(Memory, Memory + (Offset - AlignedOffset), BytesToRead)"
  },
  {
    "label": "GetContainedSubblock()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetContainedSubblock(uint8* UserSuppliedMemory, int64 InOffset, int64 InBytesToRead)"
  },
  {
    "label": "UserSuppliedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UserSuppliedMemory(uint8*)FMemory::Malloc(InBytesToRead)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_AsyncFileMemory, InBytesToRead)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Memcpy(UserSuppliedMemory, Memory + InOffset - Offset, InBytesToRead)"
  },
  {
    "label": "StartBackgroundTask()",
    "kind": "Method",
    "detail": "Function (Task ->)",
    "insertText": "StartBackgroundTask(GIOThreadPool)"
  },
  {
    "label": "StartSynchronousTask()",
    "kind": "Method",
    "detail": "Function (} else { Task ->)",
    "insertText": "StartSynchronousTask()"
  },
  {
    "label": "WaitCompletionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitCompletionImpl(0.0f)"
  },
  {
    "label": "WaitCompletionImpl()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "WaitCompletionImpl(float TimeLimitSeconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult ;)",
    "insertText": "if(TimeLimitSeconds <= 0.0f)"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (Task ->)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "WaitCompletionWithTimeout()",
    "kind": "Method",
    "detail": "Function (bResult = true ; } else { bResult = Task ->)",
    "insertText": "WaitCompletionWithTimeout(TimeLimitSeconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bResult)"
  },
  {
    "label": "CancelImpl()",
    "kind": "Method",
    "detail": "Function (delete Task ; Task = nullptr ; } } } void)",
    "insertText": "CancelImpl()"
  },
  {
    "label": "ReleaseMemoryOwnershipImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseMemoryOwnershipImpl()"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_AsyncFileMemory, BytesToRead)"
  },
  {
    "label": "FMicrosoftSizeRequest()",
    "kind": "Method",
    "detail": "Function (} class FMicrosoftSizeRequest : public IAsyncReadRequest { public :)",
    "insertText": "FMicrosoftSizeRequest(FAsyncFileCallBack* CompleteCallback, int64 InFileSize) : IAsyncReadRequest(CompleteCallback, true, nullptr)"
  },
  {
    "label": "FMicrosoftFailedRequest()",
    "kind": "Method",
    "detail": "Function (} } ; class FMicrosoftFailedRequest : public IAsyncReadRequest { public :)",
    "insertText": "FMicrosoftFailedRequest(FAsyncFileCallBack* CompleteCallback) : IAsyncReadRequest(CompleteCallback, false, nullptr)"
  },
  {
    "label": "FMicrosoftAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (} } ; class FMicrosoftAsyncReadFileHandle final : public IAsyncReadFileHandle { public : HANDLE FileHandle ; int64 FileSize ; FString FileNameForErrorMessagesAndPanicRetry ; private : TArray<FMicrosoftReadRequest*> LiveRequests ; FCriticalSection LiveRequestsCritical ; FCriticalSection HandleCacheCritical ; public :)",
    "insertText": "FMicrosoftAsyncReadFileHandle(HANDLE InFileHandle, const TCHAR* InFileNameForErrorMessagesAndPanicRetry) : FileHandle(InFileHandle) , FileSize(-1) , FileNameForErrorMessagesAndPanicRetry(InFileNameForErrorMessagesAndPanicRetry)"
  },
  {
    "label": "GetFileSizeEx()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER LI ;)",
    "insertText": "GetFileSizeEx(FileHandle, &LI)"
  },
  {
    "label": "FMicrosoftAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (FileSize = LI . QuadPart ; } } ~)",
    "insertText": "FMicrosoftAsyncReadFileHandle()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK FScopeLock)",
    "insertText": "Lock(&LiveRequestsCritical)"
  },
  {
    "label": "TRACE_PLATFORMFILE_BEGIN_CLOSE()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "TRACE_PLATFORMFILE_BEGIN_CLOSE(FileHandle)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (BOOL CloseResult =)",
    "insertText": "CloseHandle(FileHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORMFILETRACE_ENABLED)",
    "insertText": "if(CloseResult)"
  },
  {
    "label": "TRACE_PLATFORMFILE_END_CLOSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_PLATFORMFILE_END_CLOSE(FileHandle)"
  },
  {
    "label": "TRACE_PLATFORMFILE_FAIL_CLOSE()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "TRACE_PLATFORMFILE_FAIL_CLOSE(FileHandle)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "else(void)"
  },
  {
    "label": "RemoveRequest()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "RemoveRequest(FMicrosoftReadRequest* Req)"
  },
  {
    "label": "GetPrecachedBlock()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetPrecachedBlock(uint8* UserSuppliedMemory, int64 InOffset, int64 InBytesToRead)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint8* Result = nullptr ;)",
    "insertText": "for(FMicrosoftReadRequest* Req : LiveRequests)"
  },
  {
    "label": "GetContainedSubblock()",
    "kind": "Method",
    "detail": "Function (Result = Req ->)",
    "insertText": "GetContainedSubblock(UserSuppliedMemory, InOffset, InBytesToRead)"
  },
  {
    "label": "SizeRequest()",
    "kind": "Method",
    "detail": "Function (break ; } } return Result ; } IAsyncReadRequest*)",
    "insertText": "SizeRequest(FAsyncFileCallBack* CompleteCallback = nullptr)"
  },
  {
    "label": "ReadRequest()",
    "kind": "Method",
    "detail": "Function (} IAsyncReadRequest*)",
    "insertText": "ReadRequest(int64 Offset, int64 BytesToRead, EAsyncIOPriorityAndFlags PriorityAndFlags = AIOP_Normal, FAsyncFileCallBack* CompleteCallback = nullptr, uint8* UserSuppliedMemory = nullptr)"
  },
  {
    "label": "FMicrosoftReadRequest()",
    "kind": "Method",
    "detail": "Function (FMicrosoftReadRequest* Result = new)",
    "insertText": "FMicrosoftReadRequest(this, CompleteCallback, UserSuppliedMemory, Offset, BytesToRead, FileSize, FileHandle, PriorityAndFlags)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LiveRequests .)",
    "insertText": "Add(Result)"
  },
  {
    "label": "FMicrosoftFailedRequest()",
    "kind": "Method",
    "detail": "Function (} return Result ; } return new)",
    "insertText": "FMicrosoftFailedRequest(CompleteCallback)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete Task ; })",
    "insertText": "if(OverlappedIO.hEvent != INVALID_HANDLE_VALUE)"
  },
  {
    "label": "FreeIOPooledEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeIOPooledEvent(OverlappedIO.hEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OverlappedIO . hEvent = INVALID_HANDLE_VALUE ; })",
    "insertText": "if(Memory)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Memory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Memory = nullptr ; })",
    "insertText": "if(TempMemory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TempMemory = nullptr ; })",
    "insertText": "if(PriorityAndFlags & AIOP_FLAG_PRECACHE)"
  },
  {
    "label": "RemoveRequest()",
    "kind": "Method",
    "detail": "Function (Owner ->)",
    "insertText": "RemoveRequest(this)"
  },
  {
    "label": "GetPrecachedBlock()",
    "kind": "Method",
    "detail": "Function (uint8* Result = Owner ->)",
    "insertText": "GetPrecachedBlock(Memory, Offset, BytesToRead)"
  }
]