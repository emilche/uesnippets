[
  {
    "label": "FakeVoiceMediaChannelForStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVoiceMediaChannelForStats"
  },
  {
    "label": "FakeVideoMediaChannelForStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoMediaChannelForStats"
  },
  {
    "label": "VoiceChannelForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceChannelForTesting"
  },
  {
    "label": "VideoChannelForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoChannelForTesting"
  },
  {
    "label": "FakePeerConnectionForStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePeerConnectionForStats"
  },
  {
    "label": "FakeVoiceMediaChannelForStats()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_FAKE_PEER_CONNECTION_FOR_STATS_H_ # define PC_TEST_FAKE_PEER_CONNECTION_FOR_STATS_H_ # include<map> # include<memory> # include<set> # include<string> # include<utility> # include<vector> # include \" media / base / fake_media_engine . h \" # include \" pc / channel . h \" # include \" pc / stream_collection . h \" # include \" pc / test / fake_data_channel_controller . h \" # include \" pc / test / fake_peer_connection_base . h \" namespace webrtc { class FakeVoiceMediaChannelForStats : public cricket::FakeVoiceMediaChannel { public :)",
    "insertText": "FakeVoiceMediaChannelForStats(TaskQueueBase* network_thread) : cricket::FakeVoiceMediaChannel(nullptr, cricket::AudioOptions(), network_thread)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStats(const cricket::VoiceMediaInfo& voice_info)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (stats_ = voice_info ; } bool)",
    "insertText": "GetStats(cricket::VoiceMediaInfo* info, bool get_and_clear_legacy_stats)"
  },
  {
    "label": "FakeVideoMediaChannelForStats()",
    "kind": "Method",
    "detail": "Function (* info =* stats_ ; return true ; } return false ; } private : absl::optional<cricket::VoiceMediaInfo> stats_ ; } ; class FakeVideoMediaChannelForStats : public cricket::FakeVideoMediaChannel { public :)",
    "insertText": "FakeVideoMediaChannelForStats(TaskQueueBase* network_thread) : cricket::FakeVideoMediaChannel(nullptr, cricket::VideoOptions(), network_thread)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStats(const cricket::VideoMediaInfo& video_info)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (stats_ = video_info ; } bool)",
    "insertText": "GetStats(cricket::VideoMediaInfo* info)"
  },
  {
    "label": "VoiceChannelForTesting()",
    "kind": "Method",
    "detail": "Function (* info =* stats_ ; return true ; } return false ; } private : absl::optional<cricket::VideoMediaInfo> stats_ ; } ; bool kDefaultRtcpMuxRequired = true ; bool kDefaultSrtpRequired = true ; class VoiceChannelForTesting : public cricket::VoiceChannel { public :)",
    "insertText": "VoiceChannelForTesting(rtc::Thread* worker_thread, rtc::Thread* network_thread, rtc::Thread* signaling_thread, std::unique_ptr<cricket::VoiceMediaChannel> channel, const std::string& content_name, bool srtp_required, webrtc::CryptoOptions crypto_options, rtc::UniqueRandomIdGenerator* ssrc_generator, std::string transport_name) : VoiceChannel(worker_thread, network_thread, signaling_thread, std::move(channel), content_name, srtp_required, std::move(crypto_options), ssrc_generator), test_transport_name_(std::move(transport_name))"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (} private : absl::string_view)",
    "insertText": "transport_name()"
  },
  {
    "label": "FakePeerConnectionForStats()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakePeerConnectionForStats()"
  },
  {
    "label": "internal()",
    "kind": "Method",
    "detail": "Function (transceiver ->)",
    "insertText": "internal()->ClearChannel()"
  },
  {
    "label": "MakeDependencies()",
    "kind": "Method",
    "detail": "Function (} } PeerConnectionFactoryDependencies)",
    "insertText": "MakeDependencies()"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (PeerConnectionFactoryDependencies dependencies ; dependencies . network_thread = rtc::)",
    "insertText": "Current()"
  },
  {
    "label": "FakeMediaEngine()",
    "kind": "Method",
    "detail": "Function (dependencies . media_engine = std::make_unique<)",
    "insertText": "FakeMediaEngine()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (auto sender_proxy = RtpSenderProxyWithInternal<RtpSenderInternal)",
    "insertText": "Create(signaling_thread_, sender)"
  },
  {
    "label": "GetOrCreateFirstTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrCreateFirstTransceiverOfType(sender->media_type()) ->internal() ->AddSender(sender_proxy)"
  },
  {
    "label": "GetOrCreateFirstTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrCreateFirstTransceiverOfType(sender->media_type()) ->internal() ->RemoveSender(sender.get())"
  },
  {
    "label": "AddReceiver()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<RtpReceiverInterface>)",
    "insertText": "AddReceiver(rtc::scoped_refptr<RtpReceiverInternal> receiver)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (auto receiver_proxy = RtpReceiverProxyWithInternal<RtpReceiverInternal)",
    "insertText": "Create(signaling_thread_, worker_thread_, receiver)"
  },
  {
    "label": "GetOrCreateFirstTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrCreateFirstTransceiverOfType(receiver->media_type()) ->internal() ->AddReceiver(receiver_proxy)"
  },
  {
    "label": "GetOrCreateFirstTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrCreateFirstTransceiverOfType(receiver->media_type()) ->internal() ->RemoveReceiver(receiver.get())"
  },
  {
    "label": "AddVoiceChannel()",
    "kind": "Method",
    "detail": "Function (} FakeVoiceMediaChannelForStats*)",
    "insertText": "AddVoiceChannel(const std::string& mid, const std::string& transport_name, cricket::VoiceMediaInfo initial_stats = cricket::VoiceMediaInfo())"
  },
  {
    "label": "FakeVoiceMediaChannelForStats()",
    "kind": "Method",
    "detail": "Function (auto voice_media_channel = std::make_unique<)",
    "insertText": "FakeVoiceMediaChannelForStats(network_thread_)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (auto* voice_media_channel_ptr = voice_media_channel .)",
    "insertText": "get()"
  },
  {
    "label": "VoiceChannelForTesting()",
    "kind": "Method",
    "detail": "Function (auto voice_channel = std::make_unique<)",
    "insertText": "VoiceChannelForTesting(worker_thread_, network_thread_, signaling_thread_, std::move(voice_media_channel), mid, kDefaultSrtpRequired, webrtc::CryptoOptions(), context_->ssrc_generator(), transport_name)"
  },
  {
    "label": "GetOrCreateFirstTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (auto transceiver =)",
    "insertText": "GetOrCreateFirstTransceiverOfType(cricket::MEDIA_TYPE_AUDIO) ->internal()"
  },
  {
    "label": "CreateTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (transceiver =)",
    "insertText": "CreateTransceiverOfType(cricket::MEDIA_TYPE_AUDIO)->internal()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTC_DCHECK(!transceiver->channel())"
  },
  {
    "label": "SetChannel()",
    "kind": "Method",
    "detail": "Function (transceiver ->)",
    "insertText": "SetChannel(std::move(voice_channel), [](const std::string&) { return nullptr; })"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (voice_media_channel_ptr ->)",
    "insertText": "SetStats(initial_stats)"
  },
  {
    "label": "FakeVideoMediaChannelForStats()",
    "kind": "Method",
    "detail": "Function (auto video_media_channel = std::make_unique<)",
    "insertText": "FakeVideoMediaChannelForStats(network_thread_)"
  },
  {
    "label": "VideoChannelForTesting()",
    "kind": "Method",
    "detail": "Function (auto video_channel = std::make_unique<)",
    "insertText": "VideoChannelForTesting(worker_thread_, network_thread_, signaling_thread_, std::move(video_media_channel), mid, kDefaultSrtpRequired, webrtc::CryptoOptions(), context_->ssrc_generator(), transport_name)"
  },
  {
    "label": "GetOrCreateFirstTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (auto transceiver =)",
    "insertText": "GetOrCreateFirstTransceiverOfType(cricket::MEDIA_TYPE_VIDEO) ->internal()"
  },
  {
    "label": "CreateTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (transceiver =)",
    "insertText": "CreateTransceiverOfType(cricket::MEDIA_TYPE_VIDEO)->internal()"
  },
  {
    "label": "SetChannel()",
    "kind": "Method",
    "detail": "Function (transceiver ->)",
    "insertText": "SetChannel(std::move(video_channel), [](const std::string&) { return nullptr; })"
  },
  {
    "label": "AddSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSctpDataChannel(label, InternalDataChannelInit())"
  },
  {
    "label": "AddSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSctpDataChannel(const std::string& label, const InternalDataChannelInit& init)"
  },
  {
    "label": "AddSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSctpDataChannel(SctpDataChannel::Create(&data_channel_controller_, label, init, rtc::Thread::Current(), rtc::Thread::Current()))"
  },
  {
    "label": "AddSctpDataChannel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSctpDataChannel(rtc::scoped_refptr<SctpDataChannel> data_channel)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (sctp_data_channels_ .)",
    "insertText": "push_back(data_channel)"
  },
  {
    "label": "SetTransportStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransportStats(const std::string& transport_name, const cricket::TransportChannelStats& channel_stats)"
  },
  {
    "label": "SetTransportStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransportStats(transport_name, std::vector<cricket::TransportChannelStats>{channel_stats})"
  },
  {
    "label": "SetTransportStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransportStats(const std::string& transport_name, const std::vector<cricket::TransportChannelStats>& channel_stats_list)"
  },
  {
    "label": "SetCallStats()",
    "kind": "Method",
    "detail": "Function (cricket::TransportStats transport_stats ; transport_stats . transport_name = transport_name ; transport_stats . channel_stats = channel_stats_list ; transport_stats_by_name_ [ transport_name ] = transport_stats ; } void)",
    "insertText": "SetCallStats(const Call::Stats& call_stats)"
  },
  {
    "label": "SetLocalCertificate()",
    "kind": "Method",
    "detail": "Function (call_stats_ = call_stats ; } void)",
    "insertText": "SetLocalCertificate(const std::string& transport_name, rtc::scoped_refptr<rtc::RTCCertificate> certificate)"
  },
  {
    "label": "SetRemoteCertChain()",
    "kind": "Method",
    "detail": "Function (local_certificates_by_transport_ [ transport_name ] = certificate ; } void)",
    "insertText": "SetRemoteCertChain(const std::string& transport_name, std::unique_ptr<rtc::SSLCertChain> chain)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (remote_cert_chains_by_transport_ [ transport_name ] =)",
    "insertText": "move(chain)"
  },
  {
    "label": "local_streams()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<StreamCollectionInterface>)",
    "insertText": "local_streams()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpSenderInterface>> senders ;)",
    "insertText": "for(auto transceiver : transceivers_)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (senders .)",
    "insertText": "push_back(sender)"
  },
  {
    "label": "GetReceivers()",
    "kind": "Method",
    "detail": "Function (} } return senders ; } std::vector<rtc::scoped_refptr<RtpReceiverInterface>>)",
    "insertText": "GetReceivers()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (receivers .)",
    "insertText": "push_back(receiver)"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (} } return receivers ; } rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<DataChannelStats> stats ;)",
    "insertText": "for(const auto& channel : sctp_data_channels_) stats.push_back(channel->GetStats())"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread_)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,cricket::TransportStats> transport_stats_by_name ;)",
    "insertText": "for(const std::string& transport_name : transport_names)"
  },
  {
    "label": "GetTransportStatsByName()",
    "kind": "Method",
    "detail": "Function (transport_stats_by_name [ transport_name ] =)",
    "insertText": "GetTransportStatsByName(transport_name)"
  },
  {
    "label": "GetCallStats()",
    "kind": "Method",
    "detail": "Function (} return transport_stats_by_name ; } Call::Stats)",
    "insertText": "GetCallStats()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = local_certificates_by_transport_ .)",
    "insertText": "find(transport_name)"
  },
  {
    "label": "GetRemoteSSLCertChain()",
    "kind": "Method",
    "detail": "Function (* certificate = it -> second ; return true ; } else { return false ; } } std::unique_ptr<rtc::SSLCertChain>)",
    "insertText": "GetRemoteSSLCertChain(const std::string& transport_name)"
  },
  {
    "label": "GetTransportStatsByName()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } } private : cricket::TransportStats)",
    "insertText": "GetTransportStatsByName(const std::string& transport_name)"
  },
  {
    "label": "CreateTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "CreateTransceiverOfType(cricket::MediaType media_type)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (auto transceiver = RtpTransceiverProxyWithInternal<RtpTransceiver)",
    "insertText": "Create(signaling_thread_, rtc::make_ref_counted<RtpTransceiver>(media_type, context_.get()))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (transceivers_ .)",
    "insertText": "push_back(transceiver)"
  }
]