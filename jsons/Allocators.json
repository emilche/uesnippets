[
  {
    "label": "CrtAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CrtAllocator"
  },
  {
    "label": "MemoryPoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryPoolAllocator"
  },
  {
    "label": "ChunkHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChunkHeader"
  },
  {
    "label": "SharedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SharedData"
  },
  {
    "label": "IsRefCounted",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRefCounted"
  },
  {
    "label": "StdAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StdAllocator"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_ALLOCATORS_H_ # define RAPIDJSON_ALLOCATORS_H_ # include \" rapidjson . h \" # include \" internal / meta . h \" # include<memory> # include<limits> # if RAPIDJSON_HAS_CXX11 # include<type_traits> # endif RAPIDJSON_NAMESPACE_BEGIN # ifndef RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY # define)",
    "insertText": "RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY(64 * 1024)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (public : const bool kNeedFree = true ; void*)",
    "insertText": "Malloc(size_t size)"
  },
  {
    "label": "RAPIDJSON_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_FREE(originalPtr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(void *ptr)"
  },
  {
    "label": "RAPIDJSON_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_FREE(ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const CrtAllocator&)"
  },
  {
    "label": "RAPIDJSON_ALIGN()",
    "kind": "Method",
    "detail": "Function (const size_t SIZEOF_CHUNK_HEADER =)",
    "insertText": "RAPIDJSON_ALIGN(sizeof(ChunkHeader))"
  },
  {
    "label": "GetChunkHead()",
    "kind": "Method",
    "detail": "Function (ChunkHeader*)",
    "insertText": "GetChunkHead(SharedData *shared)"
  },
  {
    "label": "GetChunkBuffer()",
    "kind": "Method",
    "detail": "Function (} uint8_t*)",
    "insertText": "GetChunkBuffer(SharedData *shared)"
  },
  {
    "label": "MemoryPoolAllocator()",
    "kind": "Method",
    "detail": "Function (} const size_t kDefaultChunkCapacity = RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY ; public : const bool kNeedFree = false ; const bool kRefCounted = true ;)",
    "insertText": "MemoryPoolAllocator(size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) : chunk_capacity_(chunkSize), baseAllocator_(baseAllocator ? baseAllocator : RAPIDJSON_NEW(BaseAllocator)()), shared_(static_cast<SharedData*>(baseAllocator_ ? baseAllocator_->Malloc(SIZEOF_SHARED_DATA + SIZEOF_CHUNK_HEADER) : 0))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(baseAllocator_ != 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(shared_ != 0)"
  },
  {
    "label": "GetChunkHead()",
    "kind": "Method",
    "detail": "Function (shared_ -> ownBaseAllocator = 0 ; } else { shared_ -> ownBaseAllocator = baseAllocator_ ; } shared_ -> chunkHead =)",
    "insertText": "GetChunkHead(shared_)"
  },
  {
    "label": "MemoryPoolAllocator()",
    "kind": "Method",
    "detail": "Function (shared_ -> chunkHead -> capacity = 0 ; shared_ -> chunkHead -> size = 0 ; shared_ -> chunkHead -> next = 0 ; shared_ -> ownBuffer = true ; shared_ -> refcount = 1 ; })",
    "insertText": "MemoryPoolAllocator(void *buffer, size_t size, size_t chunkSize = kDefaultChunkCapacity, BaseAllocator* baseAllocator = 0) : chunk_capacity_(chunkSize), baseAllocator_(baseAllocator), shared_(static_cast<SharedData*>(AlignBuffer(buffer, size)))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(size >= SIZEOF_SHARED_DATA + SIZEOF_CHUNK_HEADER)"
  },
  {
    "label": "MemoryPoolAllocator()",
    "kind": "Method",
    "detail": "Function (shared_ -> chunkHead -> capacity = size - SIZEOF_SHARED_DATA - SIZEOF_CHUNK_HEADER ; shared_ -> chunkHead -> size = 0 ; shared_ -> chunkHead -> next = 0 ; shared_ -> ownBaseAllocator = 0 ; shared_ -> ownBuffer = false ; shared_ -> refcount = 1 ; })",
    "insertText": "MemoryPoolAllocator(const MemoryPoolAllocator& rhs) RAPIDJSON_NOEXCEPT : chunk_capacity_(rhs.chunk_capacity_), baseAllocator_(rhs.baseAllocator_), shared_(rhs.shared_)"
  },
  {
    "label": "RAPIDJSON_NOEXCEPT_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_NOEXCEPT_ASSERT(shared_->refcount > 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + shared_ -> refcount ; } MemoryPoolAllocator&)",
    "insertText": "operator(const MemoryPoolAllocator& rhs)"
  },
  {
    "label": "RAPIDJSON_NOEXCEPT_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_NOEXCEPT_ASSERT(rhs.shared_->refcount > 0)"
  },
  {
    "label": "MemoryPoolAllocator()",
    "kind": "Method",
    "detail": "Function (+ + rhs . shared_ -> refcount ; this -> ~)",
    "insertText": "MemoryPoolAllocator()"
  },
  {
    "label": "MemoryPoolAllocator()",
    "kind": "Method",
    "detail": "Function (baseAllocator_ = rhs . baseAllocator_ ; chunk_capacity_ = rhs . chunk_capacity_ ; shared_ = rhs . shared_ ; return* this ; } # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "MemoryPoolAllocator(MemoryPoolAllocator&& rhs) RAPIDJSON_NOEXCEPT : chunk_capacity_(rhs.chunk_capacity_), baseAllocator_(rhs.baseAllocator_), shared_(rhs.shared_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (rhs . shared_ = 0 ; } MemoryPoolAllocator&)",
    "insertText": "operator(MemoryPoolAllocator&& rhs)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (- - shared_ -> refcount ; return ; })",
    "insertText": "Clear()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BaseAllocator* a = shared_ -> ownBaseAllocator ;)",
    "insertText": "if(shared_->ownBuffer)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (baseAllocator_ ->)",
    "insertText": "Free(shared_)"
  },
  {
    "label": "RAPIDJSON_DELETE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RAPIDJSON_DELETE(a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChunkHeader* c = shared_ -> chunkHead ;)",
    "insertText": "if(!c->next)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (break ; } shared_ -> chunkHead = c -> next ; baseAllocator_ ->)",
    "insertText": "Free(c)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} shared_ -> chunkHead -> size = 0 ; } size_t)",
    "insertText": "Capacity()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (capacity)",
    "insertText": "for(ChunkHeader* c = shared_->chunkHead; c != 0; c = c->next)"
  },
  {
    "label": "RAPIDJSON_ALIGN()",
    "kind": "Method",
    "detail": "Function (size =)",
    "insertText": "RAPIDJSON_ALIGN(size)"
  },
  {
    "label": "GetChunkBuffer()",
    "kind": "Method",
    "detail": "Function (chunkHead->size)",
    "insertText": "GetChunkBuffer(shared_)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (shared_ -> chunkHead -> size + = size ; return buffer ; } void*)",
    "insertText": "Realloc(void* originalPtr, size_t originalSize, size_t newSize)"
  },
  {
    "label": "RAPIDJSON_ALIGN()",
    "kind": "Method",
    "detail": "Function (originalSize =)",
    "insertText": "RAPIDJSON_ALIGN(originalSize)"
  },
  {
    "label": "RAPIDJSON_ALIGN()",
    "kind": "Method",
    "detail": "Function (newSize =)",
    "insertText": "RAPIDJSON_ALIGN(newSize)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t increment = static_cast<)",
    "insertText": "size_t(newSize - originalSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (shared_ -> chunkHead -> size + = increment ; return originalPtr ; } })",
    "insertText": "if(void* newBuffer = Malloc(newSize))"
  },
  {
    "label": "AddChunk()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "AddChunk(size_t capacity)"
  },
  {
    "label": "AlignBuffer()",
    "kind": "Method",
    "detail": "Function (chunk -> capacity = capacity ; chunk -> size = 0 ; chunk -> next = shared_ -> chunkHead ; shared_ -> chunkHead = chunk ; return true ; } else return false ; } void*)",
    "insertText": "AlignBuffer(void* buf, size_t &size)"
  },
  {
    "label": "RAPIDJSON_NOEXCEPT_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_NOEXCEPT_ASSERT(buf != 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uintptr_t mask =)",
    "insertText": "sizeof(void*)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (const uintptr_t ubuf = reinterpret_cast<)",
    "insertText": "uintptr_t(buf)"
  },
  {
    "label": "abuf()",
    "kind": "Method",
    "detail": "Function (const uintptr_t)",
    "insertText": "abuf(ubuf + mask)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(size >= abuf - ubuf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (buf = reinterpret_cast<)",
    "insertText": "void(abuf)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (size - = abuf - ubuf ; } return buf ; } size_t chunk_capacity_ ; BaseAllocator* baseAllocator_ ; SharedData* shared_ ; } ; namespace internal { template<,= void> struct IsRefCounted : public FalseType { } ; template<T> struct IsRefCounted<T,internal::EnableIfCond<T::kRefCounted>::Type> : public TrueType { } ; } template<T,A> T*)",
    "insertText": "Realloc(A& a, T* old_p, size_t old_n, size_t new_n)"
  },
  {
    "label": "RAPIDJSON_NOEXCEPT_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_NOEXCEPT_ASSERT(old_n <= (std::numeric_limits<size_t>::max)() / sizeof(T) && new_n <= (std::numeric_limits<size_t>::max)() / sizeof(T))"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} template<T,A> T*)",
    "insertText": "Malloc(A& a, size_t n = 1)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} template<T,A> void)",
    "insertText": "Free(A& a, T *p, size_t n = 1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "void(Realloc<T, A>(a, p, n, 0))"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (} # ifdef __GNUC__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(effc++)"
  },
  {
    "label": "StdAllocator()",
    "kind": "Method",
    "detail": "Function (typedef std::allocator<T> allocator_type ; # if RAPIDJSON_HAS_CXX11 typedef std::allocator_traits<allocator_type> traits_type ; # else typedef allocator_type traits_type ; # endif public : typedef BaseAllocator BaseAllocatorType ;)",
    "insertText": "StdAllocator() RAPIDJSON_NOEXCEPT : allocator_type(), baseAllocator_()"
  },
  {
    "label": "StdAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StdAllocator(const StdAllocator& rhs) RAPIDJSON_NOEXCEPT : allocator_type(rhs), baseAllocator_(rhs.baseAllocator_)"
  },
  {
    "label": "StdAllocator()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "StdAllocator(const StdAllocator<U, BaseAllocator>& rhs) RAPIDJSON_NOEXCEPT : allocator_type(rhs), baseAllocator_(rhs.baseAllocator_)"
  },
  {
    "label": "StdAllocator()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "StdAllocator(StdAllocator&& rhs) RAPIDJSON_NOEXCEPT : allocator_type(std::move(rhs)), baseAllocator_(std::move(rhs.baseAllocator_))"
  },
  {
    "label": "StdAllocator()",
    "kind": "Method",
    "detail": "Function (} # endif # if RAPIDJSON_HAS_CXX11 using propagate_on_container_move_assignment = std::true_type ; using propagate_on_container_swap = std::true_type ; # endif)",
    "insertText": "StdAllocator(const BaseAllocator& baseAllocator) RAPIDJSON_NOEXCEPT : allocator_type(), baseAllocator_(baseAllocator)"
  },
  {
    "label": "StdAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "StdAllocator()"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} template<U> struct rebind { typedef StdAllocator<U,BaseAllocator> other ; } ; typedef traits_type::size_type size_type ; typedef traits_type::difference_type difference_type ; typedef traits_type::value_type value_type ; typedef traits_type::pointer pointer ; typedef traits_type::const_pointer const_pointer ; # if RAPIDJSON_HAS_CXX11 typedef std::add_lvalue_reference<value_type>::type& reference ; typedef std::add_lvalue_reference<std::add_const<value_type>::type>::type& const_reference ; pointer)",
    "insertText": "address(reference r)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} const_pointer)",
    "insertText": "address(const_reference r)"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "construct(pointer p, Args&&... args)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(*this, p, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroy(pointer p)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(*this, p)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "construct(pointer p, const_reference r)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(p, r)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(p)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} # endif template<U> U*)",
    "insertText": "allocate(size_type n = 1, const void* = 0)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} template<U> void)",
    "insertText": "deallocate(U* p, size_type n = 1)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (RAPIDJSON_NAMESPACE::Free<)",
    "insertText": "U(baseAllocator_, p, n)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate(pointer p, size_type n = 1)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (deallocate<)",
    "insertText": "value_type(p, n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11 using is_always_equal = std::is_empty<BaseAllocator> ; # endif template<U> bool)",
    "insertText": "operator(const StdAllocator<U, BaseAllocator>& rhs)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(ptr)"
  }
]