[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "match",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "match"
  },
  {
    "label": "RefBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefBase"
  },
  {
    "label": "Ref",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ref"
  },
  {
    "label": "IsVectorAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_REF_H # define EIGEN_REF_H namespace Eigen { namespace internal { template<_PlainObjectType,int _Options,_StrideType> struct traits<Ref<_PlainObjectType,_Options,_StrideType>> : public traits<Map<_PlainObjectType,_Options,_StrideType>> { typedef _PlainObjectType PlainObjectType ; typedef _StrideType StrideType ; enum { Options = _Options,Flags = traits<Map<_PlainObjectType,_Options,_StrideType>>::Flags | NestByRefBit,Alignment = traits<Map<_PlainObjectType,_Options,_StrideType>>::Alignment } ; template<Derived> struct match { enum { IsVectorAtCompileTime = PlainObjectType::IsVectorAtCompileTime | | Derived::IsVectorAtCompileTime,HasDirectAccess = internal::has_direct_access<Derived>::ret,StorageOrderMatch =)",
    "insertText": "IsVectorAtCompileTime((PlainObjectType::Flags&RowMajorBit)==(Derived::Flags&RowMajorBit)), InnerStrideMatch = int(StrideType::InnerStrideAtCompileTime)==int(Dynamic) || int(StrideType::InnerStrideAtCompileTime)==int(Derived::InnerStrideAtCompileTime) || (int(StrideType::InnerStrideAtCompileTime)==0 && int(Derived::InnerStrideAtCompileTime)==1), OuterStrideMatch = IsVectorAtCompileTime || int(StrideType::OuterStrideAtCompileTime)==int(Dynamic) || int(StrideType::OuterStrideAtCompileTime)==int(Derived::OuterStrideAtCompileTime), DerivedAlignment = int(evaluator<Derived>::Alignment), AlignmentMatch = (int(traits<PlainObjectType>::Alignment)==int(Unaligned)) || (DerivedAlignment >= int(Alignment))"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<MatchAtCompileTime,internal::true_type,internal::false_type>::type type ; } ; } ; template<Derived> struct traits<RefBase<Derived>> : public traits<Derived> { } ; } template<Derived> class RefBase : public MapBase<Derived> { typedef internal::traits<Derived>::PlainObjectType PlainObjectType ; typedef internal::traits<Derived>::StrideType StrideType ; public : typedef MapBase<Derived> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(RefBase) EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR inline Index innerStride()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "RefBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "RefBase() : Base(0,RowsAtCompileTime==Dynamic?0:RowsAtCompileTime,ColsAtCompileTime==Dynamic?0:ColsAtCompileTime), m_stride(StrideType::OuterStrideAtCompileTime==Dynamic?0:StrideType::OuterStrideAtCompileTime, StrideType::InnerStrideAtCompileTime==Dynamic?0:StrideType::InnerStrideAtCompileTime)"
  },
  {
    "label": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS(RefBase)"
  },
  {
    "label": "resolveInnerStride()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "resolveInnerStride(Index inner)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(EIGEN_PREDICATE_SAME_MATRIX_SIZE(PlainObjectType, Expression) || ( PlainObjectType::IsVectorAtCompileTime && ((int(PlainObjectType::RowsAtCompileTime)==Eigen::Dynamic || int(Expression::ColsAtCompileTime)==Eigen::Dynamic || int(PlainObjectType::RowsAtCompileTime)==int(Expression::ColsAtCompileTime)) && (int(PlainObjectType::ColsAtCompileTime)==Eigen::Dynamic || int(Expression::RowsAtCompileTime)==Eigen::Dynamic || int(PlainObjectType::ColsAtCompileTime)==int(Expression::RowsAtCompileTime)))), YOU_MIXED_MATRICES_OF_DIFFERENT_SIZES ) Index rows = expr.rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index cols = expr .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(expr.rows()==1 || expr.cols()==1)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (rows = 1 ; cols = expr .)",
    "insertText": "size()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(PlainObjectType::ColsAtCompileTime==1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (cols = 1 ; })",
    "insertText": "eigen_assert((PlainObjectType::RowsAtCompileTime == Dynamic) || (PlainObjectType::RowsAtCompileTime == rows))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((PlainObjectType::ColsAtCompileTime == Dynamic) || (PlainObjectType::ColsAtCompileTime == cols))"
  },
  {
    "label": "IsVectorAtCompileTime()",
    "kind": "Method",
    "detail": "Function (const bool transpose =)",
    "insertText": "IsVectorAtCompileTime(rows != expr.rows())"
  },
  {
    "label": "row_major()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "row_major((PlainObjectType::Flags)&RowMajorBit)"
  },
  {
    "label": "expr_row_major()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "expr_row_major(Expression::Flags&RowMajorBit)"
  },
  {
    "label": "storage_differs()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "storage_differs(row_major != expr_row_major)"
  },
  {
    "label": "swap_stride()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "swap_stride(transpose != storage_differs)"
  },
  {
    "label": "resolveInnerStride()",
    "kind": "Method",
    "detail": "Function (const Index expr_inner_actual =)",
    "insertText": "resolveInnerStride(expr.innerStride())"
  },
  {
    "label": "resolveOuterStride()",
    "kind": "Method",
    "detail": "Function (const Index expr_outer_actual =)",
    "insertText": "resolveOuterStride(expr_inner_actual, expr.outerStride(), expr.rows(), expr.cols(), Expression::IsVectorAtCompileTime != 0, expr_row_major)"
  },
  {
    "label": "row_vector()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "row_vector(rows == 1)"
  },
  {
    "label": "col_vector()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "col_vector(cols == 1)"
  },
  {
    "label": "inner_stride()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "inner_stride((!row_major && row_vector) || (row_major && col_vector) ) ? ( StrideType::InnerStrideAtCompileTime > 0 ? Index(StrideType::InnerStrideAtCompileTime) : 1)"
  },
  {
    "label": "outer_stride()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "outer_stride((!row_major && col_vector) || (row_major && row_vector) ) ? ( StrideType::OuterStrideAtCompileTime > 0 ? Index(StrideType::OuterStrideAtCompileTime) : rows * cols * inner_stride)"
  },
  {
    "label": "inner_valid()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "inner_valid(StrideType::InnerStrideAtCompileTime == Dynamic) || (resolveInnerStride(Index(StrideType::InnerStrideAtCompileTime)) == inner_stride)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_stride) StrideBase( (StrideType::OuterStrideAtCompileTime == 0) ? 0 : outer_stride, (StrideType::InnerStrideAtCompileTime == 0) ? 0 : inner_stride)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (public : typedef RefBase<Ref> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Ref) #ifndef EIGEN_PARSED_BY_DOXYGEN template<typename Derived> EIGEN_DEVICE_FUNC inline Ref(PlainObjectBase<Derived>& expr, typename internal::enable_if<bool(Traits::template match<Derived>::MatchAtCompileTime),Derived>::type* = 0)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(bool(Traits::template match<Derived>::MatchAtCompileTime), STORAGE_LAYOUT_DOES_NOT_MATCH)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (const bool success =)",
    "insertText": "construct(expr.derived())"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(success) eigen_assert(success)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC)",
    "insertText": "Ref(const DenseBase<Derived>& expr, typename internal::enable_if<bool(Traits::template match<Derived>::MatchAtCompileTime),Derived>::type* = 0) #else template<typename Derived> inline Ref(DenseBase<Derived>& expr)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(bool(internal::is_lvalue<Derived>::value), THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!Derived::IsPlainObjectBase,THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (const bool success =)",
    "insertText": "construct(expr.const_cast_derived())"
  },
  {
    "label": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Ref)"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (template<TPlainObjectType,int Options,StrideType> class Ref<const TPlainObjectType,Options,StrideType> : public RefBase<Ref<const TPlainObjectType,Options,StrideType>> { typedef internal::traits<Ref> Traits ; public : typedef RefBase<Ref> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Ref) template<typename Derived> EIGEN_DEVICE_FUNC inline Ref(const DenseBase<Derived>& expr, typename internal::enable_if<bool(Traits::template match<Derived>::ScalarTypeMatch),Derived>::type* = 0)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(expr.derived(), typename Traits::template match<Derived>::type())"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "Ref(const Ref& other) : Base(other)"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} template<OtherRef> EIGEN_DEVICE_FUNC)",
    "insertText": "Ref(const RefBase<OtherRef>& other)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(other.derived(), typename Traits::template match<OtherRef>::type())"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} protected : template<Expression> EIGEN_DEVICE_FUNC void)",
    "insertText": "construct(const Expression& expr,internal::true_type)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(expr, internal::false_type())"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} } template<Expression> EIGEN_DEVICE_FUNC void)",
    "insertText": "construct(const Expression& expr, internal::false_type)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(m_object,expr,internal::assign_op<Scalar,Scalar>())"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(m_object)"
  }
]