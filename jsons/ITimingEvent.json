[
  {
    "label": "ITimingViewDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingViewDrawHelper"
  },
  {
    "label": "FBaseTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseTimingTrack"
  },
  {
    "label": "FTimingTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingTrackViewport"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "TRACEINSIGHTS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI_BASE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" InsightsCore / Common / SimpleRtti . h \" # include \" Insights / Config . h \" # if UE_INSIGHTS_BACKWARD_COMPATIBILITY_UE54 # include \" Insights / ITimingViewSession . h \" # endif class ITimingViewDrawHelper ; class FBaseTimingTrack ; class FTimingTrackViewport ; namespace UE::Insights { class FDrawContext ; } class ITimingEvent {)",
    "insertText": "INSIGHTS_DECLARE_RTTI_BASE(ITimingEvent) public: virtual const TSharedRef<const FBaseTimingTrack> GetTrack()"
  },
  {
    "label": "CheckTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckTrack(const FBaseTimingTrack* TrackPtr)"
  },
  {
    "label": "GetDepth()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetDepth()"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetStartTime()"
  },
  {
    "label": "GetEndTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetEndTime()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetDuration()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const ITimingEvent& Other)"
  },
  {
    "label": "AreEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreEquals(const ITimingEvent& A, const ITimingEvent& B)"
  },
  {
    "label": "AreValidAndEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreValidAndEquals(const TSharedPtr<const ITimingEvent> A, const TSharedPtr<const ITimingEvent> B)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI_BASE()",
    "kind": "Method",
    "detail": "Function (} } ; class ITimingEventFilter {)",
    "insertText": "INSIGHTS_DECLARE_RTTI_BASE(ITimingEventFilter) public: virtual bool FilterTrack(const FBaseTimingTrack& InTrack)"
  },
  {
    "label": "FilterEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterEvent(const ITimingEvent& InEvent)"
  },
  {
    "label": "FilterEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterEvent(double InEventStartTime, double InEventEndTime, uint32 InEventDepth, const TCHAR* InEventName, uint64 InEventType = 0, uint32 InEventColor = 0)"
  },
  {
    "label": "GetChangeNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetChangeNumber()"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI_BASE()",
    "kind": "Method",
    "detail": "Function (} ; class ITimingEventRelation {)",
    "insertText": "INSIGHTS_DECLARE_RTTI_BASE(ITimingEventRelation)"
  },
  {
    "label": "ITimingEventRelation()",
    "kind": "Method",
    "detail": "Function (BetweenScrollableTracks,BetweenDockedTracks,} ;)",
    "insertText": "ITimingEventRelation()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Draw(const UE::Insights::FDrawContext& DrawContext, const FTimingTrackViewport& Viewport, const ITimingViewDrawHelper& Helper, const EDrawFilter Filter)"
  }
]