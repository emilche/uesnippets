[
  {
    "label": "StateBitmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StateBitmap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FilterQuarantine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterQuarantine"
  },
  {
    "label": "FilterUnmarkedQuarantine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterUnmarkedQuarantine"
  },
  {
    "label": "FilterAllocated",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterAllocated"
  },
  {
    "label": "SimpleCallbackForwarder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SimpleCallbackForwarder"
  },
  {
    "label": "QuarantineCallbackForwarder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuarantineCallbackForwarder"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_STATE_BITMAP_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_STATE_BITMAP_H_ # include<climits> # include<cstddef> # include<cstdint> # include<algorithm> # include<array> # include<atomic> # include<tuple> # include<utility> # include \" base / allocator / partition_allocator / partition_alloc_base / bits . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" namespace partition_alloc::internal { template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> class StateBitmap final { enum class State : uint8_t { kFreed = 0 b00,kQuarantined1 = 0 b01,kQuarantined2 = 0 b10,kAlloced = 0 b11,kNumOfStates = 4,} ; using CellType = uintptr_t ; size_t kBitsPerCell =)",
    "insertText": "sizeof(CellType)"
  },
  {
    "label": "Log2Floor()",
    "kind": "Method",
    "detail": "Function (size_t kBitsNeededForAllocation = base::)",
    "insertText": "Log2Floor(static_cast<size_t>(State::kNumOfStates))"
  },
  {
    "label": "kStateMask()",
    "kind": "Method",
    "detail": "Function (CellType)",
    "insertText": "kStateMask(1 << kBitsNeededForAllocation)"
  },
  {
    "label": "kBitmapSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "kBitmapSize(PageSize + ((kBitsPerCell * AllocationAlignment) - 1)) / (kBitsPerCell * AllocationAlignment)"
  },
  {
    "label": "kMaxEntries()",
    "kind": "Method",
    "detail": "Function (size_t kPageOffsetMask = PageAlignment - 1 ; size_t kPageBaseMask = ~ kPageOffsetMask ; public : using Epoch = size_t ; size_t kPageSize = PageSize ; size_t kPageAlignment = PageAlignment ; size_t kAllocationAlignment = AllocationAlignment ; size_t)",
    "insertText": "kMaxEntries(kBitmapSize / kBitsNeededForAllocation)"
  },
  {
    "label": "StateBitmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StateBitmap()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "Allocate(uintptr_t address)"
  },
  {
    "label": "Quarantine()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "Quarantine(uintptr_t address, Epoch epoch)"
  },
  {
    "label": "MarkQuarantinedAsReachable()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "MarkQuarantinedAsReachable(uintptr_t address, Epoch epoch)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "Free(uintptr_t address)"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsAllocated(uintptr_t address)"
  },
  {
    "label": "IsQuarantined()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsQuarantined(uintptr_t address)"
  },
  {
    "label": "IsFreed()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsFreed(uintptr_t address)"
  },
  {
    "label": "IterateAllocated()",
    "kind": "Method",
    "detail": "Function (template<Callback> void)",
    "insertText": "IterateAllocated(Callback)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<Callback,)",
    "insertText": "decltype(std::declval<Callback>()(0), 0) = 0> inline void IterateQuarantined(Callback)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<Callback,)",
    "insertText": "decltype(std::declval<Callback>()(0, true), 0) = 0> inline void IterateQuarantined(size_t epoch, Callback)"
  },
  {
    "label": "IterateUnmarkedQuarantined()",
    "kind": "Method",
    "detail": "Function (template<Callback> void)",
    "insertText": "IterateUnmarkedQuarantined(size_t epoch, Callback)"
  },
  {
    "label": "IterateUnmarkedQuarantinedAndFree()",
    "kind": "Method",
    "detail": "Function (template<Callback> void)",
    "insertText": "IterateUnmarkedQuarantinedAndFree(size_t epoch, Callback)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "AsAtomicCell()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<CellType>&)",
    "insertText": "AsAtomicCell(size_t cell_index)"
  },
  {
    "label": "GetBits()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE unsigned)",
    "insertText": "GetBits(uintptr_t address)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FilterQuarantine { PA_ALWAYS_INLINE bool)",
    "insertText": "operator()(CellType cell)"
  },
  {
    "label": "SimpleCallbackForwarder()",
    "kind": "Method",
    "detail": "Function (const size_t epoch ; } ; struct SimpleCallbackForwarder { PA_ALWAYS_INLINE)",
    "insertText": "SimpleCallbackForwarder(size_t epoch)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Callback> PA_ALWAYS_INLINE void)",
    "insertText": "operator()(Callback, uintptr_t pointer, CellType bits)"
  },
  {
    "label": "QuarantineCallbackForwarder()",
    "kind": "Method",
    "detail": "Function (} ; struct QuarantineCallbackForwarder { PA_ALWAYS_INLINE)",
    "insertText": "QuarantineCallbackForwarder(size_t epoch)"
  },
  {
    "label": "IterateImpl()",
    "kind": "Method",
    "detail": "Function (FilterUnmarkedQuarantine is_unmarked ; } ; template<Filter,CallbackForwarder,Callback,bool Clear> void)",
    "insertText": "IterateImpl(size_t epoch, Callback)"
  },
  {
    "label": "LoadCell()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE CellType)",
    "insertText": "LoadCell(size_t cell_index)"
  },
  {
    "label": "AllocationIndexAndBit()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE std::pair<size_t,size_t>)",
    "insertText": "AllocationIndexAndBit(uintptr_t)"
  },
  {
    "label": "PA_SCAN_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_SCAN_DCHECK(IsFreed(address))"
  },
  {
    "label": "AllocationIndexAndBit()",
    "kind": "Method",
    "detail": "Function (auto [ cell_index,object_bit ] =)",
    "insertText": "AllocationIndexAndBit(address)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (const CellType mask = static_cast<)",
    "insertText": "CellType(State::kAlloced)"
  },
  {
    "label": "AsAtomicCell()",
    "kind": "Method",
    "detail": "Function (auto& cell =)",
    "insertText": "AsAtomicCell(cell_index)"
  },
  {
    "label": "fetch_or()",
    "kind": "Method",
    "detail": "Function (cell .)",
    "insertText": "fetch_or(mask, std::memory_order_relaxed)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (const CellType)",
    "insertText": "mask(static_cast<CellType>(quarantine_state) << object_bit)"
  },
  {
    "label": "fetch_and()",
    "kind": "Method",
    "detail": "Function (const CellType cell_before = cell .)",
    "insertText": "fetch_and(mask, std::memory_order_relaxed)"
  },
  {
    "label": "clear_mask()",
    "kind": "Method",
    "detail": "Function (const CellType)",
    "insertText": "clear_mask(static_cast<CellType>(State::kAlloced) << object_bit)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (const CellType set_mask_old = static_cast<)",
    "insertText": "CellType(quarantine_state_old)"
  },
  {
    "label": "CellType()",
    "kind": "Method",
    "detail": "Function (const CellType xor_mask = static_cast<)",
    "insertText": "CellType(0b11)"
  },
  {
    "label": "expected()",
    "kind": "Method",
    "detail": "Function (CellType)",
    "insertText": "expected(cell.load(std::memory_order_relaxed) & clear_mask)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CellType desired = expected ^ xor_mask ;)",
    "insertText": "while(PA_UNLIKELY(!cell.compare_exchange_weak(expected, desired, std::memory_order_relaxed, std::memory_order_relaxed)))"
  },
  {
    "label": "PA_SCAN_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_SCAN_DCHECK(((expected >> object_bit) & kStateMask) == (~static_cast<CellType>(quarantine_state_old) & kStateMask))"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (const CellType)",
    "insertText": "mask(static_cast<CellType>(State::kAlloced) << object_bit)"
  },
  {
    "label": "AllocationIndexAndBit()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> PA_ALWAYS_INLINE std::pair<size_t,size_t> StateBitmap<PageSize,PageAlignment,AllocationAlignment)",
    "insertText": "AllocationIndexAndBit(uintptr_t address)"
  },
  {
    "label": "allocation_number()",
    "kind": "Method",
    "detail": "Function (const uintptr_t offset_in_page = address& kPageOffsetMask ; const size_t)",
    "insertText": "allocation_number(offset_in_page / kAllocationAlignment)"
  },
  {
    "label": "PA_SCAN_DCHECK()",
    "kind": "Method",
    "detail": "Function (const size_t cell_index = allocation_number / kBitsPerCell ;)",
    "insertText": "PA_SCAN_DCHECK(kBitmapSize > cell_index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> bool StateBitmap<PageSize,PageAlignment,AllocationAlignment>::)",
    "insertText": "operator()(CellType bits)"
  },
  {
    "label": "callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callback(pointer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Callback> PA_ALWAYS_INLINE void StateBitmap<PageSize,PageAlignment,AllocationAlignment>::)",
    "insertText": "operator()(Callback callback, uintptr_t pointer, CellType bits)"
  },
  {
    "label": "callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callback(pointer, !is_unmarked(bits))"
  },
  {
    "label": "IterateImpl()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Filter,CallbackForwarder,Callback,bool Clear> void StateBitmap<PageSize,PageAlignment,AllocationAlignment)",
    "insertText": "IterateImpl(size_t epoch, Callback callback)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (Filter filter { epoch } ; CallbackForwarder callback_forwarder { epoch } ; const uintptr_t base = reinterpret_cast<)",
    "insertText": "uintptr_t(this)"
  },
  {
    "label": "LoadCell()",
    "kind": "Method",
    "detail": "Function (CellType value =)",
    "insertText": "LoadCell(cell_index)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t trailing_zeroes = static_cast<)",
    "insertText": "size_t(base::bits::CountTrailingZeroBits(value) & ~0b1)"
  },
  {
    "label": "clear_value_mask()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "clear_value_mask(static_cast<CellType>(kStateMask) << trailing_zeroes)"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (const CellType)",
    "insertText": "bits(value >> trailing_zeroes)"
  },
  {
    "label": "object_number()",
    "kind": "Method",
    "detail": "Function (value& = clear_value_mask ; continue ; } const size_t)",
    "insertText": "object_number(cell_index * kBitsPerCell)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (const uintptr_t object_address =)",
    "insertText": "base(object_number * kAllocationAlignment / kBitsNeededForAllocation)"
  },
  {
    "label": "callback_forwarder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callback_forwarder(callback, object_address, bits)"
  },
  {
    "label": "AsAtomicCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsAtomicCell(cell_index) .fetch_and(clear_value_mask, std::memory_order_relaxed)"
  },
  {
    "label": "IterateAllocated()",
    "kind": "Method",
    "detail": "Function (} value& = clear_value_mask ; } } } template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Callback> void StateBitmap<PageSize,PageAlignment,AllocationAlignment)",
    "insertText": "IterateAllocated(Callback callback)"
  },
  {
    "label": "StateBitmap()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "StateBitmap(this) ->IterateImpl<FilterAllocated, SimpleCallbackForwarder, Callback, false>( 0, std::move(callback))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Callback,)",
    "insertText": "decltype(std::declval<Callback>()(0), 0)> inline void StateBitmap<PageSize, PageAlignment, AllocationAlignment>::IterateQuarantined( Callback callback)"
  },
  {
    "label": "StateBitmap()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "StateBitmap(this) ->IterateImpl<FilterQuarantine, SimpleCallbackForwarder, Callback, false>( 0, std::move(callback))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Callback,)",
    "insertText": "decltype(std::declval<Callback>()(0, true), 0)> inline void StateBitmap<PageSize, PageAlignment, AllocationAlignment>::IterateQuarantined( size_t epoch, Callback callback)"
  },
  {
    "label": "StateBitmap()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "StateBitmap(this) ->IterateImpl<FilterQuarantine, QuarantineCallbackForwarder, Callback, false>(epoch, std::move(callback))"
  },
  {
    "label": "IterateUnmarkedQuarantined()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Callback> void StateBitmap<PageSize,PageAlignment,AllocationAlignment)",
    "insertText": "IterateUnmarkedQuarantined(size_t epoch, Callback callback)"
  },
  {
    "label": "StateBitmap()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "StateBitmap(this) ->IterateImpl<FilterUnmarkedQuarantine, SimpleCallbackForwarder, Callback, false>(epoch, std::move(callback))"
  },
  {
    "label": "IterateUnmarkedQuarantinedAndFree()",
    "kind": "Method",
    "detail": "Function (} template<size_t PageSize,size_t PageAlignment,size_t AllocationAlignment> template<Callback> void StateBitmap<PageSize,PageAlignment,AllocationAlignment)",
    "insertText": "IterateUnmarkedQuarantinedAndFree(size_t epoch, Callback callback)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (IterateImpl<FilterUnmarkedQuarantine,SimpleCallbackForwarder,Callback,)",
    "insertText": "true(epoch, std::move(callback))"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(bitmap_.begin(), bitmap_.end(), '\\0')"
  }
]