[
  {
    "label": "make_block_householder_triangular_factor()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BLOCK_HOUSEHOLDER_H # define EIGEN_BLOCK_HOUSEHOLDER_H namespace Eigen { namespace internal { template<TriangularFactorType,VectorsType,CoeffsType> void)",
    "insertText": "make_block_householder_triangular_factor(TriangularFactorType& triFactor, const VectorsType& vectors, const CoeffsType& hCoeffs)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index nbVecs = vectors .)",
    "insertText": "cols()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(triFactor.rows() == nbVecs && triFactor.cols() == nbVecs && vectors.rows()>=nbVecs)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index rs = vectors .)",
    "insertText": "rows()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index rt = nbVecs - i - 1 ;)",
    "insertText": "if(rt>0)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (triFactor .)",
    "insertText": "row(i).tail(rt).noalias() = -hCoeffs(i) * vectors.col(i).tail(rs).adjoint() * vectors.bottomRightCorner(rs, rt).template triangularView<UnitLower>()"
  },
  {
    "label": "triFactor()",
    "kind": "Method",
    "detail": "Function (TriangularFactorType::Scalar z =)",
    "insertText": "triFactor(i,j)"
  },
  {
    "label": "triFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "triFactor(i,j) = z * triFactor(j,j)"
  },
  {
    "label": "triFactor()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "triFactor(i,i) = hCoeffs(i)"
  },
  {
    "label": "apply_block_householder_on_the_left()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType,VectorsType,CoeffsType> void)",
    "insertText": "apply_block_householder_on_the_left(MatrixType& mat, const VectorsType& vectors, const CoeffsType& hCoeffs, bool forward)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Matrix<MatrixType::Scalar,TFactorSize,TFactorSize,RowMajor>)",
    "insertText": "T(nbVecs,nbVecs)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const TriangularView<const VectorsType,UnitLower>)",
    "insertText": "V(vectors)"
  },
  {
    "label": "ColsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (Matrix<MatrixType::Scalar,VectorsType::ColsAtCompileTime,)",
    "insertText": "ColsAtCompileTime(VectorsType::MaxColsAtCompileTime==1 && MatrixType::MaxColsAtCompileTime!=1)?RowMajor:ColMajor, VectorsType::MaxColsAtCompileTime,MatrixType::MaxColsAtCompileTime> tmp = V.adjoint()"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "noalias()"
  }
]