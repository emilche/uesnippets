[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerFilterBar"
  },
  {
    "label": "FSequencerTrackFilterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilterCollection"
  },
  {
    "label": "FSequencerTrackFilter_Level",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Level"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneFolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneFolder"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FMovieSceneBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBinding"
  },
  {
    "label": "FSequencerNodeTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerNodeTree"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" Misc / Guid . h \" # include \" UObject / ObjectKey . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / ObjectBindingModel . h \" # include \" MVVM / ViewModels / TrackModel . h \" # include \" MVVM / ViewModels / SectionModel . h \" # include \" MVVM / ViewModels / OutlinerItemModel . h \" # include \" MVVM / ViewModels / ChannelModel . h \" # include \" MVVM / ViewModels / SequenceModel . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MovieSceneSequence . h \" class FSequencer ; class FSequencerFilterBar ; class FSequencerTrackFilterCollection ; class FSequencerTrackFilter_Level ; class ISequencerTrackEditor ; class UMovieScene ; class UMovieSceneFolder ; class UMovieSceneTrack ; struct FMovieSceneBinding ; class FSequencerNodeTree : public TSharedFromThis<FSequencerNodeTree> { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnUpdated)"
  },
  {
    "label": "FSequencerNodeTree()",
    "kind": "Method",
    "detail": "Function (using FSectionModel = UE::Sequencer::FSectionModel ; using FViewModel = UE::Sequencer::FViewModel ; using FObjectBindingModel = UE::Sequencer::FObjectBindingModel ; public :)",
    "insertText": "FSequencerNodeTree(FSequencer& InSequencer)"
  },
  {
    "label": "FSequencerNodeTree()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSequencerNodeTree()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "SetRootNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootNode(const UE::Sequencer::FViewModelPtr& InRootNode)"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::FViewModelPtr)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "GetRootNodes()",
    "kind": "Method",
    "detail": "Function (TArray<UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>>)",
    "insertText": "GetRootNodes()"
  },
  {
    "label": "UpdateFiltersOnTrackValueChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateFiltersOnTrackValueChanged()"
  },
  {
    "label": "IsNodeFiltered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeFiltered(const TSharedPtr<FViewModel>& Node)"
  },
  {
    "label": "RequestFilterUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestFilterUpdate()"
  },
  {
    "label": "NeedsFilterUpdate()",
    "kind": "Method",
    "detail": "Function (bFilterUpdateRequested = true ; } bool)",
    "insertText": "NeedsFilterUpdate()"
  },
  {
    "label": "NodeGroupsCollectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeGroupsCollectionChanged()"
  },
  {
    "label": "GetAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllNodes(TArray<TSharedPtr<FViewModel>>& OutNodes)"
  },
  {
    "label": "GetAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllNodes(TArray<TSharedRef<FViewModel>>& OutNodes)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (FSequencer&)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetSavedExpansionState()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "GetSavedExpansionState(const FViewModel& Node)"
  },
  {
    "label": "SavePinnedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePinnedState(const FViewModel& Node, bool bPinned)"
  },
  {
    "label": "GetSavedPinnedState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSavedPinnedState(const FViewModel& Node)"
  },
  {
    "label": "FindObjectBindingNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FObjectBindingModel>)",
    "insertText": "FindObjectBindingNode(const FGuid& BindingID)"
  },
  {
    "label": "OnUpdated()",
    "kind": "Method",
    "detail": "Function (FOnUpdated&)",
    "insertText": "OnUpdated()"
  },
  {
    "label": "SortAllNodesAndDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAllNodesAndDescendants()"
  },
  {
    "label": "GetNodeAtPath()",
    "kind": "Method",
    "detail": "Function (UE::Sequencer::TViewModelPtr<UE::Sequencer::IOutlinerExtension>)",
    "insertText": "GetNodeAtPath(const FString& NodePath)"
  },
  {
    "label": "GetSectionModel()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<FSectionModel>)",
    "insertText": "GetSectionModel(const UMovieSceneSection* Section)"
  },
  {
    "label": "UpdateFilters()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "UpdateFilters()"
  },
  {
    "label": "CleanupMuteSolo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupMuteSolo(UMovieScene* MovieScene)"
  },
  {
    "label": "GetTotalDisplayNodeCount()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetTotalDisplayNodeCount()"
  },
  {
    "label": "GetFilteredDisplayNodeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFilteredDisplayNodeCount()"
  }
]