[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EBlendType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendType"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_ANIMATION_EVALUATOR_CLASSIC_H_ # define _FBXSDK_SCENE_ANIMATION_EVALUATOR_CLASSIC_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / scene / animation / fbxanimevaluator . h> # include<fbxsdk / scene / animation / fbxanimlayer . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxAnimEvalClassic : public FbxAnimEvaluator {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxAnimEvalClassic, FbxAnimEvaluator)"
  },
  {
    "label": "ComputeTRSLocal()",
    "kind": "Method",
    "detail": "Function (enum EBlendType { eSimple,eRotation,eScaling } ; void)",
    "insertText": "ComputeTRSLocal(FbxNodeEvalState* pResult, FbxNode* pNode, const FbxTime& pTime, FbxAnimStack* pStack)"
  },
  {
    "label": "ComputeGlobalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGlobalTransform(FbxNodeEvalState* pResult, FbxNode* pNode, const FbxTime& pTime, FbxAnimStack* pStack, FbxNode::EPivotSet pPivotSet, bool pApplyTarget)"
  },
  {
    "label": "ComputeLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeLocalTransform(FbxNodeEvalState* pResult, FbxNode* pNode, const FbxTime& pTime, FbxAnimStack* pStack, FbxNode::EPivotSet pPivotSet, bool pApplyTarget)"
  },
  {
    "label": "HasAnimationCurveNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnimationCurveNode(FbxProperty& pProperty, FbxAnimLayer* pAnimLayer)"
  },
  {
    "label": "ComputeTRSAnimationLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTRSAnimationLayer(FbxNodeEvalState* pResult, FbxNode* pNode, FbxVector4& pLT, FbxVector4& pLR, FbxVector4& pLS, const FbxTime& pTime, FbxAnimLayer* pLayer, bool pBlend)"
  },
  {
    "label": "BlendPropertyEvalWithLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendPropertyEvalWithLayer(double* pResult, int pResultSize, FbxProperty& pProperty, FbxNodeEvalState* pEvalState, const FbxTime& pTime, FbxAnimLayer* pLayer, EBlendType pType)"
  },
  {
    "label": "BlendSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendSimple(double* pResult, int pResultSize, double* pApply, int pApplySize, double pWeight, FbxAnimLayer::EBlendMode pBlendMode)"
  },
  {
    "label": "BlendRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendRotation(double* pResult, int pResultSize, double* pApply, int pApplySize, double pWeight, FbxAnimLayer::EBlendMode pBlendMode, FbxAnimLayer::ERotationAccumulationMode pRotAccuMode, int pRotationOrder)"
  },
  {
    "label": "BlendScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendScaling(double* pResult, int pResultSize, double* pApply, int pApplySize, double pWeight, FbxAnimLayer::EBlendMode pBlendMode, FbxAnimLayer::EScaleAccumulationMode pScaleAccuMode)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "EvaluateNodeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateNodeTransform(FbxNodeEvalState* pResult, FbxNode* pNode, const FbxTime& pTime, FbxNode::EPivotSet pPivotSet, bool pApplyTarget)"
  },
  {
    "label": "EvaluatePropertyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePropertyValue(FbxPropertyEvalState* pResult, FbxProperty& pProperty, const FbxTime& pTime)"
  }
]