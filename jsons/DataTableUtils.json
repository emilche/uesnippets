[
  {
    "label": "UDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataTable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumClassFlags . h \" class UDataTable ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDataTable, Log, All)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EDataTableExportFlags : uint8 { None = 0,UseJsonObjectsForStructs = 1<<0,UseSimpleText = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDataTableExportFlags)"
  },
  {
    "label": "AssignStringToPropertyDirect()",
    "kind": "Method",
    "detail": "Function (namespace DataTableUtils { FString)",
    "insertText": "AssignStringToPropertyDirect(const FString& InString, const FProperty* InProp, uint8* InData)"
  },
  {
    "label": "AssignStringToProperty()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "AssignStringToProperty(const FString& InString, const FProperty* InProp, uint8* InData)"
  },
  {
    "label": "GetPropertyValueAsStringDirect()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyValueAsStringDirect(const FProperty* InProp, const uint8* InData, const EDataTableExportFlags InDTExportFlags)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyValueAsString(const FProperty* InProp, const uint8* InData, const EDataTableExportFlags InDTExportFlags)"
  },
  {
    "label": "GetPropertyValueAsTextDirect()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPropertyValueAsTextDirect(const FProperty* InProp, const uint8* InData)"
  },
  {
    "label": "GetPropertyValueAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPropertyValueAsText(const FProperty* InProp, const uint8* InData)"
  },
  {
    "label": "GetStructPropertyNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetStructPropertyNames(const UStruct* InStruct)"
  },
  {
    "label": "MakeValidName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "MakeValidName(const FString& InString)"
  },
  {
    "label": "IsSupportedTableProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedTableProperty(const FProperty* InProp)"
  },
  {
    "label": "GetPropertyExportName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyExportName(const FProperty* Prop, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "GetPropertyImportNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPropertyImportNames(const FProperty* Prop)"
  },
  {
    "label": "GetPropertyImportNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPropertyImportNames(const FProperty* Prop, TArray<FString>& OutResult)"
  },
  {
    "label": "GetPropertyDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPropertyDisplayName(const FProperty* Prop, const FString& DefaultName)"
  },
  {
    "label": "GetColumnDataAsString()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetColumnDataAsString(const UDataTable* InTable, const FName& PropertyName, const EDataTableExportFlags InDTExportFlags)"
  }
]