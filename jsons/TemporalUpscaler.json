[
  {
    "label": "ITemporalUpscaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITemporalUpscaler"
  },
  {
    "label": "IHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHistory"
  },
  {
    "label": "FInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputs"
  },
  {
    "label": "FOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputs"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "IHistory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" namespace UE::Renderer::Private { class ITemporalUpscaler : public ISceneViewFamilyExtention { public : class IHistory : public IRefCountedObject { public : ~)",
    "insertText": "IHistory()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes()"
  },
  {
    "label": "ITemporalUpscaler()",
    "kind": "Method",
    "detail": "Function (} ; struct FInputs { FIntRect OutputViewRect ; FVector2f TemporalJitterPixels ; float PreExposure = 1 . 0 f ; FScreenPassTexture SceneColor ; FScreenPassTexture SceneDepth ; FScreenPassTexture SceneVelocity ; FRDGTextureRef EyeAdaptationTexture = nullptr ; TRefCountPtr<IHistory> PrevHistory ; } ; struct FOutputs { FScreenPassTexture FullRes ; TRefCountPtr<IHistory> NewHistory ; } ; ~)",
    "insertText": "ITemporalUpscaler()"
  },
  {
    "label": "AddPasses()",
    "kind": "Method",
    "detail": "Function (FOutputs)",
    "insertText": "AddPasses(FRDGBuilder& GraphBuilder, const FSceneView& View, const FInputs& Inputs)"
  },
  {
    "label": "GetMinUpsampleResolutionFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinUpsampleResolutionFraction()"
  },
  {
    "label": "GetMaxUpsampleResolutionFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxUpsampleResolutionFraction()"
  },
  {
    "label": "Fork_GameThread()",
    "kind": "Method",
    "detail": "Function (ITemporalUpscaler*)",
    "insertText": "Fork_GameThread(const class FSceneViewFamily& ViewFamily)"
  }
]