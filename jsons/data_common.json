[
  {
    "label": "AnyDataChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyDataChunk"
  },
  {
    "label": "ImmediateAckFlagTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmediateAckFlagTag"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "IsEnd()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_DATA_COMMON_H_ # define NET_DCSCTP_PACKET_CHUNK_DATA_COMMON_H_ # include<stdint . h> # include<utility> # include<vector> # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / data . h \" namespace dcsctp { class AnyDataChunk : public Chunk { public : using ImmediateAckFlag = webrtc::StrongAlias<class ImmediateAckFlagTag,bool> ; struct Options { Data::IsEnd is_end =)",
    "insertText": "IsEnd(false)"
  },
  {
    "label": "IsBeginning()",
    "kind": "Method",
    "detail": "Function (Data::IsBeginning is_beginning =)",
    "insertText": "IsBeginning(false)"
  },
  {
    "label": "IsUnordered()",
    "kind": "Method",
    "detail": "Function (IsUnordered is_unordered =)",
    "insertText": "IsUnordered(false)"
  },
  {
    "label": "ImmediateAckFlag()",
    "kind": "Method",
    "detail": "Function (ImmediateAckFlag immediate_ack =)",
    "insertText": "ImmediateAckFlag(false)"
  },
  {
    "label": "tsn()",
    "kind": "Method",
    "detail": "Function (} ; TSN)",
    "insertText": "tsn()"
  },
  {
    "label": "stream_id()",
    "kind": "Method",
    "detail": "Function (Options options ; options . is_end = data_ . is_end ; options . is_beginning = data_ . is_beginning ; options . is_unordered = data_ . is_unordered ; options . immediate_ack = immediate_ack_ ; return options ; } StreamID)",
    "insertText": "stream_id()"
  },
  {
    "label": "AnyDataChunk()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnyDataChunk(TSN tsn, StreamID stream_id, SSN ssn, MID message_id, FSN fsn, PPID ppid, std::vector<uint8_t> payload, const Options& options) : tsn_(tsn), data_(stream_id, ssn, message_id, fsn, ppid, std::move(payload), options.is_beginning, options.is_end, options.is_unordered), immediate_ack_(options.immediate_ack)"
  },
  {
    "label": "AnyDataChunk()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnyDataChunk(TSN tsn, Data data, bool immediate_ack) : tsn_(tsn), data_(std::move(data)), immediate_ack_(immediate_ack)"
  }
]