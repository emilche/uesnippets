[
  {
    "label": "ClippingPredictorLevelBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClippingPredictorLevelBuffer"
  },
  {
    "label": "Level",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Level"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_CLIPPING_PREDICTOR_LEVEL_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_CLIPPING_PREDICTOR_LEVEL_BUFFER_H_ # include<memory> # include<vector> # include \" absl / types / optional . h \" namespace webrtc { class ClippingPredictorLevelBuffer { public : struct Level { float average ; float max ; bool)",
    "insertText": "operator(const Level& level)"
  },
  {
    "label": "ClippingPredictorLevelBuffer()",
    "kind": "Method",
    "detail": "Function (} ; int kMaxCapacity = 1 0 0 ;)",
    "insertText": "ClippingPredictorLevelBuffer(int capacity)"
  },
  {
    "label": "ClippingPredictorLevelBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ClippingPredictorLevelBuffer()"
  },
  {
    "label": "ClippingPredictorLevelBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClippingPredictorLevelBuffer(const ClippingPredictorLevelBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ClippingPredictorLevelBuffer&)",
    "insertText": "operator(const ClippingPredictorLevelBuffer&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Size()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(Level level)"
  },
  {
    "label": "ComputePartialMetrics()",
    "kind": "Method",
    "detail": "Function (absl::optional<Level>)",
    "insertText": "ComputePartialMetrics(int delay, int num_items)"
  }
]