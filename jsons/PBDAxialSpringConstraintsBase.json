[
  {
    "label": "FPBDAxialSpringConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDAxialSpringConstraintsBase"
  },
  {
    "label": "FPBDAxialSpringConstraintsBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / PBDStiffness . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Containers / Array . h \" namespace Chaos::Softs { class FPBDAxialSpringConstraintsBase { public :)",
    "insertText": "FPBDAxialSpringConstraintsBase(const FSolverParticlesRange& Particles, const TArray<TVec3<int32>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness) : Constraints(TrimConstraints(InConstraints, [&Particles, bTrimKinematicConstraints](int32 Index0, int32 Index1, int32 Index2) { return bTrimKinematicConstraints && Particles.InvM(Index0) == (FSolverReal)0. && Particles.InvM(Index1) == (FSolverReal)0. && Particles.InvM(Index2) == (FSolverReal)0.; })) , ParticleOffset(0) , ParticleCount(Particles.GetRangeSize()) , Stiffness( InStiffness, StiffnessMultipliers, TConstArrayView<TVec3<int32>>(Constraints), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Particles, bTrimKinematicConstraints)"
  },
  {
    "label": "FPBDAxialSpringConstraintsBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDAxialSpringConstraintsBase(const FSolverParticles& Particles, int32 InParticleOffset, int32 InParticleCount, const TArray<TVec3<int32>>& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const FSolverVec2& InStiffness, bool bTrimKinematicConstraints, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness) : Constraints(TrimConstraints(InConstraints, [&Particles, bTrimKinematicConstraints](int32 Index0, int32 Index1, int32 Index2) { return bTrimKinematicConstraints && Particles.InvM(Index0) == (FSolverReal)0. && Particles.InvM(Index1) == (FSolverReal)0. && Particles.InvM(Index2) == (FSolverReal)0.; })) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Stiffness( InStiffness, StiffnessMultipliers, TConstArrayView<TVec3<int32>>(Constraints), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness)"
  },
  {
    "label": "FPBDAxialSpringConstraintsBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDAxialSpringConstraintsBase()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyPBDValues(Dt, NumIterations)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (} const TArray<TVec3<int32>>&)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const TVec3<int32>& Constraint = Constraints [ ConstraintIndex ] ; const int32 i1 = Constraint [ 0 ] ; const int32 i2 = Constraint [ 1 ] ; const int32 i3 = Constraint [ 2 ] ; const FSolverReal PInvMass = Particles .)",
    "insertText": "InvM(i3) * ((FSolverReal)1. - Barys[ConstraintIndex]) + Particles.InvM(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3& P1 = Particles .)",
    "insertText": "P(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "P(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = Particles .)",
    "insertText": "P(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "P(P2 - P3)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Difference = P1 - P ; const FSolverReal Distance = Difference .)",
    "insertText": "Size()"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3 Direction = Difference / Distance ; const FSolverVec3)",
    "insertText": "Delta(Distance - Dists[ConstraintIndex])"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const FSolverReal CombinedInvMass = PInvMass + Particles .)",
    "insertText": "InvM(i1)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = Particles .)",
    "insertText": "GetX(i1)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "GetX(i2)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = Particles .)",
    "insertText": "GetX(i3)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P32 = P3 - P2 ; const FSolverReal Bary =)",
    "insertText": "DotProduct(P32, P3 - P1) / P32.SizeSquared()"
  },
  {
    "label": "TrimConstraints()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> TArray<TVec3<int32>>)",
    "insertText": "TrimConstraints(const TArray<TVec3<int32>>& InConstraints, Predicate TrimPredicate)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSet<TVec3<int32>> TrimmedConstraints ; TrimmedConstraints .)",
    "insertText": "Reserve(InConstraints.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Index0 = Constraint [ 0 ] ; const int32 Index1 = Constraint [ 1 ] ; const int32 Index2 = Constraint [ 2 ] ;)",
    "insertText": "if(!TrimPredicate(Index0, Index1, Index2))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TrimmedConstraints .)",
    "insertText": "Add(Index0 <= Index1 ? Index1 <= Index2 ? TVec3<int32>(Index0, Index1, Index2) : Index0 <= Index2 ? TVec3<int32>(Index0, Index2, Index1) : TVec3<int32>(Index2, Index0, Index1) : Index0 <= Index2 ? TVec3<int32>(Index1, Index0, Index2) : Index1 <= Index2 ? TVec3<int32>(Index1, Index2, Index0) : TVec3<int32>(Index2, Index1, Index0))"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (} } return TrimmedConstraints .)",
    "insertText": "Array()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Init(const SolverParticlesOrRange& Particles, bool bTrimKinematicConstraints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Barys .)",
    "insertText": "Reset(Constraints.Num())"
  },
  {
    "label": "FindBary()",
    "kind": "Method",
    "detail": "Function (TVec3<int32>& Constraint = Constraints [ Index ] ; int32 i1 = Constraint [ 0 ] ; int32 i2 = Constraint [ 1 ] ; int32 i3 = Constraint [ 2 ] ; const FSolverReal Bary1 =)",
    "insertText": "FindBary(Particles, i1, i2, i3)"
  },
  {
    "label": "FindBary()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Bary2 =)",
    "insertText": "FindBary(Particles, i2, i3, i1)"
  },
  {
    "label": "FindBary()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Bary3 =)",
    "insertText": "FindBary(Particles, i3, i1, i2)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FSolverReal Bary = Bary1 ; const FSolverReal Bary1dist =)",
    "insertText": "Abs(Bary1 - (FSolverReal)0.5)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Bary2dist =)",
    "insertText": "Abs(Bary2 - (FSolverReal)0.5)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Bary3dist =)",
    "insertText": "Abs(Bary3 - (FSolverReal)0.5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Constraint [ 0 ] = i3 ; Constraint [ 1 ] = i1 ; Constraint [ 2 ] = i2 ; Bary = Bary3 ; } else)",
    "insertText": "if(Bary2dist < Bary1dist && Bary2dist < Bary3dist)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (const FSolverReal PInvMass = Particles .)",
    "insertText": "InvM(i3) * ((FSolverReal)1. - Bary) + Particles.InvM(i2)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Constraints .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (continue ; } } Barys .)",
    "insertText": "Add(Bary)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Dists .)",
    "insertText": "Add((P1 - P).Size())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + Index ; })",
    "insertText": "check(Barys.Num() == Constraints.Num())"
  }
]