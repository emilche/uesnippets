[
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TASK_QUEUE_FOR_TEST_H_ # define RTC_BASE_TASK_QUEUE_FOR_TEST_H_ # include<utility> # include \" absl / cleanup / cleanup . h \" # include \" absl / strings / string_view . h \" # include \" api / function_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / event . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { void)",
    "insertText": "SendTask(TaskQueueBase* task_queue, rtc::FunctionView<void()> task)"
  },
  {
    "label": "task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "task()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} ; task_queue ->)",
    "insertText": "PostTask([task, cleanup = std::move(cleanup)] { task(); })"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(event.Wait( rtc::Event::kForever, TimeDelta::Seconds(10)))"
  },
  {
    "label": "TaskQueueForTest()",
    "kind": "Method",
    "detail": "Function (} class RTC_LOCKABLE TaskQueueForTest : public rtc::TaskQueue { public : using rtc::TaskQueue::TaskQueue ;)",
    "insertText": "TaskQueueForTest(absl::string_view name = \"TestQueue\", Priority priority = Priority::NORMAL)"
  },
  {
    "label": "TaskQueueForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskQueueForTest(const TaskQueueForTest&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskQueueForTest&)",
    "insertText": "operator(const TaskQueueForTest&)"
  },
  {
    "label": "TaskQueueForTest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskQueueForTest()"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTask(rtc::FunctionView<void()> task)"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (::)",
    "insertText": "SendTask(Get(), task)"
  },
  {
    "label": "WaitForPreviouslyPostedTasks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForPreviouslyPostedTasks()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!Get()->IsCurrent())"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTask([]() {})"
  }
]