[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_LOWER_BOUND_H # define _LIBCPP___ALGORITHM_LOWER_BOUND_H # include<__algorithm / comp . h> # include<__algorithm / half_positive . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / advance . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<__type_traits / is_callable . h> # include<__type_traits / remove_reference . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Iter, class _Sent, class _Type, class _Proj, class _Comp> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _Iter __lower_bound_impl(_Iter __first, _Sent __last, const _Type& __value, _Comp& __comp, _Proj& __proj)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (auto __len = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first, __last)"
  },
  {
    "label": "__half_positive()",
    "kind": "Method",
    "detail": "Function (auto __l2 =)",
    "insertText": "__half_positive(__len)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (_Iter __m = __first ; _IterOps<_AlgPolicy)",
    "insertText": "advance(__m, __l2)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (__first = + + __m ; __len - = __l2 + 1 ; } else { __len = __l2 ; } } return __first ; } template<class _ForwardIterator,class _Tp,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, _Compare __comp)"
  },
  {
    "label": "__identity()",
    "kind": "Method",
    "detail": "Function (auto __proj =)",
    "insertText": "__identity()"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)"
  }
]