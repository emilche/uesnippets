[
  {
    "label": "FInvertiblePointSlopeFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvertiblePointSlopeFunction"
  },
  {
    "label": "FInvertiblePiecewiseLinearFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInvertiblePiecewiseLinearFunction"
  },
  {
    "label": "FInvertiblePointSlopeFunction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FInvertiblePointSlopeFunction {)",
    "insertText": "FInvertiblePointSlopeFunction(FVector2f Point, float Slope)"
  },
  {
    "label": "SolveForY()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SolveForY(float X)"
  },
  {
    "label": "SolveForX()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SolveForX(float Y)"
  },
  {
    "label": "FInvertiblePiecewiseLinearFunction()",
    "kind": "Method",
    "detail": "Function (FVector2f Point ; float Slope ; } ; class FInvertiblePiecewiseLinearFunction { public :)",
    "insertText": "FInvertiblePiecewiseLinearFunction()"
  },
  {
    "label": "FInvertiblePiecewiseLinearFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInvertiblePiecewiseLinearFunction(const TArray<FVector2f>& FixedPoints)"
  },
  {
    "label": "FindSubFunctionAtX()",
    "kind": "Method",
    "detail": "Function (private : using SubFunction = FInvertiblePointSlopeFunction ; const SubFunction&)",
    "insertText": "FindSubFunctionAtX(float X)"
  },
  {
    "label": "FindSubFunctionAtY()",
    "kind": "Method",
    "detail": "Function (const SubFunction&)",
    "insertText": "FindSubFunctionAtY(float Y)"
  }
]