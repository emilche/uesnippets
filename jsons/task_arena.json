[
  {
    "label": "arena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "arena"
  },
  {
    "label": "task_scheduler_observer_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_scheduler_observer_v3"
  },
  {
    "label": "task_arena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_arena"
  },
  {
    "label": "delegate_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "delegate_base"
  },
  {
    "label": "return_type_or_void",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "return_type_or_void"
  },
  {
    "label": "delegated_function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "delegated_function"
  },
  {
    "label": "delegated_function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "delegated_function"
  },
  {
    "label": "task_arena_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_arena_base"
  },
  {
    "label": "task_arena_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_arena_base"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "task_arena",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_arena"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "attach",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "attach"
  },
  {
    "label": "max_concurrency()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "max_concurrency()"
  },
  {
    "label": "internal_initialize()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_initialize()"
  },
  {
    "label": "internal_terminate()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_terminate()"
  },
  {
    "label": "internal_attach()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_attach()"
  },
  {
    "label": "internal_current_slot()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "internal_current_slot()"
  },
  {
    "label": "internal_max_concurrency()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "internal_max_concurrency( const task_arena * )"
  },
  {
    "label": "isolate_within_arena()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_FUNC)",
    "insertText": "isolate_within_arena( delegate_base& d, intptr_t reserved = 0 )"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (R>)",
    "insertText": "d(f)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (__TBB_TASK_GROUP_CONTEXT)",
    "insertText": "__TBB_ASSERT( my_context, \"task_arena initialization is incomplete\" )"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "initialize()"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (R>)",
    "insertText": "d(f)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (safe)",
    "insertText": "__TBB_ASSERT(!my_arena, \"Impossible to modify settings of an already initialized task_arena\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (safe)",
    "insertText": "__TBB_ASSERT(!my_arena, \"Impossible to modify settings of an already initialized task_arena\")"
  },
  {
    "label": "active()",
    "kind": "Method",
    "detail": "Function (is)",
    "insertText": "active(initialized)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (__TBB_PREVIEW_CRITICAL_TASKS)",
    "insertText": "__TBB_ASSERT(p == priority_low || p == priority_normal || p == priority_high\n                     || p == internal::priority_critical, \"Invalid priority level value\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "__TBB_ASSERT(p == priority_low || p == priority_normal || p == priority_high, \"Invalid priority level value\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (__TBB_PREVIEW_CRITICAL_TASKS)",
    "insertText": "__TBB_ASSERT(p == priority_low || p == priority_normal || p == priority_high\n                     || p == internal::priority_critical, \"Invalid priority level value\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "__TBB_ASSERT(p == priority_low || p == priority_normal || p == priority_high, \"Invalid priority level value\")"
  },
  {
    "label": "enqueue_impl()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "enqueue_impl(f,p)"
  },
  {
    "label": "internal_current_slot()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "internal_current_slot()"
  }
]