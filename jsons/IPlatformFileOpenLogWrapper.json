[
  {
    "label": "FPlatformFileOpenLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlatformFileOpenLog"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "FLoggingAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoggingAsyncReadFileHandle"
  },
  {
    "label": "FILE_OPEN_ORDER_LABEL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncFileHandle . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringConv . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMisc . h \" # include \" HAL / PlatformProperties . h \" # include \" Misc / DataDrivenPlatformInfoRegistry . h \" # include \" Misc / DateTime . h \" # include \" Misc / Parse . h \" # include \" Misc / Paths . h \" class FPlatformFileOpenLog ; class IAsyncReadFileHandle ; class IMappedFileHandle ; # if ! UE_BUILD_SHIPPING # define)",
    "insertText": "FILE_OPEN_ORDER_LABEL(Format, ...) \\ FPlatformFileOpenLog::AddLabel( Format, ##__VA_ARGS__)"
  },
  {
    "label": "FLoggingAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (class FLoggingAsyncReadFileHandle final : public IAsyncReadFileHandle { FPlatformFileOpenLog* Owner ; FString Filename ; IAsyncReadFileHandle* ActualRequest ; public :)",
    "insertText": "FLoggingAsyncReadFileHandle(FPlatformFileOpenLog* InOwner, const TCHAR* InFilename, IAsyncReadFileHandle* InActualRequest) : Owner(InOwner) , Filename(InFilename) , ActualRequest(InActualRequest)"
  },
  {
    "label": "FLoggingAsyncReadFileHandle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLoggingAsyncReadFileHandle()"
  },
  {
    "label": "SizeRequest()",
    "kind": "Method",
    "detail": "Function (delete ActualRequest ; } IAsyncReadRequest*)",
    "insertText": "SizeRequest(FAsyncFileCallBack* CompleteCallback = nullptr)"
  },
  {
    "label": "ReadRequest()",
    "kind": "Method",
    "detail": "Function (} IAsyncReadRequest*)",
    "insertText": "ReadRequest(int64 Offset, int64 BytesToRead, EAsyncIOPriorityAndFlags PriorityAndFlags = AIOP_Normal, FAsyncFileCallBack* CompleteCallback = nullptr, uint8* UserSuppliedMemory = nullptr)"
  },
  {
    "label": "FPlatformFileOpenLog()",
    "kind": "Method",
    "detail": "Function (} ; class FPlatformFileOpenLog : public IPlatformFile { protected : IPlatformFile* LowerLevel ; FCriticalSection CriticalSection ; int64 OpenOrder ; TMap<FString,int64> FilenameAccessMap ; TArray<IFileHandle*> LogOutput ; bool bLogDuplicates ; public :)",
    "insertText": "FPlatformFileOpenLog() : LowerLevel(nullptr) , OpenOrder(0) , bLogDuplicates(false)"
  },
  {
    "label": "FPlatformFileOpenLog()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPlatformFileOpenLog()"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (} using IPlatformFile::IterateDirectory ; using IPlatformFile::IterateDirectoryRecursively ; using IPlatformFile::IterateDirectoryStat ; using IPlatformFile::IterateDirectoryStatRecursively ; bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "Param()",
    "kind": "Method",
    "detail": "Function (bool bResult =)",
    "insertText": "Param(CmdLine, TEXT(\"FileOpenLog\")) || FParse::Param(CmdLine, TEXT(\"FilePackageOpenLog\"))"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (LowerLevel = NewLowerLevel ; } const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (} FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (LowerLevel ->)",
    "insertText": "SetTimeStamp(Filename, DateTime)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (} FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (} IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite)"
  },
  {
    "label": "AddToOpenLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToOpenLog(Filename)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (} return Result ; } IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (} FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CopyDirectoryTree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CopyDirectoryTree(const TCHAR* DestinationDirectory, const TCHAR* Source, bool bOverwriteAllExisting)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IFileServerMessageHandler* Handler)"
  },
  {
    "label": "OpenAsyncRead()",
    "kind": "Method",
    "detail": "Function (} IAsyncReadFileHandle*)",
    "insertText": "OpenAsyncRead(const TCHAR* Filename)"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (} IMappedFileHandle*)",
    "insertText": "OpenMapped(const TCHAR* Filename)"
  },
  {
    "label": "AddToOpenLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToOpenLog(const TCHAR* Filename)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (CriticalSection .)",
    "insertText": "Lock()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Text =)",
    "insertText": "Printf(TEXT(\"\\\"%s\\\"\\n\"), Filename)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(FilenameAccessMap.Find(Filename) == nullptr)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (FilenameAccessMap .)",
    "insertText": "Emplace(Filename, ++OpenOrder)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Text =)",
    "insertText": "Printf(TEXT(\"\\\"%s\\\" %llu\\n\"), Filename, OpenOrder)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} } CriticalSection .)",
    "insertText": "Unlock()"
  },
  {
    "label": "AddLabelToOpenLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLabelToOpenLog(const TCHAR* LabelStr)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Text =)",
    "insertText": "Printf(TEXT(\"# %s\\n\"), LabelStr)"
  },
  {
    "label": "AddPackageToOpenLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPackageToOpenLog(const TCHAR* Filename)"
  },
  {
    "label": "AddLabel()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "AddLabel(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "AddLabelInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLabelInternal((const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "AddLabelInternal()",
    "kind": "Method",
    "detail": "Function (} private : void VARARGS)",
    "insertText": "AddLabelInternal(const TCHAR* Fmt, ...)"
  }
]