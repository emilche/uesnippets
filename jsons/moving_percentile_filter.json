[
  {
    "label": "MovingPercentileFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovingPercentileFilter"
  },
  {
    "label": "MovingMedianFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovingMedianFilter"
  },
  {
    "label": "MovingPercentileFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_MOVING_PERCENTILE_FILTER_H_ # define RTC_BASE_NUMERICS_MOVING_PERCENTILE_FILTER_H_ # include<stddef . h> # include<cstddef> # include<list> # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / percentile_filter . h \" namespace webrtc { template<T> class MovingPercentileFilter { public :)",
    "insertText": "MovingPercentileFilter(float percentile, size_t window_size)"
  },
  {
    "label": "MovingPercentileFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovingPercentileFilter(const MovingPercentileFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MovingPercentileFilter&)",
    "insertText": "operator(const MovingPercentileFilter&)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(const T& value)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFilteredValue()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "GetFilteredValue()"
  },
  {
    "label": "GetNumberOfSamplesStored()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumberOfSamplesStored()"
  },
  {
    "label": "MovingMedianFilter()",
    "kind": "Method",
    "detail": "Function (private : PercentileFilter<T> percentile_filter_ ; std::list<T> samples_ ; size_t samples_stored_ ; const size_t window_size_ ; } ; template<T> class MovingMedianFilter : public MovingPercentileFilter<T> { public :)",
    "insertText": "MovingMedianFilter(size_t window_size) : MovingPercentileFilter<T>(0.5f, window_size)"
  },
  {
    "label": "MovingPercentileFilter()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> MovingPercentileFilter<T)",
    "insertText": "MovingPercentileFilter(float percentile, size_t window_size) : percentile_filter_(percentile), samples_stored_(0), window_size_(window_size)"
  },
  {
    "label": "RTC_CHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_GT(window_size, 0)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (percentile_filter_ .)",
    "insertText": "Insert(value)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (samples_ .)",
    "insertText": "emplace_back(value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + samples_stored_ ;)",
    "insertText": "if(samples_stored_ > window_size_)"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (percentile_filter_ .)",
    "insertText": "Erase(samples_.front())"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (samples_ .)",
    "insertText": "pop_front()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (samples_ .)",
    "insertText": "clear()"
  }
]