[
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UViewAdjustedStaticMeshGizmoComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewAdjustedStaticMeshGizmoComponent"
  },
  {
    "label": "ISceneViewInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewInterface"
  },
  {
    "label": "IViewBasedTransformAdjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IViewBasedTransformAdjuster"
  },
  {
    "label": "FSimpleConstantViewScaleAdjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleConstantViewScaleAdjuster"
  },
  {
    "label": "FSubGizmoTransformAdjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubGizmoTransformAdjuster"
  },
  {
    "label": "FSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSettings"
  },
  {
    "label": "FConstantViewRelativeTransformAdjuster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstantViewRelativeTransformAdjuster"
  },
  {
    "label": "GetAdjustedComponentToWorld()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Transform . h \" # include \" Templates / SharedPointer . h \" class USceneComponent ; class UViewAdjustedStaticMeshGizmoComponent ; namespace UE::GizmoRenderingUtil { class ISceneViewInterface ; class IViewBasedTransformAdjuster { public : FTransform)",
    "insertText": "GetAdjustedComponentToWorld(const ISceneViewInterface& View, const FTransform& CurrentComponentToWorld)"
  },
  {
    "label": "GetAdjustedComponentToWorld_RenderThread()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetAdjustedComponentToWorld_RenderThread(const ISceneViewInterface& View, const FTransform& CurrentComponentToWorld)"
  },
  {
    "label": "UpdateWorldLocalState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateWorldLocalState(bool bWorldIn)"
  },
  {
    "label": "FSettings()",
    "kind": "Method",
    "detail": "Function (private : } ; class FSubGizmoTransformAdjuster : public IViewBasedTransformAdjuster { public : struct FSettings {)",
    "insertText": "FSettings()"
  },
  {
    "label": "FSubGizmoTransformAdjuster()",
    "kind": "Method",
    "detail": "Function (} ; bool bKeepConstantViewSize = true ; bool bMirrorBasedOnOctant = true ; bool bUseWorldAxesForGizmo = false ; } ;)",
    "insertText": "FSubGizmoTransformAdjuster(const FTransform& GizmoOriginToComponent = FTransform::Identity, const FSettings& SettingsIn = FSettings()) : GizmoOriginToComponent_GameThread(GizmoOriginToComponent) , GizmoOriginToComponent_RenderThread(GizmoOriginToComponent) , Settings(SettingsIn)"
  },
  {
    "label": "SetGizmoOriginTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGizmoOriginTransform(const FTransform& GizmoOriginToComponent)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSettings(const FSettings& SettingsIn)"
  },
  {
    "label": "AddTransformAdjuster()",
    "kind": "Method",
    "detail": "Function (Settings = SettingsIn ; } TSharedPtr<FSubGizmoTransformAdjuster>)",
    "insertText": "AddTransformAdjuster(UViewAdjustedStaticMeshGizmoComponent* ComponentIn, USceneComponent* ComponentToKeepDistanceConstantTo, bool bMirrorBasedOnOctant)"
  },
  {
    "label": "GetAdjustedComponentToWorld()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetAdjustedComponentToWorld(const UE::GizmoRenderingUtil::ISceneViewInterface& View, const FTransform& CurrentComponentToWorld)"
  },
  {
    "label": "FConstantViewRelativeTransformAdjuster()",
    "kind": "Method",
    "detail": "Function (Settings . bUseWorldAxesForGizmo = bWorldIn ; } private : FTransform GizmoOriginToComponent_GameThread = FTransform::Identity ; FTransform GizmoOriginToComponent_RenderThread = FTransform::Identity ; FSettings Settings ; } ; class FConstantViewRelativeTransformAdjuster : public IViewBasedTransformAdjuster { public :)",
    "insertText": "FConstantViewRelativeTransformAdjuster(const FTransform& ViewRelativeTransformIn, bool bConstantSize = true) : ViewRelativeTransform(ViewRelativeTransformIn) , bKeepConstantViewSize(bConstantSize)"
  }
]