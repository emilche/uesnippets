[
  {
    "label": "FExtensionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtensionBase"
  },
  {
    "label": "FMenuBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBarBuilder"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolBarBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "Position",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Position"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FExtensionBase ; class FMenuBarBuilder ; class FMenuBuilder ; class FToolBarBuilder ; class FUICommandList ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FMenuBarExtensionDelegate, class FMenuBarBuilder&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FMenuExtensionDelegate, class FMenuBuilder&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FToolBarExtensionDelegate, class FToolBarBuilder&)"
  },
  {
    "label": "AddMenuBarExtension()",
    "kind": "Method",
    "detail": "Function (namespace EExtensionHook { enum Position { Before,After,First,} ; } class FExtensionBase ; class FExtender { public : TSharedRef<const FExtensionBase>)",
    "insertText": "AddMenuBarExtension(FName ExtensionHook, EExtensionHook::Position HookPosition, const TSharedPtr< FUICommandList >& CommandList, const FMenuBarExtensionDelegate& MenuBarExtensionDelegate)"
  },
  {
    "label": "AddMenuExtension()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const FExtensionBase>)",
    "insertText": "AddMenuExtension(FName ExtensionHook, EExtensionHook::Position HookPosition, const TSharedPtr< FUICommandList >& CommandList, const FMenuExtensionDelegate& MenuExtensionDelegate)"
  },
  {
    "label": "AddToolBarExtension()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const FExtensionBase>)",
    "insertText": "AddToolBarExtension(FName ExtensionHook, EExtensionHook::Position HookPosition, const TSharedPtr< FUICommandList >& CommandList, const FToolBarExtensionDelegate& ToolBarExtensionDelegate)"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExtension(const TSharedRef< const FExtensionBase >& Extension)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FName ExtensionHook, EExtensionHook::Position HookPosition, FMenuBarBuilder& MenuBarBuilder)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FName ExtensionHook, EExtensionHook::Position HookPosition, FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FName ExtensionHook, EExtensionHook::Position HookPosition, FToolBarBuilder& ToolBarBuilder)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FExtender>)",
    "insertText": "Combine(const TArray< TSharedPtr<FExtender> >& Extenders)"
  },
  {
    "label": "NumExtensions()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumExtensions()"
  }
]