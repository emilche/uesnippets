[
  {
    "label": "FEventGraphColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventGraphColumn"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboBox"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FEventGraphColumns",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventGraphColumns"
  },
  {
    "label": "IEventGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEventGraph"
  },
  {
    "label": "SEventGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEventGraph"
  },
  {
    "label": "ESelectedEventTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ESelectedEventTypes"
  },
  {
    "label": "EEventHistoryTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EEventHistoryTypes"
  },
  {
    "label": "FEventGraphState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventGraphState"
  },
  {
    "label": "FCulledTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCulledTag"
  },
  {
    "label": "FFilteredTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilteredTag"
  },
  {
    "label": "FFilterByThreadName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterByThreadName"
  },
  {
    "label": "FEventPtrAndMisc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventPtrAndMisc"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" SlateFwd . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / Commands / UIAction . h \" # include \" ProfilerDataSource . h \" # include \" ProfilerManager . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" class FEventGraphColumn ; class FMenuBuilder ; typedef TSharedPtr<class FEventGraphColumn> FEventGraphColumnPtr ; typedef TSharedRef<class FEventGraphColumn> FEventGraphColumnRef ; template<OptionType> class SComboBox ; namespace EEventGraphViewModes { enum Type { Hierarchical,FlatInclusive,FlatInclusiveCoalesced,FlatExclusive,FlatExclusiveCoalesced,ClassAggregate,InvalidOrMax,} ; FText)",
    "insertText": "ToName(const EEventGraphViewModes::Type EventGraphViewMode)"
  },
  {
    "label": "ToDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToDescription(const EEventGraphViewModes::Type EventGraphViewMode)"
  },
  {
    "label": "ToBrushName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ToBrushName(const Type EventGraphViewMode)"
  },
  {
    "label": "FEventGraphColumn()",
    "kind": "Method",
    "detail": "Function (} class FEventGraphColumn { struct FEventGraphColumns ; protected :)",
    "insertText": "FEventGraphColumn()"
  },
  {
    "label": "FEventGraphColumn()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventGraphColumn(const EEventPropertyIndex InIndex, const FName InSearchID, FText InShortName, FText InDescription, const bool bInCanBeHidden, const bool bInIsVisible, const bool bInCanBeSorted, const bool bInCanBeFiltered, const bool bInCanBeCulled, const EHorizontalAlignment InHorizontalAlignment, const float InFixedColumnWidth ) : Index( InIndex ) , ID( FEventGraphSample::GetEventPropertyByIndex(InIndex).Name ) , SearchID( InSearchID ) , ShortName( MoveTemp(InShortName) ) , Description( MoveTemp(InDescription) ) , bCanBeHidden( bInCanBeHidden ) , bIsVisible( bInIsVisible ) , bCanBeSorted( bInCanBeSorted ) , bCanBeFiltered( bInCanBeFiltered ) , bCanBeCulled( bInCanBeCulled ) , HorizontalAlignment( InHorizontalAlignment ) , FixedColumnWidth( InFixedColumnWidth)"
  },
  {
    "label": "ExpandCulledEvents()",
    "kind": "Method",
    "detail": "Function (} public : EEventPropertyIndex Index ; FName ID ; FName SearchID ; FText ShortName ; FText Description ; bool bCanBeHidden ; bool bIsVisible ; bool bCanBeSorted ; bool bCanBeFiltered ; bool bCanBeCulled ; EHorizontalAlignment HorizontalAlignment ; float FixedColumnWidth ; } ; class IEventGraph { public : void)",
    "insertText": "ExpandCulledEvents(FEventGraphSamplePtr EventPtr)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SEventGraph : public SCompoundWidget,public IEventGraph { struct ESelectedEventTypes { enum Type { AllEvents,SelectedEvents,SelectedThreadEvents,} ; } ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SEventGraph)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() SEventGraph()"
  },
  {
    "label": "SEventGraph()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SEventGraph()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetWidgetForEventGraphTypes()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "GetWidgetForEventGraphTypes()"
  },
  {
    "label": "GetWidgetForEventGraphViewModes()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetWidgetForEventGraphViewModes()"
  },
  {
    "label": "GetWidgetBoxForOptions()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetWidgetBoxForOptions()"
  },
  {
    "label": "GetToggleButtonForEventGraphType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForEventGraphType(const EEventGraphTypes::Type EventGraphType, const FName BrushName)"
  },
  {
    "label": "GetToggleButtonForEventGraphViewMode()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForEventGraphViewMode(const EEventGraphViewModes::Type EventGraphViewMode)"
  },
  {
    "label": "EventGraphViewMode_GetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "EventGraphViewMode_GetVisibility(const EEventGraphViewModes::Type ViewMode)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT_TwoParams(SEventGraph, FEventGraphRestoredFromHistoryEvent, uint32 , uint32)"
  },
  {
    "label": "OnEventGraphRestoredFromHistory()",
    "kind": "Method",
    "detail": "Function (FEventGraphRestoredFromHistoryEvent&)",
    "insertText": "OnEventGraphRestoredFromHistory()"
  },
  {
    "label": "EventGraph_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (protected : FEventGraphRestoredFromHistoryEvent EventGraphRestoredFromHistoryEvent ; TSharedRef<ITableRow>)",
    "insertText": "EventGraph_OnGenerateRow(FEventGraphSamplePtr EventPtr, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "EventGraph_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraph_OnGetChildren(FEventGraphSamplePtr InParent, TArray< FEventGraphSamplePtr >& out_Children)"
  },
  {
    "label": "EventGraph_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraph_OnSelectionChanged(FEventGraphSamplePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "EventGraph_OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraph_OnExpansionChanged(FEventGraphSamplePtr SelectedItem, bool bIsExpanded)"
  },
  {
    "label": "TreeView_SetItemsExpansion_Recurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_SetItemsExpansion_Recurrent(TArray<FEventGraphSamplePtr>& InEventGraphSamples, const bool bShouldExpand)"
  },
  {
    "label": "SetHierarchicalSelectedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHierarchicalSelectedEvents(const TArray<FEventGraphSamplePtr>& HierarchicalSelectedEvents)"
  },
  {
    "label": "GetHierarchicalSelectedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHierarchicalSelectedEvents(TArray< FEventGraphSamplePtr >& out_HierarchicalSelectedEvents, const TArray<FEventGraphSamplePtr>* SelectedEvents = NULL)"
  },
  {
    "label": "SetHierarchicalExpandedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHierarchicalExpandedEvents(const TSet<FEventGraphSamplePtr>& HierarchicalExpandedEvents)"
  },
  {
    "label": "GetHierarchicalExpandedEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHierarchicalExpandedEvents(TSet<FEventGraphSamplePtr>& out_HierarchicalExpandedEvents)"
  },
  {
    "label": "ShowEventsInViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowEventsInViewMode(const TArray<FEventGraphSamplePtr>& EventsToSynchronize, const EEventGraphViewModes::Type NewViewMode)"
  },
  {
    "label": "ScrollToTheSlowestSelectedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToTheSlowestSelectedEvent(EEventPropertyIndex ColumnIndex)"
  },
  {
    "label": "CreateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEvents()"
  },
  {
    "label": "SortEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortEvents()"
  },
  {
    "label": "TreeView_Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_Refresh()"
  },
  {
    "label": "SetTreeItemsForViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeItemsForViewMode(const EEventGraphViewModes::Type NewViewMode, EEventGraphTypes::Type NewEventGraphType)"
  },
  {
    "label": "EventGraphViewMode_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraphViewMode_OnCheckStateChanged(ECheckBoxState NewRadioState, const EEventGraphViewModes::Type InViewMode)"
  },
  {
    "label": "EventGraphViewMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "EventGraphViewMode_IsChecked(const EEventGraphViewModes::Type InViewMode)"
  },
  {
    "label": "EventGraphType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraphType_OnCheckStateChanged(ECheckBoxState NewRadioState, const EEventGraphTypes::Type NewEventGraphType)"
  },
  {
    "label": "EventGraphType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "EventGraphType_IsChecked(const EEventGraphTypes::Type InEventGraphType)"
  },
  {
    "label": "EventGraphType_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EventGraphType_IsEnabled(const EEventGraphTypes::Type InEventGraphType)"
  },
  {
    "label": "FilteringSearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilteringSearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "FilteringSearchBox_OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilteringSearchBox_OnTextCommitted(const FText& NewText, ETextCommit::Type CommitType)"
  },
  {
    "label": "FilteringSearchBox_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilteringSearchBox_IsEnabled()"
  },
  {
    "label": "OnAggressiveFilteringToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAggressiveFilteringToggled(ECheckBoxState InState)"
  },
  {
    "label": "EventGraph_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "EventGraph_GetMenuContent()"
  },
  {
    "label": "EventGraph_BuildSortByMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraph_BuildSortByMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "EventGraph_BuildViewColumnMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraph_BuildViewColumnMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ExpandHotPath_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ExpandHotPath_OnClicked()"
  },
  {
    "label": "HighlightHotPath_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighlightHotPath_OnCheckStateChanged(ECheckBoxState InState)"
  },
  {
    "label": "InitializeAndShowHeaderColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndShowHeaderColumns()"
  },
  {
    "label": "TreeViewHeaderRow_OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeViewHeaderRow_OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnID, const EColumnSortMode::Type SortMode)"
  },
  {
    "label": "SetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortModeForColumn(const FName& ColumnID, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "TreeViewHeaderRow_GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "TreeViewHeaderRow_GetSortModeForColumn(const FName ColumnID)"
  },
  {
    "label": "TreeViewHeaderRow_GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "TreeViewHeaderRow_GenerateColumnMenu(const FEventGraphColumn& Column)"
  },
  {
    "label": "EventGraphTableRow_IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EventGraphTableRow_IsColumnVisible(const FName ColumnID)"
  },
  {
    "label": "EventGraphTableRow_SetHoveredTableCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventGraphTableRow_SetHoveredTableCell(const FName ColumnID, const FEventGraphSamplePtr EventPtr)"
  },
  {
    "label": "EventGraphRow_GetHighlightedEventName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "EventGraphRow_GetHighlightedEventName()"
  },
  {
    "label": "EventGraphRow_GetColumnOutlineHAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "EventGraphRow_GetColumnOutlineHAlignment(const FName ColumnID)"
  },
  {
    "label": "TreeViewHeaderRow_ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeViewHeaderRow_ShowColumn(const FName ColumnID)"
  },
  {
    "label": "TreeViewHeaderRow_CreateColumnArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeViewHeaderRow_CreateColumnArgs(const uint32 ColumnIndex)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "Map_SelectAllFrames_Global()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Map_SelectAllFrames_Global()"
  },
  {
    "label": "SelectAllFrames_Custom()",
    "kind": "Method",
    "detail": "Function (const FUIAction)",
    "insertText": "SelectAllFrames_Custom()"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::SelectAllFrames_Execute)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::SelectAllFrames_CanExecute)"
  },
  {
    "label": "SelectAllFrames_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectAllFrames_CanExecute()"
  },
  {
    "label": "ContextMenu_ExecuteDummy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExecuteDummy(const FName ActionName)"
  },
  {
    "label": "ContextMenu_CanExecuteDummy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CanExecuteDummy(const FName ActionName)"
  },
  {
    "label": "ContextMenu_IsCheckedDummy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_IsCheckedDummy(const FName ActionName)"
  },
  {
    "label": "ContextMenu_ExpandHotPath_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExpandHotPath_Execute()"
  },
  {
    "label": "ContextMenu_ExpandHotPath_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExpandHotPath_CanExecute()"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopySelectedToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopySelectedToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopySelectedToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_SelectStack_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SelectStack_Execute()"
  },
  {
    "label": "ContextMenu_SelectStack_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SelectStack_CanExecute()"
  },
  {
    "label": "ContextMenu_SortByColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortByColumn_Execute(const FName ColumnID)"
  },
  {
    "label": "ContextMenu_SortByColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_CanExecute(const FName ColumnID)"
  },
  {
    "label": "ContextMenu_SortByColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_IsChecked(const FName ColumnID)"
  },
  {
    "label": "ContextMenu_ToggleColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ToggleColumn_Execute(const FName ColumnID)"
  },
  {
    "label": "ContextMenu_ToggleColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ToggleColumn_CanExecute(const FName ColumnID)"
  },
  {
    "label": "ContextMenu_ToggleColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ToggleColumn_IsChecked(const FName ColumnID)"
  },
  {
    "label": "ContextMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortMode_Execute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_CanExecute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_IsChecked(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_ResetColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ResetColumns_Execute()"
  },
  {
    "label": "ContextMenu_ResetColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ResetColumns_CanExecute()"
  },
  {
    "label": "HeaderMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_SortMode_Execute(const FName ColumnID, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_CanExecute(const FName ColumnID, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_IsChecked(const FName ColumnID, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_HideColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_HideColumn_Execute(const FName ColumnID)"
  },
  {
    "label": "HeaderMenu_HideColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_HideColumn_CanExecute(const FName ColumnID)"
  },
  {
    "label": "SetRoot_Custom()",
    "kind": "Method",
    "detail": "Function (public : const FUIAction)",
    "insertText": "SetRoot_Custom()"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::SetRoot_Execute)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::SetRoot_CanExecute)"
  },
  {
    "label": "SetRoot_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRoot_CanExecute()"
  },
  {
    "label": "ClearHistory_Custom()",
    "kind": "Method",
    "detail": "Function (public : const FUIAction)",
    "insertText": "ClearHistory_Custom()"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::ClearHistory_Execute)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::ClearHistory_CanExecute)"
  },
  {
    "label": "ClearHistory_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearHistory_CanExecute()"
  },
  {
    "label": "ShowSelectedEventsInViewMode_Custom()",
    "kind": "Method",
    "detail": "Function (public : const FUIAction)",
    "insertText": "ShowSelectedEventsInViewMode_Custom(EEventGraphViewModes::Type NewViewMode)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::ShowSelectedEventsInViewMode_Execute, NewViewMode)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::ShowSelectedEventsInViewMode_CanExecute, NewViewMode)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . GetActionCheckState =)",
    "insertText": "CreateSP(this, &SEventGraph::ShowSelectedEventsInViewMode_GetCheckState, NewViewMode)"
  },
  {
    "label": "ShowSelectedEventsInViewMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowSelectedEventsInViewMode_CanExecute(EEventGraphViewModes::Type NewViewMode)"
  },
  {
    "label": "ShowSelectedEventsInViewMode_GetCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "ShowSelectedEventsInViewMode_GetCheckState(EEventGraphViewModes::Type NewViewMode)"
  },
  {
    "label": "FilterOutByProperty_Custom()",
    "kind": "Method",
    "detail": "Function (public : const FUIAction)",
    "insertText": "FilterOutByProperty_Custom(const FEventGraphSamplePtr EventPtr, const FName PropertyName, const bool bReset)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::FilterOutByProperty_Execute, EventPtr, PropertyName, bReset)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::FilterOutByProperty_CanExecute, EventPtr, PropertyName, bReset)"
  },
  {
    "label": "FilterOutByProperty_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterOutByProperty_CanExecute(const FEventGraphSamplePtr EventPtr, const FName PropertyName, const bool bReset)"
  },
  {
    "label": "CullByProperty_Custom()",
    "kind": "Method",
    "detail": "Function (public : const FUIAction)",
    "insertText": "CullByProperty_Custom(const FEventGraphSamplePtr EventPtr, const FName PropertyName, const bool bReset)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::CullByProperty_Execute, EventPtr, PropertyName, bReset)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::CullByProperty_CanExecute, EventPtr, PropertyName, bReset)"
  },
  {
    "label": "CullByProperty_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CullByProperty_CanExecute(const FEventGraphSamplePtr EventPtr, const FName PropertyName, const bool bReset)"
  },
  {
    "label": "HistoryList_GoTo_Custom()",
    "kind": "Method",
    "detail": "Function (public : const FUIAction)",
    "insertText": "HistoryList_GoTo_Custom(int32 StateIndex)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::HistoryList_GoTo_Execute, StateIndex)"
  },
  {
    "label": "FCanExecuteAction()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "FCanExecuteAction()"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . GetActionCheckState =)",
    "insertText": "CreateSP(this, &SEventGraph::HistoryList_GoTo_GetCheckState, StateIndex)"
  },
  {
    "label": "HistoryList_GoTo_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistoryList_GoTo_Execute(StateIndex)"
  },
  {
    "label": "HistoryList_GoTo_Execute()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HistoryList_GoTo_Execute(int32 StateIndex)"
  },
  {
    "label": "HistoryList_GoTo_GetCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HistoryList_GoTo_GetCheckState(int32 StateIndex)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FUIAction UIAction ; UIAction . ExecuteAction =)",
    "insertText": "CreateSP(const_cast<SEventGraph*>(this), &SEventGraph::SetExpansionForEvents_Execute, SelectedEventType, bShouldExpand)"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (UIAction . CanExecuteAction =)",
    "insertText": "CreateSP(this, &SEventGraph::SetExpansionForEvents_CanExecute, SelectedEventType, bShouldExpand)"
  },
  {
    "label": "SetExpansionForEvents_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpansionForEvents_Execute(const ESelectedEventTypes::Type SelectedEventType, bool bShouldExpand)"
  },
  {
    "label": "SetExpansionForEvents_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetExpansionForEvents_CanExecute(const ESelectedEventTypes::Type SelectedEventType, bool bShouldExpand)"
  },
  {
    "label": "FEventGraphState()",
    "kind": "Method",
    "detail": "Function (protected : TMultiMap<FName,FEventGraphSamplePtr> HierarchicalToFlatCoalesced ; TArray<FEventGraphSamplePtr> Events_Flat ; TArray<FEventGraphSamplePtr> Events_FlatCoalesced ; EColumnSortMode::Type ColumnSortMode ; FName ColumnBeingSorted ; typedef TSharedPtr<STreeView<FEventGraphSamplePtr>> FTreeViewOfEventGraphSamples ; FTreeViewOfEventGraphSamples TreeView_Base ; TSharedPtr<SScrollBar> ExternalScrollbar ; TSharedPtr<SBox> FunctionDetailsBox ; TSharedPtr<SHeaderRow> TreeViewHeaderRow ; TSharedPtr<SSearchBox> FilteringSearchBox ; TMap<FName,FEventGraphColumn> TreeViewHeaderColumns ; TMap<FName,SHeaderRow::FColumn::FArguments> TreeViewHeaderColumnArgs ; FName HoveredColumnID ; FEventGraphSamplePtr HoveredSamplePtr ; protected : struct EEventHistoryTypes { enum Type { NewEventGraph,Rooted,Culled,Filtered,} ; } ; class FEventGraphState { struct FCulledTag { } ; struct FFilteredTag { } ; public :)",
    "insertText": "FEventGraphState(FEventGraphDataRef InAverageEventGraph, FEventGraphDataRef InMaximumEventGraph) : AverageEventGraph(InAverageEventGraph) , MaximumEventGraph(InMaximumEventGraph) , FakeRoot(FEventGraphSample::CreateNamedEvent(FEventGraphConsts::FakeRoot)) , CullPropertyName(NAME_None) , CullEventPtr(nullptr) , FilterPropertyName(NAME_None) , FilterEventPtr(nullptr) , CreationTime(FPlatformTime::Seconds()) , HistoryType(EEventHistoryTypes::NewEventGraph) , ViewMode(EEventGraphViewModes::Hierarchical) , EventGraphType(InAverageEventGraph->GetNumFrames() == 1 ? EEventGraphTypes::OneFrame : EEventGraphTypes::Average) , bAggressiveFiltering(false)"
  },
  {
    "label": "CreateOneToOneMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOneToOneMapping()"
  },
  {
    "label": "CreateCopyWithNewRoot()",
    "kind": "Method",
    "detail": "Function (} FEventGraphState*)",
    "insertText": "CreateCopyWithNewRoot(const TArray<FEventGraphSamplePtr>& UniqueLeafs)"
  },
  {
    "label": "CreateCopyWithCulling()",
    "kind": "Method",
    "detail": "Function (} FEventGraphState*)",
    "insertText": "CreateCopyWithCulling(const FName InCullPropertyName, const FEventGraphSamplePtr InCullEventPtr)"
  },
  {
    "label": "CreateCopyWithFiltering()",
    "kind": "Method",
    "detail": "Function (} FEventGraphState*)",
    "insertText": "CreateCopyWithFiltering(const FName InFilterPropertyName, const FEventGraphSamplePtr InFilterEventPtr)"
  },
  {
    "label": "CreateCopyWithTextFiltering()",
    "kind": "Method",
    "detail": "Function (} FEventGraphState*)",
    "insertText": "CreateCopyWithTextFiltering(const FString& InFilterText)"
  },
  {
    "label": "FEventGraphState()",
    "kind": "Method",
    "detail": "Function (FEventGraphState* Result = new)",
    "insertText": "FEventGraphState(*this, NAME_None, nullptr, FFilteredTag())"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (InFilterText .)",
    "insertText": "ParseIntoArray(Result->TextBasedFilterStringTokens, TEXT(\" \"))"
  },
  {
    "label": "FEventGraphState()",
    "kind": "Method",
    "detail": "Function (bAggressiveFiltering = bInAggressiveFiltering ; } protected :)",
    "insertText": "FEventGraphState(const FEventGraphState& EventGraphState, const TArray<FEventGraphSamplePtr>& UniqueLeafs) : AverageEventGraph(EventGraphState.AverageEventGraph) , MaximumEventGraph(EventGraphState.MaximumEventGraph) , AverageToMaximumMapping(EventGraphState.AverageToMaximumMapping) , MaximumToAverageMapping(EventGraphState.MaximumToAverageMapping) , ExpandedEvents(EventGraphState.ExpandedEvents) , SelectedEvents(EventGraphState.SelectedEvents) , FakeRoot(FEventGraphSample::CreateNamedEvent(FEventGraphConsts::FakeRoot)) , CullPropertyName(EventGraphState.CullPropertyName) , CullEventPtr(EventGraphState.CullEventPtr) , ExpandedCulledEvents(EventGraphState.ExpandedCulledEvents) , FilterPropertyName(EventGraphState.FilterPropertyName) , FilterEventPtr(EventGraphState.FilterEventPtr) , CreationTime(FPlatformTime::Seconds()) , HistoryType(EEventHistoryTypes::Rooted) , ViewMode(EventGraphState.ViewMode) , EventGraphType(EventGraphState.EventGraphType) , bAggressiveFiltering(EventGraphState.bAggressiveFiltering)"
  },
  {
    "label": "SetNewRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewRoot(UniqueLeafs)"
  },
  {
    "label": "FEventGraphState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventGraphState(const FEventGraphState& EventGraphState, const FName InCullPropertyName, const FEventGraphSamplePtr InCullEventPtr, FCulledTag) : AverageEventGraph(EventGraphState.AverageEventGraph) , MaximumEventGraph(EventGraphState.MaximumEventGraph) , AverageToMaximumMapping(EventGraphState.AverageToMaximumMapping) , MaximumToAverageMapping(EventGraphState.MaximumToAverageMapping) , ExpandedEvents(EventGraphState.ExpandedEvents) , SelectedEvents(EventGraphState.SelectedEvents) , FakeRoot(FEventGraphSample::CreateNamedEvent(FEventGraphConsts::FakeRoot)) , CullPropertyName(InCullPropertyName) , CullEventPtr(InCullEventPtr) , ExpandedCulledEvents() , FilterPropertyName(EventGraphState.FilterPropertyName) , FilterEventPtr(EventGraphState.FilterEventPtr) , CreationTime(FPlatformTime::Seconds()) , HistoryType(EEventHistoryTypes::Culled) , ViewMode(EventGraphState.ViewMode) , EventGraphType(EventGraphState.EventGraphType) , bAggressiveFiltering(EventGraphState.bAggressiveFiltering)"
  },
  {
    "label": "SetNewRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewRoot(EventGraphState.FakeRoot->GetChildren())"
  },
  {
    "label": "FEventGraphState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEventGraphState(const FEventGraphState& EventGraphState, const FName InFilterPropertyName, const FEventGraphSamplePtr InFilterEventPtr, FFilteredTag) : AverageEventGraph(EventGraphState.AverageEventGraph) , MaximumEventGraph(EventGraphState.MaximumEventGraph) , AverageToMaximumMapping(EventGraphState.AverageToMaximumMapping) , MaximumToAverageMapping(EventGraphState.MaximumToAverageMapping) , ExpandedEvents(EventGraphState.ExpandedEvents) , SelectedEvents(EventGraphState.SelectedEvents) , FakeRoot(FEventGraphSample::CreateNamedEvent(FEventGraphConsts::FakeRoot)) , CullPropertyName(EventGraphState.CullPropertyName) , CullEventPtr(EventGraphState.CullEventPtr) , ExpandedCulledEvents(EventGraphState.ExpandedCulledEvents) , FilterPropertyName(InFilterPropertyName) , FilterEventPtr(InFilterEventPtr) , CreationTime(FPlatformTime::Seconds()) , HistoryType(EEventHistoryTypes::Filtered) , ViewMode(EventGraphState.ViewMode) , EventGraphType(EventGraphState.EventGraphType) , bAggressiveFiltering(EventGraphState.bAggressiveFiltering)"
  },
  {
    "label": "IsCulled()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsCulled()"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "GetFullDescription()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetFullDescription()"
  },
  {
    "label": "GetRootedDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRootedDesc()"
  },
  {
    "label": "GetCullingDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCullingDesc()"
  },
  {
    "label": "GetFilteringDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilteringDesc()"
  },
  {
    "label": "GetHistoryDesc()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHistoryDesc()"
  },
  {
    "label": "GetEventGraph()",
    "kind": "Method",
    "detail": "Function (const FEventGraphDataRef&)",
    "insertText": "GetEventGraph()"
  },
  {
    "label": "GetRealRoot()",
    "kind": "Method",
    "detail": "Function (} FEventGraphSamplePtr)",
    "insertText": "GetRealRoot()"
  },
  {
    "label": "SetNewRoot()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewRoot(const TArray<FEventGraphSamplePtr>& NewRootEvents)"
  },
  {
    "label": "AddChildPtr()",
    "kind": "Method",
    "detail": "Function (FakeRoot ->)",
    "insertText": "AddChildPtr(NewRootEvents[Nx])"
  },
  {
    "label": "SetNewRootFiltered()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNewRootFiltered(const TArray<FEventGraphSamplePtr>& NewRootEvents)"
  },
  {
    "label": "IsChildFiltered()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& RootEvent = NewRootEvents [ Nx ] ; bool bAddRoot = !)",
    "insertText": "IsChildFiltered(RootEvent)"
  },
  {
    "label": "AddChildPtr()",
    "kind": "Method",
    "detail": "Function (FakeRoot ->)",
    "insertText": "AddChildPtr(RootEvent)"
  },
  {
    "label": "IsChildFiltered()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsChildFiltered(const FEventGraphSamplePtr &ChildEvent)"
  },
  {
    "label": "PropertyValueAsBool()",
    "kind": "Method",
    "detail": "Function (bool bFiltered = ChildEvent ->)",
    "insertText": "PropertyValueAsBool(EEventPropertyIndex::bIsFiltered)"
  },
  {
    "label": "IsChildFiltered()",
    "kind": "Method",
    "detail": "Function (bFiltered | =)",
    "insertText": "IsChildFiltered(ChildEvent->GetChildren()[Cx])"
  },
  {
    "label": "ApplyCulling()",
    "kind": "Method",
    "detail": "Function (} return bFiltered ; } void)",
    "insertText": "ApplyCulling()"
  },
  {
    "label": "ExecuteOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperation(GetRoot(), EEventPropertyIndex::bIsCulled, CullEventPtr, FEventGraphSample::GetEventPropertyByName(CullPropertyName).Index, EEventCompareOps::Less)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRoot()->SetBooleanStateForAllChildren<EEventPropertyIndex::bNeedNotCulledChildrenUpdate>(true)"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetRoot()->SetBooleanStateForAllChildren<EEventPropertyIndex::bIsCulled>(false)"
  },
  {
    "label": "PassesTokenFilter()",
    "kind": "Method",
    "detail": "Function (} } private : bool)",
    "insertText": "PassesTokenFilter(const TArray<FString>& FilterTokens, const FString& TestString)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bAnyPasses = false ;)",
    "insertText": "for(FEventGraphSamplePtr& Node : Nodes)"
  },
  {
    "label": "ApplyTextBasedFilterInternal()",
    "kind": "Method",
    "detail": "Function (const bool bChildPassesFilter =)",
    "insertText": "ApplyTextBasedFilterInternal(Node->GetChildren(), bCullAsWell)"
  },
  {
    "label": "PassesTokenFilter()",
    "kind": "Method",
    "detail": "Function (const bool bThisPassesFilter =)",
    "insertText": "PassesTokenFilter(TextBasedFilterStringTokens, Node->_StatName.ToString())"
  },
  {
    "label": "bChildSavesFromCull()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bChildSavesFromCull(ViewMode == EEventGraphViewModes::Hierarchical)"
  },
  {
    "label": "PropertyValueAsBool()",
    "kind": "Method",
    "detail": "Function (bool& bCullState = Node ->)",
    "insertText": "PropertyValueAsBool(EEventPropertyIndex::bIsCulled)"
  },
  {
    "label": "bCullState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bCullState(bCullState || !bChildPassesFilter)"
  },
  {
    "label": "RebuildForFilter()",
    "kind": "Method",
    "detail": "Function (} } return bAnyPasses ; } void)",
    "insertText": "RebuildForFilter(TArray< FEventGraphSamplePtr >& Nodes)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FakeRoot ->)",
    "insertText": "GetChildren().Empty()"
  },
  {
    "label": "NodePassesFilter()",
    "kind": "Method",
    "detail": "Function (bool NodePass =)",
    "insertText": "NodePassesFilter(Node)"
  },
  {
    "label": "RebuildChildrenWhoPassFilter()",
    "kind": "Method",
    "detail": "Function (bool Pass =)",
    "insertText": "RebuildChildrenWhoPassFilter(Node)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FakeRoot ->)",
    "insertText": "GetChildren().Add(Node)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "SetParent(FakeRoot)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(auto Node : FakeRoot->GetChildren())"
  },
  {
    "label": "CombineLikeNamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineLikeNamed(Node->GetChildren())"
  },
  {
    "label": "RecalcTimes()",
    "kind": "Method",
    "detail": "Function (Node ->)",
    "insertText": "RecalcTimes()"
  },
  {
    "label": "CombineLikeNamed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CombineLikeNamed(TArray< FEventGraphSamplePtr >& Nodes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FEventGraphSamplePtr> KillNodes ;)",
    "insertText": "for(int32 IdxA = 0; IdxA < Nodes.Num(); IdxA++)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (TArray<FEventGraphSamplePtr>& AChildren = Nodes [ IdxA ] ->)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString ANodeName = Nodes [ IdxA ] -> _StatName .)",
    "insertText": "ToString()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (AChildren .)",
    "insertText": "Append(BChildren)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (Child ->)",
    "insertText": "SetParent(Nodes[IdxA])"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (BChildren .)",
    "insertText": "Empty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KillNodes .)",
    "insertText": "Add(Nodes[IdxB])"
  },
  {
    "label": "CombineLikeNamed()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CombineLikeNamed(Nodes[IdxA]->GetChildren())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} TArray<FEventGraphSamplePtr> NewNodes ;)",
    "insertText": "for(int32 Idx = 0; Idx < Nodes.Num(); Idx++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bFound = false ;)",
    "insertText": "for(int32 KillIdx = 0; KillIdx < KillNodes.Num(); KillIdx++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bFound = true ; break ; } })",
    "insertText": "if(bFound == false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewNodes .)",
    "insertText": "Add(Nodes[Idx])"
  },
  {
    "label": "RebuildChildrenWhoPassFilter()",
    "kind": "Method",
    "detail": "Function (} } Nodes = NewNodes ; } bool)",
    "insertText": "RebuildChildrenWhoPassFilter(FEventGraphSamplePtr& Node)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FEventGraphSamplePtr> PassingChildren ; bool bAnyChildPasses = false ;)",
    "insertText": "for(auto Child : Node->GetChildren())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCulledState = false ;)",
    "insertText": "if(NodePassesFilter(Child))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bFilteredState = false ; PassingChildren .)",
    "insertText": "Add(Child)"
  },
  {
    "label": "FilterAllChildren()",
    "kind": "Method",
    "detail": "Function (bAnyChildPasses = true ;)",
    "insertText": "FilterAllChildren(Child)"
  },
  {
    "label": "RebuildChildrenWhoPassFilter()",
    "kind": "Method",
    "detail": "Function (} else { bool bChildPasses =)",
    "insertText": "RebuildChildrenWhoPassFilter(Child)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (PassingChildren .)",
    "insertText": "Append(Child->GetChildren())"
  },
  {
    "label": "FilterAllChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterAllChildren(FEventGraphSamplePtr &Node)"
  },
  {
    "label": "ApplyFiltering()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "ApplyFiltering()"
  },
  {
    "label": "RebuildForFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildForFilter(GetEventGraph()->GetRoot()->GetChildren())"
  },
  {
    "label": "ApplyTextBasedFilterInternal()",
    "kind": "Method",
    "detail": "Function (const bool bAlsoCull = true ;)",
    "insertText": "ApplyTextBasedFilterInternal(GetRoot()->GetChildren(), bAlsoCull)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsFiltered())"
  },
  {
    "label": "ExecuteOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteOperation(GetRoot(), EEventPropertyIndex::bIsFiltered, FilterEventPtr, FEventGraphSample::GetEventPropertyByName(FilterPropertyName).Index, EEventCompareOps::Less)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!ThreadFilter.IsNone())"
  },
  {
    "label": "FFilterByThreadName()",
    "kind": "Method",
    "detail": "Function (struct FFilterByThreadName {)",
    "insertText": "FFilterByThreadName(const FName InThreadName) : ThreadName(InThreadName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FEventGraphSample* InEventPtr)"
  },
  {
    "label": "GetThread()",
    "kind": "Method",
    "detail": "Function (_ThreadName != ThreadName)",
    "insertText": "GetThread()"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (} FName ThreadName ; } ;)",
    "insertText": "GetRoot()->ExecuteOperationForAllChildren(FFilterByThreadName(ThreadFilter))"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetRoot()->SetBooleanStateForAllChildren<EEventPropertyIndex::bIsFiltered>(false)"
  },
  {
    "label": "UpdateToNewEventGraphType()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "UpdateToNewEventGraphType(const EEventGraphTypes::Type NewEventGraphType)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TMap<FEventGraphSamplePtr,FEventGraphSamplePtr>& OneToOneMapping = NewEventGraphType = = EEventGraphTypes::Maximum ? AverageToMaximumMapping : MaximumToAverageMapping ; TArray<FEventGraphSamplePtr> NewSelectedEvents ;)",
    "insertText": "for(int32 Nx = 0; Nx < SelectedEvents.Num(); ++Nx)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& EventRef = OneToOneMapping .)",
    "insertText": "FindRef(SelectedEvents[Nx])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewSelectedEvents .)",
    "insertText": "Add(EventRef)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} TSet<FEventGraphSamplePtr> NewExpandedEvents ;)",
    "insertText": "for(auto It = ExpandedEvents.CreateConstIterator(); It; ++It)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& EventRef = OneToOneMapping .)",
    "insertText": "FindRef(*It)"
  },
  {
    "label": "CreateNamedEvent()",
    "kind": "Method",
    "detail": "Function (} FEventGraphSamplePtr NewFakeRoot =)",
    "insertText": "CreateNamedEvent(FEventGraphConsts::FakeRoot)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (const FEventGraphSamplePtr& EventRef = OneToOneMapping .)",
    "insertText": "FindRef(Children[Nx])"
  },
  {
    "label": "AddChildPtr()",
    "kind": "Method",
    "detail": "Function (NewFakeRoot ->)",
    "insertText": "AddChildPtr(EventRef)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Exchange(SelectedEvents, NewSelectedEvents)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(ExpandedEvents, NewExpandedEvents)"
  },
  {
    "label": "GetCurrentState()",
    "kind": "Method",
    "detail": "Function (FakeRoot = NewFakeRoot ; EventGraphType = NewEventGraphType ; } } } ; typedef TSharedPtr<class FEventGraphState> FEventGraphStatePtr ; typedef TSharedRef<class FEventGraphState> FEventGraphStateRef ; FEventGraphStateRef)",
    "insertText": "GetCurrentState()"
  },
  {
    "label": "GetCurrentStateEventGraphType()",
    "kind": "Method",
    "detail": "Function (} return EEventGraphViewModes::InvalidOrMax ; } EEventGraphTypes::Type)",
    "insertText": "GetCurrentStateEventGraphType()"
  },
  {
    "label": "SetNewEventGraphState()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetNewEventGraphState(const FEventGraphDataRef AverageEventGraph, const FEventGraphDataRef MaximumEventGraph, bool bInitial)"
  },
  {
    "label": "SaveCurrentEventGraphState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SaveCurrentEventGraphState()"
  },
  {
    "label": "RestoreEventGraphStateFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreEventGraphStateFrom(const FEventGraphStateRef EventGraphState, const bool bRestoredFromHistoryEvent = true)"
  },
  {
    "label": "SwitchToEventGraphState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchToEventGraphState(int32 StateIndex)"
  },
  {
    "label": "SetEventGraphFromStateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEventGraphFromStateInternal(const FEventGraphStateRef& EventGraphState)"
  },
  {
    "label": "EventGraph_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EventGraph_IsEnabled()"
  },
  {
    "label": "HistoryBack_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HistoryBack_OnClicked()"
  },
  {
    "label": "HistoryBack_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HistoryBack_IsEnabled()"
  },
  {
    "label": "HistoryBack_GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HistoryBack_GetToolTipText()"
  },
  {
    "label": "HistoryForward_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HistoryForward_IsEnabled()"
  },
  {
    "label": "HistoryForward_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HistoryForward_OnClicked()"
  },
  {
    "label": "HistoryForward_GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HistoryForward_GetToolTipText()"
  },
  {
    "label": "HistoryList_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HistoryList_IsEnabled()"
  },
  {
    "label": "HistoryList_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HistoryList_GetMenuContent()"
  },
  {
    "label": "IsEventGraphStatesHistoryValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEventGraphStatesHistoryValid()"
  },
  {
    "label": "FEventPtrAndMisc()",
    "kind": "Method",
    "detail": "Function (} TArray<FEventGraphStateRef> EventGraphStatesHistory ; int32 CurrentStateIndex ; protected : struct FEventPtrAndMisc {)",
    "insertText": "FEventPtrAndMisc(FEventGraphSamplePtr InEventPtr, float InIncTimeToTotalPct, float InHeightPct ) : EventPtr( InEventPtr ) , IncTimeToTotalPct( InIncTimeToTotalPct ) , HeightPct( InHeightPct)"
  },
  {
    "label": "GetVerticalBoxForFunctionDetails()",
    "kind": "Method",
    "detail": "Function (} FEventGraphSamplePtr EventPtr ; float IncTimeToTotalPct ; float HeightPct ; } ; TSharedRef<SVerticalBox>)",
    "insertText": "GetVerticalBoxForFunctionDetails(TSharedPtr<SVerticalBox>& out_VerticalBoxTopFuncions, const FText& Caption)"
  },
  {
    "label": "GetVerticalBoxForCurrentFunction()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SVerticalBox>)",
    "insertText": "GetVerticalBoxForCurrentFunction()"
  },
  {
    "label": "UpdateFunctionDetailsForEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFunctionDetailsForEvent(FEventGraphSamplePtr SelectedEvent)"
  },
  {
    "label": "DisableFunctionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableFunctionDetails()"
  },
  {
    "label": "UpdateFunctionDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFunctionDetails()"
  },
  {
    "label": "RecreateWidgetsForTopEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateWidgetsForTopEvents(const TSharedPtr<SVerticalBox>& DestVerticalBox, const TArray<FEventPtrAndMisc>& TopEvents)"
  },
  {
    "label": "GenerateCallerCalleeGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCallerCalleeGraph(FEventGraphSamplePtr SelectedEvent)"
  },
  {
    "label": "GenerateTopEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTopEvents(const TSet< FEventGraphSamplePtr >& EventPtrSet, TArray<FEventPtrAndMisc>& out_Results)"
  },
  {
    "label": "CalculateEventWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateEventWeights(TArray<FEventPtrAndMisc>& Events)"
  },
  {
    "label": "GetEventDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEventDescription(FEventGraphSamplePtr EventPtr, float Pct, const bool bSimple)"
  },
  {
    "label": "GetContentForEvent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHorizontalBox>)",
    "insertText": "GetContentForEvent(FEventGraphSamplePtr EventPtr, float Pct, const bool bSimple)"
  },
  {
    "label": "CallingCalledFunctionButton_OnClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "CallingCalledFunctionButton_OnClicked(FEventGraphSamplePtr EventPtr)"
  },
  {
    "label": "FillThreadFilterOptions()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SVerticalBox> VerticalBox_TopCalled ; TSharedPtr<SVerticalBox> VerticalBox_TopCalling ; TSharedPtr<SVerticalBox> VerticalBox_CurrentFunction ; SVerticalBox::FSlot* CurrentFunctionDescSlot ; TArray<FEventPtrAndMisc> TopCallingFunctionEvents ; TArray<FEventPtrAndMisc> TopCalledFunctionEvents ; FName HighlightedEventName ; void)",
    "insertText": "FillThreadFilterOptions()"
  },
  {
    "label": "GenerateTextForThreadFilter()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GenerateTextForThreadFilter(FName ThreadName)"
  },
  {
    "label": "OnThreadFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadFilterChanged(TSharedPtr<FName> NewThread, ESelectInfo::Type SelectionType)"
  },
  {
    "label": "GetWidgetForThreadFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetWidgetForThreadFilter()"
  },
  {
    "label": "OnGenerateWidgetForThreadFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGenerateWidgetForThreadFilter(TSharedPtr<FName> ThreadName)"
  }
]