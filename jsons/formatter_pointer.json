[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMATTER_POINTER_H # define _LIBCPP___FORMAT_FORMATTER_POINTER_H # include<__availability> # include<__config> # include<__format / format_fwd . h> # include<__format / format_parse_context . h> # include<__format / formatter . h> # include<__format / formatter_integral . h> # include<__format / formatter_output . h> # include<__format / parser_std_format_spec . h> # include<cstddef> # include<cstdint> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__formatter_pointer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "__formatter_pointer()"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (__parser_ . __alignment_ = __format_spec::__alignment::__right ; } _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "parse(basic_format_parse_context<_CharT>& __parse_ctx) -> decltype(__parse_ctx.begin())"
  },
  {
    "label": "__parse()",
    "kind": "Method",
    "detail": "Function (auto __result = __parser_ .)",
    "insertText": "__parse(__parse_ctx, __format_spec::__fields_pointer)"
  },
  {
    "label": "__process_display_type_pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__process_display_type_pointer(__parser_.__type_)"
  },
  {
    "label": "__get_parsed_std_specifications()",
    "kind": "Method",
    "detail": "Function (__format_spec::__parsed_specifications<_CharT> __specs = __parser_ .)",
    "insertText": "__get_parsed_std_specifications(__ctx)"
  },
  {
    "label": "__format_integer()",
    "kind": "Method",
    "detail": "Function (__specs . __std_ . __alternate_form_ = true ; __specs . __std_ . __type_ = __format_spec::__type::__hexadecimal_lower_case ; return)",
    "insertText": "__format_integer(reinterpret_cast<uintptr_t>(__ptr), __ctx, __specs)"
  }
]