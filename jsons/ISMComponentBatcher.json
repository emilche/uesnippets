[
  {
    "label": "FISMComponentBatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISMComponentBatcher"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / InstancedStaticMeshComponent . h \" # include \" Engine / EngineTypes . h \" # include \" Templates / EnableIf . h \" # include \" Templates / UnrealTypeTraits . h \" struct FISMComponentBatcher { public : void)",
    "insertText": "Add(const UActorComponent* InActorComponent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const UActorComponent* InActorComponent, TFunctionRef<FTransform(const FTransform&)> InTransformFunc)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<TComponentClass = UActorComponent,= TEnableIf<TIsDerivedFrom<TComponentClass,UActorComponent>::IsDerived>::Type> void)",
    "insertText": "Append(const TArray<TComponentClass*>& InComponents)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(InComponent, TOptional<TFunctionRef<FTransform(const FTransform&)>>())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } template<TComponentClass = UActorComponent,= TEnableIf<TIsDerivedFrom<TComponentClass,UActorComponent>::IsDerived>::Type> void)",
    "insertText": "Append(const TArray<TComponentClass*>& InComponents, TFunctionRef<FTransform(const FTransform&)> InTransformFunc)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(InComponent, InTransformFunc)"
  },
  {
    "label": "GetNumInstances()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetNumInstances()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHash()"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (} return Hash ; } private : void)",
    "insertText": "AddInternal(const UActorComponent* InComponent, TOptional<TFunctionRef<FTransform(const FTransform&)>> InTransformFunc)"
  }
]