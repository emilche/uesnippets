[
  {
    "label": "FWindowsPlatformStackWalk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowsPlatformStackWalk"
  },
  {
    "label": "InitStackWalking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitStackWalking()"
  },
  {
    "label": "InitStackWalkingForProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitStackWalkingForProcess(const FProcHandle& Process)"
  },
  {
    "label": "GetStack()",
    "kind": "Method",
    "detail": "Function (TArray<FProgramCounterSymbolInfo>)",
    "insertText": "GetStack(int32 IgnoreCount, int32 MaxDepth = 100, void* Context = nullptr)"
  },
  {
    "label": "ProgramCounterToSymbolInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgramCounterToSymbolInfo( uint64 ProgramCounter, FProgramCounterSymbolInfo& out_SymbolInfo )"
  },
  {
    "label": "ProgramCounterToSymbolInfoEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgramCounterToSymbolInfoEx( uint64 ProgramCounter, FProgramCounterSymbolInfoEx& out_SymbolInfo )"
  },
  {
    "label": "CaptureStackBackTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CaptureStackBackTrace( uint64* BackTrace, uint32 MaxDepth, void* Context = nullptr )"
  },
  {
    "label": "CaptureThreadStackBackTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CaptureThreadStackBackTrace( uint64 ThreadId, uint64* BackTrace, uint32 MaxDepth, void* Context = nullptr)"
  },
  {
    "label": "StackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackWalkAndDump( ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, int32 IgnoreCount, void* Context = nullptr )"
  },
  {
    "label": "StackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackWalkAndDump( ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, void* ProgramCounter, void* Context = nullptr )"
  },
  {
    "label": "ThreadStackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadStackWalkAndDump(ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, int32 IgnoreCount, uint32 ThreadId)"
  },
  {
    "label": "GetProcessModuleCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProcessModuleCount()"
  },
  {
    "label": "GetProcessModuleSignatures()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetProcessModuleSignatures(FStackWalkModuleInfo *ModuleSignatures, const int32 ModuleSignaturesSize)"
  },
  {
    "label": "RegisterOnModulesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnModulesChanged()"
  },
  {
    "label": "UploadLocalSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UploadLocalSymbols()"
  },
  {
    "label": "GetDownstreamStorage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDownstreamStorage()"
  },
  {
    "label": "ReleaseThreadContextWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseThreadContextWrapper(void* ThreadContext)"
  },
  {
    "label": "GetFunctionDefinitionLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFunctionDefinitionLocation(const FString& FunctionSymbolName, const FString& FunctionModuleName, FString& OutPathname, uint32& OutLineNumber, uint32& OutColumnNumber)"
  },
  {
    "label": "CaptureStackTraceByProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureStackTraceByProcess(uint64* OutBacktrace, uint32 MaxDepth, void* InContext, void* InThreadHandle, uint32* OutDepth, bool bExternalProcess)"
  },
  {
    "label": "InitStackWalkingInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitStackWalkingInternal(void* Process, bool bForceReinitOnProcessMismatch)"
  }
]