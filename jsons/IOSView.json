[
  {
    "label": "FKeyboardConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyboardConfig"
  },
  {
    "label": "Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Device"
  },
  {
    "label": "FKeyboardConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" IOS / IOSInputInterface . h \" # import<UIKit / UIKit . h> # import<Metal / Metal . h> # import<QuartzCore / CAMetalLayer . h> # if WITH_ACCESSIBILITY # include \" GenericPlatform / Accessibility / GenericAccessibleInterfaces . h \" # endif struct FKeyboardConfig { UIKeyboardType KeyboardType ; UITextAutocorrectionType AutocorrectionType ; UITextAutocapitalizationType AutocapitalizationType ; BOOL bSecureTextEntry ;)",
    "insertText": "FKeyboardConfig() : KeyboardType(UIKeyboardTypeDefault), AutocorrectionType(UITextAutocorrectionTypeNo), AutocapitalizationType(UITextAutocapitalizationTypeNone), bSecureTextEntry(NO)"
  },
  {
    "label": "WITH_ACCESSIBILITY()",
    "kind": "Method",
    "detail": "Function (} } ; namespace MTL { class Device ; } @ interface FIOSView : UIView<UIKeyInput,UITextInput> { @ public bool bIsInitialized ; int NumActiveTouches ; UITouch* AllTouches [ 1 0 ] ; float PreviousForces [ 1 0 ] ; bool HasMoved [ 1 0 ] ; MTL::Device* MetalDevice ; id<CAMetalDrawable> PanicDrawable ; bool bIsUsingIntegratedKeyboard ; bool bSendEscapeOnClose ; NSString* CachedMarkedText ; UIKeyboardType KeyboardType ; UITextAutocorrectionType AutocorrectionType ; UITextAutocapitalizationType AutocapitalizationType ; BOOL bSecureTextEntry ; volatile int32 KeyboardShowCount ; NSUInteger SupportedInterfaceOrientations ; } # if)",
    "insertText": "WITH_ACCESSIBILITY(void)SetAccessibilityWindow:(AccessibleWidgetId)"
  },
  {
    "label": "property()",
    "kind": "Method",
    "detail": "Function (# endif @)",
    "insertText": "property(nonatomic)"
  },
  {
    "label": "property()",
    "kind": "Method",
    "detail": "Function (@)",
    "insertText": "property(assign, nonatomic)"
  },
  {
    "label": "BUILD_EMBEDDED_APP()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILD_EMBEDDED_APP(void)"
  }
]