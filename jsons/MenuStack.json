[
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "SMenuPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuPanel"
  },
  {
    "label": "FMenuBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBase"
  },
  {
    "label": "FPopupTransitionEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPopupTransitionEffect"
  },
  {
    "label": "ESlideDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESlideDirection"
  },
  {
    "label": "FMenuStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuStack"
  },
  {
    "label": "FPrePushArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrePushArgs"
  },
  {
    "label": "FPrePushResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrePushResults"
  },
  {
    "label": "FPopupTransitionEffect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / PopupMethodReply . h \" # include \" Framework / Application / IMenu . h \" # include \" Layout / SlateRect . h \" # include \" Widgets / SWidget . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / SWindow . h \" # include \" Application / ThrottleManager . h \" # include \" Delegates / DelegateCombinations . h \" class FWidgetPath ; class SMenuPanel ; class FMenuBase ; typedef TArray<TSharedPtr<SWindow>> FMenuWindowList ; # if UE_BUILD_DEBUG typedef TArray<TSharedPtr<IMenu>> FMenuList ; # else typedef TArray<TSharedPtr<IMenu>,TInlineAllocator<4>> FMenuList ; # endif struct FPopupTransitionEffect { enum ESlideDirection { None,ComboButton,TopMenu,SubMenu,TypeInPopup,ContextMenu,} SlideDirection ;)",
    "insertText": "FPopupTransitionEffect(const ESlideDirection InitSlideDirection ) : SlideDirection(InitSlideDirection)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnMenuDestroyed, const TSharedRef<IMenu>& InMenu)"
  },
  {
    "label": "FMenuStack()",
    "kind": "Method",
    "detail": "Function (class FMenuStack { public :)",
    "insertText": "FMenuStack() : bHostWindowGuard(false)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IMenu>)",
    "insertText": "Push(const FWidgetPath& InOwnerPath, const TSharedRef<SWidget>& InContent, const UE::Slate::FDeprecateVector2DParameter& SummonLocation, const FPopupTransitionEffect& TransitionEffect, const bool bFocusImmediately = true, const UE::Slate::FDeprecateVector2DParameter& SummonLocationSize = FVector2f::ZeroVector, TOptional<EPopupMethod> InMethod = TOptional<EPopupMethod>(), const bool bIsCollapsedByParent = true, const bool bEnablePerPixelTransparency = false)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IMenu>)",
    "insertText": "Push(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<SWidget>& InContent, const UE::Slate::FDeprecateVector2DParameter& SummonLocation, const FPopupTransitionEffect& TransitionEffect, const bool bFocusImmediately = true, const UE::Slate::FDeprecateVector2DParameter& SummonLocationSize = FVector2f::ZeroVector, const bool bIsCollapsedByParent = true, const bool bEnablePerPixelTransparency = false)"
  },
  {
    "label": "PushHosted()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IMenu>)",
    "insertText": "PushHosted(const FWidgetPath& InOwnerPath, const TSharedRef<IMenuHost>& InMenuHost, const TSharedRef<SWidget>& InContent, TSharedPtr<SWidget>& OutWrappedContent, const FPopupTransitionEffect& TransitionEffect, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "PushHosted()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IMenu>)",
    "insertText": "PushHosted(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<IMenuHost>& InMenuHost, const TSharedRef<SWidget>& InContent, TSharedPtr<SWidget>& OutWrappedContent, const FPopupTransitionEffect& TransitionEffect, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent = true)"
  },
  {
    "label": "DismissFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissFrom(const TSharedPtr<IMenu>& InFromMenu)"
  },
  {
    "label": "DismissAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissAll()"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDestroyed(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "OnWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowActivated(TSharedRef<SWindow> ActivatedWindow)"
  },
  {
    "label": "FindMenuFromWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "FindMenuFromWindow(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "FindMenuInWidgetPath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMenu>)",
    "insertText": "FindMenuInWidgetPath(const FWidgetPath& PathToQuery)"
  },
  {
    "label": "GetToolTipForceFieldRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetToolTipForceFieldRect(const TSharedRef<IMenu>& InMenu, const FWidgetPath& InPathContainingMenu, FSlateRect& OutSlateRect)"
  },
  {
    "label": "GetHostWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetHostWindow()"
  },
  {
    "label": "GetHostWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetHostWidget()"
  },
  {
    "label": "HasMenus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMenus()"
  },
  {
    "label": "HasOpenSubMenus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOpenSubMenus(TSharedPtr<IMenu> InMenu)"
  },
  {
    "label": "OnMenuDestroyedEvent()",
    "kind": "Method",
    "detail": "Function (FOnMenuDestroyed&)",
    "insertText": "OnMenuDestroyedEvent()"
  },
  {
    "label": "DismissInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DismissInternal(int32 FirstStackIndexToRemove)"
  },
  {
    "label": "SetHostPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHostPath(const FWidgetPath& InOwnerPath)"
  },
  {
    "label": "OnMenuDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuDestroyed(TSharedRef<IMenu> InMenu)"
  },
  {
    "label": "OnMenuContentLostFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuContentLostFocus(const FWidgetPath& InFocussedPath)"
  },
  {
    "label": "WrapContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "WrapContent(TSharedRef<SWidget> InContent, FOptionalSize OptionalMinWidth = FOptionalSize(), FOptionalSize OptionalMinHeight = FOptionalSize(), bool bShouldShowBackground = true)"
  },
  {
    "label": "FPrePushArgs()",
    "kind": "Method",
    "detail": "Function (struct FPrePushArgs {)",
    "insertText": "FPrePushArgs() : TransitionEffect(FPopupTransitionEffect::None)"
  },
  {
    "label": "PrePush()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget> Content ; FSlateRect Anchor ; FPopupTransitionEffect TransitionEffect ; bool bFocusImmediately ; bool bIsCollapsedByParent ; } ; struct FPrePushResults { TSharedPtr<SWidget> WrappedContent ; TSharedPtr<SWidget> WidgetToFocus ; FVector2f AnimStartLocation ; FVector2f AnimFinalLocation ; bool bAnchorSetsMinWidth ; FVector2f ExpectedSize ; bool bAllowAnimations ; bool bFocusImmediately ; bool bIsCollapsedByParent ; } ; FPrePushResults)",
    "insertText": "PrePush(const FPrePushArgs& InArgs)"
  },
  {
    "label": "PushInternal()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IMenu>)",
    "insertText": "PushInternal(const TSharedPtr<IMenu>& InParentMenu, const TSharedRef<SWidget>& InContent, FSlateRect Anchor, const FPopupTransitionEffect& TransitionEffect, const bool bFocusImmediately, EShouldThrottle ShouldThrottle, const bool bIsCollapsedByParent, const bool bEnablePerPixelTransparency)"
  },
  {
    "label": "PushNewWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FMenuBase>)",
    "insertText": "PushNewWindow(TSharedPtr<IMenu> InParentMenu, const FPrePushResults& InPrePushResults, const bool bEnablePerPixelTransparency)"
  },
  {
    "label": "PushPopup()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FMenuBase>)",
    "insertText": "PushPopup(TSharedPtr<IMenu> InParentMenu, const FPrePushResults& InPrePushResults)"
  },
  {
    "label": "PostPush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPush(TSharedPtr<IMenu> InParentMenu, TSharedRef<FMenuBase> InMenu, EShouldThrottle ShouldThrottle, bool bInInsertAfterDismiss=false)"
  }
]