[
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "ActorDescContPtrType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActorDescContPtrType"
  },
  {
    "label": "TActorDescContainerInstanceCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorDescContainerInstanceCollection"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "ActorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActorType"
  },
  {
    "label": "TBaseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseIterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" GameFramework / Actor . h \" # include \" WorldPartition / ActorDescContainerInstance . h \" class UWorldPartition ; template<class ActorDescContPtrType> class TActorDescContainerInstanceCollection { # if WITH_EDITOR public : template<class> class TActorDescContainerInstanceCollection ;)",
    "insertText": "TActorDescContainerInstanceCollection()"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (template<class U>)",
    "insertText": "TActorDescContainerInstanceCollection(std::initializer_list<U> ActorDescContainerInstanceArray)"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (template<class U>)",
    "insertText": "TActorDescContainerInstanceCollection(const TArray<U>& ActorDescContainerInstances)"
  },
  {
    "label": "AddContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContainer(ActorDescContPtrType Container)"
  },
  {
    "label": "RemoveContainer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveContainer(ActorDescContPtrType Container)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FName& ContainerPackageName)"
  },
  {
    "label": "FindContainer()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType)",
    "insertText": "FindContainer(const FName& ContainerPackageName)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<class U> void)",
    "insertText": "Append(const TActorDescContainerInstanceCollection<U>& OtherCollection)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetActorDescContainerCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetActorDescContainerCount()"
  },
  {
    "label": "GetActorDescInstance()",
    "kind": "Method",
    "detail": "Function (} FWorldPartitionActorDescInstance*)",
    "insertText": "GetActorDescInstance(const FGuid& Guid)"
  },
  {
    "label": "GetActorDescInstanceByPath()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDescInstance*)",
    "insertText": "GetActorDescInstanceByPath(const FString& ActorPath)"
  },
  {
    "label": "GetActorDescInstanceByPath()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDescInstance*)",
    "insertText": "GetActorDescInstanceByPath(const FSoftObjectPath& ActorPath)"
  },
  {
    "label": "GetActorDescInstanceByName()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDescInstance*)",
    "insertText": "GetActorDescInstanceByName(FName ActorName)"
  },
  {
    "label": "GetActorDescContainerInstance()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType)",
    "insertText": "GetActorDescContainerInstance(const FGuid& ActorGuid)"
  },
  {
    "label": "FindHandlingContainerInstance()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType)",
    "insertText": "FindHandlingContainerInstance(const AActor* Actor)"
  },
  {
    "label": "RemoveActor()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> bool)",
    "insertText": "RemoveActor(const FGuid& ActorGuid)"
  },
  {
    "label": "OnPackageDeleted()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> void)",
    "insertText": "OnPackageDeleted(UPackage* Package)"
  },
  {
    "label": "LoadAllActors()",
    "kind": "Method",
    "detail": "Function (template<Dummy = void,= TEnableIf<! TIsConst<TRemovePointer<ActorDescContPtrType>>::Value,Dummy>::Type> void)",
    "insertText": "LoadAllActors(TArray<FWorldPartitionReference>& OutReferences)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UWorldPartition, FActorDescInstanceAddedEvent, FWorldPartitionActorDescInstance*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (FActorDescInstanceAddedEvent OnActorDescInstanceAddedEvent ;)",
    "insertText": "DECLARE_EVENT_OneParam(UWorldPartition, FActorDescInstanceRemovedEvent, FWorldPartitionActorDescInstance*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (FActorDescInstanceRemovedEvent OnActorDescInstanceRemovedEvent ;)",
    "insertText": "DECLARE_EVENT_OneParam(UWorldPartition, FActorReplacedEvent, FWorldPartitionActorDescInstance*)"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (FActorReplacedEvent OnActorReplacedEvent ; void)",
    "insertText": "ForEachActorDescContainerInstanceBreakable(TFunctionRef<bool(ActorDescContPtrType)> Func, bool bRecursive = false)"
  },
  {
    "label": "ForEachActorDescContainerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachActorDescContainerInstance(TFunctionRef<void(ActorDescContPtrType)> Func, bool bRecursive = false)"
  },
  {
    "label": "OnCollectionChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnCollectionChanged()"
  },
  {
    "label": "ShouldRegisterDelegates()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ShouldRegisterDelegates()"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates(ActorDescContPtrType Container)"
  },
  {
    "label": "OnActorDescInstanceAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescInstanceAdded(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "OnActorDescInstanceRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescInstanceRemoved(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "OnActorReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorReplaced(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public : template<bool bConst,class ActorType> class TBaseIterator {)",
    "insertText": "static_assert(TIsDerivedFrom<ActorType, AActor>::IsDerived, \"Type is not derived from AActor.\")"
  },
  {
    "label": "TBaseIterator()",
    "kind": "Method",
    "detail": "Function (protected : typedef UActorDescContainerInstance ContainerType ; typedef TArray<ActorDescContPtrType> ContainerCollectionType ; typedef std::conditional_t<bConst,ContainerCollectionType::TConstIterator,ContainerCollectionType::TIterator> ContainerIteratorType ; typedef std::conditional_t<bConst,ContainerType::TConstIterator<ActorType>,ContainerType::TIterator<ActorType>> ActDescIteratorType ; typedef FWorldPartitionActorDescInstance ValueType ; typedef std::conditional_t<bConst,const ValueType*,ValueType*> ReturnType ; public : template<class T>)",
    "insertText": "TBaseIterator(T* Collection) : ContainerIterator(Collection->ActorDescContainerInstanceCollection)"
  },
  {
    "label": "ActDescIteratorType()",
    "kind": "Method",
    "detail": "Function (ActorsIterator = MakeUnique<)",
    "insertText": "ActDescIteratorType(*ContainerIterator)"
  },
  {
    "label": "AdvanceToRelevantActorInNextContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceToRelevantActorInNextContainer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + ContainerIterator ;)",
    "insertText": "if(ContainerIterator)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} } } ContainerIteratorType ContainerIterator ; TUniquePtr<ActDescIteratorType> ActorsIterator ; } ; template<class ActorType = AActor> class TIterator : public TBaseIterator<false,ActorType> { typedef TBaseIterator<false,ActorType> BaseType ; public : template<class T>)",
    "insertText": "TIterator(T* Collection) : BaseType(Collection)"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class ActorType = AActor> class TConstIterator : public TBaseIterator<true,ActorType> { typedef TBaseIterator<true,ActorType> BaseType ; public : template<class T>)",
    "insertText": "TConstIterator(T* Collection) : BaseType(Collection)"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (} } ; # endif } ; # if WITH_EDITOR template<class ActorDescContPtrType> template<class U> TActorDescContainerInstanceCollection<ActorDescContPtrType)",
    "insertText": "TActorDescContainerInstanceCollection(std::initializer_list<U> ActorDescContainerInstanceArray) : ActorDescContainerInstanceCollection(ActorDescContainerInstanceArray)"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (} template<class ActorDescContPtrType> template<class U> TActorDescContainerInstanceCollection<ActorDescContPtrType)",
    "insertText": "TActorDescContainerInstanceCollection(const TArray<U>& ActorDescContainerInstances) : ActorDescContainerInstanceCollection(ActorDescContainerInstances)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorDescContainerInstanceCollection .)",
    "insertText": "Add(Container)"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates(Container)"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates(Container)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 AppendedContainerIndex = ActorDescContainerInstanceCollection .)",
    "insertText": "Num() - OtherCollection.ActorDescContainerInstanceCollection.Num()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates(ActorDescContainerInstanceCollection[AppendedContainerIndex])"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (auto ContainerPtr = ActorDescContainerInstanceCollection .)",
    "insertText": "FindByPredicate([&ContainerPackageName](ActorDescContPtrType ActorDescContainerInstance) { return ActorDescContainerInstance->GetContainerPackage() == ContainerPackageName; })"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (} template<class ActorDescContPtrType> void TActorDescContainerInstanceCollection<ActorDescContPtrType)",
    "insertText": "RegisterDelegates(ActorDescContPtrType Container)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescInstanceAddedEvent.AddRaw(this, &TActorDescContainerInstanceCollection<ActorDescContPtrType>::OnActorDescInstanceAdded)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescInstanceRemovedEvent.AddRaw(this, &TActorDescContainerInstanceCollection<ActorDescContPtrType>::OnActorDescInstanceRemoved)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorReplacedEvent.AddRaw(this, &TActorDescContainerInstanceCollection<ActorDescContPtrType>::OnActorReplaced)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescInstanceAddedEvent.RemoveAll(this)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorDescInstanceRemovedEvent.RemoveAll(this)"
  },
  {
    "label": "ConstCast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstCast(Container)->OnActorReplacedEvent.RemoveAll(this)"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDescInstance* ActorDescInstance = nullptr ;)",
    "insertText": "ForEachActorDescContainerInstanceBreakable([&Guid, &ActorDescInstance](ActorDescContPtrType ActorDescContainerInstance) { ActorDescInstance = ActorDescContainerInstance->GetActorDescInstance(Guid); return ActorDescInstance == nullptr; })"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDescInstance* ActorDescInstance = nullptr ;)",
    "insertText": "ForEachActorDescContainerInstanceBreakable([&ActorPath, &ActorDescInstance](ActorDescContPtrType ActorDescContainerInstance) { ActorDescInstance = ActorDescContainerInstance->GetActorDescInstanceByPath(ActorPath); return ActorDescInstance == nullptr; })"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (const FWorldPartitionActorDescInstance* ActorDescInstance = nullptr ;)",
    "insertText": "ForEachActorDescContainerInstanceBreakable([&ActorName, &ActorDescInstance](ActorDescContPtrType ActorDescContainerInstance) { ActorDescInstance = ActorDescContainerInstance->GetActorDescInstanceByName(ActorName); return ActorDescInstance == nullptr; })"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (ActorDescContPtrType ActorDescContainerInstance = nullptr ;)",
    "insertText": "ForEachActorDescContainerInstanceBreakable([&ActorGuid, &ActorDescContainerInstance](ActorDescContPtrType InActorDescContainerInstance) { if (InActorDescContainerInstance->GetActorDescInstance(ActorGuid) != nullptr) { ActorDescContainerInstance = InActorDescContainerInstance; } return ActorDescContainerInstance == nullptr; })"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (bool bRemoved = false ;)",
    "insertText": "ForEachActorDescContainerInstanceBreakable([&ActorGuid, &bRemoved](ActorDescContPtrType ContainerInstance) { bRemoved = ContainerInstance->GetContainer()->RemoveActor(ActorGuid); return !bRemoved; })"
  },
  {
    "label": "ForEachActorDescContainerInstanceBreakable()",
    "kind": "Method",
    "detail": "Function (} template<class ActorDescContPtrType> void TActorDescContainerInstanceCollection<ActorDescContPtrType)",
    "insertText": "ForEachActorDescContainerInstanceBreakable(TFunctionRef<bool(ActorDescContPtrType)> Func, bool bRecursive)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "bool(ActorDescContPtrType)> InvokeFunc = [&Func, &InvokeFunc, bRecursive](ActorDescContPtrType ActorDescContainerInstance)"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (const_cast<const)",
    "insertText": "TActorDescContainerInstanceCollection(this)->ForEachActorDescContainerInstanceBreakable(Func, bRecursive)"
  },
  {
    "label": "ForEachActorDescContainerInstance()",
    "kind": "Method",
    "detail": "Function (} template<class ActorDescContPtrType> void TActorDescContainerInstanceCollection<ActorDescContPtrType)",
    "insertText": "ForEachActorDescContainerInstance(TFunctionRef<void(ActorDescContPtrType)> Func, bool bRecursive)"
  },
  {
    "label": "TActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (const_cast<const)",
    "insertText": "TActorDescContainerInstanceCollection(this)->ForEachActorDescContainerInstance(Func, bRecursive)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnActorDescInstanceAddedEvent .)",
    "insertText": "Broadcast(ActorDescInstance)"
  }
]