[
  {
    "label": "Source",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Source"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "ScopedMultiSourceObservation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedMultiSourceObservation"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SCOPED_MULTI_SOURCE_OBSERVATION_H_ # define BASE_SCOPED_MULTI_SOURCE_OBSERVATION_H_ # include<stddef . h> # include<vector> # include \" base / check . h \" # include \" base / containers / contains . h \" # include \" base / memory / raw_ptr . h \" # include \" base / ranges / algorithm . h \" namespace base { template<class Source,class Observer,)",
    "insertText": "void(Source::*AddObsFn)(Observer*) = &Source::AddObserver, void (Source::*RemoveObsFn)(Observer*)"
  },
  {
    "label": "ScopedMultiSourceObservation()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedMultiSourceObservation(Observer* observer) : observer_(observer)"
  },
  {
    "label": "ScopedMultiSourceObservation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedMultiSourceObservation(const ScopedMultiSourceObservation&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMultiSourceObservation&)",
    "insertText": "operator(const ScopedMultiSourceObservation&)"
  },
  {
    "label": "ScopedMultiSourceObservation()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedMultiSourceObservation()"
  },
  {
    "label": "RemoveAllObservations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllObservations()"
  },
  {
    "label": "AddObservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddObservation(Source* source)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (sources_ .)",
    "insertText": "push_back(source)"
  },
  {
    "label": "RemoveObservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveObservation(Source* source)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = base::)",
    "insertText": "find(sources_, source)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(it != sources_.end())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (sources_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (sources_ .)",
    "insertText": "clear()"
  },
  {
    "label": "IsObservingAnySource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObservingAnySource()"
  },
  {
    "label": "IsObservingSource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObservingSource(Source* source)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(source)"
  },
  {
    "label": "GetSourcesCount()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetSourcesCount()"
  }
]