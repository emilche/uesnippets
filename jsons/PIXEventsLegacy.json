[
  {
    "label": "PIXEventType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PIXEventType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PIXEventTypeInferer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PIXEventTypeInferer"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _PIXEventsLegacy_H_ # define _PIXEventsLegacy_H_ # include<cstdint> # if)",
    "insertText": "defined(_M_X64) || defined(_M_IX86)"
  },
  {
    "label": "PIXEncodeEventInfo()",
    "kind": "Method",
    "detail": "Function (enum PIXEventType { PIXEvent_EndEvent = 0 x000,PIXEvent_BeginEvent_VarArgs = 0 x001,PIXEvent_BeginEvent_NoArgs = 0 x002,PIXEvent_SetMarker_VarArgs = 0 x007,PIXEvent_SetMarker_NoArgs = 0 x008,PIXEvent_EndEvent_OnContext = 0 x010,PIXEvent_BeginEvent_OnContext_VarArgs = 0 x011,PIXEvent_BeginEvent_OnContext_NoArgs = 0 x012,PIXEvent_SetMarker_OnContext_VarArgs = 0 x017,PIXEvent_SetMarker_OnContext_NoArgs = 0 x018,} ; const UINT64 PIXEventsReservedRecordSpaceQwords = 6 4 ; const UINT64 PIXEventsReservedTailSpaceQwords = 2 ; const UINT64 PIXEventsSafeFastCopySpaceQwords = PIXEventsReservedRecordSpaceQwords - PIXEventsReservedTailSpaceQwords ; const UINT64 PIXEventsGraphicsRecordSpaceQwords = 6 4 ; const UINT64 PIXEventsBlockEndMarker = 0 x00000000000FFF80 ; const UINT64 PIXEventsTypeReadMask = 0 x00000000000FFC00 ; const UINT64 PIXEventsTypeWriteMask = 0 x00000000000003FF ; const UINT64 PIXEventsTypeBitShift = 1 0 ; const UINT64 PIXEventsTimestampReadMask = 0 xFFFFFFFFFFF00000 ; const UINT64 PIXEventsTimestampWriteMask = 0 x00000FFFFFFFFFFF ; const UINT64 PIXEventsTimestampBitShift = 2 0 ; UINT64)",
    "insertText": "PIXEncodeEventInfo(UINT64 timestamp, PIXEventType eventType)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (} const UINT64 PIXEventsStringAlignmentWriteMask = 0 x000000000000000F ; const UINT64 PIXEventsStringAlignmentReadMask = 0 xF000000000000000 ; const UINT64 PIXEventsStringAlignmentBitShift = 6 0 ; const UINT64 PIXEventsStringCopyChunkSizeWriteMask = 0 x000000000000001F ; const UINT64 PIXEventsStringCopyChunkSizeReadMask = 0 x0F80000000000000 ; const UINT64 PIXEventsStringCopyChunkSizeBitShift = 5 5 ; const UINT64 PIXEventsStringIsANSIWriteMask = 0 x0000000000000001 ; const UINT64 PIXEventsStringIsANSIReadMask = 0 x0040000000000000 ; const UINT64 PIXEventsStringIsANSIBitShift = 5 4 ; const UINT64 PIXEventsStringIsShortcutWriteMask = 0 x0000000000000001 ; const UINT64 PIXEventsStringIsShortcutReadMask = 0 x0020000000000000 ; const UINT64 PIXEventsStringIsShortcutBitShift = 5 3 ; UINT64)",
    "insertText": "PIXEncodeStringInfo(UINT64 alignment, UINT64 copyChunkSize, BOOL isANSI, BOOL isShortcut)"
  },
  {
    "label": "PIXIsPointerAligned()",
    "kind": "Method",
    "detail": "Function (} template<UINT alignment,class T> bool)",
    "insertText": "PIXIsPointerAligned(T* pointer)"
  },
  {
    "label": "PIXCopyEventArgument()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "PIXCopyEventArgument(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, T argument)"
  },
  {
    "label": "ull()",
    "kind": "Method",
    "detail": "Function (* destination = 0)",
    "insertText": "ull((T*)destination)"
  },
  {
    "label": "INT32()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "INT32(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, INT32 argument)"
  },
  {
    "label": "INT64()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "INT64(destination) = static_cast<INT64>(argument)"
  },
  {
    "label": "UINT32()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "UINT32(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, UINT32 argument)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (* destination = static_cast<)",
    "insertText": "UINT64(argument)"
  },
  {
    "label": "INT64()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "INT64(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, INT64 argument)"
  },
  {
    "label": "INT64()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "INT64(destination)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "UINT64(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, UINT64 argument)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (* destination = argument ; + + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "float(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, float argument)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "double(destination) = static_cast<double>(argument)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "char(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, char argument)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<unsigned)",
    "insertText": "char(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, unsigned char argument)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "bool(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, bool argument)"
  },
  {
    "label": "PIXCopyEventArgumentSlowest()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } void)",
    "insertText": "PIXCopyEventArgumentSlowest(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (* destination + + =)",
    "insertText": "PIXEncodeStringInfo(0, 8, TRUE, FALSE)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (UINT64 c = static_cast<)",
    "insertText": "uint8_t(argument[0])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = 0 ; return ; } UINT64 x = c ; c = static_cast<)",
    "insertText": "uint8_t(argument[1])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<8 ; c = static_cast<)",
    "insertText": "uint8_t(argument[2])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<1 6 ; c = static_cast<)",
    "insertText": "uint8_t(argument[3])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<2 4 ; c = static_cast<)",
    "insertText": "uint8_t(argument[4])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<3 2 ; c = static_cast<)",
    "insertText": "uint8_t(argument[5])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<4 0 ; c = static_cast<)",
    "insertText": "uint8_t(argument[6])"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<4 8 ; c = static_cast<)",
    "insertText": "uint8_t(argument[7])"
  },
  {
    "label": "PIXCopyEventArgumentSlow()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<5 6 ;* destination + + = x ; argument + = 8 ; } } void)",
    "insertText": "PIXCopyEventArgumentSlow(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PIX_ENABLE_BLOCK_ARGUMENT_COPY)",
    "insertText": "if(PIXIsPointerAligned<8>(argument))"
  },
  {
    "label": "source()",
    "kind": "Method",
    "detail": "Function (UINT64*)",
    "insertText": "source(UINT64*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UINT64 qword =* source + + ;* destination + + = qword ;)",
    "insertText": "if(!((qword & 0xFF00000000000000) && (qword & 0xFF000000000000) && (qword & 0xFF0000000000) && (qword & 0xFF00000000) && (qword & 0xFF000000) && (qword & 0xFF0000) && (qword & 0xFF00) && (qword & 0xFF)))"
  },
  {
    "label": "PIXCopyEventArgumentSlowest()",
    "kind": "Method",
    "detail": "Function (break ; } } } else # endif {)",
    "insertText": "PIXCopyEventArgumentSlowest(destination, limit, argument)"
  },
  {
    "label": "PCSTR()",
    "kind": "Method",
    "detail": "Function (} } template<> void PIXCopyEventArgument<)",
    "insertText": "PCSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(_M_X64) || defined(_M_IX86)) && PIX_ENABLE_BLOCK_ARGUMENT_COPY if (PIXIsPointerAligned<16>(argument))"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (* destination + + =)",
    "insertText": "PIXEncodeStringInfo(0, 16, TRUE, FALSE)"
  },
  {
    "label": "_mm_setzero_si128()",
    "kind": "Method",
    "detail": "Function (__m128i zero =)",
    "insertText": "_mm_setzero_si128()"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i mem =)",
    "insertText": "_mm_load_si128((__m128i*)argument)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i*)destination, mem)"
  },
  {
    "label": "_mm_cmpeq_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i res =)",
    "insertText": "_mm_cmpeq_epi8(mem, zero)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (destination + = 2 ;)",
    "insertText": "if(_mm_movemask_epi8(res))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (argument + = 1 6 ; } } else {)",
    "insertText": "while(destination < limit)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i*)destination, mem)"
  },
  {
    "label": "PIXCopyEventArgumentSlow()",
    "kind": "Method",
    "detail": "Function (argument + = 1 6 ; } } } else # endif {)",
    "insertText": "PIXCopyEventArgumentSlow(destination, limit, argument)"
  },
  {
    "label": "PSTR()",
    "kind": "Method",
    "detail": "Function (} } else {* destination + + = 0 ull ; } } } template<> void PIXCopyEventArgument<)",
    "insertText": "PSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PSTR argument)"
  },
  {
    "label": "PIXCopyEventArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventArgument(destination, limit, (PCSTR)argument)"
  },
  {
    "label": "PIXCopyEventArgumentSlowest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXCopyEventArgumentSlowest(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (* destination + + =)",
    "insertText": "PIXEncodeStringInfo(0, 8, FALSE, FALSE)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (UINT64 c = static_cast<)",
    "insertText": "uint16_t(argument[0])"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = 0 ; return ; } UINT64 x = c ; c = static_cast<)",
    "insertText": "uint16_t(argument[1])"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<1 6 ; c = static_cast<)",
    "insertText": "uint16_t(argument[2])"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<3 2 ; c = static_cast<)",
    "insertText": "uint16_t(argument[3])"
  },
  {
    "label": "PIXCopyEventArgumentSlow()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<4 8 ;* destination + + = x ; argument + = 4 ; } } void)",
    "insertText": "PIXCopyEventArgumentSlow(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UINT64 qword =* source + + ;* destination + + = qword ;)",
    "insertText": "if(!((qword & 0xFFFF000000000000) && (qword & 0xFFFF00000000) && (qword & 0xFFFF0000) && (qword & 0xFFFF)))"
  },
  {
    "label": "PCWSTR()",
    "kind": "Method",
    "detail": "Function (} } template<> void PIXCopyEventArgument<)",
    "insertText": "PCWSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (* destination + + =)",
    "insertText": "PIXEncodeStringInfo(0, 16, FALSE, FALSE)"
  },
  {
    "label": "_mm_cmpeq_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i res =)",
    "insertText": "_mm_cmpeq_epi16(mem, zero)"
  },
  {
    "label": "PIXCopyEventArguments()",
    "kind": "Method",
    "detail": "Function (} } else {* destination + + = 0 ull ; } } } void)",
    "insertText": "PIXCopyEventArguments(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit)"
  },
  {
    "label": "UNREFERENCED_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNREFERENCED_PARAMETER(destination)"
  },
  {
    "label": "UNREFERENCED_PARAMETER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNREFERENCED_PARAMETER(limit)"
  },
  {
    "label": "PIXCopyEventArguments()",
    "kind": "Method",
    "detail": "Function (} template<ARG,. . . ARGS> void)",
    "insertText": "PIXCopyEventArguments(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, ARG const& arg, ARGS const&... args)"
  },
  {
    "label": "PIXCopyEventArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventArgument(destination, limit, arg)"
  },
  {
    "label": "PIXCopyEventArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventArguments(destination, limit, args...)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} template<. . . ARGS> struct PIXEventTypeInferer { PIXEventType)",
    "insertText": "Begin()"
  },
  {
    "label": "PIXEncodeEventInfo()",
    "kind": "Method",
    "detail": "Function (UINT64* destination = buffer ; UINT64* limit = buffer + PIXEventsGraphicsRecordSpaceQwords - PIXEventsReservedTailSpaceQwords ;* destination + + =)",
    "insertText": "PIXEncodeEventInfo(0, PIXEventTypeInferer<ARGS...>::GpuBeginOnContext())"
  },
  {
    "label": "PIXCopyEventArguments()",
    "kind": "Method",
    "detail": "Function (* destination + + = color ;)",
    "insertText": "PIXCopyEventArguments(destination, limit, formatString, args...)"
  },
  {
    "label": "EncodeSetMarkerForContext()",
    "kind": "Method",
    "detail": "Function (* destination = 0 ull ; return destination ; } template<size_t size,STR,. . . ARGS> UINT64*)",
    "insertText": "EncodeSetMarkerForContext(UINT64 (&buffer)[size], UINT64 color, STR formatString, ARGS... args)"
  },
  {
    "label": "PIXEncodeEventInfo()",
    "kind": "Method",
    "detail": "Function (UINT64* destination = buffer ; UINT64* limit = buffer + PIXEventsGraphicsRecordSpaceQwords - PIXEventsReservedTailSpaceQwords ;* destination + + =)",
    "insertText": "PIXEncodeEventInfo(0, PIXEventTypeInferer<ARGS...>::GpuSetMarkerOnContext())"
  }
]