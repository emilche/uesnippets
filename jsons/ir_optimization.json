[
  {
    "label": "do_optimization_pass()",
    "kind": "Method",
    "detail": "Function (# pragma once # define SUB_TO_ADD_NEG 0 x01 # define DIV_TO_MUL_RCP 0 x02 # define EXP_TO_EXP2 0 x04 # define POW_TO_EXP2 0 x08 # define LOG_TO_LOG2 0 x10 # define MOD_TO_FRACT 0 x20 # define INT_DIV_TO_MUL_RCP 0 x40 # define ADD_MUL_TO_FMA 0 x80 bool)",
    "insertText": "do_optimization_pass(exec_list *ir, _mesa_glsl_parse_state* state, bool bPerformGlobalDeadCodeRemoval)"
  },
  {
    "label": "do_algebraic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_algebraic(_mesa_glsl_parse_state* State, exec_list *instructions)"
  },
  {
    "label": "do_constant_folding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_constant_folding(exec_list *instructions)"
  },
  {
    "label": "do_constant_variable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_constant_variable(exec_list *instructions)"
  },
  {
    "label": "do_constant_variable_unlinked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_constant_variable_unlinked(exec_list *instructions)"
  },
  {
    "label": "do_copy_propagation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_copy_propagation(exec_list *instructions, bool conservative = true)"
  },
  {
    "label": "do_copy_propagation_elements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_copy_propagation_elements(exec_list *instructions, bool conservative = true)"
  },
  {
    "label": "do_constant_propagation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_constant_propagation(exec_list *instructions, bool conservative = true)"
  },
  {
    "label": "do_dead_code()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_dead_code(exec_list *instructions, bool uniform_locations_assigned)"
  },
  {
    "label": "do_dead_code_local()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_dead_code_local(exec_list *instructions)"
  },
  {
    "label": "do_dead_code_unlinked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_dead_code_unlinked(exec_list *instructions)"
  },
  {
    "label": "do_dead_functions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_dead_functions(exec_list *instructions)"
  },
  {
    "label": "do_function_inlining()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_function_inlining(exec_list *instructions)"
  },
  {
    "label": "do_lower_jumps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_lower_jumps(exec_list *instructions, bool pull_out_jumps = true, bool lower_sub_return = true, bool lower_main_return = false, bool lower_continue = false, bool lower_break = false)"
  },
  {
    "label": "do_lower_texture_projection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_lower_texture_projection(exec_list *instructions)"
  },
  {
    "label": "do_if_simplification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_if_simplification(exec_list *instructions)"
  },
  {
    "label": "do_discard_simplification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_discard_simplification(exec_list *instructions)"
  },
  {
    "label": "lower_if_to_cond_assign()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_if_to_cond_assign(exec_list *instructions, unsigned max_depth = 0)"
  },
  {
    "label": "do_mat_op_to_vec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_mat_op_to_vec(exec_list *instructions)"
  },
  {
    "label": "do_noop_swizzle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_noop_swizzle(exec_list *instructions)"
  },
  {
    "label": "do_structure_splitting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_structure_splitting(exec_list *instructions, _mesa_glsl_parse_state * state)"
  },
  {
    "label": "do_swizzle_swizzle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_swizzle_swizzle(exec_list *instructions)"
  },
  {
    "label": "do_tree_grafting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_tree_grafting(exec_list *instructions)"
  },
  {
    "label": "do_vec_index_to_cond_assign()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_vec_index_to_cond_assign(exec_list *instructions)"
  },
  {
    "label": "do_vec_index_to_swizzle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "do_vec_index_to_swizzle(exec_list *instructions)"
  },
  {
    "label": "lower_discard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_discard(exec_list *instructions)"
  },
  {
    "label": "lower_instructions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_instructions(exec_list *instructions, unsigned what_to_lower)"
  },
  {
    "label": "lower_noise()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_noise(exec_list *instructions)"
  },
  {
    "label": "lower_variable_index_to_cond_assign()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_variable_index_to_cond_assign(exec_list *instructions, bool lower_input, bool lower_output, bool lower_temp, bool lower_uniform)"
  },
  {
    "label": "lower_quadop_vector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_quadop_vector(exec_list *instructions, bool dont_lower_swz)"
  },
  {
    "label": "lower_clip_distance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lower_clip_distance(exec_list *instructions)"
  },
  {
    "label": "lower_output_reads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lower_output_reads(exec_list *instructions)"
  },
  {
    "label": "optimize_redundant_jumps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "optimize_redundant_jumps(exec_list *instructions)"
  },
  {
    "label": "optimize_split_arrays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "optimize_split_arrays(exec_list *instructions, bool linked)"
  },
  {
    "label": "compare_index_block()",
    "kind": "Method",
    "detail": "Function (ir_rvalue*)",
    "insertText": "compare_index_block(exec_list *instructions, ir_variable *index, unsigned base, unsigned components, void *mem_ctx)"
  }
]