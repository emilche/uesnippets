[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_OldType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OldType"
  },
  {
    "label": "_NewType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_NewType"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REPLACE_COPY_H # define _LIBCPP___ALGORITHM_RANGES_REPLACE_COPY_H # include<__algorithm / in_out_result . h> # include<__algorithm / ranges_replace_copy_if . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _InIter,class _OutIter> using replace_copy_result = in_out_result<_InIter,_OutIter> ; namespace __replace_copy { struct __fn { template<input_iterator _InIter,sentinel_for<_InIter> _Sent,class _OldType,class _NewType,output_iterator<const _NewType&> _OutIter,class _Proj = identity> requires indirectly_copyable<_InIter,_OutIter>&& indirect_binary_predicate<ranges::equal_to,projected<_InIter,_Proj>,const _OldType*> _LIBCPP_HIDE_FROM_ABI replace_copy_result<_InIter,_OutIter>)",
    "insertText": "operator()(_InIter __first, _Sent __last, _OutIter __result, const _OldType& __old_value, const _NewType& __new_value, _Proj __proj = {})"
  },
  {
    "label": "__pred()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__pred(const auto& __value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,class _OldType,class _NewType,output_iterator<const _NewType&> _OutIter,class _Proj = identity> requires indirectly_copyable<iterator_t<_Range>,_OutIter>&& indirect_binary_predicate<ranges::equal_to,projected<iterator_t<_Range>,_Proj>,const _OldType*> _LIBCPP_HIDE_FROM_ABI replace_copy_result<borrowed_iterator_t<_Range>,_OutIter>)",
    "insertText": "operator()(_Range&& __range, _OutIter __result, const _OldType& __old_value, const _NewType& __new_value, _Proj __proj = {})"
  }
]