[
  {
    "label": "T",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "T"
  },
  {
    "label": "MALLOC()",
    "kind": "Method",
    "detail": "Function (# ifndef IMPORTS_H # define IMPORTS_H # include \" compiler . h \" # define)",
    "insertText": "MALLOC(BYTES) malloc(BYTES) #define CALLOC(BYTES) calloc(1, BYTES) #define MALLOC_STRUCT(T) (struct T *) malloc(sizeof(struct T)) #define CALLOC_STRUCT(T) (struct T *) calloc(1, sizeof(struct T)) #define FREE(PTR) free(PTR) #define ADD_POINTERS(A, B) ( (GLubyte *) (A) + (uintptr_t) (B))"
  },
  {
    "label": "DEG2RAD()",
    "kind": "Method",
    "detail": "Function (float f ; int32_t i ; } fi_type ; # define MAX_GLUSHORT 0 xffff # define MAX_GLUINT 0 xffffffff # define)",
    "insertText": "DEG2RAD(M_PI/180.0) #if 0 # define SQRTF(X) _mesa_sqrtf(X) #else # define SQRTF(X) (float) sqrt((float) (X)) #endif #if 0 #define INV_SQRTF(X) _mesa_inv_sqrt(X) #else #define INV_SQRTF(X) (1.0F / SQRTF(X)) #endif #include <math.h> #if defined(_MSC_VER) static inline float truncf(float x)"
  },
  {
    "label": "exp2f()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "exp2f(float x)"
  },
  {
    "label": "asinhf()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "asinhf(float x)"
  },
  {
    "label": "acoshf()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "acoshf(float x)"
  },
  {
    "label": "atanhf()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "atanhf(float x)"
  },
  {
    "label": "isblank()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "isblank(int ch)"
  },
  {
    "label": "log_2()",
    "kind": "Method",
    "detail": "Function (fi_type num ; int32_t log_2 ; num . f = val ;)",
    "insertText": "log_2((num.i >> 23) & 255)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (num .)",
    "insertText": "i(255 << 23)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (num . i + = 1 2 7<<2 3 ; num .)",
    "insertText": "f((-1.0f/3) * num.f + 2)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (fi_type tmp ; tmp . f = x ;)",
    "insertText": "return(int)((unsigned int)((tmp.i & 0x7fffffff)-0x7f800000) >> 31)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(isfinite) #define IS_INF_OR_NAN(x) (!isfinite(x)) #elif defined(finite) #define IS_INF_OR_NAN(x) (!finite(x)) #elif defined(__VMS) #define IS_INF_OR_NAN(x) (!finite(x)) #elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L #define IS_INF_OR_NAN(x) (!isfinite(x)) #else #define IS_INF_OR_NAN(x) (!finite(x)) #endif #if defined(USE_IEEE) static inline int GET_FLOAT_BITS( float x)"
  },
  {
    "label": "IS_NEGATIVE()",
    "kind": "Method",
    "detail": "Function (fi_type fi ; fi . f = x ; return fi . i ; } # define)",
    "insertText": "IS_NEGATIVE(x) (GET_FLOAT_BITS(x) < 0) #else #define IS_NEGATIVE(x) (x < 0.0F) #endif #if defined(USE_IEEE) #define DIFFERENT_SIGNS(x,y) ((GET_FLOAT_BITS(x) ^ GET_FLOAT_BITS(y)) & (1<<31)) #else #define DIFFERENT_SIGNS(x,y) ((x) * (y) <= 0.0F && (x) - (y) != 0.0F) #endif #if defined(__gnu_linux__) #define CEILF(x) ceilf(x) #define FLOORF(x) floorf(x) #define FABSF(x) fabsf(x) #define LOGF(x) logf(x) #define EXPF(x) expf(x) #define LDEXPF(x,y) ldexpf(x,y) #define FREXPF(x,y) frexpf(x,y) #else #define CEILF(x) ((GLfloat) ceil(x)) #define FLOORF(x) ((GLfloat) floor(x)) #define FABSF(x) ((GLfloat) fabs(x)) #define LOGF(x) ((GLfloat) log(x)) #define EXPF(x) ((GLfloat) exp(x)) #define LDEXPF(x,y) ((GLfloat) ldexp(x,y)) #define FREXPF(x,y) ((GLfloat) frexp(x,y)) #endif #if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__) static inline int iround(float f)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (int r ;)",
    "insertText": "__asm__(\"fistpl %0\" : \"=m\" (r) : \"t\" (f) : \"st\")"
  },
  {
    "label": "IROUND()",
    "kind": "Method",
    "detail": "Function (int r ; _asm { fld f fistp r } return r ; } # define)",
    "insertText": "IROUND(x) iround(x) #elif defined(__WATCOMC__) && defined(__386__) long iround(float f)"
  },
  {
    "label": "IROUND()",
    "kind": "Method",
    "detail": "Function (# pragma aux iround = \\ \" push eax \" \\ \" fistp dword ptr [ esp ] \" \\ \" pop eax \" \\ parm [ 8 0 8 7 ] \\ value [ eax ] \\ modify exact [ eax ] ; # define)",
    "insertText": "IROUND(x) iround(x) #else #define IROUND(f) ((int) (((f) >= 0.0F) ? ((f) + 0.5F) : ((f) - 0.5F))) #endif #define IROUND64(f) ((GLint64) (((f) >= 0.0F) ? ((f) + 0.5F) : ((f) - 0.5F))) #ifdef DEBUG #define IROUND_POS(f) (check((f) >= 0.0F), IROUND(f)) #else #define IROUND_POS(f) (IROUND(f)) #endif #if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__) static inline int ifloor(float f)"
  },
  {
    "label": "af()",
    "kind": "Method",
    "detail": "Function (int ai,bi ; double af,bf ;)",
    "insertText": "af(3 << 22) + 0.5 + (double)"
  },
  {
    "label": "bf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bf(3 << 22) + 0.5 - (double)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"fstps %0\" : \"=m\" (ai) : \"t\" (af) : \"st\")"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"fstps %0\" : \"=m\" (bi) : \"t\" (bf) : \"st\")"
  },
  {
    "label": "IFLOOR()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IFLOOR(x) ifloor(x) #elif defined(USE_IEEE) static inline int ifloor(float f)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (u .)",
    "insertText": "f(float)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bi = u . i ;)",
    "insertText": "return(ai - bi)"
  },
  {
    "label": "IFLOOR()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IFLOOR(x) ifloor(x) #else static inline int ifloor(float f)"
  },
  {
    "label": "IROUND()",
    "kind": "Method",
    "detail": "Function (int i =)",
    "insertText": "IROUND(f)"
  },
  {
    "label": "IFLOOR()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IFLOOR(x) ifloor(x) #endif #if defined(USE_X86_ASM) && defined(__GNUC__) && defined(__i386__) static inline int iceil(float f)"
  },
  {
    "label": "ICEIL()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ICEIL(x) iceil(x) #elif defined(USE_IEEE) static inline int iceil(float f)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bi = u . i ;)",
    "insertText": "return(ai - bi + 1)"
  },
  {
    "label": "ICEIL()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ICEIL(x) iceil(x) #else static inline int iceil(float f)"
  },
  {
    "label": "ICEIL()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ICEIL(x) iceil(x) #endif extern void * _mesa_align_malloc( size_t bytes, unsigned long alignment)"
  },
  {
    "label": "_mesa_align_calloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "_mesa_align_calloc(size_t bytes, unsigned long alignment)"
  },
  {
    "label": "_mesa_align_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_align_free(void *ptr)"
  },
  {
    "label": "_mesa_align_realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "_mesa_align_realloc(void *oldBuffer, size_t oldSize, size_t newSize, unsigned long alignment)"
  },
  {
    "label": "_mesa_realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "_mesa_realloc(void *oldBuffer, size_t oldSize, size_t newSize)"
  },
  {
    "label": "_mesa_memset16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_memset16(unsigned short *dst, unsigned short val, size_t n)"
  },
  {
    "label": "_mesa_sqrtd()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "_mesa_sqrtd(double x)"
  },
  {
    "label": "_mesa_sqrtf()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "_mesa_sqrtf(float x)"
  },
  {
    "label": "_mesa_inv_sqrtf()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "_mesa_inv_sqrtf(float x)"
  },
  {
    "label": "_mesa_init_sqrt_table()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mesa_init_sqrt_table(void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && ((__GNUC__ * 100 + __GNUC_MINOR__) >= 304) #define _mesa_bitcount(i) __builtin_popcount(i) #define _mesa_bitcount_64(i) __builtin_popcountll(i) #else extern unsigned int _mesa_bitcount(unsigned int n)"
  },
  {
    "label": "_mesa_bitcount_64()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "_mesa_bitcount_64(uint64_t n)"
  },
  {
    "label": "_mesa_bsearch()",
    "kind": "Method",
    "detail": "Function (# endif void*)",
    "insertText": "_mesa_bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))"
  },
  {
    "label": "_mesa_getenv()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "_mesa_getenv(const char *var)"
  },
  {
    "label": "_mesa_strdup()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "_mesa_strdup(const char *s)"
  },
  {
    "label": "_mesa_strtof()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "_mesa_strtof(const char *s, char **end)"
  },
  {
    "label": "_mesa_str_checksum()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "_mesa_str_checksum(const char *str)"
  },
  {
    "label": "_mesa_snprintf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_mesa_snprintf(char *str, size_t size, const char *fmt, ...)"
  },
  {
    "label": "_mesa_vsnprintf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_mesa_vsnprintf(char *str, size_t size, const char *fmt, va_list arg)"
  }
]