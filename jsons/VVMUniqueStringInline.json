[
  {
    "label": "FUniqueStringSetKeyFuncsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueStringSetKeyFuncsBase"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (template<T> FUtf8StringView FUniqueStringSetKeyFuncsBase<T)",
    "insertText": "GetSetKey(VUniqueString& Element)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} template<T> FUtf8StringView FUniqueStringSetKeyFuncsBase<T)",
    "insertText": "GetSetKey(const T& Element)"
  },
  {
    "label": "FUtf8StringView()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FUtf8StringView()"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool FUniqueStringSetKeyFuncsBase<T)",
    "insertText": "Matches(FUtf8StringView A, FUtf8StringView B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32 FUniqueStringSetKeyFuncsBase<T)",
    "insertText": "GetKeyHash(FUtf8StringView Key)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (} template struct FUniqueStringSetKeyFuncsBase<TWeakBarrier<VUniqueString>> ; template struct FUniqueStringSetKeyFuncsBase<TWriteBarrier<VUniqueString>> ; VUniqueStringSet::)",
    "insertText": "FConstIterator(SetType::TRangedForConstIterator InCurrentIteration) : CurrentIteration(InCurrentIteration)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} FSetElementId VUniqueStringSet::)",
    "insertText": "GetId()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const TWriteBarrier<VUniqueString>* VUniqueStringSet::)",
    "insertText": "operator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (+ + CurrentIteration ; return* this ; } VUniqueStringSet::FConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} VUniqueStringSet::FConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} VUniqueStringSet&)",
    "insertText": "New(FAllocationContext Context, TSet<VUniqueString*> InStrings)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} VUniqueStringSet&)",
    "insertText": "New(FAllocationContext Context, const std::initializer_list<FUtf8StringView>& InStrings)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TSet<VUniqueString*> StringSet ; StringSet .)",
    "insertText": "Reserve(InStrings.size())"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (VUniqueString& UniqueString =)",
    "insertText": "New(Context, String)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (StringSet .)",
    "insertText": "Add(&UniqueString)"
  },
  {
    "label": "Intern()",
    "kind": "Method",
    "detail": "Function (} return Pool ->)",
    "insertText": "Intern(Context, StringSet)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} VUniqueStringSet&)",
    "insertText": "Make(FAllocationContext Context, const TSet<VUniqueString*>& InSet)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t NumBytes =)",
    "insertText": "sizeof(VUniqueStringSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const VUniqueStringSet& Other)"
  },
  {
    "label": "FindId()",
    "kind": "Method",
    "detail": "Function (} FSetElementId)",
    "insertText": "FindId(const FUtf8StringView& String)"
  },
  {
    "label": "IsValidId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidId(const FSetElementId& Id)"
  },
  {
    "label": "FormSet()",
    "kind": "Method",
    "detail": "Function (} VUniqueStringSet::SetType)",
    "insertText": "FormSet(FAllocationContext Context, const TSet<VUniqueString*>& InSet)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (VUniqueStringSet::SetType Strings ; Strings .)",
    "insertText": "Reserve(InSet.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TWriteBarrier<VUniqueString> Test { Context,InString } ; Strings .)",
    "insertText": "Add({Context, *InString})"
  },
  {
    "label": "VUniqueStringSet()",
    "kind": "Method",
    "detail": "Function (} return Strings ; })",
    "insertText": "VUniqueStringSet(FAllocationContext Context, const TSet<VUniqueString*>& InSet) : VCell(Context, &GlobalTrivialEmergentType.Get(Context)) , Strings(FormSet(Context, InSet))"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const TSet<VUniqueString*>& A, const TSet<VUniqueString*>& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const TSet<VUniqueString*>& Set)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 0 ;)",
    "insertText": "for(const VUniqueString* const Element : Set)"
  },
  {
    "label": "PointerHash()",
    "kind": "Method",
    "detail": "Function (Result ^ =)",
    "insertText": "PointerHash(Element)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} return Result ; } uint32)",
    "insertText": "GetTypeHash(const VUniqueStringSet& Set)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 0 ;)",
    "insertText": "for(const TWriteBarrier<VUniqueString>& Element : Set)"
  },
  {
    "label": "PointerHash()",
    "kind": "Method",
    "detail": "Function (Result ^ =)",
    "insertText": "PointerHash(Element.Get())"
  },
  {
    "label": "FHashableUniqueStringSetKey()",
    "kind": "Method",
    "detail": "Function (} return Result ; })",
    "insertText": "FHashableUniqueStringSetKey() : Type(EType::Invalid)"
  },
  {
    "label": "FHashableUniqueStringSetKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHashableUniqueStringSetKey(const TSet<VUniqueString*>& InSet) : Set(&InSet) , Type(EType::Set)"
  },
  {
    "label": "FHashableUniqueStringSetKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHashableUniqueStringSetKey(const VUniqueStringSet& InCell) : Cell(&InCell) , Type(EType::Cell)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FHashableUniqueStringSetKey& Other)"
  },
  {
    "label": "CompareCellAndSet()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "CompareCellAndSet(const VUniqueStringSet& InCell, const TSet<VUniqueString*>& InSet)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(InCell == InOther)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(Type == Other.Type)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (default : return false ; } break ; case EType::Set :)",
    "insertText": "switch(Other.Type)"
  },
  {
    "label": "VERSE_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (break ; default : return false ; } break ; case EType::Invalid : default :)",
    "insertText": "VERSE_UNREACHABLE()"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (break ; } return true ; } ; FHashableUniqueStringSetKeyFuncs::KeyInitType)",
    "insertText": "GetSetKey(FHashableUniqueStringSetKeyFuncs::ElementInitType& Element)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const VUniqueStringSet* ElementSet = Element .)",
    "insertText": "Get()"
  }
]