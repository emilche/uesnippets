[
  {
    "label": "PeerScenarioClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerScenarioClient"
  },
  {
    "label": "CallbackHandlers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallbackHandlers"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "AudioSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioSource"
  },
  {
    "label": "PulsedNoise",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PulsedNoise"
  },
  {
    "label": "Video",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Video"
  },
  {
    "label": "VideoSendTrackConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendTrackConfig"
  },
  {
    "label": "AudioSendTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioSendTrack"
  },
  {
    "label": "VideoSendTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendTrack"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PEER_SCENARIO_PEER_SCENARIO_CLIENT_H_ # define TEST_PEER_SCENARIO_PEER_SCENARIO_CLIENT_H_ # include<functional> # include<list> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / memory / memory . h \" # include \" api / peer_connection_interface . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / test / time_controller . h \" # include \" pc / test / frame_generator_capturer_video_track_source . h \" # include \" test / logging / log_writer . h \" namespace webrtc { namespace test { class PeerScenarioClient { public : struct CallbackHandlers { std::vector<std::function<)",
    "insertText": "void(PeerConnectionInterface::SignalingState)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(rtc::scoped_refptr<DataChannelInterface>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(PeerConnectionInterface::IceConnectionState)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(PeerConnectionInterface::PeerConnectionState)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(PeerConnectionInterface::IceGatheringState)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(const IceCandidateInterface*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(const std::string&, int, const std::string&, int, const std::string&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(const std::vector<cricket::Candidate>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(rtc::scoped_refptr<RtpReceiverInterface>, const std::vector<rtc::scoped_refptr<MediaStreamInterface>>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(rtc::scoped_refptr<RtpTransceiverInterface>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::vector<std::function<)",
    "insertText": "void(rtc::scoped_refptr<RtpReceiverInterface>)"
  },
  {
    "label": "PulsedNoise()",
    "kind": "Method",
    "detail": "Function (} ; struct Config { struct AudioSource { int sample_rate = 4 8 0 0 0 ; int channels = 1 ; struct PulsedNoise { double amplitude = 0 . 1 ; } ; absl::optional<PulsedNoise> pulsed_noise =)",
    "insertText": "PulsedNoise()"
  },
  {
    "label": "EmulatedEndpointConfig()",
    "kind": "Method",
    "detail": "Function (} audio ; struct Video { bool use_fake_codecs = false ; } video ; std::map<int,EmulatedEndpointConfig> endpoints = { { 0,)",
    "insertText": "EmulatedEndpointConfig()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (CallbackHandlers handlers ; PeerConnectionInterface::RTCConfiguration rtc_config ; bool disable_encryption = false ;)",
    "insertText": "Config()"
  },
  {
    "label": "PeerScenarioClient()",
    "kind": "Method",
    "detail": "Function (rtc_config . sdp_semantics = SdpSemantics::kUnifiedPlan ; } } ; struct VideoSendTrackConfig { FrameGeneratorCapturerConfig generator ; bool screencast = false ; } ; struct AudioSendTrack { rtc::scoped_refptr<AudioTrackInterface> track ; rtc::scoped_refptr<RtpSenderInterface> sender ; } ; struct VideoSendTrack { FrameGeneratorCapturer* capturer ; rtc::scoped_refptr<FrameGeneratorCapturerVideoTrackSource> source ; rtc::scoped_refptr<VideoTrackInterface> track ; rtc::scoped_refptr<RtpSenderInterface> sender ; } ;)",
    "insertText": "PeerScenarioClient(NetworkEmulationManager* net, rtc::Thread* signaling_thread, std::unique_ptr<LogWriterFactoryInterface> log_writer_factory, Config config)"
  },
  {
    "label": "factory()",
    "kind": "Method",
    "detail": "Function (PeerConnectionFactoryInterface*)",
    "insertText": "factory()"
  },
  {
    "label": "pc()",
    "kind": "Method",
    "detail": "Function (} PeerConnectionInterface*)",
    "insertText": "pc()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread_)"
  },
  {
    "label": "thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "thread()"
  },
  {
    "label": "endpoint()",
    "kind": "Method",
    "detail": "Function (} EmulatedEndpoint*)",
    "insertText": "endpoint(int index = 0)"
  },
  {
    "label": "CreateAudio()",
    "kind": "Method",
    "detail": "Function (AudioSendTrack)",
    "insertText": "CreateAudio(std::string track_id, cricket::AudioOptions options)"
  },
  {
    "label": "CreateVideo()",
    "kind": "Method",
    "detail": "Function (VideoSendTrack)",
    "insertText": "CreateVideo(std::string track_id, VideoSendTrackConfig config)"
  },
  {
    "label": "AddVideoReceiveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVideoReceiveSink(std::string track_id, rtc::VideoSinkInterface<VideoFrame>* video_sink)"
  },
  {
    "label": "handlers()",
    "kind": "Method",
    "detail": "Function (CallbackHandlers*)",
    "insertText": "handlers()"
  },
  {
    "label": "SetSdpOfferAndGetAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSdpOfferAndGetAnswer(std::string remote_offer, std::function<void(std::string)> answer_handler)"
  },
  {
    "label": "SetSdpAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSdpAnswer(std::string remote_answer, std::function<void(const SessionDescriptionInterface& answer)> done_handler)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIceCandidate(std::unique_ptr<IceCandidateInterface> candidate)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : const std::map<int,EmulatedEndpoint*> endpoints_ ; TaskQueueFactory* const task_queue_factory_ ; rtc::Thread* const signaling_thread_ ; const std::unique_ptr<LogWriterFactoryInterface> log_writer_factory_ ; const std::unique_ptr<rtc::Thread> worker_thread_ ; CallbackHandlers handlers_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread_)"
  }
]