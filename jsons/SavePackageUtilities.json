[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSaveContext"
  },
  {
    "label": "FSavePackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageContext"
  },
  {
    "label": "IPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLargeMemoryDelete",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLargeMemoryDelete"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedSavingFlag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSavingFlag"
  },
  {
    "label": "FCanSkipEditorReferencedPackagesWhenCooking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanSkipEditorReferencedPackagesWhenCooking"
  },
  {
    "label": "FSavePackageOutputFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageOutputFile"
  },
  {
    "label": "FObjectImportSortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectImportSortHelper"
  },
  {
    "label": "FObjectExportSortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectExportSortHelper"
  },
  {
    "label": "FEDLCookCheckerThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLCookCheckerThreadState"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "FEDLCookChecker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLCookChecker"
  },
  {
    "label": "FEDLNodeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLNodeData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEDLNodeHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLNodeHash"
  },
  {
    "label": "FEDLNodeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLNodeData"
  },
  {
    "label": "FEDLCookCheckerThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLCookCheckerThreadState"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSavePackageStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageStats"
  },
  {
    "label": "SortImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortImports(FLinkerSave* Linker)"
  },
  {
    "label": "SortExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortExports(FLinkerSave* Linker)"
  },
  {
    "label": "SetActiveIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveIfNeeded()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImport(TObjectPtr<UObject> Import, UPackage* ImportingPackage)"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExport(UObject* Export)"
  },
  {
    "label": "AddArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArc(UObject* DepObject, bool bDepIsSerialize, UObject* Export, bool bExportIsSerialize)"
  },
  {
    "label": "AddPackageWithUnknownExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageWithUnknownExports(FName LongPackageName)"
  },
  {
    "label": "StartSavingEDLCookInfoForVerification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSavingEDLCookInfoForVerification()"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Verify(const UE::SavePackageUtilities::FEDLLogRecordCallback& MessageCallback,\n\t\tbool bFullReferencesExpected)"
  },
  {
    "label": "MoveToCompactBinaryAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToCompactBinaryAndClear(FCbWriter& Writer, bool& bOutHasData)"
  },
  {
    "label": "AppendFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "AccumulateAndClear()",
    "kind": "Method",
    "detail": "Function (FEDLCookChecker)",
    "insertText": "AccumulateAndClear()"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "ReadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "FEDLNodeHash()",
    "kind": "Method",
    "detail": "Function (parameter)",
    "insertText": "FEDLNodeHash(const TArray<FEDLNodeData>* InNodes, FEDLNodeID InNodeID, EObjectEvent InObjectEvent)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FEDLNodeHash& A)"
  },
  {
    "label": "SetNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodes(const TArray<FEDLNodeData>* InNodes)"
  },
  {
    "label": "ObjectNameFirst()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ObjectNameFirst(const FEDLNodeHash& InNode, uint32& OutNodeID, TObjectPtr<const UObject>& OutObject)"
  },
  {
    "label": "ObjectNameNext()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ObjectNameNext(const FEDLNodeHash& InNode, uint32& OutNodeID, TObjectPtr<const UObject>& OutObject)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(FEDLNodeData&& Other)"
  },
  {
    "label": "FindOrAddNode()",
    "kind": "Method",
    "detail": "Function (FEDLNodeID)",
    "insertText": "FindOrAddNode(const FEDLNodeHash& NodeLookup)"
  },
  {
    "label": "FindOrAddNode()",
    "kind": "Method",
    "detail": "Function (FEDLNodeID)",
    "insertText": "FindOrAddNode(FEDLNodeData&& NodeData, const FEDLCookChecker& OldOwnerOfNode, FEDLNodeID ParentIDInThis, bool& bNew)"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (FEDLNodeID)",
    "insertText": "FindNode(const FEDLNodeHash& NodeHash)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(FEDLCookChecker&& Other)"
  },
  {
    "label": "CheckForCyclesInner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForCyclesInner(TSet<FEDLNodeID>& Visited, TSet<FEDLNodeID>& Stack, const FEDLNodeID& Visit, FEDLNodeID& FailNode)"
  },
  {
    "label": "AddDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependency(FEDLNodeID SourceID, FEDLNodeID TargetID)"
  },
  {
    "label": "SaveThumbnails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveThumbnails(UPackage* InOuter, FLinkerSave* Linker, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "AppendAdditionalData()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "AppendAdditionalData(FLinkerSave& Linker, int64& InOutDataStartOffset, FSavePackageContext* SavePackageContext)"
  },
  {
    "label": "CreatePayloadSidecarFile()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "CreatePayloadSidecarFile(FLinkerSave& Linker, const FPackagePath& PackagePath, const bool bSaveToMemory,\n\tFSavePackageOutputFileArray& AdditionalPackageFiles, FSavePackageContext* SavePackageContext)"
  },
  {
    "label": "SaveWorldLevelInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveWorldLevelInfo(UPackage* InOuter, FLinkerSave* Linker, FStructuredArchive::FRecord Record)"
  },
  {
    "label": "GetExcludedObjectMarksForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (EObjectMark)",
    "insertText": "GetExcludedObjectMarksForTargetPlatform(const class ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindMostLikelyCulprit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindMostLikelyCulprit(const TArray<UObject*>& BadObjects, UObject*& OutMostLikelyCulprit, UObject*& OutReferencer, const FProperty*& OutReferencerProperty, bool& OutIsCulpritArchetype, FSaveContext* InOptionalSaveContext = nullptr)"
  },
  {
    "label": "FinalizeTempOutputFiles()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "FinalizeTempOutputFiles(const FPackagePath& PackagePath, const FSavePackageOutputFileArray& OutputFiles, const FDateTime& FinalTimeStamp)"
  },
  {
    "label": "WriteToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToFile(const FString& Filename, const uint8* InDataPtr, int64 InDataSize)"
  },
  {
    "label": "AsyncWriteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncWriteFile(FLargeMemoryPtr Data, const int64 DataSize, const TCHAR* Filename, EAsyncWriteOptions Options, TArrayView<const FFileRegion> InFileRegions)"
  },
  {
    "label": "AsyncWriteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncWriteFile(EAsyncWriteOptions Options, FSavePackageOutputFile& File)"
  },
  {
    "label": "GetCDOSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCDOSubobjects(UObject* CDO, TArray<UObject*>& Subobjects)"
  },
  {
    "label": "CanStripEditorOnlyImportsAndExports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStripEditorOnlyImportsAndExports()"
  },
  {
    "label": "IsEditorOnlyObjectInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnlyObjectInternal(const UObject* InObject, EEditorOnlyObjectFlags Flags)"
  },
  {
    "label": "AddSavePackageStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSavePackageStats(FCookStatsManager::AddStatFuncRef AddStat)"
  },
  {
    "label": "MergeStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeStats(const TMap<FName, FArchiveDiffStats>& ToMerge)"
  }
]