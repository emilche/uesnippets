[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSaveContext"
  },
  {
    "label": "FSavePackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavePackageContext"
  },
  {
    "label": "IPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLargeMemoryDelete",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLargeMemoryDelete"
  },
  {
    "label": "FScopedSavingFlag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSavingFlag"
  },
  {
    "label": "FCanSkipEditorReferencedPackagesWhenCooking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanSkipEditorReferencedPackagesWhenCooking"
  },
  {
    "label": "FSavePackageOutputFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageOutputFile"
  },
  {
    "label": "FObjectImportSortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectImportSortHelper"
  },
  {
    "label": "FObjectExportSortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectExportSortHelper"
  },
  {
    "label": "FEDLCookCheckerThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLCookCheckerThreadState"
  },
  {
    "label": "FEDLCookChecker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLCookChecker"
  },
  {
    "label": "FEDLNodeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLNodeData"
  },
  {
    "label": "FEDLNodeHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLNodeHash"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FSavePackageStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavePackageStats"
  },
  {
    "label": "UE_TRACE_CHANNEL_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / StringFwd . h \" # include \" HAL / ThreadSingleton . h \" # include \" ProfilingDebugging / CookStats . h \" # include \" Serialization / ArchiveObjectCrc32 . h \" # include \" Serialization / ArchiveStackTrace . h \" # include \" Serialization / FileRegions . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Package . h \" # include \" UObject / UObjectMarks . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / SavePackage . h \" # include \" UObject / UObjectGlobals . h \" class FCbFieldView ; class FCbWriter ; class FPackagePath ; class FSaveContext ; class FSavePackageContext ; class IPackageWriter ; enum class ESavePackageResult ; # if UE_TRACE_ENABLED&& ! UE_BUILD_SHIPPING)",
    "insertText": "UE_TRACE_CHANNEL_EXTERN(SaveTimeChannel) #define SCOPED_SAVETIMER(TimerName) TRACE_CPUPROFILER_EVENT_SCOPE_ON_CHANNEL(TimerName, SaveTimeChannel) #define SCOPED_SAVETIMER_TEXT(TimerName) TRACE_CPUPROFILER_EVENT_SCOPE_TEXT_ON_CHANNEL(TimerName, SaveTimeChannel) #else #define SCOPED_SAVETIMER(TimerName) #define SCOPED_SAVETIMER_TEXT(TimerName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(uint8* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } } ; typedef TUniquePtr<uint8,FLargeMemoryDelete> FLargeMemoryPtr ; enum class EAsyncWriteOptions { None = 0 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EAsyncWriteOptions)"
  },
  {
    "label": "FScopedSavingFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedSavingFlag(bool InSavingConcurrent, UPackage* InSavedPackage)"
  },
  {
    "label": "FScopedSavingFlag()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedSavingFlag()"
  },
  {
    "label": "FCanSkipEditorReferencedPackagesWhenCooking()",
    "kind": "Method",
    "detail": "Function (bool bSavingConcurrent ; private : UPackage* SavedPackage = nullptr ; } ; struct FCanSkipEditorReferencedPackagesWhenCooking {)",
    "insertText": "FCanSkipEditorReferencedPackagesWhenCooking()"
  },
  {
    "label": "FSavePackageOutputFile()",
    "kind": "Method",
    "detail": "Function (} ; struct FSavePackageOutputFile {)",
    "insertText": "FSavePackageOutputFile(const FString& InTargetPath, FLargeMemoryPtr&& MemoryBuffer, const TArray<FFileRegion>& InFileRegions, int64 InDataSize) : TargetPath(InTargetPath) , FileMemoryBuffer(MoveTemp(MemoryBuffer)) , FileRegions(InFileRegions) , DataSize(InDataSize)"
  },
  {
    "label": "FSavePackageOutputFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSavePackageOutputFile(const FString& InTargetPath, const FString& InTempFilePath, int64 InDataSize) : TargetPath(InTargetPath) , TempFilePath(InTempFilePath) , DataSize(InDataSize)"
  },
  {
    "label": "SortImports()",
    "kind": "Method",
    "detail": "Function (} FString TargetPath ; FString TempFilePath ; FLargeMemoryPtr FileMemoryBuffer ; TArray<FFileRegion> FileRegions ; int64 DataSize ; } ; using FSavePackageOutputFileArray = TArray<FSavePackageOutputFile,TInlineAllocator<4>> ; struct FObjectImportSortHelper { void)",
    "insertText": "SortImports(FLinkerSave* Linker)"
  },
  {
    "label": "SortExports()",
    "kind": "Method",
    "detail": "Function (} ; struct FObjectExportSortHelper { void)",
    "insertText": "SortExports(FLinkerSave* Linker)"
  },
  {
    "label": "SetActiveIfNeeded()",
    "kind": "Method",
    "detail": "Function (} ; struct FEDLCookCheckerThreadState ; struct FEDLCookChecker { void)",
    "insertText": "SetActiveIfNeeded()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImport(TObjectPtr<UObject> Import, UPackage* ImportingPackage)"
  },
  {
    "label": "AddExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExport(UObject* Export)"
  },
  {
    "label": "AddArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArc(UObject* DepObject, bool bDepIsSerialize, UObject* Export, bool bExportIsSerialize)"
  },
  {
    "label": "AddPackageWithUnknownExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackageWithUnknownExports(FName LongPackageName)"
  },
  {
    "label": "StartSavingEDLCookInfoForVerification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSavingEDLCookInfoForVerification()"
  },
  {
    "label": "Verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Verify(const UE::SavePackageUtilities::FEDLLogRecordCallback& MessageCallback, bool bFullReferencesExpected)"
  },
  {
    "label": "MoveToCompactBinaryAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToCompactBinaryAndClear(FCbWriter& Writer, bool& bOutHasData)"
  },
  {
    "label": "AppendFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "AccumulateAndClear()",
    "kind": "Method",
    "detail": "Function (private : FEDLCookChecker)",
    "insertText": "AccumulateAndClear()"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "ReadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFromCompactBinary(FCbFieldView Field)"
  },
  {
    "label": "FEDLNodeID()",
    "kind": "Method",
    "detail": "Function (typedef uint32 FEDLNodeID ; const FEDLNodeID NodeIDInvalid = static_cast<)",
    "insertText": "FEDLNodeID(-1)"
  },
  {
    "label": "FEDLNodeHash()",
    "kind": "Method",
    "detail": "Function (struct FEDLNodeData ; public : enum class EObjectEvent : uint8 { Create,Serialize,Max = Serialize,} ; struct FEDLNodeHash {)",
    "insertText": "FEDLNodeHash()"
  },
  {
    "label": "FEDLNodeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEDLNodeHash(const TArray<FEDLNodeData>* InNodes, FEDLNodeID InNodeID, EObjectEvent InObjectEvent)"
  },
  {
    "label": "FEDLNodeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEDLNodeHash(TObjectPtr<UObject> InObject, EObjectEvent InObjectEvent)"
  },
  {
    "label": "FEDLNodeHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEDLNodeHash(const FEDLNodeHash& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FEDLNodeHash& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FEDLNodeHash& A)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "TryGetParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetParent(FEDLNodeHash& Parent)"
  },
  {
    "label": "GetObjectEvent()",
    "kind": "Method",
    "detail": "Function (EObjectEvent)",
    "insertText": "GetObjectEvent()"
  },
  {
    "label": "SetNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodes(const TArray<FEDLNodeData>* InNodes)"
  },
  {
    "label": "ObjectNameFirst()",
    "kind": "Method",
    "detail": "Function (private : FName)",
    "insertText": "ObjectNameFirst(const FEDLNodeHash& InNode, uint32& OutNodeID, TObjectPtr<const UObject>& OutObject)"
  },
  {
    "label": "ObjectNameNext()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ObjectNameNext(const FEDLNodeHash& InNode, uint32& OutNodeID, TObjectPtr<const UObject>& OutObject)"
  },
  {
    "label": "FEDLNodeData()",
    "kind": "Method",
    "detail": "Function (union { const TArray<FEDLNodeData>* Nodes ; TObjectPtr<const UObject> Object ; } ; FEDLNodeID NodeID ; bool bIsNode ; EObjectEvent ObjectEvent ; } ; private : struct FEDLNodeData { FName Name ; FEDLNodeID ID ; TArray<FName> ImportingPackagesSorted ; uint32 ParentID ; EObjectEvent ObjectEvent ; bool bIsExport ;)",
    "insertText": "FEDLNodeData()"
  },
  {
    "label": "FEDLNodeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEDLNodeData(FEDLNodeID InID, FEDLNodeID InParentID, FName InName, EObjectEvent InObjectEvent)"
  },
  {
    "label": "FEDLNodeData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEDLNodeData(FEDLNodeID InID, FEDLNodeID InParentID, FName InName, FEDLNodeData&& Other)"
  },
  {
    "label": "GetNodeHash()",
    "kind": "Method",
    "detail": "Function (FEDLNodeHash)",
    "insertText": "GetNodeHash(const FEDLCookChecker& Owner)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const FEDLCookChecker& Owner)"
  },
  {
    "label": "AppendPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPathName(const FEDLCookChecker& Owner, FStringBuilderBase& Result)"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageName(const FEDLCookChecker& Owner)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(FEDLNodeData&& Other)"
  },
  {
    "label": "FindOrAddNode()",
    "kind": "Method",
    "detail": "Function (} ; FEDLNodeID)",
    "insertText": "FindOrAddNode(const FEDLNodeHash& NodeLookup)"
  },
  {
    "label": "FindOrAddNode()",
    "kind": "Method",
    "detail": "Function (FEDLNodeID)",
    "insertText": "FindOrAddNode(FEDLNodeData&& NodeData, const FEDLCookChecker& OldOwnerOfNode, FEDLNodeID ParentIDInThis, bool& bNew)"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (FEDLNodeID)",
    "insertText": "FindNode(const FEDLNodeHash& NodeHash)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(FEDLCookChecker&& Other)"
  },
  {
    "label": "CheckForCyclesInner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForCyclesInner(TSet<FEDLNodeID>& Visited, TSet<FEDLNodeID>& Stack, const FEDLNodeID& Visit, FEDLNodeID& FailNode)"
  },
  {
    "label": "AddDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependency(FEDLNodeID SourceID, FEDLNodeID TargetID)"
  },
  {
    "label": "FEDLCookCheckerThreadState()",
    "kind": "Method",
    "detail": "Function (TArray<FEDLNodeData> Nodes ; TMap<FEDLNodeHash,FEDLNodeID> NodeHashToNodeID ; TMultiMap<FEDLNodeID,FEDLNodeID> NodePrereqs ; TSet<FName> PackagesWithUnknownExports ; bool bIsActive = false ; FCriticalSection CookCheckerInstanceCritical ; TArray<FEDLCookChecker*> CookCheckerInstances ; FEDLCookCheckerThreadState ; } ; struct FEDLCookCheckerThreadState : public TThreadSingleton<FEDLCookCheckerThreadState> {)",
    "insertText": "FEDLCookCheckerThreadState()"
  },
  {
    "label": "SaveThumbnails()",
    "kind": "Method",
    "detail": "Function (} private : FEDLCookChecker Checker ; TThreadSingleton<FEDLCookCheckerThreadState> ; FEDLCookChecker ; } ; namespace UE::SavePackageUtilities { const FName NAME_World ; const FName NAME_Level ; const FName NAME_PrestreamPackage ; void)",
    "insertText": "SaveThumbnails(UPackage* InOuter, FLinkerSave* Linker, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "AppendAdditionalData()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "AppendAdditionalData(FLinkerSave& Linker, int64& InOutDataStartOffset, FSavePackageContext* SavePackageContext)"
  },
  {
    "label": "CreatePayloadSidecarFile()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "CreatePayloadSidecarFile(FLinkerSave& Linker, const FPackagePath& PackagePath, const bool bSaveToMemory, FSavePackageOutputFileArray& AdditionalPackageFiles, FSavePackageContext* SavePackageContext)"
  },
  {
    "label": "SaveWorldLevelInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveWorldLevelInfo(UPackage* InOuter, FLinkerSave* Linker, FStructuredArchive::FRecord Record)"
  },
  {
    "label": "GetExcludedObjectMarksForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (EObjectMark)",
    "insertText": "GetExcludedObjectMarksForTargetPlatform(const class ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "FindMostLikelyCulprit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindMostLikelyCulprit(const TArray<UObject*>& BadObjects, UObject*& OutMostLikelyCulprit, UObject*& OutReferencer, const FProperty*& OutReferencerProperty, bool& OutIsCulpritArchetype, FSaveContext* InOptionalSaveContext = nullptr)"
  },
  {
    "label": "FinalizeTempOutputFiles()",
    "kind": "Method",
    "detail": "Function (ESavePackageResult)",
    "insertText": "FinalizeTempOutputFiles(const FPackagePath& PackagePath, const FSavePackageOutputFileArray& OutputFiles, const FDateTime& FinalTimeStamp)"
  },
  {
    "label": "WriteToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToFile(const FString& Filename, const uint8* InDataPtr, int64 InDataSize)"
  },
  {
    "label": "AsyncWriteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncWriteFile(FLargeMemoryPtr Data, const int64 DataSize, const TCHAR* Filename, EAsyncWriteOptions Options, TArrayView<const FFileRegion> InFileRegions)"
  },
  {
    "label": "AsyncWriteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncWriteFile(EAsyncWriteOptions Options, FSavePackageOutputFile& File)"
  },
  {
    "label": "GetCDOSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCDOSubobjects(UObject* CDO, TArray<UObject*>& Subobjects)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EEditorOnlyObjectFlags)"
  },
  {
    "label": "CanStripEditorOnlyImportsAndExports()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "CanStripEditorOnlyImportsAndExports()"
  },
  {
    "label": "IsEditorOnlyObjectInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnlyObjectInternal(const UObject* InObject, EEditorOnlyObjectFlags Flags, TFunctionRef<UE::SavePackageUtilities::EEditorOnlyObjectResult(const UObject*)> LookupInCache, TFunctionRef<void(const UObject*, bool)> AddToCache)"
  },
  {
    "label": "IsEditorOnlyObjectInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnlyObjectInternal(const UObject* InObject, EEditorOnlyObjectFlags Flags)"
  },
  {
    "label": "AddSavePackageStats()",
    "kind": "Method",
    "detail": "Function (# endif } # if ENABLE_COOK_STATS struct FSavePackageStats { int32 NumPackagesSaved ; double SavePackageTimeSec ; double TagPackageExportsPresaveTimeSec ; double TagPackageExportsTimeSec ; double FullyLoadLoadersTimeSec ; double ResetLoadersTimeSec ; double TagPackageExportsGetObjectsWithOuter ; double TagPackageExportsGetObjectsWithMarks ; double SerializeImportsTimeSec ; double SortExportsSeekfreeInnerTimeSec ; double SerializeExportsTimeSec ; double SerializeBulkDataTimeSec ; double AsyncWriteTimeSec ; double MBWritten ; TMap<FName,FArchiveDiffStats> PackageDiffStats ; int32 NumberOfDifferentPackages ; FCookStatsManager::FAutoRegisterCallback RegisterCookStats ; void)",
    "insertText": "AddSavePackageStats(FCookStatsManager::AddStatFuncRef AddStat)"
  },
  {
    "label": "MergeStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeStats(const TMap<FName, FArchiveDiffStats>& ToMerge)"
  }
]