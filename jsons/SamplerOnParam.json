[
  {
    "label": "TSamplerBasedOnParametrizationAndChordError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSamplerBasedOnParametrizationAndChordError"
  },
  {
    "label": "FSurfacicCurveSamplerOnParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurfacicCurveSamplerOnParam"
  },
  {
    "label": "FCurveSamplerOnParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveSamplerOnParam"
  },
  {
    "label": "FSurfaceSamplerOnParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurfaceSamplerOnParam"
  },
  {
    "label": "TSamplerBasedOnParametrizationAndChordError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Geo / Curves / Curve . h \" # include \" Geo / Curves / RestrictionCurve . h \" # include \" Geo / Sampler / SamplerAbstract . h \" # include \" Geo / Sampling / Polyline . h \" # include \" Geo / Sampling / SurfacicPolyline . h \" # include \" Geo / Sampling / SurfacicSampling . h \" # include \" Math / Boundary . h \" # include \" Math / Point . h \" # include \" Utils / ArrayUtils . h \" namespace UE::CADKernel { template<PolylineType,PointType> class TSamplerBasedOnParametrizationAndChordError : public TCurveSamplerAbstract<PolylineType,PointType> { public :)",
    "insertText": "TSamplerBasedOnParametrizationAndChordError(const FLinearBoundary& InBoundary, double InMaxChordError, double InMaxParameterizationError, PolylineType& OutPolyline) : TCurveSamplerAbstract<PolylineType, PointType>(InBoundary, OutPolyline, InMaxChordError) , DesiredParameterizationError(InMaxParameterizationError)"
  },
  {
    "label": "CheckSamplingError()",
    "kind": "Method",
    "detail": "Function (} ; protected : double DesiredParameterizationError ; int32)",
    "insertText": "CheckSamplingError(int32 FirstIndex, int32 EndIndex)"
  },
  {
    "label": "GetPointAt()",
    "kind": "Method",
    "detail": "Function (const FPoint& APoint = this -> Sampling .)",
    "insertText": "GetPointAt(this->StartSamplingSegmentIndex)"
  },
  {
    "label": "GetPointAt()",
    "kind": "Method",
    "detail": "Function (const FPoint& PointM = this -> CandidatePoints .)",
    "insertText": "GetPointAt(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MaxChord = Chord ; })",
    "insertText": "if(ParametrizationError > MaxParametrizationError)"
  },
  {
    "label": "SegmentNumToRespectParametrizationError()",
    "kind": "Method",
    "detail": "Function (MaxParametrizationError = ParametrizationError ; } } int32)",
    "insertText": "SegmentNumToRespectParametrizationError(int32)(MaxParametrizationError / DesiredParameterizationError)"
  },
  {
    "label": "SegmentNumToRespectParametrizationError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SegmentNumToRespectParametrizationError(int32)((SegmentNumToRespectParametrizationError - 1) / 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int32 SegmentNumToRespectChordError = 0 ;)",
    "insertText": "if(MaxChord < this->DesiredChordError / 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SegmentNumToRespectChordError = 1 ; } else)",
    "insertText": "if(MaxChord < 4 * this->DesiredChordError)"
  },
  {
    "label": "CheckTangentError()",
    "kind": "Method",
    "detail": "Function (SegmentNumToRespectChordError = this ->)",
    "insertText": "CheckTangentError(APoint, ACoordinate, BPoint, BCoordinate, FirstIndex, EndIndex, this->StartSamplingSegmentIndex)"
  },
  {
    "label": "CountOfNeededPointsToRespectChordError()",
    "kind": "Method",
    "detail": "Function (} else { SegmentNumToRespectChordError = this ->)",
    "insertText": "CountOfNeededPointsToRespectChordError(APoint, BPoint, MaxChord)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Max(SegmentNumToRespectChordError, SegmentNumToRespectParametrizationError)"
  },
  {
    "label": "FSurfacicCurveSamplerOnParam()",
    "kind": "Method",
    "detail": "Function (} ; } ; class FSurfacicCurveSamplerOnParam : public TSamplerBasedOnParametrizationAndChordError<FSurfacicPolyline,FPoint> { public :)",
    "insertText": "FSurfacicCurveSamplerOnParam(const FRestrictionCurve& InCurve, const FLinearBoundary& InBoundary, double InMaxSagError, double InMaxParameterizationError, FSurfacicPolyline& OutPolyline) : TSamplerBasedOnParametrizationAndChordError<FSurfacicPolyline, FPoint>(InBoundary, InMaxSagError, InMaxParameterizationError, OutPolyline) , Surface(*InCurve.GetCarrierSurface()) , Curve(*InCurve.Get2DCurve())"
  },
  {
    "label": "FSurfacicCurveSamplerOnParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FSurfacicCurveSamplerOnParam(const FSurface& InSurface, const FCurve& InCurve, const FLinearBoundary& InBoundary, double InMaxSagError, double InMaxParameterizationError, FSurfacicPolyline& OutPolyline) : TSamplerBasedOnParametrizationAndChordError<FSurfacicPolyline, FPoint>(InBoundary, InMaxSagError, InMaxParameterizationError, OutPolyline) , Surface(InSurface) , Curve(InCurve)"
  },
  {
    "label": "EvaluatesNewCandidatePoints()",
    "kind": "Method",
    "detail": "Function (} ; protected : const FSurface& Surface ; const FCurve& Curve ; double MaxParameterizationError ; void)",
    "insertText": "EvaluatesNewCandidatePoints()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CandidatePoints . bWithNormals = Sampling . bWithNormals ; CandidatePoints . bWithTangent = Sampling . bWithTangent ;)",
    "insertText": "if(CandidatePoints.bWithTangent)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (TArray<FCurvePoint2D> OutPoints ; Curve .)",
    "insertText": "Evaluate2DPoints(CandidatePoints.Coordinates, OutPoints, 1)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "EvaluatePoints(OutPoints, CandidatePoints)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (} else { Curve .)",
    "insertText": "Evaluate2DPoints(CandidatePoints.Coordinates, CandidatePoints.Points2D)"
  },
  {
    "label": "ValidateUVPoints()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "ValidateUVPoints(CandidatePoints.Points2D)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "EvaluatePoints(CandidatePoints)"
  },
  {
    "label": "GetNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "GetNotDerivableCoordinates(TArray<double>& OutNotDerivableCoordinates)"
  },
  {
    "label": "FindNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (Curve .)",
    "insertText": "FindNotDerivableCoordinates(Boundary, 2, OutNotDerivableCoordinates)"
  },
  {
    "label": "FCurveSamplerOnParam()",
    "kind": "Method",
    "detail": "Function (} } ; class FCurveSamplerOnParam : public TSamplerBasedOnParametrizationAndChordError<FPolyline3D,FPoint> { public :)",
    "insertText": "FCurveSamplerOnParam(const FCurve& InCurve, const FLinearBoundary& InBoundary, double InMaxSagError, double InMaxParameterizationError, FPolyline3D& OutPolyline) : TSamplerBasedOnParametrizationAndChordError<FPolyline3D, FPoint>(InBoundary, InMaxSagError, InMaxParameterizationError, OutPolyline) , Curve(InCurve)"
  },
  {
    "label": "EvaluatePoints()",
    "kind": "Method",
    "detail": "Function (Curve .)",
    "insertText": "EvaluatePoints(CandidatePoints.Coordinates, CandidatePoints.Points)"
  },
  {
    "label": "FSurfaceSamplerOnParam()",
    "kind": "Method",
    "detail": "Function (} } ; class FSurfaceSamplerOnParam : public TSamplerBasedOnParametrizationAndChordError<FPolyline3D,FPoint> { public :)",
    "insertText": "FSurfaceSamplerOnParam(const FSurface& InSurface, const FSurfacicBoundary& InBoundary, double InMaxSagError, double InMaxParameterizationError, FPolyline3D& TemporaryPolyline, FCoordinateGrid& OutSampling) : TSamplerBasedOnParametrizationAndChordError<FPolyline3D, FPoint>(FLinearBoundary(), InMaxSagError, InMaxParameterizationError, TemporaryPolyline) , Surface(InSurface) , SurfaceBoundary(InBoundary) , SurfaceSampling(OutSampling)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Set(EIso InIsoType, double InIsoCoordinate, const FLinearBoundary& CurveBounds)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (IsoType = InIsoType ; IsoCoordinate .)",
    "insertText": "Empty(1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IsoCoordinate .)",
    "insertText": "Add(InIsoCoordinate)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (Boundary = CurveBounds ; } void)",
    "insertText": "Sample()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(EIso::IsoU)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sample(EIso::IsoV)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sample(EIso InIsoType)"
  },
  {
    "label": "GetMiddle()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_CURVE_SAMPLING CurveIndex = CurveToDisplay - 1 ; # endif double Middle = SurfaceBoundary [ InIsoType ] .)",
    "insertText": "GetMiddle()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InIsoType, Middle, SurfaceBoundary[Other(InIsoType)])"
  },
  {
    "label": "SamplingInitalizing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SamplingInitalizing()"
  },
  {
    "label": "RunSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSampling()"
  },
  {
    "label": "GetMin()",
    "kind": "Method",
    "detail": "Function (IsoCoordinate [ 0 ] = SurfaceBoundary [ InIsoType ] .)",
    "insertText": "GetMin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IsoCoordinate [ 0 ] + = Step ;)",
    "insertText": "if(IsoIndex == 3)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "Swap(CandidatePoints.Coordinates, Sampling.Coordinates)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(CandidatePoints.Points, Sampling.Points)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CandidatePoints . Coordinates .)",
    "insertText": "Empty(Sampling.Coordinates.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CandidatePoints . Coordinates .)",
    "insertText": "Add(UCoord)"
  },
  {
    "label": "DisplaySampling()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_CURVE_SAMPLING CurveToDisplay = CurveIndex ;)",
    "insertText": "DisplaySampling(CurveIndex == CurveToDisplay, 0)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Swap(SurfaceSampling[Other(InIsoType)], Sampling.Coordinates)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_CURVE_SAMPLING + + CurveIndex ; # endif IsOptimalSegments .)",
    "insertText": "Empty(100)"
  },
  {
    "label": "GetNotDerivableCoordinates()",
    "kind": "Method",
    "detail": "Function (int32 ComplementaryPointOffset = 0 ; { TArray<double> LocalNotDerivableCoordinates ;)",
    "insertText": "GetNotDerivableCoordinates(LocalNotDerivableCoordinates)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (LocalNotDerivableCoordinates .)",
    "insertText": "Insert(Boundary.Min, 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocalNotDerivableCoordinates .)",
    "insertText": "Add(Boundary.Max)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ComplementaryPointOffset = LocalNotDerivableCoordinates .)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NextCoordinates .)",
    "insertText": "Empty(LocalNotDerivableCoordinates.Num() * (ComplementaryPointOffset + 1))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NextCoordinates .)",
    "insertText": "Add(Boundary.Min)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NextCoordinates .)",
    "insertText": "Add(LocalNotDerivableCoordinates[Index + 1])"
  },
  {
    "label": "SwapCoordinates()",
    "kind": "Method",
    "detail": "Function (} } } CandidatePoints .)",
    "insertText": "SwapCoordinates(NextCoordinates)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ComplementaryPointOffset + + ;)",
    "insertText": "for(int32 Index = 0, ISampling = 0; Index < CandidatePoints.Size(); Index += ComplementaryPointOffset, ++ISampling)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Sampling .)",
    "insertText": "EmplaceAt(ISampling, CandidatePoints, Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (IsOptimalSegments .)",
    "insertText": "Add(false)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} IsOptimalSegments .)",
    "insertText": "Pop()"
  },
  {
    "label": "RemoveComplementaryPoints()",
    "kind": "Method",
    "detail": "Function (CandidatePoints .)",
    "insertText": "RemoveComplementaryPoints(ComplementaryPointOffset)"
  },
  {
    "label": "LinesNotDerivables()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "LinesNotDerivables(Surface.GetBoundary(), 2, NotDerivableCoordinates)"
  },
  {
    "label": "GetIsoTolerance()",
    "kind": "Method",
    "detail": "Function (bNotDerivableFound = true ; } EIso CurveIso = IsoType = = EIso::IsoU ? EIso::IsoV : EIso::IsoU ; const TArray<double>& SurfaceIsoNotDerivableCoordinates = NotDerivableCoordinates [ CurveIso ] ; double Tolerance = Surface .)",
    "insertText": "GetIsoTolerance(CurveIso)"
  },
  {
    "label": "SubArrayWithoutBoundary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubArrayWithoutBoundary(SurfaceIsoNotDerivableCoordinates, Boundary, Tolerance, OutNotDerivableCoordinates)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (TArray<double>& UCoordinates = IsoType = = EIso::IsoU ? IsoCoordinate : CandidatePoints . Coordinates ; TArray<double>& VCoordinates = IsoType = = EIso::IsoU ? CandidatePoints . Coordinates : IsoCoordinate ; FSurfacicSampling PointGrid ; FCoordinateGrid Grid ; Grid .)",
    "insertText": "Swap(UCoordinates, VCoordinates)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (Surface .)",
    "insertText": "EvaluatePointGrid(Grid, PointGrid)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(CandidatePoints.Points, PointGrid.Points3D)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} else { CandidatePoints . Points .)",
    "insertText": "SetNum(0)"
  }
]