[
  {
    "label": "FMeshElementChannels",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementChannels"
  },
  {
    "label": "FElementID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementID"
  },
  {
    "label": "FMeshElementIndexer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementIndexer"
  },
  {
    "label": "FChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunk"
  },
  {
    "label": "FIndexPerChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexPerChannel"
  },
  {
    "label": "FMeshElementIndexer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathSSE . h \" # include \" MeshAttributeArray . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / EnableIf . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / NameTypes . h \" class FMeshElementChannels ; struct FElementID ; class FMeshElementIndexer { public :)",
    "insertText": "FMeshElementIndexer()"
  },
  {
    "label": "FMeshElementIndexer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshElementIndexer(const FMeshElementChannels* Key, const FMeshElementChannels* Referencer, FName AttributeName, int32 ReferencerChannelIndex = 0)"
  },
  {
    "label": "FMeshElementIndexer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshElementIndexer(const FMeshElementIndexer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshElementIndexer&)",
    "insertText": "operator(const FMeshElementIndexer&)"
  },
  {
    "label": "FMeshElementIndexer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshElementIndexer(FMeshElementIndexer&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshElementIndexer&)",
    "insertText": "operator(FMeshElementIndexer&&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FMeshElementChannels* Key, const FMeshElementChannels* Referencer, FName AttributeName, int32 ReferencerChannelIndex = 0)"
  },
  {
    "label": "SetInitialNumReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialNumReferences(int InInitialSize)"
  },
  {
    "label": "SetChunkSize()",
    "kind": "Method",
    "detail": "Function (InitialSize = InInitialSize ; } void)",
    "insertText": "SetChunkSize(int InChunkSize)"
  },
  {
    "label": "CeilLogTwo()",
    "kind": "Method",
    "detail": "Function (ChunkBits =)",
    "insertText": "CeilLogTwo(InChunkSize)"
  },
  {
    "label": "ChunkMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChunkMask(1U << ChunkBits)"
  },
  {
    "label": "SetUnchunked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUnchunked()"
  },
  {
    "label": "SetChunkSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChunkSize(1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TArrayView<const int32>)",
    "insertText": "Find(int32 KeyIndex, int32 KeyChannelIndex = 0)"
  },
  {
    "label": "ConditionalBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBuild(KeyIndex, KeyChannelIndex)"
  },
  {
    "label": "GetChunkForKey()",
    "kind": "Method",
    "detail": "Function (int32 Chunk =)",
    "insertText": "GetChunkForKey(KeyIndex)"
  },
  {
    "label": "GetChunkElementForKey()",
    "kind": "Method",
    "detail": "Function (int32 ChunkElement =)",
    "insertText": "GetChunkElementForKey(KeyIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return PerChannelIndices [ KeyChannelIndex ] . Chunks [ Chunk ] .)",
    "insertText": "Get(ChunkElement)"
  },
  {
    "label": "ElementIDType()",
    "kind": "Method",
    "detail": "Function (} return PerChannelIndices [ KeyChannelIndex ] . Chunks [ Chunk ] . Get<)",
    "insertText": "ElementIDType(ChunkElement)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveKey(int32 KeyIndex, int32 KeyChannelIndex = 0)"
  },
  {
    "label": "RemoveReferenceFromKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceFromKey(int32 KeyIndex, int32 ReferenceIndex, int32 KeyChannelIndex = 0)"
  },
  {
    "label": "AddReferenceToKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferenceToKey(int32 KeyIndex, int32 ReferenceIndex, int32 KeyChannelIndex = 0)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (bSuspended = true ; } void)",
    "insertText": "Resume()"
  },
  {
    "label": "ForceRebuild()",
    "kind": "Method",
    "detail": "Function (bSuspended = false ; bEverythingStale = true ; } void)",
    "insertText": "ForceRebuild()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build()"
  },
  {
    "label": "UpdatePerChannelIndices()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdatePerChannelIndices()"
  },
  {
    "label": "BuildIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildIndex(int32 Index)"
  },
  {
    "label": "RebuildIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildIndex(int32 Index)"
  },
  {
    "label": "ConditionalBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalBuild(int32 KeyIndex, int32 KeyChannelIndex)"
  },
  {
    "label": "AddUnchunked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUnchunked(int32 KeyIndex, int32 ReferenceIndex, int32 KeyChannelIndex = 0)"
  },
  {
    "label": "GetChunkForKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChunkForKey(int32 ElementIndex)"
  },
  {
    "label": "GetNumChunksForKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumChunksForKeys(int32 NumElements)"
  },
  {
    "label": "FChunk()",
    "kind": "Method",
    "detail": "Function (} struct FChunk {)",
    "insertText": "FChunk(int32 InitialSize, int32 ChunkSize)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "SetNumUninitialized(ChunkSize * InitialSize, EAllowShrinking::No)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (StartIndex .)",
    "insertText": "SetNumUninitialized(ChunkSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 N = 0 ;)",
    "insertText": "for(int I = 0; I < ChunkSize; I++)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (MaxCount [ I ] = InitialSize ; })",
    "insertText": "Memzero(Count.GetData(), sizeof(int32) * ChunkSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Add(int32 Index, int32 Value)"
  },
  {
    "label": "AddUnsorted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUnsorted(int32 Index, int32 Value)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(int32 Index, int32 Value)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(int32 Index, int32 Value)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(int32 Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<const int32>)",
    "insertText": "Get(int32 Index)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const int32* Ptr = Data .)",
    "insertText": "GetData()"
  },
  {
    "label": "ElementIDType()",
    "kind": "Method",
    "detail": "Function (const ElementIDType* Ptr = reinterpret_cast<const)",
    "insertText": "ElementIDType(Data.GetData())"
  }
]