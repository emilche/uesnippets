[
  {
    "label": "StackBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StackBuffer"
  },
  {
    "label": "StackBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_VTR_STACK_BUFFER_H # define OPENSUBDIV3_VTR_STACK_BUFFER_H # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Vtr { namespace internal { template<TYPE,unsigned int SIZE,bool POD_TYPE = false> class StackBuffer { public : typedef unsigned int size_type ; public :)",
    "insertText": "StackBuffer()"
  },
  {
    "label": "StackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackBuffer(size_type size)"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (public : operator TYPE)",
    "insertText": "const()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(size_type capacity)"
  },
  {
    "label": "StackBuffer()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "StackBuffer(const StackBuffer<TYPE,SIZE,POD_TYPE> &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StackBuffer&)",
    "insertText": "operator(const StackBuffer<TYPE,SIZE,POD_TYPE> &)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct()"
  },
  {
    "label": "destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destruct()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (private : TYPE* _data ; size_type _size ; size_type _capacity ; char _staticData [ SIZE*)",
    "insertText": "sizeof(TYPE)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (char* _dynamicData ; } ; template<TYPE,unsigned int SIZE,bool POD_TYPE> void StackBuffer<TYPE,SIZE,POD_TYPE)",
    "insertText": "allocate(size_type capacity)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (_dynamicData = static_cast<)",
    "insertText": "char(::operator new(capacity * sizeof(TYPE)))"
  },
  {
    "label": "TYPE()",
    "kind": "Method",
    "detail": "Function (_data = reinterpret_cast<)",
    "insertText": "TYPE(_dynamicData)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(_dynamicData)"
  },
  {
    "label": "TYPE()",
    "kind": "Method",
    "detail": "Function (_data = reinterpret_cast<)",
    "insertText": "TYPE(_staticData)"
  },
  {
    "label": "TYPE()",
    "kind": "Method",
    "detail": "Function (_data [ i ] . ~)",
    "insertText": "TYPE()"
  },
  {
    "label": "StackBuffer()",
    "kind": "Method",
    "detail": "Function (} } template<TYPE,unsigned int SIZE,bool POD_TYPE> StackBuffer<TYPE,SIZE,POD_TYPE)",
    "insertText": "StackBuffer() : _data(reinterpret_cast<TYPE*>(_staticData)), _size(0), _capacity(SIZE), _dynamicData(0)"
  },
  {
    "label": "StackBuffer()",
    "kind": "Method",
    "detail": "Function (} template<TYPE,unsigned int SIZE,bool POD_TYPE> StackBuffer<TYPE,SIZE,POD_TYPE)",
    "insertText": "StackBuffer(size_type size) : _data(reinterpret_cast<TYPE*>(_staticData)), _size(size), _capacity(SIZE), _dynamicData(0)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate(size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!POD_TYPE)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate(capacity)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (} } template<TYPE,unsigned int SIZE,bool POD_TYPE> void StackBuffer<TYPE,SIZE,POD_TYPE)",
    "insertText": "SetSize(size_type size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(size == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(size > _capacity)"
  }
]