[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "FQueryDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryDescription"
  },
  {
    "label": "ISubqueryContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISubqueryContext"
  },
  {
    "label": "ICommonQueryContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICommonQueryContext"
  },
  {
    "label": "ICommonQueryWithEnvironmentContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICommonQueryWithEnvironmentContext"
  },
  {
    "label": "FEmplaceObjectParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmplaceObjectParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IDirectQueryContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDirectQueryContext"
  },
  {
    "label": "IQueryContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IQueryContext"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Elements / Common / TypedElementCommonTypes . h \" # include \" Elements / Common / TypedElementHandles . h \" # include \" Elements / Common / TypedElementQueryTypes . h \" # include \" UObject / Class . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Templates / Function . h \" class UClass ; class UObject ; class UScriptStruct ; namespace UE::Editor::DataStorage { struct FQueryDescription ; struct ISubqueryContext ; using SubqueryCallback = TFunction<)",
    "insertText": "void(const FQueryDescription&, ISubqueryContext&)"
  },
  {
    "label": "ICommonQueryContext()",
    "kind": "Method",
    "detail": "Function (struct ICommonQueryContext { ~)",
    "insertText": "ICommonQueryContext()"
  },
  {
    "label": "GetRowCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRowCount()"
  },
  {
    "label": "GetRowHandles()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<RowHandle>)",
    "insertText": "GetRowHandles()"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetColumn(const UScriptStruct* ColumnType)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (template<Column> const Column*)",
    "insertText": "GetColumn()"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType TemplateType> const TemplateType*)",
    "insertText": "GetColumn(const FName& Identifier)"
  },
  {
    "label": "GetMutableColumn()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetMutableColumn(const UScriptStruct* ColumnType)"
  },
  {
    "label": "GetMutableColumn()",
    "kind": "Method",
    "detail": "Function (template<Column> Column*)",
    "insertText": "GetMutableColumn()"
  },
  {
    "label": "GetMutableColumn()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType TemplateType> TemplateType*)",
    "insertText": "GetMutableColumn(const FName& Identifier)"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetColumns(TArrayView<char*> RetrievedAddresses, TConstArrayView<TWeakObjectPtr<const UScriptStruct>> ColumnTypes, TConstArrayView<EQueryAccessType> AccessTypes)"
  },
  {
    "label": "GetColumnsUnguarded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetColumnsUnguarded(int32 TypeCount, char** RetrievedAddresses, const TWeakObjectPtr<const UScriptStruct>* ColumnTypes, const EQueryAccessType* AccessTypes)"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColumn(const UScriptStruct* ColumnType)"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (template<Column> bool)",
    "insertText": "HasColumn()"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColumn(RowHandle Row, const UScriptStruct* ColumnType)"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (template<Column> bool)",
    "insertText": "HasColumn(RowHandle Row)"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (template<TColumnType DynamicColumnTemplate> bool)",
    "insertText": "HasColumn(RowHandle Row, const FName& Identifier)"
  },
  {
    "label": "FindDynamicColumnType()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "FindDynamicColumnType(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "FindDynamicColumnType()",
    "kind": "Method",
    "detail": "Function (template<TColumnType TemplateType> const UScriptStruct*)",
    "insertText": "FindDynamicColumnType(const FName& Identifier)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct ICommonQueryWithEnvironmentContext : public ICommonQueryContext { using ObjectCopyOrMove =)",
    "insertText": "void(*)(const UScriptStruct& TypeInfo, void* Destination, void* Source)"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (template<DynamicColumnTemplate> bool)",
    "insertText": "HasColumn(const FName& Identifier)"
  },
  {
    "label": "GetUpdateCycleId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetUpdateCycleId()"
  },
  {
    "label": "IsRowAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowAvailable(RowHandle Row)"
  },
  {
    "label": "IsRowAssigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowAssigned(RowHandle Row)"
  },
  {
    "label": "ActivateQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateQueries(FName ActivationName)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (RowHandle)",
    "insertText": "AddRow(TableHandle Table)"
  },
  {
    "label": "RemoveRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRow(RowHandle Row)"
  },
  {
    "label": "RemoveRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRows(TConstArrayView<RowHandle> Rows)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<ColumnType> ColumnType&)",
    "insertText": "AddColumn(RowHandle Row, ColumnType&& Column)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<ColumnTypeTemplate> ColumnTypeTemplate*)",
    "insertText": "AddColumn(RowHandle Row, const FName& Identifier)"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (template<ColumnTypeTemplate> ColumnTypeTemplate&)",
    "insertText": "AddColumn(RowHandle Row, const FName& Identifier, ColumnTypeTemplate&& Column)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (template<. . . Columns> void)",
    "insertText": "AddColumns(RowHandle Row)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (template<. . . Columns> void)",
    "insertText": "AddColumns(TConstArrayView<RowHandle> Rows)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(TConstArrayView<RowHandle> Rows, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(TConstArrayView<RowHandle> Rows, TConstArrayView<FDynamicColumnDescription> DynamicColumnDescriptions)"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AddColumnUninitialized(RowHandle Row, const UScriptStruct* ColumnType)"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AddColumnUninitialized(RowHandle Row, const UScriptStruct* ObjectType, ObjectCopyOrMove Relocator)"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AddColumnUninitialized(RowHandle Row, const FDynamicColumnDescription& DynamicColumnDescription, ObjectCopyOrMove Relocator)"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AddColumnUninitialized(RowHandle Row, const FDynamicColumnDescription& DynamicColumnDescription)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (template<. . . Columns> void)",
    "insertText": "RemoveColumns(RowHandle Row)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (template<. . . Columns> void)",
    "insertText": "RemoveColumns(TConstArrayView<RowHandle> Rows)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(TConstArrayView<RowHandle> Rows, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "PushCommand(T CommandContext)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCommand(void (*CommandFunction)(void* ), void* InCommandData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (protected : struct FEmplaceObjectParams { size_t ObjectSize ; size_t Alignment ;)",
    "insertText": "void(*Construct)(void*, void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*Destroy)(void*)"
  },
  {
    "label": "EmplaceObjectInScratch()",
    "kind": "Method",
    "detail": "Function (void* SourceObject ; } ; void*)",
    "insertText": "EmplaceObjectInScratch(const FEmplaceObjectParams& Params)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EDirectQueryExecutionFlags : uint32 { Default = 0,ParallelizeChunks = 1<<0,IgnoreActivationCount = 1<<1,AllowBoundQueries = 1<<2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDirectQueryExecutionFlags)"
  },
  {
    "label": "IDirectQueryContext()",
    "kind": "Method",
    "detail": "Function (struct IDirectQueryContext : public ICommonQueryContext { ~)",
    "insertText": "IDirectQueryContext()"
  },
  {
    "label": "ISubqueryContext()",
    "kind": "Method",
    "detail": "Function (} ; struct ISubqueryContext : public ICommonQueryWithEnvironmentContext { ~)",
    "insertText": "ISubqueryContext()"
  },
  {
    "label": "IQueryContext()",
    "kind": "Method",
    "detail": "Function (} ; struct IQueryContext : public ICommonQueryWithEnvironmentContext { ~)",
    "insertText": "IQueryContext()"
  },
  {
    "label": "GetDependency()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetDependency(const UClass* DependencyClass)"
  },
  {
    "label": "GetMutableDependency()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetMutableDependency(const UClass* DependencyClass)"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependencies(TArrayView<UObject*> RetrievedAddresses, TConstArrayView<TWeakObjectPtr<const UClass>> DependencyTypes, TConstArrayView<EQueryAccessType> AccessTypes)"
  },
  {
    "label": "FindIndexedRow()",
    "kind": "Method",
    "detail": "Function (RowHandle)",
    "insertText": "FindIndexedRow(IndexHash Index)"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunQuery(QueryHandle Query)"
  },
  {
    "label": "RunSubquery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunSubquery(int32 SubqueryIndex)"
  },
  {
    "label": "RunSubquery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunSubquery(int32 SubqueryIndex, SubqueryCallbackRef Callback)"
  },
  {
    "label": "RunSubquery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunSubquery(int32 SubqueryIndex, RowHandle Row, SubqueryCallbackRef Callback)"
  },
  {
    "label": "TemplateType()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* DynamicColumnType = FindDynamicColumnType<)",
    "insertText": "TemplateType(Identifier)"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Editor::DataStorage ; const FDynamicColumnDescription Description { . TemplateType =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "FindDynamicColumnType()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* StructInfo =)",
    "insertText": "FindDynamicColumnType(Description)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (const void* ColumnData =)",
    "insertText": "GetColumn(StructInfo)"
  },
  {
    "label": "GetMutableColumn()",
    "kind": "Method",
    "detail": "Function (const void* ColumnData =)",
    "insertText": "GetMutableColumn(StructInfo)"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (void* Address =)",
    "insertText": "AddColumnUninitialized(Row, TypeInfo, [](const UScriptStruct&, void* Destination, void* Source) { *reinterpret_cast<ColumnType*>(Destination) = MoveTemp(*reinterpret_cast<ColumnType*>(Source)); })"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { void* Address =)",
    "insertText": "AddColumnUninitialized(Row, TypeInfo)"
  },
  {
    "label": "CopyScriptStruct()",
    "kind": "Method",
    "detail": "Function (TypeInfo ->)",
    "insertText": "CopyScriptStruct(Address, &Column)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (const FDynamicColumnDescription Description { . TemplateType = TemplateType,. Identifier = Identifier } ; if)",
    "insertText": "constexpr(TDataColumnType<ColumnTypeTemplate>)"
  },
  {
    "label": "ColumnTypeTemplate()",
    "kind": "Method",
    "detail": "Function (ColumnTypeTemplate* ColumnData = static_cast<)",
    "insertText": "ColumnTypeTemplate(AddColumnUninitialized(Row, Description))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(ColumnData) ColumnTypeTemplate()"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns({Row}, {Description})"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (const FDynamicColumnDescription Description { . TemplateType = TemplateType,. Identifier = Identifier } ; if)",
    "insertText": "constexpr(std::is_move_constructible_v<ColumnTypeTemplate>)"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (void* Address =)",
    "insertText": "AddColumnUninitialized(Row, Description, [](const UScriptStruct&, void* Destination, void* Source) { *static_cast<ColumnTypeTemplate*>(Destination) = MoveTemp(*static_cast<ColumnTypeTemplate*>(Source)); })"
  },
  {
    "label": "AddColumnUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { void* Address =)",
    "insertText": "AddColumnUninitialized(Row, Description)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Address) ColumnTypeTemplate(Forward<ColumnTypeTemplate>(Column))"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(Row, { Columns::StaticStruct()... })"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(Rows, { Columns::StaticStruct()... })"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(Row, { Columns::StaticStruct()... })"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(Rows, { Columns::StaticStruct()... })"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*CommandFunction)(void*)"
  },
  {
    "label": "CommandFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommandFunction(void* InInstanceOfT)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Instance = static_cast<)",
    "insertText": "T(InInstanceOfT)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Instance ->)",
    "insertText": "operator()()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(std::is_empty_v<T>)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCommand(CommandFunction, nullptr)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} else { FEmplaceObjectParams Params ; Params . ObjectSize =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (Params . Alignment =)",
    "insertText": "alignof(T)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Params .)",
    "insertText": "Construct(void* Destination, void* SourceCommandContext)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T& SourceCommand =* static_cast<)",
    "insertText": "T(SourceCommandContext)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Destination) T(MoveTemp(SourceCommand))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(std::is_trivially_destructible_v<T>)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (Params . Destroy = nullptr ; } else { Params .)",
    "insertText": "Destroy(void* EmplacedObject)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "T(EmplacedObject)->~T()"
  },
  {
    "label": "EmplaceObjectInScratch()",
    "kind": "Method",
    "detail": "Function (} ; } Params . SourceObject =& CommandContext ; void* EmplacedCommandContext =)",
    "insertText": "EmplaceObjectInScratch(Params)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCommand(CommandFunction, EmplacedCommandContext)"
  }
]