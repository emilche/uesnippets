[
  {
    "label": "UIDNA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UIDNA"
  },
  {
    "label": "UIDNAInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UIDNAInfo"
  },
  {
    "label": "uidna_openUTS46()",
    "kind": "Method",
    "detail": "Function (# ifndef __UIDNA_H__ # define __UIDNA_H__ # include \" unicode / utypes . h \" # if ! UCONFIG_NO_IDNA # include \" unicode / localpointer . h \" # include \" unicode / parseerr . h \" enum { UIDNA_DEFAULT = 0,# ifndef UIDNA_ALLOW_UNASSIGNED = 1,# endif UIDNA_USE_STD3_RULES = 2,UIDNA_CHECK_BIDI = 4,UIDNA_CHECK_CONTEXTJ = 8,UIDNA_NONTRANSITIONAL_TO_ASCII = 0 x10,UIDNA_NONTRANSITIONAL_TO_UNICODE = 0 x20,UIDNA_CHECK_CONTEXTO = 0 x40 } ; struct UIDNA ; typedef struct UIDNA UIDNA ; U_STABLE UIDNA* U_EXPORT2)",
    "insertText": "uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uidna_close(UIDNA *idna)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUIDNAPointer, UIDNA, uidna_close)"
  },
  {
    "label": "UIDNA_INFO_INITIALIZER()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif typedef struct UIDNAInfo { int16_t size ; UBool isTransitionalDifferent ; UBool reservedB3 ; uint32_t errors ; int32_t reservedI2 ; int32_t reservedI3 ; } UIDNAInfo ; # define)",
    "insertText": "UIDNA_INFO_INITIALIZER(int16_t)sizeof(UIDNAInfo), \\ FALSE, FALSE, \\ 0, 0, 0 } U_STABLE int32_t U_EXPORT2 uidna_labelToASCII(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_labelToUnicode()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_labelToUnicode(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_nameToASCII()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_nameToASCII(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_nameToUnicode()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_nameToUnicode(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_labelToASCII_UTF8()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_labelToASCII_UTF8(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_labelToUnicodeUTF8()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_labelToUnicodeUTF8(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_nameToASCII_UTF8()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_nameToASCII_UTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_nameToUnicodeUTF8()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uidna_nameToUnicodeUTF8(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)"
  },
  {
    "label": "uidna_toASCII()",
    "kind": "Method",
    "detail": "Function (enum { UIDNA_ERROR_EMPTY_LABEL = 1,UIDNA_ERROR_LABEL_TOO_LONG = 2,UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4,UIDNA_ERROR_LEADING_HYPHEN = 8,UIDNA_ERROR_TRAILING_HYPHEN = 0 x10,UIDNA_ERROR_HYPHEN_3_4 = 0 x20,UIDNA_ERROR_LEADING_COMBINING_MARK = 0 x40,UIDNA_ERROR_DISALLOWED = 0 x80,UIDNA_ERROR_PUNYCODE = 0 x100,UIDNA_ERROR_LABEL_HAS_DOT = 0 x200,UIDNA_ERROR_INVALID_ACE_LABEL = 0 x400,UIDNA_ERROR_BIDI = 0 x800,UIDNA_ERROR_CONTEXTJ = 0 x1000,UIDNA_ERROR_CONTEXTO_PUNCTUATION = 0 x2000,UIDNA_ERROR_CONTEXTO_DIGITS = 0 x4000 } ; # ifndef U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "uidna_toASCII(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)"
  },
  {
    "label": "uidna_toUnicode()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "uidna_toUnicode(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)"
  },
  {
    "label": "uidna_IDNToASCII()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "uidna_IDNToASCII(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)"
  },
  {
    "label": "uidna_IDNToUnicode()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "uidna_IDNToUnicode(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)"
  },
  {
    "label": "uidna_compare()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "uidna_compare(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, int32_t options, UErrorCode* status)"
  }
]