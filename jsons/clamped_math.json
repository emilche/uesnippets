[
  {
    "label": "ClampedNumeric",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClampedNumeric"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "Wrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Wrapper"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_NUMERICS_CLAMPED_MATH_H_ # define BASE_NUMERICS_CLAMPED_MATH_H_ # include<stddef . h> # include<limits> # include<type_traits> # include \" base / numerics / clamped_math_impl . h \" namespace base { namespace internal { template<T> class ClampedNumeric {)",
    "insertText": "static_assert(std::is_arithmetic<T>::value, \"ClampedNumeric<T>: T must be a numeric type.\")"
  },
  {
    "label": "ClampedNumeric()",
    "kind": "Method",
    "detail": "Function (public : using type = T ;)",
    "insertText": "ClampedNumeric() : value_(0)"
  },
  {
    "label": "ClampedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src>)",
    "insertText": "ClampedNumeric(const ClampedNumeric<Src>& rhs) : value_(saturated_cast<T>(rhs.value_))"
  },
  {
    "label": "ClampedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src> class ClampedNumeric ;)",
    "insertText": "ClampedNumeric(T value) : value_(value)"
  },
  {
    "label": "ClampedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src>)",
    "insertText": "ClampedNumeric(Src value) : value_(saturated_cast<T>(value))"
  },
  {
    "label": "ClampedNumeric()",
    "kind": "Method",
    "detail": "Function (} template<Src>)",
    "insertText": "ClampedNumeric(StrictNumeric<Src> value) : value_(saturated_cast<T>(static_cast<Src>(value)))"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} template<Dst> ClampedNumeric<UnderlyingType<Dst>::type>)",
    "insertText": "Cast()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Src> ClampedNumeric&)",
    "insertText": "operator(const Src rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ClampedNumeric)",
    "insertText": "operator()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} ClampedNumeric)",
    "insertText": "Abs()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} template<U> ClampedNumeric<MathWrapper<ClampedMaxOp,T,U>::type>)",
    "insertText": "Max(const U rhs)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (using result_type = MathWrapper<ClampedMaxOp,T,U>::type ; return ClampedNumeric<)",
    "insertText": "result_type(ClampedMaxOp<T, U>::Do(value_, Wrapper<U>::value(rhs)))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} template<U> ClampedNumeric<MathWrapper<ClampedMinOp,T,U>::type>)",
    "insertText": "Min(const U rhs)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (using result_type = MathWrapper<ClampedMinOp,T,U>::type ; return ClampedNumeric<)",
    "insertText": "result_type(ClampedMinOp<T, U>::Do(value_, Wrapper<U>::value(rhs)))"
  },
  {
    "label": "UnsignedAbs()",
    "kind": "Method",
    "detail": "Function (} ClampedNumeric<UnsignedOrFloatForSize<T>::type>)",
    "insertText": "UnsignedAbs()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this + = 1 ; return* this ; } ClampedNumeric)",
    "insertText": "operator(int)"
  },
  {
    "label": "MathOp()",
    "kind": "Method",
    "detail": "Function (ClampedNumeric value =* this ;* this - = 1 ; return value ; } template<template<,,> class M,L,R> ClampedNumeric)",
    "insertText": "MathOp(const L lhs, const R rhs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using Math = MathWrapper<M,L,R>::math ; return ClampedNumeric<)",
    "insertText": "T(Math::template Do<T>(Wrapper<L>::value(lhs), Wrapper<R>::value(rhs)))"
  },
  {
    "label": "MathOp()",
    "kind": "Method",
    "detail": "Function (} template<template<,,> class M,R> ClampedNumeric&)",
    "insertText": "MathOp(const R rhs)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using Math = MathWrapper<M,T,R>::math ;* this = ClampedNumeric<)",
    "insertText": "T(Math::template Do<T>(value_, Wrapper<R>::value(rhs)))"
  },
  {
    "label": "RawValue()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "RawValue()"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (using Math = MathWrapper<M,L,R>::math ; return ClampedNumeric<Math::result_type>::template MathOp<)",
    "insertText": "M(lhs, rhs)"
  },
  {
    "label": "ClampMathOp()",
    "kind": "Method",
    "detail": "Function (} template<template<,,> class M,L,R,. . . Args> auto)",
    "insertText": "ClampMathOp(const L lhs, const R rhs, const Args... args)"
  },
  {
    "label": "BASE_NUMERIC_ARITHMETIC_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Add, +, +=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Sub, -, -=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Mul, *, *=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Div, /, /=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Mod, %, %=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Lsh, <<, <<=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Rsh, >>, >>=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, And, &, &=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Or, |, |=) BASE_NUMERIC_ARITHMETIC_OPERATORS(Clamped, Clamp, Xor, ^, ^=) BASE_NUMERIC_ARITHMETIC_VARIADIC(Clamped, Clamp, Max) BASE_NUMERIC_ARITHMETIC_VARIADIC(Clamped, Clamp, Min) BASE_NUMERIC_COMPARISON_OPERATORS(Clamped, IsLess, <) BASE_NUMERIC_COMPARISON_OPERATORS(Clamped, IsLessOrEqual, <=) BASE_NUMERIC_COMPARISON_OPERATORS(Clamped, IsGreater, >) BASE_NUMERIC_COMPARISON_OPERATORS(Clamped, IsGreaterOrEqual, >=) BASE_NUMERIC_COMPARISON_OPERATORS(Clamped, IsEqual, ==) BASE_NUMERIC_COMPARISON_OPERATORS(Clamped, IsNotEqual, !=)"
  }
]