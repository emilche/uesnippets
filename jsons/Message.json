[
  {
    "label": "GetErrorMessage()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Trace / Config . h \" # include \" Trace / Trace . h \" # if TRACE_PRIVATE_MINIMAL_ENABLED namespace UE { namespace Trace { namespace Private { bool)",
    "insertText": "GetErrorMessage(char* OutBuffer, uint32 BufferSize, int32 ErrorCode)"
  },
  {
    "label": "UE_TRACE_MESSAGE()",
    "kind": "Method",
    "detail": "Function (# define UE_TRACE_MESSAGE_FMT_MAX_SIZE 5 1 2 # define UE_TRACE_MESSAGE_ERR_MAX_SIZE 2 5 6 # define)",
    "insertText": "UE_TRACE_MESSAGE(Type, Msg) \\ Message_Send(EMessageType::Type, #Type, Msg)"
  },
  {
    "label": "UE_TRACE_MESSAGE_F()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_TRACE_MESSAGE_F(Type, Fmt, ...)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (\\ char Buff [ UE_TRACE_MESSAGE_FMT_MAX_SIZE ] ; \\)",
    "insertText": "snprintf(Buff, UE_TRACE_MESSAGE_FMT_MAX_SIZE, Fmt, __VA_ARGS__)"
  },
  {
    "label": "Message_Send()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Message_Send(EMessageType::Type, #Type, Buff)"
  },
  {
    "label": "UE_TRACE_ERRORMESSAGE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UE_TRACE_ERRORMESSAGE(Type, ErrorCode)"
  },
  {
    "label": "GetErrorMessage()",
    "kind": "Method",
    "detail": "Function (\\ char ErrorMessageBuffer [ UE_TRACE_MESSAGE_ERR_MAX_SIZE ] = { ' \\ 0 ' } ; \\)",
    "insertText": "GetErrorMessage(ErrorMessageBuffer, UE_TRACE_MESSAGE_ERR_MAX_SIZE, ErrorCode)"
  },
  {
    "label": "UE_TRACE_MESSAGE_F()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_TRACE_MESSAGE_F(Type, \"(error code %d): '%s'\", ErrorCode, ErrorMessageBuffer)\\ } #define UE_TRACE_ERRORMESSAGE_F(Type, ErrorCode, ContextFmt, ...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ char ErrorMessageBuffer [ UE_TRACE_MESSAGE_ERR_MAX_SIZE ] ; \\)",
    "insertText": "if(GetErrorMessage(ErrorMessageBuffer, UE_TRACE_MESSAGE_ERR_MAX_SIZE, ErrorCode))"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (\\ char FinalBuff [ UE_TRACE_MESSAGE_FMT_MAX_SIZE ] ; \\)",
    "insertText": "snprintf(FinalBuff, UE_TRACE_MESSAGE_FMT_MAX_SIZE, ContextFmt \": '%s'\", __VA_ARGS__, ErrorMessageBuffer)"
  },
  {
    "label": "Message_Send()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Message_Send(EMessageType::Type, #Type, FinalBuff)"
  },
  {
    "label": "UE_TRACE_MESSAGE_F()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else \\ { \\)",
    "insertText": "UE_TRACE_MESSAGE_F(Type, \"(error code %d)\", ErrorCode)\\ }\\ } void Message_SetCallback(UE::Trace::OnMessageFunc Callback)"
  },
  {
    "label": "Message_Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Message_Send(EMessageType Type, const char* TypeStr, const char* Description = nullptr)"
  }
]