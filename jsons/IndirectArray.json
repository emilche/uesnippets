[
  {
    "label": "TIndirectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIndirectArray"
  },
  {
    "label": "TIndirectArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" template<T,Allocator = FDefaultAllocator> class TIndirectArray { public : typedef T ElementType ; typedef TArray<void*,Allocator> InternalArrayType ;)",
    "insertText": "TIndirectArray()"
  },
  {
    "label": "TIndirectArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIndirectArray(TIndirectArray&&)"
  },
  {
    "label": "TIndirectArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIndirectArray(const TIndirectArray& Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(new T(Item))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } TIndirectArray&)",
    "insertText": "operator(const TIndirectArray& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(Other.Num())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } TIndirectArray&)",
    "insertText": "operator(TIndirectArray && Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Array =)",
    "insertText": "MoveTemp(Other.Array)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} T**)",
    "insertText": "GetData()"
  },
  {
    "label": "GetTypeSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "Last(int32 IndexFromTheEnd = 0)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(int32 NewSize = 0)"
  },
  {
    "label": "DestructAndFreeItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructAndFreeItems()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Reset(NewSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (int32 NewNum = 0 ; Ar<<NewNum ;)",
    "insertText": "Empty(NewNum)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(new T)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Index = 0; Index < NewNum; Index++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Num ;)",
    "insertText": "for(int32 Index = 0; Index < Num; Index++)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAt(int32 Index, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (delete* Element ; Array .)",
    "insertText": "RemoveAt(Index, AllowShrinking)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAt(int32 Index, int32 Count, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (delete* Element ; + + Element ; } Array .)",
    "insertText": "RemoveAt(Index, Count, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"RemoveAt\") FORCEINLINE void RemoveAt(int32 Index, int32 Count, bool bAllowShrinking)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(Index, Count, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwap(int32 Index, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (delete* Element ; Array .)",
    "insertText": "RemoveAtSwap(Index, AllowShrinking)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwap(int32 Index, int32 Count, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (delete* Element ; + + Element ; } Array .)",
    "insertText": "RemoveAtSwap(Index, Count, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"RemoveAtSwap\") FORCEINLINE void RemoveAtSwap(int32 Index, int32 Count, bool bAllowShrinking)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAtSwap(Index, Count, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(int32 FirstIndexToSwap, int32 SecondIndexToSwap)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Swap(FirstIndexToSwap, SecondIndexToSwap)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 Slack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(T* Item)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(T* Item, int32 Index)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Insert(Item, Index)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (} typedef TIndexedContainerIterator<TIndirectArray,ElementType,int32> TIterator ; typedef TIndexedContainerIterator<const TIndirectArray,const ElementType,int32> TConstIterator ; TIterator)",
    "insertText": "CreateIterator()"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (} TConstIterator)",
    "insertText": "CreateConstIterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (delete* Element ; + + Element ; } } public : TDereferencingIterator<ElementType,InternalArrayType::RangedForIteratorType>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TDereferencingIterator<ElementType,InternalArrayType::RangedForIteratorType>)",
    "insertText": "end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : InternalArrayType Array ; } ; template<T,Allocator> FArchive&)",
    "insertText": "operator(FArchive& Ar, TIndirectArray<T, Allocator>& A)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (T* NewElement = new T ; Ar<<* NewElement ; A .)",
    "insertText": "Add(NewElement)"
  }
]