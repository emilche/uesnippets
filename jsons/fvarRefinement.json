[
  {
    "label": "FVarRefinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVarRefinement"
  },
  {
    "label": "FVarRefinement()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_VTR_FVAR_REFINEMENT_H # define OPENSUBDIV3_VTR_FVAR_REFINEMENT_H # include \" . . / version . h \" # include \" . . / sdc / types . h \" # include \" . . / sdc / crease . h \" # include \" . . / vtr / types . h \" # include \" . . / vtr / refinement . h \" # include \" . . / vtr / fvarLevel . h \" # include<vector> # include<cassert> # include<cstring> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Vtr { namespace internal { class FVarRefinement { public :)",
    "insertText": "FVarRefinement(Refinement const& refinement, FVarLevel& parent, FVarLevel& child)"
  },
  {
    "label": "FVarRefinement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVarRefinement()"
  },
  {
    "label": "getChildValueParentSource()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getChildValueParentSource(Index vIndex, int sibling)"
  },
  {
    "label": "getFractionalWeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "getFractionalWeight(Index pVert, LocalIndex pSibling, Index cVert, LocalIndex cSibling)"
  },
  {
    "label": "applyRefinement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyRefinement()"
  },
  {
    "label": "estimateAndAllocateChildValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "estimateAndAllocateChildValues()"
  },
  {
    "label": "populateChildValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateChildValues()"
  },
  {
    "label": "populateChildValuesFromFaceVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateChildValuesFromFaceVertices()"
  },
  {
    "label": "populateChildValuesFromEdgeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateChildValuesFromEdgeVertices()"
  },
  {
    "label": "populateChildValuesForEdgeVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "populateChildValuesForEdgeVertex(Index cVert, Index pEdge)"
  },
  {
    "label": "populateChildValuesFromVertexVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateChildValuesFromVertexVertices()"
  },
  {
    "label": "populateChildValuesForVertexVertex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "populateChildValuesForVertexVertex(Index cVert, Index pVert)"
  },
  {
    "label": "trimAndFinalizeChildValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "trimAndFinalizeChildValues()"
  },
  {
    "label": "propagateEdgeTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "propagateEdgeTags()"
  },
  {
    "label": "propagateValueTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "propagateValueTags()"
  },
  {
    "label": "propagateValueCreases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "propagateValueCreases()"
  },
  {
    "label": "reclassifySemisharpValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reclassifySemisharpValues()"
  }
]