[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "LoopAccessReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAccessReport"
  },
  {
    "label": "VectorizerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorizerParams"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "MemoryDepChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDepChecker"
  },
  {
    "label": "Dependence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dependence"
  },
  {
    "label": "DepType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DepType"
  },
  {
    "label": "RuntimePointerChecking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuntimePointerChecking"
  },
  {
    "label": "PointerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointerInfo"
  },
  {
    "label": "CheckingPtrGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckingPtrGroup"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "LoopAccessInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAccessInfo"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "LoopAccessAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAccessAnalysis"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (raw_string_ostream)",
    "insertText": "Out(Message)"
  },
  {
    "label": "emitAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAnalysis(const LoopAccessReport &Message,\n                           const Function *TheFunction,\n                           const Loop *TheLoop,\n                           const char *PassName)"
  },
  {
    "label": "isInterleaveForced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInterleaveForced()"
  },
  {
    "label": "isSafeForVectorization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSafeForVectorization(DepType Type)"
  },
  {
    "label": "isInterestingDependence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInterestingDependence(DepType Type)"
  },
  {
    "label": "areDepsSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "areDepsSafe(DepCandidates &AccessSets, MemAccessInfoSet &CheckDeps,\n                   const ValueToValueMap &Strides)"
  },
  {
    "label": "isDependent()",
    "kind": "Method",
    "detail": "Function (Dependence::DepType)",
    "insertText": "isDependent(const MemAccessInfo &A, unsigned AIdx,\n                                  const MemAccessInfo &B, unsigned BIdx,\n                                  const ValueToValueMap &Strides)"
  },
  {
    "label": "couldPreventStoreLoadForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "couldPreventStoreLoadForward(unsigned Distance, unsigned TypeByteSize)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(Loop *Lp, Value *Ptr, bool WritePtr, unsigned DepSetId,\n              unsigned ASId, const ValueToValueMap &Strides)"
  },
  {
    "label": "addPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addPointer(unsigned Index)"
  },
  {
    "label": "groupChecks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "groupChecks(MemoryDepChecker::DepCandidates &DepCands,\n                   bool UseDependencies)"
  },
  {
    "label": "LoopAccessInfo()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LoopAccessInfo(Loop *L, ScalarEvolution *SE, const DataLayout &DL,\n                 const TargetLibraryInfo *TLI, AliasAnalysis *AA,\n                 DominatorTree *DT, LoopInfo *LI,\n                 const ValueToValueMap &Strides)"
  },
  {
    "label": "blockNeedsPredication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "blockNeedsPredication(BasicBlock *BB, Loop *TheLoop,\n                                    DominatorTree *DT)"
  },
  {
    "label": "analyzeLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzeLoop(const ValueToValueMap &Strides)"
  },
  {
    "label": "canAnalyzeLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canAnalyzeLoop()"
  },
  {
    "label": "emitAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAnalysis(LoopAccessReport &Message)"
  },
  {
    "label": "isStridedPtr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "isStridedPtr(ScalarEvolution *SE, Value *Ptr, const Loop *Lp,\n                 const ValueToValueMap &StridesMap)"
  }
]