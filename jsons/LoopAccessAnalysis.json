[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "LoopAccessReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAccessReport"
  },
  {
    "label": "VectorizerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorizerParams"
  },
  {
    "label": "MemoryDepChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDepChecker"
  },
  {
    "label": "Dependence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dependence"
  },
  {
    "label": "DepType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DepType"
  },
  {
    "label": "RuntimePointerChecking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuntimePointerChecking"
  },
  {
    "label": "PointerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointerInfo"
  },
  {
    "label": "CheckingPtrGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckingPtrGroup"
  },
  {
    "label": "LoopAccessInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAccessInfo"
  },
  {
    "label": "LoopAccessAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAccessAnalysis"
  },
  {
    "label": "LoopAccessReport()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_LOOPACCESSANALYSIS_H # define LLVM_ANALYSIS_LOOPACCESSANALYSIS_H # include \" llvm / ADT / EquivalenceClasses . h \" # include \" llvm / ADT / Optional . h \" # include \" llvm / ADT / SetVector . h \" # include \" llvm / Analysis / AliasAnalysis . h \" # include \" llvm / Analysis / AliasSetTracker . h \" # include \" llvm / Analysis / ScalarEvolutionExpressions . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / raw_ostream . h \" namespace llvm { class Value ; class DataLayout ; class AliasAnalysis ; class ScalarEvolution ; class Loop ; class SCEV ; class LoopAccessReport { std::string Message ; const Instruction* Instr ; protected :)",
    "insertText": "LoopAccessReport(const Twine &Message, const Instruction *I) : Message(Message.str()), Instr(I)"
  },
  {
    "label": "LoopAccessReport()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "LoopAccessReport(const Instruction *I = nullptr) : Instr(I)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<A> LoopAccessReport&)",
    "insertText": "operator(const A &Value)"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (raw_string_ostream)",
    "insertText": "Out(Message)"
  },
  {
    "label": "getInstr()",
    "kind": "Method",
    "detail": "Function (Out<<Value ; return* this ; } const Instruction*)",
    "insertText": "getInstr()"
  },
  {
    "label": "isInterleaveForced()",
    "kind": "Method",
    "detail": "Function (} ; struct VectorizerParams { const unsigned MaxVectorWidth ; unsigned VectorizationFactor ; unsigned VectorizationInterleave ; bool)",
    "insertText": "isInterleaveForced()"
  },
  {
    "label": "Dependence()",
    "kind": "Method",
    "detail": "Function (unsigned RuntimeMemoryCheckThreshold ; } ; class MemoryDepChecker { public : typedef PointerIntPair<Value*,1,bool> MemAccessInfo ; typedef SmallPtrSet<MemAccessInfo,8> MemAccessInfoSet ; typedef EquivalenceClasses<MemAccessInfo> DepCandidates ; struct Dependence { enum DepType { NoDep,Unknown,Forward,ForwardButPreventsForwarding,Backward,BackwardVectorizable,BackwardVectorizableButPreventsForwarding } ; const char* DepName [ ] ; unsigned Source ; unsigned Destination ; DepType Type ;)",
    "insertText": "Dependence(unsigned Source, unsigned Destination, DepType Type) : Source(Source), Destination(Destination), Type(Type)"
  },
  {
    "label": "isSafeForVectorization()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSafeForVectorization(DepType Type)"
  },
  {
    "label": "isInterestingDependence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInterestingDependence(DepType Type)"
  },
  {
    "label": "isPossiblyBackward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPossiblyBackward()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, unsigned Depth, const SmallVectorImpl<Instruction *> &Instrs)"
  },
  {
    "label": "MemoryDepChecker()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "MemoryDepChecker(ScalarEvolution *Se, const Loop *L) : SE(Se), InnermostLoop(L), AccessIdx(0), ShouldRetryWithRuntimeCheck(false), SafeForVectorization(true), RecordInterestingDependences(true)"
  },
  {
    "label": "addAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addAccess(StoreInst *SI)"
  },
  {
    "label": "getPointerOperand()",
    "kind": "Method",
    "detail": "Function (Value* Ptr = SI ->)",
    "insertText": "getPointerOperand()"
  },
  {
    "label": "MemAccessInfo()",
    "kind": "Method",
    "detail": "Function (Accesses [)",
    "insertText": "MemAccessInfo(Ptr, true)].push_back(AccessIdx)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (InstMap .)",
    "insertText": "push_back(SI)"
  },
  {
    "label": "addAccess()",
    "kind": "Method",
    "detail": "Function (+ + AccessIdx ; } void)",
    "insertText": "addAccess(LoadInst *LI)"
  },
  {
    "label": "MemAccessInfo()",
    "kind": "Method",
    "detail": "Function (Accesses [)",
    "insertText": "MemAccessInfo(Ptr, false)].push_back(AccessIdx)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (InstMap .)",
    "insertText": "push_back(LI)"
  },
  {
    "label": "areDepsSafe()",
    "kind": "Method",
    "detail": "Function (+ + AccessIdx ; } bool)",
    "insertText": "areDepsSafe(DepCandidates &AccessSets, MemAccessInfoSet &CheckDeps, const ValueToValueMap &Strides)"
  },
  {
    "label": "isSafeForVectorization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSafeForVectorization()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (InterestingDependences .)",
    "insertText": "clear()"
  },
  {
    "label": "getMemoryInstructions()",
    "kind": "Method",
    "detail": "Function (} const SmallVectorImpl<Instruction*>&)",
    "insertText": "getMemoryInstructions()"
  },
  {
    "label": "isDependent()",
    "kind": "Method",
    "detail": "Function (private : ScalarEvolution* SE ; const Loop* InnermostLoop ; DenseMap<MemAccessInfo,std::vector<unsigned>> Accesses ; SmallVector<Instruction*,1 6> InstMap ; unsigned AccessIdx ; unsigned MaxSafeDepDistBytes ; bool ShouldRetryWithRuntimeCheck ; bool SafeForVectorization ; bool RecordInterestingDependences ; SmallVector<Dependence,8> InterestingDependences ; Dependence::DepType)",
    "insertText": "isDependent(const MemAccessInfo &A, unsigned AIdx, const MemAccessInfo &B, unsigned BIdx, const ValueToValueMap &Strides)"
  },
  {
    "label": "couldPreventStoreLoadForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "couldPreventStoreLoadForward(unsigned Distance, unsigned TypeByteSize)"
  },
  {
    "label": "PointerInfo()",
    "kind": "Method",
    "detail": "Function (} ; class RuntimePointerChecking { public : struct PointerInfo { TrackingVH<Value> PointerValue ; const SCEV* Start ; const SCEV* End ; bool IsWritePtr ; unsigned DependencySetId ; unsigned AliasSetId ; const SCEV* Expr ;)",
    "insertText": "PointerInfo(Value *PointerValue, const SCEV *Start, const SCEV *End, bool IsWritePtr, unsigned DependencySetId, unsigned AliasSetId, const SCEV *Expr) : PointerValue(PointerValue), Start(Start), End(End), IsWritePtr(IsWritePtr), DependencySetId(DependencySetId), AliasSetId(AliasSetId), Expr(Expr)"
  },
  {
    "label": "RuntimePointerChecking()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "RuntimePointerChecking(ScalarEvolution *SE) : Need(false), SE(SE)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(Loop *Lp, Value *Ptr, bool WritePtr, unsigned DepSetId, unsigned ASId, const ValueToValueMap &Strides)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "CheckingPtrGroup()",
    "kind": "Method",
    "detail": "Function (} struct CheckingPtrGroup {)",
    "insertText": "CheckingPtrGroup(unsigned Index, RuntimePointerChecking &RtCheck) : RtCheck(RtCheck), High(RtCheck.Pointers[Index].End), Low(RtCheck.Pointers[Index].Start)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Members .)",
    "insertText": "push_back(Index)"
  },
  {
    "label": "addPointer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "addPointer(unsigned Index)"
  },
  {
    "label": "groupChecks()",
    "kind": "Method",
    "detail": "Function (RuntimePointerChecking& RtCheck ; const SCEV* High ; const SCEV* Low ; SmallVector<unsigned,2> Members ; } ; void)",
    "insertText": "groupChecks(MemoryDepChecker::DepCandidates &DepCands, bool UseDependencies)"
  },
  {
    "label": "needsChecking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "needsChecking(const CheckingPtrGroup &M, const CheckingPtrGroup &N, const SmallVectorImpl<int> *PtrPartition)"
  },
  {
    "label": "needsAnyChecking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "needsAnyChecking(const SmallVectorImpl<int> *PtrPartition)"
  },
  {
    "label": "getNumberOfChecks()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumberOfChecks(const SmallVectorImpl<int> *PtrPartition)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, unsigned Depth = 0, const SmallVectorImpl<int> *PtrPartition = nullptr)"
  },
  {
    "label": "needsChecking()",
    "kind": "Method",
    "detail": "Function (bool Need ; SmallVector<PointerInfo,2> Pointers ; SmallVector<CheckingPtrGroup,2> CheckingGroups ; private : bool)",
    "insertText": "needsChecking(unsigned I, unsigned J, const SmallVectorImpl<int> *PtrPartition)"
  },
  {
    "label": "LoopAccessInfo()",
    "kind": "Method",
    "detail": "Function (ScalarEvolution* SE ; } ; class LoopAccessInfo { public :)",
    "insertText": "LoopAccessInfo(Loop *L, ScalarEvolution *SE, const DataLayout &DL, const TargetLibraryInfo *TLI, AliasAnalysis *AA, DominatorTree *DT, LoopInfo *LI, const ValueToValueMap &Strides)"
  },
  {
    "label": "canVectorizeMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canVectorizeMemory()"
  },
  {
    "label": "blockNeedsPredication()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "blockNeedsPredication(BasicBlock *BB, Loop *TheLoop, DominatorTree *DT)"
  },
  {
    "label": "isUniform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUniform(Value *V)"
  },
  {
    "label": "getMaxSafeDepDistBytes()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getMaxSafeDepDistBytes()"
  },
  {
    "label": "getReport()",
    "kind": "Method",
    "detail": "Function (const Optional<LoopAccessReport>&)",
    "insertText": "getReport()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS, unsigned Depth = 0)"
  },
  {
    "label": "hasStoreToLoopInvariantAddress()",
    "kind": "Method",
    "detail": "Function (unsigned NumSymbolicStrides ; bool)",
    "insertText": "hasStoreToLoopInvariantAddress()"
  },
  {
    "label": "canAnalyzeLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canAnalyzeLoop()"
  },
  {
    "label": "emitAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAnalysis(LoopAccessReport &Message)"
  },
  {
    "label": "stripIntegerCast()",
    "kind": "Method",
    "detail": "Function (RuntimePointerChecking PtrRtChecking ; MemoryDepChecker DepChecker ; Loop* TheLoop ; ScalarEvolution* SE ; const DataLayout& DL ; const TargetLibraryInfo* TLI ; AliasAnalysis* AA ; DominatorTree* DT ; LoopInfo* LI ; unsigned NumLoads ; unsigned NumStores ; unsigned MaxSafeDepDistBytes ; bool CanVecMem ; bool StoreToLoopInvariantAddress ; Optional<LoopAccessReport> Report ; } ; Value*)",
    "insertText": "stripIntegerCast(Value *V)"
  },
  {
    "label": "replaceSymbolicStrideSCEV()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "replaceSymbolicStrideSCEV(ScalarEvolution *SE, const ValueToValueMap &PtrToStride, Value *Ptr, Value *OrigPtr = nullptr)"
  },
  {
    "label": "isStridedPtr()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "isStridedPtr(ScalarEvolution *SE, Value *Ptr, const Loop *Lp, const ValueToValueMap &StridesMap)"
  },
  {
    "label": "LoopAccessAnalysis()",
    "kind": "Method",
    "detail": "Function (class LoopAccessAnalysis : public FunctionPass { public : char ID ;)",
    "insertText": "LoopAccessAnalysis() : FunctionPass(ID)"
  },
  {
    "label": "initializeLoopAccessAnalysisPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeLoopAccessAnalysisPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "getInfo()",
    "kind": "Method",
    "detail": "Function (const LoopAccessInfo&)",
    "insertText": "getInfo(Loop *L, const ValueToValueMap &Strides)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS, const Module *M = nullptr)"
  }
]