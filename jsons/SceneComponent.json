[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "APhysicsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APhysicsVolume"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FScopedMovementUpdate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedMovementUpdate"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FLevelCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelCollection"
  },
  {
    "label": "FOverlapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapInfo"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EDetailMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDetailMode"
  },
  {
    "label": "ERelativeTransformSpace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERelativeTransformSpace"
  },
  {
    "label": "EMoveComponentFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMoveComponentFlags"
  },
  {
    "label": "UBillboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBillboardComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedPreventAttachedComponentMove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedPreventAttachedComponentMove"
  },
  {
    "label": "FDirectAttachChildrenAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectAttachChildrenAccessor"
  },
  {
    "label": "UChildActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildActorComponent"
  },
  {
    "label": "FBlueprintThumbnailScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintThumbnailScene"
  },
  {
    "label": "FClassThumbnailScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassThumbnailScene"
  },
  {
    "label": "FComponentEditorUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentEditorUtils"
  },
  {
    "label": "FBlueprintCompileReinstancer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintCompileReinstancer"
  },
  {
    "label": "FResetSceneComponentAfterCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResetSceneComponentAfterCopy"
  },
  {
    "label": "FSceneComponentInstanceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneComponentInstanceData"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" Math / BoxSphereBounds . h \" # include \" UObject / UObjectGlobals . h \" # include \" ComponentInstanceDataCache . h \" # include \" Components / ActorComponent . h \" # include \" SceneComponent . generated . h \" class AActor ; class APhysicsVolume ; class USceneComponent ; class FScopedMovementUpdate ; struct FHitResult ; struct FLevelCollection ; struct FOverlapInfo ; typedef TArrayView<const FOverlapInfo> TOverlapArrayView ; namespace ERHIFeatureLevel { enum Type : int ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (DM_Low)",
    "insertText": "UMETA(DisplayName=\"Low\"), DM_Medium UMETA(DisplayName=\"Medium\"), DM_High UMETA(DisplayName=\"High\"), DM_Epic UMETA(DisplayName=\"Epic\")"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (RTS_World,RTS_Actor,RTS_Component,RTS_ParentBoneSpace,} ; enum EMoveComponentFlags { MOVECOMP_NoFlags = 0 x0000,MOVECOMP_IgnoreBases = 0 x0001,MOVECOMP_SkipPhysicsMove = 0 x0002,MOVECOMP_NeverIgnoreBlockingOverlaps = 0 x0004,MOVECOMP_DisableBlockingOverlapDispatch = 0 x0008,MOVECOMP_CheckBlockingRootActorInIgnoreList = 0 x0016,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMoveComponentFlags)"
  },
  {
    "label": "SCENECOMPONENT_QUAT_TOLERANCE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SCENECOMPONENT_QUAT_TOLERANCE(1.e-8f) #define SCENECOMPONENT_ROTATOR_TOLERANCE (1.e-4f) DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_OneParam(FPhysicsVolumeChanged, USceneComponent, PhysicsVolumeChangedDelegate, class APhysicsVolume*, NewVolume)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FIsRootComponentChanged, USceneComponent, IsRootComponentChanged, USceneComponent*, UpdatedComponent, bool, bIsRootComponent)"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(USceneComponent, FTransformUpdated, USceneComponent* , EUpdateTransformFlags , ETeleportType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(ClassGroup=(Utility, Common), BlueprintType, hideCategories=(Trigger, PhysicsVolume), meta=(BlueprintSpawnableComponent, IgnoreCategoryKeywordsInSubclasses, ShortTooltip=\"A Scene Component is a component that has a scene transform and can be attached to other scene components.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static ENGINE_API FName GetDefaultSceneRootVariableName()"
  },
  {
    "label": "USceneComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USceneComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "SetShouldBeAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldBeAttached(bool bNewShouldBeAttached)"
  },
  {
    "label": "SetShouldSnapLocationWhenAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldSnapLocationWhenAttached(bool bShouldSnapLocation)"
  },
  {
    "label": "SetShouldSnapRotationWhenAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldSnapRotationWhenAttached(bool bShouldSnapRotation)"
  },
  {
    "label": "SetShouldSnapScaleWhenAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldSnapScaleWhenAttached(bool bShouldSnapScale)"
  },
  {
    "label": "GetLocalBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetLocalBounds()"
  },
  {
    "label": "ClearSkipUpdateOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSkipUpdateOverlaps()"
  },
  {
    "label": "ShouldSkipUpdateOverlaps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipUpdateOverlaps()"
  },
  {
    "label": "CreateSpriteComponent()",
    "kind": "Method",
    "detail": "Function (FIsRootComponentChanged IsRootComponentChanged ; # if WITH_EDITORONLY_DATA protected : TObjectPtr<class UBillboardComponent> SpriteComponent ; void)",
    "insertText": "CreateSpriteComponent(class UTexture2D* SpriteTexture = nullptr)"
  },
  {
    "label": "CreateSpriteComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSpriteComponent(class UTexture2D* SpriteTexture, bool bRegister)"
  },
  {
    "label": "GetCurrentScopedMovement()",
    "kind": "Method",
    "detail": "Function (# endif public : FTransformUpdated TransformUpdated ; FScopedMovementUpdate*)",
    "insertText": "GetCurrentScopedMovement()"
  },
  {
    "label": "BeginScopedMovementUpdate()",
    "kind": "Method",
    "detail": "Function (private : TArray<FScopedMovementUpdate*> ScopedMovementStack ; void)",
    "insertText": "BeginScopedMovementUpdate(FScopedMovementUpdate& ScopedUpdate)"
  },
  {
    "label": "EndScopedMovementUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndScopedMovementUpdate(FScopedMovementUpdate& ScopedUpdate)"
  },
  {
    "label": "SetRelativeRotationCache()",
    "kind": "Method",
    "detail": "Function (FRotationConversionCache WorldRotationCache ; FRotationConversionCache RelativeRotationCache ; FTransform ComponentToWorld ; public : void)",
    "insertText": "SetRelativeRotationCache(const FRotationConversionCache& InCache)"
  },
  {
    "label": "GetRelativeRotationFromWorld()",
    "kind": "Method",
    "detail": "Function (public : FQuat)",
    "insertText": "GetRelativeRotationFromWorld(const FQuat & WorldRotation)"
  },
  {
    "label": "SetRelativeRotationExact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeRotationExact(FRotator NewRotation, bool bSweep = false, FHitResult* OutSweepHitResult = nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetRelativeLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocation(FVector NewLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeRotation(FRotator NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeRotation(const FQuat& NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeTransform(const FTransform& NewTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddRelativeLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelativeLocation(FVector DeltaLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelativeRotation(FRotator DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRelativeRotation(const FQuat& DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddLocalOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalOffset(FVector DeltaLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddLocalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalRotation(FRotator DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddLocalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalRotation(const FQuat& DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddLocalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalTransform(const FTransform& DeltaTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldLocation(FVector NewLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldRotation(FRotator NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldRotation(const FQuat& NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldTransform(const FTransform& NewTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorldOffset(FVector DeltaLocation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorldRotation(FRotator DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddWorldRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorldRotation(const FQuat& DeltaRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddWorldTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorldTransform(const FTransform& DeltaTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "AddWorldTransformKeepScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWorldTransformKeepScale(const FTransform& DeltaTransform, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "GetAttachChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<TObjectPtr<USceneComponent>>&)",
    "insertText": "GetAttachChildren()"
  },
  {
    "label": "SetupAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupAttachment(USceneComponent* InParent, FName InSocketName = NAME_None)"
  },
  {
    "label": "ConvertAttachLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertAttachLocation(EAttachLocation::Type InAttachLocation, EAttachmentRule& InOutLocationRule, EAttachmentRule& InOutRotationRule, EAttachmentRule& InOutScaleRule)"
  },
  {
    "label": "AttachToComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachToComponent(USceneComponent* InParent, const FAttachmentTransformRules& AttachmentRules, FName InSocketName = NAME_None)"
  },
  {
    "label": "DetachFromComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromComponent(const FDetachmentTransformRules& DetachmentRules)"
  },
  {
    "label": "HasAnySockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnySockets()"
  },
  {
    "label": "QuerySupportedSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuerySupportedSockets(TArray<FComponentSocketDescription>& OutSockets)"
  },
  {
    "label": "GetMaterialPropertyPath()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetMaterialPropertyPath(int32 ElementIndex, UObject*& OutOwner, FString& OutPropertyPath, FProperty*& OutProperty)"
  },
  {
    "label": "OnVisibilityChanged()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "OnVisibilityChanged()"
  },
  {
    "label": "OnHiddenInGameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHiddenInGameChanged()"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (private : enum class EVisibilityPropagation : uint8 { NoPropagation,DirtyOnly,Propagate } ; void)",
    "insertText": "SetVisibility(bool bNewVisibility, EVisibilityPropagation PropagateToChildren)"
  },
  {
    "label": "SetHiddenInGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHiddenInGame(bool bNewHiddenInGame, EVisibilityPropagation PropagateToChildren)"
  },
  {
    "label": "AppendDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendDescendants(TArray<USceneComponent*>& Children)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(bNewVisibility, bPropagateToChildren ? EVisibilityPropagation::Propagate : EVisibilityPropagation::DirtyOnly)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(!GetVisibleFlag(), bPropagateToChildren)"
  },
  {
    "label": "SetHiddenInGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHiddenInGame(NewHidden, bPropagateToChildren ? EVisibilityPropagation::Propagate : EVisibilityPropagation::DirtyOnly)"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(EEndPlayReason::Type Reason)"
  },
  {
    "label": "ShouldCreateRenderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateRenderState()"
  },
  {
    "label": "UpdateComponentToWorldWithParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentToWorldWithParent(GetAttachParent(), GetAttachSocketName(), UpdateTransformFlags, RelativeRotationCache.RotatorToQuat(GetRelativeRotation()), Teleport)"
  },
  {
    "label": "DestroyComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyComponent(bool bPromoteChildren = false)"
  },
  {
    "label": "OnComponentDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentDestroyed(bool bDestroyingHierarchy)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "GetComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (TStructOnScope<FActorComponentInstanceData>)",
    "insertText": "GetComponentInstanceData()"
  },
  {
    "label": "GetStreamingBounds()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FBox)",
    "insertText": "GetStreamingBounds()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PreNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreNetReceive()"
  },
  {
    "label": "PostNetReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostNetReceive()"
  },
  {
    "label": "PostRepNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRepNotifies()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR EDataValidationResult)",
    "insertText": "IsDataValid(FDataValidationContext& Context)"
  },
  {
    "label": "NeedsLoadForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForTargetPlatform(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* Property)"
  },
  {
    "label": "InternalSetWorldLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "InternalSetWorldLocationAndRotation(FVector NewLocation, const FQuat& NewQuat, bool bNoPhysics = false, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "OnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateTransform(EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "CheckStaticMobilityAndWarn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckStaticMobilityAndWarn(const FText& ActionText)"
  },
  {
    "label": "UpdateOverlapsImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateOverlapsImpl(const TOverlapArrayView* PendingOverlaps = nullptr, bool bDoNotifies = true, const TOverlapArrayView* OverlapsAtEndLocation = nullptr)"
  },
  {
    "label": "PropagateTransformUpdate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PropagateTransformUpdate(bool bTransformChanged, EUpdateTransformFlags UpdateTransformFlags = EUpdateTransformFlags::None, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "UpdateComponentToWorldWithParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentToWorldWithParent(USceneComponent* Parent, FName SocketName, EUpdateTransformFlags UpdateTransformFlags, const FQuat& RelativeRotationQuat, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "UpdateOverlaps()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "UpdateOverlaps(const TOverlapArrayView* PendingOverlaps = nullptr, bool bDoNotifies = true, const TOverlapArrayView* OverlapsAtEndLocation = nullptr)"
  },
  {
    "label": "MoveComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* Hit=NULL, EMoveComponentFlags MoveFlags = MOVECOMP_NoFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "MoveComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveComponent(const FVector& Delta, const FRotator& NewRotation, bool bSweep, FHitResult* Hit=NULL, EMoveComponentFlags MoveFlags = MOVECOMP_NoFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "MoveComponentImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "MoveComponentImpl(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* Hit = NULL, EMoveComponentFlags MoveFlags = MOVECOMP_NoFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "IsDeferringMovementUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeferringMovementUpdates(const FScopedMovementUpdate& ScopedUpdate)"
  },
  {
    "label": "ConditionalUpdateComponentToWorld()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ConditionalUpdateComponentToWorld()"
  },
  {
    "label": "IsDeferringMovementUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeferringMovementUpdates()"
  },
  {
    "label": "OnAttachmentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttachmentChanged()"
  },
  {
    "label": "GetComponentLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetComponentLocation()"
  },
  {
    "label": "GetComponentRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetComponentRotation()"
  },
  {
    "label": "GetComponentQuat()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "GetComponentQuat()"
  },
  {
    "label": "GetComponentScale()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetComponentScale()"
  },
  {
    "label": "SetComponentToWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetComponentToWorld(const FTransform& NewComponentToWorld)"
  },
  {
    "label": "GetComponentToWorld()",
    "kind": "Method",
    "detail": "Function (bComponentToWorldUpdated = true ; ComponentToWorld = NewComponentToWorld ; } const FTransform&)",
    "insertText": "GetComponentToWorld()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "CalcLocalBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcLocalBounds()"
  },
  {
    "label": "CalcBoundingCylinder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalcBoundingCylinder(float& CylinderRadius, float& CylinderHalfHeight)"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "ShouldCollideWhenPlacing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCollideWhenPlacing()"
  },
  {
    "label": "SetPhysicsVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsVolume(APhysicsVolume * NewVolume, bool bTriggerNotifiers)"
  },
  {
    "label": "GetCollisionResponseToChannels()",
    "kind": "Method",
    "detail": "Function (const FCollisionResponseContainer&)",
    "insertText": "GetCollisionResponseToChannels()"
  },
  {
    "label": "IsVisibleInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibleInEditor()"
  },
  {
    "label": "ShouldRender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRender()"
  },
  {
    "label": "CanEverRender()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEverRender()"
  },
  {
    "label": "ShouldComponentAddToScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldComponentAddToScene()"
  },
  {
    "label": "PostEditComponentMove()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditComponentMove(bool bFinished)"
  },
  {
    "label": "GetNumUncachedStaticLightingInteractions()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetNumUncachedStaticLightingInteractions()"
  },
  {
    "label": "PreFeatureLevelChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreFeatureLevelChange(ERHIFeatureLevel::Type PendingFeatureLevel)"
  },
  {
    "label": "CalcNewComponentToWorld()",
    "kind": "Method",
    "detail": "Function (} # endif protected : FTransform)",
    "insertText": "CalcNewComponentToWorld(const FTransform& NewRelativeTransform, const USceneComponent* Parent = nullptr, FName SocketName = NAME_None)"
  },
  {
    "label": "GetAttachSocketName()",
    "kind": "Method",
    "detail": "Function (SocketName = Parent ? SocketName :)",
    "insertText": "GetAttachSocketName()"
  },
  {
    "label": "GetAttachParent()",
    "kind": "Method",
    "detail": "Function (Parent = Parent ? Parent :)",
    "insertText": "GetAttachParent()"
  },
  {
    "label": "IsUsingAbsoluteLocation()",
    "kind": "Method",
    "detail": "Function (const bool bGeneral =)",
    "insertText": "IsUsingAbsoluteLocation() || IsUsingAbsoluteRotation() || IsUsingAbsoluteScale()"
  },
  {
    "label": "CalcNewComponentToWorld_GeneralCase()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CalcNewComponentToWorld_GeneralCase(NewRelativeTransform, Parent, SocketName)"
  },
  {
    "label": "CalcNewComponentToWorld_GeneralCase()",
    "kind": "Method",
    "detail": "Function (} else { return NewRelativeTransform ; } } FTransform)",
    "insertText": "CalcNewComponentToWorld_GeneralCase(const FTransform& NewRelativeTransform, const USceneComponent* Parent, FName SocketName)"
  },
  {
    "label": "SetRelativeLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetRelativeLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocationAndRotation(FVector NewLocation, const FQuat& NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldLocationAndRotation(FVector NewLocation, const FQuat& NewRotation, bool bSweep=false, FHitResult* OutSweepHitResult=nullptr, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "SetWorldLocationAndRotationNoPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldLocationAndRotationNoPhysics(const FVector& NewLocation, const FRotator& NewRotation)"
  },
  {
    "label": "IsWorldGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldGeometry()"
  },
  {
    "label": "GetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (ECollisionEnabled::Type)",
    "insertText": "GetCollisionEnabled()"
  },
  {
    "label": "IsQueryCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsQueryCollisionEnabled()"
  },
  {
    "label": "IsPhysicsCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPhysicsCollisionEnabled()"
  },
  {
    "label": "GetCollisionResponseToChannel()",
    "kind": "Method",
    "detail": "Function (} ECollisionResponse)",
    "insertText": "GetCollisionResponseToChannel(ECollisionChannel Channel)"
  },
  {
    "label": "GetCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (ECollisionChannel)",
    "insertText": "GetCollisionObjectType()"
  },
  {
    "label": "GetCollisionResponseToComponent()",
    "kind": "Method",
    "detail": "Function (ECollisionResponse)",
    "insertText": "GetCollisionResponseToComponent(USceneComponent* OtherComponent)"
  },
  {
    "label": "GetAttachmentRoot()",
    "kind": "Method",
    "detail": "Function (USceneComponent*)",
    "insertText": "GetAttachmentRoot()"
  },
  {
    "label": "GetAttachmentRootActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetAttachmentRootActor()"
  },
  {
    "label": "GetActorPositionForRenderer()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetActorPositionForRenderer()"
  },
  {
    "label": "GetAttachParentActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetAttachParentActor()"
  },
  {
    "label": "IsAttachedTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttachedTo(const USceneComponent* TestComp)"
  },
  {
    "label": "GetSocketWorldLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSocketWorldLocationAndRotation(FName InSocketName, FVector& OutLocation, FRotator& OutRotation)"
  },
  {
    "label": "GetSocketWorldLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSocketWorldLocationAndRotation(FName InSocketName, FVector& OutLocation, FQuat& OutRotation)"
  },
  {
    "label": "CanAttachAsChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAttachAsChild(const USceneComponent* ChildComponent, FName SocketName)"
  },
  {
    "label": "NotifyIsRootComponentChanged()",
    "kind": "Method",
    "detail": "Function (private : class AActor ; void)",
    "insertText": "NotifyIsRootComponentChanged(bool bIsRootComponent)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (IsRootComponentChanged .)",
    "insertText": "Broadcast(this, bIsRootComponent)"
  },
  {
    "label": "OnChildAttached()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "OnChildAttached(USceneComponent* ChildComponent)"
  },
  {
    "label": "OnChildDetached()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChildDetached(USceneComponent* ChildComponent)"
  },
  {
    "label": "UpdateNavigationData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateNavigationData()"
  },
  {
    "label": "PostUpdateNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateNavigationData()"
  },
  {
    "label": "CanHaveStaticMobility()",
    "kind": "Method",
    "detail": "Function (} public : const bool)",
    "insertText": "CanHaveStaticMobility()"
  },
  {
    "label": "IsPrecomputedLightingValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPrecomputedLightingValid()"
  },
  {
    "label": "SetAttachSocketName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttachSocketName(FName NewSocketName)"
  },
  {
    "label": "ModifiedAttachChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifiedAttachChildren()"
  },
  {
    "label": "OnReceiveReplicatedState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnReceiveReplicatedState(const FVector X, const FQuat R, const FVector V, const FVector W)"
  },
  {
    "label": "GetRelativeLocationPropertyName()",
    "kind": "Method",
    "detail": "Function (} ; const FName)",
    "insertText": "GetRelativeLocationPropertyName()"
  },
  {
    "label": "GetRelativeLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetRelativeLocation()"
  },
  {
    "label": "SetRelativeLocation_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocation_Direct(const FVector NewRelativeLocation)"
  },
  {
    "label": "GetRelativeRotationPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetRelativeRotationPropertyName()"
  },
  {
    "label": "GetRelativeRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetRelativeRotation()"
  },
  {
    "label": "SetRelativeRotation_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeRotation_Direct(const FRotator NewRelativeRotation)"
  },
  {
    "label": "GetRelativeScale3DPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetRelativeScale3DPropertyName()"
  },
  {
    "label": "GetRelativeScale3D()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetRelativeScale3D()"
  },
  {
    "label": "SetRelativeScale3D_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeScale3D_Direct(const FVector NewRelativeScale3D)"
  },
  {
    "label": "SetRelativeTransform_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeTransform_Direct(const FTransform& NewRelativeTransform)"
  },
  {
    "label": "SetRelativeLocation_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocation_Direct(NewRelativeTransform.GetLocation())"
  },
  {
    "label": "SetRelativeRotation_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeRotation_Direct(NewRelativeTransform.Rotator())"
  },
  {
    "label": "SetRelativeScale3D_Direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeScale3D_Direct(NewRelativeTransform.GetScale3D())"
  },
  {
    "label": "GetAbsoluteLocationPropertyName()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetAbsoluteLocationPropertyName()"
  },
  {
    "label": "IsUsingAbsoluteLocation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingAbsoluteLocation()"
  },
  {
    "label": "GetAbsoluteRotationPropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetAbsoluteRotationPropertyName()"
  },
  {
    "label": "IsUsingAbsoluteRotation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingAbsoluteRotation()"
  },
  {
    "label": "GetAbsoluteScalePropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetAbsoluteScalePropertyName()"
  },
  {
    "label": "IsUsingAbsoluteScale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingAbsoluteScale()"
  },
  {
    "label": "GetVisiblePropertyName()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetVisiblePropertyName()"
  },
  {
    "label": "GetVisibleFlag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetVisibleFlag()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; struct FDirectAttachChildrenAccessor { private : TArray<TObjectPtr<USceneComponent>>&)",
    "insertText": "Get(USceneComponent* Component)"
  },
  {
    "label": "UpdateComponentToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentToWorld()"
  },
  {
    "label": "MoveComponent()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "MoveComponent(const FVector& Delta, const FQuat& NewRotation, bool bSweep, FHitResult* Hit, EMoveComponentFlags MoveFlags, ETeleportType Teleport)"
  },
  {
    "label": "SetRelativeLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult* OutSweepHitResult, ETeleportType Teleport)"
  },
  {
    "label": "SetRelativeLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocationAndRotation(NewLocation, RelativeRotationCache.RotatorToQuat(GetRelativeRotation()), bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "SetRelativeRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRelativeRotation(const FQuat& NewRotation, bool bSweep, FHitResult* OutSweepHitResult, ETeleportType Teleport)"
  },
  {
    "label": "SetRelativeLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocationAndRotation(GetRelativeLocation(), NewRotation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddRelativeLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult* OutSweepHitResult, ETeleportType Teleport)"
  },
  {
    "label": "SetRelativeLocationAndRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeLocationAndRotation(GetRelativeLocation() + DeltaLocation, RelativeRotationCache.RotatorToQuat(GetRelativeRotation()), bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "AddRelativeRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult* OutSweepHitResult, ETeleportType Teleport)"
  },
  {
    "label": "SetRelativeRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeRotation(GetRelativeRotation() + DeltaRotation, bSweep, OutSweepHitResult, Teleport)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FSceneComponentInstanceData()"
  },
  {
    "label": "FSceneComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneComponentInstanceData(const USceneComponent* SourceComponent)"
  },
  {
    "label": "FSceneComponentInstanceData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSceneComponentInstanceData()"
  },
  {
    "label": "ContainsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsData()"
  },
  {
    "label": "ApplyToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToComponent(UActorComponent* Component, const ECacheApplyPhase CacheApplyPhase)"
  },
  {
    "label": "FindAndReplaceInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndReplaceInstances(const TMap<UObject*, UObject*>& OldToNewInstanceMap)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "FScopedPreventAttachedComponentMove()",
    "kind": "Method",
    "detail": "Function (} ; class FScopedPreventAttachedComponentMove : private FNoncopyable { public :)",
    "insertText": "FScopedPreventAttachedComponentMove(USceneComponent* Component)"
  },
  {
    "label": "FScopedPreventAttachedComponentMove()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedPreventAttachedComponentMove()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (private : USceneComponent* Owner ; uint32 bSavedAbsoluteLocation : 1 ; uint32 bSavedAbsoluteRotation : 1 ; uint32 bSavedAbsoluteScale : 1 ; uint32 bSavedNonAbsoluteComponent : 1 ; void* operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void *)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void*)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (ScopedMovementStack .)",
    "insertText": "Push(&ScopedUpdate)"
  },
  {
    "label": "GetShouldUpdatePhysicsVolume()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetShouldUpdatePhysicsVolume()"
  }
]