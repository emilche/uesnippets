[
  {
    "label": "FAnimCustomInstanceHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimCustomInstanceHelper"
  },
  {
    "label": "BindToSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimInstance . h \" # include \" AnimSequencerInstance . h \" # include \" Components / SkeletalMeshComponent . h \" # include \" Engine / World . h \" # include \" SequencerAnimationSupport . h \" class FAnimCustomInstanceHelper { public : template<InstanceClassType> InstanceClassType*)",
    "insertText": "BindToSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent, bool& bOutWasCreated)"
  },
  {
    "label": "SetUpdateAnimationInEditor()",
    "kind": "Method",
    "detail": "Function (bOutWasCreated = false ; InSkeletalMeshComponent -> VisibilityBasedAnimTickOption = EVisibilityBasedAnimTickOption::AlwaysTickPoseAndRefreshBones ; # if WITH_EDITOR InSkeletalMeshComponent ->)",
    "insertText": "SetUpdateAnimationInEditor(true)"
  },
  {
    "label": "SetUpdateClothInEditor()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "SetUpdateClothInEditor(true)"
  },
  {
    "label": "GetChildrenComponents()",
    "kind": "Method",
    "detail": "Function (# endif TArray<USceneComponent*> ChildComponents ; InSkeletalMeshComponent ->)",
    "insertText": "GetChildrenComponents(true, ChildComponents)"
  },
  {
    "label": "USkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshComponent* ChildSkelMeshComp = Cast<)",
    "insertText": "USkeletalMeshComponent(ChildComponent)"
  },
  {
    "label": "ShouldCreateCustomInstancePlayer()",
    "kind": "Method",
    "detail": "Function (# endif } } const bool bShouldCreateCustomInstance =)",
    "insertText": "ShouldCreateCustomInstancePlayer(InSkeletalMeshComponent)"
  },
  {
    "label": "ISequencerAnimationSupport()",
    "kind": "Method",
    "detail": "Function (UAnimInstance* CurrentAnimInstance = InSkeletalMeshComponent -> AnimScriptInstance ; ISequencerAnimationSupport* CurrentSequencerInterface = Cast<)",
    "insertText": "ISequencerAnimationSupport(CurrentAnimInstance)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (const bool bCurrentlySequencerInterface = CurrentSequencerInterface ! = nullptr ; const bool bCreateSequencerInterface =)",
    "insertText": "StaticClass()->ImplementsInterface(USequencerAnimationSupport::StaticClass())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSupportDifferentSourceAnimInstance = false ;)",
    "insertText": "if(bCreateSequencerInterface)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (InstanceClassType* DefaultObject =)",
    "insertText": "StaticClass()->template GetDefaultObject<InstanceClassType>()"
  },
  {
    "label": "ISequencerAnimationSupport()",
    "kind": "Method",
    "detail": "Function (ISequencerAnimationSupport* SequencerSupporter = Cast<)",
    "insertText": "ISequencerAnimationSupport(DefaultObject)"
  },
  {
    "label": "DoesSupportDifferentSourceAnimInstance()",
    "kind": "Method",
    "detail": "Function (bSupportDifferentSourceAnimInstance = SequencerSupporter&& SequencerSupporter ->)",
    "insertText": "DoesSupportDifferentSourceAnimInstance()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bShouldCreateCustomInstance && !bCurrentlySequencerInterface)"
  },
  {
    "label": "SetAnimationMode()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "SetAnimationMode(EAnimationMode::AnimationCustomMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Cast<InstanceClassType>(InSkeletalMeshComponent->AnimScriptInstance) == nullptr || !InSkeletalMeshComponent->AnimScriptInstance->GetClass()->IsChildOf(InstanceClassType::StaticClass()))"
  },
  {
    "label": "InstanceClassType()",
    "kind": "Method",
    "detail": "Function (InstanceClassType* SequencerInstance = NewObject<)",
    "insertText": "InstanceClassType(InSkeletalMeshComponent, InstanceClassType::StaticClass())"
  },
  {
    "label": "InitializeAnimation()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent -> AnimScriptInstance = SequencerInstance ; InSkeletalMeshComponent -> AnimScriptInstance ->)",
    "insertText": "InitializeAnimation()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOutWasCreated = true ; return SequencerInstance ; } else)",
    "insertText": "if(InSkeletalMeshComponent->AnimScriptInstance->GetClass()->IsChildOf(InstanceClassType::StaticClass()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(CurrentAnimInstance->GetClass()->IsChildOf(InstanceClassType::StaticClass()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bCurrentlySequencerInterface)"
  },
  {
    "label": "GetSourceAnimInstance()",
    "kind": "Method",
    "detail": "Function (UAnimInstance* CurSourceInstance = CurrentSequencerInterface ->)",
    "insertText": "GetSourceAnimInstance()"
  },
  {
    "label": "SetSourceAnimInstance()",
    "kind": "Method",
    "detail": "Function (CurrentSequencerInterface ->)",
    "insertText": "SetSourceAnimInstance(NewSequencerInstance)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (bOutWasCreated = true ; return NewSequencerInstance ; } else {)",
    "insertText": "UE_LOG(LogAnimation, Warning, TEXT(\"Currently Sequencer doesn't support Source Instance. They're not compatible to work together.\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(CurSourceInstance->GetClass()->IsChildOf(InstanceClassType::StaticClass()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bCreateSequencerInterface && bSupportDifferentSourceAnimInstance && !CurrentSequencerInterface->DoesSupportDifferentSourceAnimInstance())"
  },
  {
    "label": "ISequencerAnimationSupport()",
    "kind": "Method",
    "detail": "Function (ISequencerAnimationSupport* NewSequencerInterface = Cast<)",
    "insertText": "ISequencerAnimationSupport(NewInstance)"
  },
  {
    "label": "ensureAlways()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent -> AnimScriptInstance = NewInstance ;)",
    "insertText": "ensureAlways(NewInstance != CurSourceInstance)"
  },
  {
    "label": "SetSourceAnimInstance()",
    "kind": "Method",
    "detail": "Function (NewSequencerInterface ->)",
    "insertText": "SetSourceAnimInstance(CurSourceInstance)"
  },
  {
    "label": "InstanceClassType()",
    "kind": "Method",
    "detail": "Function (bOutWasCreated = true ; return Cast<)",
    "insertText": "InstanceClassType(InSkeletalMeshComponent->AnimScriptInstance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(bCreateSequencerInterface && bSupportDifferentSourceAnimInstance)"
  },
  {
    "label": "SetSourceAnimInstance()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent -> AnimScriptInstance = NewInstance ; NewSequencerInterface ->)",
    "insertText": "SetSourceAnimInstance(CurrentAnimInstance)"
  },
  {
    "label": "UnbindFromSkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (} } } return nullptr ; } template<InstanceClassType> void)",
    "insertText": "UnbindFromSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent)"
  },
  {
    "label": "SetUpdateAnimationInEditor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR InSkeletalMeshComponent ->)",
    "insertText": "SetUpdateAnimationInEditor(false)"
  },
  {
    "label": "SetUpdateClothInEditor()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "SetUpdateClothInEditor(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(InSkeletalMeshComponent->GetAnimationMode() == EAnimationMode::Type::AnimationCustomMode)"
  },
  {
    "label": "GetAnimInstance()",
    "kind": "Method",
    "detail": "Function (UAnimInstance* AnimInstance = InSkeletalMeshComponent ->)",
    "insertText": "GetAnimInstance()"
  },
  {
    "label": "InstanceClassType()",
    "kind": "Method",
    "detail": "Function (InstanceClassType* SequencerInstance = Cast<)",
    "insertText": "InstanceClassType(AnimInstance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bClearAnimScriptInstance = true ;)",
    "insertText": "if(ISequencerAnimationSupport* SequencerInterface = Cast<ISequencerAnimationSupport>(AnimInstance))"
  },
  {
    "label": "SetSourceAnimInstance()",
    "kind": "Method",
    "detail": "Function (SequencerInterface ->)",
    "insertText": "SetSourceAnimInstance(nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent -> AnimScriptInstance = SourceAnimInstance ; bClearAnimScriptInstance = false ; } } })",
    "insertText": "if(bClearAnimScriptInstance)"
  },
  {
    "label": "ClearAnimScriptInstance()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "ClearAnimScriptInstance()"
  },
  {
    "label": "ISequencerAnimationSupport()",
    "kind": "Method",
    "detail": "Function (} } else { ISequencerAnimationSupport* SequencerInterface = Cast<)",
    "insertText": "ISequencerAnimationSupport(AnimInstance)"
  },
  {
    "label": "InstanceClassType()",
    "kind": "Method",
    "detail": "Function (SequencerInstance = Cast<)",
    "insertText": "InstanceClassType(SourceInstance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SourceInstance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent -> AnimScriptInstance = SourceInstance ; } } } } else)",
    "insertText": "if(InSkeletalMeshComponent->GetAnimationMode() == EAnimationMode::Type::AnimationBlueprint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent -> AnimScriptInstance = SourceInstance ; AnimInstance = SourceInstance ; } })",
    "insertText": "if(AnimInstance)"
  },
  {
    "label": "USkeletalMeshComponent()",
    "kind": "Method",
    "detail": "Function (const TArray<UAnimInstance*>& LinkedInstances = const_cast<const)",
    "insertText": "USkeletalMeshComponent(InSkeletalMeshComponent)->GetLinkedAnimInstances()"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (LinkedInstance ->)",
    "insertText": "UpdateAnimation(0.0f, false, UAnimInstance::EUpdateAnimationFlag::ForceParallelUpdate)"
  },
  {
    "label": "UpdateAnimation()",
    "kind": "Method",
    "detail": "Function (} AnimInstance ->)",
    "insertText": "UpdateAnimation(0.0f, false)"
  },
  {
    "label": "RefreshBoneTransforms()",
    "kind": "Method",
    "detail": "Function (} InSkeletalMeshComponent ->)",
    "insertText": "RefreshBoneTransforms()"
  },
  {
    "label": "RefreshFollowerComponents()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "RefreshFollowerComponents()"
  },
  {
    "label": "UpdateComponentToWorld()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "UpdateComponentToWorld()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InSkeletalMeshComponent->GetWorld() != nullptr && InSkeletalMeshComponent->GetWorld()->IsGameWorld() == false)"
  },
  {
    "label": "ClearMotionVector()",
    "kind": "Method",
    "detail": "Function (InSkeletalMeshComponent ->)",
    "insertText": "ClearMotionVector()"
  },
  {
    "label": "ShouldCreateCustomInstancePlayer()",
    "kind": "Method",
    "detail": "Function (} } private : bool)",
    "insertText": "ShouldCreateCustomInstancePlayer(const USkeletalMeshComponent* SkeletalMeshComponent)"
  }
]