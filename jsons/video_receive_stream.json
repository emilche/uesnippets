[
  {
    "label": "RtpPacketSinkInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketSinkInterface"
  },
  {
    "label": "VideoDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoDecoderFactory"
  },
  {
    "label": "VideoReceiveStreamInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoReceiveStreamInterface"
  },
  {
    "label": "RecordingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RecordingState"
  },
  {
    "label": "Decoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Decoder"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Rtp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rtp"
  },
  {
    "label": "RtcpXr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcpXr"
  },
  {
    "label": "RecordingState()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_VIDEO_RECEIVE_STREAM_H_ # define CALL_VIDEO_RECEIVE_STREAM_H_ # include<limits> # include<map> # include<set> # include<string> # include<utility> # include<vector> # include \" api / call / transport . h \" # include \" api / crypto / crypto_options . h \" # include \" api / rtp_headers . h \" # include \" api / rtp_parameters . h \" # include \" api / video / recordable_encoded_frame . h \" # include \" api / video / video_content_type . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_timing . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" call / receive_stream . h \" # include \" call / rtp_config . h \" # include \" common_video / frame_counts . h \" # include \" modules / rtp_rtcp / include / rtcp_statistics . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" namespace webrtc { class RtpPacketSinkInterface ; class VideoDecoderFactory ; class VideoReceiveStreamInterface : public MediaReceiveStreamInterface { public : struct RecordingState {)",
    "insertText": "RecordingState()"
  },
  {
    "label": "RecordingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordingState(std::function<void(const RecordableEncodedFrame&)> callback) : callback(std::move(callback))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} std::function<)",
    "insertText": "void(const RecordableEncodedFrame&)"
  },
  {
    "label": "Decoder()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t> last_keyframe_request_ms ; } ; struct Decoder {)",
    "insertText": "Decoder(SdpVideoFormat video_format, int payload_type)"
  },
  {
    "label": "Decoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoder()"
  },
  {
    "label": "Decoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoder(const Decoder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Decoder& other)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (SdpVideoFormat video_format ; int payload_type = 0 ; } ; struct Stats {)",
    "insertText": "Stats()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(int64_t time_ms)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (int network_frame_rate = 0 ; int decode_frame_rate = 0 ; int render_frame_rate = 0 ; uint32_t frames_rendered = 0 ; std::string decoder_implementation_name = \" unknown \" ; absl::optional<bool> power_efficient_decoder ; FrameCounts frame_counts ; int decode_ms = 0 ; int max_decode_ms = 0 ; int current_delay_ms = 0 ; int target_delay_ms = 0 ; int jitter_buffer_ms = 0 ; double jitter_buffer_delay_seconds = 0 ; uint64_t jitter_buffer_emitted_count = 0 ; int min_playout_delay_ms = 0 ; int render_delay_ms = 1 0 ; int64_t interframe_delay_max_ms = - 1 ; uint32_t frames_dropped = 0 ; uint32_t frames_decoded = 0 ; TimeDelta total_decode_time =)",
    "insertText": "Zero()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (uint32_t frames_assembled_from_multiple_packets = 0 ; double total_inter_frame_delay = 0 ; double total_squared_inter_frame_delay = 0 ; int64_t first_frame_received_to_decoded_ms = - 1 ; absl::optional<uint64_t> qp_sum ; int current_payload_type = - 1 ; int total_bitrate_bps = 0 ; int width = 0 ; int height = 0 ; uint32_t freeze_count = 0 ; uint32_t pause_count = 0 ; uint32_t total_freezes_duration_ms = 0 ; uint32_t total_pauses_duration_ms = 0 ; uint32_t total_frames_duration_ms = 0 ; double sum_squared_frame_durations = 0 . 0 ; VideoContentType content_type = VideoContentType::UNSPECIFIED ; absl::optional<int64_t> estimated_playout_ntp_timestamp_ms ; int sync_offset_ms = std::numeric_limits<int)",
    "insertText": "max()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (uint32_t ssrc = 0 ; std::string c_name ; RtpReceiveStats rtp_stats ; RtcpPacketTypeCounter rtcp_packet_type_counts ; absl::optional<webrtc::TimingFrameInfo> timing_frame_info ; } ; struct Config { private :)",
    "insertText": "Config(const Config&)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Config()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(Config&&)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(Transport* rtcp_send_transport, VideoDecoderFactory* decoder_factory = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Config&)",
    "insertText": "operator(Config&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Config&)",
    "insertText": "operator(const Config&)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (Config)",
    "insertText": "Copy()"
  },
  {
    "label": "Rtp()",
    "kind": "Method",
    "detail": "Function (std::vector<Decoder> decoders ; VideoDecoderFactory* decoder_factory = nullptr ; struct Rtp : public ReceiveStreamRtpConfig {)",
    "insertText": "Rtp()"
  },
  {
    "label": "Rtp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rtp(const Rtp&)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (NackConfig nack ; RtcpMode rtcp_mode = RtcpMode::kCompound ; struct RtcpXr { bool receiver_reference_time_report = false ; } rtcp_xr ; KeyFrameReqMethod keyframe_method = KeyFrameReqMethod::kPliRtcp ; LntfConfig lntf ; int ulpfec_payload_type = - 1 ; int red_payload_type = - 1 ; uint32_t rtx_ssrc = 0 ; bool protected_by_flexfec = false ; RtpPacketSinkInterface* packet_sink_ = nullptr ; std::map<int,int> rtx_associated_payload_types ; std::set<int> raw_payload_types ; } rtp ; Transport* rtcp_send_transport = nullptr ; rtc::VideoSinkInterface<VideoFrame>* renderer = nullptr ; int render_delay_ms = 1 0 ; bool enable_prerenderer_smoothing = true ; std::string sync_group ; rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor ; CryptoOptions crypto_options ; rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer ; } ; Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumPlayoutDelayMs()"
  },
  {
    "label": "SetAndGetRecordingState()",
    "kind": "Method",
    "detail": "Function (RecordingState)",
    "insertText": "SetAndGetRecordingState(RecordingState state, bool generate_key_frame)"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame()"
  },
  {
    "label": "SetRtcpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtcpMode(RtcpMode mode)"
  },
  {
    "label": "SetFlexFecProtection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlexFecProtection(RtpPacketSinkInterface* flexfec_sink)"
  },
  {
    "label": "SetLossNotificationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLossNotificationEnabled(bool enabled)"
  },
  {
    "label": "SetNackHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackHistory(TimeDelta history)"
  },
  {
    "label": "SetProtectionPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProtectionPayloadTypes(int red_payload_type, int ulpfec_payload_type)"
  },
  {
    "label": "SetRtcpXr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtcpXr(Config::Rtp::RtcpXr rtcp_xr)"
  },
  {
    "label": "SetAssociatedPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedPayloadTypes(std::map<int, int> associated_payload_types)"
  },
  {
    "label": "VideoReceiveStreamInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "VideoReceiveStreamInterface()"
  }
]