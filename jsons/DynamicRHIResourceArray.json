[
  {
    "label": "EResourceAlignment",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResourceAlignment"
  },
  {
    "label": "TResourceArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TResourceArray"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" # include \" CoreGlobals . h \" # include \" Containers / ResourceArray . h \" # include \" Serialization / MemoryImage . h \" enum EResourceAlignment { VERTEXBUFFER_ALIGNMENT = DEFAULT_ALIGNMENT,INDEXBUFFER_ALIGNMENT = DEFAULT_ALIGNMENT } ; template<ElementType,uint32 Alignment = DEFAULT_ALIGNMENT> class TResourceArray : public FResourceArrayInterface,public TArray<ElementType,TMemoryImageAllocator<Alignment>> { using ParentArrayType = TArray<ElementType,TMemoryImageAllocator<Alignment>> ;)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES(TResourceArray, Virtual, FResourceArrayInterface, ParentArrayType)"
  },
  {
    "label": "TResourceArray()",
    "kind": "Method",
    "detail": "Function (public : using Super = ParentArrayType ;)",
    "insertText": "TResourceArray(bool InNeedsCPUAccess=false) : Super() , bNeedsCPUAccess(InNeedsCPUAccess)"
  },
  {
    "label": "TResourceArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TResourceArray(TResourceArray&&)"
  },
  {
    "label": "TResourceArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TResourceArray(const TResourceArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TResourceArray&)",
    "insertText": "operator(TResourceArray&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TResourceArray&)",
    "insertText": "operator(const TResourceArray&)"
  },
  {
    "label": "TResourceArray()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TResourceArray()"
  },
  {
    "label": "GetResourceData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetResourceData()"
  },
  {
    "label": "GetResourceDataSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetResourceDataSize()"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Discard()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Empty()"
  },
  {
    "label": "IsStatic()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsStatic()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bNeedsCPUAccess = bInNeedsCPUAccess ; } TResourceArray&)",
    "insertText": "operator(const Super& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(Other)"
  },
  {
    "label": "BulkSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BulkSerialize(Ar, bForcePerElementSerialization)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(bool, bNeedsCPUAccess)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<ElementType,uint32 Alignment> FArchive&)",
    "insertText": "operator(FArchive& Ar,TResourceArray<ElementType,Alignment>& ResourceArray)"
  }
]