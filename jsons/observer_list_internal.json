[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ObserverType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverType"
  },
  {
    "label": "ObserverList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverList"
  },
  {
    "label": "WeakLinkNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakLinkNode"
  },
  {
    "label": "EXPENSIVE_DCHECKS_ARE_ON()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_OBSERVER_LIST_INTERNAL_H_ # define BASE_OBSERVER_LIST_INTERNAL_H_ # include<string> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / containers / linked_list . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" base / memory / weak_ptr . h \" # include \" base / observer_list_types . h \" # if)",
    "insertText": "EXPENSIVE_DCHECKS_ARE_ON()"
  },
  {
    "label": "UncheckedObserverAdapter()",
    "kind": "Method",
    "detail": "Function (namespace internal { class BASE_EXPORT UncheckedObserverAdapter { public :)",
    "insertText": "UncheckedObserverAdapter(const void* observer) : ptr_(const_cast<void*>(observer))"
  },
  {
    "label": "UncheckedObserverAdapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UncheckedObserverAdapter(const UncheckedObserverAdapter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UncheckedObserverAdapter&)",
    "insertText": "operator(const UncheckedObserverAdapter&)"
  },
  {
    "label": "UncheckedObserverAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UncheckedObserverAdapter(UncheckedObserverAdapter&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UncheckedObserverAdapter&)",
    "insertText": "operator(UncheckedObserverAdapter&& other)"
  },
  {
    "label": "MarkForRemoval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkForRemoval()"
  },
  {
    "label": "IsMarkedForRemoval()",
    "kind": "Method",
    "detail": "Function (ptr_ = nullptr ; } bool)",
    "insertText": "IsMarkedForRemoval()"
  },
  {
    "label": "EXPENSIVE_DCHECKS_ARE_ON()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "EXPENSIVE_DCHECKS_ARE_ON() std::string GetCreationStackString()"
  },
  {
    "label": "CheckedObserverAdapter()",
    "kind": "Method",
    "detail": "Function (# endif } ; class BASE_EXPORT CheckedObserverAdapter { public :)",
    "insertText": "CheckedObserverAdapter(const CheckedObserver* observer)"
  },
  {
    "label": "CheckedObserverAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CheckedObserverAdapter()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(weak_ptr_)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<class ObserverType> ObserverType*)",
    "insertText": "Get(const CheckedObserverAdapter& adapter)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(adapter.weak_ptr_)"
  },
  {
    "label": "WeakLinkNode()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class ObserverList> class WeakLinkNode : public base::LinkNode<WeakLinkNode<ObserverList>> { public :)",
    "insertText": "WeakLinkNode()"
  },
  {
    "label": "WeakLinkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakLinkNode(ObserverList* list)"
  },
  {
    "label": "SetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetList(list)"
  },
  {
    "label": "WeakLinkNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WeakLinkNode(const WeakLinkNode&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WeakLinkNode&)",
    "insertText": "operator(const WeakLinkNode&)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "IsOnlyRemainingNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOnlyRemainingNode()"
  },
  {
    "label": "SetList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetList(ObserverList* list)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!list_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(list)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (list_ = list ; list_ -> live_iterators_ .)",
    "insertText": "Append(this)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (list_ = nullptr ; this ->)",
    "insertText": "RemoveFromList()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } ObserverList*)",
    "insertText": "get()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  }
]