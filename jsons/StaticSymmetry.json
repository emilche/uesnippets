[
  {
    "label": "tensor_static_symgroup_permutate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_permutate"
  },
  {
    "label": "tensor_static_symgroup_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_element"
  },
  {
    "label": "tensor_static_symgroup_element_ctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_element_ctor"
  },
  {
    "label": "tensor_static_symgroup_identity_ctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_identity_ctor"
  },
  {
    "label": "tensor_static_symgroup_multiply_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_multiply_helper"
  },
  {
    "label": "tensor_static_symgroup_multiply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_multiply"
  },
  {
    "label": "tensor_static_symgroup_equality",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_equality"
  },
  {
    "label": "tensor_static_symgroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup"
  },
  {
    "label": "tensor_static_symgroup_do_apply",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tensor_static_symgroup_do_apply"
  },
  {
    "label": "StaticSGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StaticSGroup"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSORSYMMETRY_STATICSYMMETRY_H # define EIGEN_CXX11_TENSORSYMMETRY_STATICSYMMETRY_H namespace Eigen { namespace internal { template<list> struct tensor_static_symgroup_permutate ; template<int . . . nn> struct tensor_static_symgroup_permutate<numeric_list<int,nn . . .>> { std::size_t N =)",
    "insertText": "sizeof(nn)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<T> std::array<T,N>)",
    "insertText": "run(const std::array<T, N>& indices)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<A,B> struct tensor_static_symgroup_multiply { private : typedef A::indices iia ; typedef B::indices iib ; int ffa = A::flags ; int ffb = B::flags ; public :)",
    "insertText": "static_assert(iia::count == iib::count, \"Cannot multiply symmetry elements with different number of indices.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef tensor_static_symgroup_element<)",
    "insertText": "decltype(tensor_static_symgroup_multiply_helper<iib>::helper(iia()))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<A,B> struct tensor_static_symgroup_equality { typedef A::indices iia ; typedef B::indices iib ; int ffa = A::flags ; int ffb = B::flags ;)",
    "insertText": "static_assert(iia::count == iib::count, \"Cannot compare symmetry elements with different number of indices.\")"
  },
  {
    "label": "flags_cmp_()",
    "kind": "Method",
    "detail": "Function (bool value = is_same<iia,iib>::value ; private : int flags_cmp_ = ffa ^ ffb ; bool is_zero = value&& flags_cmp_ = = NegationFlag ; bool is_real = value&& flags_cmp_ = = ConjugationFlag ; bool is_imag = value&&)",
    "insertText": "flags_cmp_(NegationFlag | ConjugationFlag)"
  },
  {
    "label": "global_flags()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "global_flags(is_real ? GlobalRealFlag : 0) | (is_imag ? GlobalImagFlag : 0) | (is_zero ? GlobalZeroFlag : 0)"
  },
  {
    "label": "tensor_static_symgroup_index_permute()",
    "kind": "Method",
    "detail": "Function (} ; template<std::size_t NumIndices,. . . Gen> struct tensor_static_symgroup { typedef StaticSGroup<Gen . . .> type ; std::size_t size = type::static_size ; } ; template<Index,std::size_t N,int . . . ii,int . . . jj> std::array<Index,N>)",
    "insertText": "tensor_static_symgroup_index_permute(std::array<Index, N> idx, internal::numeric_list<int, ii...>, internal::numeric_list<int, jj...>)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (std::vector<Index> result { { idx [ ii ] . . . } } ; std::size_t target_size = idx .)",
    "insertText": "size()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef internal::gen_numeric_list<int,NumIndices - SGNumIndices,SGNumIndices>::type remaining_indices ; initial =)",
    "insertText": "run(tensor_static_symgroup_index_permute(idx, typename first::indices(), remaining_indices()), first::flags, initial, std::forward<Args>(args)...)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Op,RV,std::size_t SGNumIndices,Index,. . . Args> RV)",
    "insertText": "run(const std::vector<Index>& idx, RV initial, Args&&... args)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(idx.size() >= SGNumIndices && \"Can only apply symmetry group to objects that have at least the required amount of indices.\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (initial =)",
    "insertText": "run(tensor_static_symgroup_index_permute(idx, typename first::indices()), first::flags, initial, std::forward<Args>(args)...)"
  },
  {
    "label": "EIGEN_TPL_PP_SPEC_HACK_DEF()",
    "kind": "Method",
    "detail": "Function (} } ; template<)",
    "insertText": "EIGEN_TPL_PP_SPEC_HACK_DEF(typename, empty)> struct tensor_static_symgroup_do_apply<internal::type_list<EIGEN_TPL_PP_SPEC_HACK_USE(empty)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Op,RV,std::size_t SGNumIndices,Index,std::size_t NumIndices,. . . Args> RV)",
    "insertText": "run(const std::array<Index, NumIndices>&, RV initial, Args&&...)"
  },
  {
    "label": "StaticSGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StaticSGroup(const StaticSGroup<Gen...>&)"
  },
  {
    "label": "StaticSGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StaticSGroup(StaticSGroup<Gen...>&&)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} template<Op,RV,Index,std::size_t N,. . . Args> RV)",
    "insertText": "apply(const std::array<Index, N>& idx, RV initial, Args&&... args)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} template<Op,RV,Index,. . . Args> RV)",
    "insertText": "apply(const std::vector<Index>& idx, RV initial, Args&&... args)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(idx.size() == NumIndices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Tensor_> internal::tensor_symmetry_value_setter<Tensor_,StaticSGroup<Gen . . .>>)",
    "insertText": "operator()(Tensor_& tensor, std::array<typename Tensor_::Index, Tensor_::NumIndices> const& indices)"
  }
]