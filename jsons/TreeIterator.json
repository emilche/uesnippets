[
  {
    "label": "InvertedTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InvertedTree"
  },
  {
    "label": "IterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IterTraits"
  },
  {
    "label": "NodeConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeConverter"
  },
  {
    "label": "IterListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IterListItem"
  },
  {
    "label": "TreeValueIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeValueIteratorBase"
  },
  {
    "label": "PrevChildItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrevChildItem"
  },
  {
    "label": "PrevValueItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrevValueItem"
  },
  {
    "label": "NodeIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeIteratorBase"
  },
  {
    "label": "PrevItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrevItem"
  },
  {
    "label": "LeafIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafIteratorBase"
  },
  {
    "label": "IteratorRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorRange"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TREE_TREEITERATOR_HAS_BEEN_INCLUDED # define OPENVDB_TREE_TREEITERATOR_HAS_BEEN_INCLUDED # include<tbb / blocked_range . h> # include<tbb / parallel_for . h> # include<openvdb / version . h> # include<openvdb / Types . h> # include<algorithm> # include<sstream> # include<string> # include<type_traits> # define ENABLE_TREE_VALUE_DEPTH_BOUND_OPTIMIZATION namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tree { namespace iter { template<HeadT,int HeadLevel> struct InvertedTree { using SubtreeT = InvertedTree<HeadT::ChildNodeType,HeadLevel - 1>::Type ; using Type = SubtreeT::template Append<HeadT> ; } ; template<HeadT> struct InvertedTree<HeadT,1> { using Type = TypeList<HeadT::ChildNodeType,HeadT> ; } ; } template<NodeT,IterT> struct IterTraits { template<ChildT> ChildT*)",
    "insertText": "getChild(const IterT&)"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (} template<ChildT> ChildT*)",
    "insertText": "getChild(const IterT& iter)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} template<OtherNodeT> struct NodeConverter { using Type = OtherNodeT::ChildOnIter ; } ; } ; template<NodeT> struct IterTraits<NodeT,NodeT::ChildOnCIter> { using IterT = NodeT::ChildOnCIter ; IterT)",
    "insertText": "begin(const NodeT& node)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} template<OtherNodeT> struct NodeConverter { using Type = OtherNodeT::ChildOnCIter ; } ; } ; template<NodeT> struct IterTraits<NodeT,NodeT::ChildOffIter> { using IterT = NodeT::ChildOffIter ; IterT)",
    "insertText": "begin(NodeT& node)"
  },
  {
    "label": "probeChild()",
    "kind": "Method",
    "detail": "Function (IterT::NonConstValueType val ; return iter .)",
    "insertText": "probeChild(val)"
  },
  {
    "label": "IterListItem()",
    "kind": "Method",
    "detail": "Function (} template<OtherNodeT> struct NodeConverter { using Type = OtherNodeT::ValueAllCIter ; } ; } ; template<PrevItemT,NodeVecT,size_t VecSize,Index _Level> class IterListItem { public : using PrevIterT = PrevItemT::IterT ; using _NodeT = NodeVecT::Front ; using IterT = IterTraits<PrevIterT::NonConstNodeType,PrevIterT>::template NodeConverter<_NodeT>::Type ; using NodeT = IterT::NodeType ; using NCNodeT = IterT::NonConstNodeType ; using NCValueT = IterT::NonConstValueType ; using ChildT = CopyConstness<NodeT,NodeT::ChildNodeType>::Type ; using NCChildT = CopyConstness<NCNodeT,NCNodeT::ChildNodeType>::Type ; using ITraits = IterTraits<NCNodeT,IterT> ; const Index Level = _Level ;)",
    "insertText": "IterListItem(PrevItemT* prev): mNext(this), mPrev(prev)"
  },
  {
    "label": "IterListItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IterListItem(const IterListItem& other): mIter(other.mIter), mNext(other.mNext), mPrev(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} IterListItem&)",
    "insertText": "operator(const IterListItem& other)"
  },
  {
    "label": "updateBackPointers()",
    "kind": "Method",
    "detail": "Function (mIter = other . mIter ; mNext = other . mNext ; mPrev = nullptr ; } return* this ; } void)",
    "insertText": "updateBackPointers(PrevItemT* prev)"
  },
  {
    "label": "updateBackPointers()",
    "kind": "Method",
    "detail": "Function (mPrev = prev ; mNext .)",
    "insertText": "updateBackPointers(this)"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIter(const IterT& iter)"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (mIter = iter ; } template<OtherIterT> void)",
    "insertText": "setIter(const OtherIterT& iter)"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "setIter(iter)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getNode(Index lvl, NodeT*& node)"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "node(lvl <= Level) ? mIter.getParentNode()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} template<OtherNodeT> void)",
    "insertText": "getNode(Index lvl, OtherNodeT*& node)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (mNext .)",
    "insertText": "getNode(lvl, node)"
  },
  {
    "label": "initLevel()",
    "kind": "Method",
    "detail": "Function (} template<OtherIterListItemT> void)",
    "insertText": "initLevel(Index lvl, OtherIterListItemT& otherListItem)"
  },
  {
    "label": "mIter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mIter(node == nullptr) ? IterT() : ITraits::begin(*const_cast<NodeT*>(node))"
  },
  {
    "label": "initLevel()",
    "kind": "Method",
    "detail": "Function (} else { mNext .)",
    "insertText": "initLevel(lvl, otherListItem)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (} } Index)",
    "insertText": "pos(Index lvl)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test(Index lvl)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "next(Index lvl)"
  },
  {
    "label": "down()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "down(Index lvl)"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (mPrev ->)",
    "insertText": "setIter(PrevItemT::ITraits::begin(*child))"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (} Coord)",
    "insertText": "getCoord(Index lvl)"
  },
  {
    "label": "getChildDim()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "getChildDim(Index lvl)"
  },
  {
    "label": "getVoxelCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "getVoxelCount(Index lvl)"
  },
  {
    "label": "isValueOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValueOn(Index lvl)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const NCValueT&)",
    "insertText": "getValue(Index lvl)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(Index lvl, const NCValueT& val)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValueOn(Index lvl, bool on = true)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValueOff(Index lvl)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (} template<ModifyOp> void)",
    "insertText": "modifyValue(Index lvl, const ModifyOp& op)"
  },
  {
    "label": "IterListItem()",
    "kind": "Method",
    "detail": "Function (} private : using RestT = NodeVecT::PopFront ; using NextItem = IterListItem<IterListItem,RestT,VecSize - 1,Level + 1> ; IterT mIter ; NextItem mNext ; PrevItemT* mPrev ; } ; template<PrevItemT,NodeVecT,size_t VecSize> class IterListItem<PrevItemT,NodeVecT,VecSize,0 U> { public : using PrevIterT = PrevItemT::IterT ; using _NodeT = NodeVecT::Front ; using IterT = IterTraits<PrevIterT::NonConstNodeType,PrevIterT>::template NodeConverter<_NodeT>::Type ; using NodeT = IterT::NodeType ; using NCNodeT = IterT::NonConstNodeType ; using NCValueT = IterT::NonConstValueType ; using ITraits = IterTraits<NCNodeT,IterT> ; const Index Level = 0 ;)",
    "insertText": "IterListItem(PrevItemT*): mNext(this), mPrev(nullptr)"
  },
  {
    "label": "updateBackPointers()",
    "kind": "Method",
    "detail": "Function (mIter = other . mIter ; mNext = other . mNext ; mPrev = nullptr ; } return* this ; } void)",
    "insertText": "updateBackPointers(PrevItemT* = nullptr)"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "node(lvl == 0) ? mIter.getParentNode()"
  },
  {
    "label": "IterListItem()",
    "kind": "Method",
    "detail": "Function (} private : using RestT = NodeVecT::PopFront ; using NextItem = IterListItem<IterListItem,RestT,VecSize - 1,1> ; IterT mIter ; NextItem mNext ; PrevItemT* mPrev ; } ; template<PrevItemT,NodeVecT,Index _Level> class IterListItem<PrevItemT,NodeVecT,1,_Level> { public : using _NodeT = NodeVecT::Front ; using PrevIterT = PrevItemT::IterT ; using IterT = IterTraits<PrevIterT::NonConstNodeType,PrevIterT>::template NodeConverter<_NodeT>::Type ; using NodeT = IterT::NodeType ; using NCNodeT = IterT::NonConstNodeType ; using NCValueT = IterT::NonConstValueType ; using ChildT = CopyConstness<NodeT,NodeT::ChildNodeType>::Type ; using NCChildT = CopyConstness<NCNodeT,NCNodeT::ChildNodeType>::Type ; using ITraits = IterTraits<NCNodeT,IterT> ; const Index Level = _Level ;)",
    "insertText": "IterListItem(PrevItemT* prev): mPrev(prev)"
  },
  {
    "label": "IterListItem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IterListItem(const IterListItem& other): mIter(other.mIter), mPrev(nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(lvl == Level)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : IterT mIter ; PrevItemT* mPrev ; } ; template<_TreeT,_ValueIterT> class TreeValueIteratorBase { public : using TreeT = _TreeT ; using ValueIterT = _ValueIterT ; using NodeT = ValueIterT::NodeType ; using ValueT = ValueIterT::NonConstValueType ; using ChildOnIterT = NodeT::ChildOnCIter ; const Index ROOT_LEVEL = NodeT::LEVEL ;)",
    "insertText": "static_assert(ValueIterT::NodeType::LEVEL == ROOT_LEVEL, \"invalid value iterator node type\")"
  },
  {
    "label": "TreeValueIteratorBase()",
    "kind": "Method",
    "detail": "Function (const Index LEAF_LEVEL = 0,ROOT_DEPTH = 0,LEAF_DEPTH = ROOT_LEVEL ;)",
    "insertText": "TreeValueIteratorBase(TreeT&)"
  },
  {
    "label": "TreeValueIteratorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeValueIteratorBase(const TreeValueIteratorBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TreeValueIteratorBase&)",
    "insertText": "operator(const TreeValueIteratorBase& other)"
  },
  {
    "label": "setMinDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMinDepth(Index minDepth)"
  },
  {
    "label": "getMinDepth()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "getMinDepth()"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setMaxDepth(Index maxDepth)"
  },
  {
    "label": "getMaxDepth()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "getMaxDepth()"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "test()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "next()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TreeValueIteratorBase&)",
    "insertText": "operator()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "getNode(mLevel, node)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (} Coord)",
    "insertText": "getCoord()"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getBoundingBox(CoordBBox&)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (CoordBBox)",
    "insertText": "getBoundingBox()"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (CoordBBox b ; this ->)",
    "insertText": "getBoundingBox(b)"
  },
  {
    "label": "isTileValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTileValue()"
  },
  {
    "label": "isVoxelValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isVoxelValue()"
  },
  {
    "label": "isValueOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValueOn()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const ValueT&)",
    "insertText": "getValue()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(const ValueT& val)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "setValue(mLevel, val)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setActiveState(bool on)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "setValueOn(mLevel, on)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValueOff()"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "setValueOff(mLevel)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (} template<ModifyOp> void)",
    "insertText": "modifyValue(const ModifyOp& op)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "modifyValue(mLevel, op)"
  },
  {
    "label": "getTree()",
    "kind": "Method",
    "detail": "Function (} TreeT*)",
    "insertText": "getTree()"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "advance(bool dontIncrement = false)"
  },
  {
    "label": "TreeValueIteratorBase()",
    "kind": "Method",
    "detail": "Function (using InvTreeT = iter::InvertedTree<NodeT,NodeT::LEVEL>::Type ; struct PrevChildItem { using IterT = ChildOnIterT ; } ; struct PrevValueItem { using IterT = ValueIterT ; } ; IterListItem<PrevChildItem,InvTreeT,ROOT_LEVEL + 1,0> mChildIterList ; IterListItem<PrevValueItem,InvTreeT,ROOT_LEVEL + 1,0> mValueIterList ; Index mLevel ; int mMinLevel,mMaxLevel ; TreeT* mTree ; } ; template<TreeT,ValueIterT> TreeValueIteratorBase<TreeT,ValueIterT)",
    "insertText": "TreeValueIteratorBase(TreeT& tree): mChildIterList(nullptr), mValueIterList(nullptr), mLevel(ROOT_LEVEL), mMinLevel(int(LEAF_LEVEL)), mMaxLevel(int(ROOT_LEVEL)), mTree(&tree)"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (mChildIterList .)",
    "insertText": "setIter(IterTraits<NodeT, ChildOnIterT>::begin(tree.root()))"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "setIter(IterTraits<NodeT, ValueIterT>::begin(tree.root()))"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "advance(true)"
  },
  {
    "label": "TreeValueIteratorBase()",
    "kind": "Method",
    "detail": "Function (} template<TreeT,ValueIterT> TreeValueIteratorBase<TreeT,ValueIterT)",
    "insertText": "TreeValueIteratorBase(const TreeValueIteratorBase& other): mChildIterList(other.mChildIterList), mValueIterList(other.mValueIterList), mLevel(other.mLevel), mMinLevel(other.mMinLevel), mMaxLevel(other.mMaxLevel), mTree(other.mTree)"
  },
  {
    "label": "updateBackPointers()",
    "kind": "Method",
    "detail": "Function (mChildIterList .)",
    "insertText": "updateBackPointers()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (mMaxLevel =)",
    "insertText": "int(ROOT_LEVEL - minDepth)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (mMinLevel =)",
    "insertText": "int(ROOT_LEVEL - std::min(maxDepth, this->getLeafDepth()))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(int(mLevel) < mMinLevel || int(mLevel) > mMaxLevel)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (bool recurse = false ; do { recurse = false ; Index vPos = mValueIterList .)",
    "insertText": "pos(mLevel), cPos = mChildIterList.pos(mLevel)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (mValueIterList .)",
    "insertText": "next(mLevel)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (vPos = mValueIterList .)",
    "insertText": "pos(mLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(vPos < cPos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mValueIterList.pos(mLevel) < cPos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!dontIncrement) mChildIterList.next(mLevel)"
  },
  {
    "label": "summary()",
    "kind": "Method",
    "detail": "Function (} # ifdef DEBUG_TREE_VALUE_ITERATOR std::cout<<\" \\ n \"<<this ->)",
    "insertText": "summary()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "while(mChildIterList.pos(mLevel) < mValueIterList.pos(mLevel))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef ENABLE_TREE_VALUE_DEPTH_BOUND_OPTIMIZATION)",
    "insertText": "if(int(mLevel) == mMinLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else # endif)",
    "insertText": "if(mChildIterList.down(mLevel))"
  },
  {
    "label": "initLevel()",
    "kind": "Method",
    "detail": "Function (- - mLevel ; mValueIterList .)",
    "insertText": "initLevel(mLevel, mChildIterList)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "while(!mChildIterList.test(mLevel) && !mValueIterList.test(mLevel))"
  },
  {
    "label": "CoordBBox()",
    "kind": "Method",
    "detail": "Function (bbox =)",
    "insertText": "CoordBBox()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (bbox .)",
    "insertText": "max() = bbox.min().offsetBy(mValueIterList.getChildDim(mLevel) - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ostr ;)",
    "insertText": "for(int lvl = int(ROOT_LEVEL); lvl >= 0 && lvl >= int(mLevel); --lvl)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (ostr<<\" v \"<<mValueIterList .)",
    "insertText": "pos(lvl) << \" c\" << mChildIterList.pos(lvl)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->test() && mValueIterList.pos(mLevel) < mChildIterList.pos(mLevel))"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} } return ostr .)",
    "insertText": "str()"
  },
  {
    "label": "NodeIteratorBase()",
    "kind": "Method",
    "detail": "Function (} template<_TreeT,RootChildOnIterT> class NodeIteratorBase { public : using TreeT = _TreeT ; using RootIterT = RootChildOnIterT ; using RootNodeT = RootIterT::NodeType ; using NCRootNodeT = RootIterT::NonConstNodeType ; const Index ROOT_LEVEL = RootNodeT::LEVEL ; using InvTreeT = iter::InvertedTree<NCRootNodeT,ROOT_LEVEL>::Type ; const Index LEAF_LEVEL = 0,ROOT_DEPTH = 0,LEAF_DEPTH = ROOT_LEVEL ; using RootIterTraits = IterTraits<NCRootNodeT,RootIterT> ;)",
    "insertText": "NodeIteratorBase()"
  },
  {
    "label": "NodeIteratorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeIteratorBase(TreeT&)"
  },
  {
    "label": "NodeIteratorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeIteratorBase(const NodeIteratorBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NodeIteratorBase&)",
    "insertText": "operator(const NodeIteratorBase& other)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increment()"
  },
  {
    "label": "getLevel()",
    "kind": "Method",
    "detail": "Function (} } Index)",
    "insertText": "getLevel()"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getBoundingBox(CoordBBox& bbox)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} template<NodeT> void)",
    "insertText": "getNode(const NodeT*& node)"
  },
  {
    "label": "NodeIteratorBase()",
    "kind": "Method",
    "detail": "Function (private : struct PrevItem { using IterT = RootIterT ; } ; IterListItem<PrevItem,InvTreeT,ROOT_LEVEL + 1,LEAF_LEVEL> mIterList ; Index mLevel ; int mMinLevel,mMaxLevel ; bool mDone ; TreeT* mTree ; } ; template<TreeT,RootChildOnIterT> NodeIteratorBase<TreeT,RootChildOnIterT)",
    "insertText": "NodeIteratorBase(): mIterList(nullptr), mLevel(ROOT_LEVEL), mMinLevel(int(LEAF_LEVEL)), mMaxLevel(int(ROOT_LEVEL)), mDone(true), mTree(nullptr)"
  },
  {
    "label": "NodeIteratorBase()",
    "kind": "Method",
    "detail": "Function (} template<TreeT,RootChildOnIterT> NodeIteratorBase<TreeT,RootChildOnIterT)",
    "insertText": "NodeIteratorBase(TreeT& tree): mIterList(nullptr), mLevel(ROOT_LEVEL), mMinLevel(int(LEAF_LEVEL)), mMaxLevel(int(ROOT_LEVEL)), mDone(false), mTree(&tree)"
  },
  {
    "label": "setIter()",
    "kind": "Method",
    "detail": "Function (mIterList .)",
    "insertText": "setIter(RootIterTraits::begin(tree.root()))"
  },
  {
    "label": "NodeIteratorBase()",
    "kind": "Method",
    "detail": "Function (} template<TreeT,RootChildOnIterT> NodeIteratorBase<TreeT,RootChildOnIterT)",
    "insertText": "NodeIteratorBase(const NodeIteratorBase& other): mIterList(other.mIterList), mLevel(other.mLevel), mMinLevel(other.mMinLevel), mMaxLevel(other.mMaxLevel), mDone(other.mDone), mTree(other.mTree)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (- - mLevel ; } else {)",
    "insertText": "while(!mIterList.test(mLevel))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!mIterList.down(mLevel))"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (RootNodeT* root = nullptr ; this ->)",
    "insertText": "getNode(root)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (bbox .)",
    "insertText": "max() = bbox.min().offsetBy(mIterList.getChildDim(mLevel + 1) - 1)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (ostr<<\" c \"<<mIterList .)",
    "insertText": "pos(lvl)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (} CoordBBox bbox ; this ->)",
    "insertText": "getBoundingBox(bbox)"
  },
  {
    "label": "LeafIteratorBase()",
    "kind": "Method",
    "detail": "Function (} template<TreeT,RootChildOnIterT> class LeafIteratorBase { public : using RootIterT = RootChildOnIterT ; using RootNodeT = RootIterT::NodeType ; using NCRootNodeT = RootIterT::NonConstNodeType ; const Index ROOT_LEVEL = RootNodeT::LEVEL ; using InvTreeT = iter::InvertedTree<NCRootNodeT,ROOT_LEVEL>::Type ; using NCLeafNodeT = InvTreeT::Front ; using LeafNodeT = CopyConstness<RootNodeT,NCLeafNodeT>::Type ; const Index LEAF_LEVEL = 0,LEAF_PARENT_LEVEL = LEAF_LEVEL + 1 ; using RootIterTraits = IterTraits<NCRootNodeT,RootIterT> ;)",
    "insertText": "LeafIteratorBase(): mIterList(nullptr), mTree(nullptr)"
  },
  {
    "label": "LeafIteratorBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafIteratorBase(TreeT& tree): mIterList(nullptr), mTree(&tree)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index lvl = ROOT_LEVEL ;)",
    "insertText": "for(; lvl > 0 && mIterList.down(lvl); --lvl)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(lvl > 0) this->next()"
  },
  {
    "label": "LeafIteratorBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LeafIteratorBase(const LeafIteratorBase& other): mIterList(other.mIterList), mTree(other.mTree)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LeafIteratorBase&)",
    "insertText": "operator(const LeafIteratorBase& other)"
  },
  {
    "label": "getLeaf()",
    "kind": "Method",
    "detail": "Function (} return* this ; } LeafNodeT*)",
    "insertText": "getLeaf()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (LeafNodeT* n = nullptr ; mIterList .)",
    "insertText": "getNode(LEAF_LEVEL, n)"
  },
  {
    "label": "down()",
    "kind": "Method",
    "detail": "Function (mIterList .)",
    "insertText": "down(LEAF_PARENT_LEVEL)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (mIterList .)",
    "insertText": "next(lvl)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { do {)",
    "insertText": "if(lvl == ROOT_LEVEL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + lvl ;)",
    "insertText": "if(mIterList.test(lvl)) mIterList.next(lvl)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!mIterList.test(lvl))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(lvl > LEAF_PARENT_LEVEL && mIterList.down(lvl))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (mSize = this ->)",
    "insertText": "size()"
  },
  {
    "label": "IteratorRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IteratorRange(IteratorRange& other, tbb::split): mIter(other.mIter), mGrainSize(other.mGrainSize), mSize(other.mSize >> 1)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "increment(mSize)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} const IterT&)",
    "insertText": "iterator()"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index n = 0 ;)",
    "insertText": "for(IterT it(mIter); it.test(); ++n, ++it)"
  }
]