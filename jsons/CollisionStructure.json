[
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FCollisionStructure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionStructure"
  },
  {
    "label": "FCollisionStructure()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PhysicsEngine / AggregateGeom . h \" # include \" PhysicsEngine / CollisionQueryFilterCallback . h \" struct FHitResult ; class FCollisionStructure { TArray<bool> ValidFlag ; TArray<FBox> Bounds ; TArray<FKAggregateGeom> Geom ; TArray<FTransform> Transform ; TArray<FCollisionFilterData> QueryFilter ; TArray<FCollisionFilterData> SimFilter ; TArray<int32> FreeList ;)",
    "insertText": "FCollisionStructure()"
  },
  {
    "label": "CreateCollisionEntry()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "CreateCollisionEntry(const FKAggregateGeom& InGeom, const FTransform& InTransform, const FCollisionFilterData& InQueryFilter, const FCollisionFilterData& InSimFilter)"
  },
  {
    "label": "DestroyCollisionEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCollisionEntry(int32 EntryIndex)"
  },
  {
    "label": "SetEntryTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryTransform(int32 EntryIndex, const FTransform& InTransform)"
  },
  {
    "label": "RaycastSingle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RaycastSingle(const FVector& Start, const FVector& End, FHitResult& OutHit, const FCollisionFilterData& QueryFilter)"
  },
  {
    "label": "EntryIsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EntryIsValid(int32 EntryIndex)"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateBounds(int32 EntryIndex)"
  }
]