[
  {
    "label": "FSynchronizedInterprocessMemory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSynchronizedInterprocessMemory"
  },
  {
    "label": "FSynchronizedInterprocessMemory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformProcess . h \" namespace IPC { class FSynchronizedInterprocessMemory { FPlatformProcess::FSemaphore* Mutex ; FPlatformMemory::FSharedMemoryRegion* Memory ;)",
    "insertText": "FSynchronizedInterprocessMemory(FPlatformProcess::FSemaphore * InMutex, FPlatformMemory::FSharedMemoryRegion * InMemory) : Mutex(InMutex) , Memory(InMemory)"
  },
  {
    "label": "FSynchronizedInterprocessMemory()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FSynchronizedInterprocessMemory()"
  },
  {
    "label": "DeleteInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteInterprocessSynchObject(Mutex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Mutex = NULL ; })",
    "insertText": "if(Memory)"
  },
  {
    "label": "UnmapNamedSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapNamedSharedMemoryRegion(Memory)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Memory = NULL ; } } FSynchronizedInterprocessMemory*)",
    "insertText": "Create(const TCHAR* Name, SIZE_T Size)"
  },
  {
    "label": "MapNamedSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (FPlatformMemory::FSharedMemoryRegion* Memory =)",
    "insertText": "MapNamedSharedMemoryRegion(Name, true, FPlatformMemory::ESharedMemoryAccess::Read | FPlatformMemory::ESharedMemoryAccess::Write, Size)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Memory->GetAddress(), Memory->GetSize())"
  },
  {
    "label": "NewInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (FPlatformProcess::FSemaphore* Mutex =)",
    "insertText": "NewInterprocessSynchObject(Name, true)"
  },
  {
    "label": "OpenExisting()",
    "kind": "Method",
    "detail": "Function (} FSynchronizedInterprocessMemory*)",
    "insertText": "OpenExisting(const TCHAR* Name, SIZE_T Size)"
  },
  {
    "label": "MapNamedSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (FPlatformMemory::FSharedMemoryRegion* Memory =)",
    "insertText": "MapNamedSharedMemoryRegion(Name, false, FPlatformMemory::ESharedMemoryAccess::Read | FPlatformMemory::ESharedMemoryAccess::Write, Size)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Write(const FString& String, uint32 MaxMillisecondsToWait = 0)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (Mutex ->)",
    "insertText": "Lock()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!Mutex->TryLock(MaxMillisecondsToWait * 1000000ULL))"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strcpy(RawMemory, Memory->GetSize(), *String)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (Mutex ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (OutString =)",
    "insertText": "FString(RawMemory)"
  }
]