[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FIoHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoHash"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FCompressedBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressedBuffer"
  },
  {
    "label": "FDecoderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecoderContext"
  },
  {
    "label": "FCompressedBufferReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressedBufferReader"
  },
  {
    "label": "FCompressedBufferReaderSourceScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompressedBufferReaderSourceScope"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" # include \" Memory / CompositeBuffer . h \" # include \" Memory / MemoryFwd . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / RemoveReference . h \" # include \" Templates / UnrealTemplate . h \" class FArchive ; struct FIoHash ; namespace FOodleDataCompression { enum class ECompressionLevel : int8 ; } namespace FOodleDataCompression { enum class ECompressor : uint8 ; } namespace UE::CompressedBuffer::Private { struct FHeader ; } using ECompressedBufferCompressionLevel = FOodleDataCompression::ECompressionLevel ; using ECompressedBufferCompressor = FOodleDataCompression::ECompressor ; enum class ECompressedBufferDecompressFlags : uint32 { None = 0,IntermediateBuffer = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECompressedBufferDecompressFlags)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (class FCompressedBuffer { public : [ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "Compress(const FCompositeBuffer& RawData)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "Compress(const FSharedBuffer& RawData)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "Compress(const FCompositeBuffer& RawData, ECompressedBufferCompressor Compressor, ECompressedBufferCompressionLevel CompressionLevel, uint64 BlockSize = 0)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "Compress(const FSharedBuffer& RawData, ECompressedBufferCompressor Compressor, ECompressedBufferCompressionLevel CompressionLevel, uint64 BlockSize = 0)"
  },
  {
    "label": "FromCompressed()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "FromCompressed(const FCompositeBuffer& CompressedData)"
  },
  {
    "label": "FromCompressed()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "FromCompressed(FCompositeBuffer&& CompressedData)"
  },
  {
    "label": "FromCompressed()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "FromCompressed(const FSharedBuffer& CompressedData)"
  },
  {
    "label": "FromCompressed()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "FromCompressed(FSharedBuffer&& CompressedData)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "Load(FArchive& Ar)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FArchive& Ar)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "IsOwned()"
  },
  {
    "label": "MakeOwned()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FCompressedBuffer)",
    "insertText": "MakeOwned()"
  },
  {
    "label": "GetCompressed()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] const FCompositeBuffer&)",
    "insertText": "GetCompressed()"
  },
  {
    "label": "GetCompressedSize()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint64)",
    "insertText": "GetCompressedSize()"
  },
  {
    "label": "GetRawSize()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] uint64)",
    "insertText": "GetRawSize()"
  },
  {
    "label": "GetRawHash()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FIoHash)",
    "insertText": "GetRawHash()"
  },
  {
    "label": "TryGetCompressParameters()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "TryGetCompressParameters(ECompressedBufferCompressor& OutCompressor, ECompressedBufferCompressionLevel& OutCompressionLevel, uint64& OutBlockSize)"
  },
  {
    "label": "TryDecompressTo()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "TryDecompressTo(FMutableMemoryView RawView, ECompressedBufferDecompressFlags Flags = ECompressedBufferDecompressFlags::None)"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSharedBuffer)",
    "insertText": "Decompress()"
  },
  {
    "label": "DecompressToComposite()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompositeBuffer)",
    "insertText": "DecompressToComposite()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FCompressedBuffer Null ; private : FCompositeBuffer CompressedData ; } ; const FCompressedBuffer FCompressedBuffer::Null ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCompressedBuffer& Buffer)"
  },
  {
    "label": "FCompressedBufferReader()",
    "kind": "Method",
    "detail": "Function (namespace UE::CompressedBuffer::Private { struct FDecoderContext { uint64 HeaderOffset = MAX_uint64 ; uint64 HeaderSize = 0 ; uint32 HeaderCrc32 = 0 ; uint32 RawBlockIndex = MAX_uint32 ; FUniqueBuffer Header ; FUniqueBuffer RawBlock ; FUniqueBuffer CompressedBlock ; } ; } class FCompressedBufferReader { public :)",
    "insertText": "FCompressedBufferReader()"
  },
  {
    "label": "FCompressedBufferReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompressedBufferReader(FArchive& Archive)"
  },
  {
    "label": "FCompressedBufferReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompressedBufferReader(const FCompressedBuffer& Buffer)"
  },
  {
    "label": "ResetBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBuffers()"
  },
  {
    "label": "ResetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSource()"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(FArchive& Archive)"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(const FCompressedBuffer& Buffer)"
  },
  {
    "label": "HasSource()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "HasSource()"
  },
  {
    "label": "TryDecompressTo()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "TryDecompressTo(FMutableMemoryView RawView, uint64 RawOffset = 0, ECompressedBufferDecompressFlags Flags = ECompressedBufferDecompressFlags::None)"
  },
  {
    "label": "Decompress()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FSharedBuffer)",
    "insertText": "Decompress(uint64 RawOffset = 0, uint64 RawSize = MAX_uint64)"
  },
  {
    "label": "DecompressToComposite()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FCompositeBuffer)",
    "insertText": "DecompressToComposite(uint64 RawOffset = 0, uint64 RawSize = MAX_uint64)"
  },
  {
    "label": "TryReadHeader()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryReadHeader(UE::CompressedBuffer::Private::FHeader& OutHeader, FMemoryView& OutHeaderView)"
  },
  {
    "label": "FCompressedBufferReaderSourceScope()",
    "kind": "Method",
    "detail": "Function (FArchive* SourceArchive = nullptr ; const FCompressedBuffer* SourceBuffer = nullptr ; UE::CompressedBuffer::Private::FDecoderContext Context ; } ; class FCompressedBufferReaderSourceScope { public :)",
    "insertText": "FCompressedBufferReaderSourceScope(FCompressedBufferReader& InReader, FArchive& InArchive) : Reader(InReader)"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "SetSource(InArchive)"
  },
  {
    "label": "FCompressedBufferReaderSourceScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCompressedBufferReaderSourceScope(FCompressedBufferReader& InReader, const FCompressedBuffer& InBuffer) : Reader(InReader)"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (Reader .)",
    "insertText": "SetSource(InBuffer)"
  },
  {
    "label": "FCompressedBufferReaderSourceScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCompressedBufferReaderSourceScope()"
  }
]