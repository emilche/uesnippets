[
  {
    "label": "FAssetEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetEditorToolkit"
  },
  {
    "label": "FExtensibilityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtensibilityManager"
  },
  {
    "label": "ISoundCueEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundCueEditor"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "UDialogueWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDialogueWave"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundCue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundCue"
  },
  {
    "label": "USoundEffectPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectPreset"
  },
  {
    "label": "USoundNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundNode"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FDialogueContextMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDialogueContextMapping"
  },
  {
    "label": "IAudioEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioEditorModule"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" ISoundClassEditor . h \" # include \" ISoundCueEditor . h \" # include \" ISoundSubmixEditor . h \" # include \" Logging / LogMacros . h \" # include \" Modules / ModuleInterface . h \" # include \" Templates / SharedPointer . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" Toolkits / IToolkit . h \" # include \" UObject / NameTypes . h \" class FAssetEditorToolkit ; class FExtensibilityManager ; class ISoundCueEditor ; class IToolkitHost ; class UDialogueWave ; class UPackage ; class USoundClass ; class USoundCue ; class USoundEffectPreset ; class USoundNode ; class USoundSubmixBase ; class USoundWave ; class UWidgetBlueprint ; struct FDialogueContextMapping ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAudioEditor, Log, All)"
  },
  {
    "label": "RegisterAssetActions()",
    "kind": "Method",
    "detail": "Function (const FName AudioEditorAppIdentifier ; class IAudioEditorModule : public IModuleInterface { public : void)",
    "insertText": "RegisterAssetActions()"
  },
  {
    "label": "RegisterAudioMixerAssetActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAudioMixerAssetActions()"
  },
  {
    "label": "RegisterEffectPresetAssetActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEffectPresetAssetActions()"
  },
  {
    "label": "CreateSoundClassEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FAssetEditorToolkit>)",
    "insertText": "CreateSoundClassEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, USoundClass* InSoundClass)"
  },
  {
    "label": "CreateSoundSubmixEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FAssetEditorToolkit>)",
    "insertText": "CreateSoundSubmixEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, USoundSubmixBase* InSoundSubmix)"
  },
  {
    "label": "GetSoundClassMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSoundClassMenuExtensibilityManager()"
  },
  {
    "label": "GetSoundClassToolBarExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSoundClassToolBarExtensibilityManager()"
  },
  {
    "label": "GetSoundSubmixMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSoundSubmixMenuExtensibilityManager()"
  },
  {
    "label": "GetSoundSubmixToolBarExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSoundSubmixToolBarExtensibilityManager()"
  },
  {
    "label": "CreateSoundCueEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISoundCueEditor>)",
    "insertText": "CreateSoundCueEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, USoundCue* SoundCue)"
  },
  {
    "label": "GetSoundCueMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSoundCueMenuExtensibilityManager()"
  },
  {
    "label": "GetSoundCueToolBarExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSoundCueToolBarExtensibilityManager()"
  },
  {
    "label": "ReplaceSoundNodesInGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSoundNodesInGraph(USoundCue* SoundCue, UDialogueWave* DialogueWave, TArray<USoundNode*>& NodesToReplace, const FDialogueContextMapping& ContextMapping)"
  },
  {
    "label": "ImportSoundWave()",
    "kind": "Method",
    "detail": "Function (USoundWave*)",
    "insertText": "ImportSoundWave(UPackage* const SoundWavePackage, const FString& InSoundWaveAssetName, const FString& InWavFilename)"
  }
]