[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_TLS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_TLS_H_ # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_POSIX) #include <pthread.h> #endif #if BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_MAC) && defined(ARCH_CPU_X86_64)"
  },
  {
    "label": "FastTlsGet()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void*)",
    "insertText": "FastTlsGet(PartitionTlsKey index)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (intptr_t result ;)",
    "insertText": "static_assert(sizeof index <= sizeof(intptr_t))"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "asm(\"movq %%gs:(,%1,8), %0;\" : \"=r\"(result) : \"r\"(static_cast<intptr_t>(index)))"
  },
  {
    "label": "PartitionTlsCreate()",
    "kind": "Method",
    "detail": "Function (} } # endif PA_ALWAYS_INLINE bool)",
    "insertText": "PartitionTlsCreate(PartitionTlsKey* key, void (*destructor)(void*))"
  },
  {
    "label": "PartitionTlsGet()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void*)",
    "insertText": "PartitionTlsGet(PartitionTlsKey key)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_MAC) && defined(ARCH_CPU_X86_64) PA_DCHECK(pthread_getspecific(key) == FastTlsGet(key))"
  },
  {
    "label": "pthread_getspecific()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "pthread_getspecific(key)"
  },
  {
    "label": "PartitionTlsSet()",
    "kind": "Method",
    "detail": "Function (# endif } PA_ALWAYS_INLINE void)",
    "insertText": "PartitionTlsSet(PartitionTlsKey key, void* value)"
  },
  {
    "label": "pthread_setspecific()",
    "kind": "Method",
    "detail": "Function (int ret =)",
    "insertText": "pthread_setspecific(key, value)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!ret)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) bool PartitionTlsCreate(PartitionTlsKey* key, void (*destructor)(void*))"
  },
  {
    "label": "GetLastError()",
    "kind": "Method",
    "detail": "Function (DWORD saved_error =)",
    "insertText": "GetLastError()"
  },
  {
    "label": "TlsGetValue()",
    "kind": "Method",
    "detail": "Function (void* ret =)",
    "insertText": "TlsGetValue(key)"
  },
  {
    "label": "TlsSetValue()",
    "kind": "Method",
    "detail": "Function (BOOL ret =)",
    "insertText": "TlsSetValue(key, value)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(ret)"
  },
  {
    "label": "PartitionTlsSetOnDllProcessDetach()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PartitionTlsSetOnDllProcessDetach(void (*callback)())"
  },
  {
    "label": "PA_IMMEDIATE_CRASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_IMMEDIATE_CRASH()"
  }
]