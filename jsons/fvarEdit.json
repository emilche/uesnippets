[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrFVarEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrFVarEdit"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_HBRFVAREDIT_H # define OPENSUBDIV3_HBRFVAREDIT_H # include \" . . / hbr / hierarchicalEdit . h \" # include \" . . / hbr / vertexEdit . h \" # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> class HbrFVarEdit ; template<class T> std::ostream&)",
    "insertText": "operator(std::ostream& out, const HbrFVarEdit<T>& path)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (out<<\" vertex)",
    "insertText": "path(\" << path.faceid << ' '; for (int i = 0; i < path.nsubfaces; ++i) { out << static_cast<int>(path.subfaces[i]) << ' '; } return out << static_cast<int>(path.vertexid) << \"), edit = (\" << path.edit[0] << ',' << path.edit[1] << ',' << path.edit[2] << ')"
  },
  {
    "label": "HbrFVarEdit()",
    "kind": "Method",
    "detail": "Function (} template<class T> class HbrFVarEdit : public HbrHierarchicalEdit<T> { public :)",
    "insertText": "HbrFVarEdit(int _faceid, int _nsubfaces, unsigned char *_subfaces, unsigned char _vertexid, int _index, int _width, int _offset, typename HbrHierarchicalEdit<T>::Operation _op, float *_edit) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), vertexid(_vertexid), index(_index), width(_width), offset(_offset), op(_op)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (edit = new float [ width ] ;)",
    "insertText": "memcpy(edit, _edit, width * sizeof(float))"
  },
  {
    "label": "HbrFVarEdit()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HbrFVarEdit(int _faceid, int _nsubfaces, int *_subfaces, int _vertexid, int _index, int _width, int _offset, typename HbrHierarchicalEdit<T>::Operation _op, float *_edit) : HbrHierarchicalEdit<T>(_faceid, _nsubfaces, _subfaces), vertexid(_vertexid), index(_index), width(_width), offset(_offset), op(_op)"
  },
  {
    "label": "HbrFVarEdit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "HbrFVarEdit()"
  },
  {
    "label": "GetVertexID()",
    "kind": "Method",
    "detail": "Function (delete [ ] edit ; } unsigned char)",
    "insertText": "GetVertexID()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (HbrFVarData<T>& fvt = face ->)",
    "insertText": "GetVertex(vertexid)->GetFVarData(face)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (HbrFVarData<T>& newfvt = face ->)",
    "insertText": "GetVertex(vertexid)->NewFVarData(face)"
  },
  {
    "label": "SetAllData()",
    "kind": "Method",
    "detail": "Function (newfvt .)",
    "insertText": "SetAllData(face->GetMesh()->GetTotalFVarWidth(), fvt.GetData(0))"
  },
  {
    "label": "ApplyFVarEdit()",
    "kind": "Method",
    "detail": "Function (newfvt .)",
    "insertText": "ApplyFVarEdit(*const_cast<const HbrFVarEdit<T>*>(this))"
  }
]