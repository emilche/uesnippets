[
  {
    "label": "type2index",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type2index"
  },
  {
    "label": "type2indexpair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type2indexpair"
  },
  {
    "label": "NumTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NumTraits"
  },
  {
    "label": "is_compile_time_constant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_compile_time_constant"
  },
  {
    "label": "IndexTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexTuple"
  },
  {
    "label": "IndexTupleExtractor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexTupleExtractor"
  },
  {
    "label": "array_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "array_size"
  },
  {
    "label": "tuple_coeff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_coeff"
  },
  {
    "label": "IndexList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexList"
  },
  {
    "label": "IndexPairList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexPairList"
  },
  {
    "label": "index_known_statically_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_known_statically_impl"
  },
  {
    "label": "all_indices_known_statically_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "all_indices_known_statically_impl"
  },
  {
    "label": "indices_statically_known_to_increase_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "indices_statically_known_to_increase_impl"
  },
  {
    "label": "index_statically_eq_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_statically_eq_impl"
  },
  {
    "label": "index_statically_ne_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_statically_ne_impl"
  },
  {
    "label": "index_statically_gt_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_statically_gt_impl"
  },
  {
    "label": "index_statically_lt_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_statically_lt_impl"
  },
  {
    "label": "index_pair_first_statically_eq_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_pair_first_statically_eq_impl"
  },
  {
    "label": "index_pair_second_statically_eq_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_pair_second_statically_eq_impl"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_INDEX_LIST_H # define EIGEN_CXX11_TENSOR_TENSOR_INDEX_LIST_H # if EIGEN_HAS_CONSTEXPR&& EIGEN_HAS_VARIADIC_TEMPLATES # define EIGEN_HAS_INDEX_LIST namespace Eigen { template<Index n> struct type2index { const Index value = n ; EIGEN_DEVICE_FUNC operator)",
    "insertText": "Index()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(val == n)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "set(const IndexPair<Index>& val)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(val.first == f)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(val.second == s)"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (} } ; template<Index n> struct NumTraits<type2index<n>> { typedef Index Real ; enum { IsComplex = 0,RequireInitialization = false,ReadCost = 1,AddCost = 1,MulCost = 1 } ; EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR EIGEN_STRONG_INLINE Real)",
    "insertText": "epsilon()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (val = internal::convert_index<)",
    "insertText": "T(new_val)"
  },
  {
    "label": "update_value()",
    "kind": "Method",
    "detail": "Function (} template<Index n> EIGEN_DEVICE_FUNC void)",
    "insertText": "update_value(type2index<n>& val, Index new_val)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (val .)",
    "insertText": "set(new_val)"
  },
  {
    "label": "update_value()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC void)",
    "insertText": "update_value(T& val, IndexPair<Index> new_val)"
  },
  {
    "label": "update_value()",
    "kind": "Method",
    "detail": "Function (val = new_val ; } template<Index f,Index s> EIGEN_DEVICE_FUNC void)",
    "insertText": "update_value(type2indexpair<f, s>& val, IndexPair<Index> new_val)"
  },
  {
    "label": "IndexTuple()",
    "kind": "Method",
    "detail": "Function (} template<T> struct is_compile_time_constant { bool value = false ; } ; template<Index idx> struct is_compile_time_constant<type2index<idx>> { bool value = true ; } ; template<Index idx> struct is_compile_time_constant<const type2index<idx>> { bool value = true ; } ; template<Index idx> struct is_compile_time_constant<type2index<idx>&> { bool value = true ; } ; template<Index idx> struct is_compile_time_constant<const type2index<idx>&> { bool value = true ; } ; template<Index f,Index s> struct is_compile_time_constant<type2indexpair<f,s>> { bool value = true ; } ; template<Index f,Index s> struct is_compile_time_constant<const type2indexpair<f,s>> { bool value = true ; } ; template<Index f,Index s> struct is_compile_time_constant<type2indexpair<f,s>&> { bool value = true ; } ; template<Index f,Index s> struct is_compile_time_constant<const type2indexpair<f,s>&> { bool value = true ; } ; template<. . . T> struct IndexTuple ; template<T,. . . O> struct IndexTuple<T,O . . .> { EIGEN_DEVICE_FUNC)",
    "insertText": "IndexTuple() : head(), others()"
  },
  {
    "label": "IndexTuple()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexTuple(const T& v, const O... o) : head(v), others(o...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} int count = 1 +)",
    "insertText": "sizeof(O)"
  },
  {
    "label": "IndexTuple()",
    "kind": "Method",
    "detail": "Function (T head ; IndexTuple<O . . .> others ; typedef T Head ; typedef IndexTuple<O . . .> Other ; } ; template<T> struct IndexTuple<T> { EIGEN_DEVICE_FUNC)",
    "insertText": "IndexTuple() : head()"
  },
  {
    "label": "IndexTuple()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexTuple(const T& v) : head(v)"
  },
  {
    "label": "get_val()",
    "kind": "Method",
    "detail": "Function (} int count = 1 ; T head ; typedef T Head ; } ; template<int N,. . . T> struct IndexTupleExtractor ; template<int N,T,. . . O> struct IndexTupleExtractor<N,T,O . . .> { typedef IndexTupleExtractor<N - 1,O . . .>::ValType ValType ; EIGEN_DEVICE_FUNC ValType&)",
    "insertText": "get_val(IndexTuple<T, O...>& val)"
  },
  {
    "label": "get_val()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const ValType&)",
    "insertText": "get_val(const IndexTuple<T, O...>& val)"
  },
  {
    "label": "set_val()",
    "kind": "Method",
    "detail": "Function (} template<V> EIGEN_DEVICE_FUNC void)",
    "insertText": "set_val(IndexTuple<T, O...>& val, V& new_val)"
  },
  {
    "label": "set_val()",
    "kind": "Method",
    "detail": "Function (IndexTupleExtractor<N - 1,O . . .)",
    "insertText": "set_val(val.others, new_val)"
  },
  {
    "label": "array_get()",
    "kind": "Method",
    "detail": "Function (val . head = new_val ; } } ; template<int N,T,. . . O> EIGEN_DEVICE_FUNC IndexTupleExtractor<N,T,O . . .>::ValType&)",
    "insertText": "array_get(IndexTuple<T, O...>& tuple)"
  },
  {
    "label": "array_get()",
    "kind": "Method",
    "detail": "Function (} template<int N,T,. . . O> EIGEN_DEVICE_FUNC const IndexTupleExtractor<N,T,O . . .>::ValType&)",
    "insertText": "array_get(const IndexTuple<T, O...>& tuple)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . O> struct array_size<IndexTuple<T,O . . .>> { const size_t value = IndexTuple<T,O . . .>::count ; } ; template<T,. . . O> struct array_size<const IndexTuple<T,O . . .>> { const size_t value = IndexTuple<T,O . . .>::count ; } ; template<Index Idx,ValueT> struct tuple_coeff { template<. . . T> EIGEN_DEVICE_FUNC ValueT)",
    "insertText": "get(const Index i, const IndexTuple<T...>& t)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> EIGEN_DEVICE_FUNC void)",
    "insertText": "set(const Index i, IndexTuple<T...>& t, const ValueT& value)"
  },
  {
    "label": "update_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update_value(array_get<Idx>(t), value)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} else { tuple_coeff<Idx - 1,ValueT)",
    "insertText": "set(i, t, value)"
  },
  {
    "label": "value_known_statically()",
    "kind": "Method",
    "detail": "Function (} } template<. . . T> EIGEN_DEVICE_FUNC bool)",
    "insertText": "value_known_statically(const Index i, const IndexTuple<T...>& t)"
  },
  {
    "label": "values_up_to_known_statically()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> EIGEN_DEVICE_FUNC bool)",
    "insertText": "values_up_to_known_statically(const IndexTuple<T...>& t)"
  },
  {
    "label": "values_up_to_statically_known_to_increase()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> EIGEN_DEVICE_FUNC bool)",
    "insertText": "values_up_to_statically_known_to_increase(const IndexTuple<T...>& t)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueT> struct tuple_coeff<0,ValueT> { template<. . . T> EIGEN_DEVICE_FUNC ValueT)",
    "insertText": "get(const Index , const IndexTuple<T...>& t)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> EIGEN_DEVICE_FUNC void)",
    "insertText": "set(const Index i, IndexTuple<T...>& t, const ValueT value)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(i == 0)"
  },
  {
    "label": "update_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update_value(array_get<0>(t), value)"
  },
  {
    "label": "value_known_statically()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> EIGEN_DEVICE_FUNC bool)",
    "insertText": "value_known_statically(const Index i, const IndexTuple<T...>&)"
  },
  {
    "label": "values_up_to_known_statically()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> EIGEN_DEVICE_FUNC bool)",
    "insertText": "values_up_to_known_statically(const IndexTuple<T...>&)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Index)",
    "insertText": "get(const Index i)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC void)",
    "insertText": "set(const Index i, const Index value)"
  },
  {
    "label": "IndexList()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexList(const internal::IndexTuple<FirstType, OtherTypes...>& other) : internal::IndexTuple<FirstType, OtherTypes...>(other)"
  },
  {
    "label": "IndexList()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexList(FirstType& first, OtherTypes... other) : internal::IndexTuple<FirstType, OtherTypes...>(first, other...)"
  },
  {
    "label": "IndexList()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexList() : internal::IndexTuple<FirstType, OtherTypes...>()"
  },
  {
    "label": "value_known_statically()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "value_known_statically(const Index i)"
  },
  {
    "label": "all_values_known_statically()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "all_values_known_statically()"
  },
  {
    "label": "values_statically_known_to_increase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "values_statically_known_to_increase()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<FirstType,. . . OtherTypes> std::ostream&)",
    "insertText": "operator(std::ostream& os, const IndexList<FirstType, OtherTypes...>& dims)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (os<<\" [ \" ;)",
    "insertText": "for(size_t i = 0; i < 1 + sizeof...(OtherTypes); ++i)"
  },
  {
    "label": "make_index_list()",
    "kind": "Method",
    "detail": "Function (os<<dims [ i ] ; } os<<\" ] \" ; return os ; } template<FirstType,. . . OtherTypes> IndexList<FirstType,OtherTypes . . .>)",
    "insertText": "make_index_list(FirstType val1, OtherTypes... other_vals)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<FirstType,. . . OtherTypes> struct IndexPairList : internal::IndexTuple<FirstType,OtherTypes . . .> { EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC IndexPair<Index>)",
    "insertText": "operator(const Index i)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC void)",
    "insertText": "set(const Index i, const IndexPair<Index> value)"
  },
  {
    "label": "IndexPairList()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexPairList(const internal::IndexTuple<FirstType, OtherTypes...>& other) : internal::IndexTuple<FirstType, OtherTypes...>(other)"
  },
  {
    "label": "IndexPairList()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "IndexPairList() : internal::IndexTuple<FirstType, OtherTypes...>()"
  },
  {
    "label": "array_prod()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<FirstType,. . . OtherTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "array_prod(const IndexList<FirstType, OtherTypes...>& sizes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index result = 1 ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(size_t i = 0; i < array_size<IndexList<FirstType, OtherTypes...> >::value; ++i)"
  },
  {
    "label": "array_get()",
    "kind": "Method",
    "detail": "Function (result* = sizes [ i ] ; } return result ; } template<FirstType,. . . OtherTypes> struct array_size<IndexList<FirstType,OtherTypes . . .>> { const size_t value = array_size<IndexTuple<FirstType,OtherTypes . . .>>::value ; } ; template<FirstType,. . . OtherTypes> struct array_size<const IndexList<FirstType,OtherTypes . . .>> { const size_t value = array_size<IndexTuple<FirstType,OtherTypes . . .>>::value ; } ; template<FirstType,. . . OtherTypes> struct array_size<IndexPairList<FirstType,OtherTypes . . .>> { const size_t value = std::tuple_size<std::tuple<FirstType,OtherTypes . . .>>::value ; } ; template<FirstType,. . . OtherTypes> struct array_size<const IndexPairList<FirstType,OtherTypes . . .>> { const size_t value = std::tuple_size<std::tuple<FirstType,OtherTypes . . .>>::value ; } ; template<Index N,FirstType,. . . OtherTypes> EIGEN_DEVICE_FUNC Index)",
    "insertText": "array_get(IndexList<FirstType, OtherTypes...>& a)"
  },
  {
    "label": "array_get()",
    "kind": "Method",
    "detail": "Function (} template<Index N,FirstType,. . . OtherTypes> EIGEN_DEVICE_FUNC Index)",
    "insertText": "array_get(const IndexList<FirstType, OtherTypes...>& a)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<T> struct index_known_statically_impl { EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Index)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<FirstType,. . . OtherTypes> struct index_known_statically_impl<const IndexList<FirstType,OtherTypes . . .>> { EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Index i)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct all_indices_known_statically_impl { bool)",
    "insertText": "run()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Tx> struct index_statically_eq_impl { EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(Index, Index)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<FirstType,. . . OtherTypes> struct index_statically_eq_impl<const IndexList<FirstType,OtherTypes . . .>> { EIGEN_DEVICE_FUNC bool)",
    "insertText": "run(const Index i, const Index value)"
  },
  {
    "label": "all_indices_known_statically()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "all_indices_known_statically()"
  },
  {
    "label": "indices_statically_known_to_increase()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "indices_statically_known_to_increase()"
  },
  {
    "label": "index_statically_eq()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "index_statically_eq(Index i, Index value)"
  },
  {
    "label": "index_statically_ne()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "index_statically_ne(Index i, Index value)"
  },
  {
    "label": "index_statically_gt()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "index_statically_gt(Index i, Index value)"
  },
  {
    "label": "index_statically_lt()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "index_statically_lt(Index i, Index value)"
  },
  {
    "label": "index_pair_first_statically_eq()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "index_pair_first_statically_eq(Index i, Index value)"
  },
  {
    "label": "index_pair_second_statically_eq()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR bool)",
    "insertText": "index_pair_second_statically_eq(Index i, Index value)"
  }
]