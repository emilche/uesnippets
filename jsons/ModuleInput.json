[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TCompressedFloatDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCompressedFloatDetails"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FObjectInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectInitializer"
  },
  {
    "label": "FModuleInputSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleInputSetup"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" ModuleInput . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogModularInput, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MBoolean)",
    "insertText": "UMETA(DisplayName = \"Digital (bool)\"), MAxis1D UMETA(DisplayName = \"Axis1D (float)\"), MAxis2D UMETA(DisplayName = \"Axis2D (Vector2D)\"), MAxis3D UMETA(DisplayName = \"Axis3D (Vector)\")"
  },
  {
    "label": "MaxBitValue()",
    "kind": "Method",
    "detail": "Function (LinearFunction = 0,SquaredFunction,CustomCurve } ; namespace ModularQuantize { template<int32 MaxValue,uint32 NumBits> struct TCompressedFloatDetails { int32)",
    "insertText": "MaxBitValue(1 << (NumBits - 1))"
  },
  {
    "label": "Bias()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Bias(1 << (NumBits - 1))"
  },
  {
    "label": "SerIntMax()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SerIntMax(1 << (NumBits - 0))"
  },
  {
    "label": "MaxDelta()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxDelta(1 << (NumBits - 0))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} ; template<int32 MaxValue,uint32 NumBits,T)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<T>&& NumBits < 32)> bool ToCompressedFloat(const T InValue, uint32& OutCompressedFloat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using Details = ModularQuantize::TCompressedFloatDetails<MaxValue,NumBits> ; bool clamp = false ; int64 ScaledValue ;)",
    "insertText": "if(MaxValue > Details::MaxBitValue)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Scale =)",
    "insertText": "T(Details::MaxBitValue)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (ScaledValue =)",
    "insertText": "TruncToInt(Scale * InValue)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (} else { int32 Scale = Details::MaxBitValue / MaxValue ; ScaledValue =)",
    "insertText": "RoundToInt(Scale * InValue)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} uint32 Delta = static_cast<)",
    "insertText": "uint32(ScaledValue + Details::Bias)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (clamp = true ; Delta = static_cast<)",
    "insertText": "int32(Delta)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} OutCompressedFloat = Delta ; return ! clamp ; } template<int32 MaxValue,uint32 NumBits,T)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<T>&& NumBits < 32)> bool FromCompressedFloat(const uint32 InCompressed, T& OutValue)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (using Details = ModularQuantize::TCompressedFloatDetails<MaxValue,NumBits> ; uint32 Delta = InCompressed ; T UnscaledValue = static_cast<)",
    "insertText": "T(static_cast<int32>(Delta) - Details::Bias)"
  },
  {
    "label": "MaxValue()",
    "kind": "Method",
    "detail": "Function (T InvScale =)",
    "insertText": "MaxValue(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (OutValue = UnscaledValue* InvScale ; } else { int32 Scale = Details::MaxBitValue / MaxValue ; T InvScale =)",
    "insertText": "T(1) / (T)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (OutValue = UnscaledValue* InvScale ; } return true ; } template<int32 MaxValue,uint32 NumBits,T)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<T>&& NumBits < 32)> bool WriteCompressedFloat(const T Value, FArchive& Ar)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (using Details = ModularQuantize::TCompressedFloatDetails<MaxValue,NumBits> ; uint32 CompressedValue ; bool clamp = ModularQuantize::ToCompressedFloat<MaxValue,)",
    "insertText": "NumBits(Value, CompressedValue)"
  },
  {
    "label": "SerializeInt()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SerializeInt(CompressedValue, Details::SerIntMax)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (ModularQuantize::FromCompressedFloat<MaxValue,)",
    "insertText": "NumBits(CompressedValue, Value)"
  },
  {
    "label": "NumBits()",
    "kind": "Method",
    "detail": "Function (bool success = true ; success& = ModularQuantize::WriteCompressedFloat<MaxValue,)",
    "insertText": "NumBits(InOutValue, Ar)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (using MAxis2D = FVector2D ; using MAxis3D = FVector ;)",
    "insertText": "FModuleInputValue()"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModuleInputValue(const FModuleInputValue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModuleInputValue&)",
    "insertText": "operator(const FModuleInputValue&)"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModuleInputValue(bool bInValue) : Value(bInValue ? 1.f : 0.f, 0.f, 0.f), ValueType(EModuleInputValueType::MBoolean)"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FModuleInputValue(MAxis1D InValue) : Value(InValue, 0.f, 0.f), ValueType(EModuleInputValueType::MAxis1D)"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FModuleInputValue(MAxis2D InValue) : Value(InValue.X, InValue.Y, 0.f), ValueType(EModuleInputValueType::MAxis2D)"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FModuleInputValue(MAxis3D InValue) : Value(InValue), ValueType(EModuleInputValueType::MAxis3D)"
  },
  {
    "label": "ReturnQuantized()",
    "kind": "Method",
    "detail": "Function (} FModuleInputValue)",
    "insertText": "ReturnQuantized()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (FModuleInputValue OutValue = Value ;)",
    "insertText": "switch(ValueType)"
  },
  {
    "label": "QuantizeValue()",
    "kind": "Method",
    "detail": "Function (break ; case EModuleInputValueType::MAxis2D :)",
    "insertText": "QuantizeValue(OutValue.Value.X)"
  },
  {
    "label": "QuantizeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuantizeValue(OutValue.Value.Y)"
  },
  {
    "label": "QuantizeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuantizeValue(OutValue.Value.Z)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "checkf(false, TEXT(\"Unsupported value type for module input value!\"))"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (break ; } return OutValue ; })",
    "insertText": "FModuleInputValue(EModuleInputValueType InValueType, MAxis3D InValue) : Value(InValue), ValueType(InValueType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value = FVector::ZeroVector ; } FModuleInputValue&)",
    "insertText": "operator(const FModuleInputValue& Rhs)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Value + = Rhs . Value ; ValueType =)",
    "insertText": "Max(ValueType, Rhs.ValueType)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FModuleInputValue)",
    "insertText": "Result(Lhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Result - = Rhs ; return Result ; } FModuleInputValue&)",
    "insertText": "operator(float Scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Value* = Scalar ; return* this ; } FModuleInputValue)",
    "insertText": "operator(const FModuleInputValue& Lhs, const float Rhs)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Result* = Rhs ; return Result ; } FModuleInputValue)",
    "insertText": "Clamp(const FModuleInputValue& InValue, const float InMin, const float InMax)"
  },
  {
    "label": "GetMagnitude()",
    "kind": "Method",
    "detail": "Function (FModuleInputValue OutValue = InValue ; float Mag = InValue .)",
    "insertText": "GetMagnitude()"
  },
  {
    "label": "SetMagnitude()",
    "kind": "Method",
    "detail": "Function (OutValue .)",
    "insertText": "SetMagnitude(InMin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Mag > InMax)"
  },
  {
    "label": "SetMagnitude()",
    "kind": "Method",
    "detail": "Function (OutValue .)",
    "insertText": "SetMagnitude(InMax)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return OutValue ; } template<T> T)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "ConvertToType()",
    "kind": "Method",
    "detail": "Function (} FModuleInputValue&)",
    "insertText": "ConvertToType(EModuleInputValueType Type)"
  },
  {
    "label": "FModuleInputValue()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FModuleInputValue(Type, Value)"
  },
  {
    "label": "ConvertToType()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FModuleInputValue&)",
    "insertText": "ConvertToType(const FModuleInputValue& Other)"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (} EModuleInputValueType)",
    "insertText": "GetValueType()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lerp(const FModuleInputValue& Min, const FModuleInputValue& Max, float Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "Lerp(Min.Value, Max.Value, Alpha)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Merge(const FModuleInputValue& From)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "SetMagnitude()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetMagnitude(float NewSize)"
  },
  {
    "label": "ToAxis1D()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ToAxis1D(FModuleInputValue& InValue)"
  },
  {
    "label": "ToAxis2D()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "ToAxis2D(FModuleInputValue& InValue)"
  },
  {
    "label": "ToAxis3D()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "ToAxis3D(FModuleInputValue& InValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(FModuleInputValue& ActionValue)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(BlueprintType, Blueprintable)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UDefaultModularVehicleInputModifier(const class FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer) , RiseRate(5.0f), FallRate(5.0f), InputCurveFunction(EFunctionType::LinearFunction)"
  },
  {
    "label": "UDefaultModularVehicleInputModifier()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "UDefaultModularVehicleInputModifier()"
  },
  {
    "label": "InterpInputValue()",
    "kind": "Method",
    "detail": "Function (FModuleInputValue)",
    "insertText": "InterpInputValue(float DeltaTime, const FModuleInputValue& CurrentValue, const FModuleInputValue& NewValue)"
  },
  {
    "label": "CalcControlFunction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcControlFunction(float InputValue)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FModuleInputSetup()"
  },
  {
    "label": "FModuleInputSetup()",
    "kind": "Method",
    "detail": "Function (Type = EModuleInputValueType::MBoolean ; })",
    "insertText": "FModuleInputSetup(const FName& InName, const EModuleInputValueType& InType) : Name(InName) , Type(InType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FModuleInputSetup& Rhs)"
  },
  {
    "label": "FScopedModuleInputInitializer()",
    "kind": "Method",
    "detail": "Function (} ; class FScopedModuleInputInitializer { public :)",
    "insertText": "FScopedModuleInputInitializer(TArray<struct FModuleInputSetup>& InSetupData)"
  },
  {
    "label": "FScopedModuleInputInitializer()",
    "kind": "Method",
    "detail": "Function (InitSetupData =& InSetupData ; } ~)",
    "insertText": "FScopedModuleInputInitializer()"
  },
  {
    "label": "HasSetup()",
    "kind": "Method",
    "detail": "Function (InitSetupData = nullptr ; } bool)",
    "insertText": "HasSetup()"
  },
  {
    "label": "FModuleInputContainer()",
    "kind": "Method",
    "detail": "Function (using FInputValues = TArray<FModuleInputValue> ;)",
    "insertText": "FModuleInputContainer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FInputNameMap NameMapOut ;)",
    "insertText": "Initialize(*FScopedModuleInputInitializer::GetSetup(), NameMapOut)"
  },
  {
    "label": "GetNumInputs()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "GetNumInputs()"
  },
  {
    "label": "GetValueAtIndex()",
    "kind": "Method",
    "detail": "Function (} FModuleInputValue)",
    "insertText": "GetValueAtIndex(int Index)"
  },
  {
    "label": "MergeValueAtIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeValueAtIndex(int Index, const FModuleInputValue& InValue)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (InputValues [ Index ] .)",
    "insertText": "Merge(InValue.ReturnQuantized())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FModuleInputContainer&)",
    "insertText": "operator(const FModuleInputContainer& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InputValues .)",
    "insertText": "Reset()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (InputValues = Other . InputValues ; } } return* this ; } void)",
    "insertText": "Initialize(TArray<FModuleInputSetup>& SetupData, FInputNameMap& NameMapOut)"
  },
  {
    "label": "ZeroValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroValues()"
  },
  {
    "label": "AddInput()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddInput(EModuleInputValueType Type, TSubclassOf<UDefaultModularVehicleInputModifier>& InputModifierClass)"
  },
  {
    "label": "RemoveAllInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllInputs()"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lerp(const FModuleInputContainer& Min, const FModuleInputContainer& Max, float Alpha)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(const FModuleInputContainer& From)"
  },
  {
    "label": "FInputInterface()",
    "kind": "Method",
    "detail": "Function (} ; class FInputInterface { public : using FInputNameMap = TMap<FName,int> ;)",
    "insertText": "FInputInterface(const FInputNameMap& InNameMap, FModuleInputContainer& InValueContainer) : NameMap(InNameMap) , ValueContainer(InValueContainer)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const FName& InName, const FModuleInputValue& InValue)"
  },
  {
    "label": "MergeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeValue(const FName& InName, const FModuleInputValue& InValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FModuleInputValue)",
    "insertText": "GetValue(const FName& InName)"
  },
  {
    "label": "GetMagnitude()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMagnitude(const FName& InName)"
  },
  {
    "label": "InputsNonZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputsNonZero()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (const FInputNameMap& NameMap ; FModuleInputContainer& ValueContainer ; } ;)",
    "insertText": "UCLASS(Abstract, BlueprintType, Blueprintable, EditInlineNew)"
  },
  {
    "label": "InitializeContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeContainer(TArray<FModuleInputSetup>& SetupData, FInputNameMap& NameMapOut)"
  },
  {
    "label": "BufferInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BufferInput(const FInputNameMap& InNameMap, const FName InName, const FModuleInputValue& InValue)"
  },
  {
    "label": "ProduceInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProduceInput(int32 PhysicsStep, int32 NumSteps, const FInputNameMap& InNameMap, FModuleInputContainer& InOutContainer)"
  }
]