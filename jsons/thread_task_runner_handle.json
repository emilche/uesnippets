[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ThreadTaskRunnerHandleOverrideForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadTaskRunnerHandleOverrideForTesting"
  },
  {
    "label": "blink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blink"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_TASK_RUNNER_HANDLE_H_ # define BASE_THREADING_THREAD_TASK_RUNNER_HANDLE_H_ # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / threading / sequenced_task_runner_handle . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT ThreadTaskRunnerHandle { public : [ [ nodiscard ] ] const scoped_refptr<SingleThreadTaskRunner>&)",
    "insertText": "Get()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "ThreadTaskRunnerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadTaskRunnerHandle(scoped_refptr<SingleThreadTaskRunner> task_runner) : contained_current_default_(std::move(task_runner))"
  },
  {
    "label": "ThreadTaskRunnerHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ThreadTaskRunnerHandle(const ThreadTaskRunnerHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadTaskRunnerHandle&)",
    "insertText": "operator(const ThreadTaskRunnerHandle&)"
  },
  {
    "label": "ThreadTaskRunnerHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadTaskRunnerHandle()"
  },
  {
    "label": "ThreadTaskRunnerHandleOverride()",
    "kind": "Method",
    "detail": "Function (private : SingleThreadTaskRunner::CurrentDefaultHandle contained_current_default_ ; } ; class BASE_EXPORT ThreadTaskRunnerHandleOverride { public :)",
    "insertText": "ThreadTaskRunnerHandleOverride(const ThreadTaskRunnerHandleOverride&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadTaskRunnerHandleOverride&)",
    "insertText": "operator(const ThreadTaskRunnerHandleOverride&)"
  },
  {
    "label": "ThreadTaskRunnerHandleOverride()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadTaskRunnerHandleOverride()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private : class ThreadTaskRunnerHandleOverrideForTesting ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ThreadTaskRunnerHandleTest, NestedRunLoop)"
  },
  {
    "label": "ThreadTaskRunnerHandleOverride()",
    "kind": "Method",
    "detail": "Function (class blink::scheduler::MainThreadSchedulerImpl ;)",
    "insertText": "ThreadTaskRunnerHandleOverride(scoped_refptr<SingleThreadTaskRunner> overriding_task_runner, bool allow_nested_runloop = false) : contained_override_(std::move(overriding_task_runner), allow_nested_runloop)"
  },
  {
    "label": "ThreadTaskRunnerHandleOverrideForTesting()",
    "kind": "Method",
    "detail": "Function (} SingleThreadTaskRunner::CurrentHandleOverride contained_override_ ; } ; class ThreadTaskRunnerHandleOverrideForTesting { public :)",
    "insertText": "ThreadTaskRunnerHandleOverrideForTesting(scoped_refptr<SingleThreadTaskRunner> overriding_task_runner) : contained_override_(std::move(overriding_task_runner))"
  },
  {
    "label": "ThreadTaskRunnerHandleOverrideForTesting()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ThreadTaskRunnerHandleOverrideForTesting()"
  }
]