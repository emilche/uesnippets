[
  {
    "label": "PoolAllocatorMultiThreadPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolAllocatorMultiThreadPolicy"
  },
  {
    "label": "PoolAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolAllocator"
  },
  {
    "label": "Mallocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mallocator"
  },
  {
    "label": "MicroAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MicroAllocator"
  },
  {
    "label": "MicroAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Mallocator . h \" class PoolAllocatorMultiThreadPolicy ; template<T> class PoolAllocator ; class Mallocator ; class MicroAllocator { const size_t POOL_ALLOCATOR_COUNT = 1 0 2 4 u ; const size_t ELEMENT_COUNT_PER_POOL_GROWTH = 1 2 8 u ; public :)",
    "insertText": "MicroAllocator(const char* name, size_t alignment)"
  },
  {
    "label": "MicroAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MicroAllocator(void)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(size_t size, size_t alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* ptr, size_t size)"
  },
  {
    "label": "PrintStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintStats(void)"
  }
]