[
  {
    "label": "PrioritizedPacketQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrioritizedPacketQueue"
  },
  {
    "label": "QueuedPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QueuedPacket"
  },
  {
    "label": "StreamQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamQueue"
  },
  {
    "label": "PrioritizedPacketQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_PACING_PRIORITIZED_PACKET_QUEUE_H_ # define MODULES_PACING_PRIORITIZED_PACKET_QUEUE_H_ # include<stddef . h> # include<deque> # include<list> # include<memory> # include<unordered_map> # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" namespace webrtc { class PrioritizedPacketQueue { public :)",
    "insertText": "PrioritizedPacketQueue(Timestamp creation_time)"
  },
  {
    "label": "PrioritizedPacketQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizedPacketQueue(const PrioritizedPacketQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PrioritizedPacketQueue&)",
    "insertText": "operator(const PrioritizedPacketQueue&)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(Timestamp enqueue_time, std::unique_ptr<RtpPacketToSend> packet)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "Pop()"
  },
  {
    "label": "SizeInPackets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SizeInPackets()"
  },
  {
    "label": "SizeInPayloadBytes()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "SizeInPayloadBytes()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "SizeInPacketsPerRtpPacketMediaType()",
    "kind": "Method",
    "detail": "Function (const std::array<int,kNumMediaTypes>&)",
    "insertText": "SizeInPacketsPerRtpPacketMediaType()"
  },
  {
    "label": "LeadingPacketEnqueueTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "LeadingPacketEnqueueTime(RtpPacketMediaType type)"
  },
  {
    "label": "OldestEnqueueTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "OldestEnqueueTime()"
  },
  {
    "label": "AverageQueueTime()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "AverageQueueTime()"
  },
  {
    "label": "UpdateAverageQueueTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAverageQueueTime(Timestamp now)"
  },
  {
    "label": "SetPauseState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPauseState(bool paused, Timestamp now)"
  },
  {
    "label": "PacketSize()",
    "kind": "Method",
    "detail": "Function (private : int kNumPriorityLevels = 4 ; class QueuedPacket { public : DataSize)",
    "insertText": "PacketSize()"
  },
  {
    "label": "StreamQueue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend> packet ; Timestamp enqueue_time ; std::list<Timestamp>::iterator enqueue_time_iterator ; } ; class StreamQueue { public :)",
    "insertText": "StreamQueue(Timestamp creation_time)"
  },
  {
    "label": "StreamQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamQueue(StreamQueue&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamQueue&)",
    "insertText": "operator(StreamQueue&&)"
  },
  {
    "label": "StreamQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamQueue(const StreamQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamQueue&)",
    "insertText": "operator(const StreamQueue&)"
  },
  {
    "label": "EnqueuePacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueuePacket(QueuedPacket packet, int priority_level)"
  },
  {
    "label": "DequePacket()",
    "kind": "Method",
    "detail": "Function (QueuedPacket)",
    "insertText": "DequePacket(int priority_level)"
  },
  {
    "label": "HasPacketsAtPrio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPacketsAtPrio(int priority_level)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "LeadingPacketEnqueueTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "LeadingPacketEnqueueTime(int priority_level)"
  },
  {
    "label": "LastEnqueueTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "LastEnqueueTime()"
  }
]