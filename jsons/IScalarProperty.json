[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "IScalarProperty()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_IScalarProperty_h # define Alembic_Abc_IScalarProperty_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / Argument . h> # include<Alembic / Abc / ISampleSelector . h> # include<Alembic / Abc / IBaseProperty . h> # include<Alembic / Abc / ICompoundProperty . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT IScalarProperty : public IBasePropertyT<AbcA::ScalarPropertyReaderPtr> { public : typedef IScalarProperty this_type ;)",
    "insertText": "IScalarProperty() : IBasePropertyT<AbcA::ScalarPropertyReaderPtr>()"
  },
  {
    "label": "IScalarProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IScalarProperty(const ICompoundProperty & iParent, const std::string &iName, const Argument &iArg0 = Argument())"
  },
  {
    "label": "IScalarProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IScalarProperty(AbcA::ScalarPropertyReaderPtr iPtr, const Argument &iArg0 = Argument() ) : IBasePropertyT<AbcA::ScalarPropertyReaderPtr>( iPtr, GetErrorHandlerPolicy( iPtr, iArg0 ))"
  },
  {
    "label": "IScalarProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IScalarProperty(AbcA::ScalarPropertyReaderPtr iPtr, WrapExistingFlag iWrapFlag, const Argument &iArg0 = Argument() ) : IBasePropertyT<AbcA::ScalarPropertyReaderPtr>( iPtr, GetErrorHandlerPolicy( iPtr, iArg0 ))"
  },
  {
    "label": "IScalarProperty()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IScalarProperty()"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get(void *oSample, const ISampleSelector &iSS = ISampleSelector())"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (ICompoundProperty)",
    "insertText": "getParent()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(AbcA::CompoundPropertyReaderPtr iParentObject, const std::string &iName, ErrorHandler::Policy iParentPolicy, const Argument &iArg0)"
  }
]