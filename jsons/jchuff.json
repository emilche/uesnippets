[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__aarch64__) || defined(_M_ARM64)"
  },
  {
    "label": "EMIT_BYTE()",
    "kind": "Method",
    "detail": "Function (size_t put_buffer ; int free_bits ; int last_dc_val [ MAX_COMPS_IN_SCAN ] ; } savable_state ; typedef struct { JOCTET* next_output_byte ; size_t free_in_buffer ; savable_state cur ; j_compress_ptr cinfo ; int simd ; } working_state ; # define)",
    "insertText": "EMIT_BYTE(b)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "buffer(JOCTET)(b)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (\\ buffer [ 1 ] = 0 ; \\)",
    "insertText": "buffer((JOCTET)(b) < 0xFF)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ } # if)",
    "insertText": "defined(__aarch64__) || defined(_M_ARM64) #define FLUSH()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(put_buffer & 0x8080808080808080 & ~(put_buffer + 0x0101010101010101))"
  },
  {
    "label": "EMIT_BYTE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EMIT_BYTE(put_buffer >> 56) \\ EMIT_BYTE(put_buffer >> 48) \\ EMIT_BYTE(put_buffer >> 40) \\ EMIT_BYTE(put_buffer >> 32) \\ EMIT_BYTE(put_buffer >> 24) \\ EMIT_BYTE(put_buffer >> 16) \\ EMIT_BYTE(put_buffer >> 8) \\ EMIT_BYTE(put_buffer)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ buffer + = 8 ; \\ } \\ } # else # if)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__) #define SPLAT()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "buffer(JOCTET)(put_buffer >> 24)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "buffer(JOCTET)(put_buffer >> 16)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "buffer(JOCTET)(put_buffer >> 8)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "buffer(JOCTET)(put_buffer)"
  },
  {
    "label": "SPLAT()",
    "kind": "Method",
    "detail": "Function (\\ buffer + = 4 ; \\ } # else # define)",
    "insertText": "SPLAT()"
  },
  {
    "label": "__builtin_bswap32()",
    "kind": "Method",
    "detail": "Function (\\ put_buffer =)",
    "insertText": "__builtin_bswap32(put_buffer)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__asm__(\"str %1, [%0], #4\" : \"+r\" (buffer) : \"r\" (put_buffer))"
  },
  {
    "label": "FLUSH()",
    "kind": "Method",
    "detail": "Function (\\ } # endif # define)",
    "insertText": "FLUSH()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(put_buffer & 0x80808080 & ~(put_buffer + 0x01010101))"
  },
  {
    "label": "EMIT_BYTE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EMIT_BYTE(put_buffer >> 24) \\ EMIT_BYTE(put_buffer >> 16) \\ EMIT_BYTE(put_buffer >> 8) \\ EMIT_BYTE(put_buffer)"
  },
  {
    "label": "PUT_AND_FLUSH()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # endif # define)",
    "insertText": "PUT_AND_FLUSH(code, size)"
  },
  {
    "label": "put_buffer()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "put_buffer(put_buffer << (size + free_bits)) | (code >> -free_bits)"
  },
  {
    "label": "PUT_BITS()",
    "kind": "Method",
    "detail": "Function (\\ put_buffer = code ; \\ } # define)",
    "insertText": "PUT_BITS(code, size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ free_bits - = size ; \\)",
    "insertText": "if(free_bits < 0) \\ PUT_AND_FLUSH(code, size) \\ else \\ put_buffer = (put_buffer << size)"
  },
  {
    "label": "PUT_CODE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PUT_CODE(code, size, diff)"
  }
]