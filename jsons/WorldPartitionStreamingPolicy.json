[
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "FWorldPartitionDraw2DContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DContext"
  },
  {
    "label": "FActivatedCells",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivatedCells"
  },
  {
    "label": "FWorldPartitionUpdateStreamingTargetState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionUpdateStreamingTargetState"
  },
  {
    "label": "FWorldPartitionUpdateStreamingCurrentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionUpdateStreamingCurrentState"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UWorldPartitionRuntimeCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeCell"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUpdateStreamingStateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateStreamingStateParams"
  },
  {
    "label": "UWorldPartitionSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionSubsystem"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphFwd . h \" # include \" Containers / Set . h \" # include \" Misc / CoreDelegates . h \" # include \" WorldPartition / WorldPartitionRuntimeCell . h \" # include \" WorldPartition / WorldPartitionRuntimeHash . h \" # include \" WorldPartition / WorldPartitionStreamingSource . h \" # include \" WorldPartition / WorldPartitionRuntimeContainerResolving . h \" # include \" WorldPartition / DataLayer / WorldDataLayers . h \" # include \" WorldPartitionStreamingPolicy . generated . h \" class UWorldPartition ; class FWorldPartitionDraw2DContext ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() void Add(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "OnAddedToWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddedToWorld(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "OnRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovedFromWorld(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetCells()",
    "kind": "Method",
    "detail": "Function (const TSet<TObjectPtr<const UWorldPartitionRuntimeCell>>&)",
    "insertText": "GetCells()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Transient)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (EWorldPartitionStreamingPerformance StreamingPerformance = EWorldPartitionStreamingPerformance::Good ; bool bUpdateServerEpoch = false ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const FWorldPartitionUpdateStreamingCurrentState& InCurrentState)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, Within = WorldPartition)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual bool GetIntersectingCells(const TArray<FWorldPartitionStreamingQuerySource>& InSources, TArray<const IWorldPartitionCell*>& OutCells)"
  },
  {
    "label": "UpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingState()"
  },
  {
    "label": "CanAddCellToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddCellToWorld(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "DrawRuntimeHash2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DrawRuntimeHash2D(FWorldPartitionDraw2DContext& DrawContext)"
  },
  {
    "label": "DrawRuntimeHash3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRuntimeHash3D()"
  },
  {
    "label": "DrawRuntimeCellsDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRuntimeCellsDetails(class UCanvas* Canvas, FVector2D& Offset)"
  },
  {
    "label": "IsStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStreamingCompleted(const TArray<FWorldPartitionStreamingSource>* InStreamingSources)"
  },
  {
    "label": "IsStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, const TArray<FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState = true)"
  },
  {
    "label": "OnCellShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCellShown(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "OnCellHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCellHidden(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "PrepareActorToCellRemapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareActorToCellRemapping()"
  },
  {
    "label": "SetContainerResolver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContainerResolver(const FWorldPartitionRuntimeContainerResolver& InContainerResolver)"
  },
  {
    "label": "RemapSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemapSoftObjectPath(FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "StoreStreamingContentToExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StoreStreamingContentToExternalStreamingObject(URuntimeHashExternalStreamingObjectBase& OutExternalStreamingObject)"
  },
  {
    "label": "ConvertEditorPathToRuntimePath()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ConvertEditorPathToRuntimePath(const FSoftObjectPath& InPath, FSoftObjectPath& OutPath)"
  },
  {
    "label": "InjectExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InjectExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "SetCellStateToLoaded()",
    "kind": "Method",
    "detail": "Function (bShouldMergeStreamingSourceInfo = bInShouldMergeStreamingSourceInfo ; } protected : void)",
    "insertText": "SetCellStateToLoaded(const UWorldPartitionRuntimeCell* InCell, int32& InOutMaxCellsToLoad)"
  },
  {
    "label": "SetCellStateToActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCellStateToActivated(const UWorldPartitionRuntimeCell* InCell, int32& InOutMaxCellsToLoad)"
  },
  {
    "label": "SetCellsStateToUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCellsStateToUnloaded(const TArray<TObjectPtr<const UWorldPartitionRuntimeCell>>& ToUnloadCells)"
  },
  {
    "label": "GetCellsToUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCellsToUpdate(TArray<const UWorldPartitionRuntimeCell*>& OutToLoadCells, TArray<const UWorldPartitionRuntimeCell*>& OutToActivateCells)"
  },
  {
    "label": "GetCellsToReprioritize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCellsToReprioritize(TArray<const UWorldPartitionRuntimeCell*>& OutToLoadCells, TArray<const UWorldPartitionRuntimeCell*>& OutToActivateCells)"
  },
  {
    "label": "UpdateStreamingSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingSources(bool bCanOptimizeUpdate)"
  },
  {
    "label": "UpdateStreamingPerformance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingPerformance(EWorldPartitionStreamingPerformance NewStreamingPerformance)"
  },
  {
    "label": "IsInBlockTillLevelStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInBlockTillLevelStreamingCompleted(bool bIsCausedByBadStreamingPerformance = false)"
  },
  {
    "label": "FUpdateStreamingStateParams()",
    "kind": "Method",
    "detail": "Function (const UWorldPartition* WorldPartition ; private : enum class EAsyncUpdateTaskState { None,Pending,Started } ; struct FUpdateStreamingStateParams {)",
    "insertText": "FUpdateStreamingStateParams(UWorldPartitionStreamingPolicy* InPolicy, const FWorldPartitionUpdateStreamingCurrentState& InCurrentState)"
  },
  {
    "label": "SetRequiredWorldDataLayersEffectiveStatesCopy()",
    "kind": "Method",
    "detail": "Function (FUpdateStreamingStateParams&)",
    "insertText": "SetRequiredWorldDataLayersEffectiveStatesCopy(bool bInRequiredEffectiveStatesCopy)"
  },
  {
    "label": "GetWorldDataLayersEffectiveStates()",
    "kind": "Method",
    "detail": "Function (const UWorld* World ; const UWorldPartitionRuntimeHash* RuntimeHash ; const bool bCanStream ; const bool bIsServer ; const bool bIsStreamingInEnabled ; const bool bIsServerStreamingEnabled ; const bool bIsServerStreamingOutEnabled ; const bool bIsBlockingCausedByBadStreamingPerformance ; const bool bShouldMergeStreamingSourceInfo ; const int32 PolicyUpdateStreamingStateEpoch ; const EWorldPartitionDataLayersLogicOperator DataLayersLogicOperator ; const FTransform WorldPartitionInstanceTransform ; const FWorldPartitionUpdateStreamingCurrentState& CurrentState ; const TSet<FName>& ServerDisallowedStreamingOutDataLayers ; TSet<const UWorldPartitionRuntimeCell*>& FrameActivateCells ; TSet<const UWorldPartitionRuntimeCell*>& FrameLoadCells ; const FWorldDataLayersEffectiveStates&)",
    "insertText": "GetWorldDataLayersEffectiveStates()"
  },
  {
    "label": "ComputeUpdateStreamingHash()",
    "kind": "Method",
    "detail": "Function (} private : const FWorldDataLayersEffectiveStates& WorldDataLayersEffectiveStatesRef ; TOptional<FWorldDataLayersEffectiveStates> WorldDataLayersEffectiveStatesCopy ; } ; uint32)",
    "insertText": "ComputeUpdateStreamingHash(bool bCanOptimizeUpdate)"
  },
  {
    "label": "ComputeServerStreamingEnabledEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeServerStreamingEnabledEpoch()"
  },
  {
    "label": "OnStreamingStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingStateUpdated()"
  },
  {
    "label": "OnPreChangeStreamingContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreChangeStreamingContent()"
  },
  {
    "label": "WaitForAsyncUpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForAsyncUpdateStreamingState()"
  },
  {
    "label": "PostUpdateStreamingStateInternal_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUpdateStreamingStateInternal_GameThread(FWorldPartitionUpdateStreamingTargetState& InOutTargetState)"
  },
  {
    "label": "GetServerDisallowedStreamingOutDataLayers()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetServerDisallowedStreamingOutDataLayers()"
  },
  {
    "label": "UpdateStreamingStateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingStateInternal(const FUpdateStreamingStateParams& InParams, FWorldPartitionUpdateStreamingTargetState& OutTargetState)"
  },
  {
    "label": "UpdateDebugCellsStreamingPriority()",
    "kind": "Method",
    "detail": "Function (bool bCriticalPerformanceRequestedBlockTillOnWorld ; int32 CriticalPerformanceBlockTillLevelStreamingCompletedEpoch ; int32 ProcessedToLoadCells ; int32 ProcessedToActivateCells ; int32 ServerStreamingStateEpoch ; int32 ServerStreamingEnabledEpoch ; uint32 UpdateStreamingHash ; uint32 UpdateStreamingSourcesHash ; uint32 UpdateStreamingStateCounter ; EAsyncUpdateTaskState AsyncUpdateTaskState ; FGraphEventRef AsyncUpdateStreamingStateTask ; FGraphEventRef AsyncPostUpdateStreamingStateTask ; int32 AsyncShouldSkipUpdateCounter ; TOptional<TSet<FName>> CachedServerDisallowStreamingOutDataLayers ; TSet<const UWorldPartitionRuntimeCell*> FrameActivateCells ; TSet<const UWorldPartitionRuntimeCell*> FrameLoadCells ; bool IsUpdateOptimEnabled ; bool IsAsyncUpdateStreamingStateEnabled ; int32 ForceUpdateFrameCount ; FAutoConsoleVariableRef CVarUpdateOptimEnabled ; FAutoConsoleVariableRef CVarAsyncUpdateStreamingStateEnabled ; FAutoConsoleVariableRef CVarForceUpdateFrameCount ; # if ! UE_BUILD_SHIPPING void)",
    "insertText": "UpdateDebugCellsStreamingPriority(const TSet<const UWorldPartitionRuntimeCell*>& InActivateStreamingCells, const TSet<const UWorldPartitionRuntimeCell*>& InLoadStreamingCells, bool bInShouldMergeStreamingSourceInfo)"
  }
]