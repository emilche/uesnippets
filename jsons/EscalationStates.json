[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UEscalationManagerConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEscalationManagerConfig"
  },
  {
    "label": "FEscalationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEscalationManager"
  },
  {
    "label": "FEscalationCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEscalationCounter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHasHitAnyQuotaParms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHasHitAnyQuotaParms"
  },
  {
    "label": "FEscalationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEscalationState"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TEscalationStateStatics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEscalationStateStatics"
  },
  {
    "label": "TEscalationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TEscalationManager"
  },
  {
    "label": "TStructOnScopeLite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStructOnScopeLite"
  },
  {
    "label": "FEscalationManagerParms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEscalationManagerParms"
  },
  {
    "label": "FEscalationManagerInitParms",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEscalationManagerInitParms"
  },
  {
    "label": "EEmptyCategories",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EEmptyCategories"
  },
  {
    "label": "CHasEnumPreallocNum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHasEnumPreallocNum"
  },
  {
    "label": "FEscalationCounter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Net / Core / Connection / StateStruct . h \" # include \" Templates / EnableIf . h \" # include \" Templates / Function . h \" # include \" Templates / IsEnum . h \" # include \" Templates / Models . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / StructOnScope . h \" # include \" UObject / UObjectGlobals . h \" # include \" EscalationStates . generated . h \" class UObject ; # define ESCALATION_QUOTA_DEBUG 0 class UEscalationManagerConfig ; namespace UE { namespace Net { class FEscalationManager ; struct FEscalationCounter ; } } enum class EQuotaType : uint8 { EscalateQuota,DeescalateQuota } ; struct FHasHitAnyQuotaParms { using FEscalationCounter = UE::Net::FEscalationCounter ; const TArrayView<TArrayView<int32>>& RegisteredCounters ; const TArrayView<)",
    "insertText": "FEscalationCounter(&PerPeriodHistory)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (const TArrayView<FEscalationCounter>& SecondCounters ; const TArrayView<FEscalationCounter>& FrameCounters ; EQuotaType QuotaType ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (UE::Net::FEscalationManager ; UEscalationManagerConfig ;)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "IsDormant()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsDormant()"
  },
  {
    "label": "GetHighestTimePeriod()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetHighestTimePeriod()"
  },
  {
    "label": "GetAllTimePeriods()",
    "kind": "Method",
    "detail": "Function (const TArray<int8>&)",
    "insertText": "GetAllTimePeriods()"
  },
  {
    "label": "ValidateConfigInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ValidateConfigInternal()"
  },
  {
    "label": "ValidateTimePeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateTimePeriod(int8& Value, const TCHAR* PropertyName, EValidateTime Requirement=EValidateTime::Optional)"
  },
  {
    "label": "HasHitAnyQuota()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasHitAnyQuota(FHasHitAnyQuotaParms Parms)"
  },
  {
    "label": "GetBaseConfigClass()",
    "kind": "Method",
    "detail": "Function (} UClass*)",
    "insertText": "GetBaseConfigClass()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE { namespace Net { enum class ESeverityUpdate : uint8 ; using FNotifySeverityUpdate = TUniqueFunction<)",
    "insertText": "void(const FEscalationState& OldState, const FEscalationState& NewState, ESeverityUpdate UpdateType)"
  },
  {
    "label": "ResetCounters()",
    "kind": "Method",
    "detail": "Function (struct FEscalationCounter { int32 Counter = 0 ; double AccumTime = 0 . 0 ; # if ESCALATION_QUOTA_DEBUG double DebugAccumTime = 0 . 0 ; # endif public : void)",
    "insertText": "ResetCounters()"
  },
  {
    "label": "AccumulateCounter()",
    "kind": "Method",
    "detail": "Function (Counter = 0 ; AccumTime = 0 . 0 ; # if ESCALATION_QUOTA_DEBUG DebugAccumTime = 0 . 0 ; # endif } void)",
    "insertText": "AccumulateCounter(const FEscalationCounter& InCounter)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (Counter + = InCounter . Counter ; AccumTime + = InCounter . AccumTime ; # if ESCALATION_QUOTA_DEBUG DebugAccumTime + = InCounter . DebugAccumTime ; # endif } } ; enum class ESeverityUpdate : uint8 { Escalate,AutoEscalate,Deescalate } ; enum class EEscalateReason : uint8 { QuotaLimit,AutoEscalate,Deescalate } ; enum class EEscalateResult : uint8 { Escalated,Deescalated,NoChange } ; class FEscalationManager { template<,,> class TEscalationManager ; UEscalationManagerConfig ; private : template<T,=)",
    "insertText": "decltype(TBaseStructure<T>::Get())"
  },
  {
    "label": "TStructOnScopeLite()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TStructOnScopeLite(const UStruct* InScriptStruct, uint8* Data) : FStructOnScope(InScriptStruct, Data)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (} template<U> U*)",
    "insertText": "Cast()"
  },
  {
    "label": "FEscalationManager()",
    "kind": "Method",
    "detail": "Function (} } ; struct FEscalationManagerParms { int32 NumCounters = 0 ; const TArrayView<TArrayView<int32>> RegisteredCountersCache = { } ; const UStruct* StateStruct = nullptr ; uint8* StateMemory = nullptr ; } ; struct FEscalationManagerInitParms { const TArrayView<FEscalationCounter> FrameCounters = { } ; const TArrayView<FEscalationCounter> SecondCounters = { } ; const TArrayView<FEscalationCounter> CountersPerPeriodHistoryAlloc = { } ; } ; private :)",
    "insertText": "FEscalationManager(FEscalationManagerParms Parms)"
  },
  {
    "label": "InitParms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitParms(FEscalationManagerInitParms Parms)"
  },
  {
    "label": "FEscalationManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEscalationManager()"
  },
  {
    "label": "InitConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConfig(FStateConfigParms ConfigParms)"
  },
  {
    "label": "UpdateSeverity()",
    "kind": "Method",
    "detail": "Function (EEscalateResult)",
    "insertText": "UpdateSeverity(ESeverityUpdate Update, EEscalateReason Reason, FString ReasonContext=TEXT(\"\"))"
  },
  {
    "label": "RecalculatePeriodHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculatePeriodHistory(const TArray<int8>& InTimePeriods, TArrayView<FEscalationCounter>(&OutPerPeriodHistory)[16], int32 StartPerSecHistoryIdx=INDEX_NONE)"
  },
  {
    "label": "GetHighestHistoryRequirement()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHighestHistoryRequirement()"
  },
  {
    "label": "ResetAllCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllCounters()"
  },
  {
    "label": "AddNewCounter_Internal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddNewCounter_Internal(int32 Count, const TArrayView<FEscalationCounter>& CountersPerPeriodAlloc)"
  },
  {
    "label": "GetFrameCounter()",
    "kind": "Method",
    "detail": "Function (public : FEscalationCounter&)",
    "insertText": "GetFrameCounter(int32 CounterIndex)"
  },
  {
    "label": "TickRealtime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRealtime(double TimeSeconds)"
  },
  {
    "label": "DoesRequireTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesRequireTick()"
  },
  {
    "label": "GetBaseConfig()",
    "kind": "Method",
    "detail": "Function (const UEscalationManagerConfig*)",
    "insertText": "GetBaseConfig()"
  },
  {
    "label": "SetManagerContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetManagerContext(FString InManagerContext)"
  },
  {
    "label": "SetNotifySeverityUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotifySeverityUpdate(FNotifySeverityUpdate&& InNotifySeverityUpdate)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private : const UEscalationManagerConfig* BaseConfig = nullptr ; FString ManagerContext ; FNotifySeverityUpdate NotifySeverityUpdate ; int32 NumCounters = 0 ; bool bEnabled = false ; TStructOnScopeLite<FEscalationState> State ; int8 ActiveState = 0 ; double LastMetEscalationConditions = 0 . 0 ; TArrayView<FEscalationCounter> FrameCounters ; TArrayView<FEscalationCounter> SecondCounters ; double LastPerSecQuotaBegin = 0 . 0 ; TArray<TArrayView<FEscalationCounter>> CountersPerSecHistory ; TArray<FEscalationCounter> CountersPerSecHistoryAlloc ; int32 LastCountersPerSecHistoryIdx = 0 ; TArrayView<FEscalationCounter> CountersPerPeriodHistory [ 1 6 ] = { } ; const TArrayView<TArrayView<int32>> RegisteredCounters ; } ; enum EEmptyCategories : uint32 { Max } ; template<CountersEnum,EscalationStateType,CounterCategoriesEnum = EEmptyCategories> class TEscalationManager final : public FEscalationManager {)",
    "insertText": "static_assert(TIsEnum<CountersEnum>::Value, \"CountersEnum must be an enum\")"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (struct CHasEnumPreallocNum { template<T> auto)",
    "insertText": "Requires() -> decltype( T::NumPrealloc)"
  },
  {
    "label": "GetCounterNumPrealloc()",
    "kind": "Method",
    "detail": "Function (} ; template<T,TEnableIf<TModels_V<CHasEnumPreallocNum,T>>::Type* = nullptr> int32)",
    "insertText": "GetCounterNumPrealloc()"
  },
  {
    "label": "TNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TNum(int32)"
  },
  {
    "label": "CountersEnum()",
    "kind": "Method",
    "detail": "Function (int32 TNumPrealloc = GetCounterNumPrealloc<)",
    "insertText": "CountersEnum()"
  },
  {
    "label": "TNumCategories()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TNumCategories(int32)"
  },
  {
    "label": "TEscalationManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TEscalationManager() : FEscalationManager( FEscalationManagerParms { TNum, MakeArrayView(RegisteredCountersCacheAlloc, TNumCategories), EscalationStateType::StaticStruct(), (uint8*)&StateAlloc })"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FrameCountersAlloc .)",
    "insertText": "SetNum(TNumPrealloc)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (CountersPerPeriodAlloc .)",
    "insertText": "SetNum(TNumPrealloc * UE_ARRAY_COUNT(CountersPerPeriodHistory))"
  },
  {
    "label": "InitParms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitParms(FEscalationManagerInitParms { MakeArrayView(FrameCountersAlloc.GetData(), TNum), MakeArrayView(SecondCountersAlloc.GetData(), TNum), MakeArrayView(CountersPerPeriodAlloc.GetData(), TNum * UE_ARRAY_COUNT(CountersPerPeriodHistory)) })"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FString ConfigContext)"
  },
  {
    "label": "InitConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConfig({TEscalationStateStatics<EscalationStateType>::GetConfigSection(), ConfigContext, TEscalationStateStatics<EscalationStateType>::GetBaseConfigClass(), EscalationStateType::StaticStruct() })"
  },
  {
    "label": "AddNewCounter()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddNewCounter(int32 Count=1)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (FrameCountersAlloc .)",
    "insertText": "AddDefaulted(Count)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (CountersPerPeriodAlloc .)",
    "insertText": "AddDefaulted(Count * UE_ARRAY_COUNT(CountersPerPeriodHistory))"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (FrameCounters =)",
    "insertText": "MakeArrayView(FrameCountersAlloc)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (SecondCounters =)",
    "insertText": "MakeArrayView(SecondCountersAlloc)"
  },
  {
    "label": "RegisterCounterCategory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterCounterCategory(int32 CategoryIndex, int32 CounterIndex)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<TNumPrealloc>>& CurRegisteredCounters = RegisteredCountersAlloc [ CategoryIndex ] ; CurRegisteredCounters .)",
    "insertText": "AddUnique(CounterIndex)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (RegisteredCounters [ CategoryIndex ] =)",
    "insertText": "MakeArrayView(CurRegisteredCounters)"
  },
  {
    "label": "UE_ARRAY_COUNT()",
    "kind": "Method",
    "detail": "Function (} private : EscalationStateType StateAlloc ; TArray<FEscalationCounter,TInlineAllocator<TNumPrealloc>> FrameCountersAlloc ; TArray<FEscalationCounter,TInlineAllocator<TNumPrealloc>> SecondCountersAlloc ; TArray<FEscalationCounter,TInlineAllocator<TNumPrealloc*)",
    "insertText": "UE_ARRAY_COUNT(CountersPerPeriodHistory)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (TArray<int32,TInlineAllocator<TNumPrealloc>> RegisteredCountersAlloc [)",
    "insertText": "Max(TNumCategories, 1)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; } })",
    "insertText": "UCLASS(config=Engine, PerObjectConfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() private: NETCORE_API virtual void LoadStateConfig()"
  }
]