[
  {
    "label": "FFormatArgumentValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFormatArgumentValue"
  },
  {
    "label": "FPrivateTextFormatArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateTextFormatArguments"
  },
  {
    "label": "TMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMap"
  },
  {
    "label": "FTextFormatString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatString"
  },
  {
    "label": "ITextFormatArgumentModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextFormatArgumentModifier"
  },
  {
    "label": "FTextFormatString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / Crc . h \" # include \" Containers / UnrealString . h \" # include \" Internationalization / CulturePointer . h \" class FFormatArgumentValue ; struct FPrivateTextFormatArguments ; template<KeyType,ValueType,SetAllocator,KeyFuncs> class TMap ; struct FPrivateTextFormatArguments ; class FTextFormatString { public :)",
    "insertText": "FTextFormatString() : StringPtr(TEXT(\"\")) , StringLen(0) , InternalString()"
  },
  {
    "label": "FTextFormatString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextFormatString(FString InStr) : StringPtr(nullptr) , StringLen(0) , InternalString(MoveTemp(InStr))"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (StringPtr =* InternalString ; StringLen = InternalString .)",
    "insertText": "Len()"
  },
  {
    "label": "FTextFormatString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextFormatString(const TCHAR* InStr) : StringPtr(nullptr) , StringLen(0) , InternalString(InStr)"
  },
  {
    "label": "MakeReference()",
    "kind": "Method",
    "detail": "Function (} FTextFormatString)",
    "insertText": "MakeReference(const TCHAR* InStr)"
  },
  {
    "label": "MakeReference()",
    "kind": "Method",
    "detail": "Function (} FTextFormatString)",
    "insertText": "MakeReference(const TCHAR* InStr, const int32 InLen)"
  },
  {
    "label": "FTextFormatString()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextFormatString(const FTextFormatString& Other) : StringPtr(Other.StringPtr) , StringLen(Other.StringLen) , InternalString(Other.InternalString)"
  },
  {
    "label": "FTextFormatString()",
    "kind": "Method",
    "detail": "Function (StringPtr =* InternalString ; } })",
    "insertText": "FTextFormatString(FTextFormatString&& Other) : StringPtr(Other.StringPtr) , StringLen(Other.StringLen) , InternalString(MoveTemp(Other.InternalString))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTextFormatString&)",
    "insertText": "operator(const FTextFormatString& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringPtr = Other . StringPtr ; StringLen = Other . StringLen ; InternalString = Other . InternalString ;)",
    "insertText": "if(Other.StringPtr == *Other.InternalString)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StringPtr =* InternalString ; } } return* this ; } FTextFormatString&)",
    "insertText": "operator(FTextFormatString&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (StringPtr = Other . StringPtr ; StringLen = Other . StringLen ; InternalString =)",
    "insertText": "MoveTemp(Other.InternalString)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} return* this ; } uint32)",
    "insertText": "GetTypeHash(const FTextFormatString& InStr)"
  },
  {
    "label": "FTextFormatString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* StringPtr ; int32 StringLen ; private : FString InternalString ;)",
    "insertText": "FTextFormatString(const TCHAR* InStr, const int32 InLen) : StringPtr(InStr) , StringLen(InLen) , InternalString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const FTextFormatString& LHS, const FTextFormatString& RHS)"
  },
  {
    "label": "ITextFormatArgumentModifier()",
    "kind": "Method",
    "detail": "Function (} class ITextFormatArgumentModifier { public : ~)",
    "insertText": "ITextFormatArgumentModifier()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Validate(const FCultureRef& InCulture, TArray<FString>& OutValidationErrors)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(const FFormatArgumentValue& InValue, const FPrivateTextFormatArguments& InFormatArgs, FString& OutResult)"
  },
  {
    "label": "GetFormatArgumentNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFormatArgumentNames(TArray<FString>& OutArgumentNames)"
  },
  {
    "label": "EstimateLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateLength(int32& OutLength, bool& OutUsesFormatArgs)"
  },
  {
    "label": "ParseKeyValueArgs()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ParseKeyValueArgs(const FTextFormatString& InArgsString, TSortedMap<FTextFormatString, FTextFormatString>& OutArgKeyValues, const TCHAR InValueSeparator = TEXT('='), const TCHAR InArgSeparator = TEXT(','))"
  },
  {
    "label": "ParseValueArgs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseValueArgs(const FTextFormatString& InArgsString, TArray<FTextFormatString>& OutArgValues, const TCHAR InArgSeparator = TEXT(','))"
  }
]