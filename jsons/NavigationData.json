[
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FNavDataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavDataGenerator"
  },
  {
    "label": "INavAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavAgentInterface"
  },
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "UNavArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavArea"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UNavigationQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationQueryFilter"
  },
  {
    "label": "FNavigationDirtyArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyArea"
  },
  {
    "label": "FSupportedAreaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSupportedAreaData"
  },
  {
    "label": "FNavPathRecalculationRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavPathRecalculationRequest"
  },
  {
    "label": "FPathFindingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingResult"
  },
  {
    "label": "FNavigationRaycastAdditionalResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRaycastAdditionalResults"
  },
  {
    "label": "FNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPath"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "INavigationQueryFilterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationQueryFilterInterface"
  },
  {
    "label": "associated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "associated"
  },
  {
    "label": "itself",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "itself"
  },
  {
    "label": "FAsyncPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPathFindingQuery"
  },
  {
    "label": "FSupportedAreaData()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FSupportedAreaData(TSubclassOf<UNavArea> NavAreaClass = NULL, int32 InAreaID = INDEX_NONE)"
  },
  {
    "label": "FNavigationPath()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FNavigationPath()"
  },
  {
    "label": "FNavigationPath()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FNavigationPath(const TArray<FVector>& Points, AActor* Base = NULL)"
  },
  {
    "label": "SetNavigationDataUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationDataUsed(const ANavigationData* const NewData)"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (observers)",
    "insertText": "OnPathUpdated(UpdateType)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "RePathFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RePathFailed()"
  },
  {
    "label": "ResetForRepath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForRepath()"
  },
  {
    "label": "GetCostFromIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetCostFromIndex(0)"
  },
  {
    "label": "InternalResetNavigationPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalResetNavigationPath()"
  },
  {
    "label": "SetGoalActorObservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGoalActorObservation(const AActor& ActorToObserve, float TetherDistance)"
  },
  {
    "label": "DisableGoalActorObservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableGoalActorObservation()"
  },
  {
    "label": "SetSourceActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceActor(const AActor& InSourceActor)"
  },
  {
    "label": "UpdateLastRepathGoalLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastRepathGoalLocation()"
  },
  {
    "label": "TickPathObservation()",
    "kind": "Method",
    "detail": "Function (EPathObservationResult::Type)",
    "insertText": "TickPathObservation()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "RequestRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRegistration()"
  },
  {
    "label": "UnregisterAndCleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAndCleanUp()"
  },
  {
    "label": "CleanUpAndMarkPendingKill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpAndMarkPendingKill()"
  },
  {
    "label": "OnRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegistered()"
  },
  {
    "label": "OnUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregistered()"
  },
  {
    "label": "OnNavigationBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsChanged()"
  },
  {
    "label": "SetConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConfig(const FNavDataConfig& Src)"
  },
  {
    "label": "ConditionalConstructGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalConstructGenerator()"
  },
  {
    "label": "RebuildAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAll()"
  },
  {
    "label": "EnsureBuildCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBuildCompletion()"
  },
  {
    "label": "CancelBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBuild()"
  },
  {
    "label": "TickAsyncBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAsyncBuild(float DeltaSeconds)"
  },
  {
    "label": "RebuildDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildDirtyAreas(const TArray<FNavigationDirtyArea>& DirtyAreas)"
  },
  {
    "label": "SetRebuildingSuspended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRebuildingSuspended(const bool bNewSuspend)"
  },
  {
    "label": "RegisterAsNavAreaClassObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsNavAreaClassObserver()"
  },
  {
    "label": "PurgeUnusedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeUnusedPaths()"
  },
  {
    "label": "RegisterActivePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActivePath(FNavPathSharedPtr SharedPath)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::GetBounds,return FBox()"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Raycast(RayStart, RayEnd, HitLocation, nullptr/*AdditionalResults*/, QueryFilter, Querier)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::BatchRaycast, )"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::FindMoveAlongSurface, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::FindOverlappingEdges, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::GetPathSegmentBoundaryEdges, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::GetRandomPoint, return FNavLocation()"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::GetRandomReachablePointInRadius, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::GetRandomPointInNavigableRadius, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::ProjectPoint, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::BatchProjectPoints, )"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::BatchProjectPoints, )"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::CalcPathCost, return ENavigationQueryResult::Invalid;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::CalcPathLength, return ENavigationQueryResult::Invalid;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::CalcPathLengthAndCost, return ENavigationQueryResult::Invalid;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ANavigationData::DoesNodeContainLocation, return false;)"
  },
  {
    "label": "OnNavAreaAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaAdded(const UClass* NavAreaClass, int32 AgentIndex)"
  },
  {
    "label": "OnNavAreaRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaRemoved(const UClass* NavAreaClass)"
  },
  {
    "label": "OnNavAreaChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaChanged()"
  },
  {
    "label": "OnNavAreaEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaEvent(const UClass* NavAreaClass, ENavAreaEvent::Type Event)"
  },
  {
    "label": "ProcessNavAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavAreas(const TSet<const UClass*>& AreaClasses, int32 AgentIndex)"
  },
  {
    "label": "UpdateCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomLink(const INavLinkCustomInterface* CustomLink)"
  },
  {
    "label": "StoreQueryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreQueryFilter(TSubclassOf<UNavigationQueryFilter> FilterClass, FSharedConstNavQueryFilter NavFilter)"
  },
  {
    "label": "RemoveQueryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueryFilter(TSubclassOf<UNavigationQueryFilter> FilterClass)"
  },
  {
    "label": "SetNavRenderingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavRenderingEnabled(bool bEnable)"
  },
  {
    "label": "InstantiateAndRegisterRenderingComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstantiateAndRegisterRenderingComponent()"
  },
  {
    "label": "GetNextUniqueID()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetNextUniqueID()"
  }
]