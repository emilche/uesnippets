[
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FNavDataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavDataGenerator"
  },
  {
    "label": "INavAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavAgentInterface"
  },
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "UNavArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavArea"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UNavigationQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationQueryFilter"
  },
  {
    "label": "FNavigationDirtyArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyArea"
  },
  {
    "label": "FSupportedAreaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSupportedAreaData"
  },
  {
    "label": "FNavPathRecalculationRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavPathRecalculationRequest"
  },
  {
    "label": "FPathFindingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingResult"
  },
  {
    "label": "FNavigationRaycastAdditionalResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRaycastAdditionalResults"
  },
  {
    "label": "FNavigationPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationPath"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "INavigationQueryFilterInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationQueryFilterInterface"
  },
  {
    "label": "FAsyncPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPathFindingQuery"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" GameFramework / Actor . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" AI / Navigation / NavigationTypes . h \" # include \" NavigationSystemTypes . h \" # include \" EngineDefines . h \" # include \" AI / Navigation / NavigationDataInterface . h \" # include \" Misc / TransactionallySafeScopeLock . h \" # include \" NavigationData . generated . h \" class ANavigationData ; class Error ; class FNavDataGenerator ; class INavAgentInterface ; class INavLinkCustomInterface ; class UNavArea ; class UPrimitiveComponent ; class UNavigationQueryFilter ; struct FNavigationDirtyArea ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FSupportedAreaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSupportedAreaData(TSubclassOf<UNavArea> NavAreaClass = NULL, int32 InAreaID = INDEX_NONE)"
  },
  {
    "label": "FNavPathRecalculationRequest()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavPathRecalculationRequest { FNavPathWeakPtr Path ; ENavPathUpdateType::Type Reason ;)",
    "insertText": "FNavPathRecalculationRequest(const FNavPathSharedPtr& InPath, ENavPathUpdateType::Type InReason) : Path(InPath.ToSharedRef()), Reason(InReason)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNavPathRecalculationRequest& Other)"
  },
  {
    "label": "IsSuccessful()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSuccessful()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ; struct FNavigationRaycastAdditionalResults { bool bIsRayEndInCorridor = false ; } ; struct FNavigationPath : public TSharedFromThis<FNavigationPath,ESPMode::ThreadSafe> {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPathObserverDelegate, FNavigationPath*, ENavPathEvent::Type)"
  },
  {
    "label": "FNavigationPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationPath()"
  },
  {
    "label": "FNavigationPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNavigationPath(const TArray<FVector>& Points, AActor* Base = NULL)"
  },
  {
    "label": "FNavigationPath()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FNavigationPath(const FNavigationPath&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNavigationPath&)",
    "insertText": "operator(const FNavigationPath& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsUpToDate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUpToDate()"
  },
  {
    "label": "ShouldUpdateStartPointOnRepath()",
    "kind": "Method",
    "detail": "Function (bWaitingForRepath = bInWaitingForRepath ; } bool)",
    "insertText": "ShouldUpdateStartPointOnRepath()"
  },
  {
    "label": "GetObserver()",
    "kind": "Method",
    "detail": "Function (} FPathObserverDelegate&)",
    "insertText": "GetObserver()"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveObserver(FDelegateHandle HandleOfObserverToRemove)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ObserverDelegate .)",
    "insertText": "Remove(HandleOfObserverToRemove)"
  },
  {
    "label": "MarkReady()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkReady()"
  },
  {
    "label": "SetNavigationDataUsed()",
    "kind": "Method",
    "detail": "Function (bIsReady = true ; } void)",
    "insertText": "SetNavigationDataUsed(const ANavigationData* const NewData)"
  },
  {
    "label": "SetQuerier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQuerier(const UObject* InQuerier)"
  },
  {
    "label": "GetQuerier()",
    "kind": "Method",
    "detail": "Function (PathFindingQueryData . Owner = InQuerier ; } const UObject*)",
    "insertText": "GetQuerier()"
  },
  {
    "label": "SetQueryData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQueryData(const FPathFindingQueryData& QueryData)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (PathFindingQueryData = QueryData ; } FPathFindingQueryData)",
    "insertText": "GetQueryData()"
  },
  {
    "label": "SetSearchReachedLimit()",
    "kind": "Method",
    "detail": "Function (bIsPartial = bPartial ; } void)",
    "insertText": "SetSearchReachedLimit(const bool bLimited)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (bReachedSearchLimit = bLimited ; } void)",
    "insertText": "SetFilter(FSharedConstNavQueryFilter InFilter)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (PathFindingQueryData . QueryFilter = InFilter ; Filter = InFilter ; } FSharedConstNavQueryFilter)",
    "insertText": "GetFilter()"
  },
  {
    "label": "GetStartLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetStartLocation()"
  },
  {
    "label": "GetEndLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetEndLocation()"
  },
  {
    "label": "DoneUpdating()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoneUpdating(ENavPathUpdateType::Type UpdateType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ENavPathEvent::Type PathUpdateTypeToPathEvent [ ] = { ENavPathEvent::UpdatedDueToGoalMoved,ENavPathEvent::UpdatedDueToNavigationChanged,ENavPathEvent::MetaPathUpdate,ENavPathEvent::Custom } ; bUpToDate = true ; bWaitingForRepath = false ;)",
    "insertText": "if(bUseOnPathUpdatedNotify)"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathUpdated(UpdateType)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (} ObserverDelegate .)",
    "insertText": "Broadcast(this, PathUpdateTypeToPathEvent[uint8(UpdateType)])"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTimeStamp()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (LastUpdateTimeStamp = TimeStamp ; } void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "RePathFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RePathFailed()"
  },
  {
    "label": "ResetForRepath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForRepath()"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDraw(const ANavigationData* NavData, const FColor PathColor, class UCanvas* Canvas, const bool bPersistent, const float LifeTime, const uint32 NextPathPointIndex = 0)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "ContainsAnyCustomLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsAnyCustomLink()"
  },
  {
    "label": "ContainsNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNode(NavNodeRef NodeRef)"
  },
  {
    "label": "GetCostFromIndex()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetCostFromIndex(int32 PathPointIndex)"
  },
  {
    "label": "GetLengthFromPosition()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "GetLengthFromPosition(FVector SegmentStart, uint32 NextPathPointIndex)"
  },
  {
    "label": "GetPathPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPathPoint(const FNavigationPath* Path, uint32 PathVertIdx, FNavPathPoint& PathPoint)"
  },
  {
    "label": "GetPathPoints()",
    "kind": "Method",
    "detail": "Function (PathPoint = Path -> PathPoints [ PathVertIdx ] ; return true ; } return false ; } const TArray<FNavPathPoint>&)",
    "insertText": "GetPathPoints()"
  },
  {
    "label": "DoesIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesIntersectBox(const FBox& Box, uint32 StartingIndex = 0, int32* IntersectingSegmentIndex = NULL, FVector* AgentExtent = NULL)"
  },
  {
    "label": "DoesIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesIntersectBox(const FBox& Box, const FVector& AgentLocation, uint32 StartingIndex = 0, int32* IntersectingSegmentIndex = NULL, FVector* AgentExtent = NULL)"
  },
  {
    "label": "GetSegmentDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetSegmentDirection(uint32 SegmentEndIndex)"
  },
  {
    "label": "DoesPathIntersectBoxImplementation()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DoesPathIntersectBoxImplementation(const FBox& Box, const FVector& StartLocation, uint32 StartingIndex, int32* IntersectingSegmentIndex, FVector* AgentExtent)"
  },
  {
    "label": "InternalResetNavigationPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalResetNavigationPath()"
  },
  {
    "label": "CastPath()",
    "kind": "Method",
    "detail": "Function (public : template<PathClass> const PathClass*)",
    "insertText": "CastPath()"
  },
  {
    "label": "SetGoalActorObservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGoalActorObservation(const AActor& ActorToObserve, float TetherDistance)"
  },
  {
    "label": "SetGoalActorTetherDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGoalActorTetherDistance(const float NewTetherDistace)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (GoalActorLocationTetherDistanceSq =)",
    "insertText": "Square(NewTetherDistace)"
  },
  {
    "label": "DisableGoalActorObservation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableGoalActorObservation()"
  },
  {
    "label": "SetSourceActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceActor(const AActor& InSourceActor)"
  },
  {
    "label": "GetSourceActor()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetSourceActor()"
  },
  {
    "label": "GetSourceActorAsNavAgent()",
    "kind": "Method",
    "detail": "Function (} const INavAgentInterface*)",
    "insertText": "GetSourceActorAsNavAgent()"
  },
  {
    "label": "EnableRecalculationOnInvalidation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableRecalculationOnInvalidation(bool bShouldAutoUpdate)"
  },
  {
    "label": "WillRecalculateOnInvalidation()",
    "kind": "Method",
    "detail": "Function (bDoAutoUpdateOnInvalidation = bShouldAutoUpdate ; } bool)",
    "insertText": "WillRecalculateOnInvalidation()"
  },
  {
    "label": "GetIgnoreInvalidation()",
    "kind": "Method",
    "detail": "Function (bIgnoreInvalidation = bShouldIgnore ; } bool)",
    "insertText": "GetIgnoreInvalidation()"
  },
  {
    "label": "GetGoalLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetGoalLocation()"
  },
  {
    "label": "GetPathFindingStartLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPathFindingStartLocation()"
  },
  {
    "label": "GetGoalActor()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "GetGoalActor()"
  },
  {
    "label": "GetGoalActorAsNavAgent()",
    "kind": "Method",
    "detail": "Function (} const INavAgentInterface*)",
    "insertText": "GetGoalActorAsNavAgent()"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (} TArray<NavNodeRef> ShortcutNodeRefs ; protected : void)",
    "insertText": "OnPathUpdated(ENavPathUpdateType::Type UpdateType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FNavPathPoint> PathPoints ; TWeakObjectPtr<AActor> Base ; private : TWeakObjectPtr<const AActor> GoalActor ; const INavAgentInterface* GoalActorAsNavAgent ; TWeakObjectPtr<const AActor> SourceActor ; const INavAgentInterface* SourceActorAsNavAgent ; protected : FSharedConstNavQueryFilter Filter ; const FNavPathType Type ; FNavPathType PathType ; FPathObserverDelegate ObserverDelegate ; uint32 bUpToDate : 1 ; uint32 bIsReady : 1 ; uint32 bIsPartial : 1 ; uint32 bReachedSearchLimit : 1 ; uint32 bDoAutoUpdateOnInvalidation : 1 ; uint32 bIgnoreInvalidation : 1 ; uint32 bUpdateStartPointOnRepath : 1 ; uint32 bUpdateEndPointOnRepath : 1 ; uint32 bWaitingForRepath : 1 ; uint32 bUseOnPathUpdatedNotify : 1 ; uint32 bObservingGoalActor : 1 ; TWeakObjectPtr<ANavigationData> NavigationDataUsed ; FPathFindingQueryData PathFindingQueryData ; double LastUpdateTimeStamp ; private : float GoalActorLocationTetherDistanceSq ; FVector GoalActorLastLocation ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (,DynamicModifiersOnly,Dynamic,LegacyGeneration)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config=Engine, defaultconfig, NotBlueprintable, abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(transient, duplicatetransient)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "RerunConstructionScripts()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RerunConstructionScripts()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "IsBuildingOnLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildingOnLoad()"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (bIsBuildingOnLoad = bValue ; } # endif void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "RequestRegistration()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RequestRegistration()"
  },
  {
    "label": "UnregisterAndCleanUp()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UnregisterAndCleanUp()"
  },
  {
    "label": "CleanUpAndMarkPendingKill()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CleanUpAndMarkPendingKill()"
  },
  {
    "label": "OnUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregistered()"
  },
  {
    "label": "NeedsRebuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsRebuild()"
  },
  {
    "label": "SupportsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsStreaming()"
  },
  {
    "label": "OnNavigationBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsChanged()"
  },
  {
    "label": "FillNavigationDataChunkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNavigationDataChunkActor(const FBox& QueryBounds, class ANavigationDataChunkActor& DataChunkActor, FBox& OutTilesBounds)"
  },
  {
    "label": "OnStreamingNavDataAdded()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnStreamingNavDataAdded(class ANavigationDataChunkActor& InActor)"
  },
  {
    "label": "OnStreamingNavDataRemoved()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnStreamingNavDataRemoved(class ANavigationDataChunkActor& InActor)"
  },
  {
    "label": "OnStreamingLevelAdded()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnStreamingLevelAdded(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnStreamingLevelRemoved()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnStreamingLevelRemoved(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlap()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR double)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlap()"
  },
  {
    "label": "SetSupportsDefaultAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportsDefaultAgent(bool bIsDefault)"
  },
  {
    "label": "SetNavRenderingEnabled()",
    "kind": "Method",
    "detail": "Function (bSupportsDefaultAgent = bIsDefault ;)",
    "insertText": "SetNavRenderingEnabled(bIsDefault)"
  },
  {
    "label": "IsSupportingDefaultAgent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSupportingDefaultAgent()"
  },
  {
    "label": "RestrictBuildingToActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestrictBuildingToActiveTiles(bool InRestrictBuildingToActiveTiles)"
  },
  {
    "label": "CanBeMainNavData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeMainNavData()"
  },
  {
    "label": "ConditionalConstructGenerator()",
    "kind": "Method",
    "detail": "Function (Dest = NavDataConfig ; } public : void)",
    "insertText": "ConditionalConstructGenerator()"
  },
  {
    "label": "LoadBeforeGeneratorRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadBeforeGeneratorRebuild()"
  },
  {
    "label": "PostLoadPreRebuild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostLoadPreRebuild()"
  },
  {
    "label": "RebuildAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildAll()"
  },
  {
    "label": "EnsureBuildCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBuildCompletion()"
  },
  {
    "label": "CancelBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBuild()"
  },
  {
    "label": "TickAsyncBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickAsyncBuild(float DeltaSeconds)"
  },
  {
    "label": "GetGenerator()",
    "kind": "Method",
    "detail": "Function (FNavDataGenerator*)",
    "insertText": "GetGenerator()"
  },
  {
    "label": "RebuildDirtyAreas()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildDirtyAreas(const TArray<FNavigationDirtyArea>& DirtyAreas)"
  },
  {
    "label": "SetRebuildingSuspended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRebuildingSuspended(const bool bNewSuspend)"
  },
  {
    "label": "IsRebuildingSuspended()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRebuildingSuspended()"
  },
  {
    "label": "RegisterAsNavAreaClassObserver()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "RegisterAsNavAreaClassObserver()"
  },
  {
    "label": "CreatePathInstance()",
    "kind": "Method",
    "detail": "Function (public : template<PathType> FNavPathSharedPtr)",
    "insertText": "CreatePathInstance(const FPathFindingQueryData& QueryData)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (FNavPathSharedPtr SharedPath =)",
    "insertText": "MakeShareable(new PathType())"
  },
  {
    "label": "SetNavigationDataUsed()",
    "kind": "Method",
    "detail": "Function (SharedPath ->)",
    "insertText": "SetNavigationDataUsed(this)"
  },
  {
    "label": "SetQueryData()",
    "kind": "Method",
    "detail": "Function (SharedPath ->)",
    "insertText": "SetQueryData(QueryData)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (SharedPath ->)",
    "insertText": "SetTimeStamp(GetWorldTimeStamp())"
  },
  {
    "label": "ANavigationData()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "ANavigationData(this)->RegisterActivePath(SharedPath)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NextObservedPathsTickInSeconds = ObservedPathsTickInterval ; } ObservedPaths .)",
    "insertText": "Add(SharedPath)"
  },
  {
    "label": "RequestRePath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRePath(FNavPathSharedPtr Path, ENavPathUpdateType::Type Reason)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (RepathRequests .)",
    "insertText": "AddUnique(FNavPathRecalculationRequest(Path, Reason))"
  },
  {
    "label": "PurgeUnusedPaths()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "PurgeUnusedPaths()"
  },
  {
    "label": "RegisterActivePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActivePath(FNavPathSharedPtr SharedPath)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (public : FBox)",
    "insertText": "GetBounds() const PURE_VIRTUAL(ANavigationData::GetBounds,return FBox();)"
  },
  {
    "label": "GetNavigableBounds()",
    "kind": "Method",
    "detail": "Function (TArray<FBox>)",
    "insertText": "GetNavigableBounds()"
  },
  {
    "label": "GetNavigableBoundsInLevel()",
    "kind": "Method",
    "detail": "Function (TArray<FBox>)",
    "insertText": "GetNavigableBoundsInLevel(ULevel* InLevel)"
  },
  {
    "label": "DrawDebugPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDebugPath(FNavigationPath* Path, const FColor PathColor = FColor::White, class UCanvas* Canvas = nullptr, const bool bPersistent = true, const float LifeTime = -1.f, const uint32 NextPathPointIndex = 0)"
  },
  {
    "label": "BeginBatchQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBatchQuery()"
  },
  {
    "label": "FinishBatchQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishBatchQuery()"
  },
  {
    "label": "GetDefaultQueryFilter()",
    "kind": "Method",
    "detail": "Function (} ; FSharedConstNavQueryFilter)",
    "insertText": "GetDefaultQueryFilter()"
  },
  {
    "label": "GetDefaultQueryExtent()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetDefaultQueryExtent()"
  },
  {
    "label": "FindHierarchicalPath()",
    "kind": "Method",
    "detail": "Function (} FPathFindingResult)",
    "insertText": "FindHierarchicalPath(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query)"
  },
  {
    "label": "TestPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestPath(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query, int32* NumVisitedNodes)"
  },
  {
    "label": "TestHierarchicalPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestHierarchicalPath(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query, int32* NumVisitedNodes)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Raycast(const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Raycast(const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL)"
  },
  {
    "label": "BatchRaycast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BatchRaycast(TArray<FNavigationRaycastWork>& Workload, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::BatchRaycast,)"
  },
  {
    "label": "FindMoveAlongSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindMoveAlongSurface(const FNavLocation& StartLocation, const FVector& TargetPosition, FNavLocation& OutLocation, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::FindMoveAlongSurface, return false;)"
  },
  {
    "label": "FindOverlappingEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOverlappingEdges(const FNavLocation& StartLocation, TConstArrayView<FVector> ConvexPolygon, TArray<FVector>& OutEdges, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::FindOverlappingEdges, return false;)"
  },
  {
    "label": "GetPathSegmentBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPathSegmentBoundaryEdges(const FNavigationPath& Path, const FNavPathPoint& StartPoint, const FNavPathPoint& EndPoint, const TConstArrayView<FVector> SearchArea, TArray<FVector>& OutEdges, const float MaxAreaEnterCost, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::GetPathSegmentBoundaryEdges, return false;)"
  },
  {
    "label": "GetRandomPoint()",
    "kind": "Method",
    "detail": "Function (FNavLocation)",
    "insertText": "GetRandomPoint(FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::GetRandomPoint, return FNavLocation();)"
  },
  {
    "label": "GetRandomReachablePointInRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomReachablePointInRadius(const FVector& Origin, float Radius, FNavLocation& OutResult, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::GetRandomReachablePointInRadius, return false;)"
  },
  {
    "label": "GetRandomPointInNavigableRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInNavigableRadius(const FVector& Origin, float Radius, FNavLocation& OutResult, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::GetRandomPointInNavigableRadius, return false;)"
  },
  {
    "label": "ProjectPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectPoint(const FVector& Point, FNavLocation& OutLocation, const FVector& Extent, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::ProjectPoint, return false;)"
  },
  {
    "label": "BatchProjectPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchProjectPoints(TArray<FNavigationProjectionWork>& Workload, const FVector& Extent, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::BatchProjectPoints,)"
  },
  {
    "label": "BatchProjectPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchProjectPoints(TArray<FNavigationProjectionWork>& Workload, FSharedConstNavQueryFilter Filter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::BatchProjectPoints,)"
  },
  {
    "label": "CalcPathCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "CalcPathCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathCost, FSharedConstNavQueryFilter QueryFilter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::CalcPathCost, return ENavigationQueryResult::Invalid;)"
  },
  {
    "label": "CalcPathLength()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "CalcPathLength(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathLength, FSharedConstNavQueryFilter QueryFilter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::CalcPathLength, return ENavigationQueryResult::Invalid;)"
  },
  {
    "label": "CalcPathLengthAndCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "CalcPathLengthAndCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& OutPathLength, FVector::FReal& OutPathCost, FSharedConstNavQueryFilter QueryFilter = NULL, const UObject* Querier = NULL) const PURE_VIRTUAL(ANavigationData::CalcPathLengthAndCost, return ENavigationQueryResult::Invalid;)"
  },
  {
    "label": "DoesNodeContainLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesNodeContainLocation(NavNodeRef NodeRef, const FVector& WorldSpaceLocation) const PURE_VIRTUAL(ANavigationData::DoesNodeContainLocation, return false;)"
  },
  {
    "label": "GetWorldTimeStamp()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetWorldTimeStamp()"
  },
  {
    "label": "OnNavAreaAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaAdded(const UClass* NavAreaClass, int32 AgentIndex)"
  },
  {
    "label": "OnNavAreaRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaRemoved(const UClass* NavAreaClass)"
  },
  {
    "label": "OnNavAreaChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaChanged()"
  },
  {
    "label": "OnNavAreaEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavAreaEvent(const UClass* NavAreaClass, ENavAreaEvent::Type Event)"
  },
  {
    "label": "ProcessNavAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNavAreas(const TSet<const UClass*>& AreaClasses, int32 AgentIndex)"
  },
  {
    "label": "GetAreaClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetAreaClass(int32 AreaID)"
  },
  {
    "label": "IsAreaAssigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAreaAssigned(int32 AreaID)"
  },
  {
    "label": "GetAreaID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAreaID(const UClass* AreaClass)"
  },
  {
    "label": "GetMaxSupportedAreas()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxSupportedAreas()"
  },
  {
    "label": "UpdateCustomLink()",
    "kind": "Method",
    "detail": "Function (Areas = SupportedAreas ; } void)",
    "insertText": "UpdateCustomLink(const INavLinkCustomInterface* CustomLink)"
  },
  {
    "label": "GetQueryFilter()",
    "kind": "Method",
    "detail": "Function (FSharedConstNavQueryFilter)",
    "insertText": "GetQueryFilter(TSubclassOf<UNavigationQueryFilter> FilterClass)"
  },
  {
    "label": "StoreQueryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreQueryFilter(TSubclassOf<UNavigationQueryFilter> FilterClass, FSharedConstNavQueryFilter NavFilter)"
  },
  {
    "label": "RemoveQueryFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveQueryFilter(TSubclassOf<UNavigationQueryFilter> FilterClass)"
  },
  {
    "label": "ConstructRenderingComponent()",
    "kind": "Method",
    "detail": "Function (UPrimitiveComponent*)",
    "insertText": "ConstructRenderingComponent()"
  },
  {
    "label": "CanChangeIsSpatiallyLoadedFlag()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanChangeIsSpatiallyLoadedFlag()"
  },
  {
    "label": "GetNewAreaID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNewAreaID(const UClass* AreaClass)"
  },
  {
    "label": "FPathFindingResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FPathFindingResult(*FFindPathPtr)(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (FFindPathPtr FindPathImplementation ; FFindPathPtr FindHierarchicalPathImplementation ; typedef)",
    "insertText": "bool(*FTestPathPtr)(const FNavAgentProperties& AgentProperties, const FPathFindingQuery& Query, int32* NumVisitedNodes)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (FTestPathPtr TestPathImplementation ; FTestPathPtr TestHierarchicalPathImplementation ; typedef)",
    "insertText": "bool(*FNavRaycastPtr)(const ANavigationData* NavDataInstance, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "bool(*FNavRaycastWithAdditionalResultsPtr)(const ANavigationData* NavDataInstance, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, FSharedConstNavQueryFilter QueryFilter, const UObject* Querier)"
  },
  {
    "label": "GetNextUniqueID()",
    "kind": "Method",
    "detail": "Function (TMap<const UClass*,int32> AreaClassToIdMap ; uint32 bRegistered : 1 ; uint32 bSupportsDefaultAgent : 1 ; uint32 bRebuildingSuspended : 1 ; # if WITH_EDITORONLY_DATA uint32 bIsBuildingOnLoad : 1 ; # endif private : uint16 NavDataUniqueID ; uint16)",
    "insertText": "GetNextUniqueID()"
  },
  {
    "label": "SetNavAgentProperties()",
    "kind": "Method",
    "detail": "Function (protected : FNavAgentProperties NavAgentProperties ; void)",
    "insertText": "SetNavAgentProperties(const FNavAgentProperties& InNavAgentProperties)"
  },
  {
    "label": "FAsyncPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (NavAgentProperties = InNavAgentProperties ; } } ; struct FAsyncPathFindingQuery : public FPathFindingQuery { const uint32 QueryID ; const FNavPathQueryDelegate OnDoneDelegate ; const TEnumAsByte<EPathFindingMode::Type> Mode ; FPathFindingResult Result ;)",
    "insertText": "FAsyncPathFindingQuery() : QueryID(INVALID_NAVQUERYID) , Mode(EPathFindingMode::Regular)"
  },
  {
    "label": "FAsyncPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAsyncPathFindingQuery(const UObject* InOwner, const ANavigationData& InNavData, const FVector& Start, const FVector& End, const FNavPathQueryDelegate& Delegate, FSharedConstNavQueryFilter SourceQueryFilter, const FVector::FReal CostLimit = TNumericLimits<FVector::FReal>::Max())"
  },
  {
    "label": "FAsyncPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAsyncPathFindingQuery(const FPathFindingQuery& Query, const FNavPathQueryDelegate& Delegate, const EPathFindingMode::Type QueryMode)"
  },
  {
    "label": "GetUniqueID()",
    "kind": "Method",
    "detail": "Function (protected : uint32)",
    "insertText": "GetUniqueID()"
  },
  {
    "label": "SetNavigationDataUsed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNavigationDataUsed(const ANavigationData* const NavData)"
  },
  {
    "label": "MakeWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (NavigationDataUsed =)",
    "insertText": "MakeWeakObjectPtr(const_cast<ANavigationData*>(NavData))"
  }
]