[
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "ConvertGeometryCollection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Collision . h \" # if ENABLE_COLLISION_ANALYZER # include \" ICollisionAnalyzer . h \" # include \" CollisionAnalyzerModule . h \" # include \" Engine / HitResult . h \" # include \" Physics / PhysicsInterfaceCore . h \" # include \" Physics / PhysicsInterfaceUtils . h \" # include \" Chaos / Capsule . h \" # include \" Chaos / Sphere . h \" bool bSkipCapture ; bool GCollisionAnalyzerIsRecording ; void)",
    "insertText": "ConvertGeometryCollection(const FPhysicsGeometryCollection& GeomCollection, FQuat& InOutRot, ECAQueryShape::Type& OutQueryShape, FVector& OutDims)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (OutQueryShape = ECAQueryShape::Capsule ; OutDims =)",
    "insertText": "FVector(0, 0, 0)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (OutDims =)",
    "insertText": "FVector(CapsuleGeom.GetRadius(), CapsuleGeom.GetRadius(), CapsuleGeom.GetHeight() * 0.5f + CapsuleGeom.GetRadius())"
  },
  {
    "label": "GetSphereGeometry()",
    "kind": "Method",
    "detail": "Function (break ; } case ECollisionShapeType::Sphere : { OutQueryShape = ECAQueryShape::Sphere ; const auto& SphereGeom = GeomCollection .)",
    "insertText": "GetSphereGeometry()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (OutDims =)",
    "insertText": "FVector(SphereGeom.GetRadius())"
  },
  {
    "label": "GetBoxGeometry()",
    "kind": "Method",
    "detail": "Function (break ; } case ECollisionShapeType::Box : { OutQueryShape = ECAQueryShape::Box ; const auto& BoxGeom = GeomCollection .)",
    "insertText": "GetBoxGeometry()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (OutDims =)",
    "insertText": "FVector(BoxGeom.Extents() * 0.5f)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (break ; } case ECollisionShapeType::Convex : { OutQueryShape = ECAQueryShape::Convex ; break ; } default :)",
    "insertText": "UE_LOG(LogCollision, Warning, TEXT(\"CaptureGeomSweep: Unknown geom type.\"))"
  },
  {
    "label": "CollisionShapeToAnalyzerType()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CollisionShapeToAnalyzerType(const FCollisionShape& InShape, ECAQueryShape::Type& OutType, FVector& OutDims)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (OutDims =)",
    "insertText": "FVector(CapsuleRadius, CapsuleRadius, InShape.GetCapsuleHalfHeight() + CapsuleRadius)"
  },
  {
    "label": "CollisionShapeToAnalyzerType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollisionShapeToAnalyzerType(PGeom, QueryShape, Dims)"
  },
  {
    "label": "GeomSweepMulti()",
    "kind": "Method",
    "detail": "Function (bSkipCapture = true ; TArray<FHitResult> TouchAllResults ;)",
    "insertText": "GeomSweepMulti(World, PGeom, Rot, TouchAllResults, Start, End, DefaultCollisionChannel, Params, ResponseParams, FCollisionObjectQueryParams(FCollisionObjectQueryParams::InitType::AllObjects))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bSkipCapture = false ;)",
    "insertText": "Get()->CaptureQuery(Start, End, Rot, ECAQueryType::GeomSweep, QueryShape, QueryMode, Dims, TraceChannel, Params, ResponseParams, ObjectParams, Results, TouchAllResults, CPUTime)"
  },
  {
    "label": "CaptureGeomSweep()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CaptureGeomSweep(const UWorld* World, const FVector& Start, const FVector& End, const FQuat& GeomRot, ECAQueryMode::Type QueryMode, const FPhysicsGeometryCollection& GeomCollection, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams, const TArray<FHitResult>& Results, double CPUTime)"
  },
  {
    "label": "ConvertGeometryCollection()",
    "kind": "Method",
    "detail": "Function (FQuat UseRot = GeomRot ;)",
    "insertText": "ConvertGeometryCollection(GeomCollection, UseRot, QueryShape, Dims)"
  },
  {
    "label": "GeomSweepMulti()",
    "kind": "Method",
    "detail": "Function (bSkipCapture = true ; TArray<FHitResult> TouchAllResults ;)",
    "insertText": "GeomSweepMulti(World, GeomCollection, UseRot, TouchAllResults, Start, End, DefaultCollisionChannel, Params, ResponseParams, FCollisionObjectQueryParams(FCollisionObjectQueryParams::InitType::AllObjects))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bSkipCapture = false ;)",
    "insertText": "Get()->CaptureQuery(Start, End, UseRot, ECAQueryType::GeomSweep, QueryShape, QueryMode, Dims, TraceChannel, Params, ResponseParams, ObjectParams, Results, TouchAllResults, CPUTime)"
  },
  {
    "label": "CaptureRaycast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CaptureRaycast(const UWorld* World, const FVector& Start, const FVector& End, ECAQueryMode::Type QueryMode, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams, const TArray<FHitResult>& Results, double CPUTime)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bSkipCapture = false ;)",
    "insertText": "Get()->CaptureQuery(Start, End, FQuat::Identity, ECAQueryType::Raycast, ECAQueryShape::Sphere, QueryMode, FVector(0, 0, 0), TraceChannel, Params, ResponseParams, ObjectParams, Results, TouchAllResults, CPUTime)"
  },
  {
    "label": "CaptureOverlap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CaptureOverlap(const UWorld* World, const FPhysicsGeometryCollection& PGeom, const FTransform& InGeomTransform, ECAQueryMode::Type QueryMode, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams, TArray<FOverlapResult>& Results, double CPUTime)"
  },
  {
    "label": "CaptureOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureOverlap(const UWorld* World, const FCollisionShape& PGeom, const FTransform& InGeomTransform, ECAQueryMode::Type QueryMode, ECollisionChannel TraceChannel, const struct FCollisionQueryParams& Params, const struct FCollisionResponseParams& ResponseParams, const struct FCollisionObjectQueryParams& ObjectParams, TArray<FOverlapResult>& Results, double CPUTime)"
  },
  {
    "label": "STARTQUERYTIMER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "STARTQUERYTIMER() double StartTime = FPlatformTime::Seconds() #define CAPTUREGEOMSWEEP(World, Start, End, Rot, QueryMode, PGeom, TraceChannel, Params, ResponseParam, ObjectParam, Results) if (GCollisionAnalyzerIsRecording && IsInGameThread())"
  },
  {
    "label": "CaptureGeomSweep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureGeomSweep(World, Start, End, Rot, QueryMode, PGeom, TraceChannel, Params, ResponseParam, ObjectParam, Results, FPlatformTime::Seconds() - StartTime)"
  },
  {
    "label": "CAPTURERAYCAST()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CAPTURERAYCAST(World, Start, End, QueryMode, TraceChannel, Params, ResponseParam, ObjectParam, Results) if (GCollisionAnalyzerIsRecording && IsInGameThread())"
  },
  {
    "label": "CaptureRaycast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureRaycast(World, Start, End, QueryMode, TraceChannel, Params, ResponseParam, ObjectParam, Results, FPlatformTime::Seconds() - StartTime)"
  },
  {
    "label": "CAPTUREGEOMOVERLAP()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CAPTUREGEOMOVERLAP(World, PGeom, PGeomPose, QueryMode, TraceChannel, Params, ResponseParams, ObjectParams, Results) if (GCollisionAnalyzerIsRecording && IsInGameThread())"
  },
  {
    "label": "CaptureOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureOverlap(World, PGeom, PGeomPose, QueryMode, TraceChannel, Params, ResponseParams, ObjectParams, Results, FPlatformTime::Seconds() - StartTime)"
  }
]