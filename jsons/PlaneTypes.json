[
  {
    "label": "TPlane3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPlane3"
  },
  {
    "label": "EClipSegmentType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClipSegmentType"
  },
  {
    "label": "TPlane3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" VectorUtil . h \" # include \" Math / Plane . h \" # include \" Math / Transform . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TPlane3 { TVector<RealType> Normal ; RealType Constant ;)",
    "insertText": "TPlane3()"
  },
  {
    "label": "TPlane3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPlane3(const UE::Math::TVector<RealType>& Normal, double Constant) : Normal(Normal), Constant(Constant)"
  },
  {
    "label": "TPlane3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPlane3(const UE::Math::TVector<RealType>& Normal, const UE::Math::TVector<RealType>& Point) : Normal(Normal), Constant(Normal.Dot(Point))"
  },
  {
    "label": "TPlane3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPlane3(const UE::Math::TVector<RealType>& P0, const UE::Math::TVector<RealType>& P1, const UE::Math::TVector<RealType>& P2)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (Normal =)",
    "insertText": "Normal(P0, P1, P2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Constant = Normal .)",
    "insertText": "Dot(P0)"
  },
  {
    "label": "TPlane3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPlane3(const FPlane& Plane) : TPlane3(Plane.GetNormal(), Plane.W)"
  },
  {
    "label": "FPlane()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FPlane()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Transform(const TTransform<RealType>& Tr)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> TransformedOrigin = Tr .)",
    "insertText": "TransformPosition(Normal * Constant)"
  },
  {
    "label": "TransformNormal()",
    "kind": "Method",
    "detail": "Function (Normal =)",
    "insertText": "TransformNormal(Tr, Normal)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Constant = Normal .)",
    "insertText": "Dot(TransformedOrigin)"
  },
  {
    "label": "InverseTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InverseTransform(const TTransform<RealType>& Tr)"
  },
  {
    "label": "InverseTransformPosition()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> TransformedOrigin = Tr .)",
    "insertText": "InverseTransformPosition(Normal * Constant)"
  },
  {
    "label": "InverseTransformNormal()",
    "kind": "Method",
    "detail": "Function (Normal =)",
    "insertText": "InverseTransformNormal(Tr, Normal)"
  },
  {
    "label": "DistanceTo()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "DistanceTo(const UE::Math::TVector<RealType>& P)"
  },
  {
    "label": "WhichSide()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "WhichSide(const UE::Math::TVector<RealType>& P)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType NormalDot = LineDirection .)",
    "insertText": "Dot(Normal)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (IntersectionPointOut = TVector<)",
    "insertText": "RealType(TNumericLimits<RealType>::Max(), TNumericLimits<RealType>::Max(), TNumericLimits<RealType>::Max())"
  },
  {
    "label": "ClipSegment()",
    "kind": "Method",
    "detail": "Function (IntersectionPointOut = LineOrigin + t* LineDirection ; return true ; } enum EClipSegmentType { FullyClipped,FirstClipped,SecondClipped,NotClipped } ; EClipSegmentType)",
    "insertText": "ClipSegment(UE::Math::TVector<RealType>& Point0, UE::Math::TVector<RealType>& Point1)"
  },
  {
    "label": "DistanceTo()",
    "kind": "Method",
    "detail": "Function (RealType Dist0 =)",
    "insertText": "DistanceTo(Point0)"
  },
  {
    "label": "DistanceTo()",
    "kind": "Method",
    "detail": "Function (RealType Dist1 =)",
    "insertText": "DistanceTo(Point1)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType Length = DirectionVec .)",
    "insertText": "Dot(Direction)"
  }
]