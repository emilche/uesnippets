[
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRect"
  },
  {
    "label": "FGraphThreshold",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphThreshold"
  },
  {
    "label": "FGraphLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphLine"
  },
  {
    "label": "UReporterGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterGraph"
  },
  {
    "label": "SetGraphScreenSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphScreenSize(float MinX, float MaxX, float MinY, float MaxY)"
  },
  {
    "label": "SetGraphScreenSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphScreenSize(const FVector2D& Min, const FVector2D& Max)"
  },
  {
    "label": "SetAxesMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxesMinMax(float MinX, float MaxX, float MinY, float MaxY)"
  },
  {
    "label": "SetAxesMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxesMinMax(const FVector2D& Min, const FVector2D& Max)"
  },
  {
    "label": "SetNumGraphLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumGraphLines(int32 NumDataLines)"
  },
  {
    "label": "SetNumThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumThresholds(int32 NumThresholds)"
  },
  {
    "label": "SetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundColor(FColor Color)"
  },
  {
    "label": "SetLegendPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLegendPosition(ELegendPosition::Type Position)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBackground(UCanvas* Canvas)"
  },
  {
    "label": "DrawLegend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLegend(UCanvas* Canvas)"
  },
  {
    "label": "DrawAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxes(UCanvas* Canvas)"
  },
  {
    "label": "DrawAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxis(UCanvas* Canvas, FVector2D Start, FVector2D End, float NumNotches, bool bIsVerticalAxis)"
  },
  {
    "label": "DrawThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawThresholds(UCanvas* Canvas)"
  },
  {
    "label": "DrawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawData(UCanvas* Canvas)"
  },
  {
    "label": "DataToNormalized()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "DataToNormalized(const FVector2D& InVector)"
  }
]