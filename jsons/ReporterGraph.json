[
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRect"
  },
  {
    "label": "FGraphThreshold",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphThreshold"
  },
  {
    "label": "FGraphLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphLine"
  },
  {
    "label": "UReporterGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterGraph"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Debug / ReporterBase . h \" # include \" ReporterGraph . generated . h \" class UCanvas ; class UFont ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FGraphThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGraphThreshold() : Threshold(0.0f), Color(FLinearColor::White), ThresholdName(\"UNDEFINED\")"
  },
  {
    "label": "FGraphThreshold()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGraphThreshold(float InThreshold, const FLinearColor& InColor, FString InName) : Threshold(InThreshold), Color(InColor), ThresholdName(InName)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: FORCEINLINE void SetStyles(EGraphAxisStyle::Type NewAxisStyle, EGraphDataStyle::Type NewDataStyle)"
  },
  {
    "label": "SetAxesColor()",
    "kind": "Method",
    "detail": "Function (AxisStyle = NewAxisStyle ; DataStyle = NewDataStyle ; } void)",
    "insertText": "SetAxesColor(FLinearColor NewAxesColor)"
  },
  {
    "label": "SetGraphScreenSize()",
    "kind": "Method",
    "detail": "Function (AxesColor = NewAxesColor ; } void)",
    "insertText": "SetGraphScreenSize(float MinX, float MaxX, float MinY, float MaxY)"
  },
  {
    "label": "SetGraphScreenSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphScreenSize(const FVector2D& Min, const FVector2D& Max)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(UCanvas* Canvas)"
  },
  {
    "label": "SetAxesMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxesMinMax(float MinX, float MaxX, float MinY, float MaxY)"
  },
  {
    "label": "SetAxesMinMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxesMinMax(const FVector2D& Min, const FVector2D& Max)"
  },
  {
    "label": "SetNumGraphLines()",
    "kind": "Method",
    "detail": "Function (NumXNotches = NewNumXNotches ; NumYNotches = NewNumYNotches ; } void)",
    "insertText": "SetNumGraphLines(int32 NumDataLines)"
  },
  {
    "label": "GetGraphLine()",
    "kind": "Method",
    "detail": "Function (FGraphLine*)",
    "insertText": "GetGraphLine(int32 LineIndex)"
  },
  {
    "label": "SetNumThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumThresholds(int32 NumThresholds)"
  },
  {
    "label": "GetThreshold()",
    "kind": "Method",
    "detail": "Function (FGraphThreshold*)",
    "insertText": "GetThreshold(int32 ThresholdIndex)"
  },
  {
    "label": "SetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundColor(FColor Color)"
  },
  {
    "label": "SetLegendPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLegendPosition(ELegendPosition::Type Position)"
  },
  {
    "label": "OffsetDataSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetDataSets(bool Enable)"
  },
  {
    "label": "IsOffsetForDataSetsEnabled()",
    "kind": "Method",
    "detail": "Function (bOffsetDataSets = Enable ; } bool)",
    "insertText": "IsOffsetForDataSetsEnabled()"
  },
  {
    "label": "UseTinyFont()",
    "kind": "Method",
    "detail": "Function (CursorLocation = InValue ; } void)",
    "insertText": "UseTinyFont(bool InUseTinyFont)"
  },
  {
    "label": "DrawCursorOnGraph()",
    "kind": "Method",
    "detail": "Function (bUseTinyFont = InUseTinyFont ; } void)",
    "insertText": "DrawCursorOnGraph(bool InDrawCursorOnGraph)"
  },
  {
    "label": "DrawExtremesOnGraph()",
    "kind": "Method",
    "detail": "Function (bDrawCursorOnGraph = InDrawCursorOnGraph ; } void)",
    "insertText": "DrawExtremesOnGraph(bool InDrawExtremes)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (bDrawExtremes = InDrawExtremes ; } void)",
    "insertText": "DrawBackground(UCanvas* Canvas)"
  },
  {
    "label": "DrawLegend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLegend(UCanvas* Canvas)"
  },
  {
    "label": "DrawAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxes(UCanvas* Canvas)"
  },
  {
    "label": "DrawAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawAxis(UCanvas* Canvas, FVector2D Start, FVector2D End, float NumNotches, bool bIsVerticalAxis)"
  },
  {
    "label": "DrawThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawThresholds(UCanvas* Canvas)"
  },
  {
    "label": "DrawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawData(UCanvas* Canvas)"
  },
  {
    "label": "ToScreenSpace()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ToScreenSpace(const FVector2D& InVector, UCanvas* Canvas)"
  },
  {
    "label": "DataToNormalized()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "DataToNormalized(const FVector2D& InVector)"
  },
  {
    "label": "GetDefaultFont()",
    "kind": "Method",
    "detail": "Function (UFont*)",
    "insertText": "GetDefaultFont()"
  }
]