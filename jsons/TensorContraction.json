[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorContractionBlockMemAllocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorContractionBlockMemAllocator"
  },
  {
    "label": "BlockSizes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockSizes"
  },
  {
    "label": "TensorContractionKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorContractionKernel"
  },
  {
    "label": "TensorContractionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorContractionParams"
  },
  {
    "label": "NoOpOutputKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NoOpOutputKernel"
  },
  {
    "label": "TensorContractionOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorContractionOp"
  },
  {
    "label": "TensorContractionEvaluatorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorContractionEvaluatorBase"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_H # define EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_H namespace Eigen { namespace internal { template<Dimensions,LhsXprType,RhsXprType,OutputKernelType> struct traits<TensorContractionOp<Dimensions,LhsXprType,RhsXprType,OutputKernelType>> { typedef gebp_traits<remove_const<LhsXprType::Scalar>::type,remove_const<RhsXprType::Scalar>::type>::ResScalar Scalar ; typedef promote_storage_type<traits<LhsXprType>::StorageKind,traits<RhsXprType>::StorageKind>::ret StorageKind ; typedef promote_index_type<traits<LhsXprType>::Index,traits<RhsXprType>::Index>::type Index ; typedef LhsXprType::Nested LhsNested ; typedef RhsXprType::Nested RhsNested ; typedef remove_reference<LhsNested>::type _LhsNested ; typedef remove_reference<RhsNested>::type _RhsNested ; const int NumDimensions = traits<LhsXprType>::NumDimensions + traits<RhsXprType>::NumDimensions - 2* array_size<Dimensions>::value ; const int Layout = traits<LhsXprType>::Layout ; typedef conditional<Pointer_type_promotion<LhsXprType::Scalar,Scalar>::val,traits<LhsXprType>::PointerType,traits<RhsXprType>::PointerType>::type PointerType ; enum { Flags = 0 } ; } ; template<Dimensions,LhsXprType,RhsXprType,OutputKernelType> struct eval<TensorContractionOp<Dimensions,LhsXprType,RhsXprType,OutputKernelType>,Eigen::Dense> { typedef const TensorContractionOp<Dimensions,LhsXprType,RhsXprType,OutputKernelType>& type ; } ; template<Dimensions,LhsXprType,RhsXprType,OutputKernelType> struct nested<TensorContractionOp<Dimensions,LhsXprType,RhsXprType,OutputKernelType>,1,eval<TensorContractionOp<Dimensions,LhsXprType,RhsXprType,OutputKernelType>>::type> { typedef TensorContractionOp<Dimensions,LhsXprType,RhsXprType,OutputKernelType> type ; } ; template<Indices_,LeftArgType_,RightArgType_,OutputKernelType_,Device_> struct traits<TensorEvaluator<const TensorContractionOp<Indices_,LeftArgType_,RightArgType_,OutputKernelType_>,Device_>> { typedef Indices_ Indices ; typedef LeftArgType_ LeftArgType ; typedef RightArgType_ RightArgType ; typedef OutputKernelType_ OutputKernelType ; typedef Device_ Device ; const int NumDimensions = traits<LeftArgType_>::NumDimensions + traits<RightArgType_>::NumDimensions - 2* array_size<Indices_>::value ; } ; template<LhsScalar,RhsScalar> struct TensorContractionBlockMemAllocator { typedef void* BlockMemHandle ; template<Device> EIGEN_DEVICE_FUNC BlockMemHandle)",
    "insertText": "allocate(Device& d, const Index bm, const Index bk, const Index bn, LhsScalar** lhs_block, RhsScalar** rhs_block)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs_block)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rhs_block)"
  },
  {
    "label": "ComputeLhsRhsBlockSizes()",
    "kind": "Method",
    "detail": "Function (BlockSizes sz =)",
    "insertText": "ComputeLhsRhsBlockSizes(bm, bk, bn)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* block_mem = static_cast<)",
    "insertText": "char(d.allocate(sz.lhs_size + sz.rhs_size))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(block_mem)"
  },
  {
    "label": "LhsScalar()",
    "kind": "Method",
    "detail": "Function (* lhs_block = reinterpret_cast<)",
    "insertText": "LhsScalar(block_mem)"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (* rhs_block = reinterpret_cast<)",
    "insertText": "RhsScalar(block_mem + sz.lhs_size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(num_slices > 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(num_lhs >= 0 && num_rhs >= 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(num_lhs == 0 || lhs_blocks)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(num_rhs == 0 || rhs_blocks)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void* block_mem = d .)",
    "insertText": "allocate((num_lhs * sz.lhs_size + num_rhs * sz.rhs_size) * num_slices)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* mem = static_cast<)",
    "insertText": "char(block_mem)"
  },
  {
    "label": "LhsScalar()",
    "kind": "Method",
    "detail": "Function (lhs_blocks [ x ] [ m ] = reinterpret_cast<)",
    "insertText": "LhsScalar(mem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mem + = sz . lhs_size ; })",
    "insertText": "if(num_rhs > 0) rhs_blocks[x].resize(num_rhs)"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (rhs_blocks [ x ] [ n ] = reinterpret_cast<)",
    "insertText": "RhsScalar(mem)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (mem + = sz . rhs_size ; } } return block_mem ; } template<Device> EIGEN_DEVICE_FUNC void)",
    "insertText": "deallocate(Device& d, BlockMemHandle handle)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (d .)",
    "insertText": "deallocate(handle)"
  },
  {
    "label": "ComputeLhsRhsBlockSizes()",
    "kind": "Method",
    "detail": "Function (} private : struct BlockSizes { Index lhs_size ; Index rhs_size ; } ; EIGEN_DEVICE_FUNC BlockSizes)",
    "insertText": "ComputeLhsRhsBlockSizes(const Index bm, const Index bk, const Index bn)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (Index align =)",
    "insertText": "maxi(EIGEN_MAX_ALIGN_BYTES, 1)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (BlockSizes sz ; sz . lhs_size = divup<)",
    "insertText": "Index(bm * bk * sizeof(LhsScalar), align)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (sz . rhs_size = divup<)",
    "insertText": "Index(bn * bk * sizeof(RhsScalar), align)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} typedef LhsScalar* LhsBlock ; typedef RhsScalar* RhsBlock ; typedef TensorContractionBlockMemAllocator<LhsScalar,RhsScalar> BlockMemAllocator ; typedef BlockMemAllocator::BlockMemHandle BlockMemHandle ; typedef internal::gebp_traits<LhsScalar,RhsScalar> Traits ; typedef internal::gemm_pack_lhs<LhsScalar,StorageIndex,LhsMapper::SubMapper,Traits::mr,Traits::LhsProgress,Traits::LhsPacket4Packing,ColMajor> LhsPacker ; typedef internal::gemm_pack_rhs<RhsScalar,StorageIndex,RhsMapper::SubMapper,Traits::nr,ColMajor> RhsPacker ; typedef internal::gebp_kernel<LhsScalar,RhsScalar,StorageIndex,OutputMapper,Traits::mr,Traits::nr,false,false> GebpKernel ; template<Device> EIGEN_DEVICE_FUNC BlockMemHandle)",
    "insertText": "allocate(Device& d, LhsBlock* lhs_block, RhsBlock* rhs_block)"
  },
  {
    "label": "allocateSlices()",
    "kind": "Method",
    "detail": "Function (} template<Device> EIGEN_DEVICE_FUNC BlockMemHandle)",
    "insertText": "allocateSlices(Device& d, const StorageIndex num_lhs, const StorageIndex num_rhs, const StorageIndex num_slices, std::vector<LhsBlock>* lhs_blocks, std::vector<RhsBlock>* rhs_blocks)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(d, handle)"
  },
  {
    "label": "packLhs()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void)",
    "insertText": "packLhs(LhsBlock* lhsBlock, const typename LhsMapper::SubMapper& data_mapper, const StorageIndex depth, const StorageIndex rows)"
  },
  {
    "label": "LhsPacker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LhsPacker()(*lhsBlock, data_mapper, depth, rows, 0, 0)"
  },
  {
    "label": "packRhs()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void)",
    "insertText": "packRhs(RhsBlock* rhsBlock, const typename RhsMapper::SubMapper& data_mapper, const StorageIndex depth, const StorageIndex cols)"
  },
  {
    "label": "RhsPacker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RhsPacker()(*rhsBlock, data_mapper, depth, cols)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_DONT_INLINE void)",
    "insertText": "invoke(const OutputMapper& output_mapper, const LhsBlock& lhsBlock, const RhsBlock& rhsBlock, const StorageIndex rows, const StorageIndex depth, const StorageIndex cols, const ResScalar alpha, const ResScalar beta)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(beta == ResScalar(1))"
  },
  {
    "label": "GebpKernel()",
    "kind": "Method",
    "detail": "Function (const int kComputeStrideFromBlockDimensions = - 1 ;)",
    "insertText": "GebpKernel()(output_mapper, lhsBlock, rhsBlock, rows, depth, cols, alpha, kComputeStrideFromBlockDimensions, kComputeStrideFromBlockDimensions, 0, 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : const StorageIndex m ; const StorageIndex k ; const StorageIndex n ; const StorageIndex bm ; const StorageIndex bk ; const StorageIndex bn ; } ; } struct TensorContractionParams { bool swapped_arguments ; } ; struct NoOpOutputKernel { template<Index,Scalar> EIGEN_ALWAYS_INLINE void)",
    "insertText": "operator()( const internal::blas_data_mapper<Scalar, Index, ColMajor>& output_mapper, const TensorContractionParams& params, Index i, Index j, Index num_rows, Index num_cols)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(output_mapper)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(params)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(i)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(j)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(num_rows)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(num_cols)"
  },
  {
    "label": "TensorContractionOp()",
    "kind": "Method",
    "detail": "Function (} } ; template<Indices,LhsXprType,RhsXprType,OutputKernelType = const NoOpOutputKernel> class TensorContractionOp : public TensorBase<TensorContractionOp<Indices,LhsXprType,RhsXprType,OutputKernelType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorContractionOp>::Scalar Scalar ; typedef internal::gebp_traits<LhsXprType::CoeffReturnType,RhsXprType::CoeffReturnType>::ResScalar CoeffReturnType ; typedef Eigen::internal::nested<TensorContractionOp>::type Nested ; typedef Eigen::internal::traits<TensorContractionOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorContractionOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorContractionOp(const LhsXprType& lhs, const RhsXprType& rhs, const Indices& dims, const OutputKernelType& output_kernel = OutputKernelType()) : m_lhs_xpr(lhs), m_rhs_xpr(rhs), m_indices(dims), m_output_kernel(output_kernel)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Indices&)",
    "insertText": "indices()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; typedef internal::conditional<static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "TensorContractionEvaluatorBase()",
    "kind": "Method",
    "detail": "Function (typedef TensorEvaluator<EvalLeftArgType,Device> LeftEvaluatorType ; typedef TensorEvaluator<EvalRightArgType,Device> RightEvaluatorType ; const int LDims = internal::array_size<TensorEvaluator<EvalLeftArgType,Device>::Dimensions>::value ; const int RDims = internal::array_size<TensorEvaluator<EvalRightArgType,Device>::Dimensions>::value ; const int ContractDims = internal::array_size<Indices>::value ; const int NumDims = LDims + RDims - 2* ContractDims ; typedef array<Index,ContractDims> contract_t ; typedef array<Index,LDims - ContractDims> left_nocontract_t ; typedef array<Index,RDims - ContractDims> right_nocontract_t ; typedef DSizes<Index,NumDims> Dimensions ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorContractionEvaluatorBase(const XprType& op, const Device& device) : m_leftImpl(choose(Cond<static_cast<int>(Layout) == static_cast<int>(ColMajor)>(), op.lhsExpression(), op.rhsExpression()), device), m_rightImpl(choose(Cond<static_cast<int>(Layout) == static_cast<int>(ColMajor)>(), op.rhsExpression(), op.lhsExpression()), device), m_device(device), m_output_kernel(op.outputKernel()), m_result(NULL)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<LeftArgType, Device>::Layout) == static_cast<int>(TensorEvaluator<RightArgType, Device>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DSizes<Index,LDims> eval_left_dims ; DSizes<Index,RDims> eval_right_dims ; array<IndexPair<Index>,ContractDims> eval_op_indices ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (eval_left_dims [ i ] = m_leftImpl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < RDims; i++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < ContractDims; i++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int i = 0; i < LDims; i++)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(eval_op_indices[j].first != eval_op_indices[i].first && eval_op_indices[j].second != eval_op_indices[i].second && \"contraction axes should be unique\")"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(eval_op_indices[j], eval_op_indices[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } array<Index,LDims> lhs_strides ; lhs_strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 0; i < LDims-1; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (lhs_strides [ i + 1 ] = lhs_strides [ i ]* eval_left_dims [ i ] ; } array<Index,RDims> rhs_strides ; rhs_strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 0; i < RDims-1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (rhs_strides [ i + 1 ] = rhs_strides [ i ]* eval_right_dims [ i ] ; })",
    "insertText": "if(m_i_strides.size() > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool contracting = false ;)",
    "insertText": "for(int j = 0; j < ContractDims; j++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (contracting = true ; break ; } })",
    "insertText": "if(!contracting)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ dim_idx ] = eval_left_dims [ i ] ; m_left_nocontract_strides [ nocontract_idx ] = lhs_strides [ i ] ;)",
    "insertText": "if(dim_idx != i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_lhs_inner_dim_contiguous = false ; })",
    "insertText": "if(nocontract_idx+1 < internal::array_size<left_nocontract_t>::value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ dim_idx ] = eval_right_dims [ i ] ;)",
    "insertText": "if(nocontract_idx+1 < internal::array_size<right_nocontract_t>::value)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (Index left = eval_op_indices [ i ] . first ; Index right = eval_op_indices [ i ] . second ; Index size = eval_left_dims [ left ] ;)",
    "insertText": "eigen_assert(size == eval_right_dims[right] && \"Contraction axes must be same size\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_k_strides [ i + 1 ] = m_k_strides [ i ]* size ; } else { m_k_size = m_k_strides [ i ]* size ; } m_left_contracting_strides [ i ] = lhs_strides [ left ] ; m_right_contracting_strides [ i ] = rhs_strides [ right ] ;)",
    "insertText": "if(i > 0 && right < eval_op_indices[i-1].second)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_rhs_inner_dim_reordered = true ; })",
    "insertText": "if(right != i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_rhs_inner_dim_contiguous = false ; } })",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(RowMajor))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_dimensions[i], m_dimensions[j])"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} } m_tensor_contraction_params . swapped_arguments = static_cast<)",
    "insertText": "int(Layout)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(data)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(m_result)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_leftImpl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [this, done, dest](bool) { m_rightImpl.evalSubExprsIfNeededAsync(nullptr, [this, done, dest](bool) { if (dest) { evalToAsync(dest, [done]() { done(false); }); } else { m_result = static_cast<EvaluatorPointerType>( m_device.allocate(dimensions().TotalSize() * sizeof(Scalar))); evalToAsync(m_result, [done]() { done(true); }); } }); })"
  },
  {
    "label": "TENSOR_CONTRACTION_DISPATCH()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef TENSOR_CONTRACTION_DISPATCH # define)",
    "insertText": "TENSOR_CONTRACTION_DISPATCH(METHOD, ALIGNMENT, ARGS) \\ if (this->m_lhs_inner_dim_contiguous)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(this->m_rhs_inner_dim_contiguous)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(this->m_rhs_inner_dim_reordered)"
  },
  {
    "label": "TENSOR_CONTRACTION_ASYNC_DISPATCH()",
    "kind": "Method",
    "detail": "Function (\\ METHOD<false,false,true,ALIGNMENT> ARGS ; \\ } else { \\ METHOD<false,false,false,ALIGNMENT> ARGS ; \\ } \\ } \\ } # endif # ifndef TENSOR_CONTRACTION_ASYNC_DISPATCH # define)",
    "insertText": "TENSOR_CONTRACTION_ASYNC_DISPATCH(METHOD, DONE, ALIGNMENT, ARGS, FN) \\ if (this->m_lhs_inner_dim_contiguous)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (FN)",
    "insertText": "else(new METHOD<DONE, true, true, false, ALIGNMENT> ARGS)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (FN)",
    "insertText": "else(new METHOD<DONE, true, false, false, ALIGNMENT> ARGS)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (FN)",
    "insertText": "else(new METHOD<DONE, false, true, false, ALIGNMENT> ARGS)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (FN)",
    "insertText": "else(new METHOD<DONE, false, false, false, ALIGNMENT> ARGS)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # endif EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(Scalar* buffer)"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "Derived(this)->template evalProduct<Unaligned>(buffer)"
  },
  {
    "label": "evalToAsync()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_THREADS template<EvalToCallback> void)",
    "insertText": "evalToAsync(Scalar* buffer, EvalToCallback done)"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (static_cast<const)",
    "insertText": "Derived(this) ->template evalProductAsync<EvalToCallback, Unaligned>(buffer, std::move(done))"
  },
  {
    "label": "evalProductSequential()",
    "kind": "Method",
    "detail": "Function (} # endif template<bool lhs_inner_dim_contiguous,bool rhs_inner_dim_contiguous,bool rhs_inner_dim_reordered,int Alignment> void)",
    "insertText": "evalProductSequential(Scalar* buffer)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (this -> template evalGemv<lhs_inner_dim_contiguous,rhs_inner_dim_contiguous,rhs_inner_dim_reordered,)",
    "insertText": "Alignment(buffer)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } template<bool lhs_inner_dim_contiguous,bool rhs_inner_dim_contiguous,bool rhs_inner_dim_reordered,int Alignment> # if !)",
    "insertText": "defined(EIGEN_HIPCC) EIGEN_DEVICE_FUNC #endif void evalGemv(Scalar* buffer)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (const Index rows = m_i_size ; const Index cols = m_k_size ; typedef internal::remove_const<EvalLeftArgType::Scalar>::type LhsScalar ; typedef internal::remove_const<EvalRightArgType::Scalar>::type RhsScalar ; typedef TensorEvaluator<EvalLeftArgType,Device> LeftEvaluator ; typedef TensorEvaluator<EvalRightArgType,Device> RightEvaluator ; const Index lhs_packet_size = internal::unpacket_traits<LeftEvaluator::PacketReturnType>::size ; const Index rhs_packet_size = internal::unpacket_traits<RightEvaluator::PacketReturnType>::size ; const int lhs_alignment = LeftEvaluator::IsAligned ? Aligned : Unaligned ; const int rhs_alignment = RightEvaluator::IsAligned ? Aligned : Unaligned ; typedef internal::TensorContractionInputMapper<LhsScalar,Index,internal::Lhs,LeftEvaluator,left_nocontract_t,contract_t,lhs_packet_size,lhs_inner_dim_contiguous,false,lhs_alignment> LhsMapper ; typedef internal::TensorContractionInputMapper<RhsScalar,Index,internal::Rhs,RightEvaluator,right_nocontract_t,contract_t,rhs_packet_size,rhs_inner_dim_contiguous,rhs_inner_dim_reordered,rhs_alignment> RhsMapper ; LhsMapper)",
    "insertText": "lhs(m_leftImpl, m_left_nocontract_strides, m_i_strides, m_left_contracting_strides, m_k_strides)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(m_rightImpl, m_right_nocontract_strides, m_j_strides, m_right_contracting_strides, m_k_strides)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (const Scalar)",
    "insertText": "alpha(1)"
  },
  {
    "label": "resIncr()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "resIncr(1)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "memset(buffer, 0, rows * sizeof(Scalar))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::general_matrix_vector_product<Index,LhsScalar,LhsMapper,ColMajor,false,RhsScalar,RhsMapper,false)",
    "insertText": "run(rows, cols, lhs, rhs, buffer, resIncr, alpha)"
  },
  {
    "label": "m_output_kernel()",
    "kind": "Method",
    "detail": "Function (typedef internal::blas_data_mapper<Scalar,Index,ColMajor> OutputMapper ;)",
    "insertText": "m_output_kernel(OutputMapper(buffer, rows), m_tensor_contraction_params, static_cast<Index>(0), static_cast<Index>(0), rows, static_cast<Index>(1))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<bool lhs_inner_dim_contiguous,bool rhs_inner_dim_contiguous,bool rhs_inner_dim_reordered,int Alignment> # if !)",
    "insertText": "defined(EIGEN_HIPCC) EIGEN_DEVICE_FUNC #endif void evalGemm(Scalar* buffer)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (const Index k = this -> m_k_size ; this -> template evalGemmPartial<lhs_inner_dim_contiguous,rhs_inner_dim_contiguous,rhs_inner_dim_reordered,Alignment,)",
    "insertText": "true(buffer, 0, k, 1)"
  },
  {
    "label": "evalGemmPartialWithoutOutputKernel()",
    "kind": "Method",
    "detail": "Function (} template<bool lhs_inner_dim_contiguous,bool rhs_inner_dim_contiguous,bool rhs_inner_dim_reordered,int Alignment> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalGemmPartialWithoutOutputKernel(Scalar* buffer, Index k_start, Index k_end, int num_threads)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (evalGemmPartial<lhs_inner_dim_contiguous,rhs_inner_dim_contiguous,rhs_inner_dim_reordered,Alignment,)",
    "insertText": "false(buffer, k_start, k_end, num_threads)"
  },
  {
    "label": "evalGemmPartial()",
    "kind": "Method",
    "detail": "Function (} template<bool lhs_inner_dim_contiguous,bool rhs_inner_dim_contiguous,bool rhs_inner_dim_reordered,int Alignment,bool use_output_kernel> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalGemmPartial(Scalar* buffer, Index k_start, Index k_end, int num_threads)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(k_end >= k_start && k_start >= 0 && k_end <= this->m_k_size)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (const Index k_slice = k_end - k_start ; const Index m = this -> m_i_size ; const Index n = this -> m_j_size ; typedef internal::remove_const<EvalLeftArgType::Scalar>::type LhsScalar ; typedef internal::remove_const<EvalRightArgType::Scalar>::type RhsScalar ; typedef TensorEvaluator<EvalLeftArgType,Device> LeftEvaluator ; typedef TensorEvaluator<EvalRightArgType,Device> RightEvaluator ; const Index lhs_packet_size = internal::unpacket_traits<LeftEvaluator::PacketReturnType>::size ; const Index rhs_packet_size = internal::unpacket_traits<RightEvaluator::PacketReturnType>::size ; typedef internal::TensorContractionInputMapper<LhsScalar,Index,internal::Lhs,LeftEvaluator,left_nocontract_t,contract_t,lhs_packet_size,lhs_inner_dim_contiguous,false,Unaligned> LhsMapper ; typedef internal::TensorContractionInputMapper<RhsScalar,Index,internal::Rhs,RightEvaluator,right_nocontract_t,contract_t,rhs_packet_size,rhs_inner_dim_contiguous,rhs_inner_dim_reordered,Unaligned> RhsMapper ; typedef internal::blas_data_mapper<Scalar,Index,ColMajor> OutputMapper ; typedef internal::TensorContractionKernel<Scalar,LhsScalar,RhsScalar,Index,OutputMapper,LhsMapper,RhsMapper> TensorContractionKernel ; LhsMapper)",
    "insertText": "lhs(this->m_leftImpl, this->m_left_nocontract_strides, this->m_i_strides, this->m_left_contracting_strides, this->m_k_strides)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (RhsMapper)",
    "insertText": "rhs(this->m_rightImpl, this->m_right_nocontract_strides, this->m_j_strides, this->m_right_contracting_strides, this->m_k_strides)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (OutputMapper)",
    "insertText": "output(buffer, m)"
  },
  {
    "label": "blocking()",
    "kind": "Method",
    "detail": "Function (internal::TensorContractionBlocking<Scalar,LhsScalar,RhsScalar,Index,internal::ShardByCol>)",
    "insertText": "blocking(k_slice, m, n, num_threads)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (const Index kc = blocking .)",
    "insertText": "kc()"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index mc =)",
    "insertText": "mini(m, blocking.mc())"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index nc =)",
    "insertText": "mini(n, blocking.nc())"
  },
  {
    "label": "kernel()",
    "kind": "Method",
    "detail": "Function (typedef TensorContractionKernel::LhsBlock LhsBlock ; typedef TensorContractionKernel::RhsBlock RhsBlock ; LhsBlock blockA ; RhsBlock blockB ; TensorContractionKernel)",
    "insertText": "kernel(m, k_slice, n, mc, kc, nc)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (typedef TensorContractionKernel::BlockMemHandle BlockMemHandle ; const BlockMemHandle packed_mem = kernel .)",
    "insertText": "allocate(this->m_device, &blockA, &blockB)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (this -> m_device .)",
    "insertText": "memset(buffer, 0, m * n * sizeof(Scalar))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index i2=0; i2<m; i2+=mc)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index actual_mc =)",
    "insertText": "mini(i2+mc,m)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index actual_kc =)",
    "insertText": "mini(k2 + kc, k_end)"
  },
  {
    "label": "packLhs()",
    "kind": "Method",
    "detail": "Function (kernel .)",
    "insertText": "packLhs(&blockA, lhs.getSubMapper(i2, k2), actual_kc, actual_mc)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar alpha =)",
    "insertText": "Scalar(1)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (const Scalar)",
    "insertText": "beta(TensorContractionKernel::HasBeta && k2 == k_start) ? Scalar(0) : Scalar(1)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index actual_nc =)",
    "insertText": "mini(j2 + nc, n)"
  },
  {
    "label": "packRhs()",
    "kind": "Method",
    "detail": "Function (kernel .)",
    "insertText": "packRhs(&blockB, rhs.getSubMapper(k2, j2), actual_kc, actual_nc)"
  },
  {
    "label": "getSubMapper()",
    "kind": "Method",
    "detail": "Function (const OutputMapper output_mapper = output .)",
    "insertText": "getSubMapper(i2, j2)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (kernel .)",
    "insertText": "invoke(output_mapper, blockA, blockB, actual_mc, actual_kc, actual_nc, alpha, beta)"
  },
  {
    "label": "m_output_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_output_kernel(output_mapper, m_tensor_contraction_params, i2, j2, actual_mc, actual_nc)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} } } } kernel .)",
    "insertText": "deallocate(this->m_device, packed_mem)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate(m_result)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (m_result = NULL ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const int LDims = internal::array_size<TensorEvaluator<EvalLeftArgType,Device>::Dimensions>::value ; const int RDims = internal::array_size<TensorEvaluator<EvalRightArgType,Device>::Dimensions>::value ; const int ContractDims = internal::array_size<Indices>::value ; typedef array<Index,ContractDims> contract_t ; typedef array<Index,LDims - ContractDims> left_nocontract_t ; typedef array<Index,RDims - ContractDims> right_nocontract_t ; const int NumDims = LDims + RDims - 2* ContractDims ; typedef DSizes<Index,NumDims> Dimensions ;)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "evalProduct()",
    "kind": "Method",
    "detail": "Function (} template<int Alignment> void)",
    "insertText": "evalProduct(Scalar* buffer)"
  },
  {
    "label": "TENSOR_CONTRACTION_DISPATCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TENSOR_CONTRACTION_DISPATCH(this->template evalProductSequential, Alignment, (buffer))"
  }
]