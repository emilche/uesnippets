[
  {
    "label": "BucketRanges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketRanges"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "PersistentSampleMapRecords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentSampleMapRecords"
  },
  {
    "label": "PersistentSparseHistogramDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentSparseHistogramDataManager"
  },
  {
    "label": "WritableSharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WritableSharedMemoryRegion"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PersistentHistogramData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PersistentHistogramData"
  },
  {
    "label": "StatisticsRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsRecorder"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_PERSISTENT_HISTOGRAM_ALLOCATOR_H_ # define BASE_METRICS_PERSISTENT_HISTOGRAM_ALLOCATOR_H_ # include<atomic> # include<map> # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / feature_list . h \" # include \" base / memory / raw_ptr . h \" # include \" base / metrics / histogram_base . h \" # include \" base / metrics / persistent_memory_allocator . h \" # include \" base / metrics / ranges_manager . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_piece . h \" # include \" base / synchronization / lock . h \" # include \" build / build_config . h \" namespace base { class BucketRanges ; class FilePath ; class PersistentSampleMapRecords ; class PersistentSparseHistogramDataManager ; class WritableSharedMemoryRegion ; BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPersistentHistogramsFeature)"
  },
  {
    "label": "PersistentSparseHistogramDataManager()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT PersistentSparseHistogramDataManager { public :)",
    "insertText": "PersistentSparseHistogramDataManager(PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "PersistentSparseHistogramDataManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistentSparseHistogramDataManager(const PersistentSparseHistogramDataManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PersistentSparseHistogramDataManager&)",
    "insertText": "operator(const PersistentSparseHistogramDataManager&)"
  },
  {
    "label": "PersistentSparseHistogramDataManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PersistentSparseHistogramDataManager()"
  },
  {
    "label": "UseSampleMapRecords()",
    "kind": "Method",
    "detail": "Function (PersistentSampleMapRecords*)",
    "insertText": "UseSampleMapRecords(uint64_t id, const void* user)"
  },
  {
    "label": "GetAsObject()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "GetAsObject(PersistentMemoryAllocator::Reference ref)"
  },
  {
    "label": "GetSampleMapRecordsWhileLocked()",
    "kind": "Method",
    "detail": "Function (} private : class PersistentSampleMapRecords ; PersistentSampleMapRecords*)",
    "insertText": "GetSampleMapRecordsWhileLocked(uint64_t id) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "LoadRecords()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadRecords(PersistentSampleMapRecords* sample_map_records)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (raw_ptr<PersistentMemoryAllocator> allocator_ ; PersistentMemoryAllocator::Iterator record_iterator_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "PersistentSampleMapRecords()",
    "kind": "Method",
    "detail": "Function (base::Lock lock_ ; } ; class BASE_EXPORT PersistentSampleMapRecords { public :)",
    "insertText": "PersistentSampleMapRecords(PersistentSparseHistogramDataManager* data_manager, uint64_t sample_map_id)"
  },
  {
    "label": "PersistentSampleMapRecords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistentSampleMapRecords(const PersistentSampleMapRecords&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PersistentSampleMapRecords&)",
    "insertText": "operator(const PersistentSampleMapRecords&)"
  },
  {
    "label": "PersistentSampleMapRecords()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PersistentSampleMapRecords()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (PersistentSampleMapRecords*)",
    "insertText": "Acquire(const void* user)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(const void* user)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator::Reference)",
    "insertText": "GetNext()"
  },
  {
    "label": "CreateNew()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator::Reference)",
    "insertText": "CreateNew(HistogramBase::Sample value)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} private : PersistentSparseHistogramDataManager ; raw_ptr<PersistentSparseHistogramDataManager> data_manager_ ; const uint64_t sample_map_id_ ; raw_ptr<const void> user_ = nullptr ; size_t seen_ = 0 ; std::vector<PersistentMemoryAllocator::Reference> records_ ; std::vector<PersistentMemoryAllocator::Reference> found_ ; } ; class BASE_EXPORT PersistentHistogramAllocator { public : using Reference = PersistentMemoryAllocator::Reference ; class BASE_EXPORT Iterator { public :)",
    "insertText": "Iterator(PersistentHistogramAllocator* allocator)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iterator(const Iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator(const Iterator&)"
  },
  {
    "label": "GetNextWithIgnore()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<HistogramBase>)",
    "insertText": "GetNextWithIgnore(Reference ignore)"
  },
  {
    "label": "PersistentHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (private : raw_ptr<PersistentHistogramAllocator> allocator_ ; PersistentMemoryAllocator::Iterator memory_iter_ ; } ;)",
    "insertText": "PersistentHistogramAllocator(std::unique_ptr<PersistentMemoryAllocator> memory)"
  },
  {
    "label": "PersistentHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PersistentHistogramAllocator(const PersistentHistogramAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PersistentHistogramAllocator&)",
    "insertText": "operator(const PersistentHistogramAllocator&)"
  },
  {
    "label": "PersistentHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PersistentHistogramAllocator()"
  },
  {
    "label": "memory_allocator()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator*)",
    "insertText": "memory_allocator()"
  },
  {
    "label": "Id()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "Id()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "Name()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "data()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "length()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "used()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "used()"
  },
  {
    "label": "GetHistogram()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<HistogramBase>)",
    "insertText": "GetHistogram(Reference ref)"
  },
  {
    "label": "AllocateHistogram()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "AllocateHistogram(HistogramType histogram_type, const std::string& name, int minimum, int maximum, const BucketRanges* bucket_ranges, int32_t flags, Reference* ref_ptr)"
  },
  {
    "label": "FinalizeHistogram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeHistogram(Reference ref, bool registered)"
  },
  {
    "label": "MergeHistogramDeltaToStatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeHistogramDeltaToStatisticsRecorder(HistogramBase* histogram)"
  },
  {
    "label": "MergeHistogramFinalDeltaToStatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeHistogramFinalDeltaToStatisticsRecorder(const HistogramBase* histogram)"
  },
  {
    "label": "CreateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackingHistograms(StringPiece name)"
  },
  {
    "label": "UpdateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackingHistograms()"
  },
  {
    "label": "SetRangesManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRangesManager(RangesManager* ranges_manager)"
  },
  {
    "label": "ClearLastCreatedReferenceForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLastCreatedReferenceForTesting()"
  },
  {
    "label": "last_created()",
    "kind": "Method",
    "detail": "Function (protected : struct PersistentHistogramData ; Reference)",
    "insertText": "last_created()"
  },
  {
    "label": "GetNextHistogramWithIgnore()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<HistogramBase>)",
    "insertText": "GetNextHistogramWithIgnore(Iterator* iter, Reference ignore)"
  },
  {
    "label": "CreateHistogram()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<HistogramBase>)",
    "insertText": "CreateHistogram(PersistentHistogramData* histogram_data_ptr)"
  },
  {
    "label": "GetOrCreateStatisticsRecorderHistogram()",
    "kind": "Method",
    "detail": "Function (HistogramBase*)",
    "insertText": "GetOrCreateStatisticsRecorderHistogram(const HistogramBase* histogram)"
  },
  {
    "label": "GlobalHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PersistentMemoryAllocator> memory_allocator_ ; std::unique_ptr<base::RangesManager> ranges_manager_ ; PersistentSparseHistogramDataManager sparse_histogram_data_manager_ ; std::atomic<Reference> last_created_ = 0 ; } ; class BASE_EXPORT GlobalHistogramAllocator : public PersistentHistogramAllocator { public :)",
    "insertText": "GlobalHistogramAllocator(const GlobalHistogramAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GlobalHistogramAllocator&)",
    "insertText": "operator(const GlobalHistogramAllocator&)"
  },
  {
    "label": "GlobalHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GlobalHistogramAllocator()"
  },
  {
    "label": "CreateWithPersistentMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithPersistentMemory(void* base, size_t size, size_t page_size, uint64_t id, StringPiece name)"
  },
  {
    "label": "CreateWithLocalMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithLocalMemory(size_t size, uint64_t id, StringPiece name)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_NACL) static bool CreateWithFile(const FilePath& file_path, size_t size, uint64_t id, StringPiece name, bool exclusive_write = false)"
  },
  {
    "label": "CreateWithActiveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithActiveFile(const FilePath& base_path, const FilePath& active_path, const FilePath& spare_path, size_t size, uint64_t id, StringPiece name)"
  },
  {
    "label": "CreateWithActiveFileInDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithActiveFileInDir(const FilePath& dir, size_t size, uint64_t id, StringPiece name)"
  },
  {
    "label": "ConstructFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePath(const FilePath& dir, StringPiece name)"
  },
  {
    "label": "ConstructFilePathForActiveFile()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePathForActiveFile(const FilePath& dir, StringPiece name)"
  },
  {
    "label": "ConstructFilePathForUploadDir()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePathForUploadDir(const FilePath& dir, StringPiece name, base::Time stamp, ProcessId pid)"
  },
  {
    "label": "ConstructFilePathForUploadDir()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePathForUploadDir(const FilePath& dir, StringPiece name)"
  },
  {
    "label": "ParseFilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFilePath(const FilePath& path, std::string* out_name, Time* out_stamp, ProcessId* out_pid)"
  },
  {
    "label": "CreateSpareFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSpareFile(const FilePath& spare_path, size_t size)"
  },
  {
    "label": "CreateWithSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CreateWithSharedMemoryRegion(const WritableSharedMemoryRegion& region)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(std::unique_ptr<GlobalHistogramAllocator> allocator)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (GlobalHistogramAllocator*)",
    "insertText": "Get()"
  },
  {
    "label": "ReleaseForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<GlobalHistogramAllocator>)",
    "insertText": "ReleaseForTesting()"
  },
  {
    "label": "SetPersistentLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPersistentLocation(const FilePath& location)"
  },
  {
    "label": "GetPersistentLocation()",
    "kind": "Method",
    "detail": "Function (const FilePath&)",
    "insertText": "GetPersistentLocation()"
  },
  {
    "label": "WriteToPersistentLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteToPersistentLocation()"
  },
  {
    "label": "DeletePersistentLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePersistentLocation()"
  },
  {
    "label": "GlobalHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (private : class StatisticsRecorder ;)",
    "insertText": "GlobalHistogramAllocator(std::unique_ptr<PersistentMemoryAllocator> memory)"
  },
  {
    "label": "ImportHistogramsToStatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportHistogramsToStatisticsRecorder()"
  },
  {
    "label": "MakeMetricsFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "MakeMetricsFilePath(const FilePath& dir, StringPiece name)"
  }
]