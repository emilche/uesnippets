[
  {
    "label": "BucketRanges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketRanges"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "PersistentSampleMapRecords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentSampleMapRecords"
  },
  {
    "label": "PersistentSparseHistogramDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentSparseHistogramDataManager"
  },
  {
    "label": "WritableSharedMemoryRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WritableSharedMemoryRegion"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PersistentSampleMapRecords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PersistentSampleMapRecords"
  },
  {
    "label": "manages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "manages"
  },
  {
    "label": "so",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "so"
  },
  {
    "label": "above",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "above"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "manages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "manages"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "it",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "it"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "PersistentHistogramData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PersistentHistogramData"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "StatisticsRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsRecorder"
  },
  {
    "label": "BASE_DECLARE_FEATURE()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT)",
    "insertText": "BASE_DECLARE_FEATURE(kPersistentHistogramsFeature)"
  },
  {
    "label": "PersistentSparseHistogramDataManager()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PersistentSparseHistogramDataManager(\n      PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "LoadRecords()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadRecords(PersistentSampleMapRecords* sample_map_records)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (record_iterator_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sample_records_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(const void* user)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator::Reference)",
    "insertText": "GetNext()"
  },
  {
    "label": "CreateNew()",
    "kind": "Method",
    "detail": "Function (PersistentMemoryAllocator::Reference)",
    "insertText": "CreateNew(HistogramBase::Sample value)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Iterator(PersistentHistogramAllocator* allocator)"
  },
  {
    "label": "GetNextWithIgnore()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNextWithIgnore(0)"
  },
  {
    "label": "GetNextWithIgnore()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "GetNextWithIgnore(Reference ignore)"
  },
  {
    "label": "PersistentHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PersistentHistogramAllocator(\n      std::unique_ptr<PersistentMemoryAllocator> memory)"
  },
  {
    "label": "GetHistogram()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "GetHistogram(Reference ref)"
  },
  {
    "label": "AllocateHistogram()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "AllocateHistogram(\n      HistogramType histogram_type,\n      const std::string& name,\n      int minimum,\n      int maximum,\n      const BucketRanges* bucket_ranges,\n      int32_t flags,\n      Reference* ref_ptr)"
  },
  {
    "label": "FinalizeHistogram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeHistogram(Reference ref, bool registered)"
  },
  {
    "label": "MergeHistogramDeltaToStatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeHistogramDeltaToStatisticsRecorder(HistogramBase* histogram)"
  },
  {
    "label": "MergeHistogramFinalDeltaToStatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeHistogramFinalDeltaToStatisticsRecorder(\n      const HistogramBase* histogram)"
  },
  {
    "label": "CreateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackingHistograms(StringPiece name)"
  },
  {
    "label": "UpdateTrackingHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTrackingHistograms()"
  },
  {
    "label": "SetRangesManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRangesManager(RangesManager* ranges_manager)"
  },
  {
    "label": "ClearLastCreatedReferenceForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLastCreatedReferenceForTesting()"
  },
  {
    "label": "GetNextHistogramWithIgnore()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "GetNextHistogramWithIgnore(Iterator* iter,\n                                                            Reference ignore)"
  },
  {
    "label": "CreateHistogram()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramBase>)",
    "insertText": "CreateHistogram(\n      PersistentHistogramData* histogram_data_ptr)"
  },
  {
    "label": "CreateWithPersistentMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithPersistentMemory(void* base,\n                                         size_t size,\n                                         size_t page_size,\n                                         uint64_t id,\n                                         StringPiece name)"
  },
  {
    "label": "CreateWithLocalMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithLocalMemory(size_t size, uint64_t id, StringPiece name)"
  },
  {
    "label": "CreateWithFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithFile(const FilePath& file_path,\n                             size_t size,\n                             uint64_t id,\n                             StringPiece name,\n                             bool exclusive_write = false)"
  },
  {
    "label": "CreateWithActiveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithActiveFile(const FilePath& base_path,\n                                   const FilePath& active_path,\n                                   const FilePath& spare_path,\n                                   size_t size,\n                                   uint64_t id,\n                                   StringPiece name)"
  },
  {
    "label": "CreateWithActiveFileInDir()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithActiveFileInDir(const FilePath& dir,\n                                        size_t size,\n                                        uint64_t id,\n                                        StringPiece name)"
  },
  {
    "label": "ConstructFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePath(const FilePath& dir, StringPiece name)"
  },
  {
    "label": "ConstructFilePathForActiveFile()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePathForActiveFile(const FilePath& dir,\n                                                 StringPiece name)"
  },
  {
    "label": "ConstructFilePathForUploadDir()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePathForUploadDir(const FilePath& dir,\n                                                StringPiece name,\n                                                base::Time stamp,\n                                                ProcessId pid)"
  },
  {
    "label": "ConstructFilePathForUploadDir()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "ConstructFilePathForUploadDir(const FilePath& dir,\n                                                StringPiece name)"
  },
  {
    "label": "ParseFilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFilePath(const FilePath& path,\n                            std::string* out_name,\n                            Time* out_stamp,\n                            ProcessId* out_pid)"
  },
  {
    "label": "CreateSpareFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateSpareFile(const FilePath& spare_path, size_t size)"
  },
  {
    "label": "CreateWithSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithSharedMemoryRegion(\n      const WritableSharedMemoryRegion& region)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(std::unique_ptr<GlobalHistogramAllocator> allocator)"
  },
  {
    "label": "ReleaseForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<GlobalHistogramAllocator>)",
    "insertText": "ReleaseForTesting()"
  },
  {
    "label": "SetPersistentLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPersistentLocation(const FilePath& location)"
  },
  {
    "label": "WriteToPersistentLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteToPersistentLocation()"
  },
  {
    "label": "DeletePersistentLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePersistentLocation()"
  },
  {
    "label": "GlobalHistogramAllocator()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "GlobalHistogramAllocator(\n      std::unique_ptr<PersistentMemoryAllocator> memory)"
  },
  {
    "label": "ImportHistogramsToStatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportHistogramsToStatisticsRecorder()"
  },
  {
    "label": "MakeMetricsFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "MakeMetricsFilePath(const FilePath& dir, StringPiece name)"
  }
]