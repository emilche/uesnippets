[
  {
    "label": "FResourceArrayInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceArrayInterface"
  },
  {
    "label": "FResourceBulkDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceBulkDataInterface"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FRHIResourceStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceStats"
  },
  {
    "label": "FVertexElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexElement"
  },
  {
    "label": "FSamplerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSamplerStateInitializerRHI"
  },
  {
    "label": "FRasterizerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizerStateInitializerRHI"
  },
  {
    "label": "FDepthStencilStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilStateInitializerRHI"
  },
  {
    "label": "FBlendStateInitializerRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendStateInitializerRHI"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FViewportBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportBounds"
  },
  {
    "label": "FVRamAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVRamAllocation"
  },
  {
    "label": "FRHIResourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceInfo"
  },
  {
    "label": "FRHIDispatchIndirectParametersNoPadding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDispatchIndirectParametersNoPadding"
  },
  {
    "label": "FRHIDispatchIndirectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDispatchIndirectParameters"
  },
  {
    "label": "FRHIDrawIndirectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDrawIndirectParameters"
  },
  {
    "label": "FRHIDrawIndexedIndirectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIDrawIndexedIndirectParameters"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" RHIDefinitions . h \" # include \" Templates / TypeHash . h \" # include \" Containers / StaticArray . h \" # include \" Containers / StringFwd . h \" # include \" Math / IntRect . h \" # include \" Math / PerspectiveMatrix . h \" # include \" Math / ScaleMatrix . h \" # include \" Math / TranslationMatrix . h \" # include \" PixelFormat . h \" # include \" GpuProfilerTrace . h \" # include \" RHIShaderPlatform . h \" # include \" RHIFeatureLevel . h \" # include \" RHIAccess . h \" # include \" RHIGlobals . h \" class FResourceArrayInterface ; class FResourceBulkDataInterface ; class FRHICommandList ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogRHI,Log,VeryVerbose)"
  },
  {
    "label": "ShouldSaveScreenshotAfterProfilingGPU()",
    "kind": "Method",
    "detail": "Function (namespace RHIConfig { bool)",
    "insertText": "ShouldSaveScreenshotAfterProfilingGPU()"
  },
  {
    "label": "ShouldShowProfilerAfterProfilingGPU()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowProfilerAfterProfilingGPU()"
  },
  {
    "label": "GetGPUHitchThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGPUHitchThreshold()"
  },
  {
    "label": "IsRHIDeviceAMD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRHIDeviceAMD()"
  },
  {
    "label": "IsRHIDeviceIntel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRHIDeviceIntel()"
  },
  {
    "label": "IsRHIDeviceNVIDIA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRHIDeviceNVIDIA()"
  },
  {
    "label": "IsRHIDeviceApple()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRHIDeviceApple()"
  },
  {
    "label": "UseGPUCrashDebugging()",
    "kind": "Method",
    "detail": "Function (namespace UE::RHI { bool)",
    "insertText": "UseGPUCrashDebugging()"
  },
  {
    "label": "UseGPUCrashBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseGPUCrashBreadcrumbs()"
  },
  {
    "label": "ShouldEnableGPUCrashFeature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEnableGPUCrashFeature(IConsoleVariable& CVar, TCHAR const* CommandLineSwitch)"
  },
  {
    "label": "RHIGetMetalShaderLanguageVersion()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIGetMetalShaderLanguageVersion(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHIGetPreviewFeatureLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetPreviewFeatureLevel(ERHIFeatureLevel::Type& PreviewFeatureLevelOUT)"
  },
  {
    "label": "RHIPreferredPixelFormatHint()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "RHIPreferredPixelFormatHint(EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIGetPreferredClearUAVRectPSResourceType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RHIGetPreferredClearUAVRectPSResourceType(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "RHIDumpResourceMemoryToCSV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDumpResourceMemoryToCSV()"
  },
  {
    "label": "RHISupportsVolumeTextureRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHISupportsVolumeTextureRendering(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "FRHIResourceStats()",
    "kind": "Method",
    "detail": "Function (struct FRHIResourceStats { FName Name ; FName OwnerName ; FString Type ; FString Flags ; uint64 SizeInBytes = 0 ; bool bResident = false ; bool bMarkedForDelete = false ; bool bTransient = false ; bool bStreaming = false ; bool bRenderTarget = false ; bool bDepthStencil = false ; bool bUnorderedAccessView = false ; bool bRayTracingAccelerationStructure = false ; bool bHasFlags = false ;)",
    "insertText": "FRHIResourceStats(const FName& InName, const FName& InOwnerName, const FString& InType, const FString& InFlags, const uint64& InSizeInBytes, bool bInResident, bool bInMarkedForDelete, bool bInTransient, bool bInStreaming, bool bInRT, bool bInDS, bool bInUAV, bool bInRTAS, bool bInHasFlags) : Name(InName) , OwnerName(InOwnerName) , Type(InType) , Flags(InFlags) , SizeInBytes(InSizeInBytes) , bResident(bInResident) , bMarkedForDelete(bInMarkedForDelete) , bTransient(bInTransient) , bStreaming(bInStreaming) , bRenderTarget(bInRT) , bDepthStencil(bInDS) , bUnorderedAccessView(bInUAV) , bRayTracingAccelerationStructure(bInRTAS) , bHasFlags(bInHasFlags)"
  },
  {
    "label": "RHIGetTrackedResourceStats()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "RHIGetTrackedResourceStats(TArray<TSharedPtr<FRHIResourceStats>>& OutResourceStats)"
  },
  {
    "label": "CalculateMSAASampleArrayIndex()",
    "kind": "Method",
    "detail": "Function (# include \" MultiGPU . h \" int32)",
    "insertText": "CalculateMSAASampleArrayIndex(int32 NumSamples, int32 SampleIndex)"
  },
  {
    "label": "GetMSAASampleOffsets()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetMSAASampleOffsets(int32 NumSamples, int32 SampleIndex)"
  },
  {
    "label": "RHIInitDefaultPixelFormatCapabilities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIInitDefaultPixelFormatCapabilities()"
  },
  {
    "label": "RHIPixelFormatHasCapabilities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIPixelFormatHasCapabilities(EPixelFormat InFormat, EPixelFormatCapabilities InCapabilities)"
  },
  {
    "label": "RHIIsTypedUAVLoadSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIIsTypedUAVLoadSupported(EPixelFormat InFormat)"
  },
  {
    "label": "RHIIsTypedUAVStoreSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIIsTypedUAVStoreSupported(EPixelFormat InFormat)"
  },
  {
    "label": "CalculateImageBytes()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "CalculateImageBytes(uint32 SizeX,uint32 SizeY,uint32 SizeZ,uint8 Format)"
  },
  {
    "label": "AdjustProjectionMatrixForRHI()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "AdjustProjectionMatrixForRHI(const FMatrix& InProjectionMatrix)"
  },
  {
    "label": "ClipSpaceFixScale()",
    "kind": "Method",
    "detail": "Function (FScaleMatrix)",
    "insertText": "ClipSpaceFixScale(FVector(1.0f, GProjectionSignY, 1.0f - GMinClipZ))"
  },
  {
    "label": "ClipSpaceFixTranslate()",
    "kind": "Method",
    "detail": "Function (FTranslationMatrix)",
    "insertText": "ClipSpaceFixTranslate(FVector(0.0f, 0.0f, GMinClipZ))"
  },
  {
    "label": "FVertexElement()",
    "kind": "Method",
    "detail": "Function (struct FVertexElement { uint8 StreamIndex ; uint8 Offset ; TEnumAsByte<EVertexElementType> Type ; uint8 AttributeIndex ; uint16 Stride ; uint16 bUseInstanceIndex ;)",
    "insertText": "FVertexElement()"
  },
  {
    "label": "FVertexElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVertexElement(uint8 InStreamIndex,uint8 InOffset,EVertexElementType InType,uint8 InAttributeIndex,uint16 InStride,bool bInUseInstanceIndex = false): StreamIndex(InStreamIndex), Offset(InOffset), Type(InType), AttributeIndex(InAttributeIndex), Stride(InStride), bUseInstanceIndex(bInUseInstanceIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVertexElement& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FVertexElement& Element)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Ar<<Element . StreamIndex ; Ar<<Element . Offset ; Ar<<Element . Type ; Ar<<Element . AttributeIndex ; Ar<<Element . Stride ; Ar<<Element . bUseInstanceIndex ; return Ar ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const FString& Src)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const FStringView& Src)"
  },
  {
    "label": "FSamplerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (} ; typedef TArray<FVertexElement,TFixedAllocator<MaxVertexElementCount>> FVertexDeclarationElementList ; struct FSamplerStateInitializerRHI {)",
    "insertText": "FSamplerStateInitializerRHI()"
  },
  {
    "label": "FSamplerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSamplerStateInitializerRHI(ESamplerFilter InFilter, ESamplerAddressMode InAddressU = AM_Wrap, ESamplerAddressMode InAddressV = AM_Wrap, ESamplerAddressMode InAddressW = AM_Wrap, float InMipBias = 0, int32 InMaxAnisotropy = 0, float InMinMipLevel = 0, float InMaxMipLevel = FLT_MAX, uint32 InBorderColor = 0, ESamplerCompareFunction InSamplerComparisonFunction = SCF_Never ) : Filter(InFilter) , AddressU(InAddressU) , AddressV(InAddressV) , AddressW(InAddressW) , MipBias(InMipBias) , MinMipLevel(InMinMipLevel) , MaxMipLevel(InMaxMipLevel) , MaxAnisotropy(InMaxAnisotropy) , BorderColor(InBorderColor) , SamplerComparisonFunction(InSamplerComparisonFunction)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} TEnumAsByte<ESamplerFilter> Filter = SF_Point ; TEnumAsByte<ESamplerAddressMode> AddressU = AM_Wrap ; TEnumAsByte<ESamplerAddressMode> AddressV = AM_Wrap ; TEnumAsByte<ESamplerAddressMode> AddressW = AM_Wrap ; float MipBias = 0 . 0 f ; float MinMipLevel = 0 . 0 f ; float MaxMipLevel = FLT_MAX ; int32 MaxAnisotropy = 0 ; uint32 BorderColor = 0 ; TEnumAsByte<ESamplerCompareFunction> SamplerComparisonFunction = SCF_Never ; uint32)",
    "insertText": "GetTypeHash(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSamplerStateInitializerRHI& A, const FSamplerStateInitializerRHI& B)"
  },
  {
    "label": "FRasterizerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FRasterizerStateInitializerRHI()"
  },
  {
    "label": "FRasterizerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRasterizerStateInitializerRHI(const FRasterizerStateInitializerRHI&)"
  },
  {
    "label": "FRasterizerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRasterizerStateInitializerRHI(FRasterizerStateInitializerRHI&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateInitializerRHI&)",
    "insertText": "operator(const FRasterizerStateInitializerRHI&)"
  },
  {
    "label": "FRasterizerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "FRasterizerStateInitializerRHI(ERasterizerFillMode InFillMode, ERasterizerCullMode InCullMode, bool bInAllowMSAA) : FillMode(InFillMode) , CullMode(InCullMode) , bAllowMSAA(bInAllowMSAA)"
  },
  {
    "label": "FRasterizerStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRasterizerStateInitializerRHI(ERasterizerFillMode InFillMode, ERasterizerCullMode InCullMode, float InDepthBias, float InSlopeScaleDepthBias, ERasterizerDepthClipMode InDepthClipMode, bool bInAllowMSAA) : FillMode(InFillMode) , CullMode(InCullMode) , DepthBias(InDepthBias) , SlopeScaleDepthBias(InSlopeScaleDepthBias) , DepthClipMode(InDepthClipMode) , bAllowMSAA(bInAllowMSAA)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FRasterizerStateInitializerRHI& RasterizerStateInitializer)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<RasterizerStateInitializer . FillMode ; Ar<<RasterizerStateInitializer . CullMode ; Ar<<RasterizerStateInitializer . DepthBias ; Ar<<RasterizerStateInitializer . SlopeScaleDepthBias ; Ar<<RasterizerStateInitializer . DepthClipMode ; Ar<<RasterizerStateInitializer . bAllowMSAA ; return Ar ; } uint32)",
    "insertText": "GetTypeHash(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FRasterizerStateInitializerRHI& A, const FRasterizerStateInitializerRHI& B)"
  },
  {
    "label": "FDepthStencilStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (} ; struct FDepthStencilStateInitializerRHI { bool bEnableDepthWrite ; TEnumAsByte<ECompareFunction> DepthTest ; bool bEnableFrontFaceStencil ; TEnumAsByte<ECompareFunction> FrontFaceStencilTest ; TEnumAsByte<EStencilOp> FrontFaceStencilFailStencilOp ; TEnumAsByte<EStencilOp> FrontFaceDepthFailStencilOp ; TEnumAsByte<EStencilOp> FrontFacePassStencilOp ; bool bEnableBackFaceStencil ; TEnumAsByte<ECompareFunction> BackFaceStencilTest ; TEnumAsByte<EStencilOp> BackFaceStencilFailStencilOp ; TEnumAsByte<EStencilOp> BackFaceDepthFailStencilOp ; TEnumAsByte<EStencilOp> BackFacePassStencilOp ; uint8 StencilReadMask ; uint8 StencilWriteMask ;)",
    "insertText": "FDepthStencilStateInitializerRHI(bool bInEnableDepthWrite = true, ECompareFunction InDepthTest = CF_LessEqual, bool bInEnableFrontFaceStencil = false, ECompareFunction InFrontFaceStencilTest = CF_Always, EStencilOp InFrontFaceStencilFailStencilOp = SO_Keep, EStencilOp InFrontFaceDepthFailStencilOp = SO_Keep, EStencilOp InFrontFacePassStencilOp = SO_Keep, bool bInEnableBackFaceStencil = false, ECompareFunction InBackFaceStencilTest = CF_Always, EStencilOp InBackFaceStencilFailStencilOp = SO_Keep, EStencilOp InBackFaceDepthFailStencilOp = SO_Keep, EStencilOp InBackFacePassStencilOp = SO_Keep, uint8 InStencilReadMask = 0xFF, uint8 InStencilWriteMask = 0xFF ) : bEnableDepthWrite(bInEnableDepthWrite) , DepthTest(InDepthTest) , bEnableFrontFaceStencil(bInEnableFrontFaceStencil) , FrontFaceStencilTest(InFrontFaceStencilTest) , FrontFaceStencilFailStencilOp(InFrontFaceStencilFailStencilOp) , FrontFaceDepthFailStencilOp(InFrontFaceDepthFailStencilOp) , FrontFacePassStencilOp(InFrontFacePassStencilOp) , bEnableBackFaceStencil(bInEnableBackFaceStencil) , BackFaceStencilTest(InBackFaceStencilTest) , BackFaceStencilFailStencilOp(InBackFaceStencilFailStencilOp) , BackFaceDepthFailStencilOp(InBackFaceDepthFailStencilOp) , BackFacePassStencilOp(InBackFacePassStencilOp) , StencilReadMask(InStencilReadMask) , StencilWriteMask(InStencilWriteMask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FDepthStencilStateInitializerRHI& DepthStencilStateInitializer)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<DepthStencilStateInitializer . bEnableDepthWrite ; Ar<<DepthStencilStateInitializer . DepthTest ; Ar<<DepthStencilStateInitializer . bEnableFrontFaceStencil ; Ar<<DepthStencilStateInitializer . FrontFaceStencilTest ; Ar<<DepthStencilStateInitializer . FrontFaceStencilFailStencilOp ; Ar<<DepthStencilStateInitializer . FrontFaceDepthFailStencilOp ; Ar<<DepthStencilStateInitializer . FrontFacePassStencilOp ; Ar<<DepthStencilStateInitializer . bEnableBackFaceStencil ; Ar<<DepthStencilStateInitializer . BackFaceStencilTest ; Ar<<DepthStencilStateInitializer . BackFaceStencilFailStencilOp ; Ar<<DepthStencilStateInitializer . BackFaceDepthFailStencilOp ; Ar<<DepthStencilStateInitializer . BackFacePassStencilOp ; Ar<<DepthStencilStateInitializer . StencilReadMask ; Ar<<DepthStencilStateInitializer . StencilWriteMask ; return Ar ; } uint32)",
    "insertText": "GetTypeHash(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDepthStencilStateInitializerRHI& A, const FDepthStencilStateInitializerRHI& B)"
  },
  {
    "label": "FRenderTarget()",
    "kind": "Method",
    "detail": "Function (} ; class FBlendStateInitializerRHI { public : struct FRenderTarget { enum { NUM_STRING_FIELDS = 7 } ; TEnumAsByte<EBlendOperation> ColorBlendOp ; TEnumAsByte<EBlendFactor> ColorSrcBlend ; TEnumAsByte<EBlendFactor> ColorDestBlend ; TEnumAsByte<EBlendOperation> AlphaBlendOp ; TEnumAsByte<EBlendFactor> AlphaSrcBlend ; TEnumAsByte<EBlendFactor> AlphaDestBlend ; TEnumAsByte<EColorWriteMask> ColorWriteMask ;)",
    "insertText": "FRenderTarget(EBlendOperation InColorBlendOp = BO_Add, EBlendFactor InColorSrcBlend = BF_One, EBlendFactor InColorDestBlend = BF_Zero, EBlendOperation InAlphaBlendOp = BO_Add, EBlendFactor InAlphaSrcBlend = BF_One, EBlendFactor InAlphaDestBlend = BF_Zero, EColorWriteMask InColorWriteMask = CW_RGBA ) : ColorBlendOp(InColorBlendOp) , ColorSrcBlend(InColorSrcBlend) , ColorDestBlend(InColorDestBlend) , AlphaBlendOp(InAlphaBlendOp) , AlphaSrcBlend(InAlphaSrcBlend) , AlphaDestBlend(InAlphaDestBlend) , ColorWriteMask(InColorWriteMask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FRenderTarget& RenderTarget)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const TArray<FString>& Parts, int32 Index)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(TArrayView<const FStringView> Parts)"
  },
  {
    "label": "FBlendStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FBlendStateInitializerRHI()"
  },
  {
    "label": "FBlendStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBlendStateInitializerRHI(const FRenderTarget& InRenderTargetBlendState, bool bInUseAlphaToCoverage = false) : bUseIndependentRenderTargetBlendStates(false) , bUseAlphaToCoverage(bInUseAlphaToCoverage)"
  },
  {
    "label": "FBlendStateInitializerRHI()",
    "kind": "Method",
    "detail": "Function (RenderTargets [ 0 ] = InRenderTargetBlendState ; } template<uint32 NumRenderTargets>)",
    "insertText": "FBlendStateInitializerRHI(const TStaticArray<FRenderTarget,NumRenderTargets>& InRenderTargetBlendStates, bool bInUseAlphaToCoverage = false) : bUseIndependentRenderTargetBlendStates(NumRenderTargets > 1) , bUseAlphaToCoverage(bInUseAlphaToCoverage)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RenderTargets [ RenderTargetIndex ] = InRenderTargetBlendStates [ RenderTargetIndex ] ; } } TStaticArray<FRenderTarget,MaxSimultaneousRenderTargets> RenderTargets ; bool bUseIndependentRenderTargetBlendStates ; bool bUseAlphaToCoverage ; FArchive&)",
    "insertText": "operator(FArchive& Ar,FBlendStateInitializerRHI& BlendStateInitializer)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<BlendStateInitializer . RenderTargets ; Ar<<BlendStateInitializer . bUseIndependentRenderTargetBlendStates ; Ar<<BlendStateInitializer . bUseAlphaToCoverage ; return Ar ; } uint32)",
    "insertText": "GetTypeHash(const FBlendStateInitializerRHI::FRenderTarget& RenderTarget)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FBlendStateInitializerRHI::FRenderTarget& A, const FBlendStateInitializerRHI::FRenderTarget& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FBlendStateInitializerRHI& A, const FBlendStateInitializerRHI& B)"
  },
  {
    "label": "FViewportBounds()",
    "kind": "Method",
    "detail": "Function (} ; struct FViewportBounds { float TopLeftX ; float TopLeftY ; float Width ; float Height ; float MinDepth ; float MaxDepth ;)",
    "insertText": "FViewportBounds()"
  },
  {
    "label": "FViewportBounds()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FViewportBounds(float InTopLeftX, float InTopLeftY, float InWidth, float InHeight, float InMinDepth = 0.0f, float InMaxDepth = 1.0f) :TopLeftX(InTopLeftX), TopLeftY(InTopLeftY), Width(InWidth), Height(InHeight), MinDepth(InMinDepth), MaxDepth(InMaxDepth)"
  },
  {
    "label": "FVRamAllocation()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVRamAllocation {)",
    "insertText": "FVRamAllocation()"
  },
  {
    "label": "FVRamAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVRamAllocation(uint64 InAllocationStart, uint64 InAllocationSize) : AllocationStart(InAllocationStart) , AllocationSize(InAllocationSize)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "RHIInit()",
    "kind": "Method",
    "detail": "Function (struct FRHIDrawIndirectParameters { uint32 VertexCountPerInstance ; uint32 InstanceCount ; uint32 StartVertexLocation ; uint32 StartInstanceLocation ; } ; struct FRHIDrawIndexedIndirectParameters { uint32 IndexCountPerInstance ; uint32 InstanceCount ; uint32 StartIndexLocation ; int32 BaseVertexLocation ; uint32 StartInstanceLocation ; } ; # include \" RHIResources . h \" # include \" DynamicRHI . h \" void)",
    "insertText": "RHIInit(bool bHasEditorToken)"
  },
  {
    "label": "RHIPostInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIPostInit(const TArray<uint32>& InPixelFormatByteWidth)"
  },
  {
    "label": "RHIExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIExit()"
  },
  {
    "label": "RHIDetectAndWarnOfBadDrivers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDetectAndWarnOfBadDrivers(bool bHasEditorToken)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FRHIPanicEvent, const FName&)"
  },
  {
    "label": "RHIGetPanicDelegate()",
    "kind": "Method",
    "detail": "Function (FRHIPanicEvent&)",
    "insertText": "RHIGetPanicDelegate()"
  },
  {
    "label": "GetExpectedFeatureLevelMaxTextureSamplers()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetExpectedFeatureLevelMaxTextureSamplers(const FStaticFeatureLevel FeatureLevel)"
  },
  {
    "label": "RHIGetRuntimeBindlessResourcesConfiguration()",
    "kind": "Method",
    "detail": "Function (ERHIBindlessConfiguration)",
    "insertText": "RHIGetRuntimeBindlessResourcesConfiguration(EShaderPlatform Platform)"
  },
  {
    "label": "RHIGetRuntimeBindlessSamplersConfiguration()",
    "kind": "Method",
    "detail": "Function (ERHIBindlessConfiguration)",
    "insertText": "RHIGetRuntimeBindlessSamplersConfiguration(EShaderPlatform Platform)"
  }
]