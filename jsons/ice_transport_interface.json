[
  {
    "label": "IceTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceTransportInternal"
  },
  {
    "label": "PortAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PortAllocator"
  },
  {
    "label": "IceControllerFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceControllerFactoryInterface"
  },
  {
    "label": "ActiveIceControllerFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActiveIceControllerFactoryInterface"
  },
  {
    "label": "FieldTrialsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialsView"
  },
  {
    "label": "IceTransportInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceTransportInterface"
  },
  {
    "label": "IceTransportInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceTransportInit"
  },
  {
    "label": "IceTransportFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceTransportFactory"
  },
  {
    "label": "internal()",
    "kind": "Method",
    "detail": "Function (# ifndef API_ICE_TRANSPORT_INTERFACE_H_ # define API_ICE_TRANSPORT_INTERFACE_H_ # include<string> # include \" api / async_dns_resolver . h \" # include \" api / async_resolver_factory . h \" # include \" api / rtc_error . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / ref_count . h \" namespace cricket { class IceTransportInternal ; class PortAllocator ; class IceControllerFactoryInterface ; class ActiveIceControllerFactoryInterface ; } namespace webrtc { class FieldTrialsView ; class IceTransportInterface : public rtc::RefCountInterface { public : cricket::IceTransportInternal*)",
    "insertText": "internal()"
  },
  {
    "label": "IceTransportInit()",
    "kind": "Method",
    "detail": "Function (} ; struct IceTransportInit final { public :)",
    "insertText": "IceTransportInit()"
  },
  {
    "label": "IceTransportInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IceTransportInit(const IceTransportInit&)"
  },
  {
    "label": "IceTransportInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IceTransportInit(IceTransportInit&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IceTransportInit&)",
    "insertText": "operator(const IceTransportInit&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IceTransportInit&)",
    "insertText": "operator(IceTransportInit&&)"
  },
  {
    "label": "port_allocator()",
    "kind": "Method",
    "detail": "Function (cricket::PortAllocator*)",
    "insertText": "port_allocator()"
  },
  {
    "label": "async_dns_resolver_factory()",
    "kind": "Method",
    "detail": "Function (port_allocator_ = port_allocator ; } AsyncDnsResolverFactoryInterface*)",
    "insertText": "async_dns_resolver_factory()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!async_resolver_factory_)"
  },
  {
    "label": "async_resolver_factory()",
    "kind": "Method",
    "detail": "Function (async_dns_resolver_factory_ = async_dns_resolver_factory ; } AsyncResolverFactory*)",
    "insertText": "async_resolver_factory()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!async_dns_resolver_factory_)"
  },
  {
    "label": "event_log()",
    "kind": "Method",
    "detail": "Function (async_resolver_factory_ = async_resolver_factory ; } RtcEventLog*)",
    "insertText": "event_log()"
  },
  {
    "label": "set_ice_controller_factory()",
    "kind": "Method",
    "detail": "Function (event_log_ = event_log ; } void)",
    "insertText": "set_ice_controller_factory(cricket::IceControllerFactoryInterface* ice_controller_factory)"
  },
  {
    "label": "ice_controller_factory()",
    "kind": "Method",
    "detail": "Function (ice_controller_factory_ = ice_controller_factory ; } cricket::IceControllerFactoryInterface*)",
    "insertText": "ice_controller_factory()"
  },
  {
    "label": "active_ice_controller_factory()",
    "kind": "Method",
    "detail": "Function (active_ice_controller_factory_ = active_ice_controller_factory ; } cricket::ActiveIceControllerFactoryInterface*)",
    "insertText": "active_ice_controller_factory()"
  },
  {
    "label": "IceTransportFactory()",
    "kind": "Method",
    "detail": "Function (field_trials_ = field_trials ; } private : cricket::PortAllocator* port_allocator_ = nullptr ; AsyncDnsResolverFactoryInterface* async_dns_resolver_factory_ = nullptr ; AsyncResolverFactory* async_resolver_factory_ = nullptr ; RtcEventLog* event_log_ = nullptr ; cricket::IceControllerFactoryInterface* ice_controller_factory_ = nullptr ; cricket::ActiveIceControllerFactoryInterface* active_ice_controller_factory_ = nullptr ; const FieldTrialsView* field_trials_ = nullptr ; } ; class IceTransportFactory { public : ~)",
    "insertText": "IceTransportFactory()"
  },
  {
    "label": "CreateIceTransport()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<IceTransportInterface>)",
    "insertText": "CreateIceTransport(const std::string& transport_name, int component, IceTransportInit init)"
  }
]