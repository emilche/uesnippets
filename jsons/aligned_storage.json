[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__align_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__align_type"
  },
  {
    "label": "__struct_double",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__struct_double"
  },
  {
    "label": "__struct_double4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__struct_double4"
  },
  {
    "label": "_ALIGNAS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ALIGNAS"
  },
  {
    "label": "_TL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_TL"
  },
  {
    "label": "__find_pod",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__find_pod"
  },
  {
    "label": "_Hp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Hp"
  },
  {
    "label": "__find_max_align",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__find_max_align"
  },
  {
    "label": "__select_align",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__select_align"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_ALIGNED_STORAGE_H # define _LIBCPP___TYPE_TRAITS_ALIGNED_STORAGE_H # include<__config> # include<__type_traits / conditional . h> # include<__type_traits / integral_constant . h> # include<__type_traits / nat . h> # include<__type_traits / type_list . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_LIBCPP_PREFERRED_ALIGNOF()",
    "kind": "Method",
    "detail": "Function (const size_t value =)",
    "insertText": "_LIBCPP_PREFERRED_ALIGNOF(_Tp)"
  },
  {
    "label": "_ALIGNAS()",
    "kind": "Method",
    "detail": "Function (typedef _Tp type ; } ; struct __struct_double { long double __lx ; } ; struct __struct_double4 { double __lx [ 4 ] ; } ; typedef __type_list<__align_type<unsigned char>,__type_list<__align_type<unsigned short>,__type_list<__align_type<unsigned int>,__type_list<__align_type<unsigned long>,__type_list<__align_type<unsigned long long>,__type_list<__align_type<double>,__type_list<__align_type<long double>,__type_list<__align_type<__struct_double>,__type_list<__align_type<__struct_double4>,__type_list<__align_type<int*>,__nat>>>>>>>>>> __all_types ; template<size_t _Align> struct)",
    "insertText": "_ALIGNAS(_Align)"
  },
  {
    "label": "__data()",
    "kind": "Method",
    "detail": "Function (} ; template<class _TL,size_t _Align> struct __find_pod ; template<class _Hp,size_t _Align> struct __find_pod<__type_list<_Hp,__nat>,_Align> { typedef conditional<_Align = = _Hp::value,_Hp::type,__fallback_overaligned<_Align>>::type type ; } ; template<class _Hp,class _Tp,size_t _Align> struct __find_pod<__type_list<_Hp,_Tp>,_Align> { typedef conditional<_Align = = _Hp::value,_Hp::type,__find_pod<_Tp,_Align>::type>::type type ; } ; template<class _TL,size_t _Len> struct __find_max_align ; template<class _Hp,size_t _Len> struct __find_max_align<__type_list<_Hp,__nat>,_Len> : public integral_constant<size_t,_Hp::value> { } ; template<size_t _Len,size_t _A1,size_t _A2> struct __select_align { private : const size_t __min = _A2<_A1 ? _A2 : _A1 ; const size_t __max = _A1<_A2 ? _A2 : _A1 ; public : const size_t value = _Len<__max ? __min : __max ; } ; template<class _Hp,class _Tp,size_t _Len> struct __find_max_align<__type_list<_Hp,_Tp>,_Len> : public integral_constant<size_t,__select_align<_Len,_Hp::value,__find_max_align<_Tp,_Len>::value>::value> { } ; template<size_t _Len,size_t _Align = __find_max_align<__all_types,_Len>::value> struct _LIBCPP_TEMPLATE_VIS aligned_storage { typedef __find_pod<__all_types,_Align>::type _Aligner ; union type { _Aligner __align ; unsigned char)",
    "insertText": "__data(_Len + _Align - 1)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (} ; } ; # if _LIBCPP_STD_VER> 1 1 template<size_t _Len,size_t _Align = __find_max_align<__all_types,_Len>::value> using aligned_storage_t = aligned_storage<_Len,_Align>::type ; # endif # define)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(n)"
  },
  {
    "label": "_ALIGNAS()",
    "kind": "Method",
    "detail": "Function (\\ struct)",
    "insertText": "_ALIGNAS(n)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (\\ unsigned char)",
    "insertText": "__lx(_Len + n - 1)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (\\ } ; \\ })",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x8)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x10)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x20)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x40)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x80)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x100)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x200)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x400)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x800)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x1000)"
  },
  {
    "label": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x2000)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_LIBCPP_OBJECT_FORMAT_COFF) _CREATE_ALIGNED_STORAGE_SPECIALIZATION(0x4000)"
  }
]