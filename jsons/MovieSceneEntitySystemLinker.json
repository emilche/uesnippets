[
  {
    "label": "FMovieSceneEntitySystemRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneEntitySystemRunner"
  },
  {
    "label": "UMovieSceneEntitySystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystem"
  },
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "FComponentRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentRegistry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSystemFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSystemFilter"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FMovieSceneEntitySystemEvaluationReentrancyWindow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEntitySystemEvaluationReentrancyWindow"
  },
  {
    "label": "RegisterCustomEntitySystemLinkerRole()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MovieSceneEntityIDs . h \" # include \" MovieSceneSequenceID . h \" # include \" Engine / World . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneInstanceRegistry . h \" # include \" Tickable . h \" # include \" UObject / ObjectKey . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneEntitySystemGraphs . h \" # include \" EntitySystem / MovieSceneSequenceInstance . h \" # include \" EntitySystem / MovieSceneEntitySystemLinkerExtension . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateExtension . h \" # include \" MovieSceneEntitySystemLinker . generated . h \" class FMovieSceneEntitySystemRunner ; class UMovieSceneEntitySystem ; class UMovieSceneCompiledDataManager ; namespace UE { namespace MovieScene { struct FComponentRegistry ; enum class ERunnerFlushState ; enum class EEntitySystemCategory : uint32 ; enum class EAutoLinkRelevantSystems : uint8 { Enabled,Disable,} ; enum class EEntitySystemLinkerRole : uint32 { Unknown = 0,LevelSequences = 1,CameraAnimations,UMG,Standalone,Interrogation,Custom } ; EEntitySystemLinkerRole)",
    "insertText": "RegisterCustomEntitySystemLinkerRole()"
  },
  {
    "label": "FSystemFilter()",
    "kind": "Method",
    "detail": "Function (struct FSystemFilter {)",
    "insertText": "FSystemFilter()"
  },
  {
    "label": "CheckSystem()",
    "kind": "Method",
    "detail": "Function (template<SystemClass> bool)",
    "insertText": "CheckSystem()"
  },
  {
    "label": "CheckSystem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckSystem(TSubclassOf<UMovieSceneEntitySystem> InClass)"
  },
  {
    "label": "CheckSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckSystem(const UMovieSceneEntitySystem* InSystem)"
  },
  {
    "label": "SetAllowedCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowedCategories(EEntitySystemCategory InCategory)"
  },
  {
    "label": "AllowCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowCategory(EEntitySystemCategory InCategory)"
  },
  {
    "label": "SetDisallowedCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisallowedCategories(EEntitySystemCategory InCategory)"
  },
  {
    "label": "DisallowCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowCategory(EEntitySystemCategory InCategory)"
  },
  {
    "label": "AllowSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowSystem(TSubclassOf<UMovieSceneEntitySystem> InClass)"
  },
  {
    "label": "DisallowSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowSystem(TSubclassOf<UMovieSceneEntitySystem> InClass)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (private : UE::MovieScene::EEntitySystemCategory CategoriesAllowed ; UE::MovieScene::EEntitySystemCategory CategoriesDisallowed ; TBitArray<> SystemsAllowed ; TBitArray<> SystemsDisallowed ; } ; } })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FMovieSceneEntitySystemLinkerEvent, UMovieSceneEntitySystemLinker*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMovieSceneEntitySystemLinkerAROEvent, UMovieSceneEntitySystemLinker*, FReferenceCollector&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMovieSceneEntitySystemLinkerWorldEvent, UMovieSceneEntitySystemLinker*, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FMovieSceneEntitySystemLinkerPostSpawnEvent, UMovieSceneEntitySystemLinker*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UMovieSceneEntitySystemLinker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMovieSceneEntitySystemLinker(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (FComponentRegistry*)",
    "insertText": "GetComponents()"
  },
  {
    "label": "FindOrCreateLinker()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystemLinker*)",
    "insertText": "FindOrCreateLinker(UObject* PreferredOuter, UE::MovieScene::EEntitySystemLinkerRole LinkerRole, const TCHAR* Name = TEXT(\"DefaultMovieSceneEntitySystemLinker\"))"
  },
  {
    "label": "CreateLinker()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystemLinker*)",
    "insertText": "CreateLinker(UObject* PreferredOuter, UE::MovieScene::EEntitySystemLinkerRole LinkerRole)"
  },
  {
    "label": "GetInstanceRegistry()",
    "kind": "Method",
    "detail": "Function (FInstanceRegistry*)",
    "insertText": "GetInstanceRegistry()"
  },
  {
    "label": "LinkSystem()",
    "kind": "Method",
    "detail": "Function (} template<SystemType> SystemType*)",
    "insertText": "LinkSystem()"
  },
  {
    "label": "LinkSystemIfAllowed()",
    "kind": "Method",
    "detail": "Function (} template<SystemType> SystemType*)",
    "insertText": "LinkSystemIfAllowed()"
  },
  {
    "label": "FindSystem()",
    "kind": "Method",
    "detail": "Function (} template<SystemType> SystemType*)",
    "insertText": "FindSystem()"
  },
  {
    "label": "LinkSystem()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneEntitySystem*)",
    "insertText": "LinkSystem(TSubclassOf<UMovieSceneEntitySystem> InClassType)"
  },
  {
    "label": "LinkSystemIfAllowed()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystem*)",
    "insertText": "LinkSystemIfAllowed(TSubclassOf<UMovieSceneEntitySystem> InClassType)"
  },
  {
    "label": "FindSystem()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntitySystem*)",
    "insertText": "FindSystem(TSubclassOf<UMovieSceneEntitySystem> Class)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetSystemFilter()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FSystemFilter&)",
    "insertText": "GetSystemFilter()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Role = InRole ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorld(UWorld* InWorld)"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (WeakWorld = InWorld ; } public : template<ExtensionType> UE::MovieScene::TEntitySystemLinkerExtensionID<ExtensionType>)",
    "insertText": "RegisterExtension()"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (} template<ExtensionType> void)",
    "insertText": "AddExtension(UE::MovieScene::TEntitySystemLinkerExtensionID<ExtensionType> InID, ExtensionType* InExtension)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Index = InID . ID ;)",
    "insertText": "if(!ExtensionsByID.IsValidIndex(Index))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (ExtensionsByID .)",
    "insertText": "Insert(Index, InExtension)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ExtensionsByID[Index] == InExtension)"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (} } template<ExtensionType> void)",
    "insertText": "AddExtension(ExtensionType* InExtension)"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExtension(ExtensionType::GetExtensionID(), InExtension)"
  },
  {
    "label": "FindExtension()",
    "kind": "Method",
    "detail": "Function (} template<ExtensionType> ExtensionType*)",
    "insertText": "FindExtension(UE::MovieScene::TEntitySystemLinkerExtensionID<ExtensionType> InID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Index = InID . ID ;)",
    "insertText": "if(ExtensionsByID.IsValidIndex(Index))"
  },
  {
    "label": "FindExtension()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<ExtensionType> ExtensionType*)",
    "insertText": "FindExtension()"
  },
  {
    "label": "GetExtensionID()",
    "kind": "Method",
    "detail": "Function (const int32 Index =)",
    "insertText": "GetExtensionID()"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "RemoveExtension(UE::MovieScene::FEntitySystemLinkerExtensionID ExtensionID)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (ExtensionsByID .)",
    "insertText": "RemoveAt(Index)"
  },
  {
    "label": "SystemLinked()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "SystemLinked(UMovieSceneEntitySystem* InSystem)"
  },
  {
    "label": "SystemUnlinked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SystemUnlinked(UMovieSceneEntitySystem* InSystem)"
  },
  {
    "label": "HasLinkedSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLinkedSystem(const uint16 GlobalDependencyGraphID)"
  },
  {
    "label": "LinkRelevantSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkRelevantSystems()"
  },
  {
    "label": "UnlinkIrrelevantSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkIrrelevantSystems()"
  },
  {
    "label": "AutoLinkRelevantSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoLinkRelevantSystems()"
  },
  {
    "label": "AutoUnlinkIrrelevantSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoUnlinkIrrelevantSystems()"
  },
  {
    "label": "HasStructureChangedSinceLastRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStructureChangedSinceLastRun()"
  },
  {
    "label": "InvalidateObjectBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateObjectBinding(const FGuid& ObjectBindingID, FInstanceHandle InstanceHandle)"
  },
  {
    "label": "CleanupInvalidBoundObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupInvalidBoundObjects()"
  },
  {
    "label": "StartEvaluation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartEvaluation()"
  },
  {
    "label": "GetRunner()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FMovieSceneEntitySystemRunner>)",
    "insertText": "GetRunner()"
  },
  {
    "label": "PostInstantation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInstantation()"
  },
  {
    "label": "EndEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEvaluation()"
  },
  {
    "label": "ResetRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRunner()"
  },
  {
    "label": "DestroyInstanceImmediately()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyInstanceImmediately(UE::MovieScene::FRootInstanceHandle Instance)"
  },
  {
    "label": "LinkSystemImpl()",
    "kind": "Method",
    "detail": "Function (} private : UMovieSceneEntitySystem*)",
    "insertText": "LinkSystemImpl(TSubclassOf<UMovieSceneEntitySystem> InClassType)"
  },
  {
    "label": "HandlePreGarbageCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreGarbageCollection()"
  },
  {
    "label": "HandlePostGarbageCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePostGarbageCollection()"
  },
  {
    "label": "TagInvalidBoundObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TagInvalidBoundObjects()"
  },
  {
    "label": "CleanGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanGarbage()"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldCleanup(UWorld* InWorld, bool bSessionEnded, bool bCleanupResources)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  }
]