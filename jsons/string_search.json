[
  {
    "label": "UStringSearch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UStringSearch"
  },
  {
    "label": "BASE_I18N_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_I18N_EXPORT"
  },
  {
    "label": "StringSearchIgnoringCaseAndAccents()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_I18N_STRING_SEARCH_H_ # define BASE_I18N_STRING_SEARCH_H_ # include<stddef . h> # include<string> # include \" base / i18n / base_i18n_export . h \" # include \" base / memory / raw_ptr . h \" struct UStringSearch ; namespace base { namespace i18n { BASE_I18N_EXPORT bool)",
    "insertText": "StringSearchIgnoringCaseAndAccents(const std::u16string& find_this, const std::u16string& in_this, size_t* match_index, size_t* match_length)"
  },
  {
    "label": "StringSearch()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT bool)",
    "insertText": "StringSearch(const std::u16string& find_this, const std::u16string& in_this, size_t* match_index, size_t* match_length, bool case_sensitive, bool forward_search)"
  },
  {
    "label": "FixedPatternStringSearch()",
    "kind": "Method",
    "detail": "Function (class BASE_I18N_EXPORT FixedPatternStringSearch { public :)",
    "insertText": "FixedPatternStringSearch(const std::u16string& find_this, bool case_sensitive)"
  },
  {
    "label": "FixedPatternStringSearch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FixedPatternStringSearch()"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Search(const std::u16string& in_this, size_t* match_index, size_t* match_length, bool forward_search)"
  },
  {
    "label": "FixedPatternStringSearchIgnoringCaseAndAccents()",
    "kind": "Method",
    "detail": "Function (private : std::u16string find_this_ ; raw_ptr<UStringSearch,DanglingUntriaged> search_ ; } ; class BASE_I18N_EXPORT FixedPatternStringSearchIgnoringCaseAndAccents { public :)",
    "insertText": "FixedPatternStringSearchIgnoringCaseAndAccents(const std::u16string& find_this)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Search(const std::u16string& in_this, size_t* match_index, size_t* match_length)"
  },
  {
    "label": "RepeatingStringSearch()",
    "kind": "Method",
    "detail": "Function (private : FixedPatternStringSearch base_search_ ; } ; class BASE_I18N_EXPORT RepeatingStringSearch { public :)",
    "insertText": "RepeatingStringSearch(const std::u16string& find_this, const std::u16string& in_this, bool case_sensitive)"
  },
  {
    "label": "RepeatingStringSearch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RepeatingStringSearch()"
  },
  {
    "label": "NextMatchResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextMatchResult(int& match_index, int& match_length)"
  }
]