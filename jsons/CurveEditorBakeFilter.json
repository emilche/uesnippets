[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCurveModelID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveModelID"
  },
  {
    "label": "FKeyHandleSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandleSet"
  },
  {
    "label": "FCurveEditorBakeFilterRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorBakeFilterRange"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" CurveEditorTypes . h \" # include \" Filters / CurveEditorFilterBase . h \" # include \" ICurveEditorToolExtension . h \" # include \" Misc / FrameNumber . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" CurveEditorBakeFilter . generated . h \" class FCurveEditor ; class UObject ; struct FCurveModelID ; struct FKeyHandleSet ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Settings\") FFrameNumber Min = FFrameNumber(0)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(DisplayName=\"Bake\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UCurveEditorBakeFilter()"
  },
  {
    "label": "FFrameNumber()",
    "kind": "Method",
    "detail": "Function (bUseSeconds = true ; BakeIntervalInSeconds = 0 . 1 f ; CustomRangeMinInSeconds = 0 . f ; CustomRangeMaxInSeconds = 1 . f ; BakeInterval =)",
    "insertText": "FFrameNumber(1)"
  },
  {
    "label": "InitializeFilter_Impl()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "InitializeFilter_Impl(TSharedRef<FCurveEditor> InCurveEditoro)"
  },
  {
    "label": "ApplyFilter_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter_Impl(TSharedRef<FCurveEditor> InCurveEditor, const TMap<FCurveModelID, FKeyHandleSet>& InKeysToOperateOn, TMap<FCurveModelID, FKeyHandleSet>& OutKeysToSelect)"
  },
  {
    "label": "CanApplyFilter_Impl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanApplyFilter_Impl(TSharedRef<FCurveEditor> InCurveEditor)"
  }
]