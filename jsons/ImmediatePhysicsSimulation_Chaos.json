[
  {
    "label": "FPBDJointSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSettings"
  },
  {
    "label": "FSimulation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulation"
  },
  {
    "label": "FIgnorePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIgnorePair"
  },
  {
    "label": "FImplementation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImplementation"
  },
  {
    "label": "FSimulation()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimulation()"
  },
  {
    "label": "DestroyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActor(FActorHandle* ActorHandle)"
  },
  {
    "label": "DestroyActorCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActorCollisions(FActorHandle* ActorHandle)"
  },
  {
    "label": "SetIsKinematic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsKinematic(FActorHandle* ActorHandle, bool bKinematic)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(FActorHandle* ActorHandle, bool bEnable)"
  },
  {
    "label": "SetHasCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasCollision(FActorHandle* ActorHandle, bool bHasCollision)"
  },
  {
    "label": "DestroyJoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyJoint(FJointHandle* JointHandle)"
  },
  {
    "label": "SetNumActiveBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumActiveBodies(int32 NumActiveBodies, TArray<int32> ActiveBodyIndices)"
  },
  {
    "label": "SetIgnoreCollisionPairTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreCollisionPairTable(const TArray<FIgnorePair>& InIgnoreCollisionPairTable)"
  },
  {
    "label": "SetIgnoreCollisionActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreCollisionActors(const TArray<FActorHandle*>& InIgnoreCollisionActors)"
  },
  {
    "label": "AddToCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCollidingPairs(FActorHandle* ActorHandle)"
  },
  {
    "label": "SetRewindVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRewindVelocities(bool bRewindVelocities)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(FReal DeltaTime, FReal MaxStepTime, int32 MaxSubSteps, const FVector& InGravity)"
  },
  {
    "label": "InitSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSimulationSpace(\n\t\t\tconst FTransform& Transform)"
  },
  {
    "label": "UpdateSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSimulationSpace(\n\t\t\tconst FTransform& Transform,\n\t\t\tconst FVector& LinearVel,\n\t\t\tconst FVector& AngularVel,\n\t\t\tconst FVector& LinearAcc,\n\t\t\tconst FVector& AngularAcc)"
  },
  {
    "label": "SetSimulationSpaceSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulationSpaceSettings(\n\t\t\tconst FReal Alpha, \n\t\t\tconst FVector& ExternalLinearEtherDrag)"
  },
  {
    "label": "SetSolverSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSolverSettings(\n\t\t\tconst FReal FixedDt,\n\t\t\tconst FReal CullDistance,\n\t\t\tconst FReal MaxDepenetrationVelocity,\n\t\t\tconst int32 UseLinearJointSolver,\n\t\t\tconst int32 PositionIts,\n\t\t\tconst int32 VelocityIts,\n\t\t\tconst int32 ProjectionIts,\n\t\t\tconst int32 bUseManifolds)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDraw()"
  },
  {
    "label": "RemoveFromCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromCollidingPairs(FActorHandle* ActorHandle)"
  },
  {
    "label": "UpdateInertiaConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInertiaConditioning(const FVector& Gravity)"
  },
  {
    "label": "PackCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackCollidingPairs()"
  },
  {
    "label": "UpdateActivePotentiallyCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActivePotentiallyCollidingPairs()"
  },
  {
    "label": "EnableDisableJoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDisableJoints()"
  },
  {
    "label": "UpdateStepTime()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "UpdateStepTime(const FReal DeltaTime, const FReal MaxStepTime)"
  },
  {
    "label": "UpdateStatCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatCounters()"
  },
  {
    "label": "DebugDrawStaticParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawStaticParticles()"
  },
  {
    "label": "DebugDrawKinematicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawKinematicParticles()"
  },
  {
    "label": "DebugDrawDynamicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawDynamicParticles()"
  },
  {
    "label": "DebugDrawConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawConstraints()"
  },
  {
    "label": "DebugDrawSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawSimulationSpace()"
  },
  {
    "label": "SetDebugDrawScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugDrawScene(const FString& SceneName, const ChaosDD::Private::FChaosDDScenePtr& InScene)"
  }
]