[
  {
    "label": "FPBDJointSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSettings"
  },
  {
    "label": "FSimulation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulation"
  },
  {
    "label": "FIgnorePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIgnorePair"
  },
  {
    "label": "FImplementation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImplementation"
  },
  {
    "label": "FSimulation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosDebugDraw / ChaosDDTypes . h \" # include \" ChaosVisualDebugger / ChaosVDContextProvider . h \" # include \" Physics / ImmediatePhysics / ImmediatePhysicsChaos / ImmediatePhysicsCore_Chaos . h \" # include \" Engine / EngineTypes . h \" # include \" Templates / UniquePtr . h \" namespace Chaos { class FPBDJointSettings ; } namespace ImmediatePhysics_Chaos { struct FSimulation { public :)",
    "insertText": "FSimulation()"
  },
  {
    "label": "NumActors()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumActors()"
  },
  {
    "label": "GetActorHandle()",
    "kind": "Method",
    "detail": "Function (FActorHandle*)",
    "insertText": "GetActorHandle(int32 ActorHandleIndex)"
  },
  {
    "label": "CreateStaticActor()",
    "kind": "Method",
    "detail": "Function (FActorHandle*)",
    "insertText": "CreateStaticActor(FBodyInstance* BodyInstance)"
  },
  {
    "label": "CreateKinematicActor()",
    "kind": "Method",
    "detail": "Function (FActorHandle*)",
    "insertText": "CreateKinematicActor(FBodyInstance* BodyInstance, const FTransform& Transform)"
  },
  {
    "label": "CreateDynamicActor()",
    "kind": "Method",
    "detail": "Function (FActorHandle*)",
    "insertText": "CreateDynamicActor(FBodyInstance* BodyInstance, const FTransform& Transform)"
  },
  {
    "label": "CreateActor()",
    "kind": "Method",
    "detail": "Function (FActorHandle*)",
    "insertText": "CreateActor(EActorType ActorType, FBodyInstance* BodyInstance, const FTransform& Transform)"
  },
  {
    "label": "DestroyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActor(FActorHandle* ActorHandle)"
  },
  {
    "label": "DestroyActorCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActorCollisions(FActorHandle* ActorHandle)"
  },
  {
    "label": "SetIsKinematic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsKinematic(FActorHandle* ActorHandle, bool bKinematic)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(FActorHandle* ActorHandle, bool bEnable)"
  },
  {
    "label": "SetHasCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasCollision(FActorHandle* ActorHandle, bool bHasCollision)"
  },
  {
    "label": "CreateJoint()",
    "kind": "Method",
    "detail": "Function (FJointHandle*)",
    "insertText": "CreateJoint(FConstraintInstance* ConstraintInstance, FActorHandle* Body1, FActorHandle* Body2)"
  },
  {
    "label": "CreateJoint()",
    "kind": "Method",
    "detail": "Function (FJointHandle*)",
    "insertText": "CreateJoint(const Chaos::FPBDJointSettings& ConstraintSettings, FActorHandle* const Body1, FActorHandle* const Body2)"
  },
  {
    "label": "DestroyJoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyJoint(FJointHandle* JointHandle)"
  },
  {
    "label": "SetNumActiveBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumActiveBodies(int32 NumActiveBodies, TArray<int32> ActiveBodyIndices)"
  },
  {
    "label": "SetIgnoreCollisionPairTable()",
    "kind": "Method",
    "detail": "Function (struct FIgnorePair { FActorHandle* A ; FActorHandle* B ; } ; void)",
    "insertText": "SetIgnoreCollisionPairTable(const TArray<FIgnorePair>& InIgnoreCollisionPairTable)"
  },
  {
    "label": "SetIgnoreCollisionActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreCollisionActors(const TArray<FActorHandle*>& InIgnoreCollisionActors)"
  },
  {
    "label": "AddToCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCollidingPairs(FActorHandle* ActorHandle)"
  },
  {
    "label": "SetRewindVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRewindVelocities(bool bRewindVelocities)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(FReal DeltaTime, FReal MaxStepTime, int32 MaxSubSteps, const FVector& InGravity)"
  },
  {
    "label": "Simulate_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate_AssumesLocked(FReal DeltaTime, FReal MaxStepTime, int32 MaxSubSteps, const FVector& InGravity)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(DeltaTime, MaxStepTime, MaxSubSteps, InGravity)"
  },
  {
    "label": "InitSimulationSpace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitSimulationSpace(const FTransform& Transform)"
  },
  {
    "label": "UpdateSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSimulationSpace(const FTransform& Transform, const FVector& LinearVel, const FVector& AngularVel, const FVector& LinearAcc, const FVector& AngularAcc)"
  },
  {
    "label": "SetSimulationSpaceSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSimulationSpaceSettings(const FReal Alpha, const FVector& ExternalLinearEtherDrag)"
  },
  {
    "label": "SetSolverSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSolverSettings(const FReal FixedDt, const FReal CullDistance, const FReal MaxDepenetrationVelocity, const int32 UseLinearJointSolver, const int32 PositionIts, const int32 VelocityIts, const int32 ProjectionIts, const int32 bUseManifolds)"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDraw()"
  },
  {
    "label": "RemoveFromCollidingPairs()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RemoveFromCollidingPairs(FActorHandle* ActorHandle)"
  },
  {
    "label": "UpdateInertiaConditioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInertiaConditioning(const FVector& Gravity)"
  },
  {
    "label": "PackCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackCollidingPairs()"
  },
  {
    "label": "UpdateActivePotentiallyCollidingPairs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActivePotentiallyCollidingPairs()"
  },
  {
    "label": "EnableDisableJoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDisableJoints()"
  },
  {
    "label": "UpdateStepTime()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "UpdateStepTime(const FReal DeltaTime, const FReal MaxStepTime)"
  },
  {
    "label": "UpdateStatCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatCounters()"
  },
  {
    "label": "DebugDrawStaticParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawStaticParticles()"
  },
  {
    "label": "DebugDrawKinematicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawKinematicParticles()"
  },
  {
    "label": "DebugDrawDynamicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawDynamicParticles()"
  },
  {
    "label": "DebugDrawConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawConstraints()"
  },
  {
    "label": "DebugDrawSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawSimulationSpace()"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (struct FImplementation ; TUniquePtr<FImplementation> Implementation ; # if CHAOS_DEBUG_NAME public : void)",
    "insertText": "SetDebugName(const FName& Name)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (DebugName = Name ; } const FName&)",
    "insertText": "GetDebugName()"
  }
]