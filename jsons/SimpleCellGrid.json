[
  {
    "label": "FGridSize2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGridSize2D"
  },
  {
    "label": "TSimpleCellGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimpleCellGrid"
  },
  {
    "label": "FGridSize2D()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / Archive . h \" # include \" Math / NumericLimits . h \" struct FGridSize2D { uint32 Width ; uint32 Height ;)",
    "insertText": "FGridSize2D(uint32 InWidth = 0, uint32 InHeight = 0) : Width(InWidth), Height(InHeight)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGridSize2D& Other)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init(const float InCellSize, const FBox& Bounds)"
  },
  {
    "label": "FGridSize2D()",
    "kind": "Method",
    "detail": "Function (GridSize =)",
    "insertText": "FGridSize2D(IntCastChecked<uint32>(FMath::CeilToInt(RealBoundsSize.X / InCellSize)), IntCastChecked<uint32>(FMath::CeilToInt(RealBoundsSize.Y / InCellSize)))"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (BoundsSize =)",
    "insertText": "FVector(GridSize.Width * InCellSize, GridSize.Height * InCellSize, RealBoundsSize.Z)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Origin =)",
    "insertText": "FVector(Bounds.Min.X, Bounds.Min.Y, (Bounds.Min.Z + Bounds.Max.Z) * 0.5f)"
  },
  {
    "label": "UpdateWorldBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldBounds()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const uint64 TempCellCount = GridSize . Width* GridSize . Height ; const TArray<FCellType>::SizeType CellCount =)",
    "insertText": "Min(TempCellCount, (uint64)TNumericLimits<typename TArray<FCellType>::SizeType>::Max())"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "AddDefaulted(CellCount)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (BoundsSize . Z = VerticalInterval .)",
    "insertText": "Size()"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (Origin . Z = VerticalInterval .)",
    "insertText": "Interpolate(0.5)"
  },
  {
    "label": "FBox()",
    "kind": "Method",
    "detail": "Function (WorldBounds =)",
    "insertText": "FBox(Origin - FVector(0, 0, BoundsSize.Z / 2), Origin + FVector(BoundsSize.X, BoundsSize.Y, BoundsSize.Z / 2))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(const int32 CellIndex)"
  },
  {
    "label": "IsValidCoord()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidCoord(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "IsValidCoord()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidCoord(const FIntVector& CellCoords)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetCellCoordsUnsafe()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetCellCoordsUnsafe(const FVector& WorldLocation)"
  },
  {
    "label": "GetCellCoords()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetCellCoords(const FVector& WorldLocation)"
  },
  {
    "label": "GetCellCoordsUnsafe()",
    "kind": "Method",
    "detail": "Function (const FIntVector UnsafeCoords =)",
    "insertText": "GetCellCoordsUnsafe(WorldLocation)"
  },
  {
    "label": "GetCellCoordX()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellCoordX(int32 CellIndex)"
  },
  {
    "label": "GetCellIndexUnsafe()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellIndexUnsafe(const FVector& WorldLocation)"
  },
  {
    "label": "GetCellIndexUnsafe()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellIndexUnsafe(const FIntVector& CellCoords)"
  },
  {
    "label": "GetCellIndexUnsafe()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellIndexUnsafe(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetCellIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellIndex(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetCellIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellIndex(const FVector& WorldLocation)"
  },
  {
    "label": "GetWorldCellBox()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetWorldCellBox(int32 CellIndex)"
  },
  {
    "label": "GetWorldCellBox()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetWorldCellBox(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetWorldCellBox2D()",
    "kind": "Method",
    "detail": "Function (} FBox2D)",
    "insertText": "GetWorldCellBox2D(int32 CellIndex)"
  },
  {
    "label": "GetWorldCellBox2D()",
    "kind": "Method",
    "detail": "Function (} FBox2D)",
    "insertText": "GetWorldCellBox2D(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetWorldCellRectangleBox()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetWorldCellRectangleBox(const FIntRect& CellRect)"
  },
  {
    "label": "GetCellRectangleFromBox()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "GetCellRectangleFromBox(const FBox& WorldBox)"
  },
  {
    "label": "GetCellCoordsUnsafe()",
    "kind": "Method",
    "detail": "Function (} const FIntVector CellMin =)",
    "insertText": "GetCellCoordsUnsafe(WorldBox.Min)"
  },
  {
    "label": "GetCellCoordsUnsafe()",
    "kind": "Method",
    "detail": "Function (const FIntVector CellMax =)",
    "insertText": "GetCellCoordsUnsafe(WorldBox.Max)"
  },
  {
    "label": "GetGridRectangle()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "GetGridRectangle()"
  },
  {
    "label": "GetWorldCellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldCellCenter(int32 CellIndex)"
  },
  {
    "label": "GetWorldCellCenter()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldCellCenter(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetCellAtWorldLocationUnsafe()",
    "kind": "Method",
    "detail": "Function (} const FCellType&)",
    "insertText": "GetCellAtWorldLocationUnsafe(const FVector& WorldLocation)"
  },
  {
    "label": "GetCellIndexUnsafe()",
    "kind": "Method",
    "detail": "Function (const int32 CellIndex =)",
    "insertText": "GetCellIndexUnsafe(WorldLocation)"
  },
  {
    "label": "FCellType()",
    "kind": "Method",
    "detail": "Function (FCellType InvalidCellInstance =)",
    "insertText": "FCellType(InvalidCellValue)"
  },
  {
    "label": "GetCellIndex()",
    "kind": "Method",
    "detail": "Function (const int32 CellIndex =)",
    "insertText": "GetCellIndex(WorldLocation)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCellType&)",
    "insertText": "operator(int32 CellIndex)"
  },
  {
    "label": "GetCellAtIndexUnsafe()",
    "kind": "Method",
    "detail": "Function (} const FCellType&)",
    "insertText": "GetCellAtIndexUnsafe(int32 CellIndex)"
  },
  {
    "label": "GetCellAtCoordsUnsafe()",
    "kind": "Method",
    "detail": "Function (} FCellType&)",
    "insertText": "GetCellAtCoordsUnsafe(int32 LocationX, int32 LocationY)"
  },
  {
    "label": "GetCellsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetCellsCount()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 VersionNum = MAX_uint32 ; Ar<<VersionNum ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<DataBytesCount ;)",
    "insertText": "if(DataBytesCount > 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "SetNum(CellCount)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (DataBytesCount =)",
    "insertText": "Clamp(DataBytesCount, 0, CellCount * sizeof(FCellType))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "Serialize(Cells.GetData(), DataBytesCount)"
  },
  {
    "label": "AllocateMemory()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "AllocateMemory()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "SetNum(GridSize.Width * GridSize.Height)"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeMemory()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Empty()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Zero()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Cells .)",
    "insertText": "AddZeroed(GridSize.Width * GridSize.Height)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (GridCellSize = 0 ; Origin =)",
    "insertText": "FVector(FLT_MAX)"
  }
]