[
  {
    "label": "APackedLevelActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APackedLevelActor"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FPackedLevelActorBuilderContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedLevelActorBuilderContext"
  },
  {
    "label": "FPackedLevelActorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedLevelActorBuilder"
  },
  {
    "label": "IPackedLevelActorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackedLevelActorBuilder"
  },
  {
    "label": "IPackedLevelActorBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" PackedLevelActor / PackedLevelActorTypes . h \" class APackedLevelActor ; class AActor ; class UActorComponent ; class FPackedLevelActorBuilderContext ; class FPackedLevelActorBuilder ; class IPackedLevelActorBuilder { public :)",
    "insertText": "IPackedLevelActorBuilder(FPackedLevelActorBuilder& InOwner) : Owner(InOwner)"
  },
  {
    "label": "IPackedLevelActorBuilder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IPackedLevelActorBuilder()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (} FPackedLevelActorBuilderID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetPackClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackClusters(FPackedLevelActorBuilderContext& InContext, AActor* InActor)"
  },
  {
    "label": "PackActors()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PackActors(FPackedLevelActorBuilderContext& InBuilder, const FPackedLevelActorBuilderClusterID& InClusterID, const TArray<UActorComponent*>& InComponents)"
  }
]