[
  {
    "label": "CefMainArgsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefMainArgsTraits"
  },
  {
    "label": "CefMainArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefMainArgs"
  },
  {
    "label": "CefWindowInfoTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefWindowInfoTraits"
  },
  {
    "label": "CefWindowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefWindowInfo"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_INTERNAL_CEF_LINUX_H_ # define CEF_INCLUDE_INTERNAL_CEF_LINUX_H_ # pragma once # include \" include / internal / cef_types_linux . h \" # include \" include / internal / cef_types_wrappers . h \" # define CefCursorHandle cef_cursor_handle_t # define CefEventHandle cef_event_handle_t # define CefWindowHandle cef_window_handle_t struct CefMainArgsTraits { typedef cef_main_args_t struct_type ; void)",
    "insertText": "init(struct_type* s)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear(struct_type* s)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(const struct_type* src, struct_type* target, bool copy)"
  },
  {
    "label": "CefMainArgs()",
    "kind": "Method",
    "detail": "Function (target -> argc = src -> argc ; target -> argv = src -> argv ; } } ; class CefMainArgs : public CefStructBase<CefMainArgsTraits> { public : typedef CefStructBase<CefMainArgsTraits> parent ;)",
    "insertText": "CefMainArgs() : parent()"
  },
  {
    "label": "CefMainArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefMainArgs(const cef_main_args_t& r) : parent(r)"
  },
  {
    "label": "CefMainArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefMainArgs(const CefMainArgs& r) : parent(r)"
  },
  {
    "label": "CefMainArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefMainArgs(int argc_arg, char** argv_arg) : parent()"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->window_name)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->window_name.str, src->window_name.length, &target->window_name, copy)"
  },
  {
    "label": "CefWindowInfo()",
    "kind": "Method",
    "detail": "Function (target -> x = src -> x ; target -> y = src -> y ; target -> width = src -> width ; target -> height = src -> height ; target -> parent_window = src -> parent_window ; target -> windowless_rendering_enabled = src -> windowless_rendering_enabled ; target -> shared_texture_enabled = src -> shared_texture_enabled ; target -> external_begin_frame_enabled = src -> external_begin_frame_enabled ; target -> window = src -> window ; } } ; class CefWindowInfo : public CefStructBase<CefWindowInfoTraits> { public : typedef CefStructBase<CefWindowInfoTraits> parent ;)",
    "insertText": "CefWindowInfo() : parent()"
  },
  {
    "label": "CefWindowInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefWindowInfo(const cef_window_info_t& r) : parent(r)"
  },
  {
    "label": "CefWindowInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefWindowInfo(const CefWindowInfo& r) : parent(r)"
  },
  {
    "label": "SetAsChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAsChild(CefWindowHandle parent, const CefRect& windowRect)"
  },
  {
    "label": "SetAsWindowless()",
    "kind": "Method",
    "detail": "Function (parent_window = parent ; x = windowRect . x ; y = windowRect . y ; width = windowRect . width ; height = windowRect . height ; } void)",
    "insertText": "SetAsWindowless(CefWindowHandle parent)"
  }
]