[
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "MemoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryBuffer"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "DiagnosticInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiagnosticInfo"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "PassRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassRegistry"
  },
  {
    "label": "DebugInfoFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugInfoFinder"
  },
  {
    "label": "DebugLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugLoc"
  },
  {
    "label": "DIGlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIGlobalVariable"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "SwitchInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwitchInst"
  },
  {
    "label": "GEPOperator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GEPOperator"
  },
  {
    "label": "DxilFieldAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilFieldAnnotation"
  },
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "DxilTypeSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilTypeSystem"
  },
  {
    "label": "OP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OP"
  },
  {
    "label": "pattern",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "pattern"
  },
  {
    "label": "initializeDxilLoadMetadataPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeDxilLoadMetadataPass(llvm::PassRegistry &)"
  },
  {
    "label": "GetLegacyCBufferFieldElementSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetLegacyCBufferFieldElementSize(DxilFieldAnnotation &fieldAnnotation,\n                                          llvm::Type *Ty,\n                                          DxilTypeSystem &typeSys)"
  },
  {
    "label": "HasDynamicIndexing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDynamicIndexing(llvm::Value *V)"
  },
  {
    "label": "MergeGepUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeGepUse(llvm::Value *V)"
  },
  {
    "label": "IsStaticGlobal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStaticGlobal(llvm::GlobalVariable *GV)"
  },
  {
    "label": "IsSharedMemoryGlobal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSharedMemoryGlobal(llvm::GlobalVariable *GV)"
  },
  {
    "label": "RemoveUnusedFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveUnusedFunctions(llvm::Module &M, llvm::Function *EntryFunc,\n                           llvm::Function *PatchConstantFunc, bool IsLib)"
  },
  {
    "label": "EmitErrorOnInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitErrorOnInstruction(llvm::Instruction *I, llvm::Twine Msg)"
  },
  {
    "label": "EmitWarningOnInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWarningOnInstruction(llvm::Instruction *I, llvm::Twine Msg)"
  },
  {
    "label": "EmitErrorOnFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitErrorOnFunction(llvm::LLVMContext &Ctx, llvm::Function *F,\n                         llvm::Twine Msg)"
  },
  {
    "label": "EmitWarningOnFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWarningOnFunction(llvm::LLVMContext &Ctx, llvm::Function *F,\n                           llvm::Twine Msg)"
  },
  {
    "label": "EmitErrorOnGlobalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitErrorOnGlobalVariable(llvm::LLVMContext &Ctx, llvm::GlobalVariable *GV,\n                               llvm::Twine Msg)"
  },
  {
    "label": "EmitWarningOnGlobalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWarningOnGlobalVariable(llvm::LLVMContext &Ctx,\n                                 llvm::GlobalVariable *GV, llvm::Twine Msg)"
  },
  {
    "label": "EmitErrorOnContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitErrorOnContext(llvm::LLVMContext &Ctx, llvm::Twine Msg)"
  },
  {
    "label": "EmitWarningOnContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWarningOnContext(llvm::LLVMContext &Ctx, llvm::Twine Msg)"
  },
  {
    "label": "EmitNoteOnContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitNoteOnContext(llvm::LLVMContext &Ctx, llvm::Twine Msg)"
  },
  {
    "label": "EmitResMappingError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitResMappingError(llvm::Instruction *Res)"
  },
  {
    "label": "DemangleFunctionName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "DemangleFunctionName(llvm::StringRef name)"
  },
  {
    "label": "ReplaceFunctionName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ReplaceFunctionName(llvm::StringRef originalName,\n                                llvm::StringRef newName)"
  },
  {
    "label": "PrintEscapedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintEscapedString(llvm::StringRef Name, llvm::raw_ostream &Out)"
  },
  {
    "label": "PrintUnescapedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintUnescapedString(llvm::StringRef Name, llvm::raw_ostream &Out)"
  },
  {
    "label": "CollectSelect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectSelect(llvm::Instruction *Inst,\n                   std::unordered_set<llvm::Instruction *> &selectSet)"
  },
  {
    "label": "SimplifyTrivialPHIs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimplifyTrivialPHIs(llvm::BasicBlock *BB)"
  },
  {
    "label": "MigrateDebugValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MigrateDebugValue(llvm::Value *Old, llvm::Value *New)"
  },
  {
    "label": "TryScatterDebugValueToVectorElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryScatterDebugValueToVectorElements(llvm::Value *Val)"
  },
  {
    "label": "LoadModuleFromBitcode()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<llvm::Module>)",
    "insertText": "LoadModuleFromBitcode(llvm::StringRef BC,\n                                                    llvm::LLVMContext &Ctx,\n                                                    std::string &DiagStr)"
  },
  {
    "label": "LoadModuleFromBitcode()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<llvm::Module>)",
    "insertText": "LoadModuleFromBitcode(llvm::MemoryBuffer *MB,\n                                                    llvm::LLVMContext &Ctx,\n                                                    std::string &DiagStr)"
  },
  {
    "label": "LoadModuleFromBitcodeLazy()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<llvm::Module>)",
    "insertText": "LoadModuleFromBitcodeLazy(std::unique_ptr<llvm::MemoryBuffer> &&MB,\n                          llvm::LLVMContext &Ctx, std::string &DiagStr)"
  },
  {
    "label": "PrintDiagnosticHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintDiagnosticHandler(const llvm::DiagnosticInfo &DI, void *Context)"
  },
  {
    "label": "IsIntegerOrFloatingPointType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntegerOrFloatingPointType(llvm::Type *Ty)"
  },
  {
    "label": "ContainsHLSLObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsHLSLObjectType(llvm::Type *Ty)"
  },
  {
    "label": "GetHLSLResourceProperties()",
    "kind": "Method",
    "detail": "Function (DxilResourceProperties>)",
    "insertText": "GetHLSLResourceProperties(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLResourceType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLResourceType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLObjectType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLRayQueryType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLRayQueryType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLWaveMatrixType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLWaveMatrixType(llvm::Type *Ty,\n                          DXIL::WaveMatrixKind *pKind = nullptr)"
  },
  {
    "label": "IsHLSLResourceDescType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLResourceDescType(llvm::Type *Ty)"
  },
  {
    "label": "IsResourceSingleComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourceSingleComponent(llvm::Type *Ty)"
  },
  {
    "label": "GetResourceComponentCount()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetResourceComponentCount(llvm::Type *Ty)"
  },
  {
    "label": "IsSplat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplat(llvm::ConstantDataVector *cdv)"
  },
  {
    "label": "IsHLSLNodeIOType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeIOType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLNodeOutputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeOutputType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLNodeOutputArrayType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeOutputArrayType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLEmptyNodeOutputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLEmptyNodeOutputType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLEmptyNodeOutputArrayType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLEmptyNodeOutputArrayType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLNodeInputRecordType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeInputRecordType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLRWNodeInputRecordType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLRWNodeInputRecordType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLNodeOutputRecordType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeOutputRecordType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLGSNodeOutputRecordType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLGSNodeOutputRecordType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLNodeRecordType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeRecordType(llvm::Type *Ty)"
  },
  {
    "label": "IsHLSLNodeInputOutputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLSLNodeInputOutputType(llvm::Type *Ty)"
  },
  {
    "label": "ReplaceRawBufferLoadWithBufferLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceRawBufferLoadWithBufferLoad(llvm::Function *F, hlsl::OP *op)"
  },
  {
    "label": "ReplaceRawBufferStoreWithBufferStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceRawBufferStoreWithBufferStore(llvm::Function *F, hlsl::OP *op)"
  },
  {
    "label": "ReplaceRawBufferLoad64Bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceRawBufferLoad64Bit(llvm::Function *F, llvm::Type *EltTy,\n                               hlsl::OP *hlslOP)"
  },
  {
    "label": "ReplaceRawBufferStore64Bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceRawBufferStore64Bit(llvm::Function *F, llvm::Type *ETy,\n                                hlsl::OP *hlslOP)"
  },
  {
    "label": "IsConvergentMarker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConvergentMarker(llvm::Value *V)"
  },
  {
    "label": "FunctionHasNoSideEffects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FunctionHasNoSideEffects(llvm::Instruction *I)"
  },
  {
    "label": "mdv_users_end()",
    "kind": "Method",
    "detail": "Function (llvm::Value::user_iterator)",
    "insertText": "mdv_users_end(llvm::Value *V)"
  },
  {
    "label": "mdv_users_begin()",
    "kind": "Method",
    "detail": "Function (llvm::Value::user_iterator)",
    "insertText": "mdv_users_begin(llvm::Value *V)"
  },
  {
    "label": "DeleteDeadAllocas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDeadAllocas(llvm::Function &F)"
  }
]