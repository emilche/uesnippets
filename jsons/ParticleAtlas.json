[
  {
    "label": "ParticleAtlas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParticleAtlas"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ComputeExtremas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputeExtremas"
  },
  {
    "label": "SplittableParticleArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplittableParticleArray"
  },
  {
    "label": "MaskParticles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MaskParticles"
  },
  {
    "label": "RemapIndices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemapIndices"
  },
  {
    "label": "RadialRangeFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RadialRangeFilter"
  },
  {
    "label": "BBoxFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BBoxFilter"
  },
  {
    "label": "ParticleAtlas()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_PARTICLE_ATLAS_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_PARTICLE_ATLAS_HAS_BEEN_INCLUDED # include \" PointIndexGrid . h \" # include<openvdb / Grid . h> # include<openvdb / Types . h> # include<openvdb / math / Transform . h> # include<openvdb / tree / Tree . h> # include<openvdb / tree / LeafNode . h> # include<tbb / blocked_range . h> # include<tbb / parallel_for . h> # include<tbb / parallel_reduce . h> # include<algorithm> # include<cmath> # include<deque> # include<limits> # include<memory> # include<utility> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<PointIndexGridType = PointIndexGrid> struct ParticleAtlas { using Ptr = SharedPtr<ParticleAtlas> ; using ConstPtr = SharedPtr<const ParticleAtlas> ; using PointIndexGridPtr = PointIndexGridType::Ptr ; using IndexType = PointIndexGridType::ValueType ; struct Iterator ;)",
    "insertText": "ParticleAtlas() : mIndexGridArray(), mMinRadiusArray(), mMaxRadiusArray()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<ParticleArrayType> void)",
    "insertText": "construct(const ParticleArrayType& particles, double minVoxelSize, size_t maxLevels = 50)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (template<ParticleArrayType> Ptr)",
    "insertText": "create(const ParticleArrayType& particles, double minVoxelSize, size_t maxLevels = 50)"
  },
  {
    "label": "levels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "levels()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "minRadius()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "minRadius(size_t n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParticleAtlas&)",
    "insertText": "operator(const ParticleAtlas&)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (std::vector<PointIndexGridPtr> mIndexGridArray ; std::vector<double> mMinRadiusArray,mMaxRadiusArray ; } ; using ParticleIndexAtlas = ParticleAtlas<PointIndexGrid> ; template<PointIndexGridType> struct ParticleAtlas<PointIndexGridType>::Iterator { using TreeType = PointIndexGridType::TreeType ; using ConstAccessor = tree::ValueAccessor<const TreeType> ; using ConstAccessorPtr = std::unique_ptr<ConstAccessor> ;)",
    "insertText": "Iterator(const ParticleAtlas& atlas)"
  },
  {
    "label": "worldSpaceSearchAndUpdate()",
    "kind": "Method",
    "detail": "Function (template<ParticleArrayType> void)",
    "insertText": "worldSpaceSearchAndUpdate(const Vec3d& center, double radius, const ParticleArrayType& particles)"
  },
  {
    "label": "worldSpaceSearchAndUpdate()",
    "kind": "Method",
    "detail": "Function (template<ParticleArrayType> void)",
    "insertText": "worldSpaceSearchAndUpdate(const BBoxd& bbox, const ParticleArrayType& particles)"
  },
  {
    "label": "updateFromLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "updateFromLevel(size_t level)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const IndexType&)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "increment()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "next()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Iterator& p)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "Iterator(const Iterator& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator(const Iterator& rhs)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "ComputeExtremas()",
    "kind": "Method",
    "detail": "Function (using Range = std::pair<const IndexType*,const IndexType*> ; using RangeDeque = std::deque<Range> ; using RangeDequeCIter = RangeDeque::const_iterator ; using IndexArray = std::unique_ptr<IndexType [ ]> ; ParticleAtlas const* const mAtlas ; std::unique_ptr<ConstAccessorPtr [ ]> mAccessorList ; Range mRange ; RangeDeque mRangeList ; RangeDequeCIter mIter ; IndexArray mIndexArray ; size_t mIndexArraySize,mAccessorListSize ; } ; namespace particle_atlas_internal { template<ParticleArrayT> struct ComputeExtremas { using PosType = ParticleArrayT::PosType ; using ScalarType = PosType::value_type ;)",
    "insertText": "ComputeExtremas(const ParticleArrayT& particles) : particleArray(&particles) , minRadius(std::numeric_limits<ScalarType>::max()) , maxRadius(-std::numeric_limits<ScalarType>::max())"
  },
  {
    "label": "ComputeExtremas()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ComputeExtremas(ComputeExtremas& rhs, tbb::split) : particleArray(rhs.particleArray) , minRadius(std::numeric_limits<ScalarType>::max()) , maxRadius(-std::numeric_limits<ScalarType>::max())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ScalarType radius,tmpMin = minRadius,tmpMax = maxRadius ;)",
    "insertText": "for(size_t n = range.begin(), N = range.end(); n != N; ++n)"
  },
  {
    "label": "getRadius()",
    "kind": "Method",
    "detail": "Function (particleArray ->)",
    "insertText": "getRadius(n, radius)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (tmpMin =)",
    "insertText": "min(radius, tmpMin)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (tmpMax =)",
    "insertText": "max(radius, tmpMax)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (} minRadius =)",
    "insertText": "min(minRadius, tmpMin)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (maxRadius =)",
    "insertText": "max(maxRadius, tmpMax)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(const ComputeExtremas& rhs)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (minRadius =)",
    "insertText": "min(minRadius, rhs.minRadius)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (maxRadius =)",
    "insertText": "max(maxRadius, rhs.maxRadius)"
  },
  {
    "label": "SplittableParticleArray()",
    "kind": "Method",
    "detail": "Function (} ParticleArrayT const* const particleArray ; ScalarType minRadius,maxRadius ; } ; template<ParticleArrayT,PointIndex> struct SplittableParticleArray { using Ptr = SharedPtr<SplittableParticleArray> ; using ConstPtr = SharedPtr<const SplittableParticleArray> ; using ParticleArray = ParticleArrayT ; using PosType = ParticleArray::PosType ; using ScalarType = PosType::value_type ;)",
    "insertText": "SplittableParticleArray(const ParticleArrayT& particles) : mIndexMap(), mParticleArray(&particles), mSize(particles.size())"
  },
  {
    "label": "updateExtremas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateExtremas()"
  },
  {
    "label": "SplittableParticleArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SplittableParticleArray(const ParticleArrayT& particles, double minR, double maxR) : mIndexMap(), mParticleArray(&particles), mSize(particles.size())"
  },
  {
    "label": "ScalarType()",
    "kind": "Method",
    "detail": "Function (mMinRadius =)",
    "insertText": "ScalarType(minR)"
  },
  {
    "label": "ScalarType()",
    "kind": "Method",
    "detail": "Function (mMaxRadius =)",
    "insertText": "ScalarType(maxR)"
  },
  {
    "label": "particleArray()",
    "kind": "Method",
    "detail": "Function (} const ParticleArrayT&)",
    "insertText": "particleArray()"
  },
  {
    "label": "getRadius()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getRadius(size_t n, ScalarType& radius)"
  },
  {
    "label": "minRadius()",
    "kind": "Method",
    "detail": "Function (} ScalarType)",
    "insertText": "minRadius()"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (} Ptr)",
    "insertText": "split(ScalarType maxRadiusLimit)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<bool [ ]> mask { new bool [ mSize ] } ;)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, mSize), MaskParticles(*this, mask, maxRadiusLimit))"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "output(new SplittableParticleArray(*this, mask))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t newSize = 0 ;)",
    "insertText": "for(size_t n = 0, N = mSize; n < N; ++n)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (newSize + =)",
    "insertText": "size_t(!mask[n])"
  },
  {
    "label": "setIndexMap()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<PointIndex [ ]> newIndexMap { new PointIndex [ newSize ] } ;)",
    "insertText": "setIndexMap(newIndexMap, mask, false)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (mSize = newSize ; mIndexMap .)",
    "insertText": "swap(newIndexMap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SplittableParticleArray&)",
    "insertText": "operator(const SplittableParticleArray&)"
  },
  {
    "label": "SplittableParticleArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplittableParticleArray(const SplittableParticleArray& other, const std::unique_ptr<bool[]>& mask) : mIndexMap(), mParticleArray(&other.particleArray()), mSize(0)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (mSize + =)",
    "insertText": "size_t(mask[n])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mSize != 0)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mIndexMap .)",
    "insertText": "reset(new PointIndex[mSize])"
  },
  {
    "label": "setIndexMap()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "setIndexMap(mIndexMap, mask, true)"
  },
  {
    "label": "MaskParticles()",
    "kind": "Method",
    "detail": "Function (} struct MaskParticles {)",
    "insertText": "MaskParticles(const SplittableParticleArray& particles, const std::unique_ptr<bool[]>& mask, ScalarType radius) : particleArray(&particles) , particleMask(mask.get()) , radiusLimit(radius)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (particleMask [)",
    "insertText": "n(radius < maxRadius)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ComputeExtremas<SplittableParticleArray>)",
    "insertText": "op(*this)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(tbb::blocked_range<size_t>(0, mSize), op)"
  },
  {
    "label": "setIndexMap()",
    "kind": "Method",
    "detail": "Function (mMinRadius = op . minRadius ; mMaxRadius = op . maxRadius ; } void)",
    "insertText": "setIndexMap(std::unique_ptr<PointIndex[]>& newIndexMap, const std::unique_ptr<bool[]>& mask, bool maskValue)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const PointIndex* indices = mIndexMap .)",
    "insertText": "get()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(size_t idx = 0, n = 0, N = mSize; n < N; ++n)"
  },
  {
    "label": "PointIndex()",
    "kind": "Method",
    "detail": "Function (newIndexMap [ idx + + ] =)",
    "insertText": "PointIndex(static_cast<typename PointIndex::IntType>(n))"
  },
  {
    "label": "RemapIndices()",
    "kind": "Method",
    "detail": "Function (} } } } std::unique_ptr<PointIndex [ ]> mIndexMap ; ParticleArrayT const* const mParticleArray ; size_t mSize ; ScalarType mMinRadius,mMaxRadius ; } ; template<ParticleArrayType,PointIndexLeafNodeType> struct RemapIndices {)",
    "insertText": "RemapIndices(const ParticleArrayType& particles, std::vector<PointIndexLeafNodeType*>& nodes) : mParticles(&particles) , mNodes(nodes.empty() ? nullptr : &nodes.front())"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (PointIndexLeafNodeType& node =* mNodes [ n ] ; const size_t numIndices = node .)",
    "insertText": "indices().size()"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (PointIndexType* begin =& node .)",
    "insertText": "indices().front()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const PointIndexType* end = begin + numIndices ;)",
    "insertText": "while(begin < end)"
  },
  {
    "label": "PointIndexType()",
    "kind": "Method",
    "detail": "Function (* begin =)",
    "insertText": "PointIndexType(static_cast<typename PointIndexType::IntType>( mParticles->getGlobalIndex(*begin)))"
  },
  {
    "label": "RadialRangeFilter()",
    "kind": "Method",
    "detail": "Function (+ + begin ; } } } } ParticleArrayType const* const mParticles ; PointIndexLeafNodeType* const* const mNodes ; } ; template<ParticleArrayType,IndexT> struct RadialRangeFilter { using PosType = ParticleArrayType::PosType ; using ScalarType = PosType::value_type ; using Range = std::pair<const IndexT*,const IndexT*> ; using RangeDeque = std::deque<Range> ; using IndexDeque = std::deque<IndexT> ;)",
    "insertText": "RadialRangeFilter(RangeDeque& ranges, IndexDeque& indices, const PosType& xyz, ScalarType radius, const ParticleArrayType& particles, bool hasUniformRadius = false) : mRanges(ranges) , mIndices(indices) , mCenter(xyz) , mRadius(radius) , mParticles(&particles) , mHasUniformRadius(hasUniformRadius)"
  },
  {
    "label": "getRadius()",
    "kind": "Method",
    "detail": "Function (ScalarType uniformRadius ; mParticles ->)",
    "insertText": "getRadius(0, uniformRadius)"
  },
  {
    "label": "filterLeafNode()",
    "kind": "Method",
    "detail": "Function (mRadius = mRadius + uniformRadius ; mRadius* = mRadius ; } } template<LeafNodeType> void)",
    "insertText": "filterLeafNode(const LeafNodeType& leaf)"
  },
  {
    "label": "filterVoxel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "filterVoxel(leaf.origin(), begin, begin + numIndices)"
  },
  {
    "label": "filterVoxel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "filterVoxel(const Coord&, const IndexT* begin, const IndexT* end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PosType pos ;)",
    "insertText": "if(mHasUniformRadius)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (mParticles ->)",
    "insertText": "getPos(size_t(*begin), pos)"
  },
  {
    "label": "distSqr()",
    "kind": "Method",
    "detail": "Function (const ScalarType)",
    "insertText": "distSqr(mCenter - pos).lengthSqr()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mIndices .)",
    "insertText": "push_back(*begin)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t idx =)",
    "insertText": "size_t(*begin)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (mParticles ->)",
    "insertText": "getPos(idx, pos)"
  },
  {
    "label": "getRadius()",
    "kind": "Method",
    "detail": "Function (ScalarType radius ; mParticles ->)",
    "insertText": "getRadius(idx, radius)"
  },
  {
    "label": "RadialRangeFilter()",
    "kind": "Method",
    "detail": "Function (} + + begin ; } } } private :)",
    "insertText": "RadialRangeFilter(const RadialRangeFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RadialRangeFilter&)",
    "insertText": "operator(const RadialRangeFilter&)"
  },
  {
    "label": "BBoxFilter()",
    "kind": "Method",
    "detail": "Function (RangeDeque& mRanges ; IndexDeque& mIndices ; PosType const mCenter ; ScalarType mRadius ; ParticleArrayType const* const mParticles ; bool const mHasUniformRadius ; } ; template<ParticleArrayType,IndexT> struct BBoxFilter { using PosType = ParticleArrayType::PosType ; using ScalarType = PosType::value_type ; using Range = std::pair<const IndexT*,const IndexT*> ; using RangeDeque = std::deque<Range> ; using IndexDeque = std::deque<IndexT> ;)",
    "insertText": "BBoxFilter(RangeDeque& ranges, IndexDeque& indices, const BBoxd& bbox, const ParticleArrayType& particles, bool hasUniformRadius = false) : mRanges(ranges) , mIndices(indices) , mBBox(PosType(bbox.min()), PosType(bbox.max())) , mCenter(mBBox.getCenter()) , mParticles(&particles) , mHasUniformRadius(hasUniformRadius) , mUniformRadiusSqr(ScalarType(0.0))"
  },
  {
    "label": "getRadius()",
    "kind": "Method",
    "detail": "Function (mParticles ->)",
    "insertText": "getRadius(0, mUniformRadiusSqr)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mIndices .)",
    "insertText": "push_back(*begin++)"
  },
  {
    "label": "pointToBBoxDistSqr()",
    "kind": "Method",
    "detail": "Function (continue ; } const ScalarType distSqr =)",
    "insertText": "pointToBBoxDistSqr(pos)"
  },
  {
    "label": "BBoxFilter()",
    "kind": "Method",
    "detail": "Function (} + + begin ; } } } private :)",
    "insertText": "BBoxFilter(const BBoxFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BBoxFilter&)",
    "insertText": "operator(const BBoxFilter&)"
  },
  {
    "label": "pointToBBoxDistSqr()",
    "kind": "Method",
    "detail": "Function (ScalarType)",
    "insertText": "pointToBBoxDistSqr(const PosType& pos)"
  },
  {
    "label": "ScalarType()",
    "kind": "Method",
    "detail": "Function (ScalarType distSqr =)",
    "insertText": "ScalarType(0.0)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const ScalarType a = pos [ i ] ; ScalarType b = mBBox .)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (ScalarType delta = b - a ; distSqr + = delta* delta ; } b = mBBox .)",
    "insertText": "max()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (ScalarType delta = a - b ; distSqr + = delta* delta ; } } return distSqr ; } RangeDeque& mRanges ; IndexDeque& mIndices ; math::BBox<PosType> const mBBox ; PosType const mCenter ; ParticleArrayType const* const mParticles ; bool const mHasUniformRadius ; ScalarType mUniformRadiusSqr ; } ; } template<PointIndexGridType> template<ParticleArrayType> void ParticleAtlas<PointIndexGridType)",
    "insertText": "construct(const ParticleArrayType& particles, double minVoxelSize, size_t maxLevels)"
  },
  {
    "label": "extremas()",
    "kind": "Method",
    "detail": "Function (using SplittableParticleArray = particle_atlas_internal::SplittableParticleArray<ParticleArrayType,IndexType> ; using SplittableParticleArrayPtr = SplittableParticleArray::Ptr ; using ScalarType = ParticleArrayType::ScalarType ; particle_atlas_internal::ComputeExtremas<ParticleArrayType>)",
    "insertText": "extremas(particles)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(tbb::blocked_range<size_t>(0, particles.size()), extremas)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const double firstMin = extremas . minRadius ; const double firstMax = extremas . maxRadius ; const double firstVoxelSize =)",
    "insertText": "max(minVoxelSize, firstMin)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (std::vector<SplittableParticleArrayPtr> levels ; levels .)",
    "insertText": "push_back(SplittableParticleArrayPtr( new SplittableParticleArray(particles, firstMin, firstMax)))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (std::vector<double> voxelSizeArray ; voxelSizeArray .)",
    "insertText": "push_back(firstVoxelSize)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double maxParticleRadius =)",
    "insertText": "double(levels.back()->maxRadius())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (const double particleRadiusLimit = voxelSizeArray .)",
    "insertText": "back() * double(2.0)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (SplittableParticleArrayPtr newLevel = levels .)",
    "insertText": "back()->split(ScalarType(particleRadiusLimit))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (levels .)",
    "insertText": "push_back(newLevel)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (voxelSizeArray .)",
    "insertText": "push_back(double(newLevel->minRadius()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} size_t numPoints = 0 ; using PointIndexTreeType = PointIndexGridType::TreeType ; using PointIndexLeafNodeType = PointIndexTreeType::LeafNodeType ; std::vector<PointIndexLeafNodeType*> nodes ;)",
    "insertText": "for(size_t n = 0, N = levels.size(); n < N; ++n)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mMinRadiusArray .)",
    "insertText": "push_back(double(particleArray.minRadius()))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mMaxRadiusArray .)",
    "insertText": "push_back(double(particleArray.maxRadius()))"
  },
  {
    "label": "PointIndexGridType()",
    "kind": "Method",
    "detail": "Function (PointIndexGridPtr grid = createPointIndexGrid<)",
    "insertText": "PointIndexGridType(particleArray, voxelSizeArray[n])"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "tree().getNodes(nodes)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, nodes.size()), particle_atlas_internal::RemapIndices<SplittableParticleArray, PointIndexLeafNodeType>(particleArray, nodes))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mIndexGridArray .)",
    "insertText": "push_back(grid)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} } else { mMinRadiusArray .)",
    "insertText": "push_back(firstMin)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mMaxRadiusArray .)",
    "insertText": "push_back(firstMax)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mIndexGridArray .)",
    "insertText": "push_back(createPointIndexGrid<PointIndexGridType>(particles, firstVoxelSize))"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} } template<PointIndexGridType> template<ParticleArrayType> ParticleAtlas<PointIndexGridType>::Ptr ParticleAtlas<PointIndexGridType)",
    "insertText": "create(const ParticleArrayType& particles, double minVoxelSize, size_t maxLevels)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "ret(new ParticleAtlas())"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (ret ->)",
    "insertText": "construct(particles, minVoxelSize, maxLevels)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mAccessorList .)",
    "insertText": "reset(new ConstAccessorPtr[mAccessorListSize])"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mAccessorList [ n ] .)",
    "insertText": "reset(new ConstAccessor(atlas.pointIndexGrid(n).tree()))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (mIter = mRangeList .)",
    "insertText": "begin()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (mRange = mRangeList .)",
    "insertText": "front()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mIndexArray)"
  },
  {
    "label": "IndexType()",
    "kind": "Method",
    "detail": "Function (mRange . second = mRange . first + mIndexArraySize ; } else { mRange . first = static_cast<)",
    "insertText": "IndexType(nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + mRange . first ;)",
    "insertText": "if(mRange.first >= mRange.second && mIter != mRangeList.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + mIter ;)",
    "insertText": "if(mIter != mRangeList.end())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (size_t count = 0 ; RangeDeque::const_iterator it = mRangeList .)",
    "insertText": "begin(), end = mRangeList.end()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (mIter = mRangeList .)",
    "insertText": "end()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const size_t levelIdx =)",
    "insertText": "min(mAccessorListSize - 1, level)"
  },
  {
    "label": "pointIndexGrid()",
    "kind": "Method",
    "detail": "Function (const TreeT& tree = mAtlas ->)",
    "insertText": "pointIndexGrid(levelIdx).tree()"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (std::vector<const LeafNodeType*> nodes ; tree .)",
    "insertText": "getNodes(nodes)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mRangeList .)",
    "insertText": "push_back(Range(begin, (begin + numIndices)))"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (std::deque<IndexType> filteredIndices ; std::vector<CoordBBox> searchRegions ; const double iRadius = radius*)",
    "insertText": "double(1.0 / std::sqrt(3.0))"
  },
  {
    "label": "ibMin()",
    "kind": "Method",
    "detail": "Function (const Vec3d)",
    "insertText": "ibMin(center[0] - iRadius, center[1] - iRadius, center[2] - iRadius)"
  },
  {
    "label": "ibMax()",
    "kind": "Method",
    "detail": "Function (const Vec3d)",
    "insertText": "ibMax(center[0] + iRadius, center[1] + iRadius, center[2] + iRadius)"
  },
  {
    "label": "bMin()",
    "kind": "Method",
    "detail": "Function (const Vec3d)",
    "insertText": "bMin(center[0] - radius, center[1] - radius, center[2] - radius)"
  },
  {
    "label": "bMax()",
    "kind": "Method",
    "detail": "Function (const Vec3d)",
    "insertText": "bMax(center[0] + radius, center[1] + radius, center[2] + radius)"
  },
  {
    "label": "PosType()",
    "kind": "Method",
    "detail": "Function (const PosType pos =)",
    "insertText": "PosType(center)"
  },
  {
    "label": "ScalarType()",
    "kind": "Method",
    "detail": "Function (const ScalarType dist =)",
    "insertText": "ScalarType(radius)"
  },
  {
    "label": "maxRadius()",
    "kind": "Method",
    "detail": "Function (const double maxRadius = mAtlas ->)",
    "insertText": "maxRadius(n)"
  },
  {
    "label": "isApproxEqual()",
    "kind": "Method",
    "detail": "Function (const bool uniformRadius =)",
    "insertText": "isApproxEqual(mAtlas->minRadius(n), maxRadius)"
  },
  {
    "label": "pointIndexGrid()",
    "kind": "Method",
    "detail": "Function (const openvdb::math::Transform& xform = mAtlas ->)",
    "insertText": "pointIndexGrid(n).transform()"
  },
  {
    "label": "inscribedRegion()",
    "kind": "Method",
    "detail": "Function (ConstAccessor& acc =* mAccessorList [ n ] ; openvdb::CoordBBox)",
    "insertText": "inscribedRegion(xform.worldToIndexCellCentered(ibMin), xform.worldToIndexCellCentered(ibMax))"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (inscribedRegion .)",
    "insertText": "expand(-1)"
  },
  {
    "label": "pointIndexSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pointIndexSearch(mRangeList, acc, inscribedRegion)"
  },
  {
    "label": "region()",
    "kind": "Method",
    "detail": "Function (const openvdb::CoordBBox)",
    "insertText": "region(xform.worldToIndexCellCentered(bMin - maxRadius), xform.worldToIndexCellCentered(bMax + maxRadius))"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (inscribedRegion .)",
    "insertText": "expand(1)"
  },
  {
    "label": "constructExclusiveRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "constructExclusiveRegions(searchRegions, region, inscribedRegion)"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (using FilterType = particle_atlas_internal::RadialRangeFilter<ParticleArrayType,IndexType> ; FilterType)",
    "insertText": "filter(mRangeList, filteredIndices, pos, dist, particles, uniformRadius)"
  },
  {
    "label": "filteredPointIndexSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "filteredPointIndexSearch(filter, acc, searchRegions[i])"
  },
  {
    "label": "dequeToArray()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "dequeToArray(filteredIndices, mIndexArray, mIndexArraySize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::deque<IndexType> filteredIndices ; std::vector<CoordBBox> searchRegions ;)",
    "insertText": "for(size_t n = 0, N = mAccessorListSize; n < N; ++n)"
  },
  {
    "label": "inscribedRegion()",
    "kind": "Method",
    "detail": "Function (ConstAccessor& acc =* mAccessorList [ n ] ; openvdb::CoordBBox)",
    "insertText": "inscribedRegion(xform.worldToIndexCellCentered(bbox.min()), xform.worldToIndexCellCentered(bbox.max()))"
  },
  {
    "label": "region()",
    "kind": "Method",
    "detail": "Function (const openvdb::CoordBBox)",
    "insertText": "region(xform.worldToIndexCellCentered(bbox.min() - maxRadius), xform.worldToIndexCellCentered(bbox.max() + maxRadius))"
  },
  {
    "label": "filter()",
    "kind": "Method",
    "detail": "Function (using FilterType = particle_atlas_internal::BBoxFilter<ParticleArrayType,IndexType> ; FilterType)",
    "insertText": "filter(mRangeList, filteredIndices, bbox, particles, uniformRadius)"
  }
]