[
  {
    "label": "ESteamAPICallFailure",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamAPICallFailure"
  },
  {
    "label": "EGamepadTextInputMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGamepadTextInputMode"
  },
  {
    "label": "EGamepadTextInputLineMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGamepadTextInputLineMode"
  },
  {
    "label": "EFloatingGamepadTextInputMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFloatingGamepadTextInputMode"
  },
  {
    "label": "ETextFilteringContext",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextFilteringContext"
  },
  {
    "label": "ISteamUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamUtils"
  },
  {
    "label": "IPCountry_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPCountry_t"
  },
  {
    "label": "LowBatteryPower_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LowBatteryPower_t"
  },
  {
    "label": "SteamAPICallCompleted_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamAPICallCompleted_t"
  },
  {
    "label": "SteamShutdown_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamShutdown_t"
  },
  {
    "label": "ECheckFileSignature",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECheckFileSignature"
  },
  {
    "label": "CheckFileSignature_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckFileSignature_t"
  },
  {
    "label": "GamepadTextInputDismissed_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GamepadTextInputDismissed_t"
  },
  {
    "label": "FloatingGamepadTextInputDismissed_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FloatingGamepadTextInputDismissed_t"
  },
  {
    "label": "FilterTextDictionaryChanged_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterTextDictionaryChanged_t"
  },
  {
    "label": "GetSecondsSinceAppActive()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMUTILS_H # define ISTEAMUTILS_H # include \" steam_api_common . h \" enum ESteamAPICallFailure { k_ESteamAPICallFailureNone = - 1,k_ESteamAPICallFailureSteamGone = 0,k_ESteamAPICallFailureNetworkFailure = 1,k_ESteamAPICallFailureInvalidHandle = 2,k_ESteamAPICallFailureMismatchedCallback = 3,} ; enum EGamepadTextInputMode { k_EGamepadTextInputModeNormal = 0,k_EGamepadTextInputModePassword = 1 } ; enum EGamepadTextInputLineMode { k_EGamepadTextInputLineModeSingleLine = 0,k_EGamepadTextInputLineModeMultipleLines = 1 } ; enum EFloatingGamepadTextInputMode { k_EFloatingGamepadTextInputModeModeSingleLine = 0,k_EFloatingGamepadTextInputModeModeMultipleLines = 1,k_EFloatingGamepadTextInputModeModeEmail = 2,k_EFloatingGamepadTextInputModeModeNumeric = 3,} ; enum ETextFilteringContext { k_ETextFilteringContextUnknown = 0,k_ETextFilteringContextGameContent = 1,k_ETextFilteringContextChat = 2,k_ETextFilteringContextName = 3,} ; class ISteamUtils { public : uint32)",
    "insertText": "GetSecondsSinceAppActive()"
  },
  {
    "label": "GetSecondsSinceComputerActive()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSecondsSinceComputerActive()"
  },
  {
    "label": "GetConnectedUniverse()",
    "kind": "Method",
    "detail": "Function (EUniverse)",
    "insertText": "GetConnectedUniverse()"
  },
  {
    "label": "GetServerRealTime()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetServerRealTime()"
  },
  {
    "label": "GetIPCountry()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetIPCountry()"
  },
  {
    "label": "GetImageSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight)"
  },
  {
    "label": "GetImageRGBA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize)"
  },
  {
    "label": "STEAM_PRIVATE_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_PRIVATE_API(virtual bool GetCSERIPPort( uint32 *unIP, uint16 *usPort ) = 0; ) virtual uint8 GetCurrentBatteryPower()"
  },
  {
    "label": "GetAppID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAppID()"
  },
  {
    "label": "SetOverlayNotificationPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)"
  },
  {
    "label": "IsAPICallCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed)"
  },
  {
    "label": "GetAPICallFailureReason()",
    "kind": "Method",
    "detail": "Function (ESteamAPICallFailure)",
    "insertText": "GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)"
  },
  {
    "label": "GetAPICallResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed)"
  },
  {
    "label": "STEAM_PRIVATE_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_PRIVATE_API(virtual void RunFrame() = 0; ) virtual uint32 GetIPCCallCount()"
  },
  {
    "label": "SetWarningMessageHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)"
  },
  {
    "label": "IsOverlayEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOverlayEnabled()"
  },
  {
    "label": "BOverlayNeedsPresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BOverlayNeedsPresent()"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(CheckFileSignature_t ) virtual SteamAPICall_t CheckFileSignature( const char *szFileName)"
  },
  {
    "label": "ShowGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText)"
  },
  {
    "label": "GetEnteredGamepadTextLength()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetEnteredGamepadTextLength()"
  },
  {
    "label": "GetEnteredGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnteredGamepadTextInput(char *pchText, uint32 cchText)"
  },
  {
    "label": "GetSteamUILanguage()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetSteamUILanguage()"
  },
  {
    "label": "IsSteamRunningInVR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSteamRunningInVR()"
  },
  {
    "label": "SetOverlayNotificationInset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)"
  },
  {
    "label": "IsSteamInBigPictureMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSteamInBigPictureMode()"
  },
  {
    "label": "StartVRDashboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartVRDashboard()"
  },
  {
    "label": "IsVRHeadsetStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVRHeadsetStreamingEnabled()"
  },
  {
    "label": "SetVRHeadsetStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVRHeadsetStreamingEnabled(bool bEnabled)"
  },
  {
    "label": "IsSteamChinaLauncher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSteamChinaLauncher()"
  },
  {
    "label": "InitFilterText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFilterText(uint32 unFilterOptions = 0)"
  },
  {
    "label": "FilterText()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FilterText(ETextFilteringContext eContext, CSteamID sourceSteamID, const char *pchInputMessage, char *pchOutFilteredText, uint32 nByteSizeOutFilteredText)"
  },
  {
    "label": "GetIPv6ConnectivityState()",
    "kind": "Method",
    "detail": "Function (ESteamIPv6ConnectivityState)",
    "insertText": "GetIPv6ConnectivityState(ESteamIPv6ConnectivityProtocol eProtocol)"
  },
  {
    "label": "IsSteamRunningOnSteamDeck()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSteamRunningOnSteamDeck()"
  },
  {
    "label": "ShowFloatingGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowFloatingGamepadTextInput(EFloatingGamepadTextInputMode eKeyboardMode, int nTextFieldXPosition, int nTextFieldYPosition, int nTextFieldWidth, int nTextFieldHeight)"
  },
  {
    "label": "SetGameLauncherMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameLauncherMode(bool bLauncherMode)"
  },
  {
    "label": "DismissFloatingGamepadTextInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DismissFloatingGamepadTextInput()"
  },
  {
    "label": "SteamUtils()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMUTILS_INTERFACE_VERSION \" SteamUtils010 \" ISteamUtils*)",
    "insertText": "SteamUtils()"
  },
  {
    "label": "STEAM_DEFINE_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_INTERFACE_ACCESSOR(ISteamUtils *, SteamUtils, SteamInternal_FindOrCreateUserInterface( 0, STEAMUTILS_INTERFACE_VERSION ), \"user\", STEAMUTILS_INTERFACE_VERSION)"
  },
  {
    "label": "SteamGameServerUtils()",
    "kind": "Method",
    "detail": "Function (ISteamUtils*)",
    "insertText": "SteamGameServerUtils()"
  },
  {
    "label": "STEAM_DEFINE_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_INTERFACE_ACCESSOR(ISteamUtils *, SteamGameServerUtils, SteamInternal_FindOrCreateGameServerInterface( 0, STEAMUTILS_INTERFACE_VERSION ), \"gameserver\", STEAMUTILS_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  },
  {
    "label": "STEAM_CALLBACK_BEGIN()",
    "kind": "Method",
    "detail": "Function (enum { k_iCallback = k_iSteamUtilsCallbacks + 1 } ; } ; struct LowBatteryPower_t { enum { k_iCallback = k_iSteamUtilsCallbacks + 2 } ; uint8 m_nMinutesBatteryLeft ; } ; struct SteamAPICallCompleted_t { enum { k_iCallback = k_iSteamUtilsCallbacks + 3 } ; SteamAPICall_t m_hAsyncCall ; int m_iCallback ; uint32 m_cubParam ; } ; struct SteamShutdown_t { enum { k_iCallback = k_iSteamUtilsCallbacks + 4 } ; } ; enum ECheckFileSignature { k_ECheckFileSignatureInvalidSignature = 0,k_ECheckFileSignatureValidSignature = 1,k_ECheckFileSignatureFileNotFound = 2,k_ECheckFileSignatureNoSignaturesFoundForThisApp = 3,k_ECheckFileSignatureNoSignaturesFoundForThisFile = 4,} ; struct CheckFileSignature_t { enum { k_iCallback = k_iSteamUtilsCallbacks + 5 } ; ECheckFileSignature m_eCheckFileSignature ; } ; struct GamepadTextInputDismissed_t { enum { k_iCallback = k_iSteamUtilsCallbacks + 1 4 } ; bool m_bSubmitted ; uint32 m_unSubmittedText ; AppId_t m_unAppID ; } ;)",
    "insertText": "STEAM_CALLBACK_BEGIN(AppResumingFromSuspend_t, k_iSteamUtilsCallbacks + 36 ) STEAM_CALLBACK_END(0)"
  }
]