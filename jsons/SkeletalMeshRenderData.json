[
  {
    "label": "FMeshUVChannelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshUVChannelInfo"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FSkeletalMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletalMaterial"
  },
  {
    "label": "UMorphTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMorphTarget"
  },
  {
    "label": "FResourceSizeEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceSizeEx"
  },
  {
    "label": "FSkeletalMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshRenderData"
  },
  {
    "label": "FSkinnedAssetCompilationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinnedAssetCompilationContext"
  },
  {
    "label": "FSkeletalMeshRenderData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" Containers / IndirectArray . h \" # include \" Rendering / SkeletalMeshLODRenderData . h \" # include \" Rendering / NaniteInterface . h \" struct FMeshUVChannelInfo ; class USkeletalMesh ; class USkinnedAsset ; struct FSkeletalMaterial ; class UMorphTarget ; struct FResourceSizeEx ; class FSkeletalMeshRenderData { public : TIndirectArray<FSkeletalMeshLODRenderData> LODRenderData ; TPimplPtr<Nanite::FResources> NaniteResourcesPtr ; bool bReadyForStreaming ; uint8 NumInlinedLODs ; uint8 NumNonOptionalLODs ; uint8 CurrentFirstLODIdx ; uint8 PendingFirstLODIdx ; uint8 LODBiasModifier ; bool bSupportRayTracing ; # if RHI_RAYTRACING RayTracing::GeometryGroupHandle RayTracingGeometryGroupHandle = INDEX_NONE ; # endif # if WITH_EDITORONLY_DATA TArray<FMeshUVChannelInfo> UVChannelDataPerMaterial ; FString DerivedDataKey ; TUniquePtr<class FSkeletalMeshRenderData> NextCachedRenderData ; # endif)",
    "insertText": "FSkeletalMeshRenderData()"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "Cache(const ITargetPlatform* TargetPlatform, USkinnedAsset* Owner, class FSkinnedAssetCompilationContext* ContextPtr)"
  },
  {
    "label": "GetDerivedDataKey()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDerivedDataKey(const ITargetPlatform* TargetPlatform, USkinnedAsset* Owner)"
  },
  {
    "label": "SyncUVChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncUVChannelData(const TArray<FSkeletalMaterial>& ObjectData)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar, USkinnedAsset* Owner)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources(bool bNeedsVertexColors, TArray<UMorphTarget*>& InMorphTargets, USkinnedAsset* Owner)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetCPUAccessMemoryOverhead()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetCPUAccessMemoryOverhead()"
  },
  {
    "label": "RequiresCPUSkinning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresCPUSkinning(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "RequiresCPUSkinning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresCPUSkinning(ERHIFeatureLevel::Type FeatureLevel, int32 MinLODIdx)"
  },
  {
    "label": "GetNumBoneInfluences()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumBoneInfluences()"
  },
  {
    "label": "GetNumBoneInfluences()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumBoneInfluences(int32 MinLODIdx)"
  },
  {
    "label": "GetMaxBonesPerSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxBonesPerSection()"
  },
  {
    "label": "GetMaxBonesPerSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxBonesPerSection(int32 MinLODIdx)"
  },
  {
    "label": "GetFirstValidLODIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFirstValidLODIdx(int32 MinLODIdx)"
  },
  {
    "label": "AnyRenderSectionCastsShadows()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AnyRenderSectionCastsShadows(int32 MinLODIdx)"
  },
  {
    "label": "GetPendingFirstLODIdx()",
    "kind": "Method",
    "detail": "Function (const int32 PendingFirstIdx =)",
    "insertText": "GetPendingFirstLODIdx(MinLODIdx)"
  },
  {
    "label": "GetNumNonStreamingLODs()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetNumNonStreamingLODs()"
  },
  {
    "label": "GetNumNonOptionalLODs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumNonOptionalLODs()"
  }
]