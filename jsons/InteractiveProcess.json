[
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FInteractiveProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInteractiveProcess"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Queue . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" Logging / LogMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / Timespan . h \" class FRunnableThread ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogInteractiveProcess, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnInteractiveProcessCompleted, int32, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnInteractiveProcessOutput, const FString&)"
  },
  {
    "label": "FInteractiveProcess()",
    "kind": "Method",
    "detail": "Function (class FInteractiveProcess : public FRunnable { public :)",
    "insertText": "FInteractiveProcess(const FString& InURL, const FString& InParams, bool InHidden, bool LongTime = false)"
  },
  {
    "label": "FInteractiveProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInteractiveProcess(const FString& InURL, const FString& InParams, const FString& InWorkingDir, bool InHidden, bool LongTime = false)"
  },
  {
    "label": "FInteractiveProcess()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInteractiveProcess()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetProcessHandle()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "GetProcessHandle()"
  },
  {
    "label": "OnCanceled()",
    "kind": "Method",
    "detail": "Function (FSimpleDelegate&)",
    "insertText": "OnCanceled()"
  },
  {
    "label": "SendWhenReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendWhenReady(const TArray<uint8> &Data)"
  },
  {
    "label": "GetReturnCode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetReturnCode()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bCanceling = true ; bKillTree = InKillTree ; } bool)",
    "insertText": "Init()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  },
  {
    "label": "ProcessOutput()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ProcessOutput(const FString& Output)"
  },
  {
    "label": "SendMessageToProcessIf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessageToProcessIf()"
  }
]