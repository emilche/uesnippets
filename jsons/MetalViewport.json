[
  {
    "label": "FMetalSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalSurface"
  },
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "EMetalViewportAccessFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalViewportAccessFlag"
  },
  {
    "label": "FMetalCommandQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandQueue"
  },
  {
    "label": "BeginRenderingImmersiveParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BeginRenderingImmersiveParams"
  },
  {
    "label": "PresentImmersiveParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PresentImmersiveParams"
  },
  {
    "label": "FMetalViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalViewport"
  },
  {
    "label": "TMetalResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMetalResourceTraits"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" PixelFormat . h \" # include \" RHIResources . h \" # include \" MetalResources . h \" # if PLATFORM_MAC # include \" Mac / CocoaTextView . h \" @ interface FMetalView : FCocoaTextView @ end # endif # include \" HAL / PlatformFramePacer . h \" # if PLATFORM_VISIONOS # import<CompositorServices / CompositorServices . h> # endif class FMetalSurface ; class FMetalDevice ; enum EMetalViewportAccessFlag { EMetalViewportAccessRHI,EMetalViewportAccessRenderer,EMetalViewportAccessGame,EMetalViewportAccessDisplayLink } ; class FMetalCommandQueue ; # if PLATFORM_VISIONOS namespace MetalRHIVisionOS { struct BeginRenderingImmersiveParams ; struct PresentImmersiveParams ; } # endif typedef)",
    "insertText": "void(^FMetalViewportPresentHandler)(uint32 CGDirectDisplayID, double OutputSeconds, double OutputDuration)"
  },
  {
    "label": "FMetalViewport()",
    "kind": "Method",
    "detail": "Function (class FMetalViewport : public FRHIViewport { public :)",
    "insertText": "FMetalViewport(FMetalDevice& InDevice, void* WindowHandle, uint32 InSizeX, uint32 InSizeY, bool bInIsFullscreen,EPixelFormat Format)"
  },
  {
    "label": "FMetalViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalViewport()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(uint32 InSizeX, uint32 InSizeY, bool bInIsFullscreen,EPixelFormat Format)"
  },
  {
    "label": "GetBackBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FMetalSurface>)",
    "insertText": "GetBackBuffer(EMetalViewportAccessFlag Accessor)"
  },
  {
    "label": "GetDrawable()",
    "kind": "Method",
    "detail": "Function (CA::MetalDrawable*)",
    "insertText": "GetDrawable(EMetalViewportAccessFlag Accessor)"
  },
  {
    "label": "GetDrawableTexture()",
    "kind": "Method",
    "detail": "Function (MTL::Texture*)",
    "insertText": "GetDrawableTexture(EMetalViewportAccessFlag Accessor)"
  },
  {
    "label": "GetCurrentTexture()",
    "kind": "Method",
    "detail": "Function (MTL::Texture*)",
    "insertText": "GetCurrentTexture(EMetalViewportAccessFlag Accessor)"
  },
  {
    "label": "ReleaseDrawable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDrawable(void)"
  },
  {
    "label": "GetNativeBackBufferTexture()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeBackBufferTexture()"
  },
  {
    "label": "GetNativeBackBufferRT()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeBackBufferRT()"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_MAC NSWindow*)",
    "insertText": "GetWindow()"
  },
  {
    "label": "SetCustomPresent()",
    "kind": "Method",
    "detail": "Function (# endif # if PLATFORM_MAC | | PLATFORM_VISIONOS void)",
    "insertText": "SetCustomPresent(FRHICustomPresent* InCustomPresent)"
  },
  {
    "label": "GetCustomPresent()",
    "kind": "Method",
    "detail": "Function (CustomPresent = InCustomPresent ; } FRHICustomPresent*)",
    "insertText": "GetCustomPresent()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap()"
  },
  {
    "label": "GetDrawableImmersiveTextures()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_VISIONOS void)",
    "insertText": "GetDrawableImmersiveTextures(EMetalViewportAccessFlag Accessor, cp_drawable_t SwiftDrawable, MTL::Texture*& OutColorTexture, MTL::Texture*& OutDepthTexture)"
  },
  {
    "label": "PresentImmersive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresentImmersive(const MetalRHIVisionOS::PresentImmersiveParams* Params)"
  },
  {
    "label": "GetViewportIndex()",
    "kind": "Method",
    "detail": "Function (# endif private : uint32)",
    "insertText": "GetViewportIndex(EMetalViewportAccessFlag Accessor)"
  }
]