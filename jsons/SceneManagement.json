[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FGlobalDynamicIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicIndexBuffer"
  },
  {
    "label": "FGlobalDynamicReadBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicReadBuffer"
  },
  {
    "label": "FGlobalDynamicVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicVertexBuffer"
  },
  {
    "label": "FLightMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMap"
  },
  {
    "label": "FLightmapResourceCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapResourceCluster"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewState"
  },
  {
    "label": "FShadowMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMap"
  },
  {
    "label": "FStaticLightingBuildContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingBuildContext"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "ULightMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapTexture2D"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UShadowMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UShadowMapTexture2D"
  },
  {
    "label": "USkyAtmosphereComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyAtmosphereComponent"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereRenderSceneInfo"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureLightProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureLightProfile"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "ULightMapVirtualTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapVirtualTexture2D"
  },
  {
    "label": "FGPUScenePrimitiveCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScenePrimitiveCollector"
  },
  {
    "label": "FVirtualShadowMapArrayCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArrayCacheManager"
  },
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewMatrices"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FLandscapeRayTracingStateList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeRayTracingStateList"
  },
  {
    "label": "FPrimitiveUniformShaderParametersBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveUniformShaderParametersBuilder"
  },
  {
    "label": "FColorSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorSpace"
  },
  {
    "label": "FTemporalLODState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemporalLODState"
  },
  {
    "label": "ESequencerState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESequencerState"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "FFrozenSceneViewMatricesGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrozenSceneViewMatricesGuard"
  },
  {
    "label": "FDefaultWorkingColorSpaceUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultWorkingColorSpaceUniformBuffer"
  },
  {
    "label": "ELightInteractionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightInteractionType"
  },
  {
    "label": "FLightInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightInteraction"
  },
  {
    "label": "FLightMapInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMapInteraction"
  },
  {
    "label": "FShadowMapInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapInteraction"
  },
  {
    "label": "FLightmapClusterResourceInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapClusterResourceInput"
  },
  {
    "label": "FDefaultLightmapResourceClusterUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultLightmapResourceClusterUniformBuffer"
  },
  {
    "label": "FLightCacheInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightCacheInterface"
  },
  {
    "label": "FAsyncEncode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncEncode"
  },
  {
    "label": "ITextureCompressorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureCompressorModule"
  },
  {
    "label": "FShadowCascadeSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowCascadeSettings"
  },
  {
    "label": "FProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInitializer"
  },
  {
    "label": "FPerObjectProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerObjectProjectedShadowInitializer"
  },
  {
    "label": "FWholeSceneProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWholeSceneProjectedShadowInitializer"
  },
  {
    "label": "FDefaultMobileReflectionCaptureUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultMobileReflectionCaptureUniformBuffer"
  },
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "FSkyAtmosphereSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereSceneProxy"
  },
  {
    "label": "FLightRenderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightRenderParameters"
  },
  {
    "label": "FDeferredDecalProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredDecalProxy"
  },
  {
    "label": "FDeferredDecalUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredDecalUpdateParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FReflectionCaptureProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureProxy"
  },
  {
    "label": "UReflectionCaptureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReflectionCaptureComponent"
  },
  {
    "label": "FWindData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindData"
  },
  {
    "label": "FWindSourceSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindSourceSceneProxy"
  },
  {
    "label": "FDynamicPrimitiveResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicPrimitiveResource"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FViewElementDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewElementDrawer"
  },
  {
    "label": "FStaticPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticPrimitiveDrawInterface"
  },
  {
    "label": "FSimpleElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementCollector"
  },
  {
    "label": "FAllocationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationInfo"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FOneFrameResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOneFrameResource"
  },
  {
    "label": "FMeshBatchAndRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchAndRelevance"
  },
  {
    "label": "FVisibilityTaskData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityTaskData"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FDeferredShadingSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredShadingSceneRenderer"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FCardPageRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardPageRenderData"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FShadowMeshCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMeshCollector"
  },
  {
    "label": "FDynamicMeshElementContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshElementContext"
  },
  {
    "label": "FRayTracingMaterialGatheringContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingMaterialGatheringContext"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FRayTracingDynamicGeometryUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingDynamicGeometryUpdateParams"
  },
  {
    "label": "FDynamicRayTracingInstancesContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRayTracingInstancesContext"
  },
  {
    "label": "FRayTracingInstanceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingInstanceCollector"
  },
  {
    "label": "FRayTracingInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingInstance"
  },
  {
    "label": "FDynamicPrimitiveUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicPrimitiveUniformBuffer"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FLODMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODMask"
  },
  {
    "label": "FStaticMeshBatchRelevance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatchRelevance"
  },
  {
    "label": "FSharedSamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedSamplerState"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / ChunkedArray . h \" # include \" Stats / Stats . h \" # include \" Misc / Guid . h \" # include \" Misc / MemStack . h \" # include \" Misc / IQueuedWork . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" EngineDefines . h \" # include \" HitProxies . h \" # include \" SceneTypes . h \" # include \" ConvexVolume . h \" # include \" PrimitiveUniformShaderParameters . h \" # include \" RendererInterface . h \" # include \" BatchedElements . h \" # include \" MeshBatch . h \" # include \" SceneUtils . h \" # include \" LightmapUniformShaderParameters . h \" # include \" DynamicBufferAllocator . h \" # include \" Rendering / SkyAtmosphereCommonData . h \" # include \" Math / SHMath . h \" # include \" GlobalRenderResources . h \" class FCanvas ; class FGlobalDynamicIndexBuffer ; class FGlobalDynamicReadBuffer ; class FGlobalDynamicVertexBuffer ; class FLightMap ; class FLightmapResourceCluster ; class FLightSceneInfo ; class FLightSceneProxy ; class FPrimitiveSceneInfo ; class FPrimitiveSceneProxy ; class FScene ; class FSceneViewState ; class FShadowMap ; class FStaticLightingBuildContext ; class FStaticMeshRenderData ; class FTexture ; class UDecalComponent ; class ULightComponent ; class ULightMapTexture2D ; class UMaterialInstanceDynamic ; class UMaterialInterface ; class UShadowMapTexture2D ; class USkyAtmosphereComponent ; class FSkyAtmosphereRenderSceneInfo ; class USkyLightComponent ; class UTexture2D ; class UTexture ; class UTextureLightProfile ; struct FDynamicMeshVertex ; class ULightMapVirtualTexture2D ; class FGPUScenePrimitiveCollector ; class FVirtualShadowMapArrayCacheManager ; class FRayTracingGeometry ; struct FViewMatrices ; struct FEngineShowFlags ; class FViewport ; class FLandscapeRayTracingStateList ; struct FPrimitiveUniformShaderParametersBuilder ; namespace RayTracing { using GeometryGroupHandle = int32 ; } namespace UE { namespace Color { class FColorSpace ; } })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBufferVisualization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNaniteVisualization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLumenVisualization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVirtualShadowMapVisualization, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogMultiView, Log, All)"
  },
  {
    "label": "FTemporalLODState()",
    "kind": "Method",
    "detail": "Function (struct FTemporalLODState { FVector TemporalLODViewOrigin [ 2 ] ; float TemporalLODTime [ 2 ] ; float TemporalLODLag ;)",
    "insertText": "FTemporalLODState() : TemporalLODLag(0.0f)"
  },
  {
    "label": "GetTemporalLODTransition()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTemporalLODTransition(float LastRenderTime)"
  },
  {
    "label": "UpdateTemporalLODTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTemporalLODTransition(const FSceneView& View, float LastRenderTime)"
  },
  {
    "label": "FSceneViewStateInterface()",
    "kind": "Method",
    "detail": "Function (} ; enum ESequencerState { ESS_None,ESS_Paused,ESS_Playing,} ; class FSceneViewStateInterface { public :)",
    "insertText": "FSceneViewStateInterface() : bValidEyeAdaptationTexture(0) , bValidEyeAdaptationBuffer(0)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetConcreteViewState()",
    "kind": "Method",
    "detail": "Function (public : FSceneViewState*)",
    "insertText": "GetConcreteViewState()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetSizeBytes()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetSizeBytes()"
  },
  {
    "label": "GetReusableMID()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceDynamic*)",
    "insertText": "GetReusableMID(class UMaterialInterface* InSource)"
  },
  {
    "label": "ClearMIDPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMIDPool(FStringView MidParentRootPath = {})"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual const FViewMatrices* GetFrozenViewMatrices()"
  },
  {
    "label": "ActivateFrozenViewMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateFrozenViewMatrices(FSceneView& SceneView)"
  },
  {
    "label": "RestoreUnfrozenViewMatrices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreUnfrozenViewMatrices(FSceneView& SceneView)"
  },
  {
    "label": "ResetViewState()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ResetViewState()"
  },
  {
    "label": "GetTemporalLODState()",
    "kind": "Method",
    "detail": "Function (FTemporalLODState&)",
    "insertText": "GetTemporalLODState()"
  },
  {
    "label": "GetTemporalLODTransition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTemporalLODTransition()"
  },
  {
    "label": "GetViewKey()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetViewKey()"
  },
  {
    "label": "GetVolumetricCloudTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetVolumetricCloudTexture(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetCurrentTemporalAASampleIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentTemporalAASampleIndex()"
  },
  {
    "label": "GetDistanceFieldTemporalSampleIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDistanceFieldTemporalSampleIndex()"
  },
  {
    "label": "HasValidEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return bValidEyeAdaptationTexture ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "HasValidEyeAdaptationBuffer()"
  },
  {
    "label": "GetCurrentEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGPooledBuffer*)",
    "insertText": "GetCurrentEyeAdaptationBuffer()"
  },
  {
    "label": "GetLastEyeAdaptationExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastEyeAdaptationExposure()"
  },
  {
    "label": "SetSequencerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequencerState(ESequencerState InSequencerState)"
  },
  {
    "label": "GetSequencerState()",
    "kind": "Method",
    "detail": "Function (ESequencerState)",
    "insertText": "GetSequencerState()"
  },
  {
    "label": "GetPreExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPreExposure()"
  },
  {
    "label": "GetOcclusionFrameCounter()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOcclusionFrameCounter()"
  },
  {
    "label": "GetPathTracingSampleIndex()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING uint32)",
    "insertText": "GetPathTracingSampleIndex()"
  },
  {
    "label": "GetPathTracingSampleCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPathTracingSampleCount()"
  },
  {
    "label": "SetLandscapeRayTracingStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLandscapeRayTracingStates(TPimplPtr<FLandscapeRayTracingStateList>&& InLandscapeRayTracingStates)"
  },
  {
    "label": "GetLandscapeRayTracingStates()",
    "kind": "Method",
    "detail": "Function (FLandscapeRayTracingStateList*)",
    "insertText": "GetLandscapeRayTracingStates()"
  },
  {
    "label": "AddLumenSceneData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddLumenSceneData(FSceneInterface* InScene, float SurfaceCacheResolution = 1.0f)"
  },
  {
    "label": "RemoveLumenSceneData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveLumenSceneData(FSceneInterface* InScene)"
  },
  {
    "label": "HasLumenSceneData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLumenSceneData()"
  },
  {
    "label": "FFrozenSceneViewMatricesGuard()",
    "kind": "Method",
    "detail": "Function (uint8 bValidEyeAdaptationBuffer : 1 ; private : class FScene ; } ; class FFrozenSceneViewMatricesGuard { public :)",
    "insertText": "FFrozenSceneViewMatricesGuard(FSceneView& SV)"
  },
  {
    "label": "FFrozenSceneViewMatricesGuard()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFrozenSceneViewMatricesGuard()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (private : FSceneView& SceneView ; } ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FWorkingColorSpaceShaderParameters, ENGINE_API) SHADER_PARAMETER(FMatrix44f, ToXYZ) SHADER_PARAMETER(FMatrix44f, FromXYZ) SHADER_PARAMETER(FMatrix44f, ToAP1) SHADER_PARAMETER(FMatrix44f, FromAP1) SHADER_PARAMETER(FMatrix44f, ToAP0) SHADER_PARAMETER(uint32, bIsSRGB) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (typedef TUniformBuffer<FWorkingColorSpaceShaderParameters> Super ; public : void)",
    "insertText": "Update(FRHICommandListBase& RHICmdList, const UE::Color::FColorSpace& InColorSpace)"
  },
  {
    "label": "Dynamic()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FDefaultWorkingColorSpaceUniformBuffer> GDefaultWorkingColorSpaceUniformBuffer ; enum ELightInteractionType { LIT_CachedIrrelevant,LIT_CachedLightMap,LIT_Dynamic,LIT_CachedSignedDistanceFieldShadowMap2D,LIT_MAX } ; class FLightInteraction { public : FLightInteraction)",
    "insertText": "Dynamic()"
  },
  {
    "label": "LightMap()",
    "kind": "Method",
    "detail": "Function (} FLightInteraction)",
    "insertText": "LightMap()"
  },
  {
    "label": "Irrelevant()",
    "kind": "Method",
    "detail": "Function (} FLightInteraction)",
    "insertText": "Irrelevant()"
  },
  {
    "label": "ShadowMap2D()",
    "kind": "Method",
    "detail": "Function (} FLightInteraction)",
    "insertText": "ShadowMap2D()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} ELightInteractionType)",
    "insertText": "GetType()"
  },
  {
    "label": "ALLOW_LQ_LIGHTMAPS()",
    "kind": "Method",
    "detail": "Function (} private : ELightInteractionType Type ; } ; const int32 NUM_STORED_LIGHTMAP_COEF = 4 ; const int32 NUM_HQ_LIGHTMAP_COEF = 2 ; const int32 NUM_LQ_LIGHTMAP_COEF = 2 ; const int32 LQ_LIGHTMAP_COEF_INDEX = 2 ; # ifndef ALLOW_LQ_LIGHTMAPS # define)",
    "insertText": "ALLOW_LQ_LIGHTMAPS(PLATFORM_DESKTOP || PLATFORM_IOS || PLATFORM_ANDROID)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (public : FLightMapInteraction)",
    "insertText": "None()"
  },
  {
    "label": "GlobalVolume()",
    "kind": "Method",
    "detail": "Function (FLightMapInteraction Result ; Result . Type = LMIT_None ; return Result ; } FLightMapInteraction)",
    "insertText": "GlobalVolume()"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (FLightMapInteraction Result ; Result . Type = LMIT_GlobalVolume ; return Result ; } FLightMapInteraction)",
    "insertText": "Texture(const class ULightMapTexture2D* const* InTextures, const ULightMapTexture2D* InSkyOcclusionTexture, const ULightMapTexture2D* InAOMaterialMaskTexture, const FVector4f* InCoefficientScales, const FVector4f* InCoefficientAdds, const FVector2D& InCoordinateScale, const FVector2D& InCoordinateBias, bool bAllowHighQualityLightMaps)"
  },
  {
    "label": "InitVirtualTexture()",
    "kind": "Method",
    "detail": "Function (FLightMapInteraction)",
    "insertText": "InitVirtualTexture(const ULightMapVirtualTexture2D* VirtualTexture, const FVector4f* InCoefficientScales, const FVector4f* InCoefficientAdds, const FVector2D& InCoordinateScale, const FVector2D& InCoordinateBias, bool bAllowHighQualityLightMaps)"
  },
  {
    "label": "FLightMapInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightMapInteraction(): #if ALLOW_HQ_LIGHTMAPS HighQualityTexture(NULL), SkyOcclusionTexture(NULL), AOMaterialMaskTexture(NULL), #endif #if ALLOW_LQ_LIGHTMAPS LowQualityTexture(NULL), #endif #if ALLOW_HQ_LIGHTMAPS || ALLOW_LQ_LIGHTMAPS VirtualTexture(NULL), #endif Type(LMIT_None)"
  },
  {
    "label": "GetSkyOcclusionTexture()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_LQ_LIGHTMAPS&& ALLOW_HQ_LIGHTMAPS return bHighQuality ? HighQualityTexture : LowQualityTexture ; # elif ALLOW_HQ_LIGHTMAPS return HighQualityTexture ; # else return LowQualityTexture ; # endif } const ULightMapTexture2D*)",
    "insertText": "GetSkyOcclusionTexture()"
  },
  {
    "label": "GetAOMaterialMaskTexture()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_HQ_LIGHTMAPS return SkyOcclusionTexture ; # else return NULL ; # endif } const ULightMapTexture2D*)",
    "insertText": "GetAOMaterialMaskTexture()"
  },
  {
    "label": "GetVirtualTexture()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_HQ_LIGHTMAPS return AOMaterialMaskTexture ; # else return NULL ; # endif } const ULightMapVirtualTexture2D*)",
    "insertText": "GetVirtualTexture()"
  },
  {
    "label": "GetScaleArray()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_HQ_LIGHTMAPS | | ALLOW_LQ_LIGHTMAPS return VirtualTexture ; # else return NULL ; # endif } const FVector4f*)",
    "insertText": "GetScaleArray()"
  },
  {
    "label": "AllowsHighQualityLightmaps()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_LQ_LIGHTMAPS&& ALLOW_HQ_LIGHTMAPS return)",
    "insertText": "AllowsHighQualityLightmaps()"
  },
  {
    "label": "GetAddArray()",
    "kind": "Method",
    "detail": "Function (# elif ALLOW_HQ_LIGHTMAPS return HighQualityCoefficientScales ; # else return LowQualityCoefficientScales ; # endif } const FVector4f*)",
    "insertText": "GetAddArray()"
  },
  {
    "label": "GetCoordinateScale()",
    "kind": "Method",
    "detail": "Function (# elif ALLOW_HQ_LIGHTMAPS return HighQualityCoefficientAdds ; # else return LowQualityCoefficientAdds ; # endif } const FVector2D&)",
    "insertText": "GetCoordinateScale()"
  },
  {
    "label": "PLATFORM_DESKTOP()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_LQ_LIGHTMAPS&& ALLOW_HQ_LIGHTMAPS # if)",
    "insertText": "PLATFORM_DESKTOP(!(UE_BUILD_SHIPPING || UE_BUILD_TEST) || WITH_EDITOR) if( !AllowsHighQualityLightmaps())"
  },
  {
    "label": "SetLightMapInteractionType()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_LQ_LIGHTMAPS&& ALLOW_HQ_LIGHTMAPS return bAllowHighQualityLightMaps ; # elif ALLOW_HQ_LIGHTMAPS return true ; # else return false ; # endif } void)",
    "insertText": "SetLightMapInteractionType(ELightMapInteractionType InType)"
  },
  {
    "label": "SetCoordinateScale()",
    "kind": "Method",
    "detail": "Function (Type = InType ; } void)",
    "insertText": "SetCoordinateScale(const FVector2D& InCoordinateScale)"
  },
  {
    "label": "SetCoordinateBias()",
    "kind": "Method",
    "detail": "Function (CoordinateScale = InCoordinateScale ; } void)",
    "insertText": "SetCoordinateBias(const FVector2D& InCoordinateBias)"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (FShadowMapInteraction Result ; Result . Type = SMIT_GlobalVolume ; return Result ; } FShadowMapInteraction)",
    "insertText": "Texture(class UShadowMapTexture2D* InTexture, const FVector2D& InCoordinateScale, const FVector2D& InCoordinateBias, const bool* InChannelValid, const FVector4f& InInvUniformPenumbraSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FShadowMapInteraction Result ; Result . Type = SMIT_Texture ; Result . ShadowTexture = InTexture ; Result . CoordinateScale = InCoordinateScale ; Result . CoordinateBias = InCoordinateBias ; Result . InvUniformPenumbraSize = InInvUniformPenumbraSize ;)",
    "insertText": "for(int Channel = 0; Channel < 4; Channel++)"
  },
  {
    "label": "InitVirtualTexture()",
    "kind": "Method",
    "detail": "Function (Result . bChannelValid [ Channel ] = InChannelValid [ Channel ] ; } return Result ; } FShadowMapInteraction)",
    "insertText": "InitVirtualTexture(class ULightMapVirtualTexture2D* InTexture, const FVector2D& InCoordinateScale, const FVector2D& InCoordinateBias, const bool* InChannelValid, const FVector4f& InInvUniformPenumbraSize)"
  },
  {
    "label": "FShadowMapInteraction()",
    "kind": "Method",
    "detail": "Function (Result . bChannelValid [ Channel ] = InChannelValid [ Channel ] ; } return Result ; })",
    "insertText": "FShadowMapInteraction() : ShadowTexture(nullptr), VirtualTexture(nullptr), InvUniformPenumbraSize(FVector4f(0, 0, 0, 0)), Type(SMIT_None)"
  },
  {
    "label": "FLightmapClusterResourceInput()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLightmapClusterResourceInput()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (LightMapTextures [ 0 ] = nullptr ; LightMapTextures [ 1 ] = nullptr ; SkyOcclusionTexture = nullptr ; AOMaterialMaskTexture = nullptr ; LightMapVirtualTextures [ 0 ] = nullptr ; LightMapVirtualTextures [ 1 ] = nullptr ; ShadowMapTexture = nullptr ; } const UTexture2D* LightMapTextures [ 2 ] ; const UTexture2D* SkyOcclusionTexture ; const UTexture2D* AOMaterialMaskTexture ; const ULightMapVirtualTexture2D* LightMapVirtualTextures [ 2 ] ; const UTexture2D* ShadowMapTexture ; uint32)",
    "insertText": "GetTypeHash(const FLightmapClusterResourceInput& Cluster)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLightmapClusterResourceInput& Rhs)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (class FDefaultLightmapResourceClusterUniformBuffer : public TUniformBuffer<FLightmapResourceClusterShaderParameters> { typedef TUniformBuffer<FLightmapResourceClusterShaderParameters> Super ; public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FLightCacheInterface()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FDefaultLightmapResourceClusterUniformBuffer> GDefaultLightmapResourceClusterUniformBuffer ; class FLightCacheInterface { public : ~)",
    "insertText": "FLightCacheInterface()"
  },
  {
    "label": "GetInteraction()",
    "kind": "Method",
    "detail": "Function (} FLightInteraction)",
    "insertText": "GetInteraction(const class FLightSceneProxy* LightSceneProxy)"
  },
  {
    "label": "GetStaticInteraction()",
    "kind": "Method",
    "detail": "Function (ELightInteractionType)",
    "insertText": "GetStaticInteraction(const FLightSceneProxy* LightSceneProxy, const TArray<FGuid>& IrrelevantLights)"
  },
  {
    "label": "CreatePrecomputedLightingUniformBuffer_RenderingThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePrecomputedLightingUniformBuffer_RenderingThread(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetVirtualTextureLightmapProducer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVirtualTextureLightmapProducer(ERHIFeatureLevel::Type FeatureLevel, FVirtualTextureProducerHandle& OutProducerHandle)"
  },
  {
    "label": "SetLightMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightMap(const FLightMap* InLightMap)"
  },
  {
    "label": "SetResourceCluster()",
    "kind": "Method",
    "detail": "Function (LightMap = InLightMap ; } void)",
    "insertText": "SetResourceCluster(const FLightmapResourceCluster* InResourceCluster)"
  },
  {
    "label": "GetLightMap()",
    "kind": "Method",
    "detail": "Function (ResourceCluster = InResourceCluster ; } const FLightMap*)",
    "insertText": "GetLightMap()"
  },
  {
    "label": "GetShadowMap()",
    "kind": "Method",
    "detail": "Function (ShadowMap = InShadowMap ; } const FShadowMap*)",
    "insertText": "GetShadowMap()"
  },
  {
    "label": "GetPrecomputedLightingBuffer()",
    "kind": "Method",
    "detail": "Function (bGlobalVolumeLightmap = bInGlobalVolumeLightmap ; } FRHIUniformBuffer*)",
    "insertText": "GetPrecomputedLightingBuffer()"
  },
  {
    "label": "GetLightMapInteraction()",
    "kind": "Method",
    "detail": "Function (PrecomputedLightingUniformBuffer = InPrecomputedLightingUniformBuffer ; } FLightMapInteraction)",
    "insertText": "GetLightMapInteraction(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetShadowMapInteraction()",
    "kind": "Method",
    "detail": "Function (FShadowMapInteraction)",
    "insertText": "GetShadowMapInteraction(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "FAsyncEncode()",
    "kind": "Method",
    "detail": "Function (public : bool bCanUsePrecomputedLightingParametersFromGPUScene = false ; private : bool bGlobalVolumeLightmap = false ; const FLightMap* LightMap = nullptr ; const FShadowMap* ShadowMap = nullptr ; const FLightmapResourceCluster* ResourceCluster = nullptr ; FUniformBufferRHIRef PrecomputedLightingUniformBuffer = nullptr ; } ; template<TPendingTextureType> class FAsyncEncode : public IQueuedWork { private : TPendingTextureType* PendingTexture ; FThreadSafeCounter& Counter ; const FStaticLightingBuildContext* LightingContext ; class ITextureCompressorModule* Compressor ; public :)",
    "insertText": "FAsyncEncode(TPendingTextureType* InPendingTexture, const FStaticLightingBuildContext* InLightingContext, FThreadSafeCounter& InCounter, ITextureCompressorModule* InCompressor) : PendingTexture(nullptr), Counter(InCounter), Compressor(InCompressor)"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (LightingContext = InLightingContext ; PendingTexture = InPendingTexture ; } void)",
    "insertText": "Abandon()"
  },
  {
    "label": "StartEncoding()",
    "kind": "Method",
    "detail": "Function (PendingTexture ->)",
    "insertText": "StartEncoding(LightingContext, Compressor)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (Counter .)",
    "insertText": "Decrement()"
  },
  {
    "label": "DoThreadedWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoThreadedWork()"
  },
  {
    "label": "FShadowCascadeSettings()",
    "kind": "Method",
    "detail": "Function (} } ; class FShadowCascadeSettings { public : float SplitNear ; float SplitFar ; float SplitNearFadeRegion ; float SplitFarFadeRegion ; float FadePlaneOffset ; float FadePlaneLength ; FConvexVolume ShadowBoundsAccurate ; FPlane NearFrustumPlane ; FPlane FarFrustumPlane ; bool bFarShadowCascade ; int32 ShadowSplitIndex ; float CascadeBiasDistribution ;)",
    "insertText": "FShadowCascadeSettings() : SplitNear(0.0f) , SplitFar(WORLD_MAX) , SplitNearFadeRegion(0.0f) , SplitFarFadeRegion(0.0f) , FadePlaneOffset(SplitFar) , FadePlaneLength(SplitFar - FadePlaneOffset) , bFarShadowCascade(false) , ShadowSplitIndex(INDEX_NONE) , CascadeBiasDistribution(1)"
  },
  {
    "label": "FProjectedShadowInitializer()",
    "kind": "Method",
    "detail": "Function (} } ; class FProjectedShadowInitializer { public : FVector PreShadowTranslation ; FMatrix WorldToLight ; FVector2D Scales ; FBoxSphereBounds SubjectBounds ; FVector4 WAxis ; float MinLightW ; float MaxDistanceToCastInLightW ;)",
    "insertText": "FProjectedShadowInitializer()"
  },
  {
    "label": "IsCachedShadowValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCachedShadowValid(const FProjectedShadowInitializer& CachedShadow)"
  },
  {
    "label": "IsCachedShadowValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCachedShadowValid(const FWholeSceneProjectedShadowInitializer& CachedShadow)"
  },
  {
    "label": "DoesPlatformSupportDistanceFields()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "DoesPlatformSupportDistanceFields(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "DoesPlatformSupportDistanceFieldShadowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportDistanceFieldShadowing(EShaderPlatform Platform)"
  },
  {
    "label": "DoesPlatformSupportDistanceFieldAO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportDistanceFieldAO(EShaderPlatform Platform)"
  },
  {
    "label": "DoesProjectSupportDistanceFields()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesProjectSupportDistanceFields()"
  },
  {
    "label": "ShouldAllPrimitivesHaveDistanceField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllPrimitivesHaveDistanceField(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ShouldCompileDistanceFieldShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileDistanceFieldShaders(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "PrimitiveNeedsDistanceFieldSceneData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrimitiveNeedsDistanceFieldSceneData(bool bTrackAllPrimitives, bool bCastsDynamicIndirectShadow, bool bAffectsDistanceFieldLighting, bool bIsDrawnInGame, bool bCastsHiddenShadow, bool bCastsDynamicShadow, bool bAffectsDynamicIndirectLighting, bool bAffectIndirectLightingWhileHidden)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FMobileReflectionCaptureShaderParameters,ENGINE_API) SHADER_PARAMETER(FVector4f, Params) SHADER_PARAMETER_TEXTURE(TextureCube, Texture) SHADER_PARAMETER_SAMPLER(SamplerState, TextureSampler) SHADER_PARAMETER_TEXTURE(TextureCube, TextureBlend) SHADER_PARAMETER_SAMPLER(SamplerState, TextureBlendSampler) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "FSkyLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FDefaultMobileReflectionCaptureUniformBuffer> GDefaultMobileReflectionCaptureUniformBuffer ; class FSkyLightSceneProxy { public :)",
    "insertText": "FSkyLightSceneProxy(const class USkyLightComponent* InLightComponent)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(float InBlendFraction, const FSHVectorRGB3* InIrradianceEnvironmentMap, const FSHVectorRGB3* BlendDestinationIrradianceEnvironmentMap, const float* InAverageBrightness, const float* BlendDestinationAverageBrightness, const FLinearColor* InSpecifiedCubemapColorScale)"
  },
  {
    "label": "IsMovable()",
    "kind": "Method",
    "detail": "Function (const USkyLightComponent* LightComponent ; FTexture* ProcessedTexture ; float BlendFraction ; float SkyDistanceThreshold ; FTexture* BlendDestinationProcessedTexture ; uint8 bCastShadows : 1 ; uint8 bWantsStaticShadowing : 1 ; uint8 bHasStaticLighting : 1 ; uint8 bCastVolumetricShadow : 1 ; TEnumAsByte<ECastRayTracedShadow::Type> CastRayTracedShadow ; uint8 bAffectReflection : 1 ; uint8 bAffectGlobalIllumination : 1 ; uint8 bTransmission : 1 ; TEnumAsByte<EOcclusionCombineMode> OcclusionCombineMode ; float AverageBrightness ; float IndirectLightingIntensity ; float VolumetricScatteringIntensity ; FSHVectorRGB3 IrradianceEnvironmentMap ; float OcclusionMaxDistance ; float Contrast ; float OcclusionExponent ; float MinOcclusion ; FLinearColor OcclusionTint ; bool bCloudAmbientOcclusion ; float CloudAmbientOcclusionExtent ; float CloudAmbientOcclusionStrength ; float CloudAmbientOcclusionMapResolutionScale ; float CloudAmbientOcclusionApertureScale ; int32 SamplesPerPixel ; bool bRealTimeCaptureEnabled ; FVector CapturePosition ; uint32 CaptureCubeMapResolution ; FLinearColor LowerHemisphereColor ; bool bLowerHemisphereIsSolidColor ; FLinearColor SpecifiedCubemapColorScale ; bool)",
    "insertText": "IsMovable()"
  },
  {
    "label": "GetEffectiveLightColor()",
    "kind": "Method",
    "detail": "Function (LightColor = InColor ; } FLinearColor)",
    "insertText": "GetEffectiveLightColor()"
  },
  {
    "label": "FSkyAtmosphereSceneProxy()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR float SecondsToNextIncompleteCapture ; bool bCubemapSkyLightWaitingForCubeMapTexture ; bool bCaptureSkyLightWaitingForShaders ; bool bCaptureSkyLightWaitingForMeshesOrTextures ; # endif private : FLinearColor LightColor ; const uint8 bMovable : 1 ; } ; class FSkyAtmosphereSceneProxy { public :)",
    "insertText": "FSkyAtmosphereSceneProxy(const USkyAtmosphereComponent* InComponent)"
  },
  {
    "label": "FSkyAtmosphereSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkyAtmosphereSceneProxy()"
  },
  {
    "label": "GetSkyLuminanceFactor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetSkyLuminanceFactor()"
  },
  {
    "label": "UpdateTransform()",
    "kind": "Method",
    "detail": "Function (AtmosphereSetup .)",
    "insertText": "UpdateTransform(ComponentTransform, TranformMode)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyWorldOffset(const FVector3f& InOffset)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (AtmosphereSetup .)",
    "insertText": "ApplyWorldOffset((FVector)InOffset)"
  },
  {
    "label": "GetAtmosphereLightDirection()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetAtmosphereLightDirection(int32 AtmosphereLightIndex, const FVector& DefaultDirection)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (bool bStaticLightingBuilt ; FSkyAtmosphereRenderSceneInfo* RenderSceneInfo ; private : FAtmosphereSetup AtmosphereSetup ; FLinearColor SkyLuminanceFactor ; float AerialPespectiveViewDistanceScale ; float HeightFogContribution ; float AerialPerspectiveStartDepthKm ; float TraceSampleCountScale ; bool bHoldout ; bool bRenderInMainPass ; bool OverrideAtmosphericLight [ NUM_ATMOSPHERE_LIGHTS ] ; FVector OverrideAtmosphericLightDirection [ NUM_ATMOSPHERE_LIGHTS ] ; } ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FLightShaderParameters, ENGINE_API) SHADER_PARAMETER(FVector3f, TranslatedWorldPosition) SHADER_PARAMETER(float, InvRadius) SHADER_PARAMETER(FVector3f, Color) SHADER_PARAMETER(float, FalloffExponent) SHADER_PARAMETER(FVector3f, Direction) SHADER_PARAMETER(float, SpecularScale) SHADER_PARAMETER(float, DiffuseScale) SHADER_PARAMETER(FVector3f, Tangent) SHADER_PARAMETER(float, SourceRadius) SHADER_PARAMETER(FVector2f, SpotAngles) SHADER_PARAMETER(float, SoftSourceRadius) SHADER_PARAMETER(float, SourceLength) SHADER_PARAMETER(float, RectLightBarnCosAngle) SHADER_PARAMETER(float, RectLightBarnLength) SHADER_PARAMETER(FVector2f, RectLightAtlasUVOffset) SHADER_PARAMETER(FVector2f, RectLightAtlasUVScale) SHADER_PARAMETER(float, RectLightAtlasMaxLevel) SHADER_PARAMETER(float, IESAtlasIndex) SHADER_PARAMETER(uint32, LightFunctionAtlasLightIndex) SHADER_PARAMETER(uint32, bAffectsTranslucentLighting) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FMobileMovableLocalLightShadowParameters,ENGINE_API) SHADER_PARAMETER(FVector4f, SpotLightShadowSharpenAndFadeFractionAndReceiverDepthBiasAndSoftTransitionScale) SHADER_PARAMETER(FVector4f, SpotLightShadowmapMinMax) SHADER_PARAMETER(FMatrix44f, SpotLightShadowWorldToShadowMatrix) SHADER_PARAMETER(FVector4f, LocalLightShadowBufferSize) SHADER_PARAMETER_TEXTURE(Texture2D, LocalLightShadowTexture) SHADER_PARAMETER_SAMPLER(SamplerState, LocalLightShadowSampler) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "MakeShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeShaderParameters(const FViewMatrices& ViewMatrices, float Exposure, FLightShaderParameters& OutShaderParameters)"
  },
  {
    "label": "GetLightExposureScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLightExposureScale(float Exposure)"
  },
  {
    "label": "GetLightExposureScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLightExposureScale(float Exposure, float InverseExposureBlend)"
  },
  {
    "label": "GetRectLightAtlasInvalidMIPLevel()",
    "kind": "Method",
    "detail": "Function (FVector WorldPosition ; float InvRadius ; FLinearColor Color ; float FalloffExponent ; FVector3f Direction ; float SpecularScale ; float DiffuseScale ; FVector3f Tangent ; float SourceRadius ; FVector2f SpotAngles ; float SoftSourceRadius ; float SourceLength ; float RectLightBarnCosAngle ; float RectLightBarnLength ; FVector2f RectLightAtlasUVOffset ; FVector2f RectLightAtlasUVScale ; float RectLightAtlasMaxLevel ; float IESAtlasIndex ; uint32 LightFunctionAtlasLightIndex ; uint32 bAffectsTranslucentLighting ; float InverseExposureBlend ; float)",
    "insertText": "GetRectLightAtlasInvalidMIPLevel()"
  },
  {
    "label": "FDeferredDecalProxy()",
    "kind": "Method",
    "detail": "Function (class FDeferredDecalProxy { public :)",
    "insertText": "FDeferredDecalProxy(const UDecalComponent* InComponent)"
  },
  {
    "label": "FDeferredDecalProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDeferredDecalProxy(const USceneComponent* InComponent, UMaterialInterface* InMaterial)"
  },
  {
    "label": "SetTransformIncludingDecalSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformIncludingDecalSize(const FTransform& InComponentToWorldIncludingDecalSize, const FBoxSphereBounds& InBounds)"
  },
  {
    "label": "InitializeFadingParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFadingParameters(float AbsSpawnTime, float FadeDuration, float FadeStartDelay, float FadeInDuration, float FadeInStartDelay)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShown(const FSceneView* View)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (const FBoxSphereBounds&)",
    "insertText": "GetBounds()"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FMatrix& InTransform)"
  },
  {
    "label": "UpdateMobileUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMobileUniformBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "FWindData()",
    "kind": "Method",
    "detail": "Function (} ; class FWindData { public :)",
    "insertText": "FWindData() : Speed(0.0f) , MinGustAmt(0.0f) , MaxGustAmt(0.0f) , Direction(1.0f, 0.0f, 0.0f)"
  },
  {
    "label": "PrepareForAccumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareForAccumulate()"
  },
  {
    "label": "AddWeighted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWeighted(const FWindData& InWindData, float Weight)"
  },
  {
    "label": "NormalizeByTotalWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeByTotalWeight(float TotalWeight)"
  },
  {
    "label": "FWindSourceSceneProxy()",
    "kind": "Method",
    "detail": "Function (float Speed ; float MinGustAmt ; float MaxGustAmt ; FVector Direction ; } ; class FWindSourceSceneProxy { public :)",
    "insertText": "FWindSourceSceneProxy(const FVector& InDirection, float InStrength, float InSpeed, float InMinGustAmt, float InMaxGustAmt) : Position(FVector::ZeroVector), Direction(InDirection), Strength(InStrength), Speed(InSpeed), MinGustAmt(InMinGustAmt), MaxGustAmt(InMaxGustAmt), Radius(0), bIsPointSource(false)"
  },
  {
    "label": "FWindSourceSceneProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWindSourceSceneProxy(const FVector& InPosition, float InStrength, float InSpeed, float InMinGustAmt, float InMaxGustAmt, float InRadius) : Position(InPosition), Direction(FVector::ZeroVector), Strength(InStrength), Speed(InSpeed), MinGustAmt(InMinGustAmt), MaxGustAmt(InMaxGustAmt), Radius(InRadius), bIsPointSource(true)"
  },
  {
    "label": "GetWindParameters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetWindParameters(const FVector& EvaluatePosition, FWindData& WindData, float& Weight)"
  },
  {
    "label": "GetDirectionalWindParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDirectionalWindParameters(FWindData& WindData, float& Weight)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(FVector InOffset)"
  },
  {
    "label": "InitPrimitiveResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPrimitiveResource(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleasePrimitiveResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePrimitiveResource()"
  },
  {
    "label": "FPrimitiveDrawInterface()",
    "kind": "Method",
    "detail": "Function (} ; class FPrimitiveDrawInterface { public : const FSceneView* View ;)",
    "insertText": "FPrimitiveDrawInterface(const FSceneView* InView): View(InView)"
  },
  {
    "label": "FPrimitiveDrawInterface()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPrimitiveDrawInterface()"
  },
  {
    "label": "IsHitTesting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHitTesting()"
  },
  {
    "label": "SetHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHitProxy(HHitProxy* HitProxy)"
  },
  {
    "label": "RegisterDynamicResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDynamicResource(FDynamicPrimitiveResource* DynamicResource)"
  },
  {
    "label": "AddReserveLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReserveLines(uint8 DepthPriorityGroup, int32 NumLines, bool bDepthBiased = false, bool bThickLines = false)"
  },
  {
    "label": "DrawSprite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSprite(const FVector& Position, float SizeX, float SizeY, const FTexture* Sprite, const FLinearColor& Color, uint8 DepthPriorityGroup, float U, float UL, float V, float VL, uint8 BlendMode = 1, float OpacityMaskRefVal = .5f)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLine(const FVector& Start, const FVector& End, const FLinearColor& Color, uint8 DepthPriorityGroup, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawTranslucentLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTranslucentLine(const FVector& Start, const FVector& End, const FLinearColor& Color, uint8 DepthPriorityGroup, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPoint(const FVector& Position, const FLinearColor& Color, float PointSize, uint8 DepthPriorityGroup)"
  },
  {
    "label": "DrawMesh()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DrawMesh(const FMeshBatch& Mesh)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (} ; class FViewElementDrawer { public : void)",
    "insertText": "Draw(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "FStaticPrimitiveDrawInterface()",
    "kind": "Method",
    "detail": "Function (} } ; class FStaticPrimitiveDrawInterface { public : ~)",
    "insertText": "FStaticPrimitiveDrawInterface()"
  },
  {
    "label": "ReserveMemoryForMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveMemoryForMeshes(int32 MeshNum)"
  },
  {
    "label": "DrawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMesh(const FMeshBatch& Mesh, float ScreenSize)"
  },
  {
    "label": "FSimpleElementCollector()",
    "kind": "Method",
    "detail": "Function (} ; class FSimpleElementCollector : public FPrimitiveDrawInterface { public :)",
    "insertText": "FSimpleElementCollector()"
  },
  {
    "label": "DrawSprite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawSprite(const FVector& Position, float SizeX, float SizeY, const FTexture* Sprite, const FLinearColor& Color, uint8 DepthPriorityGroup, float U, float UL, float V, float VL, uint8 BlendMode = SE_BLEND_Masked, float OpacityMaskRevVal = .5f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bTriggered = false ;)",
    "insertText": "if(!bTriggered)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (bTriggered = true ;)",
    "insertText": "ensureMsgf(false, TEXT(\"FSimpleElementCollector::DrawMesh called\"))"
  },
  {
    "label": "DrawBatchedElements()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "DrawBatchedElements(FRHICommandList& RHICmdList, const FMeshPassProcessorRenderState& DrawRenderState, const FSceneView& InView, EBlendModeFilter::Type Filter, ESceneDepthPriorityGroup DPG)"
  },
  {
    "label": "FAllocationInfo()",
    "kind": "Method",
    "detail": "Function (class FAllocationInfo { public :)",
    "insertText": "FAllocationInfo()"
  },
  {
    "label": "AddAllocationInfo()",
    "kind": "Method",
    "detail": "Function (private : FBatchedElements::FAllocationInfo BatchedElements ; FBatchedElements::FAllocationInfo TopBatchedElements ; uint32 NumDynamicResources = 0 ; FSimpleElementCollector ; } ; void)",
    "insertText": "AddAllocationInfo(FAllocationInfo& AllocationInfo)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(const FAllocationInfo& AllocationInfo)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FSimpleElementCollector& Other)"
  },
  {
    "label": "HasAnyPrimitives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyPrimitives()"
  },
  {
    "label": "HasPrimitives()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPrimitives(ESceneDepthPriorityGroup DPG)"
  },
  {
    "label": "HasPrimsToDraw()",
    "kind": "Method",
    "detail": "Function (} return TopBatchedElements .)",
    "insertText": "HasPrimsToDraw()"
  },
  {
    "label": "FOneFrameResource()",
    "kind": "Method",
    "detail": "Function (} FBatchedElements BatchedElements ; FBatchedElements TopBatchedElements ; private : FHitProxyId HitProxyId ; TArray<FDynamicPrimitiveResource*,SceneRenderingAllocator> DynamicResources ; class FMeshElementCollector ; } ; class FOneFrameResource { public : ~)",
    "insertText": "FOneFrameResource()"
  },
  {
    "label": "FMeshBatchAndRelevance()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMeshBatchAndRelevance { const FMeshBatch* Mesh ; const FPrimitiveSceneProxy* PrimitiveSceneProxy ; private : uint32 bHasOpaqueMaterial : 1 ; uint32 bHasMaskedMaterial : 1 ; uint32 bRenderInMainPass : 1 ; public :)",
    "insertText": "FMeshBatchAndRelevance(const FMeshBatch& InMesh, const FPrimitiveSceneProxy* InPrimitiveSceneProxy, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetHasOpaqueMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasOpaqueMaterial()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 Index = MeshBatchStorage .)",
    "insertText": "Add(1)"
  },
  {
    "label": "GetMeshElementCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMeshElementCount(uint32 ViewIndex)"
  },
  {
    "label": "RegisterOneFrameMaterialProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOneFrameMaterialProxy(FMaterialRenderProxy* Proxy)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MaterialProxiesToDelete .)",
    "insertText": "Add(Proxy)"
  },
  {
    "label": "CacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheUniformExpressions(FMaterialRenderProxy* Proxy, bool bRecreateUniformBuffer)"
  },
  {
    "label": "AllocateOneFrameResource()",
    "kind": "Method",
    "detail": "Function (template<T,. . . ARGS> T&)",
    "insertText": "AllocateOneFrameResource(ARGS&&... Args)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "FMeshElementCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshElementCollector(ERHIFeatureLevel::Type InFeatureLevel, FSceneRenderingBulkObjectAllocator& InBulkAllocator, ECommitFlags CommitFlags = ECommitFlags::None)"
  },
  {
    "label": "FMeshElementCollector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMeshElementCollector()"
  },
  {
    "label": "SetPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitive(const FPrimitiveSceneProxy* InPrimitiveSceneProxy, FHitProxyId DefaultHitProxyId)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(FRHICommandList& RHICmdList, FGlobalDynamicVertexBuffer& DynamicVertexBuffer, FGlobalDynamicIndexBuffer& DynamicIndexBuffer, FGlobalDynamicReadBuffer& DynamicReadBuffer)"
  },
  {
    "label": "AddViewMeshArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewMeshArrays(const FSceneView* InView, TArray<FMeshBatchAndRelevance, SceneRenderingAllocator>* ViewMeshes, FSimpleElementCollector* ViewSimpleElementCollector, FGPUScenePrimitiveCollector* DynamicPrimitiveCollector #if UE_ENABLE_DEBUG_DRAWING , FSimpleElementCollector* DebugSimpleElementCollector = nullptr #endif)"
  },
  {
    "label": "ClearViewMeshArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearViewMeshArrays()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (TChunkedArray<FMeshBatch,1 6 3 8 4,FConcurrentLinearArrayAllocator> MeshBatchStorage ; TArray<TArray<FMeshBatchAndRelevance,SceneRenderingAllocator>*,TInlineAllocator<2,SceneRenderingAllocator>> MeshBatches ; TArray<int32,TInlineAllocator<2,SceneRenderingAllocator>> NumMeshBatchElementsPerView ; TArray<FSimpleElementCollector*,TInlineAllocator<2,SceneRenderingAllocator>> SimpleElementCollectors ; # if UE_ENABLE_DEBUG_DRAWING TArray<FSimpleElementCollector*,TInlineAllocator<2,SceneRenderingAllocator>> DebugSimpleElementCollectors ; # endif TArray<const FSceneView*,TInlineAllocator<2,SceneRenderingAllocator>> Views ; TArray<uint16,TInlineAllocator<2,SceneRenderingAllocator>> MeshIdInPrimitivePerView ; TArray<FMaterialRenderProxy*,SceneRenderingAllocator> MaterialProxiesToDelete ; TArray<TPair<FMaterialRenderProxy*,bool>,SceneRenderingAllocator> MaterialProxiesToInvalidate ; TArray<const FMaterialRenderProxy*,SceneRenderingAllocator> MaterialProxiesToUpdate ; TArray<TPair<FGPUScenePrimitiveCollector*,FMeshBatch*>,SceneRenderingAllocator> MeshBatchesForGPUScene ; FSceneRenderingBulkObjectAllocator& OneFrameResources ; const FPrimitiveSceneProxy* PrimitiveSceneProxy ; FGlobalDynamicIndexBuffer* DynamicIndexBuffer = nullptr ; FGlobalDynamicVertexBuffer* DynamicVertexBuffer = nullptr ; FGlobalDynamicReadBuffer* DynamicReadBuffer = nullptr ; FRHICommandList* RHICmdList = nullptr ; const ERHIFeatureLevel::Type FeatureLevel ; const ECommitFlags CommitFlags ; const bool bUseGPUScene ; TArray<FGPUScenePrimitiveCollector*,TInlineAllocator<2,SceneRenderingAllocator>> DynamicPrimitiveCollectorPerView ; class FVisibilityTaskData ; class FSceneRenderer ; class FDeferredShadingSceneRenderer ; class FProjectedShadowInfo ; class FCardPageRenderData ; class FViewFamilyInfo ; class FShadowMeshCollector ; class FDynamicMeshElementContext ; struct FRayTracingMaterialGatheringContext ; FSceneRenderingBulkObjectAllocator ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FMeshElementCollector::ECommitFlags)"
  },
  {
    "label": "AllocateMesh()",
    "kind": "Method",
    "detail": "Function (public : FMeshBatch&)",
    "insertText": "AllocateMesh()"
  },
  {
    "label": "FRayTracingMeshResourceCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingMeshResourceCollector(ERHIFeatureLevel::Type InFeatureLevel, FSceneRenderingBulkObjectAllocator& InBulkAllocator) : FMeshElementCollector(InFeatureLevel, InBulkAllocator)"
  },
  {
    "label": "FRayTracingMaterialGatheringContext()",
    "kind": "Method",
    "detail": "Function (const class FScene* Scene ; const FSceneView* ReferenceView ; const FSceneViewFamily& ReferenceViewFamily ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FRDGBuilder& GraphBuilder ; FRHICommandList& RHICmdList ; FRayTracingMeshResourceCollector& RayTracingMeshResourceCollector ; TArray<FRayTracingDynamicGeometryUpdateParams> DynamicRayTracingGeometriesToUpdate ; FGlobalDynamicVertexBuffer DynamicVertexBuffer ; FGlobalDynamicIndexBuffer DynamicIndexBuffer ; FGlobalDynamicReadBuffer& DynamicReadBuffer ;)",
    "insertText": "FRayTracingMaterialGatheringContext(const FScene* InScene, const FSceneView* InReferenceView, const FSceneViewFamily& InReferenceViewFamily, FRDGBuilder& InGraphBuilder, FRayTracingMeshResourceCollector& InRayTracingMeshResourceCollector, FGPUScenePrimitiveCollector& InDynamicPrimitiveCollector, FGlobalDynamicReadBuffer& InGlobalDynamicReadBuffer)"
  },
  {
    "label": "FRayTracingMaterialGatheringContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRayTracingMaterialGatheringContext()"
  },
  {
    "label": "SetPrimitive()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "SetPrimitive(const FPrimitiveSceneProxy* InPrimitiveSceneProxy)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddReferencedGeometryGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedGeometryGroup(RayTracing::GeometryGroupHandle GeometryGroup)"
  },
  {
    "label": "GetReferencedGeometryGroups()",
    "kind": "Method",
    "detail": "Function (const TSet<RayTracing::GeometryGroupHandle>&)",
    "insertText": "GetReferencedGeometryGroups()"
  },
  {
    "label": "GetReferenceView()",
    "kind": "Method",
    "detail": "Function (const FSceneView*)",
    "insertText": "GetReferenceView()"
  },
  {
    "label": "AddRayTracingGeometryUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRayTracingGeometryUpdate(FRayTracingDynamicGeometryUpdateParams Params)"
  },
  {
    "label": "FRayTracingInstanceCollector()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRayTracingInstanceCollector(ERHIFeatureLevel::Type InFeatureLevel, FSceneRenderingBulkObjectAllocator& InBulkAllocator, const FSceneView* InReferenceView, bool bInTrackReferencedGeometryGroups)"
  },
  {
    "label": "FDynamicPrimitiveUniformBuffer()",
    "kind": "Method",
    "detail": "Function (const FSceneView* ReferenceView ; TArray<FRayTracingInstance> RayTracingInstances ; TArray<FRayTracingDynamicGeometryUpdateParams> RayTracingGeometriesToUpdate ; TSet<RayTracing::GeometryGroupHandle> ReferencedGeometryGroups ; const bool bTrackReferencedGeometryGroups ; RayTracing::FDynamicRayTracingInstancesContext ; } ; # endif class FDynamicPrimitiveUniformBuffer : public FOneFrameResource { public :)",
    "insertText": "FDynamicPrimitiveUniformBuffer()"
  },
  {
    "label": "FDynamicPrimitiveUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDynamicPrimitiveUniformBuffer(const FDynamicPrimitiveUniformBuffer&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (TUniformBuffer<FPrimitiveUniformShaderParameters> UniformBuffer ; void)",
    "insertText": "Set(FRHICommandListBase& RHICmdList, FPrimitiveUniformShaderParametersBuilder& Builder)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FRHICommandListBase& RHICmdList, const FMatrix& LocalToWorld, const FMatrix& PreviousLocalToWorld, const FVector& ActorPositionWS, const FBoxSphereBounds& WorldBounds, const FBoxSphereBounds& LocalBounds, const FBoxSphereBounds& PreSkinnedLocalBounds, bool bReceivesDecals, bool bHasPrecomputedVolumetricLightmap, bool bOutputVelocity, const FCustomPrimitiveData* CustomPrimitiveData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FRHICommandListBase& RHICmdList, const FMatrix& LocalToWorld, const FMatrix& PreviousLocalToWorld, const FBoxSphereBounds& WorldBounds, const FBoxSphereBounds& LocalBounds, const FBoxSphereBounds& PreSkinnedLocalBounds, bool bReceivesDecals, bool bHasPrecomputedVolumetricLightmap, bool bOutputVelocity, const FCustomPrimitiveData* CustomPrimitiveData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FRHICommandListBase& RHICmdList, const FMatrix& LocalToWorld, const FMatrix& PreviousLocalToWorld, const FBoxSphereBounds& WorldBounds, const FBoxSphereBounds& LocalBounds, const FBoxSphereBounds& PreSkinnedLocalBounds, bool bReceivesDecals, bool bHasPrecomputedVolumetricLightmap, bool bOutputVelocity)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FRHICommandListBase& RHICmdList, const FMatrix& LocalToWorld, const FMatrix& PreviousLocalToWorld, const FBoxSphereBounds& WorldBounds, const FBoxSphereBounds& LocalBounds, bool bReceivesDecals, bool bHasPrecomputedVolumetricLightmap, bool bOutputVelocity)"
  },
  {
    "label": "DrawPlane10x10()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawPlane10x10(class FPrimitiveDrawInterface* PDI,const FMatrix& ObjectToWorld,float Radii,FVector2D UVMin, FVector2D UVMax,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority)"
  },
  {
    "label": "DrawTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTriangle(class FPrimitiveDrawInterface* PDI, const FVector& A, const FVector& B, const FVector& C, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBox(class FPrimitiveDrawInterface* PDI,const FMatrix& BoxToWorld,const FVector& Radii,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority)"
  },
  {
    "label": "DrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSphere(class FPrimitiveDrawInterface* PDI,const FVector& Center,const FRotator& Orientation,const FVector& Radii,int32 NumSides,int32 NumRings,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority,bool bDisableBackfaceCulling=false)"
  },
  {
    "label": "DrawCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCone(class FPrimitiveDrawInterface* PDI,const FMatrix& ConeToWorld, float Angle1, float Angle2, uint32 NumSides, bool bDrawSideLines, const FLinearColor& SideLineColor, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(class FPrimitiveDrawInterface* PDI,const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, double Radius, double HalfHeight, uint32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(class FPrimitiveDrawInterface* PDI, const FMatrix& CylToWorld, const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, double Radius, double HalfHeight, uint32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(class FPrimitiveDrawInterface* PDI, const FVector& Start, const FVector& End, double Radius, int32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority)"
  },
  {
    "label": "GetBoxMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoxMesh(const FMatrix& BoxToWorld,const FVector& Radii,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority,int32 ViewIndex,FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetOrientedHalfSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrientedHalfSphereMesh(const FVector& Center, const FRotator& Orientation, const FVector& Radii, int32 NumSides, int32 NumRings, float StartAngle, float EndAngle, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling, int32 ViewIndex, FMeshElementCollector& Collector, bool bUseSelectionOutline = false, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetHalfSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHalfSphereMesh(const FVector& Center, const FVector& Radii, int32 NumSides, int32 NumRings, float StartAngle, float EndAngle, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling, int32 ViewIndex, FMeshElementCollector& Collector, bool bUseSelectionOutline=false, HHitProxy* HitProxy=NULL)"
  },
  {
    "label": "GetSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSphereMesh(const FVector& Center, const FVector& Radii, int32 NumSides, int32 NumRings, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling, int32 ViewIndex, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSphereMesh(const FVector& Center,const FVector& Radii,int32 NumSides,int32 NumRings,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority, bool bDisableBackfaceCulling,int32 ViewIndex,FMeshElementCollector& Collector, bool bUseSelectionOutline, HHitProxy* HitProxy)"
  },
  {
    "label": "GetCylinderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinderMesh(const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, double Radius, double HalfHeight, int32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetCylinderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinderMesh(const FMatrix& CylToWorld, const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, double Radius, double HalfHeight, uint32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetCylinderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinderMesh(const FVector& Start, const FVector& End, double Radius, int32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetConeMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConeMesh(const FMatrix& LocalToWorld, float AngleWidth, float AngleHeight, uint32 NumSides, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetCapsuleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCapsuleMesh(const FVector& Origin, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, const FLinearColor& Color, double Radius, double HalfHeight, int32 NumSides, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "DrawTorus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTorus(FPrimitiveDrawInterface* PDI, const FMatrix& Transform, const FVector& XAxis, const FVector& YAxis, double OuterRadius, double InnerRadius, int32 OuterSegments, int32 InnerSegments, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bPartial, float Angle, bool bEndCaps)"
  },
  {
    "label": "DrawDisc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDisc(class FPrimitiveDrawInterface* PDI,const FVector& Base,const FVector& XAxis,const FVector& YAxis,FColor Color,double Radius,int32 NumSides, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority)"
  },
  {
    "label": "DrawRectangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRectangleMesh(FPrimitiveDrawInterface* PDI, const FVector& Center, const FVector& XAxis, const FVector& YAxis, FColor Color, float Width, float Height, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority)"
  },
  {
    "label": "DrawFlatArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFlatArrow(class FPrimitiveDrawInterface* PDI,const FVector& Base,const FVector& XAxis,const FVector& YAxis,FColor Color,float Length,int32 Width, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireBox(class FPrimitiveDrawInterface* PDI, const FBox& Box, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireBox(class FPrimitiveDrawInterface* PDI, const FMatrix& Matrix, const FBox& Box, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCircle(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FLinearColor& Color, double Radius, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawArc(FPrimitiveDrawInterface* PDI, const FVector Base, const FVector X, const FVector Y, const float MinAngle, const float MaxAngle, const double Radius, const int32 Sections, const FLinearColor& Color, uint8 DepthPriority)"
  },
  {
    "label": "DrawRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRectangle(FPrimitiveDrawInterface* PDI, const FVector& Center, const FVector& XAxis, const FVector& YAxis, FColor Color, float Width, float Height, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphere(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FLinearColor& Color, double Radius, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphere(class FPrimitiveDrawInterface* PDI, const FTransform& Transform, const FLinearColor& Color, double Radius, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FLinearColor& Color, double Radius, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(class FPrimitiveDrawInterface* PDI, const FTransform& Transform, const FLinearColor& Color, double Radius, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCylinder(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FVector& Z, const FLinearColor& Color, double Radius, double HalfHeight, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCapsule(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FVector& Z, const FLinearColor& Color, double Radius, double HalfHeight, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireChoppedCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireChoppedCone(class FPrimitiveDrawInterface* PDI,const FVector& Base,const FVector& X,const FVector& Y,const FVector& Z,const FLinearColor& Color,double Radius,double TopRadius,double HalfHeight,int32 NumSides,uint8 DepthPriority)"
  },
  {
    "label": "DrawWireCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCone(class FPrimitiveDrawInterface* PDI, TArray<FVector>& Verts, const FMatrix& Transform, double ConeLength, double ConeAngle, int32 ConeSides, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCone(class FPrimitiveDrawInterface* PDI, TArray<FVector>& Verts, const FTransform& Transform, double ConeLength, double ConeAngle, int32 ConeSides, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphereCappedCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereCappedCone(FPrimitiveDrawInterface* PDI, const FTransform& Transform, double ConeLength, double ConeAngle, int32 ConeSides, int32 ArcFrequency, int32 CapSegments, const FLinearColor& Color, uint8 DepthPriority)"
  },
  {
    "label": "DrawOrientedWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawOrientedWireBox(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FVector& Z, FVector Extent, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDirectionalArrow(class FPrimitiveDrawInterface* PDI, const FMatrix& ArrowToWorld, const FLinearColor& InColor, float Length, float ArrowSize, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawConnectedArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConnectedArrow(class FPrimitiveDrawInterface* PDI, const FMatrix& ArrowToWorld, const FLinearColor& Color, float ArrowHeight, float ArrowWidth, uint8 DepthPriority, float Thickness = 0.5f, int32 NumSpokes = 6)"
  },
  {
    "label": "DrawWireStar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireStar(class FPrimitiveDrawInterface* PDI, const FVector& Position, float Size, const FLinearColor& Color, uint8 DepthPriority)"
  },
  {
    "label": "DrawDashedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDashedLine(class FPrimitiveDrawInterface* PDI, const FVector& Start, const FVector& End, const FLinearColor& Color, double DashSize, uint8 DepthPriority, float DepthBias = 0.0f)"
  },
  {
    "label": "DrawWireDiamond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireDiamond(class FPrimitiveDrawInterface* PDI, const FMatrix& DiamondMatrix, float Size, const FLinearColor& InColor, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCoordinateSystem(FPrimitiveDrawInterface* PDI, FVector const& AxisLoc, FRotator const& AxisRot, float Scale, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCoordinateSystem(FPrimitiveDrawInterface* PDI, FVector const& AxisLoc, FRotator const& AxisRot, float Scale, const FLinearColor& InColor, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawFrustumWireframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFrustumWireframe(FPrimitiveDrawInterface* PDI, const FMatrix& WorldToFrustum, FColor Color, uint8 DepthPriority)"
  },
  {
    "label": "CalcConeVert()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CalcConeVert(float Angle1, float Angle2, float AzimuthAngle)"
  },
  {
    "label": "BuildConeVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildConeVerts(float Angle1, float Angle2, float Scale, float XOffset, uint32 NumSides, TArray<FDynamicMeshVertex>& OutVerts, TArray<uint32>& OutIndices)"
  },
  {
    "label": "BuildCylinderVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCylinderVerts(const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, double Radius, double HalfHeight, uint32 Sides, TArray<FDynamicMeshVertex>& OutVerts, TArray<uint32>& OutIndices)"
  },
  {
    "label": "GetSelectionColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetSelectionColor(const FLinearColor& BaseColor,bool bSelected,bool bHovered, bool bUseOverlayIntensity = true)"
  },
  {
    "label": "GetViewSelectionColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetViewSelectionColor(const FLinearColor& BaseColor, const FSceneView& View, bool bSelected, bool bHovered, bool bUseOverlayIntensity, bool bIndividuallySelected)"
  },
  {
    "label": "IsRichView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRichView(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ApplyViewModeOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyViewModeOverrides(int32 ViewIndex, const FEngineShowFlags& EngineShowFlags, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, bool bSelected, struct FMeshBatch& Mesh, FMeshElementCollector& Collector)"
  },
  {
    "label": "DrawUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawUVs(FViewport* InViewport, FCanvas* InCanvas, int32 InTextYPos, const int32 LODLevel, int32 UVChannel, TArray<FVector2D> SelectedEdgeTexCoords, class FStaticMeshRenderData* StaticMeshRenderData, class FSkeletalMeshLODRenderData* SkeletalMeshRenderData)"
  },
  {
    "label": "GetLODView()",
    "kind": "Method",
    "detail": "Function (const FSceneView&)",
    "insertText": "GetLODView(const FSceneView& InView)"
  },
  {
    "label": "ComputeBoundsScreenSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeBoundsScreenSize(const FVector4& Origin, const float SphereRadius, const FSceneView& View)"
  },
  {
    "label": "ComputeBoundsScreenSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeBoundsScreenSize(const FVector4& BoundsOrigin, const float SphereRadius, const FVector4& ViewOrigin, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeBoundsScreenRadiusSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeBoundsScreenRadiusSquared(const FVector4& Origin, const float SphereRadius, const FSceneView& View)"
  },
  {
    "label": "ComputeBoundsScreenRadiusSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeBoundsScreenRadiusSquared(const FVector4& BoundsOrigin, const float SphereRadius, const FVector4& ViewOrigin, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeBoundsDrawDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeBoundsDrawDistance(const float ScreenSize, const float SphereRadius, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeStaticMeshLOD()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "ComputeStaticMeshLOD(const FStaticMeshRenderData* RenderData, const FVector4& Origin, const float SphereRadius, const FSceneView& View, int32 MinLOD, float FactorScale = 1.0f)"
  },
  {
    "label": "ComputeTemporalStaticMeshLOD()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "ComputeTemporalStaticMeshLOD(const FStaticMeshRenderData* RenderData, const FVector4& Origin, const float SphereRadius, const FSceneView& View, int32 MinLOD, float FactorScale, int32 SampleIndex)"
  },
  {
    "label": "FLODMask()",
    "kind": "Method",
    "detail": "Function (struct FLODMask { uint16 LODIndex0 : 7 ; uint16 LODIndex1 : 7 ; uint16 bIsValid : 1 ; uint16 bIsRange : 1 ;)",
    "insertText": "FLODMask() : LODIndex0(0) , LODIndex1(0) , bIsValid(0) , bIsRange(0)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "LODIndex1()",
    "kind": "Method",
    "detail": "Function (LODIndex0 =)",
    "insertText": "LODIndex1(uint8)"
  },
  {
    "label": "SetLODSample()",
    "kind": "Method",
    "detail": "Function (bIsValid = 1 ; bIsRange = 0 ; } void)",
    "insertText": "SetLODSample(uint32 LODIndex, uint32 SampleIndex)"
  },
  {
    "label": "LODIndex0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LODIndex0(uint8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SampleIndex == 1)"
  },
  {
    "label": "SetLODRange()",
    "kind": "Method",
    "detail": "Function (} bIsValid = 1 ; bIsRange = 0 ; } void)",
    "insertText": "SetLODRange(uint32 MinLODIndex, uint32 MaxLODIndex)"
  },
  {
    "label": "ClampToFirstLOD()",
    "kind": "Method",
    "detail": "Function (bIsValid = 1 ; bIsRange = 1 ; } void)",
    "insertText": "ClampToFirstLOD(uint32 FirstLODIdx)"
  },
  {
    "label": "LODIndex0()",
    "kind": "Method",
    "detail": "Function (LODIndex0 =)",
    "insertText": "LODIndex0(uint8)FirstLODIdx ? LODIndex0 : (uint8)"
  },
  {
    "label": "LODIndex1()",
    "kind": "Method",
    "detail": "Function (LODIndex1 =)",
    "insertText": "LODIndex1(uint8)FirstLODIdx ? LODIndex1 : (uint8)"
  },
  {
    "label": "IsDithered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDithered()"
  },
  {
    "label": "IsLODRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLODRange()"
  },
  {
    "label": "ContainsLOD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsLOD(int32 LODIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(int32)LODIndex0 == LODIndex || (int32)"
  },
  {
    "label": "IsMinLODInRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMinLODInRange(int32 LODIndex)"
  },
  {
    "label": "IsMaxLODInRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaxLODInRange(int32 LODIndex)"
  },
  {
    "label": "GetRayTracedLOD()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "GetRayTracedLOD()"
  },
  {
    "label": "ComputeLODForMeshes()",
    "kind": "Method",
    "detail": "Function (FLODMask)",
    "insertText": "ComputeLODForMeshes(const TArray<class FStaticMeshBatchRelevance>& StaticMeshRelevances, const FSceneView& View, const FVector4& Origin, float SphereRadius, float InstanceSphereRadius, int32 ForcedLODLevel, float& OutScreenRadiusSquared, int8 CurFirstLODIdx, float ScreenSizeScale = 1.0f)"
  },
  {
    "label": "FSharedSamplerState()",
    "kind": "Method",
    "detail": "Function (class FSharedSamplerState : public FRenderResource { public : FSamplerStateRHIRef SamplerStateRHI ; bool bWrap ;)",
    "insertText": "FSharedSamplerState(bool bInWrap) : bWrap(bInWrap)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (SamplerStateRHI .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "InitializeSharedSamplerStates()",
    "kind": "Method",
    "detail": "Function (} } ; FSharedSamplerState* Wrap_WorldGroupSettings ; FSharedSamplerState* Clamp_WorldGroupSettings ; void)",
    "insertText": "InitializeSharedSamplerStates()"
  }
]