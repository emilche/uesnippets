[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FGlobalDynamicIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicIndexBuffer"
  },
  {
    "label": "FGlobalDynamicReadBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicReadBuffer"
  },
  {
    "label": "FGlobalDynamicVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicVertexBuffer"
  },
  {
    "label": "FLightMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMap"
  },
  {
    "label": "FLightmapResourceCluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapResourceCluster"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewState"
  },
  {
    "label": "FShadowMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMap"
  },
  {
    "label": "FStaticLightingBuildContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingBuildContext"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "ULightMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapTexture2D"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UShadowMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UShadowMapTexture2D"
  },
  {
    "label": "USkyAtmosphereComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyAtmosphereComponent"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereRenderSceneInfo"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureLightProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureLightProfile"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "ULightMapVirtualTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapVirtualTexture2D"
  },
  {
    "label": "FGPUScenePrimitiveCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScenePrimitiveCollector"
  },
  {
    "label": "FVirtualShadowMapArrayCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArrayCacheManager"
  },
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FViewMatrices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewMatrices"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FLandscapeRayTracingStateList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeRayTracingStateList"
  },
  {
    "label": "FPrimitiveUniformShaderParametersBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveUniformShaderParametersBuilder"
  },
  {
    "label": "FColorSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorSpace"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FTemporalLODState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemporalLODState"
  },
  {
    "label": "ESequencerState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESequencerState"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "from"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FFrozenSceneViewMatricesGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrozenSceneViewMatricesGuard"
  },
  {
    "label": "FDefaultWorkingColorSpaceUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultWorkingColorSpaceUniformBuffer"
  },
  {
    "label": "ELightInteractionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightInteractionType"
  },
  {
    "label": "FLightInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightInteraction"
  },
  {
    "label": "FLightMapInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMapInteraction"
  },
  {
    "label": "ULightMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapTexture2D"
  },
  {
    "label": "ULightMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapTexture2D"
  },
  {
    "label": "ULightMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapTexture2D"
  },
  {
    "label": "FShadowMapInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapInteraction"
  },
  {
    "label": "UShadowMapTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UShadowMapTexture2D"
  },
  {
    "label": "ULightMapVirtualTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightMapVirtualTexture2D"
  },
  {
    "label": "FLightMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightMap"
  },
  {
    "label": "FShadowMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMap"
  },
  {
    "label": "FLightmapClusterResourceInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmapClusterResourceInput"
  },
  {
    "label": "FDefaultLightmapResourceClusterUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultLightmapResourceClusterUniformBuffer"
  },
  {
    "label": "FLightCacheInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightCacheInterface"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FAsyncEncode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncEncode"
  },
  {
    "label": "ITextureCompressorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureCompressorModule"
  },
  {
    "label": "FShadowCascadeSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowCascadeSettings"
  },
  {
    "label": "FProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInitializer"
  },
  {
    "label": "FPerObjectProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerObjectProjectedShadowInitializer"
  },
  {
    "label": "FWholeSceneProjectedShadowInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWholeSceneProjectedShadowInitializer"
  },
  {
    "label": "FDefaultMobileReflectionCaptureUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultMobileReflectionCaptureUniformBuffer"
  },
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "FSkyAtmosphereSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereSceneProxy"
  },
  {
    "label": "FLightRenderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightRenderParameters"
  },
  {
    "label": "FDeferredDecalProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredDecalProxy"
  },
  {
    "label": "FDeferredDecalUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredDecalUpdateParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FReflectionCaptureProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureProxy"
  },
  {
    "label": "UReflectionCaptureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReflectionCaptureComponent"
  },
  {
    "label": "UReflectionCaptureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReflectionCaptureComponent"
  },
  {
    "label": "FWindData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindData"
  },
  {
    "label": "FWindSourceSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindSourceSceneProxy"
  },
  {
    "label": "FDynamicPrimitiveResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicPrimitiveResource"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FViewElementDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewElementDrawer"
  },
  {
    "label": "FStaticPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticPrimitiveDrawInterface"
  },
  {
    "label": "FSimpleElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleElementCollector"
  },
  {
    "label": "FAllocationInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAllocationInfo"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FOneFrameResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOneFrameResource"
  },
  {
    "label": "FMeshBatchAndRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchAndRelevance"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVisibilityTaskData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibilityTaskData"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FDeferredShadingSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredShadingSceneRenderer"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FCardPageRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardPageRenderData"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FShadowMeshCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMeshCollector"
  },
  {
    "label": "FDynamicMeshElementContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshElementContext"
  },
  {
    "label": "FRayTracingMaterialGatheringContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingMaterialGatheringContext"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FRayTracingDynamicGeometryUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingDynamicGeometryUpdateParams"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FDynamicRayTracingInstancesContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRayTracingInstancesContext"
  },
  {
    "label": "FRayTracingInstanceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingInstanceCollector"
  },
  {
    "label": "FRayTracingInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingInstance"
  },
  {
    "label": "FDynamicPrimitiveUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicPrimitiveUniformBuffer"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FStaticMeshRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshRenderData"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FLODMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODMask"
  },
  {
    "label": "FStaticMeshBatchRelevance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatchRelevance"
  },
  {
    "label": "FStaticMeshBatchRelevance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatchRelevance"
  },
  {
    "label": "FSharedSamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedSamplerState"
  },
  {
    "label": "UpdateTemporalLODTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTemporalLODTransition(const FSceneView& View, float LastRenderTime)"
  },
  {
    "label": "FFrozenSceneViewMatricesGuard()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FFrozenSceneViewMatricesGuard(FSceneView& SV)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FRHICommandListBase& RHICmdList, const UE::Color::FColorSpace& InColorSpace)"
  },
  {
    "label": "FLightInteraction()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLightInteraction(LIT_Dynamic)"
  },
  {
    "label": "FLightInteraction()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLightInteraction(LIT_CachedLightMap)"
  },
  {
    "label": "FLightInteraction()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLightInteraction(LIT_CachedIrrelevant)"
  },
  {
    "label": "FLightInteraction()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLightInteraction(LIT_CachedSignedDistanceFieldShadowMap2D)"
  },
  {
    "label": "Texture()",
    "kind": "Method",
    "detail": "Function (FLightMapInteraction)",
    "insertText": "Texture(\n\t\tconst class ULightMapTexture2D* const* InTextures,\n\t\tconst ULightMapTexture2D* InSkyOcclusionTexture,\n\t\tconst ULightMapTexture2D* InAOMaterialMaskTexture,\n\t\tconst FVector4f* InCoefficientScales,\n\t\tconst FVector4f* InCoefficientAdds,\n\t\tconst FVector2D& InCoordinateScale,\n\t\tconst FVector2D& InCoordinateBias,\n\t\tbool bAllowHighQualityLightMaps)"
  },
  {
    "label": "InitVirtualTexture()",
    "kind": "Method",
    "detail": "Function (FLightMapInteraction)",
    "insertText": "InitVirtualTexture(\n\t\tconst ULightMapVirtualTexture2D* VirtualTexture,\n\t\tconst FVector4f* InCoefficientScales,\n\t\tconst FVector4f* InCoefficientAdds,\n\t\tconst FVector2D& InCoordinateScale,\n\t\tconst FVector2D& InCoordinateBias,\n\t\tbool bAllowHighQualityLightMaps)"
  },
  {
    "label": "GetLightmapClusterResourceParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightmapClusterResourceParameters(\n\tERHIFeatureLevel::Type FeatureLevel, \n\tconst FLightmapClusterResourceInput& Input,\n\tconst IAllocatedVirtualTexture* AllocatedVT,\n\tFLightmapResourceClusterShaderParameters& Parameters)"
  },
  {
    "label": "CreatePrecomputedLightingUniformBuffer_RenderingThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePrecomputedLightingUniformBuffer_RenderingThread(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "GetVirtualTextureLightmapProducer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVirtualTextureLightmapProducer(ERHIFeatureLevel::Type FeatureLevel, FVirtualTextureProducerHandle& OutProducerHandle)"
  },
  {
    "label": "DoesPlatformSupportDistanceFields()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportDistanceFields(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "DoesPlatformSupportDistanceFieldShadowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportDistanceFieldShadowing(EShaderPlatform Platform)"
  },
  {
    "label": "DoesPlatformSupportDistanceFieldAO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPlatformSupportDistanceFieldAO(EShaderPlatform Platform)"
  },
  {
    "label": "DoesProjectSupportDistanceFields()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesProjectSupportDistanceFields()"
  },
  {
    "label": "ShouldAllPrimitivesHaveDistanceField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllPrimitivesHaveDistanceField(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ShouldCompileDistanceFieldShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileDistanceFieldShaders(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "FSkyLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSkyLightSceneProxy(const class USkyLightComponent* InLightComponent)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(\n\t\tfloat InBlendFraction, \n\t\tconst FSHVectorRGB3* InIrradianceEnvironmentMap, \n\t\tconst FSHVectorRGB3* BlendDestinationIrradianceEnvironmentMap,\n\t\tconst float* InAverageBrightness,\n\t\tconst float* BlendDestinationAverageBrightness,\n\t\tconst FLinearColor* InSpecifiedCubemapColorScale)"
  },
  {
    "label": "FSkyAtmosphereSceneProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSkyAtmosphereSceneProxy(const USkyAtmosphereComponent* InComponent)"
  },
  {
    "label": "GetLightExposureScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLightExposureScale(float Exposure, float InverseExposureBlend)"
  },
  {
    "label": "ComputeShadowCullingVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeShadowCullingVolume(bool bReverseCulling, const FVector* CascadeFrustumVerts, const FVector& LightDirection, FConvexVolume& ConvexVolumeOut, FPlane& NearPlaneOut, FPlane& FarPlaneOut)"
  },
  {
    "label": "FDeferredDecalProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FDeferredDecalProxy(const UDecalComponent* InComponent)"
  },
  {
    "label": "FDeferredDecalProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FDeferredDecalProxy(const USceneComponent* InComponent, UMaterialInterface* InMaterial)"
  },
  {
    "label": "SetTransformIncludingDecalSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformIncludingDecalSize(const FTransform& InComponentToWorldIncludingDecalSize, const FBoxSphereBounds& InBounds)"
  },
  {
    "label": "InitializeFadingParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFadingParameters(float AbsSpawnTime, float FadeDuration, float FadeStartDelay, float FadeInDuration, float FadeInStartDelay)"
  },
  {
    "label": "FReflectionCaptureProxy()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FReflectionCaptureProxy(const class UReflectionCaptureComponent* InComponent)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FMatrix& InTransform)"
  },
  {
    "label": "UpdateMobileUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMobileUniformBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "UpdateMobileUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMobileUniformBuffer()"
  },
  {
    "label": "PrepareForAccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForAccumulate()"
  },
  {
    "label": "AddWeighted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWeighted(const FWindData& InWindData, float Weight)"
  },
  {
    "label": "NormalizeByTotalWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeByTotalWeight(float TotalWeight)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(FVector InOffset)"
  },
  {
    "label": "InitPrimitiveResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPrimitiveResource()"
  },
  {
    "label": "FSimpleElementCollector()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSimpleElementCollector()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(const FAllocationInfo& AllocationInfo)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(FSimpleElementCollector& Other)"
  },
  {
    "label": "FMeshBatchAndRelevance()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FMeshBatchAndRelevance(const FMeshBatch& InMesh, const FPrimitiveSceneProxy* InPrimitiveSceneProxy, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMesh(int32 ViewIndex, FMeshBatch& MeshBatch)"
  },
  {
    "label": "CacheUniformExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheUniformExpressions(FMaterialRenderProxy* Proxy, bool bRecreateUniformBuffer)"
  },
  {
    "label": "FMeshElementCollector()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FMeshElementCollector(ERHIFeatureLevel::Type InFeatureLevel, FSceneRenderingBulkObjectAllocator& InBulkAllocator, ECommitFlags CommitFlags = ECommitFlags::None)"
  },
  {
    "label": "SetPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitive(const FPrimitiveSceneProxy* InPrimitiveSceneProxy, FHitProxyId DefaultHitProxyId)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(\n\t\tFRHICommandList& RHICmdList,\n\t\tFGlobalDynamicVertexBuffer& DynamicVertexBuffer,\n\t\tFGlobalDynamicIndexBuffer& DynamicIndexBuffer,\n\t\tFGlobalDynamicReadBuffer& DynamicReadBuffer)"
  },
  {
    "label": "AddViewMeshArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewMeshArrays(\n\t\tconst FSceneView* InView,\n\t\tTArray<FMeshBatchAndRelevance, SceneRenderingAllocator>* ViewMeshes,\n\t\tFSimpleElementCollector* ViewSimpleElementCollector,\n\t\tFGPUScenePrimitiveCollector* DynamicPrimitiveCollector\n#if UE_ENABLE_DEBUG_DRAWING\n\t\t, FSimpleElementCollector* DebugSimpleElementCollector = nullptr\n#endif\n\t\t)"
  },
  {
    "label": "ClearViewMeshArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearViewMeshArrays()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit()"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finish()"
  },
  {
    "label": "FRayTracingMaterialGatheringContext()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FRayTracingMaterialGatheringContext(\n\t\tconst FScene* InScene,\n\t\tconst FSceneView* InReferenceView,\n\t\tconst FSceneViewFamily& InReferenceViewFamily,\n\t\tFRDGBuilder& InGraphBuilder,\n\t\tFRayTracingMeshResourceCollector& InRayTracingMeshResourceCollector,\n\t\tFGPUScenePrimitiveCollector& InDynamicPrimitiveCollector,\n\t\tFGlobalDynamicReadBuffer& InGlobalDynamicReadBuffer)"
  },
  {
    "label": "SetPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimitive(const FPrimitiveSceneProxy* InPrimitiveSceneProxy)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddReferencedGeometryGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedGeometryGroup(RayTracing::GeometryGroupHandle GeometryGroup)"
  },
  {
    "label": "AddRayTracingInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRayTracingInstance(struct FRayTracingInstance Instance)"
  },
  {
    "label": "AddReferencedGeometryGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedGeometryGroup(RayTracing::GeometryGroupHandle GeometryGroup)"
  },
  {
    "label": "AddRayTracingGeometryUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRayTracingGeometryUpdate(FRayTracingDynamicGeometryUpdateParams Params)"
  },
  {
    "label": "FRayTracingInstanceCollector()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FRayTracingInstanceCollector(\n\t\tERHIFeatureLevel::Type InFeatureLevel,\n\t\tFSceneRenderingBulkObjectAllocator& InBulkAllocator,\n\t\tconst FSceneView* InReferenceView,\n\t\tbool bInTrackReferencedGeometryGroups)"
  },
  {
    "label": "FDynamicPrimitiveUniformBuffer()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FDynamicPrimitiveUniformBuffer()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FRHICommandListBase& RHICmdList, FPrimitiveUniformShaderParametersBuilder& Builder)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tFRHICommandListBase& RHICmdList,\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FVector& ActorPositionWS, \n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tconst FBoxSphereBounds& PreSkinnedLocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity,\n\t\tconst FCustomPrimitiveData* CustomPrimitiveData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tFRHICommandListBase& RHICmdList,\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tconst FBoxSphereBounds& PreSkinnedLocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity,\n\t\tconst FCustomPrimitiveData* CustomPrimitiveData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tFRHICommandListBase& RHICmdList,\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tconst FBoxSphereBounds& PreSkinnedLocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tFRHICommandListBase& RHICmdList,\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FVector& ActorPositionWS, \n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tconst FBoxSphereBounds& PreSkinnedLocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity,\n\t\tconst FCustomPrimitiveData* CustomPrimitiveData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tconst FBoxSphereBounds& PreSkinnedLocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity,\n\t\tconst FCustomPrimitiveData* CustomPrimitiveData)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tconst FBoxSphereBounds& PreSkinnedLocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(\n\t\tconst FMatrix& LocalToWorld,\n\t\tconst FMatrix& PreviousLocalToWorld,\n\t\tconst FBoxSphereBounds& WorldBounds,\n\t\tconst FBoxSphereBounds& LocalBounds,\n\t\tbool bReceivesDecals,\n\t\tbool bHasPrecomputedVolumetricLightmap,\n\t\tbool bOutputVelocity)"
  },
  {
    "label": "DrawPlane10x10()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPlane10x10(class FPrimitiveDrawInterface* PDI,const FMatrix& ObjectToWorld,float Radii,FVector2D UVMin, FVector2D UVMax,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority)"
  },
  {
    "label": "DrawTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTriangle(class FPrimitiveDrawInterface* PDI, const FVector& A, const FVector& B, const FVector& C, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBox(class FPrimitiveDrawInterface* PDI,const FMatrix& BoxToWorld,const FVector& Radii,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority)"
  },
  {
    "label": "DrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSphere(class FPrimitiveDrawInterface* PDI,const FVector& Center,const FRotator& Orientation,const FVector& Radii,int32 NumSides,int32 NumRings,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority,bool bDisableBackfaceCulling=false)"
  },
  {
    "label": "DrawCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCone(class FPrimitiveDrawInterface* PDI,const FMatrix& ConeToWorld, float Angle1, float Angle2, uint32 NumSides, bool bDrawSideLines, const FLinearColor& SideLineColor, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(class FPrimitiveDrawInterface* PDI,const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis,\n\tdouble Radius, double HalfHeight, uint32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(class FPrimitiveDrawInterface* PDI, const FMatrix& CylToWorld, const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis,\n\tdouble Radius, double HalfHeight, uint32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(class FPrimitiveDrawInterface* PDI, const FVector& Start, const FVector& End, double Radius, int32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority)"
  },
  {
    "label": "GetBoxMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoxMesh(const FMatrix& BoxToWorld,const FVector& Radii,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority,int32 ViewIndex,FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetOrientedHalfSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrientedHalfSphereMesh(const FVector& Center, const FRotator& Orientation, const FVector& Radii, int32 NumSides, int32 NumRings, float StartAngle, float EndAngle, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling,\n\t\t\t\t\t\t\t\t\tint32 ViewIndex, FMeshElementCollector& Collector, bool bUseSelectionOutline = false, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetHalfSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHalfSphereMesh(const FVector& Center, const FVector& Radii, int32 NumSides, int32 NumRings, float StartAngle, float EndAngle, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling,\n\t\t\t\t\t\t\t\t\tint32 ViewIndex, FMeshElementCollector& Collector, bool bUseSelectionOutline=false, HHitProxy* HitProxy=NULL)"
  },
  {
    "label": "GetSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSphereMesh(const FVector& Center, const FVector& Radii, int32 NumSides, int32 NumRings, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority,\n\tbool bDisableBackfaceCulling, int32 ViewIndex, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetSphereMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSphereMesh(const FVector& Center,const FVector& Radii,int32 NumSides,int32 NumRings,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriority,\n\t\t\t\t\t\t\t\t\tbool bDisableBackfaceCulling,int32 ViewIndex,FMeshElementCollector& Collector, bool bUseSelectionOutline, HHitProxy* HitProxy)"
  },
  {
    "label": "GetCylinderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinderMesh(const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis,\n\t\t\t\t\t\t\t\t\tdouble Radius, double HalfHeight, int32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetCylinderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinderMesh(const FMatrix& CylToWorld, const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis,\n\t\t\t\t\t\t\t\t\tdouble Radius, double HalfHeight, uint32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetCylinderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylinderMesh(const FVector& Start, const FVector& End, double Radius, int32 Sides, const FMaterialRenderProxy* MaterialInstance, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetConeMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConeMesh(const FMatrix& LocalToWorld, float AngleWidth, float AngleHeight, uint32 NumSides,\n\t\t\t\t\t\t\t\t\tconst FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "GetCapsuleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCapsuleMesh(const FVector& Origin, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, const FLinearColor& Color, double Radius, double HalfHeight, int32 NumSides,\n\t\t\t\t\t\t\t\t\tconst FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bDisableBackfaceCulling, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy = NULL)"
  },
  {
    "label": "DrawTorus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTorus(FPrimitiveDrawInterface* PDI, const FMatrix& Transform, const FVector& XAxis, const FVector& YAxis, \n\t\t\t\t\t\t\t\t double OuterRadius, double InnerRadius, int32 OuterSegments, int32 InnerSegments, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, bool bPartial, float Angle, bool bEndCaps)"
  },
  {
    "label": "DrawDisc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDisc(class FPrimitiveDrawInterface* PDI,const FVector& Base,const FVector& XAxis,const FVector& YAxis,FColor Color,double Radius,int32 NumSides, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority)"
  },
  {
    "label": "DrawRectangleMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRectangleMesh(FPrimitiveDrawInterface* PDI, const FVector& Center, const FVector& XAxis, const FVector& YAxis, \n\t\t\t\t\t\t\t\t\t\t FColor Color, float Width, float Height, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority)"
  },
  {
    "label": "DrawFlatArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFlatArrow(class FPrimitiveDrawInterface* PDI,const FVector& Base,const FVector& XAxis,const FVector& YAxis,FColor Color,float Length,int32 Width, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireBox(class FPrimitiveDrawInterface* PDI, const FBox& Box, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireBox(class FPrimitiveDrawInterface* PDI, const FMatrix& Matrix, const FBox& Box, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCircle(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FLinearColor& Color, double Radius, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawArc(FPrimitiveDrawInterface* PDI, const FVector Base, const FVector X, const FVector Y, const float MinAngle, const float MaxAngle, const double Radius, const int32 Sections, const FLinearColor& Color, uint8 DepthPriority)"
  },
  {
    "label": "DrawRectangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRectangle(FPrimitiveDrawInterface* PDI, const FVector& Center, const FVector& XAxis, const FVector& YAxis, \n\t\t\t\t\t\t\t\t\t FColor Color, float Width, float Height, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphere(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FLinearColor& Color, double Radius, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphere(class FPrimitiveDrawInterface* PDI, const FTransform& Transform, const FLinearColor& Color, double Radius, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FLinearColor& Color, double Radius, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphereAutoSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereAutoSides(class FPrimitiveDrawInterface* PDI, const FTransform& Transform, const FLinearColor& Color, double Radius, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCylinder(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FVector& Z, const FLinearColor& Color, double Radius, double HalfHeight, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCapsule(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FVector& Z, const FLinearColor& Color, double Radius, double HalfHeight, int32 NumSides, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireChoppedCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireChoppedCone(class FPrimitiveDrawInterface* PDI,const FVector& Base,const FVector& X,const FVector& Y,const FVector& Z,const FLinearColor& Color,double Radius,double TopRadius,double HalfHeight,int32 NumSides,uint8 DepthPriority)"
  },
  {
    "label": "DrawWireCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCone(class FPrimitiveDrawInterface* PDI, TArray<FVector>& Verts, const FMatrix& Transform, double ConeLength, double ConeAngle, int32 ConeSides, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireCone(class FPrimitiveDrawInterface* PDI, TArray<FVector>& Verts, const FTransform& Transform, double ConeLength, double ConeAngle, int32 ConeSides, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawWireSphereCappedCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireSphereCappedCone(FPrimitiveDrawInterface* PDI, const FTransform& Transform, double ConeLength, double ConeAngle, int32 ConeSides, int32 ArcFrequency, int32 CapSegments, const FLinearColor& Color, uint8 DepthPriority)"
  },
  {
    "label": "DrawOrientedWireBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawOrientedWireBox(class FPrimitiveDrawInterface* PDI, const FVector& Base, const FVector& X, const FVector& Y, const FVector& Z, FVector Extent, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float DepthBias = 0.0f, bool bScreenSpace = false)"
  },
  {
    "label": "DrawDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDirectionalArrow(class FPrimitiveDrawInterface* PDI, const FMatrix& ArrowToWorld, const FLinearColor& InColor, float Length, float ArrowSize, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawConnectedArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConnectedArrow(class FPrimitiveDrawInterface* PDI, const FMatrix& ArrowToWorld, const FLinearColor& Color, float ArrowHeight, float ArrowWidth, uint8 DepthPriority, float Thickness = 0.5f, int32 NumSpokes = 6)"
  },
  {
    "label": "DrawWireStar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireStar(class FPrimitiveDrawInterface* PDI, const FVector& Position, float Size, const FLinearColor& Color, uint8 DepthPriority)"
  },
  {
    "label": "DrawDashedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDashedLine(class FPrimitiveDrawInterface* PDI, const FVector& Start, const FVector& End, const FLinearColor& Color, double DashSize, uint8 DepthPriority, float DepthBias = 0.0f)"
  },
  {
    "label": "DrawWireDiamond()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWireDiamond(class FPrimitiveDrawInterface* PDI, const FMatrix& DiamondMatrix, float Size, const FLinearColor& InColor, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCoordinateSystem(FPrimitiveDrawInterface* PDI, FVector const& AxisLoc, FRotator const& AxisRot, float Scale, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCoordinateSystem(FPrimitiveDrawInterface* PDI, FVector const& AxisLoc, FRotator const& AxisRot, float Scale, const FLinearColor& InColor, uint8 DepthPriority, float Thickness = 0.0f)"
  },
  {
    "label": "DrawFrustumWireframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawFrustumWireframe(\n\tFPrimitiveDrawInterface* PDI,\n\tconst FMatrix& WorldToFrustum,\n\tFColor Color,\n\tuint8 DepthPriority\n\t)"
  },
  {
    "label": "CalcConeVert()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CalcConeVert(float Angle1, float Angle2, float AzimuthAngle)"
  },
  {
    "label": "BuildConeVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildConeVerts(float Angle1, float Angle2, float Scale, float XOffset, uint32 NumSides, TArray<FDynamicMeshVertex>& OutVerts, TArray<uint32>& OutIndices)"
  },
  {
    "label": "BuildCylinderVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCylinderVerts(const FVector& Base, const FVector& XAxis, const FVector& YAxis, const FVector& ZAxis, double Radius, double HalfHeight, uint32 Sides, TArray<FDynamicMeshVertex>& OutVerts, TArray<uint32>& OutIndices)"
  },
  {
    "label": "GetSelectionColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetSelectionColor(const FLinearColor& BaseColor,bool bSelected,bool bHovered, bool bUseOverlayIntensity = true)"
  },
  {
    "label": "GetViewSelectionColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetViewSelectionColor(const FLinearColor& BaseColor, const FSceneView& View, bool bSelected, bool bHovered, bool bUseOverlayIntensity, bool bIndividuallySelected)"
  },
  {
    "label": "IsRichView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRichView(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ApplyViewModeOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyViewModeOverrides(\n\tint32 ViewIndex,\n\tconst FEngineShowFlags& EngineShowFlags,\n\tERHIFeatureLevel::Type FeatureLevel,\n\tconst FPrimitiveSceneProxy* PrimitiveSceneProxy,\n\tbool bSelected,\n\tstruct FMeshBatch& Mesh,\n\tFMeshElementCollector& Collector\n\t)"
  },
  {
    "label": "DrawUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawUVs(FViewport* InViewport, FCanvas* InCanvas, int32 InTextYPos, const int32 LODLevel, int32 UVChannel, TArray<FVector2D> SelectedEdgeTexCoords, class FStaticMeshRenderData* StaticMeshRenderData, class FSkeletalMeshLODRenderData* SkeletalMeshRenderData)"
  },
  {
    "label": "ComputeBoundsScreenSize()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeBoundsScreenSize(const FVector4& Origin, const float SphereRadius, const FSceneView& View)"
  },
  {
    "label": "ComputeBoundsScreenSize()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeBoundsScreenSize(const FVector4& BoundsOrigin, const float SphereRadius, const FVector4& ViewOrigin, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeBoundsScreenRadiusSquared()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeBoundsScreenRadiusSquared(const FVector4& Origin, const float SphereRadius, const FSceneView& View)"
  },
  {
    "label": "ComputeBoundsScreenRadiusSquared()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeBoundsScreenRadiusSquared(const FVector4& BoundsOrigin, const float SphereRadius, const FVector4& ViewOrigin, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeBoundsDrawDistance()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeBoundsDrawDistance(const float ScreenSize, const float SphereRadius, const FMatrix& ProjMatrix)"
  },
  {
    "label": "ComputeStaticMeshLOD()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeStaticMeshLOD(const FStaticMeshRenderData* RenderData, const FVector4& Origin, const float SphereRadius, const FSceneView& View, int32 MinLOD, float FactorScale = 1.0f)"
  },
  {
    "label": "ComputeTemporalStaticMeshLOD()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeTemporalStaticMeshLOD( const FStaticMeshRenderData* RenderData, const FVector4& Origin, const float SphereRadius, const FSceneView& View, int32 MinLOD, float FactorScale, int32 SampleIndex )"
  },
  {
    "label": "ComputeLODForMeshes()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeLODForMeshes(const TArray<class FStaticMeshBatchRelevance>& StaticMeshRelevances, const FSceneView& View, const FVector4& Origin, float SphereRadius, int32 ForcedLODLevel, float& OutScreenRadiusSquared, int8 CurFirstLODIdx, float ScreenSizeScale = 1.0f, bool bDitheredLODTransition = true)"
  },
  {
    "label": "ComputeLODForMeshes()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ComputeLODForMeshes(const TArray<class FStaticMeshBatchRelevance>& StaticMeshRelevances, const FSceneView& View, const FVector4& Origin, float SphereRadius, float InstanceSphereRadius, int32 ForcedLODLevel, float& OutScreenRadiusSquared, int8 CurFirstLODIdx, float ScreenSizeScale = 1.0f)"
  },
  {
    "label": "InitializeSharedSamplerStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSharedSamplerStates()"
  }
]