[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorInflationOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorInflationOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorInflationOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_INFLATION_H # define EIGEN_CXX11_TENSOR_TENSOR_INFLATION_H namespace Eigen { namespace internal { template<Strides,XprType> struct traits<TensorInflationOp<Strides,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<Strides,XprType> struct eval<TensorInflationOp<Strides,XprType>,Eigen::Dense> { typedef const TensorInflationOp<Strides,XprType>& type ; } ; template<Strides,XprType> struct nested<TensorInflationOp<Strides,XprType>,1,eval<TensorInflationOp<Strides,XprType>>::type> { typedef TensorInflationOp<Strides,XprType> type ; } ; } template<Strides,XprType> class TensorInflationOp : public TensorBase<TensorInflationOp<Strides,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorInflationOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorInflationOp>::type Nested ; typedef Eigen::internal::traits<TensorInflationOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorInflationOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorInflationOp(const XprType& expr, const Strides& strides) : m_xpr(expr), m_strides(strides)"
  },
  {
    "label": "strides()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Strides&)",
    "insertText": "strides()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (m_dimensions [)",
    "insertText": "i(m_dimensions[i] - 1) * op.strides()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_fastStrides [ i ] = internal::TensorIntDivisor<)",
    "insertText": "Index(m_strides[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ 0 ] = 1 ; m_inputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; m_inputStrides [ i ] = m_inputStrides [ i - 1 ]* input_dims [ i - 1 ] ; } } else { m_outputStrides [ NumDims - 1 ] = 1 ; m_inputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "getInputIndex()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "getInputIndex(Index index, Index* inputIndex)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < dimensions().TotalSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* inputIndex = 0 ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i > 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStrides [ i ] ;)",
    "insertText": "if(idx != idx / m_fastStrides[i] * m_strides[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = 0 ;)",
    "insertText": "if(getInputIndex(index, &inputIndex))"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (const double compute_cost =)",
    "insertText": "NumDims(3 * TensorOpCost::DivCost<Index>() + 3 * TensorOpCost::MulCost<Index>() + 2 * TensorOpCost::AddCost<Index>())"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const double input_size = m_impl .)",
    "insertText": "dimensions().TotalSize()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (const double output_size = m_dimensions .)",
    "insertText": "TotalSize()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  }
]