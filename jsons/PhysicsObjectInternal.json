[
  {
    "label": "FPhysicsObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsObject"
  },
  {
    "label": "FPhysicsObjectFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsObjectFactory"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PhysicsObject . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / ShapeInstanceFwd . h \" # include \" Containers / Set . h \" # include \" Framework / Threading . h \" # include \" PhysicsProxy / ClusterUnionPhysicsProxy . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxy . h \" # include \" PhysicsProxy / GeometryCollectionPhysicsProxy . h \" namespace Chaos { struct FPhysicsObject { public : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetBodyIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBodyIndex(int32 InBodyIndex)"
  },
  {
    "label": "GetBodyIndex()",
    "kind": "Method",
    "detail": "Function (BodyIndex = InBodyIndex ; } int32)",
    "insertText": "GetBodyIndex()"
  },
  {
    "label": "GetBodyName()",
    "kind": "Method",
    "detail": "Function (BodyName = InBodyName ; } const FName&)",
    "insertText": "GetBodyName()"
  },
  {
    "label": "Id()",
    "kind": "Method",
    "detail": "Function (TThreadParticle<Id>* Particle = GetParticle<)",
    "insertText": "Id()"
  },
  {
    "label": "ObjectState()",
    "kind": "Method",
    "detail": "Function (} else { return Particle ->)",
    "insertText": "ObjectState()"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (} } template<EThreadContext Id> FPhysicsObjectHandle)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EPhysicsProxyType ProxyType = Proxy ->)",
    "insertText": "GetType()"
  },
  {
    "label": "FPhysicsObjectHandle()",
    "kind": "Method",
    "detail": "Function (FPhysicsObjectHandle CurrentObject = const_cast<)",
    "insertText": "FPhysicsObjectHandle(this)"
  },
  {
    "label": "GetParentObject()",
    "kind": "Method",
    "detail": "Function (} return CurrentObject ; } template<EThreadContext Id> FPhysicsObjectHandle)",
    "insertText": "GetParentObject()"
  },
  {
    "label": "Id()",
    "kind": "Method",
    "detail": "Function (FGeometryDynamicCollection& Collection = GetGeometryCollectionDynamicCollection<)",
    "insertText": "Id(*GeometryCollectionProxy)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} [ [ fallthrough ] ] ; } case EPhysicsProxyType::ClusterUnionProxy : case EPhysicsProxyType::SingleParticleProxy : {)",
    "insertText": "if(IPhysicsProxyBase* ParentProxy = Proxy->GetParentProxy(); ParentProxy && ParentProxy->GetType() == EPhysicsProxyType::ClusterUnionProxy)"
  },
  {
    "label": "FClusterUnionPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (FClusterUnionPhysicsProxy* ParentClusterProxy = static_cast<)",
    "insertText": "FClusterUnionPhysicsProxy(ParentProxy)"
  },
  {
    "label": "GetRootParticle()",
    "kind": "Method",
    "detail": "Function (} break ; } default : break ; } return nullptr ; } template<EThreadContext Id> TThreadParticle<Id>*)",
    "insertText": "GetRootParticle()"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (} template<EThreadContext Id> TThreadParticle<Id>*)",
    "insertText": "GetParticle()"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (default : break ; } } else {)",
    "insertText": "switch(ProxyType)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (default : break ; } } })",
    "insertText": "return(TThreadParticle<Id>*)"
  },
  {
    "label": "IsParticleDisabled()",
    "kind": "Method",
    "detail": "Function (} template<EThreadContext Id> bool)",
    "insertText": "IsParticleDisabled(TThreadParticle<Id>* Particle)"
  },
  {
    "label": "PhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} return false ; } IPhysicsProxyBase*)",
    "insertText": "PhysicsProxy()"
  },
  {
    "label": "FClusterUnionPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} case EPhysicsProxyType::ClusterUnionProxy : { FClusterUnionPhysicsProxy* ClusterProxy = static_cast<)",
    "insertText": "FClusterUnionPhysicsProxy(Proxy)"
  },
  {
    "label": "HasChildren_Internal()",
    "kind": "Method",
    "detail": "Function (} else { return ClusterProxy ->)",
    "insertText": "HasChildren_Internal()"
  },
  {
    "label": "FPhysicsObject()",
    "kind": "Method",
    "detail": "Function (} } default : break ; } return false ; } class FPhysicsObjectFactory ; protected :)",
    "insertText": "FPhysicsObject(IPhysicsProxyBase* InProxy, int32 InBodyIndex = INDEX_NONE, const FName& InBodyName = NAME_None) : Proxy(InProxy) , BodyIndex(InBodyIndex) , BodyName(InBodyName)"
  },
  {
    "label": "GetGeometryCollectionDynamicCollection()",
    "kind": "Method",
    "detail": "Function (} private : IPhysicsProxyBase* Proxy = nullptr ; int32 BodyIndex = INDEX_NONE ; FName BodyName = NAME_None ; template<EThreadContext Id> FGeometryDynamicCollection&)",
    "insertText": "GetGeometryCollectionDynamicCollection(FGeometryCollectionPhysicsProxy& GeometryCollectionProxy)"
  },
  {
    "label": "GetPhysicsCollection()",
    "kind": "Method",
    "detail": "Function (} else { return GeometryCollectionProxy .)",
    "insertText": "GetPhysicsCollection()"
  },
  {
    "label": "CreatePhysicsObject()",
    "kind": "Method",
    "detail": "Function (} } } ; class FPhysicsObjectFactory { public : FPhysicsObjectUniquePtr)",
    "insertText": "CreatePhysicsObject(IPhysicsProxyBase* InProxy, int32 InBodyIndex = INDEX_NONE, const FName& InBodyName = NAME_None)"
  }
]