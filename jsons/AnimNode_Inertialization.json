[
  {
    "label": "IInertializationRequester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInertializationRequester"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInertializationCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInertializationCurve"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "TUseBitwiseSwap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUseBitwiseSwap"
  },
  {
    "label": "FInertializationSparsePose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInertializationSparsePose"
  },
  {
    "label": "FAnimNode_Inertialization",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Inertialization"
  },
  {
    "label": "FAnimNode_DeadBlending",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_DeadBlending"
  },
  {
    "label": "FInertializationCurveDiffElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInertializationCurveDiffElement"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "DECLARE_ANIMGRAPH_MESSAGE_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimNodeBase . h \" # include \" Animation / AnimCurveTypes . h \" # include \" Animation / AnimNodeMessages . h \" # include \" Animation / AnimInertializationRequest . h \" # include \" Interfaces / Interface_BoneReferenceSkeletonProvider . h \" # include \" AnimNode_Inertialization . generated . h \" namespace UE::Anim { class IInertializationRequester : public IGraphMessage {)",
    "insertText": "DECLARE_ANIMGRAPH_MESSAGE_API(IInertializationRequester, ENGINE_API)"
  },
  {
    "label": "RequestInertialization()",
    "kind": "Method",
    "detail": "Function (public : const FName Attribute ; void)",
    "insertText": "RequestInertialization(float InRequestedDuration, const UBlendProfile* InBlendProfile = nullptr)"
  },
  {
    "label": "RequestInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInertialization(const FInertializationRequest& InInertializationRequest)"
  },
  {
    "label": "AddDebugRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDebugRecord(const FAnimInstanceProxy& InSourceProxy, int32 InSourceNodeId)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Inactive,Pending,Active } ;)",
    "insertText": "UENUM() enum class UE_DEPRECATED(5.4, \"Internal private pose storage is now used by inertialization.\")"
  },
  {
    "label": "FInertializationCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInertializationCurve()"
  },
  {
    "label": "FInertializationCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInertializationCurve(const FInertializationCurve& Other)"
  },
  {
    "label": "FInertializationCurve()",
    "kind": "Method",
    "detail": "Function (* this = Other ; })",
    "insertText": "FInertializationCurve(FInertializationCurve&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FInertializationCurve&)",
    "insertText": "operator(const FInertializationCurve& Other)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (BlendedCurve .)",
    "insertText": "CopyFrom(Other.BlendedCurve)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (BlendedCurve .)",
    "insertText": "MoveFrom(Other.BlendedCurve)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (BlendedCurve .)",
    "insertText": "CopyFrom(Other)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT() struct UE_DEPRECATED(5.4, \"Internal private pose storage is now used by inertialization.\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FInertializationPose()",
    "kind": "Method",
    "detail": "Function (TArray<FTransform> BoneTransforms ; PRAGMA_DISABLE_DEPRECATION_WARNINGS TArray<EInertializationBoneState> BoneStates ; PRAGMA_ENABLE_DEPRECATION_WARNINGS FInertializationCurve Curves ; FName AttachParentName ; float DeltaTime ;)",
    "insertText": "FInertializationPose() : ComponentTransform(FTransform::Identity) , AttachParentName(NAME_None) , DeltaTime(0.0f)"
  },
  {
    "label": "FInertializationPose()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInertializationPose(const FInertializationPose&)"
  },
  {
    "label": "FInertializationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInertializationPose(FInertializationPose&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInertializationPose&)",
    "insertText": "operator(const FInertializationPose&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FInertializationPose&)",
    "insertText": "operator(FInertializationPose&&)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FCompactPose& Pose, const FBlendedCurve& InCurves, const FTransform& InComponentTransform, const FName& InAttachParentName, float InDeltaTime)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (} ; PRAGMA_DISABLE_DEPRECATION_WARNINGS template<> struct TUseBitwiseSwap<FInertializationPose> { enum { Value = false } ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS struct FInertializationSparsePose { struct FAnimNode_Inertialization ; struct FAnimNode_DeadBlending ; private : FTransform ComponentTransform ; bool bHasRootMotion = false ; FTransform RootMotionDelta ; TArray<int32> BoneIndices ; TArray<FVector> BoneTranslations ; TArray<FQuat> BoneRotations ; TArray<FVector> BoneScales ; FInertializationCurve Curves ; FName AttachParentName = NAME_None ; float DeltaTime = 0 . 0 f ; void)",
    "insertText": "InitFrom(const FCompactPose& Pose, const FBlendedCurve& InCurves, const UE::Anim::FStackAttributeContainer& Attributes, const FTransform& InComponentTransform, const FName InAttachParentName, const float InDeltaTime)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT() struct UE_DEPRECATED(5.4, \"Internal private pose difference storage is now used by inertialization.\")"
  },
  {
    "label": "FInertializationBoneDiff()",
    "kind": "Method",
    "detail": "Function (FVector RotationAxis ; FVector ScaleAxis ; float TranslationMagnitude ; float TranslationSpeed ; float RotationAngle ; float RotationSpeed ; float ScaleMagnitude ; float ScaleSpeed ;)",
    "insertText": "FInertializationBoneDiff() : TranslationDirection(FVector::ZeroVector) , RotationAxis(FVector::ZeroVector) , ScaleAxis(FVector::ZeroVector) , TranslationMagnitude(0.0f) , TranslationSpeed(0.0f) , RotationAngle(0.0f) , RotationSpeed(0.0f) , ScaleMagnitude(0.0f) , ScaleSpeed(0.0f)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "FInertializationCurveDiffElement()",
    "kind": "Method",
    "detail": "Function (TranslationDirection = FVector::ZeroVector ; RotationAxis = FVector::ZeroVector ; ScaleAxis = FVector::ZeroVector ; TranslationMagnitude = 0 . 0 f ; TranslationSpeed = 0 . 0 f ; RotationAngle = 0 . 0 f ; RotationSpeed = 0 . 0 f ; ScaleMagnitude = 0 . 0 f ; ScaleSpeed = 0 . 0 f ; } } ; struct FInertializationCurveDiffElement : public UE::Anim::FCurveElement { float Delta = 0 . 0 f ; float Derivative = 0 . 0 f ;)",
    "insertText": "FInertializationCurveDiffElement()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FInertializationPoseDiff() : InertializationSpace(EInertializationSpace::Default)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(uint32 NumBonesSlack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (BoneDiffs .)",
    "insertText": "Empty(NumBonesSlack)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (InertializationSpace = EInertializationSpace::Default ; } PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "InitFrom(const FCompactPose& Pose, const FBlendedCurve& Curves, const FTransform& ComponentTransform, const FName& AttachParentName, const FInertializationPose& Prev1, const FInertializationPose& Prev2, const UE::Anim::FCurveFilter& CurveFilter)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTo(FCompactPose& Pose, FBlendedCurve& Curves, float InertializationElapsedTime, float InertializationDuration, TArrayView<const float> InertializationDurationPerBone)"
  },
  {
    "label": "GetInertializationSpace()",
    "kind": "Method",
    "detail": "Function (EInertializationSpace)",
    "insertText": "GetInertializationSpace()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = Links)"
  },
  {
    "label": "FAnimNode_Inertialization()",
    "kind": "Method",
    "detail": "Function (public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FAnimNode_Inertialization()"
  },
  {
    "label": "FAnimNode_Inertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNode_Inertialization(const FAnimNode_Inertialization&)"
  },
  {
    "label": "FAnimNode_Inertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNode_Inertialization(FAnimNode_Inertialization&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Inertialization&)",
    "insertText": "operator(const FAnimNode_Inertialization&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimNode_Inertialization&)",
    "insertText": "operator(FAnimNode_Inertialization&&)"
  },
  {
    "label": "RequestInertialization()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "RequestInertialization(float Duration, const UBlendProfile* BlendProfile)"
  },
  {
    "label": "RequestInertialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInertialization(const FInertializationRequest& InertializationRequest)"
  },
  {
    "label": "LogRequestError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRequestError(const FAnimationUpdateContext& Context, const int32 NodePropertyIndex)"
  },
  {
    "label": "LogRequestError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRequestError(const FAnimationUpdateContext& Context, const FPoseLinkBase& RequesterPoseLink)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "NeedsDynamicReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsDynamicReset()"
  },
  {
    "label": "ResetDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamics(ETeleportType InTeleportType)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS private : void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FCompactPose& InPose, const FBlendedCurve& InCurves, const UE::Anim::FStackAttributeContainer& InAttributes, const FTransform& ComponentTransform, const FName AttachParentName, const FInertializationSparsePose& PreviousPose1, const FInertializationSparsePose& PreviousPose2)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTo(FCompactPose& InOutPose, FBlendedCurve& InOutCurves, UE::Anim::FStackAttributeContainer& InOutAttributes)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (FGraphTraversalCounter UpdateCounter ; EInertializationState InertializationState = EInertializationState::Inactive ; float InertializationElapsedTime = 0 . 0 f ; float InertializationDuration = 0 . 0 f ; TCustomBoneIndexArray<float,FSkeletonPoseBoneIndex> InertializationDurationPerBone ; float InertializationMaxDuration = 0 . 0 f ; float InertializationDeficit = 0 . 0 f ; TArray<int32> BoneIndices ; TArray<FVector3f> BoneTranslationDiffDirection ; TArray<float> BoneTranslationDiffMagnitude ; TArray<float> BoneTranslationDiffSpeed ; TArray<FVector3f> BoneRotationDiffAxis ; TArray<float> BoneRotationDiffAngle ; TArray<float> BoneRotationDiffSpeed ; TArray<FVector3f> BoneScaleDiffAxis ; TArray<float> BoneScaleDiffMagnitude ; TArray<float> BoneScaleDiffSpeed ; FVector3f RootTranslationVelocityDiffDirection ; float RootTranslationVelocityDiffMagnitude ; FVector3f RootRotationVelocityDiffDirection ; float RootRotationVelocityDiffMagnitude ; FVector3f RootScaleVelocityDiffDirection ; float RootScaleVelocityDiffMagnitude ; TBaseBlendedCurve<FDefaultAllocator,FInertializationCurveDiffElement> CurveDiffs ; TBaseBlendedCurve<TInlineAllocator<8>,UE::Anim::FCurveElement> PoseCurveData ; public : class USkeleton*)",
    "insertText": "GetSkeleton(bool& bInvalidSkeletonIsError, const IPropertyHandle* PropertyHandle)"
  }
]