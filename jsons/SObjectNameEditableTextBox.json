[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectNameEditSinkRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectNameEditSinkRegistry"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "SObjectNameEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectNameEditableTextBox"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / SlateSprings . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" EditorWidgetsModule . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; class SInlineEditableTextBlock ; class UObject ; namespace UE::EditorWidgets { class FObjectNameEditSinkRegistry ; } struct FGeometry ; class SObjectNameEditableTextBox : public IObjectNameEditableTextBox { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SObjectNameEditableTextBox)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TArray<TWeakObjectPtr<UObject>>, Objects) SLATE_ARGUMENT(TWeakPtr<UE::EditorWidgets::FObjectNameEditSinkRegistry>, Registry) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "UpdateHighlightSpringState()",
    "kind": "Method",
    "detail": "Function (private : EActiveTimerReturnType)",
    "insertText": "UpdateHighlightSpringState(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "GetNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNameText()"
  },
  {
    "label": "GetNameVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNameVisibility()"
  },
  {
    "label": "GetNameTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNameTooltipText()"
  },
  {
    "label": "OnNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommitted(const FText& NewText, ETextCommit::Type InTextCommit)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetObjectDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetObjectDisplayName(TWeakObjectPtr<UObject> Object)"
  }
]