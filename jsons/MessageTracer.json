[
  {
    "label": "IMessageInterceptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageInterceptor"
  },
  {
    "label": "IMessageReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageReceiver"
  },
  {
    "label": "IMessageSubscription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageSubscription"
  },
  {
    "label": "IMessageTracerBreakpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageTracerBreakpoint"
  },
  {
    "label": "FMessageTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageTracer"
  },
  {
    "label": "FMessageTracer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Containers / Queue . h \" # include \" IMessageContext . h \" # include \" IMessageTracer . h \" # include \" Containers / Ticker . h \" class IMessageInterceptor ; class IMessageReceiver ; class IMessageSubscription ; class IMessageTracerBreakpoint ; class FMessageTracer : public IMessageTracer { public :)",
    "insertText": "FMessageTracer()"
  },
  {
    "label": "TraceAddedInterceptor()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TraceAddedInterceptor(const TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe>& Interceptor, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "TraceAddedRecipient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceAddedRecipient(const FMessageAddress& Address, const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Recipient)"
  },
  {
    "label": "TraceAddedSubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceAddedSubscription(const TSharedRef<IMessageSubscription, ESPMode::ThreadSafe>& Subscription)"
  },
  {
    "label": "TraceDispatchedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceDispatchedMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Recipient, bool Async)"
  },
  {
    "label": "TraceHandledMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceHandledMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const TSharedRef<IMessageReceiver, ESPMode::ThreadSafe>& Recipient)"
  },
  {
    "label": "TraceInterceptedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceInterceptedMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe>& Interceptor)"
  },
  {
    "label": "TraceRemovedInterceptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceRemovedInterceptor(const TSharedRef<IMessageInterceptor, ESPMode::ThreadSafe>& Interceptor, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "TraceRemovedRecipient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceRemovedRecipient(const FMessageAddress& Address)"
  },
  {
    "label": "TraceRemovedSubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceRemovedSubscription(const TSharedRef<IMessageSubscription, ESPMode::ThreadSafe>& Subscription, const FTopLevelAssetPath& MessageType)"
  },
  {
    "label": "TraceRoutedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceRoutedMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "TraceSentMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSentMessage(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "Break()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Break()"
  },
  {
    "label": "Continue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Continue()"
  },
  {
    "label": "GetEndpoints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetEndpoints(TArray<TSharedPtr<FMessageTracerEndpointInfo>>& OutEndpoints)"
  },
  {
    "label": "GetMessages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMessages(TArray<TSharedPtr<FMessageTracerMessageInfo>>& OutMessages)"
  },
  {
    "label": "GetMessageTypes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMessageTypes(TArray<TSharedPtr<FMessageTracerTypeInfo>>& OutTypes)"
  },
  {
    "label": "HasMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMessages()"
  },
  {
    "label": "IsBreaking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBreaking()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FMessageTracer, IMessageTracer::FOnMessageAdded, FOnMessageAdded) virtual FOnMessageAdded& OnMessageAdded()"
  },
  {
    "label": "Step()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Step()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "ResetMessages()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ResetMessages()"
  },
  {
    "label": "ShouldBreak()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBreak(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : TMap<FMessageAddress,TSharedPtr<FMessageTracerEndpointInfo>> AddressesToEndpointInfos ; bool Breaking ; TArray<TSharedPtr<IMessageTracerBreakpoint,ESPMode::ThreadSafe>> Breakpoints ; FEvent* ContinueEvent ; TMap<FGuid,TSharedPtr<FMessageTracerInterceptorInfo>> Interceptors ; TMap<FGuid,TSharedPtr<FMessageTracerEndpointInfo>> RecipientsToEndpointInfos ; TMap<TSharedPtr<IMessageContext,ESPMode::ThreadSafe>,TSharedPtr<FMessageTracerMessageInfo>> MessageInfos ; TMap<FTopLevelAssetPath,TSharedPtr<FMessageTracerTypeInfo>> MessageTypes ; bool ResetPending ; bool Running ; FTSTicker::FDelegateHandle TickDelegateHandle ; TQueue<TFunction<)",
    "insertText": "void()"
  }
]