[
  {
    "label": "FQuatFixed48NoW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuatFixed48NoW"
  },
  {
    "label": "FQuatFixed32NoW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuatFixed32NoW"
  },
  {
    "label": "FQuatFloat96NoW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuatFloat96NoW"
  },
  {
    "label": "FVectorFixed48",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorFixed48"
  },
  {
    "label": "FVectorIntervalFixed32NoW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVectorIntervalFixed32NoW"
  },
  {
    "label": "FQuatIntervalFixed32NoW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuatIntervalFixed32NoW"
  },
  {
    "label": "FQuatFloat32NoW",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuatFloat32NoW"
  },
  {
    "label": "FAnimationCompression_PerTrackUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationCompression_PerTrackUtils"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / FloatPacker . h \" # include \" Animation / AnimEnums . h \" # include \" EngineLogs . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAnimationCompression, Display, All)"
  },
  {
    "label": "TRANSLATION_ZEROING_THRESHOLD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRANSLATION_ZEROING_THRESHOLD(0.0001f) #define QUATERNION_ZEROING_THRESHOLD (0.0003f) #define SCALE_ZEROING_THRESHOLD (0.000001f) #define END_EFFECTOR_DUMMY_BONE_LENGTH_SOCKET (50.f) #define END_EFFECTOR_DUMMY_BONE_LENGTH (5.f) #define Quant16BitDiv (32767.f) #define Quant16BitFactor (32767.f) #define Quant16BitOffs (32767) #define Quant10BitDiv (511.f) #define Quant10BitFactor (511.f) #define Quant10BitOffs (511) #define Quant11BitDiv (1023.f) #define Quant11BitFactor (1023.f) #define Quant11BitOffs (1023)"
  },
  {
    "label": "UnalignedRead()",
    "kind": "Method",
    "detail": "Function (namespace AnimationCompressionUtils { template<ValueType> ValueType)",
    "insertText": "UnalignedRead(const void* Ptr)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_UNALIGNED_LOADS return* reinterpret_cast<const)",
    "insertText": "ValueType(Ptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (# else ValueType Result ;)",
    "insertText": "memcpy(&Result, Ptr, sizeof(ValueType))"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (} template<> FVector3d Interpolate<)",
    "insertText": "FVector3d(const FVector3d& A, const FVector3d& B, float Alpha)"
  },
  {
    "label": "FQuat4d()",
    "kind": "Method",
    "detail": "Function (} template<> FQuat4d Interpolate<)",
    "insertText": "FQuat4d(const FQuat4d& A, const FQuat4d& B, float Alpha)"
  },
  {
    "label": "FastLerp()",
    "kind": "Method",
    "detail": "Function (FQuat4d result =)",
    "insertText": "FastLerp(A, B, Alpha)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "Normalize()"
  },
  {
    "label": "FQuatFixed48NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuatFixed48NoW(const FQuat4f& Quat)"
  },
  {
    "label": "FromQuat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromQuat(Quat)"
  },
  {
    "label": "FromQuat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromQuat(const FQuat4f& Quat)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FQuat4f)",
    "insertText": "Temp(Quat)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(uint16)((int32)(Temp.X * Quant16BitFactor) + Quant16BitOffs)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Y(uint16)((int32)(Temp.Y * Quant16BitFactor) + Quant16BitOffs)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Z(uint16)((int32)(Temp.Z * Quant16BitFactor) + Quant16BitOffs)"
  },
  {
    "label": "ToQuat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToQuat(FQuat4f& Out)"
  },
  {
    "label": "FX()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "FX((int32)X - (int32)Quant16BitOffs)"
  },
  {
    "label": "FY()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "FY((int32)Y - (int32)Quant16BitOffs)"
  },
  {
    "label": "FZ()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "FZ((int32)Z - (int32)Quant16BitOffs)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const float WSquared = 1 . f - FX* FX - FY* FY - FZ* FZ ; Out . X = FX ; Out . Y = FY ; Out . Z = FZ ; Out . W = WSquared> 0 . f ?)",
    "insertText": "Sqrt(WSquared)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FQuatFixed48NoW& Quat)"
  },
  {
    "label": "FQuatFixed32NoW()",
    "kind": "Method",
    "detail": "Function (Ar<<Quat . X ; Ar<<Quat . Y ; Ar<<Quat . Z ; return Ar ; } } ; class FQuatFixed32NoW { public : uint32 Packed ;)",
    "insertText": "FQuatFixed32NoW()"
  },
  {
    "label": "FQuatFixed32NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuatFixed32NoW(const FQuat4f& Quat)"
  },
  {
    "label": "PackedX()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "PackedX(int32)(Temp.X * Quant11BitFactor)"
  },
  {
    "label": "PackedY()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "PackedY(int32)(Temp.Y * Quant11BitFactor)"
  },
  {
    "label": "PackedZ()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "PackedZ(int32)(Temp.Z * Quant10BitFactor)"
  },
  {
    "label": "Packed()",
    "kind": "Method",
    "detail": "Function (const uint32 XShift = 2 1 ; const uint32 YShift = 1 0 ;)",
    "insertText": "Packed(PackedX << XShift) | (PackedY << YShift) | (PackedZ)"
  },
  {
    "label": "ToQuat()",
    "kind": "Method",
    "detail": "Function (} template<bool bIsDataAligned> FQuat4f)",
    "insertText": "ToQuat(const uint32* PackedValue)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 XShift = 2 1 ; const uint32 YShift = 1 0 ; const uint32 ZMask = 0 x000003ff ; const uint32 YMask = 0 x001ffc00 ; const uint32 XMask = 0 xffe00000 ; const uint32 Packed = bIsDataAligned ?* PackedValue : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "uint32(PackedValue)"
  },
  {
    "label": "UnpackedY()",
    "kind": "Method",
    "detail": "Function (const uint32 UnpackedX = Packed>> XShift ; const uint32)",
    "insertText": "UnpackedY(Packed & YMask)"
  },
  {
    "label": "UnpackedZ()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "UnpackedZ(Packed & ZMask)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "X((int32)UnpackedX - (int32)Quant11BitOffs)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Y((int32)UnpackedY - (int32)Quant11BitOffs)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Z((int32)UnpackedZ - (int32)Quant10BitOffs)"
  },
  {
    "label": "FQuat4f()",
    "kind": "Method",
    "detail": "Function (const float WSquared = 1 . f - X* X - Y* Y - Z* Z ; return)",
    "insertText": "FQuat4f(X, Y, Z, WSquared > 0.f ? FMath::Sqrt(WSquared) : 0.f)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (Out = ToQuat<)",
    "insertText": "true(&Packed)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FQuatFixed32NoW& Quat)"
  },
  {
    "label": "FQuatFloat96NoW()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FQuatFloat96NoW()"
  },
  {
    "label": "FQuatFloat96NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuatFloat96NoW(const FQuat4f& Quat)"
  },
  {
    "label": "FQuatFloat96NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuatFloat96NoW(float InX, float InY, float InZ) : X( InX ) , Y( InY ) , Z( InZ)"
  },
  {
    "label": "UE_REAL_TO_FLOAT()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "UE_REAL_TO_FLOAT(Temp.X)"
  },
  {
    "label": "UE_REAL_TO_FLOAT()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "UE_REAL_TO_FLOAT(Temp.Y)"
  },
  {
    "label": "UE_REAL_TO_FLOAT()",
    "kind": "Method",
    "detail": "Function (Z =)",
    "insertText": "UE_REAL_TO_FLOAT(Temp.Z)"
  },
  {
    "label": "ToQuat()",
    "kind": "Method",
    "detail": "Function (} template<bool bIsDataAligned = true> FQuat4f)",
    "insertText": "ToQuat(const float* Values)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float X = bIsDataAligned ?* Values + + : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "float(Values++)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS Out = ToQuat<)",
    "insertText": "true(XYZ)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } FArchive&)",
    "insertText": "operator(FArchive& Ar, FQuatFloat96NoW& Quat)"
  },
  {
    "label": "FVectorFixed48()",
    "kind": "Method",
    "detail": "Function (Ar<<Quat . X ; Ar<<Quat . Y ; Ar<<Quat . Z ; return Ar ; } } ; class FVectorFixed48 { public : uint16 X ; uint16 Y ; uint16 Z ;)",
    "insertText": "FVectorFixed48()"
  },
  {
    "label": "FVectorFixed48()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVectorFixed48(const FVector3f& Vec)"
  },
  {
    "label": "FromVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromVector(Vec)"
  },
  {
    "label": "FromVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromVector(const FVector3f& Vec)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "Temp(Vec / 128.0f)"
  },
  {
    "label": "ToVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToVector(FVector3f& Out)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Out . X = FX* 1 2 8 . 0 f ; Out . Y = FY* 1 2 8 . 0 f ; Out . Z = FZ* 1 2 8 . 0 f ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FVectorFixed48& Vec)"
  },
  {
    "label": "FVectorIntervalFixed32NoW()",
    "kind": "Method",
    "detail": "Function (Ar<<Vec . X ; Ar<<Vec . Y ; Ar<<Vec . Z ; return Ar ; } } ; class FVectorIntervalFixed32NoW { public : uint32 Packed ;)",
    "insertText": "FVectorIntervalFixed32NoW()"
  },
  {
    "label": "FVectorIntervalFixed32NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVectorIntervalFixed32NoW(const FVector3f& Value, const float* Mins, const float *Ranges)"
  },
  {
    "label": "FromVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromVector(Value, Mins, Ranges)"
  },
  {
    "label": "FromVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromVector(const FVector3f& Value, const float* Mins, const float *Ranges)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "Temp(Value)"
  },
  {
    "label": "PackedX()",
    "kind": "Method",
    "detail": "Function (Temp . X - = Mins [ 0 ] ; Temp . Y - = Mins [ 1 ] ; Temp . Z - = Mins [ 2 ] ; const uint32)",
    "insertText": "PackedX(int32)((Temp.X / Ranges[0]) * Quant10BitFactor)"
  },
  {
    "label": "PackedY()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "PackedY(int32)((Temp.Y / Ranges[1]) * Quant11BitFactor)"
  },
  {
    "label": "PackedZ()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "PackedZ(int32)((Temp.Z / Ranges[2]) * Quant11BitFactor)"
  },
  {
    "label": "Packed()",
    "kind": "Method",
    "detail": "Function (const uint32 ZShift = 2 1 ; const uint32 YShift = 1 0 ;)",
    "insertText": "Packed(PackedZ << ZShift) | (PackedY << YShift) | (PackedX)"
  },
  {
    "label": "ToVector()",
    "kind": "Method",
    "detail": "Function (} template<bool bIsDataAligned = true> FVector3f)",
    "insertText": "ToVector(const float* Mins, const float *Ranges, const uint32* PackedValue)"
  },
  {
    "label": "UnpackedX()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "UnpackedX(Packed & XMask)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "X((((int32)UnpackedX - (int32)Quant10BitOffs) / Quant10BitDiv) * Ranges[0] + Mins[0])"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Y((((int32)UnpackedY - (int32)Quant11BitOffs) / Quant11BitDiv) * Ranges[1] + Mins[1])"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Z((((int32)UnpackedZ - (int32)Quant11BitOffs) / Quant11BitDiv) * Ranges[2] + Mins[2])"
  },
  {
    "label": "ToVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToVector(FVector3f& Out, const float* Mins, const float *Ranges)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (Out = ToVector<)",
    "insertText": "true(Mins, Ranges, &Packed)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FVectorIntervalFixed32NoW& Value)"
  },
  {
    "label": "FQuatIntervalFixed32NoW()",
    "kind": "Method",
    "detail": "Function (Ar<<Value . Packed ; return Ar ; } } ; class FQuatIntervalFixed32NoW { public : uint32 Packed ;)",
    "insertText": "FQuatIntervalFixed32NoW()"
  },
  {
    "label": "FQuatIntervalFixed32NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuatIntervalFixed32NoW(const FQuat4f& Quat, const float* Mins, const float *Ranges)"
  },
  {
    "label": "FromQuat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromQuat(Quat, Mins, Ranges)"
  },
  {
    "label": "FromQuat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromQuat(const FQuat4f& Quat, const float* Mins, const float *Ranges)"
  },
  {
    "label": "PackedX()",
    "kind": "Method",
    "detail": "Function (Temp . X - = Mins [ 0 ] ; Temp . Y - = Mins [ 1 ] ; Temp . Z - = Mins [ 2 ] ; const uint32)",
    "insertText": "PackedX(int32)((Temp.X / Ranges[0]) * Quant11BitFactor)"
  },
  {
    "label": "PackedZ()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "PackedZ(int32)((Temp.Z / Ranges[2]) * Quant10BitFactor)"
  },
  {
    "label": "ToQuat()",
    "kind": "Method",
    "detail": "Function (} template<bool bIsDataAligned> FQuat4f)",
    "insertText": "ToQuat(const float* Mins, const float *Ranges, const uint32* PackedValue)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "X((((int32)UnpackedX - (int32)Quant11BitOffs) / Quant11BitDiv) * Ranges[0] + Mins[0])"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Z((((int32)UnpackedZ - (int32)Quant10BitOffs) / Quant10BitDiv) * Ranges[2] + Mins[2])"
  },
  {
    "label": "ToQuat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToQuat(FQuat4f& Out, const float* Mins, const float *Ranges)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FQuatIntervalFixed32NoW& Quat)"
  },
  {
    "label": "FQuatFloat32NoW()",
    "kind": "Method",
    "detail": "Function (Ar<<Quat . Packed ; return Ar ; } } ; class FQuatFloat32NoW { public : uint32 Packed ;)",
    "insertText": "FQuatFloat32NoW()"
  },
  {
    "label": "FQuatFloat32NoW()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQuatFloat32NoW(const FQuat4f& Quat)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (TFloatPacker<3,7,true> Packer7e3 ; TFloatPacker<3,6,true> Packer6e3 ; const uint32 PackedX = Packer7e3 .)",
    "insertText": "Encode(Temp.X)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (const uint32 PackedY = Packer7e3 .)",
    "insertText": "Encode(Temp.Y)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (const uint32 PackedZ = Packer6e3 .)",
    "insertText": "Encode(Temp.Z)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (TFloatPacker<3,7,true> Packer7e3 ; TFloatPacker<3,6,true> Packer6e3 ; const float X = Packer7e3 .)",
    "insertText": "Decode(UnpackedX)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (const float Y = Packer7e3 .)",
    "insertText": "Decode(UnpackedY)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (const float Z = Packer6e3 .)",
    "insertText": "Decode(UnpackedZ)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FQuatFloat32NoW& Quat)"
  },
  {
    "label": "DecompressRotation()",
    "kind": "Method",
    "detail": "Function (Ar<<Quat . Packed ; return Ar ; } } ; template<int32 FORMAT,bool bIsDataAligned = true> void)",
    "insertText": "DecompressRotation(FQuat4f& Out, const uint8* RESTRICT TopOfStream, const uint8* RESTRICT KeyData)"
  },
  {
    "label": "Keys()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "Keys(const float*)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float X = bIsDataAligned ? Keys [ 0 ] : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "float(&Keys[0])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Y = bIsDataAligned ? Keys [ 1 ] : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "float(&Keys[1])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Z = bIsDataAligned ? Keys [ 2 ] : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "float(&Keys[2])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float W = bIsDataAligned ? Keys [ 3 ] : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "float(&Keys[3])"
  },
  {
    "label": "FQuat4f()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FQuat4f(X, Y, Z, W)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FORMAT == ACF_Float96NoW)"
  },
  {
    "label": "bIsDataAligned()",
    "kind": "Method",
    "detail": "Function (Out = FQuatFloat96NoW::ToQuat<)",
    "insertText": "bIsDataAligned((const float*)KeyData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FORMAT == ACF_Fixed32NoW)"
  },
  {
    "label": "bIsDataAligned()",
    "kind": "Method",
    "detail": "Function (Out = FQuatFixed32NoW::ToQuat<)",
    "insertText": "bIsDataAligned((const uint32*)KeyData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FORMAT == ACF_Fixed48NoW)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FORMAT == ACF_IntervalFixed32NoW)"
  },
  {
    "label": "Mins()",
    "kind": "Method",
    "detail": "Function (const float* RESTRICT)",
    "insertText": "Mins(float*)"
  },
  {
    "label": "Ranges()",
    "kind": "Method",
    "detail": "Function (const float* RESTRICT)",
    "insertText": "Ranges(float*)(TopOfStream+sizeof(float)*3)"
  },
  {
    "label": "bIsDataAligned()",
    "kind": "Method",
    "detail": "Function (Out = FQuatIntervalFixed32NoW::ToQuat<)",
    "insertText": "bIsDataAligned(Mins, Ranges, (const uint32*)KeyData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FORMAT == ACF_Float32NoW)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FORMAT == ACF_Identity)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Out = FQuat4f::Identity ; } else {)",
    "insertText": "UE_LOG(LogAnimation, Fatal, TEXT(\"%i: unknown or unsupported animation compression format\"), (int32)FORMAT)"
  },
  {
    "label": "DecompressTranslation()",
    "kind": "Method",
    "detail": "Function (Out = FQuat4f::Identity ; } } template<int32 FORMAT,bool bIsDataAligned = true> void)",
    "insertText": "DecompressTranslation(FVector3f& Out, const uint8* RESTRICT TopOfStream, const uint8* RESTRICT KeyData)"
  },
  {
    "label": "bIsDataAligned()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "bIsDataAligned((FVector3f*)KeyData) : AnimationCompressionUtils::UnalignedRead<FVector3f>(KeyData)"
  },
  {
    "label": "DecompressScale()",
    "kind": "Method",
    "detail": "Function (Out = FVector3f::ZeroVector ; } } template<int32 FORMAT,bool bIsDataAligned = true> void)",
    "insertText": "DecompressScale(FVector3f& Out, const uint8* RESTRICT TopOfStream, const uint8* RESTRICT KeyData)"
  },
  {
    "label": "CompressFixed16()",
    "kind": "Method",
    "detail": "Function (Out = FVector3f::ZeroVector ; } } class FAnimationCompression_PerTrackUtils { public : uint16)",
    "insertText": "CompressFixed16(float Value, int32 Log2MaxValue = 0)"
  },
  {
    "label": "QuantOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "QuantOffset(1 << (15 - Log2MaxValue))"
  },
  {
    "label": "QuantFactor()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "QuantFactor(float)(QuantOffset >> Log2MaxValue)"
  },
  {
    "label": "DecompressFixed16()",
    "kind": "Method",
    "detail": "Function (} template<int32 Log2MaxValue> float)",
    "insertText": "DecompressFixed16(uint16 Value)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (const float InvQuantFactor = 1 . 0)",
    "insertText": "f(float)(QuantOffset >> Log2MaxValue)"
  },
  {
    "label": "MakeHeader()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MakeHeader(const int32 NumKeys, const int32 KeyFormat, const int32 KeyFlags, bool bReallyNeedsFrameTable)"
  },
  {
    "label": "GetKeyCountFromHeader()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetKeyCountFromHeader(int32 Header)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const int32 CompressedRotationStrides [ ACF_MAX ] ; const uint8 PerTrackNumComponentTable [ ACF_MAX* 8 ] ; KeyComponentSize = CompressedRotationStrides [ KeyFormat ] ; FixedComponentSize =)",
    "insertText": "sizeof(float)"
  },
  {
    "label": "PerTrackNumComponentTable()",
    "kind": "Method",
    "detail": "Function (const int32 ComponentLookup =)",
    "insertText": "PerTrackNumComponentTable(FormatFlags & 0x7) | (KeyFormat << 3)"
  },
  {
    "label": "GetByteSizesFromFormat()",
    "kind": "Method",
    "detail": "Function (FixedComponentCount = 0 ; KeyComponentCount = ComponentLookup ; } else { FixedComponentCount = ComponentLookup ; KeyComponentCount = 1 ; } } void)",
    "insertText": "GetByteSizesFromFormat(int32 KeyFormat, int32 FormatFlags, int32& BytesPerKey, int32& FixedBytes)"
  },
  {
    "label": "GetAllSizesFromFormat()",
    "kind": "Method",
    "detail": "Function (int32 FixedComponentSize = 0 ; int32 FixedComponentCount = 0 ; int32 KeyComponentSize = 0 ; int32 KeyComponentCount = 0 ;)",
    "insertText": "GetAllSizesFromFormat(KeyFormat, FormatFlags, KeyComponentCount, KeyComponentSize, FixedComponentCount, FixedComponentSize)"
  },
  {
    "label": "DecomposeHeader()",
    "kind": "Method",
    "detail": "Function (BytesPerKey = KeyComponentCount* KeyComponentSize ; FixedBytes = FixedComponentCount* FixedComponentSize ; } void)",
    "insertText": "DecomposeHeader(int32 Header, int32& KeyFormat, int32& NumKeys, int32& FormatFlags)"
  },
  {
    "label": "FormatFlags()",
    "kind": "Method",
    "detail": "Function (NumKeys = Header& 0 x00FFFFFF ;)",
    "insertText": "FormatFlags(Header >> 24)"
  },
  {
    "label": "KeyFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyFormat(Header >> 28)"
  },
  {
    "label": "DecomposeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecomposeHeader(int32 Header, int32& KeyFormat, int32& NumKeys, int32& FormatFlags, int32& BytesPerKey, int32& FixedBytes)"
  },
  {
    "label": "GetByteSizesFromFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetByteSizesFromFormat(KeyFormat, FormatFlags, BytesPerKey, FixedBytes)"
  },
  {
    "label": "DecompressTranslation()",
    "kind": "Method",
    "detail": "Function (} template<bool bIsDataAligned = true> void)",
    "insertText": "DecompressTranslation(int32 Format, int32 FormatFlags, FVector3f& Out, const uint8* RESTRICT TopOfStream, const uint8* RESTRICT KeyData)"
  },
  {
    "label": "TypedKeyData()",
    "kind": "Method",
    "detail": "Function (} else { const float* RESTRICT)",
    "insertText": "TypedKeyData(const float*)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Out . X = bIsDataAligned ?* TypedKeyData + + : AnimationCompressionUtils::UnalignedRead<)",
    "insertText": "float(TypedKeyData++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Out . X = 0 . 0 f ; })",
    "insertText": "if(FormatFlags & 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Out . Y = 0 . 0 f ; })",
    "insertText": "if(FormatFlags & 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Out . Z = 0 . 0 f ; } } } else)",
    "insertText": "if(Format == ACF_IntervalFixed32NoW)"
  },
  {
    "label": "SourceBounds()",
    "kind": "Method",
    "detail": "Function (const float* RESTRICT)",
    "insertText": "SourceBounds(float*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Mins [ 3 ] = { 0 . 0 f,0 . 0 f,0 . 0 f } ; float Ranges [ 3 ] = { 0 . 0 f,0 . 0 f,0 . 0 f } ;)",
    "insertText": "if(FormatFlags & 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Format == ACF_Fixed48NoW)"
  },
  {
    "label": "TypedKeyData()",
    "kind": "Method",
    "detail": "Function (const uint16* RESTRICT)",
    "insertText": "TypedKeyData(const uint16*)"
  },
  {
    "label": "LogScale()",
    "kind": "Method",
    "detail": "Function (Out . X = FAnimationCompression_PerTrackUtils::DecompressFixed16<)",
    "insertText": "LogScale(*TypedKeyData++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Out . Z = 0 . 0 f ; } } else)",
    "insertText": "if(Format == ACF_Identity)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (Out = FVector3f::ZeroVector ; } else {)",
    "insertText": "UE_LOG(LogAnimation, Fatal, TEXT(\"%i: unknown or unsupported animation compression format\"), (int32)Format)"
  },
  {
    "label": "DecompressRotation()",
    "kind": "Method",
    "detail": "Function (Out = FVector3f::ZeroVector ; } } template<bool bIsDataAligned = true> void)",
    "insertText": "DecompressRotation(int32 Format, int32 FormatFlags, FQuat4f& Out, const uint8* RESTRICT TopOfStream, const uint8* RESTRICT KeyData)"
  },
  {
    "label": "Xa()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Xa(FormatFlags & 1) ? (float)(bIsDataAligned ? (*TypedKeyData++) : AnimationCompressionUtils::UnalignedRead<uint16>(TypedKeyData++))"
  },
  {
    "label": "Ya()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Ya(FormatFlags & 2) ? (float)(bIsDataAligned ? (*TypedKeyData++) : AnimationCompressionUtils::UnalignedRead<uint16>(TypedKeyData++))"
  },
  {
    "label": "Za()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Za(FormatFlags & 4) ? (float)(bIsDataAligned ? (*TypedKeyData++) : AnimationCompressionUtils::UnalignedRead<uint16>(TypedKeyData++))"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "X(Xa - 32767.0f)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (const float XX = X* X ; const float)",
    "insertText": "Y(Ya - 32767.0f)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (const float YY = Y* Y ; const float)",
    "insertText": "Z(Za - 32767.0f)"
  },
  {
    "label": "FloatSelect()",
    "kind": "Method",
    "detail": "Function (const float ZZ = Z* Z ; const float WSquared = 1 . 0 f - XX - YY - ZZ ; const float W =)",
    "insertText": "FloatSelect(WSquared, FMath::Sqrt(WSquared), 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Format == ACF_Float96NoW)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Format == ACF_Float32NoW)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Format == ACF_Fixed32NoW)"
  },
  {
    "label": "DecompressScale()",
    "kind": "Method",
    "detail": "Function (Out = FQuat4f::Identity ; } } template<bool bIsDataAligned = true> void)",
    "insertText": "DecompressScale(int32 Format, int32 FormatFlags, FVector3f& Out, const uint8* RESTRICT TopOfStream, const uint8* RESTRICT KeyData)"
  }
]