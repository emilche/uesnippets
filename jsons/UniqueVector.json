[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UniqueVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniqueVector"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_UNIQUEVECTOR_H # define LLVM_ADT_UNIQUEVECTOR_H # include<cassert> # include<map> # include<vector> namespace llvm { template<class T> class UniqueVector { public : typedef std::vector<T> VectorType ; typedef VectorType::iterator iterator ; typedef VectorType::const_iterator const_iterator ; private : std::map<T,unsigned> Map ; VectorType Vector ; public : unsigned)",
    "insertText": "insert(const T &Entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned& Val = Map [ Entry ] ;)",
    "insertText": "if(Val)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (Val = static_cast<)",
    "insertText": "unsigned(Vector.size())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "push_back(Entry)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::map<T,unsigned>::const_iterator MI = Map .)",
    "insertText": "find(Entry)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ID-1 < size() && \"ID is 0 or out of range!\")"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "clear()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "resize(0, 0)"
  }
]