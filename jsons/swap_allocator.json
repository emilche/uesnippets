[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_SWAP_ALLOCATOR_H # define _LIBCPP___MEMORY_SWAP_ALLOCATOR_H # include<__config> # include<__memory / allocator_traits . h> # include<__type_traits / integral_constant . h> # include<__utility / swap . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <typename _Alloc> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void __swap_allocator(_Alloc& __a1, _Alloc& __a2, true_type) #if _LIBCPP_STD_VER > 11 _NOEXCEPT #else _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using _VSTD::swap ;)",
    "insertText": "swap(__a1, __a2)"
  },
  {
    "label": "__swap_allocator()",
    "kind": "Method",
    "detail": "Function (} template<_Alloc> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "__swap_allocator(_Alloc&, _Alloc&, false_type)"
  },
  {
    "label": "__swap_allocator()",
    "kind": "Method",
    "detail": "Function (} template<_Alloc> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "__swap_allocator(_Alloc& __a1, _Alloc& __a2) #if _LIBCPP_STD_VER > 11 _NOEXCEPT #else _NOEXCEPT_(__is_nothrow_swappable<_Alloc>::value)"
  },
  {
    "label": "__swap_allocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__swap_allocator(__a1, __a2, integral_constant<bool, allocator_traits<_Alloc>::propagate_on_container_swap::value>())"
  }
]