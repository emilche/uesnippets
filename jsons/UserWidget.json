[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "UDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDragDropOperation"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UUMGSequencePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUMGSequencePlayer"
  },
  {
    "label": "UUMGSequenceTickManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUMGSequenceTickManager"
  },
  {
    "label": "UWidgetAnimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetAnimation"
  },
  {
    "label": "UWidgetBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprintGeneratedClass"
  },
  {
    "label": "UWidgetTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetTree"
  },
  {
    "label": "UNamedSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNamedSlot"
  },
  {
    "label": "UUserWidgetExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidgetExtension"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMG_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UMG_API"
  },
  {
    "label": "FAnimationEventBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationEventBinding"
  },
  {
    "label": "FPaintContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintContext"
  },
  {
    "label": "FNamedSlotBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNamedSlotBinding"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "SObjectWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectWidget"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "TPlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPlayerState"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "IWidgetCompilerLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWidgetCompilerLog"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "FWidgetBlueprintCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintCompilerContext"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" Blueprint / WidgetChild . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectSaveContext . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Components / SlateWrapperTypes . h \" # include \" Components / Widget . h \" # include \" Components / NamedSlotInterface . h \" # include \" Engine / World . h \" # include \" GameFramework / PlayerController . h \" # include \" Engine / LocalPlayer . h \" # include \" Widgets / Layout / Anchors . h \" # include \" Logging / MessageLog . h \" # include \" Stats / Stats . h \" # include \" EngineStats . h \" # include \" SlateGlobals . h \" # include \" Animation / WidgetAnimationEvents . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Blueprint / WidgetBlueprintGeneratedClass . h \" # endif # include \" UserWidget . generated . h \" class Error ; class FSlateWindowElementList ; class UDragDropOperation ; class UTexture2D ; class UUMGSequencePlayer ; class UUMGSequenceTickManager ; class UWidgetAnimation ; class UWidgetBlueprintGeneratedClass ; class UWidgetTree ; class UNamedSlot ; class UUserWidgetExtension ; enum class EQueuedWidgetAnimationMode : uint8 { Play,PlayTo,Forward,Reverse,Stop,Pause,None,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(Transient)"
  },
  {
    "label": "FQueuedWidgetAnimationTransition()",
    "kind": "Method",
    "detail": "Function (EQueuedWidgetAnimationMode TransitionMode ; TOptional<float> StartAtTime ; TOptional<float> EndAtTime ; TOptional<int32> NumLoopsToPlay ; TOptional<EUMGSequencePlayMode::Type> PlayMode ; TOptional<float> PlaybackSpeed ; TOptional<bool> bRestoreState ;)",
    "insertText": "FQueuedWidgetAnimationTransition() : WidgetAnimation(nullptr) , TransitionMode(EQueuedWidgetAnimationMode::None)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Never = 0,Auto,} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FAnimationEventBinding() : Animation(nullptr) , Delegate() , AnimationEvent(EWidgetAnimationEvent::Started) , UserTag(NAME_None)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UMG_API FPaintContext()"
  },
  {
    "label": "FPaintContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPaintContext(const FGeometry& InAllottedGeometry, const FSlateRect& InMyCullingRect, FSlateWindowElementList& InOutDrawElements, const int32 InLayerId, const FWidgetStyle& InWidgetStyle, const bool bInParentEnabled) : AllottedGeometry(InAllottedGeometry) , MyCullingRect(InMyCullingRect) , OutDrawElements(InOutDrawElements) , LayerId(InLayerId) , WidgetStyle(InWidgetStyle) , bParentEnabled(bInParentEnabled) , MaxLayer(InLayerId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FPaintContext& Other)"
  },
  {
    "label": "FPaintContext()",
    "kind": "Method",
    "detail": "Function (FPaintContext* Ptr = this ; Ptr -> ~)",
    "insertText": "FPaintContext()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Ptr) FPaintContext(Other.AllottedGeometry, Other.MyCullingRect, Other.OutDrawElements, Other.LayerId, Other.WidgetStyle, Other.bParentEnabled)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FNamedSlotBinding() : Name(NAME_None) , Content(nullptr)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FillScreen,Custom,CustomOnScreen,Desired,DesiredOnScreen,} ; # endif)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnConstructEvent)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE(FOnInputAction)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnVisibilityChangedEvent, ESlateVisibility, InVisibility)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Abstract, editinlinenew, BlueprintType, Blueprintable, meta=( DontUseGenericSpawnObject=\"True\", DisableNativeTick) , MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UUserWidget()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UUserWidget(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DuplicateAndInitializeFromWidgetTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateAndInitializeFromWidgetTree(UWidgetTree* InWidgetTree, const TMap<FName, UWidget*>& NamedSlotContentToMerge)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetDesiredTickFrequency()",
    "kind": "Method",
    "detail": "Function (EWidgetTickFrequency)",
    "insertText": "GetDesiredTickFrequency()"
  },
  {
    "label": "UpdateCanTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCanTick()"
  },
  {
    "label": "InitializeNativeClassData()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeNativeClassData()"
  },
  {
    "label": "InitializeNamedSlots()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeNamedSlots()"
  },
  {
    "label": "ReleaseSlateResources()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReleaseSlateResources(bool bReleaseChildren)"
  },
  {
    "label": "SynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeProperties()"
  },
  {
    "label": "GetSlotNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSlotNames(TArray<FName>& SlotNames)"
  },
  {
    "label": "GetContentForSlot()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetContentForSlot(FName SlotName)"
  },
  {
    "label": "SetContentForSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentForSlot(FName SlotName, UWidget* Content)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(ESlateVisibility InVisibility)"
  },
  {
    "label": "SetPlayerContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerContext(const FLocalPlayerContext& InPlayerContext)"
  },
  {
    "label": "GetPlayerContext()",
    "kind": "Method",
    "detail": "Function (const FLocalPlayerContext&)",
    "insertText": "GetPlayerContext()"
  },
  {
    "label": "GetOwningLocalPlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "GetOwningLocalPlayer()"
  },
  {
    "label": "SetOwningLocalPlayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOwningLocalPlayer(ULocalPlayer* LocalPlayer)"
  },
  {
    "label": "GetOwningPlayer()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "GetOwningPlayer()"
  },
  {
    "label": "GetOwningPlayerPawn()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetOwningPlayerPawn()"
  },
  {
    "label": "GetOwningPlayerState()",
    "kind": "Method",
    "detail": "Function (} template<class TPlayerState = APlayerState> TPlayerState*)",
    "insertText": "GetOwningPlayerState(bool bChecked = false)"
  },
  {
    "label": "GetOwningPlayerCameraManager()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetOwningPlayerCameraManager()"
  },
  {
    "label": "IsEditorUtility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorUtility()"
  },
  {
    "label": "OnAnimationStarted_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationStarted_Implementation(const UWidgetAnimation* Animation)"
  },
  {
    "label": "OnAnimationFinished_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationFinished_Implementation(const UWidgetAnimation* Animation)"
  },
  {
    "label": "BroadcastAnimationStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastAnimationStateChange(const UUMGSequencePlayer& Player, EWidgetAnimationEvent AnimationEvent)"
  },
  {
    "label": "OnAnimationStartedPlaying()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnAnimationStartedPlaying(UUMGSequencePlayer& Player)"
  },
  {
    "label": "OnAnimationFinishedPlaying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationFinishedPlaying(UUMGSequencePlayer& Player)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UUserWidget, FNativeOnVisibilityChangedEvent, ESlateVisibility)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (FNativeOnVisibilityChangedEvent OnNativeVisibilityChanged ;)",
    "insertText": "DECLARE_EVENT_OneParam(UUserWidget, FNativeOnDestruct, UUserWidget*)"
  },
  {
    "label": "GetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetColorAndOpacity()"
  },
  {
    "label": "GetForegroundColor()",
    "kind": "Method",
    "detail": "Function (const FSlateColor&)",
    "insertText": "GetForegroundColor()"
  },
  {
    "label": "GetPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetPadding()"
  },
  {
    "label": "GetInputActionPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInputActionPriority()"
  },
  {
    "label": "IsInputActionBlocking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputActionBlocking()"
  },
  {
    "label": "IsFocusable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFocusable()"
  },
  {
    "label": "SetIsFocusable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsFocusable(bool InIsFocusable)"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (template<ExtensionType> ExtensionType*)",
    "insertText": "GetExtension()"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (template<ExtensionType> ExtensionType*)",
    "insertText": "AddExtension()"
  },
  {
    "label": "RemoveExtensions()",
    "kind": "Method",
    "detail": "Function (template<ExtensionType> void)",
    "insertText": "RemoveExtensions()"
  },
  {
    "label": "SetDesiredFocusWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDesiredFocusWidget(FName WidgetName)"
  },
  {
    "label": "SetDesiredFocusWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDesiredFocusWidget(UWidget* Widget)"
  },
  {
    "label": "GetDesiredFocusWidgetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDesiredFocusWidgetName()"
  },
  {
    "label": "GetDesiredFocusWidget()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetDesiredFocusWidget()"
  },
  {
    "label": "GetWidgetHandle()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetWidgetHandle(TSharedRef<SWidget> InWidget)"
  },
  {
    "label": "GetRootWidget()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetRootWidget()"
  },
  {
    "label": "GetSlateWidgetFromName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSlateWidgetFromName(const FName& Name)"
  },
  {
    "label": "GetWidgetFromName()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetWidgetFromName(const FName& Name)"
  },
  {
    "label": "IsAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsset()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR const FText)",
    "insertText": "GetPaletteCategory()"
  },
  {
    "label": "SetDesignerFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesignerFlags(EWidgetDesignFlags NewFlags)"
  },
  {
    "label": "OnDesignerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDesignerChanged(const FDesignerChangedEventArgs& EventArgs)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "UpdateBindingForSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBindingForSlot(FName SlotName)"
  },
  {
    "label": "AssignGUIDToBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignGUIDToBindings()"
  },
  {
    "label": "ValidateBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateBlueprint(const UWidgetTree& BlueprintWidgetTree, class IWidgetCompilerLog& CompileLog)"
  },
  {
    "label": "ValidateCompiledWidgetTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCompiledWidgetTree(const UWidgetTree& BlueprintWidgetTree, class IWidgetCompilerLog& CompileLog)"
  },
  {
    "label": "CreateWidgetInstance()",
    "kind": "Method",
    "detail": "Function (} ; # endif UUserWidget*)",
    "insertText": "CreateWidgetInstance(UWidget& OwningWidget, TSubclassOf<UUserWidget> UserWidgetClass, FName WidgetName)"
  },
  {
    "label": "CreateWidgetInstance()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "CreateWidgetInstance(UWidgetTree& OwningWidgetTree, TSubclassOf<UUserWidget> UserWidgetClass, FName WidgetName)"
  },
  {
    "label": "CreateWidgetInstance()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "CreateWidgetInstance(APlayerController& OwnerPC, TSubclassOf<UUserWidget> UserWidgetClass, FName WidgetName)"
  },
  {
    "label": "CreateWidgetInstance()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "CreateWidgetInstance(UGameInstance& GameInstance, TSubclassOf<UUserWidget> UserWidgetClass, FName WidgetName)"
  },
  {
    "label": "CreateWidgetInstance()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "CreateWidgetInstance(UWorld& World, TSubclassOf<UUserWidget> UserWidgetClass, FName WidgetName)"
  },
  {
    "label": "CreateInstanceInternal()",
    "kind": "Method",
    "detail": "Function (private : UUserWidget*)",
    "insertText": "CreateInstanceInternal(UObject* Outer, TSubclassOf<UUserWidget> UserWidgetClass, FName WidgetName, UWorld* World, ULocalPlayer* LocalPlayer)"
  },
  {
    "label": "ClearStoppedSequencePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStoppedSequencePlayers()"
  },
  {
    "label": "RebuildWidget()",
    "kind": "Method",
    "detail": "Function (private : uint8 bInitialized : 1 ; uint8 bAreExtensionsConstructed : 1 ; uint8 bStoppingAllAnimations : 1 ; protected : TSharedRef<SWidget>)",
    "insertText": "RebuildWidget()"
  },
  {
    "label": "OnWidgetRebuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetRebuilt()"
  },
  {
    "label": "NativeOnInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnInitialized()"
  },
  {
    "label": "NativePreConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativePreConstruct()"
  },
  {
    "label": "NativeConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeConstruct()"
  },
  {
    "label": "NativeDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeDestruct()"
  },
  {
    "label": "NativeTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeTick(const FGeometry& MyGeometry, float InDeltaTime)"
  },
  {
    "label": "NativePaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NativePaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "NativeIsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeIsInteractable()"
  },
  {
    "label": "NativeSupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeSupportsKeyboardFocus()"
  },
  {
    "label": "NativeSupportsCustomNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeSupportsCustomNavigation()"
  },
  {
    "label": "NativeOnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnAddedToFocusPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnAddedToFocusPath(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnRemovedFromFocusPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnRemovedFromFocusPath(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "NativeOnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent, const FNavigationReply& InDefaultReply)"
  },
  {
    "label": "NativeOnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnKeyChar(const FGeometry& InGeometry, const FCharacterEvent& InCharEvent)"
  },
  {
    "label": "NativeOnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnPreviewKeyDown(const FGeometry& InGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "NativeOnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnKeyDown(const FGeometry& InGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "NativeOnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnKeyUp(const FGeometry& InGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "NativeOnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnAnalogValueChanged(const FGeometry& InGeometry, const FAnalogInputEvent& InAnalogEvent)"
  },
  {
    "label": "NativeOnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseButtonDown(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnPreviewMouseButtonDown(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseButtonUp(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseMove(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnMouseEnter(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnMouseLeave(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseWheel(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseButtonDoubleClick(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "NativeOnDragDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragDetected(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent, UDragDropOperation*& OutOperation)"
  },
  {
    "label": "NativeOnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragEnter(const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation)"
  },
  {
    "label": "NativeOnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragLeave(const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation)"
  },
  {
    "label": "NativeOnDragOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeOnDragOver(const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation)"
  },
  {
    "label": "NativeOnDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeOnDrop(const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation)"
  },
  {
    "label": "NativeOnDragCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragCancelled(const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation)"
  },
  {
    "label": "NativeOnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchGesture(const FGeometry& InGeometry, const FPointerEvent& InGestureEvent)"
  },
  {
    "label": "NativeOnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchStarted(const FGeometry& InGeometry, const FPointerEvent& InGestureEvent)"
  },
  {
    "label": "NativeOnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchMoved(const FGeometry& InGeometry, const FPointerEvent& InGestureEvent)"
  },
  {
    "label": "NativeOnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchEnded(const FGeometry& InGeometry, const FPointerEvent& InGestureEvent)"
  },
  {
    "label": "NativeOnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMotionDetected(const FGeometry& InGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "NativeOnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "NativeOnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "NativeOnCursorQuery(const FGeometry& InGeometry, const FPointerEvent& InCursorEvent)"
  },
  {
    "label": "NativeOnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "NativeOnNavigation(const FGeometry& InGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "NativeOnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "NativeOnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnFinishedPointerInput()"
  },
  {
    "label": "TickActionsAndAnimation()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "TickActionsAndAnimation(float InDeltaTime)"
  },
  {
    "label": "PostTickActionsAndAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickActionsAndAnimation(float InDeltaTime)"
  },
  {
    "label": "RemoveObsoleteBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObsoleteBindings(const TArray<FName>& NamedSlots)"
  },
  {
    "label": "GetSequencePlayer()",
    "kind": "Method",
    "detail": "Function (UUMGSequencePlayer*)",
    "insertText": "GetSequencePlayer(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "GetOrAddSequencePlayer()",
    "kind": "Method",
    "detail": "Function (UUMGSequencePlayer*)",
    "insertText": "GetOrAddSequencePlayer(UWidgetAnimation* InAnimation)"
  },
  {
    "label": "ExecuteQueuedAnimationTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteQueuedAnimationTransitions()"
  },
  {
    "label": "ConditionalTearDownAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalTearDownAnimations()"
  },
  {
    "label": "TearDownAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDownAnimations()"
  },
  {
    "label": "DisableAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAnimations()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "OnInputAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputAction(FOnInputAction Callback)"
  },
  {
    "label": "InitializeInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInputComponent()"
  },
  {
    "label": "OnLatentActionsChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnLatentActionsChanged(UObject* ObjectWhichChanged, ELatentActionChangeType ChangeType)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (FLocalPlayerContext PlayerContext ; TWeakObjectPtr<UWorld> CachedWorld ; bool bTemplateInitializing ; uint32 bInitializingFromWidgetTree ; protected :)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FLinearColor, ColorAndOpacity)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FSlateColor, ForegroundColor)"
  },
  {
    "label": "ValidateUserWidgetClass()",
    "kind": "Method",
    "detail": "Function (UUMGSequencePlayer ; UUMGSequenceTickManager ; class FWidgetBlueprintCompilerContext ; } ; # define LOCTEXT_NAMESPACE \" UMG \" namespace CreateWidgetHelpers { bool)",
    "insertText": "ValidateUserWidgetClass(const UClass* UserWidgetClass)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"UserWidget Create\"), STAT_CreateWidget, STATGROUP_Slate)"
  },
  {
    "label": "CreateWidget()",
    "kind": "Method",
    "detail": "Function (template<WidgetT = UUserWidget,OwnerType = UObject> WidgetT*)",
    "insertText": "CreateWidget(OwnerType OwningObject, TSubclassOf<UUserWidget> UserWidgetClass = WidgetT::StaticClass(), FName WidgetName = NAME_None)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_CreateWidget)"
  },
  {
    "label": "WidgetObjectCycleCounter()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounterUObject)",
    "insertText": "WidgetObjectCycleCounter(UserWidgetClass, GET_STATID(STAT_CreateWidget))"
  }
]