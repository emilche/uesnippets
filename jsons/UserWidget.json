[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "UDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDragDropOperation"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UUMGSequencePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUMGSequencePlayer"
  },
  {
    "label": "UUMGSequenceTickManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUMGSequenceTickManager"
  },
  {
    "label": "UWidgetAnimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetAnimation"
  },
  {
    "label": "UWidgetBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprintGeneratedClass"
  },
  {
    "label": "UWidgetTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetTree"
  },
  {
    "label": "UNamedSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNamedSlot"
  },
  {
    "label": "UUserWidgetExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidgetExtension"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMG_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UMG_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "metadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "metadata"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimationEventBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationEventBinding"
  },
  {
    "label": "FPaintContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintContext"
  },
  {
    "label": "FNamedSlotBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNamedSlotBinding"
  },
  {
    "label": "UUMGSequencePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUMGSequencePlayer"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "SObjectWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectWidget"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPlayerState"
  },
  {
    "label": "APlayerCameraManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerCameraManager"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "IWidgetCompilerLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWidgetCompilerLog"
  },
  {
    "label": "IWidgetCompilerLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWidgetCompilerLog"
  },
  {
    "label": "yet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "yet"
  },
  {
    "label": "UInputComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInputComponent"
  },
  {
    "label": "FWidgetBlueprintCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintCompilerContext"
  },
  {
    "label": "FPaintContext()",
    "kind": "Method",
    "detail": "Function (UMG_API)",
    "insertText": "FPaintContext()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnConstructEvent)"
  },
  {
    "label": "UUserWidget()",
    "kind": "Method",
    "detail": "Function (UMG_API)",
    "insertText": "UUserWidget(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "DuplicateAndInitializeFromWidgetTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateAndInitializeFromWidgetTree(UWidgetTree* InWidgetTree, const TMap<FName, UWidget*>& NamedSlotContentToMerge)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "UpdateCanTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCanTick()"
  },
  {
    "label": "InitializeNamedSlots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNamedSlots()"
  },
  {
    "label": "AddToViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToViewport(int32 ZOrder = 0)"
  },
  {
    "label": "AddToPlayerScreen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToPlayerScreen(int32 ZOrder = 0)"
  },
  {
    "label": "RemoveFromViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromViewport()"
  },
  {
    "label": "SetPositionInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionInViewport(FVector2D Position, bool bRemoveDPIScale = true)"
  },
  {
    "label": "SetDesiredSizeInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDesiredSizeInViewport(FVector2D Size)"
  },
  {
    "label": "SetAnchorsInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnchorsInViewport(FAnchors Anchors)"
  },
  {
    "label": "SetAlignmentInViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlignmentInViewport(FVector2D Alignment)"
  },
  {
    "label": "SetPlayerContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerContext(const FLocalPlayerContext& InPlayerContext)"
  },
  {
    "label": "SetOwningLocalPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningLocalPlayer(ULocalPlayer* LocalPlayer)"
  },
  {
    "label": "SetOwningPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningPlayer(APlayerController* LocalPlayerController)"
  },
  {
    "label": "OnInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialized()"
  },
  {
    "label": "PreConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreConstruct(bool IsDesignTime)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FGeometry MyGeometry, float InDeltaTime)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnFocusReceived(FGeometry MyGeometry, FFocusEvent InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(FFocusEvent InFocusEvent)"
  },
  {
    "label": "OnAddedToFocusPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddedToFocusPath(FFocusEvent InFocusEvent)"
  },
  {
    "label": "OnRemovedFromFocusPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovedFromFocusPath(FFocusEvent InFocusEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnKeyChar(FGeometry MyGeometry, FCharacterEvent InCharacterEvent)"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnPreviewKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnAnalogValueChanged(FGeometry MyGeometry, FAnalogInputEvent InAnalogInputEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnMouseButtonDown(FGeometry MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnPreviewMouseButtonDown(FGeometry MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnMouseButtonUp(FGeometry MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnMouseMove(FGeometry MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(FGeometry MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnMouseWheel(FGeometry MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnMouseButtonDoubleClick(FGeometry InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnVisualizeTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVisualizeTooltip(const TSharedPtr<SWidget>& TooltipContent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragDetected(FGeometry MyGeometry, const FPointerEvent& PointerEvent, UDragDropOperation*& Operation)"
  },
  {
    "label": "OnDragCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragCancelled(const FPointerEvent& PointerEvent, UDragDropOperation* Operation)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(FGeometry MyGeometry, FPointerEvent PointerEvent, UDragDropOperation* Operation)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(FPointerEvent PointerEvent, UDragDropOperation* Operation)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnDragOver(FGeometry MyGeometry, FPointerEvent PointerEvent, UDragDropOperation* Operation)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnDrop(FGeometry MyGeometry, FPointerEvent PointerEvent, UDragDropOperation* Operation)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnTouchGesture(FGeometry MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnTouchStarted(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnTouchMoved(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnTouchEnded(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnMotionDetected(FGeometry MyGeometry, FMotionEvent InMotionEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost()"
  },
  {
    "label": "CancelLatentActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelLatentActions()"
  },
  {
    "label": "StopAnimationsAndLatentActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAnimationsAndLatentActions()"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FEventReply)",
    "insertText": "OnTouchForceChanged(FGeometry MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "BindToAnimationStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToAnimationStarted(UWidgetAnimation* Animation, FWidgetAnimationDynamicEvent Delegate)"
  },
  {
    "label": "UnbindFromAnimationStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindFromAnimationStarted(UWidgetAnimation* Animation, FWidgetAnimationDynamicEvent Delegate)"
  },
  {
    "label": "UnbindAllFromAnimationStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindAllFromAnimationStarted(UWidgetAnimation* Animation)"
  },
  {
    "label": "BindToAnimationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToAnimationFinished(UWidgetAnimation* Animation, FWidgetAnimationDynamicEvent Delegate)"
  },
  {
    "label": "UnbindFromAnimationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindFromAnimationFinished(UWidgetAnimation* Animation, FWidgetAnimationDynamicEvent Delegate)"
  },
  {
    "label": "UnbindAllFromAnimationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindAllFromAnimationFinished(UWidgetAnimation* Animation)"
  },
  {
    "label": "BindToAnimationEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToAnimationEvent(UWidgetAnimation* Animation, FWidgetAnimationDynamicEvent Delegate, EWidgetAnimationEvent AnimationEvent, FName UserTag = NAME_None)"
  },
  {
    "label": "OnAnimationStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationStarted( const UWidgetAnimation* Animation )"
  },
  {
    "label": "OnAnimationStarted_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationStarted_Implementation(const UWidgetAnimation* Animation)"
  },
  {
    "label": "OnAnimationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationFinished( const UWidgetAnimation* Animation )"
  },
  {
    "label": "OnAnimationFinished_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationFinished_Implementation(const UWidgetAnimation* Animation)"
  },
  {
    "label": "BroadcastAnimationStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastAnimationStateChange(const UUMGSequencePlayer& Player, EWidgetAnimationEvent AnimationEvent)"
  },
  {
    "label": "OnAnimationStartedPlaying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationStartedPlaying(UUMGSequencePlayer& Player)"
  },
  {
    "label": "OnAnimationFinishedPlaying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationFinishedPlaying(UUMGSequencePlayer& Player)"
  },
  {
    "label": "SetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorAndOpacity(FLinearColor InColorAndOpacity)"
  },
  {
    "label": "SetForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForegroundColor(FSlateColor InForegroundColor)"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPadding(FMargin InPadding)"
  },
  {
    "label": "SetIsFocusable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsFocusable(bool InIsFocusable)"
  },
  {
    "label": "QueuePlayAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueuePlayAnimation(UWidgetAnimation* InAnimation, float StartAtTime = 0.0f, int32 NumLoopsToPlay = 1, EUMGSequencePlayMode::Type PlayMode = EUMGSequencePlayMode::Forward, float PlaybackSpeed = 1.0f, bool bRestoreState = false)"
  },
  {
    "label": "QueuePlayAnimationTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueuePlayAnimationTimeRange(UWidgetAnimation* InAnimation, float StartAtTime = 0.0f, float EndAtTime = 0.0f, int32 NumLoopsToPlay = 1, EUMGSequencePlayMode::Type PlayMode = EUMGSequencePlayMode::Forward, float PlaybackSpeed = 1.0f, bool bRestoreState = false)"
  },
  {
    "label": "QueuePlayAnimationForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueuePlayAnimationForward(UWidgetAnimation* InAnimation, float PlaybackSpeed = 1.0f, bool bRestoreState = false)"
  },
  {
    "label": "QueuePlayAnimationReverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueuePlayAnimationReverse(UWidgetAnimation* InAnimation, float PlaybackSpeed = 1.0f, bool bRestoreState = false)"
  },
  {
    "label": "QueueStopAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueStopAnimation(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "QueueStopAllAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueStopAllAnimations()"
  },
  {
    "label": "QueuePauseAnimation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "QueuePauseAnimation(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "StopAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAnimation(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "StopAllAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllAnimations()"
  },
  {
    "label": "PauseAnimation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PauseAnimation(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "SetAnimationCurrentTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationCurrentTime(const UWidgetAnimation* InAnimation, float InTime)"
  },
  {
    "label": "SetNumLoopsToPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumLoopsToPlay(const UWidgetAnimation* InAnimation, int32 NumLoopsToPlay)"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(const UWidgetAnimation* InAnimation, float PlaybackSpeed = 1.0f)"
  },
  {
    "label": "ReverseAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseAnimation(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "IsAnimationPlayingForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnimationPlayingForward(const UWidgetAnimation* InAnimation)"
  },
  {
    "label": "FlushAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAnimations()"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExtension(UUserWidgetExtension* InExtension)"
  },
  {
    "label": "RemoveExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExtensions(TSubclassOf<UUserWidgetExtension> InExtensionType)"
  },
  {
    "label": "PlaySound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySound(class USoundBase* SoundToPlay)"
  },
  {
    "label": "SetDesiredFocusWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDesiredFocusWidget(FName WidgetName)"
  },
  {
    "label": "SetDesiredFocusWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDesiredFocusWidget(UWidget* Widget)"
  },
  {
    "label": "UpdateBindingForSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBindingForSlot(FName SlotName)"
  },
  {
    "label": "AssignGUIDToBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignGUIDToBindings()"
  },
  {
    "label": "ClearStoppedSequencePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStoppedSequencePlayers()"
  },
  {
    "label": "NativeOnInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnInitialized()"
  },
  {
    "label": "NativePreConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativePreConstruct()"
  },
  {
    "label": "NativeConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeConstruct()"
  },
  {
    "label": "NativeDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeDestruct()"
  },
  {
    "label": "NativeTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeTick(const FGeometry& MyGeometry, float InDeltaTime)"
  },
  {
    "label": "SetMinimumDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinimumDesiredSize(FVector2D InMinimumDesiredSize)"
  },
  {
    "label": "NativeOnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnFocusReceived( const FGeometry& InGeometry, const FFocusEvent& InFocusEvent )"
  },
  {
    "label": "NativeOnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnFocusLost( const FFocusEvent& InFocusEvent )"
  },
  {
    "label": "NativeOnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnAddedToFocusPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnAddedToFocusPath(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnRemovedFromFocusPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnRemovedFromFocusPath(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "NativeOnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "NativeOnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent, const FNavigationReply& InDefaultReply)"
  },
  {
    "label": "NativeOnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnKeyChar( const FGeometry& InGeometry, const FCharacterEvent& InCharEvent )"
  },
  {
    "label": "NativeOnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnPreviewKeyDown( const FGeometry& InGeometry, const FKeyEvent& InKeyEvent )"
  },
  {
    "label": "NativeOnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnKeyDown( const FGeometry& InGeometry, const FKeyEvent& InKeyEvent )"
  },
  {
    "label": "NativeOnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnKeyUp( const FGeometry& InGeometry, const FKeyEvent& InKeyEvent )"
  },
  {
    "label": "NativeOnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnAnalogValueChanged( const FGeometry& InGeometry, const FAnalogInputEvent& InAnalogEvent )"
  },
  {
    "label": "NativeOnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseButtonDown( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnPreviewMouseButtonDown( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseButtonUp( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseMove( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnMouseEnter( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnMouseLeave( const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseWheel( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMouseButtonDoubleClick( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "NativeOnDragDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragDetected( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent, UDragDropOperation*& OutOperation )"
  },
  {
    "label": "NativeOnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragEnter( const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation )"
  },
  {
    "label": "NativeOnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragLeave( const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation )"
  },
  {
    "label": "NativeOnDragOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeOnDragOver( const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation )"
  },
  {
    "label": "NativeOnDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NativeOnDrop( const FGeometry& InGeometry, const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation )"
  },
  {
    "label": "NativeOnDragCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnDragCancelled( const FDragDropEvent& InDragDropEvent, UDragDropOperation* InOperation )"
  },
  {
    "label": "NativeOnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchGesture( const FGeometry& InGeometry, const FPointerEvent& InGestureEvent )"
  },
  {
    "label": "NativeOnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchStarted( const FGeometry& InGeometry, const FPointerEvent& InGestureEvent )"
  },
  {
    "label": "NativeOnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchMoved( const FGeometry& InGeometry, const FPointerEvent& InGestureEvent )"
  },
  {
    "label": "NativeOnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchEnded( const FGeometry& InGeometry, const FPointerEvent& InGestureEvent )"
  },
  {
    "label": "NativeOnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnMotionDetected( const FGeometry& InGeometry, const FMotionEvent& InMotionEvent )"
  },
  {
    "label": "NativeOnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NativeOnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "NativeOnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "NativeOnCursorQuery( const FGeometry& InGeometry, const FPointerEvent& InCursorEvent )"
  },
  {
    "label": "NativeOnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "NativeOnNavigation(const FGeometry& InGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "NativeOnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "TickActionsAndAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickActionsAndAnimation(float InDeltaTime)"
  },
  {
    "label": "PostTickActionsAndAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickActionsAndAnimation(float InDeltaTime)"
  },
  {
    "label": "RemoveObsoleteBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObsoleteBindings(const TArray<FName>& NamedSlots)"
  },
  {
    "label": "ExecuteQueuedAnimationTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteQueuedAnimationTransitions()"
  },
  {
    "label": "ConditionalTearDownAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalTearDownAnimations()"
  },
  {
    "label": "TearDownAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDownAnimations()"
  },
  {
    "label": "DisableAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAnimations()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "ListenForInputAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListenForInputAction( FName ActionName, TEnumAsByte< EInputEvent > EventType, bool bConsume, FOnInputAction Callback )"
  },
  {
    "label": "StopListeningForInputAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopListeningForInputAction( FName ActionName, TEnumAsByte< EInputEvent > EventType )"
  },
  {
    "label": "StopListeningForAllInputActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopListeningForAllInputActions()"
  },
  {
    "label": "RegisterInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInputComponent()"
  },
  {
    "label": "UnregisterInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInputComponent()"
  },
  {
    "label": "SetInputActionPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputActionPriority( int32 NewPriority )"
  },
  {
    "label": "SetInputActionBlocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputActionBlocking( bool bShouldBlock )"
  },
  {
    "label": "OnInputAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputAction( FOnInputAction Callback )"
  },
  {
    "label": "InitializeInputComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeInputComponent()"
  },
  {
    "label": "OnLatentActionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLatentActionsChanged(UObject* ObjectWhichChanged, ELatentActionChangeType ChangeType)"
  },
  {
    "label": "PROPERTY_BINDING_IMPLEMENTATION()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "PROPERTY_BINDING_IMPLEMENTATION(FLinearColor, ColorAndOpacity)"
  },
  {
    "label": "ValidateUserWidgetClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateUserWidgetClass(const UClass* UserWidgetClass)"
  }
]