[
  {
    "label": "PooledTaskRunnerDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PooledTaskRunnerDelegate"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PooledParallelTaskRunner()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_POOLED_PARALLEL_TASK_RUNNER_H_ # define BASE_TASK_THREAD_POOL_POOLED_PARALLEL_TASK_RUNNER_H_ # include \" base / base_export . h \" # include \" base / callback_forward . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / task_runner . h \" # include \" base / task / task_traits . h \" # include \" base / time / time . h \" namespace base { namespace internal { class PooledTaskRunnerDelegate ; class BASE_EXPORT PooledParallelTaskRunner : public TaskRunner { public :)",
    "insertText": "PooledParallelTaskRunner(const TaskTraits& traits, PooledTaskRunnerDelegate* pooled_task_runner_delegate)"
  },
  {
    "label": "PooledParallelTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PooledParallelTaskRunner(const PooledParallelTaskRunner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PooledParallelTaskRunner&)",
    "insertText": "operator(const PooledParallelTaskRunner&)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, OnceClosure closure, TimeDelta delay)"
  },
  {
    "label": "PooledParallelTaskRunner()",
    "kind": "Method",
    "detail": "Function (private : ~)",
    "insertText": "PooledParallelTaskRunner()"
  }
]