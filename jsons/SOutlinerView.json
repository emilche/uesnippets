[
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHeaderRow"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FOutlinerViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutlinerViewModel"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSelectionEventSuppressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionEventSuppressor"
  },
  {
    "label": "FOutlinerHeaderRowWidgetMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutlinerHeaderRowWidgetMetaData"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FSequencerCoreSelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCoreSelection"
  },
  {
    "label": "SOutlinerViewRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOutlinerViewRow"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "FCachedGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedGeometry"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Input / Reply . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MVVM / ViewModels / OutlinerColumns / IOutlinerColumn . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / Views / TreeViewTraits . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FDragDropEvent ; class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; class ITableRow ; class SHeaderRow ; class SScrollBar ; class SWidget ; namespace UE::Sequencer { class FOutlinerViewModel ; } struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; struct FSlateBrush ; namespace UE::Sequencer { struct FSelectionEventSuppressor ; struct FOutlinerHeaderRowWidgetMetaData ; class FViewModel ; class FSequencerCoreSelection ; class SOutlinerViewRow ; class STrackAreaView ; class STrackLane ; class IOutlinerColumn ; enum class EOutlinerColumnGroup : uint8 ; enum class ETreeRecursion { Recursive,NonRecursive } ; class SOutlinerView : public STreeView<TWeakViewModelPtr<IOutlinerExtension>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SOutlinerView)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FSequencerCoreSelection>, Selection ) SLATE_ARGUMENT( TSharedPtr<SScrollBar>, ExternalScrollbar ) SLATE_END_ARGS()"
  },
  {
    "label": "SOutlinerView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SOutlinerView()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TWeakPtr<FOutlinerViewModel> InWeakOutliner, const TSharedRef<STrackAreaView>& InTrackArea)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "GetOutlinerModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FOutlinerViewModel>)",
    "insertText": "GetOutlinerModel()"
  },
  {
    "label": "GetNumRootNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumRootNodes()"
  },
  {
    "label": "GetVirtualTop()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetVirtualTop()"
  },
  {
    "label": "GetVisibleItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVisibleItems(TArray<TViewModelPtr<IOutlinerExtension>>& OutItems)"
  },
  {
    "label": "ForceSetSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSetSelectedItems(const TSet<TWeakViewModelPtr<IOutlinerExtension>>& InItems)"
  },
  {
    "label": "HitTestNode()",
    "kind": "Method",
    "detail": "Function (public : TViewModelPtr<IOutlinerExtension>)",
    "insertText": "HitTestNode(float InPhysical)"
  },
  {
    "label": "PhysicalToVirtual()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PhysicalToVirtual(float InPhysical)"
  },
  {
    "label": "VirtualToPhysical()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "VirtualToPhysical(float InVirtual)"
  },
  {
    "label": "ReportChildRowGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportChildRowGeometry(const TViewModelPtr<IOutlinerExtension>& InNode, const FGeometry& InGeometry)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Refresh()"
  },
  {
    "label": "ToggleExpandCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodes(ETreeRecursion Recursion = ETreeRecursion::Recursive, bool bExpandAll = false, bool bCollapseAll = false)"
  },
  {
    "label": "ScrollByDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollByDelta(float DeltaInSlateUnits)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName& InName)"
  },
  {
    "label": "ExpandCollapseNode()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ExpandCollapseNode(TViewModelPtr<IOutlinerExtension> InDataModel, bool bExpansionState, ETreeRecursion Recursion)"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(TWeakViewModelPtr<IOutlinerExtension> InDisplayNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "CreateTrackLanesForRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTrackLanesForRow(TSharedRef<SOutlinerViewRow> InRow, TViewModelPtr<IOutlinerExtension> InDataModel)"
  },
  {
    "label": "FindOrCreateParentLane()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STrackLane>)",
    "insertText": "FindOrCreateParentLane(TViewModelPtr<IOutlinerExtension> InDataModel)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildren(TWeakViewModelPtr<IOutlinerExtension> InParent, TArray<TWeakViewModelPtr<IOutlinerExtension>>& OutChildren)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(TViewModelPtr<IOutlinerExtension> InDataModel, const FName& ColumnId, const TSharedRef<SOutlinerViewRow>& Row)"
  },
  {
    "label": "OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExpansionChanged(TWeakViewModelPtr<IOutlinerExtension> InItem, bool bIsExpanded)"
  },
  {
    "label": "Private_UpdateParentHighlights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_UpdateParentHighlights()"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemSelection(TWeakViewModelPtr<IOutlinerExtension> TheItem, bool bShouldBeSelected, bool bWasUserDirected = false)"
  },
  {
    "label": "Private_ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_ClearSelection()"
  },
  {
    "label": "Private_SelectRangeFromCurrentTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SelectRangeFromCurrentTo(TWeakViewModelPtr<IOutlinerExtension> InRangeSelectionEnd)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnRightMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRightMouseButtonDown(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnRightMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRightMouseButtonUp(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetItemSelection()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "UpdateViewSelectionFromModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewSelectionFromModel()"
  },
  {
    "label": "UpdateModelSelectionFromView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModelSelectionFromView()"
  },
  {
    "label": "HandleTableViewScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTableViewScrolled(double InScrollOffset)"
  },
  {
    "label": "UpdatePhysicalGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicalGeometry(bool bIsRefresh)"
  },
  {
    "label": "OnContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnContextMenuOpening()"
  },
  {
    "label": "SetItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansionRecursive(TWeakViewModelPtr<IOutlinerExtension> InItem, bool bIsExpanded)"
  },
  {
    "label": "FCachedGeometry()",
    "kind": "Method",
    "detail": "Function (public : struct FCachedGeometry {)",
    "insertText": "FCachedGeometry(TWeakViewModelPtr<IOutlinerExtension> InWeakItem, float InPhysicalTop, float InPhysicalHeight, float InVirtualTop, float InVirtualHeight, float InVirtualNestedHeight) : WeakItem(MoveTemp(InWeakItem)) , PhysicalTop(InPhysicalTop), PhysicalHeight(InPhysicalHeight) , VirtualTop(InVirtualTop), VirtualHeight(InVirtualHeight), VirtualNestedHeight(InVirtualNestedHeight)"
  },
  {
    "label": "GetAllVisibleNodes()",
    "kind": "Method",
    "detail": "Function (} TWeakViewModelPtr<IOutlinerExtension> WeakItem ; float PhysicalTop,PhysicalHeight ; float VirtualTop,VirtualHeight,VirtualNestedHeight ; } ; const TArray<FCachedGeometry>&)",
    "insertText": "GetAllVisibleNodes()"
  },
  {
    "label": "SetPrimaryTreeView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimaryTreeView(TSharedPtr<SOutlinerView> InPrimaryTreeView)"
  },
  {
    "label": "SetShowPinned()",
    "kind": "Method",
    "detail": "Function (PrimaryTreeView = InPrimaryTreeView ; } void)",
    "insertText": "SetShowPinned(bool bShowPinned)"
  },
  {
    "label": "SetOutlinerColumns()",
    "kind": "Method",
    "detail": "Function (bShowPinnedNodes = bShowPinned ; } void)",
    "insertText": "SetOutlinerColumns(const TArray<TSharedPtr<IOutlinerColumn>>& InOutlinerColumns)"
  },
  {
    "label": "CreateOutlinerColumnsForGroup()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FCachedGeometry> PhysicalNodes ; int32)",
    "insertText": "CreateOutlinerColumnsForGroup(int32 ColumnIndex, EOutlinerColumnGroup Group)"
  },
  {
    "label": "UpdateOutlinerColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutlinerColumns()"
  },
  {
    "label": "InsertSeparatorColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertSeparatorColumn(int32 InsertIndex, int32 SeparatorID)"
  },
  {
    "label": "OnDragRow()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragRow(const FGeometry& InGeometry, const FPointerEvent& InPointerEvent, TSharedRef<SOutlinerViewRow> InRow)"
  },
  {
    "label": "OnItemToString_Debug()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "OnItemToString_Debug(TWeakViewModelPtr<IOutlinerExtension> InWeakModel)"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (protected : using FColumnGenerator = TFunction<TSharedPtr<)",
    "insertText": "SWidget(const FCreateOutlinerColumnParams& Params, const TSharedRef<SOutlinerViewRow>&)"
  }
]