[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Val",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Val"
  },
  {
    "label": "ToStringVal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ToStringVal"
  },
  {
    "label": "LogStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogStreamer"
  },
  {
    "label": "FatalLogCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FatalLogCall"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_CHECKS_H_ # define RTC_BASE_CHECKS_H_ # if !)",
    "insertText": "defined(NDEBUG) || defined(DCHECK_ALWAYS_ON) #define RTC_DCHECK_IS_ON 1 #else #define RTC_DCHECK_IS_ON 0 #endif #if defined(_MSC_VER) #define RTC_NORETURN __declspec(noreturn) #elif defined(__GNUC__) #define RTC_NORETURN __attribute__((__noreturn__))"
  },
  {
    "label": "rtc_FatalMessage()",
    "kind": "Method",
    "detail": "Function (# endif RTC_NORETURN void)",
    "insertText": "rtc_FatalMessage(const char* file, int line, const char* msg)"
  },
  {
    "label": "RTC_CHECK_EVAL_MESSAGE()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # endif # ifdef RTC_DISABLE_CHECK_MSG # define RTC_CHECK_MSG_ENABLED 0 # else # define RTC_CHECK_MSG_ENABLED 1 # endif # if RTC_CHECK_MSG_ENABLED # define)",
    "insertText": "RTC_CHECK_EVAL_MESSAGE(message) message #else #define RTC_CHECK_EVAL_MESSAGE(message)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "void(*rtc_OnFatalLogCallback_t)(const char* message)"
  },
  {
    "label": "rtc_SetFatalLogCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rtc_SetFatalLogCallback(rtc_OnFatalLogCallback_t callback)"
  },
  {
    "label": "WriteFatalLog()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # endif # endif # ifdef __cplusplus # include<string> # include \" absl / meta / type_traits . h \" # include \" absl / strings / string_view . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / numerics / safe_compare . h \" # include \" rtc_base / system / . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { namespace webrtc_checks_impl { enum class CheckArgType : int8_t { kEnd = 0,kInt,kLong,kLongLong,kUInt,kULong,kULongLong,kDouble,kLongDouble,kCharP,kStdString,kStringView,kVoidP,kCheckOp,} ; RTC_NORETURN void)",
    "insertText": "WriteFatalLog(const char* file, int line, absl::string_view output)"
  },
  {
    "label": "WriteFatalLog()",
    "kind": "Method",
    "detail": "Function (RTC_NORETURN void)",
    "insertText": "WriteFatalLog(absl::string_view output)"
  },
  {
    "label": "FatalLog()",
    "kind": "Method",
    "detail": "Function (# if RTC_CHECK_MSG_ENABLED RTC_NORETURN RTC_EXPORT void)",
    "insertText": "FatalLog(const char* file, int line, const char* message, const CheckArgType* fmt, ...)"
  },
  {
    "label": "FatalLog()",
    "kind": "Method",
    "detail": "Function (# else RTC_NORETURN RTC_EXPORT void)",
    "insertText": "FatalLog(const char* file, int line)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (# endif template<CheckArgType N,T> struct Val { CheckArgType)",
    "insertText": "Type()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T,absl::enable_if_t<std::is_enum<T>::value&& ! std::is_arithmetic<T>::value>* = nullptr>)",
    "insertText": "decltype(MakeVal(std::declval<absl::underlying_type_t<T>>())) MakeVal( T x)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T,)",
    "insertText": "decltype(ToLogString(std::declval<T>()))* = nullptr> ToStringVal MakeVal(const T& x)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts> class LogStreamer ; template<> class LogStreamer<> final { public : template<U,V =)",
    "insertText": "decltype(MakeVal(std::declval<U>())), absl::enable_if_t<std::is_arithmetic<U>::value || std::is_enum<U>::value>* = nullptr> RTC_FORCE_INLINE LogStreamer<V> operator<<(U arg)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,V =)",
    "insertText": "decltype(MakeVal(std::declval<U>())), absl::enable_if_t<!std::is_arithmetic<U>::value && !std::is_enum<U>::value>* = nullptr> RTC_FORCE_INLINE LogStreamer<V> operator<<(const U& arg)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (} # if RTC_CHECK_MSG_ENABLED template<. . . Us> RTC_NORETURN RTC_FORCE_INLINE void)",
    "insertText": "Call(const char* file, const int line, const char* message, const Us&... args)"
  },
  {
    "label": "FatalLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLog(file, line, message, t, args.GetVal()...)"
  },
  {
    "label": "CallCheckOp()",
    "kind": "Method",
    "detail": "Function (} template<. . . Us> RTC_NORETURN RTC_FORCE_INLINE void)",
    "insertText": "CallCheckOp(const char* file, const int line, const char* message, const Us&... args)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (} # else template<. . . Us> RTC_NORETURN RTC_FORCE_INLINE void)",
    "insertText": "Call(const char* file, const int line)"
  },
  {
    "label": "FatalLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalLog(file, line)"
  },
  {
    "label": "LogStreamer()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<T,. . . Ts> class LogStreamer<T,Ts . . .> final { public : RTC_FORCE_INLINE)",
    "insertText": "LogStreamer(T arg, const LogStreamer<Ts...>* prior) : arg_(arg), prior_(prior)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,V =)",
    "insertText": "decltype(MakeVal(std::declval<U>())), absl::enable_if_t<std::is_arithmetic<U>::value || std::is_enum<U>::value>* = nullptr> RTC_FORCE_INLINE LogStreamer<V, T, Ts...> operator<<(U arg)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<U,V =)",
    "insertText": "decltype(MakeVal(std::declval<U>())), absl::enable_if_t<!std::is_arithmetic<U>::value && !std::is_enum<U>::value>* = nullptr> RTC_FORCE_INLINE LogStreamer<V, T, Ts...> operator<<(const U& arg)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (prior_ ->)",
    "insertText": "Call(file, line, message, arg_, args...)"
  },
  {
    "label": "CallCheckOp()",
    "kind": "Method",
    "detail": "Function (prior_ ->)",
    "insertText": "CallCheckOp(file, line, message, arg_, args...)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (prior_ ->)",
    "insertText": "Call(file, line)"
  },
  {
    "label": "FatalLogCall()",
    "kind": "Method",
    "detail": "Function (} # endif private : T arg_ ; const LogStreamer<Ts . . .>* prior_ ; } ; template<bool isCheckOp> class FatalLogCall final { public :)",
    "insertText": "FatalLogCall(const char* file, int line, const char* message) : file_(file), line_(line), message_(message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts> RTC_NORETURN RTC_FORCE_INLINE void)",
    "insertText": "operator(const LogStreamer<Ts...>& streamer)"
  },
  {
    "label": "CallCheckOp()",
    "kind": "Method",
    "detail": "Function (# if RTC_CHECK_MSG_ENABLED isCheckOp ? streamer .)",
    "insertText": "CallCheckOp(file_, line_, message_) : streamer.Call(file_, line_, message_)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (# else streamer .)",
    "insertText": "Call(file_, line_)"
  },
  {
    "label": "UnreachableCodeReached()",
    "kind": "Method",
    "detail": "Function (# endif } private : const char* file_ ; int line_ ; const char* message_ ; } ; # if RTC_DCHECK_IS_ON # define RTC_UNREACHABLE_FILE_AND_LINE_CALL_ARGS __FILE__,__LINE__ RTC_NORETURN RTC_EXPORT void)",
    "insertText": "UnreachableCodeReached(const char* file, int line)"
  },
  {
    "label": "UnreachableCodeReached()",
    "kind": "Method",
    "detail": "Function (# else # define RTC_UNREACHABLE_FILE_AND_LINE_CALL_ARGS RTC_NORETURN RTC_EXPORT void)",
    "insertText": "UnreachableCodeReached()"
  },
  {
    "label": "RTC_EAT_STREAM_PARAMETERS()",
    "kind": "Method",
    "detail": "Function (# endif } # define)",
    "insertText": "RTC_EAT_STREAM_PARAMETERS(ignored) \\ (true ? true : ((void)(ignored), true)) \\ ? static_cast<void>(0) \\ : ::rtc::webrtc_checks_impl::FatalLogCall<false>(\"\", 0, \"\") & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() #define RTC_EAT_STREAM_PARAMETERS_OP(op, a, b) \\ RTC_EAT_STREAM_PARAMETERS(((void)::rtc::Safe##op(a, b))) #if RTC_CHECK_MSG_ENABLED #define RTC_CHECK(condition) \\ (condition) ? static_cast<void>(0) \\ : ::rtc::webrtc_checks_impl::FatalLogCall<false>( \\ __FILE__, __LINE__, #condition) & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() #define RTC_CHECK_OP(name, op, val1, val2) \\ ::rtc::Safe##name((val1), (val2)) \\ ? static_cast<void>(0) \\ : ::rtc::webrtc_checks_impl::FatalLogCall<true>( \\ __FILE__, __LINE__, #val1 \" \" #op \" \" #val2) & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() << (val1) << (val2) #else #define RTC_CHECK(condition) \\ (condition) \\ ? static_cast<void>(0) \\ : true ? ::rtc::webrtc_checks_impl::FatalLogCall<false>(__FILE__, \\ __LINE__, \"\") & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() \\ : ::rtc::webrtc_checks_impl::FatalLogCall<false>(\"\", 0, \"\") & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() #define RTC_CHECK_OP(name, op, val1, val2) \\ ::rtc::Safe##name((val1), (val2)) \\ ? static_cast<void>(0) \\ : true ? ::rtc::webrtc_checks_impl::FatalLogCall<true>(__FILE__, \\ __LINE__, \"\") & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() \\ : ::rtc::webrtc_checks_impl::FatalLogCall<false>(\"\", 0, \"\") & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() #endif #define RTC_CHECK_EQ(val1, val2) RTC_CHECK_OP(Eq, ==, val1, val2) #define RTC_CHECK_NE(val1, val2) RTC_CHECK_OP(Ne, !=, val1, val2) #define RTC_CHECK_LE(val1, val2) RTC_CHECK_OP(Le, <=, val1, val2) #define RTC_CHECK_LT(val1, val2) RTC_CHECK_OP(Lt, <, val1, val2) #define RTC_CHECK_GE(val1, val2) RTC_CHECK_OP(Ge, >=, val1, val2) #define RTC_CHECK_GT(val1, val2) RTC_CHECK_OP(Gt, >, val1, val2) #if RTC_DCHECK_IS_ON #define RTC_DCHECK(condition) RTC_CHECK(condition) #define RTC_DCHECK_EQ(v1, v2) RTC_CHECK_EQ(v1, v2) #define RTC_DCHECK_NE(v1, v2) RTC_CHECK_NE(v1, v2) #define RTC_DCHECK_LE(v1, v2) RTC_CHECK_LE(v1, v2) #define RTC_DCHECK_LT(v1, v2) RTC_CHECK_LT(v1, v2) #define RTC_DCHECK_GE(v1, v2) RTC_CHECK_GE(v1, v2) #define RTC_DCHECK_GT(v1, v2) RTC_CHECK_GT(v1, v2) #else #define RTC_DCHECK(condition) RTC_EAT_STREAM_PARAMETERS(condition) #define RTC_DCHECK_EQ(v1, v2) RTC_EAT_STREAM_PARAMETERS_OP(Eq, v1, v2) #define RTC_DCHECK_NE(v1, v2) RTC_EAT_STREAM_PARAMETERS_OP(Ne, v1, v2) #define RTC_DCHECK_LE(v1, v2) RTC_EAT_STREAM_PARAMETERS_OP(Le, v1, v2) #define RTC_DCHECK_LT(v1, v2) RTC_EAT_STREAM_PARAMETERS_OP(Lt, v1, v2) #define RTC_DCHECK_GE(v1, v2) RTC_EAT_STREAM_PARAMETERS_OP(Ge, v1, v2) #define RTC_DCHECK_GT(v1, v2) RTC_EAT_STREAM_PARAMETERS_OP(Gt, v1, v2) #endif #define RTC_UNREACHABLE_CODE_HIT false #define RTC_DCHECK_NOTREACHED() RTC_DCHECK(RTC_UNREACHABLE_CODE_HIT) #define RTC_CHECK_NOTREACHED()"
  },
  {
    "label": "UnreachableCodeReached()",
    "kind": "Method",
    "detail": "Function (\\::rtc::)",
    "insertText": "UnreachableCodeReached(\\ RTC_UNREACHABLE_FILE_AND_LINE_CALL_ARGS)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define RTC_FATAL() \\ ::rtc::webrtc_checks_impl::FatalLogCall<false>(__FILE__, __LINE__, \\ \"FATAL()\") & \\ ::rtc::webrtc_checks_impl::LogStreamer<>() template <typename T> inline T CheckedDivExact(T a, T b)"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(a % b, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(condition))"
  },
  {
    "label": "rtc_FatalMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rtc_FatalMessage(__FILE__, __LINE__, \\ RTC_CHECK_EVAL_MESSAGE(\"CHECK failed: \" #condition))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define RTC_CHECK_EQ(a, b) RTC_CHECK((a) == (b)) #define RTC_CHECK_NE(a, b) RTC_CHECK((a) != (b)) #define RTC_CHECK_LE(a, b) RTC_CHECK((a) <= (b)) #define RTC_CHECK_LT(a, b) RTC_CHECK((a) < (b)) #define RTC_CHECK_GE(a, b) RTC_CHECK((a) >= (b)) #define RTC_CHECK_GT(a, b) RTC_CHECK((a) > (b)) #define RTC_DCHECK(condition)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(RTC_DCHECK_IS_ON && !(condition))"
  },
  {
    "label": "rtc_FatalMessage()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "rtc_FatalMessage(__FILE__, __LINE__, \\ RTC_CHECK_EVAL_MESSAGE(\"DCHECK failed: \" #condition))"
  }
]