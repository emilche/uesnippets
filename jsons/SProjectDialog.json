[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SProjectBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectBrowser"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWidgetSwitcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidgetSwitcher"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FTemplateCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTemplateCategory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SProjectDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectDialog"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" GameProjectUtils . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Optional . h \" # include \" Styling / SlateTypes . h \" # include \" TemplateItem . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateConstants . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STileView . h \" class ITableRow ; class SProjectBrowser ; class SWidget ; class SWidgetSwitcher ; struct FSlateBrush ; struct FTemplateCategory ; enum class EHardwareClass : uint8 ; enum class EGraphicsPreset : uint8 ; enum class EProjectDialogModeMode : uint8 { Hybrid,OpenProject,NewProject,} ; class SProjectDialog : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectDialog)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, EProjectDialogModeMode Mode)"
  },
  {
    "label": "SProjectDialog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SProjectDialog()"
  },
  {
    "label": "FindTemplateProjects()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TArray<TSharedPtr<FTemplateItem>>>)",
    "insertText": "FindTemplateProjects()"
  },
  {
    "label": "GetSelectedTemplateItem()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FTemplateItem>)",
    "insertText": "GetSelectedTemplateItem()"
  },
  {
    "label": "GetSelectedTemplateProperty()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "GetSelectedTemplateProperty(T FTemplateItem::* Prop)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "T()"
  },
  {
    "label": "OnMajorTemplateCategorySelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMajorTemplateCategorySelectionChanged(TSharedPtr<FTemplateCategory> Item, ESelectInfo::Type SelectType)"
  },
  {
    "label": "ConstructMajorCategoryTableRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "ConstructMajorCategoryTableRow(TSharedPtr<FTemplateCategory> Item, const TSharedRef<STableViewBase>& TableView)"
  },
  {
    "label": "PopulateTemplateCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateTemplateCategories()"
  },
  {
    "label": "OnCurrentProjectFilePathChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurrentProjectFilePathChanged(const FText& InValue)"
  },
  {
    "label": "OnCurrentProjectFileNameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurrentProjectFileNameChanged(const FText& InValue)"
  },
  {
    "label": "HandlePathBrowseButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandlePathBrowseButtonClicked()"
  },
  {
    "label": "UpdateProjectFileValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProjectFileValidity()"
  },
  {
    "label": "IsCompilerRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompilerRequired()"
  },
  {
    "label": "IsIDERequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIDERequired()"
  },
  {
    "label": "GetProjectSettingsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetProjectSettingsVisibility()"
  },
  {
    "label": "GetSelectedTemplateClassVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSelectedTemplateClassVisibility()"
  },
  {
    "label": "GetSelectedTemplateAssetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSelectedTemplateAssetVisibility()"
  },
  {
    "label": "GetGlobalErrorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetGlobalErrorVisibility()"
  },
  {
    "label": "GetCreateButtonVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetCreateButtonVisibility()"
  },
  {
    "label": "GetSuggestedIDEButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSuggestedIDEButtonVisibility()"
  },
  {
    "label": "GetDisableIDEButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDisableIDEButtonVisibility()"
  },
  {
    "label": "GetCurrentProjectFileName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentProjectFileName()"
  },
  {
    "label": "GetCurrentProjectFilePath()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentProjectFilePath()"
  },
  {
    "label": "GetSelectedTemplateAssetTypes()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedTemplateAssetTypes()"
  },
  {
    "label": "GetSelectedTemplateClassTypes()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedTemplateClassTypes()"
  },
  {
    "label": "GetGlobalErrorLabelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGlobalErrorLabelText()"
  },
  {
    "label": "GetNameAndLocationValidityErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNameAndLocationValidityErrorText()"
  },
  {
    "label": "GetProjectFilenameWithPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectFilenameWithPath()"
  },
  {
    "label": "MakeNewProjectDialogButtons()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeNewProjectDialogButtons()"
  },
  {
    "label": "MakeOpenProjectDialogButtons()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeOpenProjectDialogButtons()"
  },
  {
    "label": "MakeTemplateProjectView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTemplateProjectView()"
  },
  {
    "label": "MakeRecentProjectsView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeRecentProjectsView()"
  },
  {
    "label": "MakeHybridView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeHybridView(EProjectDialogModeMode Mode)"
  },
  {
    "label": "MakeProjectOptionsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeProjectOptionsWidget()"
  },
  {
    "label": "MakeRecentProjectsTile()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeRecentProjectsTile()"
  },
  {
    "label": "MakeNewProjectPathArea()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeNewProjectPathArea()"
  },
  {
    "label": "MakeOpenProjectPathArea()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeOpenProjectPathArea()"
  },
  {
    "label": "GetCopyStarterContentCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetCopyStarterContentCheckState()"
  },
  {
    "label": "GetSelectedTemplatePreviewImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetSelectedTemplatePreviewImage()"
  },
  {
    "label": "CanCreateProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateProject()"
  },
  {
    "label": "OnCancel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCancel()"
  },
  {
    "label": "IsStarterContentAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStarterContentAvailable()"
  },
  {
    "label": "SetHardwareClassTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHardwareClassTarget(EHardwareClass InHardwareClass)"
  },
  {
    "label": "GetHardwareClassTarget()",
    "kind": "Method",
    "detail": "Function (EHardwareClass)",
    "insertText": "GetHardwareClassTarget()"
  },
  {
    "label": "GetGraphicsPreset()",
    "kind": "Method",
    "detail": "Function (EGraphicsPreset)",
    "insertText": "GetGraphicsPreset()"
  },
  {
    "label": "SetDefaultProjectLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultProjectLocation()"
  },
  {
    "label": "SetCurrentMajorCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentMajorCategory(FName Category)"
  },
  {
    "label": "OnRecentProjectsClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRecentProjectsClicked()"
  },
  {
    "label": "CreateProjectInfo()",
    "kind": "Method",
    "detail": "Function (FProjectInformation)",
    "insertText": "CreateProjectInfo()"
  },
  {
    "label": "CreateProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateProject(const FString& ProjectFile)"
  },
  {
    "label": "CreateAndOpenProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndOpenProject()"
  },
  {
    "label": "OpenProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenProject(const FString& ProjectFile)"
  },
  {
    "label": "OpenCodeIDE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenCodeIDE(const FString& ProjectFile)"
  },
  {
    "label": "CloseWindowIfAppropriate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseWindowIfAppropriate(bool ForceClose = false)"
  },
  {
    "label": "DisplayError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayError(const FText& ErrorText)"
  },
  {
    "label": "GetAllTemplateCategories()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FTemplateCategory>>)",
    "insertText": "GetAllTemplateCategories()"
  }
]