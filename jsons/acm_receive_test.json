[
  {
    "label": "AudioCodingModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioCodingModule"
  },
  {
    "label": "AudioDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoder"
  },
  {
    "label": "AudioSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioSink"
  },
  {
    "label": "PacketSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSource"
  },
  {
    "label": "AcmReceiveTestOldApi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AcmReceiveTestOldApi"
  },
  {
    "label": "NumOutputChannels",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NumOutputChannels"
  },
  {
    "label": "AcmReceiveTestToggleOutputFreqOldApi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AcmReceiveTestToggleOutputFreqOldApi"
  },
  {
    "label": "AcmReceiveTestOldApi()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_ACM2_ACM_RECEIVE_TEST_H_ # define MODULES_AUDIO_CODING_ACM2_ACM_RECEIVE_TEST_H_ # include<stddef . h> # include<memory> # include<string> # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / scoped_refptr . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class AudioCodingModule ; class AudioDecoder ; namespace test { class AudioSink ; class PacketSource ; class AcmReceiveTestOldApi { public : enum NumOutputChannels : size_t { kArbitraryChannels = 0,kMonoOutput = 1,kStereoOutput = 2,kQuadOutput = 4 } ;)",
    "insertText": "AcmReceiveTestOldApi(PacketSource* packet_source, AudioSink* audio_sink, int output_freq_hz, NumOutputChannels exptected_output_channels, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory)"
  },
  {
    "label": "AcmReceiveTestOldApi()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AcmReceiveTestOldApi()"
  },
  {
    "label": "AcmReceiveTestOldApi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcmReceiveTestOldApi(const AcmReceiveTestOldApi&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AcmReceiveTestOldApi&)",
    "insertText": "operator(const AcmReceiveTestOldApi&)"
  },
  {
    "label": "RegisterDefaultCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDefaultCodecs()"
  },
  {
    "label": "RegisterNetEqTestCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNetEqTestCodecs()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "get_acm()",
    "kind": "Method",
    "detail": "Function (AudioCodingModule*)",
    "insertText": "get_acm()"
  },
  {
    "label": "AfterGetAudio()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AfterGetAudio()"
  },
  {
    "label": "AcmReceiveTestToggleOutputFreqOldApi()",
    "kind": "Method",
    "detail": "Function (} SimulatedClock clock_ ; std::unique_ptr<AudioCodingModule> acm_ ; PacketSource* packet_source_ ; AudioSink* audio_sink_ ; int output_freq_hz_ ; NumOutputChannels exptected_output_channels_ ; } ; class AcmReceiveTestToggleOutputFreqOldApi : public AcmReceiveTestOldApi { public :)",
    "insertText": "AcmReceiveTestToggleOutputFreqOldApi(PacketSource* packet_source, AudioSink* audio_sink, int output_freq_hz_1, int output_freq_hz_2, int toggle_period_ms, NumOutputChannels exptected_output_channels)"
  }
]