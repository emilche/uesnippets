[
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "IRBuilderDefaultInserter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRBuilderDefaultInserter"
  },
  {
    "label": "IRBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRBuilderBase"
  },
  {
    "label": "InsertPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertPoint"
  },
  {
    "label": "InsertPointGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertPointGuard"
  },
  {
    "label": "FastMathFlagGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastMathFlagGuard"
  },
  {
    "label": "IRBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRBuilder"
  },
  {
    "label": "InsertHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_IRBUILDER_H # define LLVM_IR_IRBUILDER_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / IR / BasicBlock . h \" # include \" llvm / IR / ConstantFolder . h \" # include \" llvm / IR / DataLayout . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / GlobalVariable . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / IR / LLVMContext . h \" # include \" llvm / IR / Operator . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Support / CBindingWrapping . h \" namespace llvm { class MDNode ; template<bool preserveNames = true> class IRBuilderDefaultInserter { protected : void)",
    "insertText": "InsertHelper(Instruction *I, const Twine &Name, BasicBlock *BB, BasicBlock::iterator InsertPt)"
  },
  {
    "label": "IRBuilderBase()",
    "kind": "Method",
    "detail": "Function (} } ; class IRBuilderBase { DebugLoc CurDbgLocation ; protected : BasicBlock* BB ; BasicBlock::iterator InsertPt ; LLVMContext& Context ; MDNode* DefaultFPMathTag ; FastMathFlags FMF ; public :)",
    "insertText": "IRBuilderBase(LLVMContext &context, MDNode *FPMathTag = nullptr) : Context(context), DefaultFPMathTag(FPMathTag), FMF()"
  },
  {
    "label": "ClearInsertionPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearInsertionPoint()"
  },
  {
    "label": "GetInsertBlock()",
    "kind": "Method",
    "detail": "Function (BB = nullptr ; InsertPt = nullptr ; } BasicBlock*)",
    "insertText": "GetInsertBlock()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (BB = TheBB ; InsertPt = BB ->)",
    "insertText": "end()"
  },
  {
    "label": "SetInsertPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInsertPoint(Instruction *I)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (BB = I ->)",
    "insertText": "getParent()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (InsertPt = I ;)",
    "insertText": "assert(I != BB->end() && \"Can't read debug loc from end()\")"
  },
  {
    "label": "SetCurrentDebugLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentDebugLocation(I->getDebugLoc())"
  },
  {
    "label": "SetInsertPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInsertPoint(BasicBlock *TheBB, BasicBlock::iterator IP)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BB = TheBB ; InsertPt = IP ;)",
    "insertText": "if(IP != TheBB->end()) SetCurrentDebugLocation(IP->getDebugLoc())"
  },
  {
    "label": "SetCurrentDebugLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCurrentDebugLocation(DebugLoc L)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (CurDbgLocation =)",
    "insertText": "move(L)"
  },
  {
    "label": "getCurrentDebugLocation()",
    "kind": "Method",
    "detail": "Function (} const DebugLoc&)",
    "insertText": "getCurrentDebugLocation()"
  },
  {
    "label": "getCurrentFunctionReturnType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getCurrentFunctionReturnType()"
  },
  {
    "label": "InsertPoint()",
    "kind": "Method",
    "detail": "Function (class InsertPoint { BasicBlock* Block ; BasicBlock::iterator Point ; public :)",
    "insertText": "InsertPoint() : Block(nullptr)"
  },
  {
    "label": "InsertPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InsertPoint(BasicBlock *InsertBlock, BasicBlock::iterator InsertPoint) : Block(InsertBlock), Point(InsertPoint)"
  },
  {
    "label": "isSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSet()"
  },
  {
    "label": "getBlock()",
    "kind": "Method",
    "detail": "Function (} llvm::BasicBlock*)",
    "insertText": "getBlock()"
  },
  {
    "label": "saveAndClearIP()",
    "kind": "Method",
    "detail": "Function (} InsertPoint)",
    "insertText": "saveAndClearIP()"
  },
  {
    "label": "IP()",
    "kind": "Method",
    "detail": "Function (InsertPoint)",
    "insertText": "IP(GetInsertBlock(), GetInsertPoint())"
  },
  {
    "label": "getDefaultFPMathTag()",
    "kind": "Method",
    "detail": "Function (} MDNode*)",
    "insertText": "getDefaultFPMathTag()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (FMF .)",
    "insertText": "clear()"
  },
  {
    "label": "SetDefaultFPMathTag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefaultFPMathTag(MDNode *FPMathTag)"
  },
  {
    "label": "SetFastMathFlags()",
    "kind": "Method",
    "detail": "Function (DefaultFPMathTag = FPMathTag ; } void)",
    "insertText": "SetFastMathFlags(FastMathFlags NewFMF)"
  },
  {
    "label": "InsertPointGuard()",
    "kind": "Method",
    "detail": "Function (FMF = NewFMF ; } class InsertPointGuard { IRBuilderBase& Builder ; AssertingVH<BasicBlock> Block ; BasicBlock::iterator Point ; DebugLoc DbgLoc ;)",
    "insertText": "InsertPointGuard(const InsertPointGuard &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InsertPointGuard&)",
    "insertText": "operator(const InsertPointGuard &)"
  },
  {
    "label": "InsertPointGuard()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "InsertPointGuard(IRBuilderBase &B) : Builder(B), Block(B.GetInsertBlock()), Point(B.GetInsertPoint()), DbgLoc(B.getCurrentDebugLocation())"
  },
  {
    "label": "InsertPointGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "InsertPointGuard()"
  },
  {
    "label": "restoreIP()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "restoreIP(InsertPoint(Block, Point))"
  },
  {
    "label": "SetCurrentDebugLocation()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "SetCurrentDebugLocation(DbgLoc)"
  },
  {
    "label": "FastMathFlagGuard()",
    "kind": "Method",
    "detail": "Function (} } ; class FastMathFlagGuard { IRBuilderBase& Builder ; FastMathFlags FMF ; MDNode* FPMathTag ;)",
    "insertText": "FastMathFlagGuard(const FastMathFlagGuard &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FastMathFlagGuard&)",
    "insertText": "operator(const FastMathFlagGuard &)"
  },
  {
    "label": "FastMathFlagGuard()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FastMathFlagGuard(IRBuilderBase &B) : Builder(B), FMF(B.FMF), FPMathTag(B.DefaultFPMathTag)"
  },
  {
    "label": "FastMathFlagGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FastMathFlagGuard()"
  },
  {
    "label": "CreateGlobalString()",
    "kind": "Method",
    "detail": "Function (Builder . FMF = FMF ; Builder . DefaultFPMathTag = FPMathTag ; } } ; GlobalVariable*)",
    "insertText": "CreateGlobalString(StringRef Str, const Twine &Name = \"\", unsigned AddressSpace = 0)"
  },
  {
    "label": "getInt1()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "getInt1(bool V)"
  },
  {
    "label": "getTrue()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getTrue()"
  },
  {
    "label": "getFalse()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getFalse()"
  },
  {
    "label": "getInt8()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getInt8(uint8_t C)"
  },
  {
    "label": "getInt16()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getInt16(uint16_t C)"
  },
  {
    "label": "getInt32()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getInt32(uint32_t C)"
  },
  {
    "label": "getInt64()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getInt64(uint64_t C)"
  },
  {
    "label": "getIntN()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getIntN(unsigned N, uint64_t C)"
  },
  {
    "label": "getInt()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "getInt(const APInt &AI)"
  },
  {
    "label": "getInt1Ty()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getInt1Ty()"
  },
  {
    "label": "getInt8Ty()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getInt8Ty()"
  },
  {
    "label": "getInt16Ty()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getInt16Ty()"
  },
  {
    "label": "getInt32Ty()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getInt32Ty()"
  },
  {
    "label": "getInt64Ty()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getInt64Ty()"
  },
  {
    "label": "getInt128Ty()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getInt128Ty()"
  },
  {
    "label": "getIntNTy()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getIntNTy(unsigned N)"
  },
  {
    "label": "getHalfTy()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getHalfTy()"
  },
  {
    "label": "getFloatTy()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getFloatTy()"
  },
  {
    "label": "getDoubleTy()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getDoubleTy()"
  },
  {
    "label": "getVoidTy()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getVoidTy()"
  },
  {
    "label": "getInt8PtrTy()",
    "kind": "Method",
    "detail": "Function (} PointerType*)",
    "insertText": "getInt8PtrTy(unsigned AddrSpace = 0)"
  },
  {
    "label": "getIntPtrTy()",
    "kind": "Method",
    "detail": "Function (} IntegerType*)",
    "insertText": "getIntPtrTy(const DataLayout &DL, unsigned AddrSpace = 0)"
  },
  {
    "label": "CreateMemSet()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateMemSet(Value *Ptr, Value *Val, uint64_t Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)"
  },
  {
    "label": "CreateMemSet()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateMemSet(Value *Ptr, Value *Val, Value *Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)"
  },
  {
    "label": "CreateMemCpy()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateMemCpy(Value *Dst, Value *Src, uint64_t Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *TBAAStructTag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)"
  },
  {
    "label": "CreateMemCpy()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateMemCpy(Value *Dst, Value *Src, Value *Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *TBAAStructTag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)"
  },
  {
    "label": "CreateMemMove()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateMemMove(Value *Dst, Value *Src, uint64_t Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)"
  },
  {
    "label": "CreateMemMove()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateMemMove(Value *Dst, Value *Src, Value *Size, unsigned Align, bool isVolatile = false, MDNode *TBAATag = nullptr, MDNode *ScopeTag = nullptr, MDNode *NoAliasTag = nullptr)"
  },
  {
    "label": "CreateLifetimeStart()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateLifetimeStart(Value *Ptr, ConstantInt *Size = nullptr)"
  },
  {
    "label": "CreateLifetimeEnd()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateLifetimeEnd(Value *Ptr, ConstantInt *Size = nullptr)"
  },
  {
    "label": "CreateMaskedLoad()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateMaskedLoad(Value *Ptr, unsigned Align, Value *Mask, Value *PassThru = 0, const Twine &Name = \"\")"
  },
  {
    "label": "CreateMaskedStore()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateMaskedStore(Value *Val, Value *Ptr, unsigned Align, Value *Mask)"
  },
  {
    "label": "CreateAssumption()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateAssumption(Value *Cond)"
  },
  {
    "label": "CreateGCStatepointCall()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateGCStatepointCall(uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee, ArrayRef<Value *> CallArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGCStatepointCall()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateGCStatepointCall(uint64_t ID, uint32_t NumPatchBytes, Value *ActualCallee, ArrayRef<Use> CallArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGCStatepointInvoke()",
    "kind": "Method",
    "detail": "Function (InvokeInst*)",
    "insertText": "CreateGCStatepointInvoke(uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> InvokeArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGCStatepointInvoke()",
    "kind": "Method",
    "detail": "Function (InvokeInst*)",
    "insertText": "CreateGCStatepointInvoke(uint64_t ID, uint32_t NumPatchBytes, Value *ActualInvokee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Use> InvokeArgs, ArrayRef<Value *> DeoptArgs, ArrayRef<Value *> GCArgs, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGCResult()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateGCResult(Instruction *Statepoint, Type *ResultType, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGCRelocate()",
    "kind": "Method",
    "detail": "Function (CallInst*)",
    "insertText": "CreateGCRelocate(Instruction *Statepoint, int BaseOffset, int DerivedOffset, Type *ResultType, const Twine &Name = \"\")"
  },
  {
    "label": "CreateMaskedIntrinsic()",
    "kind": "Method",
    "detail": "Function (private : CallInst*)",
    "insertText": "CreateMaskedIntrinsic(Intrinsic::ID Id, ArrayRef<Value *> Ops, Type *DataTy, const Twine &Name = \"\")"
  },
  {
    "label": "getCastedInt8PtrValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "getCastedInt8PtrValue(Value *Ptr)"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (} ; template<bool preserveNames = true,T = ConstantFolder,Inserter = IRBuilderDefaultInserter<preserveNames>> class IRBuilder : public IRBuilderBase,public Inserter { T Folder ; public : bool AllowFolding = true ;)",
    "insertText": "IRBuilder(LLVMContext &C, const T &F, const Inserter &I = Inserter(), MDNode *FPMathTag = nullptr) : IRBuilderBase(C, FPMathTag), Inserter(I), Folder(F)"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IRBuilder(LLVMContext &C, MDNode *FPMathTag = nullptr) : IRBuilderBase(C, FPMathTag), Folder()"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IRBuilder(BasicBlock *TheBB, const T &F, MDNode *FPMathTag = nullptr) : IRBuilderBase(TheBB->getContext(), FPMathTag), Folder(F)"
  },
  {
    "label": "SetInsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInsertPoint(TheBB)"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IRBuilder(BasicBlock *TheBB, MDNode *FPMathTag = nullptr) : IRBuilderBase(TheBB->getContext(), FPMathTag), Folder()"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IRBuilder(Instruction *IP, MDNode *FPMathTag = nullptr) : IRBuilderBase(IP->getContext(), FPMathTag), Folder()"
  },
  {
    "label": "SetInsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInsertPoint(IP)"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, const T& F, MDNode *FPMathTag = nullptr) : IRBuilderBase(TheBB->getContext(), FPMathTag), Folder(F)"
  },
  {
    "label": "SetInsertPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInsertPoint(TheBB, IP)"
  },
  {
    "label": "IRBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IRBuilder(BasicBlock *TheBB, BasicBlock::iterator IP, MDNode *FPMathTag = nullptr) : IRBuilderBase(TheBB->getContext(), FPMathTag), Folder()"
  },
  {
    "label": "getFolder()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "getFolder()"
  },
  {
    "label": "InsertHelper()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "InsertHelper(I, Name, BB, InsertPt)"
  },
  {
    "label": "SetInstDebugLocation()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetInstDebugLocation(I)"
  },
  {
    "label": "CreateRet()",
    "kind": "Method",
    "detail": "Function (} ReturnInst*)",
    "insertText": "CreateRet(Value *V)"
  },
  {
    "label": "CreateAggregateRet()",
    "kind": "Method",
    "detail": "Function (} ReturnInst*)",
    "insertText": "CreateAggregateRet(Value *const *retVals, unsigned N)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* V =)",
    "insertText": "get(getCurrentFunctionReturnType())"
  },
  {
    "label": "CreateBr()",
    "kind": "Method",
    "detail": "Function (} BranchInst*)",
    "insertText": "CreateBr(BasicBlock *Dest)"
  },
  {
    "label": "CreateCondBr()",
    "kind": "Method",
    "detail": "Function (} BranchInst*)",
    "insertText": "CreateCondBr(Value *Cond, BasicBlock *True, BasicBlock *False, MDNode *BranchWeights = nullptr)"
  },
  {
    "label": "CreateSwitch()",
    "kind": "Method",
    "detail": "Function (} SwitchInst*)",
    "insertText": "CreateSwitch(Value *V, BasicBlock *Dest, unsigned NumCases = 10, MDNode *BranchWeights = nullptr)"
  },
  {
    "label": "CreateIndirectBr()",
    "kind": "Method",
    "detail": "Function (} IndirectBrInst*)",
    "insertText": "CreateIndirectBr(Value *Addr, unsigned NumDests = 10)"
  },
  {
    "label": "CreateInvoke()",
    "kind": "Method",
    "detail": "Function (} InvokeInst*)",
    "insertText": "CreateInvoke(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInvoke()",
    "kind": "Method",
    "detail": "Function (} InvokeInst*)",
    "insertText": "CreateInvoke(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, Value *Arg1, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInvoke3()",
    "kind": "Method",
    "detail": "Function (} InvokeInst*)",
    "insertText": "CreateInvoke3(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, Value *Arg1, Value *Arg2, Value *Arg3, const Twine &Name = \"\")"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Value* Args [ ] = { Arg1,Arg2,Arg3 } ; return)",
    "insertText": "Insert(InvokeInst::Create(Callee, NormalDest, UnwindDest, Args), Name)"
  },
  {
    "label": "CreateInvoke()",
    "kind": "Method",
    "detail": "Function (} InvokeInst*)",
    "insertText": "CreateInvoke(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args, const Twine &Name = \"\")"
  },
  {
    "label": "CreateResume()",
    "kind": "Method",
    "detail": "Function (} ResumeInst*)",
    "insertText": "CreateResume(Value *Exn)"
  },
  {
    "label": "CreateUnreachable()",
    "kind": "Method",
    "detail": "Function (} UnreachableInst*)",
    "insertText": "CreateUnreachable()"
  },
  {
    "label": "CreateInsertNUWNSWBinOp()",
    "kind": "Method",
    "detail": "Function (} private : BinaryOperator*)",
    "insertText": "CreateInsertNUWNSWBinOp(BinaryOperator::BinaryOps Opc, Value *LHS, Value *RHS, const Twine &Name, bool HasNUW, bool HasNSW)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (BinaryOperator* BO =)",
    "insertText": "Insert(BinaryOperator::Create(Opc, LHS, RHS), Name)"
  },
  {
    "label": "setFastMathFlags()",
    "kind": "Method",
    "detail": "Function (I ->)",
    "insertText": "setFastMathFlags(FMF)"
  },
  {
    "label": "CreateNSWAdd()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNSWAdd(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateNUWAdd()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNUWAdd(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFAdd()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFAdd(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateSub()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSub(Value *LHS, Value *RHS, const Twine &Name = \"\", bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "CreateNSWSub()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNSWSub(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateNUWSub()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNUWSub(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFSub()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFSub(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateMul()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateMul(Value *LHS, Value *RHS, const Twine &Name = \"\", bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "CreateNSWMul()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNSWMul(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateNUWMul()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNUWMul(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFMul()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFMul(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateUDiv()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateUDiv(Value *LHS, Value *RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateExactUDiv()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateExactUDiv(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateSDiv()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSDiv(Value *LHS, Value *RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateExactSDiv()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateExactSDiv(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFDiv()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFDiv(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateURem()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateURem(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateSRem()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSRem(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFRem()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFRem(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateShl()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateShl(Value *LHS, Value *RHS, const Twine &Name = \"\", bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "CreateShl()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateShl(Value *LHS, const APInt &RHS, const Twine &Name = \"\", bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "CreateShl()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateShl(Value *LHS, uint64_t RHS, const Twine &Name = \"\", bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "CreateLShr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateLShr(Value *LHS, Value *RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateLShr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateLShr(Value *LHS, const APInt &RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateLShr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateLShr(Value *LHS, uint64_t RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateAShr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAShr(Value *LHS, Value *RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateAShr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAShr(Value *LHS, const APInt &RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateAShr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAShr(Value *LHS, uint64_t RHS, const Twine &Name = \"\", bool isExact = false)"
  },
  {
    "label": "CreateAnd()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAnd(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Insert(BinaryOperator::CreateAnd(LHS, RHS), Name)"
  },
  {
    "label": "CreateAnd()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAnd(Value *LHS, const APInt &RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateAnd()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAnd(Value *LHS, uint64_t RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateOr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateOr(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Insert(BinaryOperator::CreateOr(LHS, RHS), Name)"
  },
  {
    "label": "CreateOr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateOr(Value *LHS, const APInt &RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateOr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateOr(Value *LHS, uint64_t RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateXor()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateXor(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateXor()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateXor(Value *LHS, const APInt &RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateXor()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateXor(Value *LHS, uint64_t RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateBinOp()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateBinOp(Instruction::BinaryOps Opc, Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (llvm::Instruction* BinOp =)",
    "insertText": "Create(Opc, LHS, RHS)"
  },
  {
    "label": "CreateNeg()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNeg(Value *V, const Twine &Name = \"\", bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (BinaryOperator* BO =)",
    "insertText": "Insert(BinaryOperator::CreateNeg(V), Name)"
  },
  {
    "label": "CreateNUWNeg()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNUWNeg(Value *V, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFNeg()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFNeg(Value *V, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateNot()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateNot(Value *V, const Twine &Name = \"\")"
  },
  {
    "label": "CreateAlloca()",
    "kind": "Method",
    "detail": "Function (} AllocaInst*)",
    "insertText": "CreateAlloca(Type *Ty, Value *ArraySize = nullptr, const Twine &Name = \"\")"
  },
  {
    "label": "CreateLoad()",
    "kind": "Method",
    "detail": "Function (} LoadInst*)",
    "insertText": "CreateLoad(Value *Ptr, const char *Name)"
  },
  {
    "label": "CreateLoad()",
    "kind": "Method",
    "detail": "Function (} LoadInst*)",
    "insertText": "CreateLoad(Value *Ptr, const Twine &Name = \"\")"
  },
  {
    "label": "CreateLoad()",
    "kind": "Method",
    "detail": "Function (} LoadInst*)",
    "insertText": "CreateLoad(Type *Ty, Value *Ptr, const Twine &Name = \"\")"
  },
  {
    "label": "CreateLoad()",
    "kind": "Method",
    "detail": "Function (} LoadInst*)",
    "insertText": "CreateLoad(Value *Ptr, bool isVolatile, const Twine &Name = \"\")"
  },
  {
    "label": "CreateStore()",
    "kind": "Method",
    "detail": "Function (} StoreInst*)",
    "insertText": "CreateStore(Value *Val, Value *Ptr, bool isVolatile = false)"
  },
  {
    "label": "CreateAlignedLoad()",
    "kind": "Method",
    "detail": "Function (} LoadInst*)",
    "insertText": "CreateAlignedLoad(Value *Ptr, unsigned Align, const char *Name)"
  },
  {
    "label": "CreateLoad()",
    "kind": "Method",
    "detail": "Function (LoadInst* LI =)",
    "insertText": "CreateLoad(Ptr, Name)"
  },
  {
    "label": "setAlignment()",
    "kind": "Method",
    "detail": "Function (LI ->)",
    "insertText": "setAlignment(Align)"
  },
  {
    "label": "CreateLoad()",
    "kind": "Method",
    "detail": "Function (LoadInst* LI =)",
    "insertText": "CreateLoad(Ptr, isVolatile, Name)"
  },
  {
    "label": "CreateStore()",
    "kind": "Method",
    "detail": "Function (StoreInst* SI =)",
    "insertText": "CreateStore(Val, Ptr, isVolatile)"
  },
  {
    "label": "CreateAtomicCmpXchg()",
    "kind": "Method",
    "detail": "Function (} AtomicCmpXchgInst*)",
    "insertText": "CreateAtomicCmpXchg(Value *Ptr, Value *Cmp, Value *New, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope = CrossThread)"
  },
  {
    "label": "CreateAtomicRMW()",
    "kind": "Method",
    "detail": "Function (} AtomicRMWInst*)",
    "insertText": "CreateAtomicRMW(AtomicRMWInst::BinOp Op, Value *Ptr, Value *Val, AtomicOrdering Ordering, SynchronizationScope SynchScope = CrossThread)"
  },
  {
    "label": "CreateGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateGEP(Value *Ptr, ArrayRef<Value *> IdxList, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateGEP(Type *Ty, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &Name = \"\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i,e ;)",
    "insertText": "for(i = 0, e = IdxList.size(); i != e; ++i) if (!isa<Constant>(IdxList[i]))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Insert(GetElementPtrInst::Create(Ty, Ptr, IdxList), Name)"
  },
  {
    "label": "CreateInBoundsGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateInBoundsGEP(Value *Ptr, ArrayRef<Value *> IdxList, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInBoundsGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateInBoundsGEP(Type *Ty, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &Name = \"\")"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Insert(GetElementPtrInst::CreateInBounds(Ty, Ptr, IdxList), Name)"
  },
  {
    "label": "CreateGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateGEP(Value *Ptr, Value *Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateGEP(Type *Ty, Value *Ptr, Value *Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInBoundsGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateInBoundsGEP(Type *Ty, Value *Ptr, Value *Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateConstGEP1_32()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstGEP1_32(Value *Ptr, unsigned Idx0, const Twine &Name = \"\")"
  },
  {
    "label": "CreateConstGEP1_32()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstGEP1_32(Type *Ty, Value *Ptr, unsigned Idx0, const Twine &Name = \"\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Idx =)",
    "insertText": "get(Type::getInt32Ty(Context), Idx0)"
  },
  {
    "label": "CreateConstInBoundsGEP1_32()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstInBoundsGEP1_32(Type *Ty, Value *Ptr, unsigned Idx0, const Twine &Name = \"\")"
  },
  {
    "label": "CreateConstGEP2_32()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstGEP2_32(Type *Ty, Value *Ptr, unsigned Idx0, unsigned Idx1, const Twine &Name = \"\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Idxs [ ] = {)",
    "insertText": "get(Type::getInt32Ty(Context), Idx0), ConstantInt::get(Type::getInt32Ty(Context), Idx1)"
  },
  {
    "label": "CreateConstInBoundsGEP2_32()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstInBoundsGEP2_32(Type *Ty, Value *Ptr, unsigned Idx0, unsigned Idx1, const Twine &Name = \"\")"
  },
  {
    "label": "CreateConstGEP1_64()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstGEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = \"\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Idx =)",
    "insertText": "get(Type::getInt64Ty(Context), Idx0)"
  },
  {
    "label": "CreateConstInBoundsGEP1_64()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstInBoundsGEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = \"\")"
  },
  {
    "label": "CreateConstGEP2_64()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstGEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = \"\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Idxs [ ] = {)",
    "insertText": "get(Type::getInt64Ty(Context), Idx0), ConstantInt::get(Type::getInt64Ty(Context), Idx1)"
  },
  {
    "label": "CreateConstInBoundsGEP2_64()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateConstInBoundsGEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = \"\")"
  },
  {
    "label": "CreateStructGEP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateStructGEP(Type *Ty, Value *Ptr, unsigned Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateGlobalStringPtr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateGlobalStringPtr(StringRef Str, const Twine &Name = \"\", unsigned AddressSpace = 0)"
  },
  {
    "label": "CreateGlobalString()",
    "kind": "Method",
    "detail": "Function (GlobalVariable* gv =)",
    "insertText": "CreateGlobalString(Str, Name, AddressSpace)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* zero =)",
    "insertText": "get(Type::getInt32Ty(Context), 0)"
  },
  {
    "label": "CreateInBoundsGEP()",
    "kind": "Method",
    "detail": "Function (Value* Args [ ] = { zero,zero } ; return)",
    "insertText": "CreateInBoundsGEP(gv->getValueType(), gv, Args, Name)"
  },
  {
    "label": "CreateTrunc()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateTrunc(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateZExt()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateZExt(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateSExt()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSExt(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateZExtOrTrunc()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateZExtOrTrunc(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(V->getType()->isIntOrIntVectorTy() && DestTy->isIntOrIntVectorTy() && \"Can only zero extend/truncate integers!\")"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (Type* VTy = V ->)",
    "insertText": "getType()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(V->getType()->isIntOrIntVectorTy() && DestTy->isIntOrIntVectorTy() && \"Can only sign extend/truncate integers!\")"
  },
  {
    "label": "CreateFPToSI()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFPToSI(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateUIToFP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateUIToFP(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateSIToFP()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSIToFP(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFPTrunc()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFPTrunc(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFPExt()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFPExt(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreatePtrToInt()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreatePtrToInt(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateIntToPtr()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateIntToPtr(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateBitCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateBitCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateAddrSpaceCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateAddrSpaceCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateZExtOrBitCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateZExtOrBitCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateSExtOrBitCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSExtOrBitCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateTruncOrBitCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateTruncOrBitCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateCast(Instruction::CastOps Op, Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreatePointerCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreatePointerCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreatePointerBitCastOrAddrSpaceCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreatePointerBitCastOrAddrSpaceCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Insert(CastInst::CreatePointerBitCastOrAddrSpaceCast(V, DestTy), Name)"
  },
  {
    "label": "CreateIntCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateIntCast(Value *V, Type *DestTy, bool isSigned, const Twine &Name = \"\")"
  },
  {
    "label": "CreateBitOrPointerCast()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateBitOrPointerCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateIntCast()",
    "kind": "Method",
    "detail": "Function (} private : Value*)",
    "insertText": "CreateIntCast(Value *, Type *, const char *)"
  },
  {
    "label": "CreateFPCast()",
    "kind": "Method",
    "detail": "Function (public : Value*)",
    "insertText": "CreateFPCast(Value *V, Type *DestTy, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpEQ()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpEQ(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpNE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpNE(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpUGT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpUGT(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpUGE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpUGE(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpULT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpULT(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpULE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpULE(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpSGT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpSGT(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpSGE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpSGE(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpSLT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpSLT(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateICmpSLE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmpSLE(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFCmpOEQ()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpOEQ(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpOGT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpOGT(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpOGE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpOGE(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpOLT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpOLT(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpOLE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpOLE(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpONE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpONE(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpORD()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpORD(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpUNO()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpUNO(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpUEQ()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpUEQ(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpUGT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpUGT(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpUGE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpUGE(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpULT()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpULT(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpULE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpULE(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateFCmpUNE()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmpUNE(Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateICmp(CmpInst::Predicate P, Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateFCmp(CmpInst::Predicate P, Value *LHS, Value *RHS, const Twine &Name = \"\", MDNode *FPMathTag = nullptr)"
  },
  {
    "label": "CreatePHI()",
    "kind": "Method",
    "detail": "Function (} PHINode*)",
    "insertText": "CreatePHI(Type *Ty, unsigned NumReservedValues, const Twine &Name = \"\")"
  },
  {
    "label": "CreateCall()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateCall(Value *Callee, ArrayRef<Value *> Args = None, const Twine &Name = \"\")"
  },
  {
    "label": "CreateCall()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateCall(llvm::FunctionType *FTy, Value *Callee, ArrayRef<Value *> Args, const Twine &Name = \"\")"
  },
  {
    "label": "CreateCall()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "CreateCall(Function *Callee, ArrayRef<Value *> Args, const Twine &Name = \"\")"
  },
  {
    "label": "CreateSelect()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateSelect(Value *C, Value *True, Value *False, const Twine &Name = \"\")"
  },
  {
    "label": "CreateVAArg()",
    "kind": "Method",
    "detail": "Function (} VAArgInst*)",
    "insertText": "CreateVAArg(Value *List, Type *Ty, const Twine &Name = \"\")"
  },
  {
    "label": "CreateExtractElement()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateExtractElement(Value *Vec, Value *Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateExtractElement()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateExtractElement(Value *Vec, uint64_t Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInsertElement()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateInsertElement(Value *Vec, Value *NewElt, Value *Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInsertElement()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateInsertElement(Value *Vec, Value *NewElt, uint64_t Idx, const Twine &Name = \"\")"
  },
  {
    "label": "CreateShuffleVector()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateShuffleVector(Value *V1, Value *V2, Value *Mask, const Twine &Name = \"\")"
  },
  {
    "label": "CreateShuffleVector()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateShuffleVector(Value *V1, Value *V2, ArrayRef<int> IntMask, const Twine &Name = \"\")"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t MaskSize = IntMask .)",
    "insertText": "size()"
  },
  {
    "label": "MaskVec()",
    "kind": "Method",
    "detail": "Function (SmallVector<Constant*,8>)",
    "insertText": "MaskVec(MaskSize)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Mask =)",
    "insertText": "get(MaskVec)"
  },
  {
    "label": "CreateExtractValue()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateExtractValue(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &Name = \"\")"
  },
  {
    "label": "CreateInsertValue()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateInsertValue(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &Name = \"\")"
  },
  {
    "label": "CreateLandingPad()",
    "kind": "Method",
    "detail": "Function (} LandingPadInst*)",
    "insertText": "CreateLandingPad(Type *Ty, unsigned NumClauses, const Twine &Name = \"\")"
  },
  {
    "label": "CreateIsNull()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateIsNull(Value *Arg, const Twine &Name = \"\")"
  },
  {
    "label": "CreateIsNotNull()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateIsNotNull(Value *Arg, const Twine &Name = \"\")"
  },
  {
    "label": "CreatePtrDiff()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreatePtrDiff(Value *LHS, Value *RHS, const Twine &Name = \"\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LHS->getType() == RHS->getType() && \"Pointer subtraction operand types must match!\")"
  },
  {
    "label": "PointerType()",
    "kind": "Method",
    "detail": "Function (PointerType* ArgType = cast<)",
    "insertText": "PointerType(LHS->getType())"
  },
  {
    "label": "CreatePtrToInt()",
    "kind": "Method",
    "detail": "Function (Value* LHS_int =)",
    "insertText": "CreatePtrToInt(LHS, Type::getInt64Ty(Context))"
  },
  {
    "label": "CreatePtrToInt()",
    "kind": "Method",
    "detail": "Function (Value* RHS_int =)",
    "insertText": "CreatePtrToInt(RHS, Type::getInt64Ty(Context))"
  },
  {
    "label": "CreateSub()",
    "kind": "Method",
    "detail": "Function (Value* Difference =)",
    "insertText": "CreateSub(LHS_int, RHS_int)"
  },
  {
    "label": "CreateVectorSplat()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateVectorSplat(unsigned NumElts, Value *V, const Twine &Name = \"\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumElts > 0 && \"Cannot splat to an empty vector!\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Undef =)",
    "insertText": "get(VectorType::get(V->getType(), NumElts))"
  },
  {
    "label": "CreateInsertElement()",
    "kind": "Method",
    "detail": "Function (V =)",
    "insertText": "CreateInsertElement(Undef, V, ConstantInt::get(I32Ty, 0), Name + \".splatinsert\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Zeros =)",
    "insertText": "get(VectorType::get(I32Ty, NumElts))"
  },
  {
    "label": "CreateExtractInteger()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "CreateExtractInteger(const DataLayout &DL, Value *From, IntegerType *ExtractedTy, uint64_t Offset, const Twine &Name)"
  },
  {
    "label": "IntegerType()",
    "kind": "Method",
    "detail": "Function (IntegerType* IntTy = cast<)",
    "insertText": "IntegerType(From->getType())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(DL.getTypeStoreSize(ExtractedTy) + Offset <= DL.getTypeStoreSize(IntTy) && \"Element extends past full value\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t ShAmt = 8* Offset ; Value* V = From ;)",
    "insertText": "if(DL.isBigEndian()) ShAmt = 8 * (DL.getTypeStoreSize(IntTy) - DL.getTypeStoreSize(ExtractedTy) - Offset)"
  },
  {
    "label": "CreateLShr()",
    "kind": "Method",
    "detail": "Function (V =)",
    "insertText": "CreateLShr(V, ShAmt, Name + \".shift\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert(ExtractedTy->getBitWidth() <= IntTy->getBitWidth() && \"Cannot extract to a larger integer!\")"
  },
  {
    "label": "CreateTrunc()",
    "kind": "Method",
    "detail": "Function (V =)",
    "insertText": "CreateTrunc(V, ExtractedTy, Name + \".trunc\")"
  },
  {
    "label": "CreateAlignmentAssumption()",
    "kind": "Method",
    "detail": "Function (} return V ; } CallInst*)",
    "insertText": "CreateAlignmentAssumption(const DataLayout &DL, Value *PtrValue, unsigned Alignment, Value *OffsetValue = nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<PointerType>(PtrValue->getType()) && \"trying to create an alignment assumption on a non-pointer?\")"
  },
  {
    "label": "PointerType()",
    "kind": "Method",
    "detail": "Function (PointerType* PtrTy = cast<)",
    "insertText": "PointerType(PtrValue->getType())"
  },
  {
    "label": "getIntPtrTy()",
    "kind": "Method",
    "detail": "Function (Type* IntPtrTy =)",
    "insertText": "getIntPtrTy(DL, PtrTy->getAddressSpace())"
  },
  {
    "label": "CreatePtrToInt()",
    "kind": "Method",
    "detail": "Function (Value* PtrIntValue =)",
    "insertText": "CreatePtrToInt(PtrValue, IntPtrTy, \"ptrint\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Value* Mask =)",
    "insertText": "get(IntPtrTy, Alignment > 0 ? Alignment - 1 : 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool IsOffsetZero = false ;)",
    "insertText": "if(ConstantInt *CI = dyn_cast<ConstantInt>(OffsetValue)) IsOffsetZero = CI->isZero()"
  },
  {
    "label": "CreateSub()",
    "kind": "Method",
    "detail": "Function (PtrIntValue =)",
    "insertText": "CreateSub(PtrIntValue, OffsetValue, \"offsetptr\")"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } Value* Zero =)",
    "insertText": "get(IntPtrTy, 0)"
  },
  {
    "label": "CreateAnd()",
    "kind": "Method",
    "detail": "Function (Value* MaskedPtr =)",
    "insertText": "CreateAnd(PtrIntValue, Mask, \"maskedptr\")"
  },
  {
    "label": "CreateICmpEQ()",
    "kind": "Method",
    "detail": "Function (Value* InvCond =)",
    "insertText": "CreateICmpEQ(MaskedPtr, Zero, \"maskcond\")"
  }
]