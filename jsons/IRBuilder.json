[
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "IRBuilderDefaultInserter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRBuilderDefaultInserter"
  },
  {
    "label": "shared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "shared"
  },
  {
    "label": "IRBuilderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRBuilderBase"
  },
  {
    "label": "InsertPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertPoint"
  },
  {
    "label": "InsertPointGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertPointGuard"
  },
  {
    "label": "FastMathFlagGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastMathFlagGuard"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "IRBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRBuilder"
  },
  {
    "label": "ClearInsertionPoint()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "ClearInsertionPoint()"
  },
  {
    "label": "CreateInsertNUWNSWBinOp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInsertNUWNSWBinOp(Instruction::Add, LHS, RHS, Name,\n                                   HasNUW, HasNSW)"
  },
  {
    "label": "CreateAdd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateAdd(LHS, RHS, Name, false, true)"
  },
  {
    "label": "CreateAdd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateAdd(LHS, RHS, Name, true, false)"
  },
  {
    "label": "CreateInsertNUWNSWBinOp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInsertNUWNSWBinOp(Instruction::Sub, LHS, RHS, Name,\n                                   HasNUW, HasNSW)"
  },
  {
    "label": "CreateSub()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateSub(LHS, RHS, Name, false, true)"
  },
  {
    "label": "CreateSub()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateSub(LHS, RHS, Name, true, false)"
  },
  {
    "label": "CreateInsertNUWNSWBinOp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInsertNUWNSWBinOp(Instruction::Mul, LHS, RHS, Name,\n                                   HasNUW, HasNSW)"
  },
  {
    "label": "CreateMul()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateMul(LHS, RHS, Name, false, true)"
  },
  {
    "label": "CreateMul()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateMul(LHS, RHS, Name, true, false)"
  },
  {
    "label": "CreateUDiv()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateUDiv(LHS, RHS, Name, true)"
  },
  {
    "label": "CreateSDiv()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateSDiv(LHS, RHS, Name, true)"
  },
  {
    "label": "CreateInsertNUWNSWBinOp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInsertNUWNSWBinOp(Instruction::Shl, LHS, RHS, Name,\n                                   HasNUW, HasNSW)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Insert(BinOp, Name)"
  },
  {
    "label": "CreateNeg()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateNeg(V, Name, false, true)"
  },
  {
    "label": "CreateNeg()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateNeg(V, Name, true, false)"
  },
  {
    "label": "CreateGEP()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateGEP(nullptr, Ptr, IdxList, Name)"
  },
  {
    "label": "CreateInBoundsGEP()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInBoundsGEP(nullptr, Ptr, IdxList, Name)"
  },
  {
    "label": "CreateGEP()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateGEP(nullptr, Ptr, Idx, Name)"
  },
  {
    "label": "CreateConstGEP1_32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateConstGEP1_32(nullptr, Ptr, Idx0, Name)"
  },
  {
    "label": "CreateConstInBoundsGEP2_32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateConstInBoundsGEP2_32(Ty, Ptr, 0, Idx, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::Trunc, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::ZExt, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::SExt, V, DestTy, Name)"
  },
  {
    "label": "CreateZExt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateZExt(V, DestTy, Name)"
  },
  {
    "label": "CreateTrunc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateTrunc(V, DestTy, Name)"
  },
  {
    "label": "CreateSExt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateSExt(V, DestTy, Name)"
  },
  {
    "label": "CreateTrunc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateTrunc(V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::FPToUI, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::FPToSI, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::UIToFP, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::SIToFP, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::FPTrunc, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::FPExt, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::PtrToInt, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::IntToPtr, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::BitCast, V, DestTy, Name)"
  },
  {
    "label": "CreateCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateCast(Instruction::AddrSpaceCast, V, DestTy, Name)"
  },
  {
    "label": "CreatePtrToInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreatePtrToInt(V, DestTy, Name)"
  },
  {
    "label": "CreateIntToPtr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateIntToPtr(V, DestTy, Name)"
  },
  {
    "label": "CreateBitCast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateBitCast(V, DestTy, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_EQ, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_NE, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_UGT, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_UGE, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_ULT, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_ULE, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_SGT, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_SGE, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_SLT, LHS, RHS, Name)"
  },
  {
    "label": "CreateICmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateICmp(ICmpInst::ICMP_SLE, LHS, RHS, Name)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_OEQ, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_OGT, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_OGE, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_OLT, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_OLE, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_ONE, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_ORD, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_UNO, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_UEQ, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_UGT, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_UGE, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_ULT, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_ULE, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateFCmp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateFCmp(FCmpInst::FCMP_UNE, LHS, RHS, Name, FPMathTag)"
  },
  {
    "label": "CreateShuffleVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateShuffleVector(V1, V2, Mask, Name)"
  },
  {
    "label": "CreateShuffleVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateShuffleVector(V, Undef, Zeros, Name + \".splat\")"
  },
  {
    "label": "CreateAssumption()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateAssumption(InvCond)"
  }
]