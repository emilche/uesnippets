[
  {
    "label": "BasicBlockPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlockPass"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "PrintModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintModulePass"
  },
  {
    "label": "PrintFunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintFunctionPass"
  },
  {
    "label": "createPrintModulePass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_IRPRINTINGPASSES_H # define LLVM_IR_IRPRINTINGPASSES_H # include \" llvm / ADT / StringRef . h \" # include<string> namespace llvm { class BasicBlockPass ; class Function ; class FunctionPass ; class Module ; class ModulePass ; class PreservedAnalyses ; class raw_ostream ; ModulePass*)",
    "insertText": "createPrintModulePass(raw_ostream &OS, const std::string &Banner = \"\", bool ShouldPreserveUseListOrder = false)"
  },
  {
    "label": "createPrintFunctionPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass*)",
    "insertText": "createPrintFunctionPass(raw_ostream &OS, const std::string &Banner = \"\")"
  },
  {
    "label": "createPrintBasicBlockPass()",
    "kind": "Method",
    "detail": "Function (BasicBlockPass*)",
    "insertText": "createPrintBasicBlockPass(raw_ostream &OS, const std::string &Banner = \"\")"
  },
  {
    "label": "PrintModulePass()",
    "kind": "Method",
    "detail": "Function (class PrintModulePass { raw_ostream& OS ; std::string Banner ; bool ShouldPreserveUseListOrder ; public :)",
    "insertText": "PrintModulePass()"
  },
  {
    "label": "PrintModulePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintModulePass(raw_ostream &OS, const std::string &Banner = \"\", bool ShouldPreserveUseListOrder = false)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses)",
    "insertText": "run(Module &M)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "name()"
  },
  {
    "label": "PrintFunctionPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintFunctionPass(raw_ostream &OS, const std::string &Banner = \"\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses)",
    "insertText": "run(Function &F)"
  }
]