[
  {
    "label": "GetTetFaces()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" CompGeom / ExactPredicates . h \" namespace UE::Geometry::TetUtil { template<bool bReverseOrientation = false> void)",
    "insertText": "GetTetFaces(const FIndex4i& Tet, FIndex3i OutFaces[4])"
  },
  {
    "label": "bReverseOrientation()",
    "kind": "Method",
    "detail": "Function (const FIndex3i* FaceOrdering = GetTetFaceOrdering<)",
    "insertText": "bReverseOrientation()"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (OutFaces [ 0 ] =)",
    "insertText": "FIndex3i(Tet[FaceOrdering[0].A], Tet[FaceOrdering[0].B], Tet[FaceOrdering[0].C])"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (OutFaces [ 1 ] =)",
    "insertText": "FIndex3i(Tet[FaceOrdering[1].A], Tet[FaceOrdering[1].B], Tet[FaceOrdering[1].C])"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (OutFaces [ 2 ] =)",
    "insertText": "FIndex3i(Tet[FaceOrdering[2].A], Tet[FaceOrdering[2].B], Tet[FaceOrdering[2].C])"
  },
  {
    "label": "FIndex3i()",
    "kind": "Method",
    "detail": "Function (OutFaces [ 3 ] =)",
    "insertText": "FIndex3i(Tet[FaceOrdering[3].A], Tet[FaceOrdering[3].B], Tet[FaceOrdering[3].C])"
  },
  {
    "label": "IsInsideExact()",
    "kind": "Method",
    "detail": "Function (} template<RealType> int32)",
    "insertText": "IsInsideExact(const TTetrahedron3<RealType>& Tet, TVector<RealType>& Pt)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 SeenSide = 0 ;)",
    "insertText": "for(int32 TetFace = 0; TetFace < 4; ++TetFace)"
  },
  {
    "label": "GetFaceIndices()",
    "kind": "Method",
    "detail": "Function (FIndex3i FaceInds = Tet .)",
    "insertText": "GetFaceIndices(TetFace)"
  },
  {
    "label": "SignAsInt()",
    "kind": "Method",
    "detail": "Function (int32 Side = TMathUtil<RealType)",
    "insertText": "SignAsInt(ExactPredicates::Orient3<RealType>(Tet.V[FaceInds.A], Tet.V[FaceInds.B], Tet.V[FaceInds.C], Pt))"
  }
]