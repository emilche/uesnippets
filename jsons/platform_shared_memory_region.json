[
  {
    "label": "SandboxIPCHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SandboxIPCHandler"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ExecutableRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExecutableRegion"
  },
  {
    "label": "content",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "content"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_PLATFORM_SHARED_MEMORY_REGION_H_ # define BASE_MEMORY_PLATFORM_SHARED_MEMORY_REGION_H_ # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / platform_shared_memory_handle . h \" # include \" base / memory / shared_memory_mapper . h \" # include \" base / unguessable_token . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # include<stdint . h> # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "CreateFD()",
    "kind": "Method",
    "detail": "Function (private : ScopedFD)",
    "insertText": "CreateFD(size_t size)"
  },
  {
    "label": "CreateWritable()",
    "kind": "Method",
    "detail": "Function (class content::SandboxIPCHandler ; } ; # endif enum { kMapMinimumAlignment = 3 2 } ; PlatformSharedMemoryRegion)",
    "insertText": "CreateWritable(size_t size)"
  },
  {
    "label": "CreateUnsafe()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryRegion)",
    "insertText": "CreateUnsafe(size_t size)"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryRegion)",
    "insertText": "Take(ScopedPlatformSharedMemoryHandle handle, Mode mode, size_t size, const UnguessableToken& guid)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_APPLE) static PlatformSharedMemoryRegion Take(ScopedFD handle, Mode mode, size_t size, const UnguessableToken& guid)"
  },
  {
    "label": "PlatformSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PlatformSharedMemoryRegion()"
  },
  {
    "label": "PlatformSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformSharedMemoryRegion(PlatformSharedMemoryRegion&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryRegion&)",
    "insertText": "operator(PlatformSharedMemoryRegion&&)"
  },
  {
    "label": "PlatformSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformSharedMemoryRegion(const PlatformSharedMemoryRegion&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryRegion&)",
    "insertText": "operator(const PlatformSharedMemoryRegion&)"
  },
  {
    "label": "PassPlatformHandle()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ScopedPlatformSharedMemoryHandle)",
    "insertText": "PassPlatformHandle()"
  },
  {
    "label": "GetPlatformHandle()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryHandle)",
    "insertText": "GetPlatformHandle()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryRegion)",
    "insertText": "Duplicate()"
  },
  {
    "label": "ConvertToReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertToReadOnly()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) bool ConvertToReadOnly(void* mapped_addr)"
  },
  {
    "label": "ConvertToUnsafe()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ConvertToUnsafe()"
  },
  {
    "label": "MapAt()",
    "kind": "Method",
    "detail": "Function (absl::optional<span<uint8_t>>)",
    "insertText": "MapAt(uint64_t offset, size_t size, SharedMemoryMapper* mapper)"
  },
  {
    "label": "GetGUID()",
    "kind": "Method",
    "detail": "Function (const UnguessableToken&)",
    "insertText": "GetGUID()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(PlatformSharedMemoryRegionTest, CheckPlatformHandlePermissionsCorrespondToMode)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (PlatformSharedMemoryRegion)",
    "insertText": "Create(Mode mode, size_t size #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) , bool executable = false #endif)"
  },
  {
    "label": "CheckPlatformHandlePermissionsCorrespondToMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckPlatformHandlePermissionsCorrespondToMode(PlatformSharedMemoryHandle handle, Mode mode, size_t size)"
  },
  {
    "label": "PlatformSharedMemoryRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformSharedMemoryRegion(ScopedPlatformSharedMemoryHandle handle, Mode mode, size_t size, const UnguessableToken& guid)"
  }
]