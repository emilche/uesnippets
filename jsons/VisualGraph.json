[
  {
    "label": "FVisualGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualGraph"
  },
  {
    "label": "VISUALGRAPHUTILS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VISUALGRAPHUTILS_API"
  },
  {
    "label": "FVisualGraphSubGraph()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Math / Color . h \" # include \" Misc / Optional . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" VisualGraphEdge . h \" # include \" VisualGraphElement . h \" # include \" VisualGraphNode . h \" class FVisualGraph ; class FVisualGraphSubGraph : public FVisualGraphElement { public :)",
    "insertText": "FVisualGraphSubGraph() : FVisualGraphElement() , ParentGraphIndex(INDEX_NONE)"
  },
  {
    "label": "FVisualGraphSubGraph()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVisualGraphSubGraph()"
  },
  {
    "label": "GetParentGraphIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetParentGraphIndex()"
  },
  {
    "label": "FVisualGraph()",
    "kind": "Method",
    "detail": "Function (int32 ParentGraphIndex ; TArray<int32> Nodes ; class FVisualGraph ; } ; class FVisualGraph : public FVisualGraphElement { public :)",
    "insertText": "FVisualGraph() : FVisualGraphElement()"
  },
  {
    "label": "FVisualGraph()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVisualGraph()"
  },
  {
    "label": "FVisualGraph()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVisualGraph(const FName& InName, const FName& InDisplayName = NAME_None)"
  },
  {
    "label": "GetNodes()",
    "kind": "Method",
    "detail": "Function (const TArray<FVisualGraphNode>&)",
    "insertText": "GetNodes()"
  },
  {
    "label": "AddEdge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddEdge(int32 InSourceNode, int32 InTargetNode, EVisualGraphEdgeDirection InDirection, const FName& InName = NAME_None, TOptional<FName> InDisplayName = TOptional<FName>(), TOptional<FLinearColor> InColor = TOptional<FLinearColor>(), TOptional<EVisualGraphStyle> InStyle = TOptional<EVisualGraphStyle>())"
  },
  {
    "label": "AddSubGraph()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSubGraph(const FName& InName, TOptional<FName> InDisplayName = TOptional<FName>(), int32 InParentGraphIndex = INDEX_NONE, TOptional<FLinearColor> InColor = TOptional<FLinearColor>(), TOptional<EVisualGraphStyle> InStyle = TOptional<EVisualGraphStyle>(), const TArray<int32> InNodes = TArray<int32>())"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNode(const FName& InName)"
  },
  {
    "label": "FindEdge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindEdge(const FName& InName)"
  },
  {
    "label": "FindSubGraph()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindSubGraph(const FName& InName)"
  },
  {
    "label": "AddNodeToSubGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNodeToSubGraph(int32 InNodeIndex, int32 InSubGraphIndex)"
  },
  {
    "label": "RemoveNodeFromSubGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNodeFromSubGraph(int32 InNodeIndex)"
  },
  {
    "label": "TransitiveReduction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitiveReduction(TFunction<bool(FVisualGraphEdge&)> KeepEdgeFunction)"
  },
  {
    "label": "DumpDot()",
    "kind": "Method",
    "detail": "Function (} protected : FString)",
    "insertText": "DumpDot(const FVisualGraph* InGraph, int32 InIndendation)"
  },
  {
    "label": "RefreshNameMap()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "RefreshNameMap(const TArray<T>& InElements, TMap<FName, int32>& OutMap)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutMap .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutMap .)",
    "insertText": "Add(Element.Name, Element.Index)"
  },
  {
    "label": "RefreshNameMapIfNeeded()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "RefreshNameMapIfNeeded(const TArray<T>& InElements, TMap<FName, int32>& OutMap)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (} template<T> int32)",
    "insertText": "AddElement(const T& InElement, TArray<T>& OutElements, TMap<FName, int32>& OutMap)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 AddedIndex = OutElements .)",
    "insertText": "Add(InElement)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutElements [ AddedIndex ] . Index = AddedIndex ; OutMap .)",
    "insertText": "Add(InElement.Name, AddedIndex)"
  },
  {
    "label": "IsNameAvailable()",
    "kind": "Method",
    "detail": "Function (} return AddedIndex ; } bool)",
    "insertText": "IsNameAvailable(const FName& InName, const TMap<FName, int32>& InMap)"
  },
  {
    "label": "GetUniqueName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUniqueName(const FName& InName, const TMap<FName, int32>& InMap)"
  }
]