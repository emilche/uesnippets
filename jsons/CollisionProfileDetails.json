[
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FChannelListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelListItem"
  },
  {
    "label": "SChannelListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SChannelListItem"
  },
  {
    "label": "FProfileListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfileListItem"
  },
  {
    "label": "SProfileListItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProfileListItem"
  },
  {
    "label": "FCollisionProfileDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionProfileDetails"
  },
  {
    "label": "FCollisionProfileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionProfileData"
  },
  {
    "label": "FChannelListItem()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Delegates / Delegate . h \" # include \" Engine / CollisionProfile . h \" # include \" Engine / EngineTypes . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IDetailCustomization . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" class IDetailLayoutBuilder ; class ITableRow ; class STableViewBase ; class SWidget ; class FChannelListItem { public :)",
    "insertText": "FChannelListItem(TSharedPtr<FCustomChannelSetup> InChannelSetup) : ChannelSetup(InChannelSetup)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FCustomChannelSetup> ChannelSetup ; } ; class SChannelListItem : public SMultiColumnTableRow<TSharedPtr<class FChannelListItem>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SChannelListItem)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FCustomChannelSetup>, ChannelSetup) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetDefaultResponse()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetDefaultResponse()"
  },
  {
    "label": "FProfileListItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCustomChannelSetup> ChannelSetup ; } ; class FProfileListItem { public :)",
    "insertText": "FProfileListItem(TSharedPtr<FCollisionResponseTemplate> InProfileTemplate) : ProfileTemplate(InProfileTemplate)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FCollisionResponseTemplate> ProfileTemplate ; } ; class SProfileListItem : public SMultiColumnTableRow<TSharedPtr<class FProfileListItem>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProfileListItem)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FCollisionResponseTemplate>, ProfileTemplate) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GetObjectType()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetObjectType()"
  },
  {
    "label": "GetCollsionEnabled()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCollsionEnabled()"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCollisionResponseTemplate> ProfileTemplate ; } ; typedef SListView<TSharedPtr<FChannelListItem>> SChannelListView ; typedef SListView<TSharedPtr<FProfileListItem>> SProfileListView ; class FCollisionProfileDetails : public IDetailCustomization { public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "HandleGenerateChannelWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateChannelWidget(TSharedPtr< FChannelListItem> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleGenerateProfileWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateProfileWidget(TSharedPtr< FProfileListItem> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnNewChannel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNewChannel(bool bTraceType)"
  },
  {
    "label": "IsNewChannelAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNewChannelAvailable()"
  },
  {
    "label": "OnEditChannel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnEditChannel(bool bTraceType)"
  },
  {
    "label": "IsAnyChannelSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyChannelSelected(bool bTraceType)"
  },
  {
    "label": "OnDeleteChannel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDeleteChannel(bool bTraceType)"
  },
  {
    "label": "IsValidChannelSetup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidChannelSetup(const FCustomChannelSetup* Channel)"
  },
  {
    "label": "OnNewProfile()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNewProfile()"
  },
  {
    "label": "OnEditProfile()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnEditProfile()"
  },
  {
    "label": "OnDeleteProfile()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDeleteProfile()"
  },
  {
    "label": "IsAnyProfileSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyProfileSelected()"
  },
  {
    "label": "IsValidProfileSetup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidProfileSetup(const FCollisionResponseTemplate* Template, int32 ProfileIndex)"
  },
  {
    "label": "FindAvailableChannel()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SChannelListView> ObjectChannelListView ; TArray<TSharedPtr<FChannelListItem>> ObjectChannelList ; TSharedPtr<SChannelListView> TraceChannelListView ; TArray<TSharedPtr<FChannelListItem>> TraceChannelList ; TSharedPtr<SProfileListView> ProfileListView ; TArray<TSharedPtr<FProfileListItem>> ProfileList ; UCollisionProfile* CollisionProfile ; ECollisionChannel)",
    "insertText": "FindAvailableChannel()"
  },
  {
    "label": "UpdateChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateChannel(bool bTraceType)"
  },
  {
    "label": "UpdateProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProfile()"
  },
  {
    "label": "CommitProfileChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitProfileChange(int32 ProfileIndex, FCollisionResponseTemplate & NewProfile)"
  },
  {
    "label": "RefreshChannelList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshChannelList(bool bTraceType)"
  },
  {
    "label": "RefreshProfileList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshProfileList()"
  },
  {
    "label": "FindFromChannel()",
    "kind": "Method",
    "detail": "Function (FCustomChannelSetup*)",
    "insertText": "FindFromChannel(ECollisionChannel CollisionChannel)"
  },
  {
    "label": "RemoveChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChannel(ECollisionChannel CollisionChannel)"
  },
  {
    "label": "FindProfileIndexFromName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindProfileIndexFromName(FName Name)"
  },
  {
    "label": "OnObjectChannelListItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectChannelListItemDoubleClicked(TSharedPtr< FChannelListItem >)"
  },
  {
    "label": "OnTraceChannelListItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTraceChannelListItemDoubleClicked(TSharedPtr< FChannelListItem >)"
  },
  {
    "label": "OnProfileListItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProfileListItemDoubleClicked(TSharedPtr< FProfileListItem >)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (struct FCollisionProfileData { TArray<FCollisionResponseTemplate> Profiles ; TArray<FCustomChannelSetup> DefaultChannelResponses ; TArray<FCustomProfile> EditProfiles ; void)",
    "insertText": "Save(UCollisionProfile * Profile)"
  }
]