[
  {
    "label": "FChunkedFixedUObjectArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkedFixedUObjectArray"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" UObject / NameTypes . h \" # include \" Modules / VisualizerDebuggingState . h \" class FChunkedFixedUObjectArray ; # if !)",
    "insertText": "defined(PER_MODULE_BOILERPLATE_ANYLINK) #define PER_MODULE_BOILERPLATE_ANYLINK(ModuleImplClass, ModuleName) #endif #if USING_CODE_ANALYSIS #define OPERATOR_NEW_MSVC_PRAGMA MSVC_PRAGMA( warning( suppress : 28251 ) ) #else #define OPERATOR_NEW_MSVC_PRAGMA #endif #define UE_DEFINE_FMEMORY_WRAPPERS \\ void* FMemory_Malloc ( size_t Size, size_t Alignment)"
  },
  {
    "label": "FMemory_Realloc()",
    "kind": "Method",
    "detail": "Function (} \\ void*)",
    "insertText": "FMemory_Realloc(void* Original, size_t Size, size_t Alignment)"
  },
  {
    "label": "FMemory_Free()",
    "kind": "Method",
    "detail": "Function (} \\ void)",
    "insertText": "FMemory_Free(void *Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(FORCE_ANSI_ALLOCATOR && !(defined(__AUTORTFM) && __AUTORTFM)) && !defined(__clang_analyzer__) static_assert(__STDCPP_DEFAULT_NEW_ALIGNMENT__ <= 16, \"Expecting 16-byte default operator new alignment - alignments > 16 may have bloat\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# define REPLACEMENT_OPERATOR_NEW_AND_DELETE \\ OPERATOR_NEW_MSVC_PRAGMA void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} \\ OPERATOR_NEW_MSVC_PRAGMA void* operator)",
    "insertText": "new(size_t Size, const std::nothrow_t&)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} \\ OPERATOR_NEW_MSVC_PRAGMA void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Alignment)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} \\ OPERATOR_NEW_MSVC_PRAGMA void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Alignment, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, size_t Size, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, std::align_val_t Alignment)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, std::align_val_t Alignment, const std::nothrow_t&)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, size_t Size, std::align_val_t Alignment)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} \\ void operator)",
    "insertText": "delete(void* Ptr, size_t Size, std::align_val_t Alignment, const std::nothrow_t&)"
  },
  {
    "label": "UE_DEPRECATED_HEADER()",
    "kind": "Method",
    "detail": "Function (} # else # define REPLACEMENT_OPERATOR_NEW_AND_DELETE # endif class FChunkedFixedUObjectArray ; # ifdef DISABLE_UE4_VISUALIZER_HELPERS)",
    "insertText": "UE_DEPRECATED_HEADER(5.5, \"DISABLE_UE4_VISUALIZER_HELPERS has been disabled, please define UE_ENABLE_VISUALIZER_HELPERS=0 instead.\") #define UE_ENABLE_VISUALIZER_HELPERS 0 #endif #ifndef UE_ENABLE_VISUALIZER_HELPERS #define UE_ENABLE_VISUALIZER_HELPERS 1 #endif #if !UE_ENABLE_VISUALIZER_HELPERS #define UE_VISUALIZERS_HELPERS #elif PLATFORM_UNIX #define UE_VISUALIZERS_HELPERS #else #define UE_VISUALIZERS_HELPERS \\ uint8** GNameBlocksDebug = FNameDebugVisualizer::GetBlocks()"
  }
]