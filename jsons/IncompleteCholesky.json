[
  {
    "label": "IncompleteCholesky",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IncompleteCholesky"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(const MatrixType& mat)"
  },
  {
    "label": "updateList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateList(Ref<const VectorIx> colPtr, Ref<VectorIx> rowIdx, Ref<VectorSx> vals, const Index& col, const Index& jk, VectorIx& firstElt, VectorList& listCol)"
  },
  {
    "label": "firstElt()",
    "kind": "Method",
    "detail": "Function (VectorIx)",
    "insertText": "firstElt(n-1)"
  },
  {
    "label": "listCol()",
    "kind": "Method",
    "detail": "Function (VectorList)",
    "insertText": "listCol(n)"
  },
  {
    "label": "col_vals()",
    "kind": "Method",
    "detail": "Function (VectorSx)",
    "insertText": "col_vals(n)"
  },
  {
    "label": "col_irow()",
    "kind": "Method",
    "detail": "Function (VectorIx)",
    "insertText": "col_irow(n)"
  },
  {
    "label": "col_pattern()",
    "kind": "Method",
    "detail": "Function (VectorIx)",
    "insertText": "col_pattern(n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (j)",
    "insertText": "for(k = listCol[j].begin()"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (column)",
    "insertText": "eigen_internal_assert(rowIdx[jk]==j)"
  }
]