[
  {
    "label": "IncompleteCholesky",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IncompleteCholesky"
  },
  {
    "label": "IncompleteCholesky()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_INCOMPLETE_CHOlESKY_H # define EIGEN_INCOMPLETE_CHOlESKY_H # include<vector> # include<list> namespace Eigen { template<Scalar,int _UpLo = Lower,_OrderingType = AMDOrdering<int>> class IncompleteCholesky : public SparseSolverBase<IncompleteCholesky<Scalar,_UpLo,_OrderingType>> { protected : typedef SparseSolverBase<IncompleteCholesky<Scalar,_UpLo,_OrderingType>> Base ; using Base::m_isInitialized ; public : typedef NumTraits<Scalar>::Real RealScalar ; typedef _OrderingType OrderingType ; typedef OrderingType::PermutationType PermutationType ; typedef PermutationType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> FactorType ; typedef Matrix<Scalar,Dynamic,1> VectorSx ; typedef Matrix<RealScalar,Dynamic,1> VectorRx ; typedef Matrix<StorageIndex,Dynamic,1> VectorIx ; typedef std::vector<std::list<StorageIndex>> VectorList ; enum { UpLo = _UpLo } ; enum { ColsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic } ; public :)",
    "insertText": "IncompleteCholesky() : m_initialShift(1e-3),m_analysisIsOk(false),m_factorizationIsOk(false)"
  },
  {
    "label": "IncompleteCholesky()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType>)",
    "insertText": "IncompleteCholesky(const MatrixType& matrix) : m_initialShift(1e-3),m_analysisIsOk(false),m_factorizationIsOk(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"IncompleteCholesky is not initialized.\")"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (m_initialShift = shift ; } template<MatrixType> void)",
    "insertText": "analyzePattern(const MatrixType& mat)"
  },
  {
    "label": "ord()",
    "kind": "Method",
    "detail": "Function (OrderingType ord ; PermutationType pinv ;)",
    "insertText": "ord(mat.template selfadjointView<UpLo>(), pinv)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_L .)",
    "insertText": "resize(mat.rows(), mat.cols())"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (m_analysisIsOk = true ; m_isInitialized = true ; m_info = Success ; } template<MatrixType> void)",
    "insertText": "factorize(const MatrixType& mat)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (template<MatrixType> void)",
    "insertText": "compute(const MatrixType& mat)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(mat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(mat)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_factorizationIsOk && \"factorize() should be called first\")"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (x = m_L . template triangularView<)",
    "insertText": "Lower().solve(x)"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (x = m_L .)",
    "insertText": "adjoint().template triangularView<Upper>().solve(x)"
  },
  {
    "label": "asDiagonal()",
    "kind": "Method",
    "detail": "Function (x = m_scale .)",
    "insertText": "asDiagonal()"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (} const FactorType&)",
    "insertText": "matrixL()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(\"m_factorizationIsOk\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(\"m_analysisIsOk\")"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar,int _UpLo,OrderingType> template<_MatrixType> void IncompleteCholesky<Scalar,_UpLo,OrderingType)",
    "insertText": "factorize(const _MatrixType& mat)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ;)",
    "insertText": "eigen_assert(m_analysisIsOk && \"analyzePattern() should be called first\")"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (FactorType)",
    "insertText": "tmp(mat.rows(), mat.cols())"
  },
  {
    "label": "_UpLo()",
    "kind": "Method",
    "detail": "Function (tmp = mat . template selfadjointView<)",
    "insertText": "_UpLo().twistedBy(m_perm)"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (m_L . template selfadjointView<)",
    "insertText": "Lower() = tmp.template selfadjointView<Lower>()"
  },
  {
    "label": "Lower()",
    "kind": "Method",
    "detail": "Function (} else { m_L . template selfadjointView<)",
    "insertText": "Lower() = mat.template selfadjointView<_UpLo>()"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (Index nnz = m_L .)",
    "insertText": "nonZeros()"
  },
  {
    "label": "vals()",
    "kind": "Method",
    "detail": "Function (Map<VectorSx>)",
    "insertText": "vals(m_L.valuePtr(), nnz)"
  },
  {
    "label": "rowIdx()",
    "kind": "Method",
    "detail": "Function (Map<VectorIx>)",
    "insertText": "rowIdx(m_L.innerIndexPtr(), nnz)"
  },
  {
    "label": "colPtr()",
    "kind": "Method",
    "detail": "Function (Map<VectorIx>)",
    "insertText": "colPtr(m_L.outerIndexPtr(), n+1)"
  },
  {
    "label": "firstElt()",
    "kind": "Method",
    "detail": "Function (VectorIx)",
    "insertText": "firstElt(n-1)"
  },
  {
    "label": "listCol()",
    "kind": "Method",
    "detail": "Function (VectorList)",
    "insertText": "listCol(n)"
  },
  {
    "label": "col_vals()",
    "kind": "Method",
    "detail": "Function (VectorSx)",
    "insertText": "col_vals(n)"
  },
  {
    "label": "col_irow()",
    "kind": "Method",
    "detail": "Function (VectorIx)",
    "insertText": "col_irow(n)"
  },
  {
    "label": "col_pattern()",
    "kind": "Method",
    "detail": "Function (VectorIx)",
    "insertText": "col_pattern(n)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (col_pattern .)",
    "insertText": "fill(-1)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (StorageIndex col_nnz ; m_scale .)",
    "insertText": "resize(n)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (m_scale .)",
    "insertText": "setZero()"
  },
  {
    "label": "m_scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_scale(j) += numext::abs2(vals(k))"
  },
  {
    "label": "cwiseSqrt()",
    "kind": "Method",
    "detail": "Function (} m_scale = m_scale .)",
    "insertText": "cwiseSqrt().cwiseSqrt()"
  },
  {
    "label": "highest()",
    "kind": "Method",
    "detail": "Function (RealScalar mindiag = NumTraits<RealScalar)",
    "insertText": "highest()"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(rowIdx[colPtr[j]]==j && \"IncompleteCholesky: only the lower triangular part must be stored\")"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (mindiag =)",
    "insertText": "mini(numext::real(vals[colPtr[j]]), mindiag)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FactorType L_save = m_L ; RealScalar shift = 0 ;)",
    "insertText": "if(mindiag <= RealScalar(0.))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_info = NumericalIssue ; int iter = 0 ; do {)",
    "insertText": "for(Index j = 0; j < n; j++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index j = 0 ;)",
    "insertText": "for(; j < n; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Scalar diag = vals [ colPtr [ j ] ] ; col_nnz = 0 ;)",
    "insertText": "for(Index i = colPtr[j] + 1; i < colPtr[j+1]; i++)"
  },
  {
    "label": "col_vals()",
    "kind": "Method",
    "detail": "Function (StorageIndex l = rowIdx [ i ] ;)",
    "insertText": "col_vals(col_nnz)"
  },
  {
    "label": "col_irow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "col_irow(col_nnz)"
  },
  {
    "label": "col_pattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "col_pattern(l)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (col_nnz + + ; } { std::list<StorageIndex>::iterator k ;)",
    "insertText": "for(k = listCol[j].begin(); k != listCol[j].end(); k++)"
  },
  {
    "label": "firstElt()",
    "kind": "Method",
    "detail": "Function (Index jk =)",
    "insertText": "firstElt(*k)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(rowIdx[jk]==j)"
  },
  {
    "label": "conj()",
    "kind": "Method",
    "detail": "Function (Scalar v_j_jk =)",
    "insertText": "conj(vals[jk])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (jk + = 1 ;)",
    "insertText": "for(Index i = jk; i < colPtr[*k+1]; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StorageIndex l = rowIdx [ i ] ;)",
    "insertText": "if(col_pattern[l]<0)"
  },
  {
    "label": "col_vals()",
    "kind": "Method",
    "detail": "Function (col_nnz + + ; } else)",
    "insertText": "col_vals(col_pattern[l])"
  },
  {
    "label": "updateList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "updateList(colPtr,rowIdx,vals, *k, jk, firstElt, listCol)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(numext::real(diag) <= 0)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (shift =)",
    "insertText": "maxi(m_initialShift,RealScalar(2)*shift)"
  },
  {
    "label": "VectorSx()",
    "kind": "Method",
    "detail": "Function (vals = Map<const)",
    "insertText": "VectorSx(L_save.valuePtr(), nnz)"
  },
  {
    "label": "VectorIx()",
    "kind": "Method",
    "detail": "Function (rowIdx = Map<const)",
    "insertText": "VectorIx(L_save.innerIndexPtr(), nnz)"
  },
  {
    "label": "VectorIx()",
    "kind": "Method",
    "detail": "Function (colPtr = Map<const)",
    "insertText": "VectorIx(L_save.outerIndexPtr(), n+1)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (break ; } RealScalar rdiag =)",
    "insertText": "sqrt(numext::real(diag))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (vals [ colPtr [ j ] ] = rdiag ;)",
    "insertText": "for(Index k = 0; k<col_nnz; ++k)"
  },
  {
    "label": "col_vals()",
    "kind": "Method",
    "detail": "Function (Index i = col_irow [ k ] ;)",
    "insertText": "col_vals(k)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (vals [ colPtr [ i ] ] - =)",
    "insertText": "abs2(col_vals(k))"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (} Index p = colPtr [ j + 1 ] - colPtr [ j ] - 1 ; Ref<VectorSx> cvals = col_vals .)",
    "insertText": "head(col_nnz)"
  },
  {
    "label": "QuickSplit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QuickSplit(cvals,cirow, p)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index cpt = 0 ;)",
    "insertText": "for(Index i = colPtr[j]+1; i < colPtr[j+1]; i++)"
  },
  {
    "label": "col_vals()",
    "kind": "Method",
    "detail": "Function (vals [ i ] =)",
    "insertText": "col_vals(cpt)"
  },
  {
    "label": "col_irow()",
    "kind": "Method",
    "detail": "Function (rowIdx [ i ] =)",
    "insertText": "col_irow(cpt)"
  },
  {
    "label": "col_pattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "col_pattern(col_irow(cpt))"
  },
  {
    "label": "colPtr()",
    "kind": "Method",
    "detail": "Function (cpt + + ; } Index jk =)",
    "insertText": "colPtr(j)"
  },
  {
    "label": "updateList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateList(colPtr,rowIdx,vals,j,jk,firstElt,listCol)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j==n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (m_factorizationIsOk = true ; m_info = Success ; } })",
    "insertText": "while(m_info!=Success)"
  },
  {
    "label": "updateList()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,int _UpLo,OrderingType> void IncompleteCholesky<Scalar,_UpLo,OrderingType)",
    "insertText": "updateList(Ref<const VectorIx> colPtr, Ref<VectorIx> rowIdx, Ref<VectorSx> vals, const Index& col, const Index& jk, VectorIx& firstElt, VectorList& listCol)"
  },
  {
    "label": "colPtr()",
    "kind": "Method",
    "detail": "Function (Index p =)",
    "insertText": "colPtr(col+1)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (Index minpos ; rowIdx .)",
    "insertText": "segment(jk,p).minCoeff(&minpos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (minpos + = jk ;)",
    "insertText": "if(rowIdx(minpos) != rowIdx(jk))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(rowIdx(jk),rowIdx(minpos))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(vals(jk),vals(minpos))"
  },
  {
    "label": "firstElt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "firstElt(col) = internal::convert_index<StorageIndex,Index>(jk)"
  },
  {
    "label": "rowIdx()",
    "kind": "Method",
    "detail": "Function (listCol [)",
    "insertText": "rowIdx(jk)].push_back(internal::convert_index<StorageIndex,Index>(col))"
  }
]