[
  {
    "label": "FSkeletalMeshObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshObject"
  },
  {
    "label": "FSkeletalMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshSceneProxy"
  },
  {
    "label": "FSkeletalMeshSectionIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshSectionIter"
  },
  {
    "label": "FCachedGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedGeometry"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "UPhysicsAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsAsset"
  },
  {
    "label": "FSectionElementInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionElementInfo"
  },
  {
    "label": "FLODSectionElements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODSectionElements"
  },
  {
    "label": "FPoseWatchDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoseWatchDynamicData"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PrimitiveSceneProxy . h \" # include \" SkeletalMeshTypes . h \" class FSkeletalMeshObject ; class FSkeletalMeshSceneProxy : public FPrimitiveSceneProxy { public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FSkeletalMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkeletalMeshSceneProxy(const USkinnedMeshComponent* Component, FSkeletalMeshRenderData* InSkelMeshRenderData)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR HHitProxy*)",
    "insertText": "CreateHitProxies(UPrimitiveComponent* Component, TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "DrawStaticElements()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DrawStaticElements(FStaticPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "HasRayTracingRepresentation()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING bool)",
    "insertText": "HasRayTracingRepresentation()"
  },
  {
    "label": "IsRayTracingRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingRelevant()"
  },
  {
    "label": "GetStaticRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (TArray<FRayTracingGeometry*>)",
    "insertText": "GetStaticRayTracingGeometries()"
  },
  {
    "label": "GetDynamicRayTracingInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicRayTracingInstances(FRayTracingInstanceCollector& Collector)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (# endif FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "IsUsingDistanceCullFade()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingDistanceCullFade()"
  },
  {
    "label": "HasDynamicIndirectShadowCasterRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDynamicIndirectShadowCasterRepresentation()"
  },
  {
    "label": "GetShadowShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadowShapes(FVector PreViewTranslation, TArray<FCapsuleShape3f>& OutCapsuleShapes)"
  },
  {
    "label": "GetPreSkinnedLocalBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreSkinnedLocalBounds(FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "GetSortedShadowBoneIndices()",
    "kind": "Method",
    "detail": "Function (OutBounds = PreSkinnedLocalBounds ; } const TArray<uint16>&)",
    "insertText": "GetSortedShadowBoneIndices()"
  },
  {
    "label": "GetCurrentLODIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentLODIndex()"
  },
  {
    "label": "DebugDrawPhysicsAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawPhysicsAsset(int32 ViewIndex, FMeshElementCollector& Collector, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "DebugDrawSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawSkeleton(int32 ViewIndex, FMeshElementCollector& Collector, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "DebugDrawPoseWatchSkeletons()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "DebugDrawPoseWatchSkeletons(int32 ViewIndex, FMeshElementCollector& Collector, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (# endif uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "UpdateMorphMaterialUsage_GameThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateMorphMaterialUsage_GameThread(TArray<UMaterialInterface*>& MaterialUsingMorphTarget)"
  },
  {
    "label": "GetPrimitiveDistance()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "GetPrimitiveDistance(int32 LODIndex, int32 SectionIndex, const FVector& ViewOrigin, float& PrimitiveDistance)"
  },
  {
    "label": "GetMeshUVDensities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshUVDensities(int32 LODIndex, int32 SectionIndex, FVector4& WorldUVDensities)"
  },
  {
    "label": "GetMaterialTextureScales()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialTextureScales(int32 LODIndex, int32 SectionIndex, const FMaterialRenderProxy* MaterialRenderProxy, FVector4f* OneOverScales, FIntVector4* UVChannelIndices)"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (# endif class FSkeletalMeshSectionIter ; void)",
    "insertText": "OnTransformChanged(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetCurrentFirstLODIdx_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCurrentFirstLODIdx_RenderThread()"
  },
  {
    "label": "GetDesiredLODLevel_RenderThread()",
    "kind": "Method",
    "detail": "Function (} FDesiredLODLevel)",
    "insertText": "GetDesiredLODLevel_RenderThread(const FSceneView* View)"
  },
  {
    "label": "GetCachedGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCachedGeometry(struct FCachedGeometry& OutCachedGeometry)"
  },
  {
    "label": "GetMeshObject()",
    "kind": "Method",
    "detail": "Function (const FSkeletalMeshObject*)",
    "insertText": "GetMeshObject()"
  },
  {
    "label": "FSectionElementInfo()",
    "kind": "Method",
    "detail": "Function (# endif TEnumAsByte<ERHIFeatureLevel::Type> FeatureLevel ; bool bMaterialsNeedMorphUsage_GameThread ; FMaterialRelevance MaterialRelevance ; struct FSectionElementInfo {)",
    "insertText": "FSectionElementInfo(UMaterialInterface* InMaterial, bool bInEnableShadowCasting, int32 InUseMaterialIndex) : Material( InMaterial ) , bEnableShadowCasting( bInEnableShadowCasting ) , UseMaterialIndex( InUseMaterialIndex ) #if WITH_EDITOR , HitProxy(NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} UMaterialInterface* Material ; bool bEnableShadowCasting ; int32 UseMaterialIndex ; # if WITH_EDITOR HHitProxy* HitProxy ; # endif } ; struct FLODSectionElements { TArray<FSectionElementInfo> SectionElements ; } ; TArray<FLODSectionElements> LODSections ; TArray<TPair<int32,FCapsuleShape>> ShadowCapsuleData ; TArray<uint16> ShadowCapsuleBoneIndices ; TSet<UMaterialInterface*> MaterialsInUse_GameThread ; FBoxSphereBounds PreSkinnedLocalBounds ; # if RHI_RAYTRACING RayTracing::GeometryGroupHandle RayTracingGeometryGroupHandle = INDEX_NONE ; # endif #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "GetDynamicElementsSection()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA float StreamingDistanceMultiplier ; # endif void)",
    "insertText": "GetDynamicElementsSection(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, const FSkeletalMeshLODRenderData& LODData, const int32 LODIndex, const int32 SectionIndex, bool bSectionSelected, const FSectionElementInfo& SectionElementInfo, bool bInSelectable, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetMeshElementsConditionallySelectable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshElementsConditionallySelectable(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, bool bInSelectable, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetCurrentFirstLODIdx_Internal()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCurrentFirstLODIdx_Internal()"
  },
  {
    "label": "CreateBaseMeshBatch()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateBaseMeshBatch(const FSceneView* View, const FSkeletalMeshLODRenderData& LODData, const int32 LODIndex, const int32 SectionIndex, const FSectionElementInfo& SectionElementInfo, FMeshBatch& Mesh, ESkinVertexFactoryMode VFMode = ESkinVertexFactoryMode::Default)"
  }
]