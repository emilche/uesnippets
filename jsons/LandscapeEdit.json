[
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "ILandscapeEdModeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILandscapeEdModeInterface"
  },
  {
    "label": "FLandscapeTextureDataInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeTextureDataInfo"
  },
  {
    "label": "FMipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipInfo"
  },
  {
    "label": "FLandscapeTextureDataInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeTextureDataInterface"
  },
  {
    "label": "FLandscapeEditDataInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeEditDataInterface"
  },
  {
    "label": "FLandscapeDoNotDirtyScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDoNotDirtyScope"
  },
  {
    "label": "FHeightmapAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeightmapAccessor"
  },
  {
    "label": "FAlphamapAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphamapAccessor"
  },
  {
    "label": "PostUpdateLayerContent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" LandscapeProxy . h \" # include \" Engine / Texture2D . h \" # include \" AI / NavigationSystemBase . h \" # include \" Components / ActorComponent . h \" # include \" LandscapeInfo . h \" # include \" LandscapeComponent . h \" # include \" LandscapeEditTypes . h \" # include \" LandscapeHeightfieldCollisionComponent . h \" # include \" InstancedFoliageActor . h \" # include \" LandscapeLayerInfoObject . h \" # if WITH_EDITOR # include \" Containers / ArrayView . h \" # endif # include \" Landscape . h \" class ULandscapeComponent ; class ULandscapeInfo ; class ULandscapeLayerInfoObject ; # define MAX_LANDSCAPE_LOD_DISTANCE_FACTOR 1 0 . f # if WITH_EDITOR class ILandscapeEdModeInterface { public : void)",
    "insertText": "PostUpdateLayerContent()"
  },
  {
    "label": "GetLandscapeToolTargetType()",
    "kind": "Method",
    "detail": "Function (ELandscapeToolTargetType)",
    "insertText": "GetLandscapeToolTargetType()"
  },
  {
    "label": "GetLandscapeSelectedLayer()",
    "kind": "Method",
    "detail": "Function (const FLandscapeLayer*)",
    "insertText": "GetLandscapeSelectedLayer()"
  },
  {
    "label": "GetSelectedLandscapeLayerInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeLayerInfoObject*)",
    "insertText": "GetSelectedLandscapeLayerInfo()"
  },
  {
    "label": "OnCanHaveLayersContentChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCanHaveLayersContentChanged()"
  },
  {
    "label": "FLandscapeTextureDataInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FLandscapeTextureDataInfo { struct FMipInfo { void* MipData ; TArray<FUpdateTextureRegion2D> MipUpdateRegions ; bool bFull ; } ;)",
    "insertText": "FLandscapeTextureDataInfo(UTexture2D* InTexture, bool bShouldDirtyPackage)"
  },
  {
    "label": "FLandscapeTextureDataInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeTextureDataInfo()"
  },
  {
    "label": "UpdateTextureData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateTextureData()"
  },
  {
    "label": "NumMips()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumMips()"
  },
  {
    "label": "AddMipUpdateRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMipUpdateRegion(int32 MipNum, int32 InX1, int32 InY1, int32 InX2, int32 InY2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Width = 1 + InX2 - InX1 ; uint32 Height = 1 + InY2 - InY1 ;)",
    "insertText": "if(Width == GetMipSizeX(MipNum) && Height == GetMipSizeY(MipNum))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MipInfo [ MipNum ] . bFull = true ; MipInfo [ MipNum ] . MipUpdateRegions .)",
    "insertText": "Reset()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (MipInfo [ MipNum ] . MipUpdateRegions .)",
    "insertText": "Emplace(0, 0, 0, 0, Width, Height)"
  },
  {
    "label": "GetMipData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetMipData(int32 MipNum)"
  },
  {
    "label": "LockMip()",
    "kind": "Method",
    "detail": "Function (MipInfo [ MipNum ] . MipData = Texture -> Source .)",
    "insertText": "LockMip(MipNum)"
  },
  {
    "label": "GetMipSizeX()",
    "kind": "Method",
    "detail": "Function (} return MipInfo [ MipNum ] . MipData ; } int32)",
    "insertText": "GetMipSizeX(int32 MipNum)"
  },
  {
    "label": "GetMipSizeY()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMipSizeY(int32 MipNum)"
  },
  {
    "label": "FLandscapeTextureDataInterface()",
    "kind": "Method",
    "detail": "Function (} private : UTexture2D* Texture ; TArray<FMipInfo> MipInfo ; } ; struct FLandscapeTextureDataInterface {)",
    "insertText": "FLandscapeTextureDataInterface(bool bInUploadTextureChangesToGPU = true)"
  },
  {
    "label": "FLandscapeTextureDataInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeTextureDataInterface()"
  },
  {
    "label": "SetShouldDirtyPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldDirtyPackage(bool bValue)"
  },
  {
    "label": "GetShouldDirtyPackage()",
    "kind": "Method",
    "detail": "Function (bShouldDirtyPackage = bValue ; } bool)",
    "insertText": "GetShouldDirtyPackage()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "CopyTextureChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureChannel(UTexture2D* Dest, int32 DestChannel, UTexture2D* Src, int32 SrcChannel)"
  },
  {
    "label": "ZeroTextureChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroTextureChannel(UTexture2D* Dest, int32 DestChannel)"
  },
  {
    "label": "CopyTextureFromHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureFromHeightmap(UTexture2D* Dest, ULandscapeComponent* Comp, int32 MipIndex)"
  },
  {
    "label": "CopyTextureFromHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureFromHeightmap(UTexture2D* Dest, int32 DestChannel, ULandscapeComponent* Comp, int32 SrcChannel)"
  },
  {
    "label": "CopyTextureFromWeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureFromWeightmap(UTexture2D* Dest, int32 DestChannel, ULandscapeComponent* Comp, ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "CopyTextureFromWeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureFromWeightmap(UTexture2D* Dest, int32 DestChannel, ULandscapeComponent* Comp, ULandscapeLayerInfoObject* LayerInfo, int32 MipIndex)"
  },
  {
    "label": "SetTextureValueTempl()",
    "kind": "Method",
    "detail": "Function (template<TData> void)",
    "insertText": "SetTextureValueTempl(UTexture2D* Dest, TData Value)"
  },
  {
    "label": "ZeroTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroTexture(UTexture2D* Dest)"
  },
  {
    "label": "SetTextureValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureValue(UTexture2D* Dest, FColor Value)"
  },
  {
    "label": "EqualTextureValueTempl()",
    "kind": "Method",
    "detail": "Function (template<TData> bool)",
    "insertText": "EqualTextureValueTempl(UTexture2D* Src, TData Value)"
  },
  {
    "label": "EqualTextureValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualTextureValue(UTexture2D* Src, FColor Value)"
  },
  {
    "label": "CopyTextureFromWeightmap()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CopyTextureFromWeightmap(FLandscapeTextureDataInfo* DestDataInfo, int32 DestChannel, ULandscapeComponent* Comp, ULandscapeLayerInfoObject* LayerInfo, int32 MipIndex)"
  },
  {
    "label": "FLandscapeEditDataInterface()",
    "kind": "Method",
    "detail": "Function (TMap<UTexture2D*,FLandscapeTextureDataInfo*> TextureDataMap ; bool bUploadTextureChangesToGPU ; bool bShouldDirtyPackage ; } ; struct FLandscapeEditDataInterface : public FLandscapeTextureDataInterface {)",
    "insertText": "FLandscapeEditDataInterface(ULandscapeInfo* InLandscape, bool bInUploadTextureChangesToGPU = true)"
  },
  {
    "label": "FLandscapeEditDataInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeEditDataInterface(ULandscapeInfo* InLandscape, const FGuid& InEditLayerGUID, bool bInUploadTextureChangesToGPU = true)"
  },
  {
    "label": "SetEditLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditLayer(const FGuid& InEditLayerGUID)"
  },
  {
    "label": "GetEditLayer()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetEditLayer()"
  },
  {
    "label": "GetComponentsInRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetComponentsInRegion(int32 X1, int32 Y1, int32 X2, int32 Y2, TSet<ULandscapeComponent*>* OutComponents = NULL)"
  },
  {
    "label": "SetHeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeightData(int32 X1, int32 Y1, int32 X2, int32 Y2, const uint16* InData, int32 InStride, bool InCalcNormals, const uint16* InNormalData = nullptr, const uint16* InHeightAlphaBlendData = nullptr, const uint8* InHeightRaiseLowerData = nullptr, bool InCreateComponents = false, UTexture2D* InHeightmap = nullptr, UTexture2D* InXYOffsetmapTexture = nullptr, bool InUpdateBounds = true, bool InUpdateCollision = true, bool InGenerateMips = true)"
  },
  {
    "label": "GetHeightMapData()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetHeightMapData(const ULandscapeComponent* Component, int32 TexU, int32 TexV, FColor* TextureData = NULL)"
  },
  {
    "label": "GetHeightMapAlphaBlendData()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetHeightMapAlphaBlendData(const ULandscapeComponent* Component, int32 TexU, int32 TexV, FColor* TextureData = NULL)"
  },
  {
    "label": "GetHeightMapFlagsData()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetHeightMapFlagsData(const ULandscapeComponent* Component, int32 TexU, int32 TexV, FColor* TextureData = NULL)"
  },
  {
    "label": "GetHeightDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetHeightDataTempl(int32& X1, int32& Y1, int32& X2, int32& Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetHeightAlphaBlendDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetHeightAlphaBlendDataTempl(int32& X1, int32& Y1, int32& X2, int32& Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetHeightFlagsDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetHeightFlagsDataTempl(int32& X1, int32& Y1, int32& X2, int32& Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetHeightDataTemplFast()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetHeightDataTemplFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData, UTexture2D* InHeightmap = nullptr, TStoreData* NormalData = NULL)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightData(int32& X1, int32& Y1, int32& X2, int32& Y2, uint16* Data, int32 Stride)"
  },
  {
    "label": "GetHeightDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, uint16* Data, int32 Stride, uint16* NormalData = NULL, UTexture2D* InHeightmap = nullptr)"
  },
  {
    "label": "GetHeightAlphaBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightAlphaBlendData(int32& X1, int32& Y1, int32& X2, int32& Y2, uint16* Data, int32 Stride)"
  },
  {
    "label": "GetHeightFlagsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightFlagsData(int32& X1, int32& Y1, int32& X2, int32& Y2, uint8* Data, int32 Stride)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, uint16>& SparseData)"
  },
  {
    "label": "GetHeightDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, uint16>& SparseData, TMap<FIntPoint, uint16>* NormalData = NULL, UTexture2D* InHeightmap = nullptr)"
  },
  {
    "label": "RecalculateNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateNormals()"
  },
  {
    "label": "GetWeightMapData()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetWeightMapData(const ULandscapeComponent* Component, ULandscapeLayerInfoObject* LayerInfo, int32 TexU, int32 TexV, uint8 Offset = 0, UTexture2D* Texture = NULL, uint8* TextureData = NULL)"
  },
  {
    "label": "GetWeightDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetWeightDataTempl(ULandscapeLayerInfoObject* LayerInfo, int32& X1, int32& Y1, int32& X2, int32& Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetWeightDataTemplFast()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetWeightDataTemplFast(ULandscapeLayerInfoObject* LayerInfo, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetWeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeightData(ULandscapeLayerInfoObject* LayerInfo, int32& X1, int32& Y1, int32& X2, int32& Y2, uint8* Data, int32 Stride)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeightDataFast(ULandscapeLayerInfoObject* LayerInfo, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, uint8* Data, int32 Stride)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeightDataFast(ULandscapeLayerInfoObject* LayerInfo, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TArray<uint8>* Data, int32 Stride)"
  },
  {
    "label": "GetWeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeightData(ULandscapeLayerInfoObject* LayerInfo, int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, uint8>& SparseData)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeightDataFast(ULandscapeLayerInfoObject* LayerInfo, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, uint8>& SparseData)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeightDataFast(ULandscapeLayerInfoObject* LayerInfo, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, TArray<uint8>>& SparseData)"
  },
  {
    "label": "SetAlphaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlphaData(ULandscapeLayerInfoObject* LayerInfo, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const uint8* Data, int32 Stride, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None, bool bWeightAdjust = true, bool bTotalWeightAdjust = false)"
  },
  {
    "label": "SetAlphaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlphaData(const TSet<ULandscapeLayerInfoObject*>& DirtyLayerInfos, const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const uint8* Data, int32 Stride, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None)"
  },
  {
    "label": "DeleteLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLayer(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "FillLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillLayer(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "FillEmptyLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillEmptyLayers(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "ReplaceLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLayer(ULandscapeLayerInfoObject* FromLayerInfo, ULandscapeLayerInfoObject* ToLayerInfo)"
  },
  {
    "label": "GetEditToolTextureData()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetEditToolTextureData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData, TFunctionRef<UTexture2D*(ULandscapeComponent*)> GetComponentTexture)"
  },
  {
    "label": "SetEditToolTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditToolTextureData(int32 X1, int32 Y1, int32 X2, int32 Y2, const uint8* Data, int32 Stride, TFunctionRef<UTexture2D*&(ULandscapeComponent*)> GetComponentTexture, TextureGroup InTextureGroup = TEXTUREGROUP_Terrain_Weightmap)"
  },
  {
    "label": "GetSelectDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetSelectDataTempl(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetSelectData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, uint8* Data, int32 Stride)"
  },
  {
    "label": "GetSelectData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, uint8>& SparseData)"
  },
  {
    "label": "SetSelectData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const uint8* Data, int32 Stride)"
  },
  {
    "label": "GetLayerContributionDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetLayerContributionDataTempl(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetLayerContributionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLayerContributionData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, uint8* Data, int32 Stride)"
  },
  {
    "label": "GetLayerContributionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLayerContributionData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, uint8>& SparseData)"
  },
  {
    "label": "SetLayerContributionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerContributionData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const uint8* Data, int32 Stride)"
  },
  {
    "label": "GetDirtyDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetDirtyDataTempl(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, uint8* Data, int32 Stride)"
  },
  {
    "label": "GetDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirtyData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, uint8>& SparseData)"
  },
  {
    "label": "SetDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirtyData(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const uint8* Data, int32 Stride)"
  },
  {
    "label": "SetXYOffsetDataTempl()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SetXYOffsetDataTempl(int32 X1, int32 Y1, int32 X2, int32 Y2, const T* Data, int32 Stride)"
  },
  {
    "label": "SetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetXYOffsetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const FVector2D* Data, int32 Stride)"
  },
  {
    "label": "SetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetXYOffsetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const FVector* Data, int32 Stride)"
  },
  {
    "label": "GetXYOffsetmapData()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetXYOffsetmapData(const ULandscapeComponent* Component, int32 TexU, int32 TexV, FColor* TextureData = NULL)"
  },
  {
    "label": "GetXYOffsetDataTempl()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetXYOffsetDataTempl(int32& X1, int32& Y1, int32& X2, int32& Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetData(int32& X1, int32& Y1, int32& X2, int32& Y2, FVector2D* Data, int32 Stride)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, FVector2D>& SparseData)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetData(int32& X1, int32& Y1, int32& X2, int32& Y2, FVector* Data, int32 Stride)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, FVector>& SparseData)"
  },
  {
    "label": "GetXYOffsetDataTemplFast()",
    "kind": "Method",
    "detail": "Function (template<TStoreData> void)",
    "insertText": "GetXYOffsetDataTemplFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TStoreData& StoreData)"
  },
  {
    "label": "GetXYOffsetDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, FVector2D* Data, int32 Stride)"
  },
  {
    "label": "GetXYOffsetDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, FVector2D>& SparseData)"
  },
  {
    "label": "GetXYOffsetDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, FVector* Data, int32 Stride)"
  },
  {
    "label": "GetXYOffsetDataFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffsetDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, FVector>& SparseData)"
  },
  {
    "label": "ShrinkData()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "ShrinkData(TArray<T>& Data, int32 OldMinX, int32 OldMinY, int32 OldMaxX, int32 OldMaxY, int32 NewMinX, int32 NewMinY, int32 NewMaxX, int32 NewMaxY)"
  },
  {
    "label": "GetTargetLandscape()",
    "kind": "Method",
    "detail": "Function (const ALandscape*)",
    "insertText": "GetTargetLandscape()"
  },
  {
    "label": "CanHaveLandscapeLayersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveLandscapeLayersContent()"
  },
  {
    "label": "HasLandscapeLayersContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLandscapeLayersContent()"
  },
  {
    "label": "FillLayer()",
    "kind": "Method",
    "detail": "Function (private : int32 ComponentSizeQuads ; int32 SubsectionSizeQuads ; int32 ComponentNumSubsections ; FVector DrawScale ; ULandscapeInfo* LandscapeInfo ; bool bUseSharedLandscapeEditLayer ; FGuid LocalEditLayerGUID ; void)",
    "insertText": "FillLayer(ULandscapeLayerInfoObject* LayerInfo, bool bEmptyLayersOnly)"
  },
  {
    "label": "CalcMissingValues()",
    "kind": "Method",
    "detail": "Function (template<TData,TStoreData,FType> void)",
    "insertText": "CalcMissingValues(const int32 X1, const int32 X2, const int32 Y1, const int32 Y2, const int32 ComponentIndexX1, const int32 ComponentIndexX2, const int32 ComponentIndexY1, const int32 ComponentIndexY2, const int32 ComponentSizeX, const int32 ComponentSizeY, TData* CornerValues, TArray<bool>& NoBorderY1, TArray<bool>& NoBorderY2, TArray<bool>& ComponentDataExist, TStoreData& StoreData)"
  },
  {
    "label": "GetHeightDataInternal()",
    "kind": "Method",
    "detail": "Function (template<TStoreData,TGetHeightMapDataFunction> void)",
    "insertText": "GetHeightDataInternal(int32& ValidX1, int32& ValidY1, int32& ValidX2, int32& ValidY2, TStoreData& StoreData, TGetHeightMapDataFunction GetHeightMapDataFunction)"
  },
  {
    "label": "GetHeightMapColor()",
    "kind": "Method",
    "detail": "Function (FColor&)",
    "insertText": "GetHeightMapColor(const ULandscapeComponent* Component, int32 TexU, int32 TexV, FColor* TextureData)"
  },
  {
    "label": "IsLayerAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerAllowed(const ULandscapeLayerInfoObject* LayerInfo, int32 ComponentIndexX, int32 SubIndexX, int32 SubX, int32 ComponentIndexY, int32 SubIndexY, int32 SubY)"
  },
  {
    "label": "CountWeightBlendedLayerInfluence()",
    "kind": "Method",
    "detail": "Function (TMap<const ULandscapeLayerInfoObject*,uint32>)",
    "insertText": "CountWeightBlendedLayerInfluence(int32 ComponentIndexX, int32 ComponentIndexY, TOptional<TArrayView<const uint8* const>> LayerDataPtrs)"
  },
  {
    "label": "ChooseReplacementLayer()",
    "kind": "Method",
    "detail": "Function (const ULandscapeLayerInfoObject*)",
    "insertText": "ChooseReplacementLayer(const ULandscapeLayerInfoObject* LayerInfo, int32 ComponentIndexX, int32 SubIndexX, int32 SubX, int32 ComponentIndexY, int32 SubIndexY, int32 SubY, TMap<FIntPoint, TMap<const ULandscapeLayerInfoObject*, uint32>>& LayerInfluenceCache, TArrayView<const uint8* const> LayerDataPtrs)"
  },
  {
    "label": "FLandscapeDoNotDirtyScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FLandscapeDoNotDirtyScope {)",
    "insertText": "FLandscapeDoNotDirtyScope(FLandscapeEditDataInterface& InEditInterface, bool bInScopeEnabled = true) : EditInterface(InEditInterface), bScopeEnabled(bInScopeEnabled)"
  },
  {
    "label": "SetShouldDirtyPackage()",
    "kind": "Method",
    "detail": "Function (EditInterface .)",
    "insertText": "SetShouldDirtyPackage(false)"
  },
  {
    "label": "FLandscapeDoNotDirtyScope()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FLandscapeDoNotDirtyScope()"
  },
  {
    "label": "SetShouldDirtyPackage()",
    "kind": "Method",
    "detail": "Function (EditInterface .)",
    "insertText": "SetShouldDirtyPackage(bPreviousValue)"
  },
  {
    "label": "DestY()",
    "kind": "Method",
    "detail": "Function (T* DestData =& Data [)",
    "insertText": "DestY(1 + NewMaxX - NewMinX)"
  },
  {
    "label": "SrcY()",
    "kind": "Method",
    "detail": "Function (const T* SrcData =& Data [)",
    "insertText": "SrcY(1 + OldMaxX - OldMinX)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memmove(DestData, SrcData, (1 + NewMaxX - NewMinX) * sizeof(T))"
  },
  {
    "label": "NewSize()",
    "kind": "Method",
    "detail": "Function (} } const int32)",
    "insertText": "NewSize(1 + NewMaxY - NewMinY) * (1 + NewMaxX - NewMinX)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "RemoveAt(NewSize, Data.Num() - NewSize)"
  },
  {
    "label": "FHeightmapAccessor()",
    "kind": "Method",
    "detail": "Function (} } template<bool bInUseInterp> struct FHeightmapAccessor { enum { bUseInterp = bInUseInterp } ;)",
    "insertText": "FHeightmapAccessor(ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "FLandscapeEditDataInterface()",
    "kind": "Method",
    "detail": "Function (LandscapeInfo = InLandscapeInfo ; LandscapeEdit = new)",
    "insertText": "FLandscapeEditDataInterface(InLandscapeInfo)"
  },
  {
    "label": "SetEditLayer()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "SetEditLayer(InEditLayerGUID)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, uint16>& Data)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "GetHeightData(X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataFast(int32 X1, int32 Y1, int32 X2, int32 Y2, TMap<FIntPoint, uint16>& Data)"
  },
  {
    "label": "GetHeightDataFast()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "GetHeightDataFast(X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataFast(int32 X1, int32 Y1, int32 X2, int32 Y2, uint16* Data)"
  },
  {
    "label": "GetHeightDataFast()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "GetHeightDataFast(X1, Y1, X2, Y2, Data, 0)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const uint16* Data, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*> Components ;)",
    "insertText": "if(LandscapeInfo && LandscapeEdit->GetComponentsInRegion(X1, Y1, X2, Y2, &Components))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ChangedComponents .)",
    "insertText": "Append(Components)"
  },
  {
    "label": "RequestHeightmapUpdate()",
    "kind": "Method",
    "detail": "Function (Component ->)",
    "insertText": "RequestHeightmapUpdate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bool bUpdateFoliage = false ; bool bUpdateNormals = false ;)",
    "insertText": "if(!LandscapeEdit->HasLandscapeLayersContent())"
  },
  {
    "label": "InvalidateGeneratedComponentData()",
    "kind": "Method",
    "detail": "Function (const bool bInvalidateLightingCache = true ;)",
    "insertText": "InvalidateGeneratedComponentData(Components, bInvalidateLightingCache)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bUpdateNormals = true ;)",
    "insertText": "for(ULandscapeComponent* Component : Components)"
  },
  {
    "label": "GetCollisionComponent()",
    "kind": "Method",
    "detail": "Function (ULandscapeHeightfieldCollisionComponent* CollisionComponent = Component ->)",
    "insertText": "GetCollisionComponent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bUpdateFoliage = true ; break ; } } })",
    "insertText": "if(bUpdateFoliage)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<ULandscapeHeightfieldCollisionComponent*> CollisionComponents ; CollisionComponents .)",
    "insertText": "Empty(Components.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CollisionComponents .)",
    "insertText": "Add(CollisionComponent)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PreUpdateLocalBoxes .)",
    "insertText": "Add(FBox(FVector((float)X1, (float)Y1, Component->CachedLocalBox.Min.Z), FVector((float)X2, (float)Y2, Component->CachedLocalBox.Max.Z)))"
  },
  {
    "label": "SetHeightData()",
    "kind": "Method",
    "detail": "Function (} } LandscapeEdit ->)",
    "insertText": "SetHeightData(X1, Y1, X2, Y2, Data, 0, bUpdateNormals)"
  },
  {
    "label": "SnapFoliageInstances()",
    "kind": "Method",
    "detail": "Function (ULandscapeHeightfieldCollisionComponent* CollisionComponent = CollisionComponents [ Index ] ; CollisionComponent ->)",
    "insertText": "SnapFoliageInstances(PreUpdateLocalBoxes[Index].TransformBy(LandscapeInfo->GetLandscapeProxy()->LandscapeActorToWorld().ToMatrixWithScale()).ExpandBy(1.0f))"
  },
  {
    "label": "FHeightmapAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FHeightmapAccessor()"
  },
  {
    "label": "CollisionComponent()",
    "kind": "Method",
    "detail": "Function (ULandscapeHeightfieldCollisionComponent*)",
    "insertText": "CollisionComponent(*It)->GetCollisionComponent()"
  },
  {
    "label": "RecreateCollision()",
    "kind": "Method",
    "detail": "Function (CollisionComponent ->)",
    "insertText": "RecreateCollision()"
  },
  {
    "label": "UpdateComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentData(*CollisionComponent)"
  },
  {
    "label": "FAlphamapAccessor()",
    "kind": "Method",
    "detail": "Function (} } } delete LandscapeEdit ; LandscapeEdit = NULL ; } private : ULandscapeInfo* LandscapeInfo ; FLandscapeEditDataInterface* LandscapeEdit ; TSet<ULandscapeComponent*> ChangedComponents ; } ; template<bool bInUseInterp,bool bInUseTotalNormalize> struct FAlphamapAccessor { enum { bUseInterp = bInUseInterp } ; enum { bUseTotalNormalize = bInUseTotalNormalize } ;)",
    "insertText": "FAlphamapAccessor(ULandscapeInfo* InLandscapeInfo, ULandscapeLayerInfoObject* InLayerInfo) : LandscapeInfo(InLandscapeInfo) , LandscapeEdit(InLandscapeInfo) , LayerInfo(InLayerInfo) , bBlendWeight(true)"
  },
  {
    "label": "FAlphamapAccessor()",
    "kind": "Method",
    "detail": "Function (bBlendWeight = false ; } else { bBlendWeight = ! LayerInfo -> bNoWeightBlend ; } } } ~)",
    "insertText": "FAlphamapAccessor()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "GetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, uint8>& Data)"
  },
  {
    "label": "GetWeightData()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit .)",
    "insertText": "GetWeightData(LayerInfo, X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataFast(int32 X1, int32 Y1, int32 X2, int32 Y2, TMap<FIntPoint, uint8>& Data)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit .)",
    "insertText": "GetWeightDataFast(LayerInfo, X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataFast(int32 X1, int32 Y1, int32 X2, int32 Y2, uint8* Data)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit .)",
    "insertText": "GetWeightDataFast(LayerInfo, X1, Y1, X2, Y2, Data, 0)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const uint8* Data, ELandscapeLayerPaintingRestriction PaintingRestriction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*> Components ;)",
    "insertText": "if(LandscapeEdit.GetComponentsInRegion(X1, Y1, X2, Y2, &Components))"
  },
  {
    "label": "RequestWeightmapUpdate()",
    "kind": "Method",
    "detail": "Function (LandscapeComponent ->)",
    "insertText": "RequestWeightmapUpdate()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!LandscapeEdit.HasLandscapeLayersContent())"
  },
  {
    "label": "InvalidateGeneratedComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGeneratedComponentData(Components)"
  },
  {
    "label": "SetAlphaData()",
    "kind": "Method",
    "detail": "Function (} LandscapeEdit .)",
    "insertText": "SetAlphaData(LayerInfo, X1, Y1, X2, Y2, Data, 0, PaintingRestriction, bBlendWeight, bUseTotalNormalize)"
  }
]