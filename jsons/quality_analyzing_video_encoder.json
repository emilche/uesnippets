[
  {
    "label": "QualityAnalyzingVideoEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityAnalyzingVideoEncoder"
  },
  {
    "label": "SimulcastMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SimulcastMode"
  },
  {
    "label": "QualityAnalyzingVideoEncoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityAnalyzingVideoEncoderFactory"
  },
  {
    "label": "QualityAnalyzingVideoEncoder()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_ENCODER_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_ENCODER_H_ # include<list> # include<memory> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" test / pc / e2e / analyzer / video / encoded_image_data_injector . h \" namespace webrtc { namespace webrtc_pc_e2e { class QualityAnalyzingVideoEncoder : public VideoEncoder,public EncodedImageCallback { public : using EmulatedSFUConfigMap = std::map<std::string,absl::optional<EmulatedSFUConfig>> ;)",
    "insertText": "QualityAnalyzingVideoEncoder(absl::string_view peer_name, std::unique_ptr<VideoEncoder> delegate, double bitrate_multiplier, EmulatedSFUConfigMap stream_to_sfu_config, EncodedImageDataInjector* injector, VideoQualityAnalyzerInterface* analyzer)"
  },
  {
    "label": "QualityAnalyzingVideoEncoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "QualityAnalyzingVideoEncoder()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitEncode(const VideoCodec* codec_settings, const Settings& settings)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Encode(const VideoFrame& frame, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const VideoEncoder::RateControlParameters& parameters)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "OnEncodedImage()",
    "kind": "Method",
    "detail": "Function (EncodedImageCallback::Result)",
    "insertText": "OnEncodedImage(const EncodedImage& encoded_image, const CodecSpecificInfo* codec_specific_info)"
  },
  {
    "label": "OnDroppedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDroppedFrame(DropReason reason)"
  },
  {
    "label": "ShouldDiscard()",
    "kind": "Method",
    "detail": "Function (private : enum SimulcastMode { kNormal,kSimulcast,kSVC,kKSVC } ; bool)",
    "insertText": "ShouldDiscard(uint16_t frame_id, const EncodedImage& encoded_image) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const std::string peer_name_ ; std::unique_ptr<VideoEncoder> delegate_ ; const double bitrate_multiplier_ ; EmulatedSFUConfigMap stream_to_sfu_config_ ; EncodedImageDataInjector* const injector_ ; VideoQualityAnalyzerInterface* const analyzer_ ; Mutex mutex_ ; VideoCodec codec_settings_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "QualityAnalyzingVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (} ; class QualityAnalyzingVideoEncoderFactory : public VideoEncoderFactory { public :)",
    "insertText": "QualityAnalyzingVideoEncoderFactory(absl::string_view peer_name, std::unique_ptr<VideoEncoderFactory> delegate, double bitrate_multiplier, QualityAnalyzingVideoEncoder::EmulatedSFUConfigMap stream_to_sfu_config, EncodedImageDataInjector* injector, VideoQualityAnalyzerInterface* analyzer)"
  },
  {
    "label": "QualityAnalyzingVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "QualityAnalyzingVideoEncoderFactory()"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "CreateVideoEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoEncoder>)",
    "insertText": "CreateVideoEncoder(const SdpVideoFormat& format)"
  }
]