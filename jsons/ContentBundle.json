[
  {
    "label": "UContentBundleDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UContentBundleDescriptor"
  },
  {
    "label": "FContentBundleClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleClient"
  },
  {
    "label": "IWorldPartitionCookPackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionCookPackageContext"
  },
  {
    "label": "URuntimeHashExternalStreamingObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeHashExternalStreamingObjectBase"
  },
  {
    "label": "FContentBundle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundle"
  },
  {
    "label": "FContentBundle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" WorldPartition / ContentBundle / ContentBundleStatus . h \" # include \" WorldPartition / ContentBundle / ContentBundleBase . h \" class UContentBundleDescriptor ; class FContentBundleClient ; class IWorldPartitionCookPackageContext ; class URuntimeHashExternalStreamingObjectBase ; class FContentBundle : public FContentBundleBase { public :)",
    "insertText": "FContentBundle(TSharedPtr<FContentBundleClient>& InClient, UWorld* InWorld)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "HasContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContent()"
  },
  {
    "label": "DoInitialize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DoInitialize()"
  },
  {
    "label": "DoUninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoUninitialize()"
  },
  {
    "label": "DoInjectContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInjectContent()"
  },
  {
    "label": "DoRemoveContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRemoveContent()"
  },
  {
    "label": "InitializeForPIE()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "InitializeForPIE()"
  }
]