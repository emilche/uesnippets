[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FGenericCrashContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericCrashContext"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "FProgramCounterSymbolInfoEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProgramCounterSymbolInfoEx"
  },
  {
    "label": "FStackWalkModuleInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackWalkModuleInfo"
  },
  {
    "label": "FProgramCounterSymbolInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProgramCounterSymbolInfo"
  },
  {
    "label": "FGenericPlatformStackWalk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformStackWalk"
  },
  {
    "label": "EStackWalkFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EStackWalkFlags"
  },
  {
    "label": "FProgramCounterSymbolInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" UObject / NameTypes . h \" class FName ; struct FGenericCrashContext ; struct FProcHandle ; struct FProgramCounterSymbolInfoEx ; struct FStackWalkModuleInfo { uint64 BaseOfImage ; uint32 ImageSize ; uint32 TimeDateStamp ; TCHAR ModuleName [ 3 2 ] ; TCHAR ImageName [ 2 5 6 ] ; TCHAR LoadedImageName [ 2 5 6 ] ; uint32 PdbSig ; uint32 PdbAge ; struct { unsigned long Data1 ; unsigned short Data2 ; unsigned short Data3 ; unsigned char Data4 [ 8 ] ; } PdbSig70 ; } ; struct FProgramCounterSymbolInfo final { enum { MAX_NAME_LENGTH = 1 0 2 4,} ; ANSICHAR ModuleName [ MAX_NAME_LENGTH ] ; ANSICHAR FunctionName [ MAX_NAME_LENGTH ] ; ANSICHAR Filename [ MAX_NAME_LENGTH ] ; int32 LineNumber ; int32 SymbolDisplacement ; uint64 OffsetInModule ; uint64 ProgramCounter ;)",
    "insertText": "FProgramCounterSymbolInfo()"
  },
  {
    "label": "FProgramCounterSymbolInfoEx()",
    "kind": "Method",
    "detail": "Function (} ; struct FProgramCounterSymbolInfoEx { FString ModuleName ; FString FunctionName ; FString Filename ; uint32 LineNumber ; uint64 SymbolDisplacement ; uint64 OffsetInModule ; uint64 ProgramCounter ;)",
    "insertText": "FProgramCounterSymbolInfoEx(FString InModuleName = \"\", FString InFunctionName = \"\", FString InFilename = \"\", uint32 InLineNumber = 0, uint64 InSymbolDisplacement = 0, uint64 InOffsetInModule = 0, uint64 InProgramCounter = 0)"
  },
  {
    "label": "FastStackWalk()",
    "kind": "Method",
    "detail": "Function (} ; struct FGenericPlatformStackWalk { typedef FGenericPlatformStackWalk Base ; struct EStackWalkFlags { enum { AccurateStackWalk = 0,)",
    "insertText": "FastStackWalk(1 << 0), FlagsUsedWhenHandlingEnsure = (FastStackWalk)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Init()"
  },
  {
    "label": "InitStackWalking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitStackWalking()"
  },
  {
    "label": "SymbolInfoToHumanReadableString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SymbolInfoToHumanReadableString(const FProgramCounterSymbolInfo& SymbolInfo, ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize)"
  },
  {
    "label": "SymbolInfoToHumanReadableStringEx()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SymbolInfoToHumanReadableStringEx(const FProgramCounterSymbolInfoEx& SymbolInfo, FString& out_HumanReadableString)"
  },
  {
    "label": "ProgramCounterToSymbolInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProgramCounterToSymbolInfo(uint64 ProgramCounter, FProgramCounterSymbolInfo& out_SymbolInfo)"
  },
  {
    "label": "ProgramCounterToSymbolInfoEx()",
    "kind": "Method",
    "detail": "Function (out_SymbolInfo . ProgramCounter = ProgramCounter ; } void)",
    "insertText": "ProgramCounterToSymbolInfoEx(uint64 ProgramCounter, FProgramCounterSymbolInfoEx& out_SymbolInfo)"
  },
  {
    "label": "CaptureStackBackTrace()",
    "kind": "Method",
    "detail": "Function (out_SymbolInfo . ProgramCounter = ProgramCounter ; } uint32)",
    "insertText": "CaptureStackBackTrace(uint64* BackTrace, uint32 MaxDepth, void* Context = nullptr)"
  },
  {
    "label": "CaptureThreadStackBackTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CaptureThreadStackBackTrace(uint64 ThreadId, uint64* BackTrace, uint32 MaxDepth, void* Context = nullptr)"
  },
  {
    "label": "StackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE void)",
    "insertText": "StackWalkAndDump(ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, int32 IgnoreCount, void* Context = nullptr)"
  },
  {
    "label": "StackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackWalkAndDump(ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, void* ProgramCounter, void* Context = nullptr)"
  },
  {
    "label": "GetStack()",
    "kind": "Method",
    "detail": "Function (TArray<FProgramCounterSymbolInfo>)",
    "insertText": "GetStack(int32 IgnoreCount, int32 MaxDepth = 100, void* Context = nullptr)"
  },
  {
    "label": "ThreadStackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadStackWalkAndDump(ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, int32 IgnoreCount, uint32 ThreadId)"
  },
  {
    "label": "StackWalkAndDumpEx()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StackWalkAndDumpEx(ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, int32 IgnoreCount, uint32 Flags, void* Context = nullptr)"
  },
  {
    "label": "StackWalkAndDumpEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StackWalkAndDumpEx(ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize, void* ProgramCounter, uint32 Flags, void* Context = nullptr)"
  },
  {
    "label": "WantsDetailedCallstacksInNonMonolithicBuilds()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "WantsDetailedCallstacksInNonMonolithicBuilds()"
  }
]