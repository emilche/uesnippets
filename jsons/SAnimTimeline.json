[
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "SAnimOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimOutliner"
  },
  {
    "label": "SAnimTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTrackArea"
  },
  {
    "label": "FAnimTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimeSliderController"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "FPaintPlaybackRangeArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPaintPlaybackRangeArgs"
  },
  {
    "label": "UAnimSingleNodeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSingleNodeInstance"
  },
  {
    "label": "SAnimTimeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTimeline"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimatedRange . h \" # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" ITimeSlider . h \" # include \" ITransportControl . h \" class FAnimModel ; class SAnimOutliner ; class SAnimTrackArea ; class FAnimTimeSliderController ; class SSearchBox ; struct FPaintPlaybackRangeArgs ; class UAnimSingleNodeInstance ; class SAnimTimeline : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimTimeline)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FInt32Interval, ViewIndices ) SLATE_EVENT( FSimpleDelegate, OnReceivedFocus ) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetGridMetrics()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGridMetrics(float PhysicalWidth, double& OutMajorInterval, int32& OutMinorDivisions)"
  },
  {
    "label": "GetTimeSliderController()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITimeSliderController>)",
    "insertText": "GetTimeSliderController()"
  },
  {
    "label": "GetColumnFillCoefficient()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "GetColumnFillCoefficient(int32 ColumnIndex)"
  },
  {
    "label": "OnOutlinerSearchChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerSearchChanged(const FText& Filter)"
  },
  {
    "label": "OnColumnFillCoefficientChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnFillCoefficientChanged(float FillCoefficient, int32 ColumnIndex)"
  },
  {
    "label": "HandleKeyComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeyComplete()"
  },
  {
    "label": "GetPreviewInstance()",
    "kind": "Method",
    "detail": "Function (UAnimSingleNodeInstance*)",
    "insertText": "GetPreviewInstance()"
  },
  {
    "label": "HandleScrubPositionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleScrubPositionChanged(FFrameTime NewScrubPosition, bool bIsScrubbing, bool bEvaluate)"
  },
  {
    "label": "OnCropAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCropAnimSequence(bool bFromStart, float CurrentTime)"
  },
  {
    "label": "OnAppendAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAppendAnimSequence(bool bFromStart, int32 NumOfFrames)"
  },
  {
    "label": "OnInsertAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertAnimSequence(bool bBefore, int32 CurrentFrame)"
  },
  {
    "label": "OnReZeroAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReZeroAnimSequence(int32 FrameIndex)"
  },
  {
    "label": "OnShowPopupOfAppendAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowPopupOfAppendAnimation(FWidgetPath WidgetPath, bool bBegin)"
  },
  {
    "label": "OnSequenceAppendedCalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequenceAppendedCalled(const FText & InNewGroupText, ETextCommit::Type CommitInfo, bool bBegin)"
  },
  {
    "label": "SetPlayTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayTime(double InFrameTime)"
  }
]