[
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FEncounteredStateMachineStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncounteredStateMachineStack"
  },
  {
    "label": "FStateMachineEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStateMachineEntry"
  },
  {
    "label": "FAnimNotifyStateMachineContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimNotifyStateMachineContext"
  },
  {
    "label": "FActiveStateMachineScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveStateMachineScope"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnimNodeMessages . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimSync . h \" # include \" ActiveStateMachineScope . generated . h \" struct FAnimationBaseContext ; struct FAnimInstanceProxy ; struct FAnimNode_StateMachine ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FEncounteredStateMachineStack()"
  },
  {
    "label": "FEncounteredStateMachineStack()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEncounteredStateMachineStack(const FEncounteredStateMachineStack& ParentStack, int32 InStateMachineIndex, int32 InStateIndex)"
  },
  {
    "label": "FEncounteredStateMachineStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEncounteredStateMachineStack(int32 InStateMachineIndex, int32 InStateIndex)"
  },
  {
    "label": "FStateMachineEntry()",
    "kind": "Method",
    "detail": "Function (struct FStateMachineEntry {)",
    "insertText": "FStateMachineEntry()"
  },
  {
    "label": "FStateMachineEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStateMachineEntry(int32 InStateMachineIndex, int32 InStateIndex) : StateMachineIndex(InStateMachineIndex) , StateIndex(InStateIndex)"
  },
  {
    "label": "InitStack()",
    "kind": "Method",
    "detail": "Function (} int32 StateMachineIndex = INDEX_NONE ; int32 StateIndex = INDEX_NONE ; ; } ; TArray<FStateMachineEntry,TInlineAllocator<4>> StateStack ; FEncounteredStateMachineStack)",
    "insertText": "InitStack(const FEncounteredStateMachineStack& ParentStack, int32 InStateMachineIndex, int32 InStateIndex)"
  },
  {
    "label": "InitStack()",
    "kind": "Method",
    "detail": "Function (FEncounteredStateMachineStack)",
    "insertText": "InitStack(int32 InStateMachineIndex, int32 InStateIndex)"
  },
  {
    "label": "DECLARE_NOTIFY_CONTEXT_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE { namespace Anim { class FAnimNotifyStateMachineContext : public UE::Anim::IAnimNotifyEventContextDataInterface {)",
    "insertText": "DECLARE_NOTIFY_CONTEXT_INTERFACE(FAnimNotifyStateMachineContext) public: ENGINE_API FAnimNotifyStateMachineContext(const FEncounteredStateMachineStack& InEncounteredStateMachines)"
  },
  {
    "label": "IsStateMachineInContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStateMachineInContext(int32 StateMachineIndex)"
  },
  {
    "label": "IsStateInStateMachineInContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStateInStateMachineInContext(int32 StateMachineIndex, int32 StateIndex)"
  },
  {
    "label": "DECLARE_ANIMGRAPH_MESSAGE()",
    "kind": "Method",
    "detail": "Function (const FEncounteredStateMachineStack EncounteredStateMachines ; } ; class FActiveStateMachineScope : public UE::Anim::IGraphMessage {)",
    "insertText": "DECLARE_ANIMGRAPH_MESSAGE(FActiveStateMachineScope)"
  },
  {
    "label": "FActiveStateMachineScope()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FActiveStateMachineScope(const FAnimationBaseContext& InContext, FAnimNode_StateMachine* StateMachine, int32 InStateIndex)"
  },
  {
    "label": "GetStateMachineIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStateMachineIndex(FAnimNode_StateMachine* StateMachine, const FAnimationBaseContext& Context)"
  },
  {
    "label": "MakeUniqueEventContextData()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<const IAnimNotifyEventContextDataInterface>)",
    "insertText": "MakeUniqueEventContextData()"
  }
]