[
  {
    "label": "FakeAdaptationConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeAdaptationConstraint"
  },
  {
    "label": "FakeAdaptationConstraint()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_ADAPTATION_TEST_FAKE_ADAPTATION_CONSTRAINT_H_ # define CALL_ADAPTATION_TEST_FAKE_ADAPTATION_CONSTRAINT_H_ # include<string> # include \" absl / strings / string_view . h \" # include \" call / adaptation / adaptation_constraint . h \" namespace webrtc { class FakeAdaptationConstraint : public AdaptationConstraint { public :)",
    "insertText": "FakeAdaptationConstraint(absl::string_view name)"
  },
  {
    "label": "FakeAdaptationConstraint()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeAdaptationConstraint()"
  },
  {
    "label": "set_is_adaptation_up_allowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_is_adaptation_up_allowed(bool is_adaptation_up_allowed)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Name()"
  },
  {
    "label": "IsAdaptationUpAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdaptationUpAllowed(const VideoStreamInputState& input_state, const VideoSourceRestrictions& restrictions_before, const VideoSourceRestrictions& restrictions_after)"
  }
]