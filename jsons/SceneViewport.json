[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDebugCanvasDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugCanvasDrawer"
  },
  {
    "label": "FSlateRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderer"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "SDebugCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDebugCanvas"
  },
  {
    "label": "FDebugCanvasDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugCanvasDrawer"
  },
  {
    "label": "FSlateRenderTargetRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderTargetRHI"
  },
  {
    "label": "FSlateRenderTargetRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderTargetRHI"
  },
  {
    "label": "FSceneViewport()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSceneViewport( FViewportClient* InViewportClient, TSharedPtr<SViewport> InViewportWidget )"
  },
  {
    "label": "SetRenderTargetTextureRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetTextureRenderThread(FTextureRHIRef& RT)"
  },
  {
    "label": "OnPlayWorldViewportSwapped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlayWorldViewportSwapped( const FSceneViewport& OtherViewport )"
  },
  {
    "label": "SwapStatCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapStatCommands(const FSceneViewport& OtherViewport)"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "SetViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSize(uint32 NewSizeX,uint32 NewSizeY)"
  },
  {
    "label": "SetFixedViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixedViewportSize(uint32 NewSizeX, uint32 NewSizeY)"
  },
  {
    "label": "FindWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindWindow()"
  },
  {
    "label": "SetDebugCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugCanvas(TSharedPtr<class SDebugCanvas> InDebugCanvas)"
  },
  {
    "label": "ResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeViewport( uint32 NewSizeX,uint32 NewSizeY,EWindowMode::Type NewWindowMode )"
  },
  {
    "label": "ProcessAccumulatedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAccumulatedPointerInput()"
  },
  {
    "label": "UpdateCachedCursorPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedCursorPos( const FGeometry& InGeometry, const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "UpdateCachedGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedGeometry( const FGeometry& InGeometry )"
  },
  {
    "label": "UpdateModifierKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModifierKeys( const FPointerEvent& InMouseEvent )"
  },
  {
    "label": "ApplyModifierKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyModifierKeys( const FModifierKeysState& InKeysState )"
  },
  {
    "label": "AcquireFocusAndCapture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AcquireFocusAndCapture(FIntPoint MousePosition, EFocusCause FocusCause = EFocusCause::SetDirectly)"
  },
  {
    "label": "IsCurrentlyGameViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentlyGameViewport()"
  },
  {
    "label": "OnWindowBackBufferResourceDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowBackBufferResourceDestroyed(void* Backbuffer)"
  },
  {
    "label": "OnPreResizeWindowBackbuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreResizeWindowBackbuffer(void* Backbuffer)"
  },
  {
    "label": "OnPostResizeWindowBackbuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostResizeWindowBackbuffer(void* Backbuffer)"
  },
  {
    "label": "IsInPermanentCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInPermanentCapture()"
  }
]