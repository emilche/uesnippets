[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FDebugCanvasDrawer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugCanvasDrawer"
  },
  {
    "label": "FSlateRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderer"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "SDebugCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDebugCanvas"
  },
  {
    "label": "FSlateRenderTargetRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderTargetRHI"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Input / PopupMethodReply . h \" # include \" Widgets / SWidget . h \" # include \" Rendering / RenderingCommon . h \" # include \" Textures / SlateShaderResource . h \" # include \" UnrealClient . h \" class FCanvas ; class FDebugCanvasDrawer ; class FSlateRenderer ; class FSlateWindowElementList ; class SViewport ; class SWindow ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSceneViewportResize, FVector2D)"
  },
  {
    "label": "FSceneViewport()",
    "kind": "Method",
    "detail": "Function (class SViewport ; const FName NAME_SceneViewport ; class FSceneViewport : public FViewportFrame,public FViewport,public ISlateViewport { public :)",
    "insertText": "FSceneViewport(FViewportClient* InViewportClient, TSharedPtr<SViewport> InViewportWidget)"
  },
  {
    "label": "FSceneViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSceneViewport()"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetWindow()"
  },
  {
    "label": "HasMouseCapture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMouseCapture()"
  },
  {
    "label": "HasFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocus()"
  },
  {
    "label": "IsForegroundWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForegroundWindow()"
  },
  {
    "label": "CaptureMouse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureMouse(bool bCapture)"
  },
  {
    "label": "LockMouseToViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockMouseToViewport(bool bLock)"
  },
  {
    "label": "ShowCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowCursor(bool bVisible)"
  },
  {
    "label": "SetPreCaptureMousePosFromSlateCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreCaptureMousePosFromSlateCursor()"
  },
  {
    "label": "IsCursorVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCursorVisible()"
  },
  {
    "label": "SetSoftwareCursorPosition()",
    "kind": "Method",
    "detail": "Function (bIsSoftwareCursorVisible = bVisible ; } void)",
    "insertText": "SetSoftwareCursorPosition(FVector2D Position)"
  },
  {
    "label": "IsSoftwareCursorVisible()",
    "kind": "Method",
    "detail": "Function (SoftwareCursorPosition = Position ; } bool)",
    "insertText": "IsSoftwareCursorVisible()"
  },
  {
    "label": "GetDisplayGamma()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDisplayGamma()"
  },
  {
    "label": "EnqueueEndRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueEndRenderFrame(const bool bLockToVsync, const bool bShouldPresent)"
  },
  {
    "label": "GetRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (const FTextureRHIRef&)",
    "insertText": "GetRenderTargetTexture()"
  },
  {
    "label": "SetRenderTargetTextureRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetTextureRenderThread(FTextureRHIRef& RT)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserFocus(bool bFocus)"
  },
  {
    "label": "KeyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyState(FKey Key)"
  },
  {
    "label": "GetMouseX()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMouseX()"
  },
  {
    "label": "GetMouseY()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMouseY()"
  },
  {
    "label": "GetMousePos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMousePos(FIntPoint& MousePosition, const bool bLocalPosition = true)"
  },
  {
    "label": "SetMouse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouse(int32 X, int32 Y)"
  },
  {
    "label": "ProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInput(float DeltaTime)"
  },
  {
    "label": "VirtualDesktopPixelToViewport()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "VirtualDesktopPixelToViewport(FIntPoint VirtualDesktopPointPx)"
  },
  {
    "label": "ViewportToVirtualDesktopPixel()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "ViewportToVirtualDesktopPixel(FVector2D ViewportCoordinate)"
  },
  {
    "label": "InvalidateDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateDisplay()"
  },
  {
    "label": "DeferInvalidateHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferInvalidateHitProxy()"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (FViewport*)",
    "insertText": "GetViewport()"
  },
  {
    "label": "BeginRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRenderFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "EndRenderFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRenderFrame(FRHICommandListImmediate& RHICmdList, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "OnPlayWorldViewportSwapped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPlayWorldViewportSwapped(const FSceneViewport& OtherViewport)"
  },
  {
    "label": "SwapStatCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapStatCommands(const FSceneViewport& OtherViewport)"
  },
  {
    "label": "SetRequiresVsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiresVsync(bool bShouldVsync)"
  },
  {
    "label": "RequiresVsync()",
    "kind": "Method",
    "detail": "Function (bRequiresVsync = bShouldVsync ; } bool)",
    "insertText": "RequiresVsync()"
  },
  {
    "label": "SetOnSceneViewportResizeDel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnSceneViewportResizeDel(FOnSceneViewportResize InOnSceneViewportResize)"
  },
  {
    "label": "SetPlayInEditorGetsMouseControl()",
    "kind": "Method",
    "detail": "Function (OnSceneViewportResizeDel = InOnSceneViewportResize ; } void)",
    "insertText": "SetPlayInEditorGetsMouseControl(const bool bGetsMouseControl)"
  },
  {
    "label": "SetPlayInEditorIsSimulate()",
    "kind": "Method",
    "detail": "Function (bShouldCaptureMouseOnActivate = bGetsMouseControl ; } void)",
    "insertText": "SetPlayInEditorIsSimulate(const bool bIsSimulate)"
  },
  {
    "label": "GetPlayInEditorIsSimulate()",
    "kind": "Method",
    "detail": "Function (bPlayInEditorIsSimulate = bIsSimulate ; } bool)",
    "insertText": "GetPlayInEditorIsSimulate()"
  },
  {
    "label": "GetViewportRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResource*)",
    "insertText": "GetViewportRenderTargetTexture()"
  },
  {
    "label": "OnDrawViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrawViewport(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMapCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<TSharedRef<SWidget>>)",
    "insertText": "OnMapCursor(const FCursorReply& CursorReply)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& InGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& InGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& InGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& InGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnTouchFirstMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchFirstMove(const FGeometry& MyGeometry, const FPointerEvent& TouchEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& InGestureEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMotionDetected(const FGeometry& MyGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "OnQueryPopupMethod()",
    "kind": "Method",
    "detail": "Function (FPopupMethodReply)",
    "insertText": "OnQueryPopupMethod()"
  },
  {
    "label": "HandleNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNavigation(const uint32 InUserIndex, TSharedPtr<SWidget> InDestination)"
  },
  {
    "label": "OnQueryShowFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "OnQueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "OnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedPointerInput()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& InGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& InGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& InGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnViewportClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportClosed()"
  },
  {
    "label": "OnRequestWindowClose()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRequestWindowClose()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SWidget>)",
    "insertText": "GetWidget()"
  },
  {
    "label": "OnViewportActivated()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnViewportActivated(const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "OnViewportDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportDeactivated(const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetDisplayColorGamut()",
    "kind": "Method",
    "detail": "Function (} EDisplayColorGamut)",
    "insertText": "GetDisplayColorGamut()"
  },
  {
    "label": "GetDisplayOutputFormat()",
    "kind": "Method",
    "detail": "Function (EDisplayOutputFormat)",
    "insertText": "GetDisplayOutputFormat()"
  },
  {
    "label": "GetSceneHDREnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSceneHDREnabled()"
  },
  {
    "label": "GetViewportDynamicRange()",
    "kind": "Method",
    "detail": "Function (ESlateViewportDynamicRange)",
    "insertText": "GetViewportDynamicRange()"
  },
  {
    "label": "SetViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSize(uint32 NewSizeX,uint32 NewSizeY)"
  },
  {
    "label": "SetFixedViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFixedViewportSize(uint32 NewSizeX, uint32 NewSizeY)"
  },
  {
    "label": "HasFixedSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFixedSize()"
  },
  {
    "label": "FindWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "FindWindow()"
  },
  {
    "label": "IsStereoRenderingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStereoRenderingAllowed()"
  },
  {
    "label": "GetRenderTargetTextureSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetRenderTargetTextureSizeXY()"
  },
  {
    "label": "GetSceneTargetFormat()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "GetSceneTargetFormat()"
  },
  {
    "label": "SetDebugCanvas()",
    "kind": "Method",
    "detail": "Function (ViewportGammaOverride = InGammaOverride ; } ; void)",
    "insertText": "SetDebugCanvas(TSharedPtr<class SDebugCanvas> InDebugCanvas)"
  },
  {
    "label": "PaintDebugCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintDebugCanvas(const FGeometry& AllottedGeometry, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Destroy()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFriendlyName()"
  },
  {
    "label": "ResizeViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeViewport(uint32 NewSizeX,uint32 NewSizeY,EWindowMode::Type NewWindowMode)"
  },
  {
    "label": "ProcessAccumulatedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAccumulatedPointerInput()"
  },
  {
    "label": "UpdateCachedCursorPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedCursorPos(const FGeometry& InGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "UpdateCachedGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedGeometry(const FGeometry& InGeometry)"
  },
  {
    "label": "UpdateModifierKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModifierKeys(const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "ApplyModifierKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyModifierKeys(const FModifierKeysState& InKeysState)"
  },
  {
    "label": "AcquireFocusAndCapture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AcquireFocusAndCapture(FIntPoint MousePosition, EFocusCause FocusCause = EFocusCause::SetDirectly)"
  },
  {
    "label": "IsCurrentlyGameViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentlyGameViewport()"
  },
  {
    "label": "UseSeparateRenderTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseSeparateRenderTarget()"
  },
  {
    "label": "OnWindowBackBufferResourceDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowBackBufferResourceDestroyed(void* Backbuffer)"
  },
  {
    "label": "OnPreResizeWindowBackbuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreResizeWindowBackbuffer(void* Backbuffer)"
  },
  {
    "label": "OnPostResizeWindowBackbuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostResizeWindowBackbuffer(void* Backbuffer)"
  },
  {
    "label": "IsInPermanentCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInPermanentCapture()"
  }
]