[
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_BinaryOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryOperation"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_ACCUMULATE_H # define _LIBCPP___NUMERIC_ACCUMULATE_H # include<__config> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _InputIterator, class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _Tp accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)"
  },
  {
    "label": "accumulate()",
    "kind": "Method",
    "detail": "Function (# else __init = __init +* __first ; # endif return __init ; } template<class _InputIterator,class _Tp,class _BinaryOperation> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _Tp)",
    "insertText": "accumulate(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation __binary_op)"
  },
  {
    "label": "__binary_op()",
    "kind": "Method",
    "detail": "Function (# else __init =)",
    "insertText": "__binary_op(__init, *__first)"
  }
]