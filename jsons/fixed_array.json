[
  {
    "label": "FixedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FixedArray"
  },
  {
    "label": "StorageElementWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StorageElementWrapper"
  },
  {
    "label": "NonEmptyInlinedStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonEmptyInlinedStorage"
  },
  {
    "label": "EmptyInlinedStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmptyInlinedStorage"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Storage"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_FIXED_ARRAY_H_ # define ABSL_CONTAINER_FIXED_ARRAY_H_ # include<algorithm> # include<cassert> # include<cstddef> # include<initializer_list> # include<iterator> # include<limits> # include<memory> # include<new> # include<type_traits> # include \" absl / algorithm / algorithm . h \" # include \" absl / base / config . h \" # include \" absl / base / dynamic_annotations . h \" # include \" absl / base / internal / throw_delegate . h \" # include \" absl / base / macros . h \" # include \" absl / base / optimization . h \" # include \" absl / base / port . h \" # include \" absl / container / internal / compressed_tuple . h \" # include \" absl / memory / memory . h \" namespace absl { ABSL_NAMESPACE_BEGIN auto kFixedArrayUseDefault = static_cast<)",
    "insertText": "size_t(-1)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<T,size_t N = kFixedArrayUseDefault,A = std::allocator<T>> class FixedArray {)",
    "insertText": "static_assert(!std::is_array<T>::value || std::extent<T>::value > 0, \"Arrays with unknown bounds cannot be used with FixedArray.\")"
  },
  {
    "label": "NoexceptCopyable()",
    "kind": "Method",
    "detail": "Function (size_t kInlineBytesDefault = 2 5 6 ; using AllocatorTraits = std::allocator_traits<A> ; template<Iterator> using EnableIfForwardIterator = absl::enable_if_t<std::is_convertible<std::iterator_traits<Iterator>::iterator_category,std::forward_iterator_tag>::value> ; bool)",
    "insertText": "NoexceptCopyable()"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixedArray(const FixedArray& other, const allocator_type& a = allocator_type()) noexcept(NoexceptCopyable()) : FixedArray(other.begin(), other.end(), a)"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FixedArray(FixedArray&& other, const allocator_type& a = allocator_type()) noexcept(NoexceptMovable()) : FixedArray(std::make_move_iterator(other.begin()), std::make_move_iterator(other.end()), a)"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FixedArray(size_type n, const allocator_type& a = allocator_type()) : storage_(n, a)"
  },
  {
    "label": "ConstructRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructRange(storage_.alloc(), storage_.begin(), storage_.end())"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FixedArray(size_type n, const value_type& val, const allocator_type& a = allocator_type()) : storage_(n, a)"
  },
  {
    "label": "ConstructRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructRange(storage_.alloc(), storage_.begin(), storage_.end(), val)"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FixedArray(std::initializer_list<value_type> init_list, const allocator_type& a = allocator_type()) : FixedArray(init_list.begin(), init_list.end(), a)"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (} template<Iterator,EnableIfForwardIterator<Iterator>* = nullptr>)",
    "insertText": "FixedArray(Iterator first, Iterator last, const allocator_type& a = allocator_type()) : storage_(std::distance(first, last), a)"
  },
  {
    "label": "CopyRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRange(storage_.alloc(), storage_.begin(), first, last)"
  },
  {
    "label": "FixedArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FixedArray()"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroy(storage_.alloc(), cur)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator(FixedArray&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FixedArray&)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "size()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "memsize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "memsize()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const_pointer)",
    "insertText": "data()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(size_type i)"
  },
  {
    "label": "ABSL_HARDENING_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_HARDENING_ASSERT(i < size())"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "at(size_type i)"
  },
  {
    "label": "ThrowStdOutOfRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrowStdOutOfRange(\"FixedArray::at failed bounds check\")"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "front()"
  },
  {
    "label": "ABSL_HARDENING_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_HARDENING_ASSERT(!empty())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "back()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fill(const value_type& val)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(begin(), end(), val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FixedArray& lhs, const FixedArray& rhs)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H h, const FixedArray& v)"
  },
  {
    "label": "AsValueType()",
    "kind": "Method",
    "detail": "Function (} private : template<OuterT,InnerT = absl::remove_extent_t<OuterT>,size_t InnerN = std::extent<OuterT>::value> struct StorageElementWrapper { InnerT array [ InnerN ] ; } ; using StorageElement = absl::conditional_t<std::is_array<value_type>::value,StorageElementWrapper<value_type>,value_type> ; pointer)",
    "insertText": "AsValueType(pointer ptr)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(sizeof(StorageElement) == sizeof(value_type), \"\")"
  },
  {
    "label": "AnnotateConstruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AnnotateConstruct(size_type n)"
  },
  {
    "label": "AnnotateDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateDestruct(size_type n)"
  },
  {
    "label": "RedzoneBegin()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_HAVE_ADDRESS_SANITIZER void*)",
    "insertText": "RedzoneBegin()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(StorageElement) char buff_[sizeof(StorageElement[inline_elements])"
  },
  {
    "label": "ABSL_ADDRESS_SANITIZER_REDZONE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ADDRESS_SANITIZER_REDZONE(redzone_end_)"
  },
  {
    "label": "AnnotateDestruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AnnotateDestruct(size_type)"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (} } ; using InlinedStorage = absl::conditional_t<inline_elements = = 0,EmptyInlinedStorage,NonEmptyInlinedStorage> ; class Storage : public InlinedStorage { public :)",
    "insertText": "Storage(size_type n, const allocator_type& a) : size_alloc_(n, a), data_(InitializeData())"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Storage()"
  },
  {
    "label": "AnnotateDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateDestruct(size())"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "deallocate(alloc(), AsValueType(begin()), size())"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (} allocator_type&)",
    "insertText": "alloc()"
  },
  {
    "label": "UsingInlinedStorage()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "UsingInlinedStorage(size_type n)"
  },
  {
    "label": "AnnotateConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateConstruct(size())"
  },
  {
    "label": "StorageElement()",
    "kind": "Method",
    "detail": "Function (} else { return reinterpret_cast<)",
    "insertText": "StorageElement(AllocatorTraits::allocate(alloc(), size()))"
  },
  {
    "label": "AnnotateConstruct()",
    "kind": "Method",
    "detail": "Function (} } container_internal::CompressedTuple<size_type,allocator_type> size_alloc_ ; StorageElement* data_ ; } ; Storage storage_ ; } ; # ifdef ABSL_INTERNAL_NEED_REDUNDANT_CONSTEXPR_DECL template<T,size_t N,A> size_t FixedArray<T,N,A>::kInlineBytesDefault ; template<T,size_t N,A> FixedArray<T,N,A>::size_type FixedArray<T,N,A>::inline_elements ; # endif template<T,size_t N,A> void FixedArray<T,N,A>::)",
    "insertText": "AnnotateConstruct(typename FixedArray<T, N, A>::size_type n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_HAVE_ADDRESS_SANITIZER)",
    "insertText": "if(!n)"
  },
  {
    "label": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER(data(), RedzoneEnd(), RedzoneEnd(), data() + n)"
  },
  {
    "label": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER(RedzoneBegin(), data(), data(), RedzoneBegin())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif static_cast<)",
    "insertText": "void(n)"
  },
  {
    "label": "AnnotateDestruct()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t N,A> void FixedArray<T,N,A>::)",
    "insertText": "AnnotateDestruct(typename FixedArray<T, N, A>::size_type n)"
  },
  {
    "label": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER(data(), RedzoneEnd(), data() + n, RedzoneEnd())"
  },
  {
    "label": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_ANNOTATE_CONTIGUOUS_CONTAINER(RedzoneBegin(), data(), RedzoneBegin(), data())"
  }
]