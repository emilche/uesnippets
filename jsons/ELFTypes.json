[
  {
    "label": "ELFType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELFType"
  },
  {
    "label": "ELFDataTypeTypedefHelperCommon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELFDataTypeTypedefHelperCommon"
  },
  {
    "label": "ELFT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ELFT"
  },
  {
    "label": "ELFDataTypeTypedefHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ELFDataTypeTypedefHelper"
  },
  {
    "label": "Elf_Shdr_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Shdr_Base"
  },
  {
    "label": "Elf_Shdr_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Shdr_Impl"
  },
  {
    "label": "Elf_Sym_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Sym_Base"
  },
  {
    "label": "Elf_Sym_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Sym_Impl"
  },
  {
    "label": "Elf_Versym_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Versym_Impl"
  },
  {
    "label": "Elf_Verdaux_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Verdaux_Impl"
  },
  {
    "label": "Elf_Verdef_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Verdef_Impl"
  },
  {
    "label": "Elf_Verneed_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Verneed_Impl"
  },
  {
    "label": "Elf_Vernaux_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Vernaux_Impl"
  },
  {
    "label": "Elf_Dyn_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Dyn_Base"
  },
  {
    "label": "Elf_Dyn_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Dyn_Impl"
  },
  {
    "label": "Elf_Rel_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Rel_Impl"
  },
  {
    "label": "Elf_Ehdr_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Ehdr_Impl"
  },
  {
    "label": "Elf_Phdr_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Phdr_Impl"
  },
  {
    "label": "Elf_Hash_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Hash_Impl"
  },
  {
    "label": "Elf_Mips_RegInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Mips_RegInfo"
  },
  {
    "label": "Elf_Mips_Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Mips_Options"
  },
  {
    "label": "Elf_Mips_ABIFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elf_Mips_ABIFlags"
  },
  {
    "label": "LLVM_ELF_IMPORT_TYPES()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_OBJECT_ELFTYPES_H # define LLVM_OBJECT_ELFTYPES_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / Object / Error . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ELF . h \" # include \" llvm / Support / Endian . h \" # include \" llvm / Support / ErrorOr . h \" namespace llvm { namespace object { using support::endianness ; template<endianness target_endianness,bool is64Bits> struct ELFType { const endianness TargetEndianness = target_endianness ; const bool Is64Bits = is64Bits ; } ; typedef ELFType<support::little,false> ELF32LE ; typedef ELFType<support::big,false> ELF32BE ; typedef ELFType<support::little,true> ELF64LE ; typedef ELFType<support::big,true> ELF64BE ; template<endianness target_endianness> struct ELFDataTypeTypedefHelperCommon { typedef support::detail::packed_endian_specific_integral<uint16_t,target_endianness,2> Elf_Half ; typedef support::detail::packed_endian_specific_integral<uint32_t,target_endianness,2> Elf_Word ; typedef support::detail::packed_endian_specific_integral<int32_t,target_endianness,2> Elf_Sword ; typedef support::detail::packed_endian_specific_integral<uint64_t,target_endianness,2> Elf_Xword ; typedef support::detail::packed_endian_specific_integral<int64_t,target_endianness,2> Elf_Sxword ; } ; template<class ELFT> struct ELFDataTypeTypedefHelper ; template<endianness TargetEndianness> struct ELFDataTypeTypedefHelper<ELFType<TargetEndianness,false>> : ELFDataTypeTypedefHelperCommon<TargetEndianness> { typedef uint32_t value_type ; typedef support::detail::packed_endian_specific_integral<value_type,TargetEndianness,2> Elf_Addr ; typedef support::detail::packed_endian_specific_integral<value_type,TargetEndianness,2> Elf_Off ; } ; template<endianness TargetEndianness> struct ELFDataTypeTypedefHelper<ELFType<TargetEndianness,true>> : ELFDataTypeTypedefHelperCommon<TargetEndianness> { typedef uint64_t value_type ; typedef support::detail::packed_endian_specific_integral<value_type,TargetEndianness,2> Elf_Addr ; typedef support::detail::packed_endian_specific_integral<value_type,TargetEndianness,2> Elf_Off ; } ; # define)",
    "insertText": "LLVM_ELF_IMPORT_TYPES(E, W)"
  },
  {
    "label": "LLVM_ELF_IMPORT_TYPES_ELFT()",
    "kind": "Method",
    "detail": "Function (\\ typedef ELFDataTypeTypedefHelper<ELFType<E,W>>::Elf_Off Elf_Off ; \\ typedef ELFDataTypeTypedefHelper<ELFType<E,W>>::Elf_Half Elf_Half ; \\ typedef ELFDataTypeTypedefHelper<ELFType<E,W>>::Elf_Word Elf_Word ; \\ typedef \\ ELFDataTypeTypedefHelper<ELFType<E,W>>::Elf_Sword Elf_Sword ; \\ typedef \\ ELFDataTypeTypedefHelper<ELFType<E,W>>::Elf_Xword Elf_Xword ; \\ typedef \\ ELFDataTypeTypedefHelper<ELFType<E,W>>::Elf_Sxword Elf_Sxword ; # define)",
    "insertText": "LLVM_ELF_IMPORT_TYPES_ELFT(ELFT) \\ LLVM_ELF_IMPORT_TYPES(ELFT::TargetEndianness, ELFT::Is64Bits)"
  },
  {
    "label": "LLVM_ELF_IMPORT_TYPES()",
    "kind": "Method",
    "detail": "Function (template<endianness TargetEndianness> struct Elf_Shdr_Base<ELFType<TargetEndianness,false>> {)",
    "insertText": "LLVM_ELF_IMPORT_TYPES(TargetEndianness, false)"
  },
  {
    "label": "LLVM_ELF_IMPORT_TYPES()",
    "kind": "Method",
    "detail": "Function (Elf_Word sh_type ; Elf_Word sh_flags ; Elf_Addr sh_addr ; Elf_Off sh_offset ; Elf_Word sh_size ; Elf_Word sh_link ; Elf_Word sh_info ; Elf_Word sh_addralign ; Elf_Word sh_entsize ; } ; template<endianness TargetEndianness> struct Elf_Shdr_Base<ELFType<TargetEndianness,true>> {)",
    "insertText": "LLVM_ELF_IMPORT_TYPES(TargetEndianness, true)"
  },
  {
    "label": "getEntityCount()",
    "kind": "Method",
    "detail": "Function (Elf_Word sh_type ; Elf_Xword sh_flags ; Elf_Addr sh_addr ; Elf_Off sh_offset ; Elf_Xword sh_size ; Elf_Word sh_link ; Elf_Word sh_info ; Elf_Xword sh_addralign ; Elf_Xword sh_entsize ; } ; template<class ELFT> struct Elf_Shdr_Impl : Elf_Shdr_Base<ELFT> { using Elf_Shdr_Base<ELFT>::sh_entsize ; using Elf_Shdr_Base<ELFT>::sh_size ; unsigned)",
    "insertText": "getEntityCount()"
  },
  {
    "label": "getBinding()",
    "kind": "Method",
    "detail": "Function (unsigned char st_info ; unsigned char st_other ; Elf_Half st_shndx ; Elf_Addr st_value ; Elf_Xword st_size ; } ; template<class ELFT> struct Elf_Sym_Impl : Elf_Sym_Base<ELFT> { using Elf_Sym_Base<ELFT>::st_info ; using Elf_Sym_Base<ELFT>::st_shndx ; using Elf_Sym_Base<ELFT>::st_other ; using Elf_Sym_Base<ELFT>::st_value ; unsigned char)",
    "insertText": "getBinding()"
  },
  {
    "label": "setBindingAndType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBindingAndType(b, getType())"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setType(unsigned char t)"
  },
  {
    "label": "setBindingAndType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBindingAndType(getBinding(), t)"
  },
  {
    "label": "setBindingAndType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBindingAndType(unsigned char b, unsigned char t)"
  },
  {
    "label": "st_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "st_info(b << 4) + (t & 0x0f)"
  },
  {
    "label": "getVisibility()",
    "kind": "Method",
    "detail": "Function (} unsigned char)",
    "insertText": "getVisibility()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(v < 4 && \"Invalid value for visibility\")"
  },
  {
    "label": "st_other()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "st_other(st_other & ~0x3)"
  },
  {
    "label": "isAbsolute()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAbsolute()"
  },
  {
    "label": "isDefined()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDefined()"
  },
  {
    "label": "isProcessorSpecific()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isProcessorSpecific()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} ErrorOr<StringRef>)",
    "insertText": "getName(StringRef StrTab)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t Offset = this -> st_name ;)",
    "insertText": "if(Offset >= StrTab.size())"
  },
  {
    "label": "LLVM_ELF_IMPORT_TYPES_ELFT()",
    "kind": "Method",
    "detail": "Function (} template<class ELFT> struct Elf_Versym_Impl {)",
    "insertText": "LLVM_ELF_IMPORT_TYPES_ELFT(ELFT)"
  },
  {
    "label": "getAux()",
    "kind": "Method",
    "detail": "Function (Elf_Half vd_version ; Elf_Half vd_flags ; Elf_Half vd_ndx ; Elf_Half vd_cnt ; Elf_Word vd_hash ; Elf_Word vd_aux ; Elf_Word vd_next ; const Elf_Verdaux*)",
    "insertText": "getAux()"
  },
  {
    "label": "getTag()",
    "kind": "Method",
    "detail": "Function (union { Elf_Xword d_val ; Elf_Addr d_ptr ; } d_un ; } ; template<class ELFT> struct Elf_Dyn_Impl : Elf_Dyn_Base<ELFT> { using Elf_Dyn_Base<ELFT>::d_tag ; using Elf_Dyn_Base<ELFT>::d_un ; int64_t)",
    "insertText": "getTag()"
  },
  {
    "label": "getRInfo()",
    "kind": "Method",
    "detail": "Function (Elf_Word r_info ; uint32_t)",
    "insertText": "getRInfo(bool isMips64EL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isMips64EL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!IsMips64EL)"
  },
  {
    "label": "getSymbol()",
    "kind": "Method",
    "detail": "Function (r_info = R ; } uint32_t)",
    "insertText": "getSymbol(bool isMips64EL)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} unsigned char)",
    "insertText": "getType(bool isMips64EL)"
  },
  {
    "label": "setSymbol()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSymbol(uint32_t s, bool IsMips64EL)"
  },
  {
    "label": "setSymbolAndType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSymbolAndType(s, getType(), IsMips64EL)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setType(unsigned char t, bool IsMips64EL)"
  },
  {
    "label": "setSymbolAndType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSymbolAndType(getSymbol(), t, IsMips64EL)"
  },
  {
    "label": "setSymbolAndType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSymbolAndType(uint32_t s, unsigned char t, bool IsMips64EL)"
  },
  {
    "label": "setRInfo()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setRInfo((s << 8) + t, IsMips64EL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t t = r_info ;)",
    "insertText": "if(!isMips64EL)"
  },
  {
    "label": "setRInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setRInfo(uint64_t R, bool IsMips64EL)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setType(uint32_t t, bool IsMips64EL)"
  },
  {
    "label": "setSymbolAndType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSymbolAndType(uint32_t s, uint32_t t, bool IsMips64EL)"
  },
  {
    "label": "setRInfo()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setRInfo(((uint64_t)s << 32) + (t & 0xffffffffL), IsMips64EL)"
  },
  {
    "label": "checkMagic()",
    "kind": "Method",
    "detail": "Function (Elf_Half e_type ; Elf_Half e_machine ; Elf_Word e_version ; Elf_Addr e_entry ; Elf_Off e_phoff ; Elf_Off e_shoff ; Elf_Word e_flags ; Elf_Half e_ehsize ; Elf_Half e_phentsize ; Elf_Half e_phnum ; Elf_Half e_shentsize ; Elf_Half e_shnum ; Elf_Half e_shstrndx ; bool)",
    "insertText": "checkMagic()"
  },
  {
    "label": "getFileClass()",
    "kind": "Method",
    "detail": "Function (} unsigned char)",
    "insertText": "getFileClass()"
  },
  {
    "label": "buckets()",
    "kind": "Method",
    "detail": "Function (Elf_Word nchain ; ArrayRef<Elf_Word>)",
    "insertText": "buckets()"
  },
  {
    "label": "chains()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<Elf_Word>)",
    "insertText": "chains()"
  },
  {
    "label": "getRegInfo()",
    "kind": "Method",
    "detail": "Function (uint8_t size ; Elf_Half section ; Elf_Word info ; const Elf_Mips_RegInfo<ELFT>&)",
    "insertText": "getRegInfo()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(kind == llvm::ELF::ODK_REGINFO)"
  }
]