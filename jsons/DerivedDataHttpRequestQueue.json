[
  {
    "label": "TUniqueFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueFunction"
  },
  {
    "label": "IRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRequestOwner"
  },
  {
    "label": "FHttpRequestQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpRequestQueue"
  },
  {
    "label": "FQueueRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueueRequest"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / LockFreeList . h \" # include \" Http / HttpClient . h \" template<FuncType> class TUniqueFunction ; namespace UE::DerivedData { class IRequestOwner ; } namespace UE::DerivedData { class FHttpRequestQueue { public : using FOnRequest = TUniqueFunction<)",
    "insertText": "void(THttpUniquePtr<IHttpRequest>&& Request)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IHttpConnectionPool& ConnectionPool, const FHttpClientParams& ClientParams)"
  },
  {
    "label": "CreateRequestAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRequestAsync(IRequestOwner& Owner, const FHttpRequestParams& Params, FOnRequest&& OnRequest)"
  },
  {
    "label": "TryGiveRequestToQueue()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryGiveRequestToQueue(THttpUniquePtr<IHttpRequest>&& Request)"
  }
]