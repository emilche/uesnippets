[
  {
    "label": "Logging",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Logging"
  },
  {
    "label": "Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Context"
  },
  {
    "label": "State",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "State"
  },
  {
    "label": "ThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadState"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_TEST_BWE_TEST_LOGGING_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_TEST_BWE_TEST_LOGGING_H_ # ifndef BWE_TEST_LOGGING_COMPILE_TIME_ENABLE # define BWE_TEST_LOGGING_COMPILE_TIME_ENABLE 0 # endif #)",
    "insertText": "if(BWE_TEST_LOGGING_COMPILE_TIME_ENABLE) #define BWE_TEST_LOGGING_GLOBAL_CONTEXT(name) #define BWE_TEST_LOGGING_GLOBAL_ENABLE(enabled) #define BWE_TEST_LOGGING_CONTEXT(name) #define BWE_TEST_LOGGING_ENABLE(enabled) #define BWE_TEST_LOGGING_TIME(time) #define BWE_TEST_LOGGING_LOG1(name, format, _1) #define BWE_TEST_LOGGING_LOG2(name, format, _1, _2) #define BWE_TEST_LOGGING_LOG3(name, format, _1, _2, _3) #define BWE_TEST_LOGGING_LOG4(name, format, _1, _2, _3, _4) #define BWE_TEST_LOGGING_LOG5(name, format, _1, _2, _3, _4, _5) #define BWE_TEST_LOGGING_PLOT(figure, name, time, value) #define BWE_TEST_LOGGING_PLOT_WITH_NAME(figure, name, time, value, alg_name) #define BWE_TEST_LOGGING_PLOT_WITH_SSRC(figure, name, time, value, ssrc) #define BWE_TEST_LOGGING_PLOT_WITH_NAME_AND_SSRC(figure, name, time, value, \\ ssrc, alg_name) #define BWE_TEST_LOGGING_BAR(figure, name, value, flow_id) #define BWE_TEST_LOGGING_ERRORBAR(figure, name, value, ylow, yhigh, \\ error_title, flow_id) #define BWE_TEST_LOGGING_LIMITERRORBAR( \\ figure, name, value, ylow, yhigh, error_title, ymax, limit_title, flow_id) #define BWE_TEST_LOGGING_BASELINEBAR(figure, name, value, flow_id) #define BWE_TEST_LOGGING_LABEL(figure, x_label, y_label, num_flows) #else #include <map> #include <memory> #include <stack> #include <string> #include \"rtc_base/synchronization/mutex.h\" #define BWE_TEST_LOGGING_GLOBAL_CONTEXT(name)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->SetGlobalContext(name)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_GLOBAL_ENABLE(enabled)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->SetGlobalEnable(enabled)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define __BWE_TEST_LOGGING_CONTEXT_NAME(ctx, line) ctx##line #define __BWE_TEST_LOGGING_CONTEXT_DECLARE(ctx, line, name, time, enabled) \\ webrtc::testing::bwe::Logging::Context __BWE_TEST_LOGGING_CONTEXT_NAME( \\ ctx, line)(name, time, enabled) #define BWE_TEST_LOGGING_CONTEXT(name) \\ __BWE_TEST_LOGGING_CONTEXT_DECLARE(__bwe_log_, __LINE__, name, -1, true) #define BWE_TEST_LOGGING_ENABLE(enabled) \\ __BWE_TEST_LOGGING_CONTEXT_DECLARE(__bwe_log_, __LINE__, \"\", -1, \\ static_cast<bool>(enabled)) #define BWE_TEST_LOGGING_TIME(time) \\ __BWE_TEST_LOGGING_CONTEXT_DECLARE(__bwe_log_, __LINE__, \"\", \\ static_cast<int64_t>(time), true) #define BWE_TEST_LOGGING_LOG1(name, format, _1)"
  },
  {
    "label": "BWE_TEST_LOGGING_CONTEXT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "BWE_TEST_LOGGING_CONTEXT(name)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Log(format, _1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_LOG2(name, format, _1, _2)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Log(format, _1, _2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_LOG3(name, format, _1, _2, _3)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Log(format, _1, _2, _3)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_LOG4(name, format, _1, _2, _3, _4)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Log(format, _1, _2, _3, _4)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_LOG5(name, format, _1, _2, _3, _4, _5)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Log(format, _1, _2, _3, _4, \\ _5)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_PLOT(figure, name, time, value)"
  },
  {
    "label": "__BWE_TEST_LOGGING_CONTEXT_DECLARE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__BWE_TEST_LOGGING_CONTEXT_DECLARE(__bwe_log_, __PLOT__, name, \\ static_cast<int64_t>(time), true)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Plot(figure, name, value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_PLOT_WITH_NAME(figure, name, time, value, alg_name)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Plot(figure, name, value, \\ alg_name)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_PLOT_WITH_SSRC(figure, name, time, value, ssrc)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Plot(figure, name, value, \\ ssrc)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_PLOT_WITH_NAME_AND_SSRC(figure, name, time, value, \\ ssrc, alg_name)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->Plot(figure, name, value, \\ ssrc, alg_name)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_BAR(figure, name, value, flow_id)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->PlotBar(figure, name, value, \\ flow_id)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_BASELINEBAR(figure, name, value, flow_id)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->PlotBaselineBar( \\ figure, name, value, flow_id)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_ERRORBAR(figure, name, value, ylow, yhigh, title, \\ flow_id)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->PlotErrorBar( \\ figure, name, value, ylow, yhigh, title, flow_id)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_LIMITERRORBAR( \\ figure, name, value, ylow, yhigh, error_title, ymax, limit_title, flow_id)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->PlotLimitErrorBar( \\ figure, name, value, ylow, yhigh, error_title, ymax, limit_title, \\ flow_id)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define BWE_TEST_LOGGING_LABEL(figure, title, y_label, num_flows)"
  },
  {
    "label": "BWE_TEST_LOGGING_CONTEXT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "BWE_TEST_LOGGING_CONTEXT(title)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (\\ webrtc::testing::bwe::)",
    "insertText": "GetInstance()->PlotLabel( \\ figure, title, y_label, num_flows)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (namespace testing { namespace bwe { class Logging { public : class Context { public :)",
    "insertText": "Context(uint32_t name, int64_t timestamp_ms, bool enabled)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Context(const std::string& name, int64_t timestamp_ms, bool enabled)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Context(const char* name, int64_t timestamp_ms, bool enabled)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Context()"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Context(const Context&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Context&)",
    "insertText": "operator(const Context&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} ; Logging*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "SetGlobalContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalContext(uint32_t name)"
  },
  {
    "label": "SetGlobalContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalContext(const std::string& name)"
  },
  {
    "label": "SetGlobalContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalContext(const char* name)"
  },
  {
    "label": "SetGlobalEnable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalEnable(bool enabled)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) __attribute__((__format__(__printf__, 2, 3))) #endif void Log(const char format[], ...)"
  },
  {
    "label": "Plot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plot(int figure, const std::string& name, double value)"
  },
  {
    "label": "Plot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plot(int figure, const std::string& name, double value, const std::string& alg_name)"
  },
  {
    "label": "Plot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plot(int figure, const std::string& name, double value, uint32_t ssrc)"
  },
  {
    "label": "Plot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Plot(int figure, const std::string& name, double value, uint32_t ssrc, const std::string& alg_name)"
  },
  {
    "label": "PlotBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlotBar(int figure, const std::string& name, double value, int flow_id)"
  },
  {
    "label": "PlotBaselineBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlotBaselineBar(int figure, const std::string& name, double value, int flow_id)"
  },
  {
    "label": "PlotErrorBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlotErrorBar(int figure, const std::string& name, double value, double ylow, double yhigh, const std::string& error_title, int flow_id)"
  },
  {
    "label": "PlotLimitErrorBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlotLimitErrorBar(int figure, const std::string& name, double value, double ylow, double yhigh, const std::string& error_title, double ymax, const std::string& limit_title, int flow_id)"
  },
  {
    "label": "PlotLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlotLabel(int figure, const std::string& title, const std::string& y_label, int num_flows)"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (private : struct State {)",
    "insertText": "State()"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "State(const std::string& new_tag, int64_t timestamp_ms, bool enabled)"
  },
  {
    "label": "MergePrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergePrevious(const State& previous)"
  },
  {
    "label": "ThreadState()",
    "kind": "Method",
    "detail": "Function (std::string tag ; int64_t timestamp_ms ; bool enabled ; } ; struct ThreadState {)",
    "insertText": "ThreadState()"
  },
  {
    "label": "Logging()",
    "kind": "Method",
    "detail": "Function (State global_state ; std::stack<State> stack ; } ; typedef std::map<uint32_t,ThreadState> ThreadMap ;)",
    "insertText": "Logging()"
  },
  {
    "label": "Logging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Logging(const Logging&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Logging&)",
    "insertText": "operator(const Logging&)"
  },
  {
    "label": "PushState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushState(const std::string& append_to_tag, int64_t timestamp_ms, bool enabled)"
  },
  {
    "label": "PopState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopState()"
  }
]