[
  {
    "label": "FForceFeedbackValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFeedbackValues"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputDeviceProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceProperty"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "IHapticDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHapticDevice"
  },
  {
    "label": "IInputDevice()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" struct FForceFeedbackValues ; enum class FForceFeedbackChannelType ; struct FInputDeviceProperty ; class IInputDevice { public : ~)",
    "insertText": "IInputDevice()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageHandler(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "SetChannelValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value)"
  },
  {
    "label": "SetChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelValues(int32 ControllerId, const FForceFeedbackValues &values)"
  },
  {
    "label": "SupportsForceFeedback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsForceFeedback(int32 ControllerId)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  },
  {
    "label": "SetDeviceProperty()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetDeviceProperty(int32 ControllerId, const FInputDeviceProperty* Property)"
  },
  {
    "label": "GetHapticDevice()",
    "kind": "Method",
    "detail": "Function (} class IHapticDevice*)",
    "insertText": "GetHapticDevice()"
  }
]