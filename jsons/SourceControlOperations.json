[
  {
    "label": "FConnect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConnect"
  },
  {
    "label": "FCheckIn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCheckIn"
  },
  {
    "label": "FCheckOut",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCheckOut"
  },
  {
    "label": "FGetFileList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetFileList"
  },
  {
    "label": "EGetFileListMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGetFileListMethod"
  },
  {
    "label": "FMarkForAdd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarkForAdd"
  },
  {
    "label": "FDelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelete"
  },
  {
    "label": "FRevert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRevert"
  },
  {
    "label": "FSyncPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSyncPreview"
  },
  {
    "label": "FSync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSync"
  },
  {
    "label": "FUpdateStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdateStatus"
  },
  {
    "label": "FCopy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FResolve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResolve"
  },
  {
    "label": "FGetPendingChangelists",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetPendingChangelists"
  },
  {
    "label": "FGetSubmittedChangelists",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetSubmittedChangelists"
  },
  {
    "label": "FGetChangelistDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetChangelistDetails"
  },
  {
    "label": "FUpdatePendingChangelistsStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdatePendingChangelistsStatus"
  },
  {
    "label": "FNewChangelist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNewChangelist"
  },
  {
    "label": "FDeleteChangelist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeleteChangelist"
  },
  {
    "label": "FEditChangelist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditChangelist"
  },
  {
    "label": "FRevertUnchanged",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRevertUnchanged"
  },
  {
    "label": "FMoveToChangelist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMoveToChangelist"
  },
  {
    "label": "FShelve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShelve"
  },
  {
    "label": "FUnshelve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnshelve"
  },
  {
    "label": "FDeleteShelved",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeleteShelved"
  },
  {
    "label": "FDownloadFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDownloadFile"
  },
  {
    "label": "FCreateWorkspace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCreateWorkspace"
  },
  {
    "label": "FDeleteWorkspace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeleteWorkspace"
  },
  {
    "label": "FGetFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetFile"
  },
  {
    "label": "FWhere",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWhere"
  },
  {
    "label": "FileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileInfo"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" ISourceControlChangelist . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Memory / SharedBuffer . h \" # include \" SourceControlOperationBase . h \" # include \" SourceControlPreferences . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # define LOCTEXT_NAMESPACE \" SourceControl \" class FConnect : public FSourceControlOperationBase { public : FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetPassword()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetPassword()"
  },
  {
    "label": "GetErrorText()",
    "kind": "Method",
    "detail": "Function (Password = InPassword ; } const FText&)",
    "insertText": "GetErrorText()"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDescription(const FText& InDescription)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (Description = InDescription ; } const FText&)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetSuccessMessage()",
    "kind": "Method",
    "detail": "Function (SuccessMessage = InSuccessMessage ; } const FText&)",
    "insertText": "GetSuccessMessage()"
  },
  {
    "label": "GetKeepCheckedOut()",
    "kind": "Method",
    "detail": "Function (bKeepCheckedOut = bInKeepCheckedOut ; } bool)",
    "insertText": "GetKeepCheckedOut()"
  },
  {
    "label": "SetIncludeDeleted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIncludeDeleted(const bool bInIncludeDeleted)"
  },
  {
    "label": "GetIncludeDeleted()",
    "kind": "Method",
    "detail": "Function (bIncludeDeleted = bInIncludeDeleted ; } bool)",
    "insertText": "GetIncludeDeleted()"
  },
  {
    "label": "ShouldBeQuiet()",
    "kind": "Method",
    "detail": "Function (bForceQuiet = bInQuiet ; } bool)",
    "insertText": "ShouldBeQuiet()"
  },
  {
    "label": "GetMethodUsed()",
    "kind": "Method",
    "detail": "Function (MethodUsed = InMethodUsed ; } EGetFileListMethod)",
    "insertText": "GetMethodUsed()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FilesList =)",
    "insertText": "MoveTemp(InFilesList)"
  },
  {
    "label": "GetSearchPatterns()",
    "kind": "Method",
    "detail": "Function (} const TArray<FString>&)",
    "insertText": "GetSearchPatterns()"
  },
  {
    "label": "SetSoftRevert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSoftRevert(const bool bInSoftRevert)"
  },
  {
    "label": "IsSoftRevert()",
    "kind": "Method",
    "detail": "Function (bIsSoftRevert = bInSoftRevert ; } bool)",
    "insertText": "IsSoftRevert()"
  },
  {
    "label": "IsRevertAll()",
    "kind": "Method",
    "detail": "Function (bIsRevertAll = bInRevertAll ; } bool)",
    "insertText": "IsRevertAll()"
  },
  {
    "label": "GetDeletedFiles()",
    "kind": "Method",
    "detail": "Function (} const TArray<FString>&)",
    "insertText": "GetDeletedFiles()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DeletedFiles .)",
    "insertText": "Add(InDeletedFile)"
  },
  {
    "label": "SetRevision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRevision(const FString& InRevision)"
  },
  {
    "label": "GetRevision()",
    "kind": "Method",
    "detail": "Function (Revision = InRevision ; } const FString&)",
    "insertText": "GetRevision()"
  },
  {
    "label": "IsHeadRevisionFlagSet()",
    "kind": "Method",
    "detail": "Function (bHeadRevision = bInHeadRevision ; } bool)",
    "insertText": "IsHeadRevisionFlagSet()"
  },
  {
    "label": "GetTransferSize()",
    "kind": "Method",
    "detail": "Function (TransferSize = InTransferSize ; } int64)",
    "insertText": "GetTransferSize()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AffectedFiles =)",
    "insertText": "MoveTemp(InAffectedFiles)"
  },
  {
    "label": "GetAffectedFiles()",
    "kind": "Method",
    "detail": "Function (} const TArray<FString>&)",
    "insertText": "GetAffectedFiles()"
  },
  {
    "label": "SetRevision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevision(FString::Printf(TEXT(\"%d\"), InRevisionNumber))"
  },
  {
    "label": "IsForced()",
    "kind": "Method",
    "detail": "Function (bForce = bInForce ; } bool)",
    "insertText": "IsForced()"
  },
  {
    "label": "IsLastSyncedFlagSet()",
    "kind": "Method",
    "detail": "Function (bLastSynced = bInLastSynced ; } bool)",
    "insertText": "IsLastSyncedFlagSet()"
  },
  {
    "label": "SetUpdateHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUpdateHistory(bool bInUpdateHistory)"
  },
  {
    "label": "SetGetOpenedOnly()",
    "kind": "Method",
    "detail": "Function (bUpdateHistory = bInUpdateHistory ; } void)",
    "insertText": "SetGetOpenedOnly(bool bInGetOpenedOnly)"
  },
  {
    "label": "SetUpdateModifiedState()",
    "kind": "Method",
    "detail": "Function (bGetOpenedOnly = bInGetOpenedOnly ; } void)",
    "insertText": "SetUpdateModifiedState(bool bInUpdateModifiedState)"
  },
  {
    "label": "SetUpdateModifiedStateToLocalRevision()",
    "kind": "Method",
    "detail": "Function (bUpdateModifiedState = bInUpdateModifiedState ; } void)",
    "insertText": "SetUpdateModifiedStateToLocalRevision(bool bInUpdateModifiedStateToLocalRevision)"
  },
  {
    "label": "SetCheckingAllFiles()",
    "kind": "Method",
    "detail": "Function (bUpdateModifiedStateToLocalRevision = bInUpdateModifiedStateToLocalRevision ; } void)",
    "insertText": "SetCheckingAllFiles(bool bInCheckingAllFiles)"
  },
  {
    "label": "SetQuiet()",
    "kind": "Method",
    "detail": "Function (bCheckingAllFiles = bInCheckingAllFiles ; } void)",
    "insertText": "SetQuiet(bool bInQuiet)"
  },
  {
    "label": "SetRequireDirPathEndWithSeparator()",
    "kind": "Method",
    "detail": "Function (bForceQuiet = bInQuiet ; } void)",
    "insertText": "SetRequireDirPathEndWithSeparator(bool bFlag)"
  },
  {
    "label": "SetForceUpdate()",
    "kind": "Method",
    "detail": "Function (bSetRequireDirPathEndWithSeparator = bFlag ; } void)",
    "insertText": "SetForceUpdate(const bool bInForceUpdate)"
  },
  {
    "label": "ShouldUpdateHistory()",
    "kind": "Method",
    "detail": "Function (bForceUpdate = bInForceUpdate ; } bool)",
    "insertText": "ShouldUpdateHistory()"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDestination(const FString& InDestination)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (Destination = InDestination ; } void)",
    "insertText": "SetDestination(FString&& InDestination)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Destination =)",
    "insertText": "MoveTemp(InDestination)"
  },
  {
    "label": "GetDestination()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetDestination()"
  },
  {
    "label": "SetDateFromFilter()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetDateFromFilter(const FDateTime& InDateFrom)"
  },
  {
    "label": "SetDateToFilter()",
    "kind": "Method",
    "detail": "Function (DateFrom = InDateFrom ; } void)",
    "insertText": "SetDateToFilter(const FDateTime& InDateTo)"
  },
  {
    "label": "SetOwnedFilter()",
    "kind": "Method",
    "detail": "Function (DateTo = InDateTo ; } void)",
    "insertText": "SetOwnedFilter(bool InOwned)"
  },
  {
    "label": "SetPaginationLimit()",
    "kind": "Method",
    "detail": "Function (Owned = InOwned ; } void)",
    "insertText": "SetPaginationLimit(int32 InLimit)"
  },
  {
    "label": "SetPaginationOffset()",
    "kind": "Method",
    "detail": "Function (PaginationLimit = InLimit ; } } void)",
    "insertText": "SetPaginationOffset(int32 InOffset)"
  },
  {
    "label": "ShouldFilterByDateFrom()",
    "kind": "Method",
    "detail": "Function (PaginationOffset = InOffset ; } } bool)",
    "insertText": "ShouldFilterByDateFrom(FDateTime& OutDateFrom)"
  },
  {
    "label": "ShouldFilterByDateTo()",
    "kind": "Method",
    "detail": "Function (OutDateFrom = DateFrom ; return true ; } return false ; } bool)",
    "insertText": "ShouldFilterByDateTo(FDateTime& OutDateTo)"
  },
  {
    "label": "ShouldFilterByOwned()",
    "kind": "Method",
    "detail": "Function (OutDateTo = DateTo ; return true ; } return false ; } bool)",
    "insertText": "ShouldFilterByOwned()"
  },
  {
    "label": "ShouldUsePaginationOffset()",
    "kind": "Method",
    "detail": "Function (OutPaginationLimit = PaginationLimit ; return true ; } return false ; } bool)",
    "insertText": "ShouldUsePaginationOffset(int32& OutPaginationOffset)"
  },
  {
    "label": "GetSubmittedChangelists()",
    "kind": "Method",
    "detail": "Function (OutPaginationOffset = PaginationOffset ; return true ; } return false ; } public : const TArray<FSourceControlChangelistRef>&)",
    "insertText": "GetSubmittedChangelists()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Changelists .)",
    "insertText": "Add(Changelist)"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (} private : FDateTime DateFrom =)",
    "insertText": "MinValue()"
  },
  {
    "label": "FGetChangelistDetails()",
    "kind": "Method",
    "detail": "Function (bool Owned = false ; int32 PaginationLimit = - 1 ; int32 PaginationOffset = - 1 ; TArray<FSourceControlChangelistRef> Changelists ; } ; class FGetChangelistDetails : public FSourceControlOperationBase { public :)",
    "insertText": "FGetChangelistDetails()"
  },
  {
    "label": "FGetChangelistDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGetChangelistDetails(FString&& InChangelistNumber) : ChangelistNumber(MoveTemp(InChangelistNumber))"
  },
  {
    "label": "FGetChangelistDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGetChangelistDetails(FStringView InChangelistNumber) : ChangelistNumber(InChangelistNumber)"
  },
  {
    "label": "GetChangelistNumber()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetChangelistNumber()"
  },
  {
    "label": "SetChangelistDetails()",
    "kind": "Method",
    "detail": "Function (ChangelistNumber = InChangelistNumber ; } void)",
    "insertText": "SetChangelistDetails(TArray<TMap<FString, FString>>&& InChangelistDetails)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OutChangelistDetails =)",
    "insertText": "MoveTemp(InChangelistDetails)"
  },
  {
    "label": "SetUpdateFilesStates()",
    "kind": "Method",
    "detail": "Function (} private : FString ChangelistNumber ; TArray<TMap<FString,FString>> OutChangelistDetails ; } ; class FUpdatePendingChangelistsStatus : public FSourceControlOperationBase { public : void)",
    "insertText": "SetUpdateFilesStates(bool bInUpdateFilesStates)"
  },
  {
    "label": "ShouldUpdateFilesStates()",
    "kind": "Method",
    "detail": "Function (bUpdateFilesStates = bInUpdateFilesStates ; } bool)",
    "insertText": "ShouldUpdateFilesStates()"
  },
  {
    "label": "ShouldUpdateShelvedFilesStates()",
    "kind": "Method",
    "detail": "Function (bUpdateShelvedFilesStates = bInUpdateShelvedFilesStates ; } bool)",
    "insertText": "ShouldUpdateShelvedFilesStates()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bUpdateAllChangelists = bInUpdateAllChangelists ; ChangelistsToUpdate .)",
    "insertText": "Empty()"
  },
  {
    "label": "ShouldUpdateAllChangelists()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUpdateAllChangelists()"
  },
  {
    "label": "SetChangelistsToUpdate()",
    "kind": "Method",
    "detail": "Function (ChangelistsToUpdate = InChangelistsToUpdate ; bUpdateAllChangelists = false ; } void)",
    "insertText": "SetChangelistsToUpdate(const TArrayView<FSourceControlChangelistRef>& InChangelistsToUpdate)"
  },
  {
    "label": "GetChangelistsToUpdate()",
    "kind": "Method",
    "detail": "Function (ChangelistsToUpdate = InChangelistsToUpdate ; bUpdateAllChangelists = false ; } const TArray<FSourceControlChangelistRef>&)",
    "insertText": "GetChangelistsToUpdate()"
  },
  {
    "label": "GetNewChangelist()",
    "kind": "Method",
    "detail": "Function (NewChangelist = InNewChangelist ; } const FSourceControlChangelistPtr&)",
    "insertText": "GetNewChangelist()"
  },
  {
    "label": "FDownloadFile()",
    "kind": "Method",
    "detail": "Function (} } ; class FDownloadFile : public FSourceControlOperationBase { public : enum class EVerbosity { None,Full } ;)",
    "insertText": "FDownloadFile()"
  },
  {
    "label": "FDownloadFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDownloadFile(EVerbosity InVerbosity) : Verbosity(InVerbosity)"
  },
  {
    "label": "CanBeCalledFromBackgroundThreads()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeCalledFromBackgroundThreads()"
  },
  {
    "label": "GetTargetDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTargetDirectory()"
  },
  {
    "label": "ShouldLogToStdOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLogToStdOutput()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FileDataMap .)",
    "insertText": "Add(Filename, FileData)"
  },
  {
    "label": "__Internal_AddFileData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__Internal_AddFileData(Filename, FileData)"
  },
  {
    "label": "FCreateWorkspace()",
    "kind": "Method",
    "detail": "Function (} private : EVerbosity Verbosity = EVerbosity::Full ; FString TargetDirectory ; TMap<FString,FSharedBuffer> FileDataMap ; } ; class FCreateWorkspace : public FSourceControlOperationBase { public : enum class EType { Writeable = 0,ReadOnly,Partitioned } ; using FClientViewMapping = TPair<FString,FString> ;)",
    "insertText": "FCreateWorkspace()"
  },
  {
    "label": "FCreateWorkspace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCreateWorkspace(FStringView WorkspaceName, FStringView WorkspaceRoot)"
  },
  {
    "label": "SetDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDescription(FStringView Desciption)"
  },
  {
    "label": "SetStream()",
    "kind": "Method",
    "detail": "Function (WorkspaceDescription = Desciption ; } void)",
    "insertText": "SetStream(FStringView Stream)"
  },
  {
    "label": "AddNativeClientViewMapping()",
    "kind": "Method",
    "detail": "Function (WorkspaceStream = Stream ; } void)",
    "insertText": "AddNativeClientViewMapping(FStringView DepotPath, FStringView ClientPath)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ClientView .)",
    "insertText": "Emplace(DepotPath, ClientPath)"
  },
  {
    "label": "ClearClientViewMappings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearClientViewMappings()"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetType(EType InType)"
  },
  {
    "label": "GetWorkspaceName()",
    "kind": "Method",
    "detail": "Function (Type = InType ; } const FString&)",
    "insertText": "GetWorkspaceName()"
  },
  {
    "label": "FDeleteWorkspace()",
    "kind": "Method",
    "detail": "Function (} protected : FString WorkspaceName ; FString WorkspaceRoot ; FString WorkspaceDescription ; FString WorkspaceStream ; EType Type = EType::Writeable ; TArray<FClientViewMapping> ClientView ; } ; class FDeleteWorkspace : public FSourceControlOperationBase { public :)",
    "insertText": "FDeleteWorkspace()"
  },
  {
    "label": "FDeleteWorkspace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDeleteWorkspace(FStringView InWorkspaceName) : WorkspaceName(InWorkspaceName)"
  },
  {
    "label": "FGetFile()",
    "kind": "Method",
    "detail": "Function (} protected : FString WorkspaceName ; } ; class FGetFile : public FSourceControlOperationBase { public :)",
    "insertText": "FGetFile(const FString& InChangelistNumber, const FString& InRevisionNumber, const FString& InDepotFilePath, bool bInIsShelve = false) : ChangelistNumber(InChangelistNumber) , RevisionNumber(InRevisionNumber) , DepotFilePath(InDepotFilePath) , bIsShelve(bInIsShelve)"
  },
  {
    "label": "SetFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFiles(TArray<FileInfo>&& InFiles)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Files =)",
    "insertText": "MoveTemp(InFiles)"
  },
  {
    "label": "GetFiles()",
    "kind": "Method",
    "detail": "Function (} const TArray<FileInfo>&)",
    "insertText": "GetFiles()"
  }
]