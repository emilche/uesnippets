[
  {
    "label": "FPerSolverFieldSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerSolverFieldSystem"
  },
  {
    "label": "FieldParameterUpdateCallback()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Field / FieldSystem . h \" # include \" Field / FieldSystemTypes . h \" # include \" Chaos / PBDPositionConstraints . h \" # include \" Chaos / Defines . h \" class FPerSolverFieldSystem { public : void)",
    "insertText": "FieldParameterUpdateCallback(Chaos::FPBDRigidsSolver* InSolver, Chaos::FPBDPositionConstraints& PositionTarget, TMap<int32, int32>& TargetedParticles)"
  },
  {
    "label": "FieldForcesUpdateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldForcesUpdateCallback(Chaos::FPBDRigidsSolver* RigidSolver)"
  },
  {
    "label": "ComputeFieldRigidImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFieldRigidImpulse(const Chaos::FReal SolverTime)"
  },
  {
    "label": "ComputeFieldLinearImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFieldLinearImpulse(const Chaos::FReal SolverTime)"
  },
  {
    "label": "AddTransientCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransientCommand(const FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "AddPersistentCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPersistentCommand(const FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "RemoveTransientCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTransientCommand(const FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "RemovePersistentCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePersistentCommand(const FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "GetTransientCommands()",
    "kind": "Method",
    "detail": "Function (TArray<FFieldSystemCommand>&)",
    "insertText": "GetTransientCommands()"
  },
  {
    "label": "GetFilteredParticleHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilteredParticleHandles(TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, const Chaos::FPBDRigidsSolver* RigidSolver, const EFieldFilterType FilterType, const EFieldObjectType ObjectType)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetSamplePositions()",
    "kind": "Method",
    "detail": "Function (} const TArray<FVector>&)",
    "insertText": "GetSamplePositions()"
  },
  {
    "label": "GetOutputResults()",
    "kind": "Method",
    "detail": "Function (} const TArray<FVector>&)",
    "insertText": "GetOutputResults(const EFieldCommandOutputType OutputType)"
  },
  {
    "label": "FieldForcesUpdateInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "FieldForcesUpdateInternal(Chaos::FPBDRigidsSolver* RigidSolver, TArray<FFieldSystemCommand>& Commands, const bool IsTransient)"
  },
  {
    "label": "FieldParameterUpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FieldParameterUpdateInternal(Chaos::FPBDRigidsSolver* RigidSolver, Chaos::FPBDPositionConstraints& PositionTarget, TMap<int32, int32>& PositionTargetedParticles, TArray<FFieldSystemCommand>& Commands, const bool IsTransient)"
  }
]