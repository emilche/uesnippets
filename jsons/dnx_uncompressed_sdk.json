[
  {
    "label": "DNXUncompressed_Err_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNXUncompressed_Err_t"
  },
  {
    "label": "DNXUncompressed_CCO_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNXUncompressed_CCO_t"
  },
  {
    "label": "DNXUncompressed_CT_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNXUncompressed_CT_t"
  },
  {
    "label": "DNXUncompressed_FL_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DNXUncompressed_FL_t"
  },
  {
    "label": "DNXUncompressed_UncompressedParams_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNXUncompressed_UncompressedParams_t"
  },
  {
    "label": "DNXUncompressed_CompressedParams_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNXUncompressed_CompressedParams_t"
  },
  {
    "label": "DNXUncompressed_Options_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNXUncompressed_Options_t"
  },
  {
    "label": "DNXUncompressed_Encoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNXUncompressed_Encoder"
  },
  {
    "label": "DNXUncompressed_Decoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DNXUncompressed_Decoder"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# ifndef DNX_UNCOMPRESSED_SDK_H # define DNX_UNCOMPRESSED_SDK_H # include<cstdint> # ifdef __cplusplus \" C \" { # endif # define DNX_UNCOMPRESSED_VERSION_MAJOR 2 # define DNX_UNCOMPRESSED_VERSION_MINOR 6 # define DNX_UNCOMPRESSED_VERSION_PATCH 1 # ifdef BUILD_NUMBER # define DNX_UNCOMPRESSED_VERSION_BUILD BUILD_NUMBER # endif # ifndef DNX_UNCOMPRESSED_VERSION_BUILD # define DNX_UNCOMPRESSED_VERSION_BUILD 0 # endif # define DNX_UNCOMPRESSED_VERSION_RELEASE ' r ' # define DNX_UNCOMPRESSED_VERSION_ALPHA ' a ' # define DNX_UNCOMPRESSED_VERSION_BETA ' b ' # define DNX_UNCOMPRESSED_VERSION_TYPE DNX_UNCOMPRESSED_VERSION_RELEASE typedef enum DNXUncompressed_Err_t { DNX_UNCOMPRESSED_ERR_SUCCESS = 0,DNX_UNCOMPRESSED_ERR_FAIL = 1,DNX_UNCOMPRESSED_ERR_INVALID_ARG = 2,DNX_UNCOMPRESSED_ERR_STRUCT_SIZE = 3 } DNXUncompressed_Err_t ; typedef enum DNXUncompressed_CCO_t { DNX_UNCOMPRESSED_CCO_INVALID = 0,DNX_UNCOMPRESSED_CCO_YCbYCr = 1,DNX_UNCOMPRESSED_CCO_CbYCrY = 2,DNX_UNCOMPRESSED_CCO_ARGB = 3,DNX_UNCOMPRESSED_CCO_BGRA = 4,DNX_UNCOMPRESSED_CCO_RGB = 5,DNX_UNCOMPRESSED_CCO_BGR = 6,DNX_UNCOMPRESSED_CCO_RGBA = 7,DNX_UNCOMPRESSED_CCO_ABGR = 8,DNX_UNCOMPRESSED_CCO_YCbCr = 9,DNX_UNCOMPRESSED_CCO_YCbCr_Planar = 1 0,DNX_UNCOMPRESSED_CCO_CbYACrYA = 1 1,DNX_UNCOMPRESSED_CCO_CbYCrA = 1 2,DNX_UNCOMPRESSED_CCO_YCbCrA_Planar = 1 3,DNX_UNCOMPRESSED_CCO_Alpha = 1 4,DNX_UNCOMPRESSED_CCO_YCbYCr_A = 1 5,DNX_UNCOMPRESSED_CCO_CbYCrY_A = 1 6,} DNXUncompressed_CCO_t ; typedef enum DNXUncompressed_CT_t { DNX_UNCOMPRESSED_CT_INVALID = 0,DNX_UNCOMPRESSED_CT_UCHAR = 1,DNX_UNCOMPRESSED_CT_USHORT = 2,DNX_UNCOMPRESSED_CT_USHORT_10_6 = 3,DNX_UNCOMPRESSED_CT_USHORT_12_4 = 4,DNX_UNCOMPRESSED_CT_V210 = 5,DNX_UNCOMPRESSED_CT_FLOAT16 = 6,DNX_UNCOMPRESSED_CT_FLOAT32 = 7,DNX_UNCOMPRESSED_CT_SHORT_2_14 = 2 1 4 } DNXUncompressed_CT_t ; typedef enum DNXUncompressed_FL_t { DNX_UNCOMPRESSED_FL_FULL_FRAME = 0,DNX_UNCOMPRESSED_FL_MIXED_FIELDS = 1,} DNXUncompressed_FL_t ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (size_t structSize ; DNXUncompressed_CCO_t colorComponentOrder ; DNXUncompressed_CT_t componentType ; uint32_t width ; uint32_t height ; uint32_t rowBytes ; DNXUncompressed_FL_t frameLayout ; uint32_t rowBytes2 ; } DNXUncompressed_UncompressedParams_t ; typedef struct DNXUncompressed_CompressedParams_t { size_t structSize ; bool compressAlpha ; uint8_t slicesCount ; } DNXUncompressed_CompressedParams_t ; typedef)",
    "insertText": "void(*DNXUncompressed_ErrorCallback_t)(const char *message, void *userData)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (typedef struct DNXUncompressed_Options_t { size_t structSize ; unsigned int threadsCount ; void* userData ; DNXUncompressed_ErrorCallback_t errCallback ; } DNXUncompressed_Options_t ; # pragma)",
    "insertText": "pack(pop) void DNXUncompressed_GetVersion(int *major, int *minor, int *patch, int *build, char *releaseType)"
  },
  {
    "label": "DNXUncompressed_GetCompressedBufSize()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "DNXUncompressed_GetCompressedBufSize(const DNXUncompressed_UncompressedParams_t *uncParams, const DNXUncompressed_CompressedParams_t *cmpParams)"
  },
  {
    "label": "DNXUncompressed_CreateEncoder()",
    "kind": "Method",
    "detail": "Function (typedef struct DNXUncompressed_Encoder DNXUncompressed_Encoder ; DNXUncompressed_Err_t)",
    "insertText": "DNXUncompressed_CreateEncoder(const DNXUncompressed_Options_t *options, DNXUncompressed_Encoder **encoder)"
  },
  {
    "label": "DNXUncompressed_DestroyEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DNXUncompressed_DestroyEncoder(DNXUncompressed_Encoder *encoder)"
  },
  {
    "label": "DNXUncompressed_EncodeFrame()",
    "kind": "Method",
    "detail": "Function (DNXUncompressed_Err_t)",
    "insertText": "DNXUncompressed_EncodeFrame(DNXUncompressed_Encoder *encoder, const DNXUncompressed_UncompressedParams_t *uncParams, const DNXUncompressed_CompressedParams_t *cmpParams, const void *src, unsigned int srcSize, void *dst, unsigned int dstSize, unsigned int *bytesWritten)"
  },
  {
    "label": "DNXUncompressed_GetUncompressedBufSize()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "DNXUncompressed_GetUncompressedBufSize(const DNXUncompressed_UncompressedParams_t *uncParams)"
  },
  {
    "label": "DNXUncompressed_CreateDecoder()",
    "kind": "Method",
    "detail": "Function (typedef struct DNXUncompressed_Decoder DNXUncompressed_Decoder ; DNXUncompressed_Err_t)",
    "insertText": "DNXUncompressed_CreateDecoder(const DNXUncompressed_Options_t *options, DNXUncompressed_Decoder **decoder)"
  },
  {
    "label": "DNXUncompressed_DestroyDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DNXUncompressed_DestroyDecoder(DNXUncompressed_Decoder *decoder)"
  },
  {
    "label": "DNXUncompressed_ReadMetadata()",
    "kind": "Method",
    "detail": "Function (DNXUncompressed_Err_t)",
    "insertText": "DNXUncompressed_ReadMetadata(DNXUncompressed_Decoder *decoder, const void *src, unsigned int srcSize, DNXUncompressed_UncompressedParams_t *uncParams)"
  },
  {
    "label": "DNXUncompressed_DecodeFrame()",
    "kind": "Method",
    "detail": "Function (DNXUncompressed_Err_t)",
    "insertText": "DNXUncompressed_DecodeFrame(DNXUncompressed_Decoder *decoder, const DNXUncompressed_UncompressedParams_t *uncParams, const void *src, unsigned int srcSize, void *dst, unsigned int dstSize, unsigned int *bytesWritten)"
  }
]