[
  {
    "label": "QualityAnalyzingVideoDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityAnalyzingVideoDecoder"
  },
  {
    "label": "DecoderCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecoderCallback"
  },
  {
    "label": "QualityAnalyzingVideoDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualityAnalyzingVideoDecoderFactory"
  },
  {
    "label": "QualityAnalyzingVideoDecoder()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_DECODER_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_DECODER_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / video / encoded_image . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" api / video_codecs / video_decoder . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" test / pc / e2e / analyzer / video / encoded_image_data_injector . h \" namespace webrtc { namespace webrtc_pc_e2e { class QualityAnalyzingVideoDecoder : public VideoDecoder { public :)",
    "insertText": "QualityAnalyzingVideoDecoder(absl::string_view peer_name, std::unique_ptr<VideoDecoder> delegate, EncodedImageDataExtractor* extractor, VideoQualityAnalyzerInterface* analyzer)"
  },
  {
    "label": "QualityAnalyzingVideoDecoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "QualityAnalyzingVideoDecoder()"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Configure(const Settings& settings)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const EncodedImage& input_image, bool missing_frames, int64_t render_time_ms)"
  },
  {
    "label": "RegisterDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterDecodeCompleteCallback(DecodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "GetDecoderInfo()",
    "kind": "Method",
    "detail": "Function (DecoderInfo)",
    "insertText": "GetDecoderInfo()"
  },
  {
    "label": "ImplementationName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ImplementationName()"
  },
  {
    "label": "DecoderCallback()",
    "kind": "Method",
    "detail": "Function (private : class DecoderCallback : public DecodedImageCallback { public :)",
    "insertText": "DecoderCallback(QualityAnalyzingVideoDecoder* decoder)"
  },
  {
    "label": "DecoderCallback()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DecoderCallback()"
  },
  {
    "label": "SetDelegateCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDelegateCallback(DecodedImageCallback* delegate)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage, int64_t decode_time_ms)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoded(VideoFrame& decodedImage, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "IrrelevantSimulcastStreamDecoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "IrrelevantSimulcastStreamDecoded(uint16_t frame_id, uint32_t timestamp_ms)"
  },
  {
    "label": "GetDummyFrameBuffer()",
    "kind": "Method",
    "detail": "Function (private : rtc::scoped_refptr<webrtc::VideoFrameBuffer>)",
    "insertText": "GetDummyFrameBuffer()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (QualityAnalyzingVideoDecoder* const decoder_ ; rtc::scoped_refptr<webrtc::VideoFrameBuffer> dummy_frame_buffer_ ; Mutex callback_mutex_ ; DecodedImageCallback* delegate_callback_)",
    "insertText": "RTC_GUARDED_BY(callback_mutex_)"
  },
  {
    "label": "OnFrameDecoded()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnFrameDecoded(VideoFrame* frame, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const std::string peer_name_ ; const std::string implementation_name_ ; std::unique_ptr<VideoDecoder> delegate_ ; EncodedImageDataExtractor* const extractor_ ; VideoQualityAnalyzerInterface* const analyzer_ ; std::unique_ptr<DecoderCallback> analyzing_callback_ ; Mutex mutex_ ; std::string codec_name_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "QualityAnalyzingVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (} ; class QualityAnalyzingVideoDecoderFactory : public VideoDecoderFactory { public :)",
    "insertText": "QualityAnalyzingVideoDecoderFactory(absl::string_view peer_name, std::unique_ptr<VideoDecoderFactory> delegate, EncodedImageDataExtractor* extractor, VideoQualityAnalyzerInterface* analyzer)"
  },
  {
    "label": "QualityAnalyzingVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "QualityAnalyzingVideoDecoderFactory()"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (std::vector<SdpVideoFormat>)",
    "insertText": "GetSupportedFormats()"
  },
  {
    "label": "CreateVideoDecoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoDecoder>)",
    "insertText": "CreateVideoDecoder(const SdpVideoFormat& format)"
  }
]