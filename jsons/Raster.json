[
  {
    "label": "RasterPolicyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RasterPolicyType"
  },
  {
    "label": "FTriangleRasterizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleRasterizer"
  },
  {
    "label": "DrawTriangle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" template<class RasterPolicyType> class FTriangleRasterizer : public RasterPolicyType { public : typedef RasterPolicyType::InterpolantType InterpolantType ; void)",
    "insertText": "DrawTriangle(const InterpolantType& I0, const InterpolantType& I1, const InterpolantType& I2, const FVector2D& P0, const FVector2D& P1, const FVector2D& P2, bool BackFacing)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (InterpolantType Interpolants [ 3 ] = { I0,I1,I2 } ; FVector2f Points [ 3 ] = {)",
    "insertText": "FVector2f(P0), FVector2f(P1), FVector2f(P2)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Points[0], Points[1])"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Interpolants[0], Interpolants[1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Points[2].Y < Points[0].Y && Points[2].Y <= Points[1].Y)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Points[0], Points[2])"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Interpolants[0], Interpolants[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Points[1].Y > Points[2].Y)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Points[2], Points[1])"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Interpolants[2], Interpolants[1])"
  },
  {
    "label": "PointDiffY_1_0()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "PointDiffY_1_0(Points[1].Y - Points[0].Y)"
  },
  {
    "label": "PointDiffY_2_0()",
    "kind": "Method",
    "detail": "Function (PointDiffY_1_0 = PointDiffY_1_0> = 0 . f ? UE_SMALL_NUMBER : - UE_SMALL_NUMBER ; } float)",
    "insertText": "PointDiffY_2_0(Points[2].Y - Points[0].Y)"
  },
  {
    "label": "PointDiffY_2_1()",
    "kind": "Method",
    "detail": "Function (PointDiffY_2_0 = PointDiffY_2_0> = 0 . f ? UE_SMALL_NUMBER : - UE_SMALL_NUMBER ; } float)",
    "insertText": "PointDiffY_2_1(Points[2].Y - Points[1].Y)"
  },
  {
    "label": "TopMinDiffX()",
    "kind": "Method",
    "detail": "Function (PointDiffY_2_1 = PointDiffY_2_1> = 0 . f ? UE_SMALL_NUMBER : - UE_SMALL_NUMBER ; } float)",
    "insertText": "TopMinDiffX(Points[1].X - Points[0].X) / PointDiffY_1_0, TopMaxDiffX = (Points[2].X - Points[0].X)"
  },
  {
    "label": "TopMinDiffInterpolant()",
    "kind": "Method",
    "detail": "Function (InterpolantType)",
    "insertText": "TopMinDiffInterpolant(Interpolants[1] - Interpolants[0]) / PointDiffY_1_0, TopMaxDiffInterpolant = (Interpolants[2] - Interpolants[0])"
  },
  {
    "label": "BottomMinDiffX()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "BottomMinDiffX(Points[2].X - Points[1].X) / PointDiffY_2_1, BottomMaxDiffX = (Points[2].X - Points[0].X)"
  },
  {
    "label": "BottomMinDiffInterpolant()",
    "kind": "Method",
    "detail": "Function (InterpolantType)",
    "insertText": "BottomMinDiffInterpolant(Interpolants[2] - Interpolants[1]) / PointDiffY_2_1, BottomMaxDiffInterpolant = (Interpolants[2] - Interpolants[0])"
  },
  {
    "label": "DrawTriangleTrapezoid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTriangleTrapezoid(Interpolants[0], TopMinDiffInterpolant, Interpolants[0], TopMaxDiffInterpolant, Points[0].X, TopMinDiffX, Points[0].X, TopMaxDiffX, Points[0].Y, Points[1].Y, BackFacing)"
  },
  {
    "label": "DrawTriangleTrapezoid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTriangleTrapezoid(Interpolants[1], BottomMinDiffInterpolant, Interpolants[0] + TopMaxDiffInterpolant * PointDiffY_1_0, BottomMaxDiffInterpolant, Points[1].X, BottomMinDiffX, Points[0].X + TopMaxDiffX * PointDiffY_1_0, BottomMaxDiffX, Points[1].Y, Points[2].Y, BackFacing)"
  },
  {
    "label": "FTriangleRasterizer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTriangleRasterizer(const RasterPolicyType& InRasterPolicy): RasterPolicyType(InRasterPolicy)"
  },
  {
    "label": "DrawTriangleTrapezoid()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "DrawTriangleTrapezoid(const InterpolantType& TopMinInterpolant, const InterpolantType& DeltaMinInterpolant, const InterpolantType& TopMaxInterpolant, const InterpolantType& DeltaMaxInterpolant, float TopMinX, float DeltaMinX, float TopMaxX, float DeltaMaxX, float InMinY, float InMaxY, bool BackFacing)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 IntMinY =)",
    "insertText": "Clamp(FMath::CeilToInt(InMinY),RasterPolicyType::GetMinY(),RasterPolicyType::GetMaxY() + 1), IntMaxY = FMath::Clamp(FMath::CeilToInt(InMaxY),RasterPolicyType::GetMinY(),RasterPolicyType::GetMaxY() + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Y = IntY - InMinY ; float LocalMinX = TopMinX + DeltaMinX* Y ; float LocalMaxX = TopMaxX + DeltaMaxX* Y ; InterpolantType MinInterpolant = TopMinInterpolant + DeltaMinInterpolant* Y,MaxInterpolant = TopMaxInterpolant + DeltaMaxInterpolant* Y ;)",
    "insertText": "if(LocalMinX > LocalMaxX)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(LocalMinX,LocalMaxX)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(MinInterpolant,MaxInterpolant)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LocalMaxX > LocalMinX)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 IntMinX =)",
    "insertText": "Clamp(FMath::CeilToInt(LocalMinX),RasterPolicyType::GetMinX(),RasterPolicyType::GetMaxX() + 1), IntMaxX = FMath::Clamp(FMath::CeilToInt(LocalMaxX),RasterPolicyType::GetMinX(),RasterPolicyType::GetMaxX() + 1)"
  },
  {
    "label": "DeltaInterpolant()",
    "kind": "Method",
    "detail": "Function (InterpolantType)",
    "insertText": "DeltaInterpolant(MaxInterpolant - MinInterpolant) / (LocalMaxX - LocalMinX)"
  },
  {
    "label": "ProcessPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPixel(X,IntY,MinInterpolant + DeltaInterpolant * (X - LocalMinX),BackFacing)"
  }
]