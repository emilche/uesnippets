[
  {
    "label": "FWidgetViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetViewModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SRichTextHyperlink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRichTextHyperlink"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateGlobals . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / Text / SlateHyperlinkRun . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Input / SHyperlink . h \" class FWidgetViewModel ; enum class ETextShapingMethod : uint8 ; # if WITH_FANCY_TEXT class SRichTextHyperlink : public SHyperlink { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRichTextHyperlink) : _Text() , _Style(&FCoreStyle::Get().GetWidgetStyle< FHyperlinkStyle >(\"Hyperlink\")) , _OnNavigate() , _TextShapingMethod() , _TextFlowDirection()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, Text ) SLATE_STYLE_ARGUMENT( FHyperlinkStyle, Style ) SLATE_EVENT( FSimpleDelegate, OnNavigate ) SLATE_ARGUMENT( TOptional<ETextShapingMethod>, TextShapingMethod ) SLATE_ARGUMENT( TOptional<ETextFlowDirection>, TextFlowDirection ) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs, const TSharedRef< FSlateHyperlinkRun::FWidgetViewModel >& InViewModel)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (ViewModel = InViewModel ;)",
    "insertText": "Construct(SHyperlink::FArguments() .Text( InArgs._Text ) .Style( InArgs._Style ) .Padding( FMargin(0)) .OnNavigate( InArgs._OnNavigate ) .TextShapingMethod( InArgs._TextShapingMethod ) .TextFlowDirection( InArgs._TextFlowDirection ))"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(MyGeometry, MouseEvent)"
  },
  {
    "label": "SetIsHovered()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "SetIsHovered(IsHovered())"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "OnMouseButtonDown(MyGeometry, MouseEvent)"
  },
  {
    "label": "SetIsPressed()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "SetIsPressed(IsPressed())"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "OnMouseButtonUp(MyGeometry, MouseEvent)"
  }
]