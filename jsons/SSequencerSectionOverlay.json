[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SSequencerSectionOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerSectionOverlay"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" SequencerTimeSliderController . h \" class FPaintArgs ; class FSlateWindowElementList ; class SSequencerSectionOverlay : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSequencerSectionOverlay ) : _DisplayTickLines( true ) , _DisplayScrubPosition( false ) , _DisplayMarkedFrames( false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(bool, DisplayTickLines ) SLATE_ATTRIBUTE( bool, DisplayScrubPosition ) SLATE_ATTRIBUTE( bool, DisplayMarkedFrames ) SLATE_ATTRIBUTE( FPaintPlaybackRangeArgs, PaintPlaybackRangeArgs ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, TSharedRef<FSequencerTimeSliderController> InTimeSliderController)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (bDisplayScrubPosition = InArgs . _DisplayScrubPosition ; bDisplayTickLines = InArgs . _DisplayTickLines ; bDisplayMarkedFrames = InArgs . _DisplayMarkedFrames ; PaintPlaybackRangeArgs = InArgs . _PaintPlaybackRangeArgs ; TimeSliderController = InTimeSliderController ; } private : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  }
]