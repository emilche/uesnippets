[
  {
    "label": "FTextureRenderTargetResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureRenderTargetResource"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ILandscapeEdModeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILandscapeEdModeInterface"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "UStreamableRenderAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableRenderAsset"
  },
  {
    "label": "UTextureRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget"
  },
  {
    "label": "ULandscapeEditLayerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeEditLayerBase"
  },
  {
    "label": "FMaterialResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialResource"
  },
  {
    "label": "FLandscapeEditLayerComponentReadbackResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeEditLayerComponentReadbackResult"
  },
  {
    "label": "FLandscapeNotification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeNotification"
  },
  {
    "label": "FTextureToComponentHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureToComponentHelper"
  },
  {
    "label": "FUpdateLayersContentContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLayersContentContext"
  },
  {
    "label": "FEditLayersHeightmapMergeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditLayersHeightmapMergeParams"
  },
  {
    "label": "FEditLayersWeightmapMergeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditLayersWeightmapMergeParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMergeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeInfo"
  },
  {
    "label": "ELandscapeLayerUpdateMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELandscapeLayerUpdateMode"
  },
  {
    "label": "FLandscapeLayerBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayerBrush"
  },
  {
    "label": "ELandscapeBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELandscapeBlendMode"
  },
  {
    "label": "FLandscapeLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayer"
  },
  {
    "label": "FOnLandscapeEditLayersMergedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnLandscapeEditLayersMergedParams"
  },
  {
    "label": "ALandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscape"
  },
  {
    "label": "FLandscapeConfigHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeConfigHelper"
  },
  {
    "label": "FMaterialUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUpdateContext"
  },
  {
    "label": "FComponentRecreateRenderStateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentRecreateRenderStateContext"
  },
  {
    "label": "ALandscapeBlueprintBrushBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeBlueprintBrushBase"
  },
  {
    "label": "FLandscapeTexture2DResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeTexture2DResource"
  },
  {
    "label": "FLandscapeLayerWeightmapExtractMaterialLayersComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayerWeightmapExtractMaterialLayersComponentData"
  },
  {
    "label": "FLandscapeLayerWeightmapPackMaterialLayersComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayerWeightmapPackMaterialLayersComponentData"
  },
  {
    "label": "FLandscapeLayersTriangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayersTriangle"
  },
  {
    "label": "FLandscapeLayersHeightmapShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayersHeightmapShaderParameters"
  },
  {
    "label": "FLandscapeLayersWeightmapShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeLayersWeightmapShaderParameters"
  },
  {
    "label": "FLandscapeEdModeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeEdModeInfo"
  },
  {
    "label": "FWaitingForResourcesNotificationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaitingForResourcesNotificationHelper"
  },
  {
    "label": "FLandscapeNotificationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeNotificationManager"
  },
  {
    "label": "FLandscapeTexture2DArrayResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeTexture2DArrayResource"
  },
  {
    "label": "FScopedSetLandscapeEditingLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSetLandscapeEditingLayer"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" LandscapeComponent . h \" # include \" UObject / ObjectMacros . h \" # include \" LandscapeProxy . h \" # include \" LandscapeBlueprintBrushBase . h \" # include \" LandscapeEditTypes . h \" # include \" LandscapeEditLayerRenderer . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Templates / SubclassOf . h \" # include \" Algo / Transform . h \" # include \" LandscapeLayerInfoObject . h \" # include \" Landscape . generated . h \" class FTextureRenderTargetResource ; class ULandscapeComponent ; class ILandscapeEdModeInterface ; class SNotificationItem ; class UStreamableRenderAsset ; class UTextureRenderTarget ; class ULandscapeEditLayerBase ; class FMaterialResource ; struct FLandscapeEditLayerComponentReadbackResult ; struct FLandscapeNotification ; struct FTextureToComponentHelper ; struct FUpdateLayersContentContext ; struct FEditLayersHeightmapMergeParams ; struct FEditLayersWeightmapMergeParams ; enum class ELandscapeNotificationType ; namespace EditLayersHeightmapLocalMerge_RenderThread { struct FMergeInfo ; } namespace EditLayersWeightmapLocalMerge_RenderThread { struct FMergeInfo ; } # if WITH_EDITOR TAutoConsoleVariable<int32> CVarLandscapeSplineFalloffModulation ; # endif)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (WeightmapRT_Scratch_RGBA,WeightmapRT_Scratch1,WeightmapRT_Scratch2,WeightmapRT_Scratch3,WeightmapRT_Mip0,WeightmapRT_Mip1,WeightmapRT_Mip2,WeightmapRT_Mip3,WeightmapRT_Mip4,WeightmapRT_Mip5,WeightmapRT_Mip6,WeightmapRT_Mip7,WeightmapRT_Count } ; # if WITH_EDITOR enum ELandscapeLayerUpdateMode : uint32 ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLandscapeLayerBrush()"
  },
  {
    "label": "FLandscapeLayerBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeLayerBrush(ALandscapeBlueprintBrushBase* InBlueprintBrush) #if WITH_EDITORONLY_DATA : BlueprintBrush(InBlueprintBrush)"
  },
  {
    "label": "FLandscapeLayerBrush()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLandscapeLayerBrush()"
  },
  {
    "label": "RenderLayer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR UTextureRenderTarget2D*)",
    "insertText": "RenderLayer(const FLandscapeBrushParameters& InParameters)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (ALandscapeBlueprintBrushBase*)",
    "insertText": "GetBrush()"
  },
  {
    "label": "Affects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Affects(ELandscapeToolTargetType InTargetType, const FName& InWeightmapLayerName)"
  },
  {
    "label": "AffectsHeightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AffectsHeightmap()"
  },
  {
    "label": "AffectsWeightmapLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AffectsWeightmapLayer(const FName& InWeightmapLayerName)"
  },
  {
    "label": "AffectsVisibilityLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AffectsVisibilityLayer()"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(ALandscape* InOwner)"
  },
  {
    "label": "GetEditLayerRendererStates()",
    "kind": "Method",
    "detail": "Function (LANDSCAPE_EDIT_LAYERS_BATCHED_MERGE_EXPERIMENTAL TArray<UE::Landscape::EditLayers::FEditLayerRendererState>)",
    "insertText": "GetEditLayerRendererStates(const ULandscapeInfo* InLandscapeInfo, bool bInSkipBrush)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLandscapeLayer() : Guid(FGuid::NewGuid()) , Name(NAME_None) , bVisible(true) , bLocked(false) , HeightmapAlpha(1.0f) , WeightmapAlpha(1.0f) , BlendMode(LSBM_AdditiveBlend)"
  },
  {
    "label": "FLandscapeLayer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLandscapeLayer()"
  },
  {
    "label": "FOnLandscapeEditLayersMergedParams()",
    "kind": "Method",
    "detail": "Function (} ; enum class ELandscapeEditLayersMergeMode : uint8 { GlobalMerge = 0,LocalMerge,BatchedMerge,Invalid } ; struct FOnLandscapeEditLayersMergedParams {)",
    "insertText": "FOnLandscapeEditLayersMergedParams(UTextureRenderTarget* InRenderTarget, const FIntPoint& InRenderAreaResolution, bool bInIsHeightmapMerge) : RenderTarget(InRenderTarget) , RenderAreaResolution(InRenderAreaResolution) , bIsHeightmapMerge(bInIsHeightmapMerge)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (} UTextureRenderTarget* RenderTarget = nullptr ; FIntPoint RenderAreaResolution =)",
    "insertText": "FIntPoint(ForceInit)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (bool bIsHeightmapMerge = false ; } ;)",
    "insertText": "UCLASS(MinimalAPI, showcategories=(Display, Movement, Collision, Lighting, LOD, Input), hidecategories=(Mobility))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "ALandscape()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ALandscape(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "GetLandscapeActor()",
    "kind": "Method",
    "detail": "Function (ALandscape*)",
    "insertText": "GetLandscapeActor()"
  },
  {
    "label": "HasAllComponent()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FName AffectsLandscapeActorDescProperty ; bool)",
    "insertText": "HasAllComponent()"
  },
  {
    "label": "CalcComponentIndicesOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcComponentIndicesOverlap(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const int32 ComponentSizeQuads, int32& ComponentIndexX1, int32& ComponentIndexY1, int32& ComponentIndexX2, int32& ComponentIndexY2)"
  },
  {
    "label": "CalcComponentIndicesNoOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcComponentIndicesNoOverlap(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, const int32 ComponentSizeQuads, int32& ComponentIndexX1, int32& ComponentIndexY1, int32& ComponentIndexX2, int32& ComponentIndexY2)"
  },
  {
    "label": "SplitHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitHeightmap(ULandscapeComponent* Comp, ALandscapeProxy* TargetProxy = nullptr, class FMaterialUpdateContext* InOutUpdateContext = nullptr, TArray<class FComponentRecreateRenderStateContext>* InOutRecreateRenderStateContext = nullptr, bool InReregisterComponent = true)"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditChange(FProperty* PropertyThatWillChange)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditMove(bool bFinished)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "PostActorCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostActorCreated()"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldImport(FStringView ActorPropString, bool IsMovingLevel)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "CanDeleteSelectedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSelectedActor(FText& OutReason)"
  },
  {
    "label": "CanChangeIsSpatiallyLoadedFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeIsSpatiallyLoadedFlag()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "GetLoadedBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetLoadedBounds()"
  },
  {
    "label": "IsUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUpToDate()"
  },
  {
    "label": "TickLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickLayers(float DeltaTime)"
  },
  {
    "label": "SetLODGroupKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLODGroupKey(uint32 InLODGroupKey)"
  },
  {
    "label": "GetLODGroupKey()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLODGroupKey()"
  },
  {
    "label": "IsValidRenderTargetFormatHeightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRenderTargetFormatHeightmap(EPixelFormat InRenderTargetFormat, bool& bOutCompressHeight)"
  },
  {
    "label": "IsValidRenderTargetFormatWeightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidRenderTargetFormatWeightmap(EPixelFormat InRenderTargetFormat, int32& OutNumChannels)"
  },
  {
    "label": "GetCompleteBounds()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FBox)",
    "insertText": "GetCompleteBounds()"
  },
  {
    "label": "RegisterLandscapeEdMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLandscapeEdMode(ILandscapeEdModeInterface* InLandscapeEdMode)"
  },
  {
    "label": "UnregisterLandscapeEdMode()",
    "kind": "Method",
    "detail": "Function (LandscapeEdMode = InLandscapeEdMode ; } void)",
    "insertText": "UnregisterLandscapeEdMode()"
  },
  {
    "label": "HasLandscapeEdMode()",
    "kind": "Method",
    "detail": "Function (LandscapeEdMode = nullptr ; } bool)",
    "insertText": "HasLandscapeEdMode()"
  },
  {
    "label": "UpdateCachedHasLayersContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedHasLayersContent(bool bInCheckComponentDataIntegrity)"
  },
  {
    "label": "RequestSplineLayerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSplineLayerUpdate()"
  },
  {
    "label": "RequestLayersInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayersInitialization(bool bInRequestContentUpdate = true)"
  },
  {
    "label": "RequestLayersContentUpdateForceAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayersContentUpdateForceAll(ELandscapeLayerUpdateMode InModeMask = ELandscapeLayerUpdateMode::Update_All, bool bInUserTriggered = false)"
  },
  {
    "label": "RequestLayersContentUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestLayersContentUpdate(ELandscapeLayerUpdateMode InModeMask)"
  },
  {
    "label": "ReorderLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReorderLayer(int32 InStartingLayerIndex, int32 InDestinationLayerIndex)"
  },
  {
    "label": "DuplicateLayerAndMoveBrushes()",
    "kind": "Method",
    "detail": "Function (FLandscapeLayer*)",
    "insertText": "DuplicateLayerAndMoveBrushes(const FLandscapeLayer& InOtherLayer)"
  },
  {
    "label": "CreateLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateLayer(FName InName = NAME_None, const TSubclassOf<ULandscapeEditLayerBase>& InEditLayerClass = TSubclassOf<ULandscapeEditLayerBase>())"
  },
  {
    "label": "CreateDefaultLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultLayer()"
  },
  {
    "label": "CopyOldDataToDefaultLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyOldDataToDefaultLayer()"
  },
  {
    "label": "CopyOldDataToDefaultLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyOldDataToDefaultLayer(ALandscapeProxy* Proxy)"
  },
  {
    "label": "AddLayersToProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLayersToProxy(ALandscapeProxy* InProxy)"
  },
  {
    "label": "ComputeComponentCounts()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "ComputeComponentCounts()"
  },
  {
    "label": "IsLayerNameUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerNameUnique(const FName& InName)"
  },
  {
    "label": "SetLayerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerName(int32 InLayerIndex, const FName& InName)"
  },
  {
    "label": "SetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerAlpha(int32 InLayerIndex, const float InAlpha, bool bInHeightmap)"
  },
  {
    "label": "GetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLayerAlpha(int32 InLayerIndex, bool bInHeightmap)"
  },
  {
    "label": "GetClampedLayerAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClampedLayerAlpha(float InAlpha, bool bInHeightmap)"
  },
  {
    "label": "SetLayerVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerVisibility(int32 InLayerIndex, bool bInVisible, bool bInForIntermediateRender = false)"
  },
  {
    "label": "SetLayerLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerLocked(int32 InLayerIndex, bool bLocked)"
  },
  {
    "label": "SetLayerBlendMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerBlendMode(int32 InLayerIndex, ELandscapeBlendMode InBlendMode)"
  },
  {
    "label": "GetLayerCount()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetLayerCount()"
  },
  {
    "label": "GetLayers()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FLandscapeLayer>)",
    "insertText": "GetLayers()"
  },
  {
    "label": "GetLayerConst()",
    "kind": "Method",
    "detail": "Function (} const FLandscapeLayer*)",
    "insertText": "GetLayerConst(int32 InLayerIndex)"
  },
  {
    "label": "GetLayerConst()",
    "kind": "Method",
    "detail": "Function (const FLandscapeLayer*)",
    "insertText": "GetLayerConst(const FGuid& InLayerGuid)"
  },
  {
    "label": "GetLayerConst()",
    "kind": "Method",
    "detail": "Function (const FLandscapeLayer*)",
    "insertText": "GetLayerConst(const FName& InLayerName)"
  },
  {
    "label": "GetLayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLayerIndex(const FGuid& InLayerGuid)"
  },
  {
    "label": "GetLayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLayerIndex(FName InLayerName)"
  },
  {
    "label": "ForEachLayerConst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachLayerConst(TFunctionRef<bool(const FLandscapeLayer&)> Fn)"
  },
  {
    "label": "FindLayerOfType()",
    "kind": "Method",
    "detail": "Function (const FLandscapeLayer*)",
    "insertText": "FindLayerOfType(const TSubclassOf<ULandscapeEditLayerBase>& InLayerClass)"
  },
  {
    "label": "GetLayersOfType()",
    "kind": "Method",
    "detail": "Function (TArray<const FLandscapeLayer*>)",
    "insertText": "GetLayersOfType(const TSubclassOf<ULandscapeEditLayerBase>& InLayerClass)"
  },
  {
    "label": "GetUsedPaintLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedPaintLayers(int32 InLayerIndex, TArray<ULandscapeLayerInfoObject*>& OutUsedLayerInfos)"
  },
  {
    "label": "GetUsedPaintLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedPaintLayers(const FGuid& InLayerGuid, TArray<ULandscapeLayerInfoObject*>& OutUsedLayerInfos)"
  },
  {
    "label": "ClearPaintLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPaintLayer(int32 InLayerIndex, ULandscapeLayerInfoObject* InLayerInfo)"
  },
  {
    "label": "ClearPaintLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPaintLayer(const FGuid& InLayerGuid, ULandscapeLayerInfoObject* InLayerInfo)"
  },
  {
    "label": "ClearLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLayer(int32 InLayerIndex, TSet<TObjectPtr<ULandscapeComponent>>* InComponents = nullptr, ELandscapeClearMode InClearMode = ELandscapeClearMode::Clear_All)"
  },
  {
    "label": "ClearLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLayer(const FGuid& InLayerGuid, TSet<TObjectPtr<ULandscapeComponent>>* InComponents = nullptr, ELandscapeClearMode InClearMode = ELandscapeClearMode::Clear_All, bool bMarkPackageDirty = true)"
  },
  {
    "label": "DeleteLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteLayer(int32 InLayerIndex)"
  },
  {
    "label": "CollapseLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseLayer(int32 InLayerIndex)"
  },
  {
    "label": "DeleteLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLayers()"
  },
  {
    "label": "SetEditingLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditingLayer(const FGuid& InLayerGuid = FGuid())"
  },
  {
    "label": "SetGrassUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrassUpdateEnabled(bool bInGrassUpdateEnabled)"
  },
  {
    "label": "GetEditingLayer()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetEditingLayer()"
  },
  {
    "label": "IsMaxLayersReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaxLayersReached()"
  },
  {
    "label": "ShowOnlySelectedLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlySelectedLayer(int32 InLayerIndex)"
  },
  {
    "label": "ShowAllLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllLayers()"
  },
  {
    "label": "UpdateLandscapeSplines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLandscapeSplines(const FGuid& InLayerGuid = FGuid(), bool bInUpdateOnlySelected = false, bool bInForceUpdateAllCompoments = false)"
  },
  {
    "label": "IsLayerBlendSubstractive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerBlendSubstractive(int32 InLayerIndex, const TWeakObjectPtr<ULandscapeLayerInfoObject>& InLayerInfoObj)"
  },
  {
    "label": "SetLayerSubstractiveBlendStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerSubstractiveBlendStatus(int32 InLayerIndex, bool InStatus, const TWeakObjectPtr<ULandscapeLayerInfoObject>& InLayerInfoObj)"
  },
  {
    "label": "ReplaceLayerSubstractiveBlendStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceLayerSubstractiveBlendStatus(ULandscapeLayerInfoObject* InFromLayerInfo, ULandscapeLayerInfoObject* InToLayerInfo, bool bInShouldDirtyPackage)"
  },
  {
    "label": "GetBrushLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBrushLayer(const ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "AddBrushToLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBrushToLayer(int32 InLayerIndex, class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "RemoveBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBrush(class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "RemoveBrushFromLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBrushFromLayer(int32 InLayerIndex, class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "RemoveBrushFromLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBrushFromLayer(int32 InLayerIndex, int32 InBrushIndex)"
  },
  {
    "label": "GetBrushIndexForLayer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBrushIndexForLayer(int32 InLayerIndex, class ALandscapeBlueprintBrushBase* InBrush)"
  },
  {
    "label": "ReorderLayerBrush()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReorderLayerBrush(int32 InLayerIndex, int32 InStartingLayerBrushIndex, int32 InDestinationLayerBrushIndex)"
  },
  {
    "label": "GetBrushForLayer()",
    "kind": "Method",
    "detail": "Function (class ALandscapeBlueprintBrushBase*)",
    "insertText": "GetBrushForLayer(int32 InLayerIndex, int32 BrushIndex)"
  },
  {
    "label": "GetBrushesForLayer()",
    "kind": "Method",
    "detail": "Function (TArray<class ALandscapeBlueprintBrushBase*>)",
    "insertText": "GetBrushesForLayer(int32 InLayerIndex)"
  },
  {
    "label": "OnBlueprintBrushChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintBrushChanged()"
  },
  {
    "label": "OnLayerInfoSplineFalloffModulationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLayerInfoSplineFalloffModulationChanged(ULandscapeLayerInfoObject* InLayerInfo)"
  },
  {
    "label": "OnPreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreSave()"
  },
  {
    "label": "ReleaseLayersRenderingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseLayersRenderingResource()"
  },
  {
    "label": "ClearDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDirtyData(ULandscapeComponent* InLandscapeComponent)"
  },
  {
    "label": "ToggleCanHaveLayersContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCanHaveLayersContent()"
  },
  {
    "label": "ForceUpdateLayersContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceUpdateLayersContent(bool bIntermediateRender = false)"
  },
  {
    "label": "InitializeLandscapeLayersWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLandscapeLayersWeightmapUsage()"
  },
  {
    "label": "ComputeLandscapeLayerBrushInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeLandscapeLayerBrushInfo(FTransform& OutLandscapeTransform, FIntPoint& OutLandscapeSize, FIntPoint& OutLandscapeRenderTargetSize)"
  },
  {
    "label": "UpdateProxyLayersWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProxyLayersWeightmapUsage()"
  },
  {
    "label": "ValidateProxyLayersWeightmapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateProxyLayersWeightmapUsage()"
  },
  {
    "label": "SetUseGeneratedLandscapeSplineMeshesActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseGeneratedLandscapeSplineMeshesActors(bool bInEnabled)"
  },
  {
    "label": "GetUseGeneratedLandscapeSplineMeshesActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseGeneratedLandscapeSplineMeshesActors()"
  },
  {
    "label": "PrepareTextureResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareTextureResources(bool bInWaitForStreaming)"
  },
  {
    "label": "GetVisibilityLayerAllocationIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVisibilityLayerAllocationIndex()"
  },
  {
    "label": "EnableNaniteSkirts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableNaniteSkirts(bool bInEnable, float InSkirtDepth, bool bInShouldDirtyPackage)"
  },
  {
    "label": "SetNanitePositionPrecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNanitePositionPrecision(int32 InPrecision, bool bInShouldDirtyPackage)"
  },
  {
    "label": "SetDisableRuntimeGrassMapGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableRuntimeGrassMapGeneration(bool bInDisableRuntimeGrassMapGeneration)"
  },
  {
    "label": "GenerateUniqueLayerName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GenerateUniqueLayerName(FName InName = NAME_None)"
  },
  {
    "label": "GetLayerInternal()",
    "kind": "Method",
    "detail": "Function (private : FLandscapeLayer*)",
    "insertText": "GetLayerInternal(int32 InLayerIndex)"
  },
  {
    "label": "OnLayerCreatedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLayerCreatedInternal(FLandscapeLayer& Layer)"
  },
  {
    "label": "SupportsEditLayersLocalMerge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEditLayersLocalMerge()"
  },
  {
    "label": "HasNormalCaptureBPBrushLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNormalCaptureBPBrushLayer()"
  },
  {
    "label": "GetEditLayersMergeMode()",
    "kind": "Method",
    "detail": "Function (ELandscapeEditLayersMergeMode)",
    "insertText": "GetEditLayersMergeMode()"
  },
  {
    "label": "CreateLayersRenderingResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLayersRenderingResource(bool bUseNormalCapture)"
  },
  {
    "label": "PrepareEditLayersLocalMergeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareEditLayersLocalMergeResources()"
  },
  {
    "label": "UpdateLayersContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayersContent(bool bInWaitForStreaming = false, bool bInSkipMonitorLandscapeEdModeChanges = false, bool bIntermediateRender = false, bool bFlushRender = false)"
  },
  {
    "label": "MonitorShaderCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorShaderCompilation()"
  },
  {
    "label": "MonitorLandscapeEdModeChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorLandscapeEdModeChanges()"
  },
  {
    "label": "PrepareEditLayersMergeRenderContext()",
    "kind": "Method",
    "detail": "Function (UE::Landscape::EditLayers::FMergeRenderContext)",
    "insertText": "PrepareEditLayersMergeRenderContext(const UE::Landscape::EditLayers::FMergeRenderParams& InParams)"
  },
  {
    "label": "BuildLandscapeBrushParameters()",
    "kind": "Method",
    "detail": "Function (FLandscapeBrushParameters)",
    "insertText": "BuildLandscapeBrushParameters(bool bInIsHeightmapMerge, const FIntRect& InRenderAreaExtents, UTextureRenderTarget2D* InRenderTarget, FName InWeightmapLayerName = NAME_None)"
  },
  {
    "label": "RegenerateLayersHeightmaps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegenerateLayersHeightmaps(const FUpdateLayersContentContext& InUpdateLayersContentContext)"
  },
  {
    "label": "PerformLayersHeightmapsLocalMerge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerformLayersHeightmapsLocalMerge(const FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersHeightmapMergeParams& InMergeParams)"
  },
  {
    "label": "PerformLayersHeightmapsGlobalMerge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerformLayersHeightmapsGlobalMerge(const FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersHeightmapMergeParams& InMergeParams)"
  },
  {
    "label": "PerformLayersHeightmapsBatchedMerge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerformLayersHeightmapsBatchedMerge(const FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersHeightmapMergeParams& InMergeParams)"
  },
  {
    "label": "ResolveLayersHeightmapTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveLayersHeightmapTexture(const FTextureToComponentHelper& MapHelper, const TSet<UTexture2D*>& HeightmapsToResolve, bool bIntermediateRender, TArray<FLandscapeEditLayerComponentReadbackResult>& InOutComponentReadbackResults)"
  },
  {
    "label": "RegenerateLayersWeightmaps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegenerateLayersWeightmaps(FUpdateLayersContentContext& InUpdateLayersContentContext)"
  },
  {
    "label": "PerformLayersWeightmapsLocalMerge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerformLayersWeightmapsLocalMerge(FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersWeightmapMergeParams& InMergeParams)"
  },
  {
    "label": "PerformLayersWeightmapsGlobalMerge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerformLayersWeightmapsGlobalMerge(FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersWeightmapMergeParams& InMergeParams)"
  },
  {
    "label": "PerformLayersWeightmapsBatchedMerge()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PerformLayersWeightmapsBatchedMerge(FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersWeightmapMergeParams& InMergeParams)"
  },
  {
    "label": "ResolveLayersWeightmapTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveLayersWeightmapTexture(const FTextureToComponentHelper& MapHelper, const TSet<UTexture2D*>& WeightmapsToResolve, bool bIntermediateRender, TArray<FLandscapeEditLayerComponentReadbackResult>& InOutComponentReadbackResults)"
  },
  {
    "label": "HasTextureDataChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTextureDataChanged(TArrayView<const FColor> InOldData, TArrayView<const FColor> InNewData, bool bInIsWeightmap, uint64 InPreviousHash, uint64& OutNewHash, TOptional<uint8>& OutChangedWeightmapChannelsMasks)"
  },
  {
    "label": "ResolveLayersTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveLayersTexture(FTextureToComponentHelper const& MapHelper, FLandscapeEditLayerReadback* InCPUReadBack, UTexture2D* InOutputTexture, bool bIntermediateRender, TArray<FLandscapeEditLayerComponentReadbackResult>& InOutComponentReadbackResults, bool bIsWeightmap)"
  },
  {
    "label": "IsUpdateFlagEnabledForModes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUpdateFlagEnabledForModes(ELandscapeComponentUpdateFlag InFlag, uint32 InUpdateModes)"
  },
  {
    "label": "UpdateForChangedHeightmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateForChangedHeightmaps(const TArrayView<FLandscapeEditLayerComponentReadbackResult>& InComponentReadbackResults)"
  },
  {
    "label": "UpdateForChangedWeightmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateForChangedWeightmaps(const TArrayView<FLandscapeEditLayerComponentReadbackResult>& InComponentReadbackResults)"
  },
  {
    "label": "UpdateCollisionAndClients()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "UpdateCollisionAndClients(const TArrayView<FLandscapeEditLayerComponentReadbackResult>& Components)"
  },
  {
    "label": "UpdateAfterReadbackResolves()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "UpdateAfterReadbackResolves(const TArrayView<FLandscapeEditLayerComponentReadbackResult>& Components)"
  },
  {
    "label": "PrepareLayersTextureResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareLayersTextureResources(bool bInWaitForStreaming)"
  },
  {
    "label": "PrepareLayersTextureResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareLayersTextureResources(const TArray<FLandscapeLayer>& InLayers, bool bInWaitForStreaming)"
  },
  {
    "label": "PrepareLayersResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareLayersResources(ERHIFeatureLevel::Type InFeatureLevel, bool bInWaitForStreaming)"
  },
  {
    "label": "InvalidateRVTForTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateRVTForTextures(const TSet<UTexture2D*>& InTextures)"
  },
  {
    "label": "PrepareLayersHeightmapsLocalMergeRenderThreadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLayersHeightmapsLocalMergeRenderThreadData(const FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersHeightmapMergeParams& InMergeParams, EditLayersHeightmapLocalMerge_RenderThread::FMergeInfo& OutRenderThreadData)"
  },
  {
    "label": "PrepareLayersWeightmapsLocalMergeRenderThreadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareLayersWeightmapsLocalMergeRenderThreadData(const FUpdateLayersContentContext& InUpdateLayersContentContext, const FEditLayersWeightmapMergeParams& InMergeParams, EditLayersWeightmapLocalMerge_RenderThread::FMergeInfo& OutRenderThreadData)"
  },
  {
    "label": "UpdateLayersMaterialInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLayersMaterialInstances(const TArray<ULandscapeComponent*>& InLandscapeComponents)"
  },
  {
    "label": "PrepareComponentDataToExtractMaterialLayersCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareComponentDataToExtractMaterialLayersCS(const TArray<ULandscapeComponent*>& InLandscapeComponents, const FLandscapeLayer& InLayer, int32 InCurrentWeightmapToProcessIndex, const FIntPoint& InLandscapeBase, class FLandscapeTexture2DResource* InOutTextureData, TArray<struct FLandscapeLayerWeightmapExtractMaterialLayersComponentData>& OutComponentData, TMap<ULandscapeLayerInfoObject*, int32>& OutLayerInfoObjects)"
  },
  {
    "label": "PrepareComponentDataToPackMaterialLayersCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareComponentDataToPackMaterialLayersCS(int32 InCurrentWeightmapToProcessIndex, const FIntPoint& InLandscapeBase, const TArray<ULandscapeComponent*>& InAllLandscapeComponents, TArray<UTexture2D*>& InOutProcessedWeightmaps, TArray<FLandscapeEditLayerReadback*>& OutProcessedCPUReadBacks, TArray<struct FLandscapeLayerWeightmapPackMaterialLayersComponentData>& OutComponentData)"
  },
  {
    "label": "ReallocateLayersWeightmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReallocateLayersWeightmaps(FUpdateLayersContentContext& InUpdateLayersContentContext, const TArray<ULandscapeLayerInfoObject*>& InBrushRequiredAllocations, const TMap<ULandscapeComponent*, TArray<ULandscapeLayerInfoObject*>>* InPerComponentAllocations, bool bInRestrictTextureSharingToTheseComponents)"
  },
  {
    "label": "InitializeLayersWeightmapResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLayersWeightmapResources()"
  },
  {
    "label": "GenerateZeroAllocationPerComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateZeroAllocationPerComponents(const TArray<ALandscapeProxy*>& InAllLandscape, const TMap<ULandscapeLayerInfoObject*, bool>& InWeightmapLayersBlendSubstractive)"
  },
  {
    "label": "GenerateLayersRenderQuad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLayersRenderQuad(const FIntPoint& InVertexPosition, float InVertexSize, const FVector2D& InUVStart, const FVector2D& InUVSize, TArray<struct FLandscapeLayersTriangle>& OutTriangles)"
  },
  {
    "label": "GenerateLayersRenderQuadsAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLayersRenderQuadsAtlas(const FIntPoint& InSectionBase, const FVector2D& InScaleBias, float InSubSectionSizeQuad, const FIntPoint& InReadSize, const FIntPoint& InWriteSize, TArray<struct FLandscapeLayersTriangle>& OutTriangles)"
  },
  {
    "label": "GenerateLayersRenderQuadsAtlasToNonAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLayersRenderQuadsAtlasToNonAtlas(const FIntPoint& InSectionBase, const FVector2D& InScaleBias, float InSubSectionSizeQuad, const FIntPoint& InReadSize, const FIntPoint& InWriteSize, TArray<struct FLandscapeLayersTriangle>& OutTriangles)"
  },
  {
    "label": "GenerateLayersRenderQuadsNonAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLayersRenderQuadsNonAtlas(const FIntPoint& InSectionBase, const FVector2D& InScaleBias, float InSubSectionSizeQuad, const FIntPoint& InReadSize, const FIntPoint& InWriteSize, TArray<struct FLandscapeLayersTriangle>& OutTriangles)"
  },
  {
    "label": "GenerateLayersRenderQuadsNonAtlasToAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLayersRenderQuadsNonAtlasToAtlas(const FIntPoint& InSectionBase, const FVector2D& InScaleBias, float InSubSectionSizeQuad, const FIntPoint& InReadSize, const FIntPoint& InWriteSize, TArray<struct FLandscapeLayersTriangle>& OutTriangles)"
  },
  {
    "label": "GenerateLayersRenderQuadsMip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLayersRenderQuadsMip(const FIntPoint& InSectionBase, const FVector2D& InScaleBias, float InSubSectionSizeQuad, const FIntPoint& InReadSize, const FIntPoint& InWriteSize, uint8 InCurrentMip, TArray<FLandscapeLayersTriangle>& OutTriangles)"
  },
  {
    "label": "ClearLayersWeightmapTextureResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLayersWeightmapTextureResource(const FString& InDebugName, FTextureRenderTargetResource* InTextureResourceToClear)"
  },
  {
    "label": "DrawHeightmapComponentsToRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHeightmapComponentsToRenderTarget(const FString& InDebugName, const TArray<ULandscapeComponent*>& InComponentsToDraw, const FIntPoint& InLandscapeBase, UTexture* InHeightmapRTRead, UTextureRenderTarget2D* InOptionalHeightmapRTRead2, UTextureRenderTarget2D* InHeightmapRTWrite, ERTDrawingType InDrawType, bool InClearRTWrite, struct FLandscapeLayersHeightmapShaderParameters& InShaderParams, uint8 InMipRender = 0)"
  },
  {
    "label": "DrawWeightmapComponentsToRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWeightmapComponentsToRenderTarget(const FString& InDebugName, const TArray<FIntPoint>& InSectionBaseList, const FVector2f& InScaleBias, TArray<FVector2f>* InScaleBiasPerSection, UTexture* InWeightmapRTRead, UTextureRenderTarget2D* InOptionalWeightmapRTRead2, UTextureRenderTarget2D* InWeightmapRTWrite, ERTDrawingType InDrawType, bool InClearRTWrite, struct FLandscapeLayersWeightmapShaderParameters& InShaderParams, uint8 InMipRender)"
  },
  {
    "label": "DrawWeightmapComponentsToRenderTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWeightmapComponentsToRenderTarget(const FString& InDebugName, const TArray<ULandscapeComponent*>& InComponentsToDraw, const FIntPoint& InLandscapeBase, UTexture* InWeightmapRTRead, UTextureRenderTarget2D* InOptionalWeightmapRTRead2, UTextureRenderTarget2D* InWeightmapRTWrite, ERTDrawingType InDrawType, bool InClearRTWrite, struct FLandscapeLayersWeightmapShaderParameters& InShaderParams, uint8 InMipRender)"
  },
  {
    "label": "DrawHeightmapComponentsToRenderTargetMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHeightmapComponentsToRenderTargetMips(const TArray<ULandscapeComponent*>& InComponentsToDraw, const FIntPoint& InLandscapeBase, UTexture* InReadHeightmap, bool InClearRTWrite, struct FLandscapeLayersHeightmapShaderParameters& InShaderParams)"
  },
  {
    "label": "DrawWeightmapComponentToRenderTargetMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWeightmapComponentToRenderTargetMips(const TArray<FVector2f>& InTexturePositionsToDraw, UTexture* InReadWeightmap, bool InClearRTWrite, struct FLandscapeLayersWeightmapShaderParameters& InShaderParams)"
  },
  {
    "label": "CopyTexturePS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTexturePS(const FString& InSourceDebugName, FTextureResource* InSourceResource, const FString& InDestDebugName, FTextureResource* InDestResource)"
  },
  {
    "label": "InitializeLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLayers(bool bUseNormalCapture)"
  },
  {
    "label": "PrintLayersDebugRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintLayersDebugRT(const FString& InContext, UTextureRenderTarget2D* InDebugRT, uint8 InMipRender = 0, bool InOutputHeight = true, bool InOutputNormals = false)"
  },
  {
    "label": "PrintLayersDebugTextureResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintLayersDebugTextureResource(const FString& InContext, FTextureResource* InTextureResource, uint8 InMipRender = 0, bool InOutputHeight = true, bool InOutputNormals = false)"
  },
  {
    "label": "PrintLayersDebugHeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintLayersDebugHeightData(const FString& InContext, const TArray<FColor>& InHeightmapData, const FIntPoint& InDataSize, uint8 InMipRender, bool InOutputNormals = false)"
  },
  {
    "label": "PrintLayersDebugWeightData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintLayersDebugWeightData(const FString& InContext, const TArray<FColor>& InWeightmapData, const FIntPoint& InDataSize, uint8 InMipRender)"
  },
  {
    "label": "UpdateWeightDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWeightDirtyData(ULandscapeComponent* InLandscapeComponent, UTexture2D const* InWeightmap, FColor const* InOldData, FColor const* InNewData, uint8 InChannel)"
  },
  {
    "label": "OnDirtyWeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirtyWeightmap(FTextureToComponentHelper const& MapHelper, UTexture2D const* InWeightmap, FColor const* InOldData, FColor const* InNewData, int32 InMipLevel, uint8 ChangedChannelsMask)"
  },
  {
    "label": "UpdateHeightDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHeightDirtyData(ULandscapeComponent* InLandscapeComponent, UTexture2D const* InHeightmap, FColor const* InOldData, FColor const* InNewData)"
  },
  {
    "label": "OnDirtyHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirtyHeightmap(FTextureToComponentHelper const& MapHelper, UTexture2D const* InWeightmap, FColor const* InOldData, FColor const* InNewData, int32 InMipLevel)"
  },
  {
    "label": "IsMaterialResourceCompiled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialResourceCompiled(FMaterialResource* InMaterialResource, bool bInWaitForCompilation)"
  },
  {
    "label": "MarkAllLandscapeRenderStateDirty()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "MarkAllLandscapeRenderStateDirty()"
  },
  {
    "label": "RenderMergedTextureInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderMergedTextureInternal(const FTransform& InRenderAreaWorldTransform, const FBox2D& InRenderAreaExtents, const TArray<FName>& InWeightmapLayerNames, UTextureRenderTarget* OutRenderTarget)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(ALandscape, FLandscapeBlueprintBrushChangedDelegate)"
  },
  {
    "label": "OnBlueprintBrushChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FLandscapeBlueprintBrushChangedDelegate&)",
    "insertText": "OnBlueprintBrushChangedDelegate()"
  },
  {
    "label": "OnEditLayersMerged()",
    "kind": "Method",
    "detail": "Function (FOnEditLayersMergedDelegate::RegistrationType&)",
    "insertText": "OnEditLayersMerged()"
  },
  {
    "label": "FLandscapeEdModeInfo()",
    "kind": "Method",
    "detail": "Function (ILandscapeEdModeInterface* LandscapeEdMode ; struct FLandscapeEdModeInfo {)",
    "insertText": "FLandscapeEdModeInfo()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (ELandscapeEditLayersMergeMode CurrentEditLayersMergeMode = ELandscapeEditLayersMergeMode::GlobalMerge ; struct FWaitingForResourcesNotificationHelper { void)",
    "insertText": "Notify(ALandscape* InLandscape, class FLandscapeNotificationManager* InNotificationManager, ELandscapeNotificationType InNotificationType, const FText& InNotificationText)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FScopedSetLandscapeEditingLayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedSetLandscapeEditingLayer()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : TWeakObjectPtr<ALandscape> Landscape ; FGuid PreviousLayerGUID ; TFunction<)",
    "insertText": "void()"
  }
]