[
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FCbPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbPackage"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FCacheRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheRecord"
  },
  {
    "label": "FOptionalCacheRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOptionalCacheRecord"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValue"
  },
  {
    "label": "FValueWithId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValueWithId"
  },
  {
    "label": "IRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRequestOwner"
  },
  {
    "label": "ICacheRecordInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheRecordInternal"
  },
  {
    "label": "ICacheRecordBuilderInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheRecordBuilderInternal"
  },
  {
    "label": "FCacheRecordBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheRecordBuilder"
  },
  {
    "label": "FCacheRecordKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheRecordKeyFuncs"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" DerivedDataCacheKey . h \" # include \" DerivedDataValueId . h \" # include \" HAL / Platform . h \" # include \" Memory / MemoryFwd . h \" # include \" Misc / ScopeExit . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # define class FCbObject ; class FCbPackage ; class FCbWriter ; namespace UE::DerivedData { class FCacheRecord ; } namespace UE::DerivedData { class FOptionalCacheRecord ; } namespace UE::DerivedData { class FValue ; } namespace UE::DerivedData { class FValueWithId ; } namespace UE::DerivedData { class IRequestOwner ; } namespace UE::DerivedData { using FOnCacheRecordComplete = TUniqueFunction<)",
    "insertText": "void(FCacheRecord&& Record)"
  },
  {
    "label": "ICacheRecordInternal()",
    "kind": "Method",
    "detail": "Function (} namespace UE::DerivedData::Private { class ICacheRecordInternal { public : ~)",
    "insertText": "ICacheRecordInternal()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FCacheKey&)",
    "insertText": "GetKey()"
  },
  {
    "label": "GetMeta()",
    "kind": "Method",
    "detail": "Function (const FCbObject&)",
    "insertText": "GetMeta()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FValueWithId&)",
    "insertText": "GetValue(const FValueId& Id)"
  },
  {
    "label": "GetValues()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FValueWithId>)",
    "insertText": "GetValues()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "CreateCacheRecord()",
    "kind": "Method",
    "detail": "Function (} ; FCacheRecord)",
    "insertText": "CreateCacheRecord(ICacheRecordInternal* Record)"
  },
  {
    "label": "ICacheRecordBuilderInternal()",
    "kind": "Method",
    "detail": "Function (class ICacheRecordBuilderInternal { public : ~)",
    "insertText": "ICacheRecordBuilderInternal()"
  },
  {
    "label": "SetMeta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeta(FCbObject&& Meta)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FValue& Value)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (FCacheRecord)",
    "insertText": "Build()"
  },
  {
    "label": "BuildAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAsync(IRequestOwner& Owner, FOnCacheRecordComplete&& OnComplete)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (} FCbPackage)",
    "insertText": "Save()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FCbPackage& Attachments, FCbWriter& Writer)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (FOptionalCacheRecord)",
    "insertText": "Load(const FCbPackage& Package)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (FOptionalCacheRecord)",
    "insertText": "Load(const FCbPackage& Attachments, const FCbObject& Object)"
  },
  {
    "label": "CreateCacheRecord()",
    "kind": "Method",
    "detail": "Function (private : class FOptionalCacheRecord ; FCacheRecord)",
    "insertText": "CreateCacheRecord(Private::ICacheRecordInternal* Record)"
  },
  {
    "label": "FCacheRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCacheRecord(Private::ICacheRecordInternal* InRecord) : Record(InRecord)"
  },
  {
    "label": "FCacheRecordBuilder()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<Private::ICacheRecordInternal> Record ; } ; class FCacheRecordBuilder { public :)",
    "insertText": "FCacheRecordBuilder(const FCacheKey& Key)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddValue(const FValueId& Id, const FCompositeBuffer& Buffer, uint64 BlockSize = 0)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueId& Id, const FSharedBuffer& Buffer, uint64 BlockSize = 0)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const FValueWithId& Value)"
  },
  {
    "label": "FOptionalCacheRecord()",
    "kind": "Method",
    "detail": "Function (} private : TUniquePtr<Private::ICacheRecordBuilderInternal> RecordBuilder ; } ; class FOptionalCacheRecord : private FCacheRecord { public :)",
    "insertText": "FOptionalCacheRecord() : FCacheRecord(nullptr)"
  },
  {
    "label": "FOptionalCacheRecord()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalCacheRecord(FCacheRecord&& InRecord) : FCacheRecord(MoveTemp(InRecord))"
  },
  {
    "label": "FOptionalCacheRecord()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalCacheRecord(const FCacheRecord& InRecord) : FCacheRecord(InRecord)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FOptionalCacheRecord&)",
    "insertText": "operator(FCacheRecord&& InRecord)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(MoveTemp(InRecord))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(InRecord)"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FOptionalCacheRecord()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FOptionalCacheRecord()"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace UE::DerivedData { struct FCacheRecordKeyFuncs { using KeyType = FCacheKey ; using KeyInitType = const FCacheKey& ; using ElementInitType = const FCacheRecord& ; bool bAllowDuplicateKeys = false ; KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Record)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(KeyInitType Key)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(KeyInitType A, KeyInitType B)"
  }
]