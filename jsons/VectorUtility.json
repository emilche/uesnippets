[
  {
    "label": "TVectorZero()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "TVectorZero()"
  },
  {
    "label": "VectorZeroFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorZeroFloat()"
  },
  {
    "label": "VectorZeroDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorZeroDouble()"
  },
  {
    "label": "TMakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "TMakeVectorRegister(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  },
  {
    "label": "TMakeVectorRegisterConstant()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "TMakeVectorRegisterConstant(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegisterFloatConstant()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloatConstant(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDoubleConstant()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDoubleConstant(X, Y, Z, W)"
  },
  {
    "label": "TMakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "TMakeVectorRegisterFloatFromDouble(const T& V)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloatFromDouble(V)"
  },
  {
    "label": "VectorRegister4Float()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Float(V)"
  },
  {
    "label": "_mm_castsi128_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_castsi128_ps(V)"
  },
  {
    "label": "VectorCastIntToFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCastIntToFloat(Vec)"
  },
  {
    "label": "VectorRegister4Int()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Int(V)"
  },
  {
    "label": "_mm_castps_si128()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_castps_si128(V)"
  },
  {
    "label": "VectorCastFloatToInt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCastFloatToInt(Vec)"
  },
  {
    "label": "vzip1q_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vzip1q_f32(A, B)"
  },
  {
    "label": "_mm_unpacklo_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_unpacklo_ps(A, B)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(A.V[0], B.V[0], A.V[1], B.V[1])"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(A.V[0], B.V[0], A.V[1], B.V[1])"
  },
  {
    "label": "vzip2q_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vzip2q_f32(A, B)"
  },
  {
    "label": "_mm_unpackhi_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_unpackhi_ps(A, B)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(A.V[2], B.V[2], A.V[3], B.V[3])"
  },
  {
    "label": "vzip1q_f64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vzip1q_f64(A, B)"
  },
  {
    "label": "VectorCombineLow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCombineLow(A, B)"
  },
  {
    "label": "vcombine_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vcombine_f32(sum, sum)"
  },
  {
    "label": "_mm_dp_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_dp_ps(Vec1, Vec2, 0xFF)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorDot3(Vec1, Vec2)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCross(Vec1, Vec2)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSwizzle(A, 1, 2, 0, 3)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCross(Vec1, Vec2)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCross(Vec1, Vec2)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSwizzle(A, 1, 2, 0, 3)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorCross(Vec1, Vec2)"
  },
  {
    "label": "_mm_andnot_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_andnot_ps(A, B)"
  }
]