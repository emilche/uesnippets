[
  {
    "label": "FSessionLogMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionLogMessage"
  },
  {
    "label": "ISessionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISessionInfo"
  },
  {
    "label": "GetInstances()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISessionInstanceInfo . h \" struct FSessionLogMessage ; class ISessionInfo { public : void)",
    "insertText": "GetInstances(TArray<TSharedPtr<ISessionInstanceInfo>>& OutInstances)"
  },
  {
    "label": "GetLastUpdateTime()",
    "kind": "Method",
    "detail": "Function (const FDateTime&)",
    "insertText": "GetLastUpdateTime()"
  },
  {
    "label": "GetNumInstances()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetNumInstances()"
  },
  {
    "label": "GetSessionId()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetSessionId()"
  },
  {
    "label": "GetSessionName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetSessionName()"
  },
  {
    "label": "GetSessionOwner()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetSessionOwner()"
  },
  {
    "label": "IsStandalone()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsStandalone()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT_TwoParams(ISessionInfo, FInstanceDiscoveredEvent, const TSharedRef<ISessionInfo>& , const TSharedRef<ISessionInstanceInfo>& ) virtual FInstanceDiscoveredEvent& OnInstanceDiscovered()"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(ISessionInfo, FLogReceivedEvent, const TSharedRef<ISessionInfo>& , const TSharedRef<ISessionInstanceInfo>& , const TSharedRef<FSessionLogMessage>&)"
  },
  {
    "label": "OnLogReceived()",
    "kind": "Method",
    "detail": "Function (FLogReceivedEvent&)",
    "insertText": "OnLogReceived()"
  },
  {
    "label": "ISessionInfo()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "ISessionInfo()"
  }
]