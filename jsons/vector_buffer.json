[
  {
    "label": "VectorBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorBuffer"
  },
  {
    "label": "VectorBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_VECTOR_BUFFER_H_ # define BASE_CONTAINERS_VECTOR_BUFFER_H_ # include<stdlib . h> # include<string . h> # include<type_traits> # include<utility> # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / containers / util . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" base / numerics / checked_math . h \" namespace base { namespace internal { template<T> class VectorBuffer { public :)",
    "insertText": "VectorBuffer()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) && !defined(__native_client__) __attribute__((no_sanitize(\"cfi-unrelated-cast\", \"vptr\"))) #endif VectorBuffer(size_t count) : buffer_(reinterpret_cast<T*>( malloc(CheckMul(sizeof(T), count).ValueOrDie()))), capacity_(count)"
  },
  {
    "label": "VectorBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VectorBuffer(VectorBuffer&& other) noexcept : buffer_(other.buffer_), capacity_(other.capacity_)"
  },
  {
    "label": "VectorBuffer()",
    "kind": "Method",
    "detail": "Function (other . buffer_ = nullptr ; other . capacity_ = 0 ; })",
    "insertText": "VectorBuffer(const VectorBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VectorBuffer&)",
    "insertText": "operator(const VectorBuffer&)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(buffer_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} VectorBuffer&)",
    "insertText": "operator(VectorBuffer&& other)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (buffer_ = other . buffer_ ; capacity_ = other . capacity_ ; other . buffer_ = nullptr ; other . capacity_ = 0 ; return* this ; } size_t)",
    "insertText": "capacity()"
  },
  {
    "label": "DestructRange()",
    "kind": "Method",
    "detail": "Function (} template<T2 = T,std::enable_if<! std::is_trivially_destructible<T2>::value,int>::type = 0> void)",
    "insertText": "DestructRange(T* begin, T* end)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (begin -> ~)",
    "insertText": "T()"
  },
  {
    "label": "MoveRange()",
    "kind": "Method",
    "detail": "Function (begin + + ; } } template<T2 = T,std::enable_if<std::is_trivially_copyable_v<T2>,int>::type = 0> void)",
    "insertText": "MoveRange(T* from_begin, T* from_end, T* to)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(to, from_begin, CheckSub(get_uintptr(from_end), get_uintptr(from_begin)).ValueOrDie())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(to) T(std::move(*from_begin))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(to) T(*from_begin)"
  },
  {
    "label": "RangesOverlap()",
    "kind": "Method",
    "detail": "Function (from_begin + + ; to + + ; } } private : bool)",
    "insertText": "RangesOverlap(const T* from_begin, const T* from_end, const T* to)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto from_begin_uintptr =)",
    "insertText": "get_uintptr(from_begin)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto from_end_uintptr =)",
    "insertText": "get_uintptr(from_end)"
  },
  {
    "label": "get_uintptr()",
    "kind": "Method",
    "detail": "Function (const auto to_uintptr =)",
    "insertText": "get_uintptr(to)"
  }
]