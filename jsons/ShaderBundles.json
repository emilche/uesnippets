[
  {
    "label": "FDispatchShaderBundleCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDispatchShaderBundleCS"
  },
  {
    "label": "FBundleMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBundleMode"
  },
  {
    "label": "FDispatchShaderBundleWorkGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDispatchShaderBundleWorkGraph"
  },
  {
    "label": "FEntryNodeRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntryNodeRecord"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GlobalShader . h \" class FDispatchShaderBundleCS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FDispatchShaderBundleCS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_PERMUTATION_INT()",
    "kind": "Method",
    "detail": "Function (class FBundleMode :)",
    "insertText": "SHADER_PERMUTATION_INT(\"BUNDLE_MODE\", 3)"
  },
  {
    "label": "FDispatchShaderBundleCS()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FBundleMode> ; public :)",
    "insertText": "FDispatchShaderBundleCS()"
  },
  {
    "label": "FDispatchShaderBundleCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDispatchShaderBundleCS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (RootConstantsParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"PassData\"), SPF_Optional)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (RecordArgBufferParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"RecordArgBuffer\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (RecordDataBufferParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"RecordDataBuffer\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (RWExecutionBufferParam .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"RWExecutionBuffer\"), SPF_Mandatory)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} const uint32 ThreadGroupSizeX = 6 4 ;)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, RootConstantsParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, RecordArgBufferParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, RecordDataBufferParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, RWExecutionBufferParam)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FDispatchShaderBundleWorkGraph : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FDispatchShaderBundleWorkGraph, RENDERCORE_API)"
  },
  {
    "label": "FDispatchShaderBundleWorkGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDispatchShaderBundleWorkGraph()"
  },
  {
    "label": "FDispatchShaderBundleWorkGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDispatchShaderBundleWorkGraph(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "GetMaxShaderBundleSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxShaderBundleSize()"
  },
  {
    "label": "MakeInputRecord()",
    "kind": "Method",
    "detail": "Function (struct FEntryNodeRecord { uint32 DispatchGridSize ; uint32 RecordCount ; FUintPoint PlatformData ; } ; FEntryNodeRecord)",
    "insertText": "MakeInputRecord(uint32 RecordCount, uint32 ArgOffset, uint32 ArgStride)"
  }
]