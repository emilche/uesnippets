[
  {
    "label": "TActionFilterCacheKeyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActionFilterCacheKeyNode"
  },
  {
    "label": "TActionFilterCacheLeaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActionFilterCacheLeaf"
  },
  {
    "label": "FActionFilterCacheKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActionFilterCacheKey"
  },
  {
    "label": "FActionFilterCacheNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActionFilterCacheNode"
  },
  {
    "label": "FActionFilterCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActionFilterCache"
  },
  {
    "label": "FActionFilterCacheKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintActionFilter . h \" # include \" HAL / IConsoleManager . h \" template<TKeyType> class TActionFilterCacheKeyNode ; template<TKeyType> class TActionFilterCacheLeaf ; struct FActionFilterCacheKey { uint32 KeyHash ;)",
    "insertText": "FActionFilterCacheKey(const FBlueprintActionInfo& InAction)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FActionFilterCacheKey& A, const FActionFilterCacheKey& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FActionFilterCacheKey& InKey)"
  },
  {
    "label": "FActionFilterCacheNode()",
    "kind": "Method",
    "detail": "Function (class FActionFilterCacheNode : public TSharedFromThis<FActionFilterCacheNode> { public : template<TKeyType> class TActionFilterCacheKeyNode ; using FWeakNode = TWeakPtr<FActionFilterCacheNode> ; template<TKeyType> using TWeakKeyNode = TWeakPtr<TActionFilterCacheKeyNode<TKeyType>> ; template<TKeyType> using TWeakLeaf = TWeakPtr<TActionFilterCacheLeaf<TKeyType>> ; using FSharedNode = TSharedPtr<FActionFilterCacheNode> ; template<TKeyType> using TSharedKeyNode = TSharedPtr<TActionFilterCacheKeyNode<TKeyType>> ; template<TKeyType> using TSharedLeaf = TSharedPtr<TActionFilterCacheLeaf<TKeyType>> ;)",
    "insertText": "FActionFilterCacheNode()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (template<TKeyType> TSharedKeyNode<TKeyType>)",
    "insertText": "Find(const TKeyType& Key)"
  },
  {
    "label": "FindOrCacheChildNode()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } template<TKeyType> TSharedKeyNode<TKeyType>)",
    "insertText": "FindOrCacheChildNode(const TKeyType& Key, const FString& InDebugName = FString(), TDelegate<bool(const TKeyType&, const TKeyType&)> Comparison = nullptr, bool* OutFoundWithoutCaching = nullptr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedKeyNode<TKeyType> Result =)",
    "insertText": "Find(Key)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (* OutFoundWithoutCaching = Result .)",
    "insertText": "IsValid()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Result.IsValid())"
  },
  {
    "label": "FindOrCacheChildLeaf()",
    "kind": "Method",
    "detail": "Function (} template<TKeyType> TSharedLeaf<TKeyType>)",
    "insertText": "FindOrCacheChildLeaf(const TKeyType& Key, const FString& InDebugName = FString(), TDelegate<bool(const TKeyType&, const TKeyType&)> Comparison = nullptr, bool* OutFoundWithoutCaching = nullptr)"
  },
  {
    "label": "TKeyType()",
    "kind": "Method",
    "detail": "Function (TSharedLeaf<TKeyType> Leaf = StaticCastSharedPtr<TActionFilterCacheLeaf<)",
    "insertText": "TKeyType(Result)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (+ + Leaf -> AccessCount ; return Leaf ; } # if UE_BUILD_DEBUG DebugName = InDebugName ; # endif return)",
    "insertText": "Cache(new TActionFilterCacheLeaf<TKeyType>(Key, Comparison))"
  },
  {
    "label": "GetLeafAccessCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLeafAccessCount()"
  },
  {
    "label": "DecrementLeafAccessCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecrementLeafAccessCount()"
  },
  {
    "label": "KeysMatch()",
    "kind": "Method",
    "detail": "Function (} # if UE_BUILD_DEBUG FString DebugName ; # endif protected : bool)",
    "insertText": "KeysMatch(const void* RawKey)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (} template<TNodeType> TSharedPtr<TNodeType>)",
    "insertText": "Cache(TNodeType* Child)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (Child -> Parent =)",
    "insertText": "AsShared()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Emplace(MakeShareable<FActionFilterCacheNode>(Child))"
  },
  {
    "label": "FActionFilterCache()",
    "kind": "Method",
    "detail": "Function (} TArray<FSharedNode> Children ; FWeakNode Parent ; } ; class FActionFilterCache { public :)",
    "insertText": "FActionFilterCache()"
  },
  {
    "label": "OnReloadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReloadComplete(EReloadCompleteReason Reason)"
  },
  {
    "label": "OnModuleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModuleChanged(FName ModuleName, EModuleChangeReason ChangeReason)"
  },
  {
    "label": "ClearAllCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCache()"
  },
  {
    "label": "GetCachedFilterResults()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<TMap<FActionFilterCacheKey,bool>>)",
    "insertText": "GetCachedFilterResults(const FBlueprintActionFilter& Filter)"
  },
  {
    "label": "FindOrCacheChildNode()",
    "kind": "Method",
    "detail": "Function (template<TKeyType> void)",
    "insertText": "FindOrCacheChildNode(TSharedPtr<FActionFilterCacheNode>& Current, const TKeyType& Key, FString DebugName, TDelegate<bool(const TKeyType&, const TKeyType&)> Comparison = nullptr)"
  },
  {
    "label": "FindOrCacheChildNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<TActionFilterCacheKeyNode<TKeyType>> Found = Current ->)",
    "insertText": "FindOrCacheChildNode(Key, DebugName, Comparison)"
  },
  {
    "label": "FActionFilterCacheNode()",
    "kind": "Method",
    "detail": "Function (Current = StaticCastSharedPtr<)",
    "insertText": "FActionFilterCacheNode(Found)"
  },
  {
    "label": "FindOrCacheLeaf()",
    "kind": "Method",
    "detail": "Function (} template<TKeyType> void)",
    "insertText": "FindOrCacheLeaf(TSharedPtr<FActionFilterCacheNode>& Current, const TKeyType& Key, FString DebugName, TDelegate<bool(const TKeyType&, const TKeyType&)> Comparison = nullptr)"
  },
  {
    "label": "FindOrCacheChildLeaf()",
    "kind": "Method",
    "detail": "Function (bool bFoundWithoutCaching = false ; TSharedPtr<TActionFilterCacheLeaf<TKeyType>> Found = Current ->)",
    "insertText": "FindOrCacheChildLeaf(Key, DebugName, Comparison, &bFoundWithoutCaching)"
  },
  {
    "label": "PopCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopCache()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} CacheLeafs .)",
    "insertText": "Push(Found)"
  },
  {
    "label": "CacheFilteredResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheFilteredResult(const FBlueprintActionFilter& Filter, FBlueprintActionInfo& BlueprintAction, bool bWasFilteredOut)"
  },
  {
    "label": "IsFilteredByCachedResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilteredByCachedResult(const FBlueprintActionFilter& Filter, FBlueprintActionInfo& BlueprintAction)"
  }
]