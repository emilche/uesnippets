[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IMediaControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaControls"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Range . h \" # include \" Math / RangeSet . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Timespan . h \" enum class EMediaControl { BlockOnFetch,Pause,Resume,Scrub,Seek,PlaybackRange } ; enum class EMediaSeekDirection { Backward,Beginning,End,Forward } ; enum class EMediaRateThinning { Thinned,Unthinned } ; enum class EMediaState { Closed,Error,Paused,Playing,Preparing,Stopped } ; enum class EMediaStatus { None = 0 x0,Buffering = 0 x1,Connecting = 0 x2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMediaStatus)"
  },
  {
    "label": "CanControl()",
    "kind": "Method",
    "detail": "Function (enum class EMediaTimeRangeType { Absolute,Current } ; class IMediaControls { public : bool)",
    "insertText": "CanControl(EMediaControl Control)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRate()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (EMediaState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (EMediaStatus)",
    "insertText": "GetStatus()"
  },
  {
    "label": "GetSupportedRates()",
    "kind": "Method",
    "detail": "Function (TRangeSet<float>)",
    "insertText": "GetSupportedRates(EMediaRateThinning Thinning)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetTime()"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seek(const FTimespan& Time)"
  },
  {
    "label": "SetLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLooping(bool Looping)"
  },
  {
    "label": "SetRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRate(float Rate)"
  },
  {
    "label": "SetBlockingPlaybackHint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockingPlaybackHint(bool bFacadeWillUseBlockingPlayback)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Pause()"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Play()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Seek(const FTimespan& TimeOffset, EMediaSeekDirection Direction)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (FTimespan SeekTime ;)",
    "insertText": "switch(Direction)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (break ; } return)",
    "insertText": "Seek(SeekTime)"
  },
  {
    "label": "GetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (} TRange<FTimespan>)",
    "insertText": "GetPlaybackTimeRange(EMediaTimeRangeType InRangeToGet)"
  },
  {
    "label": "SetPlaybackTimeRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetPlaybackTimeRange(const TRange<FTimespan>& InTimeRange)"
  }
]