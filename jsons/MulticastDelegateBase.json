[
  {
    "label": "TMulticastDelegateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMulticastDelegateBase"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Delegates / DelegateBase . h \" # if !)",
    "insertText": "defined(NUM_MULTICAST_DELEGATE_INLINE_ENTRIES)"
  },
  {
    "label": "TMulticastDelegateBase()",
    "kind": "Method",
    "detail": "Function (# elif NUM_MULTICAST_DELEGATE_INLINE_ENTRIES<0 # error NUM_MULTICAST_DELEGATE_INLINE_ENTRIES must be positive # else typedef TInlineAllocator<NUM_MULTICAST_DELEGATE_INLINE_ENTRIES> FMulticastInvocationListAllocatorType ; # endif # define UE_MULTICAST_DELEGATE_DEFAULT_COMPACTION_THRESHOLD 2 template<UserPolicy> class TMulticastDelegateBase : public TDelegateAccessHandlerBase<UserPolicy::FThreadSafetyMode> { protected : using Super = TDelegateAccessHandlerBase<UserPolicy::FThreadSafetyMode> ; using Super::FReadAccessScope ; using Super::GetReadAccessScope ; using Super::FWriteAccessScope ; using Super::GetWriteAccessScope ; using UnicastDelegateType = TDelegateBase<FNotThreadSafeNotCheckedDelegateMode> ; using InvocationListType = TArray<UnicastDelegateType,FMulticastInvocationListAllocatorType> ; public :)",
    "insertText": "TMulticastDelegateBase(TMulticastDelegateBase&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMulticastDelegateBase&)",
    "insertText": "operator(TMulticastDelegateBase&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (LocalInvocationList =)",
    "insertText": "MoveTemp(Other.InvocationList)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (LocalCompactionThreshold = Other . CompactionThreshold ; Other . CompactionThreshold = UE_MULTICAST_DELEGATE_DEFAULT_COMPACTION_THRESHOLD ;)",
    "insertText": "checkf(Other.InvocationListLockCount == 0, TEXT(\"Moving from a multicast delegate while it is mid broadcast\"))"
  },
  {
    "label": "GetWriteAccessScope()",
    "kind": "Method",
    "detail": "Function (} { FWriteAccessScope ThisWriteScope =)",
    "insertText": "GetWriteAccessScope()"
  },
  {
    "label": "ClearUnchecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnchecked()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (InvocationList =)",
    "insertText": "MoveTemp(LocalInvocationList)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (CompactionThreshold = LocalCompactionThreshold ;)",
    "insertText": "checkf(InvocationListLockCount == 0, TEXT(\"Moving to a multicast delegate while it is mid broadcast\"))"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} return* this ; } void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "GetReadAccessScope()",
    "kind": "Method",
    "detail": "Function (FReadAccessScope ReadScope =)",
    "insertText": "GetReadAccessScope()"
  },
  {
    "label": "GetDelegateInstanceProtected()",
    "kind": "Method",
    "detail": "Function (const IDelegateInstance* DelegateInstance = DelegateBaseRef .)",
    "insertText": "GetDelegateInstanceProtected()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Result = 0 ;)",
    "insertText": "if(InvocationListLockCount > 0)"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (DelegateBaseRef .)",
    "insertText": "Unbind()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + Result ; } })",
    "insertText": "if(Result > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CompactionThreshold = 0 ; } } else {)",
    "insertText": "for(int32 InvocationListIndex = 0; InvocationListIndex < InvocationList.Num();)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "RemoveAtSwap(InvocationListIndex, EAllowShrinking::No)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (+ + Result ; } else { InvocationListIndex + + ; } } CompactionThreshold =)",
    "insertText": "Max(UE_MULTICAST_DELEGATE_DEFAULT_COMPACTION_THRESHOLD, 2 * InvocationList.Num())"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "Shrink()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} return Result ; } SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "TMulticastDelegateBase()",
    "kind": "Method",
    "detail": "Function (} return Size ; } protected :)",
    "insertText": "TMulticastDelegateBase() : CompactionThreshold(UE_MULTICAST_DELEGATE_DEFAULT_COMPACTION_THRESHOLD) , InvocationListLockCount(0)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} protected : template<DelegateInstanceInterfaceType> void)",
    "insertText": "CopyFrom(const TMulticastDelegateBase& Other)"
  },
  {
    "label": "DelegateInstanceInterfaceType()",
    "kind": "Method",
    "detail": "Function (UnicastDelegateType TempDelegate ; static_cast<const)",
    "insertText": "DelegateInstanceInterfaceType(OtherInstance)->CreateCopy(TempDelegate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TempInvocationList .)",
    "insertText": "Add(MoveTemp(TempDelegate))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (InvocationList =)",
    "insertText": "MoveTemp(TempInvocationList)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (} } template<DelegateInstanceInterfaceType,. . . ParamTypes> void)",
    "insertText": "Broadcast(ParamTypes... Params)"
  },
  {
    "label": "TMulticastDelegateBase()",
    "kind": "Method",
    "detail": "Function (FWriteAccessScope WriteScope = const_cast<)",
    "insertText": "TMulticastDelegateBase(this)->GetWriteAccessScope()"
  },
  {
    "label": "LockInvocationList()",
    "kind": "Method",
    "detail": "Function (bool NeedsCompaction = false ;)",
    "insertText": "LockInvocationList()"
  },
  {
    "label": "GetInvocationList()",
    "kind": "Method",
    "detail": "Function ({ const InvocationListType& LocalInvocationList =)",
    "insertText": "GetInvocationList()"
  },
  {
    "label": "UnlockInvocationList()",
    "kind": "Method",
    "detail": "Function (NeedsCompaction = true ; } } })",
    "insertText": "UnlockInvocationList()"
  },
  {
    "label": "TMulticastDelegateBase()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "TMulticastDelegateBase(this)->CompactInvocationList()"
  },
  {
    "label": "AddDelegateInstance()",
    "kind": "Method",
    "detail": "Function (} } template<NewDelegateType> FDelegateHandle)",
    "insertText": "AddDelegateInstance(NewDelegateType&& NewDelegateBaseRef)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle Result ;)",
    "insertText": "if(NewDelegateBaseRef.IsBound())"
  },
  {
    "label": "CompactInvocationList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInvocationList(true)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (Result = NewDelegateBaseRef .)",
    "insertText": "GetHandle()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "Emplace(Forward<NewDelegateType>(NewDelegateBaseRef))"
  },
  {
    "label": "RemoveDelegateInstance()",
    "kind": "Method",
    "detail": "Function (} return Result ; } bool)",
    "insertText": "RemoveDelegateInstance(FDelegateHandle Handle)"
  },
  {
    "label": "CompactInvocationList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInvocationList()"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (InvocationList .)",
    "insertText": "RemoveAtSwap(InvocationListIndex)"
  },
  {
    "label": "GetInvocationListLockCount()",
    "kind": "Method",
    "detail": "Function (- - InvocationListLockCount ; } int32)",
    "insertText": "GetInvocationListLockCount()"
  },
  {
    "label": "CompactInvocationList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CompactInvocationList(false)"
  }
]