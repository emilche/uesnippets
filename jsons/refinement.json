[
  {
    "label": "FVarRefinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVarRefinement"
  },
  {
    "label": "Refinement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Refinement"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Options"
  },
  {
    "label": "SparseTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseTag"
  },
  {
    "label": "ChildTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildTag"
  },
  {
    "label": "Relations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Relations"
  },
  {
    "label": "Refinement()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_VTR_REFINEMENT_H # define OPENSUBDIV3_VTR_REFINEMENT_H # include \" . . / version . h \" # include \" . . / sdc / types . h \" # include \" . . / sdc / options . h \" # include \" . . / vtr / types . h \" # include \" . . / vtr / level . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Vtr { namespace internal { class FVarRefinement ; class Refinement { public :)",
    "insertText": "Refinement(Level const & parent, Level & child, Sdc::Options const& schemeOptions)"
  },
  {
    "label": "Refinement()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Refinement()"
  },
  {
    "label": "parent()",
    "kind": "Method",
    "detail": "Function (Level const&)",
    "insertText": "parent()"
  },
  {
    "label": "getFVarRefinement()",
    "kind": "Method",
    "detail": "Function (} FVarRefinement const&)",
    "insertText": "getFVarRefinement(int c)"
  },
  {
    "label": "refine()",
    "kind": "Method",
    "detail": "Function (} unsigned int _sparse : 1 ; unsigned int _faceVertsFirst : 1 ; unsigned int _minimalTopology : 1 ; } ; void)",
    "insertText": "refine(Options options = Options())"
  },
  {
    "label": "hasFaceVerticesFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFaceVerticesFirst()"
  },
  {
    "label": "getFaceChildEdges()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getFaceChildEdges(Index parentFace)"
  },
  {
    "label": "getEdgeChildEdges()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getEdgeChildEdges(Index parentEdge)"
  },
  {
    "label": "isChildVertexComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isChildVertexComplete(Index v)"
  },
  {
    "label": "SparseTag()",
    "kind": "Method",
    "detail": "Function (public : struct SparseTag {)",
    "insertText": "SparseTag() : _selected(0), _transitional(0)"
  },
  {
    "label": "ChildTag()",
    "kind": "Method",
    "detail": "Function (} unsigned char _selected : 1 ; unsigned char _transitional : 4 ; } ; struct ChildTag {)",
    "insertText": "ChildTag()"
  },
  {
    "label": "getParentFaceSparseTag()",
    "kind": "Method",
    "detail": "Function (} unsigned char _incomplete : 1 ; unsigned char _parentType : 2 ; unsigned char _indexInParent : 2 ; } ; SparseTag const&)",
    "insertText": "getParentFaceSparseTag(Index f)"
  },
  {
    "label": "populateParentChildIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateParentChildIndices()"
  },
  {
    "label": "printParentToChildMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printParentToChildMapping()"
  },
  {
    "label": "allocateParentChildIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocateParentChildIndices()"
  },
  {
    "label": "initializeSparseSelectionTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeSparseSelectionTags()"
  },
  {
    "label": "markSparseChildComponentIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markSparseChildComponentIndices()"
  },
  {
    "label": "markSparseVertexChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markSparseVertexChildren()"
  },
  {
    "label": "markSparseEdgeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markSparseEdgeChildren()"
  },
  {
    "label": "markSparseFaceChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markSparseFaceChildren()"
  },
  {
    "label": "initializeChildComponentCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeChildComponentCounts()"
  },
  {
    "label": "populateChildToParentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateChildToParentMapping()"
  },
  {
    "label": "populateFaceParentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateFaceParentVectors(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateFaceParentFromParentFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateFaceParentFromParentFaces(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateEdgeParentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeParentVectors(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateEdgeParentFromParentFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeParentFromParentFaces(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateEdgeParentFromParentEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeParentFromParentEdges(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateVertexParentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexParentVectors(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateVertexParentFromParentFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexParentFromParentFaces(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateVertexParentFromParentEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexParentFromParentEdges(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "populateVertexParentFromParentVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexParentFromParentVertices(ChildTag const initialChildTags[2][4])"
  },
  {
    "label": "propagateComponentTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "propagateComponentTags()"
  },
  {
    "label": "populateFaceTagVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateFaceTagVectors()"
  },
  {
    "label": "populateFaceTagsFromParentFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateFaceTagsFromParentFaces()"
  },
  {
    "label": "populateEdgeTagVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeTagVectors()"
  },
  {
    "label": "populateEdgeTagsFromParentFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeTagsFromParentFaces()"
  },
  {
    "label": "populateEdgeTagsFromParentEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeTagsFromParentEdges()"
  },
  {
    "label": "populateVertexTagVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexTagVectors()"
  },
  {
    "label": "populateVertexTagsFromParentFaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexTagsFromParentFaces()"
  },
  {
    "label": "populateVertexTagsFromParentEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexTagsFromParentEdges()"
  },
  {
    "label": "populateVertexTagsFromParentVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexTagsFromParentVertices()"
  },
  {
    "label": "setAll()",
    "kind": "Method",
    "detail": "Function (struct Relations { unsigned int _faceVertices : 1 ; unsigned int _faceEdges : 1 ; unsigned int _edgeVertices : 1 ; unsigned int _edgeFaces : 1 ; unsigned int _vertexFaces : 1 ; unsigned int _vertexEdges : 1 ; void)",
    "insertText": "setAll(bool enable)"
  },
  {
    "label": "subdivideTopology()",
    "kind": "Method",
    "detail": "Function (_faceVertices = enable ; _faceEdges = enable ; _edgeVertices = enable ; _edgeFaces = enable ; _vertexFaces = enable ; _vertexEdges = enable ; } } ; void)",
    "insertText": "subdivideTopology(Relations const& relationsToSubdivide)"
  },
  {
    "label": "populateFaceVertexRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateFaceVertexRelation()"
  },
  {
    "label": "populateFaceEdgeRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateFaceEdgeRelation()"
  },
  {
    "label": "populateEdgeVertexRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeVertexRelation()"
  },
  {
    "label": "populateEdgeFaceRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateEdgeFaceRelation()"
  },
  {
    "label": "populateVertexFaceRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexFaceRelation()"
  },
  {
    "label": "populateVertexEdgeRelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVertexEdgeRelation()"
  },
  {
    "label": "subdivideSharpnessValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "subdivideSharpnessValues()"
  },
  {
    "label": "subdivideVertexSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "subdivideVertexSharpness()"
  },
  {
    "label": "subdivideEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "subdivideEdgeSharpness()"
  },
  {
    "label": "reclassifySemisharpVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reclassifySemisharpVertices()"
  },
  {
    "label": "subdivideFVarChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "subdivideFVarChannels()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "print(const Refinement *)"
  },
  {
    "label": "getFaceChildFaces()",
    "kind": "Method",
    "detail": "Function (Level const* _parent ; Level* _child ; Sdc::Options _options ; Sdc::Split _splitType ; int _regFaceSize ; bool _uniform ; bool _faceVertsFirst ; int _childFaceFromFaceCount ; int _childEdgeFromFaceCount ; int _childEdgeFromEdgeCount ; int _childVertFromFaceCount ; int _childVertFromEdgeCount ; int _childVertFromVertCount ; int _firstChildFaceFromFace ; int _firstChildEdgeFromFace ; int _firstChildEdgeFromEdge ; int _firstChildVertFromFace ; int _firstChildVertFromEdge ; int _firstChildVertFromVert ; IndexArray _faceChildFaceCountsAndOffsets ; IndexArray _faceChildEdgeCountsAndOffsets ; IndexVector _faceChildFaceIndices ; IndexVector _faceChildEdgeIndices ; IndexVector _faceChildVertIndex ; IndexVector _edgeChildEdgeIndices ; IndexVector _edgeChildVertIndex ; IndexVector _vertChildVertIndex ; IndexVector _childFaceParentIndex ; IndexVector _childEdgeParentIndex ; IndexVector _childVertexParentIndex ; std::vector<ChildTag> _childFaceTag ; std::vector<ChildTag> _childEdgeTag ; std::vector<ChildTag> _childVertexTag ; std::vector<SparseTag> _parentFaceTag ; std::vector<SparseTag> _parentEdgeTag ; std::vector<SparseTag> _parentVertexTag ; std::vector<FVarRefinement*> _fvarChannels ; } ; ConstIndexArray)",
    "insertText": "getFaceChildFaces(Index parentFace)"
  }
]