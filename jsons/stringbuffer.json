[
  {
    "label": "GenericStringBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericStringBuffer"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_STRINGBUFFER_H_ # define RAPIDJSON_STRINGBUFFER_H_ # include \" stream . h \" # include \" internal / stack . h \" # if RAPIDJSON_HAS_CXX11_RVALUE_REFS # include<utility> # endif # include \" internal / stack . h \" # if)",
    "insertText": "defined(__clang__) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(c++98-compat)"
  },
  {
    "label": "GenericStringBuffer()",
    "kind": "Method",
    "detail": "Function (public : typedef Encoding::Ch Ch ;)",
    "insertText": "GenericStringBuffer(Allocator* allocator = 0, size_t capacity = kDefaultCapacity) : stack_(allocator, capacity)"
  },
  {
    "label": "GenericStringBuffer()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "GenericStringBuffer(GenericStringBuffer&& rhs) : stack_(std::move(rhs.stack_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericStringBuffer&)",
    "insertText": "operator(GenericStringBuffer&& rhs)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (* stack_ . template Push<)",
    "insertText": "Ch()"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PutUnsafe(Ch c)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "ShrinkToFit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShrinkToFit()"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (stack_ . template Pop<)",
    "insertText": "Ch(1)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(size_t count)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (stack_ . template Reserve<)",
    "insertText": "Ch(count)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} Ch*)",
    "insertText": "Push(size_t count)"
  },
  {
    "label": "PushUnsafe()",
    "kind": "Method",
    "detail": "Function (} Ch*)",
    "insertText": "PushUnsafe(size_t count)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Pop(size_t count)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetString()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetLength()"
  },
  {
    "label": "GenericStringBuffer()",
    "kind": "Method",
    "detail": "Function (} const size_t kDefaultCapacity = 2 5 6 ; internal::Stack<Allocator> stack_ ; private :)",
    "insertText": "GenericStringBuffer(const GenericStringBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GenericStringBuffer&)",
    "insertText": "operator(const GenericStringBuffer&)"
  },
  {
    "label": "PutReserve()",
    "kind": "Method",
    "detail": "Function (} ; typedef GenericStringBuffer<UTF8<>> StringBuffer ; template<Encoding,Allocator> void)",
    "insertText": "PutReserve(GenericStringBuffer<Encoding, Allocator>& stream, size_t count)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (stream .)",
    "insertText": "Reserve(count)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (} template<Encoding,Allocator> void)",
    "insertText": "PutUnsafe(GenericStringBuffer<Encoding, Allocator>& stream, typename Encoding::Ch c)"
  },
  {
    "label": "PutUnsafe()",
    "kind": "Method",
    "detail": "Function (stream .)",
    "insertText": "PutUnsafe(c)"
  },
  {
    "label": "PutN()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "PutN(GenericStringBuffer<UTF8<> >& stream, char c, size_t n)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(stream.stack_.Push<char>(n), c, n * sizeof(c))"
  }
]