[
  {
    "label": "FUProjectDictionary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUProjectDictionary"
  },
  {
    "label": "FUProjectDictionary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Map . h \" class FUProjectDictionary { public :)",
    "insertText": "FUProjectDictionary(const FString& InRootDir)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "IsForeignProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForeignProject(const FString& ProjectFileName)"
  },
  {
    "label": "GetRelativeProjectPathForGame()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRelativeProjectPathForGame(const TCHAR* GameName, const FString& BaseDir)"
  },
  {
    "label": "GetProjectPathForGame()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProjectPathForGame(const TCHAR* GameName)"
  },
  {
    "label": "GetProjectPaths()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetProjectPaths()"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (FUProjectDictionary&)",
    "insertText": "GetDefault()"
  }
]