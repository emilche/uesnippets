[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDRigidClustering . h \" namespace Chaos { enum class EMassOffsetType : uint8 { None = 0,Position = 1<<0,Rotation = 1<<1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMassOffsetType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0,LocalInertiaDropOffDiagonalTerms = 1<<0 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EInertiaOperations) void CHAOS_API UpdateClusterMassProperties( FPBDRigidClusteredParticleHandle* Parent, const TSet<FPBDRigidParticleHandle*>& Children)"
  },
  {
    "label": "AdjustClusterInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustClusterInertia(FPBDRigidClusteredParticleHandle* Cluster, EInertiaOperations InertiaOperations)"
  },
  {
    "label": "MoveClusterToMassOffset()",
    "kind": "Method",
    "detail": "Function (FRigidTransform3)",
    "insertText": "MoveClusterToMassOffset(FPBDRigidClusteredParticleHandle* Cluster, EMassOffsetType MassOffsetTypes)"
  },
  {
    "label": "UpdateKinematicProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKinematicProperties(FPBDRigidParticleHandle* Parent, const FRigidClustering::FClusterMap&, FRigidClustering::FRigidEvolution&)"
  },
  {
    "label": "UpdateGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeometry(Chaos::FPBDRigidClusteredParticleHandle* Parent, const TSet<FPBDRigidParticleHandle*>& Children, const FRigidClustering::FClusterMap& ChildrenMap, const Chaos::FImplicitObjectPtr& ProxyGeometry, const FClusterCreationParameters& Parameters)"
  },
  {
    "label": "BuildScaledGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildScaledGeometry(Chaos::FPBDRigidClusteredParticleHandle* ParticleHandle, const Chaos::FImplicitObjectPtr& ProxyGeometry, const FVector& WorldScale)"
  },
  {
    "label": "UpdateCollisionFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisionFlags(Chaos::FPBDRigidClusteredParticleHandle* ParticleHandle, const bool bUseParticleImplicit)"
  },
  {
    "label": "UpdateClusterFilterDataFromChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateClusterFilterDataFromChildren(FPBDRigidClusteredParticleHandle* ClusterParent, const TArray<FPBDRigidParticleHandle*>& Children)"
  }
]