[
  {
    "label": "FActorDescArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDescArchive"
  },
  {
    "label": "FWorldPartitionActorDescInitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionActorDescInitData"
  },
  {
    "label": "FWorldPartitionAssetDataPatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionAssetDataPatcher"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UActorDescContainerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainerInstance"
  },
  {
    "label": "FWorldPartitionActorDescInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDescInstance"
  },
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "IWorldPartitionActorDescInstanceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionActorDescInstanceView"
  },
  {
    "label": "IStreamingGenerationErrorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStreamingGenerationErrorHandler"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "FWorldPartitionHandleImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionHandleImpl"
  },
  {
    "label": "FWorldPartitionReferenceImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionReferenceImpl"
  },
  {
    "label": "FWorldPartitionActorDescUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionActorDescUtils"
  },
  {
    "label": "FWorldPartitionActorDescUnitTestAcccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionActorDescUnitTestAcccessor"
  },
  {
    "label": "FAssetRootPackagePatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRootPackagePatcher"
  },
  {
    "label": "FAssetHeaderPatcherInner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetHeaderPatcherInner"
  },
  {
    "label": "FStreamingGenerationUnsavedDirtyActorDescInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingGenerationUnsavedDirtyActorDescInstance"
  },
  {
    "label": "FPropertyOverrideUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyOverrideUtils"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "TActorDescContainerCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorDescContainerCollection"
  },
  {
    "label": "FContainerInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContainerInstance"
  },
  {
    "label": "FWorldPartitionActorDescInitData()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" CoreMinimal . h \" # include \" PropertyPairsMap . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Templates / SubclassOf . h \" # include \" Misc / Guid . h \" # include \" Misc / TVariant . h \" # include \" WorldPartition / WorldPartitionActorDescType . h \" # include \" WorldPartition / WorldPartitionActorContainerID . h \" # include \" WorldPartition / Filter / WorldPartitionActorFilter . h \" class FActorDescArchive ; struct FWorldPartitionActorDescInitData {)",
    "insertText": "FWorldPartitionActorDescInitData() : DataSource(TInPlaceType<TArray<uint8>>(), TArray<uint8>())"
  },
  {
    "label": "FWorldPartitionActorDescInitData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWorldPartitionActorDescInitData(FActorDescArchive* InArchive) : DataSource(TInPlaceType<FActorDescArchive*>(), InArchive)"
  },
  {
    "label": "GetSerializedData()",
    "kind": "Method",
    "detail": "Function (} UClass* NativeClass ; FName PackageName ; FSoftObjectPath ActorPath ; TArray<uint8>&)",
    "insertText": "GetSerializedData()"
  },
  {
    "label": "GetArchive()",
    "kind": "Method",
    "detail": "Function (} FActorDescArchive*)",
    "insertText": "GetArchive()"
  },
  {
    "label": "IsUsingArchive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingArchive()"
  },
  {
    "label": "SetNativeClass()",
    "kind": "Method",
    "detail": "Function (} FWorldPartitionActorDescInitData&)",
    "insertText": "SetNativeClass(UClass* InNativeClass)"
  },
  {
    "label": "SetPackageName()",
    "kind": "Method",
    "detail": "Function (NativeClass = InNativeClass ; return* this ; } FWorldPartitionActorDescInitData&)",
    "insertText": "SetPackageName(FName InPackageName)"
  },
  {
    "label": "SetActorPath()",
    "kind": "Method",
    "detail": "Function (PackageName = InPackageName ; return* this ; } FWorldPartitionActorDescInitData&)",
    "insertText": "SetActorPath(const FSoftObjectPath& InActorPath)"
  },
  {
    "label": "FWorldPartitionAssetDataPatcher()",
    "kind": "Method",
    "detail": "Function (ActorPath = InActorPath ; return* this ; } private : TVariant<TArray<uint8>,FActorDescArchive*> DataSource ; } ; struct FWorldPartitionAssetDataPatcher { ~)",
    "insertText": "FWorldPartitionAssetDataPatcher()"
  },
  {
    "label": "DoPatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoPatch(FString& InOutString)"
  },
  {
    "label": "DoPatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPatch(FName& InOutName)"
  },
  {
    "label": "DoPatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPatch(FSoftObjectPath& InOutSoft)"
  },
  {
    "label": "DoPatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPatch(FTopLevelAssetPath& InOutPath)"
  },
  {
    "label": "CompareUnsortedArrays()",
    "kind": "Method",
    "detail": "Function (} ; class AActor ; class UWorldPartition ; class UActorDescContainerInstance ; class FWorldPartitionActorDescInstance ; class UActorDescContainer ; class IWorldPartitionActorDescInstanceView ; class IStreamingGenerationErrorHandler ; enum class EContainerClusterMode : uint8 { Partitioned,} ; template<T,class F> bool)",
    "insertText": "CompareUnsortedArrays(const TArray<T>& Array1, const TArray<T>& Array2, F Func)"
  },
  {
    "label": "SortedArray1()",
    "kind": "Method",
    "detail": "Function (TArray<T>)",
    "insertText": "SortedArray1(Array1)"
  },
  {
    "label": "SortedArray2()",
    "kind": "Method",
    "detail": "Function (TArray<T>)",
    "insertText": "SortedArray2(Array2)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (SortedArray1 .)",
    "insertText": "Sort(Func)"
  },
  {
    "label": "CompareUnsortedArrays()",
    "kind": "Method",
    "detail": "Function (} template<> bool)",
    "insertText": "CompareUnsortedArrays(const TArray<FName>& Array1, const TArray<FName>& Array2)"
  },
  {
    "label": "FWorldPartitionActorDesc()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "FWorldPartitionActorDesc()"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetGuid()"
  },
  {
    "label": "GetExternalDataLayer()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetExternalDataLayer()"
  },
  {
    "label": "GetExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (const FSoftObjectPath&)",
    "insertText": "GetExternalDataLayerAsset()"
  },
  {
    "label": "GetRuntimeBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetRuntimeBounds()"
  },
  {
    "label": "GetParentActor()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetParentActor()"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (Properties .)",
    "insertText": "AddProperty(PropertyName, PropertyValue)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetProperty(FName PropertyName, FName* PropertyValue)"
  },
  {
    "label": "HasProperty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasProperty(FName PropertyName)"
  },
  {
    "label": "GetActorName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetActorName()"
  },
  {
    "label": "GetActorLabelOrName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetActorLabelOrName()"
  },
  {
    "label": "GetDisplayClassName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDisplayClassName()"
  },
  {
    "label": "GetActorNameString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetActorNameString()"
  },
  {
    "label": "GetActorLabelString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetActorLabelString()"
  },
  {
    "label": "GetDisplayClassNameString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDisplayClassNameString()"
  },
  {
    "label": "IsDefaultActorDesc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultActorDesc()"
  },
  {
    "label": "GetChildContainerFilterType()",
    "kind": "Method",
    "detail": "Function (} EWorldPartitionActorFilterType)",
    "insertText": "GetChildContainerFilterType()"
  },
  {
    "label": "GetSceneOutlinerParent()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetSceneOutlinerParent()"
  },
  {
    "label": "IsResaveNeeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsResaveNeeded()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FWorldPartitionActorDesc& Other)"
  },
  {
    "label": "GetContainer()",
    "kind": "Method",
    "detail": "Function (} UActorDescContainer*)",
    "insertText": "GetContainer()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Container = InContainer ; } enum class EToStringMode : uint8 { Guid,Compact,Full,Verbose,ForDiff } ; FString)",
    "insertText": "ToString(EToStringMode Mode = EToStringMode::Compact)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const AActor* InActor)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FWorldPartitionActorDescInitData& DescData)"
  },
  {
    "label": "Patch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Patch(const FWorldPartitionActorDescInitData& DescData, TArray<uint8>& OutData, FWorldPartitionAssetDataPatcher* InAssetDataPatcher)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FWorldPartitionActorDesc* Other)"
  },
  {
    "label": "ShouldResave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldResave(const FWorldPartitionActorDesc* Other)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(TArray<uint8>& OutData, FWorldPartitionActorDesc* BaseDesc = nullptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FActorDescDeprecator = TFunction<)",
    "insertText": "void(FArchive&, FWorldPartitionActorDesc*)"
  },
  {
    "label": "RegisterActorDescDeprecator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActorDescDeprecator(TSubclassOf<AActor> ActorClass, const FActorDescDeprecator& Deprecator)"
  },
  {
    "label": "IsMainWorldOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMainWorldOnly()"
  },
  {
    "label": "IsListedInSceneOutliner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsListedInSceneOutliner()"
  },
  {
    "label": "InitTransientProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitTransientProperties(const FWorldPartitionActorDescInitData& DescData)"
  },
  {
    "label": "GetChildContainerInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChildContainerInstance(const FWorldPartitionActorDescInstance* InActorDescInstance, FContainerInstance& OutContainerInstance)"
  },
  {
    "label": "IsEditorRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorRelevant(const FWorldPartitionActorDescInstance* InActorDescInstance)"
  },
  {
    "label": "TransferFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferFrom(const FWorldPartitionActorDesc* From)"
  },
  {
    "label": "TransferWorldData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferWorldData(const FWorldPartitionActorDesc* From)"
  },
  {
    "label": "GetSizeOf()",
    "kind": "Method",
    "detail": "Function (ActorTransform = From -> ActorTransform ; RuntimeBounds = From -> RuntimeBounds ; EditorBounds = From -> EditorBounds ; } uint32)",
    "insertText": "GetSizeOf()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]