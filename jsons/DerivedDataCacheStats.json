[
  {
    "label": "FCacheStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheStats"
  },
  {
    "label": "FRequestCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestCounter"
  },
  {
    "label": "FCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCounter"
  },
  {
    "label": "FTimeAveragedStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimeAveragedStat"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "FCacheBucketStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheBucketStats"
  },
  {
    "label": "FCacheStoreStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheStoreStats"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Mutex . h \" # include \" Async / UniqueLock . h \" # include \" Containers / Array . h \" # include \" DerivedDataCacheKey . h \" # include \" DerivedDataCacheStore . h \" # include \" Internationalization / Text . h \" # include \" Misc / MonotonicTime . h \" # include \" ProfilingDebugging / CookStats . h \" namespace UE::DerivedData { class FCacheStats ; } namespace UE::DerivedData { class FRequestCounter { struct FCounter { uint64 Hits = 0 ; uint64 Misses = 0 ; } ; using ERequestOp = ECacheStoreRequestOp ; using ERequestType = ECacheStoreRequestType ; public : void)",
    "insertText": "AddRequest(ERequestType Type, ERequestOp Op, EStatus Status)"
  },
  {
    "label": "Puts()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Puts()"
  },
  {
    "label": "PutHits()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "PutHits()"
  },
  {
    "label": "GetHits()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetHits()"
  },
  {
    "label": "TotalHits()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "TotalHits()"
  },
  {
    "label": "TotalMisses()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "TotalMisses()"
  },
  {
    "label": "SetPeriod()",
    "kind": "Method",
    "detail": "Function (} private : FCounter PutRecord ; FCounter PutValue ; FCounter GetRecord ; FCounter GetValue ; FCounter GetRecordChunk ; FCounter GetValueChunk ; } ; class FTimeAveragedStat { public : void)",
    "insertText": "SetPeriod(FMonotonicTimeSpan NewPeriod)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Period = NewPeriod ; } void)",
    "insertText": "Add(FMonotonicTimePoint StartTime, FMonotonicTimePoint EndTime, double Value)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Update(FMonotonicTimePoint Time)"
  },
  {
    "label": "FCacheStoreStats()",
    "kind": "Method",
    "detail": "Function (struct FRange { FMonotonicTimePoint StartTime ; FMonotonicTimePoint EndTime ; } ; struct FValue { FMonotonicTimePoint Time ; double Value = 0 . 0 ; } ; FMonotonicTimeSpan Period ; FMonotonicTimePoint LastTime ; TArray<FRange> ActiveRanges ; TArray<FValue> StartValues ; TArray<FValue> EndValues ; double AverageRate = 0 . 0 ; double AverageValue = 0 . 0 ; double AccumulatedValue = 0 . 0 ; int32 AccumulatedValueCount = 0 ; FMutex Mutex ; } ; class FCacheBucketStats final { public : FCacheBucket Bucket ; uint64 LogicalReadSize = 0 ; uint64 LogicalWriteSize = 0 ; uint64 PhysicalReadSize = 0 ; uint64 PhysicalWriteSize = 0 ; FMonotonicTimeSpan MainThreadTime ; FMonotonicTimeSpan OtherThreadTime ; FRequestCounter RequestCount ; FMutex Mutex ; # if ENABLE_COOK_STATS FCookStats::CallStats GetStats ; FCookStats::CallStats PutStats ; # endif } ; class FCacheStoreStats final : public ICacheStoreStats { public :)",
    "insertText": "FCacheStoreStats(FCacheStats& CacheStats, ECacheStoreFlags Flags, FStringView Type, FStringView Name, FStringView Path)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (FString Type ; FString Name ; FString Path ; FText Status ; ECacheStoreFlags Flags = ECacheStoreFlags::None ; ECacheStoreStatusCode StatusCode = ECacheStoreStatusCode::None ; FMutex Mutex ; TMap<FString,FString> Attributes ; FCacheStats& CacheStats ; uint64 LogicalReadSize = 0 ; uint64 LogicalWriteSize = 0 ; uint64 PhysicalReadSize = 0 ; uint64 PhysicalWriteSize = 0 ; FMonotonicTimeSpan MainThreadTime ; FMonotonicTimeSpan OtherThreadTime ; FRequestCounter RequestCount ; uint64 TotalPhysicalSize = ~ 0 ull ; FTimeAveragedStat AverageLatency ; FTimeAveragedStat AveragePhysicalReadSize ; FTimeAveragedStat AveragePhysicalWriteSize ; # if ENABLE_COOK_STATS FCookStats::CallStats GetStats ; FCookStats::CallStats PutStats ; # endif private : FStringView)",
    "insertText": "GetType()"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatus(ECacheStoreStatusCode StatusCode, const FText& Status)"
  },
  {
    "label": "SetAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttribute(FStringView Key, FStringView Value)"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequest(const FCacheStoreRequestStats& Stats)"
  },
  {
    "label": "AddLatency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLatency(FMonotonicTimePoint StartTime, FMonotonicTimePoint EndTime, FMonotonicTimeSpan Latency)"
  },
  {
    "label": "SetTotalPhysicalSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTotalPhysicalSize(uint64 TotalPhysicalSize)"
  },
  {
    "label": "GetBucket()",
    "kind": "Method",
    "detail": "Function (} ; class FCacheStats final { public : TArray<TUniquePtr<FCacheBucketStats>> BucketStats ; TArray<TUniquePtr<FCacheStoreStats>> StoreStats ; FMutex Mutex ; FCacheBucketStats&)",
    "insertText": "GetBucket(FCacheBucket Bucket)"
  }
]