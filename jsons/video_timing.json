[
  {
    "label": "VideoSendTiming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendTiming"
  },
  {
    "label": "TimingFrameFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TimingFrameFlags"
  },
  {
    "label": "TimingFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimingFrameInfo"
  },
  {
    "label": "VideoPlayoutDelay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoPlayoutDelay"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_VIDEO_TIMING_H_ # define API_VIDEO_VIDEO_TIMING_H_ # include<stdint . h> # include<limits> # include<string> # include \" api / units / time_delta . h \" namespace webrtc { struct VideoSendTiming { enum TimingFrameFlags : uint8_t { kNotTriggered = 0,kTriggeredByTimer = 1<<0,kTriggeredBySize = 1<<1,kInvalid = std::numeric_limits<uint8_t)",
    "insertText": "max()"
  },
  {
    "label": "GetDeltaCappedMs()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "GetDeltaCappedMs(int64_t base_ms, int64_t time_ms)"
  },
  {
    "label": "GetDeltaCappedMs()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "GetDeltaCappedMs(TimeDelta delta)"
  },
  {
    "label": "TimingFrameInfo()",
    "kind": "Method",
    "detail": "Function (uint16_t encode_start_delta_ms ; uint16_t encode_finish_delta_ms ; uint16_t packetization_finish_delta_ms ; uint16_t pacer_exit_delta_ms ; uint16_t network_timestamp_delta_ms ; uint16_t network2_timestamp_delta_ms ; uint8_t flags = TimingFrameFlags::kInvalid ; } ; struct TimingFrameInfo {)",
    "insertText": "TimingFrameInfo()"
  },
  {
    "label": "EndToEndDelay()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "EndToEndDelay()"
  },
  {
    "label": "IsLongerThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLongerThan(const TimingFrameInfo& other)"
  },
  {
    "label": "IsOutlier()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutlier()"
  },
  {
    "label": "IsTimerTriggered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimerTriggered()"
  },
  {
    "label": "IsInvalid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalid()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const TimingFrameInfo& other)"
  },
  {
    "label": "VideoPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (uint32_t rtp_timestamp ; int64_t capture_time_ms ; int64_t encode_start_ms ; int64_t encode_finish_ms ; int64_t packetization_finish_ms ; int64_t pacer_exit_ms ; int64_t network_timestamp_ms ; int64_t network2_timestamp_ms ; int64_t receive_start_ms ; int64_t receive_finish_ms ; int64_t decode_start_ms ; int64_t decode_finish_ms ; int64_t render_time_ms ; uint8_t flags ; } ; struct VideoPlayoutDelay {)",
    "insertText": "VideoPlayoutDelay()"
  },
  {
    "label": "VideoPlayoutDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoPlayoutDelay(int min_ms, int max_ms) : min_ms(min_ms), max_ms(max_ms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int min_ms = - 1 ; int max_ms = - 1 ; bool)",
    "insertText": "operator(const VideoPlayoutDelay& rhs)"
  }
]