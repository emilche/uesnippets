[
  {
    "label": "FWeakReferencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakReferencer"
  },
  {
    "label": "FStaticCastTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticCastTag"
  },
  {
    "label": "FConstCastTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstCastTag"
  },
  {
    "label": "FNullTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNullTag"
  },
  {
    "label": "TReferenceControllerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TReferenceControllerBase"
  },
  {
    "label": "TDeleterHolder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDeleterHolder"
  },
  {
    "label": "TReferenceControllerWithDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TReferenceControllerWithDeleter"
  },
  {
    "label": "TIntrusiveReferenceController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrusiveReferenceController"
  },
  {
    "label": "DefaultDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultDeleter"
  },
  {
    "label": "ObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "TRawPtrProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRawPtrProxy"
  },
  {
    "label": "TRawPtrProxyWithDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRawPtrProxyWithDeleter"
  },
  {
    "label": "FSharedReferencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedReferencer"
  },
  {
    "label": "FSharedFromThisBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedFromThisBase"
  },
  {
    "label": "SharedPtrType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPtrType"
  },
  {
    "label": "TReferenceControllerBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / RemoveReference . h \" # include \" Templates / SharedPointerFwd . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" AutoRTFM / AutoRTFM . h \" # include<atomic> # include<type_traits> # define THREAD_SANITISE_UNSAFEPTR 0 # if THREAD_SANITISE_UNSAFEPTR # define TSAN_SAFE_UNSAFEPTR # else # define TSAN_SAFE_UNSAFEPTR TSAN_SAFE # endif namespace SharedPointerInternals { template<ESPMode Mode> class FWeakReferencer ; struct FStaticCastTag { } ; struct FConstCastTag { } ; struct FNullTag { } ; template<ESPMode Mode> class TReferenceControllerBase { using RefCountType = std::conditional_t<Mode = = ESPMode::ThreadSafe,std::atomic<int32>,int32> ; public :)",
    "insertText": "TReferenceControllerBase()"
  },
  {
    "label": "DestroyObject()",
    "kind": "Method",
    "detail": "Function (RefCountType SharedReferenceCount { 1 } ; RefCountType WeakReferenceCount { 1 } ; void)",
    "insertText": "DestroyObject()"
  },
  {
    "label": "GetSharedReferenceCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSharedReferenceCount()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ; UE_AUTORTFM_OPEN { Count = SharedReferenceCount .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "IsUnique()",
    "kind": "Method",
    "detail": "Function (} ; return Count ; } else { return SharedReferenceCount ; } } bool)",
    "insertText": "IsUnique()"
  },
  {
    "label": "AddSharedReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSharedReference()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && (defined(_M_X64) || defined(_M_IX86))"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (+ + SharedReferenceCount ; } ; # else UE_AUTORTFM_OPEN { SharedReferenceCount .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "UE_AUTORTFM_ONABORT()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "UE_AUTORTFM_ONABORT(this)"
  },
  {
    "label": "ReleaseSharedReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSharedReference()"
  },
  {
    "label": "ConditionallyAddSharedReference()",
    "kind": "Method",
    "detail": "Function (} ; } else { + + SharedReferenceCount ; } } bool)",
    "insertText": "ConditionallyAddSharedReference()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSucceeded = false ; break ; })",
    "insertText": "if(SharedReferenceCount.compare_exchange_weak(OriginalCount, OriginalCount + 1, std::memory_order_relaxed))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSucceeded = true ; break ; } } } ;)",
    "insertText": "if(bSucceeded)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; } return bSucceeded ; } else {)",
    "insertText": "if(SharedReferenceCount == 0)"
  },
  {
    "label": "UE_AUTORTFM_ONCOMMIT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_AUTORTFM_ONCOMMIT(this)"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (int32 OldSharedCount = SharedReferenceCount .)",
    "insertText": "fetch_sub(1, std::memory_order_acq_rel)"
  },
  {
    "label": "ReleaseWeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseWeakReference()"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} } ; } else {)",
    "insertText": "checkSlow(SharedReferenceCount > 0)"
  },
  {
    "label": "AddWeakReference()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "AddWeakReference()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang_analyzer__)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# endif } } ; } else {)",
    "insertText": "checkSlow(WeakReferenceCount > 0)"
  },
  {
    "label": "TReferenceControllerBase()",
    "kind": "Method",
    "detail": "Function (# endif } } })",
    "insertText": "TReferenceControllerBase(const TReferenceControllerBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TReferenceControllerBase&)",
    "insertText": "operator(const TReferenceControllerBase&)"
  },
  {
    "label": "TDeleterHolder()",
    "kind": "Method",
    "detail": "Function (} ; template<DeleterType,bool bIsZeroSize = std::is_empty_v<DeleterType>> struct TDeleterHolder : private DeleterType {)",
    "insertText": "TDeleterHolder(DeleterType&& Arg) : DeleterType(MoveTemp(Arg))"
  },
  {
    "label": "InvokeDeleter()",
    "kind": "Method",
    "detail": "Function (} template<ObjectType> void)",
    "insertText": "InvokeDeleter(ObjectType * Object)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(*static_cast<DeleterType*>(this), Object)"
  },
  {
    "label": "TDeleterHolder()",
    "kind": "Method",
    "detail": "Function (} } ; template<DeleterType> struct TDeleterHolder<DeleterType,false> {)",
    "insertText": "TDeleterHolder(DeleterType&& Arg) : Deleter(MoveTemp(Arg))"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invoke(Deleter, Object)"
  },
  {
    "label": "TReferenceControllerWithDeleter()",
    "kind": "Method",
    "detail": "Function (} private : DeleterType Deleter ; } ; template<ObjectType,DeleterType,ESPMode Mode> class TReferenceControllerWithDeleter : private TDeleterHolder<DeleterType>,public TReferenceControllerBase<Mode> { public :)",
    "insertText": "TReferenceControllerWithDeleter(ObjectType* InObject, DeleterType&& Deleter) : TDeleterHolder<DeleterType>(MoveTemp(Deleter)) , Object(InObject)"
  },
  {
    "label": "InvokeDeleter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "InvokeDeleter(Object)"
  },
  {
    "label": "TReferenceControllerWithDeleter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TReferenceControllerWithDeleter(const TReferenceControllerWithDeleter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TReferenceControllerWithDeleter&)",
    "insertText": "operator(const TReferenceControllerWithDeleter&)"
  },
  {
    "label": "TIntrusiveReferenceController()",
    "kind": "Method",
    "detail": "Function (private : ObjectType* Object ; } ; template<ObjectType,ESPMode Mode> class TIntrusiveReferenceController : public TReferenceControllerBase<Mode> { public : template<. . . ArgTypes>)",
    "insertText": "TIntrusiveReferenceController(ArgTypes&&... Args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)&ObjectStorage) ObjectType(Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "GetObjectPtr()",
    "kind": "Method",
    "detail": "Function (} ObjectType*)",
    "insertText": "GetObjectPtr()"
  },
  {
    "label": "DestructItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItem((ObjectType*)&ObjectStorage)"
  },
  {
    "label": "TIntrusiveReferenceController()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrusiveReferenceController(const TIntrusiveReferenceController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntrusiveReferenceController&)",
    "insertText": "operator(const TIntrusiveReferenceController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : TTypeCompatibleBytes<ObjectType> ObjectStorage ; } ; template<Type> struct DefaultDeleter { void)",
    "insertText": "operator()(Type* Object)"
  },
  {
    "label": "NewDefaultReferenceController()",
    "kind": "Method",
    "detail": "Function (delete Object ; } } ; template<ESPMode Mode,ObjectType> TReferenceControllerBase<Mode>*)",
    "insertText": "NewDefaultReferenceController(ObjectType* Object)"
  },
  {
    "label": "NewCustomReferenceController()",
    "kind": "Method",
    "detail": "Function (} template<ESPMode Mode,ObjectType,DeleterType> TReferenceControllerBase<Mode>*)",
    "insertText": "NewCustomReferenceController(ObjectType* Object, DeleterType&& Deleter)"
  },
  {
    "label": "NewIntrusiveReferenceController()",
    "kind": "Method",
    "detail": "Function (} template<ESPMode Mode,ObjectType,. . . ArgTypes> TIntrusiveReferenceController<ObjectType,Mode>*)",
    "insertText": "NewIntrusiveReferenceController(ArgTypes&&... Args)"
  },
  {
    "label": "TRawPtrProxy()",
    "kind": "Method",
    "detail": "Function (} template<class ObjectType> struct TRawPtrProxy { ObjectType* Object ;)",
    "insertText": "TRawPtrProxy(TYPE_OF_NULLPTR ) : Object( nullptr)"
  },
  {
    "label": "TRawPtrProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRawPtrProxy(ObjectType* InObject ) : Object( InObject)"
  },
  {
    "label": "TRawPtrProxyWithDeleter()",
    "kind": "Method",
    "detail": "Function (} } ; template<class ObjectType,DeleterType> struct TRawPtrProxyWithDeleter { ObjectType* Object ; DeleterType Deleter ;)",
    "insertText": "TRawPtrProxyWithDeleter(ObjectType* InObject, const DeleterType& InDeleter ) : Object ( InObject ) , Deleter( InObject, InDeleter)"
  },
  {
    "label": "TRawPtrProxyWithDeleter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRawPtrProxyWithDeleter(ObjectType* InObject, DeleterType&& InDeleter ) : Object ( InObject ) , Deleter( MoveTemp( InDeleter ))"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (} } ; template<ESPMode Mode> class FSharedReferencer { public :)",
    "insertText": "FSharedReferencer() : ReferenceController( nullptr)"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSharedReferencer(TReferenceControllerBase<Mode>* InReferenceController ) : ReferenceController( InReferenceController)"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSharedReferencer(FSharedReferencer const& InSharedReference ) : ReferenceController( InSharedReference.ReferenceController)"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FSharedReferencer(FSharedReferencer&& InSharedReference ) : ReferenceController( InSharedReference.ReferenceController)"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (InSharedReference . ReferenceController = nullptr ; })",
    "insertText": "FSharedReferencer(FWeakReferencer< Mode > const& InWeakReference) : ReferenceController(InWeakReference.ReferenceController)"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (ReferenceController = nullptr ; } } })",
    "insertText": "FSharedReferencer(FWeakReferencer< Mode >&& InWeakReference ) : ReferenceController( InWeakReference.ReferenceController)"
  },
  {
    "label": "FSharedReferencer()",
    "kind": "Method",
    "detail": "Function (InWeakReference . ReferenceController = nullptr ; } } ~)",
    "insertText": "FSharedReferencer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FSharedReferencer&)",
    "insertText": "operator(FSharedReferencer const& InSharedReference)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto NewReferenceController = InSharedReference . ReferenceController ;)",
    "insertText": "if(NewReferenceController != ReferenceController)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ReferenceController != nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ReferenceController = NewReferenceController ; } return* this ; } FSharedReferencer&)",
    "insertText": "operator(FSharedReferencer&& InSharedReference)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto NewReferenceController = InSharedReference . ReferenceController ; auto OldReferenceController = ReferenceController ;)",
    "insertText": "if(NewReferenceController != OldReferenceController)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InSharedReference . ReferenceController = nullptr ; ReferenceController = NewReferenceController ;)",
    "insertText": "if(OldReferenceController != nullptr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } const bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FWeakReferencer()",
    "kind": "Method",
    "detail": "Function (} private : template<ESPMode OtherMode> class FWeakReferencer ; private : TReferenceControllerBase<Mode>* ReferenceController ; } ; template<ESPMode Mode> class FWeakReferencer { public :)",
    "insertText": "FWeakReferencer() : ReferenceController( nullptr)"
  },
  {
    "label": "FWeakReferencer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeakReferencer(FWeakReferencer const& InWeakRefCountPointer ) : ReferenceController( InWeakRefCountPointer.ReferenceController)"
  },
  {
    "label": "FWeakReferencer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FWeakReferencer(FWeakReferencer&& InWeakRefCountPointer ) : ReferenceController( InWeakRefCountPointer.ReferenceController)"
  },
  {
    "label": "FWeakReferencer()",
    "kind": "Method",
    "detail": "Function (InWeakRefCountPointer . ReferenceController = nullptr ; })",
    "insertText": "FWeakReferencer(FSharedReferencer< Mode > const& InSharedRefCountPointer ) : ReferenceController( InSharedRefCountPointer.ReferenceController)"
  },
  {
    "label": "FWeakReferencer()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FWeakReferencer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FWeakReferencer&)",
    "insertText": "operator(FWeakReferencer const& InWeakReference)"
  },
  {
    "label": "AssignReferenceController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignReferenceController(InWeakReference.ReferenceController)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FWeakReferencer&)",
    "insertText": "operator(FSharedReferencer< Mode > const& InSharedReference)"
  },
  {
    "label": "AssignReferenceController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignReferenceController(InSharedReference.ReferenceController)"
  },
  {
    "label": "AssignReferenceController()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AssignReferenceController(TReferenceControllerBase<Mode>* NewReferenceController)"
  },
  {
    "label": "IsDerivedFromSharedFromThis()",
    "kind": "Method",
    "detail": "Function (} ReferenceController = NewReferenceController ; } } private : template<ESPMode OtherMode> class FSharedReferencer ; private : TReferenceControllerBase<Mode>* ReferenceController ; } ; } namespace UE::Core::Private { struct FSharedFromThisBase { } ; } template<T> bool)",
    "insertText": "IsDerivedFromSharedFromThis()"
  },
  {
    "label": "UpdateWeakReferenceInternal()",
    "kind": "Method",
    "detail": "Function (InObject ->)",
    "insertText": "UpdateWeakReferenceInternal(InSharedPtrOrRef, const_cast< ObjectType* >( InObject ))"
  }
]