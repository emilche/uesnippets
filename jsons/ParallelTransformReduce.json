[
  {
    "label": "ParallelTransformReduce()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / ParallelFor . h \" # include \" MathUtil . h \" namespace UE { namespace Geometry { template<IntType,T,TransformFuncT,ReduceFuncT> T)",
    "insertText": "ParallelTransformReduce(IntType Num, const T& Init, TransformFuncT Transform, ReduceFuncT Reduce, int64 InNumTasks)"
  },
  {
    "label": "NumTasks()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumTasks(int32) FMath::Min(InNumTasks, MAX_int32)"
  },
  {
    "label": "NumPerTask()",
    "kind": "Method",
    "detail": "Function (const IntType)",
    "insertText": "NumPerTask(IntType)FMathf::Ceil((float)Num / (float)NumTasks)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<T> PerTaskResults ; PerTaskResults .)",
    "insertText": "SetNum(NumTasks)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumTasks, [&](int32 TaskIndex) { T LocalResult{ Init }; IntType End = FMath::Min((TaskIndex + 1) * NumPerTask, Num); for (IntType Index = TaskIndex * NumPerTask; Index < End; ++Index) { T Transformed{ Transform(Index) }; LocalResult = Reduce(Transformed, LocalResult); } PerTaskResults[TaskIndex] = LocalResult; })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T FinalResult { Init } ;)",
    "insertText": "for(const T& PartialResult : PerTaskResults)"
  },
  {
    "label": "Reduce()",
    "kind": "Method",
    "detail": "Function (FinalResult =)",
    "insertText": "Reduce(PartialResult, FinalResult)"
  },
  {
    "label": "ParallelTransformReduce()",
    "kind": "Method",
    "detail": "Function (} return FinalResult ; } template<IntType,T,InitFuncT,TransformFuncT,ReduceFuncT> void)",
    "insertText": "ParallelTransformReduce(IntType Num, InitFuncT InitFunc, TransformFuncT Transform, ReduceFuncT Reduce, T& Out, int64 InNumTasks)"
  },
  {
    "label": "NumTasks()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumTasks(int32)FMath::Min(InNumTasks, MAX_int32)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumTasks, [&](int32 TaskIndex) { InitFunc(PerTaskResults[TaskIndex]); IntType End = FMath::Min((TaskIndex + 1) * NumPerTask, Num); for (IntType Index = TaskIndex * NumPerTask; Index < End; ++Index) { T Transformed; Transform(Index, Transformed); Reduce(Transformed, PerTaskResults[TaskIndex]); } })"
  },
  {
    "label": "InitFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFunc(Out)"
  },
  {
    "label": "Reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reduce(PartialResult, Out)"
  },
  {
    "label": "IteratorDistance()",
    "kind": "Method",
    "detail": "Function (} } template<IterT> int64)",
    "insertText": "IteratorDistance(IterT Begin, IterT End)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 Count = 0 ;)",
    "insertText": "for(IterT Iter = Begin; Iter != End; ++Iter)"
  },
  {
    "label": "AdvanceIterator()",
    "kind": "Method",
    "detail": "Function (+ + Count ; } return Count ; } template<IterT> IterT)",
    "insertText": "AdvanceIterator(IterT Start, int64 N)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IterT I = Start ;)",
    "insertText": "for(int64 Inc = 0; Inc < N; ++Inc)"
  },
  {
    "label": "IteratorDistance()",
    "kind": "Method",
    "detail": "Function (+ + I ; } return I ; } template<ContainerType,ElementType,SizeType> int64)",
    "insertText": "IteratorDistance(TIndexedContainerIterator<ContainerType, ElementType, SizeType> Begin, TIndexedContainerIterator<ContainerType, ElementType, SizeType> End)"
  },
  {
    "label": "AdvanceIterator()",
    "kind": "Method",
    "detail": "Function (} template<ContainerType,ElementType,SizeType> TIndexedContainerIterator<ContainerType,ElementType,SizeType>)",
    "insertText": "AdvanceIterator(TIndexedContainerIterator<ContainerType, ElementType, SizeType> Begin, SizeType N)"
  },
  {
    "label": "IteratorDistance()",
    "kind": "Method",
    "detail": "Function (int64 Num =)",
    "insertText": "IteratorDistance(BeginIterator, EndIterator)"
  },
  {
    "label": "NumPerTask()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "NumPerTask(int64)FMathf::Ceil((float)Num / (float)NumTasks)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumTasks, [&](int32 TaskIndex) { T LocalResult{ Init }; IterT LocalIter = AdvanceIterator(BeginIterator, FMath::Min(Num, int64(TaskIndex) * NumPerTask)); IterT LocalEndIter = AdvanceIterator(BeginIterator, FMath::Min(Num, (int64(TaskIndex) + 1) * NumPerTask)); while (LocalIter != LocalEndIter) { T Transformed{ Transform(*LocalIter) }; LocalResult = Reduce(Transformed, LocalResult); ++LocalIter; } PerTaskResults[TaskIndex] = LocalResult; })"
  },
  {
    "label": "ParallelTransformReduce()",
    "kind": "Method",
    "detail": "Function (} return FinalResult ; } template<T,IterT,InitFuncT,TransformFuncT,ReduceFuncT> void)",
    "insertText": "ParallelTransformReduce(IterT BeginIterator, IterT EndIterator, InitFuncT InitFunc, TransformFuncT Transform, ReduceFuncT Reduce, T& Out, int64 InNumTasks)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumTasks, [&](int32 TaskIndex) { InitFunc(PerTaskResults[TaskIndex]); IterT LocalIter = AdvanceIterator(BeginIterator, FMath::Min(Num, int64(TaskIndex) * NumPerTask)); IterT LocalEndIter = AdvanceIterator(BeginIterator, FMath::Min(Num, (int64(TaskIndex) + 1) * NumPerTask)); while (LocalIter != LocalEndIter) { T Transformed; Transform(*LocalIter, Transformed); Reduce(Transformed, PerTaskResults[TaskIndex]); ++LocalIter; } })"
  }
]