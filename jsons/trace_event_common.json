[
  {
    "label": "DebugAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugAnnotation"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_COMMON_TRACE_EVENT_COMMON_H_ # define BASE_TRACE_EVENT_COMMON_TRACE_EVENT_COMMON_H_ # if)",
    "insertText": "defined(BASE_USE_PERFETTO_CLIENT_LIBRARY) #include \"base/threading/platform_thread.h\" #include \"base/time/time.h\" #include \"build/build_config.h\" #define PERFETTO_COMPONENT_EXPORT BASE_EXPORT #define PERFETTO_ENABLE_LEGACY_TRACE_EVENTS 1 #define TRACE_TIME_TICKS_NOW() ::base::subtle::TimeTicksNowIgnoringOverride() #define TRACE_TIME_NOW() ::base::subtle::TimeNowIgnoringOverride() #define INTERNAL_TRACE_EVENT_UID(name_prefix) PERFETTO_UID(name_prefix) #define TRACE_LOG_MESSAGE(file, message, line) \\ INTERNAL_TRACE_LOG_MESSAGE(file, message, line)"
  },
  {
    "label": "WriteDebugAnnotation()",
    "kind": "Method",
    "detail": "Function (namespace protos { namespace pbzero { class DebugAnnotation ; } } namespace internal { void BASE_EXPORT)",
    "insertText": "WriteDebugAnnotation(protos::pbzero::DebugAnnotation* annotation, ::base::TimeTicks)"
  },
  {
    "label": "WriteDebugAnnotation()",
    "kind": "Method",
    "detail": "Function (void BASE_EXPORT)",
    "insertText": "WriteDebugAnnotation(protos::pbzero::DebugAnnotation* annotation, ::base::Time)"
  },
  {
    "label": "ConvertThreadId()",
    "kind": "Method",
    "detail": "Function (} } # include \" third_party / perfetto / include / perfetto / tracing . h \" namespace perfetto { namespace legacy { template<> perfetto::ThreadTrack BASE_EXPORT)",
    "insertText": "ConvertThreadId(const ::base::PlatformThreadId& thread)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) template <> perfetto::ThreadTrack BASE_EXPORT ConvertThreadId(const int& thread)"
  },
  {
    "label": "ConvertTimestampToTraceTimeNs()",
    "kind": "Method",
    "detail": "Function (# endif } template<> struct BASE_EXPORT TraceTimestampTraits<::base::TimeTicks> { TraceTimestamp)",
    "insertText": "ConvertTimestampToTraceTimeNs(const ::base::TimeTicks& ticks)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # else # if)",
    "insertText": "defined(TRACE_EVENT0) #error \"Another copy of this file has already been included.\" #endif #define TRACE_DISABLED_BY_DEFAULT(name) \"disabled-by-default-\" name #define TRACE_EVENT0(category_group, name) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED(category_group, name) #define TRACE_EVENT_WITH_FLOW0(category_group, name, bind_id, flow_flags) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW(category_group, name, bind_id, \\ flow_flags) #define TRACE_EVENT1(category_group, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED(category_group, name, arg1_name, arg1_val) #define TRACE_EVENT_WITH_FLOW1(category_group, name, bind_id, flow_flags, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW(category_group, name, bind_id, \\ flow_flags, arg1_name, arg1_val) #define TRACE_EVENT2(category_group, name, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED(category_group, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_WITH_FLOW2(category_group, name, bind_id, flow_flags, \\ arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_SCOPED_WITH_FLOW(category_group, name, bind_id, \\ flow_flags, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_INSTANT0(category_group, name, scope) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ TRACE_EVENT_FLAG_NONE | scope) #define TRACE_EVENT_INSTANT1(category_group, name, scope, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ TRACE_EVENT_FLAG_NONE | scope, arg1_name, arg1_val) #define TRACE_EVENT_INSTANT2(category_group, name, scope, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ TRACE_EVENT_FLAG_NONE | scope, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_COPY_INSTANT0(category_group, name, scope) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ TRACE_EVENT_FLAG_COPY | scope) #define TRACE_EVENT_COPY_INSTANT1(category_group, name, scope, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ TRACE_EVENT_FLAG_COPY | scope, arg1_name, arg1_val) #define TRACE_EVENT_COPY_INSTANT2(category_group, name, scope, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ TRACE_EVENT_FLAG_COPY | scope, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_INSTANT_WITH_FLAGS0(category_group, name, scope_and_flags) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ scope_and_flags) #define TRACE_EVENT_INSTANT_WITH_FLAGS1(category_group, name, scope_and_flags, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_INSTANT, category_group, name, \\ scope_and_flags, arg1_name, arg1_val) #define TRACE_EVENT_INSTANT_WITH_TIMESTAMP0(category_group, name, scope, \\ timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_INSTANT, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE | scope) #define TRACE_EVENT_INSTANT_WITH_TIMESTAMP1(category_group, name, scope, \\ timestamp, arg_name, arg_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_INSTANT, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE | scope, arg_name, arg_val) #define TRACE_EVENT_BEGIN0(category_group, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, category_group, name, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_BEGIN1(category_group, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, category_group, name, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_BEGIN2(category_group, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, category_group, name, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_BEGIN_WITH_FLAGS0(category_group, name, flags) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, category_group, name, flags) #define TRACE_EVENT_BEGIN_WITH_FLAGS1(category_group, name, flags, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, category_group, name, \\ flags, arg1_name, arg1_val) #define TRACE_EVENT_COPY_BEGIN2(category_group, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_BEGIN, category_group, name, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_BEGIN_WITH_ID_TID_AND_TIMESTAMP0(category_group, name, id, \\ thread_id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_COPY_BEGIN_WITH_ID_TID_AND_TIMESTAMP0( \\ category_group, name, id, thread_id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_BEGIN_WITH_ID_TID_AND_TIMESTAMP1( \\ category_group, name, id, thread_id, timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_BEGIN_WITH_ID_TID_AND_TIMESTAMP2( \\ category_group, name, id, thread_id, timestamp, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, arg2_name, \\ arg2_val) #define TRACE_EVENT_END0(category_group, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, category_group, name, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_END1(category_group, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, category_group, name, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_END2(category_group, name, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, category_group, name, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_END_WITH_FLAGS0(category_group, name, flags) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, category_group, name, flags) #define TRACE_EVENT_END_WITH_FLAGS1(category_group, name, flags, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, category_group, name, flags, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_END2(category_group, name, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_END, category_group, name, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_MARK_WITH_TIMESTAMP0(category_group, name, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_MARK, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_MARK_WITH_TIMESTAMP1(category_group, name, timestamp, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_MARK, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_MARK_WITH_TIMESTAMP2( \\ category_group, name, timestamp, arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_MARK, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_MARK(category_group, name) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_MARK, category_group, name, \\ TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_MARK1(category_group, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_MARK, category_group, name, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_MARK_WITH_TIMESTAMP(category_group, name, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_MARK, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_END_WITH_ID_TID_AND_TIMESTAMP0(category_group, name, id, \\ thread_id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_COPY_END_WITH_ID_TID_AND_TIMESTAMP0( \\ category_group, name, id, thread_id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_END_WITH_ID_TID_AND_TIMESTAMP1( \\ category_group, name, id, thread_id, timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_END_WITH_ID_TID_AND_TIMESTAMP2( \\ category_group, name, id, thread_id, timestamp, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, thread_id, \\ timestamp, TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, arg2_name, \\ arg2_val) #define TRACE_COUNTER1(category_group, name, value) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, category_group, name, \\ TRACE_EVENT_FLAG_NONE, \"value\", \\ static_cast<int>(value)) #define TRACE_COUNTER_WITH_FLAG1(category_group, name, flag, value) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, category_group, name, \\ flag, \"value\", static_cast<int>(value)) #define TRACE_COPY_COUNTER1(category_group, name, value) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, category_group, name, \\ TRACE_EVENT_FLAG_COPY, \"value\", \\ static_cast<int>(value)) #define TRACE_COUNTER2(category_group, name, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, category_group, name, \\ TRACE_EVENT_FLAG_NONE, value1_name, \\ static_cast<int>(value1_val), value2_name, \\ static_cast<int>(value2_val)) #define TRACE_COPY_COUNTER2(category_group, name, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD(TRACE_EVENT_PHASE_COUNTER, category_group, name, \\ TRACE_EVENT_FLAG_COPY, value1_name, \\ static_cast<int>(value1_val), value2_name, \\ static_cast<int>(value2_val)) #define TRACE_COUNTER_WITH_TIMESTAMP1(category_group, name, timestamp, value) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_COUNTER, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE, \"value\", static_cast<int>(value)) #define TRACE_COUNTER_WITH_TIMESTAMP2(category_group, name, timestamp, \\ value1_name, value1_val, value2_name, \\ value2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_COUNTER, category_group, name, timestamp, \\ TRACE_EVENT_FLAG_NONE, value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_COUNTER_ID1(category_group, name, id, value) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, category_group, \\ name, id, TRACE_EVENT_FLAG_NONE, \"value\", \\ static_cast<int>(value)) #define TRACE_COPY_COUNTER_ID1(category_group, name, id, value) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, category_group, \\ name, id, TRACE_EVENT_FLAG_COPY, \"value\", \\ static_cast<int>(value)) #define TRACE_COUNTER_ID2(category_group, name, id, value1_name, value1_val, \\ value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, category_group, \\ name, id, TRACE_EVENT_FLAG_NONE, \\ value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_COPY_COUNTER_ID2(category_group, name, id, value1_name, \\ value1_val, value2_name, value2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_COUNTER, category_group, \\ name, id, TRACE_EVENT_FLAG_COPY, \\ value1_name, static_cast<int>(value1_val), \\ value2_name, static_cast<int>(value2_val)) #define TRACE_EVENT_SAMPLE_WITH_ID1(category_group, name, id, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_SAMPLE, category_group, \\ name, id, TRACE_EVENT_FLAG_NONE, arg1_name, \\ arg1_val) #define TRACE_EVENT_ASYNC_BEGIN0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_ASYNC_BEGIN1(category_group, name, id, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_BEGIN2(category_group, name, id, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_ASYNC_BEGIN0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_ASYNC_BEGIN1(category_group, name, id, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_ASYNC_BEGIN2(category_group, name, id, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_ASYNC_BEGIN_WITH_TIMESTAMP0(category_group, name, id, \\ timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_ASYNC_BEGIN_WITH_TIMESTAMP1( \\ category_group, name, id, timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_BEGIN_WITH_TIMESTAMP2(category_group, name, id, \\ timestamp, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_ASYNC_BEGIN_WITH_TIMESTAMP0(category_group, name, id, \\ timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_ASYNC_STEP_INTO0(category_group, name, id, step) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_STEP_INTO, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, \"step\", step) #define TRACE_EVENT_ASYNC_STEP_INTO1(category_group, name, id, step, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_ASYNC_STEP_INTO, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, \"step\", step, arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_STEP_INTO_WITH_TIMESTAMP0(category_group, name, id, \\ step, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_STEP_INTO, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ \"step\", step) #define TRACE_EVENT_ASYNC_STEP_PAST0(category_group, name, id, step) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_STEP_PAST, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, \"step\", step) #define TRACE_EVENT_ASYNC_STEP_PAST1(category_group, name, id, step, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_ASYNC_STEP_PAST, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, \"step\", step, arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_END0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_ASYNC_END1(category_group, name, id, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_END2(category_group, name, id, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_ASYNC_END0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_ASYNC_END1(category_group, name, id, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_ASYNC_END2(category_group, name, id, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_ASYNC_END_WITH_TIMESTAMP0(category_group, name, id, \\ timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_ASYNC_END_WITH_TIMESTAMP1(category_group, name, id, \\ timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val) #define TRACE_EVENT_ASYNC_END_WITH_TIMESTAMP2(category_group, name, id, \\ timestamp, arg1_name, arg1_val, \\ arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_ASYNC_END_WITH_TIMESTAMP0(category_group, name, id, \\ timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN1(category_group, name, id, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN2(category_group, name, id, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN_WITH_FLAGS0(category_group, name, id, \\ flags) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, \\ category_group, name, id, flags) #define TRACE_EVENT_NESTABLE_ASYNC_END0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_NESTABLE_ASYNC_END1(category_group, name, id, arg1_name, \\ arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_NESTABLE_ASYNC_END2(category_group, name, id, arg1_name, \\ arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_NESTABLE_ASYNC_END_WITH_FLAGS0(category_group, name, id, \\ flags) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, \\ category_group, name, id, flags) #define TRACE_EVENT_NESTABLE_ASYNC_INSTANT0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_NESTABLE_ASYNC_INSTANT1(category_group, name, id, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val) #define TRACE_EVENT_NESTABLE_ASYNC_INSTANT2( \\ category_group, name, id, arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN_WITH_TTS2( \\ category_group, name, id, arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_FLAG_ASYNC_TTS | TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_END_WITH_TTS2( \\ category_group, name, id, arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_FLAG_ASYNC_TTS | TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, \\ arg2_name, arg2_val) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP0(category_group, name, \\ id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP1( \\ category_group, name, id, timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val) #define TRACE_EVENT_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP_AND_FLAGS0( \\ category_group, name, id, timestamp, flags) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, flags) #define TRACE_EVENT_NESTABLE_ASYNC_END_WITH_TIMESTAMP0(category_group, name, \\ id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_NESTABLE_ASYNC_END_WITH_TIMESTAMP1( \\ category_group, name, id, timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val) #define TRACE_EVENT_NESTABLE_ASYNC_END_WITH_TIMESTAMP2( \\ category_group, name, id, timestamp, arg1_name, arg1_val, arg2_name, \\ arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_NESTABLE_ASYNC_END_WITH_TIMESTAMP_AND_FLAGS0( \\ category_group, name, id, timestamp, flags) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, flags) #define TRACE_EVENT_NESTABLE_ASYNC_INSTANT_WITH_TIMESTAMP0( \\ category_group, name, id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN1(category_group, name, id, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN2( \\ category_group, name, id, arg1_name, arg1_val, arg2_name, arg2_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val, arg2_name, arg2_val) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_END0(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP0( \\ category_group, name, id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_BEGIN_WITH_TIMESTAMP1( \\ category_group, name, id, timestamp, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_COPY, \\ arg1_name, arg1_val) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_END_WITH_TIMESTAMP0( \\ category_group, name, id, timestamp) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, category_group, name, id, \\ TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_COPY) #define TRACE_EVENT_COPY_NESTABLE_ASYNC_END1(category_group, name, id, \\ arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID(TRACE_EVENT_PHASE_NESTABLE_ASYNC_END, \\ category_group, name, id, \\ TRACE_EVENT_FLAG_COPY, arg1_name, arg1_val) #define TRACE_LOG_MESSAGE(file, message, line) \\ INTERNAL_TRACE_LOG_MESSAGE(file, message, line) #define TRACE_EVENT_METADATA1(category_group, name, arg1_name, arg1_val) \\ INTERNAL_TRACE_EVENT_METADATA_ADD(category_group, name, arg1_name, arg1_val) #define TRACE_EVENT_CLOCK_SYNC_RECEIVER(sync_id) \\ INTERNAL_TRACE_EVENT_ADD( \\ TRACE_EVENT_PHASE_CLOCK_SYNC, \"__metadata\", \"clock_sync\", \\ TRACE_EVENT_FLAG_NONE, \"sync_id\", sync_id) #define TRACE_EVENT_CLOCK_SYNC_ISSUER(sync_id, issue_ts, issue_end_ts) \\ INTERNAL_TRACE_EVENT_ADD_WITH_TIMESTAMP( \\ TRACE_EVENT_PHASE_CLOCK_SYNC, \"__metadata\", \"clock_sync\", \\ issue_end_ts, TRACE_EVENT_FLAG_NONE, \\ \"sync_id\", sync_id, \"issue_ts\", issue_ts) #define TRACE_EVENT_OBJECT_CREATED_WITH_ID(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_CREATE_OBJECT, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID(category_group, name, id, \\ snapshot) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_SNAPSHOT_OBJECT, category_group, name, \\ id, TRACE_EVENT_FLAG_NONE, \"snapshot\", snapshot) #define TRACE_EVENT_OBJECT_SNAPSHOT_WITH_ID_AND_TIMESTAMP( \\ category_group, name, id, timestamp, snapshot) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID_TID_AND_TIMESTAMP( \\ TRACE_EVENT_PHASE_SNAPSHOT_OBJECT, category_group, name, \\ id, TRACE_EVENT_API_CURRENT_THREAD_ID, timestamp, TRACE_EVENT_FLAG_NONE, \\ \"snapshot\", snapshot) #define TRACE_EVENT_OBJECT_DELETED_WITH_ID(category_group, name, id) \\ INTERNAL_TRACE_EVENT_ADD_WITH_ID( \\ TRACE_EVENT_PHASE_DELETE_OBJECT, category_group, name, id, \\ TRACE_EVENT_FLAG_NONE) #define TRACE_EVENT_CATEGORY_GROUP_ENABLED(category_group, ret)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INTERNAL_TRACE_EVENT_GET_CATEGORY_INFO(category_group)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(INTERNAL_TRACE_EVENT_CATEGORY_GROUP_ENABLED_FOR_RECORDING_MODE())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\* ret = true ; \\ } else { \\* ret = false ; \\ } \\ })",
    "insertText": "while(0) #define TRACE_EVENT_IS_NEW_TRACE(ret)"
  },
  {
    "label": "INTERNAL_TRACE_EVENT_UID()",
    "kind": "Method",
    "detail": "Function (\\ int)",
    "insertText": "INTERNAL_TRACE_EVENT_UID(lastRecordingNumber)"
  },
  {
    "label": "TRACE_EVENT_API_GET_NUM_TRACES_RECORDED()",
    "kind": "Method",
    "detail": "Function (\\ int num_traces_recorded =)",
    "insertText": "TRACE_EVENT_API_GET_NUM_TRACES_RECORDED()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(num_traces_recorded != -1 && \\ num_traces_recorded != \\ INTERNAL_TRACE_EVENT_UID(lastRecordingNumber))"
  }
]