[
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanTimingQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTimingQueryPool"
  },
  {
    "label": "FVulkanGPUTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGPUTiming"
  },
  {
    "label": "FVulkanEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanEventNode"
  },
  {
    "label": "FVulkanEventNodeFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanEventNodeFrame"
  },
  {
    "label": "FVulkanGPUProfiler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanGPUProfiler"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Queue . h \" # include \" GPUProfiler . h \" # include \" VulkanConfiguration . h \" class FVulkanCmdBuffer ; class FVulkanCommandListContext ; class FVulkanDevice ; class FVulkanTimingQueryPool ; #)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0)"
  },
  {
    "label": "FVulkanGPUTiming()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FVulkanGPUTiming(FVulkanCommandListContext* InCmd, FVulkanDevice* InDevice) : Device(InDevice) , bIsTiming(false) , bEndTimestampIssued(false) , CmdContext(InCmd)"
  },
  {
    "label": "FVulkanGPUTiming()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanGPUTiming()"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming(FVulkanCmdBuffer* CmdBuffer = nullptr)"
  },
  {
    "label": "EndTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTiming(FVulkanCmdBuffer* CmdBuffer = nullptr)"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTiming(bool bGetCurrentResultsAndBlock = false)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(uint32 PoolSize = 8)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "RefreshPendingQueries()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RefreshPendingQueries(FVulkanCmdBuffer& CmdBuffer)"
  },
  {
    "label": "DiscardExpiredQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardExpiredQueries(bool bNeedSpace)"
  },
  {
    "label": "PlatformStaticInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformStaticInitialize(void* UserData)"
  },
  {
    "label": "FVulkanEventNode()",
    "kind": "Method",
    "detail": "Function (FVulkanDevice* Device ; bool bIsTiming ; bool bEndTimestampIssued ; uint64 PreviousFrame = UINT64_MAX ; uint64 PreviousTime = 0 ; uint32 NumPendingQueries = 0 ; TQueue<uint32> PendingQueries ; FVulkanCommandListContext* CmdContext ; FVulkanTimingQueryPool* Pool = nullptr ; } ; class FVulkanEventNode : public FGPUProfilerEventNode { public :)",
    "insertText": "FVulkanEventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent, FVulkanCommandListContext* InCmd, FVulkanDevice* InDevice) : FGPUProfilerEventNode(InName, InParent), Timing(InCmd, InDevice)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Timing .)",
    "insertText": "Initialize()"
  },
  {
    "label": "FVulkanEventNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanEventNode()"
  },
  {
    "label": "GetTiming()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTiming()"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming()"
  },
  {
    "label": "StopTiming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopTiming()"
  },
  {
    "label": "EndTiming()",
    "kind": "Method",
    "detail": "Function (Timing .)",
    "insertText": "EndTiming()"
  },
  {
    "label": "FVulkanEventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} FVulkanGPUTiming Timing ; } ; class FVulkanEventNodeFrame : public FGPUProfilerEventNodeFrame { public :)",
    "insertText": "FVulkanEventNodeFrame(FVulkanCommandListContext* InCmd, FVulkanDevice* InDevice) : RootEventTiming(InCmd, InDevice)"
  },
  {
    "label": "FVulkanEventNodeFrame()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanEventNodeFrame()"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "GetRootTimingResults()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRootTimingResults()"
  },
  {
    "label": "PlatformDisablesVSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformDisablesVSync()"
  },
  {
    "label": "FVulkanGPUProfiler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanGPUProfiler()"
  },
  {
    "label": "CreateEventNode()",
    "kind": "Method",
    "detail": "Function (FGPUProfilerEventNode*)",
    "insertText": "CreateEventNode(const TCHAR* InName, FGPUProfilerEventNode* InParent)"
  },
  {
    "label": "FVulkanEventNode()",
    "kind": "Method",
    "detail": "Function (FVulkanEventNode* EventNode = new)",
    "insertText": "FVulkanEventNode(InName, InParent, CmdContext, Device)"
  },
  {
    "label": "EndFrameBeforeSubmit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameBeforeSubmit()"
  },
  {
    "label": "PrepareCrashMarkerkBuffer()",
    "kind": "Method",
    "detail": "Function (bool bCommandlistSubmitted ; FVulkanDevice* Device ; FVulkanCommandListContext* CmdContext ; # if VULKAN_SUPPORTS_GPU_CRASH_DUMPS void)",
    "insertText": "PrepareCrashMarkerkBuffer()"
  },
  {
    "label": "PushMarkerForCrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushMarkerForCrash(FVulkanCmdBuffer* CmdBuffer, VkBuffer DestBuffer, const TCHAR* Name)"
  },
  {
    "label": "PopMarkerForCrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopMarkerForCrash(FVulkanCmdBuffer* CmdBuffer, VkBuffer DestBuffer)"
  },
  {
    "label": "DumpCrashMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpCrashMarkers(void* BufferData)"
  }
]