[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "IHierarchicalCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHierarchicalCache"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "TFlagStateCacheExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFlagStateCacheExtension"
  },
  {
    "label": "CombinePropagatedChildFlags()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SequencerCoreFwd . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Delegates / DelegateCombinations . h \" # include \" MVVM / Extensions / DynamicExtensionContainer . h \" # include \" MVVM / ViewModelPtr . h \" struct FGuid ; namespace UE::Sequencer { class IHierarchicalCache ; template<EnumType> EnumType)",
    "insertText": "CombinePropagatedChildFlags(EnumType ParentFlags, EnumType CombinedChildFlags)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (class IHierarchicalCache { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IHierarchicalCache) virtual ~IHierarchicalCache()"
  },
  {
    "label": "BeginUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginUpdate()"
  },
  {
    "label": "PreVisitChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreVisitChildren(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "PostVisitChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostVisitChildren(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "EndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUpdate()"
  },
  {
    "label": "FHierarchicalCacheExtension()",
    "kind": "Method",
    "detail": "Function (} ; class FHierarchicalCacheExtension : public IDynamicExtension { public : ~)",
    "insertText": "FHierarchicalCacheExtension()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FPreUpdateCachesEvent PreUpdateCachesEvent ; void)",
    "insertText": "Initialize(const FViewModelPtr& InRootModel)"
  },
  {
    "label": "OnCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreated(TSharedRef<FViewModel> InWeakOwner)"
  },
  {
    "label": "OnHierarchyUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHierarchyUpdated()"
  },
  {
    "label": "UpdateCachedFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedFlags()"
  },
  {
    "label": "UpdateAllCachedFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllCachedFlags(const FViewModelPtr& ViewModel, TArrayView<IHierarchicalCache* const> HierarchicalCaches)"
  },
  {
    "label": "UpdateCachedFlagsForModel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateCachedFlagsForModel(const FViewModelPtr& ViewModel, TArrayView<IHierarchicalCache* const> HierarchicalCaches)"
  },
  {
    "label": "TFlagStateCacheExtension()",
    "kind": "Method",
    "detail": "Function (protected : FWeakViewModelPtr WeakOwnerModel ; FWeakViewModelPtr WeakRootModel ; EViewModelListType ModelListFilter ; } ; template<FlagsType> class TFlagStateCacheExtension : public IDynamicExtension,public IHierarchicalCache { public : using Implements = TImplements<IDynamicExtension,IHierarchicalCache> ; ~)",
    "insertText": "TFlagStateCacheExtension()"
  },
  {
    "label": "GetRootFlags()",
    "kind": "Method",
    "detail": "Function (} FlagsType)",
    "insertText": "GetRootFlags()"
  },
  {
    "label": "GetCachedFlags()",
    "kind": "Method",
    "detail": "Function (} FlagsType)",
    "insertText": "GetCachedFlags(uint32 InModelID)"
  },
  {
    "label": "ComputeFlagsForModel()",
    "kind": "Method",
    "detail": "Function (} private : FlagsType)",
    "insertText": "ComputeFlagsForModel(const FViewModelPtr& ViewModel)"
  },
  {
    "label": "PostComputeChildrenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostComputeChildrenFlags(const FViewModelPtr& ViewModel, FlagsType& OutThisModelFlags, FlagsType& OutPropagateToParentFlags)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CachedFlagsFromNodeID .)",
    "insertText": "Empty()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (IndividualItemFlags .)",
    "insertText": "Emplace(FlagsType::None)"
  },
  {
    "label": "ComputeFlagsForModel()",
    "kind": "Method",
    "detail": "Function (FlagsType ThisModelFlags =)",
    "insertText": "ComputeFlagsForModel(ViewModel)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (IndividualItemFlags .)",
    "insertText": "Emplace(ThisModelFlags)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (FlagsType ThisModelFlags = IndividualItemFlags .)",
    "insertText": "Pop()"
  },
  {
    "label": "CombinePropagatedChildFlags()",
    "kind": "Method",
    "detail": "Function (ThisModelFlags =)",
    "insertText": "CombinePropagatedChildFlags(ThisModelFlags, FlagsPropagatedFromChildren)"
  },
  {
    "label": "PostComputeChildrenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostComputeChildrenFlags(ViewModel, ThisModelFlags, AccumulatedChildFlags.Last())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (AccumulatedChildFlags .)",
    "insertText": "Last() |= (ThisModelFlags & FlagsType::InheritedFromChildren)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CachedFlagsFromNodeID .)",
    "insertText": "Add(ViewModel->GetModelID(), ThisModelFlags)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (RootFlags = AccumulatedChildFlags .)",
    "insertText": "Last()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (CachedFlagsFromNodeID .)",
    "insertText": "Shrink()"
  }
]