[
  {
    "label": "FPushModelPerNetDriverState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPushModelPerNetDriverState"
  },
  {
    "label": "FPushModelPerNetDriverState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / PushModel / PushModelMacros . h \" # if WITH_PUSH_MODEL # include \" CoreMinimal . h \" # include \" Containers / BitArray . h \" # include \" PushModelUtils . h \" namespace UEPushModelPrivate { class FPushModelPerNetDriverState { public :)",
    "insertText": "FPushModelPerNetDriverState(const uint16 InNumberOfProperties) : PropertyDirtyStates(true, InNumberOfProperties) , bRecentlyCollectedGarbage(false) , bHasDirtyProperties(true)"
  },
  {
    "label": "FPushModelPerNetDriverState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPushModelPerNetDriverState(FPushModelPerNetDriverState&& Other) : PropertyDirtyStates(MoveTemp(Other.PropertyDirtyStates)) , bRecentlyCollectedGarbage(Other.bRecentlyCollectedGarbage)"
  },
  {
    "label": "FPushModelPerNetDriverState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPushModelPerNetDriverState(const FPushModelPerNetDriverState& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPushModelPerNetDriverState&)",
    "insertText": "operator(const FPushModelPerNetDriverState& Other)"
  },
  {
    "label": "SetRecentlyCollectedGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecentlyCollectedGarbage()"
  },
  {
    "label": "ResetDirtyStates()",
    "kind": "Method",
    "detail": "Function (bRecentlyCollectedGarbage = true ; } void)",
    "insertText": "ResetDirtyStates()"
  },
  {
    "label": "ResetBitArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBitArray(PropertyDirtyStates)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (bRecentlyCollectedGarbage = false ; bHasDirtyProperties = false ; } void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (PropertyDirtyStates .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "IsPropertyDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPropertyDirty(const uint16 RepIndex)"
  },
  {
    "label": "DidRecentlyCollectGarbage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DidRecentlyCollectGarbage()"
  },
  {
    "label": "BitwiseOrBitArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitwiseOrBitArrays(OtherBitArray, PropertyDirtyStates)"
  },
  {
    "label": "MarkPropertyDirty()",
    "kind": "Method",
    "detail": "Function (bHasDirtyProperties = true ; } void)",
    "insertText": "MarkPropertyDirty(const uint16 RepIndex)"
  },
  {
    "label": "HasDirtyProperties()",
    "kind": "Method",
    "detail": "Function (PropertyDirtyStates [ RepIndex ] = true ; bHasDirtyProperties = true ; } bool)",
    "insertText": "HasDirtyProperties()"
  }
]