[
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef STACK_ALLOC_H # define STACK_ALLOC_H # include \" opus_types . h \" # include \" opus_defines . h \" #)",
    "insertText": "if(!defined (VAR_ARRAYS) && !defined (USE_ALLOCA) && !defined (NONTHREADSAFE_PSEUDOSTACK)) #error \"Opus requires one of VAR_ARRAYS, USE_ALLOCA, or NONTHREADSAFE_PSEUDOSTACK be defined to select the temporary allocation mode.\" #endif #ifdef USE_ALLOCA # ifdef _WIN32 # include <malloc.h> # else # ifdef HAVE_ALLOCA_H # include <alloca.h> # else # include <stdlib.h> # endif # endif #endif #if defined(VAR_ARRAYS) #define VARDECL(type, var) #define ALLOC(var, size, type) type var[size] #define SAVE_STACK #define RESTORE_STACK #define ALLOC_STACK #define ALLOC_NONE 1 #elif defined(USE_ALLOCA) #define VARDECL(type, var) type *var # ifdef _WIN32 # define ALLOC(var, size, type) var = ((type*)_alloca(sizeof(type)*(size))) # else # define ALLOC(var, size, type) var = ((type*)alloca(sizeof(type)*(size)))"
  },
  {
    "label": "ALIGN()",
    "kind": "Method",
    "detail": "Function (char* global_stack = 0 ; # else char* global_stack ; char* scratch_ptr ; # endif # ifdef ENABLE_VALGRIND # include<valgrind / memcheck . h> # ifdef CELT_C char* global_stack_top = 0 ; # else char* global_stack_top ; # endif # define)",
    "insertText": "ALIGN(stack, size) ((stack) += ((size) - (long)(stack)) & ((size) - 1)) #define PUSH(stack, size, type) (VALGRIND_MAKE_MEM_NOACCESS(stack, global_stack_top-stack),ALIGN((stack),sizeof(type)/sizeof(char)),VALGRIND_MAKE_MEM_UNDEFINED(stack, ((size)*sizeof(type)/sizeof(char))),(stack)+=(2*(size)*sizeof(type)/sizeof(char)),(type*)((stack)-(2*(size)*sizeof(type)/sizeof(char)))) #define RESTORE_STACK ((global_stack = _saved_stack),VALGRIND_MAKE_MEM_NOACCESS(global_stack, global_stack_top-global_stack))"
  },
  {
    "label": "ALIGN()",
    "kind": "Method",
    "detail": "Function (_saved_stack = global_stack ; # else # define)",
    "insertText": "ALIGN(stack, size) ((stack) += ((size) - (long)(stack)) & ((size) - 1)) #define PUSH(stack, size, type) (ALIGN((stack),sizeof(type)/sizeof(char)),(stack)+=(size)*(sizeof(type)/sizeof(char)),(type*)((stack)-(size)*(sizeof(type)/sizeof(char)))) #if 0 #define RESTORE_STACK (printf(\"%ld %s:%d\\n\", global_stack-scratch_ptr, __FILE__, __LINE__),global_stack = _saved_stack) #else #define RESTORE_STACK (global_stack = _saved_stack)"
  },
  {
    "label": "VARDECL()",
    "kind": "Method",
    "detail": "Function (_saved_stack = global_stack ; # endif # include \" os_support . h \" # define)",
    "insertText": "VARDECL(type, var) type *var #define ALLOC(var, size, type) var = PUSH(global_stack, size, type)"
  },
  {
    "label": "OPUS_CHECK_ARRAY()",
    "kind": "Method",
    "detail": "Function (# define ALLOC_NONE 0 # endif # ifdef ENABLE_VALGRIND # include<valgrind / memcheck . h> # define)",
    "insertText": "OPUS_CHECK_ARRAY(ptr, len) VALGRIND_CHECK_MEM_IS_DEFINED(ptr, len*sizeof(*ptr)) #define OPUS_CHECK_VALUE(value) VALGRIND_CHECK_VALUE_IS_DEFINED(value) #define OPUS_CHECK_ARRAY_COND(ptr, len) VALGRIND_CHECK_MEM_IS_DEFINED(ptr, len*sizeof(*ptr)) #define OPUS_CHECK_VALUE_COND(value) VALGRIND_CHECK_VALUE_IS_DEFINED(value) #define OPUS_PRINT_INT(value)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, #value \" = %d at %s:%d\\n\", value, __FILE__, __LINE__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define OPUS_FPRINTF fprintf #else static OPUS_INLINE int _opus_false(void)"
  }
]