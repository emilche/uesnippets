[
  {
    "label": "FOpenGLProgramBinary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLProgramBinary"
  },
  {
    "label": "FCompressedProgramBinaryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedProgramBinaryHeader"
  },
  {
    "label": "FOpenGLProgramBinary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OpenGLDrvPrivate . h \" class FOpenGLProgramBinary { public :)",
    "insertText": "FOpenGLProgramBinary()"
  },
  {
    "label": "FOpenGLProgramBinary()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FOpenGLProgramBinary(TArray<uint8>&& ProgramMemory) : OwnedData(MoveTemp(ProgramMemory)), DataView(OwnedData)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_OpenGLShaderLRUProgramMemory, DataView.Num())"
  },
  {
    "label": "FOpenGLProgramBinary()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOpenGLProgramBinary(TArrayView<const uint8> ProgramMemory) : DataView(ProgramMemory)"
  },
  {
    "label": "INC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY(STAT_OpenGLShaderLRUProgramMemoryMapped, DataView.Num())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FOpenGLProgramBinary&)",
    "insertText": "operator(FOpenGLProgramBinary&& rhs)"
  },
  {
    "label": "FOpenGLProgramBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLProgramBinary(FOpenGLProgramBinary&& Src)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_OpenGLShaderLRUProgramMemory, DataView.Num())"
  },
  {
    "label": "DEC_MEMORY_STAT_BY()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DEC_MEMORY_STAT_BY(STAT_OpenGLShaderLRUProgramMemoryMapped, DataView.Num())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOwned()"
  },
  {
    "label": "GetDataView()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<const uint8>)",
    "insertText": "GetDataView()"
  },
  {
    "label": "GetProgramBinaryFromGLProgram()",
    "kind": "Method",
    "detail": "Function (struct FCompressedProgramBinaryHeader { const uint32 NotCompressed = 0 xFFFFFFFF ; uint32 UncompressedSize ; } ; FOpenGLProgramBinary)",
    "insertText": "GetProgramBinaryFromGLProgram(GLuint Program)"
  },
  {
    "label": "GetUncompressedProgramBinaryFromGLProgram()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUncompressedProgramBinaryFromGLProgram(GLuint Program, TArray<uint8>& ProgramBinaryOUT)"
  },
  {
    "label": "GetCompressedProgramBinaryFromGLProgram()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCompressedProgramBinaryFromGLProgram(GLuint Program, TArray<uint8>& ProgramBinaryOUT)"
  },
  {
    "label": "CompressProgramBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressProgramBinary(const TArrayView<const uint8>& UncompressedProgramBinary, TArray<uint8>& ProgramBinaryOUT)"
  },
  {
    "label": "UncompressCompressedBinaryProgram()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UncompressCompressedBinaryProgram(const TArrayView<const uint8>& CompressedProgramBinary, TArray<uint8>& UncompressedProgramBinaryOUT)"
  }
]