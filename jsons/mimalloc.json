[
  {
    "label": "mi_heap_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_heap_s"
  },
  {
    "label": "mi_heap_area_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_heap_area_s"
  },
  {
    "label": "mi_option_e",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "mi_option_e"
  },
  {
    "label": "mi_ext_win32_allocators_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_ext_win32_allocators_s"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "mi_stl_allocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mi_stl_allocator"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef MIMALLOC_H # define MIMALLOC_H # define MI_MALLOC_VERSION 2 0 0 # ifdef __cplusplus #)",
    "insertText": "if(__cplusplus >= 201103L) || (_MSC_VER > 1900) #define mi_attr_noexcept noexcept #else #define mi_attr_noexcept throw() #endif #else #define mi_attr_noexcept #endif #if defined(__cplusplus) && (__cplusplus >= 201703) #define mi_decl_nodiscard [[nodiscard]] #elif (defined(__GNUC__) && __GNUC__ >= 4) || defined(__clang__) #define mi_decl_nodiscard __attribute__((warn_unused_result)) #elif (_MSC_VER >= 1700) #define mi_decl_nodiscard _Check_return_ #else #define mi_decl_nodiscard #endif #if defined(_MSC_VER) || defined(__MINGW32__) #if !defined(MI_SHARED_LIB) #define mi_decl_export #elif defined(MI_SHARED_LIB_EXPORT) #define mi_decl_export __declspec(dllexport) #else #define mi_decl_export __declspec(dllimport) #endif #if defined(__MINGW32__) #define mi_decl_restrict #define mi_attr_malloc __attribute__((malloc)) #else #if (_MSC_VER >= 1900) && !defined(__EDG__) #define mi_decl_restrict __declspec(allocator) __declspec(restrict) #else #define mi_decl_restrict __declspec(restrict) #endif #define mi_attr_malloc #endif #define mi_cdecl __cdecl #define mi_attr_alloc_size(s) #define mi_attr_alloc_size2(s1,s2) #define mi_attr_alloc_align(p) #elif defined(__GNUC__) #define mi_cdecl #define mi_decl_export __attribute__((visibility(\"default\"))) #define mi_decl_restrict #define mi_attr_malloc __attribute__((malloc)) #if (defined(__clang_major__) && (__clang_major__ < 4)) || (__GNUC__ < 5) #define mi_attr_alloc_size(s) #define mi_attr_alloc_size2(s1,s2) #define mi_attr_alloc_align(p) #elif defined(__INTEL_COMPILER) #define mi_attr_alloc_size(s) __attribute__((alloc_size(s))) #define mi_attr_alloc_size2(s1,s2) __attribute__((alloc_size(s1,s2))) #define mi_attr_alloc_align(p) #else #define mi_attr_alloc_size(s) __attribute__((alloc_size(s))) #define mi_attr_alloc_size2(s1,s2) __attribute__((alloc_size(s1,s2))) #define mi_attr_alloc_align(p) __attribute__((alloc_align(p))) #endif #else #define mi_cdecl #define mi_decl_export #define mi_decl_restrict #define mi_attr_malloc #define mi_attr_alloc_size(s) #define mi_attr_alloc_size2(s1,s2) #define mi_attr_alloc_align(p)"
  },
  {
    "label": "mi_malloc()",
    "kind": "Method",
    "detail": "Function (# endif mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_malloc(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_calloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_calloc(size_t count, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(1,2)"
  },
  {
    "label": "mi_realloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_realloc(void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_expand()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void*)",
    "insertText": "mi_expand(void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_free()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_free(void* p)"
  },
  {
    "label": "mi_strdup()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict char*)",
    "insertText": "mi_strdup(const char* s)"
  },
  {
    "label": "mi_strndup()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict char*)",
    "insertText": "mi_strndup(const char* s, size_t n)"
  },
  {
    "label": "mi_realpath()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict char*)",
    "insertText": "mi_realpath(const char* fname, char* resolved_name)"
  },
  {
    "label": "MI_SMALL_WSIZE_MAX()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MI_SMALL_WSIZE_MAX(128) #define MI_SMALL_SIZE_MAX (MI_SMALL_WSIZE_MAX*sizeof(void*)) mi_decl_nodiscard mi_decl_export mi_decl_restrict void* mi_malloc_small(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_zalloc_small()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_zalloc_small(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_zalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_zalloc(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_mallocn()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_mallocn(size_t count, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(1,2)"
  },
  {
    "label": "mi_reallocn()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_reallocn(void* p, size_t count, size_t size) mi_attr_noexcept mi_attr_alloc_size2(2,3)"
  },
  {
    "label": "mi_reallocf()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_reallocf(void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_usable_size()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export size_t)",
    "insertText": "mi_usable_size(const void* p)"
  },
  {
    "label": "mi_good_size()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export size_t)",
    "insertText": "mi_good_size(size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(mi_cdecl mi_deferred_free_fun)(bool force, unsigned long long heartbeat, void* arg)"
  },
  {
    "label": "mi_register_deferred_free()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_register_deferred_free(mi_deferred_free_fun* deferred_free, void* arg)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(mi_cdecl mi_output_fun)(const char* msg, void* arg)"
  },
  {
    "label": "mi_register_output()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_register_output(mi_output_fun* out, void* arg)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(mi_cdecl mi_error_fun)(int err, void* arg)"
  },
  {
    "label": "mi_register_error()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_register_error(mi_error_fun* fun, void* arg)"
  },
  {
    "label": "mi_collect()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_collect(bool force)"
  },
  {
    "label": "mi_version()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_version(void)"
  },
  {
    "label": "mi_stats_reset()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_stats_reset(void)"
  },
  {
    "label": "mi_stats_merge()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_stats_merge(void)"
  },
  {
    "label": "mi_stats_print()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_stats_print(void* out)"
  },
  {
    "label": "mi_stats_print_out()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_stats_print_out(mi_output_fun* out, void* arg)"
  },
  {
    "label": "mi_process_init()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_process_init(void)"
  },
  {
    "label": "mi_thread_init()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_thread_init(void)"
  },
  {
    "label": "mi_thread_done()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_thread_done(void)"
  },
  {
    "label": "mi_thread_stats_print_out()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_thread_stats_print_out(mi_output_fun* out, void* arg)"
  },
  {
    "label": "mi_process_info()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_process_info(size_t* elapsed_msecs, size_t* user_msecs, size_t* system_msecs, size_t* current_rss, size_t* peak_rss, size_t* current_commit, size_t* peak_commit, size_t* page_faults)"
  },
  {
    "label": "mi_malloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_malloc_aligned(size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1) mi_attr_alloc_align(2)"
  },
  {
    "label": "mi_malloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_malloc_aligned_at(size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_zalloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_zalloc_aligned(size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1) mi_attr_alloc_align(2)"
  },
  {
    "label": "mi_zalloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_zalloc_aligned_at(size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_calloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_calloc_aligned(size_t count, size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(1,2) mi_attr_alloc_align(3)"
  },
  {
    "label": "mi_calloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_calloc_aligned_at(size_t count, size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(1,2)"
  },
  {
    "label": "mi_realloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_realloc_aligned(void* p, size_t newsize, size_t alignment) mi_attr_noexcept mi_attr_alloc_size(2) mi_attr_alloc_align(3)"
  },
  {
    "label": "mi_realloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_realloc_aligned_at(void* p, size_t newsize, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_heap_new()",
    "kind": "Method",
    "detail": "Function (struct mi_heap_s ; typedef struct mi_heap_s mi_heap_t ; mi_decl_nodiscard mi_decl_export mi_heap_t*)",
    "insertText": "mi_heap_new(void)"
  },
  {
    "label": "mi_heap_delete()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_heap_delete(mi_heap_t* heap)"
  },
  {
    "label": "mi_heap_destroy()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_heap_destroy(mi_heap_t* heap)"
  },
  {
    "label": "mi_heap_set_default()",
    "kind": "Method",
    "detail": "Function (mi_decl_export mi_heap_t*)",
    "insertText": "mi_heap_set_default(mi_heap_t* heap)"
  },
  {
    "label": "mi_heap_get_default()",
    "kind": "Method",
    "detail": "Function (mi_decl_export mi_heap_t*)",
    "insertText": "mi_heap_get_default(void)"
  },
  {
    "label": "mi_heap_get_backing()",
    "kind": "Method",
    "detail": "Function (mi_decl_export mi_heap_t*)",
    "insertText": "mi_heap_get_backing(void)"
  },
  {
    "label": "mi_heap_collect()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_heap_collect(mi_heap_t* heap, bool force)"
  },
  {
    "label": "mi_heap_malloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_malloc(mi_heap_t* heap, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_heap_zalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_zalloc(mi_heap_t* heap, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_heap_calloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_calloc(mi_heap_t* heap, size_t count, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(2, 3)"
  },
  {
    "label": "mi_heap_mallocn()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_mallocn(mi_heap_t* heap, size_t count, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(2, 3)"
  },
  {
    "label": "mi_heap_malloc_small()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_malloc_small(mi_heap_t* heap, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_heap_realloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_realloc(mi_heap_t* heap, void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(3)"
  },
  {
    "label": "mi_heap_reallocn()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_reallocn(mi_heap_t* heap, void* p, size_t count, size_t size) mi_attr_noexcept mi_attr_alloc_size2(3,4)"
  },
  {
    "label": "mi_heap_reallocf()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_reallocf(mi_heap_t* heap, void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(3)"
  },
  {
    "label": "mi_heap_strdup()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict char*)",
    "insertText": "mi_heap_strdup(mi_heap_t* heap, const char* s)"
  },
  {
    "label": "mi_heap_strndup()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict char*)",
    "insertText": "mi_heap_strndup(mi_heap_t* heap, const char* s, size_t n)"
  },
  {
    "label": "mi_heap_realpath()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict char*)",
    "insertText": "mi_heap_realpath(mi_heap_t* heap, const char* fname, char* resolved_name)"
  },
  {
    "label": "mi_heap_malloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_malloc_aligned(mi_heap_t* heap, size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2) mi_attr_alloc_align(3)"
  },
  {
    "label": "mi_heap_malloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_malloc_aligned_at(mi_heap_t* heap, size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_heap_zalloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_zalloc_aligned(mi_heap_t* heap, size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2) mi_attr_alloc_align(3)"
  },
  {
    "label": "mi_heap_zalloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_zalloc_aligned_at(mi_heap_t* heap, size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_heap_calloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_calloc_aligned(mi_heap_t* heap, size_t count, size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(2, 3) mi_attr_alloc_align(4)"
  },
  {
    "label": "mi_heap_calloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_heap_calloc_aligned_at(mi_heap_t* heap, size_t count, size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size2(2, 3)"
  },
  {
    "label": "mi_heap_realloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_realloc_aligned(mi_heap_t* heap, void* p, size_t newsize, size_t alignment) mi_attr_noexcept mi_attr_alloc_size(3) mi_attr_alloc_align(4)"
  },
  {
    "label": "mi_heap_realloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_realloc_aligned_at(mi_heap_t* heap, void* p, size_t newsize, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_alloc_size(3)"
  },
  {
    "label": "mi_rezalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_rezalloc(void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_recalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_recalloc(void* p, size_t newcount, size_t size) mi_attr_noexcept mi_attr_alloc_size2(2,3)"
  },
  {
    "label": "mi_rezalloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_rezalloc_aligned(void* p, size_t newsize, size_t alignment) mi_attr_noexcept mi_attr_alloc_size(2) mi_attr_alloc_align(3)"
  },
  {
    "label": "mi_rezalloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_rezalloc_aligned_at(void* p, size_t newsize, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_recalloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_recalloc_aligned(void* p, size_t newcount, size_t size, size_t alignment) mi_attr_noexcept mi_attr_alloc_size2(2,3) mi_attr_alloc_align(4)"
  },
  {
    "label": "mi_recalloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_recalloc_aligned_at(void* p, size_t newcount, size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_alloc_size2(2,3)"
  },
  {
    "label": "mi_heap_rezalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_rezalloc(mi_heap_t* heap, void* p, size_t newsize) mi_attr_noexcept mi_attr_alloc_size(3)"
  },
  {
    "label": "mi_heap_recalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_recalloc(mi_heap_t* heap, void* p, size_t newcount, size_t size) mi_attr_noexcept mi_attr_alloc_size2(3,4)"
  },
  {
    "label": "mi_heap_rezalloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_rezalloc_aligned(mi_heap_t* heap, void* p, size_t newsize, size_t alignment) mi_attr_noexcept mi_attr_alloc_size(3) mi_attr_alloc_align(4)"
  },
  {
    "label": "mi_heap_rezalloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_rezalloc_aligned_at(mi_heap_t* heap, void* p, size_t newsize, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_alloc_size(3)"
  },
  {
    "label": "mi_heap_recalloc_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_recalloc_aligned(mi_heap_t* heap, void* p, size_t newcount, size_t size, size_t alignment) mi_attr_noexcept mi_attr_alloc_size2(3,4) mi_attr_alloc_align(5)"
  },
  {
    "label": "mi_heap_recalloc_aligned_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_heap_recalloc_aligned_at(mi_heap_t* heap, void* p, size_t newcount, size_t size, size_t alignment, size_t offset) mi_attr_noexcept mi_attr_alloc_size2(3,4)"
  },
  {
    "label": "mi_heap_contains_block()",
    "kind": "Method",
    "detail": "Function (mi_decl_export bool)",
    "insertText": "mi_heap_contains_block(mi_heap_t* heap, const void* p)"
  },
  {
    "label": "mi_heap_check_owned()",
    "kind": "Method",
    "detail": "Function (mi_decl_export bool)",
    "insertText": "mi_heap_check_owned(mi_heap_t* heap, const void* p)"
  },
  {
    "label": "mi_check_owned()",
    "kind": "Method",
    "detail": "Function (mi_decl_export bool)",
    "insertText": "mi_check_owned(const void* p)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef struct mi_heap_area_s { void* blocks ; size_t reserved ; size_t committed ; size_t used ; size_t block_size ; } mi_heap_area_t ; typedef)",
    "insertText": "bool(mi_cdecl mi_block_visit_fun)(const mi_heap_t* heap, const mi_heap_area_t* area, void* block, size_t block_size, void* arg)"
  },
  {
    "label": "mi_heap_visit_blocks()",
    "kind": "Method",
    "detail": "Function (mi_decl_export bool)",
    "insertText": "mi_heap_visit_blocks(const mi_heap_t* heap, bool visit_all_blocks, mi_block_visit_fun* visitor, void* arg)"
  },
  {
    "label": "mi_is_in_heap_region()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export bool)",
    "insertText": "mi_is_in_heap_region(const void* p)"
  },
  {
    "label": "mi_is_redirected()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export bool)",
    "insertText": "mi_is_redirected(void)"
  },
  {
    "label": "mi_reserve_huge_os_pages_interleave()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_reserve_huge_os_pages_interleave(size_t pages, size_t numa_nodes, size_t timeout_msecs)"
  },
  {
    "label": "mi_reserve_huge_os_pages_at()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_reserve_huge_os_pages_at(size_t pages, int numa_node, size_t timeout_msecs)"
  },
  {
    "label": "mi_reserve_os_memory()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_reserve_os_memory(size_t size, bool commit, bool allow_large)"
  },
  {
    "label": "mi_manage_os_memory()",
    "kind": "Method",
    "detail": "Function (mi_decl_export bool)",
    "insertText": "mi_manage_os_memory(void* start, size_t size, bool is_committed, bool is_large, bool is_zero, int numa_node)"
  },
  {
    "label": "mi_debug_show_arenas()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_debug_show_arenas(void)"
  },
  {
    "label": "mi_reserve_huge_os_pages()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_reserve_huge_os_pages(size_t pages, double max_secs, size_t* pages_reserved)"
  },
  {
    "label": "mi_malloc_tp()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "mi_malloc_tp(tp) ((tp*)mi_malloc(sizeof(tp))) #define mi_zalloc_tp(tp) ((tp*)mi_zalloc(sizeof(tp))) #define mi_calloc_tp(tp,n) ((tp*)mi_calloc(n,sizeof(tp))) #define mi_mallocn_tp(tp,n) ((tp*)mi_mallocn(n,sizeof(tp))) #define mi_reallocn_tp(p,tp,n) ((tp*)mi_reallocn(p,n,sizeof(tp))) #define mi_recalloc_tp(p,tp,n) ((tp*)mi_recalloc(p,n,sizeof(tp))) #define mi_heap_malloc_tp(hp,tp) ((tp*)mi_heap_malloc(hp,sizeof(tp))) #define mi_heap_zalloc_tp(hp,tp) ((tp*)mi_heap_zalloc(hp,sizeof(tp))) #define mi_heap_calloc_tp(hp,tp,n) ((tp*)mi_heap_calloc(hp,n,sizeof(tp))) #define mi_heap_mallocn_tp(hp,tp,n) ((tp*)mi_heap_mallocn(hp,n,sizeof(tp))) #define mi_heap_reallocn_tp(hp,p,tp,n) ((tp*)mi_heap_reallocn(hp,p,n,sizeof(tp))) #define mi_heap_recalloc_tp(hp,p,tp,n) ((tp*)mi_heap_recalloc(hp,p,n,sizeof(tp)))"
  },
  {
    "label": "mi_option_is_enabled()",
    "kind": "Method",
    "detail": "Function (mi_option_show_errors,mi_option_show_stats,mi_option_verbose,mi_option_eager_commit,mi_option_eager_region_commit,mi_option_reset_decommits,mi_option_large_os_pages,mi_option_reserve_huge_os_pages,mi_option_reserve_os_memory,mi_option_segment_cache,mi_option_page_reset,mi_option_abandoned_page_reset,mi_option_segment_reset,mi_option_eager_commit_delay,mi_option_allow_decommit,mi_option_reset_delay,mi_option_segment_decommit_delay,mi_option_use_numa_nodes,mi_option_limit_os_alloc,mi_option_os_tag,mi_option_max_errors,mi_option_max_warnings,_mi_option_last } mi_option_t ; mi_decl_nodiscard mi_decl_export bool)",
    "insertText": "mi_option_is_enabled(mi_option_t option)"
  },
  {
    "label": "mi_option_enable()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_option_enable(mi_option_t option)"
  },
  {
    "label": "mi_option_disable()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_option_disable(mi_option_t option)"
  },
  {
    "label": "mi_option_set_enabled()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_option_set_enabled(mi_option_t option, bool enable)"
  },
  {
    "label": "mi_option_set_enabled_default()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_option_set_enabled_default(mi_option_t option, bool enable)"
  },
  {
    "label": "mi_option_get()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export long)",
    "insertText": "mi_option_get(mi_option_t option)"
  },
  {
    "label": "mi_option_set()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_option_set(mi_option_t option, long value)"
  },
  {
    "label": "mi_option_set_default()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_option_set_default(mi_option_t option, long value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(MI_USE_EXTERNAL_ALLOCATORS) #define MI_USE_EXTERNAL_ALLOCATORS 0 #endif #if defined(_WIN32)"
  },
  {
    "label": "mi_ext_set_win32_allocators()",
    "kind": "Method",
    "detail": "Function (void* VirtualAlloc ; void* VirtualFree ; void* VirtualAlloc2 ; void* NtAllocateVirtualMemoryEx ; } mi_ext_win32_allocators_t ; # if MI_USE_EXTERNAL_ALLOCATORS mi_decl_export void)",
    "insertText": "mi_ext_set_win32_allocators(const mi_ext_win32_allocators_t* allocators)"
  },
  {
    "label": "mi_cfree()",
    "kind": "Method",
    "detail": "Function (# endif # endif mi_decl_export void)",
    "insertText": "mi_cfree(void* p)"
  },
  {
    "label": "mi__expand()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void*)",
    "insertText": "mi__expand(void* p, size_t newsize)"
  },
  {
    "label": "mi_malloc_size()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export size_t)",
    "insertText": "mi_malloc_size(const void* p)"
  },
  {
    "label": "mi_malloc_usable_size()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export size_t)",
    "insertText": "mi_malloc_usable_size(const void *p)"
  },
  {
    "label": "mi_posix_memalign()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_posix_memalign(void** p, size_t alignment, size_t size)"
  },
  {
    "label": "mi_memalign()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_memalign(size_t alignment, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2) mi_attr_alloc_align(1)"
  },
  {
    "label": "mi_valloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_valloc(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_pvalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_pvalloc(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_aligned_alloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_aligned_alloc(size_t alignment, size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(2) mi_attr_alloc_align(1)"
  },
  {
    "label": "mi_reallocarray()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_reallocarray(void* p, size_t count, size_t size) mi_attr_noexcept mi_attr_alloc_size2(2,3)"
  },
  {
    "label": "mi_aligned_recalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_aligned_recalloc(void* p, size_t newcount, size_t size, size_t alignment)"
  },
  {
    "label": "mi_aligned_offset_recalloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_aligned_offset_recalloc(void* p, size_t newcount, size_t size, size_t alignment, size_t offset)"
  },
  {
    "label": "mi_wcsdup()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict unsigned short*)",
    "insertText": "mi_wcsdup(const unsigned short* s)"
  },
  {
    "label": "mi_mbsdup()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict unsigned char*)",
    "insertText": "mi_mbsdup(const unsigned char* s)"
  },
  {
    "label": "mi_dupenv_s()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_dupenv_s(char** buf, size_t* size, const char* name)"
  },
  {
    "label": "mi_wdupenv_s()",
    "kind": "Method",
    "detail": "Function (mi_decl_export int)",
    "insertText": "mi_wdupenv_s(unsigned short** buf, size_t* size, const unsigned short* name)"
  },
  {
    "label": "mi_free_size()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_free_size(void* p, size_t size)"
  },
  {
    "label": "mi_free_size_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_free_size_aligned(void* p, size_t size, size_t alignment)"
  },
  {
    "label": "mi_free_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_export void)",
    "insertText": "mi_free_aligned(void* p, size_t alignment)"
  },
  {
    "label": "mi_new()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_new(size_t size) mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_new_aligned()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_new_aligned(size_t size, size_t alignment) mi_attr_malloc mi_attr_alloc_size(1) mi_attr_alloc_align(2)"
  },
  {
    "label": "mi_new_nothrow()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_new_nothrow(size_t size) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1)"
  },
  {
    "label": "mi_new_aligned_nothrow()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_new_aligned_nothrow(size_t size, size_t alignment) mi_attr_noexcept mi_attr_malloc mi_attr_alloc_size(1) mi_attr_alloc_align(2)"
  },
  {
    "label": "mi_new_n()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export mi_decl_restrict void*)",
    "insertText": "mi_new_n(size_t count, size_t size) mi_attr_malloc mi_attr_alloc_size2(1, 2)"
  },
  {
    "label": "mi_new_realloc()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_new_realloc(void* p, size_t newsize) mi_attr_alloc_size(2)"
  },
  {
    "label": "mi_new_reallocn()",
    "kind": "Method",
    "detail": "Function (mi_decl_nodiscard mi_decl_export void*)",
    "insertText": "mi_new_reallocn(void* p, size_t newcount, size_t size) mi_attr_alloc_size2(2, 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # endif # ifdef __cplusplus # include<cstdint> #)",
    "insertText": "if(__cplusplus >= 201103L) || (_MSC_VER > 1900)"
  },
  {
    "label": "mi_stl_allocator()",
    "kind": "Method",
    "detail": "Function (typedef T value_type ; typedef std::size_t size_type ; typedef std::ptrdiff_t difference_type ; typedef value_type& reference ; typedef value_type const& const_reference ; typedef value_type* pointer ; typedef value_type const* const_pointer ; template<class U> struct rebind { typedef mi_stl_allocator<U> other ; } ;)",
    "insertText": "mi_stl_allocator()"
  },
  {
    "label": "mi_stl_allocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_stl_allocator(const mi_stl_allocator&)"
  },
  {
    "label": "mi_stl_allocator()",
    "kind": "Method",
    "detail": "Function (template<class U>)",
    "insertText": "mi_stl_allocator(const mi_stl_allocator<U>&)"
  },
  {
    "label": "select_on_container_copy_construction()",
    "kind": "Method",
    "detail": "Function (} mi_stl_allocator)",
    "insertText": "select_on_container_copy_construction()"
  },
  {
    "label": "mi_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_free(p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(__cplusplus >= 201703L) mi_decl_nodiscard T* allocate(size_type count)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} mi_decl_nodiscard T*)",
    "insertText": "allocate(size_type count, const void*)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} # else mi_decl_nodiscard pointer)",
    "insertText": "allocate(size_type count, const void* = 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif #)",
    "insertText": "if((__cplusplus >= 201103L) || (_MSC_VER > 1900))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (using propagate_on_container_move_assignment = std::true_type ; using propagate_on_container_swap = std::true_type ; using is_always_equal = std::true_type ; template<class U,class . . . Args> void)",
    "insertText": "construct(U* p, Args&& ...args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(p) U(std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "destroy(U* p)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (p -> ~)",
    "insertText": "U()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "construct(pointer p, value_type const& val)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(p) value_type(val)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroy(pointer p)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (p -> ~)",
    "insertText": "value_type()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} # endif size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "address(reference x)"
  }
]