[
  {
    "label": "AnalyzerHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalyzerHelper"
  },
  {
    "label": "AnalyzerHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_HELPER_H_ # define TEST_PC_E2E_ANALYZER_HELPER_H_ # include<map> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / sequence_checker . h \" # include \" api / test / track_id_stream_info_map . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { namespace webrtc_pc_e2e { class AnalyzerHelper : public TrackIdStreamInfoMap { public :)",
    "insertText": "AnalyzerHelper()"
  },
  {
    "label": "AddTrackToStreamMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackToStreamMapping(absl::string_view track_id, absl::string_view receiver_peer, absl::string_view stream_label, absl::optional<std::string> sync_group)"
  },
  {
    "label": "AddTrackToStreamMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackToStreamMapping(std::string track_id, std::string stream_label)"
  },
  {
    "label": "AddTrackToStreamMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackToStreamMapping(std::string track_id, std::string stream_label, std::string sync_group)"
  },
  {
    "label": "GetStreamInfoFromTrackId()",
    "kind": "Method",
    "detail": "Function (StreamInfo)",
    "insertText": "GetStreamInfoFromTrackId(absl::string_view track_id)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : SequenceChecker signaling_sequence_checker_ ; std::map<std::string,StreamInfo> track_to_stream_map_)",
    "insertText": "RTC_GUARDED_BY(signaling_sequence_checker_)"
  }
]