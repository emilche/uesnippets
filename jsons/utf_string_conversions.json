[
  {
    "label": "WideToUTF8()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_UTF_STRING_CONVERSIONS_H_ # define BASE_STRINGS_UTF_STRING_CONVERSIONS_H_ # include<stddef . h> # include<string> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" build / build_config . h \" namespace base { BASE_EXPORT bool)",
    "insertText": "WideToUTF8(const wchar_t* src, size_t src_len, std::string* output)"
  },
  {
    "label": "WideToUTF8()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::string)",
    "insertText": "WideToUTF8(WStringPiece wide)"
  },
  {
    "label": "UTF8ToWide()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "UTF8ToWide(const char* src, size_t src_len, std::wstring* output)"
  },
  {
    "label": "UTF8ToWide()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::wstring)",
    "insertText": "UTF8ToWide(StringPiece utf8)"
  },
  {
    "label": "WideToUTF16()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "WideToUTF16(const wchar_t* src, size_t src_len, std::u16string* output)"
  },
  {
    "label": "WideToUTF16()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::u16string)",
    "insertText": "WideToUTF16(WStringPiece wide)"
  },
  {
    "label": "UTF16ToWide()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "UTF16ToWide(const char16_t* src, size_t src_len, std::wstring* output)"
  },
  {
    "label": "UTF16ToWide()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::wstring)",
    "insertText": "UTF16ToWide(StringPiece16 utf16)"
  },
  {
    "label": "UTF8ToUTF16()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "UTF8ToUTF16(const char* src, size_t src_len, std::u16string* output)"
  },
  {
    "label": "UTF8ToUTF16()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::u16string)",
    "insertText": "UTF8ToUTF16(StringPiece utf8)"
  },
  {
    "label": "UTF16ToUTF8()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "UTF16ToUTF8(const char16_t* src, size_t src_len, std::string* output)"
  },
  {
    "label": "UTF16ToUTF8()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::string)",
    "insertText": "UTF16ToUTF8(StringPiece16 utf16)"
  },
  {
    "label": "ASCIIToUTF16()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::u16string)",
    "insertText": "ASCIIToUTF16(StringPiece ascii)"
  },
  {
    "label": "UTF16ToASCII()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::string)",
    "insertText": "UTF16ToASCII(StringPiece16 utf16)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WCHAR_T_IS_UTF16) [[nodiscard]] BASE_EXPORT std::wstring ASCIIToWide(StringPiece ascii)"
  },
  {
    "label": "WideToASCII()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::string)",
    "insertText": "WideToASCII(WStringPiece wide)"
  },
  {
    "label": "WideToUTF16()",
    "kind": "Method",
    "detail": "Function (# endif template<size_t N> std::u16string)",
    "insertText": "WideToUTF16(const wchar_t (&str)[N])"
  },
  {
    "label": "UTF8ToUTF16()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> std::u16string)",
    "insertText": "UTF8ToUTF16(const char (&str)[N])"
  },
  {
    "label": "ASCIIToUTF16()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> std::u16string)",
    "insertText": "ASCIIToUTF16(const char (&str)[N])"
  },
  {
    "label": "ASCIIToUTF16()",
    "kind": "Method",
    "detail": "Function (} template<size_t N> std::u16string)",
    "insertText": "ASCIIToUTF16(char (&str)[N])"
  }
]