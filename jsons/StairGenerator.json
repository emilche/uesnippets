[
  {
    "label": "FStairGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStairGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLinearStairGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinearStairGenerator"
  },
  {
    "label": "FFloatingStairGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloatingStairGenerator"
  },
  {
    "label": "FCurvedStairGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurvedStairGenerator"
  },
  {
    "label": "FSpiralStairGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpiralStairGenerator"
  },
  {
    "label": "FStairGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Generators / MeshShapeGenerator . h \" # include \" IndexTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" namespace UE { namespace Geometry { class FStairGenerator : public FMeshShapeGenerator { public : bool bScaleUVByAspectRatio = true ; bool bPolygroupPerQuad = false ; float StepWidth = 1 5 0 . 0 f ; float StepHeight = 2 0 . 0 f ; int NumSteps = 8 ; enum class ESide { Right,Left,Front,Top,Back,Bottom } ; public : ~)",
    "insertText": "FStairGenerator()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "GenerateSolidStairs()",
    "kind": "Method",
    "detail": "Function (private : FMeshShapeGenerator&)",
    "insertText": "GenerateSolidStairs()"
  },
  {
    "label": "GenerateFloatingStairs()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "GenerateFloatingStairs()"
  },
  {
    "label": "FaceToSide()",
    "kind": "Method",
    "detail": "Function (ESide)",
    "insertText": "FaceToSide(int FaceId)"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (protected : enum class EStairStyle { Solid,Floating } ; EStairStyle StairStyle = EStairStyle::Solid ; protected : TArray<TArray<int>> VertexIds ; TArray<FIndex2i> VertexIdsToColumnRow ; TArray<int> FaceDesc ; TArray<int> NormalDesc ; TArray<int> UVDesc ; int NumQuadsPerSide = 0 ; int NumQuads = 0 ; int NumVertsPerSide = 0 ; int NumVerts = 0 ; int NumAttrs = 0 ; int RightSideColumnId = 0 ; int LeftSideColumnId = 0 ; int RightStartFaceId = 0 ; int LeftStartFaceId = 0 ; int FrontStartFaceId = 0 ; int TopStartFaceId = 0 ; int BackStartFaceId = 0 ; int BottomStartFaceId = 0 ; int LastFaceId = 0 ; protected : void)",
    "insertText": "ResetData()"
  },
  {
    "label": "GenerateVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "GenerateVertex(ESide Side, int VertexColumn, int VertexRow)"
  },
  {
    "label": "GenerateNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GenerateNormal(ESide Side, int VertexId)"
  },
  {
    "label": "GenerateUV()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GenerateUV(ESide Side, int Step, int VertexId, float UVScale)"
  },
  {
    "label": "GetMaxDimension()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDimension()"
  },
  {
    "label": "FLinearStairGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class FLinearStairGenerator : public FStairGenerator { public : float StepDepth = 3 0 . 0 f ; public :)",
    "insertText": "FLinearStairGenerator()"
  },
  {
    "label": "FFloatingStairGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class FFloatingStairGenerator : public FLinearStairGenerator { public :)",
    "insertText": "FFloatingStairGenerator()"
  },
  {
    "label": "FCurvedStairGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class FCurvedStairGenerator : public FStairGenerator { public : float InnerRadius = 1 5 0 . 0 f ; float CurveAngle = 9 0 . 0 f ; public :)",
    "insertText": "FCurvedStairGenerator()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} protected : typedef FStairGenerator Super ; bool bIsClockwise = true ; float CurveRadians = 0 . 0 f ; float CurveRadiansPerStep = 0 . 0 f ; float OuterRadius = 0 . 0 f ; float RadiusRatio = 1 . 0 f ; FVector3f BackNormal =)",
    "insertText": "Zero()"
  },
  {
    "label": "FSpiralStairGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class FSpiralStairGenerator : public FCurvedStairGenerator { public :)",
    "insertText": "FSpiralStairGenerator()"
  }
]