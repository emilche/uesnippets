[
  {
    "label": "FQuartzTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzTickableObject"
  },
  {
    "label": "FQuartzMetronome",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzMetronome"
  },
  {
    "label": "FFramesInTimeValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFramesInTimeValue"
  },
  {
    "label": "FMetronomeEventEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetronomeEventEntry"
  },
  {
    "label": "FPendingMetronomeEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingMetronomeEvents"
  },
  {
    "label": "FQuartzMetronome()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FQuartzTickableObject ; namespace Audio { using MetronomeCommandQueuePtr = Quartz::FQuartzGameThreadCommandQueuePtr ; class FQuartzMetronome { public :)",
    "insertText": "FQuartzMetronome(FName InClockName = {})"
  },
  {
    "label": "FQuartzMetronome()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FQuartzMetronome(const FQuartzTimeSignature& InTimeSignature, FName InClockName = {})"
  },
  {
    "label": "FQuartzMetronome()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FQuartzMetronome()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(int32 InNumSamples, int32 FramesOfLatency = 0)"
  },
  {
    "label": "SetTickRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickRate(FQuartzClockTickRate InNewTickRate, int32 NumFramesLeft = 0)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(float InNewSampleRate)"
  },
  {
    "label": "SetTimeSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeSignature(const FQuartzTimeSignature& InNewTimeSignature)"
  },
  {
    "label": "ResetTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransport()"
  },
  {
    "label": "GetTickRate()",
    "kind": "Method",
    "detail": "Function (const FQuartzClockTickRate&)",
    "insertText": "GetTickRate()"
  },
  {
    "label": "GetTimeSignature()",
    "kind": "Method",
    "detail": "Function (const FQuartzTimeSignature&)",
    "insertText": "GetTimeSignature()"
  },
  {
    "label": "SubscribeToTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToTimeDivision(MetronomeCommandQueuePtr InListenerQueue, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "SubscribeToAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToAllTimeDivisions(MetronomeCommandQueuePtr InListenerQueue)"
  },
  {
    "label": "UnsubscribeFromTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromTimeDivision(MetronomeCommandQueuePtr InListenerQueue, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "UnsubscribeFromAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromAllTimeDivisions(MetronomeCommandQueuePtr InListenerQueue)"
  },
  {
    "label": "RecalculateDurations()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RecalculateDurations()"
  },
  {
    "label": "FireEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FireEvents()"
  },
  {
    "label": "CountNumSubdivisionsPerBar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CountNumSubdivisionsPerBar(EQuartzCommandQuantization InSubdivision)"
  },
  {
    "label": "CountNumSubdivisionsSinceBarStart()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CountNumSubdivisionsSinceBarStart(EQuartzCommandQuantization InSubdivision)"
  },
  {
    "label": "CountNumSubdivisionsSinceStart()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CountNumSubdivisionsSinceStart(EQuartzCommandQuantization InSubdivision)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (uint64 LastTickCpuCycles64 { 0 } ; int32 ListenerFlags { 0 } ; FQuartzTransportTimeStamp CurrentTimeStamp ; FQuartzTimeSignature CurrentTimeSignature ; FQuartzClockTickRate CurrentTickRate ; TArray<MetronomeCommandQueuePtr> MetronomeSubscriptionMatrix [ static_cast<)",
    "insertText": "int32(EQuartzCommandQuantization::Count)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (struct FFramesInTimeValue { void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const double&)",
    "insertText": "operator(EQuartzCommandQuantization InTimeValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const double&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; struct FPendingMetronomeEvents { void)",
    "insertText": "Add(const EQuartzCommandQuantization InDuration, const int32 InFrame)"
  },
  {
    "label": "HasPendingEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingEvent(const EQuartzCommandQuantization InDuration)"
  }
]