[
  {
    "label": "FQuartzTickableObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzTickableObject"
  },
  {
    "label": "FQuartzMetronome",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQuartzMetronome"
  },
  {
    "label": "FFramesInTimeValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFramesInTimeValue"
  },
  {
    "label": "FMetronomeEventEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetronomeEventEntry"
  },
  {
    "label": "FPendingMetronomeEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingMetronomeEvents"
  },
  {
    "label": "QuartzMetronome",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QuartzMetronome"
  },
  {
    "label": "FQuartzMetronome()",
    "kind": "Method",
    "detail": "Function (ctor)",
    "insertText": "FQuartzMetronome(FName InClockName = {})"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(int32 InNumSamples, int32 FramesOfLatency = 0)"
  },
  {
    "label": "SetTickRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickRate(FQuartzClockTickRate InNewTickRate, int32 NumFramesLeft = 0)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(float InNewSampleRate)"
  },
  {
    "label": "SetTimeSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeSignature(const FQuartzTimeSignature& InNewTimeSignature)"
  },
  {
    "label": "ResetTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTransport()"
  },
  {
    "label": "SubscribeToTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToTimeDivision(MetronomeCommandQueuePtr InListenerQueue, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "SubscribeToAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeToAllTimeDivisions(MetronomeCommandQueuePtr InListenerQueue)"
  },
  {
    "label": "UnsubscribeFromTimeDivision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromTimeDivision(MetronomeCommandQueuePtr InListenerQueue, EQuartzCommandQuantization InQuantizationBoundary)"
  },
  {
    "label": "UnsubscribeFromAllTimeDivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeFromAllTimeDivisions(MetronomeCommandQueuePtr InListenerQueue)"
  },
  {
    "label": "RecalculateDurations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateDurations()"
  },
  {
    "label": "FireEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FireEvents()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const EQuartzCommandQuantization InDuration, const int32 InFrame)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  }
]