[
  {
    "label": "FLandscapeImageDataRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImageDataRef"
  },
  {
    "label": "FLandscapeImageFileCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeImageFileCache"
  },
  {
    "label": "FCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheEntry"
  },
  {
    "label": "FDirectoryMonitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectoryMonitor"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FFileChangeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileChangeData"
  },
  {
    "label": "FLandscapeImageFileCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IImageWrapper . h \" # include \" IImageWrapperModule . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Math / Vector . h \" # include \" Misc / FileHelper . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SharedPointer . h \" # include \" DirectoryWatcherModule . h \" # include \" LandscapeFileFormatInterface . h \" # include \" LandscapeEditorModule . h \" # include \" Containers / StaticArray . h \" # include \" Delegates / IDelegateInstance . h \" # define LOCTEXT_NAMESPACE \" LandscapeEditor \" struct FLandscapeImageDataRef { TSharedPtr<TArray<uint8>> Data ; FIntPoint Resolution ; ELandscapeImportResult Result ; FText ErrorMessage ; int32 BytesPerPixel ; } ; class FLandscapeImageFileCache { public :)",
    "insertText": "FLandscapeImageFileCache()"
  },
  {
    "label": "FindImage()",
    "kind": "Method",
    "detail": "Function (template<T> FLandscapeFileInfo)",
    "insertText": "FindImage(const TCHAR* InImageFilename, FLandscapeImageDataRef& OutImageData)"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSize(uint64 InNewMaxSize)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "FCacheEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FCacheEntry {)",
    "insertText": "FCacheEntry(FLandscapeImageDataRef ImageData) : ImageData(ImageData)"
  },
  {
    "label": "FDirectoryMonitor()",
    "kind": "Method",
    "detail": "Function (} uint32 UsageCount = 1 ; FLandscapeImageDataRef ImageData ; } ; struct FDirectoryMonitor {)",
    "insertText": "FDirectoryMonitor(FDelegateHandle Handle)"
  },
  {
    "label": "OnLandscapeSettingsChanged()",
    "kind": "Method",
    "detail": "Function (MonitorHandle = Handle ; } int32 NumFiles = 1 ; FDelegateHandle MonitorHandle ; } ; void)",
    "insertText": "OnLandscapeSettingsChanged(UObject* InObject, struct FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "MonitorFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MonitorFile(const FString& Filename)"
  },
  {
    "label": "UnmonitorFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmonitorFile(const FString& Filename)"
  },
  {
    "label": "MonitorCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonitorCallback(const TArray<struct FFileChangeData>& Changes)"
  },
  {
    "label": "ChooseCache()",
    "kind": "Method",
    "detail": "Function (using CacheType = TMap<FString,FCacheEntry> ; template<T> CacheType&)",
    "insertText": "ChooseCache()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (enum { Cache8 = 0,Cache16 = 1 } ; TStaticArray<CacheType,2> CachedImages ; TMap<FString,FDirectoryMonitor> MonitoredDirs ; template<T> void)",
    "insertText": "Add(const FString& Filename, FLandscapeImageDataRef NewImageData)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FString& Filename)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trim()"
  }
]