[
  {
    "label": "Block4x4EncodingBits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Block4x4EncodingBits_RGB8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits_RGB8"
  },
  {
    "label": "Block4x4EncodingBits_A8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits_A8"
  },
  {
    "label": "Block4x4EncodingBits_R11",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits_R11"
  },
  {
    "label": "Block4x4EncodingBits_RG11",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4EncodingBits_RG11"
  },
  {
    "label": "GetBytesPerBlock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<assert . h> namespace Etc { class Block4x4EncodingBits { public : enum class Format { UNKNOWN,RGB8,RGBA8,R11,RG11,RGB8A1,FORMATS } ; unsigned int)",
    "insertText": "GetBytesPerBlock(Format a_format)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(sizeof(Block4x4EncodingBits_RGB8) == BYTES_PER_BLOCK)"
  }
]