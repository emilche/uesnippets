[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPerQualityLevelProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerQualityLevelProperty"
  },
  {
    "label": "FPerQualityLevelInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerQualityLevelInt"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FPerQualityLevelFloat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerQualityLevelFloat"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Serialization / Archive . h \" # include \" Containers / Map . h \" # include \" Algo / Find . h \" # include \" Serialization / MemoryLayout . h \" # include \" Scalability . h \" # include \" CoreMinimal . h \" # include \" PerQualityLevelProperties . generated . h \" # if WITH_EDITOR typedef TSet<int32> FSupportedQualityLevelArray ; # endif)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Low,Medium,High,Epic,Cinematic,Num } ; namespace QualityLevelProperty {)",
    "insertText": "UENUM() enum class UE_DEPRECATED(5.1, \"Use EPerQualityLevels instead since we need to expose as an ENUM in blueprint.\")"
  },
  {
    "label": "QualityLevelToFName()",
    "kind": "Method",
    "detail": "Function (Low,Medium,High,Epic,Cinematic,Num } ; FName)",
    "insertText": "QualityLevelToFName(int32 QL)"
  },
  {
    "label": "FNameToQualityLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FNameToQualityLevel(FName QL)"
  },
  {
    "label": "ConvertQualityLevelData()",
    "kind": "Method",
    "detail": "Function (template<_ValueType> TMap<int32,_ValueType>)",
    "insertText": "ConvertQualityLevelData(const TMap<EPerQualityLevels, _ValueType>& Data)"
  },
  {
    "label": "ConvertQualityLevelData()",
    "kind": "Method",
    "detail": "Function (} template<_ValueType> TMap<EPerQualityLevels,_ValueType>)",
    "insertText": "ConvertQualityLevelData(const TMap<int32, _ValueType>& Data)"
  },
  {
    "label": "GetEnginePlatformsForPlatformOrGroupName()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR TArray<FName>)",
    "insertText": "GetEnginePlatformsForPlatformOrGroupName(const FString& InPlatformName)"
  },
  {
    "label": "PerPlatformOverrideMapping()",
    "kind": "Method",
    "detail": "Function (FSupportedQualityLevelArray)",
    "insertText": "PerPlatformOverrideMapping(FString& InPlatformName)"
  },
  {
    "label": "FPerQualityLevelProperty()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<_StructType,_ValueType,EName _BasePropertyName> struct FPerQualityLevelProperty { typedef _ValueType ValueType ; typedef _StructType StructType ;)",
    "insertText": "FPerQualityLevelProperty()"
  },
  {
    "label": "GetValueForQualityLevel()",
    "kind": "Method",
    "detail": "Function (} _ValueType)",
    "insertText": "GetValueForQualityLevel(int32 QualityLevel)"
  },
  {
    "label": "_StructType()",
    "kind": "Method",
    "detail": "Function (const _StructType* This = StaticCast<const)",
    "insertText": "_StructType(this)"
  },
  {
    "label": "GetSupportedQualityLevels()",
    "kind": "Method",
    "detail": "Function (FSupportedQualityLevelArray)",
    "insertText": "GetSupportedQualityLevels(const TCHAR* InPlatformName = nullptr)"
  },
  {
    "label": "StripQualityLevelForCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripQualityLevelForCooking(const TCHAR* InPlatformName = nullptr)"
  },
  {
    "label": "StripQualityLevelForCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripQualityLevelForCooking(InPlatformName)"
  },
  {
    "label": "IsQualityLevelValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsQualityLevelValid(int32 QualityLevel)"
  },
  {
    "label": "ConvertQualityLevelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertQualityLevelData(const TMap<FName, _ValueType>& PlatformData, const TMultiMap<FName, FName>& PerPlatformToQualityLevel, _ValueType Default)"
  },
  {
    "label": "ConvertQualityLevelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertQualityLevelData(PlatformData, PerPlatformToQualityLevel, Default)"
  },
  {
    "label": "ConvertQualityLevelDataUsingCVar()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConvertQualityLevelDataUsingCVar(const TMap<FName, _ValueType>& PlatformData, _ValueType Default, bool bRequireAllPlatformsKnown)"
  },
  {
    "label": "SetQualityLevelCVarForCooking()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetQualityLevelCVarForCooking(const TCHAR* InCVarName, const TCHAR* InSection)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR ScalabilitySection =)",
    "insertText": "FString(InSection)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# endif CVarName =)",
    "insertText": "FString(InCVarName)"
  },
  {
    "label": "SetQualityLevelCVarForCooking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQualityLevelCVarForCooking(InCVarName, InSection)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} _ValueType)",
    "insertText": "GetDefault()"
  },
  {
    "label": "GetLowestValue()",
    "kind": "Method",
    "detail": "Function (} _ValueType)",
    "insertText": "GetLowestValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_ValueType Value = This -> Default ;)",
    "insertText": "for(const TPair<int32, _ValueType>& Pair : This->PerQuality)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (Value = Pair . Value ; } } return Value ; } bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FArchive& Ar)"
  },
  {
    "label": "_StructType()",
    "kind": "Method",
    "detail": "Function (_ValueType OldValue ; Ar<<OldValue ;* This =)",
    "insertText": "_StructType(OldValue)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } bool)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Slot<<* this ; return true ; } # if WITH_EDITOR FString ScalabilitySection ; # endif FString CVarName ; } ; template<_StructType,_ValueType,EName _BasePropertyName> FArchive&)",
    "insertText": "operator(FArchive& Ar, FPerQualityLevelProperty<_StructType, _ValueType, _BasePropertyName>& Property)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<_StructType,_ValueType,EName _BasePropertyName> void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FPerQualityLevelProperty<_StructType, _ValueType, _BasePropertyName>& Property)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(BlueprintReadOnly, EditAnywhere, Category = PerQualityLevel)"
  },
  {
    "label": "FPerQualityLevelInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPerQualityLevelInt()"
  },
  {
    "label": "FPerQualityLevelInt()",
    "kind": "Method",
    "detail": "Function (Default = 0 ; })",
    "insertText": "FPerQualityLevelInt(int32 InDefaultValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Default = InDefaultValue ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "MaxType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FPerQualityLevelProperty<FPerQualityLevelInt, int32, NAME_IntProperty>&)"
  },
  {
    "label": "FPerQualityLevelFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPerQualityLevelFloat()"
  },
  {
    "label": "FPerQualityLevelFloat()",
    "kind": "Method",
    "detail": "Function (Default = 0 . 0 f ; })",
    "insertText": "FPerQualityLevelFloat(float InDefaultValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FPerQualityLevelProperty<FPerQualityLevelFloat, float, NAME_FloatProperty>&)"
  }
]