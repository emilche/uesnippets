[
  {
    "label": "PackedVectorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PackedVectorBase"
  },
  {
    "label": "PackedVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PackedVector"
  },
  {
    "label": "reference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reference"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_PACKEDVECTOR_H # define LLVM_ADT_PACKEDVECTOR_H # include \" llvm / ADT / BitVector . h \" # include<limits> namespace llvm { template<T,unsigned BitNum,BitVectorTy,bool isSigned> class PackedVectorBase ; template<T,unsigned BitNum,BitVectorTy> class PackedVectorBase<T,BitNum,BitVectorTy,false> { protected : T)",
    "insertText": "getValue(const BitVectorTy &Bits, unsigned Idx)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T val =)",
    "insertText": "T()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((val >> BitNum) == 0 && \"value is too big\")"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (val = ~ val ; Bits .)",
    "insertText": "set((Idx << (BitNum-1)) + BitNum-1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert((val >> (BitNum-1)) == 0 && \"value is too big\")"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,unsigned BitNum,BitVectorTy = BitVector> class PackedVector : public PackedVectorBase<T,BitNum,BitVectorTy,std::numeric_limits<T>::is_signed> { BitVectorTy Bits ; typedef PackedVectorBase<T,BitNum,BitVectorTy,std::numeric_limits<T>::is_signed> base ; public : class reference { PackedVector& Vec ; const unsigned Idx ;)",
    "insertText": "reference()"
  },
  {
    "label": "reference()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "reference(PackedVector &vec, unsigned idx) : Vec(vec), Idx(idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference&)",
    "insertText": "operator(T val)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (Vec .)",
    "insertText": "setValue(Vec.Bits, Idx, val)"
  },
  {
    "label": "PackedVector()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "PackedVector()"
  },
  {
    "label": "PackedVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PackedVector(unsigned size) : Bits(size << (BitNum-1))"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(unsigned N)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "resize(N << (BitNum-1))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(unsigned N)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "reserve(N << (BitNum-1))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} PackedVector&)",
    "insertText": "reset()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size()+1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(unsigned Idx)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const PackedVector &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Bits | = RHS . Bits ; return* this ; } void)",
    "insertText": "swap(PackedVector &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "swap(RHS.Bits)"
  }
]