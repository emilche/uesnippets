[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "FIssue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIssue"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Logging / TokenizedMessage . h \" # include \" DataValidation . generated . h \" struct FAssetData ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "FIssue()",
    "kind": "Method",
    "detail": "Function (None = 0,Manual,Commandlet,Save,PreSubmit,Script,} ; class FDataValidationContext : public FNoncopyable { public : struct FIssue { FText Message ; EMessageSeverity::Type Severity ; TSharedPtr<FTokenizedMessage> TokenizedMessage ;)",
    "insertText": "FIssue(TSharedRef<FTokenizedMessage> InTokenizedMessage) : Message() , Severity(InTokenizedMessage->GetSeverity()) , TokenizedMessage(InTokenizedMessage)"
  },
  {
    "label": "FIssue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FIssue(const FText& InMessage, EMessageSeverity::Type InSeverity) : Message(InMessage) , Severity(InSeverity) , TokenizedMessage()"
  },
  {
    "label": "FDataValidationContext()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FDataValidationContext()"
  },
  {
    "label": "FDataValidationContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDataValidationContext(bool InWasAssetLoadedForValidation, EDataValidationUsecase InUsecase, TConstArrayView<FAssetData> InAssociatedObjects) : AssociatedExternalObjects(InAssociatedObjects) , ValidationUsecase(InUsecase) , bWasAssetLoadedForValidation(InWasAssetLoadedForValidation)"
  },
  {
    "label": "GetValidationUsecase()",
    "kind": "Method",
    "detail": "Function (} EDataValidationUsecase)",
    "insertText": "GetValidationUsecase()"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTokenizedMessage>)",
    "insertText": "AddMessage(EMessageSeverity::Type InSeverity, FText InText = {})"
  },
  {
    "label": "AddMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMessage(TSharedRef<FTokenizedMessage> Message)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWarning(const FText& Text)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Issues .)",
    "insertText": "Emplace(Text, EMessageSeverity::Warning)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (NumWarnings + + ; } void)",
    "insertText": "AddError(const FText& Text)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Issues .)",
    "insertText": "Emplace(Text, EMessageSeverity::Error)"
  },
  {
    "label": "GetIssues()",
    "kind": "Method",
    "detail": "Function (NumErrors + + ; } const TArray<FIssue>&)",
    "insertText": "GetIssues()"
  }
]