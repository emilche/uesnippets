[
  {
    "label": "silk_bwexpander_FLP()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_SIGPROC_FLP_H # define SILK_SIGPROC_FLP_H # include \" SigProc_FIX . h \" # include \" float_cast . h \" # include<math . h> # ifdef __cplusplus \" C \" { # endif void)",
    "insertText": "silk_bwexpander_FLP(silk_float *ar, const opus_int d, const silk_float chirp)"
  },
  {
    "label": "silk_LPC_inverse_pred_gain_FLP()",
    "kind": "Method",
    "detail": "Function (silk_float)",
    "insertText": "silk_LPC_inverse_pred_gain_FLP(const silk_float *A, opus_int32 order)"
  },
  {
    "label": "silk_schur_FLP()",
    "kind": "Method",
    "detail": "Function (silk_float)",
    "insertText": "silk_schur_FLP(silk_float refl_coef[], const silk_float auto_corr[], opus_int order)"
  },
  {
    "label": "silk_k2a_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_k2a_FLP(silk_float *A, const silk_float *rc, opus_int32 order)"
  },
  {
    "label": "silk_autocorrelation_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_autocorrelation_FLP(silk_float *results, const silk_float *inputData, opus_int inputDataSize, opus_int correlationCount)"
  },
  {
    "label": "silk_pitch_analysis_core_FLP()",
    "kind": "Method",
    "detail": "Function (opus_int)",
    "insertText": "silk_pitch_analysis_core_FLP(const silk_float *frame, opus_int *pitch_out, opus_int16 *lagIndex, opus_int8 *contourIndex, silk_float *LTPCorr, opus_int prevLag, const silk_float search_thres1, const silk_float search_thres2, const opus_int Fs_kHz, const opus_int complexity, const opus_int nb_subfr, int arch)"
  },
  {
    "label": "silk_insertion_sort_decreasing_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_insertion_sort_decreasing_FLP(silk_float *a, opus_int *idx, const opus_int L, const opus_int K)"
  },
  {
    "label": "silk_burg_modified_FLP()",
    "kind": "Method",
    "detail": "Function (silk_float)",
    "insertText": "silk_burg_modified_FLP(silk_float A[], const silk_float x[], const silk_float minInvGain, const opus_int subfr_length, const opus_int nb_subfr, const opus_int D)"
  },
  {
    "label": "silk_scale_vector_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_scale_vector_FLP(silk_float *data1, silk_float gain, opus_int dataSize)"
  },
  {
    "label": "silk_scale_copy_vector_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_scale_copy_vector_FLP(silk_float *data_out, const silk_float *data_in, silk_float gain, opus_int dataSize)"
  },
  {
    "label": "PI()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "PI(3.1415926536f) #define silk_min_float( a, b ) (((a) < (b)) ? (a) : (b)) #define silk_max_float( a, b ) (((a) > (b)) ? (a) : (b)) #define silk_abs_float( a ) ((silk_float)fabs(a)) static OPUS_INLINE silk_float silk_sigmoid( silk_float x)"
  },
  {
    "label": "silk_float2int()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE opus_int32)",
    "insertText": "silk_float2int(silk_float x)"
  },
  {
    "label": "silk_float2short_array()",
    "kind": "Method",
    "detail": "Function (} OPUS_INLINE void)",
    "insertText": "silk_float2short_array(opus_int16 *out, const silk_float *in, opus_int32 length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (opus_int32 k ;)",
    "insertText": "for(k = length - 1; k >= 0; k--)"
  },
  {
    "label": "silk_SAT16()",
    "kind": "Method",
    "detail": "Function (out [ k ] =)",
    "insertText": "silk_SAT16((opus_int32)float2int( in[k] ))"
  },
  {
    "label": "silk_short2float_array()",
    "kind": "Method",
    "detail": "Function (} } OPUS_INLINE void)",
    "insertText": "silk_short2float_array(silk_float *out, const opus_int16 *in, opus_int32 length)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (out [)",
    "insertText": "k(silk_float)"
  },
  {
    "label": "silk_log2()",
    "kind": "Method",
    "detail": "Function (} } OPUS_INLINE silk_float)",
    "insertText": "silk_log2(double x)"
  }
]