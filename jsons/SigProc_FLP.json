[
  {
    "label": "silk_LPC_inverse_pred_gain_FLP()",
    "kind": "Method",
    "detail": "Function (silk_float)",
    "insertText": "silk_LPC_inverse_pred_gain_FLP(  /* O    return inverse prediction gain, energy domain               */\n    const silk_float    *A,                 /* I    prediction coefficients [order]                             */\n    opus_int32          order               /* I    prediction order                                            */\n)"
  },
  {
    "label": "silk_k2a_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_k2a_FLP(\n    silk_float          *A,                 /* O     prediction coefficients [order]                            */\n    const silk_float    *rc,                /* I     reflection coefficients [order]                            */\n    opus_int32          order               /* I     prediction order                                           */\n)"
  },
  {
    "label": "silk_insertion_sort_decreasing_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_insertion_sort_decreasing_FLP(\n    silk_float          *a,                 /* I/O  Unsorted / Sorted vector                                    */\n    opus_int            *idx,               /* O    Index vector for the sorted elements                        */\n    const opus_int      L,                  /* I    Vector length                                               */\n    const opus_int      K                   /* I    Number of correctly sorted positions                        */\n)"
  },
  {
    "label": "silk_scale_vector_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_scale_vector_FLP(\n    silk_float          *data1,\n    silk_float          gain,\n    opus_int            dataSize\n)"
  },
  {
    "label": "silk_scale_copy_vector_FLP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_scale_copy_vector_FLP(\n    silk_float          *data_out,\n    const silk_float    *data_in,\n    silk_float          gain,\n    opus_int            dataSize\n)"
  },
  {
    "label": "silk_inner_product_FLP()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "silk_inner_product_FLP(\n    const silk_float    *data1,\n    const silk_float    *data2,\n    opus_int            dataSize\n)"
  },
  {
    "label": "silk_energy_FLP()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "silk_energy_FLP(\n    const silk_float    *data,\n    opus_int            dataSize\n)"
  }
]