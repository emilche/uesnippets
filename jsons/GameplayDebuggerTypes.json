[
  {
    "label": "FCanvasItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvasItem"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FCanvasIcon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanvasIcon"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FGameplayDebuggerCanvasContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCanvasContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayDebuggerShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerShape"
  },
  {
    "label": "FGameplayDebuggerDataPackHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerDataPackHeader"
  },
  {
    "label": "FGameplayDebuggerDataPack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerDataPack"
  },
  {
    "label": "FGameplayDebuggerInputModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerInputModifier"
  },
  {
    "label": "FGameplayDebuggerInputHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerInputHandler"
  },
  {
    "label": "FGameplayDebuggerInputHandlerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayDebuggerInputHandlerConfig"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" UObject / ObjectMacros . h \" # include \" GameplayDebuggerTypes . generated . h \" class FCanvasItem ; class UCanvas ; class UFont ; struct FCanvasIcon ; class APlayerController ; class UWorld ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameplayDebug, Log, All)"
  },
  {
    "label": "IsAuthority()",
    "kind": "Method",
    "detail": "Function (class FCanvasItem ; struct FCanvasIcon ; namespace FGameplayDebuggerUtils { bool)",
    "insertText": "IsAuthority(UWorld* World)"
  },
  {
    "label": "FGameplayDebuggerCanvasContext()",
    "kind": "Method",
    "detail": "Function (} class FGameplayDebuggerCanvasContext { public : TWeakObjectPtr<UCanvas> Canvas ; TWeakObjectPtr<UFont> Font ; TWeakObjectPtr<APlayerController> PlayerController ; TWeakObjectPtr<UWorld> World ; FFontRenderInfo FontRenderInfo ; float CursorX,CursorY ; float DefaultX,DefaultY ;)",
    "insertText": "FGameplayDebuggerCanvasContext()"
  },
  {
    "label": "FGameplayDebuggerCanvasContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayDebuggerCanvasContext(UCanvas* InCanvas, UFont* InFont)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(const FString& String)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(const FColor& Color, const FString& String)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print(const FColor& Color, const float Alpha, const FString& String)"
  },
  {
    "label": "PrintAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintAt(float PosX, float PosY, const FString& String)"
  },
  {
    "label": "PrintAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintAt(float PosX, float PosY, const FColor& Color, const FString& String)"
  },
  {
    "label": "PrintAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintAt(float PosX, float PosY, const FColor& Color, const float Alpha, const FString& String)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (template<FmtType,. . . Types> void)",
    "insertText": "Printf(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PrintfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintfImpl(FColor::White, 1.0f, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Printf(const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PrintfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintfImpl(Color, 1.0f, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Printf(const FColor& Color, const float Alpha, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PrintfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintfImpl(Color, Alpha, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PrintfAt()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "PrintfAt(float PosX, float PosY, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PrintfAtImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintfAtImpl(PosX, PosY, FColor::White, 1.0f, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PrintfAt()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "PrintfAt(float PosX, float PosY, const FColor& Color, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PrintfAtImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintfAtImpl(PosX, PosY, Color, 1.0f, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PrintfAt()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "PrintfAt(float PosX, float PosY, const FColor& Color, const float Alpha, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "PrintfAtImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintfAtImpl(PosX, PosY, Color, Alpha, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "PrintfImpl()",
    "kind": "Method",
    "detail": "Function (} private : void VARARGS)",
    "insertText": "PrintfImpl(const FColor& Color, const float Alpha, const TCHAR* Args, ...)"
  },
  {
    "label": "PrintfAtImpl()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "PrintfAtImpl(float PosX, float PosY, const FColor& Color, const float Alpha, const TCHAR* Args, ...)"
  },
  {
    "label": "MoveToNewLine()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "MoveToNewLine()"
  },
  {
    "label": "MeasureString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeasureString(const FString& String, float& OutSizeX, float& OutSizeY)"
  },
  {
    "label": "GetLineHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLineHeight()"
  },
  {
    "label": "ProjectLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ProjectLocation(const FVector& Location)"
  },
  {
    "label": "IsLocationVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocationVisible(const FVector& Location)"
  },
  {
    "label": "DrawItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawItem(FCanvasItem& Item, float PosX, float PosY)"
  },
  {
    "label": "DrawIcon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawIcon(const FColor& Color, const FCanvasIcon& Icon, float PosX, float PosY, float Scale = 1.f)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; namespace FGameplayDebuggerCanvasStrings { FString ColorNameInput =)",
    "insertText": "TEXT(\"white\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString ColorNameEnabled =)",
    "insertText": "TEXT(\"green\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString ColorNameDisabled =)",
    "insertText": "TEXT(\"grey\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString ColorNameDisabledActiveRow =)",
    "insertText": "TEXT(\"black\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString Separator =)",
    "insertText": "TEXT(\"{white} | \")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString SeparatorSpace =)",
    "insertText": "TEXT(\" \")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Invalid,Point,Segment,Box,Cone,Cylinder,Circle,Rectangle,Capsule,Polygon,Polyline,Arrow,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FGameplayDebuggerShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayDebuggerShape() : Color(EForceInit::ForceInit), Type(EGameplayDebuggerShape::Invalid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGameplayDebuggerShape& Other)"
  },
  {
    "label": "MakePoint()",
    "kind": "Method",
    "detail": "Function (} FGameplayDebuggerShape)",
    "insertText": "MakePoint(const FVector& Location, const float Radius, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeSegment()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeSegment(const FVector& StartLocation, const FVector& EndLocation, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeSegment()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeSegment(const FVector& StartLocation, const FVector& EndLocation, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeArrow()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeArrow(const FVector& StartLocation, const FVector& EndLocation, const float HeadSize, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeBox(const FVector& Center, const FVector& Extent, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeBox(const FVector& Center, const FVector& Extent, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeBox(const FVector& Center, const FRotator& Rotation, const FVector& Extent, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeBox(const FVector& Center, const FRotator& Rotation, const FVector& Extent, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCone()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCone(const FVector& Location, const FVector& Direction, const float Length, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCylinder()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCylinder(const FVector& Center, const float Radius, const float HalfHeight, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCircle()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCircle(const FVector& Center, const FVector& Up, const float Radius, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCircle()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCircle(const FVector& Center, const FVector& Up, const float Radius, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCircle()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCircle(const FVector& Center, const FVector& WidthAxis, const FVector& HeightAxis, const float Radius, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCircle()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCircle(const FVector& Center, const FVector& WidthAxis, const FVector& HeightAxis, const float Radius, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeRectangle()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeRectangle(const FVector& Center, const FVector& WidthAxis, const FVector& HeightAxis, const float Width, const float Height, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeRectangle()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeRectangle(const FVector& Center, const FVector& WidthAxis, const FVector& HeightAxis, const float Width, const float Height, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCapsule()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCapsule(const FVector& Center, const float Radius, const float HalfHeight, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeCapsule()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeCapsule(const FVector& Center, const FRotator& Rotation, const float Radius, const float HalfHeight, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakePolygon()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakePolygon(TConstArrayView<FVector> Verts, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakePolyline()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakePolyline(const TConstArrayView<FVector> Verts, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakePolyline()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakePolyline(const TConstArrayView<FVector> Verts, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeSegmentList()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeSegmentList(const TConstArrayView<FVector> Verts, const float Thickness, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "MakeSegmentList()",
    "kind": "Method",
    "detail": "Function (FGameplayDebuggerShape)",
    "insertText": "MakeSegmentList(const TConstArrayView<FVector> Verts, const FColor& Color, const FString& Description = FString())"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(UWorld* World, FGameplayDebuggerCanvasContext& Context)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FGameplayDebuggerShape& Shape)"
  },
  {
    "label": "FGameplayDebuggerDataPackHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayDebuggerDataPackHeader() : DataVersion(0), SyncCounter(0), DataSize(0), DataOffset(0), bIsCompressed(false)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FGameplayDebuggerDataPackHeader& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGameplayDebuggerDataPackHeader& Other)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGameplayDebuggerDataPack { using FHeader = FGameplayDebuggerDataPackHeader ;)",
    "insertText": "DECLARE_DELEGATE(FOnReset)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSerialize, FArchive&)"
  },
  {
    "label": "FGameplayDebuggerDataPack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayDebuggerDataPack() : PackId(0), DataCRC(0), bIsDirty(false), bNeedsConfirmation(false), bReceived(false), Flags(EGameplayDebuggerDataPack::ResetOnTick)"
  },
  {
    "label": "CheckDirtyAndUpdate()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8> Data ; FHeader Header ; int32 PackId ; uint32 DataCRC ; uint32 bIsDirty : 1 ; uint32 bNeedsConfirmation : 1 ; uint32 bReceived : 1 ; EGameplayDebuggerDataPack Flags ; FOnReset ResetDelegate ; FOnSerialize SerializeDelegate ; int32 PacketSize ; bool)",
    "insertText": "CheckDirtyAndUpdate()"
  },
  {
    "label": "RequestReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestReplication(int16 SyncCounter)"
  },
  {
    "label": "OnReplicated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplicated()"
  },
  {
    "label": "OnPacketRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketRequest(int16 DataVersion, int32 DataOffset)"
  },
  {
    "label": "IsInProgress()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInProgress()"
  },
  {
    "label": "IsMultiPacket()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMultiPacket(int32 TestSize)"
  },
  {
    "label": "FGameplayDebuggerInputModifier()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayDebuggerInputModifier(bool bInShift, bool bInCtrl, bool bInAlt, bool bInCmd) : bShift(bInShift), bCtrl(bInCtrl), bAlt(bInAlt), bCmd(bInCmd), bPressed(true), bReleased(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FGameplayDebuggerInputModifier)",
    "insertText": "operator(const FGameplayDebuggerInputModifier& Other)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} FGameplayDebuggerInputModifier Shift ; FGameplayDebuggerInputModifier Ctrl ; FGameplayDebuggerInputModifier Alt ; FGameplayDebuggerInputModifier Cmd ; FGameplayDebuggerInputModifier None ; } ; struct FGameplayDebuggerInputHandler {)",
    "insertText": "DECLARE_DELEGATE(FHandler)"
  },
  {
    "label": "FGameplayDebuggerInputHandler()",
    "kind": "Method",
    "detail": "Function (FName KeyName ; FGameplayDebuggerInputModifier Modifier ; FHandler Delegate ; EGameplayDebuggerInputMode Mode ;)",
    "insertText": "FGameplayDebuggerInputHandler() : KeyName(NAME_None), Mode(EGameplayDebuggerInputMode::Local)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FGameplayDebuggerInputHandlerConfig()",
    "kind": "Method",
    "detail": "Function (} ; struct FGameplayDebuggerInputHandlerConfig { FName KeyName ; FGameplayDebuggerInputModifier Modifier ;)",
    "insertText": "FGameplayDebuggerInputHandlerConfig() : KeyName(NAME_None)"
  },
  {
    "label": "FGameplayDebuggerInputHandlerConfig()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayDebuggerInputHandlerConfig(const FName ConfigName, const FName DefaultKeyName)"
  },
  {
    "label": "FGameplayDebuggerInputHandlerConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayDebuggerInputHandlerConfig(const FName ConfigName, const FName DefaultKeyName, const FGameplayDebuggerInputModifier& DefaultModifier)"
  },
  {
    "label": "UpdateConfig()",
    "kind": "Method",
    "detail": "Function (FName CurrentCategoryName ; FName CurrentExtensionName ; private : void)",
    "insertText": "UpdateConfig(const FName ConfigName)"
  }
]