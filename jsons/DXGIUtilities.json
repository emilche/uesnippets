[
  {
    "label": "FD3DMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3DMemoryStats"
  },
  {
    "label": "GetFormatString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # if PLATFORM_MICROSOFT # ifndef RHICORE_PLATFORM_DXGI_H # error \" Platform needs to define RHICORE_PLATFORM_DXGI_H \" # endif # include \" PixelFormat . h \" # include \" RHIDefinitions . h \" # include \" Misc / AssertionMacros . h \" # include \" Microsoft / AllowMicrosoftPlatformTypes . h \" THIRD_PARTY_INCLUDES_START # include RHICORE_PLATFORM_DXGI_H THIRD_PARTY_INCLUDES_END # include \" Microsoft / HideMicrosoftPlatformTypes . h \" struct FD3DMemoryStats ; namespace UE::DXGIUtilities { const TCHAR*)",
    "insertText": "GetFormatString(DXGI_FORMAT Format)"
  },
  {
    "label": "GetD3DMemoryStats()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetD3DMemoryStats(IDXGIAdapter* Adapter, FD3DMemoryStats& OutStats)"
  },
  {
    "label": "FindSharedResourceFormat()",
    "kind": "Method",
    "detail": "Function (DXGI_FORMAT)",
    "insertText": "FindSharedResourceFormat(DXGI_FORMAT InFormat, bool bSRGB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EnumHasAnyFlags(InFlags, ETextureCreateFlags::DepthStencilTargetable))"
  },
  {
    "label": "FindUnorderedAccessFormat()",
    "kind": "Method",
    "detail": "Function (} return InFormat ; } DXGI_FORMAT)",
    "insertText": "FindUnorderedAccessFormat(DXGI_FORMAT InFormat)"
  },
  {
    "label": "GetPlaneSliceFromViewFormat()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetPlaneSliceFromViewFormat(DXGI_FORMAT ResourceFormat, DXGI_FORMAT ViewFormat)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "GetFormatSizeInBytes()",
    "kind": "Method",
    "detail": "Function ([ [ fallthrough ] ] ; case DXGI_FORMAT_UNKNOWN : return 0 ; case DXGI_FORMAT_R32G32B32A32_TYPELESS : case DXGI_FORMAT_R32G32B32A32_FLOAT : case DXGI_FORMAT_R32G32B32A32_UINT : case DXGI_FORMAT_R32G32B32A32_SINT : case DXGI_FORMAT_BC2_TYPELESS : case DXGI_FORMAT_BC2_UNORM : case DXGI_FORMAT_BC2_UNORM_SRGB : case DXGI_FORMAT_BC3_TYPELESS : case DXGI_FORMAT_BC3_UNORM : case DXGI_FORMAT_BC3_UNORM_SRGB : case DXGI_FORMAT_BC5_TYPELESS : case DXGI_FORMAT_BC5_UNORM : case DXGI_FORMAT_BC5_SNORM : case DXGI_FORMAT_BC6H_TYPELESS : case DXGI_FORMAT_BC6H_UF16 : case DXGI_FORMAT_BC6H_SF16 : case DXGI_FORMAT_BC7_TYPELESS : case DXGI_FORMAT_BC7_UNORM : case DXGI_FORMAT_BC7_UNORM_SRGB : return 1 2 8 ; case DXGI_FORMAT_R32G32B32_TYPELESS : case DXGI_FORMAT_R32G32B32_FLOAT : case DXGI_FORMAT_R32G32B32_UINT : case DXGI_FORMAT_R32G32B32_SINT : return 9 6 ; case DXGI_FORMAT_R16G16B16A16_TYPELESS : case DXGI_FORMAT_R16G16B16A16_FLOAT : case DXGI_FORMAT_R16G16B16A16_UNORM : case DXGI_FORMAT_R16G16B16A16_UINT : case DXGI_FORMAT_R16G16B16A16_SNORM : case DXGI_FORMAT_R16G16B16A16_SINT : case DXGI_FORMAT_R32G32_TYPELESS : case DXGI_FORMAT_R32G32_FLOAT : case DXGI_FORMAT_R32G32_UINT : case DXGI_FORMAT_R32G32_SINT : case DXGI_FORMAT_R32G8X24_TYPELESS : case DXGI_FORMAT_D32_FLOAT_S8X24_UINT : case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS : case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT : case DXGI_FORMAT_BC1_TYPELESS : case DXGI_FORMAT_BC1_UNORM : case DXGI_FORMAT_BC1_UNORM_SRGB : case DXGI_FORMAT_BC4_TYPELESS : case DXGI_FORMAT_BC4_UNORM : case DXGI_FORMAT_BC4_SNORM : case DXGI_FORMAT_Y416 : case DXGI_FORMAT_Y210 : case DXGI_FORMAT_Y216 : return 6 4 ; case DXGI_FORMAT_R10G10B10A2_TYPELESS : case DXGI_FORMAT_R10G10B10A2_UNORM : case DXGI_FORMAT_R10G10B10A2_UINT : case DXGI_FORMAT_R11G11B10_FLOAT : case DXGI_FORMAT_R8G8B8A8_TYPELESS : case DXGI_FORMAT_R8G8B8A8_UNORM : case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB : case DXGI_FORMAT_R8G8B8A8_UINT : case DXGI_FORMAT_R8G8B8A8_SNORM : case DXGI_FORMAT_R8G8B8A8_SINT : case DXGI_FORMAT_R16G16_TYPELESS : case DXGI_FORMAT_R16G16_FLOAT : case DXGI_FORMAT_R16G16_UNORM : case DXGI_FORMAT_R16G16_UINT : case DXGI_FORMAT_R16G16_SNORM : case DXGI_FORMAT_R16G16_SINT : case DXGI_FORMAT_R32_TYPELESS : case DXGI_FORMAT_D32_FLOAT : case DXGI_FORMAT_R32_FLOAT : case DXGI_FORMAT_R32_UINT : case DXGI_FORMAT_R32_SINT : case DXGI_FORMAT_R24G8_TYPELESS : case DXGI_FORMAT_D24_UNORM_S8_UINT : case DXGI_FORMAT_R24_UNORM_X8_TYPELESS : case DXGI_FORMAT_X24_TYPELESS_G8_UINT : case DXGI_FORMAT_R9G9B9E5_SHAREDEXP : case DXGI_FORMAT_R8G8_B8G8_UNORM : case DXGI_FORMAT_G8R8_G8B8_UNORM : case DXGI_FORMAT_B8G8R8A8_UNORM : case DXGI_FORMAT_B8G8R8X8_UNORM : case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM : case DXGI_FORMAT_B8G8R8A8_TYPELESS : case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB : case DXGI_FORMAT_B8G8R8X8_TYPELESS : case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB : case DXGI_FORMAT_AYUV : case DXGI_FORMAT_Y410 : case DXGI_FORMAT_P010 : case DXGI_FORMAT_P016 : case DXGI_FORMAT_YUY2 : return 3 2 ; case DXGI_FORMAT_R8G8_TYPELESS : case DXGI_FORMAT_R8G8_UNORM : case DXGI_FORMAT_R8G8_UINT : case DXGI_FORMAT_R8G8_SNORM : case DXGI_FORMAT_R8G8_SINT : case DXGI_FORMAT_R16_TYPELESS : case DXGI_FORMAT_R16_FLOAT : case DXGI_FORMAT_D16_UNORM : case DXGI_FORMAT_R16_UNORM : case DXGI_FORMAT_R16_UINT : case DXGI_FORMAT_R16_SNORM : case DXGI_FORMAT_R16_SINT : case DXGI_FORMAT_B5G6R5_UNORM : case DXGI_FORMAT_B5G5R5A1_UNORM : case DXGI_FORMAT_B4G4R4A4_UNORM : case DXGI_FORMAT_NV12 : case DXGI_FORMAT_NV11 : return 1 6 ; case DXGI_FORMAT_R8_TYPELESS : case DXGI_FORMAT_R8_UNORM : case DXGI_FORMAT_R8_UINT : case DXGI_FORMAT_R8_SNORM : case DXGI_FORMAT_R8_SINT : case DXGI_FORMAT_A8_UNORM : return 8 ; case DXGI_FORMAT_R1_UNORM : return 1 ; } } uint32)",
    "insertText": "GetFormatSizeInBytes(DXGI_FORMAT Format)"
  },
  {
    "label": "GetSwapChainFormat()",
    "kind": "Method",
    "detail": "Function (} DXGI_FORMAT)",
    "insertText": "GetSwapChainFormat(EPixelFormat PixelFormat)"
  },
  {
    "label": "DXGI_FORMAT()",
    "kind": "Method",
    "detail": "Function (DXGI_FORMAT DXFormat = static_cast<)",
    "insertText": "DXGI_FORMAT(GPixelFormats[PixelFormat].PlatformFormat)"
  }
]