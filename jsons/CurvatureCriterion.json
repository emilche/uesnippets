[
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FCurvatureCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurvatureCriterion"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FCurvatureCriterion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Curvature . h \" # include \" Mesh / Criteria / Criterion . h \" namespace UE::CADKernel { struct FCurvePoint ; class FCurvatureCriterion : public FCriterion { class FEntity ; protected :)",
    "insertText": "FCurvatureCriterion()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UpdateDelta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateDelta(double InDeltaU, double InUSag, double InDiagonalSag, double InVSag, double ChordLength, double DiagonalLength, double& OutSagDeltaUMax, double& OutSagDeltaUMin, FIsoCurvature& IsoCurvature)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IsoCurvature . Max = Curvature ; })",
    "insertText": "if(IsoCurvature.Min > Curvature)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (IsoCurvature . Min = Curvature ; } } } double)",
    "insertText": "Value()"
  },
  {
    "label": "GetCriterionType()",
    "kind": "Method",
    "detail": "Function (} ECriterion)",
    "insertText": "GetCriterionType()"
  }
]