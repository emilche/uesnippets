[
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Async . h \" # include \" Containers / Queue . h \" # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / ThreadSafeCounter64 . h \" namespace BuildPatchServices { namespace AsyncHelpers { template<ResultType,. . . Args> TFunction<)",
    "insertText": "void()> MakePromiseKeeper(const TSharedRef<TPromise<ResultType>, ESPMode::ThreadSafe>& Promise, const TFunction<ResultType(Args...)>& Function, Args... FuncArgs)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Promise ->)",
    "insertText": "SetValue(Function(FuncArgs...))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; } template<. . . Args> TFunction<)",
    "insertText": "void()> MakePromiseKeeper(const TSharedRef<TPromise<void>, ESPMode::ThreadSafe>& Promise, const TFunction<void(Args...)>& Function, Args... FuncArgs)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(FuncArgs...)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Promise ->)",
    "insertText": "SetValue()"
  },
  {
    "label": "ExecuteOnGameThread()",
    "kind": "Method",
    "detail": "Function (} ; } template<ResultType,. . . Args> TFuture<ResultType>)",
    "insertText": "ExecuteOnGameThread(const TFunction<ResultType(Args...)>& Function, Args... FuncArgs)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TPromise<ResultType>,ESPMode::ThreadSafe> Promise =)",
    "insertText": "MakeShareable(new TPromise<ResultType>())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()> PromiseKeeper = MakePromiseKeeper(Promise, Function, FuncArgs...)"
  },
  {
    "label": "AsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncTask(ENamedThreads::GameThread, MoveTemp(PromiseKeeper))"
  },
  {
    "label": "PromiseKeeper()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PromiseKeeper()"
  },
  {
    "label": "GetFuture()",
    "kind": "Method",
    "detail": "Function (} return Promise ->)",
    "insertText": "GetFuture()"
  },
  {
    "label": "ExecuteOnGameThread()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> TFuture<ResultType>)",
    "insertText": "ExecuteOnGameThread(const TFunction<ResultType()>& Function)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void()> PromiseKeeper = MakePromiseKeeper(Promise, Function)"
  },
  {
    "label": "ExecuteOnCustomThread()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> TFuture<ResultType>)",
    "insertText": "ExecuteOnCustomThread(const TFunction<ResultType()>& Function, TQueue<TFunction<void()>, EQueueMode::Spsc>& CustomThreadQueue)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (CustomThreadQueue .)",
    "insertText": "Enqueue(MoveTemp(PromiseKeeper))"
  },
  {
    "label": "LockFreePeak()",
    "kind": "Method",
    "detail": "Function (} } namespace AsyncHelpers { template<IntegerType> void)",
    "insertText": "LockFreePeak(volatile IntegerType* PeakValue, IntegerType NewSample)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (IntegerType CurrentPeak ; do { CurrentPeak =* PeakValue ; })",
    "insertText": "while(CurrentPeak < NewSample && FPlatformAtomics::InterlockedCompareExchange(PeakValue, NewSample, CurrentPeak) != CurrentPeak)"
  }
]