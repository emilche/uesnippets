[
  {
    "label": "IComponentAssetBroker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IComponentAssetBroker"
  },
  {
    "label": "FComponentAssetBrokerage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentAssetBrokerage"
  },
  {
    "label": "GetSupportedAssetClass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" Components / ActorComponent . h \" typedef TArray<TSubclassOf<UActorComponent>> FComponentClassList ; class IComponentAssetBroker { public : UClass*)",
    "insertText": "GetSupportedAssetClass()"
  },
  {
    "label": "AssignAssetToComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssignAssetToComponent(UActorComponent* InComponent, UObject* InAsset)"
  },
  {
    "label": "GetAssetFromComponent()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetAssetFromComponent(UActorComponent* InComponent)"
  },
  {
    "label": "IComponentAssetBroker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IComponentAssetBroker()"
  },
  {
    "label": "GetComponentsForAsset()",
    "kind": "Method",
    "detail": "Function (} } ; class FComponentAssetBrokerage { public : TArray<TSubclassOf<UActorComponent>>)",
    "insertText": "GetComponentsForAsset(const UObject* InAsset)"
  },
  {
    "label": "GetPrimaryComponentForAsset()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UActorComponent>)",
    "insertText": "GetPrimaryComponentForAsset(UClass* InAssetClass)"
  },
  {
    "label": "SupportsAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsAssets(UActorComponent* InComponent)"
  },
  {
    "label": "RegisterAssetToComponentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAssetToComponentMapping(UClass* InAssetClass, TSubclassOf<UActorComponent> InComponentClass, bool bSetAsPrimary)"
  },
  {
    "label": "UnregisterAssetToComponentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAssetToComponentMapping(UClass* InAssetClass, TSubclassOf<UActorComponent> InComponentClass)"
  },
  {
    "label": "FindBrokerByComponentType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IComponentAssetBroker>)",
    "insertText": "FindBrokerByComponentType(TSubclassOf<UActorComponent> InComponentClass)"
  },
  {
    "label": "FindBrokerByAssetType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IComponentAssetBroker>)",
    "insertText": "FindBrokerByAssetType(UClass* InAssetClass)"
  },
  {
    "label": "GetSupportedAssets()",
    "kind": "Method",
    "detail": "Function (TArray<UClass*>)",
    "insertText": "GetSupportedAssets(UClass* InFilterComponentClass = NULL)"
  },
  {
    "label": "RegisterBroker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterBroker(TSharedPtr<IComponentAssetBroker> Broker, TSubclassOf<UActorComponent> InComponentClass, bool bSetAsPrimary, bool bMapComponentForAssets)"
  },
  {
    "label": "UnregisterBroker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterBroker(TSharedPtr<IComponentAssetBroker> Broker)"
  },
  {
    "label": "PRIVATE_ShutdownBrokerage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PRIVATE_ShutdownBrokerage()"
  },
  {
    "label": "FComponentAssetBrokerage()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FComponentAssetBrokerage()"
  },
  {
    "label": "InitializeMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeMap()"
  }
]