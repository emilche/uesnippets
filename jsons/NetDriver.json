[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FNetGUIDCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetGUIDCache"
  },
  {
    "label": "FNetSyncLoadReport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetSyncLoadReport"
  },
  {
    "label": "FNetworkNotify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkNotify"
  },
  {
    "label": "FNetworkObjectList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkObjectList"
  },
  {
    "label": "FObjectReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectReplicator"
  },
  {
    "label": "FRepChangedPropertyTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepChangedPropertyTracker"
  },
  {
    "label": "FRepLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepLayout"
  },
  {
    "label": "FReplicationChangelistMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationChangelistMgr"
  },
  {
    "label": "FVoicePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoicePacket"
  },
  {
    "label": "StatelessConnectHandlerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatelessConnectHandlerComponent"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UReplicationDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationDriver"
  },
  {
    "label": "FNetworkObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkObjectInfo"
  },
  {
    "label": "UChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChannel"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "FNetAnalyticsAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetAnalyticsAggregator"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "PacketHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketHandler"
  },
  {
    "label": "FReplicatedStaticActorDestructionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicatedStaticActorDestructionInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UReplicationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationSystem"
  },
  {
    "label": "UReplicationBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationBridge"
  },
  {
    "label": "FNetObjectGroupHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectGroupHandle"
  },
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FScopedIgnoreStaticActorDestruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedIgnoreStaticActorDestruction"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FPacketSimulationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketSimulationSettings"
  },
  {
    "label": "FActorDestructionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorDestructionInfo"
  },
  {
    "label": "FNetDriverReplicationSystemConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDriverReplicationSystemConfig"
  },
  {
    "label": "FNetViewer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetViewer"
  },
  {
    "label": "FCompareFActorPriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFActorPriority"
  },
  {
    "label": "FChannelDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelDefinition"
  },
  {
    "label": "FDisconnectedClient",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisconnectedClient"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FClassNetCacheMgr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassNetCacheMgr"
  },
  {
    "label": "FReplicationChangelistMgrWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationChangelistMgrWrapper"
  },
  {
    "label": "FOutParmRec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutParmRec"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FClassNetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassNetCache"
  },
  {
    "label": "UChildConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildConnection"
  },
  {
    "label": "ISocketSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketSubsystem"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Engine / EngineTypes . h \" # include \" Net / NetworkMetricsDatabase . h \" # include \" HAL / IConsoleManager . h \" # include \" Math / RandomStream . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Misc / NetworkGuid . h \" # include \" UObject / CoreNet . h \" # include \" Channel . h \" # include \" Net / Core / Connection / ConnectionHandle . h \" # include \" Net / Core / Misc / DDoSDetection . h \" # include \" IPAddress . h \" # include \" Net / NetAnalyticsTypes . h \" # include \" Net / NetConnectionIdHandler . h \" # include \" HAL / LowLevelMemTracker . h \" # if UE_WITH_IRIS # include \" Templates / PimplPtr . h \" # endif # include \" NetDriver . generated . h \")",
    "insertText": "LLM_DECLARE_TAG_API(NetDriver, ENGINE_API)"
  },
  {
    "label": "FScopedIgnoreStaticActorDestruction()",
    "kind": "Method",
    "detail": "Function (class Error ; class FNetGUIDCache ; struct FNetSyncLoadReport ; class FNetworkNotify ; class FNetworkObjectList ; class FObjectReplicator ; class FRepChangedPropertyTracker ; class FRepLayout ; class FReplicationChangelistMgr ; class FVoicePacket ; class StatelessConnectHandlerComponent ; class UNetConnection ; class UReplicationDriver ; struct FNetworkObjectInfo ; class UChannel ; class IAnalyticsProvider ; class FNetAnalyticsAggregator ; class UNetDriver ; class UActorChannel ; class PacketHandler ; struct FReplicatedStaticActorDestructionInfo ; enum class ECreateReplicationChangelistMgrFlags ; enum class EEngineNetworkRuntimeFeatures : uint16 ; # if UE_WITH_IRIS class UReplicationSystem ; class UReplicationBridge ; namespace UE::Net { class FNetObjectGroupHandle ; } # endif namespace UE::Net { class FNetTokenStore ; class FScopedIgnoreStaticActorDestruction { public :)",
    "insertText": "FScopedIgnoreStaticActorDestruction()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NONCOPYABLE(FScopedIgnoreStaticActorDestruction)"
  },
  {
    "label": "ShouldIgnoreStaticActorDestruction()",
    "kind": "Method",
    "detail": "Function (private : bool bCachedValue = false ; } ; bool)",
    "insertText": "ShouldIgnoreStaticActorDestruction()"
  },
  {
    "label": "CountReplicatedSubObjectsOfActor()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CountReplicatedSubObjectsOfActor(AActor* ReplicatedActor)"
  },
  {
    "label": "DECLARE_DELEGATE_SevenParams()",
    "kind": "Method",
    "detail": "Function (} using FConnectionMap = TMap<TSharedRef<const FInternetAddr>,TObjectPtr<UNetConnection>,FDefaultSetAllocator,FInternetAddrConstKeyMapFuncs<TObjectPtr<UNetConnection>>> ; TAutoConsoleVariable<int32> CVarNetAllowEncryption ; int32 GNumSaturatedConnections ; int32 GNumSharedSerializationHit ; int32 GNumSharedSerializationMiss ; int32 GNumReplicateActorCalls ; bool GReplicateActorTimingEnabled ; bool GReceiveRPCTimingEnabled ; double GReplicateActorTimeSeconds ; uint32 GNetOutBytes ; double GReplicationGatherPrioritizeTimeSeconds ; double GServerReplicateActorTimeSeconds ; int32 GNumClientConnections ; int32 GNumClientUpdateLevelVisibility ; namespace UE::Net::Private { int32 SerializeNewActorOverrideLevel ; } # if ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_DELEGATE_SevenParams(FOnSendRPC, AActor* , UFunction* , void* , FOutParmRec* , FFrame* , UObject* , bool&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FShouldSkipRepNotifies)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# endif struct ConsiderListUpdateParams { float DeltaSeconds = 0 ; UNetConnection* Connection = nullptr ; bool bCPUSaturated = false ; } ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnConsiderListUpdate, const ConsiderListUpdateParams& UpdateParams, int32& OutUpdated, const TArray<FNetworkObjectInfo*>& ConsiderList)"
  },
  {
    "label": "DO_ENABLE_NET_TEST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DO_ENABLE_NET_TEST(UE_BUILD_SHIPPING) #ifndef NET_DEBUG_RELEVANT_ACTORS #define NET_DEBUG_RELEVANT_ACTORS !(UE_BUILD_SHIPPING || UE_BUILD_TEST) #endif USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=\"Simulation Settings\")"
  },
  {
    "label": "LoadConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadConfig(const TCHAR* OptionalQualifier = nullptr)"
  },
  {
    "label": "LoadEmulationProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadEmulationProfile(const TCHAR* ProfileName)"
  },
  {
    "label": "ApplySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySettings(const FPacketSimulationSettings& NewSettings)"
  },
  {
    "label": "ValidateSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSettings()"
  },
  {
    "label": "ResetSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSettings()"
  },
  {
    "label": "ShouldDropPacketOfSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDropPacketOfSize(int32 NumBits)"
  },
  {
    "label": "ParseSettings()",
    "kind": "Method",
    "detail": "Function (const bool bIsBigEnough = NumBits> PktLossMinSize* 8 ; const bool bIsSmallEnough = PktLossMaxSize = = 0 | | NumBits<PktLossMaxSize* 8 ; return bIsBigEnough&& bIsSmallEnough ; } bool)",
    "insertText": "ParseSettings(const TCHAR* Stream, const TCHAR* OptionalQualifier=nullptr)"
  },
  {
    "label": "ParseHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseHelper(const TCHAR* Cmd, const TCHAR* Name, int32& Value, const TCHAR* OptionalQualifier)"
  },
  {
    "label": "ConfigHelperInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigHelperInt(const TCHAR* Name, int32& Value, const TCHAR* OptionalQualifier)"
  },
  {
    "label": "ConfigHelperBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigHelperBool(const TCHAR* Name, bool& Value, const TCHAR* OptionalQualifier)"
  },
  {
    "label": "FActorDestructionInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FActorDestructionInfo { public :)",
    "insertText": "FActorDestructionInfo() : Reason(EChannelCloseReason::Destroyed) , bIgnoreDistanceCulling(false)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<ULevel> Level ; TWeakObjectPtr<UObject> ObjOuter ; FVector DestroyedPosition ; FNetworkGUID NetGUID ; FString PathName ; FName StreamingLevelName ; EChannelCloseReason Reason ; bool bIgnoreDistanceCulling ; void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (PathName .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FActorPriority()",
    "kind": "Method",
    "detail": "Function (} ; struct FActorPriority { int32 Priority ; FNetworkObjectInfo* ActorInfo ; UActorChannel* Channel ; FActorDestructionInfo* DestructionInfo ;)",
    "insertText": "FActorPriority() : Priority(0), ActorInfo(NULL), Channel(NULL), DestructionInfo(NULL)"
  },
  {
    "label": "FActorPriority()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActorPriority(class UNetConnection* InConnection, UActorChannel* InChannel, FNetworkObjectInfo* InActorInfo, const TArray<struct FNetViewer>& Viewers, bool bLowBandwidth)"
  },
  {
    "label": "FActorPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FActorPriority(class UNetConnection* InConnection, FActorDestructionInfo * DestructInfo, const TArray<struct FNetViewer>& Viewers)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FCompareFActorPriority { bool)",
    "insertText": "operator()( const FActorPriority& A, const FActorPriority& B)"
  },
  {
    "label": "FChannelDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChannelDefinition() : ChannelName(NAME_None), ClassName(NAME_None), ChannelClass(nullptr), StaticChannelIndex(INDEX_NONE), bTickOnCreate(false), bServerOpen(false), bClientOpen(false), bInitialServer(false), bInitialClient(false)"
  },
  {
    "label": "FDisconnectedClient()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDisconnectedClient { TSharedRef<const FInternetAddr> Address ; double DisconnectTime ;)",
    "insertText": "FDisconnectedClient(TSharedRef<const FInternetAddr>& InAddress, double InDisconnectTime) : Address(InAddress) , DisconnectTime(InDisconnectTime)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EProcessRemoteFunctionFlags : uint32 { None = 0,ReplicatedActor = 1<<0,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EProcessRemoteFunctionFlags)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UNetworkMetricsCSV_Replication()"
  },
  {
    "label": "SetCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCategory(\"Replication\")"
  },
  {
    "label": "UNetworkMetricsCSV_Replication()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "UNetworkMetricsCSV_Replication()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, customConstructor, transient, MinimalAPI, config=Engine)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: ENGINE_API void InternalProcessRemoteFunction( class AActor* Actor, class UObject* SubObject, class UNetConnection* Connection, class UFunction* Function, void* Parms, FOutParmRec* OutParms, FFrame* Stack, bool bIsServer)"
  },
  {
    "label": "InternalProcessRemoteFunctionPrivate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InternalProcessRemoteFunctionPrivate(class AActor* Actor, class UObject* SubObject, class UNetConnection* Connection, class UFunction* Function, void* Parms, FOutParmRec* OutParms, FFrame* Stack, const bool bIsServer, EProcessRemoteFunctionFlags& RemoteFunctionFlags)"
  },
  {
    "label": "UNetDriver()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "UNetDriver()"
  },
  {
    "label": "GetNetServerMaxTickRate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNetServerMaxTickRate()"
  },
  {
    "label": "SetNetServerMaxTickRate()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return NetServerMaxTickRate ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "SetNetServerMaxTickRate(int32 InServerMaxTickRate)"
  },
  {
    "label": "TryUpgradeNetworkFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryUpgradeNetworkFeatures(EEngineNetworkRuntimeFeatures RemoteFeatures)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnNetServerMaxTickRateChanged, UNetDriver*, int32, int32)"
  },
  {
    "label": "CreateInitialClientChannels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateInitialClientChannels()"
  },
  {
    "label": "CreateInitialServerChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInitialServerChannels(UNetConnection* ClientConnection)"
  },
  {
    "label": "SetupNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupNetworkMetrics()"
  },
  {
    "label": "SetupNetworkMetricsListeners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupNetworkMetricsListeners()"
  },
  {
    "label": "RegisterStatsListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStatsListener(const FName MetricName, const FName StatName)"
  },
  {
    "label": "ResetNetworkMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNetworkMetrics()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnNetUpdateFrequencyChanged, const AActor* Actor)"
  },
  {
    "label": "GetOnNetUpdateFrequencyChanged()",
    "kind": "Method",
    "detail": "Function (FOnNetUpdateFrequencyChanged&)",
    "insertText": "GetOnNetUpdateFrequencyChanged()"
  },
  {
    "label": "ReleaseToChannelPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseToChannelPool(UChannel* Channel)"
  },
  {
    "label": "SetNetDriverName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetDriverName(FName NewNetDriverNamed)"
  },
  {
    "label": "SetNetDriverDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetDriverDefinition(FName NewNetDriverDefinition)"
  },
  {
    "label": "GetNetDriverDefinition()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNetDriverDefinition()"
  },
  {
    "label": "ReinitBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitBase()"
  },
  {
    "label": "InitPacketSimulationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitPacketSimulationSettings()"
  },
  {
    "label": "IsSimulatingPacketLossBurst()",
    "kind": "Method",
    "detail": "Function (# if DO_ENABLE_NET_TEST bool)",
    "insertText": "IsSimulatingPacketLossBurst()"
  },
  {
    "label": "GetElapsedTime()",
    "kind": "Method",
    "detail": "Function (# endif class FNetworkNotify* Notify ; double)",
    "insertText": "GetElapsedTime()"
  },
  {
    "label": "IsInTick()",
    "kind": "Method",
    "detail": "Function (ElapsedTime = 0 . 0 ; } bool)",
    "insertText": "IsInTick()"
  },
  {
    "label": "PrintDebugRelevantActors()",
    "kind": "Method",
    "detail": "Function (uint8 bIsPeer : 1 ; uint8 ProfileStats : 1 ; uint8 bSkipLocalStats : 1 ; uint8 bCollectNetStats : 1 ; uint8 bIsStandbyCheckingEnabled : 1 ; uint8 bHasStandbyCheatTriggered : 1 ; double LastTickDispatchRealtime ; int32 SendCycles ; uint32 InBytesPerSecond ; uint32 OutBytesPerSecond ; uint32 InBytes ; uint32 InTotalBytes ; uint32 OutBytes ; uint32 OutTotalBytes ; uint32 NetGUIDOutBytes ; uint32 NetGUIDInBytes ; uint32 InPackets ; uint32 PrevInPackets ; uint32 InTotalPackets ; uint32 OutPackets ; uint32 PrevOutPackets ; uint32 OutTotalPackets ; uint32 InBunches ; uint32 OutBunches ; uint32 InTotalBunches ; uint32 OutTotalBunches ; uint32 OutTotalReliableBunches ; uint32 InTotalReliableBunches ; uint32 InPacketsLost ; uint32 PrevInPacketsLost ; uint32 InTotalPacketsLost ; uint32 OutPacketsLost ; uint32 PrevOutPacketsLost ; uint32 OutTotalPacketsLost ; uint32 VoicePacketsSent ; uint32 VoiceBytesSent ; uint32 VoicePacketsRecv ; uint32 VoiceBytesRecv ; uint32 VoiceInPercent ; uint32 VoiceOutPercent ; double StatUpdateTime ; float StatPeriod ; uint32 TotalRPCsCalled ; uint32 OutTotalAcks ; double LastCleanupTime ; float StandbyRxCheatTime ; float StandbyTxCheatTime ; int32 BadPingThreshold ; float PercentMissingForRxStandby ; float PercentMissingForTxStandby ; float PercentForBadPing ; float JoinInProgressStandbyWaitTime ; int32 NetTag ; # if NET_DEBUG_RELEVANT_ACTORS bool DebugRelevantActors ; TArray<TWeakObjectPtr<AActor>> LastPrioritizedActors ; TArray<TWeakObjectPtr<AActor>> LastRelevantActors ; TArray<TWeakObjectPtr<AActor>> LastSentActors ; TArray<TWeakObjectPtr<AActor>> LastNonRelevantActors ; void)",
    "insertText": "PrintDebugRelevantActors()"
  },
  {
    "label": "GetDestroyedStartupOrDormantActors()",
    "kind": "Method",
    "detail": "Function (# endif TMap<FNetworkGUID,TUniquePtr<FActorDestructionInfo>> DestroyedStartupOrDormantActors ; private : TMap<FName,TSet<FNetworkGUID>> DestroyedStartupOrDormantActorsByLevel ; TMap<FString,FString> CachedNetAnalyticsAttributes ; public : const TSet<FNetworkGUID>&)",
    "insertText": "GetDestroyedStartupOrDormantActors(const FName& LevelName)"
  },
  {
    "label": "SetNetAnalyticsAttributes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNetAnalyticsAttributes(const FString& AttributeKey, const FString& AttributeValue)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CachedNetAnalyticsAttributes .)",
    "insertText": "Add(AttributeKey, AttributeValue)"
  },
  {
    "label": "FReplicationChangelistMgrWrapper()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FName> RenamedStartupActors ; uint32 ReplicationFrame ; TMap<TWeakObjectPtr<UObject>,TSharedPtr<FRepLayout>,FDefaultSetAllocator,TWeakObjectPtrMapKeyFuncs<TWeakObjectPtr<UObject>,TSharedPtr<FRepLayout>>> RepLayoutMap ; class FReplicationChangelistMgrWrapper { public :)",
    "insertText": "FReplicationChangelistMgrWrapper(UObject* Obj, const TSharedPtr<FReplicationChangelistMgr>& InReplicationChangelistMgr) : ReplicationChangelistMgr(InReplicationChangelistMgr), WeakObjectPtr(Obj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FReplicationChangelistMgr*)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsObjectValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObjectValid()"
  },
  {
    "label": "GetWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UObject>)",
    "insertText": "GetWeakObjectPtr()"
  },
  {
    "label": "GetObjectClassRepLayout()",
    "kind": "Method",
    "detail": "Function (private : TWeakObjectPtr<UObject> WeakObjectPtr ; } ; TMap<UObject*,FReplicationChangelistMgrWrapper> ReplicationChangeListMap ; TSharedPtr<FRepLayout>)",
    "insertText": "GetObjectClassRepLayout(UClass * InClass)"
  },
  {
    "label": "GetFunctionRepLayout()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRepLayout>)",
    "insertText": "GetFunctionRepLayout(UFunction * Function)"
  },
  {
    "label": "GetStructRepLayout()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRepLayout>)",
    "insertText": "GetStructRepLayout(UStruct * Struct)"
  },
  {
    "label": "GetReplicationChangeListMgr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FReplicationChangelistMgr>)",
    "insertText": "GetReplicationChangeListMgr(UObject* Object)"
  },
  {
    "label": "UpdateStandbyCheatStatus()",
    "kind": "Method",
    "detail": "Function (TMap<FNetworkGUID,TSet<FObjectReplicator*>> GuidToReplicatorMap ; int32 TotalTrackedGuidMemoryBytes ; TSet<FObjectReplicator*> UnmappedReplicators ; TSet<FObjectReplicator*> AllOwnedReplicators ; FDelegateHandle TickDispatchDelegateHandle ; FDelegateHandle PostTickDispatchDelegateHandle ; FDelegateHandle TickFlushDelegateHandle ; FDelegateHandle PostTickFlushDelegateHandle ; # if ! UE_BUILD_SHIPPING FOnSendRPC SendRPCDel ; FShouldSkipRepNotifies SkipRepNotifiesDel ; # endif float ProcessQueuedBunchesCurrentFrameMilliseconds ; FDDoSDetection DDoS ; TSharedPtr<FInternetAddr> LocalAddr ; void)",
    "insertText": "UpdateStandbyCheatStatus(void)"
  },
  {
    "label": "SetAnalyticsProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalyticsProvider(TSharedPtr<IAnalyticsProvider> InProvider)"
  },
  {
    "label": "SetPacketSimulationSettings()",
    "kind": "Method",
    "detail": "Function (# if DO_ENABLE_NET_TEST FPacketSimulationSettings PacketSimulationSettings ; void)",
    "insertText": "SetPacketSimulationSettings(const FPacketSimulationSettings& NewSettings)"
  },
  {
    "label": "OnPacketSimulationSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSimulationSettingsChanged()"
  },
  {
    "label": "UNetDriver()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "UNetDriver(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UNetDriver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UNetDriver(FVTableHelper& Helper)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostReloadConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReloadConfig(FProperty* PropertyToLoad)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "Exec_Dev()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Exec_Dev(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "GetNetMode()",
    "kind": "Method",
    "detail": "Function (public : ENetMode)",
    "insertText": "GetNetMode()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable() const PURE_VIRTUAL( UNetDriver::IsAvailable, return false;) ENGINE_API virtual bool InitBase(bool bInitAsClient, FNetworkNotify* InNotify, const FURL& URL, bool bReuseAddressAndPort, FString& Error)"
  },
  {
    "label": "InitConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitConnect(class FNetworkNotify* InNotify, const FURL& ConnectURL, FString& Error ) PURE_VIRTUAL( UNetDriver::InitConnect, return true;)"
  },
  {
    "label": "InitListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitListen(class FNetworkNotify* InNotify, FURL& ListenURL, bool bReuseAddressAndPort, FString& Error) PURE_VIRTUAL( UNetDriver::InitListen, return true;)"
  },
  {
    "label": "InitDestroyedStartupActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDestroyedStartupActors()"
  },
  {
    "label": "InitConnectionlessHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConnectionlessHandler()"
  },
  {
    "label": "FlushHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushHandler()"
  },
  {
    "label": "InitConnectionClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitConnectionClass(void)"
  },
  {
    "label": "InitReplicationDriverClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitReplicationDriverClass()"
  },
  {
    "label": "InitReplicationBridgeClass()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS bool)",
    "insertText": "InitReplicationBridgeClass()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "LowLevelDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelDestroy()"
  },
  {
    "label": "LowLevelGetNetworkNumber()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LowLevelGetNetworkNumber()"
  },
  {
    "label": "GetLocalAddr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FInternetAddr>)",
    "insertText": "GetLocalAddr()"
  },
  {
    "label": "ServerReplicateActors()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ServerReplicateActors(float DeltaSeconds)"
  },
  {
    "label": "ProcessRemoteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRemoteFunction(class AActor* Actor, class UFunction* Function, void* Parameters, struct FOutParmRec* OutParms, struct FFrame* Stack, class UObject* SubObject = nullptr)"
  },
  {
    "label": "GetMetrics()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UNetworkMetricsDatabase>)",
    "insertText": "GetMetrics()"
  },
  {
    "label": "ProcessRemoteFunctionForChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRemoteFunctionForChannel(UActorChannel* Ch, const class FClassNetCache* ClassCache, const FFieldNetCache* FieldCache, UObject* TargetObj, UNetConnection* Connection, UFunction* Function, void* Parms, FOutParmRec* OutParms, FFrame* Stack, const bool IsServer, const ERemoteFunctionSendPolicy SendPolicy = ERemoteFunctionSendPolicy::Default)"
  },
  {
    "label": "ProcessRemoteFunctionForChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRemoteFunctionForChannel(UActorChannel* Ch, const class FClassNetCache* ClassCache, const FFieldNetCache* FieldCache, UObject* TargetObj, UNetConnection* Connection, UFunction* Function, void* Parms, FOutParmRec* OutParms, FFrame* Stack, const bool IsServer, const ERemoteFunctionSendPolicy SendPolicy, EProcessRemoteFunctionFlags& RemoteFunctionFlags)"
  },
  {
    "label": "ProcessRemoteFunctionForChannelPrivate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessRemoteFunctionForChannelPrivate(UActorChannel* Ch, const class FClassNetCache* ClassCache, const FFieldNetCache* FieldCache, UObject* TargetObj, UNetConnection* Connection, UFunction* Function, void* Parms, FOutParmRec* OutParms, FFrame* Stack, const bool bIsServer, const ERemoteFunctionSendPolicy SendPolicy, EProcessRemoteFunctionFlags& RemoteFunctionFlags)"
  },
  {
    "label": "TickDispatch()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TickDispatch(float DeltaTime)"
  },
  {
    "label": "PostTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickDispatch()"
  },
  {
    "label": "TickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFlush(float DeltaSeconds)"
  },
  {
    "label": "PostTickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickFlush()"
  },
  {
    "label": "LowLevelSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelSend(TSharedPtr<const FInternetAddr> Address, void* Data, int32 CountBits, FOutPacketTraits& Traits) PURE_VIRTUAL(UNetDriver::LowLevelSend,)"
  },
  {
    "label": "ProcessLocalServerPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLocalServerPackets()"
  },
  {
    "label": "ProcessLocalClientPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLocalClientPackets()"
  },
  {
    "label": "UpdateNetworkLagState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkLagState()"
  },
  {
    "label": "ReplicateVoicePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicateVoicePacket(TSharedPtr<class FVoicePacket> VoicePacket, class UNetConnection* CameFromConn)"
  },
  {
    "label": "HandleSocketsCommand()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "HandleSocketsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePackageMapCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePackageMapCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleNetFloodCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNetFloodCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleNetDebugTextCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNetDebugTextCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleNetDisconnectCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNetDisconnectCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleNetDumpServerRPCCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNetDumpServerRPCCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleNetDumpDormancy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNetDumpDormancy(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDumpSubObjectsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpSubObjectsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDumpRepLayoutFlagsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpRepLayoutFlagsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePushModelMemCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePushModelMemCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePropertyConditionsMemCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePropertyConditionsMemCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePacketLossBurstCommand()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "HandlePacketLossBurstCommand(int32 DurationInMilliseconds)"
  },
  {
    "label": "ForceNetUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNetUpdate(AActor* Actor)"
  },
  {
    "label": "ForceAllActorsNetUpdateTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceAllActorsNetUpdateTime(float NetUpdateTimeOffset, TFunctionRef<bool(const AActor* const)> ValidActorTestFunc)"
  },
  {
    "label": "FlushActorDormancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushActorDormancy(AActor *Actor, bool bWasDormInitial=false)"
  },
  {
    "label": "NotifyActorDormancyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDormancyChange(AActor* Actor, ENetDormancy OldDormancyState)"
  },
  {
    "label": "NotifyActorClientDormancyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorClientDormancyChanged(AActor* Actor, ENetDormancy OldDormancyState)"
  },
  {
    "label": "ForcePropertyCompare()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePropertyCompare(AActor* Actor)"
  },
  {
    "label": "ForceActorRelevantNextUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceActorRelevantNextUpdate(AActor* Actor)"
  },
  {
    "label": "AddNetworkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNetworkActor(AActor* Actor)"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(AActor* Actor, bool IsSeamlessTravel=false)"
  },
  {
    "label": "NotifySubObjectDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySubObjectDestroyed(UObject* SubObject)"
  },
  {
    "label": "NotifyActorRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorRenamed(AActor* Actor, UObject* PreviousOuter, FName PreviousName)"
  },
  {
    "label": "RemoveNetworkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNetworkActor(AActor* Actor)"
  },
  {
    "label": "DeleteSubObjectOnClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSubObjectOnClients(AActor* Actor, UObject* SubObject)"
  },
  {
    "label": "TearOffSubObjectOnClients()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearOffSubObjectOnClients(AActor* Actor, UObject* SubObject)"
  },
  {
    "label": "NotifyActorLevelUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorLevelUnloaded(AActor* Actor)"
  },
  {
    "label": "NotifyActorTearOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorTearOff(AActor* Actor)"
  },
  {
    "label": "NotifyActorIsTraveling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorIsTraveling(AActor* TravelingActor)"
  },
  {
    "label": "SetRoleSwapOnReplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRoleSwapOnReplicate(AActor* Actor, bool bSwapRoles)"
  },
  {
    "label": "NotifyStreamingLevelUnload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyStreamingLevelUnload(ULevel*)"
  },
  {
    "label": "CreateChild()",
    "kind": "Method",
    "detail": "Function (class UChildConnection*)",
    "insertText": "CreateChild(UNetConnection* Parent)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "IsServer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsServer()"
  },
  {
    "label": "CleanPackageMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanPackageMaps()"
  },
  {
    "label": "RemoveClassRepLayoutReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClassRepLayoutReferences(UClass* Class)"
  },
  {
    "label": "CleanupWorldForSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWorldForSeamlessTravel()"
  },
  {
    "label": "PreSeamlessTravelGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSeamlessTravelGarbageCollect()"
  },
  {
    "label": "PostSeamlessTravelGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSeamlessTravelGarbageCollect()"
  },
  {
    "label": "GetSocketSubsystem()",
    "kind": "Method",
    "detail": "Function (class ISocketSubsystem*)",
    "insertText": "GetSocketSubsystem() PURE_VIRTUAL(UNetDriver::GetSocketSubsystem, return NULL;)"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorld(class UWorld* InWorld)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "IsNetResourceValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetResourceValid(void) PURE_VIRTUAL(UNetDriver::IsNetResourceValid, return false;)"
  },
  {
    "label": "NetObjectIsDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetObjectIsDynamic(const UObject *Object)"
  },
  {
    "label": "DrawNetDriverDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawNetDriverDebug()"
  },
  {
    "label": "FindOrCreateRepChangedPropertyTracker()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRepChangedPropertyTracker>)",
    "insertText": "FindOrCreateRepChangedPropertyTracker(UObject *Obj)"
  },
  {
    "label": "FindRepChangedPropertyTracker()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRepChangedPropertyTracker>)",
    "insertText": "FindRepChangedPropertyTracker(UObject* Obj)"
  },
  {
    "label": "ShouldClientDestroyTearOffActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClientDestroyTearOffActors()"
  },
  {
    "label": "ShouldQueueBunchesForActorGUID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldQueueBunchesForActorGUID(FNetworkGUID InGUID)"
  },
  {
    "label": "GetActorForGUID()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetActorForGUID(FNetworkGUID InGUID)"
  },
  {
    "label": "UNetDriver()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return const_cast<)",
    "insertText": "UNetDriver(this)->FindNetworkObjectInfo(InActor)"
  },
  {
    "label": "IsAdaptiveNetUpdateFrequencyEnabled()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "IsAdaptiveNetUpdateFrequencyEnabled()"
  },
  {
    "label": "IsNetworkActorUpdateFrequencyThrottled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetworkActorUpdateFrequencyThrottled(const AActor* InActor)"
  },
  {
    "label": "CancelAdaptiveReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAdaptiveReplication(const AActor* InActor)"
  },
  {
    "label": "IsPendingNetUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingNetUpdate(const AActor* InActor)"
  },
  {
    "label": "GetDuplicateLevelID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDuplicateLevelID()"
  },
  {
    "label": "SetReplicationDriver()",
    "kind": "Method",
    "detail": "Function (DuplicateLevelID = InDuplicateLevelID ; } void)",
    "insertText": "SetReplicationDriver(UReplicationDriver* NewReplicationManager)"
  },
  {
    "label": "GetReplicationDriver()",
    "kind": "Method",
    "detail": "Function (UReplicationDriver*)",
    "insertText": "GetReplicationDriver()"
  },
  {
    "label": "GetNetworkRuntimeFeatures()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS return bIsUsingIris ; # else return false ; # endif } EEngineNetworkRuntimeFeatures)",
    "insertText": "GetNetworkRuntimeFeatures()"
  },
  {
    "label": "RestartIrisSystem()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS void)",
    "insertText": "RestartIrisSystem()"
  },
  {
    "label": "DestroyIrisSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyIrisSystem()"
  },
  {
    "label": "RecreateIrisSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateIrisSystem()"
  },
  {
    "label": "GetReplicationSystem()",
    "kind": "Method",
    "detail": "Function (} # if UE_WITH_IRIS UReplicationSystem*)",
    "insertText": "GetReplicationSystem()"
  },
  {
    "label": "GetNetTokenStore()",
    "kind": "Method",
    "detail": "Function (const UE::Net::FNetTokenStore*)",
    "insertText": "GetNetTokenStore()"
  },
  {
    "label": "AddClientConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClientConnection(UNetConnection * NewConnection)"
  },
  {
    "label": "NotifyActorFullyDormantForConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorFullyDormantForConnection(AActor* Actor, UNetConnection* Connection)"
  },
  {
    "label": "IsLevelInitializedForActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelInitializedForActor(const AActor* InActor, const UNetConnection* InConnection)"
  },
  {
    "label": "NotifyRPCProcessed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRPCProcessed(UFunction* Function, UNetConnection* Connection, double ElapsedTimeSeconds)"
  },
  {
    "label": "ShouldReplicateFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReplicateFunction(AActor* Actor, UFunction* Function)"
  },
  {
    "label": "ShouldForwardFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForwardFunction(AActor* Actor, UFunction* Function, void* Parms)"
  },
  {
    "label": "ShouldReplicateActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReplicateActor(AActor* Actor)"
  },
  {
    "label": "ShouldCallRemoteFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCallRemoteFunction(UObject* Object, UFunction* Function, const FReplicationFlags& RepFlags)"
  },
  {
    "label": "ShouldClientDestroyActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClientDestroyActor(AActor* Actor)"
  },
  {
    "label": "NotifyActorChannelOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelOpen(UActorChannel* Channel, AActor* Actor)"
  },
  {
    "label": "NotifyActorChannelCleanedUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelCleanedUp(UActorChannel* Channel, EChannelCloseReason CloseReason)"
  },
  {
    "label": "NotifyActorTornOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorTornOff(AActor* Actor)"
  },
  {
    "label": "ClientSetActorDormant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetActorDormant(AActor* Actor)"
  },
  {
    "label": "ClientSetActorTornOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientSetActorTornOff(AActor* Actor)"
  },
  {
    "label": "ConsumeAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeAsyncLoadDelinquencyAnalytics(FNetAsyncLoadDelinquencyAnalytics& Out)"
  },
  {
    "label": "GetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (const FNetAsyncLoadDelinquencyAnalytics&)",
    "insertText": "GetAsyncLoadDelinquencyAnalytics()"
  },
  {
    "label": "ResetAsyncLoadDelinquencyAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAsyncLoadDelinquencyAnalytics()"
  },
  {
    "label": "AllocateConnectionId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AllocateConnectionId()"
  },
  {
    "label": "FreeConnectionId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeConnectionId(uint32 Id)"
  },
  {
    "label": "GetConnectionByHandle()",
    "kind": "Method",
    "detail": "Function (UNetConnection*)",
    "insertText": "GetConnectionByHandle(UE::Net::FConnectionHandle ConnectionHandle)"
  },
  {
    "label": "GetNetTraceId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNetTraceId()"
  },
  {
    "label": "SendDestructionInfoForLevelUnloadIfDormant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendDestructionInfoForLevelUnloadIfDormant(AActor* ThisActor, UNetConnection* Connection)"
  },
  {
    "label": "SetIsInTick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetIsInTick(bool bIsInTick)"
  },
  {
    "label": "RegisterTickEvents()",
    "kind": "Method",
    "detail": "Function (bInTick = bIsInTick ; } void)",
    "insertText": "RegisterTickEvents(class UWorld* InWorld)"
  },
  {
    "label": "UnregisterTickEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTickEvents(class UWorld* InWorld)"
  },
  {
    "label": "InternalTickDispatch()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InternalTickDispatch(float DeltaSeconds)"
  },
  {
    "label": "InternalTickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalTickFlush(float DeltaSeconds)"
  },
  {
    "label": "InternalCreateChannelByName()",
    "kind": "Method",
    "detail": "Function (protected : UChannel*)",
    "insertText": "InternalCreateChannelByName(const FName& ChName)"
  },
  {
    "label": "UpdateNetworkStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkStats()"
  },
  {
    "label": "ServerReplicateActors_PrepConnections()",
    "kind": "Method",
    "detail": "Function (# if WITH_SERVER_CODE int32)",
    "insertText": "ServerReplicateActors_PrepConnections(const float DeltaSeconds)"
  },
  {
    "label": "ServerReplicateActors_BuildConsiderList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerReplicateActors_BuildConsiderList(TArray<FNetworkObjectInfo*>& OutConsiderList, const float ServerTickTime)"
  },
  {
    "label": "ServerReplicateActors_PrioritizeActors()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ServerReplicateActors_PrioritizeActors(UNetConnection* Connection, const TArray<FNetViewer>& ConnectionViewers, const TArray<FNetworkObjectInfo*>& ConsiderList, const bool bCPUSaturated, FActorPriority*& OutPriorityList, FActorPriority**& OutPriorityActors)"
  },
  {
    "label": "ServerReplicateActors_ProcessPrioritizedActorsRange()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ServerReplicateActors_ProcessPrioritizedActorsRange(UNetConnection* Connection, const TArray<FNetViewer>& ConnectionViewers, FActorPriority** PriorityActors, const TInterval<int32>& ActorsIndexRange, int32& OutUpdated, bool bIgnoreSaturation = false)"
  },
  {
    "label": "ServerReplicateActors_MarkRelevantActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerReplicateActors_MarkRelevantActors(UNetConnection* Connection, const TArray<FNetViewer>& ConnectionViewers, int32 StartActorIndex, int32 EndActorIndex, FActorPriority** PriorityActors)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (FOnConsiderListUpdate OnPreConsiderListUpdateOverride ; FOnConsiderListUpdate OnPostConsiderListUpdateOverride ; FOnConsiderListUpdate OnProcessConsiderListOverride ; # endif void)",
    "insertText": "OnLevelRemovedFromWorld(class ULevel* Level, class UWorld* World)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedToWorld(class ULevel* Level, class UWorld* World)"
  },
  {
    "label": "MaySendProperties()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle OnLevelRemovedFromWorldHandle ; FDelegateHandle OnLevelAddedToWorldHandle ; public : const bool)",
    "insertText": "MaySendProperties()"
  },
  {
    "label": "GetTotalOutOfOrderPackets()",
    "kind": "Method",
    "detail": "Function (+ + OutTotalNotifiedPackets ; } int32)",
    "insertText": "GetTotalOutOfOrderPackets()"
  },
  {
    "label": "GetTotalOutOfOrderPacketsRecovered()",
    "kind": "Method",
    "detail": "Function (TotalOutOfOrderPacketsLost + = Count ; } int32)",
    "insertText": "GetTotalOutOfOrderPacketsRecovered()"
  },
  {
    "label": "GetTotalOutOfOrderPacketsDuplicate()",
    "kind": "Method",
    "detail": "Function (TotalOutOfOrderPacketsRecovered + = Count ; } int32)",
    "insertText": "GetTotalOutOfOrderPacketsDuplicate()"
  },
  {
    "label": "GetCachedGlobalNetTravelCount()",
    "kind": "Method",
    "detail": "Function (TotalOutOfOrderPacketsDuplicate + = Count ; } uint32)",
    "insertText": "GetCachedGlobalNetTravelCount()"
  },
  {
    "label": "IsDormInitialStartupActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDormInitialStartupActor(AActor* Actor)"
  },
  {
    "label": "MoveMappedObjectToUnmapped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveMappedObjectToUnmapped(const UObject* Object)"
  },
  {
    "label": "HasReplayConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReplayConnection()"
  },
  {
    "label": "GetIncomingBunchFrameProcessingTimeLimit()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetIncomingBunchFrameProcessingTimeLimit()"
  },
  {
    "label": "HasExceededIncomingBunchFrameProcessingTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExceededIncomingBunchFrameProcessingTime()"
  },
  {
    "label": "AddBunchProcessingFrameTimeMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBunchProcessingFrameTimeMS(float Milliseconds)"
  },
  {
    "label": "AddQueuedBunchFailsafeChannel()",
    "kind": "Method",
    "detail": "Function (IncomingBunchProcessingElapsedFrameTimeMS + = Milliseconds ; } void)",
    "insertText": "AddQueuedBunchFailsafeChannel()"
  },
  {
    "label": "NotifyGameInstanceUpdated()",
    "kind": "Method",
    "detail": "Function (+ + QueuedBunchFailsafeNumChannels ; } protected : FRandomStream UpdateDelayRandomStream ; void)",
    "insertText": "NotifyGameInstanceUpdated()"
  },
  {
    "label": "GetCreateReplicationChangelistMgrFlags()",
    "kind": "Method",
    "detail": "Function (bool bTickingThrottleEnabled = true ; private : FObjectReplicator ; ECreateReplicationChangelistMgrFlags)",
    "insertText": "GetCreateReplicationChangelistMgrFlags()"
  },
  {
    "label": "PostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle PostGarbageCollectHandle ; void)",
    "insertText": "PostGarbageCollect()"
  },
  {
    "label": "CreateDestructionInfo()",
    "kind": "Method",
    "detail": "Function (FActorDestructionInfo*)",
    "insertText": "CreateDestructionInfo(AActor* ThisActor, FActorDestructionInfo *DestructionInfo)"
  },
  {
    "label": "CreateReplicatedStaticActorDestructionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateReplicatedStaticActorDestructionInfo(ULevel* Level, const FReplicatedStaticActorDestructionInfo& Info)"
  },
  {
    "label": "FlushActorDormancyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushActorDormancyInternal(AActor *Actor)"
  },
  {
    "label": "LoadChannelDefinitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadChannelDefinitions()"
  },
  {
    "label": "ReportSyncLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSyncLoad(const FNetSyncLoadReport& Report)"
  },
  {
    "label": "UpdateCrashContext()",
    "kind": "Method",
    "detail": "Function (enum class ECrashContextUpdate { Default,UpdateRepModel,ClearRepModel,} ; void)",
    "insertText": "UpdateCrashContext(ECrashContextUpdate UpdateType=ECrashContextUpdate::Default)"
  },
  {
    "label": "RemoveDestroyedGuidsByLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDestroyedGuidsByLevel(const ULevel* Level, const TArray<FNetworkGUID>& RemovedGUIDs)"
  },
  {
    "label": "InitIrisSettings()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle ReportSyncLoadDelegateHandle ; # if UE_WITH_IRIS void)",
    "insertText": "InitIrisSettings(FName NewDriverName)"
  },
  {
    "label": "SetReplicationSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicationSystem(UReplicationSystem* ReplicationSystem)"
  },
  {
    "label": "CreateReplicationSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateReplicationSystem(bool bInitAsClient)"
  },
  {
    "label": "UpdateIrisReplicationViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIrisReplicationViews()"
  },
  {
    "label": "SendClientMoveAdjustments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendClientMoveAdjustments()"
  },
  {
    "label": "PostDispatchSendUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDispatchSendUpdate()"
  },
  {
    "label": "SendNetAnalytics()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SendNetAnalytics()"
  },
  {
    "label": "GetReplicationModelName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplicationModelName()"
  },
  {
    "label": "InitNetTraceId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNetTraceId()"
  },
  {
    "label": "ForwardRemoteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardRemoteFunction(UObject* RootObject, UObject* SubObject, UFunction* Function, void* Parms)"
  },
  {
    "label": "UpdateUnmappedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUnmappedObjects()"
  },
  {
    "label": "CleanupStaleDormantReplicators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupStaleDormantReplicators()"
  }
]