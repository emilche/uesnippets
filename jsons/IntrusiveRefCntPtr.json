[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IntrusiveRefCntPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntrusiveRefCntPtr"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "RefCountedBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedBase"
  },
  {
    "label": "RefCountedBaseVPTR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedBaseVPTR"
  },
  {
    "label": "IntrusiveRefCntPtrInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntrusiveRefCntPtrInfo"
  },
  {
    "label": "ThreadSafeRefCountedBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadSafeRefCountedBase"
  },
  {
    "label": "X",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "X"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "RefCountedBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_INTRUSIVEREFCNTPTR_H # define LLVM_ADT_INTRUSIVEREFCNTPTR_H # include<atomic> # include<cassert> # include<cstddef> namespace llvm { template<class T> class IntrusiveRefCntPtr ; template<class Derived> class RefCountedBase { unsigned ref_cnt ; public :)",
    "insertText": "RefCountedBase() : ref_cnt(0)"
  },
  {
    "label": "RefCountedBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefCountedBase(const RefCountedBase &) : ref_cnt(0)"
  },
  {
    "label": "Retain()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Retain()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (+ + ref_cnt ; } void)",
    "insertText": "Release()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ref_cnt > 0 && \"Reference count is already zero.\")"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} } ; class RefCountedBaseVPTR { unsigned ref_cnt ; void)",
    "insertText": "anchor()"
  },
  {
    "label": "RefCountedBaseVPTR()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "RefCountedBaseVPTR() : ref_cnt(0)"
  },
  {
    "label": "RefCountedBaseVPTR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RefCountedBaseVPTR(const RefCountedBaseVPTR &) : ref_cnt(0)"
  },
  {
    "label": "RefCountedBaseVPTR()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RefCountedBaseVPTR()"
  },
  {
    "label": "retain()",
    "kind": "Method",
    "detail": "Function (} template<T> struct IntrusiveRefCntPtrInfo ; } ; template<T> struct IntrusiveRefCntPtrInfo { void)",
    "insertText": "retain(T *obj)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "release(T *obj)"
  },
  {
    "label": "ThreadSafeRefCountedBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<class Derived> class ThreadSafeRefCountedBase { std::atomic<int> RefCount ; protected :)",
    "insertText": "ThreadSafeRefCountedBase() : RefCount(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (int NewRefCount = - - RefCount ;)",
    "insertText": "assert(NewRefCount >= 0 && \"Reference count was already zero.\")"
  },
  {
    "label": "IntrusiveRefCntPtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class IntrusiveRefCntPtr { T* Obj ; public : typedef T element_type ;)",
    "insertText": "IntrusiveRefCntPtr() : Obj(nullptr)"
  },
  {
    "label": "IntrusiveRefCntPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IntrusiveRefCntPtr(T* obj) : Obj(obj)"
  },
  {
    "label": "retain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "retain()"
  },
  {
    "label": "IntrusiveRefCntPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IntrusiveRefCntPtr(const IntrusiveRefCntPtr& S) : Obj(S.Obj)"
  },
  {
    "label": "IntrusiveRefCntPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IntrusiveRefCntPtr(IntrusiveRefCntPtr&& S) : Obj(S.Obj)"
  },
  {
    "label": "IntrusiveRefCntPtr()",
    "kind": "Method",
    "detail": "Function (S . Obj = nullptr ; } template<class X>)",
    "insertText": "IntrusiveRefCntPtr(IntrusiveRefCntPtr<X>&& S) : Obj(S.get())"
  },
  {
    "label": "IntrusiveRefCntPtr()",
    "kind": "Method",
    "detail": "Function (S . Obj = 0 ; } template<class X>)",
    "insertText": "IntrusiveRefCntPtr(const IntrusiveRefCntPtr<X>& S) : Obj(S.get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} IntrusiveRefCntPtr&)",
    "insertText": "operator(IntrusiveRefCntPtr S)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(S)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (T* tmp = other . Obj ; other . Obj = Obj ; Obj = tmp ; } void)",
    "insertText": "reset()"
  },
  {
    "label": "resetWithoutRelease()",
    "kind": "Method",
    "detail": "Function (Obj = nullptr ; } void)",
    "insertText": "resetWithoutRelease()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<X> class IntrusiveRefCntPtr ; } ; template<class T,class U> bool)",
    "insertText": "operator(const IntrusiveRefCntPtr<T>& A, const IntrusiveRefCntPtr<U>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class U> bool)",
    "insertText": "operator(const IntrusiveRefCntPtr<T>& A, U* B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class U> bool)",
    "insertText": "operator(T* A, const IntrusiveRefCntPtr<U>& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "operator(std::nullptr_t A, const IntrusiveRefCntPtr<T> &B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "operator(const IntrusiveRefCntPtr<T> &A, std::nullptr_t B)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} template<From> struct simplify_type ; template<class T> struct simplify_type<IntrusiveRefCntPtr<T>> { typedef T* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(IntrusiveRefCntPtr<T>& Val)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct simplify_type<const IntrusiveRefCntPtr<T>> { typedef T* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(const IntrusiveRefCntPtr<T>& Val)"
  }
]