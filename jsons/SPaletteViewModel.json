[
  {
    "label": "FWidgetTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetTemplate"
  },
  {
    "label": "FWidgetBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintEditor"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "SPaletteView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPaletteView"
  },
  {
    "label": "FWidgetCatalogViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetCatalogViewModel"
  },
  {
    "label": "FWidgetViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetViewModel"
  },
  {
    "label": "FWidgetTemplateViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetTemplateViewModel"
  },
  {
    "label": "FWidgetHeaderViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetHeaderViewModel"
  },
  {
    "label": "FPaletteViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaletteViewModel"
  },
  {
    "label": "FWidgetViewModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WidgetBlueprintEditor . h \" # include \" AssetRegistry / AssetData . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" class FWidgetTemplate ; class FWidgetBlueprintEditor ; class UWidgetBlueprint ; class SPaletteView ; class FWidgetCatalogViewModel ; class FWidgetViewModel : public TSharedFromThis<FWidgetViewModel> { public : ~)",
    "insertText": "FWidgetViewModel()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetName()"
  },
  {
    "label": "IsTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemplate()"
  },
  {
    "label": "IsCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategory()"
  },
  {
    "label": "HasFilteredChildTemplates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFilteredChildTemplates()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildren(TArray< TSharedPtr<FWidgetViewModel> >& OutChildren)"
  },
  {
    "label": "IsFavorite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFavorite()"
  },
  {
    "label": "ShouldForceExpansion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldForceExpansion()"
  },
  {
    "label": "GetFilterStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilterStrings(TArray<FString>& OutStrings)"
  },
  {
    "label": "BuildRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "BuildRow(const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnDraggingWidgetTemplateItem()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDraggingWidgetTemplateItem(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AddToFavorites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToFavorites()"
  },
  {
    "label": "RemoveFromFavorites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromFavorites()"
  },
  {
    "label": "FWidgetHeaderViewModel()",
    "kind": "Method",
    "detail": "Function (bIsFavorite = true ; } TSharedPtr<FWidgetTemplate> Template ; FWidgetCatalogViewModel* FavortiesViewModel ; private : bool bIsFavorite ; } ; class FWidgetHeaderViewModel : public FWidgetViewModel { public : ~)",
    "insertText": "FWidgetHeaderViewModel()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (bForceExpansion = bInForceExpansion ; } FText GroupName ; TArray<TSharedPtr<FWidgetViewModel>> Children ; private : bool bForceExpansion = false ; } ; class FWidgetCatalogViewModel : public TSharedFromThis<FWidgetCatalogViewModel> { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnUpdating) DECLARE_MULTICAST_DELEGATE(FOnUpdated) public: FWidgetCatalogViewModel(TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FWidgetCatalogViewModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWidgetCatalogViewModel()"
  },
  {
    "label": "RegisterToEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterToEvents()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "NeedUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedUpdate()"
  },
  {
    "label": "RemoveFromFavorites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromFavorites(const FWidgetTemplateViewModel* WidgetTemplateViewModel)"
  },
  {
    "label": "GetWidgetViewModels()",
    "kind": "Method",
    "detail": "Function (typedef TArray<TSharedPtr<FWidgetViewModel>> ViewModelsArray ; ViewModelsArray&)",
    "insertText": "GetWidgetViewModels()"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (SearchText = InSearchText ; } FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "AddHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHeader(TSharedPtr<FWidgetHeaderViewModel>& Header)"
  },
  {
    "label": "AddToFavoriteHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToFavoriteHeader(TSharedPtr<FWidgetTemplateViewModel>& Favorite)"
  },
  {
    "label": "GetBlueprint()",
    "kind": "Method",
    "detail": "Function (} ; UWidgetBlueprint*)",
    "insertText": "GetBlueprint()"
  },
  {
    "label": "BuildWidgetTemplateCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWidgetTemplateCategory(FString& Category, TArray<TSharedPtr<FWidgetTemplate>>& Templates, TArray<FString>& FavoritesList)"
  },
  {
    "label": "BuildClassWidgetList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildClassWidgetList()"
  },
  {
    "label": "AddWidgetTemplate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetTemplate(TSharedPtr<FWidgetTemplate> Template)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "OnBlueprintReinstanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintReinstanced()"
  },
  {
    "label": "OnFavoritesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFavoritesUpdated()"
  },
  {
    "label": "OnReloadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReloadComplete(EReloadCompleteReason Reason)"
  },
  {
    "label": "HandleOnAssetsDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnAssetsDeleted(const TArray<UClass*>& DeletedAssetClasses)"
  },
  {
    "label": "FPaletteViewModel()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<class FWidgetBlueprintEditor> BlueprintEditor ; typedef TArray<TSharedPtr<FWidgetTemplate>> WidgetTemplateArray ; TMap<FString,WidgetTemplateArray> WidgetTemplateCategories ; ViewModelsArray WidgetViewModels ; bool bRebuildRequested ; TSharedPtr<FWidgetHeaderViewModel> FavoriteHeader ; FText SearchText ; } ; class FPaletteViewModel : public FWidgetCatalogViewModel { public :)",
    "insertText": "FPaletteViewModel(TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor) : FWidgetCatalogViewModel(InBlueprintEditor)"
  }
]