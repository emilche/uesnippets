[
  {
    "label": "TickClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TickClock"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "LazyNow()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_COMMON_LAZY_NOW_H_ # define BASE_TASK_COMMON_LAZY_NOW_H_ # include \" base / base_export . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" base / time / time . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class TickClock ; class BASE_EXPORT LazyNow { public :)",
    "insertText": "LazyNow(TimeTicks now)"
  },
  {
    "label": "LazyNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LazyNow(absl::optional<TimeTicks> now, const TickClock* tick_clock)"
  },
  {
    "label": "LazyNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LazyNow(const TickClock* tick_clock)"
  },
  {
    "label": "LazyNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LazyNow(const LazyNow&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LazyNow&)",
    "insertText": "operator(const LazyNow&)"
  },
  {
    "label": "LazyNow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LazyNow(LazyNow&& move_from)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "Now()"
  },
  {
    "label": "has_value()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_value()"
  }
]