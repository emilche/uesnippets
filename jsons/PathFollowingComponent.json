[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "INavAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavAgentInterface"
  },
  {
    "label": "UNavigationComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FPathFollowingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFollowingResult"
  },
  {
    "label": "FPathFollowingRequestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFollowingRequestResult"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UPathFollowingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPathFollowingComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Engine / EngineTypes . h \" # include \" Components / ActorComponent . h \" # include \" EngineDefines . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" NavigationData . h \" # include \" AITypes . h \" # include \" AIResourceInterface . h \" # include \" GameFramework / NavMovementComponent . h \" # include \" AI / Navigation / PathFollowingAgentInterface . h \" # include \" PathFollowingComponent . generated . h \" class Error ; class FDebugDisplayInfo ; class INavLinkCustomInterface ; class UCanvas ; class ANavigationData ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPathFollowing, Warning, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (class UCanvas ; class AActor ; class INavLinkCustomInterface ; class INavAgentInterface ; class UNavigationComponent ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Success,Blocked,OffPath,Aborted,Skipped_DEPRECATED)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (} namespace FPathFollowingResultFlags { typedef uint16 Type ; const Type None = 0 ; const Type)",
    "insertText": "Success(1 << 0)"
  },
  {
    "label": "Blocked()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "Blocked(1 << 1)"
  },
  {
    "label": "OffPath()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "OffPath(1 << 2)"
  },
  {
    "label": "UserAbort()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "UserAbort(1 << 3)"
  },
  {
    "label": "OwnerFinished()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "OwnerFinished(1 << 4)"
  },
  {
    "label": "InvalidPath()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "InvalidPath(1 << 5)"
  },
  {
    "label": "MovementStop()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "MovementStop(1 << 6)"
  },
  {
    "label": "NewRequest()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "NewRequest(1 << 7)"
  },
  {
    "label": "ForcedScript()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "ForcedScript(1 << 8)"
  },
  {
    "label": "AlreadyAtGoal()",
    "kind": "Method",
    "detail": "Function (const Type)",
    "insertText": "AlreadyAtGoal(1 << 9)"
  },
  {
    "label": "UserAbortFlagMask()",
    "kind": "Method",
    "detail": "Function (const Type FirstGameplayFlagShift = 1 0 ; const Type)",
    "insertText": "UserAbortFlagMask(Success | Blocked | OffPath)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(uint16 Value)"
  },
  {
    "label": "FPathFollowingResult()",
    "kind": "Method",
    "detail": "Function (} struct FPathFollowingResult { FPathFollowingResultFlags::Type Flags ; TEnumAsByte<EPathFollowingResult::Type> Code ;)",
    "insertText": "FPathFollowingResult() : Flags(0), Code(EPathFollowingResult::Invalid)"
  },
  {
    "label": "FPathFollowingResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPathFollowingResult(FPathFollowingResultFlags::Type InFlags)"
  },
  {
    "label": "FPathFollowingResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPathFollowingResult(EPathFollowingResult::Type ResultCode, FPathFollowingResultFlags::Type ExtraFlags)"
  },
  {
    "label": "HasFlag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFlag(FPathFollowingResultFlags::Type Flag)"
  },
  {
    "label": "IsSuccess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSuccess()"
  },
  {
    "label": "IsFailure()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFailure()"
  },
  {
    "label": "IsInterrupted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInterrupted()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FPathFollowingRequestResult()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Failed,AlreadyAtGoal,RequestSuccessful } ; } struct FPathFollowingRequestResult { FAIRequestID MoveId ; TEnumAsByte<EPathFollowingRequestResult::Type> Code ;)",
    "insertText": "FPathFollowingRequestResult() : MoveId(FAIRequestID::InvalidRequest), Code(EPathFollowingRequestResult::Failed)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "Type()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_DELEGATE_TwoParams(FPostProcessMoveSignature, UPathFollowingComponent* , FVector&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FRequestCompletedSignature, EPathFollowingResult::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMoveCompletedSignature, FAIRequestID , EPathFollowingResult::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMoveComplete, FAIRequestID , const FPathFollowingResult&)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (FPostProcessMoveSignature PostProcessMove ; FMoveComplete OnRequestFinished ; void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "UpdateCachedComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedComponents()"
  },
  {
    "label": "RequestMove()",
    "kind": "Method",
    "detail": "Function (FAIRequestID)",
    "insertText": "RequestMove(const FAIMoveRequest& RequestData, FNavPathSharedPtr InPath)"
  },
  {
    "label": "AbortMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortMove(const UObject& Instigator, FPathFollowingResultFlags::Type AbortFlags, FAIRequestID RequestID = FAIRequestID::CurrentRequest, EPathFollowingVelocityMode VelocityMode = EPathFollowingVelocityMode::Reset)"
  },
  {
    "label": "RequestMoveWithImmediateFinish()",
    "kind": "Method",
    "detail": "Function (FAIRequestID)",
    "insertText": "RequestMoveWithImmediateFinish(EPathFollowingResult::Type Result, EPathFollowingVelocityMode VelocityMode = EPathFollowingVelocityMode::Reset)"
  },
  {
    "label": "PauseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseMove(FAIRequestID RequestID = FAIRequestID::CurrentRequest, EPathFollowingVelocityMode VelocityMode = EPathFollowingVelocityMode::Reset)"
  },
  {
    "label": "ResumeMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeMove(FAIRequestID RequestID = FAIRequestID::CurrentRequest)"
  },
  {
    "label": "OnPathFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathFinished(const FPathFollowingResult& Result)"
  },
  {
    "label": "OnPathFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathFinished(FPathFollowingResult(ResultCode, ExtraResultFlags))"
  },
  {
    "label": "OnSegmentFinished()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSegmentFinished()"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathUpdated()"
  },
  {
    "label": "SetNavMovementInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavMovementInterface(INavMovementInterface* NavMoveInterface)"
  },
  {
    "label": "GetMoveFocus()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMoveFocus(bool bAllowStrafe)"
  },
  {
    "label": "HasReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReached(const FVector& TestPoint, EPathFollowingReachMode ReachMode, float AcceptanceRadius = UPathFollowingComponent::DefaultAcceptanceRadius)"
  },
  {
    "label": "HasReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReached(const AActor& TestGoal, EPathFollowingReachMode ReachMode, float AcceptanceRadius = UPathFollowingComponent::DefaultAcceptanceRadius, bool bUseNavAgentGoalLocation = true)"
  },
  {
    "label": "HasReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReached(const FAIMoveRequest& MoveRequest)"
  },
  {
    "label": "SetBlockDetectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockDetectionState(bool bEnable)"
  },
  {
    "label": "IsBlockDetectionActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlockDetectionActive()"
  },
  {
    "label": "IsDecelerating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDecelerating()"
  },
  {
    "label": "SetPreciseReachThreshold()",
    "kind": "Method",
    "detail": "Function (bStopMovementOnFinish = bEnable ; } void)",
    "insertText": "SetPreciseReachThreshold(float AgentRadiusMultiplier, float AgentHalfHeightMultiplier)"
  },
  {
    "label": "SetLastMoveAtGoal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastMoveAtGoal(bool bFinishedAtGoal)"
  },
  {
    "label": "GetRemainingPathCost()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetRemainingPathCost()"
  },
  {
    "label": "GetCurrentNavLocation()",
    "kind": "Method",
    "detail": "Function (FNavLocation)",
    "insertText": "GetCurrentNavLocation()"
  },
  {
    "label": "HasPartialPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPartialPath()"
  },
  {
    "label": "DidMoveReachGoal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DidMoveReachGoal()"
  },
  {
    "label": "GetCurrentRequestId()",
    "kind": "Method",
    "detail": "Function (} FAIRequestID)",
    "insertText": "GetCurrentRequestId()"
  },
  {
    "label": "GetCurrentTargetLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetCurrentTargetLocation()"
  },
  {
    "label": "GetCurrentDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCurrentDirection()"
  },
  {
    "label": "GetCurrentMoveInput()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCurrentMoveInput()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (} const FNavPathSharedPtr)",
    "insertText": "GetPath()"
  },
  {
    "label": "HasDirectPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDirectPath()"
  },
  {
    "label": "GetStatusDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStatusDesc()"
  },
  {
    "label": "GetResultDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetResultDesc(EPathFollowingResult::Type Result)"
  },
  {
    "label": "SetDestinationActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDestinationActor(const AActor* InDestinationActor)"
  },
  {
    "label": "GetCurrentPathElement()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentPathElement()"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugString()"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "OnUnableToMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnableToMove(const UObject& Instigator)"
  },
  {
    "label": "OnStartedFalling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartedFalling()"
  },
  {
    "label": "OnLanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLanded()"
  },
  {
    "label": "IsPathFollowingAllowed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPathFollowingAllowed()"
  },
  {
    "label": "FinishUsingCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishUsingCustomLink(INavLinkCustomInterface* CustomNavLink)"
  },
  {
    "label": "OnPathfindingQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathfindingQuery(FPathFindingQuery& Query)"
  },
  {
    "label": "LockResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LockResource(EAIRequestPriority::Type LockSource)"
  },
  {
    "label": "ClearResourceLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResourceLock(EAIRequestPriority::Type LockSource)"
  },
  {
    "label": "ForceUnlockResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceUnlockResource()"
  },
  {
    "label": "IsResourceLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourceLocked()"
  },
  {
    "label": "OnPathEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathEvent(FNavigationPath* InPath, ENavPathEvent::Type Event)"
  },
  {
    "label": "LogPathHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogPathHelper(const AActor* LogOwner, FNavPathSharedPtr InLogPath, const AActor* LogGoalActor)"
  },
  {
    "label": "LogPathHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogPathHelper(const AActor* LogOwner, FNavigationPath* InLogPath, const AActor* LogGoalActor)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FNavPathSharedPtr Path ; FSharedConstNavQueryFilter NavigationFilter ; float MyDefaultAcceptanceRadius ; float AcceptanceRadius ; float CurrentAcceptanceRadius ; float MinAgentRadiusPct ; float MinAgentHalfHeightPct ; float WaitingTimeout ; FCustomMoveSharedPtr GameData ; TWeakObjectPtr<AActor> DestinationActor ; const INavAgentInterface* DestinationAgent ; FBasedPosition CurrentDestination ; FVector CurrentMoveInput ; FVector MoveOffset ; FVector LocationWhenPaused ; FVector OriginalMoveRequestGoalLocation ; double PathTimeWhenPaused ; int32 PreciseAcceptanceRadiusCheckStartNodeIndex ; TEnumAsByte<EPathFollowingStatus::Type> Status ; uint8 bReachTestIncludesAgentRadius : 1 ; uint8 bReachTestIncludesGoalRadius : 1 ; uint8 bMoveToGoalOnLastSegment : 1 ; uint8 bMoveToGoalClampedToNavigation : 1 ; uint8 bUseBlockDetection : 1 ; uint8 bCollidedWithGoal : 1 ; uint8 bLastMoveReachedGoal : 1 ; uint8 bStopMovementOnFinish : 1 ; uint8 bIsUsingMetaPath : 1 ; uint8 bWalkingNavLinkStart : 1 ; uint8 bIsDecelerating : 1 ; uint8 bMoveSegmentIsUsingCustomLinkReachCondition : 1 ; float BlockDetectionDistance ; float BlockDetectionInterval ; int32 BlockDetectionSampleCount ; double LastSampleTime ; int32 NextSampleIdx ; TArray<FBasedPosition> LocationSamples ; int32 MoveSegmentStartIndex ; int32 MoveSegmentEndIndex ; NavNodeRef MoveSegmentStartRef ; NavNodeRef MoveSegmentEndRef ; FVector MoveSegmentDirection ; float CachedBrakingDistance ; float CachedBrakingMaxSpeed ; int32 DecelerationSegmentIndex ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "OnNewPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewPawn(APawn* NewPawn)"
  },
  {
    "label": "ShouldCheckPathOnResume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCheckPathOnResume()"
  },
  {
    "label": "SetMoveSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveSegment(int32 SegmentStartIndex)"
  },
  {
    "label": "FollowPathSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FollowPathSegment(float DeltaTime)"
  },
  {
    "label": "UpdatePathSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePathSegment()"
  },
  {
    "label": "StartUsingCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartUsingCustomLink(INavLinkCustomInterface* CustomNavLink, const FVector& DestPoint)"
  },
  {
    "label": "UpdateBlockDetection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateBlockDetection()"
  },
  {
    "label": "UpdateDecelerationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecelerationData()"
  },
  {
    "label": "HasReachedDestination()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReachedDestination(const FVector& CurrentLocation)"
  },
  {
    "label": "HasReachedCurrentTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReachedCurrentTarget(const FVector& CurrentLocation)"
  },
  {
    "label": "HasReachedInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReachedInternal(const FVector& GoalLocation, float GoalRadius, float GoalHalfHeight, const FVector& AgentLocation, float RadiusThreshold, float AgentRadiusMultiplier)"
  },
  {
    "label": "ResetMoveSegmentCustomLinkCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMoveSegmentCustomLinkCache()"
  },
  {
    "label": "IsOnPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnPath()"
  },
  {
    "label": "IsBlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlocked()"
  },
  {
    "label": "SetMoveSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveSegment(GetNextPathIndex())"
  },
  {
    "label": "StoreRequestId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StoreRequestId()"
  },
  {
    "label": "GetNextRequestId()",
    "kind": "Method",
    "detail": "Function (CurrentRequestId =)",
    "insertText": "GetNextRequestId()"
  },
  {
    "label": "DetermineCurrentTargetPathPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DetermineCurrentTargetPathPoint(int32 StartIndex)"
  },
  {
    "label": "UpdateMovementComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateMovementComponent(bool bForce = false)"
  },
  {
    "label": "HandlePathUpdateEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePathUpdateEvent()"
  },
  {
    "label": "OnWaitingPathTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWaitingPathTimeout()"
  },
  {
    "label": "ResetBlockDetectionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBlockDetectionData()"
  },
  {
    "label": "ForceBlockDetectionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceBlockDetectionUpdate()"
  },
  {
    "label": "UpdateMoveFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMoveFocus()"
  },
  {
    "label": "ShouldStopMovementOnPathFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStopMovementOnPathFinished()"
  },
  {
    "label": "FindPreciseAcceptanceRadiusTestsStartNodeIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindPreciseAcceptanceRadiusTestsStartNodeIndex(const FNavigationPath& PathInstance, const FVector& GoalLocation)"
  },
  {
    "label": "GetFinalAcceptanceRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFinalAcceptanceRadius(const FNavigationPath& PathInstance, const FVector OriginalGoalLocation, const FVector* PathEndOverride = nullptr)"
  },
  {
    "label": "DebugReachTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugReachTest(float& CurrentDot, float& CurrentDistance, float& CurrentHeight, uint8& bDotFailed, uint8& bDistanceFailed, uint8& bHeightFailed)"
  },
  {
    "label": "OnNavigationInitDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationInitDone()"
  }
]