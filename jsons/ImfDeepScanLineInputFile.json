[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_HIDDEN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMF_HIDDEN"
  },
  {
    "label": "InputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputFile"
  },
  {
    "label": "MultiPartInputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiPartInputFile"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_DEEP_SCAN_LINE_INPUT_FILE_H # define INCLUDED_IMF_DEEP_SCAN_LINE_INPUT_FILE_H # include \" ImfForward . h \" # include \" ImfDeepScanLineOutputFile . h \" # include \" ImfGenericInputFile . h \" # include \" ImfThreading . h \" OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class IMF_EXPORT_TYPE DeepScanLineInputFile : public GenericInputFile { public : IMF_EXPORT)",
    "insertText": "DeepScanLineInputFile(const char fileName[], int numThreads = globalThreadCount ())"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "DeepScanLineInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int numThreads = globalThreadCount ())"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "DeepScanLineInputFile(const Header& header, OPENEXR_IMF_INTERNAL_NAMESPACE::IStream* is, int version, int numThreads = globalThreadCount ())"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepScanLineInputFile(const DeepScanLineInputFile& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeepScanLineInputFile&)",
    "insertText": "operator(const DeepScanLineInputFile& other)"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepScanLineInputFile(DeepScanLineInputFile&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeepScanLineInputFile&)",
    "insertText": "operator(DeepScanLineInputFile&& other)"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "DeepScanLineInputFile()"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "version()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const DeepFrameBuffer& frameBuffer)"
  },
  {
    "label": "frameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const DeepFrameBuffer&)",
    "insertText": "frameBuffer()"
  },
  {
    "label": "isComplete()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isComplete()"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(int scanLine1, int scanLine2)"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(int scanLine)"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(const char* rawPixelData, const DeepFrameBuffer& frameBuffer, int scanLine1, int scanLine2)"
  },
  {
    "label": "rawPixelData()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "rawPixelData(int firstScanLine, char* pixelData, uint64_t& pixelDataSize)"
  },
  {
    "label": "firstScanLineInChunk()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "firstScanLineInChunk(int y)"
  },
  {
    "label": "lastScanLineInChunk()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "lastScanLineInChunk(int y)"
  },
  {
    "label": "readPixelSampleCounts()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixelSampleCounts(int scanline1, int scanline2)"
  },
  {
    "label": "readPixelSampleCounts()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixelSampleCounts(int scanline)"
  },
  {
    "label": "readPixelSampleCounts()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixelSampleCounts(const char* rawdata, const DeepFrameBuffer& frameBuffer, int scanLine1, int scanLine2)"
  },
  {
    "label": "DeepScanLineInputFile()",
    "kind": "Method",
    "detail": "Function (struct IMF_HIDDEN Data ; private : Data* _data ;)",
    "insertText": "DeepScanLineInputFile(InputPartData* part)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const Header& header)"
  },
  {
    "label": "compatibilityInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compatibilityInitialize(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is)"
  },
  {
    "label": "multiPartInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "multiPartInitialize(InputPartData* part)"
  },
  {
    "label": "copyPixels()",
    "kind": "Method",
    "detail": "Function (class InputFile ; class MultiPartInputFile ; void)",
    "insertText": "copyPixels(DeepScanLineInputFile&)"
  }
]