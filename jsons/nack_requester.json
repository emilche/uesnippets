[
  {
    "label": "NackRequesterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackRequesterBase"
  },
  {
    "label": "NackPeriodicProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackPeriodicProcessor"
  },
  {
    "label": "ScopedNackPeriodicProcessorRegistration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedNackPeriodicProcessorRegistration"
  },
  {
    "label": "NackRequester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackRequester"
  },
  {
    "label": "NackFilterOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NackFilterOptions"
  },
  {
    "label": "NackInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NackInfo"
  },
  {
    "label": "NackRequesterBase()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_NACK_REQUESTER_H_ # define MODULES_VIDEO_CODING_NACK_REQUESTER_H_ # include<stdint . h> # include<map> # include<set> # include<vector> # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / include / module_common_types . h \" # include \" modules / video_coding / histogram . h \" # include \" rtc_base / numerics / sequence_number_util . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class NackRequesterBase { public : ~)",
    "insertText": "NackRequesterBase()"
  },
  {
    "label": "ProcessNacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessNacks()"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (} ; class NackPeriodicProcessor { public : TimeDelta kUpdateInterval =)",
    "insertText": "Millis(20)"
  },
  {
    "label": "NackPeriodicProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NackPeriodicProcessor(TimeDelta update_interval = kUpdateInterval)"
  },
  {
    "label": "NackPeriodicProcessor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NackPeriodicProcessor()"
  },
  {
    "label": "RegisterNackModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNackModule(NackRequesterBase* module)"
  },
  {
    "label": "UnregisterNackModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNackModule(NackRequesterBase* module)"
  },
  {
    "label": "ProcessNackModules()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessNackModules() RTC_RUN_ON(sequence_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const TimeDelta update_interval_ ; RepeatingTaskHandle repeating_task_)",
    "insertText": "RTC_GUARDED_BY(sequence_)"
  },
  {
    "label": "ScopedNackPeriodicProcessorRegistration()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker sequence_ ; } ; class ScopedNackPeriodicProcessorRegistration { public :)",
    "insertText": "ScopedNackPeriodicProcessorRegistration(NackRequesterBase* module, NackPeriodicProcessor* processor)"
  },
  {
    "label": "ScopedNackPeriodicProcessorRegistration()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedNackPeriodicProcessorRegistration()"
  },
  {
    "label": "NackRequester()",
    "kind": "Method",
    "detail": "Function (private : NackRequesterBase* const module_ ; NackPeriodicProcessor* const processor_ ; } ; class NackRequester final : public NackRequesterBase { public :)",
    "insertText": "NackRequester(TaskQueueBase* current_queue, NackPeriodicProcessor* periodic_processor, Clock* clock, NackSender* nack_sender, KeyFrameRequestSender* keyframe_request_sender, const FieldTrialsView& field_trials)"
  },
  {
    "label": "NackRequester()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NackRequester()"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OnReceivedPacket(uint16_t seq_num, bool is_keyframe)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OnReceivedPacket(uint16_t seq_num, bool is_keyframe, bool is_recovered)"
  },
  {
    "label": "ClearUpTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUpTo(uint16_t seq_num)"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(int64_t rtt_ms)"
  },
  {
    "label": "NackInfo()",
    "kind": "Method",
    "detail": "Function (private : enum NackFilterOptions { kSeqNumOnly,kTimeOnly,kSeqNumAndTime } ; struct NackInfo {)",
    "insertText": "NackInfo()"
  },
  {
    "label": "NackInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NackInfo(uint16_t seq_num, uint16_t send_at_seq_num, Timestamp created_at_time)"
  },
  {
    "label": "AddPacketsToNack()",
    "kind": "Method",
    "detail": "Function (uint16_t seq_num ; uint16_t send_at_seq_num ; Timestamp created_at_time ; Timestamp sent_at_time ; int retries ; } ; void)",
    "insertText": "AddPacketsToNack(uint16_t seq_num_start, uint16_t seq_num_end) RTC_EXCLUSIVE_LOCKS_REQUIRED(worker_thread_)"
  },
  {
    "label": "RemovePacketsUntilKeyFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePacketsUntilKeyFrame() RTC_EXCLUSIVE_LOCKS_REQUIRED(worker_thread_)"
  },
  {
    "label": "GetNackBatch()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "GetNackBatch(NackFilterOptions options) RTC_EXCLUSIVE_LOCKS_REQUIRED(worker_thread_)"
  },
  {
    "label": "UpdateReorderingStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReorderingStatistics(uint16_t seq_num) RTC_EXCLUSIVE_LOCKS_REQUIRED(worker_thread_)"
  },
  {
    "label": "WaitNumberOfPackets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WaitNumberOfPackets(float probability) const RTC_EXCLUSIVE_LOCKS_REQUIRED(worker_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase* const worker_thread_ ; Clock* const clock_ ; NackSender* const nack_sender_ ; KeyFrameRequestSender* const keyframe_request_sender_ ; std::map<uint16_t,NackInfo,DescendingSeqNumComp<uint16_t>> nack_list_)",
    "insertText": "RTC_GUARDED_BY(worker_thread_)"
  }
]