[
  {
    "label": "DelayManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayManager"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_ # define MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_ # include<string . h> # include<deque> # include<memory> # include \" absl / types / optional . h \" # include \" api / neteq / tick_timer . h \" # include \" modules / audio_coding / neteq / histogram . h \" # include \" modules / audio_coding / neteq / reorder_optimizer . h \" # include \" modules / audio_coding / neteq / underrun_optimizer . h \" namespace webrtc { class DelayManager { public : struct Config {)",
    "insertText": "Config()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log()"
  },
  {
    "label": "DelayManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelayManager()"
  },
  {
    "label": "DelayManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayManager(const DelayManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayManager&)",
    "insertText": "operator(const DelayManager&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(int arrival_delay_ms, bool reordered)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "TargetDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TargetDelayMs()"
  },
  {
    "label": "UnlimitedTargetLevelMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "UnlimitedTargetLevelMs()"
  },
  {
    "label": "SetPacketAudioLength()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetPacketAudioLength(int length_ms)"
  },
  {
    "label": "SetMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMinimumDelay(int delay_ms)"
  },
  {
    "label": "SetMaximumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMaximumDelay(int delay_ms)"
  },
  {
    "label": "SetBaseMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumDelay(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumDelay()"
  },
  {
    "label": "effective_minimum_delay_ms_for_test()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "effective_minimum_delay_ms_for_test()"
  },
  {
    "label": "UpdateEffectiveMinimumDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEffectiveMinimumDelay()"
  },
  {
    "label": "IsValidMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidMinimumDelay(int delay_ms)"
  },
  {
    "label": "IsValidBaseMinimumDelay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidBaseMinimumDelay(int delay_ms)"
  }
]