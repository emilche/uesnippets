[
  {
    "label": "FConvexOptimizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexOptimizer"
  },
  {
    "label": "ClusterId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClusterId"
  },
  {
    "label": "TConnectivityEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConnectivityEdge"
  },
  {
    "label": "FRigidClusteredFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidClusteredFlags"
  },
  {
    "label": "FFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlags"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPBDRigidClusteredParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidClusteredParticles"
  },
  {
    "label": "ClusterId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / PBDRigidParticles . h \" # include \" Chaos / ImplicitObjectUnion . h \" # include \" Templates / PimplPtr . h \" namespace Chaos { namespace Private { class FConvexOptimizer ; } struct ClusterId {)",
    "insertText": "ClusterId() : Id(nullptr) , NumChildren(0)"
  },
  {
    "label": "ClusterId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClusterId(FPBDRigidParticleHandle* NewId, int NumChildrenIn) : Id(NewId) , NumChildren(NumChildrenIn)"
  },
  {
    "label": "TConnectivityEdge()",
    "kind": "Method",
    "detail": "Function (} FPBDRigidParticleHandle* Id ; int32 NumChildren ; } ; template<T> struct TConnectivityEdge {)",
    "insertText": "TConnectivityEdge() : Sibling(nullptr) , Strain(0.0)"
  },
  {
    "label": "TConnectivityEdge()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConnectivityEdge(TPBDRigidParticleHandle<T, 3>* InSibling, const FRealSingle InStrain) : Sibling(InSibling) , Strain(InStrain)"
  },
  {
    "label": "TConnectivityEdge()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConnectivityEdge(const TConnectivityEdge& Other) : Sibling(Other.Sibling) , Strain(Other.Strain)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TPBDRigidParticleHandle<T, 3>* OtherSibling)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (Strain = Area ; } Chaos::FRealSingle)",
    "insertText": "GetArea()"
  },
  {
    "label": "CastToClustered()",
    "kind": "Method",
    "detail": "Function (const TPBDRigidClusteredParticleHandle<T,3>* SiblingParticle = Edge . Sibling ->)",
    "insertText": "CastToClustered()"
  },
  {
    "label": "FRigidClusteredFlags()",
    "kind": "Method",
    "detail": "Function (} class FRigidClusteredFlags { public : using FStorage = uint8 ;)",
    "insertText": "FRigidClusteredFlags() : Bits(0)"
  },
  {
    "label": "GetInternalCluster()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInternalCluster()"
  },
  {
    "label": "GetAnchored()",
    "kind": "Method",
    "detail": "Function (Flags . bInternalCluster = bSet ; } bool)",
    "insertText": "GetAnchored()"
  },
  {
    "label": "GetUnbreakable()",
    "kind": "Method",
    "detail": "Function (Flags . bAnchored = bSet ; } bool)",
    "insertText": "GetUnbreakable()"
  },
  {
    "label": "GetChildToParentLocked()",
    "kind": "Method",
    "detail": "Function (Flags . bUnbreakable = bSet ; } bool)",
    "insertText": "GetChildToParentLocked()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Flags . bChildToParentLocked = bSet ; } private : struct FFlags { FStorage bInternalCluster : 1 ; FStorage bAnchored : 1 ; FStorage bUnbreakable : 1 ; FStorage bChildToParentLocked : 1 ; } ; union { FFlags Flags ; FStorage Bits ; } ;)",
    "insertText": "static_assert(sizeof(FFlags) <= sizeof(FStorage))"
  },
  {
    "label": "TPBDRigidClusteredParticles()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,int d> class TPBDRigidClusteredParticles : public TPBDRigidParticles<T,d> { public :)",
    "insertText": "TPBDRigidClusteredParticles() : TPBDRigidParticles<T, d>()"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHelper()"
  },
  {
    "label": "TPBDRigidClusteredParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPBDRigidClusteredParticles(const TPBDRigidParticles<T, d>& Other)"
  },
  {
    "label": "TPBDRigidClusteredParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPBDRigidClusteredParticles(TPBDRigidParticles<T, d>&& Other) : TPBDRigidParticles<T, d>(MoveTemp(Other)) , MClusterIds(MoveTemp(Other.MClusterIds)) , MChildToParent(MoveTemp(Other.MChildToParent)) , MClusterGroupIndex(MoveTemp(Other.MClusterGroupIndex)) , MChildrenSpatial(MoveTemp(Other.MChildrenSpatial)) , MPhysicsProxies(MoveTemp(Other.MPhysicsProxies)) , MCollisionImpulses(MoveTemp(Other.MCollisionImpulses)) , MStrains(MoveTemp(Other.MStrains)) , MConnectivityEdges(MoveTemp(Other.MConnectivityEdges)) , MExternalStrains(MoveTemp(Other.MExternalStrains)) , MRigidClusteredFlags(MoveTemp(Other.MRigidClusteredFlags)) , MConvexOptimizers(MoveTemp(Other.MConvexOptimizers))"
  },
  {
    "label": "TPBDRigidClusteredParticles()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TPBDRigidClusteredParticles()"
  },
  {
    "label": "ClusterIds()",
    "kind": "Method",
    "detail": "Function (} const auto&)",
    "insertText": "ClusterIds(int32 Idx)"
  },
  {
    "label": "DummyPtr()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FImplicitObjectUnionClustered>)",
    "insertText": "DummyPtr(nullptr)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (} THandleType*)",
    "insertText": "Handle(int32 Index)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (this -> MParticleType = EParticleType::Clustered ;)",
    "insertText": "AddArray(&MClusterIds)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MChildToParent)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MClusterGroupIndex)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MChildrenSpatial)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MPhysicsProxies)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MCollisionImpulses)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MStrains)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MConnectivityEdges)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MExternalStrains)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MRigidClusteredFlags)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MConvexOptimizers)"
  }
]