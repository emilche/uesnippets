[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "RateLimiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateLimiter"
  },
  {
    "label": "RateLimiter()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_RATE_LIMITER_H_ # define RTC_BASE_RATE_LIMITER_H_ # include<stddef . h> # include<stdint . h> # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; class RateLimiter { public :)",
    "insertText": "RateLimiter(Clock* clock, int64_t max_window_ms)"
  },
  {
    "label": "RateLimiter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateLimiter()"
  },
  {
    "label": "RateLimiter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateLimiter(const RateLimiter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RateLimiter&)",
    "insertText": "operator(const RateLimiter&)"
  },
  {
    "label": "TryUseRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryUseRate(size_t packet_size_bytes)"
  },
  {
    "label": "SetMaxRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxRate(uint32_t max_rate_bps)"
  },
  {
    "label": "SetWindowSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWindowSize(int64_t window_size_ms)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Clock* const clock_ ; Mutex lock_ ; RateStatistics current_rate_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]