[
  {
    "label": "GenericValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericValue"
  },
  {
    "label": "GenericDocument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericDocument"
  },
  {
    "label": "GenericMember",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericMember"
  },
  {
    "label": "GenericMemberIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericMemberIterator"
  },
  {
    "label": "GenericStringRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenericStringRef"
  },
  {
    "label": "IsGenericValueImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsGenericValueImpl"
  },
  {
    "label": "IsGenericValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsGenericValue"
  },
  {
    "label": "TypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeHelper"
  },
  {
    "label": "GenericArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericArray"
  },
  {
    "label": "GenericObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericObject"
  },
  {
    "label": "Flag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Flag"
  },
  {
    "label": "String",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "String"
  },
  {
    "label": "ShortString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShortString"
  },
  {
    "label": "I",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "I"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "U"
  },
  {
    "label": "ObjectData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObjectData"
  },
  {
    "label": "ArrayData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayData"
  },
  {
    "label": "MapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MapTraits"
  },
  {
    "label": "Less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Less"
  },
  {
    "label": "ClearStackOnExit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClearStackOnExit"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_DOCUMENT_H_ # define RAPIDJSON_DOCUMENT_H_ # include \" reader . h \" # include \" internal / meta . h \" # include \" internal / strfunc . h \" # include \" memorystream . h \" # include \" encodedstream . h \" # include<new> # include<limits> # ifdef __cpp_lib_three_way_comparison # include<compare> # endif RAPIDJSON_DIAG_PUSH # ifdef __clang__)",
    "insertText": "RAPIDJSON_DIAG_OFF(padded) RAPIDJSON_DIAG_OFF(switch-enum) RAPIDJSON_DIAG_OFF(c++98-compat) #elif defined(_MSC_VER) RAPIDJSON_DIAG_OFF(4127) RAPIDJSON_DIAG_OFF(4244) #endif #ifdef __GNUC__ RAPIDJSON_DIAG_OFF(effc++) #endif #ifdef GetObject #pragma push_macro(\"GetObject\")"
  },
  {
    "label": "GenericMember()",
    "kind": "Method",
    "detail": "Function (template<Encoding,Allocator,StackAllocator> class GenericDocument ; # ifndef RAPIDJSON_DEFAULT_ALLOCATOR # define RAPIDJSON_DEFAULT_ALLOCATOR::RAPIDJSON_NAMESPACE::MemoryPoolAllocator<::RAPIDJSON_NAMESPACE::CrtAllocator> # endif # ifndef RAPIDJSON_DEFAULT_STACK_ALLOCATOR # define RAPIDJSON_DEFAULT_STACK_ALLOCATOR::RAPIDJSON_NAMESPACE::CrtAllocator # endif # ifndef RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY # define RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY 1 6 # endif # ifndef RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY # define RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY 1 6 # endif template<Encoding,Allocator> class GenericMember { public : GenericValue<Encoding,Allocator> name ; GenericValue<Encoding,Allocator> value ; # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "GenericMember(GenericMember&& rhs) RAPIDJSON_NOEXCEPT : name(std::move(rhs.name)), value(std::move(rhs.value))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericMember&)",
    "insertText": "operator(GenericMember&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif GenericMember&)",
    "insertText": "operator(GenericMember& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (name = rhs . name ; value = rhs . value ; } return* this ; } void)",
    "insertText": "swap(GenericMember& a, GenericMember& b)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (a . name .)",
    "insertText": "Swap(b.name)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (a . value .)",
    "insertText": "Swap(b.value)"
  },
  {
    "label": "GenericMember()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "GenericMember(const GenericMember& rhs)"
  },
  {
    "label": "GenericMemberIterator()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef RAPIDJSON_NOMEMBERITERATORCLASS template<bool Const,Encoding,Allocator> class GenericMemberIterator { class GenericValue<Encoding,Allocator> ; template<bool,,> class GenericMemberIterator ; typedef GenericMember<Encoding,Allocator> PlainType ; typedef internal::MaybeAddConst<Const,PlainType>::Type ValueType ; public : typedef GenericMemberIterator Iterator ; typedef GenericMemberIterator<true,Encoding,Allocator> ConstIterator ; typedef GenericMemberIterator<false,Encoding,Allocator> NonConstIterator ; typedef ValueType value_type ; typedef ValueType* pointer ; typedef ValueType& reference ; typedef std::ptrdiff_t difference_type ; typedef std::random_access_iterator_tag iterator_category ; typedef pointer Pointer ; typedef reference Reference ; typedef difference_type DifferenceType ;)",
    "insertText": "GenericMemberIterator() : ptr_()"
  },
  {
    "label": "GenericMemberIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericMemberIterator(const NonConstIterator & it) : ptr_(it.ptr_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Iterator&)",
    "insertText": "operator(const NonConstIterator & it)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ptr_ = it . ptr_ ; return* this ; } Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - ptr_ ; return* this ; } Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "old()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "old(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - ptr_ ; return old ; } Iterator)",
    "insertText": "operator(DifferenceType n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ptr_ - = n ; return* this ; } template<bool Const_> bool)",
    "insertText": "operator(const GenericMemberIterator<Const_, Encoding, Allocator>& that)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} Pointer ptr_ ; } ; # else template<bool Const,Encoding,Allocator> class GenericMemberIterator ; template<Encoding,Allocator> class GenericMemberIterator<false,Encoding,Allocator> { public : typedef GenericMember<Encoding,Allocator>* Iterator ; } ; template<Encoding,Allocator> class GenericMemberIterator<true,Encoding,Allocator> { public : typedef const GenericMember<Encoding,Allocator>* Iterator ; } ; # endif # if RAPIDJSON_SYMBOL_VISIBILITY_OVERRIDE # pragma GCC visibility)",
    "insertText": "push(default)"
  },
  {
    "label": "GenericStringRef()",
    "kind": "Method",
    "detail": "Function (typedef CharType Ch ; # ifndef __clang__ # endif template<SizeType N>)",
    "insertText": "GenericStringRef(const CharType (&str)[N]) RAPIDJSON_NOEXCEPT : s(str), length(N-1)"
  },
  {
    "label": "GenericStringRef()",
    "kind": "Method",
    "detail": "Function (} # ifndef __clang__ # endif)",
    "insertText": "GenericStringRef(const CharType* str) : s(str), length(NotNullStrLen(str))"
  },
  {
    "label": "GenericStringRef()",
    "kind": "Method",
    "detail": "Function (} # ifndef __clang__ # endif)",
    "insertText": "GenericStringRef(const CharType* str, SizeType len) : s(RAPIDJSON_LIKELY(str) ? str : emptyString), length(len)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(str != 0 || len == 0u)"
  },
  {
    "label": "GenericStringRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericStringRef(const GenericStringRef& rhs) : s(rhs.s), length(rhs.length)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "Ch()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(str != 0)"
  },
  {
    "label": "GenericStringRef()",
    "kind": "Method",
    "detail": "Function (} const Ch emptyString [ ] ; template<SizeType N>)",
    "insertText": "GenericStringRef(CharType (&str)[N])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GenericStringRef&)",
    "insertText": "operator(const GenericStringRef& rhs)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (} ; # if RAPIDJSON_SYMBOL_VISIBILITY_OVERRIDE # pragma GCC visibility pop # endif template<CharType> const CharType GenericStringRef<CharType>::emptyString [ ] = {)",
    "insertText": "CharType()"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (template<CharType> GenericStringRef<CharType>)",
    "insertText": "StringRef(const CharType* str)"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (} template<CharType> GenericStringRef<CharType>)",
    "insertText": "StringRef(const CharType* str, size_t length)"
  },
  {
    "label": "StringRef()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<CharType> GenericStringRef<CharType>)",
    "insertText": "StringRef(const std::basic_string<CharType>& str)"
  },
  {
    "label": "Is()",
    "kind": "Method",
    "detail": "Function (} # endif namespace internal { template<T,Encoding = void,Allocator = void> struct IsGenericValueImpl : FalseType { } ; template<T> struct IsGenericValueImpl<T,Void<T::EncodingType>::Type,Void<T::AllocatorType>::Type> : IsBaseOf<GenericValue<T::EncodingType,T::AllocatorType>,T>::Type { } ; template<T> struct IsGenericValue : IsGenericValueImpl<T>::Type { } ; } namespace internal { template<ValueType,T> struct TypeHelper { } ; template<ValueType> struct TypeHelper<ValueType,bool> { bool)",
    "insertText": "Is(const ValueType& v)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Get(const ValueType& v)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, bool data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, bool data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, int data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, int data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, unsigned data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, unsigned data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef _MSC_VER)",
    "insertText": "RAPIDJSON_STATIC_ASSERT(sizeof(long) == sizeof(int))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, long data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, long data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "RAPIDJSON_STATIC_ASSERT(sizeof(unsigned long) == sizeof(unsigned))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, unsigned long data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, unsigned long data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, int64_t data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, int64_t data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, uint64_t data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, uint64_t data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, double data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, double data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, float data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, float data, typename ValueType::AllocatorType&)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, const StringType data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, const StringType data, typename ValueType::AllocatorType& a)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, const StringType& data, typename ValueType::AllocatorType& a)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ArrayType)",
    "insertText": "Get(ValueType& v)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, ArrayType data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "Set(ValueType& v, ObjectType data)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (} } ; } template<bool,> class GenericArray ; template<bool,> class GenericObject ; template<Encoding,Allocator = RAPIDJSON_DEFAULT_ALLOCATOR> class GenericValue { public : typedef GenericMember<Encoding,Allocator> Member ; typedef Encoding EncodingType ; typedef Allocator AllocatorType ; typedef Encoding::Ch Ch ; typedef GenericStringRef<Ch> StringRefType ; typedef GenericMemberIterator<false,Encoding,Allocator>::Iterator MemberIterator ; typedef GenericMemberIterator<true,Encoding,Allocator>::Iterator ConstMemberIterator ; typedef GenericValue* ValueIterator ; typedef const GenericValue* ConstValueIterator ; typedef GenericValue<Encoding,Allocator> ValueType ; typedef GenericArray<false,ValueType> Array ; typedef GenericArray<true,ValueType> ConstArray ; typedef GenericObject<false,ValueType> Object ; typedef GenericObject<true,ValueType> ConstObject ;)",
    "insertText": "GenericValue() RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kNullFlag ; } # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "GenericValue(GenericValue&& rhs) RAPIDJSON_NOEXCEPT : data_(rhs.data_)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (rhs . data_ . f . flags = kNullFlag ; } # endif private :)",
    "insertText": "GenericValue(const GenericValue& rhs)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_HAS_CXX11_RVALUE_REFS template<StackAllocator>)",
    "insertText": "GenericValue(GenericDocument<Encoding,Allocator,StackAllocator>&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<StackAllocator> GenericValue&)",
    "insertText": "operator(GenericDocument<Encoding,Allocator,StackAllocator>&& rhs)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "GenericValue(Type type) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "RAPIDJSON_NOEXCEPT_ASSERT()",
    "kind": "Method",
    "detail": "Function (const uint16_t defaultFlags [ ] = { kNullFlag,kFalseFlag,kTrueFlag,kObjectFlag,kArrayFlag,kShortStringFlag,kNumberAnyFlag } ;)",
    "insertText": "RAPIDJSON_NOEXCEPT_ASSERT(type >= kNullType && type <= kNumberType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = defaultFlags [ type ] ;)",
    "insertText": "if(type == kStringType) data_.ss.SetLength(0)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (} template<SourceAllocator>)",
    "insertText": "GenericValue(const GenericValue<Encoding,SourceAllocator>& rhs, Allocator& allocator, bool copyConstStrings = false)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (break ; case kArrayType : { SizeType count = rhs . data_ . a . size ; GenericValue* le = reinterpret_cast<)",
    "insertText": "GenericValue(allocator.Malloc(count * sizeof(GenericValue)))"
  },
  {
    "label": "GetElementsPointer()",
    "kind": "Method",
    "detail": "Function (const GenericValue<Encoding,SourceAllocator>* re = rhs .)",
    "insertText": "GetElementsPointer()"
  },
  {
    "label": "SetElementsPointer()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kArrayFlag ; data_ . a . size = data_ . a . capacity = count ;)",
    "insertText": "SetElementsPointer(le)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case kStringType :)",
    "insertText": "if(rhs.data_.f.flags == kConstStringFlag && !copyConstStrings)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = rhs . data_ . f . flags ; data_ =* reinterpret_cast<const)",
    "insertText": "Data(&rhs.data_)"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "SetStringRaw(StringRef(rhs.GetString(), rhs.GetStringLength()), allocator)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (break ; } } # ifndef RAPIDJSON_DOXYGEN_RUNNING template<T>)",
    "insertText": "GenericValue(T b, RAPIDJSON_ENABLEIF((internal::IsSame<bool, T>))) RAPIDJSON_NOEXCEPT #else explicit GenericValue(bool b) RAPIDJSON_NOEXCEPT #endif : data_()"
  },
  {
    "label": "RAPIDJSON_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_STATIC_ASSERT((internal::IsSame<bool,T>::Value))"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = b ? kTrueFlag : kFalseFlag ; })",
    "insertText": "GenericValue(int i) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (data_ . n . i64 = i ; data_ . f .)",
    "insertText": "flags(i >= 0) ? (kNumberIntFlag | kUintFlag | kUint64Flag)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(unsigned u) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (data_ . n . u64 = u ; data_ . f .)",
    "insertText": "flags(u & 0x80000000) ? kNumberUintFlag : (kNumberUintFlag | kIntFlag | kInt64Flag)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(int64_t i64) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data_ . n . i64 = i64 ; data_ . f . flags = kNumberInt64Flag ;)",
    "insertText": "if(i64 >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags | = kNumberUint64Flag ;)",
    "insertText": "if(!(static_cast<uint64_t>(i64) & RAPIDJSON_UINT64_C2(0xFFFFFFFF, 0x00000000)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(i64 >= static_cast<int64_t>(RAPIDJSON_UINT64_C2(0xFFFFFFFF, 0x80000000)))"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(uint64_t u64) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data_ . n . u64 = u64 ; data_ . f . flags = kNumberUint64Flag ;)",
    "insertText": "if(!(u64 & RAPIDJSON_UINT64_C2(0x80000000, 0x00000000)))"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(double d) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (data_ . n . d = d ; data_ . f . flags = kNumberDoubleFlag ; })",
    "insertText": "GenericValue(float f) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (data_ . n . d = static_cast<)",
    "insertText": "double(f)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kNumberDoubleFlag ; })",
    "insertText": "GenericValue(const Ch* s, SizeType length) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringRaw(StringRef(s, length))"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(StringRefType s) RAPIDJSON_NOEXCEPT : data_()"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringRaw(s)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(const Ch* s, SizeType length, Allocator& allocator) : data_()"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringRaw(StringRef(s, length), allocator)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericValue(const Ch*s, Allocator& allocator) : data_()"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringRaw(StringRef(s), allocator)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING)",
    "insertText": "GenericValue(const std::basic_string<Ch>& s, Allocator& allocator) : data_()"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "GenericValue(Array a) RAPIDJSON_NOEXCEPT : data_(a.value_.data_)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (a . value_ . data_ =)",
    "insertText": "Data()"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (a . value_ . data_ . f . flags = kArrayFlag ; })",
    "insertText": "GenericValue(Object o) RAPIDJSON_NOEXCEPT : data_(o.value_.data_)"
  },
  {
    "label": "GenericValue()",
    "kind": "Method",
    "detail": "Function (o . value_ . data_ . f . flags = kObjectFlag ; } ~)",
    "insertText": "GenericValue()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(e)"
  },
  {
    "label": "DoFreeMembers()",
    "kind": "Method",
    "detail": "Function (} } break ; case kObjectFlag :)",
    "insertText": "DoFreeMembers()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case kCopyStringFlag :)",
    "insertText": "if(Allocator::kNeedFree)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(const_cast<Ch*>(GetStringPointer()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} break ; default : break ; } } } GenericValue&)",
    "insertText": "operator(GenericValue& rhs)"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (GenericValue temp ; temp .)",
    "insertText": "RawAssign(rhs)"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawAssign(temp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } # if RAPIDJSON_HAS_CXX11_RVALUE_REFS GenericValue&)",
    "insertText": "operator(GenericValue&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif GenericValue&)",
    "insertText": "operator(StringRefType str)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (GenericValue)",
    "insertText": "s(str)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (GenericValue)",
    "insertText": "v(value)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(static_cast<void*>(this) != static_cast<void const*>(&rhs))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(rhs, allocator, copyConstStrings)"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (GenericValue temp ; temp .)",
    "insertText": "RawAssign(*this)"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawAssign(other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "Swap(b)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "Move()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef GenericValue<Encoding,SourceAllocator> RhsType ;)",
    "insertText": "if(GetType() != rhs.GetType())"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (RhsType::ConstMemberIterator rhsMemberItr = rhs .)",
    "insertText": "FindMember(lhsMemberItr->name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; case kArrayType :)",
    "insertText": "if(data_.a.size != rhs.data_.a.size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "operator(const std::basic_string<Ch>& rhs)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>,internal::IsGenericValue<T> >), (bool)) operator==(const T& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifndef __cpp_impl_three_way_comparison template<SourceAllocator> bool)",
    "insertText": "operator(const GenericValue<Encoding, SourceAllocator>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Ch* rhs)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator!=(const T& rhs)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::IsGenericValue<T>), (bool)) operator==(const T& lhs, const GenericValue& rhs)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} # endif Type)",
    "insertText": "GetType()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObject()"
  },
  {
    "label": "IsInt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInt()"
  },
  {
    "label": "IsUint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUint()"
  },
  {
    "label": "IsInt64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInt64()"
  },
  {
    "label": "IsUint64()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUint64()"
  },
  {
    "label": "IsDouble()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDouble()"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsString()"
  },
  {
    "label": "IsLosslessDouble()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLosslessDouble()"
  },
  {
    "label": "GetUint64()",
    "kind": "Method",
    "detail": "Function (uint64_t u =)",
    "insertText": "GetUint64()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (volatile double d = static_cast<)",
    "insertText": "double(u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsInt64())"
  },
  {
    "label": "GetInt64()",
    "kind": "Method",
    "detail": "Function (int64_t i =)",
    "insertText": "GetInt64()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (volatile double d = static_cast<)",
    "insertText": "double(i)"
  },
  {
    "label": "IsFloat()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "IsFloat()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsBool())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(b)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(kObjectType)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsObject())"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (GenericValue)",
    "insertText": "n(StringRef(name))"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::NotExpr<internal::IsSame<typename internal::RemoveConst<T>::Type, Ch> >),(const GenericValue&)) operator[](T* name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<SourceAllocator> GenericValue&)",
    "insertText": "operator(const GenericValue<Encoding, SourceAllocator>& name)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (MemberIterator member =)",
    "insertText": "FindMember(name)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_HAS_CXX11)",
    "insertText": "alignas(GenericValue) thread_local static char buffer[sizeof(GenericValue)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && _MSC_VER < 1900 __declspec(thread) static char buffer[sizeof(GenericValue)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__GNUC__) || defined(__clang__)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING GenericValue&)",
    "insertText": "operator(const std::basic_string<Ch>& name)"
  },
  {
    "label": "MemberBegin()",
    "kind": "Method",
    "detail": "Function (} # endif ConstMemberIterator)",
    "insertText": "MemberBegin()"
  },
  {
    "label": "MemberEnd()",
    "kind": "Method",
    "detail": "Function (} ConstMemberIterator)",
    "insertText": "MemberEnd()"
  },
  {
    "label": "MemberReserve()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "MemberReserve(SizeType newCapacity, Allocator &allocator)"
  },
  {
    "label": "HasMember()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "HasMember(const std::basic_string<Ch>& name)"
  },
  {
    "label": "HasMember()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceAllocator> bool)",
    "insertText": "HasMember(const GenericValue<Encoding, SourceAllocator>& name)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (} MemberIterator)",
    "insertText": "FindMember(const Ch* name)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (} template<SourceAllocator> MemberIterator)",
    "insertText": "FindMember(const GenericValue<Encoding, SourceAllocator>& name)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(name.IsString())"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING MemberIterator)",
    "insertText": "FindMember(const std::basic_string<Ch>& name)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} # endif GenericValue&)",
    "insertText": "AddMember(GenericValue& name, GenericValue& value, Allocator& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING GenericValue&)",
    "insertText": "AddMember(GenericValue& name, std::basic_string<Ch>& value, Allocator& allocator)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (GenericValue)",
    "insertText": "v(value, allocator)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} # endif template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (GenericValue&)) AddMember(GenericValue& name, T value, Allocator& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS GenericValue&)",
    "insertText": "AddMember(GenericValue&& name, GenericValue&& value, Allocator& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "AddMember(GenericValue&& name, GenericValue& value, Allocator& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "AddMember(GenericValue& name, GenericValue&& value, Allocator& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "AddMember(StringRefType name, GenericValue&& value, Allocator& allocator)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (GenericValue)",
    "insertText": "n(name)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} # endif GenericValue&)",
    "insertText": "AddMember(StringRefType name, GenericValue& value, Allocator& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "AddMember(StringRefType name, StringRefType value, Allocator& allocator)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (GenericValue&)) AddMember(StringRefType name, T value, Allocator& allocator)"
  },
  {
    "label": "RemoveAllMembers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllMembers()"
  },
  {
    "label": "RemoveMember()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveMember(const Ch* name)"
  },
  {
    "label": "RemoveMember()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "RemoveMember(const std::basic_string<Ch>& name)"
  },
  {
    "label": "RemoveMember()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceAllocator> bool)",
    "insertText": "RemoveMember(const GenericValue<Encoding, SourceAllocator>& name)"
  },
  {
    "label": "RemoveMember()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMember(m)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(data_.o.size > 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(GetMembersPointer() != 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(m >= MemberBegin() && m < MemberEnd())"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (} MemberIterator)",
    "insertText": "EraseMember(ConstMemberIterator pos)"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (} MemberIterator)",
    "insertText": "EraseMember(ConstMemberIterator first, ConstMemberIterator last)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(first >= MemberBegin())"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(first <= last)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(last <= MemberEnd())"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EraseMember(const Ch* name)"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING bool)",
    "insertText": "EraseMember(const std::basic_string<Ch>& name)"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceAllocator> bool)",
    "insertText": "EraseMember(const GenericValue<Encoding, SourceAllocator>& name)"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseMember(m)"
  },
  {
    "label": "GetObj()",
    "kind": "Method",
    "detail": "Function (} Object)",
    "insertText": "GetObj()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} ConstObject)",
    "insertText": "GetObject()"
  },
  {
    "label": "SetArray()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "SetArray()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(kArrayType)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsArray())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (data_ . a . size = 0 ; } GenericValue&)",
    "insertText": "operator(SizeType index)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(index < data_.a.size)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} ValueIterator)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} ValueIterator)",
    "insertText": "End()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "Reserve(SizeType newCapacity, Allocator &allocator)"
  },
  {
    "label": "SetElementsPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementsPointer(reinterpret_cast<GenericValue*>(allocator.Realloc(GetElementsPointer(), data_.a.capacity * sizeof(GenericValue), newCapacity * sizeof(GenericValue))))"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (data_ . a . capacity = newCapacity ; } return* this ; } GenericValue&)",
    "insertText": "PushBack(GenericValue& value, Allocator& allocator)"
  },
  {
    "label": "GetElementsPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementsPointer()[data_.a.size++].RawAssign(value)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (} # endif GenericValue&)",
    "insertText": "PushBack(StringRefType value, Allocator& allocator)"
  },
  {
    "label": "RAPIDJSON_DISABLEIF_RETURN()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "RAPIDJSON_DISABLEIF_RETURN((internal::OrExpr<internal::IsPointer<T>, internal::IsGenericValue<T> >), (GenericValue&)) PushBack(T value, Allocator& allocator)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "PopBack()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(!Empty())"
  },
  {
    "label": "GetElementsPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementsPointer()[--data_.a.size].~GenericValue()"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (} ValueIterator)",
    "insertText": "Erase(ConstValueIterator first, ConstValueIterator last)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(data_.a.size > 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(GetElementsPointer() != 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(first >= Begin())"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(last <= End())"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (ValueIterator pos =)",
    "insertText": "Begin() + (first - Begin())"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(static_cast<void*>(pos), last, static_cast<size_t>(End() - last) * sizeof(GenericValue))"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (data_ . a . size - = static_cast<)",
    "insertText": "SizeType(last - first)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (} ConstArray)",
    "insertText": "GetArray()"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetInt()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(data_.f.flags & kIntFlag)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(data_.f.flags & kUintFlag)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(data_.f.flags & kInt64Flag)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(data_.f.flags & kUint64Flag)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsNumber())"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT((data_.f.flags & kUint64Flag) != 0)"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetFloat()"
  },
  {
    "label": "SetInt()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "SetInt(int i)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(i)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(u)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(i64)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(u64)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(d)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) GenericValue(static_cast<double>(f))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(IsString())"
  },
  {
    "label": "GetStringLength()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "GetStringLength()"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "SetString(const Ch* s, SizeType length)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "SetString(StringRefType s)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "SetString(const Ch* s, Allocator& allocator)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} GenericValue&)",
    "insertText": "SetString(StringRefType s, Allocator& allocator)"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringRaw(s, allocator)"
  },
  {
    "label": "Is()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> bool)",
    "insertText": "Is()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "Get()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<T> ValueType&)",
    "insertText": "Set(const T& data)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<T> ValueType&)",
    "insertText": "Set(const T& data, AllocatorType& allocator)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (} template<Handler> bool)",
    "insertText": "Accept(Handler& handler)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(m->name.IsString())"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} return handler .)",
    "insertText": "EndObject(data_.o.size)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "RAPIDJSON_ASSERT(GetType() == kNumberType)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} } private : template<,> class GenericValue ; template<,,> class GenericDocument ; enum { kBoolFlag = 0 x0008,kNumberFlag = 0 x0010,kIntFlag = 0 x0020,kUintFlag = 0 x0040,kInt64Flag = 0 x0080,kUint64Flag = 0 x0100,kDoubleFlag = 0 x0200,kStringFlag = 0 x0400,kCopyFlag = 0 x0800,kInlineStrFlag = 0 x1000,kNullFlag = kNullType,kTrueFlag = static_cast<)",
    "insertText": "int(kTrueType) | static_cast<int>(kBoolFlag), kFalseFlag = static_cast<int>(kFalseType) | static_cast<int>(kBoolFlag), kNumberIntFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kIntFlag | kInt64Flag), kNumberUintFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kUintFlag | kUint64Flag | kInt64Flag), kNumberInt64Flag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kInt64Flag), kNumberUint64Flag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kUint64Flag), kNumberDoubleFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kDoubleFlag), kNumberAnyFlag = static_cast<int>(kNumberType) | static_cast<int>(kNumberFlag | kIntFlag | kInt64Flag | kUintFlag | kUint64Flag | kDoubleFlag), kConstStringFlag = static_cast<int>(kStringType) | static_cast<int>(kStringFlag), kCopyStringFlag = static_cast<int>(kStringType) | static_cast<int>(kStringFlag | kCopyFlag), kShortStringFlag = static_cast<int>(kStringType) | static_cast<int>(kStringFlag | kCopyFlag | kInlineStrFlag)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SizeType kDefaultArrayCapacity = RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY ; const SizeType kDefaultObjectCapacity = RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY ; struct Flag { # if RAPIDJSON_48BITPOINTER_OPTIMIZATION char payload [)",
    "insertText": "sizeof(SizeType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# elif RAPIDJSON_64BIT char payload [)",
    "insertText": "sizeof(SizeType) * 2 + sizeof(void*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif uint16_t flags ; } ; struct String { SizeType length ; SizeType hashcode ; const Ch* str ; } ; struct ShortString { enum { MaxChars =)",
    "insertText": "sizeof(static_cast<Flag*>(0)->payload) / sizeof(Ch)"
  },
  {
    "label": "Usable()",
    "kind": "Method",
    "detail": "Function (Ch str [ MaxChars ] ; bool)",
    "insertText": "Usable(SizeType len)"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLength(SizeType len)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (str [ LenPos ] = static_cast<)",
    "insertText": "Ch(MaxSize - len)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "GetLength()"
  },
  {
    "label": "DataString()",
    "kind": "Method",
    "detail": "Function (} } ; union Number { # if RAPIDJSON_ENDIAN = = RAPIDJSON_LITTLEENDIAN struct I { int i ; char padding [ 4 ] ; } i ; struct U { unsigned u ; char padding2 [ 4 ] ; } u ; # else struct I { char padding [ 4 ] ; int i ; } i ; struct U { char padding2 [ 4 ] ; unsigned u ; } u ; # endif int64_t i64 ; uint64_t u64 ; double d ; } ; struct ObjectData { SizeType size ; SizeType capacity ; Member* members ; } ; struct ArrayData { SizeType size ; SizeType capacity ; GenericValue* elements ; } ; union Data { String s ; ShortString ss ; Number n ; ObjectData o ; ArrayData a ; Flag f ; } ; RAPIDJSON_FORCEINLINE const Ch*)",
    "insertText": "DataString(const Data& data)"
  },
  {
    "label": "DataStringLength()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE SizeType)",
    "insertText": "DataStringLength(const Data& data)"
  },
  {
    "label": "GetStringPointer()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE const Ch*)",
    "insertText": "GetStringPointer()"
  },
  {
    "label": "SetStringPointer()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE const Ch*)",
    "insertText": "SetStringPointer(const Ch* str)"
  },
  {
    "label": "SetElementsPointer()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE GenericValue*)",
    "insertText": "SetElementsPointer(GenericValue* elements)"
  },
  {
    "label": "GetMembersPointer()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE Member*)",
    "insertText": "GetMembersPointer()"
  },
  {
    "label": "SetMembersPointer()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE Member*)",
    "insertText": "SetMembersPointer(Member* members)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_USE_MEMBERSMAP struct MapTraits { struct Less { bool)",
    "insertText": "operator()(const Data& s1, const Data& s2)"
  },
  {
    "label": "DataStringLength()",
    "kind": "Method",
    "detail": "Function (SizeType n1 =)",
    "insertText": "DataStringLength(s1), n2 = DataStringLength(s2)"
  },
  {
    "label": "memcmp()",
    "kind": "Method",
    "detail": "Function (int cmp =)",
    "insertText": "memcmp(DataString(s1), DataString(s2), sizeof(Ch) * (n1 < n2 ? n1 : n2))"
  },
  {
    "label": "GetMapLayoutSize()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::pair<const Data,SizeType> Pair ; typedef std::multimap<Data,SizeType,Less,StdAllocator<Pair,Allocator>> Map ; typedef Map::iterator Iterator ; } ; typedef MapTraits::Map Map ; typedef MapTraits::Less MapLess ; typedef MapTraits::Pair MapPair ; typedef MapTraits::Iterator MapIterator ; RAPIDJSON_FORCEINLINE size_t)",
    "insertText": "GetMapLayoutSize(SizeType capacity)"
  },
  {
    "label": "GetMapCapacity()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE SizeType&)",
    "insertText": "GetMapCapacity(Map* &map)"
  },
  {
    "label": "GetMapMembers()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE Member*)",
    "insertText": "GetMapMembers(Map* &map)"
  },
  {
    "label": "GetMapIterators()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE MapIterator*)",
    "insertText": "GetMapIterators(Map* &map)"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE Map*&)",
    "insertText": "GetMap(Member* members)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(members != 0)"
  },
  {
    "label": "DropMapIterator()",
    "kind": "Method",
    "detail": "Function (} RAPIDJSON_FORCEINLINE MapIterator)",
    "insertText": "DropMapIterator(MapIterator& rhs)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_HAS_CXX11 MapIterator ret =)",
    "insertText": "move(rhs)"
  },
  {
    "label": "MapIterator()",
    "kind": "Method",
    "detail": "Function (# else MapIterator ret = rhs ; # endif rhs . ~)",
    "insertText": "MapIterator()"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (Map** newMap = static_cast<)",
    "insertText": "Map(allocator.Malloc(GetMapLayoutSize(newCapacity)))"
  },
  {
    "label": "GetMapCapacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMapCapacity(*newMap)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (* newMap =)",
    "insertText": "new(allocator.Malloc(sizeof(Map))) Map(MapLess(), allocator)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} else {* newMap =* oldMap ; size_t)",
    "insertText": "count(*oldMap)->size()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(GetMapMembers(*newMap)), static_cast<void*>(GetMapMembers(*oldMap)), count * sizeof(Member))"
  },
  {
    "label": "GetMapIterators()",
    "kind": "Method",
    "detail": "Function (MapIterator* oldIt =)",
    "insertText": "GetMapIterators(*oldMap), *newIt = GetMapIterators(*newMap)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&newIt[count]) MapIterator(DropMapIterator(oldIt[count]))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Free(oldMap)"
  },
  {
    "label": "DoAllocMembers()",
    "kind": "Method",
    "detail": "Function (} return* newMap ; } RAPIDJSON_FORCEINLINE Member*)",
    "insertText": "DoAllocMembers(SizeType capacity, Allocator& allocator)"
  },
  {
    "label": "DoReserveMembers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoReserveMembers(SizeType newCapacity, Allocator& allocator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ObjectData& o = data_ . o ;)",
    "insertText": "if(newCapacity > o.capacity)"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (Map** oldMap = oldMembers ?&)",
    "insertText": "GetMap(oldMembers) : 0, *&newMap = DoReallocMap(oldMap, newCapacity, allocator)"
  },
  {
    "label": "RAPIDJSON_SETPOINTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SETPOINTER(Member, o.members, GetMapMembers(newMap))"
  },
  {
    "label": "DoFindMember()",
    "kind": "Method",
    "detail": "Function (o . capacity = newCapacity ; } } template<SourceAllocator> MemberIterator)",
    "insertText": "DoFindMember(const GenericValue<Encoding, SourceAllocator>& name)"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (Map*& map =)",
    "insertText": "GetMap(members)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (MapIterator mit = map ->)",
    "insertText": "find(reinterpret_cast<const Data&>(name.data_))"
  },
  {
    "label": "DoClearMembers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoClearMembers()"
  },
  {
    "label": "GetMapIterators()",
    "kind": "Method",
    "detail": "Function (MapIterator* mit =)",
    "insertText": "GetMapIterators(map)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (map ->)",
    "insertText": "erase(DropMapIterator(mit[i]))"
  },
  {
    "label": "Member()",
    "kind": "Method",
    "detail": "Function (members [ i ] . ~)",
    "insertText": "Member()"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMap(members)->~Map()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(*map)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(map)"
  },
  {
    "label": "Member()",
    "kind": "Method",
    "detail": "Function (Member* newMembers = Realloc<)",
    "insertText": "Member(allocator, GetMembersPointer(), o.capacity, newCapacity)"
  },
  {
    "label": "RAPIDJSON_SETPOINTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_SETPOINTER(Member, o.members, newMembers)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(GetMembersPointer())"
  },
  {
    "label": "DoAddMember()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "DoAddMember(GenericValue& name, GenericValue& value, Allocator& allocator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ObjectData& o = data_ . o ;)",
    "insertText": "if(o.size >= o.capacity) DoReserveMembers(o.capacity ? (o.capacity + (o.capacity + 1) / 2) : kDefaultObjectCapacity, allocator)"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (Member* m = members + o . size ; m -> name .)",
    "insertText": "RawAssign(name)"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (m -> value .)",
    "insertText": "RawAssign(value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&mit[o.size]) MapIterator(map->insert(MapPair(m->name.data_, o.size)))"
  },
  {
    "label": "DoRemoveMember()",
    "kind": "Method",
    "detail": "Function (# endif + + o . size ; } MemberIterator)",
    "insertText": "DoRemoveMember(MemberIterator m)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (SizeType mpos = static_cast<)",
    "insertText": "SizeType(&*m - members)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (map ->)",
    "insertText": "erase(DropMapIterator(mit[mpos]))"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (# endif MemberIterator)",
    "insertText": "last(members + (o.size - 1))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_USE_MEMBERSMAP)",
    "insertText": "new(&mit[mpos]) MapIterator(DropMapIterator(mit[&*last - members]))"
  },
  {
    "label": "DoEraseMembers()",
    "kind": "Method",
    "detail": "Function (} - - o . size ; return m ; } MemberIterator)",
    "insertText": "DoEraseMembers(ConstMemberIterator first, ConstMemberIterator last)"
  },
  {
    "label": "MemberBegin()",
    "kind": "Method",
    "detail": "Function (ObjectData& o = data_ . o ; MemberIterator beg =)",
    "insertText": "MemberBegin(), pos = beg + (first - beg), end = MemberEnd()"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_USE_MEMBERSMAP Map*& map =)",
    "insertText": "GetMap(GetMembersPointer())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(MemberIterator itr = pos; itr != last; ++itr)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_USE_MEMBERSMAP map ->)",
    "insertText": "erase(DropMapIterator(mit[itr - beg]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_USE_MEMBERSMAP)",
    "insertText": "if(first != last)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (MemberIterator next =)",
    "insertText": "pos(last - first)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(&*itr), &*next, sizeof(Member))"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (SizeType mpos = static_cast<)",
    "insertText": "SizeType(itr - beg)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&mit[mpos]) MapIterator(DropMapIterator(mit[next - beg]))"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (mit [ mpos ] -> second = mpos ; } } # else)",
    "insertText": "memmove(static_cast<void*>(&*pos), &*last, static_cast<size_t>(end - last) * sizeof(Member))"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(rhs.GetType() == kObjectType)"
  },
  {
    "label": "DoAllocMembers()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kObjectFlag ; SizeType count = rhs . data_ . o . size ; Member* lm =)",
    "insertText": "DoAllocMembers(count, allocator)"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_USE_MEMBERSMAP Map*& map =)",
    "insertText": "GetMap(lm)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(SizeType i = 0; i < count; i++)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&lm[i].name) GenericValue(rm[i].name, allocator, copyConstStrings)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&lm[i].value) GenericValue(rm[i].value, allocator, copyConstStrings)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_USE_MEMBERSMAP)",
    "insertText": "new(&mit[i]) MapIterator(map->insert(MapPair(lm[i].name.data_, i)))"
  },
  {
    "label": "SetMembersPointer()",
    "kind": "Method",
    "detail": "Function (# endif } data_ . o . size = data_ . o . capacity = count ;)",
    "insertText": "SetMembersPointer(lm)"
  },
  {
    "label": "SetArrayRaw()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetArrayRaw(GenericValue* values, SizeType count, Allocator& allocator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kArrayFlag ;)",
    "insertText": "if(count)"
  },
  {
    "label": "SetElementsPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetElementsPointer(e)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(e), values, count * sizeof(GenericValue))"
  },
  {
    "label": "SetElementsPointer()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "SetElementsPointer(0)"
  },
  {
    "label": "SetObjectRaw()",
    "kind": "Method",
    "detail": "Function (data_ . a . size = data_ . a . capacity = count ; } void)",
    "insertText": "SetObjectRaw(Member* members, SizeType count, Allocator& allocator)"
  },
  {
    "label": "SetMembersPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMembersPointer(m)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(m), members, count * sizeof(Member))"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (# if RAPIDJSON_USE_MEMBERSMAP Map*& map =)",
    "insertText": "GetMap(m)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&mit[i]) MapIterator(map->insert(MapPair(m[i].name.data_, i)))"
  },
  {
    "label": "SetMembersPointer()",
    "kind": "Method",
    "detail": "Function (} # endif } else)",
    "insertText": "SetMembersPointer(0)"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (data_ . o . size = data_ . o . capacity = count ; } void)",
    "insertText": "SetStringRaw(StringRefType s)"
  },
  {
    "label": "SetStringPointer()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kConstStringFlag ;)",
    "insertText": "SetStringPointer(s)"
  },
  {
    "label": "SetStringRaw()",
    "kind": "Method",
    "detail": "Function (data_ . s . length = s . length ; } void)",
    "insertText": "SetStringRaw(StringRefType s, Allocator& allocator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ch* str = 0 ;)",
    "insertText": "if(ShortString::Usable(s.length))"
  },
  {
    "label": "SetLength()",
    "kind": "Method",
    "detail": "Function (data_ . f . flags = kShortStringFlag ; data_ . ss .)",
    "insertText": "SetLength(s.length)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (str = data_ . ss . str ; } else { data_ . f . flags = kCopyStringFlag ; data_ . s . length = s . length ; str = static_cast<)",
    "insertText": "Ch(allocator.Malloc((s.length + 1) * sizeof(Ch)))"
  },
  {
    "label": "SetStringPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStringPointer(str)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(str, s, s.length * sizeof(Ch))"
  },
  {
    "label": "RawAssign()",
    "kind": "Method",
    "detail": "Function (str [ s . length ] = ' \\ 0 ' ; } void)",
    "insertText": "RawAssign(GenericValue& rhs)"
  },
  {
    "label": "StringEqual()",
    "kind": "Method",
    "detail": "Function (data_ = rhs . data_ ; rhs . data_ . f . flags = kNullFlag ; } template<SourceAllocator> bool)",
    "insertText": "StringEqual(const GenericValue<Encoding, SourceAllocator>& rhs)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(rhs.IsString())"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (const Ch* const str2 = rhs .)",
    "insertText": "GetString()"
  },
  {
    "label": "GenericDocument()",
    "kind": "Method",
    "detail": "Function (} Data data_ ; } ; typedef GenericValue<UTF8<>> Value ; template<Encoding,Allocator = RAPIDJSON_DEFAULT_ALLOCATOR,StackAllocator = RAPIDJSON_DEFAULT_STACK_ALLOCATOR> class GenericDocument : public GenericValue<Encoding,Allocator> { public : typedef Encoding::Ch Ch ; typedef GenericValue<Encoding,Allocator> ValueType ; typedef Allocator AllocatorType ; typedef StackAllocator StackAllocatorType ;)",
    "insertText": "GenericDocument(Type type, Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity, StackAllocator* stackAllocator = 0) : GenericValue<Encoding, Allocator>(type), allocator_(allocator), ownAllocator_(0), stack_(stackAllocator, stackCapacity), parseResult_()"
  },
  {
    "label": "GenericDocument()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericDocument(Allocator* allocator = 0, size_t stackCapacity = kDefaultStackCapacity, StackAllocator* stackAllocator = 0) : allocator_(allocator), ownAllocator_(0), stack_(stackAllocator, stackCapacity), parseResult_()"
  },
  {
    "label": "GenericDocument()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS)",
    "insertText": "GenericDocument(GenericDocument&& rhs) RAPIDJSON_NOEXCEPT : ValueType(std::forward<ValueType>(rhs)), allocator_(rhs.allocator_), ownAllocator_(rhs.ownAllocator_), stack_(std::move(rhs.stack_)), parseResult_(rhs.parseResult_)"
  },
  {
    "label": "ParseResult()",
    "kind": "Method",
    "detail": "Function (rhs . allocator_ = 0 ; rhs . ownAllocator_ = 0 ; rhs . parseResult_ =)",
    "insertText": "ParseResult()"
  },
  {
    "label": "GenericDocument()",
    "kind": "Method",
    "detail": "Function (} # endif ~)",
    "insertText": "GenericDocument()"
  },
  {
    "label": "SetNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNull()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Destroy()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RVALUE_REFS GenericDocument&)",
    "insertText": "operator(GenericDocument&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(std::forward<ValueType>(rhs))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (allocator_ = rhs . allocator_ ; ownAllocator_ = rhs . ownAllocator_ ; stack_ =)",
    "insertText": "move(rhs.stack_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(rhs)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (stack_ .)",
    "insertText": "Swap(rhs.stack_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(allocator_, rhs.allocator_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ownAllocator_, rhs.ownAllocator_)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(parseResult_, rhs.parseResult_)"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (} template<Generator> GenericDocument&)",
    "insertText": "Populate(Generator& g)"
  },
  {
    "label": "scope()",
    "kind": "Method",
    "detail": "Function (ClearStackOnExit)",
    "insertText": "scope(*this)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(stack_.GetSize() == sizeof(ValueType))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(*stack_.template Pop<ValueType>(1))"
  },
  {
    "label": "ParseStream()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<unsigned parseFlags,SourceEncoding,InputStream> GenericDocument&)",
    "insertText": "ParseStream(InputStream& is)"
  },
  {
    "label": "reader()",
    "kind": "Method",
    "detail": "Function (GenericReader<SourceEncoding,Encoding,StackAllocator>)",
    "insertText": "reader(stack_.HasAllocator() ? &stack_.GetAllocator() : 0)"
  },
  {
    "label": "parseFlags()",
    "kind": "Method",
    "detail": "Function (parseResult_ = reader . template Parse<)",
    "insertText": "parseFlags(is, *this)"
  },
  {
    "label": "ParseInsitu()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags> GenericDocument&)",
    "insertText": "ParseInsitu(Ch* str)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,SourceEncoding> GenericDocument&)",
    "insertText": "Parse(const typename SourceEncoding::Ch* str)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(!(parseFlags & kParseInsituFlag))"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags> GenericDocument&)",
    "insertText": "Parse(const Ch* str)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags,SourceEncoding> GenericDocument&)",
    "insertText": "Parse(const typename SourceEncoding::Ch* str, size_t length)"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (MemoryStream)",
    "insertText": "ms(reinterpret_cast<const char*>(str), length * sizeof(typename SourceEncoding::Ch))"
  },
  {
    "label": "is()",
    "kind": "Method",
    "detail": "Function (EncodedInputStream<SourceEncoding,MemoryStream>)",
    "insertText": "is(ms)"
  },
  {
    "label": "SourceEncoding()",
    "kind": "Method",
    "detail": "Function (ParseStream<parseFlags,)",
    "insertText": "SourceEncoding(is)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} GenericDocument&)",
    "insertText": "Parse(const Ch* str, size_t length)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING template<unsigned parseFlags,SourceEncoding> GenericDocument&)",
    "insertText": "Parse(const std::basic_string<typename SourceEncoding::Ch>& str)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} template<unsigned parseFlags> GenericDocument&)",
    "insertText": "Parse(const std::basic_string<Ch>& str)"
  },
  {
    "label": "HasParseError()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "HasParseError()"
  },
  {
    "label": "GetParseError()",
    "kind": "Method",
    "detail": "Function (} ParseErrorCode)",
    "insertText": "GetParseError()"
  },
  {
    "label": "GetErrorOffset()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetErrorOffset()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(allocator_)"
  },
  {
    "label": "ClearStackOnExit()",
    "kind": "Method",
    "detail": "Function (} private : struct ClearStackOnExit {)",
    "insertText": "ClearStackOnExit(GenericDocument& d) : d_(d)"
  },
  {
    "label": "ClearStackOnExit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ClearStackOnExit()"
  },
  {
    "label": "ClearStack()",
    "kind": "Method",
    "detail": "Function (d_ .)",
    "insertText": "ClearStack()"
  },
  {
    "label": "ClearStackOnExit()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "ClearStackOnExit(const ClearStackOnExit&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ClearStackOnExit&)",
    "insertText": "operator(const ClearStackOnExit&)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (GenericDocument& d_ ; } ; template<,> class GenericValue ; public : bool)",
    "insertText": "Null()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(stack_.template Push<ValueType>()) ValueType()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(stack_.template Push<ValueType>()) ValueType(b)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(stack_.template Push<ValueType>()) ValueType(i)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(stack_.template Push<ValueType>()) ValueType(d)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(stack_.template Push<ValueType>()) ValueType(kObjectType)"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndObject(SizeType memberCount)"
  },
  {
    "label": "Member()",
    "kind": "Method",
    "detail": "Function (ValueType::Member* members = stack_ . template Pop<)",
    "insertText": "Member(memberCount)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (stack_ . template Top<)",
    "insertText": "ValueType()->SetObjectRaw(members, memberCount, GetAllocator())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(stack_.template Push<ValueType>()) ValueType(kArrayType)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType* elements = stack_ . template Pop<)",
    "insertText": "ValueType(elementCount)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (stack_ . template Top<)",
    "insertText": "ValueType()->SetArrayRaw(elements, elementCount, GetAllocator())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GenericDocument&)",
    "insertText": "operator(const GenericDocument&)"
  },
  {
    "label": "ShrinkToFit()",
    "kind": "Method",
    "detail": "Function (stack_ .)",
    "insertText": "ShrinkToFit()"
  },
  {
    "label": "RAPIDJSON_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_DELETE(ownAllocator_)"
  },
  {
    "label": "GenericArray()",
    "kind": "Method",
    "detail": "Function (} const size_t kDefaultStackCapacity = 1 0 2 4 ; Allocator* allocator_ ; Allocator* ownAllocator_ ; internal::Stack<StackAllocator> stack_ ; ParseResult parseResult_ ; } ; typedef GenericDocument<UTF8<>> Document ; template<bool Const,ValueT> class GenericArray { public : typedef GenericArray<true,ValueT> ConstArray ; typedef GenericArray<false,ValueT> Array ; typedef ValueT PlainType ; typedef internal::MaybeAddConst<Const,PlainType>::Type ValueType ; typedef ValueType* ValueIterator ; typedef const ValueT* ConstValueIterator ; typedef ValueType::AllocatorType AllocatorType ; typedef ValueType::StringRefType StringRefType ; template<,> class GenericValue ;)",
    "insertText": "GenericArray(const GenericArray& rhs) : value_(rhs.value_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericArray&)",
    "insertText": "operator(const GenericArray& rhs)"
  },
  {
    "label": "GenericArray()",
    "kind": "Method",
    "detail": "Function (value_ = rhs . value_ ; return* this ; } ~)",
    "insertText": "GenericArray()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "ValueType()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "Capacity()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} GenericArray)",
    "insertText": "Reserve(SizeType newCapacity, AllocatorType &allocator)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (value_ .)",
    "insertText": "Reserve(newCapacity, allocator)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (value_ .)",
    "insertText": "PushBack(value, allocator)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_CXX11_RANGE_FOR ValueIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ValueIterator)",
    "insertText": "end()"
  },
  {
    "label": "GenericArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray(ValueType& value) : value_(value)"
  },
  {
    "label": "GenericObject()",
    "kind": "Method",
    "detail": "Function (} ValueType& value_ ; } ; template<bool Const,ValueT> class GenericObject { public : typedef GenericObject<true,ValueT> ConstObject ; typedef GenericObject<false,ValueT> Object ; typedef ValueT PlainType ; typedef internal::MaybeAddConst<Const,PlainType>::Type ValueType ; typedef GenericMemberIterator<Const,ValueT::EncodingType,ValueT::AllocatorType> MemberIterator ; typedef GenericMemberIterator<true,ValueT::EncodingType,ValueT::AllocatorType> ConstMemberIterator ; typedef ValueType::AllocatorType AllocatorType ; typedef ValueType::StringRefType StringRefType ; typedef ValueType::EncodingType EncodingType ; typedef ValueType::Ch Ch ; template<,> class GenericValue ;)",
    "insertText": "GenericObject(const GenericObject& rhs) : value_(rhs.value_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericObject&)",
    "insertText": "operator(const GenericObject& rhs)"
  },
  {
    "label": "GenericObject()",
    "kind": "Method",
    "detail": "Function (value_ = rhs . value_ ; return* this ; } ~)",
    "insertText": "GenericObject()"
  },
  {
    "label": "MemberCapacity()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "MemberCapacity()"
  },
  {
    "label": "ObjectEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ObjectEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> ValueType&)",
    "insertText": "operator(T* name)"
  },
  {
    "label": "MemberReserve()",
    "kind": "Method",
    "detail": "Function (} GenericObject)",
    "insertText": "MemberReserve(SizeType newCapacity, AllocatorType &allocator)"
  },
  {
    "label": "MemberReserve()",
    "kind": "Method",
    "detail": "Function (value_ .)",
    "insertText": "MemberReserve(newCapacity, allocator)"
  },
  {
    "label": "HasMember()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceAllocator> bool)",
    "insertText": "HasMember(const GenericValue<EncodingType, SourceAllocator>& name)"
  },
  {
    "label": "FindMember()",
    "kind": "Method",
    "detail": "Function (} template<SourceAllocator> MemberIterator)",
    "insertText": "FindMember(const GenericValue<EncodingType, SourceAllocator>& name)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (} # endif GenericObject)",
    "insertText": "AddMember(ValueType& name, ValueType& value, AllocatorType& allocator)"
  },
  {
    "label": "AddMember()",
    "kind": "Method",
    "detail": "Function (value_ .)",
    "insertText": "AddMember(name, value, allocator)"
  },
  {
    "label": "RemoveMember()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceAllocator> bool)",
    "insertText": "RemoveMember(const GenericValue<EncodingType, SourceAllocator>& name)"
  },
  {
    "label": "RemoveMember()",
    "kind": "Method",
    "detail": "Function (} MemberIterator)",
    "insertText": "RemoveMember(MemberIterator m)"
  },
  {
    "label": "EraseMember()",
    "kind": "Method",
    "detail": "Function (} # endif template<SourceAllocator> bool)",
    "insertText": "EraseMember(const GenericValue<EncodingType, SourceAllocator>& name)"
  },
  {
    "label": "GenericObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericObject(ValueType& value) : value_(value)"
  }
]