[
  {
    "label": "CordzSampleToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordzSampleToken"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (# include \" absl / base / config . h \" # include \" absl / strings / internal / cordz_handle . h \" # include \" absl / strings / internal / cordz_info . h \" # ifndef ABSL_STRINGS_INTERNAL_CORDZ_SAMPLE_TOKEN_H_ # define ABSL_STRINGS_INTERNAL_CORDZ_SAMPLE_TOKEN_H_ namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class CordzSampleToken : public CordzSnapshot { public : class Iterator { public : using iterator_category = std::input_iterator_tag ; using value_type = const CordzInfo& ; using difference_type = ptrdiff_t ; using pointer = const CordzInfo* ; using reference = value_type ;)",
    "insertText": "Iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Iterator& lhs, const Iterator& rhs)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (private : class CordzSampleToken ;)",
    "insertText": "Iterator(const CordzSampleToken* token)"
  },
  {
    "label": "CordzSampleToken()",
    "kind": "Method",
    "detail": "Function (const CordzSampleToken* token_ = nullptr ; pointer current_ = nullptr ; } ;)",
    "insertText": "CordzSampleToken()"
  },
  {
    "label": "CordzSampleToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordzSampleToken(const CordzSampleToken&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CordzSampleToken&)",
    "insertText": "operator(const CordzSampleToken&)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "end()"
  }
]