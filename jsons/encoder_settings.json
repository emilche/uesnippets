[
  {
    "label": "DefaultVideoStreamFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultVideoStreamFactory"
  },
  {
    "label": "DefaultVideoStreamFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_ENCODER_SETTINGS_H_ # define TEST_ENCODER_SETTINGS_H_ # include<stddef . h> # include<string> # include<vector> # include \" call / video_receive_stream . h \" # include \" call / video_send_stream . h \" # include \" video / config / video_encoder_config . h \" namespace webrtc { namespace test { class DefaultVideoStreamFactory : public VideoEncoderConfig::VideoStreamFactoryInterface { public :)",
    "insertText": "DefaultVideoStreamFactory()"
  },
  {
    "label": "CreateEncoderStreams()",
    "kind": "Method",
    "detail": "Function (const size_t kMaxNumberOfStreams = 3 ; const int kMaxBitratePerStream [ ] ; const int kDefaultMinBitratePerStream [ ] ; private : std::vector<VideoStream>)",
    "insertText": "CreateEncoderStreams(int frame_width, int frame_height, const webrtc::VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "CreateVideoStreams()",
    "kind": "Method",
    "detail": "Function (} ; std::vector<VideoStream>)",
    "insertText": "CreateVideoStreams(int width, int height, const webrtc::VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "FillEncoderConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillEncoderConfiguration(VideoCodecType codec_type, size_t num_streams, VideoEncoderConfig* configuration)"
  },
  {
    "label": "CreateMatchingDecoder()",
    "kind": "Method",
    "detail": "Function (VideoReceiveStreamInterface::Decoder)",
    "insertText": "CreateMatchingDecoder(int payload_type, const std::string& payload_name)"
  },
  {
    "label": "CreateMatchingDecoder()",
    "kind": "Method",
    "detail": "Function (VideoReceiveStreamInterface::Decoder)",
    "insertText": "CreateMatchingDecoder(const VideoSendStream::Config& config)"
  }
]