[
  {
    "label": "TMediaSampleSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMediaSampleSource"
  },
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "IMediaBinarySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaBinarySample"
  },
  {
    "label": "IMediaOverlaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOverlaySample"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" IMediaTimeSource . h \" # include \" Templates / SharedPointer . h \" # include \" Containers / Array . h \" # include \" Math / Range . h \" template<SampleType> class TMediaSampleSource { public : bool)",
    "insertText": "Dequeue(TSharedPtr<SampleType, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Peek(TSharedPtr<SampleType, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "PeekFrontAndBack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekFrontAndBack(TSharedPtr<SampleType, ESPMode::ThreadSafe>& OutFirstSample, TSharedPtr<SampleType, ESPMode::ThreadSafe>& OutLastSample)"
  },
  {
    "label": "GetSampleTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSampleTimes(TArray<TRange<FMediaTimeStamp>>& OutSampleTimeRanges)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Pop()"
  },
  {
    "label": "TMediaSampleSource()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "TMediaSampleSource()"
  }
]