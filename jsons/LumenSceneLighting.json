[
  {
    "label": "FDeferredLightUniformStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredLightUniformStruct"
  },
  {
    "label": "FLumenCardRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardRenderer"
  },
  {
    "label": "FLumenLight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenLight"
  },
  {
    "label": "FLumenCardUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenCardUpdateContext"
  },
  {
    "label": "EIndirectArgOffset",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EIndirectArgOffset"
  },
  {
    "label": "FRasterizeToCardsVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRasterizeToCardsVS"
  },
  {
    "label": "FClearLumenCardsPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClearLumenCardsPS"
  },
  {
    "label": "FNumTargets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNumTargets"
  },
  {
    "label": "FCopyCardCaptureLightingToAtlasPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyCardCaptureLightingToAtlasPS"
  },
  {
    "label": "FIndirectLighting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLighting"
  },
  {
    "label": "FResample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResample"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLumenDirectLightingStochasticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenDirectLightingStochasticData"
  },
  {
    "label": "FLumenCardTileUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenCardTileUpdateContext"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" CommonRenderResources . h \" # include \" SceneView . h \" # include \" SceneRendering . h \" # include \" RendererPrivateUtils . h \" # include \" Lumen . h \" # include \" Lumen / LumenSceneData . h \" class FDeferredLightUniformStruct ; class FLumenCardRenderer ; class FLumenLight ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FLumenCardScatterParameters, ) RDG_BUFFER_ACCESS(DrawIndirectArgs, ERHIAccess::IndirectArgs) RDG_BUFFER_ACCESS(DispatchIndirectArgs, ERHIAccess::IndirectArgs) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, QuadAllocator) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, QuadData) SHADER_PARAMETER(uint32, MaxQuadsPerScatterInstance) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : enum EIndirectArgOffset { ThreadPerPage = 0*)",
    "insertText": "sizeof(FRHIDispatchIndirectParameters), ThreadPerTile = 1 * sizeof(FRHIDispatchIndirectParameters)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef CardPageIndexAllocator ; FRDGBufferRef CardPageIndexData ; FRDGBufferRef DrawCardPageIndicesIndirectArgs ; FRDGBufferRef DispatchCardPageIndicesIndirectArgs ; FIntPoint UpdateAtlasSize ; uint32 MaxUpdateTiles ; uint32 UpdateFactor ; } ; class FRasterizeToCardsVS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FRasterizeToCardsVS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FRasterizeToCardsVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FLumenCardScene, LumenCardScene) RDG_BUFFER_ACCESS(DrawIndirectArgs, ERHIAccess::IndirectArgs) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, CardPageIndexAllocator) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, CardPageIndexData) SHADER_PARAMETER(FVector2f, IndirectLightingAtlasSize) END_SHADER_PARAMETER_STRUCT() static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "DrawQuadsToAtlas()",
    "kind": "Method",
    "detail": "Function (} ; template<VertexShaderType,PixelShaderType,PassParametersType,SetParametersLambdaType> void)",
    "insertText": "DrawQuadsToAtlas(FIntPoint ViewportSize, TShaderRefBase<VertexShaderType, FShaderMapPointerTable> VertexShader, TShaderRefBase<PixelShaderType, FShaderMapPointerTable> PixelShader, const PassParametersType* PassParameters, const FGlobalShaderMap* GlobalShaderMap, FRHIBlendState* BlendState, FRHICommandList& RHICmdList, SetParametersLambdaType&& SetParametersLambda, FRDGBufferRef DrawIndirectArgs, uint32 DrawIndirectArgOffset)"
  },
  {
    "label": "ApplyCachedRenderTargets()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateInitializer GraphicsPSOInit ; RHICmdList .)",
    "insertText": "ApplyCachedRenderTargets(GraphicsPSOInit)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetViewport(0, 0, 0.0f, ViewportSize.X, ViewportSize.Y, 1.0f)"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . RasterizerState = TStaticRasterizerState<FM_Solid,CM_None)",
    "insertText": "GetRHI()"
  },
  {
    "label": "GetVertexShader()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . BlendState = BlendState ; GraphicsPSOInit . PrimitiveType = GRHISupportsRectTopology ? PT_RectList : PT_TriangleList ; GraphicsPSOInit . BoundShaderState . VertexDeclarationRHI = GEmptyVertexDeclaration . VertexDeclarationRHI ; GraphicsPSOInit . BoundShaderState . VertexShaderRHI = VertexShader .)",
    "insertText": "GetVertexShader()"
  },
  {
    "label": "GetPixelShader()",
    "kind": "Method",
    "detail": "Function (GraphicsPSOInit . BoundShaderState . PixelShaderRHI = PixelShader .)",
    "insertText": "GetPixelShader()"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit, 0)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RHICmdList, VertexShader, VertexShader.GetVertexShader(), PassParameters->VS)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), PassParameters->PS)"
  },
  {
    "label": "SetParametersLambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParametersLambda(RHICmdList, PixelShader, PixelShader.GetPixelShader(), PassParameters->PS)"
  },
  {
    "label": "DrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "DrawPrimitiveIndirect(DrawIndirectArgs->GetIndirectRHICallBuffer(), DrawIndirectArgOffset)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} class FClearLumenCardsPS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FClearLumenCardsPS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FClearLumenCardsPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_STRUCT_REF(FViewUniformShaderParameters, View) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FLumenCardScene, LumenCardScene) END_SHADER_PARAMETER_STRUCT() class FNumTargets : SHADER_PERMUTATION_RANGE_INT(\"NUM_TARGETS\", 1, 2)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FNumTargets> ; bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} } ; class FCopyCardCaptureLightingToAtlasPS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FCopyCardCaptureLightingToAtlasPS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FCopyCardCaptureLightingToAtlasPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_STRUCT_REF(FViewUniformShaderParameters, View) SHADER_PARAMETER(float, DiffuseColorBoost) SHADER_PARAMETER(FUintVector2, CardCaptureAtlasSizeInTiles) SHADER_PARAMETER(uint32, OutputAtlasWidthInTiles) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AlbedoCardCaptureAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, EmissiveCardCaptureAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, DirectLightingCardCaptureAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, RadiosityCardCaptureAtlas) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, RadiosityNumFramesAccumulatedCardCaptureAtlas) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint4>, TileShadowDownsampleFactorAtlasForResampling) SHADER_PARAMETER_RDG_BUFFER_UAV(RWBuffer<uint4>, RWTileShadowDownsampleFactorAtlas) END_SHADER_PARAMETER_STRUCT() class FIndirectLighting : SHADER_PERMUTATION_BOOL(\"INDIRECT_LIGHTING\")"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FResample :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"RESAMPLE\")"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ELumenLightType { Directional,Point,Spot,Rect,MAX } ; struct FLumenDirectLightingStochasticData { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetDirectLightingDeferredLightUniformBuffer()",
    "kind": "Method",
    "detail": "Function (struct FLumenCardTileUpdateContext { FRDGBufferRef CardTileAllocator ; FRDGBufferRef CardTiles ; FRDGBufferRef DispatchCardTilesIndirectArgs ; } ; namespace Lumen { void)",
    "insertText": "SetDirectLightingDeferredLightUniformBuffer(const FViewInfo& View, const FLightSceneInfo* LightSceneInfo, TUniformBufferBinding<FDeferredLightUniformStruct>& UniformBuffer)"
  },
  {
    "label": "CombineLumenSceneLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineLumenSceneLighting(FScene* Scene, const FViewInfo& View, FRDGBuilder& GraphBuilder, const FLumenSceneFrameTemporaries& FrameTemporaries, const FLumenCardUpdateContext& CardUpdateContext, const FLumenCardTileUpdateContext& CardTileUpdateContext, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "BuildCardUpdateContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildCardUpdateContext(FRDGBuilder& GraphBuilder, const FLumenSceneData& LumenSceneData, const TArray<FViewInfo>& Views, const FLumenSceneFrameTemporaries& FrameTemporaries, bool bIndirectLightingHistoryValid, FLumenCardUpdateContext& DirectLightingCardUpdateContext, FLumenCardUpdateContext& IndirectLightingCardUpdateContext, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "SpliceCardPagesIntoTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpliceCardPagesIntoTiles(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* GloablShaderMap, const FLumenCardUpdateContext& CardUpdateContext, const TRDGUniformBufferRef<FLumenCardScene>& LumenCardSceneUniformBuffer, FLumenCardTileUpdateContext& OutCardTileUpdateContext, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "GetDirectLightingAtlasFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetDirectLightingAtlasFormat()"
  },
  {
    "label": "GetIndirectLightingAtlasFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetIndirectLightingAtlasFormat()"
  },
  {
    "label": "GetNumFramesAccumulatedAtlasFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetNumFramesAccumulatedAtlasFormat()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} namespace LumenSceneDirectLighting {)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FLightDataParameters, ) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FLumenPackedLight>, LumenPackedLights) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, LumenLightInfluenceSpheres) END_SHADER_PARAMETER_STRUCT() float GetMeshSDFShadowRayBias()"
  },
  {
    "label": "GetHeightfieldShadowRayBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHeightfieldShadowRayBias()"
  },
  {
    "label": "GetGlobalSDFShadowRayBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGlobalSDFShadowRayBias()"
  },
  {
    "label": "GetHardwareRayTracingShadowRayBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHardwareRayTracingShadowRayBias()"
  },
  {
    "label": "UseStochasticLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseStochasticLighting(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "TraceLumenHardwareRayTracedDirectLightingShadows()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TraceLumenHardwareRayTracedDirectLightingShadows(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, int32 ViewIndex, const FLumenSceneFrameTemporaries& FrameTemporaries, const FLumenDirectLightingStochasticData& StochasticData, const LumenSceneDirectLighting::FLightDataParameters& LumenLightData, FRDGBufferRef ShadowTraceIndirectArgs, FRDGBufferRef ShadowTraceAllocator, FRDGBufferRef ShadowTraces, FRDGBufferRef LightTileAllocator, FRDGBufferRef LightTiles, FRDGBufferUAVRef ShadowMaskTilesUAV, ERDGPassFlags ComputePassFlags)"
  },
  {
    "label": "TraceLumenHardwareRayTracedDebug()",
    "kind": "Method",
    "detail": "Function (FRDGBufferSRVRef)",
    "insertText": "TraceLumenHardwareRayTracedDebug(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, int32 ViewIndex, const FLumenSceneFrameTemporaries& FrameTemporaries, ERDGPassFlags ComputePassFlags)"
  }
]