[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FMemoryImageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageWriter"
  },
  {
    "label": "FMemoryUnfreezeContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryUnfreezeContent"
  },
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FSHA1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHA1"
  },
  {
    "label": "FMD5Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMD5Hash"
  },
  {
    "label": "FMD5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMD5"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContext"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FAsyncSHAVerify",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSHAVerify"
  },
  {
    "label": "FBufferReaderWithSHA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferReaderWithSHA"
  },
  {
    "label": "FMD5()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringConv . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / Guid . h \" # include \" Serialization / Archive . h \" # include \" Serialization / BufferReader . h \" # include \" Serialization / MemoryLayout . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" String / BytesToHex . h \" # include \" String / HexToBytes . h \" # include \" Templates / UnrealTemplate . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Async / AsyncWork . h \" # endif class FCbFieldView ; class FCbWriter ; class FMemoryImageWriter ; class FMemoryUnfreezeContent ; class FPointerTableBase ; class FSHA1 ; struct FMD5Hash ; class FMD5 { public :)",
    "insertText": "FMD5()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const uint8* input, uint64 inputLen)"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Final(uint8* digest)"
  },
  {
    "label": "HashAnsiString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "HashAnsiString(const TCHAR* String)"
  },
  {
    "label": "HashBytes()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "HashBytes(const uint8* input, uint64 inputLen)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (uint8 Digest [ 1 6 ] ; FMD5 Md5Gen ; Md5Gen .)",
    "insertText": "Update(input, inputLen)"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (Md5Gen .)",
    "insertText": "Final(Digest)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString MD5 ;)",
    "insertText": "for(int32 i = 0; i < 16; i++)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (MD5 + =)",
    "insertText": "Printf(TEXT(\"%02x\"), Digest[i])"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} return MD5 ; } private : struct FContext { uint32 state [ 4 ] ; uint32 count [ 2 ] ; uint8 buffer [ 6 4 ] ; } ; void)",
    "insertText": "Transform(uint32* state, const uint8* block)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(uint8* output, const uint32* input, int32 len)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(uint32* output, const uint8* input, int32 len)"
  },
  {
    "label": "FMD5Hash()",
    "kind": "Method",
    "detail": "Function (FContext Context ; } ; struct FMD5Hash ; struct FMD5Hash {)",
    "insertText": "FMD5Hash() : bIsValid(false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (MD5 .)",
    "insertText": "Final(Bytes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bIsValid = true ; } bool)",
    "insertText": "operator(const FMD5Hash& LHS, const FMD5Hash& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMD5Hash& Hash)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Hash . bIsValid ;)",
    "insertText": "if(Hash.bIsValid)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Serialize(Hash.Bytes, 16)"
  },
  {
    "label": "HashFile()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } FMD5Hash)",
    "insertText": "HashFile(const TCHAR* InFilename, TArray<uint8>* Buffer = nullptr)"
  },
  {
    "label": "HashFileFromArchive()",
    "kind": "Method",
    "detail": "Function (FMD5Hash)",
    "insertText": "HashFileFromArchive(FArchive* Ar, TArray<uint8>* ScratchPad = nullptr)"
  },
  {
    "label": "GetBytes()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetBytes()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : bool bIsValid ; uint8 Bytes [ 1 6 ] ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FMD5Hash& Hash)"
  },
  {
    "label": "WriteCompactBinary()",
    "kind": "Method",
    "detail": "Function (} FCbWriter&)",
    "insertText": "WriteCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FMD5Hash& OutHash)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FMD5Hash&)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(FMD5Hash& Hash, const TCHAR*)"
  },
  {
    "label": "MD5HashToGuid()",
    "kind": "Method",
    "detail": "Function (} ; FGuid)",
    "insertText": "MD5HashToGuid(const FMD5Hash& Hash)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (FGuid Result ;)",
    "insertText": "Memcpy(&Result, Hash.GetBytes(), sizeof(FGuid))"
  },
  {
    "label": "FSHAHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSHAHash()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Hash, 0, sizeof(Hash))"
  },
  {
    "label": "GetStringLen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStringLen()"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendString(FString& Out)"
  },
  {
    "label": "BytesToHex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BytesToHex((const uint8*)Hash, sizeof(Hash), Out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToString(TCHAR* Dest, bool bNullTerminate)"
  },
  {
    "label": "UE_ARRAY_COUNT()",
    "kind": "Method",
    "detail": "Function (auto Count =)",
    "insertText": "UE_ARRAY_COUNT(Hash)"
  },
  {
    "label": "NibbleToTChar()",
    "kind": "Method",
    "detail": "Function (uint8 Val = Hash [ i ] ; Dest [ i* 2 ] =)",
    "insertText": "NibbleToTChar(Val >> 4)"
  },
  {
    "label": "NibbleToTChar()",
    "kind": "Method",
    "detail": "Function (Dest [ i* 2 + 1 ] =)",
    "insertText": "NibbleToTChar(Val & 15)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bNullTerminate)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Dest [ Count* 2 ] =)",
    "insertText": "TEXT('\\0')"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FromString(const FStringView& Src)"
  },
  {
    "label": "HexToBytes()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "HexToBytes(Src, Hash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSHAHash& X, const FSHAHash& Y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FSHAHash& G)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FSHAHash& InKey)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const FSHAHash&)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(FSHAHash& Hash, const TCHAR*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const FSHAHash& InHash)"
  },
  {
    "label": "BytesToHex()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "BytesToHex(InHash.Hash, Builder)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FSHAHash& OutHash)"
  },
  {
    "label": "IntrinsicToString()",
    "kind": "Method",
    "detail": "Function (} ; namespace Freeze { void)",
    "insertText": "IntrinsicToString(const FSHAHash& Object, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FMemoryToStringContext& OutContext)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FSHAHash)"
  },
  {
    "label": "FSHA1()",
    "kind": "Method",
    "detail": "Function (class FSHA1 { public : enum { DigestSize = 2 0 } ;)",
    "insertText": "FSHA1()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (uint32 m_state [ 5 ] ; uint64 m_count ; uint32 __reserved1 [ 1 ] ; uint8 m_buffer [ 6 4 ] ; uint8 m_digest [ 2 0 ] ; uint32 __reserved2 [ 3 ] ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const uint8 *data, uint64 len)"
  },
  {
    "label": "UpdateWithString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWithString(const TCHAR *data, uint32 len)"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Final()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (FSHAHash Digest ;)",
    "insertText": "GetHash(reinterpret_cast<uint8*>(&Digest))"
  },
  {
    "label": "HashBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashBuffer(const void* Data, uint64 DataSize, uint8* OutHash)"
  },
  {
    "label": "HashBuffer()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "HashBuffer(const void* Data, uint64 DataSize)"
  },
  {
    "label": "HashBuffer()",
    "kind": "Method",
    "detail": "Function (FSHAHash Hash ;)",
    "insertText": "HashBuffer(Data, DataSize, Hash.Hash)"
  },
  {
    "label": "InitializeFileHashesFromBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFileHashesFromBuffer(uint8* Buffer, uint64 BufferSize, bool bDuplicateKeyMemory=false)"
  },
  {
    "label": "GetFileSHAHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileSHAHash(const TCHAR* Pathname, uint8 Hash[20], bool bIsFullPackageHash=true)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Transform(const uint8* buffer, uint64 len)"
  },
  {
    "label": "FAsyncSHAVerify()",
    "kind": "Method",
    "detail": "Function (TMap<FString,uint8*> FullFileSHAHashMap ; TMap<FString,uint8*> ScriptSHAHashMap ; } ; class FAsyncSHAVerify { protected : void* Buffer ; uint64 BufferSize ; uint8 Hash [ 2 0 ] ; FString Pathname ; bool bIsUnfoundHashAnError ; bool bShouldDeleteBuffer ; public :)",
    "insertText": "FAsyncSHAVerify(void* InBuffer, uint64 InBufferSize, bool bInShouldDeleteBuffer, const TCHAR* InPathname, bool bInIsUnfoundHashAnError) : Buffer(InBuffer) , BufferSize(InBufferSize) , Pathname(InPathname) , bIsUnfoundHashAnError(bInIsUnfoundHashAnError) , bShouldDeleteBuffer(bInShouldDeleteBuffer)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "CanAbandon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAbandon()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Buffer)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (Buffer = 0 ; } } TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "appOnFailSHAVerification()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "appOnFailSHAVerification(const TCHAR* FailedPathname, bool bFailedDueToMissingHash)"
  },
  {
    "label": "FBufferReaderWithSHA()",
    "kind": "Method",
    "detail": "Function (class FBufferReaderWithSHA final : public FBufferReaderBase { public :)",
    "insertText": "FBufferReaderWithSHA(void* Data, int64 Size, bool bInFreeOnClose, const TCHAR* SHASourcePathname, bool bIsPersistent=false, bool bInIsUnfoundHashAnError=false ) : FBufferReaderBase(Data, Size, bInFreeOnClose, bIsPersistent) , SourcePathname(SHASourcePathname) , bIsUnfoundHashAnError(bInIsUnfoundHashAnError)"
  },
  {
    "label": "FBufferReaderWithSHA()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBufferReaderWithSHA()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  }
]