[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPressureProjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPressureProjection"
  },
  {
    "label": "TPressureProjection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayFaceND . h \" # include \" Chaos / ArrayND . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / UniformGrid . h \" namespace Chaos { template<class T,int d> class TPressureProjection { public :)",
    "insertText": "TPressureProjection()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(const TUniformGrid<T, d>& Grid, TArrayFaceND<T, d>& Velocity, const TArrayND<bool, d>& Dirichlet, const TArrayFaceND<bool, d>& Neumann, const T dt)"
  },
  {
    "label": "Pressure()",
    "kind": "Method",
    "detail": "Function (TArrayND<T,d>)",
    "insertText": "Pressure(Grid), Divergence(Grid)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Grid.GetNumCells(), [&](int32 Index) { const TVector<int32, d> CellIndex = Grid.GetIndex(Index); Divergence(CellIndex) = 0; for (int32 Axis = 0; Axis < d; ++Axis) { Divergence(CellIndex) += (Velocity(MakePair(Axis, CellIndex + TVector<int32, d>::AxisVector(Axis))) - Velocity(MakePair(Axis, CellIndex))) / Grid.Dx()[Axis]; } })"
  },
  {
    "label": "MPressureRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MPressureRule(Grid, Pressure, Divergence, Dirichlet, Neumann, dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Grid.GetNumFaces(), [&](int32 Index) { const auto FaceIndex = Grid.GetFaceIndex(Index); const auto Axis = FaceIndex.First; const auto PrevIndex = FaceIndex.Second - TVector<int32, d>::AxisVector(Axis); const auto NextIndex = FaceIndex.Second; T PrevPressure = 0; T NextPressure = 0; if (NextIndex[Axis] < Grid.Counts()[Axis]) { NextPressure = Pressure(NextIndex); } if (PrevIndex[Axis] >= 0) { PrevPressure = Pressure(PrevIndex); } if (!Neumann(FaceIndex)) { Velocity(FaceIndex) -= (NextPressure - PrevPressure) / Grid.Dx()[Axis]; } })"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TFunction<)",
    "insertText": "void(const TUniformGrid<T, d>&, TArrayND<T, d>&, const TArrayND<T, d>&, const TArrayND<bool, d>&, const TArrayFaceND<bool, d>&, const T)"
  }
]