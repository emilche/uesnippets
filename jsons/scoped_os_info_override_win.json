[
  {
    "label": "OSInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OSInfo"
  },
  {
    "label": "ScopedOSInfoOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedOSInfoOverride"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ScopedOSInfoOverride()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SCOPED_OS_INFO_OVERRIDE_WIN_H_ # define BASE_TEST_SCOPED_OS_INFO_OVERRIDE_WIN_H_ # include<memory> # include \" base / memory / raw_ptr . h \" namespace base { namespace win { class OSInfo ; } } namespace base { namespace test { class ScopedOSInfoOverride { public : enum class Type { kWin11Pro,kWin11Home,kWinServer2022,kWin10Pro21H1,kWin10Pro,kWin10Home,kWinServer2016,kWin81Pro,kWinServer2012R2,kWin7ProSP1,} ;)",
    "insertText": "ScopedOSInfoOverride(Type type)"
  },
  {
    "label": "ScopedOSInfoOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedOSInfoOverride(const ScopedOSInfoOverride&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedOSInfoOverride&)",
    "insertText": "operator(const ScopedOSInfoOverride&)"
  },
  {
    "label": "ScopedOSInfoOverride()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedOSInfoOverride()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : using UniqueOsInfo = std::unique_ptr<base::win::OSInfo,)",
    "insertText": "void(*)(base::win::OSInfo*)"
  },
  {
    "label": "CreateInfoOfType()",
    "kind": "Method",
    "detail": "Function (UniqueOsInfo)",
    "insertText": "CreateInfoOfType(Type type)"
  },
  {
    "label": "deleter()",
    "kind": "Method",
    "detail": "Function (raw_ptr<base::win::OSInfo> original_info_ ; UniqueOsInfo overriding_info_ ; void)",
    "insertText": "deleter(base::win::OSInfo* info)"
  }
]