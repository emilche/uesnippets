[
  {
    "label": "silk_short_prediction_create_arch_coef_neon()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_NSQ_NEON_H # define SILK_NSQ_NEON_H # include \" cpu_support . h \" # include \" SigProc_FIX . h \" # undef silk_short_prediction_create_arch_coef OPUS_INLINE void)",
    "insertText": "silk_short_prediction_create_arch_coef_neon(opus_int32 *out, const opus_int16 *in, opus_int order)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 5 ] =)",
    "insertText": "silk_LSHIFT32(in[0], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 4 ] =)",
    "insertText": "silk_LSHIFT32(in[1], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 3 ] =)",
    "insertText": "silk_LSHIFT32(in[2], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 2 ] =)",
    "insertText": "silk_LSHIFT32(in[3], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 1 ] =)",
    "insertText": "silk_LSHIFT32(in[4], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 0 ] =)",
    "insertText": "silk_LSHIFT32(in[5], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 9 ] =)",
    "insertText": "silk_LSHIFT32(in[6], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 8 ] =)",
    "insertText": "silk_LSHIFT32(in[7], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 7 ] =)",
    "insertText": "silk_LSHIFT32(in[8], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 6 ] =)",
    "insertText": "silk_LSHIFT32(in[9], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 5 ] =)",
    "insertText": "silk_LSHIFT32(in[10], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 4 ] =)",
    "insertText": "silk_LSHIFT32(in[11], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 3 ] =)",
    "insertText": "silk_LSHIFT32(in[12], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 2 ] =)",
    "insertText": "silk_LSHIFT32(in[13], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "silk_LSHIFT32(in[14], 15)"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "silk_LSHIFT32(in[15], 15)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} else { out [ 5 ] = 0 ; out [ 4 ] = 0 ; out [ 3 ] = 0 ; out [ 2 ] = 0 ; out [ 1 ] = 0 ; out [ 0 ] = 0 ; } } # if)",
    "insertText": "defined(OPUS_ARM_PRESUME_NEON_INTR) #define silk_short_prediction_create_arch_coef(out, in, order) \\ (silk_short_prediction_create_arch_coef_neon(out, in, order)) #elif defined(OPUS_HAVE_RTCD) && defined(OPUS_ARM_MAY_HAVE_NEON_INTR) #define silk_short_prediction_create_arch_coef(out, in, order)"
  },
  {
    "label": "silk_short_prediction_create_arch_coef_neon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "silk_short_prediction_create_arch_coef_neon(out, in, order)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(0) #endif opus_int32 silk_noise_shape_quantizer_short_prediction_neon(const opus_int32 *buf32, const opus_int32 *coef32, opus_int order)"
  },
  {
    "label": "silk_NSQ_noise_shape_feedback_loop_neon()",
    "kind": "Method",
    "detail": "Function (opus_int32)",
    "insertText": "silk_NSQ_noise_shape_feedback_loop_neon(const opus_int32 *data0, opus_int32 *data1, const opus_int16 *coef, opus_int order)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OPUS_ARM_PRESUME_NEON_INTR) #undef silk_noise_shape_quantizer_short_prediction #define silk_noise_shape_quantizer_short_prediction(in, coef, coefRev, order, arch) \\ ((void)arch,silk_noise_shape_quantizer_short_prediction_neon(in, coefRev, order)) #undef silk_NSQ_noise_shape_feedback_loop #define silk_NSQ_noise_shape_feedback_loop(data0, data1, coef, order, arch) ((void)arch,silk_NSQ_noise_shape_feedback_loop_neon(data0, data1, coef, order)) #elif defined(OPUS_HAVE_RTCD) && defined(OPUS_ARM_MAY_HAVE_NEON_INTR) #undef silk_noise_shape_quantizer_short_prediction #define silk_noise_shape_quantizer_short_prediction(in, coef, coefRev, order, arch) \\ (arch == OPUS_ARCH_ARM_NEON ? \\ silk_noise_shape_quantizer_short_prediction_neon(in, coefRev, order) : \\ silk_noise_shape_quantizer_short_prediction_c(in, coef, order)) extern opus_int32 (*const SILK_NSQ_NOISE_SHAPE_FEEDBACK_LOOP_IMPL[OPUS_ARCHMASK+1])( const opus_int32 *data0, opus_int32 *data1, const opus_int16 *coef, opus_int order)"
  }
]