[
  {
    "label": "TestIOThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestIOThread"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "TestIOThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_IO_THREAD_H_ # define BASE_TEST_TEST_IO_THREAD_H_ # include \" base / callback_forward . h \" # include \" base / compiler_specific . h \" # include \" base / memory / ref_counted . h \" # include \" base / task / task_runner . h \" # include \" base / threading / thread . h \" namespace base { class TestIOThread { public : enum Mode { kAutoStart,kManualStart } ;)",
    "insertText": "TestIOThread(Mode mode)"
  },
  {
    "label": "TestIOThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestIOThread(const TestIOThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestIOThread&)",
    "insertText": "operator(const TestIOThread&)"
  },
  {
    "label": "TestIOThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestIOThread()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(const Location& from_here, base::OnceClosure task)"
  },
  {
    "label": "task_runner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "task_runner()"
  }
]