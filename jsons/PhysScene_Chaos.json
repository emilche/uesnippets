[
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "AdvanceOneTimeStepTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdvanceOneTimeStepTask"
  },
  {
    "label": "IPhysicsReplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsReplication"
  },
  {
    "label": "FPhysicsReplicationCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsReplicationCache"
  },
  {
    "label": "FPhysInterface_Chaos",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysInterface_Chaos"
  },
  {
    "label": "FChaosSolversModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosSolversModule"
  },
  {
    "label": "FForceFieldProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceFieldProxy"
  },
  {
    "label": "FSolverStateStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverStateStorage"
  },
  {
    "label": "FSkeletalMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshPhysicsProxy"
  },
  {
    "label": "FStaticMeshPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshPhysicsProxy"
  },
  {
    "label": "FPerSolverFieldSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerSolverFieldSystem"
  },
  {
    "label": "IPhysicsProxyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsProxyBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UChaosEventRelay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChaosEventRelay"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FPhysicsReplicationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsReplicationFactory"
  },
  {
    "label": "FContactModifyCallbackFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContactModifyCallbackFactory"
  },
  {
    "label": "FConstraintInstanceBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintInstanceBase"
  },
  {
    "label": "FPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsProxy"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FCollisionEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionEventData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRawEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRawEventHandler"
  },
  {
    "label": "FAccelerationStructureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccelerationStructureHandle"
  },
  {
    "label": "ISpatialAcceleration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAcceleration"
  },
  {
    "label": "ISpatialAccelerationCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAccelerationCollection"
  },
  {
    "label": "TArrayCollectionArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayCollectionArray"
  },
  {
    "label": "FConstraintBrokenDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintBrokenDelegateWrapper"
  },
  {
    "label": "FConstraintViolatedDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintViolatedDelegateWrapper"
  },
  {
    "label": "FPlasticDeformationDelegateWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlasticDeformationDelegateWrapper"
  },
  {
    "label": "FPhysScene_Chaos",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysScene_Chaos"
  },
  {
    "label": "at",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "at"
  },
  {
    "label": "OwnerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OwnerType"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FUniqueContactPairKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueContactPairKey"
  },
  {
    "label": "FDeferredKinematicUpdateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredKinematicUpdateInfo"
  },
  {
    "label": "FAsyncPhysicsTickCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncPhysicsTickCallback"
  },
  {
    "label": "ChaosInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChaosInterface"
  },
  {
    "label": "FScopedSceneLock_Chaos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSceneLock_Chaos"
  },
  {
    "label": "DispatchOnBroken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnBroken()"
  },
  {
    "label": "DispatchOnViolated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOnViolated(float LinearViolation, float AngularViolation)"
  },
  {
    "label": "DispatchPlasticDeformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPlasticDeformation()"
  },
  {
    "label": "FPhysScene_Chaos()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPhysScene_Chaos(AActor* InSolverActor=nullptr\n#if CHAOS_DEBUG_NAME\n\t, const FName& DebugName=NAME_None\n#endif\n)"
  },
  {
    "label": "RegisterForCollisionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForCollisionEvents(UPrimitiveComponent* Component)"
  },
  {
    "label": "UnRegisterForCollisionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterForCollisionEvents(UPrimitiveComponent* Component)"
  },
  {
    "label": "RegisterForGlobalCollisionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForGlobalCollisionEvents(UPrimitiveComponent* Component)"
  },
  {
    "label": "UnRegisterForGlobalCollisionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterForGlobalCollisionEvents(UPrimitiveComponent* Component)"
  },
  {
    "label": "RegisterForGlobalRemovalEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForGlobalRemovalEvents(UPrimitiveComponent* Component)"
  },
  {
    "label": "UnRegisterForGlobalRemovalEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterForGlobalRemovalEvents(UPrimitiveComponent* Component)"
  },
  {
    "label": "RegisterAsyncPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsyncPhysicsTickComponent(UActorComponent* Component)"
  },
  {
    "label": "UnregisterAsyncPhysicsTickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAsyncPhysicsTickComponent(UActorComponent* Component)"
  },
  {
    "label": "RegisterAsyncPhysicsTickActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsyncPhysicsTickActor(AActor* Actor)"
  },
  {
    "label": "UnregisterAsyncPhysicsTickActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAsyncPhysicsTickActor(AActor* Actor)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObject(UPrimitiveComponent* Component, FSkeletalMeshPhysicsProxy* InObject)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObject(UPrimitiveComponent* Component, FStaticMeshPhysicsProxy* InObject)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObject(UPrimitiveComponent* Component, Chaos::FSingleParticlePhysicsProxy* InObject)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObject(UPrimitiveComponent* Component, FGeometryCollectionPhysicsProxy* InObject)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObject(UPrimitiveComponent* Component, Chaos::FClusterUnionPhysicsProxy* InObject)"
  },
  {
    "label": "AddToComponentMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToComponentMaps(UPrimitiveComponent* Component, IPhysicsProxyBase* InObject)"
  },
  {
    "label": "RemoveFromComponentMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromComponentMaps(IPhysicsProxyBase* InObject)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(FSkeletalMeshPhysicsProxy* InObject)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(FStaticMeshPhysicsProxy* InObject)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(Chaos::FSingleParticlePhysicsProxy* InObject)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(FGeometryCollectionPhysicsProxy* InObject)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(Chaos::FClusterUnionPhysicsProxy* InObject)"
  },
  {
    "label": "SetPhysicsReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsReplication(IPhysicsReplication* InPhysicsReplication)"
  },
  {
    "label": "OnWorldEndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldEndPlay()"
  },
  {
    "label": "OnWorldBeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldBeginPlay()"
  },
  {
    "label": "AddAggregateToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAggregateToScene(const FPhysicsAggregateHandle& InAggregate)"
  },
  {
    "label": "SetOwningWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningWorld(UWorld* InOwningWorld)"
  },
  {
    "label": "ResimNFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResimNFrames(int32 NumFrames)"
  },
  {
    "label": "RemoveBodyInstanceFromPendingLists_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBodyInstanceFromPendingLists_AssumesLocked(FBodyInstance* BodyInstance, int32 SceneType)"
  },
  {
    "label": "AddCustomPhysics_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomPhysics_AssumesLocked(FBodyInstance* BodyInstance, FCalculateCustomPhysics& CalculateCustomPhysics)"
  },
  {
    "label": "AddForce_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce_AssumesLocked(FBodyInstance* BodyInstance, const FVector& Force, bool bAllowSubstepping, bool bAccelChange)"
  },
  {
    "label": "AddForceAtPosition_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPosition_AssumesLocked(FBodyInstance* BodyInstance, const FVector& Force, const FVector& Position, bool bAllowSubstepping, bool bIsLocalForce = false)"
  },
  {
    "label": "AddRadialForceToBody_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForceToBody_AssumesLocked(FBodyInstance* BodyInstance, const FVector& Origin, const float Radius, const float Strength, const uint8 Falloff, bool bAccelChange, bool bAllowSubstepping)"
  },
  {
    "label": "ClearForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearForces_AssumesLocked(FBodyInstance* BodyInstance, bool bAllowSubstepping)"
  },
  {
    "label": "AddTorque_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque_AssumesLocked(FBodyInstance* BodyInstance, const FVector& Torque, bool bAllowSubstepping, bool bAccelChange)"
  },
  {
    "label": "ClearTorques_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques_AssumesLocked(FBodyInstance* BodyInstance, bool bAllowSubstepping)"
  },
  {
    "label": "SetKinematicTarget_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKinematicTarget_AssumesLocked(FBodyInstance* BodyInstance, const FTransform& TargetTM, bool bAllowSubstepping)"
  },
  {
    "label": "MarkForPreSimKinematicUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MarkForPreSimKinematicUpdate(USkeletalMeshComponent* InSkelComp, ETeleportType InTeleport, bool bNeedsSkinning)"
  },
  {
    "label": "ClearPreSimKinematicUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPreSimKinematicUpdate(USkeletalMeshComponent* InSkelComp)"
  },
  {
    "label": "AddPendingOnConstraintBreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingOnConstraintBreak(FConstraintInstance* ConstraintInstance, int32 SceneType)"
  },
  {
    "label": "AddPendingSleepingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingSleepingEvent(FBodyInstance* BI, ESleepEvent SleepEventType, int32 SceneType)"
  },
  {
    "label": "DirtyElementCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DirtyElementCount(Chaos::ISpatialAccelerationCollection<Chaos::FAccelerationStructureHandle, Chaos::FReal, 3>& Collection)"
  },
  {
    "label": "SupportsOriginShifting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsOriginShifting()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(FVector InOffset)"
  },
  {
    "label": "HandleExecCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExecCommands(const TCHAR* Cmd, FOutputDevice* Ar)"
  },
  {
    "label": "ListAwakeRigidBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListAwakeRigidBodies(bool bIncludeKinematic)"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync()"
  },
  {
    "label": "SetPhysXTreeRebuildRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysXTreeRebuildRate(int32 RebuildRate)"
  },
  {
    "label": "EnsureCollisionTreeIsBuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCollisionTreeIsBuilt(UWorld* World)"
  },
  {
    "label": "KillVisualDebugger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillVisualDebugger()"
  },
  {
    "label": "ExecPxVis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecPxVis(uint32 SceneType, const TCHAR* Cmd, FOutputDevice* Ar)"
  },
  {
    "label": "ExecApexVis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecApexVis(uint32 SceneType, const TCHAR* Cmd, FOutputDevice* Ar)"
  },
  {
    "label": "DeferPhysicsStateCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferPhysicsStateCreation(UPrimitiveComponent* Component)"
  },
  {
    "label": "RemoveDeferredPhysicsStateCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeferredPhysicsStateCreation(UPrimitiveComponent* Component)"
  },
  {
    "label": "ProcessDeferredCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredCreatePhysicsState()"
  },
  {
    "label": "RegisterForReplicationCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterForReplicationCache(UPrimitiveComponent* RootComponent)"
  },
  {
    "label": "CreatePhysicsReplicationCache()",
    "kind": "Method",
    "detail": "Function (created)",
    "insertText": "CreatePhysicsReplicationCache()"
  },
  {
    "label": "CreatePhysicsReplicationCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePhysicsReplicationCache()"
  },
  {
    "label": "HandleEachCollisionEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEachCollisionEvent(const TArray<int32>& CollisionIndices, IPhysicsProxyBase* PhysicsProxy0, UPrimitiveComponent* const Comp0, Chaos::FCollisionDataArray const& CollisionData, Chaos::FReal MinDeltaVelocityThreshold)"
  },
  {
    "label": "HandleGlobalCollisionEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGlobalCollisionEvent(Chaos::FCollisionDataArray const& CollisionData)"
  },
  {
    "label": "HandleCollisionEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollisionEvents(const Chaos::FCollisionEventData& CollisionData)"
  },
  {
    "label": "DispatchPendingCollisionNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPendingCollisionNotifies()"
  },
  {
    "label": "HandleBreakingEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBreakingEvents(const Chaos::FBreakingEventData& Event)"
  },
  {
    "label": "HandleRemovalEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRemovalEvents(const Chaos::FRemovalEventData& Event)"
  },
  {
    "label": "HandleCrumblingEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCrumblingEvents(const Chaos::FCrumblingEventData& Event)"
  },
  {
    "label": "OnUpdateWorldPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateWorldPause()"
  },
  {
    "label": "EnableAsyncPhysicsTickCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAsyncPhysicsTickCallback()"
  },
  {
    "label": "AddSpringConstraint()",
    "kind": "Method",
    "detail": "Function (FPhysicsConstraintHandle)",
    "insertText": "AddSpringConstraint(const TArray< TPair<FPhysicsActorHandle,FPhysicsActorHandle> >& Constraint)"
  },
  {
    "label": "RemoveSpringConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpringConstraint(const FPhysicsConstraintHandle& Constraint)"
  },
  {
    "label": "UpdateKinematicsOnDeferredSkelMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKinematicsOnDeferredSkelMeshes()"
  }
]