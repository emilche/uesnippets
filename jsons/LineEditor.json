[
  {
    "label": "LineEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LineEditor"
  },
  {
    "label": "CompletionAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompletionAction"
  },
  {
    "label": "ActionKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ActionKind"
  },
  {
    "label": "Completion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Completion"
  },
  {
    "label": "InternalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalData"
  },
  {
    "label": "CompleterConcept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompleterConcept"
  },
  {
    "label": "ListCompleterConcept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListCompleterConcept"
  },
  {
    "label": "CompleterModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompleterModel"
  },
  {
    "label": "ListCompleterModel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListCompleterModel"
  },
  {
    "label": "LineEditor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LINEEDITOR_LINEEDITOR_H # define LLVM_LINEEDITOR_LINEEDITOR_H # include \" llvm / ADT / Optional . h \" # include \" llvm / ADT / StringRef . h \" # include<cstdio> # include<memory> # include<string> # include<vector> namespace llvm { class LineEditor { public :)",
    "insertText": "LineEditor(StringRef ProgName, StringRef HistoryPath = \"\", FILE *In = stdin, FILE *Out = stdout, FILE *Err = stderr)"
  },
  {
    "label": "LineEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LineEditor()"
  },
  {
    "label": "readLine()",
    "kind": "Method",
    "detail": "Function (llvm::Optional<std::string>)",
    "insertText": "readLine()"
  },
  {
    "label": "saveHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "saveHistory()"
  },
  {
    "label": "loadHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "loadHistory()"
  },
  {
    "label": "getDefaultHistoryPath()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getDefaultHistoryPath(StringRef ProgName)"
  },
  {
    "label": "Completion()",
    "kind": "Method",
    "detail": "Function (struct CompletionAction { enum ActionKind { AK_Insert,AK_ShowCompletions } ; ActionKind Kind ; std::string Text ; std::vector<std::string> Completions ; } ; struct Completion {)",
    "insertText": "Completion()"
  },
  {
    "label": "Completion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Completion(const std::string &TypedText, const std::string &DisplayText) : TypedText(TypedText), DisplayText(DisplayText)"
  },
  {
    "label": "setCompleter()",
    "kind": "Method",
    "detail": "Function (} std::string TypedText ; std::string DisplayText ; } ; template<T> void)",
    "insertText": "setCompleter(T Comp)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (Completer .)",
    "insertText": "reset(new CompleterModel<T>(Comp))"
  },
  {
    "label": "setListCompleter()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "setListCompleter(T Comp)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (Completer .)",
    "insertText": "reset(new ListCompleterModel<T>(Comp))"
  },
  {
    "label": "getCompletionAction()",
    "kind": "Method",
    "detail": "Function (} CompletionAction)",
    "insertText": "getCompletionAction(StringRef Buffer, size_t Pos)"
  },
  {
    "label": "getPrompt()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getPrompt()"
  },
  {
    "label": "CompleterConcept()",
    "kind": "Method",
    "detail": "Function (Prompt = P ; } struct InternalData ; private : std::string Prompt ; std::string HistoryPath ; std::unique_ptr<InternalData> Data ; struct CompleterConcept { ~)",
    "insertText": "CompleterConcept()"
  },
  {
    "label": "complete()",
    "kind": "Method",
    "detail": "Function (CompletionAction)",
    "insertText": "complete(StringRef Buffer, size_t Pos)"
  },
  {
    "label": "ListCompleterConcept()",
    "kind": "Method",
    "detail": "Function (} ; struct ListCompleterConcept : CompleterConcept { ~)",
    "insertText": "ListCompleterConcept()"
  },
  {
    "label": "getCommonPrefix()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getCommonPrefix(const std::vector<Completion> &Comps)"
  },
  {
    "label": "getCompletions()",
    "kind": "Method",
    "detail": "Function (std::vector<Completion>)",
    "insertText": "getCompletions(StringRef Buffer, size_t Pos)"
  },
  {
    "label": "CompleterModel()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct CompleterModel : CompleterConcept {)",
    "insertText": "CompleterModel(T Value) : Value(Value)"
  },
  {
    "label": "ListCompleterModel()",
    "kind": "Method",
    "detail": "Function (} T Value ; } ; template<T> struct ListCompleterModel : ListCompleterConcept {)",
    "insertText": "ListCompleterModel(T Value) : Value(Value)"
  }
]