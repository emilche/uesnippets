[
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "FLinuxApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinuxApplication"
  },
  {
    "label": "FWindowProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowProperties"
  },
  {
    "label": "UserDefinedEvents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UserDefinedEvents"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "FTouchContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTouchContext"
  },
  {
    "label": "SDLControllerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDLControllerState"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "AddPendingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingEvent( SDL_Event event )"
  },
  {
    "label": "RemoveEventWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEventWindow(SDL_HWindow Window)"
  },
  {
    "label": "RemoveRevertFocusWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRevertFocusWindow(SDL_HWindow HWnd)"
  },
  {
    "label": "RaiseNotificationWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseNotificationWindows( const TSharedPtr< FLinuxWindow >& ParentWindow)"
  },
  {
    "label": "RemoveNotificationWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNotificationWindow(SDL_HWindow HWnd)"
  },
  {
    "label": "CheckIfApplicatioNeedsDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIfApplicatioNeedsDeactivation()"
  },
  {
    "label": "WindowHitTest()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "WindowHitTest( const TSharedPtr< FLinuxWindow > &window, int x, int y )"
  },
  {
    "label": "SaveWindowPropertiesForEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveWindowPropertiesForEventLoop(void)"
  },
  {
    "label": "ClearWindowPropertiesAfterEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWindowPropertiesAfterEventLoop(void)"
  },
  {
    "label": "GetWindowPropertiesInEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindowPropertiesInEventLoop(SDL_HWindow NativeWindow, FWindowProperties& Properties)"
  },
  {
    "label": "FLinuxApplication()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FLinuxApplication()"
  },
  {
    "label": "ConvertChar()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "ConvertChar( SDL_Keysym Keysym )"
  },
  {
    "label": "UpdateMouseCaptureWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMouseCaptureWindow( SDL_HWindow TargetWindow )"
  },
  {
    "label": "ProcessDeferredMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredMessage( SDL_Event Event )"
  },
  {
    "label": "GeneratesKeyCharMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratesKeyCharMessage(const SDL_KeyboardEvent & KeyDownEvent)"
  },
  {
    "label": "ActivateApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateApplication()"
  },
  {
    "label": "DeactivateApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateApplication()"
  },
  {
    "label": "ActivateWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateWindow(const TSharedPtr< FLinuxWindow >& Window)"
  },
  {
    "label": "ActivateRootWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateRootWindow(const TSharedPtr< FLinuxWindow >& Window)"
  },
  {
    "label": "HandleCursorCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCursorCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleWindowCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleWindowCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "RefreshDisplayCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshDisplayCache()"
  },
  {
    "label": "GetTouchEventLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTouchEventLocation(SDL_HWindow NativeWindow, SDL_Event TouchEvent)"
  },
  {
    "label": "GetFirstFreeTouchId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFirstFreeTouchId()"
  },
  {
    "label": "AddGameController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameController(int Index)"
  },
  {
    "label": "RemoveGameController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGameController(SDL_JoystickID Id)"
  },
  {
    "label": "UpdateHapticEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHapticEffect()"
  }
]