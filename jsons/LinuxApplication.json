[
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "FLinuxApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinuxApplication"
  },
  {
    "label": "FWindowProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowProperties"
  },
  {
    "label": "UserDefinedEvents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UserDefinedEvents"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "FTouchContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTouchContext"
  },
  {
    "label": "SDLControllerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDLControllerState"
  },
  {
    "label": "CreateLinuxApplication()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Map . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" # include \" Misc / CoreMisc . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" GenericPlatform / GenericWindowDefinition . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" Linux / LinuxWindow . h \" # include \" Linux / LinuxCursor . h \" class IInputDevice ; class FLinuxApplication : public GenericApplication,public FSelfRegisteringExec,public IInputInterface { public : struct FWindowProperties { FVector2D Location ; FVector2D Size ; } ; FLinuxApplication*)",
    "insertText": "CreateLinuxApplication()"
  },
  {
    "label": "FLinuxApplication()",
    "kind": "Method",
    "detail": "Function (enum UserDefinedEvents { CheckForDeactivation } ; public : ~)",
    "insertText": "FLinuxApplication()"
  },
  {
    "label": "DestroyApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyApplication()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetMessageHandler(const TSharedRef< class FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollGameDeviceState(const float TimeDelta)"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages(const float TimeDelta)"
  },
  {
    "label": "ProcessDeferredEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredEvents(const float TimeDelta)"
  },
  {
    "label": "MakeWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGenericWindow>)",
    "insertText": "MakeWindow()"
  },
  {
    "label": "InitializeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWindow(const TSharedRef< FGenericWindow >& Window, const TSharedRef< FGenericWindowDefinition >& InDefinition, const TSharedPtr< FGenericWindow >& InParent, const bool bShowImmediately)"
  },
  {
    "label": "SetCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCapture(const TSharedPtr< FGenericWindow >& InWindow)"
  },
  {
    "label": "GetCapture()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCapture(void)"
  },
  {
    "label": "SetHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPrecisionMouseMode(const bool Enable, const TSharedPtr< FGenericWindow >& InWindow)"
  },
  {
    "label": "IsUsingHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHighPrecisionMouseMode()"
  },
  {
    "label": "GetModifierKeys()",
    "kind": "Method",
    "detail": "Function (FModifierKeysState)",
    "insertText": "GetModifierKeys()"
  },
  {
    "label": "GetWorkArea()",
    "kind": "Method",
    "detail": "Function (FPlatformRect)",
    "insertText": "GetWorkArea(const FPlatformRect& CurrentWindow)"
  },
  {
    "label": "GetWindowTransparencySupport()",
    "kind": "Method",
    "detail": "Function (EWindowTransparency)",
    "insertText": "GetWindowTransparencySupport()"
  },
  {
    "label": "RemoveEventWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEventWindow(SDL_HWindow Window)"
  },
  {
    "label": "RemoveRevertFocusWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRevertFocusWindow(SDL_HWindow HWnd)"
  },
  {
    "label": "RaiseNotificationWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RaiseNotificationWindows(const TSharedPtr< FLinuxWindow >& ParentWindow)"
  },
  {
    "label": "RemoveNotificationWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNotificationWindow(SDL_HWindow HWnd)"
  },
  {
    "label": "CheckIfApplicatioNeedsDeactivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIfApplicatioNeedsDeactivation()"
  },
  {
    "label": "WindowHitTest()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "WindowHitTest(const TSharedPtr< FLinuxWindow > &window, int x, int y)"
  },
  {
    "label": "FindWindowBySDLWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLinuxWindow>)",
    "insertText": "FindWindowBySDLWindow(SDL_Window *win)"
  },
  {
    "label": "IsCursorDirectlyOverSlateWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCursorDirectlyOverSlateWindow()"
  },
  {
    "label": "GetWindowUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetWindowUnderCursor()"
  },
  {
    "label": "SaveWindowPropertiesForEventLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveWindowPropertiesForEventLoop(void)"
  },
  {
    "label": "ClearWindowPropertiesAfterEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWindowPropertiesAfterEventLoop(void)"
  },
  {
    "label": "GetWindowPropertiesInEventLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindowPropertiesInEventLoop(SDL_HWindow NativeWindow, FWindowProperties& Properties)"
  },
  {
    "label": "IsMouseAttached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMouseAttached()"
  },
  {
    "label": "GetCurrentActiveWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLinuxWindow>)",
    "insertText": "GetCurrentActiveWindow()"
  },
  {
    "label": "ConvertChar()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "ConvertChar(SDL_Keysym Keysym)"
  },
  {
    "label": "FindEventWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLinuxWindow>)",
    "insertText": "FindEventWindow(SDL_Event *Event, bool& bOutWindowlessEvent)"
  },
  {
    "label": "UpdateMouseCaptureWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMouseCaptureWindow(SDL_HWindow TargetWindow)"
  },
  {
    "label": "ProcessDeferredMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredMessage(SDL_Event Event)"
  },
  {
    "label": "GeneratesKeyCharMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratesKeyCharMessage(const SDL_KeyboardEvent & KeyDownEvent)"
  },
  {
    "label": "ActivateApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateApplication()"
  },
  {
    "label": "DeactivateApplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateApplication()"
  },
  {
    "label": "ActivateWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateWindow(const TSharedPtr< FLinuxWindow >& Window)"
  },
  {
    "label": "ActivateRootWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateRootWindow(const TSharedPtr< FLinuxWindow >& Window)"
  },
  {
    "label": "GetRootWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FLinuxWindow>)",
    "insertText": "GetRootWindow(const TSharedPtr< FLinuxWindow >& Window)"
  },
  {
    "label": "HandleCursorCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCursorCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleWindowCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleWindowCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "RefreshDisplayCache()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RefreshDisplayCache()"
  },
  {
    "label": "GetTouchEventLocation()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTouchEventLocation(SDL_HWindow NativeWindow, SDL_Event TouchEvent)"
  },
  {
    "label": "GetFirstFreeTouchId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFirstFreeTouchId()"
  },
  {
    "label": "GetInputInterface()",
    "kind": "Method",
    "detail": "Function (public : IInputInterface*)",
    "insertText": "GetInputInterface()"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &Values)"
  },
  {
    "label": "SetHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticFeedbackValues(int32 ControllerId, int32 Hand, const FHapticFeedbackValues& Values)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  },
  {
    "label": "AddGameController()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddGameController(int Index)"
  },
  {
    "label": "RemoveGameController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGameController(SDL_JoystickID Id)"
  },
  {
    "label": "SDLControllerState()",
    "kind": "Method",
    "detail": "Function (struct FTouchContext { int TouchIndex ; SDL_TouchID DeviceId ; FVector2D Location ; } ; TMap<uint64,FTouchContext> Touches ; TArray<TOptional<uint64>> TouchIds ; struct SDLControllerState { SDL_GameController* Controller ; bool AnalogOverThreshold [ 1 0 ] ; FInputDeviceId DeviceId ; TMap<FGamepadKeyNames::Type,float> AxisEvents ; SDL_Haptic* Haptic ; int EffectId ; bool bEffectRunning ; FForceFeedbackValues ForceFeedbackValues ;)",
    "insertText": "SDLControllerState() : Controller(nullptr) , DeviceId(INPUTDEVICEID_NONE) , Haptic(nullptr) , EffectId(-1) , bEffectRunning(false)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(AnalogOverThreshold)"
  },
  {
    "label": "UpdateHapticEffect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHapticEffect()"
  }
]