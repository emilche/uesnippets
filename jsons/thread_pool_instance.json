[
  {
    "label": "V8Platform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V8Platform"
  },
  {
    "label": "BrowserMainLoopTest_CreateThreadsInSingleProcess_Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BrowserMainLoopTest_CreateThreadsInSingleProcess_Test"
  },
  {
    "label": "WorkerThreadObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkerThreadObserver"
  },
  {
    "label": "ThreadPoolTestHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadPoolTestHelpers"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "gin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gin"
  },
  {
    "label": "content",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "content"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_THREAD_POOL_INSTANCE_H_ # define BASE_TASK_THREAD_POOL_THREAD_POOL_INSTANCE_H_ # include<memory> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / gtest_prod_util . h \" # include \" base / strings / string_piece . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / task / single_thread_task_runner_thread_mode . h \" # include \" base / task / task_runner . h \" # include \" base / task / task_traits . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" namespace gin { class V8Platform ; } namespace content { class BrowserMainLoopTest_CreateThreadsInSingleProcess_Test ; } namespace base { class WorkerThreadObserver ; class ThreadPoolTestHelpers ; class BASE_EXPORT ThreadPoolInstance { public : struct BASE_EXPORT InitParams { enum class CommonThreadPoolEnvironment { DEFAULT,# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "InitParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitParams(size_t max_num_foreground_threads_in)"
  },
  {
    "label": "InitParams()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InitParams()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (size_t max_num_foreground_threads ; CommonThreadPoolEnvironment common_thread_pool_environment = CommonThreadPoolEnvironment::DEFAULT ; TimeDelta suggested_reclaim_time = # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) Minutes(5)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "Seconds(30)"
  },
  {
    "label": "ScopedExecutionFence()",
    "kind": "Method",
    "detail": "Function (# endif } ; class BASE_EXPORT ScopedExecutionFence { public :)",
    "insertText": "ScopedExecutionFence()"
  },
  {
    "label": "ScopedExecutionFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedExecutionFence(const ScopedExecutionFence&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedExecutionFence&)",
    "insertText": "operator(const ScopedExecutionFence&)"
  },
  {
    "label": "ScopedBestEffortExecutionFence()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ScopedBestEffortExecutionFence { public :)",
    "insertText": "ScopedBestEffortExecutionFence()"
  },
  {
    "label": "ScopedBestEffortExecutionFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedBestEffortExecutionFence(const ScopedBestEffortExecutionFence&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedBestEffortExecutionFence&)",
    "insertText": "operator(const ScopedBestEffortExecutionFence&)"
  },
  {
    "label": "ThreadPoolInstance()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "ThreadPoolInstance()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const InitParams& init_params, WorkerThreadObserver* worker_thread_observer = nullptr)"
  },
  {
    "label": "WasStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasStarted()"
  },
  {
    "label": "WasStartedUnsafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasStartedUnsafe()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FlushForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushForTesting()"
  },
  {
    "label": "FlushAsyncForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAsyncForTesting(OnceClosure flush_callback)"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_NACL) static void CreateAndStartWithDefaultParams(StringPiece name)"
  },
  {
    "label": "StartWithDefaultParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWithDefaultParams()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Create(StringPiece name)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(std::unique_ptr<ThreadPoolInstance> thread_pool)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ThreadPoolInstance*)",
    "insertText": "Get()"
  },
  {
    "label": "GetMaxConcurrentNonBlockedTasksWithTraitsDeprecated()",
    "kind": "Method",
    "detail": "Function (private : class ThreadPoolTestHelpers ; class gin::V8Platform ; class content::BrowserMainLoopTest_CreateThreadsInSingleProcess_Test ; size_t)",
    "insertText": "GetMaxConcurrentNonBlockedTasksWithTraitsDeprecated(const TaskTraits& traits)"
  },
  {
    "label": "BeginFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFence()"
  },
  {
    "label": "EndFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFence()"
  },
  {
    "label": "BeginBestEffortFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBestEffortFence()"
  },
  {
    "label": "EndBestEffortFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBestEffortFence()"
  }
]