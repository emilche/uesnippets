[
  {
    "label": "hex_encode()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_STRING_ENCODE_H_ # define RTC_BASE_STRING_ENCODE_H_ # include<stddef . h> # include<string> # include<type_traits> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / string_to_number . h \" namespace rtc { std::string)",
    "insertText": "hex_encode(absl::string_view str)"
  },
  {
    "label": "hex_encode_with_delimiter()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "hex_encode_with_delimiter(absl::string_view source, char delimiter)"
  },
  {
    "label": "hex_decode()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "hex_decode(ArrayView<char> buffer, absl::string_view source)"
  },
  {
    "label": "hex_decode_with_delimiter()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "hex_decode_with_delimiter(ArrayView<char> buffer, absl::string_view source, char delimiter)"
  },
  {
    "label": "split()",
    "kind": "Method",
    "detail": "Function (std::vector<absl::string_view>)",
    "insertText": "split(absl::string_view source, char delimiter)"
  },
  {
    "label": "tokenize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "tokenize(absl::string_view source, char delimiter, std::vector<std::string>* fields)"
  },
  {
    "label": "tokenize_first()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tokenize_first(absl::string_view source, char delimiter, std::string* token, std::string* rest)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(bool b)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(absl::string_view s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(const char* s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(short s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(unsigned short s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(int s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(unsigned int s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(long int s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(unsigned long int s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(long long int s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(unsigned long long int s)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(double t)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(long double t)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString(const void* p)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<T,std::enable_if<std::is_arithmetic<T>::value&& ! std::is_same<T,bool>::value,int>::type = 0> bool)",
    "insertText": "FromString(absl::string_view s, T* t)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(t)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (absl::optional<T> result = StringToNumber<)",
    "insertText": "T(s)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FromString(absl::string_view s, bool* b)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "FromString(absl::string_view str)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (T val ;)",
    "insertText": "FromString(str, &val)"
  }
]