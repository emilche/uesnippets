[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "IMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMPCollector"
  },
  {
    "label": "FInstigator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstigator"
  },
  {
    "label": "ICookInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookInfo"
  },
  {
    "label": "FDelegates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelegates"
  },
  {
    "label": "FCookLoadScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookLoadScope"
  },
  {
    "label": "EINSTIGATOR_VALUES()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" UObject / CookEnums . h \" # include \" UObject / NameTypes . h \" # endif # if WITH_EDITOR enum class EDataValidationResult : uint8 ; class FDataValidationContext ; class ITargetPlatform ; class UPackage ; namespace UE::Cook { class IMPCollector ; } namespace UE::Cook { # define)",
    "insertText": "EINSTIGATOR_VALUES(CallbackMacro) \\ \\ CallbackMacro(InvalidCategory, true) \\ CallbackMacro(NotYetRequested, true) \\ CallbackMacro(Unspecified, false) \\ CallbackMacro(StartupPackage, true) \\ CallbackMacro(AlwaysCookMap, true) \\ CallbackMacro(IniMapSection, false) \\ CallbackMacro(IniAllMaps, true) \\ CallbackMacro(CommandLinePackage, true) \\ CallbackMacro(CommandLineDirectory, true) \\ CallbackMacro(DirectoryToAlwaysCook, false) \\ CallbackMacro(FullDepotSearch, true) \\ CallbackMacro(GameDefaultObject, false) \\ CallbackMacro(InputSettingsIni, true) \\ CallbackMacro(StartupSoftObjectPath, true) \\ CallbackMacro(PackagingSettingsMapToCook, true) \\ CallbackMacro(CookModificationDelegate, true) \\ CallbackMacro(ModifyCookDelegate, true) \\ CallbackMacro(AssetManagerModifyCook, true) \\ CallbackMacro(AssetManagerModifyDLCCook, true) \\ CallbackMacro(TargetPlatformExtraPackagesToCook, true) \\ CallbackMacro(ConsoleCommand, true) \\ CallbackMacro(CookOnTheFly, true) \\ CallbackMacro(IterativeCook, true) \\ CallbackMacro(PreviousAssetRegistry, true) \\ CallbackMacro(RequestPackageFunction, true) \\ CallbackMacro(Dependency, false) \\ CallbackMacro(HardDependency, false) \\ CallbackMacro(HardEditorOnlyDependency, false) \\ CallbackMacro(SoftDependency, false) \\ CallbackMacro(Unsolicited, false) \\ CallbackMacro(EditorOnlyLoad, false) \\ CallbackMacro(SaveTimeHardDependency, false) \\ CallbackMacro(SaveTimeSoftDependency, false) \\ CallbackMacro(ForceExplorableSaveTimeSoftDependency, false) \\ CallbackMacro(GeneratedPackage, false)"
  },
  {
    "label": "EINSTIGATOR_VALUE_CALLBACK()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EINSTIGATOR_VALUE_CALLBACK(Name, bAllowUnparameterized) Name, EINSTIGATOR_VALUES(EINSTIGATOR_VALUE_CALLBACK)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EInstigator Value)"
  },
  {
    "label": "FInstigator()",
    "kind": "Method",
    "detail": "Function (struct FInstigator { FName Referencer ; EInstigator Category ;)",
    "insertText": "FInstigator() : Category(EInstigator::InvalidCategory)"
  },
  {
    "label": "FInstigator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInstigator(EInstigator InCategory, FName InReferencer = NAME_None) : Referencer(InReferencer), Category(InCategory)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetInstigator()",
    "kind": "Method",
    "detail": "Function (} ; class ICookInfo { public : FInstigator)",
    "insertText": "GetInstigator(FName PackageName)"
  },
  {
    "label": "GetInstigatorChain()",
    "kind": "Method",
    "detail": "Function (TArray<FInstigator>)",
    "insertText": "GetInstigatorChain(FName PackageName)"
  },
  {
    "label": "GetCookType()",
    "kind": "Method",
    "detail": "Function (UE::Cook::ECookType)",
    "insertText": "GetCookType()"
  },
  {
    "label": "GetCookingDLC()",
    "kind": "Method",
    "detail": "Function (UE::Cook::ECookingDLC)",
    "insertText": "GetCookingDLC()"
  },
  {
    "label": "GetProcessType()",
    "kind": "Method",
    "detail": "Function (UE::Cook::EProcessType)",
    "insertText": "GetProcessType()"
  },
  {
    "label": "IsIterative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIterative()"
  },
  {
    "label": "GetSessionPlatforms()",
    "kind": "Method",
    "detail": "Function (TArray<const ITargetPlatform*>)",
    "insertText": "GetSessionPlatforms()"
  },
  {
    "label": "GetCookOutputFolder()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCookOutputFolder(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RegisterCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCollector(IMPCollector* Collector, UE::Cook::EProcessType ProcessType=UE::Cook::EProcessType::AllMPCook)"
  },
  {
    "label": "UnregisterCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCollector(IMPCollector* Collector)"
  },
  {
    "label": "GetCulturesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCulturesToCook(TArray<FString>& OutCulturesToCook)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FCookInfoEvent, ICookInfo&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(EDataValidationResult, FValidateSourcePackage, UPackage* , FDataValidationContext&)"
  },
  {
    "label": "GetReferencedSetFilename()",
    "kind": "Method",
    "detail": "Function (FCookInfoEvent CookStarted ; FCookInfoEvent CookFinished ; FValidateSourcePackage ValidateSourcePackage ; } ; const TCHAR*)",
    "insertText": "GetReferencedSetFilename()"
  },
  {
    "label": "FCookLoadScope()",
    "kind": "Method",
    "detail": "Function (} enum class ECookLoadType : uint8 { Unexpected,EditorOnly,UsedInGame,} ; struct FCookLoadScope {)",
    "insertText": "FCookLoadScope(ECookLoadType ScopeType)"
  },
  {
    "label": "FCookLoadScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCookLoadScope()"
  },
  {
    "label": "GetCurrentValue()",
    "kind": "Method",
    "detail": "Function (ECookLoadType)",
    "insertText": "GetCurrentValue()"
  }
]