[
  {
    "label": "CordRepCrc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepCrc"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_CRC_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_CRC_H_ # include<cassert> # include<cstdint> # include \" absl / base / config . h \" # include \" absl / base / optimization . h \" # include \" absl / strings / internal / cord_internal . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { struct CordRepCrc : public CordRep { CordRep* child ; uint32_t crc ; CordRepCrc*)",
    "insertText": "New(CordRep* child, uint32_t crc)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(CordRepCrc* node)"
  },
  {
    "label": "RemoveCrcNode()",
    "kind": "Method",
    "detail": "Function (} ; CordRep*)",
    "insertText": "RemoveCrcNode(CordRep* rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(rep != nullptr)"
  },
  {
    "label": "crc()",
    "kind": "Method",
    "detail": "Function (child)",
    "insertText": "crc()"
  },
  {
    "label": "Ref()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Ref(child)"
  },
  {
    "label": "Unref()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unref(rep)"
  },
  {
    "label": "SkipCrcNode()",
    "kind": "Method",
    "detail": "Function (} return child ; } return rep ; } CordRep*)",
    "insertText": "SkipCrcNode(CordRep* rep)"
  },
  {
    "label": "SkipCrcNode()",
    "kind": "Method",
    "detail": "Function (} else { return rep ; } } const CordRep*)",
    "insertText": "SkipCrcNode(const CordRep* rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IsCrc())"
  }
]