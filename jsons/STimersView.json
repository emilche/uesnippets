[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "ITableCellValueSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableCellValueSorter"
  },
  {
    "label": "SAsyncOperationStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAsyncOperationStatus"
  },
  {
    "label": "FTimingGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingGraphTrack"
  },
  {
    "label": "SFrameTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFrameTrack"
  },
  {
    "label": "FTimerAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerAggregator"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "STimersView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimersView"
  },
  {
    "label": "IFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileHandle"
  },
  {
    "label": "STimersView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / TextFilter . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" # include \" Insights / TimingProfiler / ViewModels / TimerGroupingAndSorting . h \" # include \" Insights / TimingProfiler / ViewModels / TimerNode . h \" class FMenuBuilder ; class FUICommandList ; namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights { class FTable ; class FTableColumn ; class ITableCellValueSorter ; class SAsyncOperationStatus ; } class FTimingGraphTrack ; namespace UE::Insights::TimingProfiler { class SFrameTrack ; class FTimerAggregator ; class STimingView ; typedef TFilterCollection<const FTimerNodePtr&> FTimerNodeFilterCollection ; typedef TTextFilter<const FTimerNodePtr&> FTimerNodeTextFilter ; class STimersView : public SCompoundWidget { public :)",
    "insertText": "STimersView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(STimersView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTable>)",
    "insertText": "GetTable()"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStats()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(double StartTime, double EndTime)"
  },
  {
    "label": "GetTimerNode()",
    "kind": "Method",
    "detail": "Function (FTimerNodePtr)",
    "insertText": "GetTimerNode(uint32 TimerId)"
  },
  {
    "label": "SelectTimerNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTimerNode(uint32 TimerId)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetFrameTypeMode()",
    "kind": "Method",
    "detail": "Function (ETraceFrameType)",
    "insertText": "GetFrameTypeMode()"
  },
  {
    "label": "ToggleTimingViewMainGraphEventSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTimingViewMainGraphEventSeries(FTimerNodePtr TimerNode)"
  },
  {
    "label": "InitCommandList()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitCommandList()"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTree()"
  },
  {
    "label": "FinishAggregation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAggregation()"
  },
  {
    "label": "ApplyAggregation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAggregation(TraceServices::ITable<TraceServices::FTimingProfilerAggregatedStats>* AggregatedStatsTable)"
  },
  {
    "label": "InsightsManager_OnSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsightsManager_OnSessionChanged()"
  },
  {
    "label": "InsightsManager_OnSessionAnalysisCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsightsManager_OnSessionAnalysisCompleted()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FTimerNodePtr& GroupOrStatNodePtr, TArray<FString>& OutSearchStrings)"
  },
  {
    "label": "TreeView_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TreeView_GetMenuContent()"
  },
  {
    "label": "TreeView_BuildSortByMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildSortByMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildViewColumnMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildViewColumnMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildExportMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildExportMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ContextMenu_CopyToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopyToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopyToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopyToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_CopyTimerNameToClipboard_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_CopyTimerNameToClipboard_CanExecute()"
  },
  {
    "label": "ContextMenu_CopyTimerNameToClipboard_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_CopyTimerNameToClipboard_Execute()"
  },
  {
    "label": "ContextMenu_Export_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_Export_CanExecute()"
  },
  {
    "label": "ContextMenu_Export_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_Export_Execute()"
  },
  {
    "label": "AddTimerNodeRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimerNodeRecursive(FTimerNodePtr InNode, TSet<uint32>& InOutIncludedTimers)"
  },
  {
    "label": "ContextMenu_ExportTimingEventsSelection_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportTimingEventsSelection_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportTimingEventsSelection_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportTimingEventsSelection_Execute()"
  },
  {
    "label": "ContextMenu_ExportTimingEvents_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportTimingEvents_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportTimingEvents_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportTimingEvents_Execute()"
  },
  {
    "label": "ContextMenu_ExportThreads_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportThreads_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportThreads_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportThreads_Execute()"
  },
  {
    "label": "ContextMenu_ExportTimers_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ExportTimers_CanExecute()"
  },
  {
    "label": "ContextMenu_ExportTimers_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ExportTimers_Execute()"
  },
  {
    "label": "OpenSaveTextFileDialog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenSaveTextFileDialog(const FString& InDialogTitle, const FString& InDefaultFile, FString& OutFilename)"
  },
  {
    "label": "OpenExportFile()",
    "kind": "Method",
    "detail": "Function (class IFileHandle*)",
    "insertText": "OpenExportFile(const TCHAR* InFilename)"
  },
  {
    "label": "ContextMenu_OpenSource_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_OpenSource_CanExecute()"
  },
  {
    "label": "ContextMenu_OpenSource_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_OpenSource_Execute()"
  },
  {
    "label": "ContextMenu_FindInstance_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_FindInstance_CanExecute()"
  },
  {
    "label": "ContextMenu_FindInstance_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_FindInstance_Execute(bool bFindMax)"
  },
  {
    "label": "ContextMenu_FindInstanceInSelection_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_FindInstanceInSelection_CanExecute()"
  },
  {
    "label": "ContextMenu_FindInstanceInSelection_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_FindInstanceInSelection_Execute(bool bFindMax)"
  },
  {
    "label": "InitializeAndShowHeaderColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndShowHeaderColumns()"
  },
  {
    "label": "GetColumnHeaderText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetColumnHeaderText(const FName ColumnId)"
  },
  {
    "label": "TreeViewHeaderRow_GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "TreeViewHeaderRow_GenerateColumnMenu(const FTableColumn& Column)"
  },
  {
    "label": "TreeView_Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_Refresh()"
  },
  {
    "label": "TreeView_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnGetChildren(FTimerNodePtr InParent, TArray<FTimerNodePtr>& OutChildren)"
  },
  {
    "label": "TreeView_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnSelectionChanged(FTimerNodePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetSingleSelectedTimerNode()",
    "kind": "Method",
    "detail": "Function (FTimerNodePtr)",
    "insertText": "GetSingleSelectedTimerNode()"
  },
  {
    "label": "TreeView_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnMouseButtonDoubleClick(FTimerNodePtr TreeNode)"
  },
  {
    "label": "TreeView_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TreeView_OnGenerateRow(FTimerNodePtr TreeNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TableRow_ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TableRow_ShouldBeEnabled(FTimerNodePtr NodePtr)"
  },
  {
    "label": "TableRow_SetHoveredCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TableRow_SetHoveredCell(TSharedPtr<FTable> TablePtr, TSharedPtr<FTableColumn> ColumnPtr, FTimerNodePtr NodePtr)"
  },
  {
    "label": "TableRow_GetColumnOutlineHAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "TableRow_GetColumnOutlineHAlignment(const FName ColumnId)"
  },
  {
    "label": "TableRow_GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TableRow_GetHighlightText()"
  },
  {
    "label": "TableRow_GetHighlightedNodeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "TableRow_GetHighlightedNodeName()"
  },
  {
    "label": "ApplyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFiltering()"
  },
  {
    "label": "FilterOutZeroCountTimers_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutZeroCountTimers_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "FilterOutZeroCountTimers_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterOutZeroCountTimers_IsChecked()"
  },
  {
    "label": "GetToggleButtonForTimerType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForTimerType(const ETimerNodeType InNodeType)"
  },
  {
    "label": "FilterByTimerType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByTimerType_OnCheckStateChanged(ECheckBoxState NewRadioState, const ETimerNodeType InNodeType)"
  },
  {
    "label": "FilterByTimerType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByTimerType_IsChecked(const ETimerNodeType InNodeType)"
  },
  {
    "label": "SearchBox_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchBox_IsEnabled()"
  },
  {
    "label": "SearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroups()"
  },
  {
    "label": "CreateGroupByOptionsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroupByOptionsSources()"
  },
  {
    "label": "GroupBy_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupBy_OnSelectionChanged(TSharedPtr<ETimerGroupingMode> NewGroupingMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GroupBy_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GroupBy_OnGenerateWidget(TSharedPtr<ETimerGroupingMode> InGroupingMode)"
  },
  {
    "label": "GroupBy_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedText()"
  },
  {
    "label": "GroupBy_GetSelectedTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedTooltipText()"
  },
  {
    "label": "CreateModeOptionsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateModeOptionsSources()"
  },
  {
    "label": "Mode_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mode_OnSelectionChanged(TSharedPtr<ETraceFrameType> NewGroupingMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "Mode_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "Mode_OnGenerateWidget(TSharedPtr<ETraceFrameType> InGroupingMode)"
  },
  {
    "label": "Mode_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Mode_GetSelectedText()"
  },
  {
    "label": "Mode_GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Mode_GetText(ETraceFrameType InFrameType)"
  },
  {
    "label": "Mode_GetSelectedTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Mode_GetSelectedTooltipText()"
  },
  {
    "label": "Mode_GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Mode_GetTooltipText(ETraceFrameType InFrameType)"
  },
  {
    "label": "GetDefaultColumnBeingSorted()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetDefaultColumnBeingSorted()"
  },
  {
    "label": "GetDefaultColumnSortMode()",
    "kind": "Method",
    "detail": "Function (const EColumnSortMode::Type)",
    "insertText": "GetDefaultColumnSortMode()"
  },
  {
    "label": "CreateSortings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSortings()"
  },
  {
    "label": "UpdateCurrentSortingByColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentSortingByColumn()"
  },
  {
    "label": "SortTreeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodes()"
  },
  {
    "label": "SortTreeNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodesRec(FTimerNode& Node, const ITableCellValueSorter& Sorter)"
  },
  {
    "label": "GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetSortModeForColumn(const FName ColumnId)"
  },
  {
    "label": "SetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortModeForColumn(const FName& ColumnId, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type SortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_IsChecked(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_CanExecute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_SortMode_Execute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_IsChecked(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_CanExecute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortMode_Execute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortByColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_IsChecked(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_CanExecute(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortByColumn_Execute(const FName ColumnId)"
  },
  {
    "label": "CanShowColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowColumn(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(const FName ColumnId)"
  },
  {
    "label": "CanHideColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideColumn(const FName ColumnId)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(const FName ColumnId)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName ColumnId)"
  },
  {
    "label": "CanToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_ShowAllColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowAllColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowAllColumns_Execute()"
  },
  {
    "label": "ContextMenu_ShowMinMaxMedColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowMinMaxMedColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowMinMaxMedColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowMinMaxMedColumns_Execute()"
  },
  {
    "label": "ContextMenu_ResetColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ResetColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ResetColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ResetColumns_Execute()"
  },
  {
    "label": "ToggleTimingViewEventFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTimingViewEventFilter(FTimerNodePtr TimerNode)"
  },
  {
    "label": "TreeView_BuildPlotTimerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildPlotTimerMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_FindMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_FindMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GetTimingViewMainGraphTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphTrack>)",
    "insertText": "GetTimingViewMainGraphTrack()"
  },
  {
    "label": "GetFrameTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SFrameTrack>)",
    "insertText": "GetFrameTrack()"
  },
  {
    "label": "ToggleGraphInstanceSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGraphInstanceSeries(TSharedRef<FTimingGraphTrack> GraphTrack, FTimerNodeRef NodePtr)"
  },
  {
    "label": "IsInstanceSeriesInTimingViewMainGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceSeriesInTimingViewMainGraph(FTimerNodePtr TimerNode)"
  },
  {
    "label": "ToggleTimingViewMainGraphEventInstanceSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTimingViewMainGraphEventInstanceSeries(FTimerNodePtr TimerNode)"
  },
  {
    "label": "ToggleGraphFrameStatsSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGraphFrameStatsSeries(TSharedRef<FTimingGraphTrack> GraphTrack, FTimerNodeRef NodePtr, ETraceFrameType FrameType)"
  },
  {
    "label": "IsFrameStatsSeriesInTimingViewMainGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFrameStatsSeriesInTimingViewMainGraph(FTimerNodePtr TimerNode, ETraceFrameType FrameType)"
  },
  {
    "label": "ToggleTimingViewMainGraphEventFrameStatsSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTimingViewMainGraphEventFrameStatsSeries(FTimerNodePtr TimerNode, ETraceFrameType FrameType)"
  },
  {
    "label": "IsSeriesInFrameTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeriesInFrameTrack(FTimerNodePtr TimerNode, ETraceFrameType FrameType)"
  },
  {
    "label": "ToggleFrameTrackSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFrameTrackSeries(FTimerNodePtr TimerNode, ETraceFrameType FrameType)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OpenSourceFileInIDE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSourceFileInIDE(FTimerNodePtr InNode)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings()"
  },
  {
    "label": "SaveVisibleColumnsSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveVisibleColumnsSettings()"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings()"
  },
  {
    "label": "LoadVisibleColumnsSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadVisibleColumnsSettings()"
  },
  {
    "label": "SetTimingViewFrameType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimingViewFrameType()"
  },
  {
    "label": "GetTimingView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STimingView>)",
    "insertText": "GetTimingView()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FTable> Table ; TSharedPtr<const TraceServices::IAnalysisSession> Session ; TSharedPtr<FUICommandList> CommandList ; TSharedPtr<STreeView<FTimerNodePtr>> TreeView ; TSharedPtr<SHeaderRow> TreeViewHeaderRow ; TSharedPtr<SScrollBar> ExternalScrollbar ; FName HoveredColumnId ; FTimerNodePtr HoveredNodePtr ; FName HighlightedNodeName ; TArray<FTimerNodePtr> GroupNodes ; TArray<FTimerNodePtr> FilteredGroupNodes ; TArray<FTimerNodePtr> TimerNodes ; TSet<FTimerNodePtr> ExpandedNodes ; bool bExpansionSaved ; TSharedPtr<SSearchBox> SearchBox ; TSharedPtr<FTimerNodeTextFilter> TextFilter ; TSharedPtr<FTimerNodeFilterCollection> Filters ; bool bTimerTypeIsVisible [ static_cast<)",
    "insertText": "int(ETimerNodeType::InvalidOrMax)"
  }
]