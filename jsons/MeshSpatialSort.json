[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "TMeshSpatialSort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshSpatialSort"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshNesting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshNesting"
  },
  {
    "label": "FMeshInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshInfo"
  },
  {
    "label": "TMeshSpatialSort()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" MeshQueries . h \" # include \" Spatial / FastWinding . h \" namespace UE { namespace Geometry { template<class TriangleMeshType> class TMeshSpatialSort { public : TArrayView<const TriangleMeshType> InputMeshes ; TArray<FAxisAlignedBox3d> MeshBounds ; enum class ENestingMethod { InLargestParent,InSmallestParent,} ; ENestingMethod NestingMethod = ENestingMethod::InLargestParent ; bool bOnlyNestNegativeVolumes = false ; bool bOnlyParentPostiveVolumes = true ; bool bOnlyCheckSingleVertexForNesting = true ; struct FMeshNesting { int OuterIndex ; int ParentIndex = - 1 ; TArray<int> InnerIndices ; } ; TArray<FMeshNesting> Nests ; TArray<int> SkippedMeshIndices ;)",
    "insertText": "TMeshSpatialSort()"
  },
  {
    "label": "TMeshSpatialSort()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMeshSpatialSort(TArrayView<const TriangleMeshType> InputMeshes, TArrayView<const FAxisAlignedBox3d> MeshBoundsIn = TArrayView<const FAxisAlignedBox3d>()) : InputMeshes(InputMeshes)"
  },
  {
    "label": "InitBounds()",
    "kind": "Method",
    "detail": "Function (MeshBounds = MeshBoundsIn ; } else {)",
    "insertText": "InitBounds()"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Compute()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox3d CombinedBounds ;)",
    "insertText": "for(const FAxisAlignedBox3d& Bounds : MeshBounds)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (CombinedBounds .)",
    "insertText": "Contain(Bounds)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} Nests .)",
    "insertText": "Empty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 N = InputMeshes .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<int> MeshIndices ; MeshIndices .)",
    "insertText": "SetNum(N)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Info [ i ] . bPositiveVolume = SignedVolume> = 0 ; Info [ i ] . Volume =)",
    "insertText": "Abs(SignedVolume)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} MeshIndices .)",
    "insertText": "Sort([&Info](int Ind1, int Ind2) { return Info[Ind1].Volume > Info[Ind2].Volume; })"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TArray<int> Parent ; Parent .)",
    "insertText": "Init(-1, N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int PIdx = MeshIndices [ ParentCand ] ; const FMeshInfo& PInfo = Info [ PIdx ] ; const TriangleMeshType& PMesh = InputMeshes [ PIdx ] ;)",
    "insertText": "if(NestingMethod == ENestingMethod::InLargestParent && Parent[ParentCand] != -1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(!PInfo.bPositiveVolume && NestingMethod != ENestingMethod::InSmallestParent && bOnlyParentPostiveVolumes)"
  },
  {
    "label": "Spatial()",
    "kind": "Method",
    "detail": "Function (continue ; } double WindingTestSign = PInfo . bPositiveVolume ? 1 : - 1 ; TMeshAABBTree3<TriangleMeshType>)",
    "insertText": "Spatial(&InputMeshes[PIdx])"
  },
  {
    "label": "Winding()",
    "kind": "Method",
    "detail": "Function (TFastWindingTree<TriangleMeshType>)",
    "insertText": "Winding(&Spatial)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int CIdx = MeshIndices [ ChildCand ] ; const FMeshInfo& CInfo = Info [ CIdx ] ; const TriangleMeshType& CMesh = InputMeshes [ CIdx ] ;)",
    "insertText": "if(CMesh.VertexCount() == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(NestingMethod == ENestingMethod::InLargestParent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } })",
    "insertText": "if(bOnlyCheckSingleVertexForNesting)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FVector3d Vert ;)",
    "insertText": "for(int VID = 0; VID < CMesh.MaxVertexID(); VID++)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (Vert = CMesh .)",
    "insertText": "GetVertex(VID)"
  },
  {
    "label": "FastWindingNumber()",
    "kind": "Method",
    "detail": "Function (break ; } } double WindingNumber = Winding .)",
    "insertText": "FastWindingNumber(Vert)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasOutsideSample = true ; break ; } } })",
    "insertText": "if(!bHasOutsideSample)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Parent [ ChildCand ] = ParentCand ; } } } } TArray<bool> Taken ; Taken .)",
    "insertText": "SetNumZeroed(N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int NIdx = MeshIndices [ NestCand ] ;)",
    "insertText": "if(Taken[NestCand])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(bOnlyParentPostiveVolumes && !Info[NIdx].bPositiveVolume)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SkippedMeshIndices .)",
    "insertText": "Add(NIdx)"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (continue ; } FMeshNesting& Nest = Nests .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Nest . OuterIndex = NIdx ;)",
    "insertText": "if(NestingMethod == ENestingMethod::InSmallestParent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int ParentCand = Parent [ NestCand ] ;)",
    "insertText": "if(ParentCand > -1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Nest . ParentIndex = MeshIndices [ ParentCand ] ; } })",
    "insertText": "for(int HoleCand = NestCand + 1; HoleCand < N; HoleCand++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int MIdx = MeshIndices [ HoleCand ] ;)",
    "insertText": "if(Parent[HoleCand] == NestCand && (!Info[MIdx].bPositiveVolume || !bOnlyNestNegativeVolumes))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Nest . InnerIndices .)",
    "insertText": "Add(MIdx)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MeshBounds .)",
    "insertText": "Reset()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (MeshBounds .)",
    "insertText": "Reserve(InputMeshes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MeshBounds .)",
    "insertText": "Add(TMeshQueries<TriangleMeshType>::GetBounds(Mesh))"
  }
]