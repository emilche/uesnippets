[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "LPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LPPassManager"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "InvokeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InvokeInst"
  },
  {
    "label": "ReturnInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnInst"
  },
  {
    "label": "CallSite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallSite"
  },
  {
    "label": "Trace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trace"
  },
  {
    "label": "CallGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraph"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "AssumptionCacheTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCacheTracker"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "can"
  },
  {
    "label": "ClonedCodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClonedCodeInfo"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "CloningDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CloningDirector"
  },
  {
    "label": "CloningAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CloningAction"
  },
  {
    "label": "captures",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "captures"
  },
  {
    "label": "InlineFunctionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineFunctionInfo"
  },
  {
    "label": "CloneFunctionInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneFunctionInto(Function *NewFunc, const Function *OldFunc,\n                       ValueToValueMapTy &VMap, bool ModuleLevelChanges,\n                       SmallVectorImpl<ReturnInst*> &Returns,\n                       const char *NameSuffix = \"\",\n                       ClonedCodeInfo *CodeInfo = nullptr,\n                       ValueMapTypeRemapper *TypeMapper = nullptr,\n                       ValueMaterializer *Materializer = nullptr)"
  },
  {
    "label": "CloneAndPruneIntoFromInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneAndPruneIntoFromInst(Function *NewFunc, const Function *OldFunc,\n                               const Instruction *StartingInst,\n                               ValueToValueMapTy &VMap, bool ModuleLevelChanges,\n                               SmallVectorImpl<ReturnInst*> &Returns,\n                               const char *NameSuffix = \"\", \n                               ClonedCodeInfo *CodeInfo = nullptr,\n                               CloningDirector *Director = nullptr)"
  },
  {
    "label": "CloneAndPruneFunctionInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneAndPruneFunctionInto(Function *NewFunc, const Function *OldFunc,\n                               ValueToValueMapTy &VMap, bool ModuleLevelChanges,\n                               SmallVectorImpl<ReturnInst*> &Returns,\n                               const char *NameSuffix = \"\",\n                               ClonedCodeInfo *CodeInfo = nullptr,\n                               Instruction *TheCall = nullptr)"
  },
  {
    "label": "InlineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InlineFunction(CallInst *C, InlineFunctionInfo &IFI,\n                    bool InsertLifetime = true)"
  },
  {
    "label": "InlineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InlineFunction(InvokeInst *II, InlineFunctionInfo &IFI,\n                    bool InsertLifetime = true)"
  },
  {
    "label": "InlineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InlineFunction(CallSite CS, InlineFunctionInfo &IFI,\n                    bool InsertLifetime = true)"
  },
  {
    "label": "remapInstructionsInBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remapInstructionsInBlocks(const SmallVectorImpl<BasicBlock *> &Blocks,\n                               ValueToValueMapTy &VMap)"
  }
]