[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "LPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LPPassManager"
  },
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "InvokeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InvokeInst"
  },
  {
    "label": "ReturnInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnInst"
  },
  {
    "label": "CallSite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallSite"
  },
  {
    "label": "Trace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trace"
  },
  {
    "label": "CallGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraph"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "AssumptionCacheTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCacheTracker"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "ClonedCodeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClonedCodeInfo"
  },
  {
    "label": "CloningDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CloningDirector"
  },
  {
    "label": "CloningAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CloningAction"
  },
  {
    "label": "InlineFunctionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineFunctionInfo"
  },
  {
    "label": "CloneModule()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_CLONING_H # define LLVM_TRANSFORMS_UTILS_CLONING_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / IR / ValueMap . h \" # include \" llvm / Transforms / Utils / ValueMapper . h \" namespace llvm { class Module ; class Function ; class Instruction ; class Pass ; class LPPassManager ; class BasicBlock ; class Value ; class CallInst ; class InvokeInst ; class ReturnInst ; class CallSite ; class Trace ; class CallGraph ; class DataLayout ; class Loop ; class LoopInfo ; class AllocaInst ; class AliasAnalysis ; class AssumptionCacheTracker ; class DominatorTree ; Module*)",
    "insertText": "CloneModule(const Module *M)"
  },
  {
    "label": "CloneModule()",
    "kind": "Method",
    "detail": "Function (Module*)",
    "insertText": "CloneModule(const Module *M, ValueToValueMapTy &VMap)"
  },
  {
    "label": "ClonedCodeInfo()",
    "kind": "Method",
    "detail": "Function (struct ClonedCodeInfo { bool ContainsCalls ; bool ContainsDynamicAllocas ;)",
    "insertText": "ClonedCodeInfo() : ContainsCalls(false), ContainsDynamicAllocas(false)"
  },
  {
    "label": "CloneBasicBlock()",
    "kind": "Method",
    "detail": "Function (} } ; BasicBlock*)",
    "insertText": "CloneBasicBlock(const BasicBlock *BB, ValueToValueMapTy &VMap, const Twine &NameSuffix = \"\", Function *F = nullptr, ClonedCodeInfo *CodeInfo = nullptr)"
  },
  {
    "label": "CloneFunction()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "CloneFunction(const Function *F, ValueToValueMapTy &VMap, bool ModuleLevelChanges, ClonedCodeInfo *CodeInfo = nullptr)"
  },
  {
    "label": "CloneFunctionInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneFunctionInto(Function *NewFunc, const Function *OldFunc, ValueToValueMapTy &VMap, bool ModuleLevelChanges, SmallVectorImpl<ReturnInst*> &Returns, const char *NameSuffix = \"\", ClonedCodeInfo *CodeInfo = nullptr, ValueMapTypeRemapper *TypeMapper = nullptr, ValueMaterializer *Materializer = nullptr)"
  },
  {
    "label": "CloningDirector()",
    "kind": "Method",
    "detail": "Function (class CloningDirector { public : enum CloningAction { CloneInstruction,SkipInstruction,StopCloningBB,CloneSuccessors } ; ~)",
    "insertText": "CloningDirector()"
  },
  {
    "label": "handleInstruction()",
    "kind": "Method",
    "detail": "Function (} CloningAction)",
    "insertText": "handleInstruction(ValueToValueMapTy &VMap, const Instruction *Inst, BasicBlock *NewBB)"
  },
  {
    "label": "getTypeRemapper()",
    "kind": "Method",
    "detail": "Function (ValueMapTypeRemapper*)",
    "insertText": "getTypeRemapper()"
  },
  {
    "label": "CloneAndPruneFunctionInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneAndPruneFunctionInto(Function *NewFunc, const Function *OldFunc, ValueToValueMapTy &VMap, bool ModuleLevelChanges, SmallVectorImpl<ReturnInst*> &Returns, const char *NameSuffix = \"\", ClonedCodeInfo *CodeInfo = nullptr, Instruction *TheCall = nullptr)"
  },
  {
    "label": "InlineFunctionInfo()",
    "kind": "Method",
    "detail": "Function (class InlineFunctionInfo { public :)",
    "insertText": "InlineFunctionInfo(CallGraph *cg = nullptr, AliasAnalysis *AA = nullptr, AssumptionCacheTracker *ACT = nullptr) : CG(cg), AA(AA), ACT(ACT)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} CallGraph* CG ; AliasAnalysis* AA ; AssumptionCacheTracker* ACT ; SmallVector<AllocaInst*,4> StaticAllocas ; SmallVector<WeakVH,8> InlinedCalls ; void)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (StaticAllocas .)",
    "insertText": "clear()"
  },
  {
    "label": "InlineFunction()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "InlineFunction(CallInst *C, InlineFunctionInfo &IFI, bool InsertLifetime = true)"
  },
  {
    "label": "InlineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InlineFunction(InvokeInst *II, InlineFunctionInfo &IFI, bool InsertLifetime = true)"
  },
  {
    "label": "InlineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InlineFunction(CallSite CS, InlineFunctionInfo &IFI, bool InsertLifetime = true)"
  },
  {
    "label": "cloneLoopWithPreheader()",
    "kind": "Method",
    "detail": "Function (Loop*)",
    "insertText": "cloneLoopWithPreheader(BasicBlock *Before, BasicBlock *LoopDomBB, Loop *OrigLoop, ValueToValueMapTy &VMap, const Twine &NameSuffix, LoopInfo *LI, DominatorTree *DT, SmallVectorImpl<BasicBlock *> &Blocks)"
  },
  {
    "label": "remapInstructionsInBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "remapInstructionsInBlocks(const SmallVectorImpl<BasicBlock *> &Blocks, ValueToValueMapTy &VMap)"
  }
]