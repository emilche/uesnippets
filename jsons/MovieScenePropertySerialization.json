[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPropertyFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyFileHeader"
  },
  {
    "label": "FSerializedProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedProperty"
  },
  {
    "label": "FPropertyFileHeader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / FrameRate . h \" # include \" UObject / UnrealType . h \" # include \" UObject / EnumProperty . h \" # include \" MovieSceneSectionSerialization . h \" enum class ESerializedPropertyType : uint8 { BoolType,ByteType,EnumType,FloatType,DoubleType,Vector3fType,Vector3dType,ColorType,IntegerType,StringType,LinearColorType } ; struct FPropertyFileHeader { const int32 cVersion = 1 ;)",
    "insertText": "FPropertyFileHeader() : Version(cVersion)"
  },
  {
    "label": "FPropertyFileHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyFileHeader(const FFrameRate &InFrameRate, const FName& InSerializedType, const FGuid& InGuid) : Version(cVersion) , SerializedType(InSerializedType) , Guid(InGuid) , TickResolution(InFrameRate)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPropertyFileHeader& Header)"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . Version ; Ar<<Header . SerializedType ; Ar<<Header . Guid ; Ar<<Header . TickResolution . Numerator ; Ar<<Header . TickResolution . Denominator ; Ar<<Header . PropertyName ; Ar<<Header . PropertyType ; Ar<<Header . TrackDisplayName ; return Ar ; } void)",
    "insertText": "SetProperty(const FProperty* Property, const FName& InPropertyName)"
  },
  {
    "label": "GetDisplayNameText()",
    "kind": "Method",
    "detail": "Function (PropertyName = InPropertyName ; TrackDisplayName =* Property ->)",
    "insertText": "GetDisplayNameText().ToString()"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::BoolType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property->IsA<FByteProperty>())"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::ByteType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property->IsA<FEnumProperty>())"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::EnumType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property->IsA<FFloatProperty>())"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::FloatType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property->IsA<FDoubleProperty>())"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::DoubleType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const FStructProperty* StructProperty = CastField<const FStructProperty>(Property))"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::Vector3fType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(StructProperty->Struct->GetFName() == NAME_Vector3d || StructProperty->Struct->GetFName() == NAME_Vector)"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::Vector3dType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(StructProperty->Struct->GetFName() == NAME_Color)"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::ColorType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(StructProperty->Struct->GetFName() == NAME_LinearColor)"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::LinearColorType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Property->IsA<FIntProperty>())"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::IntegerType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Property->IsA<FStrProperty>())"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropertyType(ESerializedPropertyType::StringType)"
  },
  {
    "label": "FSerializedProperty()",
    "kind": "Method",
    "detail": "Function (} } } int32 Version ; FName SerializedType ; FGuid Guid ; FFrameRate TickResolution ; FName PropertyName ; ESerializedPropertyType PropertyType ; FString TrackDisplayName ; } ; template<PropertyType> struct FSerializedProperty {)",
    "insertText": "FSerializedProperty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSerializedProperty& Property)"
  }
]