[
  {
    "label": "Call",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Call"
  },
  {
    "label": "VideoBitrateAllocatorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoBitrateAllocatorFactory"
  },
  {
    "label": "MediaContentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaContentDescription"
  },
  {
    "label": "MediaConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaConfig"
  },
  {
    "label": "ChannelInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelInterface"
  },
  {
    "label": "ChannelInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_CHANNEL_INTERFACE_H_ # define PC_CHANNEL_INTERFACE_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / jsep . h \" # include \" api / media_types . h \" # include \" media / base / media_channel . h \" # include \" pc / rtp_transport_internal . h \" namespace webrtc { class Call ; class VideoBitrateAllocatorFactory ; } namespace cricket { class MediaContentDescription ; struct MediaConfig ; class ChannelInterface { public : ~)",
    "insertText": "ChannelInterface()"
  },
  {
    "label": "media_type()",
    "kind": "Method",
    "detail": "Function (cricket::MediaType)",
    "insertText": "media_type()"
  },
  {
    "label": "media_channel()",
    "kind": "Method",
    "detail": "Function (MediaChannel*)",
    "insertText": "media_channel()"
  },
  {
    "label": "video_media_channel()",
    "kind": "Method",
    "detail": "Function (VideoMediaChannel*)",
    "insertText": "video_media_channel()"
  },
  {
    "label": "voice_media_channel()",
    "kind": "Method",
    "detail": "Function (VoiceMediaChannel*)",
    "insertText": "voice_media_channel()"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "transport_name()"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "mid()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(bool enable)"
  },
  {
    "label": "SetFirstPacketReceivedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFirstPacketReceivedCallback(std::function<void()> callback)"
  },
  {
    "label": "SetLocalContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalContent(const MediaContentDescription* content, webrtc::SdpType type, std::string& error_desc)"
  },
  {
    "label": "SetRemoteContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRemoteContent(const MediaContentDescription* content, webrtc::SdpType type, std::string& error_desc)"
  },
  {
    "label": "SetPayloadTypeDemuxingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPayloadTypeDemuxingEnabled(bool enabled)"
  },
  {
    "label": "local_streams()",
    "kind": "Method",
    "detail": "Function (const std::vector<StreamParams>&)",
    "insertText": "local_streams()"
  },
  {
    "label": "remote_streams()",
    "kind": "Method",
    "detail": "Function (const std::vector<StreamParams>&)",
    "insertText": "remote_streams()"
  },
  {
    "label": "SetRtpTransport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRtpTransport(webrtc::RtpTransportInternal* rtp_transport)"
  }
]