[
  {
    "label": "MIN()",
    "kind": "Method",
    "detail": "Function (# ifndef KISS_FFT_GUTS_H # define KISS_FFT_GUTS_H # define)",
    "insertText": "MIN(a,b) ((a)<(b) ? (a):(b)) #define MAX(a,b) ((a)>(b) ? (a):(b)) #include \"kiss_fft.h\" #ifdef FIXED_POINT #include \"arch.h\" #define SAMP_MAX 2147483647 #define TWID_MAX 32767 #define TRIG_UPSCALE 1 #define SAMP_MIN -SAMP_MAX # define S_MUL(a,b) MULT16_32_Q15(b, a) # define C_MUL(m,a,b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) # define C_MULC(m,a,b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) # define C_MULBYSCALAR( c, s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) # define DIVSCALAR(x,k) \\ (x) = S_MUL( x, (TWID_MAX-((k)>>1))/(k)+1 ) # define C_FIXDIV(c,div)"
  },
  {
    "label": "DIVSCALAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DIVSCALAR((c).r , div)"
  },
  {
    "label": "DIVSCALAR()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DIVSCALAR((c).i , div)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define C_ADD( res, a,b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define C_SUB( res, a,b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define C_ADDTO( res , a)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define C_SUBFROM( res , a)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #if defined(OPUS_ARM_INLINE_ASM) #include \"arm/kiss_fft_armv4.h\" #endif #if defined(OPUS_ARM_INLINE_EDSP) #include \"arm/kiss_fft_armv5e.h\" #endif #if defined(MIPSr1_ASM) #include \"mips/kiss_fft_mipsr1.h\" #endif #else # define S_MUL(a,b) ( (a)*(b) ) #define C_MUL(m,a,b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define C_MULC(m,a,b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define C_MUL4(m,a,b) C_MUL(m,a,b) # define C_FIXDIV(c,div) # define C_MULBYSCALAR( c, s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #endif #ifndef CHECK_OVERFLOW_OP # define CHECK_OVERFLOW_OP(a,op,b) #endif #ifndef C_ADD #define C_ADD( res, a,b)"
  },
  {
    "label": "CHECK_OVERFLOW_OP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CHECK_OVERFLOW_OP((a).r,+,(b).r)\\ CHECK_OVERFLOW_OP((a).i,+,(b).i)\\ (res).r=(a).r+(b)"
  },
  {
    "label": "CHECK_OVERFLOW_OP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CHECK_OVERFLOW_OP((a).r,-,(b).r)\\ CHECK_OVERFLOW_OP((a).i,-,(b).i)\\ (res).r=(a).r-(b)"
  },
  {
    "label": "CHECK_OVERFLOW_OP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CHECK_OVERFLOW_OP((res).r,+,(a).r)\\ CHECK_OVERFLOW_OP((res).i,+,(a).i)\\ (res).r += (a)"
  },
  {
    "label": "CHECK_OVERFLOW_OP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CHECK_OVERFLOW_OP((res).r,-,(a).r)\\ CHECK_OVERFLOW_OP((res).i,-,(a).i)\\ (res).r -= (a)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #ifdef FIXED_POINT # define KISS_FFT_COS(phase) floor(.5+TWID_MAX*cos (phase)) # define KISS_FFT_SIN(phase) floor(.5+TWID_MAX*sin (phase)) # define HALF_OF(x) ((x)>>1) #elif defined(USE_SIMD) # define KISS_FFT_COS(phase) _mm_set1_ps( cos(phase) ) # define KISS_FFT_SIN(phase) _mm_set1_ps( sin(phase) ) # define HALF_OF(x) ((x)*_mm_set1_ps(.5f)) #else # define KISS_FFT_COS(phase) (kiss_fft_scalar) cos(phase) # define KISS_FFT_SIN(phase) (kiss_fft_scalar) sin(phase) # define HALF_OF(x) ((x)*.5f) #endif #define kf_cexp(x,phase)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define kf_cexp2(x,phase)"
  }
]