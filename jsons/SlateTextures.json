[
  {
    "label": "FSlateTexture2DRHIRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTexture2DRHIRef"
  },
  {
    "label": "FSlateRenderTargetRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderTargetRHI"
  },
  {
    "label": "FSlateTextureRenderTarget2DResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextureRenderTarget2DResource"
  },
  {
    "label": "FSlateTexture2DRHIRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderResource . h \" # include \" Textures / SlateTextureData . h \" # include \" RenderDeferredCleanup . h \" # include \" Textures / SlateShaderResource . h \" # include \" TextureResource . h \" # include \" Engine / Texture . h \" # include \" Textures / SlateUpdatableTexture . h \" class FSlateTexture2DRHIRef : public TSlateTexture<FTextureRHIRef>,public FSlateUpdatableTexture,public FDeferredCleanupInterface,public FRenderResource { public :)",
    "insertText": "FSlateTexture2DRHIRef(FTextureRHIRef InRef, uint32 InWidth, uint32 InHeight)"
  },
  {
    "label": "FSlateTexture2DRHIRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateTexture2DRHIRef(uint32 InWidth, uint32 InHeight, EPixelFormat InPixelFormat, TSharedPtr<FSlateTextureData, ESPMode::ThreadSafe> InTextureData, ETextureCreateFlags InTexCreateFlags = TexCreate_None, bool bCreateEmptyTexture = false)"
  },
  {
    "label": "FSlateTexture2DRHIRef()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateTexture2DRHIRef()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(uint32 Width, uint32 Height)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetRHIRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRHIRef(FTextureRHIRef InRenderTargetTexture, uint32 InWidth, uint32 InHeight)"
  },
  {
    "label": "GetRHIRef()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "GetRHIRef()"
  },
  {
    "label": "SetTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureData(FSlateTextureDataPtr NewTextureData, EPixelFormat InPixelFormat, ETextureCreateFlags InTexCreateFlags)"
  },
  {
    "label": "ClearTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTextureData()"
  },
  {
    "label": "GetPixelFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetPixelFormat()"
  },
  {
    "label": "UpdateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexture(const TArray<uint8>& Bytes)"
  },
  {
    "label": "UpdateTextureThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureThreadSafe(const TArray<uint8>& Bytes)"
  },
  {
    "label": "UpdateTextureThreadSafeRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureThreadSafeRaw(uint32 Width, uint32 Height, const void* Buffer, const FIntRect& Dirty)"
  },
  {
    "label": "UpdateTextureThreadSafeWithTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureThreadSafeWithTextureData(FSlateTextureData* BulkData)"
  },
  {
    "label": "UpdateTextureThreadSafeWithKeyedTextureHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTextureThreadSafeWithKeyedTextureHandle(void* TextureHandle, int KeyLockVal, int KeyUnlockVal, const FIntRect& Dirty = FIntRect())"
  },
  {
    "label": "SetTextureData()",
    "kind": "Method",
    "detail": "Function (} protected : uint32 Width ; uint32 Height ; private : void)",
    "insertText": "SetTextureData(const TArray<uint8>& Bytes)"
  },
  {
    "label": "FSlateRenderTargetRHI()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags TexCreateFlags ; TSharedPtr<FSlateTextureData,ESPMode::ThreadSafe> TextureData ; EPixelFormat PixelFormat ; bool bCreateEmptyTexture ; } ; class FSlateRenderTargetRHI : public TSlateTexture<FTextureRHIRef>,public FRenderResource { public :)",
    "insertText": "FSlateRenderTargetRHI(FTextureRHIRef InRenderTargetTexture, uint32 InWidth, uint32 InHeight ) : TSlateTexture( InRenderTargetTexture ) , Width( InWidth ) , Height( InHeight)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (ShaderResource .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSize(int32 InSizeX,int32 InSizeY)"
  },
  {
    "label": "ClampSize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ClampSize(int32 SizeX,int32 SizeY)"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "GetSizeY()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSizeY()"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetDisplayGamma()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDisplayGamma()"
  },
  {
    "label": "UpdateDeferredResource()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateDeferredResource(FRHICommandListImmediate& RHICmdList, bool bClearRenderTarget=true)"
  }
]