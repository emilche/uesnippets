[
  {
    "label": "VMapBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VMapBase"
  },
  {
    "label": "RangedForIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RangedForIterator"
  },
  {
    "label": "VMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VMap"
  },
  {
    "label": "VMutableMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VMutableMap"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct VMapBase : VHeapValue {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VHeapValue)"
  },
  {
    "label": "RangedForIterator()",
    "kind": "Method",
    "detail": "Function (using KeyType = TWriteBarrier<VValue> ; using ValType = TWriteBarrier<VValue> ; using PairType = TPair<KeyType,ValType> ; using SequenceType = uint32 ; struct RangedForIterator {)",
    "insertText": "RangedForIterator(const VMapBase* Map, uint32 Index) : Map(Map) , Index(Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TPair<VValue,VValue>)",
    "insertText": "operator()"
  },
  {
    "label": "GetPairTable()",
    "kind": "Method",
    "detail": "Function (const PairType* PairTable = Map ->)",
    "insertText": "GetPairTable()"
  },
  {
    "label": "GetSequenceTable()",
    "kind": "Method",
    "detail": "Function (const SequenceType* SequenceTable = Map ->)",
    "insertText": "GetSequenceTable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RangedForIterator& Rhs)"
  },
  {
    "label": "VMapBase()",
    "kind": "Method",
    "detail": "Function (+ + Index ; return* this ; } const VMapBase* Map ; uint32 Index ; } ; protected :)",
    "insertText": "VMapBase(FAllocationContext Context, uint32 InitialCapacity, VEmergentType* Type)"
  },
  {
    "label": "VMapBase()",
    "kind": "Method",
    "detail": "Function (template<GetEntryByIndex>)",
    "insertText": "VMapBase(FAllocationContext Context, uint32 MaxNumEntries, const GetEntryByIndex& GetEntry, VEmergentType* Type)"
  },
  {
    "label": "AddWithoutLocking()",
    "kind": "Method",
    "detail": "Function (TPair<uint32,bool>)",
    "insertText": "AddWithoutLocking(FAllocationContext Context, uint32 KeyHash, VValue Key, VValue Value, bool bTransactional = false)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (public : uint32)",
    "insertText": "Num()"
  },
  {
    "label": "FindWithSlot()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "FindWithSlot(FAllocationContext Context, VValue Key, SequenceType* OutSlot)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Key)"
  },
  {
    "label": "FindByHash()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "FindByHash(FAllocationContext Context, uint32 Hash, VValue Key)"
  },
  {
    "label": "FindByHashWithSlot()",
    "kind": "Method",
    "detail": "Function (SequenceType Slot ; return)",
    "insertText": "FindByHashWithSlot(Context, Hash, Key, &Slot)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "Find(FAllocationContext Context, VValue Key)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "GetKey(uint32 Index)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "GetValue(uint32 Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(FAllocationContext Context, VValue Key, VValue Value)"
  },
  {
    "label": "AddTransactionally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransactionally(FAllocationContext Context, VValue Key, VValue Value)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(FAllocationContext Context, uint32 InCapacity)"
  },
  {
    "label": "GetPairTableSizeForCapacity()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPairTableSizeForCapacity(uint32 InCapacity)"
  },
  {
    "label": "GetSequenceTableSizeForCapacity()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetSequenceTableSizeForCapacity(uint32 InCapacity)"
  },
  {
    "label": "GetPairTableSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetPairTableSize()"
  },
  {
    "label": "GetSequenceTableSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetSequenceTableSize()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} template<MapType> VMapBase&)",
    "insertText": "New(FAllocationContext Context, uint32 InitialCapacity = 0)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} template<MapType,GetEntryByIndex> VMapBase&)",
    "insertText": "New(FAllocationContext Context, uint32 MaxNumEntries, const GetEntryByIndex& GetEntry)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (template<MapType> void)",
    "insertText": "Serialize(MapType*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "FreezeMeltImpl()",
    "kind": "Method",
    "detail": "Function (template<MapType,TranslationFunc> VValue)",
    "insertText": "FreezeMeltImpl(FAllocationContext Context, TranslationFunc&& Func)"
  },
  {
    "label": "MeltImpl()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "MeltImpl(FAllocationContext Context)"
  },
  {
    "label": "EqualImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualImpl(FAllocationContext Context, VCell* Other, const TFunction<void(::Verse::VValue, ::Verse::VValue)>& HandlePlaceholder)"
  },
  {
    "label": "GetTypeHashImpl()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHashImpl()"
  },
  {
    "label": "ToStringImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStringImpl(FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (RangedForIterator)",
    "insertText": "begin()"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (RangedForIterator)",
    "insertText": "it(this, 0)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (RangedForIterator)",
    "insertText": "it(this, NumElements)"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; void)",
    "insertText": "SerializeImpl(VMap*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "VMap()",
    "kind": "Method",
    "detail": "Function (Super::Serialize<)",
    "insertText": "VMap(This, Context, Visitor)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (} } ; struct VMutableMap : VMapBase {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VMapBase)"
  },
  {
    "label": "FreezeImpl()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VValue)",
    "insertText": "FreezeImpl(FAllocationContext Context)"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImpl(VMutableMap*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "VMutableMap()",
    "kind": "Method",
    "detail": "Function (Super::Serialize<)",
    "insertText": "VMutableMap(This, Context, Visitor)"
  }
]