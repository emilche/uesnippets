[
  {
    "label": "MockPacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockPacketSocketFactory"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_MOCK_PACKET_SOCKET_FACTORY_H_ # define API_TEST_MOCK_PACKET_SOCKET_FACTORY_H_ # include<memory> # include<string> # include \" api / packet_socket_factory . h \" # include \" test / gmock . h \" namespace rtc { class MockPacketSocketFactory : public PacketSocketFactory { public :)",
    "insertText": "MOCK_METHOD(AsyncPacketSocket*, CreateUdpSocket, (const SocketAddress&, uint16_t, uint16_t), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(AsyncListenSocket*, CreateServerTcpSocket, (const SocketAddress&, uint16_t, uint16_t, int opts), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(AsyncPacketSocket*, CreateClientTcpSocket, (const SocketAddress& local_address, const SocketAddress&, const ProxyInfo&, const std::string&, const PacketSocketTcpOptions&), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::unique_ptr<webrtc::AsyncDnsResolverInterface>, CreateAsyncDnsResolver, (), (override))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(!std::is_abstract_v<MockPacketSocketFactory>, \"\")"
  }
]