[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "Tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tree"
  },
  {
    "label": "ValueConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueConverter"
  },
  {
    "label": "ArrayT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayT"
  },
  {
    "label": "MyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyArray"
  },
  {
    "label": "ArrayT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayT"
  },
  {
    "label": "MyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyArray"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Blend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Blend"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "DeallocateNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeallocateNodes"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "Tree3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tree3"
  },
  {
    "label": "Tree4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tree4"
  },
  {
    "label": "Tree5",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tree5"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "TreeIterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeIterTraits"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "template"
  },
  {
    "label": "CombineOpAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CombineOpAdapter"
  },
  {
    "label": "OnExit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OnExit"
  },
  {
    "label": "readTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readTopology(std::istream&, bool saveFloatAsHalf = false)"
  },
  {
    "label": "getNodeLog2Dims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNodeLog2Dims(std::vector<Index>& dims)"
  },
  {
    "label": "vec()",
    "kind": "Method",
    "detail": "Function (std::vector<Index32>)",
    "insertText": "vec(DEPTH, 0)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setActiveState(const Coord& xyz, bool on)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnly(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOn(const Coord& xyz)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOn(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValue(const Coord& xyz, const ValueType& value, AccessT&)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "xyz(1, 0, -2)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValue(const Coord& xyz, const ModifyOp& op)"
  },
  {
    "label": "xyz()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "xyz(1, 0, -2)"
  },
  {
    "label": "modifyValueAndActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndActiveState(const Coord& xyz, const ModifyOp& op)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clip(const CoordBBox&)"
  },
  {
    "label": "sparseFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sparseFill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "denseFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "denseFill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "voxelizeActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "voxelizeActiveTiles(bool threaded = true)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(Index level, const Coord& xyz, const ValueType& value, bool active)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(value_type nodePtr)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(value_type nodePtr)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "clearAllAccessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearAllAccessors()"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(Tree& other, MergePolicy = MERGE_ACTIVE_STATES)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyUnion(const Tree<OtherRootNodeType>& other, const bool preserveTiles = false)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyIntersection(const Tree<OtherRootNodeType>& other)"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyDifference(const Tree<OtherRootNodeType>& other)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(Tree& other, CombineOp& op, bool prune = false)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(Tree& other, const CombineOp& op, bool prune = false)"
  },
  {
    "label": "combineExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combineExtended(Tree& other, ExtendedCombineOp& op, bool prune = false)"
  },
  {
    "label": "combineExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combineExtended(Tree& other, const ExtendedCombineOp& op, bool prune = false)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const Tree& a, const OtherTreeType& b, CombineOp& op, bool prune = false)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const Tree& a, const OtherTreeType& b, const CombineOp& op, bool prune = false)"
  },
  {
    "label": "combine2Extended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2Extended(const Tree& a, const OtherTreeType& b, ExtendedCombineOp& op,\n        bool prune = false)"
  },
  {
    "label": "combine2Extended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2Extended(const Tree& a, const OtherTreeType& b, const ExtendedCombineOp&,\n        bool prune = false)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(VisitorOp& op)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(const VisitorOp& op)"
  },
  {
    "label": "visit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2(OtherTreeType& other, VisitorOp& op)"
  },
  {
    "label": "visit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2(OtherTreeType& other, const VisitorOp& op)"
  },
  {
    "label": "NodeIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NodeIter(*this)"
  },
  {
    "label": "NodeCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NodeCIter(*this)"
  },
  {
    "label": "NodeCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "NodeCIter(*this)"
  },
  {
    "label": "LeafIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LeafIter(*this)"
  },
  {
    "label": "LeafCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LeafCIter(*this)"
  },
  {
    "label": "LeafCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LeafCIter(*this)"
  },
  {
    "label": "ValueAllIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueAllIter(*this)"
  },
  {
    "label": "ValueAllCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueAllCIter(*this)"
  },
  {
    "label": "ValueAllCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueAllCIter(*this)"
  },
  {
    "label": "ValueOnIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueOnIter(*this)"
  },
  {
    "label": "ValueOnCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueOnCIter(*this)"
  },
  {
    "label": "ValueOnCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueOnCIter(*this)"
  },
  {
    "label": "ValueOffIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueOffIter(*this)"
  },
  {
    "label": "ValueOffCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueOffCIter(*this)"
  },
  {
    "label": "ValueOffCIter()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueOffCIter(*this)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (IterT)",
    "insertText": "begin()"
  },
  {
    "label": "releaseAllAccessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseAllAccessors()"
  },
  {
    "label": "extendedOp()",
    "kind": "Method",
    "detail": "Function (CombineOp>)",
    "insertText": "extendedOp(op)"
  },
  {
    "label": "extendedOp()",
    "kind": "Method",
    "detail": "Function (CombineOp>)",
    "insertText": "extendedOp(op)"
  },
  {
    "label": "extendedOp()",
    "kind": "Method",
    "detail": "Function (OtherTreeType::ValueType>)",
    "insertText": "extendedOp(op)"
  },
  {
    "label": "extendedOp()",
    "kind": "Method",
    "detail": "Function (OtherTreeType::ValueType>)",
    "insertText": "extendedOp(op)"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "dim(0, 0, 0)"
  },
  {
    "label": "restorePrecision()",
    "kind": "Method",
    "detail": "Function (OnExit)",
    "insertText": "restorePrecision(os)"
  },
  {
    "label": "dim()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "dim(0, 0, 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nodes)",
    "insertText": "for(auto it = this->cbeginLeaf()"
  }
]