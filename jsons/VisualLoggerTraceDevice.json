[
  {
    "label": "FVisualLoggerTraceDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLoggerTraceDevice"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" VisualLogger / VisualLoggerTypes . h \" # if ENABLE_VISUAL_LOG)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FImmediateRenderDelegate, const UObject*, const FVisualLogEntry&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class FVisualLoggerTraceDevice : public FVisualLogDevice { public : FVisualLoggerTraceDevice&)",
    "insertText": "Get()"
  },
  {
    "label": "FVisualLoggerTraceDevice()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerTraceDevice GDevice ; return GDevice ; })",
    "insertText": "FVisualLoggerTraceDevice()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(bool bReleaseMemory = false)"
  },
  {
    "label": "StartRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecordingToFile(double TimeStamp)"
  },
  {
    "label": "StopRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingToFile(double TimeStamp)"
  },
  {
    "label": "DiscardRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardRecordingToFile()"
  },
  {
    "label": "SetFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileName(const FString& InFileName)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const class UObject* LogOwner, FName OwnerName, FName OwnerClassName, const FVisualLogEntry& LogEntry)"
  },
  {
    "label": "HasFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFlags(int32 InFlags)"
  }
]