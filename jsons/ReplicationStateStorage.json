[
  {
    "label": "FReplicationProtocol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationProtocol"
  },
  {
    "label": "FNetRefHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandleManager"
  },
  {
    "label": "FReplicationStateStorageInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationStateStorageInitParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReplicationStateStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationStateStorage"
  },
  {
    "label": "FBaselineReservation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaselineReservation"
  },
  {
    "label": "FPerObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerObjectInfo"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / IrisConfigInternal . h \" # include \" Net / Core / NetBitArray . h \" # include \" Iris / Serialization / InternalNetSerializationContext . h \" # include \" Iris / Serialization / NetSerializationContext . h \" # include \" Containers / ChunkedArray . h \" # if UE_NET_VALIDATE_DC_BASELINES # include \" Containers / Map . h \" # endif namespace UE::Net { struct FReplicationProtocol ; namespace Private { typedef uint32 FInternalNetRefIndex ; class FNetRefHandleManager ; } ; } namespace UE::Net { struct FReplicationStateStorageInitParams { UReplicationSystem* ReplicationSystem = nullptr ; const Private::FNetRefHandleManager* NetRefHandleManager = nullptr ; uint32 MaxObjectCount = 0 ; uint32 MaxInternalNetRefIndex = 0 ; uint32 MaxConnectionCount = 0 ; uint32 MaxDeltaCompressedObjectCount = 0 ; } ; enum class EReplicationStateType : unsigned { UninitializedState,ZeroedState,DefaultState,CurrentSendState,CurrentRecvState,} ; class FReplicationStateStorage { public : class FBaselineReservation { public : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FReplicationStateStorage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FReplicationStateStorage()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FReplicationStateStorageInitParams& InitParams)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetState(uint32 ObjectIndex, EReplicationStateType Base)"
  },
  {
    "label": "AllocBaseline()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "AllocBaseline(uint32 ObjectIndex, EReplicationStateType Base)"
  },
  {
    "label": "FreeBaseline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBaseline(uint32 ObjectIndex, uint8* Storage)"
  },
  {
    "label": "ReserveBaseline()",
    "kind": "Method",
    "detail": "Function (FBaselineReservation)",
    "insertText": "ReserveBaseline(uint32 ObjectIndex, EReplicationStateType Base)"
  },
  {
    "label": "CancelBaselineReservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBaselineReservation(uint32 ObjectIndex, uint8* Storage)"
  },
  {
    "label": "CommitBaselineReservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitBaselineReservation(uint32 ObjectIndex, uint8* Storage, EReplicationStateType Base)"
  },
  {
    "label": "OnMaxInternalNetRefIndexIncreased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaxInternalNetRefIndexIncreased(UE::Net::Private::FInternalNetRefIndex NewMaxInternalIndex)"
  },
  {
    "label": "StateBuffers()",
    "kind": "Method",
    "detail": "Function (private : using ObjectInfoIndexType = uint16 ; enum : unsigned { InvalidObjectInfoIndex = 0,ObjectInfoGrowCount = 2 5 6,} ; enum class EStateBufferType : unsigned { SendState,RecvState,Count } ; struct FPerObjectInfo { const FReplicationProtocol* Protocol = nullptr ; const uint8*)",
    "insertText": "StateBuffers(unsigned)"
  },
  {
    "label": "GetOrCreatePerObjectInfoForObject()",
    "kind": "Method",
    "detail": "Function (} ; uint16 AllocationCount = 0 ; } ; FPerObjectInfo*)",
    "insertText": "GetOrCreatePerObjectInfoForObject(uint32 ObjectIndex)"
  },
  {
    "label": "GetPerObjectInfoForObject()",
    "kind": "Method",
    "detail": "Function (FPerObjectInfo*)",
    "insertText": "GetPerObjectInfoForObject(uint32 ObjectIndex)"
  },
  {
    "label": "FreePerObjectInfoForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePerObjectInfoForObject(uint32 ObjectIndex)"
  },
  {
    "label": "AllocPerObjectInfo()",
    "kind": "Method",
    "detail": "Function (ObjectInfoIndexType)",
    "insertText": "AllocPerObjectInfo()"
  },
  {
    "label": "FreePerObjectInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePerObjectInfo(ObjectInfoIndexType Index)"
  },
  {
    "label": "CloneState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneState(const FReplicationProtocol* Protocol, uint8* TargetState, const uint8* SourceState)"
  },
  {
    "label": "CloneDefaultState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneDefaultState(const FReplicationProtocol* Protocol, uint8* TargetState)"
  },
  {
    "label": "FreeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeState(const FReplicationProtocol* Protocol, uint8* State)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (private : # if UE_NET_VALIDATE_DC_BASELINES TMultiMap<uint32,const void*> BaselineStorageValidation ; # endif const Private::FNetRefHandleManager* NetRefHandleManager = nullptr ; FNetSerializationContext SerializationContext ; Private::FInternalNetSerializationContext InternalSerializationContext ; FNetBitArray UsedPerObjectInfos ; TArray<ObjectInfoIndexType> ObjectIndexToObjectInfoIndex ; TChunkedArray<FPerObjectInfo,ObjectInfoGrowCount*)",
    "insertText": "sizeof(FPerObjectInfo)"
  }
]