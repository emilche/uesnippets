[
  {
    "label": "FPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyNode"
  },
  {
    "label": "SPropertyTreeCategoryRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyTreeCategoryRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Margin . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" Styling / AppStyle . h \" # include \" UserInterface / PropertyEditor / PropertyEditorConstants . h \" class FPropertyNode ; class SPropertyTreeCategoryRow : public STableRow<TSharedPtr<class FPropertyNode*>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyTreeCategoryRow ) : _DisplayName()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FText, DisplayName ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTable)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (STableRow<TSharedPtr<class FPropertyNode*>)",
    "insertText": "Construct(STableRow< TSharedPtr< class FPropertyNode* > >::FArguments() .Padding(3.0f) [ SNew( STextBlock ) .Text( InArgs._DisplayName ) .Font( FAppStyle::GetFontStyle( PropertyEditorConstants::CategoryFontStyle ) ) ] , InOwnerTable)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConstructChildren(ETableViewMode::Type InOwnerTableMode, const TAttribute<FMargin>& InPadding, const TSharedRef<SWidget>& InContent)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (this -> Content = InContent ; InnerContentSlot = nullptr ; SHorizontalBox::FSlot* InnerContentSlotNativePtr = nullptr ; this -> ChildSlot [)",
    "insertText": "SNew(SBorder) .Padding(this, &SPropertyTreeCategoryRow::GetBorderPadding) .BorderImage(FAppStyle::GetBrush(\"Brushes.Panel\")) [ SNew(SBorder) .BorderImage(FAppStyle::Get().GetBrush(\"DetailsView.GridLine\")) .Padding(FMargin(0,0,0,1)) [ SNew(SBorder) .BorderImage(this, &SPropertyTreeCategoryRow::GetInnerBackgroundImage) .Padding(FMargin(5,1,5,0)) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() .HAlign(HAlign_Right) .VAlign(VAlign_Fill) .Padding(FMargin(4, 0, 0, 0)) [ SAssignNew(ExpanderArrowWidget, SExpanderArrow, SharedThis(this) ) .StyleSet(ExpanderStyleSet) .IndentAmount(0) ] + SHorizontalBox::Slot() .FillWidth(1) .Expose( InnerContentSlotNativePtr ) .Padding( InPadding)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (InnerContentSlot = InnerContentSlotNativePtr ; } FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ToggleExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpansion()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} return STableRow<TSharedPtr<class FPropertyNode*>)",
    "insertText": "OnMouseButtonDown(MyGeometry, MouseEvent)"
  },
  {
    "label": "GetInnerBackgroundImage()",
    "kind": "Method",
    "detail": "Function (} protected : const FSlateBrush*)",
    "insertText": "GetInnerBackgroundImage()"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetBrush(\"Brushes.Header\")"
  },
  {
    "label": "GetBorderPadding()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "GetBorderPadding()"
  },
  {
    "label": "GetIndentLevel()",
    "kind": "Method",
    "detail": "Function (const int32 NestingDepth =)",
    "insertText": "GetIndentLevel()"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (const float Indent = 2 0 . 0 f ; return)",
    "insertText": "FMargin(NestingDepth * Indent, 0,0,0)"
  }
]