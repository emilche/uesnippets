[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FGuidReferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGuidReferences"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "FGuidReferences()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Misc / NetworkGuid . h \" # include \" Serialization / BitReader . h \" # include \" Templates / Tuple . h \" # include \" UObject / CoreNet . h \" # include \" UObject / WeakObjectPtr . h \" class FArchive ; class FGuidReferences ; class FProperty ; class UPackageMap ; using FGuidReferencesMap = TMap<int32,FGuidReferences> ; namespace UE::Net::Private { bool bRemapStableSubobjects ; } class FGuidReferences { public :)",
    "insertText": "FGuidReferences(FBitReader& InReader, FBitReaderMark& InMark, const TSet<FNetworkGUID>& InUnmappedGUIDs, const TSet<FNetworkGUID>& InMappedDynamicGUIDs, const int32 InParentIndex, const int32 InCmdIndex, UPackageMap* InPackageMap)"
  },
  {
    "label": "FGuidReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGuidReferences(FGuidReferencesMap* InArray, const int32 InParentIndex, const int32 InCmdIndex, UPackageMap* InPackageMap ): ParentIndex(InParentIndex), CmdIndex(InCmdIndex), NumBufferBits(0), Array(InArray), PackageMap(InPackageMap)"
  },
  {
    "label": "FGuidReferences()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGuidReferences()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGuidReferences&)",
    "insertText": "operator(const FGuidReferences& Other)"
  },
  {
    "label": "FGuidReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGuidReferences(const FGuidReferences& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGuidReferences&)",
    "insertText": "operator(FGuidReferences&&)"
  },
  {
    "label": "FGuidReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGuidReferences(FGuidReferences&& Other)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (UnmappedGUIDs .)",
    "insertText": "CountBytes(Ar)"
  },
  {
    "label": "GetUnmappedGUIDs()",
    "kind": "Method",
    "detail": "Function (} } } const TSet<FNetworkGUID>&)",
    "insertText": "GetUnmappedGUIDs()"
  },
  {
    "label": "RemoveUnmappedGUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnmappedGUID(FNetworkGUID InGUID)"
  },
  {
    "label": "UpdateUnmappedGUIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateUnmappedGUIDs(UPackageMap* InPackageMap, UObject* OriginalObject, const FProperty* Property, int32 AbsOffset)"
  },
  {
    "label": "TrackAllUnmappedGUIDs()",
    "kind": "Method",
    "detail": "Function (int32 ParentIndex ; int32 CmdIndex ; int32 NumBufferBits ; private : TSet<FNetworkGUID> UnmappedGUIDs ; public : TSet<FNetworkGUID> MappedDynamicGUIDs ; TArray<uint8> Buffer ; FGuidReferencesMap* Array ; private : TWeakObjectPtr<UPackageMap> PackageMap ; void)",
    "insertText": "TrackAllUnmappedGUIDs()"
  }
]