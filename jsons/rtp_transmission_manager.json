[
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "RtpSenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpSenderInfo"
  },
  {
    "label": "RtpTransmissionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpTransmissionManager"
  },
  {
    "label": "RtpSenderInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_RTP_TRANSMISSION_MANAGER_H_ # define PC_RTP_TRANSMISSION_MANAGER_H_ # include<stdint . h> # include<functional> # include<string> # include<vector> # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtp_parameters . h \" # include \" api / rtp_receiver_interface . h \" # include \" api / rtp_sender_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" media / base / media_channel . h \" # include \" pc / legacy_stats_collector_interface . h \" # include \" pc / rtp_receiver . h \" # include \" pc / rtp_receiver_proxy . h \" # include \" pc / rtp_sender . h \" # include \" pc / rtp_sender_proxy . h \" # include \" pc / rtp_transceiver . h \" # include \" pc / transceiver_list . h \" # include \" pc / usage_pattern . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / weak_ptr . h \" namespace rtc { class Thread ; } namespace webrtc { struct RtpSenderInfo {)",
    "insertText": "RtpSenderInfo() : first_ssrc(0)"
  },
  {
    "label": "RtpSenderInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpSenderInfo(const std::string& stream_id, const std::string& sender_id, uint32_t ssrc) : stream_id(stream_id), sender_id(sender_id), first_ssrc(ssrc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RtpSenderInfo& other)"
  },
  {
    "label": "RtpTransmissionManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpTransmissionManager(const RtpTransmissionManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpTransmissionManager&)",
    "insertText": "operator(const RtpTransmissionManager&)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "OnSetStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetStreams()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>* init_send_encodings)"
  },
  {
    "label": "CreateSender()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>>)",
    "insertText": "CreateSender(cricket::MediaType media_type, const std::string& id, rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>& send_encodings)"
  },
  {
    "label": "CreateReceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>>)",
    "insertText": "CreateReceiver(cricket::MediaType media_type, const std::string& receiver_id)"
  },
  {
    "label": "CreateAndAddTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "CreateAndAddTransceiver(rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>> sender, rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>> receiver)"
  },
  {
    "label": "FindFirstTransceiverForAddedTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "FindFirstTransceiverForAddedTrack(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<RtpEncodingParameters>* init_send_encodings)"
  },
  {
    "label": "GetSendersInternal()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>>>)",
    "insertText": "GetSendersInternal()"
  },
  {
    "label": "GetReceiversInternal()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>>>)",
    "insertText": "GetReceiversInternal()"
  },
  {
    "label": "GetAudioTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "GetAudioTransceiver()"
  },
  {
    "label": "GetVideoTransceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "GetVideoTransceiver()"
  },
  {
    "label": "AddAudioTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioTrack(AudioTrackInterface* track, MediaStreamInterface* stream)"
  },
  {
    "label": "RemoveAudioTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAudioTrack(AudioTrackInterface* track, MediaStreamInterface* stream)"
  },
  {
    "label": "AddVideoTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVideoTrack(VideoTrackInterface* track, MediaStreamInterface* stream)"
  },
  {
    "label": "RemoveVideoTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVideoTrack(VideoTrackInterface* track, MediaStreamInterface* stream)"
  },
  {
    "label": "OnRemoteSenderAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoteSenderAdded(const RtpSenderInfo& sender_info, MediaStreamInterface* stream, cricket::MediaType media_type)"
  },
  {
    "label": "OnRemoteSenderRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoteSenderRemoved(const RtpSenderInfo& sender_info, MediaStreamInterface* stream, cricket::MediaType media_type)"
  },
  {
    "label": "OnLocalSenderAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSenderAdded(const RtpSenderInfo& sender_info, cricket::MediaType media_type)"
  },
  {
    "label": "OnLocalSenderRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSenderRemoved(const RtpSenderInfo& sender_info, cricket::MediaType media_type)"
  },
  {
    "label": "GetRemoteSenderInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSenderInfo>*)",
    "insertText": "GetRemoteSenderInfos(cricket::MediaType media_type)"
  },
  {
    "label": "GetLocalSenderInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSenderInfo>*)",
    "insertText": "GetLocalSenderInfos(cricket::MediaType media_type)"
  },
  {
    "label": "FindSenderInfo()",
    "kind": "Method",
    "detail": "Function (const RtpSenderInfo*)",
    "insertText": "FindSenderInfo(const std::vector<RtpSenderInfo>& infos, const std::string& stream_id, const std::string& sender_id)"
  },
  {
    "label": "FindSenderForTrack()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>>)",
    "insertText": "FindSenderForTrack(MediaStreamTrackInterface* track)"
  },
  {
    "label": "FindSenderById()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpSenderProxyWithInternal<RtpSenderInternal>>)",
    "insertText": "FindSenderById(const std::string& sender_id)"
  },
  {
    "label": "FindReceiverById()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpReceiverProxyWithInternal<RtpReceiverInternal>>)",
    "insertText": "FindReceiverById(const std::string& receiver_id)"
  },
  {
    "label": "transceivers()",
    "kind": "Method",
    "detail": "Function (TransceiverList*)",
    "insertText": "transceivers()"
  },
  {
    "label": "video_media_channel()",
    "kind": "Method",
    "detail": "Function (cricket::VideoMediaChannel*)",
    "insertText": "video_media_channel()"
  },
  {
    "label": "signaling_thread()",
    "kind": "Method",
    "detail": "Function (private : rtc::Thread*)",
    "insertText": "signaling_thread()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (} rtc::Thread*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "IsUnifiedPlan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUnifiedPlan()"
  },
  {
    "label": "NoteUsageEvent()",
    "kind": "Method",
    "detail": "Function (usage_pattern_ ->)",
    "insertText": "NoteUsageEvent(event)"
  },
  {
    "label": "AddTrackUnifiedPlan()",
    "kind": "Method",
    "detail": "Function (} RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrackUnifiedPlan(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>* init_send_encodings)"
  },
  {
    "label": "AddTrackPlanB()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpSenderInterface>>)",
    "insertText": "AddTrackPlanB(rtc::scoped_refptr<MediaStreamTrackInterface> track, const std::vector<std::string>& stream_ids, const std::vector<RtpEncodingParameters>* init_send_encodings)"
  },
  {
    "label": "CreateAudioReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAudioReceiver(MediaStreamInterface* stream, const RtpSenderInfo& remote_sender_info) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "CreateVideoReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVideoReceiver(MediaStreamInterface* stream, const RtpSenderInfo& remote_sender_info) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "RemoveAndStopReceiver()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpReceiverInterface>)",
    "insertText": "RemoveAndStopReceiver(const RtpSenderInfo& remote_sender_info) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (PeerConnectionObserver*)",
    "insertText": "Observer()"
  },
  {
    "label": "OnNegotiationNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNegotiationNeeded()"
  },
  {
    "label": "media_engine()",
    "kind": "Method",
    "detail": "Function (cricket::MediaEngineInterface*)",
    "insertText": "media_engine()"
  },
  {
    "label": "ssrc_generator()",
    "kind": "Method",
    "detail": "Function (rtc::UniqueRandomIdGenerator*)",
    "insertText": "ssrc_generator()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} TransceiverList transceivers_ ; std::vector<RtpSenderInfo> remote_audio_sender_infos_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool closed_ = false ; bool const is_unified_plan_ ; ConnectionContext* context_ ; UsagePattern* usage_pattern_ ; PeerConnectionObserver* observer_ ; LegacyStatsCollectorInterface* const legacy_stats_ ; std::function<)",
    "insertText": "void()"
  }
]