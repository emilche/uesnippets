[
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FSlateIcon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateIcon"
  },
  {
    "label": "FUIAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUIAction"
  },
  {
    "label": "FButtonArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FButtonArgs"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FMultiBoxBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBoxBuilder"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FMultiBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBox"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FMenuEntryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMenuEntryParams"
  },
  {
    "label": "FBaseMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseMenuBuilder"
  },
  {
    "label": "FMenuBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBarBuilder"
  },
  {
    "label": "FToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolBarBuilder"
  },
  {
    "label": "UToolMenus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenus"
  },
  {
    "label": "FVerticalToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVerticalToolBarBuilder"
  },
  {
    "label": "FUniformToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniformToolBarBuilder"
  },
  {
    "label": "FSlimHorizontalToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlimHorizontalToolBarBuilder"
  },
  {
    "label": "FButtonRowBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FButtonRowBuilder"
  },
  {
    "label": "FSlimHorizontalUniformToolBarBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlimHorizontalUniformToolBarBuilder"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Framework / SlateDelegates . h \" # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SWidget . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxDefs . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Framework / MultiBox / MultiBox . h \" class FUICommandInfo ; class FUICommandList ; struct FSlateIcon ; struct FUIAction ; struct FButtonArgs ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FNewMenuDelegate, class FMenuBuilder&)"
  },
  {
    "label": "FMultiBoxBuilder()",
    "kind": "Method",
    "detail": "Function (class FMultiBoxBuilder { public :)",
    "insertText": "FMultiBoxBuilder(const EMultiBoxType InType, FMultiBoxCustomization InCustomization, const bool bInShouldCloseWindowAfterMenuSelection, const TSharedPtr< const FUICommandList >& InCommandList, TSharedPtr<FExtender> InExtender = TSharedPtr<FExtender>(), FName InTutorialHighlightName = NAME_None, FName InMenuName = NAME_None)"
  },
  {
    "label": "FMultiBoxBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMultiBoxBuilder()"
  },
  {
    "label": "AddEditableText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEditableText(const FText& InLabel, const FText& InToolTip, const FSlateIcon& InIcon, const TAttribute< FText >& InTextAttribute, const FOnTextCommitted& InOnTextCommitted = FOnTextCommitted(), const FOnTextChanged& InOnTextChanged = FOnTextChanged(), bool bInReadOnly = false)"
  },
  {
    "label": "AddVerifiedEditableText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVerifiedEditableText(const FText& InLabel, const FText& InToolTip, const FSlateIcon& InIcon, const TAttribute< FText >& InTextAttribute, const FOnVerifyTextChanged& InOnVerifyTextChanged, const FOnTextCommitted& InOnTextCommitted = FOnTextCommitted(), const FOnTextChanged& InOnTextChanged = FOnTextChanged(), bool bInReadOnly = false)"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "MakeWidget(FMultiBox::FOnMakeMultiBoxBuilderOverride* InMakeMultiBoxBuilderOverride = nullptr)"
  },
  {
    "label": "GetMultiBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class FMultiBox>)",
    "insertText": "GetMultiBox()"
  },
  {
    "label": "PushCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCommandList(const TSharedRef< const FUICommandList > CommandList)"
  },
  {
    "label": "SetLastSelectedCommandIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastSelectedCommandIndex(int32 InLastSelectedCommandIndex)"
  },
  {
    "label": "PopCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopCommandList()"
  },
  {
    "label": "GetTopCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FUICommandList>)",
    "insertText": "GetTopCommandList()"
  },
  {
    "label": "PushExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushExtender(TSharedRef< FExtender > InExtender)"
  },
  {
    "label": "PopExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopExtender()"
  },
  {
    "label": "GetStyleSet()",
    "kind": "Method",
    "detail": "Function (const ISlateStyle*)",
    "insertText": "GetStyleSet()"
  },
  {
    "label": "GetStyleName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetStyleName()"
  },
  {
    "label": "SetCheckBoxStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCheckBoxStyle(FName InCheckBoxStyle)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStyle(const ISlateStyle* InStyleSet, const FName& InStyleName)"
  },
  {
    "label": "GetCustomization()",
    "kind": "Method",
    "detail": "Function (FMultiBoxCustomization)",
    "insertText": "GetCustomization()"
  },
  {
    "label": "SetExtendersEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExtendersEnabled(bool bEnabled)"
  },
  {
    "label": "ExtendersEnabled()",
    "kind": "Method",
    "detail": "Function (bExtendersEnabled = bEnabled ; } bool)",
    "insertText": "ExtendersEnabled()"
  },
  {
    "label": "ApplySectionBeginning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySectionBeginning()"
  },
  {
    "label": "FMenuEntryParams()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<class FMultiBox> MultiBox ; TArray<TSharedPtr<const FUICommandList>> CommandListStack ; TArray<TSharedPtr<class FExtender>> ExtenderStack ; FName TutorialHighlightName ; FName MenuName ; FName CheckBoxStyle ; bool bExtendersEnabled ; } ; struct FMenuEntryParams : public FMultiBlock::FMultiBlockParams {)",
    "insertText": "FMenuEntryParams()"
  },
  {
    "label": "FBaseMenuBuilder()",
    "kind": "Method",
    "detail": "Function (Type = EMultiBlockType::MenuEntry ; } TAttribute<FText> LabelOverride ; TAttribute<FText> ToolTipOverride ; TAttribute<FText> InputBindingOverride ; FSlateIcon IconOverride ; FNewMenuDelegate EntryBuilder ; FOnGetContent MenuBuilder ; TSharedPtr<SWidget> EntryWidget ; bool bIsSubMenu = false ; bool bIsRecursivelySearchable = true ; ; bool bOpenSubMenuOnClick = false ; EUserInterfaceActionType UserInterfaceActionType ; bool bCloseSelfOnly = false ; TSharedPtr<FExtender> Extender ; bool bShouldCloseWindowAfterMenuSelection = true ; FName TutorialHighlightName ; } ; class FBaseMenuBuilder : public FMultiBoxBuilder { public :)",
    "insertText": "FBaseMenuBuilder(const EMultiBoxType InType, const bool bInShouldCloseWindowAfterMenuSelection, TSharedPtr< const FUICommandList > InCommandList, bool bInCloseSelfOnly, TSharedPtr<FExtender> InExtender = TSharedPtr<FExtender>(), const ISlateStyle* InStyleSet = &FCoreStyle::Get(), FName InTutorialHighlightName = NAME_None, FName InMenuName = NAME_None)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuEntry(const TSharedPtr< const FUICommandInfo > InCommand, FName InExtensionHook = NAME_None, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const FSlateIcon& InIconOverride = FSlateIcon(), FName InTutorialHighlightName = NAME_None)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuEntry(const TAttribute<FText>& InLabel, const TAttribute<FText>& InToolTip, const FSlateIcon& InIcon, const FUIAction& UIAction, FName InExtensionHook = NAME_None, const EUserInterfaceActionType UserInterfaceActionType = EUserInterfaceActionType::Button, FName InTutorialHighlightName = NAME_None, const TAttribute<FText>& InInputBindingOverride = TAttribute<FText>())"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuEntry(const FUIAction& UIAction, const TSharedRef< SWidget > Contents, const FName& InExtensionHook = NAME_None, const TAttribute<FText>& InToolTip = TAttribute<FText>(), const EUserInterfaceActionType UserInterfaceActionType = EUserInterfaceActionType::Button, FName InTutorialHighlightName = NAME_None)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuEntry(const FMenuEntryParams& InMenuEntryParams)"
  },
  {
    "label": "FMenuBuilder()",
    "kind": "Method",
    "detail": "Function (protected : bool bCloseSelfOnly ; } ; class FMenuBuilder : public FBaseMenuBuilder { public :)",
    "insertText": "FMenuBuilder(const bool bInShouldCloseWindowAfterMenuSelection, TSharedPtr< const FUICommandList > InCommandList, TSharedPtr<FExtender> InExtender = TSharedPtr<FExtender>(), const bool bInCloseSelfOnly = false, const ISlateStyle* InStyleSet = &FCoreStyle::Get(), bool bInSearchable = true, FName InMenuName = NAME_None, bool bInRecursivelySearchable = true) : FBaseMenuBuilder( EMultiBoxType::Menu, bInShouldCloseWindowAfterMenuSelection, InCommandList, bInCloseSelfOnly, InExtender, InStyleSet, NAME_None, InMenuName ) , bSectionNeedsToBeApplied(false) , bSearchable(bInSearchable) , bRecursivelySearchable(bInRecursivelySearchable) , bIsEditing(false)"
  },
  {
    "label": "AddSearchWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSearchWidget()"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "MakeWidget(FMultiBox::FOnMakeMultiBoxBuilderOverride* InMakeMultiBoxBuilderOverride, uint32 MaxHeight)"
  },
  {
    "label": "AddMenuSeparator()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddMenuSeparator(FName InExtensionHook = NAME_None)"
  },
  {
    "label": "AddSeparator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSeparator(FName InExtensionHook = NAME_None)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSection(FName InExtensionHook, const TAttribute< FText >& InHeadingText = TAttribute<FText>())"
  },
  {
    "label": "EndSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSection()"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubMenu(const TAttribute<FText>& InMenuLabel, const TAttribute<FText>& InToolTip, const FNewMenuDelegate& InSubMenu, const FUIAction& InUIAction, FName InExtensionHook, const EUserInterfaceActionType InUserInterfaceActionType, const bool bInOpenSubMenuOnClick = false, const FSlateIcon& InIcon = FSlateIcon(), const bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubMenu(const TAttribute<FText>& InMenuLabel, const TAttribute<FText>& InToolTip, const FNewMenuDelegate& InSubMenu, const bool bInOpenSubMenuOnClick = false, const FSlateIcon& InIcon = FSlateIcon(), const bool bInShouldCloseWindowAfterMenuSelection = true, FName InExtensionHook = NAME_None, FName InTutorialHighlightName = NAME_None)"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubMenu(const TSharedRef< SWidget > Contents, const FNewMenuDelegate& InSubMenu, const bool bInOpenSubMenuOnClick = false, const bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubMenu(const FUIAction& UIAction, const TSharedRef< SWidget > Contents, const FNewMenuDelegate& InSubMenu, const bool bInShouldCloseWindowAfterMenuSelection = true)"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidget(TSharedRef<SWidget> InWidget, const FText& InLabel, bool bInNoIndent = false, bool bInSearchable = true, const TAttribute<FText>& InToolTipText = FText())"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidget(const TSharedRef<SWidget>& InWidget, const FText& InLabel, const FMenuEntryStyleParams& InStyleParams, bool bInSearchable = true, const TAttribute<FText>& InToolTipText = FText())"
  },
  {
    "label": "SetIsEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEditing(bool bInIsEditing)"
  },
  {
    "label": "ApplyHook()",
    "kind": "Method",
    "detail": "Function (bIsEditing = bInIsEditing ; } protected : void)",
    "insertText": "ApplyHook(FName InExtensionHook, EExtensionHook::Position HookPosition)"
  },
  {
    "label": "AddWrapperSubMenu()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddWrapperSubMenu(const FText& InMenuLabel, const FText& InToolTip, const FOnGetContent& InSubMenu, const FSlateIcon& InIcon)"
  },
  {
    "label": "AddWrapperSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWrapperSubMenu(const FText& InMenuLabel, const FText& InToolTip, const FOnGetContent& InSubMenu, const FSlateIcon& InIcon, const FUIAction& UIAction)"
  },
  {
    "label": "AddWrapperSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWrapperSubMenu(const FText& InMenuLabel, const FText& InToolTip, const TSharedPtr<SWidget>& InSubMenu, const FSlateIcon& InIcon)"
  },
  {
    "label": "SetSearchable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchable(bool bIsSearchable)"
  },
  {
    "label": "FMenuBarBuilder()",
    "kind": "Method",
    "detail": "Function (bSearchable = bIsSearchable ; } ; private : FName CurrentSectionExtensionHook ; FText CurrentSectionHeadingText ; bool bSectionNeedsToBeApplied ; bool bSearchable ; bool bRecursivelySearchable ; bool bIsEditing ; } ; class FMenuBarBuilder : public FBaseMenuBuilder { public :)",
    "insertText": "FMenuBarBuilder(TSharedPtr< const FUICommandList > InCommandList, TSharedPtr<FExtender> InExtender = TSharedPtr<FExtender>(), const ISlateStyle* InStyleSet = &FCoreStyle::Get(), FName InMenuName = NAME_None) : FBaseMenuBuilder( EMultiBoxType::MenuBar, false, InCommandList, false, InExtender, InStyleSet, NAME_None, InMenuName)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (MultiBox ->)",
    "insertText": "SetStyle(InStyleSet, \"WindowMenuBar\")"
  },
  {
    "label": "AddPullDownMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPullDownMenu(const TAttribute<FText>& InMenuLabel, const TAttribute<FText>& InToolTip, const FNewMenuDelegate& InPullDownMenu, FName InExtensionHook = NAME_None, FName InTutorialHighlightName = NAME_None)"
  },
  {
    "label": "AddPullDownMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPullDownMenu(const TAttribute<FText>& InMenuLabel, const TAttribute<FText>& InToolTip, const FOnGetContent& InMenuContentGenerator, FName InExtensionHook = NAME_None, FName InTutorialHighlightName = NAME_None)"
  },
  {
    "label": "FToolBarBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FToolBarBuilder(TSharedPtr<const FUICommandList> InCommandList, FMultiBoxCustomization InCustomization, TSharedPtr<FExtender> InExtender = nullptr, const bool InForceSmallIcons = false) : FMultiBoxBuilder(EMultiBoxType::ToolBar, InCustomization, false, InCommandList, InExtender) , bSectionNeedsToBeApplied(false) , bSectionShouldHaveSeparator(true) , bIsFocusable(true) , bForceSmallIcons(InForceSmallIcons)"
  },
  {
    "label": "SetLabelVisibility()",
    "kind": "Method",
    "detail": "Function (MultiBox -> bIsFocusable = bIsFocusable ; } void)",
    "insertText": "SetLabelVisibility(EVisibility InLabelVisibility)"
  },
  {
    "label": "SetIsFocusable()",
    "kind": "Method",
    "detail": "Function (LabelVisibility = InLabelVisibility ; } void)",
    "insertText": "SetIsFocusable(bool bInIsFocusable)"
  },
  {
    "label": "AddToolBarButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolBarButton(const FButtonArgs& ButtonArgs)"
  },
  {
    "label": "AddToolBarButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolBarButton(const TSharedPtr<const FUICommandInfo> InCommand, FName InExtensionHook = NAME_None, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const TAttribute<FSlateIcon>& InIconOverride = TAttribute<FSlateIcon>(), FName InTutorialHighlightName = NAME_None, FNewMenuDelegate InCustomMenuDelegate = FNewMenuDelegate(), TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>(), TAttribute<FText> InToolbarLabelOverride = TAttribute<FText>())"
  },
  {
    "label": "AddToolBarButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolBarButton(const FUIAction& InAction, FName InExtensionHook = NAME_None, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const TAttribute<FSlateIcon>& InIconOverride = TAttribute<FSlateIcon>(), const EUserInterfaceActionType UserInterfaceActionType = EUserInterfaceActionType::Button, FName InTutorialHighlightName = NAME_None, TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>(), TAttribute<FText> InToolbarLabelOverride = TAttribute<FText>())"
  },
  {
    "label": "AddComboButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComboButton(const FUIAction& InAction, const FOnGetContent& InMenuContentGenerator, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const TAttribute<FSlateIcon>& InIconOverride = TAttribute<FSlateIcon>(), bool bInSimpleComboBox = false, FName InTutorialHighlightName = NAME_None, TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>(), TAttribute<FText> InToolbarLabelOverride = TAttribute<FText>())"
  },
  {
    "label": "AddToolbarStackButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolbarStackButton(const TSharedPtr< const FUICommandInfo > InCommand, FName InTutorialHighlightName = NAME_None)"
  },
  {
    "label": "AddToolBarWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToolBarWidget(TSharedRef<SWidget> InWidget, const TAttribute<FText>& InLabel = TAttribute<FText>(), FName InTutorialHighlightName = NAME_None, bool bInSearchable = true, const TAttribute<FText>& InToolTip = TAttribute<FText>())"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidget(TSharedRef<SWidget> InWidget, FName InTutorialHighlightName = NAME_None, bool bInSearchable = true, EHorizontalAlignment InAlignment = HAlign_Fill, FNewMenuDelegate InCustomMenuDelegate = FNewMenuDelegate(), TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>())"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidget(TSharedRef<SWidget> InWidget, const FMenuEntryStyleParams& InStyleParams, FName InTutorialHighlightName = NAME_None, bool bInSearchable = true, FNewMenuDelegate InCustomMenuDelegate = FNewMenuDelegate(), TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>())"
  },
  {
    "label": "AddSeparator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSeparator(FName InExtensionHook = NAME_None, TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>())"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSection(FName InExtensionHook, bool bInSectionShouldHaveSeparator = true)"
  },
  {
    "label": "BeginBlockGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBlockGroup()"
  },
  {
    "label": "EndBlockGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBlockGroup()"
  },
  {
    "label": "BeginStyleOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginStyleOverride(FName StyleOverrideName)"
  },
  {
    "label": "EndStyleOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndStyleOverride()"
  },
  {
    "label": "FToolBarBuilder()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FToolBarBuilder(EMultiBoxType InType, TSharedPtr<const FUICommandList> InCommandList, FMultiBoxCustomization InCustomization, TSharedPtr<FExtender> InExtender = TSharedPtr<FExtender>(), const bool InForceSmallIcons = false) : FMultiBoxBuilder(InType, InCustomization, false, InCommandList, InExtender) , bSectionNeedsToBeApplied(false) , bSectionShouldHaveSeparator(true) , bIsFocusable(false) , bForceSmallIcons(InForceSmallIcons)"
  },
  {
    "label": "InitializeToolBarButtonBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeToolBarButtonBlock(TSharedPtr<FToolBarButtonBlock> ButtonRowBlock, const FButtonArgs& ButtonArgs)"
  },
  {
    "label": "AddWidgetInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetInternal(TSharedRef<SWidget> InWidget, const FMenuEntryStyleParams& InStyleParams, FName InTutorialHighlightName = NAME_None, bool bInSearchable = true, FNewMenuDelegate InCustomMenuDelegate = FNewMenuDelegate(), TAttribute<EVisibility> InVisibilityOverride = TAttribute<EVisibility>())"
  },
  {
    "label": "FVerticalToolBarBuilder()",
    "kind": "Method",
    "detail": "Function (private : FName CurrentSectionExtensionHook ; FName CurrentStyleOverride ; TOptional<EVisibility> LabelVisibility ; bool bSectionNeedsToBeApplied ; bool bSectionShouldHaveSeparator ; bool bIsFocusable ; bool bForceSmallIcons ; } ; class FVerticalToolBarBuilder : public FToolBarBuilder { public :)",
    "insertText": "FVerticalToolBarBuilder(TSharedPtr<const FUICommandList> InCommandList, FMultiBoxCustomization InCustomization, TSharedPtr<FExtender> InExtender = nullptr, const bool InForceSmallIcons = false) : FToolBarBuilder(EMultiBoxType::VerticalToolBar, InCommandList, InCustomization, InExtender, InForceSmallIcons)"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetStyle(&FAppStyle::Get(), \"FVerticalToolBar\")"
  },
  {
    "label": "FUniformToolBarBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; class FUniformToolBarBuilder : public FToolBarBuilder { public :)",
    "insertText": "FUniformToolBarBuilder(TSharedPtr<const FUICommandList> InCommandList, FMultiBoxCustomization InCustomization, TSharedPtr<FExtender> InExtender = nullptr, const bool InForceSmallIcons = false) : FToolBarBuilder(EMultiBoxType::UniformToolBar, InCommandList, InCustomization, InExtender, InForceSmallIcons)"
  },
  {
    "label": "FSlimHorizontalToolBarBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlimHorizontalToolBarBuilder : public FToolBarBuilder { public :)",
    "insertText": "FSlimHorizontalToolBarBuilder(TSharedPtr<const FUICommandList> InCommandList, FMultiBoxCustomization InCustomization, TSharedPtr<FExtender> InExtender = nullptr, const bool InForceSmallIcons = false) : FToolBarBuilder(EMultiBoxType::SlimHorizontalToolBar, InCommandList, InCustomization, InExtender, InForceSmallIcons)"
  },
  {
    "label": "FButtonRowBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; class FButtonRowBuilder : public FMultiBoxBuilder { public :)",
    "insertText": "FButtonRowBuilder(TSharedPtr< const FUICommandList > InCommandList, TSharedPtr<FExtender> InExtender = TSharedPtr<FExtender>()) : FMultiBoxBuilder(EMultiBoxType::ButtonRow, FMultiBoxCustomization::None, false, InCommandList, InExtender)"
  },
  {
    "label": "AddButton()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddButton(const TSharedPtr< const FUICommandInfo > InCommand, const TAttribute<FText>& InLabelOverride = TAttribute<FText>(), const TAttribute<FText>& InToolTipOverride = TAttribute<FText>(), const FSlateIcon& InIconOverride = FSlateIcon())"
  },
  {
    "label": "AddButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddButton(const FText& InLabel, const FText& InToolTip, const FUIAction& InUIAction, const FSlateIcon& InIcon = FSlateIcon(), const EUserInterfaceActionType InUserInterfaceActionType = EUserInterfaceActionType::Button)"
  },
  {
    "label": "FSlimHorizontalUniformToolBarBuilder()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlimHorizontalUniformToolBarBuilder : public FToolBarBuilder { public :)",
    "insertText": "FSlimHorizontalUniformToolBarBuilder(TSharedPtr<const FUICommandList> InCommandList, FMultiBoxCustomization InCustomization, TSharedPtr<FExtender> InExtender = nullptr, const bool InForceSmallIcons = false)"
  }
]