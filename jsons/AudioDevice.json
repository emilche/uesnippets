[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FAudioEffectsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioEffectsManager"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSoundBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundBuffer"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "IAudioSpatialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioSpatialization"
  },
  {
    "label": "ICompressedAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompressedAudioInfo"
  },
  {
    "label": "ISubmixBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISubmixBufferListener"
  },
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "USoundEffectSourcePreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSourcePreset"
  },
  {
    "label": "USoundEffectSubmixPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmixPreset"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FAttenuationFocusData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationFocusData"
  },
  {
    "label": "FAudioComponentParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentParam"
  },
  {
    "label": "FAudioQualitySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioQualitySettings"
  },
  {
    "label": "FAudioVirtualLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVirtualLoop"
  },
  {
    "label": "FSourceEffectChainEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceEffectChainEntry"
  },
  {
    "label": "FSoundClassDynamicProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundClassDynamicProperties"
  },
  {
    "label": "FSoundClassProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundClassProperties"
  },
  {
    "label": "FSoundGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundGroup"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FSoundSpectrumAnalyzerDelegateSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerDelegateSettings"
  },
  {
    "label": "FSoundSpectrumAnalyzerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerSettings"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FPatchInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchInput"
  },
  {
    "label": "FPatchOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchOutput"
  },
  {
    "label": "FAudioDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDebugger"
  },
  {
    "label": "EDebugState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDebugState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListener"
  },
  {
    "label": "FInteriorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInteriorSettings"
  },
  {
    "label": "FListenerProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListenerProxy"
  },
  {
    "label": "FAudioClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioClassInfo"
  },
  {
    "label": "FSoundMixState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundMixState"
  },
  {
    "label": "FSoundMixClassOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundMixClassOverride"
  },
  {
    "label": "FActivatedReverb",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivatedReverb"
  },
  {
    "label": "FAttenuationListenerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationListenerData"
  },
  {
    "label": "FGlobalFocusSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalFocusSettings"
  },
  {
    "label": "IDeviceChangedListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDeviceChangedListener"
  },
  {
    "label": "FAudioDeviceRenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioDeviceRenderInfo"
  },
  {
    "label": "FCreateComponentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateComponentParams"
  },
  {
    "label": "FAudioVolumeSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVolumeSettings"
  },
  {
    "label": "FAudioSpatializationInterfaceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioSpatializationInterfaceInfo"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "FSoundConcurrencyManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundConcurrencyManager"
  },
  {
    "label": "CreateSoundAssetDecoder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDeviceHandle . h \" # include \" AudioDynamicParameter . h \" # include \" AudioVirtualLoop . h \" # include \" Components / AudioComponent . h \" # include \" HAL / LowLevelMemStats . h \" # include \" Math / Transform . h \" # include \" Math / Vector . h \" # include \" Sound / AudioVolume . h \" # include \" Sound / SoundClass . h \" # include \" Sound / SoundMix . h \" # include \" Subsystems / AudioEngineSubsystem . h \" # include \" UObject / StrongObjectPtr . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_3 # include \" Audio . h \" # include \" AudioDeviceManager . h \" # include \" AudioMixer . h \" # include \" CoreMinimal . h \" # include \" DSP / MultithreadedPatching . h \" # include \" Engine / Engine . h \" # include \" EngineGlobals . h \" # include \" IAudioExtensionPlugin . h \" # include \" ISubmixBufferListener . h \" # include \" Sound / AudioSettings . h \" # include \" Sound / SoundAttenuation . h \" # include \" Sound / SoundConcurrency . h \" # include \" Sound / SoundModulationDestination . h \" # include \" Sound / SoundSourceBus . h \" # include \" Sound / SoundSubmix . h \" # include \" Sound / SoundSubmixSend . h \" # include \" Subsystems / SubsystemCollection . h \" # endif class FArchive ; class FAudioDevice ; class FAudioEffectsManager ; class FCanvas ; class FOutputDevice ; class FReferenceCollector ; class FSoundBuffer ; class FViewport ; class FViewportClient ; class IAudioSpatialization ; class ICompressedAudioInfo ; class ISubmixBufferListener ; class UReverbEffect ; class USoundAttenuation ; class USoundBase ; class USoundClass ; class USoundConcurrency ; class USoundEffectSourcePreset ; class USoundEffectSubmixPreset ; class USoundMix ; class USoundModulatorBase ; class USoundSubmixBase ; class USoundSourceBus ; class USoundWave ; class UWorld ; struct FActiveSound ; struct FAttenuationFocusData ; struct FAudioComponentParam ; struct FAudioQualitySettings ; struct FAudioVirtualLoop ; struct FSourceEffectChainEntry ; struct FSoundClassDynamicProperties ; struct FSoundClassProperties ; struct FSoundGroup ; struct FSoundParseParameters ; struct FSoundSpectrumAnalyzerDelegateSettings ; struct FSoundSpectrumAnalyzerSettings ; struct FWaveInstance ; namespace Audio { class FPatchInput ; struct FPatchOutput ; typedef TSharedPtr<FPatchOutput,ESPMode::ThreadSafe> FPatchOutputStrongPtr ; } namespace Audio { class FAudioDebugger ; ICompressedAudioInfo*)",
    "insertText": "CreateSoundAssetDecoder(const FName& InRuntimeFormat)"
  },
  {
    "label": "GetTransmitterID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTransmitterID(uint64 ComponentID, UPTRINT WaveInstanceHash, uint32 PlayOrder)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (} enum EDebugState { DEBUGSTATE_None,DEBUGSTATE_IsolateDryAudio,DEBUGSTATE_IsolateReverb,DEBUGSTATE_TestLPF,DEBUGSTATE_TestHPF,DEBUGSTATE_TestLFEBleed,DEBUGSTATE_DisableLPF,DEBUGSTATE_DisableHPF,DEBUGSTATE_DisableRadio,DEBUGSTATE_MAX,} ; namespace ESoundMixState { enum Type { Inactive,FadingIn,Active,FadingOut,AwaitingRemoval,} ; const TCHAR*)",
    "insertText": "GetString(ESoundMixState::Type InType)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"unknown\")"
  },
  {
    "label": "GetUp()",
    "kind": "Method",
    "detail": "Function (} } } namespace ESortedActiveWaveGetType { enum Type { FullUpdate,PausedUpdate,QueryOnly,} ; } struct FListener { FTransform Transform ; FVector Velocity ; FVector AttenuationOverride ; uint32 bUseAttenuationOverride : 1 ; struct FInteriorSettings InteriorSettings ; uint32 AudioVolumeID ; uint32 WorldID ; int32 ListenerIndex ; double InteriorStartTime ; double InteriorEndTime ; double ExteriorEndTime ; double InteriorLPFEndTime ; double ExteriorLPFEndTime ; float InteriorVolumeInterp ; float InteriorLPFInterp ; float ExteriorVolumeInterp ; float ExteriorLPFInterp ; FAudioDevice* AudioDevice ; FVector)",
    "insertText": "GetUp()"
  },
  {
    "label": "GetFront()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetFront()"
  },
  {
    "label": "GetRight()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetRight()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetPosition(bool bAllowOverride)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Interpolate(const double EndTime)"
  },
  {
    "label": "UpdateCurrentInteriorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentInteriorSettings()"
  },
  {
    "label": "ApplyInteriorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyInteriorSettings(uint32 AudioVolumeID, const FInteriorSettings& Settings)"
  },
  {
    "label": "FListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FListener(FAudioDevice* InAudioDevice) : Transform(FTransform::Identity) , Velocity(ForceInit) , AttenuationOverride(ForceInit) , bUseAttenuationOverride(false) , AudioVolumeID(0) , ListenerIndex(0) , InteriorStartTime(0.0) , InteriorEndTime(0.0) , ExteriorEndTime(0.0) , InteriorLPFEndTime(0.0) , ExteriorLPFEndTime(0.0) , InteriorVolumeInterp(0.f) , InteriorLPFInterp(0.f) , ExteriorVolumeInterp(0.f) , ExteriorLPFInterp(0.f) , AudioDevice(InAudioDevice)"
  },
  {
    "label": "FListener()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FListener()"
  },
  {
    "label": "FListenerProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FListenerProxy() : bUseAttenuationOverride(false)"
  },
  {
    "label": "FListenerProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FListenerProxy(const FListener& Listener) : Transform(Listener.Transform) , AttenuationOverride(Listener.AttenuationOverride) , bUseAttenuationOverride(Listener.bUseAttenuationOverride) , WorldID(Listener.WorldID)"
  },
  {
    "label": "FAudioClassInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAudioClassInfo { int32 NumResident ; int32 SizeResident ; int32 NumRealTime ; int32 SizeRealTime ;)",
    "insertText": "FAudioClassInfo() : NumResident(0) , SizeResident(0) , NumRealTime(0) , SizeRealTime(0)"
  },
  {
    "label": "FSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSoundMixState { bool IsBaseSoundMix ; uint32 ActiveRefCount ; uint32 PassiveRefCount ; double StartTime ; double FadeInStartTime ; double FadeInEndTime ; double FadeOutStartTime ; double EndTime ; float InterpValue ; ESoundMixState::Type CurrentState ; } ; struct FSoundMixClassOverride { FSoundClassAdjuster SoundClassAdjustor ; FDynamicParameter VolumeOverride ; FDynamicParameter PitchOverride ; float FadeInTime ; uint8 bOverrideApplied : 1 ; uint8 bOverrideChanged : 1 ; uint8 bIsClearing : 1 ; uint8 bIsCleared : 1 ;)",
    "insertText": "FSoundMixClassOverride() : VolumeOverride(1.0f) , PitchOverride(1.0f) , FadeInTime(0.0f) , bOverrideApplied(false) , bOverrideChanged(false) , bIsClearing(false) , bIsCleared(false)"
  },
  {
    "label": "FActivatedReverb()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TMap<USoundClass*,FSoundMixClassOverride> FSoundMixClassOverrideMap ; typedef TWeakObjectPtr<UAudioComponent> FAudioComponentPtr ; struct FActivatedReverb { FReverbSettings ReverbSettings ; float Priority ;)",
    "insertText": "FActivatedReverb() : Priority(0.f)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAttenuationListenerData)",
    "insertText": "Create(const FAudioDevice& AudioDevice, int32 ListenerIndex, const FTransform& InSoundTransform, const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "FAttenuationListenerData()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FAttenuationListenerData(const FTransform& InListenerTransform, const FTransform& InSoundTransform, const FSoundAttenuationSettings& InAttenuationSettings) : ListenerToSoundDir(FVector::ZeroVector) , AttenuationDistance(0.0f) , ListenerToSoundDistance(0.0f) , ListenerToSoundDistanceForPanning(0.0f) , ListenerTransform(InListenerTransform) , SoundTransform(InSoundTransform) , AttenuationSettings(&InAttenuationSettings)"
  },
  {
    "label": "FGlobalFocusSettings()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGlobalFocusSettings { float FocusAzimuthScale ; float NonFocusAzimuthScale ; float FocusDistanceScale ; float NonFocusDistanceScale ; float FocusVolumeScale ; float NonFocusVolumeScale ; float FocusPriorityScale ; float NonFocusPriorityScale ;)",
    "insertText": "FGlobalFocusSettings() : FocusAzimuthScale(1.0f) , NonFocusAzimuthScale(1.0f) , FocusDistanceScale(1.0f) , NonFocusDistanceScale(1.0f) , FocusVolumeScale(1.0f) , NonFocusVolumeScale(1.0f) , FocusPriorityScale(1.0f) , NonFocusPriorityScale(1.0f)"
  },
  {
    "label": "OnDeviceRemoved()",
    "kind": "Method",
    "detail": "Function (} } ; class IDeviceChangedListener { public : void)",
    "insertText": "OnDeviceRemoved(FString DeviceID)"
  },
  {
    "label": "OnDefaultDeviceChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDefaultDeviceChanged()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; struct FAudioDeviceRenderInfo { int32 NumFrames = 0 ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAudioDevicePreRender, const FAudioDeviceRenderInfo&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAudioDevicePostRender, const FAudioDeviceRenderInfo&)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (class FAudioDevice : public FExec { public : # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar = *GLog)"
  },
  {
    "label": "GetTestComponent()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UE_BUILD_SHIPPING UAudioComponent*)",
    "insertText": "GetTestComponent(UWorld* InWorld)"
  },
  {
    "label": "StopTestComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTestComponent()"
  },
  {
    "label": "HandleDumpSoundInfoCommand()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HandleDumpSoundInfoCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListWavesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListWavesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSoundClassesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSoundClassesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleShowSoundClassHierarchyCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShowSoundClassHierarchyCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSoundClassVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSoundClassVolumesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListAudioComponentsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListAudioComponentsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSoundDurationsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSoundDurationsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSoundTemplateInfoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSoundTemplateInfoCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSetBaseSoundMixCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetBaseSoundMixCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleIsolateDryAudioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIsolateDryAudioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleIsolateReverbCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIsolateReverbCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestLPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestLPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestHPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestHPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestLFEBleedCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestLFEBleedCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisableLPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisableLPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisableHPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisableHPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisableRadioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisableRadioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleEnableRadioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEnableRadioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetSoundStateCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetSoundStateCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleSpatializationExtensionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleSpatializationExtensionCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleEnableHRTFForAllCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEnableHRTFForAllCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSoloCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSoloCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleClearSoloCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClearSoloCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePlayAllPIEAudioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePlayAllPIEAudioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudio3dVisualizeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudio3dVisualizeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioMemoryInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioMemoryInfo(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloSoundClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioSoloSoundClass(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloSoundWave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioSoloSoundWave(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloSoundCue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioSoloSoundCue(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioMixerDebugSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioMixerDebugSound(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSoundClassFixup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSoundClassFixup(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioDebugSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioDebugSound(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetAllDynamicSoundVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetAllDynamicSoundVolumesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetDynamicSoundVolumeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetDynamicSoundVolumeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleGetDynamicSoundVolumeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetDynamicSoundVolumeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSetDynamicSoundCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetDynamicSoundCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FToggleSoloPtr =)",
    "insertText": "void(Audio::FAudioDebugger::*)(FName InName, bool bExclusive)"
  },
  {
    "label": "HandleAudioSoloCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAudioSoloCommon(const TCHAR* Cmd, FOutputDevice& Ar, FToggleSoloPtr Funct)"
  },
  {
    "label": "ShowSoundClassHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSoundClassHierarchy(FOutputDevice& Ar, USoundClass* SoundClass = nullptr, int32 Indent = 0)"
  },
  {
    "label": "GetSoundClassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoundClassInfo(TMap<FName, FAudioClassInfo>& AudioClassInfos)"
  },
  {
    "label": "FAudioDevice()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "FAudioDevice()"
  },
  {
    "label": "GetAudioDeviceList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioDeviceList(TArray<FString>& OutAudioDeviceNames)"
  },
  {
    "label": "GetQualityLevelSettings()",
    "kind": "Method",
    "detail": "Function (} const FAudioQualitySettings&)",
    "insertText": "GetQualityLevelSettings()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(Audio::FDeviceId InDeviceID, int32 InMaxSources, int32 BufferSizeOverride = INDEX_NONE, int32 NumBuffersOverride = INDEX_NONE)"
  },
  {
    "label": "OnDeviceCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeviceCreated(Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "OnDeviceDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeviceDestroyed(Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool bGameTicking)"
  },
  {
    "label": "UpdateGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGameThread()"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Suspend(bool bGameTicking)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetSortedActiveWaveInstances()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSortedActiveWaveInstances(TArray<FWaveInstance*>& WaveInstances, const ESortedActiveWaveGetType::Type GetType)"
  },
  {
    "label": "UpdateActiveSoundPlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveSoundPlaybackTime(bool bIsTimeTicking)"
  },
  {
    "label": "FadeOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeOut()"
  },
  {
    "label": "FadeIn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FadeIn()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush(UWorld* WorldToFlush, bool bClearActivatedReverb = true)"
  },
  {
    "label": "FlushExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushExtended(UWorld* WorldToFlush, bool bClearActivatedReverb)"
  },
  {
    "label": "FlushAudioRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAudioRenderingCommands(bool bPumpSynchronously = false)"
  },
  {
    "label": "OnPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreGarbageCollect()"
  },
  {
    "label": "StopSoundsUsingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSoundsUsingResource(USoundWave* SoundWave, TArray<UAudioComponent*>* StoppedComponents = nullptr)"
  },
  {
    "label": "LegacyReverbDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegacyReverbDisabled()"
  },
  {
    "label": "OnBeginPIE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnBeginPIE(const bool bIsSimulating)"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE(const bool bIsSimulating)"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Precache(USoundWave* SoundWave, bool bSynchronous = false, bool bTrackMemory = true, bool bForceFullDecompression = false)"
  },
  {
    "label": "GetCompressionDurationThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCompressionDurationThreshold(const FSoundGroup &SoundGroup)"
  },
  {
    "label": "ShouldUseRealtimeDecompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseRealtimeDecompression(bool bForceFullDecompression, const FSoundGroup &SoundGroup, USoundWave* SoundWave, float CompressedDurationThreshold)"
  },
  {
    "label": "PrecacheStartupSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecacheStartupSounds()"
  },
  {
    "label": "SetMaxChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxChannels(int32 InMaxChannels)"
  },
  {
    "label": "SetMaxChannelsScaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxChannelsScaled(float InScaledChannelCount)"
  },
  {
    "label": "GetMaxChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxChannels()"
  },
  {
    "label": "GetMaxSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxSources()"
  },
  {
    "label": "GetGlobalPitchRange()",
    "kind": "Method",
    "detail": "Function (TRange<float>)",
    "insertText": "GetGlobalPitchRange()"
  },
  {
    "label": "StopAllSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllSounds(bool bShouldStopUISounds = false)"
  },
  {
    "label": "SetListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListener(UWorld* World, int32 InListenerIndex, const FTransform& ListenerTransform, float InDeltaSeconds)"
  },
  {
    "label": "SetListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListenerAttenuationOverride(0, AttenuationPosition)"
  },
  {
    "label": "SetListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetListenerAttenuationOverride(int32 ListenerIndex, const FVector AttenuationPosition)"
  },
  {
    "label": "ClearListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearListenerAttenuationOverride(0)"
  },
  {
    "label": "ClearListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearListenerAttenuationOverride(int32 ListenerIndex)"
  },
  {
    "label": "GetListeners()",
    "kind": "Method",
    "detail": "Function (const TArray<FListener>&)",
    "insertText": "GetListeners()"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCreateComponentParams(UWorld* World, AActor* Actor = nullptr)"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCreateComponentParams(AActor* Actor)"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCreateComponentParams(FAudioDevice* AudioDevice)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (USoundAttenuation* AttenuationSettings ; TSubclassOf<UAudioComponent> AudioComponentClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (TSet<USoundConcurrency*> ConcurrencySet ; bool bAutoDestroy ; bool bPlay ; bool bStopWhenOwnerDestroyed ; void)",
    "insertText": "SetLocation(FVector Location)"
  },
  {
    "label": "ShouldUseAttenuation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseAttenuation()"
  },
  {
    "label": "CommonInit()",
    "kind": "Method",
    "detail": "Function (private : UWorld* World ; AActor* Actor ; FAudioDevice* AudioDevice ; bool bLocationSet ; FVector Location ; void)",
    "insertText": "CommonInit()"
  },
  {
    "label": "CreateComponent()",
    "kind": "Method",
    "detail": "Function (FAudioDevice ; } ; UAudioComponent*)",
    "insertText": "CreateComponent(USoundBase* Sound, const FCreateComponentParams& Params = FCreateComponentParams())"
  },
  {
    "label": "PlaySoundAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySoundAtLocation(USoundBase* Sound, UWorld* World, float VolumeMultiplier, float PitchMultiplier, float StartTime, const FVector& Location, const FRotator& Rotation, USoundAttenuation* AttenuationSettings = nullptr, USoundConcurrency* ConcurrencySettings = nullptr, const TArray<FAudioParameter>* Params = nullptr, const AActor* OwningActor = nullptr)"
  },
  {
    "label": "AddNewActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewActiveSound(const FActiveSound& ActiveSound, const TArray<FAudioParameter>* InDefaultParams = nullptr)"
  },
  {
    "label": "AddNewActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewActiveSound(const FActiveSound& ActiveSound, TArray<FAudioParameter>&& InDefaultParams)"
  },
  {
    "label": "RetriggerVirtualLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetriggerVirtualLoop(FAudioVirtualLoop& VirtualLoop)"
  },
  {
    "label": "StopActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopActiveSound(uint64 AudioComponentID)"
  },
  {
    "label": "StopActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopActiveSound(FActiveSound* ActiveSound)"
  },
  {
    "label": "PauseActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseActiveSound(uint64 AudioComponentID, const bool bInIsPaused)"
  },
  {
    "label": "NotifyActiveSoundOcclusionTraceDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActiveSoundOcclusionTraceDone(FActiveSound* ActiveSound, bool bIsOccluded)"
  },
  {
    "label": "CanHaveMultipleActiveSounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHaveMultipleActiveSounds(uint64 AudioComponentID)"
  },
  {
    "label": "SetCanHaveMultipleActiveSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanHaveMultipleActiveSounds(uint64 AudioComponentID, bool InCanHaveMultipleActiveSounds)"
  },
  {
    "label": "RemoveActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveSound(FActiveSound* ActiveSound)"
  },
  {
    "label": "AddAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioVolumeProxy(const FAudioVolumeProxy& Proxy)"
  },
  {
    "label": "RemoveAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAudioVolumeProxy(uint32 AudioVolumeID)"
  },
  {
    "label": "UpdateAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioVolumeProxy(const FAudioVolumeProxy& Proxy)"
  },
  {
    "label": "GetAudioVolumeSettings()",
    "kind": "Method",
    "detail": "Function (struct FAudioVolumeSettings { uint32 AudioVolumeID = INDEX_NONE ; float Priority = 0 . 0 f ; FReverbSettings ReverbSettings ; FInteriorSettings InteriorSettings ; TArray<FAudioVolumeSubmixSendSettings> SubmixSendSettings ; TArray<FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings ; bool bChanged = false ; } ; void)",
    "insertText": "GetAudioVolumeSettings(const uint32 WorldID, const FVector& Location, FAudioVolumeSettings& OutSettings)"
  },
  {
    "label": "ResetAudioVolumeProxyChangedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAudioVolumeProxyChangedState()"
  },
  {
    "label": "GatherInteriorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInteriorData(FActiveSound& ActiveSound, FSoundParseParameters& ParseParams)"
  },
  {
    "label": "ApplyInteriorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyInteriorSettings(FActiveSound& ActiveSound, FSoundParseParameters& ParseParams)"
  },
  {
    "label": "NotifySubsystemsActiveSoundCreated()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "NotifySubsystemsActiveSoundCreated(FActiveSound& ActiveSound)"
  },
  {
    "label": "NotifySubsystemsActiveSoundDeleting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySubsystemsActiveSoundDeleting(FActiveSound& ActiveSound)"
  },
  {
    "label": "NotifySubsystemsVirtualizedSoundCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySubsystemsVirtualizedSoundCreated(FActiveSound& ActiveSound)"
  },
  {
    "label": "NotifySubsystemsVirtualizedSoundDeleting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySubsystemsVirtualizedSoundDeleting(FActiveSound& ActiveSound)"
  },
  {
    "label": "NotifySubsystemsActiveSoundCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySubsystemsActiveSoundCreated(ActiveSound)"
  },
  {
    "label": "NotifySubsystemsActiveSoundDeleting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifySubsystemsActiveSoundDeleting(ActiveSound)"
  },
  {
    "label": "GetDefaultAudioSettings()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "GetDefaultAudioSettings(uint32 WorldID, FReverbSettings& OutReverbSettings, FInteriorSettings& OutInteriorSettings)"
  },
  {
    "label": "SetDefaultAudioSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultAudioSettings(UWorld* World, const FReverbSettings& DefaultReverbSettings, const FInteriorSettings& DefaultInteriorSettings)"
  },
  {
    "label": "GetMixDebugState()",
    "kind": "Method",
    "detail": "Function (EDebugState)",
    "insertText": "GetMixDebugState()"
  },
  {
    "label": "SetMixDebugState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMixDebugState(EDebugState DebugState)"
  },
  {
    "label": "InitSoundClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundClasses()"
  },
  {
    "label": "InitSoundSources()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitSoundSources()"
  },
  {
    "label": "InitializeSubsystemCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSubsystemCollection()"
  },
  {
    "label": "RegisterSoundClass()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle DeviceCreatedHandle ; FDelegateHandle DeviceDestroyedHandle ; FCriticalSection RenderStateCallbackListCritSec ; FOnAudioDevicePreRender OnAudioDevicePreRender ; FOnAudioDevicePostRender OnAudioDevicePostRender ; public : void)",
    "insertText": "RegisterSoundClass(USoundClass* InSoundClass)"
  },
  {
    "label": "UnregisterSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSoundClass(USoundClass* SoundClass)"
  },
  {
    "label": "InitSoundSubmixes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundSubmixes()"
  },
  {
    "label": "RegisterSoundSubmix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterSoundSubmix(USoundSubmixBase* SoundSubmix, bool bInit)"
  },
  {
    "label": "UnregisterSoundSubmix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterSoundSubmix(const USoundSubmixBase* SoundSubmix, const bool bReparentChildren)"
  },
  {
    "label": "GetMainSubmixObject()",
    "kind": "Method",
    "detail": "Function (} USoundSubmix&)",
    "insertText": "GetMainSubmixObject()"
  },
  {
    "label": "RegisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSubmixBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> InSubmixBufferListener, USoundSubmix& SoundSubmix)"
  },
  {
    "label": "UnregisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubmixBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> InSubmixBufferListener, USoundSubmix& SoundSubmix)"
  },
  {
    "label": "AddPatchForSubmix()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "AddPatchForSubmix(uint32 InObjectId, float InPatchGain)"
  },
  {
    "label": "AddPatchInputForAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchInput)",
    "insertText": "AddPatchInputForAudioBus(uint32 InAudioBusId, int32 InFrames, int32 InChannels, float InGain = 1.f)"
  },
  {
    "label": "AddPatchOutputForAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "AddPatchOutputForAudioBus(uint32 InAudioBusId, int32 InFrames, int32 InChannels, float InGain = 1.f)"
  },
  {
    "label": "GetSoundClassCurrentProperties()",
    "kind": "Method",
    "detail": "Function (FSoundClassProperties*)",
    "insertText": "GetSoundClassCurrentProperties(USoundClass* InSoundClass)"
  },
  {
    "label": "GetSoundClassDynamicProperties()",
    "kind": "Method",
    "detail": "Function (FSoundClassDynamicProperties*)",
    "insertText": "GetSoundClassDynamicProperties(USoundClass* InSoundClass)"
  },
  {
    "label": "LocationIsAudible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LocationIsAudible(const FVector& Location, const float MaxDistance)"
  },
  {
    "label": "LocationIsAudible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LocationIsAudible(const FVector& Location, int32 ListenerIndex, const float MaxDistance)"
  },
  {
    "label": "GetDistanceToNearestListener()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDistanceToNearestListener(const FVector& Location)"
  },
  {
    "label": "GetDistanceSquaredToListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDistanceSquaredToListener(const FVector& Location, int32 ListenerIndex, float& OutSqDistance)"
  },
  {
    "label": "GetDistanceSquaredToNearestListener()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDistanceSquaredToNearestListener(const FVector& Location, float& OutSqDistance)"
  },
  {
    "label": "GetMaxWorldDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxWorldDistance()"
  },
  {
    "label": "GetListenerPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetListenerPosition(int32 ListenerIndex, FVector& OutPosition, bool bAllowOverride)"
  },
  {
    "label": "GetListenerTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetListenerTransform(int32 ListenerIndex, FTransform& OutTransform)"
  },
  {
    "label": "GetListenerWorldID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetListenerWorldID(int32 ListenerIndex, uint32& OutWorldID)"
  },
  {
    "label": "SetDefaultBaseSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultBaseSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "RemoveSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "ResetInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInterpolation()"
  },
  {
    "label": "EnableRadioEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRadioEffect(bool bEnable = false)"
  },
  {
    "label": "SetBaseSoundMix()",
    "kind": "Method",
    "detail": "Function (class FAudioEffectsManager ; void)",
    "insertText": "SetBaseSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "PushSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSoundMixModifier(USoundMix* SoundMix, bool bIsPassive = false, bool bIsRetrigger = false)"
  },
  {
    "label": "SetSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundMixClassOverride(USoundMix* InSoundMix, USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren)"
  },
  {
    "label": "ClearSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixClassOverride(USoundMix* InSoundMix, USoundClass* InSoundClass, float FadeOutTime)"
  },
  {
    "label": "PopSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSoundMixModifier(USoundMix* SoundMix, bool bIsPassive = false)"
  },
  {
    "label": "ClearSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixModifier(USoundMix* SoundMix)"
  },
  {
    "label": "ClearSoundMixModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixModifiers()"
  },
  {
    "label": "ActivateReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateReverbEffect(UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime)"
  },
  {
    "label": "DeactivateReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateReverbEffect(FName TagName)"
  },
  {
    "label": "HasCompressedAudioInfoClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompressedAudioInfoClass(USoundWave* SoundWave)"
  },
  {
    "label": "SuspendContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendContext()"
  },
  {
    "label": "ResumeContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeContext()"
  },
  {
    "label": "IsExernalBackgroundSoundActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExernalBackgroundSoundActive()"
  },
  {
    "label": "SetHRTFEnabledForAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHRTFEnabledForAll(bool InbHRTFEnabledForAll)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (const bool bNewHRTFEnabledForAll = InbHRTFEnabledForAll ; bHRTFEnabledForAll_OnGameThread = bNewHRTFEnabledForAll ;)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"FAudioThreadTask.SetHRTFEnabledForAll\"), STAT_SetHRTFEnabledForAll, STATGROUP_AudioThreadCommands)"
  },
  {
    "label": "RunCommandOnAudioThread()",
    "kind": "Method",
    "detail": "Function (FAudioDevice* AudioDevice = this ;)",
    "insertText": "RunCommandOnAudioThread([AudioDevice, bNewHRTFEnabledForAll]() { AudioDevice->bHRTFEnabledForAll = bNewHRTFEnabledForAll; }, GET_STATID(STAT_SetHRTFEnabledForAll))"
  },
  {
    "label": "IsHRTFDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHRTFDisabled()"
  },
  {
    "label": "SetHRTFDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHRTFDisabled(bool InIsHRTFDisabled)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (const bool bNewHRTFDisabled = InIsHRTFDisabled ; bHRTFDisabled_OnGameThread = bNewHRTFDisabled ;)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"FAudioThreadTask.SetHRTFDisabled\"), STAT_SetHRTFDisabled, STATGROUP_AudioThreadCommands)"
  },
  {
    "label": "RunCommandOnAudioThread()",
    "kind": "Method",
    "detail": "Function (FAudioDevice* AudioDevice = this ;)",
    "insertText": "RunCommandOnAudioThread([AudioDevice, bNewHRTFDisabled]() { AudioDevice->bHRTFDisabled = bNewHRTFDisabled; }, GET_STATID(STAT_SetHRTFDisabled))"
  },
  {
    "label": "SetSpatializationInterfaceEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSpatializationInterfaceEnabled(bool InbSpatializationInterfaceEnabled)"
  },
  {
    "label": "SuspendAudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendAudioThread()"
  },
  {
    "label": "ResumeAudioThread()",
    "kind": "Method",
    "detail": "Function (bSpatializationInterfaceEnabled = InbSpatializationInterfaceEnabled ;)",
    "insertText": "ResumeAudioThread()"
  },
  {
    "label": "RegisterPluginListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterPluginListener(const TAudioPluginListenerPtr PluginListener)"
  },
  {
    "label": "UnregisterPluginListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPluginListener(const TAudioPluginListenerPtr PluginListener)"
  },
  {
    "label": "IsAudioDeviceMuted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAudioDeviceMuted()"
  },
  {
    "label": "SetDeviceMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceMuted(bool bMuted)"
  },
  {
    "label": "GetAzimuth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAzimuth(const FAttenuationListenerData& OutListenerData, float& OutAzimuth, float& AbsoluteAzimuth)"
  },
  {
    "label": "GetFocusFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFocusFactor(const float Azimuth, const FSoundAttenuationSettings& AttenuationSettings)"
  },
  {
    "label": "GetMaxDistanceAndFocusFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaxDistanceAndFocusFactor(USoundBase* Sound, const UWorld* World, const FVector& Location, const FSoundAttenuationSettings* AttenuationSettingsToApply, float& OutMaxDistance, float& OutFocusFactor)"
  },
  {
    "label": "SoundIsAudible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SoundIsAudible(USoundBase* Sound, const UWorld* World, const FVector& Location, const FSoundAttenuationSettings* AttenuationSettingsToApply, float MaxDistance, float FocusFactor)"
  },
  {
    "label": "FindClosestListenerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestListenerIndex(const FTransform& SoundTransform, const TArray<FListener>& InListeners)"
  },
  {
    "label": "FindClosestListenerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestListenerIndex(const FTransform& SoundTransform)"
  },
  {
    "label": "FindClosestListenerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestListenerIndex(const FVector& Position, float& OutSqDistance, bool AllowAttenuationOverrides)"
  },
  {
    "label": "UnlinkActiveSoundFromComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkActiveSoundFromComponent(const FActiveSound& InActiveSound)"
  },
  {
    "label": "GetAudioTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetAudioTime()"
  },
  {
    "label": "GetMainAudioDevice()",
    "kind": "Method",
    "detail": "Function (} FAudioDeviceHandle)",
    "insertText": "GetMainAudioDevice()"
  },
  {
    "label": "GetAudioDeviceManager()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceManager*)",
    "insertText": "GetAudioDeviceManager()"
  },
  {
    "label": "GetLowPassFilterResonance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLowPassFilterResonance()"
  },
  {
    "label": "GetNumActiveSources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumActiveSources()"
  },
  {
    "label": "GetSampleRate()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSampleRate()"
  },
  {
    "label": "GetBufferLength()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetBufferLength()"
  },
  {
    "label": "GetAvailableSpatializationPluginNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetAvailableSpatializationPluginNames()"
  },
  {
    "label": "GetSpatializationPluginInterface()",
    "kind": "Method",
    "detail": "Function (TAudioSpatializationPtr)",
    "insertText": "GetSpatializationPluginInterface()"
  },
  {
    "label": "GetCurrentSpatializationPluginInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (} struct FAudioSpatializationInterfaceInfo ; FAudioSpatializationInterfaceInfo)",
    "insertText": "GetCurrentSpatializationPluginInterfaceInfo()"
  },
  {
    "label": "SpatializationPluginInterfacesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpatializationPluginInterfacesAvailable()"
  },
  {
    "label": "IsModulationPluginEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModulationPluginEnabled()"
  },
  {
    "label": "IsReverbPluginEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReverbPluginEnabled()"
  },
  {
    "label": "IsSourceDataOverridePluginEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceDataOverridePluginEnabled()"
  },
  {
    "label": "IsStoppingVoicesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStoppingVoicesEnabled()"
  },
  {
    "label": "IsNonRealtime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonRealtime()"
  },
  {
    "label": "GetCurrentSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCurrentSourceEffectChain(const uint32 SourceEffectChainId, TArray<FSourceEffectChainEntry>& OutCurrentSourceEffectChainEntries)"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartRecording(USoundSubmix* InSubmix, float ExpectedRecordingDuration)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (} Audio::FAlignedFloatBuffer&)",
    "insertText": "StopRecording(USoundSubmix* InSubmix, float& OutNumChannels, float& OutSampleRate)"
  },
  {
    "label": "StartEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (Audio::FAlignedFloatBuffer InvalidBuffer ; return InvalidBuffer ; } void)",
    "insertText": "StartEnvelopeFollowing(USoundSubmix* InSubmix)"
  },
  {
    "label": "StopEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StopEnvelopeFollowing(USoundSubmix* InSubmix)"
  },
  {
    "label": "SetSubmixWetDryLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixWetDryLevel(USoundSubmix* InSoundSubmix, float InOutputVolume, float InWetLevel, float InDryLevel)"
  },
  {
    "label": "SetSubmixAutoDisable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixAutoDisable(USoundSubmix* InSoundSubmix, bool bInAutoDisable)"
  },
  {
    "label": "SetSubmixAutoDisableTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixAutoDisableTime(USoundSubmix* InSoundSubmix, float InDisableTime)"
  },
  {
    "label": "UpdateSubmixModulationSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSubmixModulationSettings(USoundSubmix* InSoundSubmix, const TSet<TObjectPtr<USoundModulatorBase>>& InOutputModulation, const TSet<TObjectPtr<USoundModulatorBase>>& InWetLevelModulation, const TSet<TObjectPtr<USoundModulatorBase>>& InDryLevelModulation)"
  },
  {
    "label": "SetSubmixModulationBaseLevels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixModulationBaseLevels(USoundSubmix* InSoundSubmix, float InVolumeModBase, float InWetModBase, float InDryModBase)"
  },
  {
    "label": "SetSubmixOutputVolume()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixOutputVolume(USoundSubmix* InSoundSubmix, float InOutputVolume)"
  },
  {
    "label": "SetSubmixWetLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixWetLevel(USoundSubmix* InSoundSubmix, float InWetLevel)"
  },
  {
    "label": "SetSubmixDryLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixDryLevel(USoundSubmix* InSoundSubmix, float InDryLevel)"
  },
  {
    "label": "SetSubmixEffectChainOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSubmixEffectChainOverride(USoundSubmix* InSoundSubmix, const TArray<FSoundEffectSubmixPtr>& InSubmixEffectChain, float InCrossfadeTime)"
  },
  {
    "label": "ClearSubmixEffectChainOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearSubmixEffectChainOverride(USoundSubmix* InSoundSubmix, float InCrossfadeTime)"
  },
  {
    "label": "AddEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEnvelopeFollowerDelegate(USoundSubmix* InSubmix, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "RemoveEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnvelopeFollowerDelegate(USoundSubmix* InSubmix, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "StartSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectrumAnalysis(USoundSubmix* InSubmix, const FSoundSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "StopSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectrumAnalysis(USoundSubmix* InSubmix)"
  },
  {
    "label": "GetMagnitudesForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMagnitudesForFrequencies(USoundSubmix* InSubmix, const TArray<float>& InFrequencies, TArray<float>& OutMagnitudes)"
  },
  {
    "label": "GetPhasesForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPhasesForFrequencies(USoundSubmix* InSubmix, const TArray<float>& InFrequencies, TArray<float>& OutPhases)"
  },
  {
    "label": "AddSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpectralAnalysisDelegate(USoundSubmix* InSubmix, const FSoundSpectrumAnalyzerDelegateSettings& InDelegateSettings, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "RemoveSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpectralAnalysisDelegate(USoundSubmix* InSubmix, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "HandlePause()",
    "kind": "Method",
    "detail": "Function (protected : class FSoundSource ; void)",
    "insertText": "HandlePause(bool bGameTicking, bool bGlobalPause = false)"
  },
  {
    "label": "StopSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSources(TArray<FWaveInstance*>& WaveInstances, int32 FirstActiveIndex)"
  },
  {
    "label": "StartSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSources(TArray<FWaveInstance*>& WaveInstances, int32 FirstActiveIndex, bool bGameTicking)"
  },
  {
    "label": "OnListenerUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdated(const TArray<FListener>& InListeners)"
  },
  {
    "label": "NotifyAudioDevicePreRender()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "NotifyAudioDevicePreRender(const FAudioDeviceRenderInfo& InInfo)"
  },
  {
    "label": "NotifyAudioDevicePostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAudioDevicePostRender(const FAudioDeviceRenderInfo& InInfo)"
  },
  {
    "label": "AddNewActiveSoundInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddNewActiveSoundInternal(const FActiveSound& InActiveSound, TArray<FAudioParameter>&& InDefaultParams, FAudioVirtualLoop* InVirtualLoopToRetrigger = nullptr)"
  },
  {
    "label": "InitSoundParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundParams(FActiveSound& InOutActiveSound, TArray<FAudioParameter> InDefaultParams, bool bInIsVirtualLoopRealzing)"
  },
  {
    "label": "ReportSoundFailedToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSoundFailedToStart(const uint64 AudioComponentID, FAudioVirtualLoop* VirtualLoop)"
  },
  {
    "label": "InitializePluginListeners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePluginListeners(UWorld* World)"
  },
  {
    "label": "NotifyPluginListenersWorldChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPluginListenersWorldChanged(UWorld* World)"
  },
  {
    "label": "ParseSoundClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSoundClasses(float InDeltaTime)"
  },
  {
    "label": "UpdateConcurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConcurrency(TArray<FWaveInstance*>& WaveInstances, TArray<FActiveSound*>& ActiveSoundsCopy)"
  },
  {
    "label": "SoundIsAudible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SoundIsAudible(const FActiveSound& NewActiveSound)"
  },
  {
    "label": "ApplySoundMix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplySoundMix(USoundMix* NewMix, FSoundMixState* SoundMixState)"
  },
  {
    "label": "UpdateSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSoundMix(USoundMix* SoundMix, FSoundMixState* SoundMixState)"
  },
  {
    "label": "UpdatePassiveSoundMixModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePassiveSoundMixModifiers(TArray<FWaveInstance*>& WaveInstances, int32 FirstActiveIndex)"
  },
  {
    "label": "TryClearingSoundMix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryClearingSoundMix(USoundMix* SoundMix, FSoundMixState* SoundMixState)"
  },
  {
    "label": "TryClearingEQSoundMix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryClearingEQSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "FindNextHighestEQPrioritySoundMix()",
    "kind": "Method",
    "detail": "Function (USoundMix*)",
    "insertText": "FindNextHighestEQPrioritySoundMix(USoundMix* IgnoredSoundMix)"
  },
  {
    "label": "ClearSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "ApplyClassAdjusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyClassAdjusters(USoundMix* SoundMix, float InterpValue, float DeltaTime)"
  },
  {
    "label": "UpdateSoundClassProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSoundClassProperties(float DeltaTime)"
  },
  {
    "label": "VirtualizeInactiveLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualizeInactiveLoops()"
  },
  {
    "label": "RecursiveApplyAdjuster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveApplyAdjuster(const FSoundClassAdjuster& InAdjuster, USoundClass* InSoundClass)"
  },
  {
    "label": "InterpolateAdjuster()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InterpolateAdjuster(const float Adjuster, const float InterpValue)"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformSettings)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "UpdateAudioVolumeEffects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateAudioVolumeEffects()"
  },
  {
    "label": "UpdateAudioEngineSubsystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioEngineSubsystems()"
  },
  {
    "label": "InitEffect()",
    "kind": "Method",
    "detail": "Function (public : void*)",
    "insertText": "InitEffect(FSoundSource* Source)"
  },
  {
    "label": "UpdateEffect()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "UpdateEffect(FSoundSource* Source)"
  },
  {
    "label": "DestroyEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEffect(FSoundSource* Source)"
  },
  {
    "label": "GetEffects()",
    "kind": "Method",
    "detail": "Function (FAudioEffectsManager*)",
    "insertText": "GetEffects()"
  },
  {
    "label": "GetPrevPassiveSoundMixModifiers()",
    "kind": "Method",
    "detail": "Function (} const TArray<USoundMix*>&)",
    "insertText": "GetPrevPassiveSoundMixModifiers()"
  },
  {
    "label": "GetDefaultBaseSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (} USoundMix*)",
    "insertText": "GetDefaultBaseSoundMixModifier()"
  },
  {
    "label": "ObjectPtrWrap()",
    "kind": "Method",
    "detail": "Function (SoundMixModifiers =)",
    "insertText": "ObjectPtrWrap(InSoundMixModifiers)"
  },
  {
    "label": "ObjectPtrWrap()",
    "kind": "Method",
    "detail": "Function (PrevPassiveSoundMixModifiers =)",
    "insertText": "ObjectPtrWrap(InPrevPassiveSoundMixModifiers)"
  },
  {
    "label": "AddPreRenderDelegate()",
    "kind": "Method",
    "detail": "Function (DefaultBaseSoundMix = InDefaultBaseSoundMix ; } FDelegateHandle)",
    "insertText": "AddPreRenderDelegate(const FOnAudioDevicePreRender::FDelegate& InDelegate)"
  },
  {
    "label": "RemovePreRenderDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePreRenderDelegate(const FDelegateHandle& InHandle)"
  },
  {
    "label": "AddPostRenderDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddPostRenderDelegate(const FOnAudioDevicePostRender::FDelegate& InDelegate)"
  },
  {
    "label": "RemovePostRenderDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePostRenderDelegate(const FDelegateHandle& InHandle)"
  },
  {
    "label": "RecurseIntoSoundClasses()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RecurseIntoSoundClasses(USoundClass* CurrentClass, FSoundClassProperties& ParentProperties)"
  },
  {
    "label": "UpdateHighestPriorityReverb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHighestPriorityReverb()"
  },
  {
    "label": "SendUpdateResultsToGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUpdateResultsToGameThread(int32 FirstActiveIndex)"
  },
  {
    "label": "InitializeHardware()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "InitializeHardware()"
  },
  {
    "label": "UpdateHardwareTiming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHardwareTiming()"
  },
  {
    "label": "UpdateHardware()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateHardware()"
  },
  {
    "label": "CreateEffectsManager()",
    "kind": "Method",
    "detail": "Function (} FAudioEffectsManager*)",
    "insertText": "CreateEffectsManager()"
  },
  {
    "label": "CreateSoundSource()",
    "kind": "Method",
    "detail": "Function (FSoundSource*)",
    "insertText": "CreateSoundSource()"
  },
  {
    "label": "AddSoundToStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSoundToStop(FActiveSound* SoundToStop)"
  },
  {
    "label": "IsPendingStop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingStop(FActiveSound* ActiveSound)"
  },
  {
    "label": "GetListenerTransformedDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetListenerTransformedDirection(const FVector& Position, float* OutDistance)"
  },
  {
    "label": "GetDeviceDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeviceDeltaTime()"
  },
  {
    "label": "GetGameDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGameDeltaTime()"
  },
  {
    "label": "IsUsingListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingListenerAttenuationOverride(int32 ListenerIndex)"
  },
  {
    "label": "GetListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (} const FVector&)",
    "insertText": "GetListenerAttenuationOverride(int32 ListenerIndex)"
  },
  {
    "label": "UpdateVirtualLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVirtualLoops(bool bForceUpdate)"
  },
  {
    "label": "UpdateDeviceDeltaTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceDeltaTime()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (const double CurrTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "UE_REAL_TO_FLOAT()",
    "kind": "Method",
    "detail": "Function (DeviceDeltaTime =)",
    "insertText": "UE_REAL_TO_FLOAT(CurrTime - LastUpdateTime)"
  },
  {
    "label": "ProcessingPendingActiveSoundStops()",
    "kind": "Method",
    "detail": "Function (LastUpdateTime = CurrTime ; } private : void)",
    "insertText": "ProcessingPendingActiveSoundStops(bool bForceDelete = false)"
  },
  {
    "label": "StopOldestStoppingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopOldestStoppingSource()"
  },
  {
    "label": "ShouldUseAttenuation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseAttenuation(const UWorld* World)"
  },
  {
    "label": "GetNumPrecacheFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPrecacheFrames()"
  },
  {
    "label": "UpdateUnpreparedSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUnpreparedSound(FWaveInstance* WaveInstance, bool bGameTicking)"
  },
  {
    "label": "UpdateSoundDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSoundDuration(FWaveInstance* WaveInstance, bool bGameTicking)"
  },
  {
    "label": "RemoveVirtualLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveVirtualLoop(FActiveSound& ActiveSound)"
  },
  {
    "label": "CanUseVRAudioDevice()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "CanUseVRAudioDevice()"
  },
  {
    "label": "AddVirtualLoop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVirtualLoop(const FAudioVirtualLoop& InVirtualLoop)"
  },
  {
    "label": "AreStartupSoundsPreCached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreStartupSoundsPreCached()"
  },
  {
    "label": "GetPrimaryVolume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPrimaryVolume()"
  },
  {
    "label": "GetGlobalFocusSettings()",
    "kind": "Method",
    "detail": "Function (const FGlobalFocusSettings&)",
    "insertText": "GetGlobalFocusSettings()"
  },
  {
    "label": "SetGlobalFocusSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalFocusSettings(const FGlobalFocusSettings& NewFocusSettings)"
  },
  {
    "label": "GetGlobalPitchScale()",
    "kind": "Method",
    "detail": "Function (const FDynamicParameter&)",
    "insertText": "GetGlobalPitchScale()"
  },
  {
    "label": "ClampPitch()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ClampPitch(float InPitchScale)"
  },
  {
    "label": "SetSoundClassDistanceScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundClassDistanceScale(USoundClass* InSoundClass, float DistanceScale, float TimeSec)"
  },
  {
    "label": "GetPlatformAudioHeadroom()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlatformAudioHeadroom()"
  },
  {
    "label": "GetActiveReverb()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FActivatedReverb>&)",
    "insertText": "GetActiveReverb()"
  },
  {
    "label": "SetUseAttenuationForNonGameWorlds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseAttenuationForNonGameWorlds(bool bInUseAttenuationForNonGameWorlds)"
  },
  {
    "label": "GetActiveWaveInstances()",
    "kind": "Method",
    "detail": "Function (bUseAttenuationForNonGameWorlds = bInUseAttenuationForNonGameWorlds ; } const TArray<FWaveInstance*>&)",
    "insertText": "GetActiveWaveInstances()"
  },
  {
    "label": "GetDefaultReverbSendLevel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultReverbSendLevel()"
  },
  {
    "label": "GetAudioStateProperty()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAudioStateProperty(const FName& PropertyName)"
  },
  {
    "label": "SetAudioStateProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioStateProperty(const FName& PropertyName, const FName& PropertyValue)"
  },
  {
    "label": "GetSubsystemBase()",
    "kind": "Method",
    "detail": "Function (UAudioEngineSubsystem*)",
    "insertText": "GetSubsystemBase(TSubclassOf<UAudioEngineSubsystem> SubsystemClass)"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem()"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem(const FAudioDeviceHandle& InHandle)"
  },
  {
    "label": "GetSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TArray<TSubsystemClass*>)",
    "insertText": "GetSubsystemArrayCopy()"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> void)",
    "insertText": "ForEachSubsystem(TFunctionRef<void(TSubsystemClass*)> Operation)"
  },
  {
    "label": "FAudioSpatializationInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (} public : int32 NumStoppingSources ; int32 SampleRate ; FAudioPlatformSettings PlatformSettings ; int32 NumPrecacheFrames ; Audio::FDeviceId DeviceID ; struct FAudioSpatializationInterfaceInfo {)",
    "insertText": "FAudioSpatializationInterfaceInfo()"
  },
  {
    "label": "FAudioSpatializationInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioSpatializationInterfaceInfo(FName InPluginName, FAudioDevice* InAudioDevice, IAudioSpatializationFactory* InAudioSpatializationFactoryPtr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (private : uint8 bStartupSoundsPreCached : 1 ; uint8 bSpatializationInterfaceEnabled : 1 ; uint8 bOcclusionInterfaceEnabled : 1 ; uint8 bReverbInterfaceEnabled : 1 ; uint8 bSourceDataOverrideInterfaceEnabled : 1 ; uint8 bModulationInterfaceEnabled : 1 ; uint8 bPluginListenersInitialized : 1 ; uint8 bHRTFEnabledForAll : 1 ; uint8 bHRTFDisabled : 1 ; uint8 bIsDeviceMuted : 1 ; uint8 bIsInitialized : 1 ; protected : double AudioClock ; uint8 bAllowCenterChannel3DPanning : 1 ; float DeviceDeltaTime ; bool)",
    "insertText": "IsInitialized()"
  }
]