[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FAudioEffectsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioEffectsManager"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSoundBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundBuffer"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportClient"
  },
  {
    "label": "IAudioSpatialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioSpatialization"
  },
  {
    "label": "ICompressedAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompressedAudioInfo"
  },
  {
    "label": "ISubmixBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISubmixBufferListener"
  },
  {
    "label": "UReverbEffect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReverbEffect"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "USoundEffectSourcePreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSourcePreset"
  },
  {
    "label": "USoundEffectSubmixPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmixPreset"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FAttenuationFocusData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationFocusData"
  },
  {
    "label": "FAudioComponentParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentParam"
  },
  {
    "label": "FAudioQualitySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioQualitySettings"
  },
  {
    "label": "FAudioVirtualLoop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVirtualLoop"
  },
  {
    "label": "FSourceEffectChainEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceEffectChainEntry"
  },
  {
    "label": "FSoundClassDynamicProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundClassDynamicProperties"
  },
  {
    "label": "FSoundClassProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundClassProperties"
  },
  {
    "label": "FSoundGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundGroup"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FSoundSpectrumAnalyzerDelegateSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerDelegateSettings"
  },
  {
    "label": "FSoundSpectrumAnalyzerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerSettings"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FPatchInput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchInput"
  },
  {
    "label": "FPatchOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchOutput"
  },
  {
    "label": "FAudioDebugger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDebugger"
  },
  {
    "label": "EDebugState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDebugState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListener"
  },
  {
    "label": "FInteriorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInteriorSettings"
  },
  {
    "label": "FListenerProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListenerProxy"
  },
  {
    "label": "FAudioClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioClassInfo"
  },
  {
    "label": "FSoundMixState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundMixState"
  },
  {
    "label": "FSoundMixClassOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundMixClassOverride"
  },
  {
    "label": "FActivatedReverb",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActivatedReverb"
  },
  {
    "label": "FAttenuationListenerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttenuationListenerData"
  },
  {
    "label": "FGlobalFocusSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalFocusSettings"
  },
  {
    "label": "IDeviceChangedListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDeviceChangedListener"
  },
  {
    "label": "FAudioDeviceRenderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioDeviceRenderInfo"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "FCreateComponentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateComponentParams"
  },
  {
    "label": "FAudioVolumeSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioVolumeSettings"
  },
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "properties"
  },
  {
    "label": "hasn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hasn"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "properties"
  },
  {
    "label": "FAudioEffectsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioEffectsManager"
  },
  {
    "label": "override",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "override"
  },
  {
    "label": "override",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "override"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAudioSpatializationInterfaceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioSpatializationInterfaceInfo"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "properties"
  },
  {
    "label": "adjusters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjusters"
  },
  {
    "label": "adjusters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjusters"
  },
  {
    "label": "adjustments",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjustments"
  },
  {
    "label": "properties",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "properties"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAudioSpatializationInterfaceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioSpatializationInterfaceInfo"
  },
  {
    "label": "EDebugState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDebugState"
  },
  {
    "label": "overrides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "overrides"
  },
  {
    "label": "effects",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "effects"
  },
  {
    "label": "adjusters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "adjusters"
  },
  {
    "label": "FSoundConcurrencyManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundConcurrencyManager"
  },
  {
    "label": "GetTransmitterID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTransmitterID(uint64 ComponentID, UPTRINT WaveInstanceHash, uint32 PlayOrder)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Inactive\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"FadingIn\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Active\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"FadingOut\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"AwaitingRemoval\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"unknown\")"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Interpolate(const double EndTime)"
  },
  {
    "label": "UpdateCurrentInteriorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentInteriorSettings()"
  },
  {
    "label": "ApplyInteriorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyInteriorSettings(uint32 AudioVolumeID, const FInteriorSettings& Settings)"
  },
  {
    "label": "FListener()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FListener()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAttenuationListenerData)",
    "insertText": "Create(const FAudioDevice& AudioDevice, const FTransform& InListenerTransform, const FTransform& InSoundTransform, const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAttenuationListenerData)",
    "insertText": "Create(const FAudioDevice& AudioDevice, int32 ListenerIndex, const FTransform& InSoundTransform, const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "StopTestComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTestComponent()"
  },
  {
    "label": "HandleDumpSoundInfoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpSoundInfoCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListWavesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListWavesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSoundClassesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSoundClassesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleShowSoundClassHierarchyCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShowSoundClassHierarchyCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSoundClassVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSoundClassVolumesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListAudioComponentsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListAudioComponentsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListSoundDurationsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListSoundDurationsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSoundTemplateInfoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSoundTemplateInfoCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSetBaseSoundMixCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetBaseSoundMixCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleIsolateDryAudioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIsolateDryAudioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleIsolateReverbCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIsolateReverbCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestLPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestLPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestHPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestHPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTestLFEBleedCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTestLFEBleedCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisableLPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisableLPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisableHPFCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisableHPFCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisableRadioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisableRadioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleEnableRadioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEnableRadioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetSoundStateCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetSoundStateCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleSpatializationExtensionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleSpatializationExtensionCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleEnableHRTFForAllCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEnableHRTFForAllCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSoloCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSoloCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleClearSoloCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClearSoloCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePlayAllPIEAudioCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePlayAllPIEAudioCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudio3dVisualizeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudio3dVisualizeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioMemoryInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioMemoryInfo(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloSoundClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioSoloSoundClass(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloSoundWave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioSoloSoundWave(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloSoundCue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioSoloSoundCue(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioMixerDebugSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioMixerDebugSound(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSoundClassFixup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSoundClassFixup(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioDebugSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAudioDebugSound(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetAllDynamicSoundVolumesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetAllDynamicSoundVolumesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetDynamicSoundVolumeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetDynamicSoundVolumeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleGetDynamicSoundVolumeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetDynamicSoundVolumeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleSetDynamicSoundCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetDynamicSoundCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleAudioSoloCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAudioSoloCommon(const TCHAR* Cmd, FOutputDevice& Ar, FToggleSoloPtr Funct)"
  },
  {
    "label": "GetSoundClassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoundClassInfo(TMap<FName, FAudioClassInfo>& AudioClassInfos)"
  },
  {
    "label": "FAudioDevice()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAudioDevice()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(Audio::FDeviceId InDeviceID, int32 InMaxSources, int32 BufferSizeOverride = INDEX_NONE, int32 NumBuffersOverride = INDEX_NONE)"
  },
  {
    "label": "OnDeviceCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeviceCreated(Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "OnDeviceDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeviceDestroyed(Audio::FDeviceId InDeviceID)"
  },
  {
    "label": "Teardown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Teardown()"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool bGameTicking)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend(bool bGameTicking)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountBytes(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetSortedActiveWaveInstances()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSortedActiveWaveInstances(TArray<FWaveInstance*>& WaveInstances, const ESortedActiveWaveGetType::Type GetType)"
  },
  {
    "label": "UpdateActiveSoundPlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveSoundPlaybackTime(bool bIsTimeTicking)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush(UWorld* WorldToFlush, bool bClearActivatedReverb = true)"
  },
  {
    "label": "FlushExtended()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushExtended(UWorld* WorldToFlush, bool bClearActivatedReverb)"
  },
  {
    "label": "OnPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreGarbageCollect()"
  },
  {
    "label": "StopSoundsUsingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSoundsUsingResource(USoundWave* SoundWave, TArray<UAudioComponent*>* StoppedComponents = nullptr)"
  },
  {
    "label": "LegacyReverbDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LegacyReverbDisabled()"
  },
  {
    "label": "OnBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginPIE(const bool bIsSimulating)"
  },
  {
    "label": "OnEndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndPIE(const bool bIsSimulating)"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Precache(USoundWave* SoundWave, bool bSynchronous = false, bool bTrackMemory = true, bool bForceFullDecompression = false)"
  },
  {
    "label": "GetCompressionDurationThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCompressionDurationThreshold(const FSoundGroup &SoundGroup)"
  },
  {
    "label": "PrecacheStartupSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecacheStartupSounds()"
  },
  {
    "label": "SetMaxChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxChannels(int32 InMaxChannels)"
  },
  {
    "label": "SetMaxChannelsScaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxChannelsScaled(float InScaledChannelCount)"
  },
  {
    "label": "StopSourcesUsingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSourcesUsingBuffer(FSoundBuffer * SoundBuffer)"
  },
  {
    "label": "StopAllSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllSounds(bool bShouldStopUISounds = false)"
  },
  {
    "label": "SetListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListener(UWorld* World, int32 InListenerIndex, const FTransform& ListenerTransform, float InDeltaSeconds)"
  },
  {
    "label": "SetListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListenerAttenuationOverride(int32 ListenerIndex, const FVector AttenuationPosition)"
  },
  {
    "label": "ClearListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearListenerAttenuationOverride(int32 ListenerIndex)"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCreateComponentParams()"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCreateComponentParams(UWorld* World, AActor* Actor = nullptr)"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCreateComponentParams(AActor* Actor)"
  },
  {
    "label": "FCreateComponentParams()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FCreateComponentParams(FAudioDevice* AudioDevice)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocation(FVector Location)"
  },
  {
    "label": "CommonInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommonInit()"
  },
  {
    "label": "PlaySoundAtLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySoundAtLocation(USoundBase* Sound, UWorld* World, float VolumeMultiplier, float PitchMultiplier, float StartTime, const FVector& Location, const FRotator& Rotation, USoundAttenuation* AttenuationSettings = nullptr, USoundConcurrency* ConcurrencySettings = nullptr, const TArray<FAudioParameter>* Params = nullptr, const AActor* OwningActor = nullptr)"
  },
  {
    "label": "AddNewActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewActiveSound(const FActiveSound& ActiveSound, const TArray<FAudioParameter>* InDefaultParams = nullptr)"
  },
  {
    "label": "AddNewActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewActiveSound(const FActiveSound& ActiveSound, TArray<FAudioParameter>&& InDefaultParams)"
  },
  {
    "label": "RetriggerVirtualLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetriggerVirtualLoop(FAudioVirtualLoop& VirtualLoop)"
  },
  {
    "label": "StopActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopActiveSound(uint64 AudioComponentID)"
  },
  {
    "label": "StopActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopActiveSound(FActiveSound* ActiveSound)"
  },
  {
    "label": "PauseActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseActiveSound(uint64 AudioComponentID, const bool bInIsPaused)"
  },
  {
    "label": "NotifyActiveSoundOcclusionTraceDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActiveSoundOcclusionTraceDone(FActiveSound* ActiveSound, bool bIsOccluded)"
  },
  {
    "label": "SetCanHaveMultipleActiveSounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanHaveMultipleActiveSounds(uint64 AudioComponentID, bool InCanHaveMultipleActiveSounds)"
  },
  {
    "label": "RemoveActiveSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveSound(FActiveSound* ActiveSound)"
  },
  {
    "label": "AddAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioVolumeProxy(const FAudioVolumeProxy& Proxy)"
  },
  {
    "label": "RemoveAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAudioVolumeProxy(uint32 AudioVolumeID)"
  },
  {
    "label": "UpdateAudioVolumeProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioVolumeProxy(const FAudioVolumeProxy& Proxy)"
  },
  {
    "label": "ResetAudioVolumeProxyChangedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAudioVolumeProxyChangedState()"
  },
  {
    "label": "SetDefaultAudioSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultAudioSettings(UWorld* World, const FReverbSettings& DefaultReverbSettings, const FInteriorSettings& DefaultInteriorSettings)"
  },
  {
    "label": "SetMixDebugState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMixDebugState(EDebugState DebugState)"
  },
  {
    "label": "InitSoundClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundClasses()"
  },
  {
    "label": "InitSoundSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSoundSources()"
  },
  {
    "label": "InitializeSubsystemCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSubsystemCollection()"
  },
  {
    "label": "RegisterSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSoundClass(USoundClass* InSoundClass)"
  },
  {
    "label": "UnregisterSoundClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSoundClass(USoundClass* SoundClass)"
  },
  {
    "label": "RegisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSubmixBufferListener(ISubmixBufferListener* InSubmixBufferListener, USoundSubmix* SoundSubmix = nullptr)"
  },
  {
    "label": "UnregisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubmixBufferListener(ISubmixBufferListener* InSubmixBufferListener, USoundSubmix* SoundSubmix = nullptr)"
  },
  {
    "label": "RegisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSubmixBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> InSubmixBufferListener, USoundSubmix& SoundSubmix)"
  },
  {
    "label": "UnregisterSubmixBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubmixBufferListener(TSharedRef<ISubmixBufferListener, ESPMode::ThreadSafe> InSubmixBufferListener, USoundSubmix& SoundSubmix)"
  },
  {
    "label": "AddPatchForSubmix()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "AddPatchForSubmix(uint32 InObjectId, float InPatchGain)"
  },
  {
    "label": "AddPatchInputForAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchInput)",
    "insertText": "AddPatchInputForAudioBus(uint32 InAudioBusId, int32 InFrames, int32 InChannels, float InGain = 1.f)"
  },
  {
    "label": "AddPatchOutputForAudioBus()",
    "kind": "Method",
    "detail": "Function (Audio::FPatchOutputStrongPtr)",
    "insertText": "AddPatchOutputForAudioBus(uint32 InAudioBusId, int32 InFrames, int32 InChannels, float InGain = 1.f)"
  },
  {
    "label": "GetMaxWorldDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxWorldDistance()"
  },
  {
    "label": "SetDefaultBaseSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultBaseSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "RemoveSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "ResetInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInterpolation()"
  },
  {
    "label": "EnableRadioEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRadioEffect(bool bEnable = false)"
  },
  {
    "label": "SetBaseSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBaseSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "PushSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushSoundMixModifier(USoundMix* SoundMix, bool bIsPassive = false, bool bIsRetrigger = false)"
  },
  {
    "label": "SetSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundMixClassOverride(USoundMix* InSoundMix, USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren)"
  },
  {
    "label": "ClearSoundMixClassOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixClassOverride(USoundMix* InSoundMix, USoundClass* InSoundClass, float FadeOutTime)"
  },
  {
    "label": "PopSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopSoundMixModifier(USoundMix* SoundMix, bool bIsPassive = false)"
  },
  {
    "label": "ClearSoundMixModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixModifier(USoundMix* SoundMix)"
  },
  {
    "label": "ClearSoundMixModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMixModifiers()"
  },
  {
    "label": "ActivateReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateReverbEffect(UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime)"
  },
  {
    "label": "DeactivateReverbEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateReverbEffect(FName TagName)"
  },
  {
    "label": "RegisterPluginListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPluginListener(const TAudioPluginListenerPtr PluginListener)"
  },
  {
    "label": "UnregisterPluginListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPluginListener(const TAudioPluginListenerPtr PluginListener)"
  },
  {
    "label": "SetDeviceMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceMuted(bool bMuted)"
  },
  {
    "label": "GetMaxDistanceAndFocusFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMaxDistanceAndFocusFactor(USoundBase* Sound, const UWorld* World, const FVector& Location, const FSoundAttenuationSettings* AttenuationSettingsToApply, float& OutMaxDistance, float& OutFocusFactor)"
  },
  {
    "label": "FindClosestListenerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindClosestListenerIndex(const FTransform& SoundTransform, const TArray<FListener>& InListeners)"
  },
  {
    "label": "UnlinkActiveSoundFromComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkActiveSoundFromComponent(const FActiveSound& InActiveSound)"
  },
  {
    "label": "GetMainAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "GetMainAudioDevice()"
  },
  {
    "label": "SetCurrentSpatializationPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentSpatializationPlugin(FName PluginName)"
  },
  {
    "label": "GetCurrentSpatializationPluginInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (FAudioSpatializationInterfaceInfo)",
    "insertText": "GetCurrentSpatializationPluginInterfaceInfo()"
  },
  {
    "label": "SpatializationPluginInterfacesAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpatializationPluginInterfacesAvailable()"
  },
  {
    "label": "IsOcclusionPluginLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOcclusionPluginLoaded()"
  },
  {
    "label": "IsReverbPluginLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReverbPluginLoaded()"
  },
  {
    "label": "IsSourceDataOverridePluginLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSourceDataOverridePluginLoaded()"
  },
  {
    "label": "AddEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnvelopeFollowerDelegate(USoundSubmix* InSubmix, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "RemoveEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnvelopeFollowerDelegate(USoundSubmix* InSubmix, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "StartSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectrumAnalysis(USoundSubmix* InSubmix, const FSoundSpectrumAnalyzerSettings& InSettings)"
  },
  {
    "label": "StopSpectrumAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectrumAnalysis(USoundSubmix* InSubmix)"
  },
  {
    "label": "GetMagnitudesForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMagnitudesForFrequencies(USoundSubmix* InSubmix, const TArray<float>& InFrequencies, TArray<float>& OutMagnitudes)"
  },
  {
    "label": "GetPhasesForFrequencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPhasesForFrequencies(USoundSubmix* InSubmix, const TArray<float>& InFrequencies, TArray<float>& OutPhases)"
  },
  {
    "label": "AddSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpectralAnalysisDelegate(USoundSubmix* InSubmix, const FSoundSpectrumAnalyzerDelegateSettings& InDelegateSettings, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "RemoveSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpectralAnalysisDelegate(USoundSubmix* InSubmix, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "HandlePause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePause(bool bGameTicking, bool bGlobalPause = false)"
  },
  {
    "label": "StopSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSources(TArray<FWaveInstance*>& WaveInstances, int32 FirstActiveIndex)"
  },
  {
    "label": "StartSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSources(TArray<FWaveInstance*>& WaveInstances, int32 FirstActiveIndex, bool bGameTicking)"
  },
  {
    "label": "NotifyAudioDevicePreRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAudioDevicePreRender(const FAudioDeviceRenderInfo& InInfo)"
  },
  {
    "label": "NotifyAudioDevicePostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAudioDevicePostRender(const FAudioDeviceRenderInfo& InInfo)"
  },
  {
    "label": "AddNewActiveSoundInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewActiveSoundInternal(const FActiveSound& InActiveSound, TArray<FAudioParameter>&& InDefaultParams, FAudioVirtualLoop* InVirtualLoopToRetrigger = nullptr)"
  },
  {
    "label": "ReportSoundFailedToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSoundFailedToStart(const uint64 AudioComponentID, FAudioVirtualLoop* VirtualLoop)"
  },
  {
    "label": "InitializePluginListeners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePluginListeners(UWorld* World)"
  },
  {
    "label": "NotifyPluginListenersWorldChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPluginListenersWorldChanged(UWorld* World)"
  },
  {
    "label": "ParseSoundClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseSoundClasses(float InDeltaTime)"
  },
  {
    "label": "UpdateConcurrency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConcurrency(TArray<FWaveInstance*>& WaveInstances, TArray<FActiveSound*>& ActiveSoundsCopy)"
  },
  {
    "label": "SoundIsAudible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SoundIsAudible(const FActiveSound& NewActiveSound)"
  },
  {
    "label": "ApplySoundMix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplySoundMix(USoundMix* NewMix, FSoundMixState* SoundMixState)"
  },
  {
    "label": "UpdateSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSoundMix(USoundMix* SoundMix, FSoundMixState* SoundMixState)"
  },
  {
    "label": "UpdatePassiveSoundMixModifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePassiveSoundMixModifiers(TArray<FWaveInstance*>& WaveInstances, int32 FirstActiveIndex)"
  },
  {
    "label": "TryClearingSoundMix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryClearingSoundMix(USoundMix* SoundMix, FSoundMixState* SoundMixState)"
  },
  {
    "label": "TryClearingEQSoundMix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryClearingEQSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "ClearSoundMix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSoundMix(USoundMix* SoundMix)"
  },
  {
    "label": "ApplyClassAdjusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyClassAdjusters(USoundMix* SoundMix, float InterpValue, float DeltaTime)"
  },
  {
    "label": "UpdateSoundClassProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSoundClassProperties(float DeltaTime)"
  },
  {
    "label": "VirtualizeInactiveLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtualizeInactiveLoops()"
  },
  {
    "label": "RecursiveApplyAdjuster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveApplyAdjuster(const FSoundClassAdjuster& InAdjuster, USoundClass* InSoundClass)"
  },
  {
    "label": "FAudioPlatformSettings()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FAudioPlatformSettings()"
  },
  {
    "label": "UpdateAudioVolumeEffects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioVolumeEffects()"
  },
  {
    "label": "UpdateAudioEngineSubsystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAudioEngineSubsystems()"
  },
  {
    "label": "DestroyEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEffect(FSoundSource* Source)"
  },
  {
    "label": "ObjectPtrDecay()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ObjectPtrDecay(SoundMixModifiers)"
  },
  {
    "label": "ObjectPtrDecay()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ObjectPtrDecay(PrevPassiveSoundMixModifiers)"
  },
  {
    "label": "AddPreRenderDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddPreRenderDelegate(const FOnAudioDevicePreRender::FDelegate& InDelegate)"
  },
  {
    "label": "RemovePreRenderDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePreRenderDelegate(const FDelegateHandle& InHandle)"
  },
  {
    "label": "AddPostRenderDelegate()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddPostRenderDelegate(const FOnAudioDevicePostRender::FDelegate& InDelegate)"
  },
  {
    "label": "RemovePostRenderDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePostRenderDelegate(const FDelegateHandle& InHandle)"
  },
  {
    "label": "RecurseIntoSoundClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecurseIntoSoundClasses(USoundClass* CurrentClass, FSoundClassProperties& ParentProperties)"
  },
  {
    "label": "UpdateHighestPriorityReverb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHighestPriorityReverb()"
  },
  {
    "label": "SendUpdateResultsToGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendUpdateResultsToGameThread(int32 FirstActiveIndex)"
  },
  {
    "label": "AddSoundToStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSoundToStop(FActiveSound* SoundToStop)"
  },
  {
    "label": "IsPendingStop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPendingStop(FActiveSound* ActiveSound)"
  },
  {
    "label": "GetListenerTransformedDirection()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetListenerTransformedDirection(const FVector& Position, float* OutDistance)"
  },
  {
    "label": "IsUsingListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsUsingListenerAttenuationOverride(0)"
  },
  {
    "label": "GetListenerAttenuationOverride()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetListenerAttenuationOverride(0)"
  },
  {
    "label": "UpdateVirtualLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVirtualLoops(bool bForceUpdate)"
  },
  {
    "label": "ProcessingPendingActiveSoundStops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessingPendingActiveSoundStops(bool bForceDelete = false)"
  },
  {
    "label": "StopOldestStoppingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopOldestStoppingSource()"
  },
  {
    "label": "RemoveVirtualLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveVirtualLoop(FActiveSound& ActiveSound)"
  },
  {
    "label": "CanUseVRAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUseVRAudioDevice()"
  },
  {
    "label": "GetAudioClock()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAudioClock()"
  },
  {
    "label": "AddVirtualLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVirtualLoop(const FAudioVirtualLoop& InVirtualLoop)"
  },
  {
    "label": "SetTransientMasterVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransientMasterVolume(float TransientPrimaryVolume)"
  },
  {
    "label": "SetTransientPrimaryVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransientPrimaryVolume(float TransientPrimaryVolume)"
  },
  {
    "label": "SetGlobalFocusSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalFocusSettings(const FGlobalFocusSettings& NewFocusSettings)"
  },
  {
    "label": "SetGlobalPitchModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalPitchModulation(float PitchScale, float TimeSec)"
  },
  {
    "label": "SetSoundClassDistanceScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoundClassDistanceScale(USoundClass* InSoundClass, float DistanceScale, float TimeSec)"
  },
  {
    "label": "SetPlatformAudioHeadroom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformAudioHeadroom(float PlatformHeadRoom)"
  },
  {
    "label": "SetAudioStateProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioStateProperty(const FName& PropertyName, const FName& PropertyValue)"
  },
  {
    "label": "FAudioSpatializationInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAudioSpatializationInterfaceInfo(FName InPluginName, FAudioDevice* InAudioDevice, IAudioSpatializationFactory* InAudioSpatializationFactoryPtr)"
  },
  {
    "label": "UpdateReferencedSoundWaves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReferencedSoundWaves()"
  }
]