[
  {
    "label": "FAssetRegistryState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryState"
  },
  {
    "label": "FAsyncIODelete",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncIODelete"
  },
  {
    "label": "FLargeMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLargeMemoryWriter"
  },
  {
    "label": "FLooseFilesCookArtifactReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLooseFilesCookArtifactReader"
  },
  {
    "label": "FMD5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMD5"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "TRefCountPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRefCountPtr"
  },
  {
    "label": "FCookSandbox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookSandbox"
  },
  {
    "label": "FCookSandboxConvertCookedPathToPackageNameContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookSandboxConvertCookedPathToPackageNameContext"
  },
  {
    "label": "FLooseCookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLooseCookedPackageWriter"
  },
  {
    "label": "FRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecord"
  },
  {
    "label": "FExportBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportBuffer"
  },
  {
    "label": "FWriteFileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteFileData"
  },
  {
    "label": "FCommitContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommitContext"
  },
  {
    "label": "FOplogChunkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOplogChunkInfo"
  },
  {
    "label": "FOplogPackageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOplogPackageInfo"
  },
  {
    "label": "FLooseCookedPackageWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" IO / IoDispatcher . h \" # include \" Memory / CompositeBuffer . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / DateTime . h \" # include \" Misc / PackagePath . h \" # include \" Serialization / CompactBinary . h \" # include \" Serialization / FileRegions . h \" # include \" Serialization / PackageWriter . h \" # include \" Serialization / PackageWriterToSharedBuffer . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class FAssetRegistryState ; class FAsyncIODelete ; class FLargeMemoryWriter ; class FLooseFilesCookArtifactReader ; class FMD5 ; class ITargetPlatform ; template<ReferencedType> class TRefCountPtr ; namespace UE::Cook { class FCookSandbox ; } namespace UE::Cook { struct FCookSandboxConvertCookedPathToPackageNameContext ; } class FLooseCookedPackageWriter : public TPackageWriterToSharedBuffer<ICookedPackageWriter> { public : using Super = TPackageWriterToSharedBuffer<ICookedPackageWriter> ;)",
    "insertText": "FLooseCookedPackageWriter(const FString& OutputPath, const FString& MetadataDirectoryPath, const ITargetPlatform* TargetPlatform, FAsyncIODelete& InAsyncIODelete, UE::Cook::FCookSandbox& InSandboxFile, FBeginCacheCallback&& InBeginCacheCallback, FRegisterDeterminismHelperCallback&& InRegisterDeterminismHelperCallback, TSharedRef<FLooseFilesCookArtifactReader> CookArtifactReader)"
  },
  {
    "label": "FLooseCookedPackageWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLooseCookedPackageWriter()"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (FCapabilities)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "bDeterminismDebug()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "bDeterminismDebug(bool)"
  },
  {
    "label": "GetCookCapabilities()",
    "kind": "Method",
    "detail": "Function (FCookCapabilities Result =)",
    "insertText": "GetCookCapabilities()"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (Result . bDiffModeSupported = true ; return Result ; } void)",
    "insertText": "BeginPackage(const FBeginPackageInfo& Info)"
  },
  {
    "label": "GetExportsFooterSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetExportsFooterSize()"
  },
  {
    "label": "GetPreviousCookTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetPreviousCookTime()"
  },
  {
    "label": "RegisterDeterminismHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDeterminismHelper(UObject* SourceObject, const TRefCountPtr<UE::Cook::IDeterminismHelper>& DeterminismHelper)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FCookInfo& Info)"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCook(const FCookInfo& Info)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCook(const FCookInfo& Info)"
  },
  {
    "label": "LoadPreviousAssetRegistry()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FAssetRegistryState>)",
    "insertText": "LoadPreviousAssetRegistry()"
  },
  {
    "label": "GetOplogAttachment()",
    "kind": "Method",
    "detail": "Function (FCbObject)",
    "insertText": "GetOplogAttachment(FName PackageName, FUtf8StringView AttachmentKey)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackages(TArrayView<const FName> PackageNamesToRemove)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackages()"
  },
  {
    "label": "UpdatePackageModificationStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePackageModificationStatus(FName PackageName, bool bIterativelyUnmodified, bool& bInOutShouldIterativelySkip)"
  },
  {
    "label": "WriteMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (TFuture<FCbObject>)",
    "insertText": "WriteMPCookMessageForPackage(FName PackageName)"
  },
  {
    "label": "TryReadMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReadMPCookMessageForPackage(FName PackageName, FCbObjectView Message)"
  },
  {
    "label": "GetPreviousCookedBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreviousCookedBytes(const FPackageInfo& Info, FPreviousCookedBytesData& OutData)"
  },
  {
    "label": "CompleteExportsArchiveForDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteExportsArchiveForDiff(FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (EPackageWriterResult)",
    "insertText": "BeginCacheForCookedPlatformData(FBeginCacheForCookedPlatformDataInfo& Info)"
  },
  {
    "label": "CommitPackageInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackageInternal(FPackageWriterRecords::FPackage&& BaseRecord, const FCommitPackageInfo& Info)"
  },
  {
    "label": "ConstructRecord()",
    "kind": "Method",
    "detail": "Function (FPackageWriterRecords::FPackage*)",
    "insertText": "ConstructRecord()"
  },
  {
    "label": "BulkDataTypeToExtension()",
    "kind": "Method",
    "detail": "Function (EPackageExtension)",
    "insertText": "BulkDataTypeToExtension(FBulkDataInfo::EType BulkDataType)"
  },
  {
    "label": "HashAndWrite()",
    "kind": "Method",
    "detail": "Function (private : struct FRecord : public FPackageWriterRecords::FPackage { bool bCompletedExportsArchiveForDiff = false ; } ; struct FExportBuffer { FSharedBuffer Buffer ; TArray<FFileRegion> Regions ; } ; struct FWriteFileData { FString Filename ; FCompositeBuffer Buffer ; TArray<FFileRegion> Regions ; bool bIsSidecar ; bool bContributeToHash = true ; FIoChunkId ChunkId = FIoChunkId::InvalidChunkId ; void)",
    "insertText": "HashAndWrite(FMD5& AccumulatedHash, const TRefCountPtr<FPackageHashes>& PackageHashes, EWriteOptions WriteOptions)"
  },
  {
    "label": "DeleteSandboxDirectory()",
    "kind": "Method",
    "detail": "Function (} ; struct FCommitContext { const FCommitPackageInfo& Info ; TArray<TArray<FExportBuffer>> ExportsBuffers ; TArray<FWriteFileData> OutputFiles ; } ; struct FOplogChunkInfo { FString RelativeFileName ; FIoChunkId ChunkId ; } ; struct FOplogPackageInfo { FName PackageName ; TArray<FOplogChunkInfo,TInlineAllocator<1>> PackageDataChunks ; TArray<FOplogChunkInfo> BulkDataChunks ; } ; void)",
    "insertText": "DeleteSandboxDirectory()"
  },
  {
    "label": "GetAllCookedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllCookedFiles()"
  },
  {
    "label": "FindAndDeleteCookedFilesForPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndDeleteCookedFilesForPackages(TConstArrayView<FName> PackageNames)"
  },
  {
    "label": "RemoveCookedPackagesByPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCookedPackagesByPackageName(TArrayView<const FName> PackageNamesToRemove, bool bRemoveRecords)"
  },
  {
    "label": "AsyncSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncSave(FRecord& Record, const FCommitPackageInfo& Info)"
  },
  {
    "label": "CollectForSavePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSavePackageData(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "CollectForSaveBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "CollectForSaveLinkerAdditionalDataRecords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSaveLinkerAdditionalDataRecords(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "CollectForSaveAdditionalFileRecords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSaveAdditionalFileRecords(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "CollectForSaveExportsFooter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "CollectForSaveExportsPackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSaveExportsPackageTrailer(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "CollectForSaveExportsBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectForSaveExportsBuffers(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "AsyncSaveOutputFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncSaveOutputFiles(FRecord& Record, FCommitContext& Context)"
  },
  {
    "label": "UpdateManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateManifest(FRecord& Record)"
  },
  {
    "label": "WriteOplogEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOplogEntry(FCbWriter& Writer, const FOplogPackageInfo& PackageInfo)"
  },
  {
    "label": "ReadOplogEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadOplogEntry(FOplogPackageInfo& PackageInfo, const FCbFieldView& Field)"
  },
  {
    "label": "GetPackageHashes()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TRefCountPtr<FPackageHashes>>&)",
    "insertText": "GetPackageHashes()"
  }
]