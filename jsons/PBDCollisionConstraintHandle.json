[
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDCollisionContainerSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionContainerSolver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ECollisionConstraintDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionConstraintDirection"
  },
  {
    "label": "FPBDCollisionConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraintHandle"
  },
  {
    "label": "FPBDCollisionConstraintHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / PBDConstraintContainer . h \" namespace Chaos { class FPBDCollisionConstraints ; class FPBDCollisionConstraint ; class FPBDCollisionContainerSolver ; enum class ECollisionCCDType { Disabled,Enabled,} ; enum ECollisionConstraintDirection { Particle0ToParticle1,Particle1ToParticle0,NoRestingDependency } ; class FPBDCollisionConstraintHandle : public TIntrusiveConstraintHandle<FPBDCollisionConstraint> { public : using Base = TIntrusiveConstraintHandle<FPBDCollisionConstraint> ; using FImplicitPair = TPair<const FImplicitObject*,const FImplicitObject*> ; using FGeometryPair = TPair<const TGeometryParticleHandle<FReal,3>*,const TGeometryParticleHandle<FReal,3>*> ; using FHandleKey = TPair<FImplicitPair,FGeometryPair> ;)",
    "insertText": "FPBDCollisionConstraintHandle() : TIntrusiveConstraintHandle<FPBDCollisionConstraint>()"
  },
  {
    "label": "GetContact()",
    "kind": "Method",
    "detail": "Function (} const FPBDCollisionConstraint&)",
    "insertText": "GetContact()"
  },
  {
    "label": "GetCCDEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCCDEnabled()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool InEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsProbe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProbe()"
  },
  {
    "label": "GetAccumulatedImpulse()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetAccumulatedImpulse()"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "ConcreteContainer()",
    "kind": "Method",
    "detail": "Function (const FPBDCollisionConstraints*)",
    "insertText": "ConcreteContainer()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (const FConstraintHandleTypeID&)",
    "insertText": "StaticType()"
  },
  {
    "label": "STypeID()",
    "kind": "Method",
    "detail": "Function (FConstraintHandleTypeID)",
    "insertText": "STypeID(TEXT(\"FCollisionConstraintHandle\"), &FIntrusiveConstraintHandle::StaticType())"
  }
]