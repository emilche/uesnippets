[
  {
    "label": "FaceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FaceInterface"
  },
  {
    "label": "EdgeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EdgeInterface"
  },
  {
    "label": "VertexInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VertexInterface"
  },
  {
    "label": "FaceInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_VTR_COMPONENT_INTERFACES_H # define OPENSUBDIV3_VTR_COMPONENT_INTERFACES_H # include \" . . / version . h \" # include \" . . / sdc / types . h \" # include \" . . / sdc / crease . h \" # include \" . . / vtr / types . h \" # include \" . . / vtr / stackBuffer . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Vtr { namespace internal { class FaceInterface { public :)",
    "insertText": "FaceInterface()"
  },
  {
    "label": "FaceInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FaceInterface(int vertCount) : _vertCount(vertCount)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (} public : int)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "EdgeInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EdgeInterface(Level const& level) : _level(&level)"
  },
  {
    "label": "EdgeInterface()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "EdgeInterface()"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndex(int edgeIndex)"
  },
  {
    "label": "GetNumFaces()",
    "kind": "Method",
    "detail": "Function (_eIndex = edgeIndex ; } public : int)",
    "insertText": "GetNumFaces()"
  },
  {
    "label": "GetSharpness()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSharpness()"
  },
  {
    "label": "GetChildSharpnesses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetChildSharpnesses(Sdc::Crease const&, float s[2])"
  },
  {
    "label": "GetNumVerticesPerFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNumVerticesPerFace(int vertsPerFace[])"
  },
  {
    "label": "getEdgeFaces()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray eFaces = _level ->)",
    "insertText": "getEdgeFaces(_eIndex)"
  },
  {
    "label": "getFaceVertices()",
    "kind": "Method",
    "detail": "Function (vertsPerFace [ i ] = _level ->)",
    "insertText": "getFaceVertices(eFaces[i]).size()"
  },
  {
    "label": "VertexInterface()",
    "kind": "Method",
    "detail": "Function (} } private : const Level* _level ; int _eIndex ; } ; class VertexInterface { public :)",
    "insertText": "VertexInterface()"
  },
  {
    "label": "VertexInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VertexInterface(Level const& parent, Level const& child) : _parent(&parent), _child(&child)"
  },
  {
    "label": "SetIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndex(int parentIndex, int childIndex)"
  },
  {
    "label": "getVertexEdges()",
    "kind": "Method",
    "detail": "Function (_pIndex = parentIndex ; _cIndex = childIndex ; _eCount = _parent ->)",
    "insertText": "getVertexEdges(_pIndex).size()"
  },
  {
    "label": "getVertexFaces()",
    "kind": "Method",
    "detail": "Function (_fCount = _parent ->)",
    "insertText": "getVertexFaces(_pIndex).size()"
  },
  {
    "label": "GetNumEdges()",
    "kind": "Method",
    "detail": "Function (} public : int)",
    "insertText": "GetNumEdges()"
  },
  {
    "label": "GetSharpnessPerEdge()",
    "kind": "Method",
    "detail": "Function (} float*)",
    "insertText": "GetSharpnessPerEdge(float pSharpness[])"
  },
  {
    "label": "getVertexEdges()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray pEdges = _parent ->)",
    "insertText": "getVertexEdges(_pIndex)"
  },
  {
    "label": "getEdgeSharpness()",
    "kind": "Method",
    "detail": "Function (pSharpness [ i ] = _parent ->)",
    "insertText": "getEdgeSharpness(pEdges[i])"
  },
  {
    "label": "GetChildSharpness()",
    "kind": "Method",
    "detail": "Function (} return pSharpness ; } float)",
    "insertText": "GetChildSharpness(Sdc::Crease const&)"
  },
  {
    "label": "GetChildSharpnessPerEdge()",
    "kind": "Method",
    "detail": "Function (} float*)",
    "insertText": "GetChildSharpnessPerEdge(Sdc::Crease const& crease, float cSharpness[])"
  },
  {
    "label": "pSharpness()",
    "kind": "Method",
    "detail": "Function (internal::StackBuffer<float,1 6>)",
    "insertText": "pSharpness(_eCount)"
  },
  {
    "label": "GetSharpnessPerEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSharpnessPerEdge(pSharpness)"
  },
  {
    "label": "SubdivideEdgeSharpnessesAroundVertex()",
    "kind": "Method",
    "detail": "Function (crease .)",
    "insertText": "SubdivideEdgeSharpnessesAroundVertex(_eCount, pSharpness, cSharpness)"
  }
]