[
  {
    "label": "IsRefCountedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRefCountedType"
  },
  {
    "label": "NeedsScopedRefptrButGetsRawPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NeedsScopedRefptrButGetsRawPtr"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_ # define BASE_MEMORY_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_ # include<type_traits> # include \" base / memory / raw_ptr . h \" # include \" base / memory / raw_ref . h \" # include \" base / template_util . h \" namespace base { namespace internal { template<T,= void> struct IsRefCountedType : std::false_type { } ; template<T> struct IsRefCountedType<T,std::void_t<)",
    "insertText": "decltype(std::declval<T*>()->AddRef()), decltype(std::declval<T*>()->Release())"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct NeedsScopedRefptrButGetsRawPtr : std::disjunction<std::conjunction<base::IsRawRef<T>,IsRefCountedType<base::RemoveRawRefT<T>>>,std::conjunction<base::IsPointer<T>,IsRefCountedType<base::RemovePointerT<T>>>> {)",
    "insertText": "static_assert(!std::is_reference<T>::value, \"NeedsScopedRefptrButGetsRawPtr requires non-reference type.\")"
  }
]