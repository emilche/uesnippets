[
  {
    "label": "MergeType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MergeType"
  },
  {
    "label": "MergeStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MergeStatus"
  },
  {
    "label": "MergeForce",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MergeForce"
  },
  {
    "label": "ClientUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientUser"
  },
  {
    "label": "ClientMerge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientMerge"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef __CLIENTMERGE__ # define __CLIENTMERGE__ enum MergeType { CMT_BINARY,CMT_3WAY,CMT_2WAY } ; enum MergeStatus { CMS_QUIT,CMS_SKIP,CMS_MERGED,CMS_EDIT,CMS_THEIRS,CMS_YOURS } ; enum MergeForce { CMF_AUTO,CMF_SAFE,CMF_FORCE } ; class ClientUser ; class ClientMerge : public LastChance { public : ClientMerge*)",
    "insertText": "Create(ClientUser *ui, FileSysType type, FileSysType resType, MergeType m)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (ClientMerge*)",
    "insertText": "Create(ClientUser *ui, FileSysType type, FileSysType resType, FileSysType theirType, FileSysType baseType, MergeType m)"
  },
  {
    "label": "ClientMerge()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ClientMerge()"
  },
  {
    "label": "AutoResolve()",
    "kind": "Method",
    "detail": "Function (MergeStatus)",
    "insertText": "AutoResolve(MergeForce forceMerge)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (MergeStatus)",
    "insertText": "Resolve(Error *e)"
  },
  {
    "label": "DetectResolve()",
    "kind": "Method",
    "detail": "Function (MergeStatus)",
    "insertText": "DetectResolve()"
  },
  {
    "label": "IsAcceptable()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IsAcceptable()"
  },
  {
    "label": "GetBaseFile()",
    "kind": "Method",
    "detail": "Function (FileSys*)",
    "insertText": "GetBaseFile()"
  },
  {
    "label": "GetYourFile()",
    "kind": "Method",
    "detail": "Function (FileSys*)",
    "insertText": "GetYourFile()"
  },
  {
    "label": "GetTheirFile()",
    "kind": "Method",
    "detail": "Function (FileSys*)",
    "insertText": "GetTheirFile()"
  },
  {
    "label": "GetResultFile()",
    "kind": "Method",
    "detail": "Function (FileSys*)",
    "insertText": "GetResultFile()"
  },
  {
    "label": "GetYourChunks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetYourChunks()"
  },
  {
    "label": "GetTheirChunks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTheirChunks()"
  },
  {
    "label": "GetBothChunks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBothChunks()"
  },
  {
    "label": "GetConflictChunks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetConflictChunks()"
  },
  {
    "label": "GetMergeDigest()",
    "kind": "Method",
    "detail": "Function (const StrPtr*)",
    "insertText": "GetMergeDigest()"
  },
  {
    "label": "CopyDigest()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CopyDigest(StrPtr *, Error *)"
  },
  {
    "label": "SetShowAll()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetShowAll()"
  },
  {
    "label": "SetDiffFlags()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetDiffFlags(const StrPtr *)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Open(StrPtr *name, Error *e, CharSetCvt * = 0, int charset = 0)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(StrPtr *buf, StrPtr *bits, Error *e)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(Error *e)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Select(MergeStatus stat, Error *e)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod(const char *perms, Error *e)"
  },
  {
    "label": "SetTheirModTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTheirModTime(StrPtr *modTime)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Chmod(char *perms, Error *e)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chmod((const char *)perms, e)"
  }
]