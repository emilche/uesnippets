[
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "EOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOptions"
  },
  {
    "label": "EShaderValues",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderValues"
  },
  {
    "label": "EOscillationComponents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOscillationComponents"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / ExportBegin . h \" # include \" Core / Types . h \" # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "SBranchWindLevel()",
    "kind": "Method",
    "detail": "Function (const st_int32 c_nNumWindPointsInCurves = 1 0 ; const st_int32 c_nNumBranchLevels = 2 ; const st_int32 c_nNumLeafGroups = 2 ; class ST_DLL_LINK CWind { public : enum EOptions { GLOBAL_WIND,GLOBAL_PRESERVE_SHAPE,BRANCH_SIMPLE_1,BRANCH_DIRECTIONAL_1,BRANCH_DIRECTIONAL_FROND_1,BRANCH_TURBULENCE_1,BRANCH_WHIP_1,BRANCH_OSC_COMPLEX_1,BRANCH_SIMPLE_2,BRANCH_DIRECTIONAL_2,BRANCH_DIRECTIONAL_FROND_2,BRANCH_TURBULENCE_2,BRANCH_WHIP_2,BRANCH_OSC_COMPLEX_2,LEAF_RIPPLE_VERTEX_NORMAL_1,LEAF_RIPPLE_COMPUTED_1,LEAF_TUMBLE_1,LEAF_TWITCH_1,LEAF_OCCLUSION_1,LEAF_RIPPLE_VERTEX_NORMAL_2,LEAF_RIPPLE_COMPUTED_2,LEAF_TUMBLE_2,LEAF_TWITCH_2,LEAF_OCCLUSION_2,FROND_RIPPLE_ONE_SIDED,FROND_RIPPLE_TWO_SIDED,FROND_RIPPLE_ADJUST_LIGHTING,ROLLING,NUM_WIND_OPTIONS } ; enum EShaderValues { SH_WIND_DIR_X,SH_WIND_DIR_Y,SH_WIND_DIR_Z,SH_GENERAL_STRENGTH,SH_WIND_ANCHOR_X,SH_WIND_ANCHOR_Y,SH_WIND_ANCHOR_Z,SH_WIND_PAD0,SH_GLOBAL_TIME,SH_GLOBAL_DISTANCE,SH_GLOBAL_HEIGHT,SH_GLOBAL_HEIGHT_EXPONENT,SH_GLOBAL_DIRECTION_ADHERENCE,SH_WIND_PAD1,SH_WIND_PAD2,SH_WIND_PAD3,SH_BRANCH_1_TIME,SH_BRANCH_1_DISTANCE,SH_BRANCH_1_TWITCH,SH_BRANCH_1_TWITCH_FREQ_SCALE,SH_BRANCH_1_WHIP,SH_BRANCH_1_DIRECTION_ADHERENCE,SH_BRANCH_1_TURBULENCE,SH_WIND_PAD4,SH_BRANCH_2_TIME,SH_BRANCH_2_DISTANCE,SH_BRANCH_2_TWITCH,SH_BRANCH_2_TWITCH_FREQ_SCALE,SH_BRANCH_2_WHIP,SH_BRANCH_2_DIRECTION_ADHERENCE,SH_BRANCH_2_TURBULENCE,SH_WIND_PAD5,SH_LEAF_1_RIPPLE_TIME,SH_LEAF_1_RIPPLE_DISTANCE,SH_LEAF_1_LEEWARD_SCALAR,SH_LEAF_1_TUMBLE_TIME,SH_LEAF_1_TUMBLE_FLIP,SH_LEAF_1_TUMBLE_TWIST,SH_LEAF_1_TUMBLE_DIRECTION_ADHERENCE,SH_LEAF_1_TWITCH_THROW,SH_LEAF_1_TWITCH_SHARPNESS,SH_LEAF_1_TWITCH_TIME,SH_WIND_PAD6,SH_WIND_PAD7,SH_LEAF_2_RIPPLE_TIME,SH_LEAF_2_RIPPLE_DISTANCE,SH_LEAF_2_LEEWARD_SCALAR,SH_LEAF_2_TUMBLE_TIME,SH_LEAF_2_TUMBLE_FLIP,SH_LEAF_2_TUMBLE_TWIST,SH_LEAF_2_TUMBLE_DIRECTION_ADHERENCE,SH_LEAF_2_TWITCH_THROW,SH_LEAF_2_TWITCH_SHARPNESS,SH_LEAF_2_TWITCH_TIME,SH_WIND_PAD8,SH_WIND_PAD9,SH_FROND_RIPPLE_TIME,SH_FROND_RIPPLE_DISTANCE,SH_FROND_RIPPLE_TILE,SH_FROND_RIPPLE_LIGHTING_SCALAR,SH_ROLLING_BRANCH_FIELD_MIN,SH_ROLLING_BRANCH_LIGHTING_ADJUST,SH_ROLLING_BRANCH_VERTICAL_OFFSET,SH_ROLLING_LEAF_RIPPLE_MIN,SH_ROLLING_LEAF_TUMBLE_MIN,SH_ROLLING_NOISE_PERIOD,SH_ROLLING_NOISE_SIZE,SH_ROLLING_NOISE_TURBULENCE,SH_ROLLING_NOISE_TWIST,SH_ROLLING_X,SH_ROLLING_Y,SH_WIND_PAD10,NUM_SHADER_VALUES } ; enum EOscillationComponents { OSC_GLOBAL,OSC_BRANCH_1,OSC_BRANCH_2,OSC_LEAF_1_RIPPLE,OSC_LEAF_1_TUMBLE,OSC_LEAF_1_TWITCH,OSC_LEAF_2_RIPPLE,OSC_LEAF_2_TUMBLE,OSC_LEAF_2_TWITCH,OSC_FROND_RIPPLE,NUM_OSC_COMPONENTS } ; struct ST_DLL_LINK SBranchWindLevel {)",
    "insertText": "SBranchWindLevel()"
  },
  {
    "label": "SWindGroup()",
    "kind": "Method",
    "detail": "Function (st_float32 m_afDistance [ c_nNumWindPointsInCurves ] ; st_float32 m_afDirectionAdherence [ c_nNumWindPointsInCurves ] ; st_float32 m_afWhip [ c_nNumWindPointsInCurves ] ; st_float32 m_fTurbulence ; st_float32 m_fTwitch ; st_float32 m_fTwitchFreqScale ; } ; struct ST_DLL_LINK SWindGroup {)",
    "insertText": "SWindGroup()"
  },
  {
    "label": "SParams()",
    "kind": "Method",
    "detail": "Function (st_float32 m_afRippleDistance [ c_nNumWindPointsInCurves ] ; st_float32 m_afTumbleFlip [ c_nNumWindPointsInCurves ] ; st_float32 m_afTumbleTwist [ c_nNumWindPointsInCurves ] ; st_float32 m_afTumbleDirectionAdherence [ c_nNumWindPointsInCurves ] ; st_float32 m_afTwitchThrow [ c_nNumWindPointsInCurves ] ; st_float32 m_fTwitchSharpness ; st_float32 m_fRollMaxScale ; st_float32 m_fRollMinScale ; st_float32 m_fRollSpeed ; st_float32 m_fRollSeparation ; st_float32 m_fLeewardScalar ; } ; struct ST_DLL_LINK SParams {)",
    "insertText": "SParams()"
  },
  {
    "label": "CWind()",
    "kind": "Method",
    "detail": "Function (st_float32 m_fStrengthResponse ; st_float32 m_fDirectionResponse ; st_float32 m_fAnchorOffset ; st_float32 m_fAnchorDistanceScale ; st_float32 m_afFrequencies [ NUM_OSC_COMPONENTS ] [ c_nNumWindPointsInCurves ] ; st_float32 m_fGlobalHeight ; st_float32 m_fGlobalHeightExponent ; st_float32 m_afGlobalDistance [ c_nNumWindPointsInCurves ] ; st_float32 m_afGlobalDirectionAdherence [ c_nNumWindPointsInCurves ] ; SBranchWindLevel m_asBranch [ c_nNumBranchLevels ] ; SWindGroup m_asLeaf [ c_nNumLeafGroups ] ; st_float32 m_afFrondRippleDistance [ c_nNumWindPointsInCurves ] ; st_float32 m_fFrondRippleTile ; st_float32 m_fFrondRippleLightingScalar ; st_float32 m_fRollingNoiseSize ; st_float32 m_fRollingNoiseTwist ; st_float32 m_fRollingNoiseTurbulence ; st_float32 m_fRollingNoisePeriod ; st_float32 m_fRollingNoiseSpeed ; st_float32 m_fRollingBranchFieldMin ; st_float32 m_fRollingBranchLightingAdjust ; st_float32 m_fRollingBranchVerticalOffset ; st_float32 m_fRollingLeafRippleMin ; st_float32 m_fRollingLeafTumbleMin ; st_float32 m_fGustFrequency ; st_float32 m_fGustStrengthMin ; st_float32 m_fGustStrengthMax ; st_float32 m_fGustDurationMin ; st_float32 m_fGustDurationMax ; st_float32 m_fGustRiseScalar ; st_float32 m_fGustFallScalar ; } ;)",
    "insertText": "CWind()"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParams(const CWind::SParams& sParams)"
  },
  {
    "label": "GetParams()",
    "kind": "Method",
    "detail": "Function (const CWind::SParams&)",
    "insertText": "GetParams(void)"
  },
  {
    "label": "SetStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStrength(st_float32 fStrength)"
  },
  {
    "label": "SetDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirection(const Vec3& vDir)"
  },
  {
    "label": "SetInitDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitDirection(const Vec3& vDir)"
  },
  {
    "label": "EnableGusting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGusting(st_bool bEnabled)"
  },
  {
    "label": "SetGustFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustFrequency(st_float32 fGustFreq)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(st_float32 fScalar)"
  },
  {
    "label": "SetTreeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeValues(const Vec3& vBranchAnchor, st_float32 fMaxBranchLength)"
  },
  {
    "label": "GetBranchAnchor()",
    "kind": "Method",
    "detail": "Function (const st_float32*)",
    "insertText": "GetBranchAnchor(void)"
  },
  {
    "label": "GetMaxBranchLength()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "GetMaxBranchLength(void)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(EOptions eOption, st_bool bState)"
  },
  {
    "label": "IsOptionEnabled()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsOptionEnabled(EOptions eOption)"
  },
  {
    "label": "IsGlobalWindEnabled()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsGlobalWindEnabled(void)"
  },
  {
    "label": "IsBranchWindEnabled()",
    "kind": "Method",
    "detail": "Function (st_bool)",
    "insertText": "IsBranchWindEnabled(void)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(st_bool bEnabled, st_float32 fTime)"
  },
  {
    "label": "GetShaderTable()",
    "kind": "Method",
    "detail": "Function (const st_float32*)",
    "insertText": "GetShaderTable(void)"
  },
  {
    "label": "Gust()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Gust(st_float32 fTime)"
  },
  {
    "label": "RandomFloat()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "RandomFloat(st_float32 fMin, st_float32 fMax)"
  },
  {
    "label": "LinearSigmoid()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "LinearSigmoid(st_float32 fInput, st_float32 fLinearness)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(st_float32* pVector)"
  },
  {
    "label": "ComputeWindAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeWindAnchor(st_float32* pPos)"
  }
]