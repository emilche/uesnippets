[
  {
    "label": "ForcedTickMetronome",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForcedTickMetronome"
  },
  {
    "label": "FakeMetronome",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeMetronome"
  },
  {
    "label": "ForcedTickMetronome()",
    "kind": "Method",
    "detail": "Function (# ifndef API_METRONOME_TEST_FAKE_METRONOME_H_ # define API_METRONOME_TEST_FAKE_METRONOME_H_ # include<memory> # include<set> # include<vector> # include \" api / metronome / metronome . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc::test { class ForcedTickMetronome : public Metronome { public :)",
    "insertText": "ForcedTickMetronome(TimeDelta tick_period)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "NumListeners()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumListeners()"
  },
  {
    "label": "RequestCallOnNextTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCallOnNextTick(absl::AnyInvocable<void() &&> callback)"
  },
  {
    "label": "TickPeriod()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "TickPeriod()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : const TimeDelta tick_period_ ; std::vector<absl::AnyInvocable<)",
    "insertText": "void()"
  },
  {
    "label": "FakeMetronome()",
    "kind": "Method",
    "detail": "Function (} ; class FakeMetronome : public Metronome { public :)",
    "insertText": "FakeMetronome(TimeDelta tick_period)"
  }
]