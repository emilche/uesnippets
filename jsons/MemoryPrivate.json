[
  {
    "label": "FMemoryProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryProvider"
  },
  {
    "label": "FTagSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTagSampleData"
  },
  {
    "label": "FTrackerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackerData"
  },
  {
    "label": "FMemoryProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" UObject / NameTypes . h \" # include \" Common / PagedArray . h \" # include \" TraceServices / Model / Memory . h \" namespace TraceServices { class FMemoryProvider : public IMemoryProvider { public :)",
    "insertText": "FMemoryProvider(IAnalysisSession& Session)"
  },
  {
    "label": "FMemoryProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMemoryProvider()"
  },
  {
    "label": "AddEventSpec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEventSpec(FMemoryTagId Tag, const TCHAR* Name, FMemoryTagId ParentTag)"
  },
  {
    "label": "AddTrackerSpec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackerSpec(FMemoryTrackerId TrackerId, const TCHAR* Name)"
  },
  {
    "label": "AddTagSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagSnapshot(FMemoryTrackerId TrackerId, double Time, const int64* Tags, const FMemoryTagSample* Values, uint32 TagCount)"
  },
  {
    "label": "GetTagSerial()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTagSerial()"
  },
  {
    "label": "GetTagCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTagCount()"
  },
  {
    "label": "EnumerateTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTags(TFunctionRef<void(const FMemoryTagInfo&)> Callback)"
  },
  {
    "label": "GetTag()",
    "kind": "Method",
    "detail": "Function (const FMemoryTagInfo*)",
    "insertText": "GetTag(FMemoryTagId Id)"
  },
  {
    "label": "GetTrackerCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTrackerCount()"
  },
  {
    "label": "EnumerateTrackers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTrackers(TFunctionRef<void(const FMemoryTrackerInfo&)> Callback)"
  },
  {
    "label": "GetTagSampleCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTagSampleCount(FMemoryTrackerId Tracker, FMemoryTagId Tag)"
  },
  {
    "label": "EnumerateTagSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTagSamples(FMemoryTrackerId Tracker, FMemoryTagId Tag, double StartTime, double EnddTime, bool bIncludeRangeNeighbours, TFunctionRef<void(double Time, double Duration, const FMemoryTagSample&)> Callback)"
  },
  {
    "label": "FTagSampleData()",
    "kind": "Method",
    "detail": "Function (private : enum { DefaultPageSize = 6 5 5 3 6,} ; struct FTagSampleData { TPagedArray<FMemoryTagSample> Values ; FMemoryTagInfo* TagPtr ;)",
    "insertText": "FTagSampleData(ILinearAllocator& Allocator) : Values(Allocator, DefaultPageSize), TagPtr(nullptr)"
  },
  {
    "label": "FTagSampleData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTagSampleData(const FTagSampleData& Other) : Values(Other.Values), TagPtr(Other.TagPtr)"
  },
  {
    "label": "FTrackerData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTrackerData { TArray<double> SampleTimes ; TMap<FMemoryTagId,FTagSampleData> Samples ;)",
    "insertText": "FTrackerData()"
  },
  {
    "label": "FTrackerData()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FTrackerData(const FTrackerData&)"
  }
]