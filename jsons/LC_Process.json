[
  {
    "label": "Context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Context"
  },
  {
    "label": "GetBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_ProcessTypes . h \" # include \" LC_ThreadTypes . h \" # include<string> # include<vector> namespace Process { struct Context ; namespace Current { void*)",
    "insertText": "GetBase(void)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (Handle)",
    "insertText": "GetHandle(void)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (Id)",
    "insertText": "GetId(void)"
  },
  {
    "label": "GetImagePath()",
    "kind": "Method",
    "detail": "Function (Filesystem::Path)",
    "insertText": "GetImagePath(void)"
  },
  {
    "label": "GetWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (Filesystem::Path)",
    "insertText": "GetWorkingDirectory(void)"
  },
  {
    "label": "GetCommandLine()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "GetCommandLine(void)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} Id)",
    "insertText": "GetId(const Context* context)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (Handle)",
    "insertText": "GetHandle(const Context* context)"
  },
  {
    "label": "GetStdOutData()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "GetStdOutData(const Context* context)"
  },
  {
    "label": "Spawn()",
    "kind": "Method",
    "detail": "Function (Context*)",
    "insertText": "Spawn(const wchar_t* exePath, const wchar_t* workingDirectory, const wchar_t* commandLine, const void* environmentBlock, uint32_t flags)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy(Context*& context)"
  },
  {
    "label": "ResumeMainThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeMainThread(Context* context)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "Wait(Context* context)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "Wait(Handle handle)"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate(Context* context)"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate(Handle handle)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (Handle)",
    "insertText": "Open(Id processId)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(Handle& handle)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend(Context* context)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Suspend(Handle handle)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume(Context* context)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume(Handle handle)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive(Handle handle)"
  },
  {
    "label": "IsWoW64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWoW64(Handle handle)"
  },
  {
    "label": "ReadProcessMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadProcessMemory(Handle handle, const void* srcAddress, void* destBuffer, size_t size)"
  },
  {
    "label": "WriteProcessMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteProcessMemory(Handle handle, void* destAddress, const void* srcBuffer, size_t size)"
  },
  {
    "label": "ReadProcessMemory()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "ReadProcessMemory(Handle handle, const void* srcAddress)"
  },
  {
    "label": "ReadProcessMemory()",
    "kind": "Method",
    "detail": "Function (T value = { } ;)",
    "insertText": "ReadProcessMemory(handle, srcAddress, &value, sizeof(T))"
  },
  {
    "label": "WriteProcessMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteProcessMemory(handle, destAddress, &value, sizeof(T))"
  },
  {
    "label": "ScanMemoryRange()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "ScanMemoryRange(Handle handle, const void* lowerBound, const void* upperBound, size_t size, size_t alignment)"
  },
  {
    "label": "ConvertPageProtectionToExecutableProtection()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ConvertPageProtectionToExecutableProtection(uint32_t protection)"
  },
  {
    "label": "MakePagesExecutable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakePagesExecutable(Handle handle, void* address, size_t size)"
  },
  {
    "label": "FlushInstructionCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushInstructionCache(Handle handle, void* address, size_t size)"
  },
  {
    "label": "CreateEnvironment()",
    "kind": "Method",
    "detail": "Function (Environment)",
    "insertText": "CreateEnvironment(Handle handle)"
  },
  {
    "label": "CreateEnvironment()",
    "kind": "Method",
    "detail": "Function (Environment)",
    "insertText": "CreateEnvironment(Context* context)"
  },
  {
    "label": "DestroyEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEnvironment(Environment& environment)"
  },
  {
    "label": "EnumerateThreads()",
    "kind": "Method",
    "detail": "Function (std::vector<Thread::Id>)",
    "insertText": "EnumerateThreads(Id processId)"
  },
  {
    "label": "EnumerateModules()",
    "kind": "Method",
    "detail": "Function (std::vector<Module>)",
    "insertText": "EnumerateModules(Handle handle)"
  },
  {
    "label": "GetImagePath()",
    "kind": "Method",
    "detail": "Function (Filesystem::Path)",
    "insertText": "GetImagePath(Handle handle)"
  },
  {
    "label": "GetModuleSize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetModuleSize(Handle handle, void* moduleBase)"
  },
  {
    "label": "DumpMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMemory(Handle handle, const void* address, size_t size)"
  },
  {
    "label": "CreateEnvironmentFromMap()",
    "kind": "Method",
    "detail": "Function (Environment*)",
    "insertText": "CreateEnvironmentFromMap(const TMap<FString, FString>& Pairs)"
  }
]