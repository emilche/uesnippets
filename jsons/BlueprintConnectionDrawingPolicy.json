[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FArrangedWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedWidget"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FTimePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimePair"
  },
  {
    "label": "UK2Node_Knot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Knot"
  },
  {
    "label": "FTimePair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ConnectionDrawingPolicy . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" HAL / Platform . h \" # include \" Layout / ArrangedWidget . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / SWidget . h \" class FArrangedChildren ; class FArrangedWidget ; class FSlateRect ; class FSlateWindowElementList ; class SGraphPin ; class SWidget ; class UBlueprint ; class UEdGraph ; class UEdGraphPin ; class FKismetConnectionDrawingPolicy : public FConnectionDrawingPolicy { protected : struct FTimePair { double PredExecTime ; double ThisExecTime ;)",
    "insertText": "FTimePair() : PredExecTime(0.0) , ThisExecTime(0.0)"
  },
  {
    "label": "TreatWireAsExecutionPin()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TMap<UEdGraphPin*,FTimePair> FExecPairingMap ; TMap<UEdGraphNode*,FExecPairingMap> PredecessorPins ; UEdGraph* GraphObj ; double CurrentTime ; double LatestTimeDiscovered ; FLinearColor AttackColor ; FLinearColor SustainColor ; FLinearColor ReleaseColor ; float AttackWireThickness ; float SustainWireThickness ; float ReleaseWireThickness ; float DefaultDataWireThickness ; float DefaultExecutionWireThickness ; float TracePositionBonusPeriod ; float TracePositionExponent ; float AttackHoldPeriod ; float DecayPeriod ; float DecayExponent ; float SustainHoldPeriod ; float ReleasePeriod ; float ReleaseExponent ; TMap<class UK2Node_Knot*,bool> KnotToReversedDirectionMap ; protected : bool)",
    "insertText": "TreatWireAsExecutionPin(UEdGraphPin* InputPin, UEdGraphPin* OutputPin)"
  },
  {
    "label": "GetTargetBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetTargetBlueprint()"
  },
  {
    "label": "CanBuildRoadmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBuildRoadmap(UBlueprint* TargetBP)"
  },
  {
    "label": "FKismetConnectionDrawingPolicy()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FKismetConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float ZoomFactor, const FSlateRect& InClippingRect, FSlateWindowElementList& InDrawElements, UEdGraph* InGraphObj)"
  },
  {
    "label": "BuildExecutionRoadmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildExecutionRoadmap()"
  },
  {
    "label": "CanBuildRoadmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBuildRoadmap()"
  },
  {
    "label": "CalculateEnvelopeAlphas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateEnvelopeAlphas(double ExecutionTime, float& AttackAlpha, float& SustainAlpha)"
  },
  {
    "label": "DetermineWiringStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineWiringStyle(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, FConnectionParams& Params)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(TMap<TSharedRef<SWidget>, FArrangedWidget>& PinGeometries, FArrangedChildren& ArrangedNodes)"
  },
  {
    "label": "DetermineStyleOfExecWire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineStyleOfExecWire(float& Thickness, FLinearColor& WireColor, bool& bDrawBubbles, const FTimePair& Times)"
  },
  {
    "label": "SetIncompatiblePinDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncompatiblePinDrawState(const TSharedPtr<SGraphPin>& StartPin, const TSet< TSharedRef<SWidget> >& VisiblePins)"
  },
  {
    "label": "ResetIncompatiblePinDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIncompatiblePinDrawState(const TSet< TSharedRef<SWidget> >& VisiblePins)"
  },
  {
    "label": "AreNodesGraphicallySequential()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AreNodesGraphicallySequential(UEdGraphNode* InputNode, UEdGraphNode* OutputNode)"
  },
  {
    "label": "BackTraceExecPath()",
    "kind": "Method",
    "detail": "Function (FTimePair const*)",
    "insertText": "BackTraceExecPath(UEdGraphPin const* const OutputPin, FExecPairingMap const* const NodeExecutionList)"
  },
  {
    "label": "ShouldChangeTangentForKnot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldChangeTangentForKnot(class UK2Node_Knot* Knot)"
  },
  {
    "label": "GetAverageConnectedPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAverageConnectedPosition(class UK2Node_Knot* Knot, EEdGraphPinDirection Direction, FVector2D& OutPos)"
  },
  {
    "label": "FindPinCenter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPinCenter(UEdGraphPin* Pin, FVector2D& OutCenter)"
  },
  {
    "label": "GetObjectBeingDebugged()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectBeingDebugged(UBlueprint* TargetBP)"
  }
]