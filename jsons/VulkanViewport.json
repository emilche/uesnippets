[
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "FVulkanSwapChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanSwapChain"
  },
  {
    "label": "FVulkanQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueue"
  },
  {
    "label": "FVulkanViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanViewport"
  },
  {
    "label": "FSemaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSemaphore"
  },
  {
    "label": "FVulkanBackBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanBackBuffer"
  },
  {
    "label": "FVulkanSwapChainRecreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanSwapChainRecreateInfo"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FRHICommandAcquireBackBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandAcquireBackBuffer"
  },
  {
    "label": "TVulkanResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVulkanResourceTraits"
  },
  {
    "label": "FVulkanBackBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanResources . h \" # include \" HAL / CriticalSection . h \" class FVulkanDynamicRHI ; class FVulkanSwapChain ; class FVulkanQueue ; class FVulkanViewport ; namespace VulkanRHI { class FSemaphore ; } class FVulkanBackBuffer : public FVulkanTexture { public :)",
    "insertText": "FVulkanBackBuffer(FVulkanDevice& Device, FVulkanViewport* InViewport, EPixelFormat Format, uint32 SizeX, uint32 SizeY, ETextureCreateFlags UEFlags)"
  },
  {
    "label": "FVulkanBackBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanBackBuffer()"
  },
  {
    "label": "OnLayoutTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLayoutTransition(FVulkanCommandListContext& Context, VkImageLayout NewLayout)"
  },
  {
    "label": "OnGetBackBufferImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetBackBufferImage(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "OnAdvanceBackBufferFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdvanceBackBufferFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "ReleaseViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseViewport()"
  },
  {
    "label": "ReleaseAcquiredImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAcquiredImage()"
  },
  {
    "label": "AcquireBackBufferImage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AcquireBackBufferImage(FVulkanCommandListContext& Context)"
  },
  {
    "label": "FVulkanViewport()",
    "kind": "Method",
    "detail": "Function (private : FVulkanViewport* Viewport ; } ; class FVulkanViewport : public FRHIViewport,public VulkanRHI::FDeviceChild { public : enum { NUM_BUFFERS = 3 } ;)",
    "insertText": "FVulkanViewport(FVulkanDevice* InDevice, void* InWindowHandle, uint32 InSizeX,uint32 InSizeY,bool bInIsFullscreen, EPixelFormat InPreferredPixelFormat)"
  },
  {
    "label": "FVulkanViewport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanViewport()"
  },
  {
    "label": "GetBackBuffer()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "GetBackBuffer(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "AdvanceBackBufferFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceBackBufferFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "WaitForFrameEventCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForFrameEventCompletion()"
  },
  {
    "label": "IssueFrameEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueFrameEvent()"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "SetCustomPresent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomPresent(FRHICustomPresent* InCustomPresent)"
  },
  {
    "label": "GetCustomPresent()",
    "kind": "Method",
    "detail": "Function (CustomPresent = InCustomPresent ; } FRHICustomPresent*)",
    "insertText": "GetCustomPresent()"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Present(FVulkanCommandListContext* Context, FVulkanCmdBuffer* CmdBuffer, FVulkanQueue* Queue, FVulkanQueue* PresentQueue, bool bLockToVsync)"
  },
  {
    "label": "GetPresentCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPresentCount()"
  },
  {
    "label": "GetBackBufferImage()",
    "kind": "Method",
    "detail": "Function (} VkImage)",
    "insertText": "GetBackBufferImage(uint32 Index)"
  },
  {
    "label": "OnSystemResolutionChanged()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TRefCountPtr<FVulkanTexture>,TInlineAllocator<NUM_BUFFERS* 2>> BackBufferImages ; TArray<VulkanRHI::FSemaphore*,TInlineAllocator<NUM_BUFFERS* 2>> RenderingDoneSemaphores ; TIndirectArray<FVulkanView,TInlineAllocator<NUM_BUFFERS* 2>> TextureViews ; TRefCountPtr<FVulkanBackBuffer> RHIBackBuffer ; TRefCountPtr<FVulkanTexture> RenderingBackBuffer ; FCriticalSection RecreatingSwapchain ; uint32 SizeX ; uint32 SizeY ; bool bIsFullscreen ; EPixelFormat PixelFormat ; int32 AcquiredImageIndex ; FVulkanSwapChain* SwapChain ; void* WindowHandle ; uint32 PresentCount ; bool bRenderOffscreen ; int8 LockToVsync ; VulkanRHI::FSemaphore* AcquiredSemaphore ; FCustomPresentRHIRef CustomPresent ; FVulkanCmdBuffer* LastFrameCommandBuffer = nullptr ; uint64 LastFrameFenceCounter = 0 ; EDeviceScreenOrientation CachedOrientation = EDeviceScreenOrientation::Unknown ; void)",
    "insertText": "OnSystemResolutionChanged(uint32 ResX, uint32 ResY)"
  },
  {
    "label": "CreateSwapchain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSwapchain(struct FVulkanSwapChainRecreateInfo* RecreateInfo)"
  },
  {
    "label": "DestroySwapchain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySwapchain(struct FVulkanSwapChainRecreateInfo* RecreateInfo)"
  },
  {
    "label": "TryAcquireImageIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAcquireImageIndex()"
  },
  {
    "label": "RecreateSwapchain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateSwapchain(void* NewNativeWindow)"
  },
  {
    "label": "RecreateSwapchainFromRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateSwapchainFromRT(EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(uint32 InSizeX, uint32 InSizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "DoCheckedSwapChainJob()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCheckedSwapChainJob(TFunction<int32(FVulkanViewport*)> SwapChainJob)"
  },
  {
    "label": "SupportsStandardSwapchain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsStandardSwapchain()"
  },
  {
    "label": "RequiresRenderingBackBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresRenderingBackBuffer()"
  },
  {
    "label": "GetPixelFormatForNonDefaultSwapchain()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetPixelFormatForNonDefaultSwapchain()"
  }
]