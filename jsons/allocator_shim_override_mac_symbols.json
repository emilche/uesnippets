[
  {
    "label": "_malloc_zone_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_malloc_zone_t"
  },
  {
    "label": "MallocZoneFunctionsToReplaceDefault()",
    "kind": "Method",
    "detail": "Function (# ifdef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_MAC_SYMBOLS_H_ # error This header is meant to be included only once by allocator_shim . cc # endif # ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_MAC_SYMBOLS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_SHIM_ALLOCATOR_SHIM_OVERRIDE_MAC_SYMBOLS_H_ # include \" base / allocator / partition_allocator / shim / malloc_zone_functions_mac . h \" # include \" third_party / apple_apsl / malloc . h \" namespace allocator_shim { MallocZoneFunctions)",
    "insertText": "MallocZoneFunctionsToReplaceDefault()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (MallocZoneFunctions new_functions ;)",
    "insertText": "memset(&new_functions, 0, sizeof(MallocZoneFunctions))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size(malloc_zone_t* zone, const void* ptr)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "malloc(malloc_zone_t* zone, size_t size)"
  },
  {
    "label": "calloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "calloc(malloc_zone_t* zone, size_t n, size_t size)"
  },
  {
    "label": "valloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "valloc(malloc_zone_t* zone, size_t size)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (} ; new_functions .)",
    "insertText": "free(malloc_zone_t* zone, void* ptr)"
  },
  {
    "label": "ShimFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimFree(ptr, zone)"
  },
  {
    "label": "realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "realloc(malloc_zone_t* zone, void* ptr, size_t size)"
  },
  {
    "label": "batch_malloc()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "batch_malloc(struct _malloc_zone_t* zone, size_t size, void** results, unsigned num_requested)"
  },
  {
    "label": "batch_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "batch_free(struct _malloc_zone_t* zone, void** to_be_freed, unsigned num_to_be_freed)"
  },
  {
    "label": "ShimBatchFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimBatchFree(to_be_freed, num_to_be_freed, zone)"
  },
  {
    "label": "memalign()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "memalign(malloc_zone_t* zone, size_t alignment, size_t size)"
  },
  {
    "label": "free_definite_size()",
    "kind": "Method",
    "detail": "Function (} ; new_functions .)",
    "insertText": "free_definite_size(malloc_zone_t* zone, void* ptr, size_t size)"
  },
  {
    "label": "ShimFreeDefiniteSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShimFreeDefiniteSize(ptr, size, zone)"
  }
]