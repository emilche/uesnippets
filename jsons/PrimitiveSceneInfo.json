[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIndirectLightingCacheUniformParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCacheUniformParameters"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingGeometry"
  },
  {
    "label": "FReflectionCaptureProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "IPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPrimitiveComponent"
  },
  {
    "label": "FPrimitiveSceneInfoAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneInfoAdapter"
  },
  {
    "label": "FPrimitiveSceneDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneDesc"
  },
  {
    "label": "FPrimitiveSceneInfoData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneInfoData"
  },
  {
    "label": "FInstanceDataBufferHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceDataBufferHeader"
  },
  {
    "label": "FInstanceSceneDataBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceSceneDataBuffers"
  },
  {
    "label": "FInstanceDataUpdateTaskInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceDataUpdateTaskInfo"
  },
  {
    "label": "FNaniteMaterialSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteMaterialSlot"
  },
  {
    "label": "FNaniteRasterBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteRasterBin"
  },
  {
    "label": "FNaniteShadingBin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNaniteShadingBin"
  },
  {
    "label": "FRayTracingInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingInstance"
  },
  {
    "label": "FRayTracingSBTAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingSBTAllocation"
  },
  {
    "label": "FRayTracingMaskAndFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingMaskAndFlags"
  },
  {
    "label": "TOctree2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOctree2"
  },
  {
    "label": "FIndirectLightingCacheAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCacheAllocation"
  },
  {
    "label": "FPrimitiveFlagsCompact",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveFlagsCompact"
  },
  {
    "label": "FPrimitiveSceneInfoCompact",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfoCompact"
  },
  {
    "label": "FPrimitiveVirtualTextureFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveVirtualTextureFlags"
  },
  {
    "label": "FPrimitiveVirtualTextureLodInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveVirtualTextureLodInfo"
  },
  {
    "label": "FPrimitiveOctreeSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveOctreeSemantics"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FViewDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewDebugInfo"
  },
  {
    "label": "FCachedMeshDrawCommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedMeshDrawCommandInfo"
  },
  {
    "label": "FStaticMeshBatchRelevance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatchRelevance"
  },
  {
    "label": "FStaticMeshBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatch"
  },
  {
    "label": "FLightPrimitiveInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightPrimitiveInteraction"
  },
  {
    "label": "FRayTracingLODData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingLODData"
  },
  {
    "label": "FIndirectLightingCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCache"
  },
  {
    "label": "FVolumetricLightmapSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapSceneData"
  },
  {
    "label": "FIndirectLightingCacheAllocation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / IndirectArray . h \" # include \" RenderDeferredCleanup . h \" # include \" HitProxies . h \" # include \" Math / GenericOctreePublic . h \" # include \" PrimitiveComponentId . h \" # include \" PrimitiveDirtyState . h \" # include \" RendererInterface . h \" # include \" ShaderParameterMacros . h \" # include \" MeshPassProcessor . h \" # include \" RayTracingMeshDrawCommands . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Engine / Scene . h \" # include \" RenderingThread . h \" # include \" MeshPassProcessor . h \" # include \" PrimitiveSceneProxy . h \" # include \" SceneTypes . h \" # endif enum class ERayTracingPrimitiveFlags : uint8 ; class FIndirectLightingCacheUniformParameters ; class FPlanarReflectionSceneProxy ; class FPrimitiveSceneInfo ; class FPrimitiveSceneProxy ; class FRayTracingGeometry ; class FReflectionCaptureProxy ; class FScene ; class FViewInfo ; class UPrimitiveComponent ; class IPrimitiveComponent ; struct FPrimitiveSceneInfoAdapter ; struct FPrimitiveSceneDesc ; struct FPrimitiveSceneInfoData ; struct FInstanceDataBufferHeader ; class FInstanceSceneDataBuffers ; class FInstanceDataUpdateTaskInfo ; struct FNaniteMaterialSlot ; struct FNaniteRasterBin ; struct FNaniteShadingBin ; struct FRayTracingInstance ; struct FRayTracingSBTAllocation ; struct FRayTracingMaskAndFlags ; template<ElementType,OctreeSemantics> class TOctree2 ; namespace Nanite { using CoarseMeshStreamingHandle = int16 ; } namespace RayTracing { using GeometryGroupHandle = int32 ; } class FIndirectLightingCacheAllocation { public :)",
    "insertText": "FIndirectLightingCacheAllocation() : Add(FVector(0, 0, 0)), Scale(FVector(0, 0, 0)), MinUV(FVector(0, 0, 0)), MaxUV(FVector(0, 0, 0)), MinTexel(FIntVector(-1, -1, -1)), AllocationTexelSize(0), TargetPosition(FVector(0, 0, 0)), TargetDirectionalShadowing(1), TargetSkyBentNormal(FVector4f(0, 0, 1, 1)), SingleSamplePosition(FVector(0, 0, 0)), CurrentDirectionalShadowing(1), CurrentSkyBentNormal(FVector4f(0, 0, 1, 1)), bHasEverUpdatedSingleSample(false), bPointSample(true), bIsDirty(false), bUnbuiltPreview(false)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (TargetSamplePacked0 [ VectorIndex ] =)",
    "insertText": "FVector4f(0, 0, 0, 0)"
  },
  {
    "label": "SetDirty()",
    "kind": "Method",
    "detail": "Function (} FVector Add ; FVector Scale ; FVector MinUV ; FVector MaxUV ; FIntVector MinTexel ; int32 AllocationTexelSize ; FVector TargetPosition ; FVector4f TargetSamplePacked0 [ 3 ] ; FVector4f TargetSamplePacked1 [ 3 ] ; FVector4f TargetSamplePacked2 ; float TargetDirectionalShadowing ; FVector4f TargetSkyBentNormal ; FVector SingleSamplePosition ; FVector4f SingleSamplePacked0 [ 3 ] ; FVector4f SingleSamplePacked1 [ 3 ] ; FVector4f SingleSamplePacked2 ; float CurrentDirectionalShadowing ; FVector4f CurrentSkyBentNormal ; bool bHasEverUpdatedSingleSample ; bool bPointSample ; bool bIsDirty ; bool bUnbuiltPreview ; void)",
    "insertText": "SetDirty()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bIsDirty = true ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FPrimitiveFlagsCompact()",
    "kind": "Method",
    "detail": "Function (Add = InAdd ; Scale = InScale ; MinUV = InMinUV ; MaxUV = InMaxUV ; MinTexel = InMinTexel ; AllocationTexelSize = InAllocationTexelSize ; bIsDirty = false ; bPointSample = bInPointSample ; bUnbuiltPreview = bInUnbuiltPreview ; } } ; struct FPrimitiveFlagsCompact { uint8 bCastDynamicShadow : 1 ; uint8 bStaticLighting : 1 ; uint8 bCastStaticShadow : 1 ; uint8 bIsNaniteMesh : 1 ; uint8 bIsAlwaysVisible : 1 ; uint8 bSupportsGPUScene : 1 ;)",
    "insertText": "FPrimitiveFlagsCompact(const FPrimitiveSceneProxy* Proxy)"
  },
  {
    "label": "FPrimitiveSceneInfoCompact()",
    "kind": "Method",
    "detail": "Function (} ; class FPrimitiveSceneInfoCompact { public : FPrimitiveSceneInfo* PrimitiveSceneInfo ; FPrimitiveSceneProxy* Proxy ; FCompactBoxSphereBounds Bounds ; float MinDrawDistance ; float MaxDrawDistance ; int32 VisibilityId ; FPrimitiveFlagsCompact PrimitiveFlagsCompact ;)",
    "insertText": "FPrimitiveSceneInfoCompact(FPrimitiveSceneInfo* InPrimitiveSceneInfo)"
  },
  {
    "label": "RasterCommands()",
    "kind": "Method",
    "detail": "Function (} ; struct FPrimitiveVirtualTextureFlags { uint8 bRenderToVirtualTexture : 1 ; enum { RuntimeVirtualTexture_BitCount = 7 } ; uint8 RuntimeVirtualTextureMask : RuntimeVirtualTexture_BitCount ; } ; struct FPrimitiveVirtualTextureLodInfo { enum { LodBiasOffset = 7 } ; uint16 MinLod : 4 ; uint16 MaxLod : 4 ; uint16 LodBias : 4 ; uint16 CullMethod : 1 ; uint16 CullValue : 3 ; } ; typedef TOctree2<FPrimitiveSceneInfoCompact,struct FPrimitiveOctreeSemantics> FScenePrimitiveOctree ; namespace ENaniteMeshPass { enum Type { BasePass,LumenCardCapture,Num,} ; } enum class EUpdateStaticMeshFlags : uint8 {)",
    "insertText": "RasterCommands(1U << 1U), RayTracingCommands = (1U << 2U)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EUpdateStaticMeshFlags)"
  },
  {
    "label": "FPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (FPrimitiveComponentId LightingAttachmentRoot ; FPrimitiveComponentId LODParentComponentId ; TArray<class FCachedMeshDrawCommandInfo> StaticMeshCommandInfos ; TArray<class FStaticMeshBatchRelevance> StaticMeshRelevances ; TArray<class FStaticMeshBatch> StaticMeshes ; TArray<FNaniteRasterBin> NaniteRasterBins [ ENaniteMeshPass::Num ] ; TArray<FNaniteShadingBin> NaniteShadingBins [ ENaniteMeshPass::Num ] ; TArray<FNaniteMaterialSlot> NaniteMaterialSlots [ ENaniteMeshPass::Num ] ; FOctreeElementId2 OctreeId ; const FIndirectLightingCacheAllocation* IndirectLightingCacheAllocation ; TUniformBufferRef<FIndirectLightingCacheUniformParameters> IndirectLightingCacheUniformBuffer ; const FPlanarReflectionSceneProxy* CachedPlanarReflectionProxy ; const FReflectionCaptureProxy* CachedReflectionCaptureProxy ; TArray<int32,TInlineAllocator<1>> DistanceFieldInstanceIndices ; TArray<int32,TInlineAllocator<1>> LumenPrimitiveGroupIndices ; const uint32 MaxCachedReflectionCaptureProxies = 3 ; const FReflectionCaptureProxy* CachedReflectionCaptureProxies [ MaxCachedReflectionCaptureProxies ] ; TArray<TRefCountPtr<HHitProxy>> HitProxies ; HHitProxy* DefaultDynamicHitProxy ; FHitProxyId DefaultDynamicHitProxyId ; float LastRenderTime ; class FLightPrimitiveInteraction* LightList ; FScene* Scene ; int32 NumMobileDynamicLocalLights ; float GpuLodInstanceRadius ;)",
    "insertText": "FPrimitiveSceneInfo(UPrimitiveComponent* InPrimitive,FScene* InScene)"
  },
  {
    "label": "FPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimitiveSceneInfo(FPrimitiveSceneDesc* InPrimitiveSceneDesc, FScene* InScene)"
  },
  {
    "label": "FPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPrimitiveSceneInfo()"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(FScene* Scene, TArrayView<FPrimitiveSceneInfo*> SceneInfos)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromScene(bool bUpdateStaticDrawLists)"
  },
  {
    "label": "AllocateGPUSceneInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateGPUSceneInstances(FScene* Scene, const TArrayView<FPrimitiveSceneInfo*>& SceneInfos)"
  },
  {
    "label": "FreeGPUSceneInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeGPUSceneInstances()"
  },
  {
    "label": "RequestStaticMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestStaticMeshUpdate()"
  },
  {
    "label": "RequestUniformBufferUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestUniformBufferUpdate()"
  },
  {
    "label": "AddStaticMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStaticMeshes(FRHICommandListBase& RHICmdList, FScene* Scene, TArrayView<FPrimitiveSceneInfo*> SceneInfos, bool bCacheMeshDrawCommands = true)"
  },
  {
    "label": "RemoveStaticMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStaticMeshes()"
  },
  {
    "label": "LinkLODParentComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkLODParentComponent()"
  },
  {
    "label": "UnlinkLODParentComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkLODParentComponent()"
  },
  {
    "label": "LinkAttachmentGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkAttachmentGroup()"
  },
  {
    "label": "UnlinkAttachmentGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkAttachmentGroup()"
  },
  {
    "label": "RequestGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestGPUSceneUpdate(EPrimitiveDirtyState PrimitiveDirtyState = EPrimitiveDirtyState::ChangedAll)"
  },
  {
    "label": "MarkGPUStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkGPUStateDirty(EPrimitiveDirtyState PrimitiveDirtyState = EPrimitiveDirtyState::ChangedAll)"
  },
  {
    "label": "RequestGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestGPUSceneUpdate(PrimitiveDirtyState)"
  },
  {
    "label": "RefreshNaniteRasterBins()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshNaniteRasterBins()"
  },
  {
    "label": "GatherLightingAttachmentGroupPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherLightingAttachmentGroupPrimitives(TArray<FPrimitiveSceneInfo*, SceneRenderingAllocator>& OutChildSceneInfos)"
  },
  {
    "label": "GatherLightingAttachmentGroupPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherLightingAttachmentGroupPrimitives(TArray<const FPrimitiveSceneInfo*, SceneRenderingAllocator>& OutChildSceneInfos)"
  },
  {
    "label": "GetAttachmentGroupBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetAttachmentGroupBounds()"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "UpdateIndirectLightingCacheBuffer()",
    "kind": "Method",
    "detail": "Function (bIndirectLightingCacheBufferDirty = true ; } } void)",
    "insertText": "UpdateIndirectLightingCacheBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetStaticMeshesLODRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStaticMeshesLODRange(int8& OutMinLOD, int8& OutMaxLOD)"
  },
  {
    "label": "GetMeshBatch()",
    "kind": "Method",
    "detail": "Function (const FMeshBatch*)",
    "insertText": "GetMeshBatch(int8 InLODIndex)"
  },
  {
    "label": "GetInstanceSceneDataOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstanceSceneDataOffset()"
  },
  {
    "label": "CacheReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheReflectionCaptures()"
  },
  {
    "label": "RemoveCachedReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedReflectionCaptures()"
  },
  {
    "label": "UpdateComponentLastRenderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentLastRenderTime(float CurrentWorldTime, bool bUpdateLastRenderTimeOnScreen)"
  },
  {
    "label": "UpdateStaticLightingBuffer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UpdateStaticLightingBuffer()"
  },
  {
    "label": "UpdateRuntimeVirtualTextureFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRuntimeVirtualTextureFlags()"
  },
  {
    "label": "GetRuntimeVirtualTextureFlags()",
    "kind": "Method",
    "detail": "Function (FPrimitiveVirtualTextureFlags)",
    "insertText": "GetRuntimeVirtualTextureFlags()"
  },
  {
    "label": "UpdateCachedRaytracingData()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING void)",
    "insertText": "UpdateCachedRaytracingData(FScene* Scene, const TArrayView<FPrimitiveSceneInfo*>& SceneInfos)"
  },
  {
    "label": "IsCachedRayTracingGeometryValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedRayTracingGeometryValid()"
  },
  {
    "label": "GetStaticRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometry*)",
    "insertText": "GetStaticRayTracingGeometry(int8 LODIndex)"
  },
  {
    "label": "GetValidStaticRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometry*)",
    "insertText": "GetValidStaticRayTracingGeometry(int8& InOutLODIndex)"
  },
  {
    "label": "GetStaticRayTracingGeometryNum()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStaticRayTracingGeometryNum()"
  },
  {
    "label": "GetCachedRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (} const FRayTracingGeometry*)",
    "insertText": "GetCachedRayTracingGeometry()"
  },
  {
    "label": "GetOwnerActorNameOrLabelForDebuggingOnly()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOwnerActorNameOrLabelForDebuggingOnly()"
  },
  {
    "label": "GetComponentForDebugOnly()",
    "kind": "Method",
    "detail": "Function (} UPrimitiveComponent*)",
    "insertText": "GetComponentForDebugOnly()"
  },
  {
    "label": "GetComponentInterfaceForDebugOnly()",
    "kind": "Method",
    "detail": "Function (IPrimitiveComponent*)",
    "insertText": "GetComponentInterfaceForDebugOnly()"
  },
  {
    "label": "HasInstanceDataBuffers()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasInstanceDataBuffers()"
  },
  {
    "label": "GetInstanceDataHeader()",
    "kind": "Method",
    "detail": "Function (FInstanceDataBufferHeader)",
    "insertText": "GetInstanceDataHeader()"
  },
  {
    "label": "GetSceneData()",
    "kind": "Method",
    "detail": "Function (const FPrimitiveSceneInfoData*)",
    "insertText": "GetSceneData()"
  },
  {
    "label": "GetRayTracingLODDataNum()",
    "kind": "Method",
    "detail": "Function (class FScene ; int32 PackedIndex ; FPersistentPrimitiveIndex PersistentIndex ; IPrimitiveComponent* PrimitiveComponentInterfaceForDebuggingOnly ; FPrimitiveSceneInfoData* SceneData ; FPrimitiveVirtualTextureFlags RuntimeVirtualTextureFlags ; bool bNeedsUniformBufferUpdate : 1 ; bool bIndirectLightingCacheBufferDirty : 1 ; bool bRegisteredVirtualTextureProducerCallback : 1 ; bool bRegisteredWithVelocityData : 1 ; bool bCacheShadowAsStatic : 1 ; bool bNaniteRasterBinsRenderCustomDepth : 1 ; bool bPendingAddToScene : 1 ; bool bPendingAddStaticMeshes : 1 ; bool bPendingFlushVirtualTexture : 1 ; public : bool bNeedsCachedReflectionCaptureUpdate : 1 ; bool bShouldRenderInMainPass : 1 ; bool bVisibleInRealTimeSkyCapture : 1 ; # if RHI_RAYTRACING bool bDrawInGame : 1 ; bool bRayTracingFarField : 1 ; bool bIsVisibleInSceneCaptures : 1 ; bool bIsVisibleInSceneCapturesOnly : 1 ; bool bIsRayTracingRelevant : 1 ; bool bIsRayTracingStaticRelevant : 1 ; bool bIsVisibleInRayTracing : 1 ; bool bCachedRaytracingDataDirty : 1 ; bool bCachedRayTracingInstanceMaskAndFlagsDirty : 1 ; bool bCachedRayTracingInstanceAnySegmentsDecal : 1 ; bool bCachedRayTracingInstanceAllSegmentsDecal : 1 ; Nanite::CoarseMeshStreamingHandle CoarseMeshStreamingHandle ; RayTracing::GeometryGroupHandle RayTracingGeometryGroupHandle ; struct FRayTracingLODData { FRayTracingCachedMeshCommandFlags CachedMeshCommandFlags ; TArray<int32,TInlineAllocator<2>> CachedMeshCommandIndices ; FRayTracingSBTAllocation* SBTAllocation = nullptr ; } ; uint32)",
    "insertText": "GetRayTracingLODDataNum()"
  },
  {
    "label": "GetRayTracingLODData()",
    "kind": "Method",
    "detail": "Function (} const FRayTracingLODData&)",
    "insertText": "GetRayTracingLODData(uint32 Index)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RayTracingLODData =)",
    "insertText": "MoveTemp(LODData)"
  },
  {
    "label": "SetCachedRayTracingInstanceGeometryRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCachedRayTracingInstanceGeometryRHI(FRHIRayTracingGeometry* Geometry)"
  },
  {
    "label": "UpdateCachedRayTracingInstanceMaskAndFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedRayTracingInstanceMaskAndFlags(FRayTracingMaskAndFlags& InstanceMaskAndFlags)"
  },
  {
    "label": "AllocateRayTracingSBT()",
    "kind": "Method",
    "detail": "Function (private : TArray<FRayTracingLODData> RayTracingLODData ; void)",
    "insertText": "AllocateRayTracingSBT()"
  },
  {
    "label": "UpdateIndirectLightingCacheBuffer()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryInstance CachedRayTracingInstance ; # endif private : const FInstanceSceneDataBuffers* InstanceSceneDataBuffersInternal = nullptr ; FInstanceDataUpdateTaskInfo* InstanceDataUpdateTaskInfo = nullptr ; int32 LevelUpdateNotificationIndex ; int32 InstanceSceneDataOffset ; int32 NumInstanceSceneDataEntries ; int32 InstancePayloadDataOffset ; int32 InstancePayloadDataStride ; int32 LightmapDataOffset ; int32 NumLightmapDataEntries ; void)",
    "insertText": "UpdateIndirectLightingCacheBuffer(FRHICommandListBase& RHICmdList, const class FIndirectLightingCache* LightingCache, const class FIndirectLightingCacheAllocation* LightingAllocation, FVector VolumetricLightmapLookupPosition, uint32 SceneFrameNumber, class FVolumetricLightmapSceneData* VolumetricLightmapSceneData)"
  },
  {
    "label": "CacheMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheMeshDrawCommands(FScene* Scene, TArrayView<FPrimitiveSceneInfo*> SceneInfos)"
  },
  {
    "label": "UpdateVirtualTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVirtualTextures(FScene* Scene, TArrayView<FPrimitiveSceneInfo*> SceneInfos)"
  },
  {
    "label": "RemoveCachedMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedMeshDrawCommands()"
  },
  {
    "label": "CacheNaniteMaterialBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheNaniteMaterialBins(FScene* Scene, const TArrayView<FPrimitiveSceneInfo*>& SceneInfos)"
  },
  {
    "label": "RemoveCachedNaniteMaterialBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedNaniteMaterialBins()"
  },
  {
    "label": "CacheRayTracingPrimitives()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING TArray<FRayTracingGeometry*> StaticRayTracingGeometries ; const FRayTracingGeometry* CachedRayTracingGeometry ; void)",
    "insertText": "CacheRayTracingPrimitives(FScene* Scene, const TArrayView<FPrimitiveSceneInfo*>& SceneInfos)"
  },
  {
    "label": "RemoveCachedRayTracingPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedRayTracingPrimitives()"
  },
  {
    "label": "UpdateCachedRayTracingInstances()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateCachedRayTracingInstances(FScene* Scene, const TArrayView<FPrimitiveSceneInfo*>& SceneInfos)"
  },
  {
    "label": "UpdateCachedRayTracingInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedRayTracingInstance(FPrimitiveSceneInfo* SceneInfo, const FRayTracingInstance& RayTracingInstance, const ERayTracingPrimitiveFlags Flags)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FPrimitiveSceneInfoEvent)"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneInfoEvent OnGPUSceneInstancesAllocated ; FPrimitiveSceneInfoEvent OnGPUSceneInstancesFreed ; } ; struct FPrimitiveOctreeSemantics { enum { MaxElementsPerLeaf = 2 5 6 } ; enum { MinInclusiveElementsPerNode = 7 } ; enum { MaxNodeDepth = 1 2 } ; typedef FDefaultAllocator ElementAllocator ; const FCompactBoxSphereBounds&)",
    "insertText": "GetBoundingBox(const FPrimitiveSceneInfoCompact& PrimitiveSceneInfoCompact)"
  },
  {
    "label": "SetOctreeNodeIndex()",
    "kind": "Method",
    "detail": "Function (Element . PrimitiveSceneInfo -> OctreeId = Id ;)",
    "insertText": "SetOctreeNodeIndex(Element, Id)"
  },
  {
    "label": "ApplyOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyOffset(FPrimitiveSceneInfoCompact& Element, FVector Offset)"
  },
  {
    "label": "SetOctreeNodeIndex()",
    "kind": "Method",
    "detail": "Function (Element . Bounds . Origin + = Offset ; } void)",
    "insertText": "SetOctreeNodeIndex(const FPrimitiveSceneInfoCompact& Element, FOctreeElementId2 Id)"
  }
]