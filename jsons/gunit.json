[
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "GTEST_CONCAT_TOKEN_()",
    "kind": "Method",
    "detail": "Function (goto)",
    "insertText": "GTEST_CONCAT_TOKEN_(gunit_label_, __LINE__)"
  },
  {
    "label": "EXPECT_PRED_FORMAT2()",
    "kind": "Method",
    "detail": "Function (Usage:)",
    "insertText": "EXPECT_PRED_FORMAT2(AssertStartsWith, text, \"prefix\")"
  },
  {
    "label": "AssertStartsWith()",
    "kind": "Method",
    "detail": "Function (testing::AssertionResult)",
    "insertText": "AssertStartsWith(const char* text_expr,\n                                          const char* prefix_expr,\n                                          absl::string_view text,\n                                          absl::string_view prefix)"
  },
  {
    "label": "EXPECT_PRED_FORMAT2()",
    "kind": "Method",
    "detail": "Function (Usage:)",
    "insertText": "EXPECT_PRED_FORMAT2(AssertStringContains, str, \"substring\")"
  },
  {
    "label": "AssertStringContains()",
    "kind": "Method",
    "detail": "Function (testing::AssertionResult)",
    "insertText": "AssertStringContains(const char* str_expr,\n                                              const char* substr_expr,\n                                              absl::string_view str,\n                                              absl::string_view substr)"
  }
]