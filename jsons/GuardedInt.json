[
  {
    "label": "TGuardedInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGuardedInt"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Requires . h \" # include<limits> # include<type_traits> template<IntType> class TGuardedInt { private :)",
    "insertText": "static_assert(std::is_integral_v<IntType>, \"Only defined for integer types\")"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (typedef std::make_unsigned_t<IntType> UnsignedType ; IntType MinValue = std::numeric_limits<IntType)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (IntType MaxValue = std::numeric_limits<IntType)",
    "insertText": "max()"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (IntType NumBits =)",
    "insertText": "IntType((sizeof(IntType) / sizeof(char)) * 8)"
  },
  {
    "label": "TGuardedInt()",
    "kind": "Method",
    "detail": "Function (IntType Value = 0 ; bool bIsValid = false ; public :)",
    "insertText": "TGuardedInt()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<ValueType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<ValueType>) > explicit TGuardedInt(ValueType InValue) : Value((IntType)InValue), bIsValid(false)"
  },
  {
    "label": "bIsValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bIsValid(InValue >= MinValue && InValue <= MaxValue)"
  },
  {
    "label": "UnsignedType()",
    "kind": "Method",
    "detail": "Function (} else { bIsValid = InValue<=)",
    "insertText": "UnsignedType(MaxValue)"
  },
  {
    "label": "TGuardedInt()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TGuardedInt(const TGuardedInt& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TGuardedInt&)",
    "insertText": "operator(const TGuardedInt& Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (} const IntType)",
    "insertText": "GetChecked(const IntType DefaultValue = 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TGuardedInt Other)"
  },
  {
    "label": "ComparisonValid()",
    "kind": "Method",
    "detail": "Function (TGuardedInt CheckedOther { Other } ; return)",
    "insertText": "ComparisonValid(CheckedOther)"
  },
  {
    "label": "ValidAndLessOrEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "ValidAndLessOrEqual(const ValueType Other)"
  },
  {
    "label": "ValidAndGreaterThan()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "ValidAndGreaterThan(const ValueType Other)"
  },
  {
    "label": "ValidAndGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "ValidAndGreaterOrEqual(const ValueType Other)"
  },
  {
    "label": "InvalidOrLessThan()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "InvalidOrLessThan(const ValueType Other)"
  },
  {
    "label": "InvalidOrLessOrEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "InvalidOrLessOrEqual(const ValueType Other)"
  },
  {
    "label": "InvalidOrGreaterThan()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "InvalidOrGreaterThan(const ValueType Other)"
  },
  {
    "label": "InvalidOrGreaterOrEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "InvalidOrGreaterOrEqual(const ValueType Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TGuardedInt)",
    "insertText": "operator()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(bIsValid && Value == 0) ? TGuardedInt(-Value) : TGuardedInt()"
  },
  {
    "label": "IntType()",
    "kind": "Method",
    "detail": "Function (} IntType Result ; return FPlatformMath::AddAndCheckForOverflow<)",
    "insertText": "IntType(Value, Other.Value, Result) ? TGuardedInt(Result) : TGuardedInt()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Other.Value == 0 || (std::is_signed_v<IntType> && Value == MinValue && Other.Value == -1))"
  },
  {
    "label": "TGuardedInt()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TGuardedInt(Value / Other.Value)"
  },
  {
    "label": "TGuardedInt()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TGuardedInt(Value % Other.Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Other.Value < 0 || Other.Value >= NumBits)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(std::is_signed_v<IntType>)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const int ShiftAmount = Other . Value ;)",
    "insertText": "return((MinValue >> ShiftAmount) <= Value && Value <= (MaxValue >> ShiftAmount)) ? TGuardedInt(Value << ShiftAmount) : TGuardedInt()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(static_cast<IntType>(Value << Other.Value) >> Other.Value) == Value ? TGuardedInt(static_cast<IntType>(Value << Other.Value)) : TGuardedInt()"
  },
  {
    "label": "TGuardedInt()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TGuardedInt(Value >> Other.Value)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} TGuardedInt)",
    "insertText": "Abs()"
  },
  {
    "label": "TGuardedInt()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "TGuardedInt(Value)"
  },
  {
    "label": "UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(OP) \\ \\ TGuardedInt operator OP(IntType InB)"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (} \\ TGuardedInt operator)",
    "insertText": "OP(IntType InA, TGuardedInt InB)"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (} \\ \\ TGuardedInt& operator)",
    "insertText": "OP(TGuardedInt InB)"
  },
  {
    "label": "UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(+) UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(-) UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(*) UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(/) UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(%) UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(<<) UE_GUARDED_SIGNED_INT_IMPL_BINARY_OPERATOR(>>)"
  }
]