[
  {
    "label": "FGeometrySet3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometrySet3"
  },
  {
    "label": "FNearest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNearest"
  },
  {
    "label": "FPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoint"
  },
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurve"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / ParallelFor . h \" # include \" BoxTypes . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Math / Ray . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Polyline3 . h \" # include \" Templates / Function . h \" # include \" Templates / Invoke . h \" namespace UE { namespace Geometry { class FGeometrySet3 { public : void)",
    "insertText": "Reset(bool bPoints = true, bool bCurves = true)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(int PointID, const FVector3d& Position)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurve(int CurveID, const FPolyline3d& Polyline)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoint(int PointID)"
  },
  {
    "label": "RemoveCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurve(int CurveID)"
  },
  {
    "label": "UpdatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePoint(int PointID, const FVector3d& Position)"
  },
  {
    "label": "UpdateCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurve(int CurveID, const FPolyline3d& Polyline)"
  },
  {
    "label": "FindNearestPointToRay()",
    "kind": "Method",
    "detail": "Function (struct FNearest { int ID ; bool bIsPoint ; FVector3d NearestRayPoint ; FVector3d NearestGeoPoint ; double RayParam ; int PolySegmentIdx ; double PolySegmentParam ; } ; bool)",
    "insertText": "FindNearestPointToRay(const FRay3d& Ray, FNearest& ResultOut, TFunction<bool(const FVector3d&, const FVector3d&)> PointWithinToleranceTest)"
  },
  {
    "label": "CollectPointsNearRay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectPointsNearRay(const FRay3d& Ray, TArray<FNearest>& ResultsOut, TFunction<bool(const FVector3d&, const FVector3d&)> PointWithinToleranceTest)"
  },
  {
    "label": "FindNearestCurveToRay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindNearestCurveToRay(const FRay3d& Ray, FNearest& ResultOut, TFunction<bool(const FVector3d&, const FVector3d&)> PointWithinToleranceTest)"
  },
  {
    "label": "CollectCurvesNearRay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectCurvesNearRay(const FRay3d& Ray, TArray<FNearest>& ResultsOut, TFunction<bool(const FVector3d&, const FVector3d&)> PointWithinToleranceTest)"
  },
  {
    "label": "FindAllPointsSatisfying()",
    "kind": "Method",
    "detail": "Function (template<PredicateType,IntContainerType> bool)",
    "insertText": "FindAllPointsSatisfying(PredicateType Predicate, IntContainerType& PointIDsOut)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PointIDsOut .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PointIDsOut .)",
    "insertText": "Add(Point.ID)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } return ! PointIDsOut .)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ParallelFindAllPointsSatisfying()",
    "kind": "Method",
    "detail": "Function (} template<PredicateType,IntContainerType> bool)",
    "insertText": "ParallelFindAllPointsSatisfying(PredicateType Predicate, IntContainerType& PointIDsOut)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<bool> Flags ; Flags .)",
    "insertText": "SetNumZeroed(Points.Num())"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Points.Num(), [this, &Predicate, &Flags](int32 i) { if (Invoke(Predicate, Points[i].Position)) { Flags[i] = true; } })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PointIDsOut .)",
    "insertText": "Add(Points[i].ID)"
  },
  {
    "label": "FindAllCurvesSatisfying()",
    "kind": "Method",
    "detail": "Function (} template<PredicateType,IntContainerType> bool)",
    "insertText": "FindAllCurvesSatisfying(PredicateType Predicate, IntContainerType& CurveIDsOut)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CurveIDsOut .)",
    "insertText": "Add(Curve.ID)"
  },
  {
    "label": "ParallelFindAllCurvesSatisfying()",
    "kind": "Method",
    "detail": "Function (} template<PredicateType,IntContainerType> bool)",
    "insertText": "ParallelFindAllCurvesSatisfying(PredicateType Predicate, IntContainerType& CurveIDsOut)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<bool> Flags ; Flags .)",
    "insertText": "SetNumZeroed(Curves.Num())"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Curves.Num(), [this, &Predicate, &Flags](int32 i) { if (Invoke(Predicate, Curves[i].Geometry)) { Flags[i] = true; } })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CurveIDsOut .)",
    "insertText": "Add(Curves[i].ID)"
  }
]