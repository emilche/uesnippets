[
  {
    "label": "VTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTask"
  },
  {
    "label": "VIntrinsics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VIntrinsics"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct VTask ; struct VIntrinsics : VHeapValue {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VHeapValue)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; TWriteBarrier<VNativeFunction> Abs ; TWriteBarrier<VNativeFunction> Ceil ; TWriteBarrier<VNativeFunction> Floor ; TWriteBarrier<VNativeFunction> ConcatenateMaps ; VIntrinsics&)",
    "insertText": "New(FAllocationContext Context)"
  },
  {
    "label": "AbsImpl()",
    "kind": "Method",
    "detail": "Function (} private : FNativeCallResult)",
    "insertText": "AbsImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "CeilImpl()",
    "kind": "Method",
    "detail": "Function (FNativeCallResult)",
    "insertText": "CeilImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "FloorImpl()",
    "kind": "Method",
    "detail": "Function (FNativeCallResult)",
    "insertText": "FloorImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "ConcatenateMapsImpl()",
    "kind": "Method",
    "detail": "Function (FNativeCallResult)",
    "insertText": "ConcatenateMapsImpl(FRunningContext Context, VValue Scope, VNativeFunction::Args Arguments)"
  },
  {
    "label": "VIntrinsics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VIntrinsics(FAllocationContext Context) : VHeapValue(Context, &GlobalTrivialEmergentType.Get(Context)) , Abs(Context, VNativeFunction::New(Context, 1, &AbsImpl, GlobalFalse())) , Ceil(Context, VNativeFunction::New(Context, 1, &CeilImpl, GlobalFalse())) , Floor(Context, VNativeFunction::New(Context, 1, &FloorImpl, GlobalFalse())) , ConcatenateMaps(Context, VNativeFunction::New(Context, 2, &ConcatenateMapsImpl, GlobalFalse()))"
  }
]