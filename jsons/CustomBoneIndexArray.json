[
  {
    "label": "TRangeIndexType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRangeIndexType"
  },
  {
    "label": "TIsCompatibleRangeIndexType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsCompatibleRangeIndexType"
  },
  {
    "label": "TTypedIndexRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypedIndexRange"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TTypedIndexRange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include<initializer_list> # include<type_traits> namespace UE::Anim { namespace Private { template<RangeType,= void> struct TRangeIndexType { using Type = void ; } ; template<RangeType> struct TRangeIndexType<RangeType,std::void_t<std::decay_t<RangeType>::IndexType>> { using Type = std::decay_t<RangeType>::IndexType ; } ; template<IndexType,RangeType> struct TIsCompatibleRangeIndexType { enum { Value = std::is_same_v<IndexType,TRangeIndexType<RangeType>::Type> | | std::is_void_v<TRangeIndexType<RangeType>::Type> } ; } ; } template<InIndexType,InRangeType> class TTypedIndexRange : public InRangeType { public : using BaseType = InRangeType ; using IndexType = InIndexType ; using ElementType = InRangeType::ElementType ; using SizeType = InRangeType::SizeType ;)",
    "insertText": "TTypedIndexRange()"
  },
  {
    "label": "TTypedIndexRange()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "TTypedIndexRange(T&& Other) : BaseType(Forward<T>(Other))"
  },
  {
    "label": "TTypedIndexRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTypedIndexRange(std::initializer_list<ElementType> List) : BaseType(List)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> TTypedIndexRange&)",
    "insertText": "operator(T&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(Forward<T>(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(List)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ElementType&)",
    "insertText": "operator(SizeType Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(const IndexType& Index)"
  }
]