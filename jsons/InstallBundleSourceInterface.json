[
  {
    "label": "IInstallBundleSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallBundleSource"
  },
  {
    "label": "IAnalyticsProviderET",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProviderET"
  },
  {
    "label": "FRequestUpdateContentBundleContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestUpdateContentBundleContext"
  },
  {
    "label": "FRequestReleaseContentBundleContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestReleaseContentBundleContext"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" InstallBundleTypes . h \" # include \" InstallBundleUtils . h \" class IInstallBundleSource ; class IAnalyticsProviderET ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundleSourceInitDelegate, TSharedRef<IInstallBundleSource> , FInstallBundleSourceAsyncInitInfo)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundleSourceQueryBundleInfoDelegate, TSharedRef<IInstallBundleSource> , FInstallBundleSourceBundleInfoQueryResult)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(EInstallBundleSourceUpdateBundleInfoResult, FInstallBundleSourceUpdateBundleInfoDelegate, TSharedRef<IInstallBundleSource> , FInstallBundleSourceUpdateBundleInfoResult)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundleLostRelevanceForSourceDelegate, TSharedRef<IInstallBundleSource> , TSet<FName>)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundleCompleteDelegate, TSharedRef<IInstallBundleSource> , FInstallBundleSourceUpdateContentResultInfo)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundlePausedDelegate, TSharedRef<IInstallBundleSource> , FInstallBundleSourcePauseInfo)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundleRemovedDelegate, TSharedRef<IInstallBundleSource> , FInstallBundleSourceReleaseContentResultInfo)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FInstallBundleSourceContentPatchResultDelegate, TSharedRef<IInstallBundleSource> , bool)"
  },
  {
    "label": "IInstallBundleSource()",
    "kind": "Method",
    "detail": "Function (class IInstallBundleSource : public TSharedFromThis<IInstallBundleSource> { public : ~)",
    "insertText": "IInstallBundleSource()"
  },
  {
    "label": "GetSourceType()",
    "kind": "Method",
    "detail": "Function (} FInstallBundleSourceType)",
    "insertText": "GetSourceType()"
  },
  {
    "label": "GetSourceWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSourceWeight()"
  },
  {
    "label": "AsyncInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncInit(FInstallBundleSourceInitDelegate Callback)"
  },
  {
    "label": "AsyncInit_QueryBundleInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncInit_QueryBundleInfo(FInstallBundleSourceQueryBundleInfoDelegate OnCompleteCallback)"
  },
  {
    "label": "AsyncInit_SetUpdateBundleInfoCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncInit_SetUpdateBundleInfoCallback(FInstallBundleSourceUpdateBundleInfoDelegate UpdateCallback, FInstallBundleLostRelevanceForSourceDelegate LostRelevanceCallback)"
  },
  {
    "label": "OnBundleInfoPruned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBundleInfoPruned(FName InBundleName)"
  },
  {
    "label": "GetInitState()",
    "kind": "Method",
    "detail": "Function (} EInstallBundleManagerInitState)",
    "insertText": "GetInitState()"
  },
  {
    "label": "GetContentVersion()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentVersion()"
  },
  {
    "label": "GetBundleDependencies()",
    "kind": "Method",
    "detail": "Function (TSet<FName>)",
    "insertText": "GetBundleDependencies(FName InBundleName, TSet<FName>* SkippedUnknownBundles = nullptr)"
  },
  {
    "label": "GetContentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContentState(TArrayView<const FName> BundleNames, EInstallBundleGetContentStateFlags Flags, FInstallBundleGetContentStateDelegate Callback)"
  },
  {
    "label": "GetBundleSkipReason()",
    "kind": "Method",
    "detail": "Function (EInstallBundleSourceBundleSkipReason)",
    "insertText": "GetBundleSkipReason(FName BundleName)"
  },
  {
    "label": "RequestReleaseContent()",
    "kind": "Method",
    "detail": "Function (struct FRequestReleaseContentBundleContext { FName BundleName ; EInstallBundleReleaseRequestFlags Flags = EInstallBundleReleaseRequestFlags::None ; ELogVerbosity::Type LogVerbosityOverride = ELogVerbosity::NoLogging ; FInstallBundleRemovedDelegate CompleteCallback ; } ; void)",
    "insertText": "RequestReleaseContent(FRequestReleaseContentBundleContext BundleContext)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FInstallBundleSourceReleaseContentResultInfo ResultInfo ; ResultInfo . BundleName = BundleContext . BundleName ; BundleContext . CompleteCallback .)",
    "insertText": "Execute(AsShared(), MoveTemp(ResultInfo))"
  },
  {
    "label": "RequestRemoveContentOnNextInit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequestRemoveContentOnNextInit(TArrayView<const FName> RemoveNames)"
  },
  {
    "label": "CancelBundles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CancelBundles(TArrayView<const FName> BundleNames, TArray<FName>& OutAdditionalBunldlesToCancel)"
  },
  {
    "label": "CancelBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBundles(BundleNames)"
  },
  {
    "label": "UserPauseBundles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UserPauseBundles(TArrayView<const FName> BundleNames)"
  },
  {
    "label": "UserResumeBundles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UserResumeBundles(TArrayView<const FName> BundleNames)"
  },
  {
    "label": "GetModifyableContentRequestFlags()",
    "kind": "Method",
    "detail": "Function (} EInstallBundleRequestFlags)",
    "insertText": "GetModifyableContentRequestFlags()"
  },
  {
    "label": "SetCellularPreference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCellularPreference(int32 Value)"
  },
  {
    "label": "GetBundleProgress()",
    "kind": "Method",
    "detail": "Function (} TOptional<FInstallBundleSourceProgress>)",
    "insertText": "GetBundleProgress(FName BundleName)"
  },
  {
    "label": "CheckForContentPatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckForContentPatch(FInstallBundleSourceContentPatchResultDelegate Callback)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Callback .)",
    "insertText": "Execute(AsShared(), false)"
  },
  {
    "label": "SetErrorSimulationCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetErrorSimulationCommands(const FString& CommandLine)"
  },
  {
    "label": "GetDebugText()",
    "kind": "Method",
    "detail": "Function (} # if ! UE_BUILD_SHIPPING void)",
    "insertText": "GetDebugText(TArray<FString>& Output)"
  }
]