[
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MessageDigest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageDigest"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "MessageDigestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageDigestFactory"
  },
  {
    "label": "IsFips180DigestAlgorithm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFips180DigestAlgorithm(absl::string_view alg)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeDigest(MessageDigest* digest,\n                     const void* input,\n                     size_t in_len,\n                     void* output,\n                     size_t out_len)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeDigest(absl::string_view alg,\n                     const void* input,\n                     size_t in_len,\n                     void* output,\n                     size_t out_len)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeDigest(MessageDigest* digest, absl::string_view input)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeDigest(absl::string_view alg, absl::string_view input)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(absl::string_view alg,\n                   absl::string_view input,\n                   std::string* output)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeDigest(DIGEST_MD5, input)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeHmac(MessageDigest* digest,\n                   const void* key,\n                   size_t key_len,\n                   const void* input,\n                   size_t in_len,\n                   void* output,\n                   size_t out_len)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeHmac(absl::string_view alg,\n                   const void* key,\n                   size_t key_len,\n                   const void* input,\n                   size_t in_len,\n                   void* output,\n                   size_t out_len)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeHmac(MessageDigest* digest,\n                        absl::string_view key,\n                        absl::string_view input)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeHmac(absl::string_view alg,\n                        absl::string_view key,\n                        absl::string_view input)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeHmac(absl::string_view alg,\n                 absl::string_view key,\n                 absl::string_view input,\n                 std::string* output)"
  }
]