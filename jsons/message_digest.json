[
  {
    "label": "MessageDigest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageDigest"
  },
  {
    "label": "MessageDigestFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageDigestFactory"
  },
  {
    "label": "MessageDigest()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_MESSAGE_DIGEST_H_ # define RTC_BASE_MESSAGE_DIGEST_H_ # include<stddef . h> # include<string> # include \" absl / strings / string_view . h \" namespace rtc { const char DIGEST_MD5 [ ] ; const char DIGEST_SHA_1 [ ] ; const char DIGEST_SHA_224 [ ] ; const char DIGEST_SHA_256 [ ] ; const char DIGEST_SHA_384 [ ] ; const char DIGEST_SHA_512 [ ] ; class MessageDigest { public : enum { kMaxSize = 6 4 } ; ~)",
    "insertText": "MessageDigest()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const void* buf, size_t len)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Finish(void* buf, size_t len)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class MessageDigestFactory { public : MessageDigest*)",
    "insertText": "Create(absl::string_view alg)"
  },
  {
    "label": "IsFips180DigestAlgorithm()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsFips180DigestAlgorithm(absl::string_view alg)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeDigest(MessageDigest* digest, const void* input, size_t in_len, void* output, size_t out_len)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeDigest(absl::string_view alg, const void* input, size_t in_len, void* output, size_t out_len)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeDigest(MessageDigest* digest, absl::string_view input)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeDigest(absl::string_view alg, absl::string_view input)"
  },
  {
    "label": "ComputeDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDigest(absl::string_view alg, absl::string_view input, std::string* output)"
  },
  {
    "label": "MD5()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "MD5(absl::string_view input)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "ComputeHmac(MessageDigest* digest, const void* key, size_t key_len, const void* input, size_t in_len, void* output, size_t out_len)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ComputeHmac(absl::string_view alg, const void* key, size_t key_len, const void* input, size_t in_len, void* output, size_t out_len)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeHmac(MessageDigest* digest, absl::string_view key, absl::string_view input)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ComputeHmac(absl::string_view alg, absl::string_view key, absl::string_view input)"
  },
  {
    "label": "ComputeHmac()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeHmac(absl::string_view alg, absl::string_view key, absl::string_view input, std::string* output)"
  }
]