[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "PoolSetup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PoolSetup"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ADDRESS_SPACE_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ADDRESS_SPACE_H_ # include<algorithm> # include<array> # include<cstddef> # include<limits> # include \" base / allocator / partition_allocator / address_pool_manager_types . h \" # include \" base / allocator / partition_allocator / page_allocator_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / bits . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_alloc_notreached . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (namespace internal { class)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (public : # if)",
    "insertText": "defined(PA_DYNAMICALLY_SELECT_POOL_SIZE) static PA_ALWAYS_INLINE uintptr_t RegularPoolBaseMask()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) PA_DCHECK(!IsInBRPPool(address))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif pool_handle pool = 0 ; uintptr_t base = 0 ;)",
    "insertText": "if(IsInRegularPool(address))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (pool = kRegularPoolHandle ; base = setup_ . regular_pool_base_address_ ; # if)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) } else if (IsInBRPPool(address))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pool = kBRPPoolHandle ; base = setup_ . brp_pool_base_address_ ; # endif } else)",
    "insertText": "if(IsInConfigurablePool(address))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(IsConfigurablePoolInitialized())"
  },
  {
    "label": "PA_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (pool = kConfigurablePoolHandle ; base = setup_ . configurable_pool_base_address_ ; } else {)",
    "insertText": "PA_NOTREACHED()"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "make_pair(pool, address - base)"
  },
  {
    "label": "ConfigurablePoolMaxSize()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE size_t)",
    "insertText": "ConfigurablePoolMaxSize()"
  },
  {
    "label": "InitConfigurablePool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConfigurablePool(uintptr_t pool_base, size_t size)"
  },
  {
    "label": "UninitForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitForTesting()"
  },
  {
    "label": "UninitConfigurablePoolForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitConfigurablePoolForTesting()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(setup_.brp_pool_base_address_ != kUninitializedPoolBaseAddress)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_DYNAMICALLY_SELECT_POOL_SIZE)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else uintptr_t regular_pool_base_mask = kRegularPoolBaseMask ; # endif)",
    "insertText": "return(address & regular_pool_base_mask)"
  },
  {
    "label": "RegularPoolBase()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "RegularPoolBase()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else uintptr_t brp_pool_base_mask = kBRPPoolBaseMask ; # endif)",
    "insertText": "return(address & brp_pool_base_mask)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(PA_GLUE_CORE_POOLS) static PA_ALWAYS_INLINE bool IsInCorePools(uintptr_t address)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (# else uintptr_t core_pools_base_mask = kRegularPoolBaseMask<<1 ; # endif bool)",
    "insertText": "ret(address & core_pools_base_mask)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(ret == (IsInRegularPool(address) || IsInBRPPool(address)))"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(IsInBRPPool(address))"
  },
  {
    "label": "ConfigurablePoolBase()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ConfigurablePoolBase()"
  },
  {
    "label": "PartitionAddressSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionAddressSpace(const PartitionAddressSpace&)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t, void*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "defined(PA_DYNAMICALLY_SELECT_POOL_SIZE) static PA_ALWAYS_INLINE size_t RegularPoolSize()"
  },
  {
    "label": "BRPPoolSize()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE size_t)",
    "insertText": "BRPPoolSize()"
  },
  {
    "label": "RegularPoolSize()",
    "kind": "Method",
    "detail": "Function (# else PA_ALWAYS_INLINE size_t)",
    "insertText": "RegularPoolSize()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (size_t kBRPPoolSizeForLegacyWindows = 4* kGiB ;)",
    "insertText": "static_assert(kRegularPoolSizeForLegacyWindows < kRegularPoolSize)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif size_t kConfigurablePoolMaxSize = kPoolMaxSize ; size_t kConfigurablePoolMinSize = 1* kGiB ;)",
    "insertText": "static_assert(kConfigurablePoolMinSize <= kConfigurablePoolMaxSize)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_IOS) #if !defined(PA_DYNAMICALLY_SELECT_POOL_SIZE)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (size_t kBRPPoolSizeForIOSTestProcess = kGiB / 4 ;)",
    "insertText": "static_assert(kRegularPoolSizeForIOSTestProcess < kRegularPoolSize)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if !)",
    "insertText": "defined(PA_DYNAMICALLY_SELECT_POOL_SIZE) static constexpr uintptr_t kRegularPoolOffsetMask = static_cast<uintptr_t>(kRegularPoolSize)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t kRegularPoolBaseMask = ~ kRegularPoolOffsetMask ; uintptr_t kBRPPoolOffsetMask = static_cast<)",
    "insertText": "uintptr_t(kBRPPoolSize)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t kBRPPoolBaseMask = ~ kBRPPoolOffsetMask ; # endif uintptr_t kUninitializedPoolBaseAddress = static_cast<)",
    "insertText": "uintptr_t(-1)"
  },
  {
    "label": "PoolSetup()",
    "kind": "Method",
    "detail": "Function (struct PoolSetup {)",
    "insertText": "PoolSetup() : regular_pool_base_address_(kUninitializedPoolBaseAddress), brp_pool_base_address_(kUninitializedPoolBaseAddress), configurable_pool_base_address_(kUninitializedPoolBaseAddress), #if defined(PA_DYNAMICALLY_SELECT_POOL_SIZE) regular_pool_base_mask_(0), brp_pool_base_mask_(0), #if defined(PA_GLUE_CORE_POOLS) core_pools_base_mask_(0), #endif #endif configurable_pool_base_mask_(0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (uintptr_t brp_pool_base_mask_ ; # if)",
    "insertText": "defined(PA_GLUE_CORE_POOLS)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif # endif uintptr_t configurable_pool_base_mask_ ; } ; char one_cacheline_ [ kPartitionCachelineSize ] ; } ; } ;)",
    "insertText": "static_assert(sizeof(PoolSetup) % kPartitionCachelineSize == 0, \"PoolSetup has to fill a cacheline(s)\")"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(kPartitionCachelineSize)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_ENABLE_SHADOW_METADATA)"
  },
  {
    "label": "GetPoolAndOffset()",
    "kind": "Method",
    "detail": "Function (std::ptrdiff_t brp_pool_shadow_offset_ ; # endif } ; PA_ALWAYS_INLINE std::pair<pool_handle,uintptr_t>)",
    "insertText": "GetPoolAndOffset(uintptr_t address)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE pool_handle)",
    "insertText": "GetPool(uintptr_t address)"
  },
  {
    "label": "OffsetInBRPPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "OffsetInBRPPool(uintptr_t address)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(PA_ENABLE_SHADOW_METADATA) PA_ALWAYS_INLINE std::ptrdiff_t ShadowPoolOffset(pool_handle pool)"
  },
  {
    "label": "IsManagedByPartitionAlloc()",
    "kind": "Method",
    "detail": "Function (} # endif } PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAlloc(uintptr_t address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) PA_DCHECK(!internal::PartitionAddressSpace::IsInBRPPool(address))"
  },
  {
    "label": "IsInRegularPool()",
    "kind": "Method",
    "detail": "Function (# endif return internal::)",
    "insertText": "IsInRegularPool(address) #if BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) || internal::PartitionAddressSpace::IsInBRPPool(address) #endif || internal::PartitionAddressSpace::IsInConfigurablePool(address)"
  },
  {
    "label": "IsManagedByPartitionAllocRegularPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAllocRegularPool(uintptr_t address)"
  },
  {
    "label": "IsManagedByPartitionAllocBRPPool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAllocBRPPool(uintptr_t address)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(PA_GLUE_CORE_POOLS) PA_ALWAYS_INLINE bool IsManagedByPartitionAllocCorePools(uintptr_t address)"
  },
  {
    "label": "IsManagedByPartitionAllocConfigurablePool()",
    "kind": "Method",
    "detail": "Function (} # endif PA_ALWAYS_INLINE bool)",
    "insertText": "IsManagedByPartitionAllocConfigurablePool(uintptr_t address)"
  },
  {
    "label": "IsConfigurablePoolAvailable()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsConfigurablePoolAvailable()"
  }
]