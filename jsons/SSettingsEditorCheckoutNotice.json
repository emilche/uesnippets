[
  {
    "label": "SHAREDSETTINGSWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHAREDSETTINGSWIDGETS_API"
  },
  {
    "label": "IsSourceControlled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" namespace SettingsHelpers { bool)",
    "insertText": "IsSourceControlled(const FString& InFileToCheckOut, bool bForceSourceControlUpdate = false)"
  },
  {
    "label": "IsCheckedOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCheckedOut(const FString& InFileToCheckOut, bool bForceSourceControlUpdate = false)"
  },
  {
    "label": "CheckOutOrAddFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckOutOrAddFile(const FString& InFileToCheckOut, bool bForceSourceControlUpdate = false, bool ShowErrorInNotification = true, FText* OutErrorMessage = nullptr)"
  },
  {
    "label": "MakeWritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeWritable(const FString& InFileToMakeWritable, bool ShowErrorInNotification = true, FText* OutErrorMessage = nullptr)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} class SSettingsEditorCheckoutNotice : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSettingsEditorCheckoutNotice)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FString, ConfigFilePath) SLATE_EVENT(FSimpleDelegate, OnFileProbablyModifiedExternally) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "IsUnlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnlocked()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "HandleCheckOutButtonClicked()",
    "kind": "Method",
    "detail": "Function (LastDefaultConfigCheckOutTime = 0 . f ; } private : FReply)",
    "insertText": "HandleCheckOutButtonClicked()"
  },
  {
    "label": "HandleCheckOutButtonText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleCheckOutButtonText()"
  },
  {
    "label": "HandleCheckOutButtonToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleCheckOutButtonToolTip()"
  },
  {
    "label": "HandleCheckOutButtonVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleCheckOutButtonVisibility()"
  },
  {
    "label": "HandleNoticeSwitcherWidgetIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HandleNoticeSwitcherWidgetIndex()"
  },
  {
    "label": "HandleLockedStatusText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleLockedStatusText()"
  },
  {
    "label": "HandleUnlockedStatusText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleUnlockedStatusText()"
  },
  {
    "label": "HandleThrobberVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleThrobberVisibility()"
  },
  {
    "label": "GetLockedStatusTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLockedStatusTextColor()"
  }
]