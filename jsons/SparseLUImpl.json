[
  {
    "label": "SparseLUImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseLUImpl"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SparseLUImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseLUImpl"
  },
  {
    "label": "column_dfs_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "column_dfs_traits"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "expand(VectorType& vec, Index& length, Index nbElts, Index keep_prev, Index& num_expansions)"
  },
  {
    "label": "memInit()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "memInit(Index m, Index n, Index annz, Index lwork, Index fillratio, Index panel_size,  GlobalLU_t& glu)"
  },
  {
    "label": "memXpand()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "memXpand(VectorType& vec, Index& maxlen, Index nbElts, MemType memtype, Index& num_expansions)"
  },
  {
    "label": "heap_relax_snode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "heap_relax_snode(const Index n, IndexVector& et, const Index relax_columns, IndexVector& descendants, IndexVector& relax_end)"
  },
  {
    "label": "relax_snode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "relax_snode(const Index n, IndexVector& et, const Index relax_columns, IndexVector& descendants, IndexVector& relax_end)"
  },
  {
    "label": "snode_dfs()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "snode_dfs(const Index jcol, const Index kcol,const MatrixType& mat,  IndexVector& xprune, IndexVector& marker, GlobalLU_t& glu)"
  },
  {
    "label": "snode_bmod()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "snode_bmod(const Index jcol, const Index fsupc, ScalarVector& dense, GlobalLU_t& glu)"
  },
  {
    "label": "pivotL()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "pivotL(const Index jcol, const RealScalar& diagpivotthresh, IndexVector& perm_r, IndexVector& iperm_c, Index& pivrow, GlobalLU_t& glu)"
  },
  {
    "label": "dfs_kernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dfs_kernel(const StorageIndex jj, IndexVector& perm_r,\n                    Index& nseg, IndexVector& panel_lsub, IndexVector& segrep,\n                    Ref<IndexVector> repfnz_col, IndexVector& xprune, Ref<IndexVector> marker, IndexVector& parent,\n                    IndexVector& xplore, GlobalLU_t& glu, Index& nextl_col, Index krow, Traits& traits)"
  },
  {
    "label": "panel_dfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "panel_dfs(const Index m, const Index w, const Index jcol, MatrixType& A, IndexVector& perm_r, Index& nseg, ScalarVector& dense, IndexVector& panel_lsub, IndexVector& segrep, IndexVector& repfnz, IndexVector& xprune, IndexVector& marker, IndexVector& parent, IndexVector& xplore, GlobalLU_t& glu)"
  },
  {
    "label": "panel_bmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "panel_bmod(const Index m, const Index w, const Index jcol, const Index nseg, ScalarVector& dense, ScalarVector& tempv, IndexVector& segrep, IndexVector& repfnz, GlobalLU_t& glu)"
  },
  {
    "label": "column_dfs()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "column_dfs(const Index m, const Index jcol, IndexVector& perm_r, Index maxsuper, Index& nseg,  BlockIndexVector lsub_col, IndexVector& segrep, BlockIndexVector repfnz, IndexVector& xprune, IndexVector& marker, IndexVector& parent, IndexVector& xplore, GlobalLU_t& glu)"
  },
  {
    "label": "column_bmod()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "column_bmod(const Index jcol, const Index nseg, BlockScalarVector dense, ScalarVector& tempv, BlockIndexVector segrep, BlockIndexVector repfnz, Index fpanelc, GlobalLU_t& glu)"
  },
  {
    "label": "copy_to_ucol()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "copy_to_ucol(const Index jcol, const Index nseg, IndexVector& segrep, BlockIndexVector repfnz ,IndexVector& perm_r, BlockScalarVector dense, GlobalLU_t& glu)"
  },
  {
    "label": "pruneL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneL(const Index jcol, const IndexVector& perm_r, const Index pivrow, const Index nseg, const IndexVector& segrep, BlockIndexVector repfnz, IndexVector& xprune, GlobalLU_t& glu)"
  },
  {
    "label": "countnz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "countnz(const Index n, Index& nnzL, Index& nnzU, GlobalLU_t& glu)"
  },
  {
    "label": "fixupL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fixupL(const Index n, const IndexVector& perm_r, GlobalLU_t& glu)"
  }
]