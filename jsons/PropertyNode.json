[
  {
    "label": "FCategoryPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCategoryPropertyNode"
  },
  {
    "label": "FComplexPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComplexPropertyNode"
  },
  {
    "label": "FDetailTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailTreeNode"
  },
  {
    "label": "FEditConditionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditConditionContext"
  },
  {
    "label": "FEditConditionExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditConditionExpression"
  },
  {
    "label": "FItemPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FItemPropertyNode"
  },
  {
    "label": "FNotifyHook",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNotifyHook"
  },
  {
    "label": "FObjectPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPropertyNode"
  },
  {
    "label": "FPropertyItemValueDataTrackerSlate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyItemValueDataTrackerSlate"
  },
  {
    "label": "FPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyNode"
  },
  {
    "label": "FPropertyRestriction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyRestriction"
  },
  {
    "label": "FStructurePropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructurePropertyNode"
  },
  {
    "label": "IEditConstPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditConstPolicy"
  },
  {
    "label": "IArchetypePolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IArchetypePolicy"
  },
  {
    "label": "FPropertySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertySettings"
  },
  {
    "label": "FAddressPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddressPair"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FReadAddressListData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadAddressListData"
  },
  {
    "label": "FReadAddressList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadAddressList"
  },
  {
    "label": "FPropertyNodeInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyNodeInitParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EPropertyArrayChangeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EPropertyArrayChangeType"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "EPropertyDataValidationResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPropertyDataValidationResult"
  },
  {
    "label": "FPropertyNodeEditStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyNodeEditStack"
  },
  {
    "label": "FMemoryFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryFrame"
  },
  {
    "label": "EPropertyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPropertyType"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" UObject / UnrealType . h \" # include \" PropertyPath . h \" # include \" PropertyEditorModule . h \" # include \" EditConditionParser . h \" class FCategoryPropertyNode ; class FComplexPropertyNode ; class FDetailTreeNode ; class FEditConditionContext ; class FEditConditionExpression ; class FItemPropertyNode ; class FNotifyHook ; class FObjectPropertyNode ; class FPropertyItemValueDataTrackerSlate ; class FPropertyNode ; class FPropertyRestriction ; class FStructurePropertyNode ; namespace PropertyEditorPolicy { class IEditConstPolicy ; class IArchetypePolicy ; })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPropertyNode, Log, All)"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (namespace EPropertyNodeFlags { typedef uint32 Type ; const Type IsSeen = 1<<0 ; const Type IsSeenDueToFiltering = 1<<1 ; const Type IsSeenDueToChildFiltering = 1<<2 ; const Type IsParentSeenDueToFiltering = 1<<3 ; const Type IsSeenDueToChildFavorite = 1<<4 ; const Type Expanded = 1<<5 ; const Type CanBeExpanded = 1<<6 ; const Type EditInlineNew = 1<<7 ; const Type SingleSelectOnly = 1<<8 ; const Type ShowCategories = 1<<9 ; const Type HasEverBeenExpanded = 1<<1 0 ; const Type IsBeingFiltered = 1<<1 1 ; const Type IsFavorite = 1<<1 2 ; const Type NoChildrenDueToCircularReference = 1<<1 3 ; const Type AutoExpanded = 1<<1 4 ; const Type ShouldShowHiddenProperties = 1<<1 5 ; const Type IsAdvanced = 1<<1 6 ; const Type IsCustomized = 1<<1 7 ; const Type RequiresValidation = 1<<1 8 ; const Type ShouldShowDisableEditOnInstance = 1<<1 9 ; const Type IsReadOnly = 1<<2 0 ; const Type SkipChildValidation = 1<<2 1 ; const Type ShowInnerObjectProperties = 1<<2 2 ; const Type HasCustomResetToDefault = 1<<2 3 ; const Type IsSparseClassData = 1<<2 4 ; const Type ShouldShowInViewport = 1<<2 5 ; const Type NoFlags = 0 ; } ; namespace FPropertyNodeConstants { const int32 NoDepthRestrictions = - 1 ; const TCHAR CategoryDelimiterChar =)",
    "insertText": "TCHAR('|')"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class FPropertySettings { public : FPropertySettings&)",
    "insertText": "Get()"
  },
  {
    "label": "ShowFriendlyPropertyNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowFriendlyPropertyNames()"
  },
  {
    "label": "FAddressPair()",
    "kind": "Method",
    "detail": "Function (private : bool bShowFriendlyPropertyNames ; bool bExpandDistributions ; bool bShowHiddenProperties ; } ; struct FAddressPair {)",
    "insertText": "FAddressPair(const UObject* InObject, uint8* Address, bool bInIsStruct) : Object( InObject) , ReadAddress( Address ) , bIsStruct(bInIsStruct)"
  },
  {
    "label": "FReadAddressListData()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<const UObject> Object ; uint8* ReadAddress ; bool bIsStruct ; } ; template<> struct TIsPODType<FAddressPair> { enum { Value = true } ; } ; struct FReadAddressListData { public :)",
    "insertText": "FReadAddressListData() : bAllValuesTheSame( false ) , bRequiresCache( true)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const UObject* Object, uint8* Address, bool bIsStruct = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReadAddresses .)",
    "insertText": "Add(FAddressPair(Object, Address, bIsStruct))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetAddress(int32 Index)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FAddressPair& Pair = ReadAddresses [ Index ] ;)",
    "insertText": "return(Pair.Object.IsValid() || Pair.bIsStruct)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} const UObject*)",
    "insertText": "GetObject(int32 Index)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FReadAddressList()",
    "kind": "Method",
    "detail": "Function (bAllValuesTheSame = false ; bRequiresCache = true ; } bool bAllValuesTheSame ; bool bRequiresCache ; private : TArray<FAddressPair> ReadAddresses ; } ; class FReadAddressList { class FPropertyNode ; public :)",
    "insertText": "FReadAddressList() : ReadAddressListData(nullptr)"
  },
  {
    "label": "FPropertyNodeInitParams()",
    "kind": "Method",
    "detail": "Function (} } private : FReadAddressListData* ReadAddressListData ; } ; struct FPropertyNodeInitParams { enum class EIsSparseDataProperty : uint8 { False,True,Inherit,} ; TSharedPtr<FPropertyNode> ParentNode ; FProperty* Property ; int32 ArrayOffset ; int32 ArrayIndex ; bool bAllowChildren ; bool bForceHiddenPropertyVisibility ; bool bCreateCategoryNodes ; bool bCreateDisableEditOnInstanceNodes ; EIsSparseDataProperty IsSparseProperty ;)",
    "insertText": "FPropertyNodeInitParams() : ParentNode(nullptr) , Property(nullptr) , ArrayOffset(0) , ArrayIndex( INDEX_NONE ) , bAllowChildren( true ) , bForceHiddenPropertyVisibility( false ) , bCreateCategoryNodes( true ) , bCreateDisableEditOnInstanceNodes( true ) , IsSparseProperty( EIsSparseDataProperty::Inherit)"
  },
  {
    "label": "FMemoryFrame()",
    "kind": "Method",
    "detail": "Function (} } ; struct EPropertyArrayChangeType { enum Type { Add,Clear,Insert,Delete,Duplicate,Swap,} ; } ; enum EPropertyDataValidationResult : uint8 { ObjectInvalid,PropertiesChanged,EditInlineNewValueChanged,ArraySizeChanged,ChildrenRebuilt,DataValid,} ; class FPropertyNodeEditStack { struct FMemoryFrame {)",
    "insertText": "FMemoryFrame()"
  },
  {
    "label": "FMemoryFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemoryFrame(const FProperty* InProperty, uint8* InMemory) : Property(InProperty) , Memory(InMemory)"
  },
  {
    "label": "FPropertyNodeEditStack()",
    "kind": "Method",
    "detail": "Function (} const FProperty* Property = nullptr ; uint8* Memory = nullptr ; } ; public :)",
    "insertText": "FPropertyNodeEditStack(const FPropertyNode* InNode, const UObject* InObj = nullptr)"
  },
  {
    "label": "FPropertyNodeEditStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyNodeEditStack()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPropertyNodeEditStack&)",
    "insertText": "operator(const FPropertyNodeEditStack& Other)"
  },
  {
    "label": "FPropertyNodeEditStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyNodeEditStack(const FPropertyNodeEditStack& Other)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "Initialize(const FPropertyNode* InNode, const UObject* InObj)"
  },
  {
    "label": "GetDirectPropertyAddress()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetDirectPropertyAddress()"
  },
  {
    "label": "CommitChanges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CommitChanges()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (} private : FPropertyAccess::Result)",
    "insertText": "InitializeInternal(const FPropertyNode* InNode, const UObject* InObj)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "FPropertyNode()",
    "kind": "Method",
    "detail": "Function (TArray<FMemoryFrame> MemoryStack ; } ; class FPropertyNode : public TSharedFromThis<FPropertyNode> { public :)",
    "insertText": "FPropertyNode()"
  },
  {
    "label": "InitNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNode(const FPropertyNodeInitParams& InitParams)"
  },
  {
    "label": "RequestRebuildChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRebuildChildren()"
  },
  {
    "label": "RebuildChildren()",
    "kind": "Method",
    "detail": "Function (bRebuildChildrenRequested = true ; } void)",
    "insertText": "RebuildChildren()"
  },
  {
    "label": "MarkChildrenAsRebuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkChildrenAsRebuilt()"
  },
  {
    "label": "AddChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChildNode(TSharedPtr<FPropertyNode> InNode)"
  },
  {
    "label": "ClearCachedReadAddresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedReadAddresses(bool bRecursive = true)"
  },
  {
    "label": "AsObjectNode()",
    "kind": "Method",
    "detail": "Function (FObjectPropertyNode*)",
    "insertText": "AsObjectNode()"
  },
  {
    "label": "FindComplexParent()",
    "kind": "Method",
    "detail": "Function (const FComplexPropertyNode*)",
    "insertText": "FindComplexParent()"
  },
  {
    "label": "FindObjectItemParent()",
    "kind": "Method",
    "detail": "Function (FObjectPropertyNode*)",
    "insertText": "FindObjectItemParent()"
  },
  {
    "label": "FindStructureItemParent()",
    "kind": "Method",
    "detail": "Function (FStructurePropertyNode*)",
    "insertText": "FindStructureItemParent()"
  },
  {
    "label": "FindRootObjectItemParent()",
    "kind": "Method",
    "detail": "Function (FObjectPropertyNode*)",
    "insertText": "FindRootObjectItemParent()"
  },
  {
    "label": "EnsureDataIsValid()",
    "kind": "Method",
    "detail": "Function (EPropertyDataValidationResult)",
    "insertText": "EnsureDataIsValid()"
  },
  {
    "label": "GetPropertyValueString()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "GetPropertyValueString(FString& OutString, const bool bAllowAlternateDisplayValue, EPropertyPortFlags PortFlags = PPF_PropertyWindow)"
  },
  {
    "label": "GetPropertyValueText()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "GetPropertyValueText(FText& OutText, const bool bAllowAlternateDisplayValue)"
  },
  {
    "label": "HasNodeFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNodeFlags(const EPropertyNodeFlags::Type InTestFlags)"
  },
  {
    "label": "SetNodeFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNodeFlags(const EPropertyNodeFlags::Type InFlags, const bool InOnOff)"
  },
  {
    "label": "FindChildPropertyNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyNode>)",
    "insertText": "FindChildPropertyNode(const FName InPropertyName, bool bRecurse = false)"
  },
  {
    "label": "GetParentNode()",
    "kind": "Method",
    "detail": "Function (FPropertyNode*)",
    "insertText": "GetParentNode()"
  },
  {
    "label": "GetParentNodeSharedPtr()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FPropertyNode>)",
    "insertText": "GetParentNodeSharedPtr()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} FProperty*)",
    "insertText": "GetProperty()"
  },
  {
    "label": "GetArrayOffset()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetArrayOffset()"
  },
  {
    "label": "GetChildNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FPropertyNode>&)",
    "insertText": "GetChildNode(const int32 ChildIndex)"
  },
  {
    "label": "GetChildNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChildNode(const int32 ChildArrayIndex, TSharedPtr<FPropertyNode>& OutChildNode)"
  },
  {
    "label": "IsPropertyConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyConst()"
  },
  {
    "label": "IsEditConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditConst(const bool bIncludeEditCondition = true)"
  },
  {
    "label": "ShouldSkipSerialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipSerialization()"
  },
  {
    "label": "GetQualifiedName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetQualifiedName(FString& PathPlusIndex, const bool bWithArrayIndex, const FPropertyNode* StopParent = nullptr, bool bIgnoreCategories = false)"
  },
  {
    "label": "GetReadAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadAddress(bool InRequiresSingleSelection, FReadAddressList& OutAddresses, bool bComparePropertyContents = true, bool bObjectForceCompare = false, bool bArrayPropertiesCanDifferInSize = false)"
  },
  {
    "label": "GetReadAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadAddress(FReadAddressList& OutAddresses)"
  },
  {
    "label": "GetSingleReadAddress()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "GetSingleReadAddress(uint8*& OutValueAddress)"
  },
  {
    "label": "GetSingleObject()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "GetSingleObject(UObject*& OutObject)"
  },
  {
    "label": "GetSingleEditStack()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "GetSingleEditStack(FPropertyNodeEditStack& OutStack)"
  },
  {
    "label": "GetReadAddressUncached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadAddressUncached(const FPropertyNode& InNode, bool InRequiresSingleSelection, FReadAddressListData* OutAddresses, bool bComparePropertyContents = true, bool bObjectForceCompare = false, bool bArrayPropertiesCanDifferInSize = false)"
  },
  {
    "label": "GetReadAddressUncached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadAddressUncached(const FPropertyNode& InNode, FReadAddressListData& OutAddresses)"
  },
  {
    "label": "GetValueBaseAddress()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValueBaseAddress(uint8* StartAddress, bool bIsSparseData, bool bIsStruct = false)"
  },
  {
    "label": "GetValueAddress()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValueAddress(uint8* StartAddress, bool bIsSparseData, bool bIsStruct = false)"
  },
  {
    "label": "GetStartAddressFromObject()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetStartAddressFromObject(const UObject* Obj)"
  },
  {
    "label": "GetValueBaseAddressFromObject()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValueBaseAddressFromObject(const UObject* Obj)"
  },
  {
    "label": "GetValueAddressFromObject()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValueAddressFromObject(const UObject* Obj)"
  },
  {
    "label": "SetDisplayNameOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayNameOverride(const FText& InDisplayNameOverride)"
  },
  {
    "label": "SetFavorite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFavorite(bool FavoriteValue)"
  },
  {
    "label": "IsFavorite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFavorite()"
  },
  {
    "label": "SetToolTipOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetToolTipOverride(const FText& InToolTipOverride)"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetDiffersFromDefault()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDiffersFromDefault()"
  },
  {
    "label": "GetResetToDefaultLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetResetToDefaultLabel()"
  },
  {
    "label": "IsReorderable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReorderable()"
  },
  {
    "label": "IsChildOfFavorite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildOfFavorite()"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChange(FProperty* PropertyAboutToChange, FNotifyHook* InNotifyHook)"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChange(FProperty* PropertyAboutToChange, FNotifyHook* InNotifyHook, const TSet<UObject*>& AffectedInstances)"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChange(FProperty* PropertyAboutToChange, FNotifyHook* InNotifyHook, TSet<UObject*>&& AffectedInstances)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(FPropertyChangedEvent& InPropertyChangedEvent, FNotifyHook* InNotifyHook)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FPropertyNode, FPropertyChildrenRebuiltEvent)"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "SetOnRebuildChildren(const FSimpleDelegate& InOnRebuildChildren)"
  },
  {
    "label": "OnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (FPropertyChildrenRebuiltEvent&)",
    "insertText": "OnRebuildChildren()"
  },
  {
    "label": "PropagateContainerPropertyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateContainerPropertyChange(UObject* ModifiedObject, const void* OriginalContainerAddr, EPropertyArrayChangeType::Type ChangeType, int32 Index, int32 SwapIndex = INDEX_NONE)"
  },
  {
    "label": "DuplicateArrayEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateArrayEntry(FProperty* NodeProperty, FScriptArrayHelper& ArrayHelper, int32 Index)"
  },
  {
    "label": "GatherInstancesAffectedByContainerPropertyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherInstancesAffectedByContainerPropertyChange(UObject* ModifiedObject, const void* OriginalContainerAddr, EPropertyArrayChangeType::Type ChangeType, TArray<UObject*>& OutAffectedInstances)"
  },
  {
    "label": "PropagateContainerPropertyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateContainerPropertyChange(UObject* ModifiedObject, const void* OriginalContainerAddr, const TArray<UObject*>& AffectedInstances, EPropertyArrayChangeType::Type ChangeType, int32 Index, int32 SwapIndex = INDEX_NONE)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FPropertyNode, FPropertyValueChangedEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPropertyValueChangedWithData, const FPropertyChangedEvent&) FPropertyValueChangedEvent& OnPropertyValueChanged()"
  },
  {
    "label": "OnPropertyValuePreChange()",
    "kind": "Method",
    "detail": "Function (FPropertyValuePreChangeEvent&)",
    "insertText": "OnPropertyValuePreChange()"
  },
  {
    "label": "OnPropertyResetToDefault()",
    "kind": "Method",
    "detail": "Function (FPropertyResetToDefaultEvent&)",
    "insertText": "OnPropertyResetToDefault()"
  },
  {
    "label": "ProcessSeenFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSeenFlags(const bool bParentAllowsVisible)"
  },
  {
    "label": "ProcessSeenFlagsForFavorites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSeenFlagsForFavorites()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "CreatePropertyPath()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<FPropertyPath>)",
    "insertText": "CreatePropertyPath(const TSharedRef< FPropertyNode >& PropertyNode)"
  },
  {
    "label": "FPropertyPath()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FPropertyPath> NewPath = MakeShared<)",
    "insertText": "FPropertyPath()"
  },
  {
    "label": "GetArrayIndex()",
    "kind": "Method",
    "detail": "Function (} NewPropInfo . ArrayIndex = CurrentNode ->)",
    "insertText": "GetArrayIndex()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Properties .)",
    "insertText": "Add(NewPropInfo)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (NewPath ->)",
    "insertText": "AddProperty(Properties[PropertyIndex])"
  },
  {
    "label": "FindPropertyNodeByPath()",
    "kind": "Method",
    "detail": "Function (} return NewPath ; } TSharedPtr<FPropertyNode>)",
    "insertText": "FindPropertyNodeByPath(const TSharedPtr< FPropertyPath > Path, const TSharedRef< FPropertyNode >& StartingNode)"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (FailedToFindProperty = true ; const FPropertyInfo& PropInfo = Path ->)",
    "insertText": "GetPropertyInfo(PropertyIndex)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FPropertyNode>> ChildrenStack ; ChildrenStack .)",
    "insertText": "Push(PropertyNode.ToSharedRef())"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FPropertyNode> CurrentNode = ChildrenStack .)",
    "insertText": "Pop()"
  },
  {
    "label": "GetChildNode()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FPropertyNode> ChildNode = CurrentNode ->)",
    "insertText": "GetChildNode(ChildIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChildrenStack .)",
    "insertText": "Add(ChildNode.ToSharedRef())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ChildNode.IsValid() && ChildNode->GetProperty() == PropInfo.Property.Get() && ChildNode->GetArrayIndex() == PropInfo.ArrayIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PropertyNode = ChildNode ; FailedToFindProperty = false ; break ; } } } })",
    "insertText": "if(FailedToFindProperty)"
  },
  {
    "label": "GetPossibleExtensionsForPath()",
    "kind": "Method",
    "detail": "Function (PropertyNode = nullptr ; } return PropertyNode ; } TArray<FPropertyInfo>)",
    "insertText": "GetPossibleExtensionsForPath(const TSharedPtr< FPropertyPath > Path, const TSharedRef< FPropertyNode >& StartingNode)"
  },
  {
    "label": "FindPropertyNodeByPath()",
    "kind": "Method",
    "detail": "Function (TArray<FPropertyInfo> PossibleExtensions ; TSharedPtr<FPropertyNode> PropertyNode =)",
    "insertText": "FindPropertyNodeByPath(Path, StartingNode)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool AlreadyExists = false ;)",
    "insertText": "for(auto ExtensionIter = PossibleExtensions.CreateConstIterator(); ExtensionIter; ++ExtensionIter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AlreadyExists = true ; break ; } })",
    "insertText": "if(!AlreadyExists)"
  },
  {
    "label": "GetArchetype()",
    "kind": "Method",
    "detail": "Function (} } } return PossibleExtensions ; } UObject*)",
    "insertText": "GetArchetype(const UObject* Object)"
  },
  {
    "label": "RegisterArchetypePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterArchetypePolicy(PropertyEditorPolicy::IArchetypePolicy* ArchetypePolicy)"
  },
  {
    "label": "UnregisterArchetypePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterArchetypePolicy(PropertyEditorPolicy::IArchetypePolicy* ArchetypePolicy)"
  },
  {
    "label": "RegisterEditConstPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEditConstPolicy(PropertyEditorPolicy::IEditConstPolicy* EditConstPolicy)"
  },
  {
    "label": "UnregisterEditConstPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterEditConstPolicy(PropertyEditorPolicy::IEditConstPolicy* EditConstPolicy)"
  },
  {
    "label": "IsPropertyEditConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyEditConst(const FEditPropertyChain& PropertyChain, UObject* Object)"
  },
  {
    "label": "IsPropertyEditConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyEditConst(const FProperty* Property, UObject* Object)"
  },
  {
    "label": "AddRestriction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRestriction(TSharedRef<const FPropertyRestriction> Restriction)"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHidden(const FString& Value)"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDisabled(const FString& Value)"
  },
  {
    "label": "IsRestricted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRestricted(const FString& Value)"
  },
  {
    "label": "IsHidden()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHidden(const FString& Value, TArray<FText>* OutReasons)"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisabled(const FString& Value, TArray<FText>* OutReasons)"
  },
  {
    "label": "IsRestricted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRestricted(const FString& Value, TArray<FText>& OutReasons)"
  },
  {
    "label": "GenerateRestrictionToolTip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateRestrictionToolTip(const FString& Value, FText& OutTooltip)"
  },
  {
    "label": "GetRestrictions()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<const FPropertyRestriction>>&)",
    "insertText": "GetRestrictions()"
  },
  {
    "label": "SetInstanceMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceMetaData(const FName& Key, const FString& Value)"
  },
  {
    "label": "GetInstanceMetaData()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "GetInstanceMetaData(const FName& Key)"
  },
  {
    "label": "GetInstanceMetaDataMap()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,FString>*)",
    "insertText": "GetInstanceMetaDataMap()"
  },
  {
    "label": "ParentOrSelfHasMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParentOrSelfHasMetaData(const FName& MetaDataKey)"
  },
  {
    "label": "InvalidateCachedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCachedState()"
  },
  {
    "label": "SetupKeyValueNodePair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupKeyValueNodePair(TSharedPtr<FPropertyNode>& KeyNode, TSharedPtr<FPropertyNode>& ValueNode)"
  },
  {
    "label": "GetPropertyKeyNode()",
    "kind": "Method",
    "detail": "Function (ValueNode -> PropertyKeyNode = KeyNode ; } TSharedPtr<FPropertyNode>&)",
    "insertText": "GetPropertyKeyNode()"
  },
  {
    "label": "BroadcastPropertyResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPropertyResetToDefault()"
  },
  {
    "label": "SupportsEditConditionToggle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEditConditionToggle()"
  },
  {
    "label": "ToggleEditConditionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleEditConditionState()"
  },
  {
    "label": "HasEditCondition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEditCondition()"
  },
  {
    "label": "IsEditConditionMet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditConditionMet()"
  },
  {
    "label": "IsOnlyVisibleWhenEditConditionMet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnlyVisibleWhenEditConditionMet()"
  },
  {
    "label": "GetExpandedChildPropertyPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExpandedChildPropertyPaths(TSet<FString>& OutExpandedChildPropertyPaths)"
  },
  {
    "label": "SetExpandedChildPropertyNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpandedChildPropertyNodes(const TSet<FString>& InNodesToExpand)"
  },
  {
    "label": "GetPropertyPath()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetPropertyPath()"
  },
  {
    "label": "IsIgnoringInstancedReference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIgnoringInstancedReference()"
  },
  {
    "label": "IsDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDestroyed()"
  },
  {
    "label": "MarkDestroyedRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDestroyedRecursive()"
  },
  {
    "label": "GetOptionalValueNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyNode>&)",
    "insertText": "GetOptionalValueNode()"
  },
  {
    "label": "BuildPropertyChain()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FEditPropertyChain>)",
    "insertText": "BuildPropertyChain(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "BuildPropertyChain()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FEditPropertyChain>)",
    "insertText": "BuildPropertyChain(FProperty* PropertyAboutToChange, const TSet<UObject*>& InAffectedArchetypeInstances)"
  },
  {
    "label": "BuildPropertyChain()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FEditPropertyChain>)",
    "insertText": "BuildPropertyChain(FProperty* PropertyAboutToChange, TSet<UObject*>&& InAffectedArchetypeInstances)"
  },
  {
    "label": "NotifyPreChangeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChangeInternal(TSharedRef<FEditPropertyChain> PropertyChain, FProperty* PropertyAboutToChange, FNotifyHook* InNotifyHook)"
  },
  {
    "label": "DestroyTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTree(const bool bInDestroySelf=true)"
  },
  {
    "label": "InitBeforeNodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBeforeNodeFlags()"
  },
  {
    "label": "InitExpansionFlags()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "InitExpansionFlags()"
  },
  {
    "label": "SetNodeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeFlags(EPropertyNodeFlags::CanBeExpanded, true)"
  },
  {
    "label": "InitChildNodes()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "InitChildNodes()"
  },
  {
    "label": "IsFilterAcceptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterAcceptable(const TArray<FString>& InAcceptableNames, const TArray<FString>& InFilterStrings)"
  },
  {
    "label": "ExpandParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandParent(bool bInRecursive)"
  },
  {
    "label": "GetStoredProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetStoredProperty()"
  },
  {
    "label": "GetDiffersFromDefaultForObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDiffersFromDefaultForObject(FPropertyItemValueDataTrackerSlate& ValueTracker, FProperty* InProperty)"
  },
  {
    "label": "GetDefaultValueAsString()",
    "kind": "Method",
    "detail": "Function (enum class EValueAsStringMode { None,UseDisplayName,ForDiff,} ; FString)",
    "insertText": "GetDefaultValueAsString(const uint8* PropertyDefaultAddress, const FProperty* InProperty, EValueAsStringMode Mode, const UObject* TopLevelObject)"
  },
  {
    "label": "GetDefaultValueAsStringForObject()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultValueAsStringForObject(FPropertyItemValueDataTrackerSlate& ValueTracker, UObject* InObject, FProperty* InProperty, EValueAsStringMode Mode)"
  },
  {
    "label": "AdjustEnumPropDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdjustEnumPropDisplayName(UEnum* InEnum, FString& DisplayName)"
  },
  {
    "label": "BroadcastPropertyChangedDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPropertyChangedDelegates()"
  },
  {
    "label": "BroadcastPropertyChangedDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPropertyChangedDelegates(const FPropertyChangedEvent& Event)"
  },
  {
    "label": "BroadcastPropertyPreChangeDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPropertyPreChangeDelegates()"
  },
  {
    "label": "GetValueTracker()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyItemValueDataTrackerSlate>)",
    "insertText": "GetValueTracker(UObject* Object, uint32 ObjIndex)"
  },
  {
    "label": "UpdateEditConstState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEditConstState()"
  },
  {
    "label": "DoesChildPropertyRequireValidation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChildPropertyRequireValidation(FProperty* InChildProp)"
  },
  {
    "label": "FComplexPropertyNode()",
    "kind": "Method",
    "detail": "Function (protected : FEditConditionParser EditConditionParser ; TWeakPtr<FPropertyNode> ParentNodeWeakPtr ; TSharedPtr<FPropertyNode> PropertyKeyNode ; TSharedPtr<FPropertyNode> OptionalValueNode ; FReadAddressListData CachedReadAddresses ; TArray<TSharedPtr<FPropertyItemValueDataTrackerSlate>> ObjectDefaultValueTrackers ; TArray<TSharedPtr<FPropertyNode>> ChildNodes ; FPropertyChildrenRebuiltEvent OnRebuildChildrenEvent ; FPropertyValuePreChangeEvent PropertyValuePreChangeEvent ; FPropertyValuePreChangeEvent ChildPropertyValuePreChangeEvent ; FPropertyValueChangedEvent PropertyValueChangedEvent ; FPropertyValueChangedWithData PropertyValueChangedDelegate ; FPropertyValueChangedEvent ChildPropertyValueChangedEvent ; FPropertyValueChangedWithData ChildPropertyValueChangedDelegate ; FPropertyResetToDefaultEvent PropertyResetToDefaultEvent ; TWeakFieldPtr<FProperty> Property ; int32 ArrayOffset ; int32 ArrayIndex ; int32 MaxChildDepthAllowed ; EPropertyNodeFlags::Type PropertyNodeFlags ; bool bRebuildChildrenRequested ; bool bChildrenRebuilt ; bool bIgnoreInstancedReference ; bool bIsDestroyed = false ; TArray<TSharedRef<const FPropertyRestriction>> Restrictions ; TWeakPtr<FDetailTreeNode> TreeNode ; TMap<FName,FString> InstanceMetaData ; FString PropertyPath ; TSharedPtr<FEditConditionExpression> EditConditionExpression ; TSharedPtr<FEditConditionContext> EditConditionContext ; bool bIsEditConst ; bool bIsEditConstWithoutCondition ; bool bUpdateEditConstState ; int32 UpdateEditConstStateEpoch ; bool bDiffersFromDefault ; bool bUpdateDiffersFromDefault ; int32 UpdateDiffersFromDefaultEpoch ; } ; class FComplexPropertyNode : public FPropertyNode { public : enum EPropertyType { EPT_Object,EPT_StandaloneStructure,} ;)",
    "insertText": "FComplexPropertyNode() : FPropertyNode()"
  },
  {
    "label": "FComplexPropertyNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FComplexPropertyNode()"
  },
  {
    "label": "AsComplexNode()",
    "kind": "Method",
    "detail": "Function (} FComplexPropertyNode*)",
    "insertText": "AsComplexNode()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetBaseStructure()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetBaseStructure()"
  },
  {
    "label": "GetAllStructures()",
    "kind": "Method",
    "detail": "Function (TArray<UStruct*>)",
    "insertText": "GetAllStructures()"
  },
  {
    "label": "GetInstancesNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstancesNum()"
  },
  {
    "label": "GetMemoryOfInstance()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetMemoryOfInstance(int32 Index)"
  },
  {
    "label": "GetValuePtrOfInstance()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValuePtrOfInstance(int32 Index, const FProperty* InProperty, const FPropertyNode* InParentNode)"
  },
  {
    "label": "GetInstanceAsUObject()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UObject>)",
    "insertText": "GetInstanceAsUObject(int32 Index)"
  },
  {
    "label": "GetPropertyType()",
    "kind": "Method",
    "detail": "Function (EPropertyType)",
    "insertText": "GetPropertyType()"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "GenerateSingleChild()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPropertyNode>)",
    "insertText": "GenerateSingleChild(FName ChildPropertyName)"
  }
]