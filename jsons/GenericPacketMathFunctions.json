[
  {
    "label": "make_integer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_integer"
  },
  {
    "label": "pldexp_fast_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pldexp_fast_impl"
  },
  {
    "label": "accurate_log2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "accurate_log2"
  },
  {
    "label": "fast_accurate_exp2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "fast_accurate_exp2"
  },
  {
    "label": "ppolevl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ppolevl"
  },
  {
    "label": "pchebevl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pchebevl"
  },
  {
    "label": "pfrexp_generic_get_biased_exponent()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ARCH_GENERIC_PACKET_MATH_FUNCTIONS_H # define EIGEN_ARCH_GENERIC_PACKET_MATH_FUNCTIONS_H namespace Eigen { namespace internal { template<T> struct make_integer ; template<> struct make_integer<float> { typedef numext::int32_t type ; } ; template<> struct make_integer<double> { typedef numext::int64_t type ; } ; template<> struct make_integer<half> { typedef numext::int16_t type ; } ; template<> struct make_integer<bfloat16> { typedef numext::int16_t type ; } ; template<Packet> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pfrexp_generic_get_biased_exponent(const Packet& a)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; typedef unpacket_traits<Packet>::integer_packet PacketI ; enum { mantissa_bits = numext::numeric_limits<Scalar>::digits - 1 } ; return pcast<PacketI,)",
    "insertText": "Packet(plogical_shift_right<mantissa_bits>(preinterpret<PacketI>(pabs(a))))"
  },
  {
    "label": "pfrexp_generic()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Packet)",
    "insertText": "pfrexp_generic(const Packet& a, Packet& exponent)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; typedef make_unsigned<make_integer<Scalar>::type>::type ScalarUI ; enum { TotalBits =)",
    "insertText": "sizeof(Scalar) * CHAR_BIT, MantissaBits = numext::numeric_limits<Scalar>::digits - 1, ExponentBits = int(TotalBits) - int(MantissaBits)"
  },
  {
    "label": "scalar_sign_mantissa_mask()",
    "kind": "Method",
    "detail": "Function (EIGEN_CONSTEXPR ScalarUI)",
    "insertText": "scalar_sign_mantissa_mask(((ScalarUI(1) << int(ExponentBits)) - ScalarUI(1)) << int(MantissaBits))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet sign_mantissa_mask = pset1frombits<)",
    "insertText": "Packet(static_cast<ScalarUI>(scalar_sign_mantissa_mask))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet half = pset1<)",
    "insertText": "Packet(Scalar(0.5))"
  },
  {
    "label": "pzero()",
    "kind": "Method",
    "detail": "Function (const Packet zero =)",
    "insertText": "pzero(a)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet normal_min = pset1<)",
    "insertText": "Packet((numext::numeric_limits<Scalar>::min)())"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet is_denormal =)",
    "insertText": "pcmp_lt(pabs(a), normal_min)"
  },
  {
    "label": "ScalarUI()",
    "kind": "Method",
    "detail": "Function (EIGEN_CONSTEXPR ScalarUI scalar_normalization_offset =)",
    "insertText": "ScalarUI(int(MantissaBits) + 1)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar scalar_normalization_factor =)",
    "insertText": "Scalar(ScalarUI(1) << int(scalar_normalization_offset))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet normalization_factor = pset1<)",
    "insertText": "Packet(scalar_normalization_factor)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (const Packet normalized_a =)",
    "insertText": "pselect(is_denormal, pmul(a, normalization_factor), a)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar scalar_exponent_offset = -)",
    "insertText": "Scalar((ScalarUI(1)<<(int(ExponentBits)-1)) - ScalarUI(2))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet exponent_offset = pset1<)",
    "insertText": "Packet(scalar_exponent_offset)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet normalization_offset = pset1<)",
    "insertText": "Packet(-Scalar(scalar_normalization_offset))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (exponent_offset =)",
    "insertText": "pselect(is_denormal, padd(exponent_offset, normalization_offset), exponent_offset)"
  },
  {
    "label": "pfrexp_generic_get_biased_exponent()",
    "kind": "Method",
    "detail": "Function (exponent =)",
    "insertText": "pfrexp_generic_get_biased_exponent(normalized_a)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar scalar_non_finite_exponent =)",
    "insertText": "Scalar((ScalarUI(1) << int(ExponentBits)) - ScalarUI(1))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet non_finite_exponent = pset1<)",
    "insertText": "Packet(scalar_non_finite_exponent)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (const Packet is_zero_or_not_finite =)",
    "insertText": "por(pcmp_eq(a, zero), pcmp_eq(exponent, non_finite_exponent))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (const Packet m =)",
    "insertText": "pselect(is_zero_or_not_finite, a, por(pand(normalized_a, sign_mantissa_mask), half))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (exponent =)",
    "insertText": "pselect(is_zero_or_not_finite, zero, padd(exponent, exponent_offset))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet max_exponent = pset1<)",
    "insertText": "Packet(Scalar((ScalarI(1)<<int(ExponentBits)) + ScalarI(int(MantissaBits) - 1)))"
  },
  {
    "label": "PacketI()",
    "kind": "Method",
    "detail": "Function (const PacketI bias = pset1<)",
    "insertText": "PacketI((ScalarI(1)<<(int(ExponentBits)-1)) - ScalarI(1))"
  },
  {
    "label": "PacketI()",
    "kind": "Method",
    "detail": "Function (const PacketI e = pcast<Packet,)",
    "insertText": "PacketI(pmin(pmax(exponent, pnegate(max_exponent)), max_exponent))"
  },
  {
    "label": "parithmetic_shift_right()",
    "kind": "Method",
    "detail": "Function (PacketI b =)",
    "insertText": "parithmetic_shift_right(e)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet c = preinterpret<)",
    "insertText": "Packet(plogical_shift_left<int(MantissaBits)>(padd(b, bias)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet out =)",
    "insertText": "pmul(pmul(pmul(a, c), c), c)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (b =)",
    "insertText": "psub(psub(psub(e, b), b), b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "pmul(out, c)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC Packet)",
    "insertText": "run(const Packet& a, const Packet& exponent)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet bias = pset1<)",
    "insertText": "Packet(Scalar((ScalarI(1)<<(int(ExponentBits)-1)) - ScalarI(1)))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet limit = pset1<)",
    "insertText": "Packet(Scalar((ScalarI(1)<<int(ExponentBits)) - ScalarI(1)))"
  },
  {
    "label": "PacketI()",
    "kind": "Method",
    "detail": "Function (const PacketI e = pcast<Packet,)",
    "insertText": "PacketI(pmin(pmax(padd(exponent, bias), pzero(limit)), limit))"
  },
  {
    "label": "plog_impl_float()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet,bool base2> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "plog_impl_float(const Packet _x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet x = _x ; const Packet cst_1 = pset1<)",
    "insertText": "Packet(1.0f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_neg_half = pset1<)",
    "insertText": "Packet(-0.5f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_min_norm_pos = pset1frombits<)",
    "insertText": "Packet(0x00800000u)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_minus_inf = pset1frombits<)",
    "insertText": "Packet(0xff800000u)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_pos_inf = pset1frombits<)",
    "insertText": "Packet(0x7f800000u)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_SQRTHF = pset1<)",
    "insertText": "Packet(0.707106781186547524f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p0 = pset1<)",
    "insertText": "Packet(7.0376836292E-2f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p1 = pset1<)",
    "insertText": "Packet(-1.1514610310E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p2 = pset1<)",
    "insertText": "Packet(1.1676998740E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p3 = pset1<)",
    "insertText": "Packet(-1.2420140846E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p4 = pset1<)",
    "insertText": "Packet(+1.4249322787E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p5 = pset1<)",
    "insertText": "Packet(-1.6668057665E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p6 = pset1<)",
    "insertText": "Packet(+2.0000714765E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p7 = pset1<)",
    "insertText": "Packet(-2.4999993993E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p8 = pset1<)",
    "insertText": "Packet(+3.3333331174E-1f)"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmax(x, cst_min_norm_pos)"
  },
  {
    "label": "pfrexp()",
    "kind": "Method",
    "detail": "Function (Packet e ; x =)",
    "insertText": "pfrexp(x,e)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet mask =)",
    "insertText": "pcmp_lt(x, cst_cephes_SQRTHF)"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (Packet tmp =)",
    "insertText": "pand(x, mask)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "psub(x, cst_1)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (e =)",
    "insertText": "psub(e, pand(cst_1, mask))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "padd(x, tmp)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet x2 =)",
    "insertText": "pmul(x, x)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet x3 =)",
    "insertText": "pmul(x2, x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet y,y1,y2 ; y =)",
    "insertText": "pmadd(cst_cephes_log_p0, x, cst_cephes_log_p1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(cst_cephes_log_p3, x, cst_cephes_log_p4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "pmadd(cst_cephes_log_p6, x, cst_cephes_log_p7)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, x, cst_cephes_log_p2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, x, cst_cephes_log_p5)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "pmadd(y2, x, cst_cephes_log_p8)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, x3, y1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, x3, y2)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmul(y, x3)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(cst_neg_half, x2, y)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "padd(x, y)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_log2e = pset1<)",
    "insertText": "Packet(static_cast<float>(EIGEN_LOG2E))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(x, cst_log2e, e)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} else { const Packet cst_ln2 = pset1<)",
    "insertText": "Packet(static_cast<float>(EIGEN_LN2))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(e, cst_ln2, x)"
  },
  {
    "label": "pcmp_lt_or_nan()",
    "kind": "Method",
    "detail": "Function (} Packet invalid_mask =)",
    "insertText": "pcmp_lt_or_nan(_x, pzero(_x))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet iszero_mask =)",
    "insertText": "pcmp_eq(_x,pzero(_x))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet pos_inf_mask =)",
    "insertText": "pcmp_eq(_x,cst_pos_inf)"
  },
  {
    "label": "plog_float()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "plog_float(const Packet _x)"
  },
  {
    "label": "plog2_float()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "plog2_float(const Packet _x)"
  },
  {
    "label": "plog_impl_double()",
    "kind": "Method",
    "detail": "Function (} template<Packet,bool base2> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "plog_impl_double(const Packet _x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet x = _x ; const Packet cst_1 = pset1<)",
    "insertText": "Packet(1.0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_neg_half = pset1<)",
    "insertText": "Packet(-0.5)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_min_norm_pos = pset1frombits<)",
    "insertText": "Packet(static_cast<uint64_t>(0x0010000000000000ull))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_minus_inf = pset1frombits<)",
    "insertText": "Packet(static_cast<uint64_t>(0xfff0000000000000ull))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_pos_inf = pset1frombits<)",
    "insertText": "Packet(static_cast<uint64_t>(0x7ff0000000000000ull))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_SQRTHF = pset1<)",
    "insertText": "Packet(0.70710678118654752440E0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p0 = pset1<)",
    "insertText": "Packet(1.01875663804580931796E-4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p1 = pset1<)",
    "insertText": "Packet(4.97494994976747001425E-1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p2 = pset1<)",
    "insertText": "Packet(4.70579119878881725854E0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p3 = pset1<)",
    "insertText": "Packet(1.44989225341610930846E1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p4 = pset1<)",
    "insertText": "Packet(1.79368678507819816313E1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_p5 = pset1<)",
    "insertText": "Packet(7.70838733755885391666E0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_q1 = pset1<)",
    "insertText": "Packet(1.12873587189167450590E1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_q2 = pset1<)",
    "insertText": "Packet(4.52279145837532221105E1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_q3 = pset1<)",
    "insertText": "Packet(8.29875266912776603211E1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_q4 = pset1<)",
    "insertText": "Packet(7.11544750618563894466E1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_log_q5 = pset1<)",
    "insertText": "Packet(2.31251620126765340583E1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(cst_cephes_log_q0, x, cst_cephes_log_q1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(cst_cephes_log_q3, x, cst_cephes_log_q4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, x, cst_cephes_log_q2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, x, cst_cephes_log_q5)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (y_ =)",
    "insertText": "pmul(y_, x3)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pdiv(y_, y)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_log2e = pset1<)",
    "insertText": "Packet(static_cast<double>(EIGEN_LOG2E))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} else { const Packet cst_ln2 = pset1<)",
    "insertText": "Packet(static_cast<double>(EIGEN_LN2))"
  },
  {
    "label": "plog_double()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "plog_double(const Packet _x)"
  },
  {
    "label": "plog2_double()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "plog2_double(const Packet _x)"
  },
  {
    "label": "generic_plog1p()",
    "kind": "Method",
    "detail": "Function (} template<Packet> Packet)",
    "insertText": "generic_plog1p(const Packet& x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type ScalarType ; const Packet one = pset1<)",
    "insertText": "Packet(ScalarType(1))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (Packet xp1 =)",
    "insertText": "padd(x, one)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet small_mask =)",
    "insertText": "pcmp_eq(xp1, one)"
  },
  {
    "label": "plog()",
    "kind": "Method",
    "detail": "Function (Packet log1 =)",
    "insertText": "plog(xp1)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet inf_mask =)",
    "insertText": "pcmp_eq(xp1, log1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet log_large =)",
    "insertText": "pmul(x, pdiv(log1, psub(xp1, one)))"
  },
  {
    "label": "generic_expm1()",
    "kind": "Method",
    "detail": "Function (} template<Packet> Packet)",
    "insertText": "generic_expm1(const Packet& x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet neg_one = pset1<)",
    "insertText": "Packet(ScalarType(-1))"
  },
  {
    "label": "pexp()",
    "kind": "Method",
    "detail": "Function (Packet u =)",
    "insertText": "pexp(x)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet one_mask =)",
    "insertText": "pcmp_eq(u, one)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (Packet u_minus_one =)",
    "insertText": "psub(u, one)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet neg_one_mask =)",
    "insertText": "pcmp_eq(u_minus_one, neg_one)"
  },
  {
    "label": "plog()",
    "kind": "Method",
    "detail": "Function (Packet logu =)",
    "insertText": "plog(u)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet pos_inf_mask =)",
    "insertText": "pcmp_eq(logu, u)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet expm1 =)",
    "insertText": "pmul(u_minus_one, pdiv(x, logu))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (expm1 =)",
    "insertText": "pselect(pos_inf_mask, u, expm1)"
  },
  {
    "label": "pexp_float()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "pexp_float(const Packet _x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_half = pset1<)",
    "insertText": "Packet(0.5f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_exp_hi = pset1<)",
    "insertText": "Packet(88.723f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_exp_lo = pset1<)",
    "insertText": "Packet(-88.723f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_LOG2EF = pset1<)",
    "insertText": "Packet(1.44269504088896341f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p0 = pset1<)",
    "insertText": "Packet(1.9875691500E-4f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p1 = pset1<)",
    "insertText": "Packet(1.3981999507E-3f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p2 = pset1<)",
    "insertText": "Packet(8.3334519073E-3f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p3 = pset1<)",
    "insertText": "Packet(4.1665795894E-2f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p4 = pset1<)",
    "insertText": "Packet(1.6666665459E-1f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p5 = pset1<)",
    "insertText": "Packet(5.0000001201E-1f)"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (Packet x =)",
    "insertText": "pmax(pmin(_x, cst_exp_hi), cst_exp_lo)"
  },
  {
    "label": "pfloor()",
    "kind": "Method",
    "detail": "Function (Packet m =)",
    "insertText": "pfloor(pmadd(x, cst_cephes_LOG2EF, cst_half))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_C1 = pset1<)",
    "insertText": "Packet(-0.693359375f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_C2 = pset1<)",
    "insertText": "Packet(2.12194440e-4f)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet r =)",
    "insertText": "pmadd(m, cst_cephes_exp_C1, x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "pmadd(m, cst_cephes_exp_C2, r)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet r2 =)",
    "insertText": "pmul(r, r)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet r3 =)",
    "insertText": "pmul(r2, r)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet y,y1,y2 ; y =)",
    "insertText": "pmadd(cst_cephes_exp_p0, r, cst_cephes_exp_p1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(cst_cephes_exp_p3, r, cst_cephes_exp_p4)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "padd(r, cst_1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, r, cst_cephes_exp_p2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, r, cst_cephes_exp_p5)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, r3, y1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pmadd(y, r2, y2)"
  },
  {
    "label": "pexp_double()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "pexp_double(const Packet _x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_2 = pset1<)",
    "insertText": "Packet(2.0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_half = pset1<)",
    "insertText": "Packet(0.5)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_exp_hi = pset1<)",
    "insertText": "Packet(709.784)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_exp_lo = pset1<)",
    "insertText": "Packet(-709.784)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_LOG2EF = pset1<)",
    "insertText": "Packet(1.4426950408889634073599)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p0 = pset1<)",
    "insertText": "Packet(1.26177193074810590878e-4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p1 = pset1<)",
    "insertText": "Packet(3.02994407707441961300e-2)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_p2 = pset1<)",
    "insertText": "Packet(9.99999999999999999910e-1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_q0 = pset1<)",
    "insertText": "Packet(3.00198505138664455042e-6)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_q1 = pset1<)",
    "insertText": "Packet(2.52448340349684104192e-3)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_q2 = pset1<)",
    "insertText": "Packet(2.27265548208155028766e-1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_q3 = pset1<)",
    "insertText": "Packet(2.00000000000000000009e0)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_C1 = pset1<)",
    "insertText": "Packet(0.693145751953125)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_cephes_exp_C2 = pset1<)",
    "insertText": "Packet(1.42860682030941723212e-6)"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (Packet tmp,fx ; x =)",
    "insertText": "pmax(pmin(x, cst_exp_hi), cst_exp_lo)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (fx =)",
    "insertText": "pmadd(cst_cephes_LOG2EF, x, cst_half)"
  },
  {
    "label": "pfloor()",
    "kind": "Method",
    "detail": "Function (fx =)",
    "insertText": "pfloor(fx)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (tmp =)",
    "insertText": "pmul(fx, cst_cephes_exp_C1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet z =)",
    "insertText": "pmul(fx, cst_cephes_exp_C2)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "psub(x, tmp)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "psub(x, z)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet px = cst_cephes_exp_p0 ; px =)",
    "insertText": "pmadd(px, x2, cst_cephes_exp_p1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (px =)",
    "insertText": "pmadd(px, x2, cst_cephes_exp_p2)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (px =)",
    "insertText": "pmul(px, x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet qx = cst_cephes_exp_q0 ; qx =)",
    "insertText": "pmadd(qx, x2, cst_cephes_exp_q1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (qx =)",
    "insertText": "pmadd(qx, x2, cst_cephes_exp_q2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (qx =)",
    "insertText": "pmadd(qx, x2, cst_cephes_exp_q3)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pdiv(px, psub(qx, px))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(cst_2, x, cst_1)"
  },
  {
    "label": "trig_reduce_huge()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "trig_reduce_huge(float xf, int *quadrant)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (using Eigen::numext::int32_t ; using Eigen::numext::uint32_t ; using Eigen::numext::int64_t ; using Eigen::numext::uint64_t ; const double pio2_62 = 3 . 4 0 6 1 2 1 5 8 0 0 8 6 5 5 4 5 e - 1 9 ; const uint64_t zero_dot_five =)",
    "insertText": "uint64_t(1)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const uint32_t two_over_pi [ ] = { 0 x00000028,0 x000028be,0 x0028be60,0 x28be60db,0 xbe60db93,0 x60db9391,0 xdb939105,0 x9391054a,0 x91054a7f,0 x054a7f09,0 x4a7f09d5,0 x7f09d5f4,0 x09d5f47d,0 xd5f47d4d,0 xf47d4d37,0 x7d4d3770,0 x4d377036,0 x377036d8,0 x7036d8a5,0 x36d8a566,0 xd8a5664f,0 xa5664f10,0 x664f10e4,0 x4f10e410,0 x10e41000,0 xe4100000 } ; uint32_t xi = numext::bit_cast<)",
    "insertText": "uint32_t(xf)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "e(xi >> 23)"
  },
  {
    "label": "xi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "xi((xi & 0x007fffffu)| 0x00800000u) << (e & 0x7)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint32_t i = e>> 3 ; uint32_t twoopi_1 = two_over_pi [ i - 1 ] ; uint32_t twoopi_2 = two_over_pi [ i + 3 ] ; uint32_t twoopi_3 = two_over_pi [ i + 7 ] ; uint64_t p ; p =)",
    "insertText": "uint64_t(xi)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (p =)",
    "insertText": "uint64_t(xi) * twoopi_2 + (p >> 32)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(uint64_t(xi * twoopi_1) << 32)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "q(p + zero_dot_five)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (* quadrant =)",
    "insertText": "int(q)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (p - = q<<6 2 ; return)",
    "insertText": "float(double(int64_t(p)) * pio2_62)"
  },
  {
    "label": "EIGEN_GNUC_AT_LEAST()",
    "kind": "Method",
    "detail": "Function (} template<bool ComputeSine,Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED # if)",
    "insertText": "EIGEN_GNUC_AT_LEAST(4,4) && EIGEN_COMP_GNUC_STRICT __attribute__((optimize(\"-fno-unsafe-math-optimizations\"))) #endif Packet psincos_float(const Packet& _x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::integer_packet PacketI ; const Packet cst_2oPI = pset1<)",
    "insertText": "Packet(0.636619746685028076171875f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_rounding_magic = pset1<)",
    "insertText": "Packet(12582912)"
  },
  {
    "label": "PacketI()",
    "kind": "Method",
    "detail": "Function (const PacketI csti_1 = pset1<)",
    "insertText": "PacketI(1)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_sign_mask = pset1frombits<)",
    "insertText": "Packet(0x80000000u)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (Packet x =)",
    "insertText": "pabs(_x)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet y =)",
    "insertText": "pmul(x, cst_2oPI)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (Packet y_round =)",
    "insertText": "padd(y, cst_rounding_magic)"
  },
  {
    "label": "EIGEN_OPTIMIZATION_BARRIER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_OPTIMIZATION_BARRIER(y_round) PacketI y_int = preinterpret<PacketI>(y_round)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "psub(y_round, cst_rounding_magic)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HAS_SINGLE_INSTRUCTION_MADD)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(y, pset1<Packet>(-1.57079601287841796875f), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(y, pset1<Packet>(-3.1391647326017846353352069854736328125e-07f), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(y, pset1<Packet>(-5.390302529957764765544681040410068817436695098876953125e-15f), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (# else const float huge_th = ComputeSine ? 2 5 9 6 6 . f : 1 8 8 3 8 . f ; x =)",
    "insertText": "pmadd(y, pset1<Packet>(-1.5703125), x)"
  },
  {
    "label": "EIGEN_OPTIMIZATION_BARRIER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_OPTIMIZATION_BARRIER(x) x = pmadd(y, pset1<Packet>(-0.000483989715576171875), x)"
  },
  {
    "label": "EIGEN_OPTIMIZATION_BARRIER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_OPTIMIZATION_BARRIER(x) x = pmadd(y, pset1<Packet>(1.62865035235881805419921875e-07), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "pmadd(y, pset1<Packet>(5.5644315544167710640977020375430583953857421875e-11), x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(predux_any(pcmp_le(pset1<Packet>(huge_th),pabs(_x))))"
  },
  {
    "label": "EIGEN_ALIGN_TO_BOUNDARY()",
    "kind": "Method",
    "detail": "Function (const int PacketSize = unpacket_traits<Packet>::size ;)",
    "insertText": "EIGEN_ALIGN_TO_BOUNDARY(sizeof(Packet))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(vals, pabs(_x))"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(x_cpy, x)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pstoreu(y_int2, y_int)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float val = vals [ k ] ;)",
    "insertText": "if(val>=huge_th && (numext::isfinite)(val)) x_cpy[k] = trig_reduce_huge(val,&y_int2[k])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} x = ploadu<)",
    "insertText": "Packet(x_cpy)"
  },
  {
    "label": "PacketI()",
    "kind": "Method",
    "detail": "Function (y_int = ploadu<)",
    "insertText": "PacketI(y_int2)"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (} Packet sign_bit = ComputeSine ?)",
    "insertText": "pxor(_x, preinterpret<Packet>(plogical_shift_left<30>(y_int))) : preinterpret<Packet>(plogical_shift_left<30>(padd(y_int,csti_1)))"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (sign_bit =)",
    "insertText": "pand(sign_bit, cst_sign_mask)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet poly_mask = preinterpret<)",
    "insertText": "Packet(pcmp_eq(pand(y_int, csti_1), pzero(y_int)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet x2 =)",
    "insertText": "pmul(x,x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet y1 = pset1<)",
    "insertText": "Packet(2.4372266125283204019069671630859375e-05f)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, x2, pset1<Packet>(-0.00138865201734006404876708984375f ))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, x2, pset1<Packet>(0.041666619479656219482421875f ))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, x2, pset1<Packet>(-0.5f))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y1 =)",
    "insertText": "pmadd(y1, x2, pset1<Packet>(1.f))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet y2 = pset1<)",
    "insertText": "Packet(-0.0001959234114083702898469196984621021329076029360294342041015625f)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "pmadd(y2, x2, pset1<Packet>( 0.0083326873655616851693794799871284340042620897293090820312500000f))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "pmadd(y2, x2, pset1<Packet>(-0.1666666203982298255503735617821803316473960876464843750000000000f))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "pmul(y2, x2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (y2 =)",
    "insertText": "pmadd(y2, x, x)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (y = ComputeSine ?)",
    "insertText": "pselect(poly_mask,y2,y1) : pselect(poly_mask,y1,y2)"
  },
  {
    "label": "psin_float()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "psin_float(const Packet& x)"
  },
  {
    "label": "pcos_float()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "pcos_float(const Packet& x)"
  },
  {
    "label": "psqrt_complex()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "psqrt_complex(const Packet& a)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; typedef Scalar::value_type RealScalar ; typedef unpacket_traits<Packet>::as_real RealPacket ; RealPacket a_abs =)",
    "insertText": "pabs(a.v)"
  },
  {
    "label": "pcplxflip()",
    "kind": "Method",
    "detail": "Function (RealPacket a_abs_flip =)",
    "insertText": "pcplxflip(Packet(a_abs))"
  },
  {
    "label": "pmax()",
    "kind": "Method",
    "detail": "Function (RealPacket a_max =)",
    "insertText": "pmax(a_abs, a_abs_flip)"
  },
  {
    "label": "pmin()",
    "kind": "Method",
    "detail": "Function (RealPacket a_min =)",
    "insertText": "pmin(a_abs, a_abs_flip)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (RealPacket a_min_zero_mask =)",
    "insertText": "pcmp_eq(a_min, pzero(a_min))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (RealPacket a_max_zero_mask =)",
    "insertText": "pcmp_eq(a_max, pzero(a_max))"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (RealPacket r =)",
    "insertText": "pdiv(a_min, a_max)"
  },
  {
    "label": "RealPacket()",
    "kind": "Method",
    "detail": "Function (const RealPacket cst_one = pset1<)",
    "insertText": "RealPacket(RealScalar(1))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (RealPacket l =)",
    "insertText": "pmul(a_max, psqrt(padd(cst_one, pmul(r, r))))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (l =)",
    "insertText": "pselect(a_min_zero_mask, a_max, l)"
  },
  {
    "label": "RealPacket()",
    "kind": "Method",
    "detail": "Function (const RealPacket cst_half = pset1<)",
    "insertText": "RealPacket(RealScalar(0.5))"
  },
  {
    "label": "psqrt()",
    "kind": "Method",
    "detail": "Function (Packet rho ; rho . v =)",
    "insertText": "psqrt(pmul(cst_half, padd(a_abs, l)))"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (RealPacket eta =)",
    "insertText": "pandnot(pmul(cst_half, pdiv(a.v, pcplxflip(rho).v)), a_max_zero_mask)"
  },
  {
    "label": "peven_mask()",
    "kind": "Method",
    "detail": "Function (RealPacket real_mask =)",
    "insertText": "peven_mask(a.v)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (Packet positive_real_result ; positive_real_result . v =)",
    "insertText": "pselect(real_mask, rho.v, eta)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar neg_zero =)",
    "insertText": "RealScalar(numext::bit_cast<float>(0x80000000u))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const RealPacket cst_imag_sign_mask = pset1<)",
    "insertText": "Packet(Scalar(RealScalar(0.0), neg_zero))"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (RealPacket imag_signs =)",
    "insertText": "pand(a.v, cst_imag_sign_mask)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (Packet negative_real_result ; negative_real_result . v =)",
    "insertText": "por(pabs(pcplxflip(positive_real_result).v), imag_signs)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (Packet negative_real_mask ; negative_real_mask . v =)",
    "insertText": "pcmp_lt(pand(real_mask, a.v), pzero(a.v))"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (negative_real_mask . v =)",
    "insertText": "por(negative_real_mask.v, pcplxflip(negative_real_mask).v)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (Packet result =)",
    "insertText": "pselect(negative_real_mask, negative_real_result, positive_real_result)"
  },
  {
    "label": "RealPacket()",
    "kind": "Method",
    "detail": "Function (const RealPacket cst_pos_inf = pset1<)",
    "insertText": "RealPacket(NumTraits<RealScalar>::infinity())"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (Packet is_inf ; is_inf . v =)",
    "insertText": "pcmp_eq(a_abs, cst_pos_inf)"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (Packet is_real_inf ; is_real_inf . v =)",
    "insertText": "pand(is_inf.v, real_mask)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (is_real_inf =)",
    "insertText": "por(is_real_inf, pcplxflip(is_real_inf))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet real_inf_result ; real_inf_result . v =)",
    "insertText": "pmul(a_abs, pset1<Packet>(Scalar(RealScalar(1.0), RealScalar(0.0))).v)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (real_inf_result . v =)",
    "insertText": "pselect(negative_real_mask.v, pcplxflip(real_inf_result).v, real_inf_result.v)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (Packet is_imag_inf ; is_imag_inf . v =)",
    "insertText": "pandnot(is_inf.v, real_mask)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (is_imag_inf =)",
    "insertText": "por(is_imag_inf, pcplxflip(is_imag_inf))"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (Packet imag_inf_result ; imag_inf_result . v =)",
    "insertText": "por(pand(cst_pos_inf, real_mask), pandnot(a.v, real_mask))"
  },
  {
    "label": "absolute_split()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "absolute_split(const Packet& x, Packet& n, Packet& r)"
  },
  {
    "label": "pround()",
    "kind": "Method",
    "detail": "Function (n =)",
    "insertText": "pround(x)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "psub(x, n)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "fast_twosum(const Packet& x, const Packet& y, Packet& s_hi, Packet& s_lo)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (const Packet t =)",
    "insertText": "psub(s_hi, x)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (s_lo =)",
    "insertText": "psub(y, t)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_HAS_SINGLE_INSTRUCTION_MADD template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "twoprod(const Packet& x, const Packet& y, Packet& p_hi, Packet& p_lo)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (p_hi =)",
    "insertText": "pmul(x, y)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_lo =)",
    "insertText": "pmadd(x, y, pnegate(p_hi))"
  },
  {
    "label": "veltkamp_splitting()",
    "kind": "Method",
    "detail": "Function (} # else template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "veltkamp_splitting(const Packet& x, Packet& x_hi, Packet& x_lo)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; EIGEN_CONSTEXPR int)",
    "insertText": "shift(NumTraits<Scalar>::digits() + 1)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Scalar shift_scale =)",
    "insertText": "Scalar(uint64_t(1) << shift)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (const Packet gamma =)",
    "insertText": "pmul(pset1<Packet>(shift_scale + Scalar(1)), x)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (Packet rho =)",
    "insertText": "psub(x, gamma)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (x_hi =)",
    "insertText": "padd(rho, gamma)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (x_lo =)",
    "insertText": "psub(x, x_hi)"
  },
  {
    "label": "veltkamp_splitting()",
    "kind": "Method",
    "detail": "Function (Packet x_hi,x_lo,y_hi,y_lo ;)",
    "insertText": "veltkamp_splitting(x, x_hi, x_lo)"
  },
  {
    "label": "veltkamp_splitting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "veltkamp_splitting(y, y_hi, y_lo)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_lo =)",
    "insertText": "pmadd(x_hi, y_hi, pnegate(p_hi))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_lo =)",
    "insertText": "pmadd(x_hi, y_lo, p_lo)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_lo =)",
    "insertText": "pmadd(x_lo, y_hi, p_lo)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_lo =)",
    "insertText": "pmadd(x_lo, y_lo, p_lo)"
  },
  {
    "label": "twosum()",
    "kind": "Method",
    "detail": "Function (} # endif template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "twosum(const Packet& x_hi, const Packet& x_lo, const Packet& y_hi, const Packet& y_lo, Packet& s_hi, Packet& s_lo)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet x_greater_mask =)",
    "insertText": "pcmp_lt(pabs(y_hi), pabs(x_hi))"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet r_hi_1,r_lo_1 ;)",
    "insertText": "fast_twosum(x_hi, y_hi,r_hi_1, r_lo_1)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet r_hi_2,r_lo_2 ;)",
    "insertText": "fast_twosum(y_hi, x_hi,r_hi_2, r_lo_2)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (const Packet r_hi =)",
    "insertText": "pselect(x_greater_mask, r_hi_1, r_hi_2)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (const Packet s1 =)",
    "insertText": "padd(padd(y_lo, r_lo_1), x_lo)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (const Packet s2 =)",
    "insertText": "padd(padd(x_lo, r_lo_2), y_lo)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (const Packet s =)",
    "insertText": "pselect(x_greater_mask, s1, s2)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(r_hi, s, s_hi, s_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "fast_twosum(const Packet& x_hi, const Packet& x_lo, const Packet& y_hi, const Packet& y_lo, Packet& s_hi, Packet& s_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet r_hi,r_lo ;)",
    "insertText": "fast_twosum(x_hi, y_hi, r_hi, r_lo)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (const Packet s =)",
    "insertText": "padd(padd(y_lo, r_lo), x_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "fast_twosum(const Packet& x, const Packet& y_hi, const Packet& y_lo, Packet& s_hi, Packet& s_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet r_hi,r_lo ;)",
    "insertText": "fast_twosum(x, y_hi, r_hi, r_lo)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (const Packet s =)",
    "insertText": "padd(y_lo, r_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "twoprod(const Packet& x_hi, const Packet& x_lo, const Packet& y, Packet& p_hi, Packet& p_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet c_hi,c_lo1 ;)",
    "insertText": "twoprod(x_hi, y, c_hi, c_lo1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (const Packet c_lo2 =)",
    "insertText": "pmul(x_lo, y)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet t_hi,t_lo1 ;)",
    "insertText": "fast_twosum(c_hi, c_lo2, t_hi, t_lo1)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (const Packet t_lo2 =)",
    "insertText": "padd(t_lo1, c_lo1)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(t_hi, t_lo2, p_hi, p_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "twoprod(const Packet& x_hi, const Packet& x_lo, const Packet& y_hi, const Packet& y_lo, Packet& p_hi, Packet& p_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet p_hi_hi,p_hi_lo ;)",
    "insertText": "twoprod(x_hi, x_lo, y_hi, p_hi_hi, p_hi_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet p_lo_hi,p_lo_lo ;)",
    "insertText": "twoprod(x_hi, x_lo, y_lo, p_lo_hi, p_lo_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(p_hi_hi, p_hi_lo, p_lo_hi, p_lo_lo, p_hi, p_lo)"
  },
  {
    "label": "doubleword_reciprocal()",
    "kind": "Method",
    "detail": "Function (} template<Packet> void)",
    "insertText": "doubleword_reciprocal(const Packet& x, Packet& recip_hi, Packet& recip_lo)"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; Packet approx_recip =)",
    "insertText": "prsqrt(x)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (approx_recip =)",
    "insertText": "pmul(approx_recip, approx_recip)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet t1_hi,t1_lo ;)",
    "insertText": "twoprod(pnegate(x), approx_recip, t1_hi, t1_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet t2_hi,t2_lo ;)",
    "insertText": "fast_twosum(pset1<Packet>(Scalar(2)), t1_hi, t2_hi, t2_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet t3_hi,t3_lo ;)",
    "insertText": "fast_twosum(t2_hi, padd(t2_lo, t1_lo), t3_hi, t3_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "twoprod(t3_hi, t3_lo, approx_recip, recip_hi, recip_lo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> struct accurate_log2 { template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "operator()(const Packet& x, Packet& log2_x_hi, Packet& log2_x_lo)"
  },
  {
    "label": "plog2()",
    "kind": "Method",
    "detail": "Function (log2_x_hi =)",
    "insertText": "plog2(x)"
  },
  {
    "label": "pzero()",
    "kind": "Method",
    "detail": "Function (log2_x_lo =)",
    "insertText": "pzero(x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct accurate_log2<float> { template<Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "operator()(const Packet& z, Packet& log2_x_hi, Packet& log2_x_lo)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p6 = pset1<)",
    "insertText": "Packet(9.703654795885e-2f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p5 = pset1<)",
    "insertText": "Packet(-0.1690667718648f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p4 = pset1<)",
    "insertText": "Packet(0.1720575392246f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p3 = pset1<)",
    "insertText": "Packet(-0.1789081543684f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p2 = pset1<)",
    "insertText": "Packet(0.2050433009862f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p1 = pset1<)",
    "insertText": "Packet(-0.2404672354459f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p0 = pset1<)",
    "insertText": "Packet(0.2885761857032f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C3_hi = pset1<)",
    "insertText": "Packet(-0.360674142838f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C3_lo = pset1<)",
    "insertText": "Packet(-6.13283912543e-09f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C2_hi = pset1<)",
    "insertText": "Packet(0.480897903442f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C2_lo = pset1<)",
    "insertText": "Packet(-1.44861207474e-08f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C1_hi = pset1<)",
    "insertText": "Packet(-0.721347510815f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C1_lo = pset1<)",
    "insertText": "Packet(-4.84483164698e-09f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C0_hi = pset1<)",
    "insertText": "Packet(1.44269502163f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C0_lo = pset1<)",
    "insertText": "Packet(2.01711713999e-08f)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (const Packet x =)",
    "insertText": "psub(z, one)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p_even =)",
    "insertText": "pmadd(p6, x2, p4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_even =)",
    "insertText": "pmadd(p_even, x2, p2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_even =)",
    "insertText": "pmadd(p_even, x2, p0)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p_odd =)",
    "insertText": "pmadd(p5, x2, p3)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_odd =)",
    "insertText": "pmadd(p_odd, x2, p1)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p =)",
    "insertText": "pmadd(p_odd, x, p_even)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet q_hi,q_lo ; Packet t_hi,t_lo ;)",
    "insertText": "twoprod(p, x, t_hi, t_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(C3_hi, C3_lo, t_hi, t_lo, q_hi, q_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "twoprod(q_hi, q_lo, x, t_hi, t_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(C2_hi, C2_lo, t_hi, t_lo, q_hi, q_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(C1_hi, C1_lo, t_hi, t_lo, q_hi, q_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fast_twosum(C0_hi, C0_lo, t_hi, t_lo, q_hi, q_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "twoprod(q_hi, q_lo, x, log2_x_hi, log2_x_lo)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q12 = pset1<)",
    "insertText": "Packet(2.87074255468000586e-9)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q10 = pset1<)",
    "insertText": "Packet(2.38957980901884082e-8)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q8 = pset1<)",
    "insertText": "Packet(2.31032094540014656e-7)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q6 = pset1<)",
    "insertText": "Packet(2.27279857398537278e-6)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q4 = pset1<)",
    "insertText": "Packet(2.31271023278625638e-5)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q2 = pset1<)",
    "insertText": "Packet(2.47556738444535513e-4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet q0 = pset1<)",
    "insertText": "Packet(2.88543873228900172e-3)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C_hi = pset1<)",
    "insertText": "Packet(0.0400377511598501157)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C_lo = pset1<)",
    "insertText": "Packet(-4.77726582251425391e-19)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_2_log2e_hi = pset1<)",
    "insertText": "Packet(2.88539008177792677)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_2_log2e_lo = pset1<)",
    "insertText": "Packet(4.07660016854549667e-17)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet num_hi,num_lo ;)",
    "insertText": "twoprod(cst_2_log2e_hi, cst_2_log2e_lo, psub(x, one), num_hi, num_lo)"
  },
  {
    "label": "doubleword_reciprocal()",
    "kind": "Method",
    "detail": "Function (Packet denom_hi,denom_lo ;)",
    "insertText": "doubleword_reciprocal(padd(x, one), denom_hi, denom_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet r_hi,r_lo ;)",
    "insertText": "twoprod(num_hi, num_lo, denom_hi, denom_lo, r_hi, r_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet r2_hi,r2_lo ;)",
    "insertText": "twoprod(r_hi, r_lo, r_hi, r_lo, r2_hi, r2_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet r4_hi,r4_lo ;)",
    "insertText": "twoprod(r2_hi, r2_lo, r2_hi, r2_lo, r4_hi, r4_lo)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet q_even =)",
    "insertText": "pmadd(q12, r4_hi, q8)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet q_odd =)",
    "insertText": "pmadd(q10, r4_hi, q6)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (q_even =)",
    "insertText": "pmadd(q_even, r4_hi, q4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (q_odd =)",
    "insertText": "pmadd(q_odd, r4_hi, q2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (q_even =)",
    "insertText": "pmadd(q_even, r4_hi, q0)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet q =)",
    "insertText": "pmadd(q_odd, r2_hi, q_even)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet p_hi,p_lo ;)",
    "insertText": "twoprod(r2_hi, r2_lo, q, p_hi, p_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet p1_hi,p1_lo ;)",
    "insertText": "fast_twosum(C_hi, C_lo, p_hi, p_lo, p1_hi, p1_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet p2_hi,p2_lo ;)",
    "insertText": "twoprod(r2_hi, r2_lo, p1_hi, p1_lo, p2_hi, p2_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet p3_hi,p3_lo ;)",
    "insertText": "fast_twosum(one, p2_hi, p2_lo, p3_hi, p3_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "twoprod(p3_hi, p3_lo, r_hi, r_lo, log2_x_hi, log2_x_lo)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct fast_accurate_exp2 { template<Packet> EIGEN_STRONG_INLINE Packet)",
    "insertText": "operator()(const Packet& x)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p4 = pset1<)",
    "insertText": "Packet(1.539513905e-4f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p3 = pset1<)",
    "insertText": "Packet(1.340007293e-3f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p2 = pset1<)",
    "insertText": "Packet(9.618283249e-3f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p1 = pset1<)",
    "insertText": "Packet(5.550328270e-2f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p0 = pset1<)",
    "insertText": "Packet(0.2402264923f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C_hi = pset1<)",
    "insertText": "Packet(0.6931471825f)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C_lo = pset1<)",
    "insertText": "Packet(2.36836577e-08f)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p_even =)",
    "insertText": "pmadd(p4, x2, p2)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p_odd =)",
    "insertText": "pmadd(p3, x2, p1)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet p_hi,p_lo ;)",
    "insertText": "twoprod(p, x, p_hi, p_lo)"
  },
  {
    "label": "twosum()",
    "kind": "Method",
    "detail": "Function (Packet q1_hi,q1_lo ;)",
    "insertText": "twosum(p_hi, p_lo, C_hi, C_lo, q1_hi, q1_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet q2_hi,q2_lo ;)",
    "insertText": "twoprod(q1_hi, q1_lo, x, q2_hi, q2_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet q3_hi,q3_lo ;)",
    "insertText": "fast_twosum(one, q2_hi, q3_hi, q3_lo)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p9 = pset1<)",
    "insertText": "Packet(4.431642109085495276e-10)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p8 = pset1<)",
    "insertText": "Packet(7.073829923303358410e-9)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p7 = pset1<)",
    "insertText": "Packet(1.017822306737031311e-7)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p6 = pset1<)",
    "insertText": "Packet(1.321543498017646657e-6)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p5 = pset1<)",
    "insertText": "Packet(1.525273342728892877e-5)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p4 = pset1<)",
    "insertText": "Packet(1.540353045780084423e-4)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p3 = pset1<)",
    "insertText": "Packet(1.333355814685869807e-3)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p2 = pset1<)",
    "insertText": "Packet(9.618129107593478832e-3)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p1 = pset1<)",
    "insertText": "Packet(5.550410866481961247e-2)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet p0 = pset1<)",
    "insertText": "Packet(0.240226506959101332)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C_hi = pset1<)",
    "insertText": "Packet(0.693147180559945286)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet C_lo = pset1<)",
    "insertText": "Packet(4.81927865669806721e-17)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p_even =)",
    "insertText": "pmadd(p8, x2, p6)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (Packet p_odd =)",
    "insertText": "pmadd(p9, x2, p7)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_even =)",
    "insertText": "pmadd(p_even, x2, p4)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_odd =)",
    "insertText": "pmadd(p_odd, x2, p5)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p_odd =)",
    "insertText": "pmadd(p_odd, x2, p3)"
  },
  {
    "label": "generic_pow_impl()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet> EIGEN_STRONG_INLINE Packet)",
    "insertText": "generic_pow_impl(const Packet& x, const Packet& y)"
  },
  {
    "label": "pfrexp()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; Packet e_x ; Packet m_x =)",
    "insertText": "pfrexp(x, e_x)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (EIGEN_CONSTEXPR Scalar sqrt_half =)",
    "insertText": "Scalar(0.70710678118654752440)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet m_x_scale_mask =)",
    "insertText": "pcmp_lt(m_x, pset1<Packet>(sqrt_half))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (m_x =)",
    "insertText": "pselect(m_x_scale_mask, pmul(pset1<Packet>(Scalar(2)), m_x), m_x)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (e_x =)",
    "insertText": "pselect(m_x_scale_mask, psub(e_x, pset1<Packet>(Scalar(1))), e_x)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Packet rx_hi,rx_lo ; accurate_log2<)",
    "insertText": "Scalar()(m_x, rx_hi, rx_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (Packet f1_hi,f1_lo,f2_hi,f2_lo ;)",
    "insertText": "twoprod(e_x, y, f1_hi, f1_lo)"
  },
  {
    "label": "twoprod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "twoprod(rx_hi, rx_lo, y, f2_hi, f2_lo)"
  },
  {
    "label": "fast_twosum()",
    "kind": "Method",
    "detail": "Function (Packet f_hi,f_lo ;)",
    "insertText": "fast_twosum(f1_hi, f1_lo, f2_hi, f2_lo, f_hi, f_lo)"
  },
  {
    "label": "absolute_split()",
    "kind": "Method",
    "detail": "Function (Packet n_z,r_z ;)",
    "insertText": "absolute_split(f_hi, n_z, r_z)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (r_z =)",
    "insertText": "padd(r_z, f_lo)"
  },
  {
    "label": "absolute_split()",
    "kind": "Method",
    "detail": "Function (Packet n_r ;)",
    "insertText": "absolute_split(r_z, n_r, r_z)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (n_z =)",
    "insertText": "padd(n_z, n_r)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const Packet e_r = fast_accurate_exp2<)",
    "insertText": "Scalar()(r_z)"
  },
  {
    "label": "generic_pow()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_UNUSED Packet)",
    "insertText": "generic_pow(const Packet& x, const Packet& y)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; const Packet cst_pos_inf = pset1<)",
    "insertText": "Packet(NumTraits<Scalar>::infinity())"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_zero = pset1<)",
    "insertText": "Packet(Scalar(0))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_one = pset1<)",
    "insertText": "Packet(Scalar(1))"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (const Packet cst_nan = pset1<)",
    "insertText": "Packet(NumTraits<Scalar>::quiet_NaN())"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (const Packet abs_x =)",
    "insertText": "pabs(x)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet x_is_zero =)",
    "insertText": "pcmp_eq(x, cst_zero)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet x_is_neg =)",
    "insertText": "pcmp_lt(x, cst_zero)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet abs_x_is_inf =)",
    "insertText": "pcmp_eq(abs_x, cst_pos_inf)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet abs_x_is_one =)",
    "insertText": "pcmp_eq(abs_x, cst_one)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet abs_x_is_gt_one =)",
    "insertText": "pcmp_lt(cst_one, abs_x)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet abs_x_is_lt_one =)",
    "insertText": "pcmp_lt(abs_x, cst_one)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (const Packet x_is_one =)",
    "insertText": "pandnot(abs_x_is_one, x_is_neg)"
  },
  {
    "label": "pand()",
    "kind": "Method",
    "detail": "Function (const Packet x_is_neg_one =)",
    "insertText": "pand(abs_x_is_one, x_is_neg)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (const Packet x_is_nan =)",
    "insertText": "pandnot(ptrue(x), pcmp_eq(x, x))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_one =)",
    "insertText": "pcmp_eq(y, cst_one)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_zero =)",
    "insertText": "pcmp_eq(y, cst_zero)"
  },
  {
    "label": "pcmp_lt()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_neg =)",
    "insertText": "pcmp_lt(y, cst_zero)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_pos =)",
    "insertText": "pandnot(ptrue(y), por(y_is_zero, y_is_neg))"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_nan =)",
    "insertText": "pandnot(ptrue(y), pcmp_eq(y, y))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet abs_y_is_inf =)",
    "insertText": "pcmp_eq(pabs(y), cst_pos_inf)"
  },
  {
    "label": "huge_exponent()",
    "kind": "Method",
    "detail": "Function (EIGEN_CONSTEXPR Scalar)",
    "insertText": "huge_exponent(NumTraits<Scalar>::max_exponent() * Scalar(EIGEN_LN2)) / NumTraits<Scalar>::epsilon()"
  },
  {
    "label": "pcmp_le()",
    "kind": "Method",
    "detail": "Function (const Packet abs_y_is_huge =)",
    "insertText": "pcmp_le(pset1<Packet>(huge_exponent), pabs(y))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_int =)",
    "insertText": "pcmp_eq(pfloor(y), y)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (const Packet y_div_2 =)",
    "insertText": "pmul(y, pset1<Packet>(Scalar(0.5)))"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (const Packet y_is_even =)",
    "insertText": "pcmp_eq(pround(y_div_2), y_div_2)"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (const Packet invalid_negative_x =)",
    "insertText": "pandnot(pandnot(pandnot(x_is_neg, abs_x_is_inf), y_is_int), abs_y_is_inf)"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (const Packet pow_is_one =)",
    "insertText": "por(por(x_is_one, y_is_zero), pand(x_is_neg_one, por(abs_y_is_inf, pandnot(y_is_even, invalid_negative_x))))"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (const Packet pow_is_nan =)",
    "insertText": "por(invalid_negative_x, por(x_is_nan, y_is_nan))"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (const Packet pow_is_zero =)",
    "insertText": "por(por(por(pand(x_is_zero, y_is_pos), pand(abs_x_is_inf, y_is_neg)), pand(pand(abs_x_is_lt_one, abs_y_is_huge), y_is_pos)), pand(pand(abs_x_is_gt_one, abs_y_is_huge), y_is_neg))"
  },
  {
    "label": "por()",
    "kind": "Method",
    "detail": "Function (const Packet pow_is_inf =)",
    "insertText": "por(por(por(pand(x_is_zero, y_is_neg), pand(abs_x_is_inf, y_is_pos)), pand(pand(abs_x_is_lt_one, abs_y_is_huge), y_is_neg)), pand(pand(abs_x_is_gt_one, abs_y_is_huge), y_is_pos))"
  },
  {
    "label": "pandnot()",
    "kind": "Method",
    "detail": "Function (const Packet negate_pow_abs =)",
    "insertText": "pandnot(x_is_neg, y_is_even)"
  },
  {
    "label": "generic_pow_impl()",
    "kind": "Method",
    "detail": "Function (const Packet pow_abs =)",
    "insertText": "generic_pow_impl(abs_x, y)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Packet,int N> struct ppolevl { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "run(const Packet& x, const typename unpacket_traits<Packet>::type coeff[])"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((N > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(x)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Packet,int N> struct pchebevl { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "run(Packet x, const typename unpacket_traits<Packet>::type coef[])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type Scalar ; Packet b0 = pset1<)",
    "insertText": "Packet(coef[0])"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (Packet b1 = pset1<)",
    "insertText": "Packet(static_cast<Scalar>(0.f))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Packet b2 ;)",
    "insertText": "for(int i = 1; i < N; i++)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (b2 = b1 ; b1 = b0 ; b0 =)",
    "insertText": "psub(pmadd(x, b1, pset1<Packet>(coef[i])), b2)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "pmul(pset1<Packet>(static_cast<Scalar>(0.5f)), psub(b0, b2))"
  }
]