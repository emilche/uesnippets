[
  {
    "label": "RtcEventLogParseStatus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogParseStatus"
  },
  {
    "label": "RtcEventLogParseStatusOr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogParseStatusOr"
  },
  {
    "label": "EventParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventParser"
  },
  {
    "label": "ValueAndPostionView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueAndPostionView"
  },
  {
    "label": "Success()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_ENCODING_PARSER_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_ENCODING_PARSER_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding . h \" class RtcEventLogParseStatus { template<T> class RtcEventLogParseStatusOr ; public : RtcEventLogParseStatus)",
    "insertText": "Success()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "Error(absl::string_view error, absl::string_view file, int line)"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ok()"
  },
  {
    "label": "ABSL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ABSL_DEPRECATED(\"Use ok() instead\") explicit operator bool()"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "message()"
  },
  {
    "label": "RtcEventLogParseStatus()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtcEventLogParseStatus(absl::string_view error, absl::string_view file, int line) : error_(std::string(error) + \" (\" + std::string(file) + \": \" + std::to_string(line) + \")\")"
  },
  {
    "label": "RtcEventLogParseStatusOr()",
    "kind": "Method",
    "detail": "Function (} std::string error_ ; } ; template<T> class RtcEventLogParseStatusOr { public :)",
    "insertText": "RtcEventLogParseStatusOr(RtcEventLogParseStatus status) : status_(status), value_()"
  },
  {
    "label": "RtcEventLogParseStatusOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtcEventLogParseStatusOr(const T& value) : status_(), value_(value)"
  },
  {
    "label": "status()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "status()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(ok())"
  },
  {
    "label": "RtcEventLogParseStatusOr()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventLogParseStatusOr() : status_()"
  },
  {
    "label": "RtcEventLogParseStatusOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtcEventLogParseStatusOr(absl::string_view error, absl::string_view file, int line) : status_(error, file, line), value_()"
  },
  {
    "label": "EventParser()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus status_ ; T value_ ; } ; namespace webrtc { class EventParser { public : struct ValueAndPostionView { rtc::ArrayView<uint64_t> values ; rtc::ArrayView<uint8_t> positions ; } ;)",
    "insertText": "EventParser()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatus)",
    "insertText": "Initialize(absl::string_view s, bool batched)"
  },
  {
    "label": "ParseStringField()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatusOr<rtc::ArrayView<absl::string_view>>)",
    "insertText": "ParseStringField(const FieldParameters& params, bool required_field = true)"
  },
  {
    "label": "ParseNumericField()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatusOr<rtc::ArrayView<uint64_t>>)",
    "insertText": "ParseNumericField(const FieldParameters& params, bool required_field = true)"
  },
  {
    "label": "ParseOptionalNumericField()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatusOr<ValueAndPostionView>)",
    "insertText": "ParseOptionalNumericField(const FieldParameters& params, bool required_field = true)"
  },
  {
    "label": "NumEventsInBatch()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "NumEventsInBatch()"
  },
  {
    "label": "ReadLittleEndian()",
    "kind": "Method",
    "detail": "Function (} private : uint64_t)",
    "insertText": "ReadLittleEndian(uint8_t bytes)"
  },
  {
    "label": "ReadVarInt()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ReadVarInt()"
  },
  {
    "label": "ReadSingleValue()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ReadSingleValue(FieldType field_type)"
  },
  {
    "label": "ReadOptionalValuePositions()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ReadOptionalValuePositions()"
  },
  {
    "label": "ReadDeltasAndPopulateValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadDeltasAndPopulateValues(FixedLengthEncodingParametersV3 params, uint64_t num_deltas, uint64_t base)"
  },
  {
    "label": "ParseNumericFieldInternal()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatus)",
    "insertText": "ParseNumericFieldInternal(uint64_t value_bit_width, FieldType field_type)"
  },
  {
    "label": "ParseStringFieldInternal()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatus)",
    "insertText": "ParseStringFieldInternal()"
  },
  {
    "label": "ParseField()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatus)",
    "insertText": "ParseField(const FieldParameters& params)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError()"
  },
  {
    "label": "Ok()",
    "kind": "Method",
    "detail": "Function (error_ = true ; } bool)",
    "insertText": "Ok()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (positions_ .)",
    "insertText": "clear()"
  },
  {
    "label": "PopulateRtcEventMember()",
    "kind": "Method",
    "detail": "Function (} bool error_ = false ; std::vector<uint8_t> positions_ ; std::vector<uint64_t> values_ ; std::vector<absl::string_view> strings_ ; absl::string_view pending_data_ ; uint64_t num_events_ = 1 ; uint64_t last_field_id_ = FieldParameters::kTimestampField ; } ; template<T,E,std::enable_if_t<std::is_integral<T>::value,bool> = true> ABSL_MUST_USE_RESULT RtcEventLogParseStatus)",
    "insertText": "PopulateRtcEventMember(const rtc::ArrayView<uint64_t> values, T E::*member, rtc::ArrayView<E> output)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t batch_size = values .)",
    "insertText": "size()"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(output.size(), batch_size)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (output [ i ] .* member = DecodeFromUnsignedToType<)",
    "insertText": "T(values[i])"
  },
  {
    "label": "PopulateRtcEventMember()",
    "kind": "Method",
    "detail": "Function (} template<T,E,std::enable_if_t<std::is_integral<T>::value,bool> = true> ABSL_MUST_USE_RESULT RtcEventLogParseStatus)",
    "insertText": "PopulateRtcEventMember(const rtc::ArrayView<uint8_t> positions, const rtc::ArrayView<uint64_t> values, absl::optional<T> E::*member, rtc::ArrayView<E> output)"
  },
  {
    "label": "RTC_CHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_LE(values.size(), batch_size)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto value_it = values .)",
    "insertText": "begin()"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(value_it != values.end())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (output [ i ] .* member = DecodeFromUnsignedToType<)",
    "insertText": "T(value_it)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (+ + value_it ; } else { output [ i ] .* member = absl::nullopt ; } })",
    "insertText": "RTC_CHECK(value_it == values.end())"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (auto result = RtcEventLogEnum<T)",
    "insertText": "Decode(values[i])"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} output [ i ] .* member = result .)",
    "insertText": "value()"
  },
  {
    "label": "PopulateRtcEventMember()",
    "kind": "Method",
    "detail": "Function (} template<E> ABSL_MUST_USE_RESULT RtcEventLogParseStatus)",
    "insertText": "PopulateRtcEventMember(const rtc::ArrayView<absl::string_view> values, std::string E::*member, rtc::ArrayView<E> output)"
  },
  {
    "label": "PopulateRtcEventTimestamp()",
    "kind": "Method",
    "detail": "Function (} template<E> ABSL_MUST_USE_RESULT RtcEventLogParseStatus)",
    "insertText": "PopulateRtcEventTimestamp(const rtc::ArrayView<uint64_t>& values, Timestamp E::*timestamp, rtc::ArrayView<E> output)"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(batch_size, output.size())"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (output [ i ] .* timestamp =)",
    "insertText": "Millis(DecodeFromUnsignedToType<int64_t>(values[i]))"
  },
  {
    "label": "ExtendLoggedBatch()",
    "kind": "Method",
    "detail": "Function (} template<E> rtc::ArrayView<E>)",
    "insertText": "ExtendLoggedBatch(std::vector<E>& output, size_t new_elements)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (output .)",
    "insertText": "insert(output.end(), old_size + new_elements, E())"
  },
  {
    "label": "subview()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<E> output_batch = output ; output_batch .)",
    "insertText": "subview(old_size)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(output_batch.size(), new_elements)"
  }
]