[
  {
    "label": "RestartBehaviour",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RestartBehaviour"
  },
  {
    "label": "LPP_CONCATENATE_HELPER_HELPER()",
    "kind": "Method",
    "detail": "Function (# pragma once # define)",
    "insertText": "LPP_CONCATENATE_HELPER_HELPER(_a, _b) _a##_b #define LPP_CONCATENATE_HELPER(_a, _b) LPP_CONCATENATE_HELPER_HELPER(_a, _b) #define LPP_CONCATENATE(_a, _b) LPP_CONCATENATE_HELPER(_a, _b) #define LPP_IDENTIFIER(_identifier) LPP_CONCATENATE(_identifier, __LINE__) #define LPP_PREPATCH_SECTION \".lpp_prepatch_hooks\" #define LPP_POSTPATCH_SECTION \".lpp_postpatch_hooks\" #define LPP_COMPILE_START_SECTION \".lpp_compile_start_hooks\" #define LPP_COMPILE_SUCCESS_SECTION \".lpp_compile_success_hooks\" #define LPP_COMPILE_ERROR_SECTION \".lpp_compile_error_hooks\" #define LPP_COMPILE_ERROR_MESSAGE_SECTION \".lpp_compile_error_message_hooks\" #define LPP_PRECOMPILE_SECTION \".lpp_precompile_hooks\" #define LPP_POSTCOMPILE_SECTION \".lpp_postcompile_hooks\" #define LPP_PREPATCH_HOOK(_function) \\ __pragma(section(LPP_PREPATCH_SECTION, read)) __declspec(allocate(LPP_PREPATCH_SECTION)) extern void (*LPP_IDENTIFIER(lpp_prepatch_hook_function))(void)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__pragma(section(LPP_PREPATCH_SECTION, read)) __declspec(allocate(LPP_PREPATCH_SECTION)) void (*LPP_IDENTIFIER(lpp_prepatch_hook_function))(void) = &_function #define LPP_POSTPATCH_HOOK(_function) \\ __pragma(section(LPP_POSTPATCH_SECTION, read)) __declspec(allocate(LPP_POSTPATCH_SECTION)) extern void (*LPP_IDENTIFIER(lpp_postpatch_hook_function))(void)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__pragma(section(LPP_POSTPATCH_SECTION, read)) __declspec(allocate(LPP_POSTPATCH_SECTION)) void (*LPP_IDENTIFIER(lpp_postpatch_hook_function))(void) = &_function #define LPP_COMPILE_START_HOOK(_function) \\ __pragma(section(LPP_COMPILE_START_SECTION, read)) __declspec(allocate(LPP_COMPILE_START_SECTION)) extern void (*LPP_IDENTIFIER(lpp_compile_start_hook_function))(void)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__pragma(section(LPP_COMPILE_START_SECTION, read)) __declspec(allocate(LPP_COMPILE_START_SECTION)) void (*LPP_IDENTIFIER(lpp_compile_start_hook_function))(void) = &_function #define LPP_COMPILE_SUCCESS_HOOK(_function) \\ __pragma(section(LPP_COMPILE_SUCCESS_SECTION, read)) __declspec(allocate(LPP_COMPILE_SUCCESS_SECTION)) extern void (*LPP_IDENTIFIER(lpp_compile_success_hook_function))(void)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__pragma(section(LPP_COMPILE_SUCCESS_SECTION, read)) __declspec(allocate(LPP_COMPILE_SUCCESS_SECTION)) void (*LPP_IDENTIFIER(lpp_compile_success_hook_function))(void) = &_function #define LPP_COMPILE_ERROR_HOOK(_function) \\ __pragma(section(LPP_COMPILE_ERROR_SECTION, read)) __declspec(allocate(LPP_COMPILE_ERROR_SECTION)) extern void (*LPP_IDENTIFIER(lpp_compile_error_hook_function))(void)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__pragma(section(LPP_COMPILE_ERROR_SECTION, read)) __declspec(allocate(LPP_COMPILE_ERROR_SECTION)) void (*LPP_IDENTIFIER(lpp_compile_error_hook_function))(void) = &_function #define LPP_COMPILE_ERROR_MESSAGE_HOOK(_function) \\ __pragma(section(LPP_COMPILE_ERROR_MESSAGE_SECTION, read)) __declspec(allocate(LPP_COMPILE_ERROR_MESSAGE_SECTION)) extern void (*LPP_IDENTIFIER(lpp_compile_error_message_hook_function))(const wchar_t*)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__pragma(section(LPP_COMPILE_ERROR_MESSAGE_SECTION, read)) __declspec(allocate(LPP_COMPILE_ERROR_MESSAGE_SECTION)) void (*LPP_IDENTIFIER(lpp_compile_error_message_hook_function))(const wchar_t*) = &_function #define LPP_PRECOMPILE_HOOK(_function) \\ __pragma(section(LPP_PRECOMPILE_SECTION, read)) \\ __declspec(allocate(LPP_PRECOMPILE_SECTION)) extern void (*LPP_IDENTIFIER(lpp_precompile_hook_function))(void) = &_function #define LPP_POSTCOMPILE_HOOK(_function) \\ __pragma(section(LPP_POSTCOMPILE_SECTION, read)) \\ __declspec(allocate(LPP_POSTCOMPILE_SECTION)) extern void (*LPP_IDENTIFIER(lpp_postcompile_hook_function))(void)"
  },
  {
    "label": "LPP_CAST()",
    "kind": "Method",
    "detail": "Function (# define LPP_NS_END } # define # define)",
    "insertText": "LPP_CAST(_type) reinterpret_cast<_type> # define LPP_NULL nullptr #else # define LPP_NS_BEGIN # define LPP_NS_END # define LPP_API static inline # define LPP_CAST(_type) (_type) # define LPP_NULL NULL #endif #define LPP_CALL1(_module, _functionName, _returnType, _args1) (LPP_CAST(_returnType (__cdecl*)(_args1))(LPP_CAST(uintptr_t)(GetProcAddress(_module, _functionName)))) #define LPP_CALL2(_module, _functionName, _returnType, _args1, _args2) (LPP_CAST(_returnType (__cdecl*)(_args1, _args2))(LPP_CAST(uintptr_t)(GetProcAddress(_module, _functionName)))) #define LPP_CALL3(_module, _functionName, _returnType, _args1, _args2, _args3) (LPP_CAST(_returnType (__cdecl*)(_args1, _args2, _args3))(LPP_CAST(uintptr_t)(GetProcAddress(_module, _functionName)))) #define LPP_CALL4(_module, _functionName, _returnType, _args1, _args2, _args3, _args4) (LPP_CAST(_returnType (__cdecl*)(_args1, _args2, _args3, _args4))(LPP_CAST(uintptr_t)(GetProcAddress(_module, _functionName)))) #define LPP_VERSION \"1.6.10\" #ifdef __clang__ # define LPP_ENABLE_OPTIMIZATIONS _Pragma(\"clang optimize on\") # define LPP_DISABLE_OPTIMIZATIONS _Pragma(\"clang optimize off\") #else # define LPP_ENABLE_OPTIMIZATIONS __pragma(optimize(\"\", on)) # define LPP_DISABLE_OPTIMIZATIONS __pragma(optimize(\"\", off)) #endif LPP_NS_BEGIN #if 0 LPP_API void lppStartup(HMODULE livePP)"
  },
  {
    "label": "lppShutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppShutdown(HMODULE livePP)"
  },
  {
    "label": "lppGetVersion()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "lppGetVersion(HMODULE livePP)"
  },
  {
    "label": "lppCheckVersion()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "lppCheckVersion(HMODULE livePP)"
  },
  {
    "label": "lppRegisterProcessGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppRegisterProcessGroup(HMODULE livePP, const char* groupName)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppRegisterProcessGroup\", void, const char*)(groupName)"
  },
  {
    "label": "lppSyncPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppSyncPoint(HMODULE livePP)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppSyncPoint\", void, void)()"
  },
  {
    "label": "lppWaitForToken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppWaitForToken(HMODULE livePP, void* token)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppWaitForToken\", void, void*)(token)"
  },
  {
    "label": "lppTriggerRecompile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppTriggerRecompile(HMODULE livePP)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppTriggerRecompile\", void, void)()"
  },
  {
    "label": "lppLogMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppLogMessage(HMODULE livePP, const wchar_t* message)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppLogMessage\", void, const wchar_t*)(message)"
  },
  {
    "label": "lppBuildPatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppBuildPatch(HMODULE livePP, const wchar_t* moduleNames[], const wchar_t* objPaths[], const wchar_t* amalgamatedObjPaths[], unsigned int count)"
  },
  {
    "label": "LPP_CALL4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL4(livePP, \"LppBuildPatch\", void, const wchar_t*[], const wchar_t*[], const wchar_t*[], unsigned int)(moduleNames, objPaths, amalgamatedObjPaths, count)"
  },
  {
    "label": "lppInstallExceptionHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppInstallExceptionHandler(HMODULE livePP)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppInstallExceptionHandler\", void, void)()"
  },
  {
    "label": "lppUseExternalBuildSystem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppUseExternalBuildSystem(HMODULE livePP)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppUseExternalBuildSystem\", void, void)()"
  },
  {
    "label": "lppTriggerRestart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppTriggerRestart(HMODULE livePP)"
  },
  {
    "label": "LPP_CALL1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL1(livePP, \"LppTriggerRestart\", int, void)()"
  },
  {
    "label": "lppWantsRestart()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "lppWantsRestart(HMODULE livePP)"
  },
  {
    "label": "lppRestart()",
    "kind": "Method",
    "detail": "Function (} # endif enum RestartBehaviour { LPP_RESTART_BEHAVIOR_REQUEST_EXIT,LPP_RESTART_BEHAVIOUR_DEFAULT_EXIT,LPP_RESTART_BEHAVIOUR_EXIT_WITH_FLUSH,LPP_RESTART_BEHAVIOUR_EXIT,LPP_RESTART_BEHAVIOUR_INSTANT_TERMINATION } ; # if 0 void)",
    "insertText": "lppRestart(HMODULE livePP, enum RestartBehaviour behaviour, unsigned int exitCode)"
  },
  {
    "label": "LPP_CALL2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL2(livePP, \"LppRestart\", void, enum RestartBehaviour, unsigned int)(behaviour, exitCode)"
  },
  {
    "label": "lppEnableModuleAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppEnableModuleAsync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppEnableModulesAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppEnableModulesAsync(HMODULE livePP, const wchar_t* namesOfExeOrDll[], unsigned int count)"
  },
  {
    "label": "lppEnableAllModulesAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppEnableAllModulesAsync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppEnableCallingModuleAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppEnableCallingModuleAsync(HMODULE livePP)"
  },
  {
    "label": "GetModuleFileNameW()",
    "kind": "Method",
    "detail": "Function (wchar_t path [ MAX_PATH ] = { 0 } ;)",
    "insertText": "GetModuleFileNameW(LPP_CAST(HMODULE)(&__ImageBase), path, MAX_PATH)"
  },
  {
    "label": "lppEnableAllCallingModulesAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppEnableAllCallingModulesAsync(HMODULE livePP)"
  },
  {
    "label": "lppEnableModuleSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppEnableModuleSync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppEnableModuleAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppEnableModuleAsync(livePP, nameOfExeOrDll)"
  },
  {
    "label": "lppWaitForToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lppWaitForToken(livePP, token)"
  },
  {
    "label": "lppEnableModulesSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppEnableModulesSync(HMODULE livePP, const wchar_t* namesOfExeOrDll[], unsigned int count)"
  },
  {
    "label": "lppEnableModulesAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppEnableModulesAsync(livePP, namesOfExeOrDll, count)"
  },
  {
    "label": "lppEnableAllModulesSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppEnableAllModulesSync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppEnableAllModulesAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppEnableAllModulesAsync(livePP, nameOfExeOrDll)"
  },
  {
    "label": "lppEnableCallingModuleSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppEnableCallingModuleSync(HMODULE livePP)"
  },
  {
    "label": "lppEnableCallingModuleAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppEnableCallingModuleAsync(livePP)"
  },
  {
    "label": "lppEnableAllCallingModulesSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppEnableAllCallingModulesSync(HMODULE livePP)"
  },
  {
    "label": "lppEnableAllCallingModulesAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppEnableAllCallingModulesAsync(livePP)"
  },
  {
    "label": "lppDisableModuleAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppDisableModuleAsync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppDisableModulesAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppDisableModulesAsync(HMODULE livePP, const wchar_t* namesOfExeOrDll[], unsigned int count)"
  },
  {
    "label": "lppDisableAllModulesAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppDisableAllModulesAsync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppDisableCallingModuleAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppDisableCallingModuleAsync(HMODULE livePP)"
  },
  {
    "label": "lppDisableAllCallingModulesAsync()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "lppDisableAllCallingModulesAsync(HMODULE livePP)"
  },
  {
    "label": "lppDisableModuleSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppDisableModuleSync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppDisableModuleAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppDisableModuleAsync(livePP, nameOfExeOrDll)"
  },
  {
    "label": "lppDisableModulesSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppDisableModulesSync(HMODULE livePP, const wchar_t* namesOfExeOrDll[], unsigned int count)"
  },
  {
    "label": "lppDisableModulesAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppDisableModulesAsync(livePP, namesOfExeOrDll, count)"
  },
  {
    "label": "lppDisableAllModulesSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppDisableAllModulesSync(HMODULE livePP, const wchar_t* nameOfExeOrDll)"
  },
  {
    "label": "lppDisableAllModulesAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppDisableAllModulesAsync(livePP, nameOfExeOrDll)"
  },
  {
    "label": "lppDisableCallingModuleSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppDisableCallingModuleSync(HMODULE livePP)"
  },
  {
    "label": "lppDisableCallingModuleAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppDisableCallingModuleAsync(livePP)"
  },
  {
    "label": "lppDisableAllCallingModulesSync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppDisableAllCallingModulesSync(HMODULE livePP)"
  },
  {
    "label": "lppDisableAllCallingModulesAsync()",
    "kind": "Method",
    "detail": "Function (void* token =)",
    "insertText": "lppDisableAllCallingModulesAsync(livePP)"
  },
  {
    "label": "lppApplySettingBool()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppApplySettingBool(HMODULE livePP, const char* settingName, int value)"
  },
  {
    "label": "LPP_CALL2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL2(livePP, \"LppApplySettingBool\", void, const char*, int)(settingName, value)"
  },
  {
    "label": "lppApplySettingInt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppApplySettingInt(HMODULE livePP, const char* settingName, int value)"
  },
  {
    "label": "LPP_CALL2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL2(livePP, \"LppApplySettingInt\", void, const char*, int)(settingName, value)"
  },
  {
    "label": "lppApplySettingString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lppApplySettingString(HMODULE livePP, const char* settingName, const wchar_t* value)"
  },
  {
    "label": "LPP_CALL2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LPP_CALL2(livePP, \"LppApplySettingString\", void, const char*, const wchar_t*)(settingName, value)"
  },
  {
    "label": "lppLoadAndRegister()",
    "kind": "Method",
    "detail": "Function (} HMODULE)",
    "insertText": "lppLoadAndRegister(const wchar_t* pathWithoutTrailingSlash, const char* groupName)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (wchar_t path [ 1 0 2 4 ] = { 0 } ; unsigned int index = 0 u ;)",
    "insertText": "while(*pathWithoutTrailingSlash != L'\\0')"
  },
  {
    "label": "FreeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeLibrary(livePP)"
  },
  {
    "label": "lppRegisterProcessGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lppRegisterProcessGroup(livePP, groupName)"
  }
]