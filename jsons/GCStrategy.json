[
  {
    "label": "PointKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PointKind"
  },
  {
    "label": "GCStrategy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCStrategy"
  },
  {
    "label": "GCModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCModuleInfo"
  },
  {
    "label": "GCStrategy()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_GCSTRATEGY_H # define LLVM_IR_GCSTRATEGY_H # include \" llvm / ADT / Optional . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Module . h \" # include \" llvm / IR / Value . h \" # include \" llvm / Support / ErrorHandling . h \" # include \" llvm / Support / Registry . h \" # include<string> namespace llvm { namespace GC { enum PointKind { PreCall,PostCall } ; } class GCStrategy { private : std::string Name ; class GCModuleInfo ; protected : bool UseStatepoints ; unsigned NeededSafePoints ; bool CustomReadBarriers ; bool CustomWriteBarriers ; bool CustomRoots ; bool InitRoots ; bool UsesMetadata ; public :)",
    "insertText": "GCStrategy()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "customRoots()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "customRoots()"
  }
]