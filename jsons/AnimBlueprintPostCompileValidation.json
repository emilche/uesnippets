[
  {
    "label": "FAnimBPCompileValidationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimBPCompileValidationParams"
  },
  {
    "label": "UAnimInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimInstance"
  },
  {
    "label": "UAnimBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintGeneratedClass"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "ANIMGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANIMGRAPH_API"
  },
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "FPCV_GatherParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPCV_GatherParams"
  },
  {
    "label": "FPCV_ReferencedAnimSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPCV_ReferencedAnimSequence"
  },
  {
    "label": "FPCV_PropertyAndValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPCV_PropertyAndValue"
  },
  {
    "label": "FAnimBPCompileValidationParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Animation / AnimSequence . h \" # include \" Animation / BlendSpace . h \" # include \" Animation / AnimBlueprintGeneratedClass . h \" # include \" Kismet2 / CompilerResultsLog . h \" # include \" AnimBlueprintPostCompileValidation . generated . h \" struct FAnimBPCompileValidationParams { const class UAnimInstance* const DefaultAnimInstance ; const class UAnimBlueprintGeneratedClass* const NewAnimBlueprintClass ; FCompilerResultsLog& MessageLog ; const TMap<FProperty*,class UAnimGraphNode_Base*>& AllocatedNodePropertiesToNodes ;)",
    "insertText": "FAnimBPCompileValidationParams(const class UAnimInstance* const InDefaultAnimInstance, const class UAnimBlueprintGeneratedClass* const InNewAnimBlueprintClass, FCompilerResultsLog& InMessageLog, const TMap<FProperty*, class UAnimGraphNode_Base*>& InAllocatedNodePropertiesToNodes ) : DefaultAnimInstance(InDefaultAnimInstance) , NewAnimBlueprintClass(InNewAnimBlueprintClass) , MessageLog(InMessageLog) , AllocatedNodePropertiesToNodes(InAllocatedNodePropertiesToNodes)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual void DoPostCompileValidation(FAnimBPCompileValidationParams& InParams)"
  },
  {
    "label": "PCV_PreloadObject()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PCV_PreloadObject(const UObject* const ReferencedObject)"
  },
  {
    "label": "PCV_GatherAnimSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCV_GatherAnimSequences(TArray<const UAnimSequence*>& OutAnimSequences, const UAnimSequenceBase* const InAnimSequenceBase)"
  },
  {
    "label": "PCV_GatherAnimSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCV_GatherAnimSequences(TArray<const UAnimSequence*>& OutAnimSequences, const class UBlendSpace* const InBlendSpace)"
  },
  {
    "label": "FPCV_GatherParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPCV_GatherParams(bool InbFilterBySyncGroup = false, FName InSyncGroupName = NAME_None, bool InbFilterByLoopingCondition = false, bool InbLoopingCondition = false ) : bFilterBySyncGroup(InbFilterBySyncGroup) , SyncGroupName(InSyncGroupName) , bFilterByLoopingCondition(InbFilterByLoopingCondition) , bLoopingCondition(InbLoopingCondition)"
  },
  {
    "label": "PCV_GatherAnimSequencesFromGraph()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "PCV_GatherAnimSequencesFromGraph(TArray<const UAnimSequence*>& OutAnimSequences, FAnimBPCompileValidationParams& PCV_Params, const FPCV_GatherParams& GatherParams)"
  },
  {
    "label": "PCV_GatherBlendSpacesFromGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCV_GatherBlendSpacesFromGraph(TArray<const class UBlendSpace*>& OutBlendSpaces, FAnimBPCompileValidationParams& PCV_Params)"
  },
  {
    "label": "FPCV_ReferencedAnimSequence()",
    "kind": "Method",
    "detail": "Function (struct FPCV_ReferencedAnimSequence { const UAnimSequence* AnimSequence ; const UObject* Referencer ;)",
    "insertText": "FPCV_ReferencedAnimSequence(const UAnimSequence* InAnimSequence, const UObject* InReferencer ) : AnimSequence(InAnimSequence) , Referencer(InReferencer)"
  },
  {
    "label": "FPCV_PropertyAndValue()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPCV_PropertyAndValue { const FProperty* Property ; const void* Value ;)",
    "insertText": "FPCV_PropertyAndValue(const FProperty* InProperty, const void* InValue ) : Property(InProperty) , Value(InValue)"
  },
  {
    "label": "PCV_GatherAllReferencedAnimSequences()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "PCV_GatherAllReferencedAnimSequences(TArray<FPCV_ReferencedAnimSequence>& OutRefAnimSequences, FAnimBPCompileValidationParams& PCV_Params)"
  },
  {
    "label": "PCV_GatherAnimSequencesFromStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCV_GatherAnimSequencesFromStruct(TArray<FPCV_ReferencedAnimSequence>& OutRefAnimSequences, FAnimBPCompileValidationParams& PCV_Params, const UStruct* InStruct, const void* InData, TArray<FPCV_PropertyAndValue> InPropertyCallChain)"
  },
  {
    "label": "PCV_GatherAnimSequencesFromProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PCV_GatherAnimSequencesFromProperty(TArray<FPCV_ReferencedAnimSequence>& OutRefAnimSequences, FAnimBPCompileValidationParams& PCV_Params, const FProperty* InProperty, const void* InData, TArray<FPCV_PropertyAndValue> InPropertyCallChain)"
  },
  {
    "label": "NeedsLoadForClient()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "NeedsLoadForClient()"
  }
]