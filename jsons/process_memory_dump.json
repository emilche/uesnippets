[
  {
    "label": "MemoryTrackerSnapshot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryTrackerSnapshot"
  },
  {
    "label": "UnguessableToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnguessableToken"
  },
  {
    "label": "TraceEventMemoryOverhead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEventMemoryOverhead"
  },
  {
    "label": "TracedValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TracedValue"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_PROCESS_MEMORY_DUMP_H_ # define BASE_TRACE_EVENT_PROCESS_MEMORY_DUMP_H_ # include<stddef . h> # include<map> # include<unordered_map> # include<vector> # include \" base / base_export . h \" # include \" base / gtest_prod_util . h \" # include \" base / trace_event / heap_profiler_allocation_context . h \" # include \" base / trace_event / memory_allocator_dump . h \" # include \" base / trace_event / memory_allocator_dump_guid . h \" # include \" base / trace_event / memory_dump_request_args . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # if !)",
    "insertText": "BUILDFLAG(IS_NACL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace protos { namespace pbzero { class MemoryTrackerSnapshot ; } } } namespace base { class UnguessableToken ; namespace trace_event { class TraceEventMemoryOverhead ; class TracedValue ; class BASE_EXPORT ProcessMemoryDump { public : struct BASE_EXPORT MemoryAllocatorDumpEdge { bool)",
    "insertText": "operator(const MemoryAllocatorDumpEdge&)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDumpGuid source ; MemoryAllocatorDumpGuid target ; int importance = 0 ; bool overridable = false ; } ; using AllocatorDumpsMap = std::map<std::string,std::unique_ptr<MemoryAllocatorDump>> ; using AllocatorDumpEdgesMap = std::map<MemoryAllocatorDumpGuid,MemoryAllocatorDumpEdge> ; # if)",
    "insertText": "defined(COUNT_RESIDENT_BYTES_SUPPORTED) static size_t GetSystemPageSize()"
  },
  {
    "label": "CountResidentBytes()",
    "kind": "Method",
    "detail": "Function (absl::optional<size_t>)",
    "insertText": "CountResidentBytes(void* start_address, size_t mapped_size)"
  },
  {
    "label": "CountResidentBytesInSharedMemory()",
    "kind": "Method",
    "detail": "Function (absl::optional<size_t>)",
    "insertText": "CountResidentBytesInSharedMemory(void* start_address, size_t mapped_size)"
  },
  {
    "label": "ProcessMemoryDump()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "ProcessMemoryDump(const MemoryDumpArgs& dump_args)"
  },
  {
    "label": "ProcessMemoryDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMemoryDump(ProcessMemoryDump&&)"
  },
  {
    "label": "ProcessMemoryDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMemoryDump(const ProcessMemoryDump&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessMemoryDump&)",
    "insertText": "operator(const ProcessMemoryDump&)"
  },
  {
    "label": "ProcessMemoryDump()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProcessMemoryDump()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessMemoryDump&)",
    "insertText": "operator(ProcessMemoryDump&&)"
  },
  {
    "label": "CreateAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "CreateAllocatorDump(const std::string& absolute_name)"
  },
  {
    "label": "CreateAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "CreateAllocatorDump(const std::string& absolute_name, const MemoryAllocatorDumpGuid& guid)"
  },
  {
    "label": "GetAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "GetAllocatorDump(const std::string& absolute_name)"
  },
  {
    "label": "GetOrCreateAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "GetOrCreateAllocatorDump(const std::string& absolute_name)"
  },
  {
    "label": "CreateSharedGlobalAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "CreateSharedGlobalAllocatorDump(const MemoryAllocatorDumpGuid& guid)"
  },
  {
    "label": "CreateWeakSharedGlobalAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "CreateWeakSharedGlobalAllocatorDump(const MemoryAllocatorDumpGuid& guid)"
  },
  {
    "label": "GetSharedGlobalAllocatorDump()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "GetSharedGlobalAllocatorDump(const MemoryAllocatorDumpGuid& guid)"
  },
  {
    "label": "allocator_dumps()",
    "kind": "Method",
    "detail": "Function (const AllocatorDumpsMap&)",
    "insertText": "allocator_dumps()"
  },
  {
    "label": "SetAllocatorDumpsForSerialization()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllocatorDumpsForSerialization(std::vector<std::unique_ptr<MemoryAllocatorDump>>)"
  },
  {
    "label": "GetAllEdgesForSerialization()",
    "kind": "Method",
    "detail": "Function (std::vector<MemoryAllocatorDumpEdge>)",
    "insertText": "GetAllEdgesForSerialization()"
  },
  {
    "label": "SetAllEdgesForSerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllEdgesForSerialization(const std::vector<MemoryAllocatorDumpEdge>&)"
  },
  {
    "label": "DumpHeapUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpHeapUsage(const std::unordered_map<base::trace_event::AllocationContext, base::trace_event::AllocationMetrics>& metrics_by_context, base::trace_event::TraceEventMemoryOverhead& overhead, const char* allocator_name)"
  },
  {
    "label": "AddOwnershipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOwnershipEdge(const MemoryAllocatorDumpGuid& source, const MemoryAllocatorDumpGuid& target, int importance)"
  },
  {
    "label": "AddOwnershipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOwnershipEdge(const MemoryAllocatorDumpGuid& source, const MemoryAllocatorDumpGuid& target)"
  },
  {
    "label": "AddOverridableOwnershipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOverridableOwnershipEdge(const MemoryAllocatorDumpGuid& source, const MemoryAllocatorDumpGuid& target, int importance)"
  },
  {
    "label": "CreateSharedMemoryOwnershipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSharedMemoryOwnershipEdge(const MemoryAllocatorDumpGuid& client_local_dump_guid, const UnguessableToken& shared_memory_guid, int importance)"
  },
  {
    "label": "CreateWeakSharedMemoryOwnershipEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWeakSharedMemoryOwnershipEdge(const MemoryAllocatorDumpGuid& client_local_dump_guid, const UnguessableToken& shared_memory_guid, int importance)"
  },
  {
    "label": "allocator_dumps_edges()",
    "kind": "Method",
    "detail": "Function (const AllocatorDumpEdgesMap&)",
    "insertText": "allocator_dumps_edges()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "TakeAllDumpsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeAllDumpsFrom(ProcessMemoryDump* other)"
  },
  {
    "label": "SerializeAllocatorDumpsInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeAllocatorDumpsInto(TracedValue* value)"
  },
  {
    "label": "SerializeAllocatorDumpsInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeAllocatorDumpsInto(perfetto::protos::pbzero::MemoryTrackerSnapshot* memory_snapshot, const base::ProcessId pid)"
  },
  {
    "label": "dump_args()",
    "kind": "Method",
    "detail": "Function (const MemoryDumpArgs&)",
    "insertText": "dump_args()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ProcessMemoryDumpTest, SharedMemoryOwnershipTest)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ProcessMemoryDumpTest, GuidsTest)"
  },
  {
    "label": "AddAllocatorDumpInternal()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "AddAllocatorDumpInternal(std::unique_ptr<MemoryAllocatorDump> mad)"
  },
  {
    "label": "process_token()",
    "kind": "Method",
    "detail": "Function (const UnguessableToken&)",
    "insertText": "process_token()"
  },
  {
    "label": "GetDumpId()",
    "kind": "Method",
    "detail": "Function (process_token_ = token ; } MemoryAllocatorDumpGuid)",
    "insertText": "GetDumpId(const std::string& absolute_name)"
  },
  {
    "label": "CreateSharedMemoryOwnershipEdgeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSharedMemoryOwnershipEdgeInternal(const MemoryAllocatorDumpGuid& client_local_dump_guid, const UnguessableToken& shared_memory_guid, int importance, bool is_weak)"
  },
  {
    "label": "GetBlackHoleMad()",
    "kind": "Method",
    "detail": "Function (MemoryAllocatorDump*)",
    "insertText": "GetBlackHoleMad(const std::string& absolute_name)"
  }
]