[
  {
    "label": "TargetTransferRateObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetTransferRateObserver"
  },
  {
    "label": "NetworkControllerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkControllerConfig"
  },
  {
    "label": "NetworkControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkControllerInterface"
  },
  {
    "label": "NetworkControllerFactoryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkControllerFactoryInterface"
  },
  {
    "label": "NetworkStateEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkStateEstimator"
  },
  {
    "label": "NetworkStateEstimatorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkStateEstimatorFactory"
  },
  {
    "label": "TargetTransferRateObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TRANSPORT_NETWORK_CONTROL_H_ # define API_TRANSPORT_NETWORK_CONTROL_H_ # include<stdint . h> # include<memory> # include \" absl / base / attributes . h \" # include \" api / field_trials_view . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / transport / network_types . h \" namespace webrtc { class TargetTransferRateObserver { public : ~)",
    "insertText": "TargetTransferRateObserver()"
  },
  {
    "label": "OnTargetTransferRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetTransferRate(TargetTransferRate)"
  },
  {
    "label": "OnStartRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartRateUpdate(DataRate)"
  },
  {
    "label": "NetworkControllerInterface()",
    "kind": "Method",
    "detail": "Function (} } ; struct NetworkControllerConfig { TargetRateConstraints constraints ; StreamsConfig stream_based_config ; const FieldTrialsView* key_value_config = nullptr ; RtcEventLog* event_log = nullptr ; } ; class NetworkControllerInterface { public : ~)",
    "insertText": "NetworkControllerInterface()"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnNetworkAvailability(NetworkAvailability)"
  },
  {
    "label": "OnNetworkRouteChange()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnNetworkRouteChange(NetworkRouteChange)"
  },
  {
    "label": "OnProcessInterval()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnProcessInterval(ProcessInterval)"
  },
  {
    "label": "OnRemoteBitrateReport()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnRemoteBitrateReport(RemoteBitrateReport)"
  },
  {
    "label": "OnRoundTripTimeUpdate()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnRoundTripTimeUpdate(RoundTripTimeUpdate)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnSentPacket(SentPacket)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnReceivedPacket(ReceivedPacket)"
  },
  {
    "label": "OnStreamsConfig()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnStreamsConfig(StreamsConfig)"
  },
  {
    "label": "OnTargetRateConstraints()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnTargetRateConstraints(TargetRateConstraints)"
  },
  {
    "label": "OnTransportLossReport()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnTransportLossReport(TransportLossReport)"
  },
  {
    "label": "OnTransportPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnTransportPacketsFeedback(TransportPacketsFeedback)"
  },
  {
    "label": "OnNetworkStateEstimate()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT NetworkControlUpdate)",
    "insertText": "OnNetworkStateEstimate(NetworkStateEstimate)"
  },
  {
    "label": "NetworkControllerFactoryInterface()",
    "kind": "Method",
    "detail": "Function (} ; class NetworkControllerFactoryInterface { public : ~)",
    "insertText": "NetworkControllerFactoryInterface()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<NetworkControllerInterface>)",
    "insertText": "Create(NetworkControllerConfig config)"
  },
  {
    "label": "GetProcessInterval()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetProcessInterval()"
  },
  {
    "label": "GetCurrentEstimate()",
    "kind": "Method",
    "detail": "Function (} ; class NetworkStateEstimator { public : absl::optional<NetworkStateEstimate>)",
    "insertText": "GetCurrentEstimate()"
  },
  {
    "label": "OnTransportPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportPacketsFeedback(const TransportPacketsFeedback&)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedPacket(const PacketResult&)"
  },
  {
    "label": "OnRouteChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRouteChange(const NetworkRouteChange&)"
  },
  {
    "label": "NetworkStateEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkStateEstimator()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class NetworkStateEstimatorFactory { public : std::unique_ptr<NetworkStateEstimator>)",
    "insertText": "Create(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "NetworkStateEstimatorFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkStateEstimatorFactory()"
  }
]