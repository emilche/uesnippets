[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMATTER_CHAR_H # define _LIBCPP___FORMAT_FORMATTER_CHAR_H # include<__availability> # include<__concepts / same_as . h> # include<__config> # include<__format / format_fwd . h> # include<__format / format_parse_context . h> # include<__format / formatter . h> # include<__format / formatter_integral . h> # include<__format / formatter_output . h> # include<__format / parser_std_format_spec . h> # include<__type_traits / conditional . h> # include<__type_traits / is_signed . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "parse(basic_format_parse_context<_CharT>& __parse_ctx) -> decltype(__parse_ctx.begin())"
  },
  {
    "label": "__parse()",
    "kind": "Method",
    "detail": "Function (auto __result = __parser_ .)",
    "insertText": "__parse(__parse_ctx, __format_spec::__fields_integral)"
  },
  {
    "label": "__process_parsed_char()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__process_parsed_char(__parser_)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "format(char __value, auto& __ctx) const -> decltype(__ctx.out()) requires(same_as<_CharT, wchar_t>)"
  }
]