[
  {
    "label": "_XINPUT_GAMEPAD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_GAMEPAD"
  },
  {
    "label": "_XINPUT_STATE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_STATE"
  },
  {
    "label": "_XINPUT_VIBRATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_VIBRATION"
  },
  {
    "label": "_XINPUT_CAPABILITIES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_CAPABILITIES"
  },
  {
    "label": "_XINPUT_BATTERY_INFORMATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_BATTERY_INFORMATION"
  },
  {
    "label": "_XINPUT_KEYSTROKE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_KEYSTROKE"
  },
  {
    "label": "XInputGetState()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputGetState(\n    __in  DWORD         dwUserIndex,  // Index of the gamer associated with the device\n    __out XINPUT_STATE* pState        // Receives the current state\n)"
  },
  {
    "label": "XInputSetState()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputSetState(\n    __in DWORD             dwUserIndex,  // Index of the gamer associated with the device\n    __in XINPUT_VIBRATION* pVibration    // The vibration information to send to the controller\n)"
  },
  {
    "label": "XInputGetCapabilities()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputGetCapabilities(\n    __in  DWORD                dwUserIndex,   // Index of the gamer associated with the device\n    __in  DWORD                dwFlags,       // Input flags that identify the device type\n    __out XINPUT_CAPABILITIES* pCapabilities  // Receives the capabilities\n)"
  },
  {
    "label": "XInputEnable()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputEnable(\n    __in BOOL enable     // [in] Indicates whether xinput is enabled or disabled. \n)"
  },
  {
    "label": "XInputGetDSoundAudioDeviceGuids()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputGetDSoundAudioDeviceGuids(\n    __in  DWORD dwUserIndex,          // Index of the gamer associated with the device\n    __out GUID* pDSoundRenderGuid,    // DSound device ID for render\n    __out GUID* pDSoundCaptureGuid    // DSound device ID for capture\n)"
  },
  {
    "label": "XInputGetBatteryInformation()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputGetBatteryInformation(\n    __in  DWORD                       dwUserIndex,        // Index of the gamer associated with the device\n    __in  BYTE                        devType,            // Which device on this user index\n    __out XINPUT_BATTERY_INFORMATION* pBatteryInformation // Contains the level and types of batteries\n)"
  },
  {
    "label": "XInputGetKeystroke()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "XInputGetKeystroke(\n    __in       DWORD dwUserIndex,              // Index of the gamer associated with the device\n    __reserved DWORD dwReserved,               // Reserved for future use\n    __out      PXINPUT_KEYSTROKE pKeystroke    // Pointer to an XINPUT_KEYSTROKE structure that receives an input event.\n)"
  }
]