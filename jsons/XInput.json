[
  {
    "label": "_XINPUT_GAMEPAD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_GAMEPAD"
  },
  {
    "label": "_XINPUT_STATE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_STATE"
  },
  {
    "label": "_XINPUT_VIBRATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_VIBRATION"
  },
  {
    "label": "_XINPUT_CAPABILITIES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_CAPABILITIES"
  },
  {
    "label": "_XINPUT_BATTERY_INFORMATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_BATTERY_INFORMATION"
  },
  {
    "label": "_XINPUT_KEYSTROKE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_XINPUT_KEYSTROKE"
  },
  {
    "label": "XInputGetState()",
    "kind": "Method",
    "detail": "Function (# ifndef _XINPUT_H_ # define _XINPUT_H_ # include<windef . h> # ifndef XINPUT_USE_9_1_0 # define XINPUT_DLL_A \" xinput1_3 . dll \" # define XINPUT_DLL_W L \" xinput1_3 . dll \" # else # define XINPUT_DLL_A \" xinput9_1_0 . dll \" # define XINPUT_DLL_W L \" xinput9_1_0 . dll \" # endif # ifdef UNICODE # define XINPUT_DLL XINPUT_DLL_W # else # define XINPUT_DLL XINPUT_DLL_A # endif # define XINPUT_DEVTYPE_GAMEPAD 0 x01 # define XINPUT_DEVSUBTYPE_GAMEPAD 0 x01 # ifndef XINPUT_USE_9_1_0 # define XINPUT_DEVSUBTYPE_WHEEL 0 x02 # define XINPUT_DEVSUBTYPE_ARCADE_STICK 0 x03 # define XINPUT_DEVSUBTYPE_FLIGHT_SICK 0 x04 # define XINPUT_DEVSUBTYPE_DANCE_PAD 0 x05 # define XINPUT_DEVSUBTYPE_GUITAR 0 x06 # define XINPUT_DEVSUBTYPE_DRUM_KIT 0 x08 # endif # define XINPUT_CAPS_VOICE_SUPPORTED 0 x0004 # define XINPUT_GAMEPAD_DPAD_UP 0 x0001 # define XINPUT_GAMEPAD_DPAD_DOWN 0 x0002 # define XINPUT_GAMEPAD_DPAD_LEFT 0 x0004 # define XINPUT_GAMEPAD_DPAD_RIGHT 0 x0008 # define XINPUT_GAMEPAD_START 0 x0010 # define XINPUT_GAMEPAD_BACK 0 x0020 # define XINPUT_GAMEPAD_LEFT_THUMB 0 x0040 # define XINPUT_GAMEPAD_RIGHT_THUMB 0 x0080 # define XINPUT_GAMEPAD_LEFT_SHOULDER 0 x0100 # define XINPUT_GAMEPAD_RIGHT_SHOULDER 0 x0200 # define XINPUT_GAMEPAD_A 0 x1000 # define XINPUT_GAMEPAD_B 0 x2000 # define XINPUT_GAMEPAD_X 0 x4000 # define XINPUT_GAMEPAD_Y 0 x8000 # define XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE 7 8 4 9 # define XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE 8 6 8 9 # define XINPUT_GAMEPAD_TRIGGER_THRESHOLD 3 0 # define XINPUT_FLAG_GAMEPAD 0 x00000001 # ifndef XINPUT_USE_9_1_0 # define BATTERY_DEVTYPE_GAMEPAD 0 x00 # define BATTERY_DEVTYPE_HEADSET 0 x01 # define BATTERY_TYPE_DISCONNECTED 0 x00 # define BATTERY_TYPE_WIRED 0 x01 # define BATTERY_TYPE_ALKALINE 0 x02 # define BATTERY_TYPE_NIMH 0 x03 # define BATTERY_TYPE_UNKNOWN 0 xFF # define BATTERY_LEVEL_EMPTY 0 x00 # define BATTERY_LEVEL_LOW 0 x01 # define BATTERY_LEVEL_MEDIUM 0 x02 # define BATTERY_LEVEL_FULL 0 x03 # define XUSER_MAX_COUNT 4 # define XUSER_INDEX_ANY 0 x000000FF # define VK_PAD_A 0 x5800 # define VK_PAD_B 0 x5801 # define VK_PAD_X 0 x5802 # define VK_PAD_Y 0 x5803 # define VK_PAD_RSHOULDER 0 x5804 # define VK_PAD_LSHOULDER 0 x5805 # define VK_PAD_LTRIGGER 0 x5806 # define VK_PAD_RTRIGGER 0 x5807 # define VK_PAD_DPAD_UP 0 x5810 # define VK_PAD_DPAD_DOWN 0 x5811 # define VK_PAD_DPAD_LEFT 0 x5812 # define VK_PAD_DPAD_RIGHT 0 x5813 # define VK_PAD_START 0 x5814 # define VK_PAD_BACK 0 x5815 # define VK_PAD_LTHUMB_PRESS 0 x5816 # define VK_PAD_RTHUMB_PRESS 0 x5817 # define VK_PAD_LTHUMB_UP 0 x5820 # define VK_PAD_LTHUMB_DOWN 0 x5821 # define VK_PAD_LTHUMB_RIGHT 0 x5822 # define VK_PAD_LTHUMB_LEFT 0 x5823 # define VK_PAD_LTHUMB_UPLEFT 0 x5824 # define VK_PAD_LTHUMB_UPRIGHT 0 x5825 # define VK_PAD_LTHUMB_DOWNRIGHT 0 x5826 # define VK_PAD_LTHUMB_DOWNLEFT 0 x5827 # define VK_PAD_RTHUMB_UP 0 x5830 # define VK_PAD_RTHUMB_DOWN 0 x5831 # define VK_PAD_RTHUMB_RIGHT 0 x5832 # define VK_PAD_RTHUMB_LEFT 0 x5833 # define VK_PAD_RTHUMB_UPLEFT 0 x5834 # define VK_PAD_RTHUMB_UPRIGHT 0 x5835 # define VK_PAD_RTHUMB_DOWNRIGHT 0 x5836 # define VK_PAD_RTHUMB_DOWNLEFT 0 x5837 # define XINPUT_KEYSTROKE_KEYDOWN 0 x0001 # define XINPUT_KEYSTROKE_KEYUP 0 x0002 # define XINPUT_KEYSTROKE_REPEAT 0 x0004 # endif typedef struct _XINPUT_GAMEPAD { WORD wButtons ; BYTE bLeftTrigger ; BYTE bRightTrigger ; SHORT sThumbLX ; SHORT sThumbLY ; SHORT sThumbRX ; SHORT sThumbRY ; } XINPUT_GAMEPAD,* PXINPUT_GAMEPAD ; typedef struct _XINPUT_STATE { DWORD dwPacketNumber ; XINPUT_GAMEPAD Gamepad ; } XINPUT_STATE,* PXINPUT_STATE ; typedef struct _XINPUT_VIBRATION { WORD wLeftMotorSpeed ; WORD wRightMotorSpeed ; } XINPUT_VIBRATION,* PXINPUT_VIBRATION ; typedef struct _XINPUT_CAPABILITIES { BYTE Type ; BYTE SubType ; WORD Flags ; XINPUT_GAMEPAD Gamepad ; XINPUT_VIBRATION Vibration ; } XINPUT_CAPABILITIES,* PXINPUT_CAPABILITIES ; # ifndef XINPUT_USE_9_1_0 typedef struct _XINPUT_BATTERY_INFORMATION { BYTE BatteryType ; BYTE BatteryLevel ; } XINPUT_BATTERY_INFORMATION,* PXINPUT_BATTERY_INFORMATION ; typedef struct _XINPUT_KEYSTROKE { WORD VirtualKey ; WCHAR Unicode ; WORD Flags ; BYTE UserIndex ; BYTE HidCode ; } XINPUT_KEYSTROKE,* PXINPUT_KEYSTROKE ; # endif # ifdef __cplusplus \" C \" { # endif DWORD WINAPI)",
    "insertText": "XInputGetState(__in DWORD dwUserIndex, __out XINPUT_STATE* pState)"
  },
  {
    "label": "XInputSetState()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "XInputSetState(__in DWORD dwUserIndex, __in XINPUT_VIBRATION* pVibration)"
  },
  {
    "label": "XInputGetCapabilities()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "XInputGetCapabilities(__in DWORD dwUserIndex, __in DWORD dwFlags, __out XINPUT_CAPABILITIES* pCapabilities)"
  },
  {
    "label": "XInputEnable()",
    "kind": "Method",
    "detail": "Function (void WINAPI)",
    "insertText": "XInputEnable(__in BOOL enable)"
  },
  {
    "label": "XInputGetDSoundAudioDeviceGuids()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "XInputGetDSoundAudioDeviceGuids(__in DWORD dwUserIndex, __out GUID* pDSoundRenderGuid, __out GUID* pDSoundCaptureGuid)"
  },
  {
    "label": "XInputGetBatteryInformation()",
    "kind": "Method",
    "detail": "Function (# ifndef XINPUT_USE_9_1_0 DWORD WINAPI)",
    "insertText": "XInputGetBatteryInformation(__in DWORD dwUserIndex, __in BYTE devType, __out XINPUT_BATTERY_INFORMATION* pBatteryInformation)"
  },
  {
    "label": "XInputGetKeystroke()",
    "kind": "Method",
    "detail": "Function (DWORD WINAPI)",
    "insertText": "XInputGetKeystroke(__in DWORD dwUserIndex, __reserved DWORD dwReserved, __out PXINPUT_KEYSTROKE pKeystroke)"
  }
]