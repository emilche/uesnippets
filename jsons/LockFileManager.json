[
  {
    "label": "LockFileManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LockFileManager"
  },
  {
    "label": "LockFileState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LockFileState"
  },
  {
    "label": "WaitForUnlockResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WaitForUnlockResult"
  },
  {
    "label": "LockFileManager()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_LOCKFILEMANAGER_H # define LLVM_SUPPORT_LOCKFILEMANAGER_H # include \" llvm / ADT / Optional . h \" # include \" llvm / ADT / SmallString . h \" # include \" llvm / ADT / StringRef . h \" # include<system_error> # include<utility> namespace llvm { class LockFileManager { public : enum LockFileState { LFS_Owned,LFS_Shared,LFS_Error } ; enum WaitForUnlockResult { Res_Success,Res_OwnerDied,Res_Timeout } ; private : SmallString<1 2 8> FileName ; SmallString<1 2 8> LockFileName ; SmallString<1 2 8> UniqueLockFileName ; Optional<std::pair<std::string,int>> Owner ; Optional<std::error_code> Error ;)",
    "insertText": "LockFileManager(const LockFileManager &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LockFileManager&)",
    "insertText": "operator(const LockFileManager &)"
  },
  {
    "label": "readLockFile()",
    "kind": "Method",
    "detail": "Function (Optional<std::pair<std::string,int>>)",
    "insertText": "readLockFile(StringRef LockFileName)"
  },
  {
    "label": "processStillExecuting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "processStillExecuting(StringRef Hostname, int PID)"
  },
  {
    "label": "LockFileManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LockFileManager(StringRef FileName)"
  },
  {
    "label": "LockFileManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LockFileManager()"
  },
  {
    "label": "getState()",
    "kind": "Method",
    "detail": "Function (LockFileState)",
    "insertText": "getState()"
  },
  {
    "label": "LockFileState()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "LockFileState()"
  },
  {
    "label": "waitForUnlock()",
    "kind": "Method",
    "detail": "Function (} WaitForUnlockResult)",
    "insertText": "waitForUnlock()"
  },
  {
    "label": "unsafeRemoveLockFile()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "unsafeRemoveLockFile()"
  }
]