[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_ # include<iosfwd> # include<vector> # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - string . h \")",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\)"
  },
  {
    "label": "TestPartResult()",
    "kind": "Method",
    "detail": "Function (class GTEST_API_ TestPartResult { public : enum Type { kSuccess,kNonFatalFailure,kFatalFailure,kSkip } ;)",
    "insertText": "TestPartResult(Type a_type, const char* a_file_name, int a_line_number, const char* a_message) : type_(a_type), file_name_(a_file_name == nullptr ? \"\" : a_file_name), line_number_(a_line_number), summary_(ExtractSummary(a_message)), message_(a_message)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "type()"
  },
  {
    "label": "line_number()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "line_number()"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "message()"
  },
  {
    "label": "skipped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "skipped()"
  },
  {
    "label": "ExtractSummary()",
    "kind": "Method",
    "detail": "Function (} private : Type type_ ; std::string)",
    "insertText": "ExtractSummary(const char* message)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::string file_name_ ; int line_number_ ; std::string summary_ ; std::string message_ ; } ; std::ostream&)",
    "insertText": "operator(std::ostream& os, const TestPartResult& result)"
  },
  {
    "label": "TestPartResultArray()",
    "kind": "Method",
    "detail": "Function (class GTEST_API_ TestPartResultArray { public :)",
    "insertText": "TestPartResultArray()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const TestPartResult& result)"
  },
  {
    "label": "GetTestPartResult()",
    "kind": "Method",
    "detail": "Function (const TestPartResult&)",
    "insertText": "GetTestPartResult(int index)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "size()"
  },
  {
    "label": "TestPartResultArray()",
    "kind": "Method",
    "detail": "Function (private : std::vector<TestPartResult> array_ ;)",
    "insertText": "TestPartResultArray(const TestPartResultArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestPartResultArray&)",
    "insertText": "operator(const TestPartResultArray&)"
  },
  {
    "label": "TestPartResultReporterInterface()",
    "kind": "Method",
    "detail": "Function (} ; class GTEST_API_ TestPartResultReporterInterface { public : ~)",
    "insertText": "TestPartResultReporterInterface()"
  },
  {
    "label": "ReportTestPartResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportTestPartResult(const TestPartResult& result)"
  },
  {
    "label": "HasNewFatalFailureHelper()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { class GTEST_API_ HasNewFatalFailureHelper : public TestPartResultReporterInterface { public :)",
    "insertText": "HasNewFatalFailureHelper()"
  },
  {
    "label": "has_new_fatal_failure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_new_fatal_failure()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HasNewFatalFailureHelper&)",
    "insertText": "operator(const HasNewFatalFailureHelper&)"
  }
]