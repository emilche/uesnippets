[
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve"
  },
  {
    "label": "FNURBSSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNURBSSurface"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FRuledSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Surfaces / Surface . h \" namespace UE::CADKernel { class FCurve ; class FNURBSSurface ; class FRuledSurface : public FSurface { FEntity ; protected : TSharedPtr<FCurve> Curves [ 2 ] ;)",
    "insertText": "FRuledSurface(const double InToleranceGeometric, TSharedPtr<FCurve> InCurveU, TSharedPtr<FCurve> InCurveV) : FSurface(InToleranceGeometric, 0., 1., 0., 1.)"
  },
  {
    "label": "ComputeDefaultMinToleranceIso()",
    "kind": "Method",
    "detail": "Function (Curves [ 0 ] = InCurveU ; Curves [ 1 ] = InCurveV ;)",
    "insertText": "ComputeDefaultMinToleranceIso()"
  },
  {
    "label": "FRuledSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRuledSurface()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, Curves[0])"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, Curves[1])"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FPoint2D& InSurfacicCoordinate, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& Coordinates, FSurfacicSampling& OutPoints, bool bComputeNormals = false)"
  },
  {
    "label": "LinesNotDerivables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinesNotDerivables(const FSurfacicBoundary& Bounds, int32 InDerivativeOrder, FCoordinateGrid& OutCoordinates)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(const FSurfacicBoundary& InBoundaries, FCoordinateGrid& OutCoordinates)"
  }
]