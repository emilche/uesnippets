[
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "FMainFrameDeveloperTool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMainFrameDeveloperTool"
  },
  {
    "label": "IMainFrameModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMainFrameModule"
  },
  {
    "label": "FMainMRUFavoritesList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMainMRUFavoritesList"
  },
  {
    "label": "CreateDefaultMainFrame()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Widgets / SWidget . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" class FTabManager ; class SWindow ; struct FToolMenuContext ; struct FMainFrameDeveloperTool { TAttribute<EVisibility> Visibility ; TAttribute<FText> Label ; TAttribute<FText> Value ; } ; class IMainFrameModule : public IModuleInterface { public : void)",
    "insertText": "CreateDefaultMainFrame(const bool bStartImmersive, const bool bStartPIE)"
  },
  {
    "label": "RecreateDefaultMainFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateDefaultMainFrame(const bool bStartImmersive, const bool bStartPIE)"
  },
  {
    "label": "IsRecreatingDefaultMainFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecreatingDefaultMainFrame()"
  },
  {
    "label": "MakeMainMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeMainMenu(const TSharedPtr<FTabManager>& TabManager, const FName MenuName, FToolMenuContext& ToolMenuContext)"
  },
  {
    "label": "MakeDeveloperTools()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeDeveloperTools(const TArray<FMainFrameDeveloperTool>& AdditionalTools)"
  },
  {
    "label": "IsWindowInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindowInitialized()"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMainTab(const TSharedRef<SDockTab>& MainTab)"
  },
  {
    "label": "EnableTabClosedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTabClosedDelegate()"
  },
  {
    "label": "DisableTabClosedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableTabClosedDelegate()"
  },
  {
    "label": "RequestCloseEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCloseEditor()"
  },
  {
    "label": "SetLevelNameForWindowTitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelNameForWindowTitle(const FString& InLevelFileName)"
  },
  {
    "label": "SetApplicationTitleOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplicationTitleOverride(const FText& NewOverriddenApplicationTitle)"
  },
  {
    "label": "GetLoadedLevelName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLoadedLevelName()"
  },
  {
    "label": "GetMainFrameCommandBindings()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FUICommandList>&)",
    "insertText": "GetMainFrameCommandBindings()"
  },
  {
    "label": "GetMRUFavoritesList()",
    "kind": "Method",
    "detail": "Function (class FMainMRUFavoritesList*)",
    "insertText": "GetMRUFavoritesList()"
  },
  {
    "label": "GetApplicationTitle()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetApplicationTitle(const bool bIncludeGameName)"
  },
  {
    "label": "ShowAboutWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAboutWindow()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(IMainFrameModule, FMainFrameCreationFinishedEvent, TSharedPtr<SWindow>, bool)"
  },
  {
    "label": "OnMainFrameCreationFinished()",
    "kind": "Method",
    "detail": "Function (FMainFrameCreationFinishedEvent&)",
    "insertText": "OnMainFrameCreationFinished()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(IMainFrameModule, FMainFrameSDKNotInstalled, const FString&, const FString&)"
  },
  {
    "label": "OnMainFrameSDKNotInstalled()",
    "kind": "Method",
    "detail": "Function (FMainFrameSDKNotInstalled&)",
    "insertText": "OnMainFrameSDKNotInstalled()"
  },
  {
    "label": "BroadcastMainFrameSDKNotInstalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMainFrameSDKNotInstalled(const FString& PlatformName, const FString& DocLink)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(IMainFrameModule, FMainFrameRequestResource, const FString&, const FString&)"
  },
  {
    "label": "OnMainFrameRequestResource()",
    "kind": "Method",
    "detail": "Function (FMainFrameRequestResource&)",
    "insertText": "OnMainFrameRequestResource()"
  },
  {
    "label": "BroadcastMainFrameRequestResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMainFrameRequestResource(const FString& Category, const FString& ResourceName)"
  },
  {
    "label": "EnableDelayedShowMainFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDelayedShowMainFrame()"
  },
  {
    "label": "ShowDelayedMainFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDelayedMainFrame()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FMainFrameCanCloseEditor)"
  },
  {
    "label": "RegisterCanCloseEditor()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterCanCloseEditor(const FMainFrameCanCloseEditor& InDelegate)"
  },
  {
    "label": "UnregisterCanCloseEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCanCloseEditor(FDelegateHandle InHandle)"
  },
  {
    "label": "ExecuteCanCloseEditorDelegates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecuteCanCloseEditorDelegates()"
  },
  {
    "label": "SetEditorSettingsDefaultSelectionOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorSettingsDefaultSelectionOverride(FName CategoryName = FName(), FName SectionName = FName())"
  },
  {
    "label": "GetEditorSettingsDefaultSelectionOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEditorSettingsDefaultSelectionOverride(FName& OutCategoryName, FName& OutSectionName)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : IMainFrameModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IMainFrameModule()",
    "kind": "Method",
    "detail": "Function (const FName MainFrameModuleName = \" MainFrame \" ; return FModuleManager::LoadModuleChecked<)",
    "insertText": "IMainFrameModule(MainFrameModuleName)"
  },
  {
    "label": "IMainFrameModule()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "IMainFrameModule()"
  }
]