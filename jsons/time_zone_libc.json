[
  {
    "label": "TimeZoneLibC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneLibC"
  },
  {
    "label": "TimeZoneLibC()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_LIBC_H_ # define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_LIBC_H_ # include<string> # include \" absl / base / config . h \" # include \" time_zone_if . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { class TimeZoneLibC : public TimeZoneIf { public :)",
    "insertText": "TimeZoneLibC(const std::string& name)"
  },
  {
    "label": "BreakTime()",
    "kind": "Method",
    "detail": "Function (time_zone::absolute_lookup)",
    "insertText": "BreakTime(const time_point<seconds>& tp)"
  },
  {
    "label": "MakeTime()",
    "kind": "Method",
    "detail": "Function (time_zone::civil_lookup)",
    "insertText": "MakeTime(const civil_second& cs)"
  },
  {
    "label": "NextTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "PrevTransition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrevTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Version()"
  },
  {
    "label": "Description()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Description()"
  }
]