[
  {
    "label": "FGenericAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericAccessibleMessageHandler"
  },
  {
    "label": "FSlateApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplication"
  },
  {
    "label": "IAnalyticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsProvider"
  },
  {
    "label": "ICursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICursor"
  },
  {
    "label": "IInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputInterface"
  },
  {
    "label": "ITextInputMethodSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodSystem"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FModifierKeysState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModifierKeysState"
  },
  {
    "label": "FPlatformRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformRect"
  },
  {
    "label": "FMonitorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMonitorInfo"
  },
  {
    "label": "FDisplayMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayMetrics"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "FromBools()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / IntPoint . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" Templates / SharedPointer . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" GenericPlatform / GenericWindowDefinition . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # if WITH_ACCESSIBILITY # include \" GenericPlatform / Accessibility / GenericAccessibleInterfaces . h \" # endif # endif class FGenericAccessibleMessageHandler ; class FSlateApplication ; class IAnalyticsProvider ; class ICursor ; class IInputInterface ; class ITextInputMethodSystem ; namespace EModifierKey { typedef uint8 Type ; const Type None = 0 ; const Type Control = 1<<0 ; const Type Alt = 1<<1 ; const Type Shift = 1<<2 ; const Type Command = 1<<3 ; EModifierKey::Type)",
    "insertText": "FromBools(const bool bControl, const bool bAlt, const bool bShift, const bool bCommand)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EModifierKey::Type ModifierMask = EModifierKey::None ;)",
    "insertText": "if(bControl)"
  },
  {
    "label": "FModifierKeysState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FModifierKeysState() : bIsLeftShiftDown(false), bIsRightShiftDown(false), bIsLeftControlDown(false), bIsRightControlDown(false), bIsLeftAltDown(false), bIsRightAltDown(false), bIsLeftCommandDown(false), bIsRightCommandDown(false), bAreCapsLocked(false)"
  },
  {
    "label": "IsShiftDown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShiftDown()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool AllModifersDown = true ;)",
    "insertText": "if((ModiferKeys & EModifierKey::Shift) == EModifierKey::Shift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((ModiferKeys & EModifierKey::Command) == EModifierKey::Command)"
  },
  {
    "label": "IsCommandDown()",
    "kind": "Method",
    "detail": "Function (AllModifersDown& =)",
    "insertText": "IsCommandDown()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((ModiferKeys & EModifierKey::Control) == EModifierKey::Control)"
  },
  {
    "label": "IsControlDown()",
    "kind": "Method",
    "detail": "Function (AllModifersDown& =)",
    "insertText": "IsControlDown()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((ModiferKeys & EModifierKey::Alt) == EModifierKey::Alt)"
  },
  {
    "label": "IsAltDown()",
    "kind": "Method",
    "detail": "Function (AllModifersDown& =)",
    "insertText": "IsAltDown()"
  },
  {
    "label": "AnyModifiersDown()",
    "kind": "Method",
    "detail": "Function (} return AllModifersDown ; } bool)",
    "insertText": "AnyModifiersDown()"
  },
  {
    "label": "FPlatformRect()",
    "kind": "Method",
    "detail": "Function (} private : uint16 bIsLeftShiftDown : 1 ; uint16 bIsRightShiftDown : 1 ; uint16 bIsLeftControlDown : 1 ; uint16 bIsRightControlDown : 1 ; uint16 bIsLeftAltDown : 1 ; uint16 bIsRightAltDown : 1 ; uint16 bIsLeftCommandDown : 1 ; uint16 bIsRightCommandDown : 1 ; uint16 bAreCapsLocked : 1 ; } ; struct FPlatformRect { int32 Left ; int32 Top ; int32 Right ; int32 Bottom ;)",
    "insertText": "FPlatformRect() : Left(0), Top(0), Right(0), Bottom(0)"
  },
  {
    "label": "FPlatformRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlatformRect(int32 InLeft, int32 InTop, int32 InRight, int32 InBottom) : Left(InLeft), Top(InTop), Right(InRight), Bottom(InBottom)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPlatformRect& Other)"
  },
  {
    "label": "FDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (FPlatformRect DisplayRect ; FPlatformRect WorkArea ; bool bIsPrimary = false ; int32 DPI = 0 ; } ; struct FDisplayMetrics {)",
    "insertText": "FDisplayMetrics() : TitleSafePaddingSize(0, 0, 0, 0) , ActionSafePaddingSize(0, 0, 0, 0)"
  },
  {
    "label": "RebuildDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildDisplayMetrics(OutDisplayMetrics)"
  },
  {
    "label": "RebuildDisplayMetrics()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RebuildDisplayMetrics(struct FDisplayMetrics& OutDisplayMetrics)"
  },
  {
    "label": "GetMonitorWorkAreaFromPoint()",
    "kind": "Method",
    "detail": "Function (FPlatformRect)",
    "insertText": "GetMonitorWorkAreaFromPoint(const FVector2D& Point)"
  },
  {
    "label": "PrintToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintToLog()"
  },
  {
    "label": "GetDebugTitleSafeZoneRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDebugTitleSafeZoneRatio()"
  },
  {
    "label": "GetDebugActionSafeZoneRatio()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "GetDebugActionSafeZoneRatio()"
  },
  {
    "label": "ApplyDefaultSafeZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDefaultSafeZones()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; namespace EWindowTitleAlignment { enum Type { Left,Center,Right } ; } class GenericApplication { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnConsoleCommandAdded, const FString&)"
  },
  {
    "label": "GenericApplication()",
    "kind": "Method",
    "detail": "Function (typedef FOnConsoleCommandAdded::FDelegate FOnConsoleCommandListener ;)",
    "insertText": "GenericApplication(const TSharedPtr< ICursor >& InCursor)"
  },
  {
    "label": "GenericApplication()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GenericApplication()"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageHandler(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "GetMessageHandler()",
    "kind": "Method",
    "detail": "Function (MessageHandler = InMessageHandler ; } TSharedRef<FGenericApplicationMessageHandler>)",
    "insertText": "GetMessageHandler()"
  },
  {
    "label": "GetAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGenericAccessibleMessageHandler>)",
    "insertText": "GetAccessibleMessageHandler()"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PollGameDeviceState(const float TimeDelta)"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PumpMessages(const float TimeDelta)"
  },
  {
    "label": "ProcessDeferredEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessDeferredEvents(const float TimeDelta)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const float TimeDelta)"
  },
  {
    "label": "MakeWindow()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FGenericWindow>)",
    "insertText": "MakeWindow()"
  },
  {
    "label": "InitializeWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeWindow(const TSharedRef< FGenericWindow >& Window, const TSharedRef< FGenericWindowDefinition >& InDefinition, const TSharedPtr< FGenericWindow >& InParent, const bool bShowImmediately)"
  },
  {
    "label": "SetCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCapture(const TSharedPtr< FGenericWindow >& InWindow)"
  },
  {
    "label": "GetCapture()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetCapture(void)"
  },
  {
    "label": "IsCursorDirectlyOverSlateWindow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCursorDirectlyOverSlateWindow()"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "IsUsingHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsUsingHighPrecisionMouseMode()"
  },
  {
    "label": "AddPendingConsoleCommand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPendingConsoleCommand(const FString& InCommand)"
  },
  {
    "label": "GetWorkArea()",
    "kind": "Method",
    "detail": "Function (} FPlatformRect)",
    "insertText": "GetWorkArea(const FPlatformRect& CurrentWindow)"
  },
  {
    "label": "TryCalculatePopupWindowPosition()",
    "kind": "Method",
    "detail": "Function (FPlatformRect OutRect ; OutRect . Left = 0 ; OutRect . Top = 0 ; OutRect . Right = 0 ; OutRect . Bottom = 0 ; return OutRect ; } bool)",
    "insertText": "TryCalculatePopupWindowPosition(const FPlatformRect& InAnchor, const FVector2D& InSize, const FVector2D& ProposedPlacement, const EPopUpOrientation::Type Orientation, FVector2D* const CalculatedPopUpPosition)"
  },
  {
    "label": "OnDisplayMetricsChanged()",
    "kind": "Method",
    "detail": "Function (FOnDisplayMetricsChanged&)",
    "insertText": "OnDisplayMetricsChanged()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(FSlateApplication, FVirtualKeyboardShownEvent, FPlatformRect)"
  },
  {
    "label": "OnVirtualKeyboardShown()",
    "kind": "Method",
    "detail": "Function (FVirtualKeyboardShownEvent&)",
    "insertText": "OnVirtualKeyboardShown()"
  },
  {
    "label": "OnVirtualKeyboardHidden()",
    "kind": "Method",
    "detail": "Function (FVirtualKeyboardHiddenEvent&)",
    "insertText": "OnVirtualKeyboardHidden()"
  },
  {
    "label": "OnClipboardContentChanged()",
    "kind": "Method",
    "detail": "Function (FOnClipboardContentChanged&)",
    "insertText": "OnClipboardContentChanged()"
  },
  {
    "label": "GetInputInterface()",
    "kind": "Method",
    "detail": "Function (} IInputInterface*)",
    "insertText": "GetInputInterface()"
  },
  {
    "label": "SupportsSystemHelp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsSystemHelp()"
  },
  {
    "label": "ApplicationLicenseValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ApplicationLicenseValid(FPlatformUserId PlatformUser = PLATFORMUSERID_NONE)"
  },
  {
    "label": "BroadcastDisplayMetricsChanged()",
    "kind": "Method",
    "detail": "Function (} public : const TSharedPtr<ICursor> Cursor ; protected : TSharedRef<class FGenericApplicationMessageHandler> MessageHandler ; # if WITH_ACCESSIBILITY TSharedRef<FGenericAccessibleMessageHandler> AccessibleMessageHandler ; # endif void)",
    "insertText": "BroadcastDisplayMetricsChanged(const FDisplayMetrics& InMetrics)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnDisplayMetricsChangedEvent .)",
    "insertText": "Broadcast(InMetrics)"
  }
]