[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "FKBoxElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKBoxElem"
  },
  {
    "label": "PxConvexMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PxConvexMesh"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FConvex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvex"
  },
  {
    "label": "FKConvexElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKConvexElem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" PhysicsEngine / ShapeElem . h \" # include \" Chaos / Serializable . h \" # include \" ConvexElem . generated . h \" class FPrimitiveDrawInterface ; class FMaterialRenderProxy ; struct FDynamicMeshVertex ; struct FKBoxElem ; namespace physx { class PxConvexMesh ; } namespace Chaos { class FImplicitObject ; class FConvex ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FKConvexElem()",
    "kind": "Method",
    "detail": "Function (Chaos::FConvexPtr ChaosConvex ; public : enum class EConvexDataUpdateMethod { UpdateConvexDataOnlyIfMissing = 0,AlwaysUpdateConvexData } ;)",
    "insertText": "FKConvexElem()"
  },
  {
    "label": "FKConvexElem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKConvexElem(const FKConvexElem& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const FKConvexElem&)",
    "insertText": "operator(const FKConvexElem& Other)"
  },
  {
    "label": "DrawElemWire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawElemWire(class FPrimitiveDrawInterface* PDI, const FTransform& ElemTM, const float Scale, const FColor Color)"
  },
  {
    "label": "DrawElemSolid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawElemSolid(class FPrimitiveDrawInterface* PDI, const FTransform& ElemTM, const float Scale, const FMaterialRenderProxy* MaterialRenderProxy)"
  },
  {
    "label": "AddCachedSolidConvexGeom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedSolidConvexGeom(TArray<FDynamicMeshVertex>& VertexBuffer, TArray<uint32>& IndexBuffer, const FColor VertexColor)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateElemBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateElemBox()"
  },
  {
    "label": "CalcAABB()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "CalcAABB(const FTransform& BoneTM, const FVector& Scale3D)"
  },
  {
    "label": "GetPlanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlanes(TArray<FPlane>& Planes)"
  },
  {
    "label": "HullFromPlanes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HullFromPlanes(const TArray<FPlane>& InPlanes, const TArray<FVector>& SnapVerts, float InSnapDistance = UE_SMALL_NUMBER)"
  },
  {
    "label": "ConvexFromBoxElem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvexFromBoxElem(const FKBoxElem& InBox)"
  },
  {
    "label": "BakeTransformToVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeTransformToVerts()"
  },
  {
    "label": "GetScaledVolume()",
    "kind": "Method",
    "detail": "Function (FVector::FReal)",
    "insertText": "GetScaledVolume(const FVector& Scale3D)"
  },
  {
    "label": "GetChaosConvexMesh()",
    "kind": "Method",
    "detail": "Function (const auto&)",
    "insertText": "GetChaosConvexMesh()"
  },
  {
    "label": "SetConvexMeshObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetConvexMeshObject(Chaos::FConvexPtr&& InChaosConvex, EConvexDataUpdateMethod ConvexDataUpdateMethod = EConvexDataUpdateMethod::AlwaysUpdateConvexData)"
  },
  {
    "label": "ResetChaosConvexMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetChaosConvexMesh()"
  },
  {
    "label": "ComputeChaosConvexIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeChaosConvexIndices(bool bForceCompute = false)"
  },
  {
    "label": "GetChaosConvexIndices()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetChaosConvexIndices()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTransform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Transform = InTransform ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FKConvexElem& Elem)"
  },
  {
    "label": "ScaleElem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleElem(FVector DeltaSize, float MinSize)"
  },
  {
    "label": "GetClosestPointAndNormal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetClosestPointAndNormal(const FVector& WorldPosition, const FTransform& BodyToWorldTM, FVector& ClosestWorldPosition, FVector& Normal)"
  },
  {
    "label": "GetShortestDistanceToPoint()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShortestDistanceToPoint(const FVector& WorldPosition, const FTransform& BodyToWorldTM)"
  },
  {
    "label": "CloneElem()",
    "kind": "Method",
    "detail": "Function (EAggCollisionShape::Type StaticShapeType ; private : void)",
    "insertText": "CloneElem(const FKConvexElem& Other)"
  }
]