[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "SDragAndDropVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDragAndDropVerticalBox"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FLandscapeEditorDetailCustomization_LayersBrushStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorDetailCustomization_LayersBrushStack"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_LayersBrushStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorCustomNodeBuilder_LayersBrushStack"
  },
  {
    "label": "FEdModeLandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeLandscape"
  },
  {
    "label": "FLandscapeBrushDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeBrushDragDropOp"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SBorder . h \" # include \" LandscapeEditorDetailCustomization_Layers . h \" # include \" LandscapeEdMode . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" IDetailCustomization . h \" # include \" AssetThumbnail . h \" # include \" Framework / SlateDelegates . h \" # include \" LandscapeEditorDetailCustomization_Base . h \" class FDetailWidgetRow ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class SDragAndDropVerticalBox ; class FMenuBuilder ; class FLandscapeEditorDetailCustomization_LayersBrushStack : public FLandscapeEditorDetailCustomization_Base { public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_LayersBrushStack()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeEditorCustomNodeBuilder_LayersBrushStack : public IDetailCustomNodeBuilder,public TSharedFromThis<FLandscapeEditorCustomNodeBuilder_LayersBrushStack> { public :)",
    "insertText": "FLandscapeEditorCustomNodeBuilder_LayersBrushStack(TSharedRef<FAssetThumbnailPool> ThumbnailPool)"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_LayersBrushStack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeEditorCustomNodeBuilder_LayersBrushStack()"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnRebuildChildren(FSimpleDelegate InOnRegenerateChildren)"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "GenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateRow(int32 InBrushIndex)"
  },
  {
    "label": "OnBrushContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnBrushContextMenuOpening(int32 InBrushIndex)"
  },
  {
    "label": "FillAddBrushMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAddBrushMenu(FMenuBuilder& MenuBuilder, TArray<ALandscapeBlueprintBrushBase*> Brushes)"
  },
  {
    "label": "OnToggleVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleVisibility(int32 InBrushIndex)"
  },
  {
    "label": "OnToggleAffectsHeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAffectsHeightmap(ECheckBoxState InCheckBoxState, int32 InBrushIndex)"
  },
  {
    "label": "OnToggleAffectsWeightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAffectsWeightmap(ECheckBoxState InCheckBoxState, int32 InBrushIndex)"
  },
  {
    "label": "OnToggleAffectsVisibilityLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleAffectsVisibilityLayer(ECheckBoxState InCheckBoxState, int32 InBrushIndex)"
  },
  {
    "label": "OnToggleVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleVisibility(ALandscapeBlueprintBrushBase* Brush)"
  },
  {
    "label": "GetAffectsHeightmapBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAffectsHeightmapBrush(int32 InBrushIndex)"
  },
  {
    "label": "IsAffectingHeightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAffectingHeightmap(int32 InBrushIndex)"
  },
  {
    "label": "GetAffectsWeightmapBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAffectsWeightmapBrush(int32 InBrushIndex)"
  },
  {
    "label": "IsAffectingWeightmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAffectingWeightmap(int32 InBrushIndex)"
  },
  {
    "label": "GetAffectsVisibilityLayerBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAffectsVisibilityLayerBrush(int32 InBrushIndex)"
  },
  {
    "label": "IsAffectingVisibilityLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAffectingVisibilityLayer(int32 InBrushIndex)"
  },
  {
    "label": "GetVisibilityBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetVisibilityBrush(int32 InBrushIndex)"
  },
  {
    "label": "IsBrushSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBrushSelected(int32 InBrushIndex)"
  },
  {
    "label": "IsBrushEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBrushEnabled(int32 InBrushIndex)"
  },
  {
    "label": "OnBrushSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrushSelectionChanged(int32 InBrushIndex)"
  },
  {
    "label": "GetBrushText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBrushText(int32 InBrushIndex)"
  },
  {
    "label": "GetBrushTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetBrushTextColor(int32 InBrushIndex)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (ALandscapeBlueprintBrushBase*)",
    "insertText": "GetBrush(int32 InBrushIndex)"
  },
  {
    "label": "GetBrushes()",
    "kind": "Method",
    "detail": "Function (TArray<ALandscapeBlueprintBrushBase*>)",
    "insertText": "GetBrushes()"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, int32 SlotIndex, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<SDragAndDropVerticalBox::EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, SDragAndDropVerticalBox::EItemDropZone DropZone, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(FDragDropEvent const& DragDropEvent, SDragAndDropVerticalBox::EItemDropZone DropZone, int32 SlotIndex, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeBrushDragDropOp : public FLandscapeListElementDragDropOp { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FLandscapeBrushDragDropOp, FLandscapeListElementDragDropOp) static TSharedRef<FLandscapeBrushDragDropOp> New(int32 InSlotIndexBeingDragged, SVerticalBox::FSlot* InSlotBeingDragged, TSharedPtr<SWidget> InWidgetToShow)"
  },
  {
    "label": "FLandscapeBrushDragDropOp()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FLandscapeBrushDragDropOp()"
  }
]