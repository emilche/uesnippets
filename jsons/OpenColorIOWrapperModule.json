[
  {
    "label": "FOpenColorIOWrapperEngineConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenColorIOWrapperEngineConfig"
  },
  {
    "label": "IOpenColorIOWrapperModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOpenColorIOWrapperModule"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Modules / ModuleManager . h \" # include \" Logging / LogMacros . h \" class FOpenColorIOWrapperEngineConfig ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogOpenColorIOWrapper, Log, All)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (class IOpenColorIOWrapperModule : public IModuleInterface { public : IOpenColorIOWrapperModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IOpenColorIOWrapperModule()",
    "kind": "Method",
    "detail": "Function (const FName ModuleName = \" OpenColorIOWrapper \" ; return FModuleManager::LoadModuleChecked<)",
    "insertText": "IOpenColorIOWrapperModule(ModuleName)"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FName ModuleName = \" OpenColorIOWrapper \" ; return)",
    "insertText": "Get().IsModuleLoaded(ModuleName)"
  },
  {
    "label": "GetEngineBuiltInConfig()",
    "kind": "Method",
    "detail": "Function (} # if WITH_OCIO FOpenColorIOWrapperEngineConfig&)",
    "insertText": "GetEngineBuiltInConfig()"
  },
  {
    "label": "IOpenColorIOWrapperModule()",
    "kind": "Method",
    "detail": "Function (# endif ~)",
    "insertText": "IOpenColorIOWrapperModule()"
  }
]