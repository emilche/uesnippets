[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "JSONStringValueSerializer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_JSON_JSON_STRING_VALUE_SERIALIZER_H_ # define BASE_JSON_JSON_STRING_VALUE_SERIALIZER_H_ # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / json / json_reader . h \" # include \" base / memory / raw_ptr . h \" # include \" base / strings / string_piece . h \" # include \" base / values . h \" class BASE_EXPORT JSONStringValueSerializer : public base::ValueSerializer { public :)",
    "insertText": "JSONStringValueSerializer(std::string* json_string)"
  },
  {
    "label": "JSONStringValueSerializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONStringValueSerializer(const JSONStringValueSerializer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONStringValueSerializer&)",
    "insertText": "operator(const JSONStringValueSerializer&)"
  },
  {
    "label": "JSONStringValueSerializer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JSONStringValueSerializer()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(base::ValueView root)"
  },
  {
    "label": "SerializeAndOmitBinaryValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeAndOmitBinaryValues(base::ValueView root)"
  },
  {
    "label": "set_pretty_print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_pretty_print(bool new_value)"
  },
  {
    "label": "pretty_print()",
    "kind": "Method",
    "detail": "Function (pretty_print_ = new_value ; } bool)",
    "insertText": "pretty_print()"
  },
  {
    "label": "JSONStringValueDeserializer()",
    "kind": "Method",
    "detail": "Function (raw_ptr<std::string> json_string_ ; bool pretty_print_ ; } ; class BASE_EXPORT JSONStringValueDeserializer : public base::ValueDeserializer { public :)",
    "insertText": "JSONStringValueDeserializer(const base::StringPiece& json_string, int options = base::JSON_PARSE_CHROMIUM_EXTENSIONS)"
  },
  {
    "label": "JSONStringValueDeserializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONStringValueDeserializer(const JSONStringValueDeserializer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONStringValueDeserializer&)",
    "insertText": "operator(const JSONStringValueDeserializer&)"
  },
  {
    "label": "JSONStringValueDeserializer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JSONStringValueDeserializer()"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::Value>)",
    "insertText": "Deserialize(int* error_code, std::string* error_message)"
  }
]