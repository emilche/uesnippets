[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEngineVersionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEngineVersionBase"
  },
  {
    "label": "FEngineVersionBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" enum class EVersionComponent { Major,Minor,Patch,Changelist,Branch,} ; enum class EVersionComparison { Neither,First,Second,} ; class FEngineVersionBase { public :)",
    "insertText": "FEngineVersionBase()"
  },
  {
    "label": "FEngineVersionBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEngineVersionBase(uint16 InMajor, uint16 InMinor, uint16 InPatch = 0, uint32 InChangelist = 0)"
  },
  {
    "label": "GetChangelist()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetChangelist()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "HasChangelist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChangelist()"
  },
  {
    "label": "GetNewest()",
    "kind": "Method",
    "detail": "Function (EVersionComparison)",
    "insertText": "GetNewest(const FEngineVersionBase &First, const FEngineVersionBase &Second, EVersionComponent *OutComponent)"
  },
  {
    "label": "EncodeLicenseeChangelist()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "EncodeLicenseeChangelist(uint32 Changelist)"
  }
]