[
  {
    "label": "FAssetRegistrySerializationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistrySerializationOptions"
  },
  {
    "label": "FLegacyAssetRegistryExportPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyAssetRegistryExportPath"
  },
  {
    "label": "FMarshalledText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarshalledText"
  },
  {
    "label": "FStore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStore"
  },
  {
    "label": "FStoreManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreManager"
  },
  {
    "label": "FOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptions"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FStoreData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoreData"
  },
  {
    "label": "FStoreBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreBuilder"
  },
  {
    "label": "FCaseSensitiveFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaseSensitiveFuncs"
  },
  {
    "label": "FStringIndexer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStringIndexer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncStoreLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncStoreLoader"
  },
  {
    "label": "FMarshalledText()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" AssetRegistry / AssetDataTagMap . h \" # include \" Async / Async . h \" struct FAssetRegistrySerializationOptions ; namespace FixedTagPrivate { struct FLegacyAssetRegistryExportPath { FName Class ; FName Package ; FName Object ; } ; class FMarshalledText { public :)",
    "insertText": "FMarshalledText()"
  },
  {
    "label": "FMarshalledText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMarshalledText(const FString& InString)"
  },
  {
    "label": "FMarshalledText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMarshalledText(FString&& InString)"
  },
  {
    "label": "FMarshalledText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMarshalledText(const FText& InText)"
  },
  {
    "label": "FMarshalledText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMarshalledText(FText&& InText)"
  },
  {
    "label": "GetAsComplexString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetAsComplexString()"
  },
  {
    "label": "GetAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetAsText()"
  },
  {
    "label": "CompareToCaseIgnored()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompareToCaseIgnored(const FMarshalledText& Other)"
  },
  {
    "label": "GetResourceSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetResourceSize()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (private : FString String ; } ; struct FStore { TArrayView<FNumberedPair> Pairs ; TArrayView<FNumberlessPair> NumberlessPairs ; TArrayView<uint32> AnsiStringOffsets ; TArrayView<ANSICHAR> AnsiStrings ; TArrayView<uint32> WideStringOffsets ; TArrayView<WIDECHAR> WideStrings ; TArrayView<FDisplayNameEntryId> NumberlessNames ; TArrayView<FName> Names ; TArrayView<FNumberlessExportPath> NumberlessExportPaths ; TArrayView<FAssetRegistryExportPath> ExportPaths ; TArrayView<FMarshalledText> Texts ; const uint32 Index ; void* Data = nullptr ; void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (RefCount .)",
    "insertText": "Increment()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "GetAnsiString()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR*)",
    "insertText": "GetAnsiString(uint32 Idx)"
  },
  {
    "label": "FStore()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStore()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (FThreadSafeCounter RefCount ; } ; struct FOptions { TSet<FName> StoreAsName ; TSet<FName> StoreAsPath ; } ; struct)",
    "insertText": "alignas(uint64)"
  },
  {
    "label": "MakeFullHandle()",
    "kind": "Method",
    "detail": "Function (bool bHasNumberlessKeys = false ; uint16 Num = 0 ; uint32 PairBegin = 0 ; FMapHandle)",
    "insertText": "MakeFullHandle(uint32 StoreIndex)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ToInt()"
  },
  {
    "label": "FromInt()",
    "kind": "Method",
    "detail": "Function (FPartialMapHandle)",
    "insertText": "FromInt(uint64 Int)"
  },
  {
    "label": "HashCaseSensitive()",
    "kind": "Method",
    "detail": "Function (} ; struct FStoreData { TArray<FNumberedPair> Pairs ; TArray<FNumberlessPair> NumberlessPairs ; TArray<uint32> AnsiStringOffsets ; TArray<ANSICHAR> AnsiStrings ; TArray<uint32> WideStringOffsets ; TArray<WIDECHAR> WideStrings ; TArray<FDisplayNameEntryId> NumberlessNames ; TArray<FName> Names ; TArray<FNumberlessExportPath> NumberlessExportPaths ; TArray<FAssetRegistryExportPath> ExportPaths ; TArray<FMarshalledText> Texts ; } ; uint32)",
    "insertText": "HashCaseSensitive(const TCHAR* Str, int32 Len)"
  },
  {
    "label": "HashCombineQuick()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "HashCombineQuick(uint32 A, uint32 B)"
  },
  {
    "label": "HashCombineQuick()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "HashCombineQuick(uint32 A, uint32 B, uint32 C)"
  },
  {
    "label": "FStoreBuilder()",
    "kind": "Method",
    "detail": "Function (class FStoreBuilder { public :)",
    "insertText": "FStoreBuilder(const FOptions& InOptions) : Options(InOptions)"
  },
  {
    "label": "FStoreBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStoreBuilder(FOptions&& InOptions) : Options(MoveTemp(InOptions))"
  },
  {
    "label": "AddTagMap()",
    "kind": "Method",
    "detail": "Function (} FPartialMapHandle)",
    "insertText": "AddTagMap(const FAssetDataTagMapSharedView& Map)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (FStoreData)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (private : template<ValueType> struct FCaseSensitiveFuncs : BaseKeyFuncs<ValueType,FString,false> { template<KeyType> const KeyType&)",
    "insertText": "GetSetKey(const TPair<KeyType, ValueType>& Element)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(const FString& Key)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(FNameEntryId A, FNameEntryId B)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(FName A, FName B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(FName Key)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(const FNumberlessExportPath& A, const FNumberlessExportPath& B)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(const FAssetRegistryExportPath& A, const FAssetRegistryExportPath& B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(const FNumberlessExportPath& Key)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(const FAssetRegistryExportPath& Key)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(const FMarshalledText& A, const FMarshalledText& B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(const FMarshalledText& Key)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStringIndexer { uint32 NumCharacters = 0 ; TMap<FString,uint32,FDefaultSetAllocator,FCaseSensitiveFuncs<uint32>> StringIndices ; TArray<uint32> Offsets ; uint32)",
    "insertText": "Index(FString&& String)"
  },
  {
    "label": "FlattenAsAnsi()",
    "kind": "Method",
    "detail": "Function (TArray<ANSICHAR>)",
    "insertText": "FlattenAsAnsi()"
  },
  {
    "label": "FlattenAsWide()",
    "kind": "Method",
    "detail": "Function (TArray<WIDECHAR>)",
    "insertText": "FlattenAsWide()"
  },
  {
    "label": "IndexValue()",
    "kind": "Method",
    "detail": "Function (} ; const FOptions Options ; FStringIndexer AnsiStrings ; FStringIndexer WideStrings ; TMap<FDisplayNameEntryId,uint32> NumberlessNameIndices ; TMap<FName,uint32,FDefaultSetAllocator,FCaseSensitiveFuncs<uint32>> NameIndices ; TMap<FNumberlessExportPath,uint32,FDefaultSetAllocator,FCaseSensitiveFuncs<uint32>> NumberlessExportPathIndices ; TMap<FAssetRegistryExportPath,uint32,FDefaultSetAllocator,FCaseSensitiveFuncs<uint32>> ExportPathIndices ; TMap<FMarshalledText,uint32,FDefaultSetAllocator,FCaseSensitiveFuncs<uint32>> TextIndices ; TArray<FNumberedPair> NumberedPairs ; TArray<FNumberedPair> NumberlessPairs ; bool bFinalized = false ; FValueId)",
    "insertText": "IndexValue(FName Key, FAssetTagValueRef Value)"
  },
  {
    "label": "SaveStore()",
    "kind": "Method",
    "detail": "Function (} ; enum class ELoadOrder { Member,TextFirst } ; void)",
    "insertText": "SaveStore(const FStoreData& Store, FArchive& Ar)"
  },
  {
    "label": "LoadStore()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<const FStore>)",
    "insertText": "LoadStore(FArchive& Ar, FAssetRegistryVersion::Type Version = FAssetRegistryVersion::LatestVersion)"
  },
  {
    "label": "FAsyncStoreLoader()",
    "kind": "Method",
    "detail": "Function (class FAsyncStoreLoader { public :)",
    "insertText": "FAsyncStoreLoader()"
  },
  {
    "label": "ReadInitialDataAndKickLoad()",
    "kind": "Method",
    "detail": "Function (TFuture<void>)",
    "insertText": "ReadInitialDataAndKickLoad(FArchive& Ar, uint32 MaxWorkerTasks)"
  },
  {
    "label": "LoadFinalData()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<const FStore>)",
    "insertText": "LoadFinalData(FArchive& Ar)"
  }
]