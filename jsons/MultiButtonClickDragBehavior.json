[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UMultiButtonClickDragBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMultiButtonClickDragBehavior"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BaseBehaviors / ClickDragBehavior . h \" # include \" MultiButtonClickDragBehavior . generated . h \" class UObject ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "CanBeginClickDragSequence()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "CanBeginClickDragSequence(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "OnClickPress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPress(const FInputDeviceRay& InPressPos)"
  },
  {
    "label": "OnClickDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDrag(const FInputDeviceRay& InDragPos)"
  },
  {
    "label": "OnClickRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickRelease(const FInputDeviceRay& InReleasePos)"
  },
  {
    "label": "OnTerminateDragSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTerminateDragSequence()"
  },
  {
    "label": "WantsCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureRequest)",
    "insertText": "WantsCapture(const FInputDeviceState& Input)"
  },
  {
    "label": "BeginCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "BeginCapture(const FInputDeviceState& Input, EInputCaptureSide Side)"
  },
  {
    "label": "UpdateCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "UpdateCapture(const FInputDeviceState& Input, const FInputCaptureData& Data)"
  },
  {
    "label": "FInputRayHit()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "FInputRayHit(const FInputDeviceRay& PressPos)> CanBeginClickDragFunc = [](const FInputDeviceRay&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; TUniqueFunction<)",
    "insertText": "void(const FInputDeviceRay& PressPos)> OnClickPressFunc = [](const FInputDeviceRay&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; TUniqueFunction<)",
    "insertText": "void(const FInputDeviceRay& PressPos)> OnClickDragFunc = [](const FInputDeviceRay&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; TUniqueFunction<)",
    "insertText": "void(const FInputDeviceRay& ReleasePos)> OnClickReleaseFunc = [](const FInputDeviceRay&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; TUniqueFunction<)",
    "insertText": "void()> OnTerminateFunc = []()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; TUniqueFunction<)",
    "insertText": "void(const FInputDeviceState& Input)> OnStateUpdated = [](const FInputDeviceState&)"
  },
  {
    "label": "EnableButton()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "EnableButton(const FKey& InButton)"
  },
  {
    "label": "DisableButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableButton(const FKey& InButton)"
  },
  {
    "label": "IsAnyButtonDown()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsAnyButtonDown(const FInputDeviceState& InInput)"
  },
  {
    "label": "DidAnyButtonChangeState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DidAnyButtonChangeState(const FInputDeviceState& InInput)"
  },
  {
    "label": "HandlesLeftMouseButton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlesLeftMouseButton()"
  },
  {
    "label": "HandlesMiddleMouseButton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlesMiddleMouseButton()"
  },
  {
    "label": "HandlesRightMouseButton()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlesRightMouseButton()"
  }
]