[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FTimingRegionsTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingRegionsTrack"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FTimingRegionsSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingRegionsSharedState"
  },
  {
    "label": "FTimingRegionsSharedState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / ITimingViewExtender . h \" namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights::TimingProfiler { class FTimingRegionsTrack ; class STimingView ; class FTimingRegionsSharedState : public Timing::ITimingViewExtender,public TSharedFromThis<FTimingRegionsSharedState> { class FTimingRegionsTrack ; public :)",
    "insertText": "FTimingRegionsSharedState(STimingView* InTimingView)"
  },
  {
    "label": "FTimingRegionsSharedState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingRegionsSharedState()"
  },
  {
    "label": "OnBeginSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "OnEndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(Timing::ITimingViewSession& InSession, const TraceServices::IAnalysisSession& InAnalysisSession)"
  },
  {
    "label": "ExtendOtherTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendOtherTracksFilterMenu(Timing::ITimingViewSession& InSession, FMenuBuilder& InOutMenuBuilder)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "IsRegionsTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegionsTrackVisible()"
  }
]