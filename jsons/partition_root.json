[
  {
    "label": "AllocInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocInfo"
  },
  {
    "label": "PartitionRootEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionRootEnumerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PurgeFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PurgeFlags"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "PartitionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartitionOptions"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PA_ALIGNAS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PA_ALIGNAS"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "below",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "below"
  },
  {
    "label": "Flags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Flags"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "ThreadCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCache"
  },
  {
    "label": "ScopedSyscallTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedSyscallTimer"
  },
  {
    "label": "RecordAllocOrFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordAllocOrFree(uintptr_t addr, size_t size)"
  },
  {
    "label": "DCheckIfManagedByPartitionAllocBRPPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCheckIfManagedByPartitionAllocBRPPool(uintptr_t address)"
  },
  {
    "label": "DestructForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructForTesting()"
  },
  {
    "label": "EnableMac11MallocSizeHackForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMac11MallocSizeHackForTesting()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(PartitionOptions)"
  },
  {
    "label": "EnableThreadCacheIfSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableThreadCacheIfSupported()"
  },
  {
    "label": "IsValidSlotSpan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidSlotSpan(SlotSpan* slot_span)"
  },
  {
    "label": "IncreaseCommittedPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseCommittedPages(size_t len)"
  },
  {
    "label": "DecreaseCommittedPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecreaseCommittedPages(size_t len)"
  },
  {
    "label": "OutOfMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutOfMemory(size_t size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* object)"
  },
  {
    "label": "FreeWithFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeWithFlags(unsigned int flags, void* object)"
  },
  {
    "label": "FreeNoHooks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeNoHooks(void* object)"
  },
  {
    "label": "FreeNoHooksImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeNoHooksImmediate(void* object,\n                                             SlotSpan* slot_span,\n                                             uintptr_t slot_start)"
  },
  {
    "label": "GetUsableSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetUsableSize(void* ptr)"
  },
  {
    "label": "GetUsableSizeWithMac11MallocSizeHack()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetUsableSizeWithMac11MallocSizeHack(\n      void* ptr)"
  },
  {
    "label": "PurgeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeMemory(int flags)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats(const char* partition_name,\n                 bool is_light_dump,\n                 PartitionStatsDumper* partition_stats_dumper)"
  },
  {
    "label": "DeleteForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteForTesting(PartitionRoot* partition_root)"
  },
  {
    "label": "ResetBookkeepingForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBookkeepingForTesting()"
  },
  {
    "label": "SizeToBucketIndex()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "SizeToBucketIndex(size_t size,\n                                    BucketDistribution bucket_distribution)"
  },
  {
    "label": "RawFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawFree(uintptr_t slot_start)"
  },
  {
    "label": "RawFreeWithThreadCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawFreeWithThreadCache(uintptr_t slot_start,\n                                               SlotSpan* slot_span)"
  },
  {
    "label": "PA_TS_UNCHECKED_READ()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PA_TS_UNCHECKED_READ(total_size_of_allocated_bytes)"
  },
  {
    "label": "PA_TS_UNCHECKED_READ()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PA_TS_UNCHECKED_READ(max_size_of_allocated_bytes)"
  },
  {
    "label": "EnableSortActiveSlotSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSortActiveSlotSpans()"
  },
  {
    "label": "RawAlloc()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "RawAlloc(Bucket* bucket,\n                                      unsigned int flags,\n                                      size_t raw_size,\n                                      size_t slot_span_alignment,\n                                      size_t* usable_size,\n                                      bool* is_already_zeroed)"
  },
  {
    "label": "TryReallocInPlaceForNormalBuckets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryReallocInPlaceForNormalBuckets(void* object,\n                                         SlotSpan* slot_span,\n                                         size_t new_size)"
  },
  {
    "label": "MaybeInitThreadCacheAndAlloc()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "MaybeInitThreadCacheAndAlloc(uint16_t bucket_index,\n                                         size_t* slot_size)"
  },
  {
    "label": "FreeWithFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FreeWithFlags(0, object)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (Locking)",
    "insertText": "PA_DCHECK(object)"
  },
  {
    "label": "FromFirstSuperPage()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FromFirstSuperPage(super_page)"
  },
  {
    "label": "guard()",
    "kind": "Method",
    "detail": "Function (partition_alloc::internal::ScopedGuard)",
    "insertText": "guard(lock_)"
  },
  {
    "label": "AdjustSizeForExtrasSubtract()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AdjustSizeForExtrasSubtract(slot_span->bucket->slot_size)"
  },
  {
    "label": "AllocFromBucket()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllocFromBucket(bucket, flags, raw_size, slot_span_alignment,\n                         usable_size, is_already_zeroed)"
  },
  {
    "label": "AllocWithFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllocWithFlags(0, requested_size, type_name)"
  },
  {
    "label": "ReallocWithFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ReallocWithFlags(0, ptr, new_size, type_name)"
  },
  {
    "label": "ReallocWithFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ReallocWithFlags(AllocFlags::kReturnNull, ptr, new_size, type_name)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "PA_DCHECK(PartitionRoot<thread_safe>::initialized)"
  }
]