[
  {
    "label": "VlogInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VlogInfo"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedLoggingSettings()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SCOPED_LOGGING_SETTINGS_H_ # define BASE_TEST_SCOPED_LOGGING_SETTINGS_H_ # include<memory> # include \" base / base_export . h \" # include \" base / files / file_path . h \" # include \" base / logging . h \" # include \" base / memory / raw_ptr . h \" # include \" build / chromeos_buildflags . h \" namespace logging { class VlogInfo ; class BASE_EXPORT ScopedLoggingSettings { public :)",
    "insertText": "ScopedLoggingSettings()"
  },
  {
    "label": "ScopedLoggingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedLoggingSettings(const ScopedLoggingSettings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedLoggingSettings&)",
    "insertText": "operator(const ScopedLoggingSettings&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) void SetLogFormat(LogFormat)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif private : const int min_log_level_ ; const uint32_t logging_destination_ ; # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "ScopedVmoduleSwitches()",
    "kind": "Method",
    "detail": "Function (# endif std::unique_ptr<base::FilePath::StringType> log_file_name_ ; const bool enable_process_id_ ; const bool enable_thread_id_ ; const bool enable_timestamp_ ; const bool enable_tickcount_ ; const char* const log_prefix_ ; const LogMessageHandlerFunction message_handler_ ; } ; class BASE_EXPORT ScopedVmoduleSwitches { public :)",
    "insertText": "ScopedVmoduleSwitches()"
  },
  {
    "label": "InitWithSwitches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithSwitches(const std::string& vmodule_switch)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "BUILDFLAG(USE_RUNTIME_VLOG) VlogInfo* CreateVlogInfoWithSwitches(const std::string& vmodule_switch)"
  }
]