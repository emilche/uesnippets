[
  {
    "label": "MockAudioEncoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockAudioEncoderFactory"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_MOCK_AUDIO_ENCODER_FACTORY_H_ # define TEST_MOCK_AUDIO_ENCODER_FACTORY_H_ # include<memory> # include<vector> # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / make_ref_counted . h \" # include \" api / scoped_refptr . h \" # include \" test / gmock . h \" namespace webrtc { class MockAudioEncoderFactory : public::testing::NiceMock<AudioEncoderFactory> { public :)",
    "insertText": "MOCK_METHOD(std::vector<AudioCodecSpec>, GetSupportedEncoders, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<AudioCodecInfo>, QueryAudioEncoder, (const SdpAudioFormat& format), (override))"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioEncoder>)",
    "insertText": "MakeAudioEncoder(int payload_type, const SdpAudioFormat& format, absl::optional<AudioCodecPairId> codec_pair_id)"
  },
  {
    "label": "MakeAudioEncoderMock()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioEncoder> return_value ;)",
    "insertText": "MakeAudioEncoderMock(payload_type, format, codec_pair_id, &return_value)"
  },
  {
    "label": "CreateUnusedFactory()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::MockAudioEncoderFactory>)",
    "insertText": "CreateUnusedFactory()"
  },
  {
    "label": "MockAudioEncoderFactory()",
    "kind": "Method",
    "detail": "Function (using::testing::_ ; using::testing::AnyNumber ; using::testing::Return ; auto factory = rtc::make_ref_counted<)",
    "insertText": "MockAudioEncoderFactory()"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*factory.get(), GetSupportedEncoders()) .WillByDefault(Return(std::vector<webrtc::AudioCodecSpec>()))"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*factory.get(), QueryAudioEncoder(_)) .WillByDefault(Return(absl::nullopt))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), GetSupportedEncoders()).Times(AnyNumber())"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), QueryAudioEncoder(_)).Times(AnyNumber())"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), MakeAudioEncoderMock(_, _, _, _)).Times(0)"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*factory.get(), MakeAudioEncoderMock(_, _, _, _)) .WillByDefault(SetArgPointee<3>(nullptr))"
  },
  {
    "label": "EXPECT_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_CALL(*factory.get(), MakeAudioEncoderMock(_, _, _, _)) .Times(AnyNumber())"
  }
]