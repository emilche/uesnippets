[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFFTSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFFTSettings"
  },
  {
    "label": "IFFTAlgorithm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFFTAlgorithm"
  },
  {
    "label": "IFFTAlgorithmFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFFTAlgorithmFactory"
  },
  {
    "label": "FFFTFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFFTFactory"
  },
  {
    "label": "IFFTAlgorithm()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" namespace Audio { enum class EFFTScaling : uint8 { None,MultipliedByFFTSize,MultipliedBySqrtFFTSize,DividedByFFTSize,DividedBySqrtFFTSize,} ; struct FFFTSettings { int32 Log2Size ; bool bArrays128BitAligned ; bool bEnableHardwareAcceleration ; } ; class IFFTAlgorithm { public : ~)",
    "insertText": "IFFTAlgorithm()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Size()"
  },
  {
    "label": "NumInputFloats()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumInputFloats()"
  },
  {
    "label": "NumOutputFloats()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "NumOutputFloats()"
  },
  {
    "label": "ForwardScaling()",
    "kind": "Method",
    "detail": "Function (} EFFTScaling)",
    "insertText": "ForwardScaling()"
  },
  {
    "label": "InverseScaling()",
    "kind": "Method",
    "detail": "Function (EFFTScaling)",
    "insertText": "InverseScaling()"
  },
  {
    "label": "ForwardRealToComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardRealToComplex(const float* RESTRICT InReal, float* RESTRICT OutComplex)"
  },
  {
    "label": "InverseComplexToReal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InverseComplexToReal(const float* RESTRICT InComplex, float* RESTRICT OutReal)"
  },
  {
    "label": "BatchForwardRealToComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchForwardRealToComplex(int32 InCount, const float* const RESTRICT InReal[], float* RESTRICT OutComplex[])"
  },
  {
    "label": "BatchInverseComplexToReal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchInverseComplexToReal(int32 InCount, const float* const RESTRICT InComplex[], float* RESTRICT OutReal[])"
  },
  {
    "label": "IFFTAlgorithmFactory()",
    "kind": "Method",
    "detail": "Function (} ; class IFFTAlgorithmFactory : public IModularFeature { public : ~)",
    "insertText": "IFFTAlgorithmFactory()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} const FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "GetFactoryName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFactoryName()"
  },
  {
    "label": "IsHardwareAccelerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareAccelerated()"
  },
  {
    "label": "Expects128BitAlignedArrays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Expects128BitAlignedArrays()"
  },
  {
    "label": "AreFFTSettingsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreFFTSettingsSupported(const FFFTSettings& InSettings)"
  },
  {
    "label": "NewFFTAlgorithm()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IFFTAlgorithm>)",
    "insertText": "NewFFTAlgorithm(const FFFTSettings& InSettings)"
  },
  {
    "label": "NewFFTAlgorithm()",
    "kind": "Method",
    "detail": "Function (} ; class FFFTFactory { public : const FName AnyAlgorithmFactory ; TUniquePtr<IFFTAlgorithm>)",
    "insertText": "NewFFTAlgorithm(const FFFTSettings& InSettings, const FName& InAlgorithmFactoryName = AnyAlgorithmFactory)"
  },
  {
    "label": "AreFFTSettingsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreFFTSettingsSupported(const FFFTSettings& InSettings, const FName& InAlgorithmFactoryName = AnyAlgorithmFactory)"
  }
]