[
  {
    "label": "IceTransportWithPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceTransportWithPointer"
  },
  {
    "label": "DtlsTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtlsTransport"
  },
  {
    "label": "DtlsTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_DTLS_TRANSPORT_H_ # define PC_DTLS_TRANSPORT_H_ # include<memory> # include \" api / dtls_transport_interface . h \" # include \" api / ice_transport_interface . h \" # include \" api / scoped_refptr . h \" # include \" p2p / base / dtls_transport . h \" # include \" p2p / base / dtls_transport_internal . h \" # include \" pc / ice_transport . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class IceTransportWithPointer ; class DtlsTransport : public DtlsTransportInterface { public :)",
    "insertText": "DtlsTransport(std::unique_ptr<cricket::DtlsTransportInternal> internal)"
  },
  {
    "label": "ice_transport()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<IceTransportInterface>)",
    "insertText": "ice_transport()"
  },
  {
    "label": "Information()",
    "kind": "Method",
    "detail": "Function (DtlsTransportInformation)",
    "insertText": "Information()"
  },
  {
    "label": "RegisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObserver(DtlsTransportObserverInterface* observer)"
  },
  {
    "label": "UnregisterObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObserver()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "internal()",
    "kind": "Method",
    "detail": "Function (cricket::DtlsTransportInternal*)",
    "insertText": "internal()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&lock_)"
  },
  {
    "label": "DtlsTransport()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "DtlsTransport()"
  },
  {
    "label": "OnInternalDtlsState()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnInternalDtlsState(cricket::DtlsTransportInternal* transport, DtlsTransportState state)"
  },
  {
    "label": "UpdateInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInformation()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (DtlsTransportObserverInterface* observer_ = nullptr ; rtc::Thread* owner_thread_ ; Mutex lock_ ; DtlsTransportInformation info_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]