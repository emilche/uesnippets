[
  {
    "label": "FPhysicsRepErrorCorrectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsRepErrorCorrectionData"
  },
  {
    "label": "FPhysicsRepAsyncInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsRepAsyncInputData"
  },
  {
    "label": "FPhysicsReplicationAsyncInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsReplicationAsyncInput"
  },
  {
    "label": "FReplicatedPhysicsTargetAsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicatedPhysicsTargetAsync"
  },
  {
    "label": "FPhysicsReplicationAsync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsReplicationAsync"
  },
  {
    "label": "FReplicatedPhysicsTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicatedPhysicsTarget"
  },
  {
    "label": "FPhysicsReplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsReplication"
  },
  {
    "label": "FPhysicsRepAsyncInputData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / EngineTypes . h \" # include \" Engine / ReplicatedState . h \" # include \" PhysicsReplicationInterface . h \" # include \" Physics / PhysicsInterfaceDeclares . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxyFwd . h \" # include \" Chaos / PhysicsObject . h \" # include \" Chaos / ParticleDirtyFlags . h \" # include \" Chaos / SimCallbackObject . h \" # include \" Physics / PhysicsInterfaceUtils . h \" # include \" Physics / NetworkPhysicsSettingsComponent . h \" namespace CharacterMovementCVars { int32 SkipPhysicsReplication ; float NetPingExtrapolation ; float NetPingLimit ; float ErrorPerLinearDifference ; float ErrorPerAngularDifference ; float ErrorAccumulationSeconds ; float ErrorAccumulationDistanceSq ; float ErrorAccumulationSimilarity ; float MaxLinearHardSnapDistance ; float MaxRestoredStateError ; float PositionLerp ; float LinearVelocityCoefficient ; float AngleLerp ; float AngularVelocityCoefficient ; int32 AlwaysHardSnap ; int32 AlwaysResetPhysics ; int32 ApplyAsyncSleepState ; } # if ! UE_BUILD_SHIPPING namespace PhysicsReplicationCVars { int32 LogPhysicsReplicationHardSnaps ; } # endif # pragma region FPhysicsReplicationAsync struct FPhysicsRepErrorCorrectionData { float LinearVelocityCoefficient ; float AngularVelocityCoefficient ; float PositionLerp ; float AngleLerp ; } ; struct FPhysicsRepAsyncInputData { FRigidBodyState TargetState ; Chaos::FSingleParticlePhysicsProxy* Proxy ; Chaos::FConstPhysicsObjectHandle PhysicsObject ; TOptional<FPhysicsRepErrorCorrectionData> ErrorCorrection ; EPhysicsReplicationMode RepMode ; int32 ServerFrame ; TOptional<int32> FrameOffset ; float LatencyOneWay ;)",
    "insertText": "FPhysicsRepAsyncInputData(Chaos::FConstPhysicsObjectHandle POHandle) : Proxy(nullptr) , PhysicsObject(POHandle) , RepMode(EPhysicsReplicationMode::Default)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; } ; struct FPhysicsReplicationAsyncInput : public Chaos::FSimCallbackInput { FPhysicsRepErrorCorrectionData ErrorCorrection ; TArray<FPhysicsRepAsyncInputData> InputData ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "FReplicatedPhysicsTargetAsync()",
    "kind": "Method",
    "detail": "Function (} } ; struct FReplicatedPhysicsTargetAsync {)",
    "insertText": "FReplicatedPhysicsTargetAsync() : AccumulatedErrorSeconds(0.0f) , TickCount(0) , ServerFrame(INDEX_NONE) , ReceiveFrame(INDEX_NONE) , ReceiveInterval(5) , AverageReceiveInterval(5.0f) PRAGMA_DISABLE_DEPRECATION_WARNINGS , PrevServerFrame(INDEX_NONE) , bWaiting(false) PRAGMA_ENABLE_DEPRECATION_WARNINGS , AccumulatedSleepSeconds(0.0f) , bAllowTargetAltering(false) , WaitForServerFrame(INDEX_NONE)"
  },
  {
    "label": "FReplicatedPhysicsTargetAsync()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FReplicatedPhysicsTargetAsync()"
  },
  {
    "label": "FReplicatedPhysicsTargetAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReplicatedPhysicsTargetAsync(const FReplicatedPhysicsTargetAsync&)"
  },
  {
    "label": "FReplicatedPhysicsTargetAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReplicatedPhysicsTargetAsync(FReplicatedPhysicsTargetAsync&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FReplicatedPhysicsTargetAsync&)",
    "insertText": "operator(const FReplicatedPhysicsTargetAsync&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FReplicatedPhysicsTargetAsync&)",
    "insertText": "operator(FReplicatedPhysicsTargetAsync&&)"
  },
  {
    "label": "IsWaiting()",
    "kind": "Method",
    "detail": "Function (float AccumulatedSleepSeconds ; bool bAllowTargetAltering ; int32 WaitForServerFrame ; public : const bool)",
    "insertText": "IsWaiting()"
  },
  {
    "label": "SetWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaiting(InWaitForServerFrame)"
  },
  {
    "label": "SetWaiting()",
    "kind": "Method",
    "detail": "Function (RepModeOverride = InRepModeOverride ; } void)",
    "insertText": "SetWaiting(int32 InWaitForServerFrame)"
  },
  {
    "label": "UpdateWaiting()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "UpdateWaiting(int32 InServerFrame)"
  },
  {
    "label": "SetWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaiting(INDEX_NONE)"
  },
  {
    "label": "GetFNameForStatId()",
    "kind": "Method",
    "detail": "Function (} } } ; class FPhysicsReplicationAsync : public Chaos::TSimCallbackObject<FPhysicsReplicationAsyncInput,Chaos::FSimCallbackNoOutput,Chaos::ESimCallbackOptions::Presimulate | Chaos::ESimCallbackOptions::PhysicsObjectUnregister> { FName)",
    "insertText": "GetFNameForStatId()"
  },
  {
    "label": "OnPostInitialize_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostInitialize_Internal()"
  },
  {
    "label": "OnPreSimulate_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreSimulate_Internal()"
  },
  {
    "label": "OnPhysicsObjectUnregistered_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPhysicsObjectUnregistered_Internal(Chaos::FConstPhysicsObjectHandle PhysicsObject)"
  },
  {
    "label": "ApplyTargetStatesAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTargetStatesAsync(const float DeltaSeconds, const FPhysicsRepErrorCorrectionData& ErrorCorrection, const TArray<FPhysicsRepAsyncInputData>& TargetStates)"
  },
  {
    "label": "DefaultReplication_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultReplication_DEPRECATED(Chaos::FRigidBodyHandle_Internal* Handle, const FPhysicsRepAsyncInputData& State, const float DeltaSeconds, const FPhysicsRepErrorCorrectionData& ErrorCorrection)"
  },
  {
    "label": "DefaultReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DefaultReplication(Chaos::FPBDRigidParticleHandle* Handle, FReplicatedPhysicsTargetAsync& Target, const float DeltaSeconds)"
  },
  {
    "label": "PredictiveInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PredictiveInterpolation(Chaos::FPBDRigidParticleHandle* Handle, FReplicatedPhysicsTargetAsync& Target, const float DeltaSeconds)"
  },
  {
    "label": "ResimulationReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResimulationReplication(Chaos::FPBDRigidParticleHandle* Handle, FReplicatedPhysicsTargetAsync& Target, const float DeltaSeconds)"
  },
  {
    "label": "RegisterSettings()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RegisterSettings(Chaos::FConstPhysicsObjectHandle PhysicsObject, FNetworkPhysicsSettingsAsync InSettings)"
  },
  {
    "label": "AddObjectToReplication()",
    "kind": "Method",
    "detail": "Function (private : float LatencyOneWay ; FRigidBodyErrorCorrection ErrorCorrectionDefault ; FNetworkPhysicsSettingsAsync SettingsCurrent ; FNetworkPhysicsSettingsAsync SettingsDefault ; TMap<Chaos::FConstPhysicsObjectHandle,FReplicatedPhysicsTargetAsync> ObjectToTarget ; TMap<Chaos::FConstPhysicsObjectHandle,FNetworkPhysicsSettingsAsync> ObjectToSettings ; TArray<int32> ParticlesInResimIslands ; TArray<Chaos::FParticleID> ReplicatedParticleIDs ; private : FReplicatedPhysicsTargetAsync*)",
    "insertText": "AddObjectToReplication(Chaos::FConstPhysicsObjectHandle PhysicsObject)"
  },
  {
    "label": "RemoveObjectFromReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObjectFromReplication(Chaos::FConstPhysicsObjectHandle PhysicsObject)"
  },
  {
    "label": "UpdateAsyncTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAsyncTarget(const FPhysicsRepAsyncInputData& Input, Chaos::FPBDRigidsSolver* RigidsSolver)"
  },
  {
    "label": "UpdateRewindDataTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRewindDataTarget(const FPhysicsRepAsyncInputData& Input)"
  },
  {
    "label": "CacheResimInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheResimInteractions()"
  },
  {
    "label": "FetchObjectSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FetchObjectSettings(Chaos::FConstPhysicsObjectHandle PhysicsObject)"
  },
  {
    "label": "ExtrapolateTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtrapolateTarget(FReplicatedPhysicsTargetAsync& Target, const int32 ExtrapolateFrames, const float DeltaSeconds)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Setup(FRigidBodyErrorCorrection ErrorCorrection)"
  },
  {
    "label": "FReplicatedPhysicsTarget()",
    "kind": "Method",
    "detail": "Function (ErrorCorrectionDefault = ErrorCorrection ; } } ; # pragma endregion struct FReplicatedPhysicsTarget {)",
    "insertText": "FReplicatedPhysicsTarget(Chaos::FConstPhysicsObjectHandle POHandle = nullptr) : ArrivedTimeSeconds(0.0f) , AccumulatedErrorSeconds(0.0f) , ServerFrame(0) , PhysicsObject(POHandle)"
  },
  {
    "label": "FPhysicsReplication()",
    "kind": "Method",
    "detail": "Function (} FRigidBodyState TargetState ; FName BoneName ; float ArrivedTimeSeconds ; float AccumulatedErrorSeconds ; FVector PrevPosTarget ; FVector PrevPos ; int32 ServerFrame ; Chaos::FConstPhysicsObjectHandle PhysicsObject ; EPhysicsReplicationMode ReplicationMode ; # if ! UE_BUILD_SHIPPING FDebugFloatHistory ErrorHistory ; # endif } ; class FPhysicsReplication : public IPhysicsReplication { public :)",
    "insertText": "FPhysicsReplication(FPhysScene* PhysScene)"
  },
  {
    "label": "FPhysicsReplication()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPhysicsReplication()"
  },
  {
    "label": "ShouldSkipPhysicsReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipPhysicsReplication()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "SetReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicatedTarget(Component, BoneName, ReplicatedTarget, 0)"
  },
  {
    "label": "SetReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReplicatedTarget(UPrimitiveComponent* Component, FName BoneName, const FRigidBodyState& ReplicatedTarget, int32 ServerFrame)"
  },
  {
    "label": "SetReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetReplicatedTarget(Chaos::FConstPhysicsObjectHandle PhysicsObject, const FRigidBodyState& ReplicatedTarget, int32 ServerFrame, EPhysicsReplicationMode ReplicationMode = EPhysicsReplicationMode::Default)"
  },
  {
    "label": "RemoveReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RemoveReplicatedTarget(UPrimitiveComponent* Component)"
  },
  {
    "label": "OnTick()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnTick(float DeltaSeconds, TMap<TWeakObjectPtr<UPrimitiveComponent>, FReplicatedPhysicsTarget>& ComponentsToTargets)"
  },
  {
    "label": "OnTargetRestored()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetRestored(TWeakObjectPtr<UPrimitiveComponent> Component, const FReplicatedPhysicsTarget& Target)"
  },
  {
    "label": "OnSetReplicatedTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSetReplicatedTarget(UPrimitiveComponent* Component, FName BoneName, const FRigidBodyState& ReplicatedTarget, int32 ServerFrame, FReplicatedPhysicsTarget& Target)"
  },
  {
    "label": "ApplyRigidBodyState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ApplyRigidBodyState(float DeltaSeconds, FBodyInstance* BI, FReplicatedPhysicsTarget& PhysicsTarget, const FRigidBodyErrorCorrection& ErrorCorrection, const float PingSecondsOneWay, int32 LocalFrame, int32 NumPredictedFrames)"
  },
  {
    "label": "ApplyRigidBodyState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRigidBodyState(float DeltaSeconds, FBodyInstance* BI, FReplicatedPhysicsTarget& PhysicsTarget, const FRigidBodyErrorCorrection& ErrorCorrection, const float PingSecondsOneWay, bool* bDidHardSnap = nullptr)"
  },
  {
    "label": "GetOwningWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetOwningWorld()"
  },
  {
    "label": "GetLocalPing()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "GetLocalPing()"
  },
  {
    "label": "GetOwnerPing()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOwnerPing(const AActor* const Owner, const FReplicatedPhysicsTarget& Target)"
  },
  {
    "label": "PrepareAsyncData_External()",
    "kind": "Method",
    "detail": "Function (private : TMap<TWeakObjectPtr<UPrimitiveComponent>,FReplicatedPhysicsTarget> ComponentToTargets_DEPRECATED ; TArray<FReplicatedPhysicsTarget> ReplicatedTargetsQueue ; FPhysScene* PhysScene ; TWeakObjectPtr<UNetworkPhysicsSettingsComponent> SettingsCurrent ; FPhysicsReplicationAsync* PhysicsReplicationAsync ; FPhysicsReplicationAsyncInput* AsyncInput ; void)",
    "insertText": "PrepareAsyncData_External(const FRigidBodyErrorCorrection& ErrorCorrection)"
  }
]