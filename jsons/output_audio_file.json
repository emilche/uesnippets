[
  {
    "label": "OutputAudioFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutputAudioFile"
  },
  {
    "label": "OutputAudioFile()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_OUTPUT_AUDIO_FILE_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_OUTPUT_AUDIO_FILE_H_ # include<stdio . h> # include<string> # include \" absl / strings / string_view . h \" # include \" modules / audio_coding / neteq / tools / audio_sink . h \" namespace webrtc { namespace test { class OutputAudioFile : public AudioSink { public :)",
    "insertText": "OutputAudioFile(absl::string_view file_name)"
  },
  {
    "label": "fopen()",
    "kind": "Method",
    "detail": "Function (out_file_ =)",
    "insertText": "fopen(std::string(file_name).c_str(), \"wb\")"
  },
  {
    "label": "OutputAudioFile()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OutputAudioFile()"
  },
  {
    "label": "OutputAudioFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OutputAudioFile(const OutputAudioFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutputAudioFile&)",
    "insertText": "operator(const OutputAudioFile&)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteArray(const int16_t* audio, size_t num_samples)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(out_file_)"
  }
]