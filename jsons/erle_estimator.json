[
  {
    "label": "ErleEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ErleEstimator"
  },
  {
    "label": "ErleEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_ERLE_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_ERLE_ESTIMATOR_H_ # include<stddef . h> # include<array> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / fullband_erle_estimator . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / aec3 / signal_dependent_erle_estimator . h \" # include \" modules / audio_processing / aec3 / subband_erle_estimator . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" namespace webrtc { class ErleEstimator { public :)",
    "insertText": "ErleEstimator(size_t startup_phase_length_blocks, const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "ErleEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ErleEstimator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool delay_change)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const RenderBuffer& render_buffer, rtc::ArrayView<const std::vector<std::array<float, kFftLengthBy2Plus1>>> filter_frequency_responses, rtc::ArrayView<const float, kFftLengthBy2Plus1> avg_render_spectrum_with_reverb, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> capture_spectra, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> subtractor_spectra, const std::vector<bool>& converged_filters)"
  },
  {
    "label": "Erle()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "Erle(bool onset_compensated)"
  },
  {
    "label": "ErleUnbounded()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "ErleUnbounded()"
  },
  {
    "label": "ErleDuringOnsets()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "ErleDuringOnsets()"
  },
  {
    "label": "FullbandErleLog2()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FullbandErleLog2()"
  },
  {
    "label": "GetInstLinearQualityEstimates()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const absl::optional<float>>)",
    "insertText": "GetInstLinearQualityEstimates()"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dump(const std::unique_ptr<ApmDataDumper>& data_dumper)"
  }
]