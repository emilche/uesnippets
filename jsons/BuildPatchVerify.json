[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ENUM_RANGE_BY_FIRST_AND_LAST()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumRange . h \" namespace BuildPatchServices { enum class EVerifyMode : uint32 { ShaVerifyAllFiles = 0,ShaVerifyTouchedFiles,FileSizeCheckAllFiles,FileSizeCheckTouchedFiles,InvalidOrMax } ; enum class EVerifyError : uint32 { FileMissing = 0,OpenFileFailed,HashCheckFailed,FileSizeFailed,InvalidOrMax } ; })",
    "insertText": "ENUM_RANGE_BY_FIRST_AND_LAST(BuildPatchServices::EVerifyError, BuildPatchServices::EVerifyError::FileMissing, BuildPatchServices::EVerifyError::FileSizeFailed) static_assert((uint32)BuildPatchServices::EVerifyMode::InvalidOrMax == 4, \"Please add support for the extra values to the Lex functions below.\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(BuildPatchServices::EVerifyMode VerifyMode)"
  },
  {
    "label": "CASE_ENUM_TO_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CASE_ENUM_TO_STR(Value) case BuildPatchServices::EVerifyMode::Value: return TEXT(#Value) switch (VerifyMode)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"InvalidOrMax\")"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} # undef CASE_ENUM_TO_STR } void)",
    "insertText": "LexFromString(BuildPatchServices::EVerifyMode& VerifyMode, const TCHAR* Buffer)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RETURN_IF_EQUAL(Value) if (FCString::Stricmp(Buffer, TEXT(#Value)) == 0)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const SIZE_T PrefixLen =)",
    "insertText": "Strlen(Prefix)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (Buffer + = PrefixLen ; })",
    "insertText": "RETURN_IF_EQUAL(ShaVerifyAllFiles)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(BuildPatchServices::EVerifyError VerifyError)"
  },
  {
    "label": "CASE_ENUM_TO_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CASE_ENUM_TO_STR(Value) case BuildPatchServices::EVerifyError::Value: return TEXT(#Value) switch (VerifyError)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} # undef CASE_ENUM_TO_STR } void)",
    "insertText": "LexFromString(BuildPatchServices::EVerifyError& VerifyError, const TCHAR* Buffer)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (Buffer + = PrefixLen ; })",
    "insertText": "RETURN_IF_EQUAL(FileMissing)"
  }
]