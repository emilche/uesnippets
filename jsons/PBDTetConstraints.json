[
  {
    "label": "FPBDTetConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDTetConstraints"
  },
  {
    "label": "FPBDTetConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDTetConstraintsBase . h \" namespace Chaos::Softs { class FPBDTetConstraints : public FPBDTetConstraintsBase { typedef FPBDTetConstraintsBase Base ; using Base::Constraints ; public :)",
    "insertText": "FPBDTetConstraints(const FSolverParticles& InParticles, TArray<TVec4<int32>>&& InConstraints, const FSolverReal InStiffness = (FSolverReal)1) : Base(InParticles, MoveTemp(InConstraints), InStiffness)"
  },
  {
    "label": "FPBDTetConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDTetConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FReal dt)"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ i ] ; const int32 i1 = Constraint [ 0 ] ; const int32 i2 = Constraint [ 1 ] ; const int32 i3 = Constraint [ 2 ] ; const int32 i4 = Constraint [ 3 ] ; const TVec4<FSolverVec3> Grads =)",
    "insertText": "GetGradients(InParticles, i)"
  },
  {
    "label": "GetScalingFactor()",
    "kind": "Method",
    "detail": "Function (const FSolverReal S =)",
    "insertText": "GetScalingFactor(InParticles, i, Grads)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i1) -= S * InParticles.InvM(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i2) -= S * InParticles.InvM(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i3) -= S * InParticles.InvM(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(i4) -= S * InParticles.InvM(i4)"
  }
]