[
  {
    "label": "NEON_HALF_TO_FLOAT_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NEON_BESSELFUNCTIONS_H # define EIGEN_NEON_BESSELFUNCTIONS_H namespace Eigen { namespace internal { # if EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC # define)",
    "insertText": "NEON_HALF_TO_FLOAT_FUNCTIONS(METHOD) \\ template <> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE \\ Packet8hf METHOD<Packet8hf>(const Packet8hf& x)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (\\ const Packet4f lo = METHOD<)",
    "insertText": "Packet4f(vcvt_f32_f16(vget_low_f16(x)))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (\\ const Packet4f hi = METHOD<)",
    "insertText": "Packet4f(vcvt_f32_f16(vget_high_f16(x)))"
  },
  {
    "label": "vcombine_f16()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vcombine_f16(vcvt_f16_f32(lo), vcvt_f16_f32(hi))"
  },
  {
    "label": "Packet4hf()",
    "kind": "Method",
    "detail": "Function (\\ } \\ \\ template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE \\ Packet4hf METHOD<)",
    "insertText": "Packet4hf(const Packet4hf& x)"
  },
  {
    "label": "vcvt_f16_f32()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "vcvt_f16_f32(METHOD<Packet4f>(vcvt_f32_f16(x)))"
  }
]