[
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FAnimationEditorPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationEditorPreviewScene"
  },
  {
    "label": "UDataAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataAsset"
  },
  {
    "label": "FEditorCameraController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorCameraController"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UPersonaPreviewSceneDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPersonaPreviewSceneDescription"
  },
  {
    "label": "AWindDirectionalSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWindDirectionalSource"
  },
  {
    "label": "FAnimationEditorPreviewScene()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Textures / SlateIcon . h \" # include \" EditorUndoClient . h \" # include \" IPersonaPreviewScene . h \" # include \" Animation / DebugSkelMeshComponent . h \" # include \" Engine / WindDirectionalSource . h \" class IEditableSkeleton ; class IPersonaToolkit ; class UAnimSequence ; class FAnimationEditorPreviewScene : public IPersonaPreviewScene,public FEditorUndoClient { public :)",
    "insertText": "FAnimationEditorPreviewScene(const ConstructionValues& CVS, const TSharedPtr<class IEditableSkeleton>& InEditableSkeleton, const TSharedRef<class IPersonaToolkit>& InPersonaToolkit)"
  },
  {
    "label": "FAnimationEditorPreviewScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAnimationEditorPreviewScene()"
  },
  {
    "label": "UnregisterForUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterForUndo()"
  },
  {
    "label": "GetPersonaToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IPersonaToolkit>)",
    "insertText": "GetPersonaToolkit()"
  },
  {
    "label": "SetPreviewAnimationAsset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreviewAnimationAsset(UAnimationAsset* AnimAsset, bool bEnablePreview = true)"
  },
  {
    "label": "GetPreviewAnimationAsset()",
    "kind": "Method",
    "detail": "Function (UAnimationAsset*)",
    "insertText": "GetPreviewAnimationAsset()"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* NewPreviewMesh, bool bAllowOverrideBaseMesh = true)"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetPreviewMesh()"
  },
  {
    "label": "SetPreviewAnimationBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewAnimationBlueprint(UAnimBlueprint* InAnimBlueprint, UAnimBlueprint* InOverlayOrSubAnimBlueprint)"
  },
  {
    "label": "AttachObjectToPreviewComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttachObjectToPreviewComponent(UObject* Object, FName AttachTo)"
  },
  {
    "label": "RemoveAttachedObjectFromPreviewComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttachedObjectFromPreviewComponent(UObject* Object, FName AttachedTo)"
  },
  {
    "label": "InvalidateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateViews()"
  },
  {
    "label": "FocusViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusViews()"
  },
  {
    "label": "GetPreviewMeshComponent()",
    "kind": "Method",
    "detail": "Function (UDebugSkelMeshComponent*)",
    "insertText": "GetPreviewMeshComponent()"
  },
  {
    "label": "ForEachPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachPreviewMesh(TFunction<void (UDebugSkelMeshComponent*)> PerMeshFunction)"
  },
  {
    "label": "SetPreviewMeshComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMeshComponent(UDebugSkelMeshComponent* InSkeletalMeshComponent)"
  },
  {
    "label": "SetAdditionalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalMeshes(class UDataAsset* InAdditionalMeshes)"
  },
  {
    "label": "SetAdditionalMeshesSelectable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalMeshesSelectable(bool bSelectable)"
  },
  {
    "label": "RefreshAdditionalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAdditionalMeshes(bool bAllowOverrideBaseMesh)"
  },
  {
    "label": "ShowReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowReferencePose(bool bShowRefPose, bool bResetBoneTransforms = false)"
  },
  {
    "label": "IsShowReferencePoseEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowReferencePoseEnabled()"
  },
  {
    "label": "SetSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedBone(const FName& BoneName, ESelectInfo::Type InSelectInfo)"
  },
  {
    "label": "ClearSelectedBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedBone()"
  },
  {
    "label": "SetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedSocket(const FSelectedSocketInfo& SocketInfo)"
  },
  {
    "label": "ClearSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedSocket()"
  },
  {
    "label": "SetSelectedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedActor(AActor* InActor)"
  },
  {
    "label": "ClearSelectedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedActor()"
  },
  {
    "label": "DeselectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAll()"
  },
  {
    "label": "RegisterOnAnimChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnAnimChanged(const FOnAnimChanged& Delegate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OnAnimChanged .)",
    "insertText": "Add(Delegate)"
  },
  {
    "label": "UnregisterOnAnimChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnAnimChanged(void* Thing)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (OnAnimChanged .)",
    "insertText": "RemoveAll(Thing)"
  },
  {
    "label": "RegisterOnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnPreviewMeshChanged(const FOnPreviewMeshChanged& Delegate)"
  },
  {
    "label": "UnregisterOnPreviewMeshChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnPreviewMeshChanged(void* Thing)"
  },
  {
    "label": "RegisterOnLODChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnLODChanged(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnLODChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnLODChanged(void* Thing)"
  },
  {
    "label": "BroadcastOnLODChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastOnLODChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnLODChanged .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "RegisterOnMorphTargetsChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RegisterOnMorphTargetsChanged(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnMorphTargetsChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnMorphTargetsChanged(void* Thing)"
  },
  {
    "label": "BroadcastOnMorphTargetsChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastOnMorphTargetsChanged()"
  },
  {
    "label": "RegisterOnInvalidateViews()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RegisterOnInvalidateViews(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnInvalidateViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnInvalidateViews(void* Thing)"
  },
  {
    "label": "RegisterOnFocusViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnFocusViews(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnFocusViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnFocusViews(void* Thing)"
  },
  {
    "label": "RegisterOnMeshClick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnMeshClick(const FOnMeshClick& Delegate)"
  },
  {
    "label": "UnregisterOnMeshClick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnMeshClick(void* Thing)"
  },
  {
    "label": "RegisterOnSelectedBoneChanged()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterOnSelectedBoneChanged(const FOnSelectedBoneChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSelectedBoneChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnSelectedBoneChanged(FDelegateHandle InHandle)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnSelectedBoneChanged .)",
    "insertText": "Remove(InHandle)"
  },
  {
    "label": "RegisterOnSelectedSocketChanged()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterOnSelectedSocketChanged(const FOnSelectedSocketChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSelectedSocketChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnSelectedSocketChanged(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOnDeselectAll()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterOnDeselectAll(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnDeselectAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnDeselectAll(FDelegateHandle InHandle)"
  },
  {
    "label": "SetDefaultAnimationMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDefaultAnimationMode(EPreviewSceneDefaultAnimationMode Mode, bool bShowNow)"
  },
  {
    "label": "ShowDefaultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowDefaultMode()"
  },
  {
    "label": "EnableWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableWind(bool bEnableWind)"
  },
  {
    "label": "IsWindEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWindEnabled()"
  },
  {
    "label": "SetWindStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindStrength(float InWindStrength)"
  },
  {
    "label": "GetWindStrength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetWindStrength()"
  },
  {
    "label": "SetGravityScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGravityScale(float InGravityScale)"
  },
  {
    "label": "GetGravityScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGravityScale()"
  },
  {
    "label": "GetSelectedActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetSelectedActor()"
  },
  {
    "label": "GetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (FSelectedSocketInfo)",
    "insertText": "GetSelectedSocket()"
  },
  {
    "label": "GetSelectedBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedBoneIndex()"
  },
  {
    "label": "TogglePlayback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePlayback()"
  },
  {
    "label": "GetActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetActor()"
  },
  {
    "label": "SetActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActor(AActor* InActor)"
  },
  {
    "label": "AllowMeshHitProxies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMeshHitProxies()"
  },
  {
    "label": "SetAllowMeshHitProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowMeshHitProxies(bool bState)"
  },
  {
    "label": "RegisterOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnSelectedLODChanged(const FOnSelectedLODChanged &Delegate)"
  },
  {
    "label": "UnRegisterOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnRegisterOnSelectedLODChanged(void* Thing)"
  },
  {
    "label": "BroadcastOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastOnSelectedLODChanged()"
  },
  {
    "label": "RegisterOnCameraOverrideChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RegisterOnCameraOverrideChanged(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnCameraOverrideChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnCameraOverrideChanged(void* Thing)"
  },
  {
    "label": "RegisterOnPreTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnPreTick(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnPreTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnPreTick(void* Thing)"
  },
  {
    "label": "RegisterOnPostTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnPostTick(const FSimpleDelegate& Delegate)"
  },
  {
    "label": "UnregisterOnPostTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterOnPostTick(void* Thing)"
  },
  {
    "label": "FlagTickable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlagTickable()"
  },
  {
    "label": "SetCameraOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraOverride(TSharedPtr<class FEditorCameraController> NewCamera)"
  },
  {
    "label": "GetCurrentCameraOverride()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FEditorCameraController>)",
    "insertText": "GetCurrentCameraOverride()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float InDeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "RemoveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComponent(class UActorComponent* Component)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "ValidatePreviewAttachedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidatePreviewAttachedAssets(USkeletalMesh* PreviewSkeletalMesh)"
  },
  {
    "label": "GetFloorBounds()",
    "kind": "Method",
    "detail": "Function (const FBoxSphereBounds&)",
    "insertText": "GetFloorBounds()"
  },
  {
    "label": "GetPreviewAssetTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPreviewAssetTooltip(bool bEditingAnimBlueprint)"
  },
  {
    "label": "GetPreviewSceneDescription()",
    "kind": "Method",
    "detail": "Function (class UPersonaPreviewSceneDescription*)",
    "insertText": "GetPreviewSceneDescription()"
  },
  {
    "label": "IsRecordAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordAvailable()"
  },
  {
    "label": "GetRecordStatusImage()",
    "kind": "Method",
    "detail": "Function (FSlateIcon)",
    "insertText": "GetRecordStatusImage()"
  },
  {
    "label": "GetRecordStatusTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRecordStatusTooltip()"
  },
  {
    "label": "GetRecordStatusLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRecordStatusLabel()"
  },
  {
    "label": "GetRecordMenuLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRecordMenuLabel()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecording()"
  },
  {
    "label": "OnRecordingStateChanged()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnRecordingStateChanged()"
  },
  {
    "label": "GetCurrentRecordingTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentRecordingTime()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnMeshClick .)",
    "insertText": "Broadcast(HitProxy, Click)"
  },
  {
    "label": "PreviewComponentSelectionOverride()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PreviewComponentSelectionOverride(const UPrimitiveComponent* InComponent)"
  },
  {
    "label": "SetAllowAdditionalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowAdditionalMeshes(bool bAllow)"
  },
  {
    "label": "SetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (bAllowAdditionalMeshes = bAllow ; } void)",
    "insertText": "SetEditableSkeleton(TSharedPtr<IEditableSkeleton> InEditableSkeleton)"
  },
  {
    "label": "SetIsBeingConstructed()",
    "kind": "Method",
    "detail": "Function (EditableSkeletonPtr = InEditableSkeleton ; } void)",
    "insertText": "SetIsBeingConstructed(bool bInIsBeingConstructed)"
  },
  {
    "label": "IsBeingConstructed()",
    "kind": "Method",
    "detail": "Function (bIsBeingConstructed = bInIsBeingConstructed ; } bool)",
    "insertText": "IsBeingConstructed()"
  },
  {
    "label": "IsShowTimecode()",
    "kind": "Method",
    "detail": "Function (bShowTimecode = ! bShowTimecode ; } bool)",
    "insertText": "IsShowTimecode()"
  },
  {
    "label": "SetPreviewMeshInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetPreviewMeshInternal(USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "AddPreviewAttachedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPreviewAttachedObjects()"
  },
  {
    "label": "CleanupComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupComponent(USceneComponent* Component)"
  },
  {
    "label": "RemoveAttachedComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAttachedComponent(bool bRemovePreviewAttached = true)"
  },
  {
    "label": "CreateWindActor()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<class AWindDirectionalSource>)",
    "insertText": "CreateWindActor(UWorld* World)"
  },
  {
    "label": "GetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IEditableSkeleton>)",
    "insertText": "GetEditableSkeleton()"
  },
  {
    "label": "SetRemoveAttachedComponentFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRemoveAttachedComponentFilter(const FOnRemoveAttachedComponentFilter& Delegate)"
  },
  {
    "label": "ClearRemoveAttachedComponentFilter()",
    "kind": "Method",
    "detail": "Function (OnRemoveAttachedComponentFilter = Delegate ; } void)",
    "insertText": "ClearRemoveAttachedComponentFilter()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (OnRemoveAttachedComponentFilter .)",
    "insertText": "Unbind()"
  }
]