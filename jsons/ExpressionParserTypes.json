[
  {
    "label": "FExpressionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionNode"
  },
  {
    "label": "FExpressionError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionError"
  },
  {
    "label": "IExpressionNodeStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IExpressionNodeStorage"
  },
  {
    "label": "FStringToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringToken"
  },
  {
    "label": "FTokenStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenStream"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TGetExpressionNodeTypeId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TGetExpressionNodeTypeId"
  },
  {
    "label": "FExpressionToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionToken"
  },
  {
    "label": "FCompiledToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompiledToken"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FOperatorFunctionID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperatorFunctionID"
  },
  {
    "label": "TOperatorJumpTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOperatorJumpTable"
  },
  {
    "label": "IOperatorEvaluationEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IOperatorEvaluationEnvironment"
  },
  {
    "label": "TOperatorEvaluationEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOperatorEvaluationEnvironment"
  },
  {
    "label": "FExpressionTokenConsumer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionTokenConsumer"
  },
  {
    "label": "FTokenDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenDefinitions"
  },
  {
    "label": "FOpParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpParameters"
  },
  {
    "label": "FExpressionGrammar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpressionGrammar"
  },
  {
    "label": "FExpressionError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Templates / UnrealTemplate . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Templates / Function . h \" # include \" Containers / Set . h \" # include \" Containers / Map . h \" # include \" Misc / Optional . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / Internationalization . h \" # include \" Misc / Guid . h \" # include \" Templates / ValueOrError . h \" class FExpressionNode ; struct FExpressionError ; namespace Impl { struct IExpressionNodeStorage ; } typedef TValueOrError<FExpressionNode,FExpressionError> FExpressionResult ; struct FExpressionError {)",
    "insertText": "FExpressionError(const FText& InText) : Text(InText)"
  },
  {
    "label": "FStringToken()",
    "kind": "Method",
    "detail": "Function (} FText Text ; } ; class FStringToken { public :)",
    "insertText": "FStringToken() : TokenStart(nullptr), TokenEnd(nullptr), LineNumber(0), CharacterIndex(0)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetString()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FStringToken()",
    "kind": "Method",
    "detail": "Function (TokenEnd = InToken . TokenEnd ; } } protected : class FTokenStream ;)",
    "insertText": "FStringToken(const TCHAR* InStart, int32 Line = 0, int32 Character = 0) : TokenStart(InStart), TokenEnd(InStart), LineNumber(Line), CharacterIndex(Character)"
  },
  {
    "label": "ParseToken()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* TokenStart ; const TCHAR* TokenEnd ; int32 LineNumber,CharacterIndex ; } ; enum class EParseState { Continue,StopAfter,StopBefore,Cancel,} ; class FTokenStream { public : TOptional<FStringToken>)",
    "insertText": "ParseToken(TFunctionRef<EParseState(TCHAR)> Pred, FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "ParseToken()",
    "kind": "Method",
    "detail": "Function (TOptional<FStringToken>)",
    "insertText": "ParseToken(const TCHAR* Symbol, FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "ParseTokenIgnoreCase()",
    "kind": "Method",
    "detail": "Function (TOptional<FStringToken>)",
    "insertText": "ParseTokenIgnoreCase(const TCHAR* Symbol, FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "ParseSymbol()",
    "kind": "Method",
    "detail": "Function (TOptional<FStringToken>)",
    "insertText": "ParseSymbol(FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "ParseSymbol()",
    "kind": "Method",
    "detail": "Function (TOptional<FStringToken>)",
    "insertText": "ParseSymbol(TCHAR Symbol, FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "ParseWhitespace()",
    "kind": "Method",
    "detail": "Function (TOptional<FStringToken>)",
    "insertText": "ParseWhitespace(FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "GenerateToken()",
    "kind": "Method",
    "detail": "Function (TOptional<FStringToken>)",
    "insertText": "GenerateToken(int32 NumChars, FStringToken* Accumulate = nullptr)"
  },
  {
    "label": "FTokenStream()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTokenStream(const TCHAR* In)"
  },
  {
    "label": "PeekChar()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "PeekChar(int32 Offset = 0)"
  },
  {
    "label": "CharsRemaining()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CharsRemaining()"
  },
  {
    "label": "IsReadPosValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadPosValid(const TCHAR* InPos, int32 MinNumChars = 1)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetStart()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetStart()"
  },
  {
    "label": "SetReadPos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReadPos(const FStringToken& Token)"
  },
  {
    "label": "DEFINE_EXPRESSION_NODE_TYPE()",
    "kind": "Method",
    "detail": "Function (private : const TCHAR* Start ; const TCHAR* End ; const TCHAR* ReadPos ; } ; # define)",
    "insertText": "DEFINE_EXPRESSION_NODE_TYPE(TYPE, ...)"
  },
  {
    "label": "GetTypeId()",
    "kind": "Method",
    "detail": "Function (\\ const FGuid&)",
    "insertText": "GetTypeId()"
  },
  {
    "label": "Global()",
    "kind": "Method",
    "detail": "Function (\\ FGuid)",
    "insertText": "Global(__VA_ARGS__)"
  },
  {
    "label": "DEFINE_EXPRESSION_NODE_TYPE()",
    "kind": "Method",
    "detail": "Function (\\ return Global ; \\ } \\ } ; template<T> struct TGetExpressionNodeTypeId ;)",
    "insertText": "DEFINE_EXPRESSION_NODE_TYPE(bool, 0xCACBC715, 0x505A6B4A, 0x8808809F, 0x897AA5F6) DEFINE_EXPRESSION_NODE_TYPE(double, 0x8444A8A3, 0x19AE4E13, 0xBCFA75EE, 0x39982BD6)"
  },
  {
    "label": "FExpressionNode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FExpressionNode() : TypeId()"
  },
  {
    "label": "FExpressionNode()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FExpressionNode(T In, typename TEnableIf<!TPointerIsConvertibleFromTo<T, FExpressionNode>::Value>::Type* = nullptr)"
  },
  {
    "label": "FExpressionNode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FExpressionNode()"
  },
  {
    "label": "FExpressionNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FExpressionNode(FExpressionNode&& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FExpressionNode&)",
    "insertText": "operator(FExpressionNode&& In)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (template<T> const T*)",
    "insertText": "Cast()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (FExpressionNode)",
    "insertText": "Copy()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (private : uint32 MaxStackAllocationSize = 6 4 -)",
    "insertText": "sizeof(FGuid)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (Impl::IExpressionNodeStorage*)",
    "insertText": "GetData()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (FGuid TypeId ;)",
    "insertText": "alignas(__STDCPP_DEFAULT_NEW_ALIGNMENT__)"
  },
  {
    "label": "FExpressionToken()",
    "kind": "Method",
    "detail": "Function (} ; class FExpressionToken : FNoncopyable { public :)",
    "insertText": "FExpressionToken(const FStringToken& InContext, FExpressionNode InNode) : Node(MoveTemp(InNode)) , Context(InContext)"
  },
  {
    "label": "FExpressionToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FExpressionToken(FExpressionToken&& In) : Node(MoveTemp(In.Node)), Context(In.Context)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FExpressionToken&)",
    "insertText": "operator(FExpressionToken&& In)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Node =)",
    "insertText": "MoveTemp(In.Node)"
  },
  {
    "label": "FCompiledToken()",
    "kind": "Method",
    "detail": "Function (Context = In . Context ; return* this ; } FExpressionNode Node ; FStringToken Context ; } ; struct FCompiledToken : FExpressionToken { enum EType { Operand,PreUnaryOperator,PostUnaryOperator,BinaryOperator,ShortCircuit,Benign } ;)",
    "insertText": "FCompiledToken(EType InType, FExpressionToken InToken, TOptional<int32> InShortCircuitIndex = TOptional<int32>()) : FExpressionToken(MoveTemp(InToken)), Type(InType), ShortCircuitIndex(InShortCircuitIndex)"
  },
  {
    "label": "FCompiledToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCompiledToken(FCompiledToken&& In) : FExpressionToken(MoveTemp(In)), Type(In.Type)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCompiledToken&)",
    "insertText": "operator(FCompiledToken&& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(MoveTemp(In))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Type = In . Type ; return* this ; } EType Type ; TOptional<int32> ShortCircuitIndex ; } ; struct FOperatorFunctionID { FGuid OperatorType ; FGuid LeftOperandType ; FGuid RightOperandType ; bool)",
    "insertText": "operator(const FOperatorFunctionID& A, const FOperatorFunctionID& B)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (const uint32 Hash =)",
    "insertText": "HashCombine(GetTypeHash(In.OperatorType), GetTypeHash(In.LeftOperandType))"
  },
  {
    "label": "ExecPreUnary()",
    "kind": "Method",
    "detail": "Function (} } ; template<ContextType = void> struct TOperatorJumpTable { FExpressionResult)",
    "insertText": "ExecPreUnary(const FExpressionToken& Operator, const FExpressionToken& R, const ContextType* Context)"
  },
  {
    "label": "ExecPostUnary()",
    "kind": "Method",
    "detail": "Function (FExpressionResult)",
    "insertText": "ExecPostUnary(const FExpressionToken& Operator, const FExpressionToken& L, const ContextType* Context)"
  },
  {
    "label": "ExecBinary()",
    "kind": "Method",
    "detail": "Function (FExpressionResult)",
    "insertText": "ExecBinary(const FExpressionToken& Operator, const FExpressionToken& L, const FExpressionToken& R, const ContextType* Context)"
  },
  {
    "label": "ShouldShortCircuit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShortCircuit(const FExpressionToken& Operator, const FExpressionToken& L, const ContextType* Context)"
  },
  {
    "label": "MapPreUnary()",
    "kind": "Method",
    "detail": "Function (template<OperatorType,FuncType> void)",
    "insertText": "MapPreUnary(FuncType InFunc)"
  },
  {
    "label": "MapPostUnary()",
    "kind": "Method",
    "detail": "Function (template<OperatorType,FuncType> void)",
    "insertText": "MapPostUnary(FuncType InFunc)"
  },
  {
    "label": "MapBinary()",
    "kind": "Method",
    "detail": "Function (template<OperatorType,FuncType> void)",
    "insertText": "MapBinary(FuncType InFunc)"
  },
  {
    "label": "MapShortCircuit()",
    "kind": "Method",
    "detail": "Function (template<OperatorType,FuncType> void)",
    "insertText": "MapShortCircuit(FuncType InFunc)"
  },
  {
    "label": "FExpressionResult()",
    "kind": "Method",
    "detail": "Function (public : typedef TFunction<)",
    "insertText": "FExpressionResult(const FExpressionNode&, const ContextType* Context)"
  },
  {
    "label": "FExpressionResult()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "FExpressionResult(const FExpressionNode&, const FExpressionNode&, const ContextType* Context)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "bool(const FExpressionNode&, const ContextType* Context)"
  },
  {
    "label": "ExecPreUnary()",
    "kind": "Method",
    "detail": "Function (private : TMap<FOperatorFunctionID,FUnaryFunction> PreUnaryOps ; TMap<FOperatorFunctionID,FUnaryFunction> PostUnaryOps ; TMap<FOperatorFunctionID,FBinaryFunction> BinaryOps ; TMap<FOperatorFunctionID,FShortCircuit> BinaryShortCircuits ; } ; typedef TOperatorJumpTable<> FOperatorJumpTable ; struct IOperatorEvaluationEnvironment { FExpressionResult)",
    "insertText": "ExecPreUnary(const FExpressionToken& Operator, const FExpressionToken& R)"
  },
  {
    "label": "ExecPostUnary()",
    "kind": "Method",
    "detail": "Function (FExpressionResult)",
    "insertText": "ExecPostUnary(const FExpressionToken& Operator, const FExpressionToken& L)"
  },
  {
    "label": "ExecBinary()",
    "kind": "Method",
    "detail": "Function (FExpressionResult)",
    "insertText": "ExecBinary(const FExpressionToken& Operator, const FExpressionToken& L, const FExpressionToken& R)"
  },
  {
    "label": "ShouldShortCircuit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShortCircuit(const FExpressionToken& Operator, const FExpressionToken& L)"
  },
  {
    "label": "TOperatorEvaluationEnvironment()",
    "kind": "Method",
    "detail": "Function (} ; template<ContextType = void> struct TOperatorEvaluationEnvironment : IOperatorEvaluationEnvironment {)",
    "insertText": "TOperatorEvaluationEnvironment(const TOperatorJumpTable<ContextType>& InOperators, const ContextType* InContext) : Operators(InOperators), Context(InContext)"
  },
  {
    "label": "FExpressionTokenConsumer()",
    "kind": "Method",
    "detail": "Function (} private : const TOperatorJumpTable<ContextType>& Operators ; const ContextType* Context ; } ; typedef TOperatorEvaluationEnvironment<> FOperatorEvaluationEnvironment ; class FExpressionTokenConsumer { public :)",
    "insertText": "FExpressionTokenConsumer(const TCHAR* InExpression)"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (TArray<FExpressionToken>)",
    "insertText": "Extract()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FStringToken& SourceToken, FExpressionNode&& Node)"
  },
  {
    "label": "GetStream()",
    "kind": "Method",
    "detail": "Function (FTokenStream&)",
    "insertText": "GetStream()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FExpressionTokenConsumer&)",
    "insertText": "operator(const FExpressionTokenConsumer&)"
  },
  {
    "label": "FExpressionError()",
    "kind": "Method",
    "detail": "Function (TArray<FExpressionToken> Tokens ; FTokenStream Stream ; } ; typedef TOptional<)",
    "insertText": "FExpressionError(FExpressionDefinition)(FExpressionTokenConsumer&)"
  },
  {
    "label": "FTokenDefinitions()",
    "kind": "Method",
    "detail": "Function (class FTokenDefinitions { public :)",
    "insertText": "FTokenDefinitions() : bIgnoreWhitespace(false)"
  },
  {
    "label": "IgnoreWhitespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IgnoreWhitespace()"
  },
  {
    "label": "DefineToken()",
    "kind": "Method",
    "detail": "Function (bIgnoreWhitespace = true ; } void)",
    "insertText": "DefineToken(TFunction<FExpressionDefinition>&& Definition)"
  },
  {
    "label": "DoesIgnoreWhitespace()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "DoesIgnoreWhitespace()"
  },
  {
    "label": "ConsumeToken()",
    "kind": "Method",
    "detail": "Function (private : TOptional<FExpressionError>)",
    "insertText": "ConsumeToken(FExpressionTokenConsumer& Consumer)"
  },
  {
    "label": "FOpParameters()",
    "kind": "Method",
    "detail": "Function (private : bool bIgnoreWhitespace ; TArray<TFunction<FExpressionDefinition>> Definitions ; } ; enum class EAssociativity { RightToLeft,LeftToRight } ; struct FOpParameters { int32 Precedence ; EAssociativity Associativity ; bool bCanShortCircuit ;)",
    "insertText": "FOpParameters(int32 InPrecedence, EAssociativity InAssociativity, bool bInCanShortCircuit) : Precedence(InPrecedence) , Associativity(InAssociativity) , bCanShortCircuit(bInCanShortCircuit)"
  },
  {
    "label": "DefineGrouping()",
    "kind": "Method",
    "detail": "Function (} } ; class FExpressionGrammar { public : template<TStartGroup,TEndGroup> void)",
    "insertText": "DefineGrouping()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Groupings .)",
    "insertText": "Add(TGetExpressionNodeTypeId<TStartGroup>::GetTypeId(), TGetExpressionNodeTypeId<TEndGroup>::GetTypeId())"
  },
  {
    "label": "DefinePreUnaryOperator()",
    "kind": "Method",
    "detail": "Function (} template<TExpressionNode> void)",
    "insertText": "DefinePreUnaryOperator()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PreUnaryOperators .)",
    "insertText": "Add(TGetExpressionNodeTypeId<TExpressionNode>::GetTypeId())"
  },
  {
    "label": "DefinePostUnaryOperator()",
    "kind": "Method",
    "detail": "Function (} template<TExpressionNode> void)",
    "insertText": "DefinePostUnaryOperator()"
  },
  {
    "label": "DefineBinaryOperator()",
    "kind": "Method",
    "detail": "Function (} template<TExpressionNode> void)",
    "insertText": "DefineBinaryOperator(int32 InPrecedence, EAssociativity InAssociativity=EAssociativity::RightToLeft, bool bCanShortCircuit = false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "for(TMap<FGuid, FOpParameters>::TConstIterator It(BinaryOperators); It; ++It)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const FOpParameters& CurValue = It .)",
    "insertText": "Value()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } # endif BinaryOperators .)",
    "insertText": "Add(TGetExpressionNodeTypeId<TExpressionNode>::GetTypeId(), FOpParameters(InPrecedence, InAssociativity, bCanShortCircuit))"
  },
  {
    "label": "GetGrouping()",
    "kind": "Method",
    "detail": "Function (} public : const FGuid*)",
    "insertText": "GetGrouping(const FGuid& TypeId)"
  },
  {
    "label": "HasPreUnaryOperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreUnaryOperator(const FGuid& TypeId)"
  },
  {
    "label": "HasPostUnaryOperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPostUnaryOperator(const FGuid& TypeId)"
  },
  {
    "label": "GetBinaryOperatorDefParameters()",
    "kind": "Method",
    "detail": "Function (const FOpParameters*)",
    "insertText": "GetBinaryOperatorDefParameters(const FGuid& TypeId)"
  }
]