[
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCDisassembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDisassembler"
  },
  {
    "label": "DecodeStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DecodeStatus"
  },
  {
    "label": "MCDisassembler()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCDISASSEMBLER_H # define LLVM_MC_MCDISASSEMBLER_H # include \" llvm - c / Disassembler . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / MC / MCSymbolizer . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class MCInst ; class MCSubtargetInfo ; class raw_ostream ; class MCContext ; class MCDisassembler { public : enum DecodeStatus { Fail = 0,SoftFail = 1,Success = 3 } ;)",
    "insertText": "MCDisassembler(const MCSubtargetInfo &STI, MCContext &Ctx) : Ctx(Ctx), STI(STI), Symbolizer(), CommentStream(nullptr)"
  },
  {
    "label": "MCDisassembler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCDisassembler()"
  },
  {
    "label": "getInstruction()",
    "kind": "Method",
    "detail": "Function (DecodeStatus)",
    "insertText": "getInstruction(MCInst &Instr, uint64_t &Size, ArrayRef<uint8_t> Bytes, uint64_t Address, raw_ostream &VStream, raw_ostream &CStream)"
  },
  {
    "label": "tryAddingSymbolicOperand()",
    "kind": "Method",
    "detail": "Function (private : MCContext& Ctx ; protected : const MCSubtargetInfo& STI ; std::unique_ptr<MCSymbolizer> Symbolizer ; public : bool)",
    "insertText": "tryAddingSymbolicOperand(MCInst &Inst, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)"
  },
  {
    "label": "tryAddingPcLoadReferenceComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tryAddingPcLoadReferenceComment(int64_t Value, uint64_t Address)"
  },
  {
    "label": "setSymbolizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSymbolizer(std::unique_ptr<MCSymbolizer> Symzer)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (MCContext&)",
    "insertText": "getContext()"
  }
]