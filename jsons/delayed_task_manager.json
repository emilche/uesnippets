[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "DelayedTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DelayedTask"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_DELAYED_TASK_MANAGER_H_ # define BASE_TASK_THREAD_POOL_DELAYED_TASK_MANAGER_H_ # include<functional> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / containers / intrusive_heap . h \" # include \" base / memory / ptr_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / atomic_flag . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / delay_policy . h \" # include \" base / task / thread_pool / task . h \" # include \" base / thread_annotations . h \" # include \" base / time / default_tick_clock . h \" # include \" base / time / tick_clock . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class SequencedTaskRunner ; namespace internal { class BASE_EXPORT DelayedTaskManager { public : using PostTaskNowCallback = OnceCallback<)",
    "insertText": "void(Task task)"
  },
  {
    "label": "DelayedTaskManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTaskManager(const TickClock* tick_clock = DefaultTickClock::GetInstance())"
  },
  {
    "label": "DelayedTaskManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTaskManager(const DelayedTaskManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayedTaskManager&)",
    "insertText": "operator(const DelayedTaskManager&)"
  },
  {
    "label": "DelayedTaskManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DelayedTaskManager()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(scoped_refptr<SequencedTaskRunner> service_thread_task_runner)"
  },
  {
    "label": "AddDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDelayedTask(Task task, PostTaskNowCallback post_task_now_callback, scoped_refptr<TaskRunner> task_runner)"
  },
  {
    "label": "ProcessRipeTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRipeTasks()"
  },
  {
    "label": "NextScheduledRunTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<TimeTicks>)",
    "insertText": "NextScheduledRunTime()"
  },
  {
    "label": "HasPendingHighResolutionTasksForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingHighResolutionTasksForTesting()"
  },
  {
    "label": "DelayedTask()",
    "kind": "Method",
    "detail": "Function (private : struct DelayedTask {)",
    "insertText": "DelayedTask()"
  },
  {
    "label": "DelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTask(Task task, PostTaskNowCallback callback, scoped_refptr<TaskRunner> task_runner)"
  },
  {
    "label": "DelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTask(DelayedTask&& other)"
  },
  {
    "label": "DelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayedTask(const DelayedTask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayedTask&)",
    "insertText": "operator(const DelayedTask&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DelayedTask&)",
    "insertText": "operator(DelayedTask&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const DelayedTask& other)"
  },
  {
    "label": "SetScheduled()",
    "kind": "Method",
    "detail": "Function (Task task ; PostTaskNowCallback callback ; scoped_refptr<TaskRunner> task_runner ; void)",
    "insertText": "SetScheduled()"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeapHandle(const HeapHandle& handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "GetHeapHandle()"
  },
  {
    "label": "GetTimeAndDelayPolicyToScheduleProcessRipeTasksLockRequired()",
    "kind": "Method",
    "detail": "Function (} } ; std::pair<TimeTicks,subtle::DelayPolicy>)",
    "insertText": "GetTimeAndDelayPolicyToScheduleProcessRipeTasksLockRequired() EXCLUSIVE_LOCKS_REQUIRED(queue_lock_)"
  },
  {
    "label": "ScheduleProcessRipeTasksOnServiceThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleProcessRipeTasksOnServiceThread()"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (const RepeatingClosure process_ripe_tasks_closure_ ; const RepeatingClosure schedule_process_ripe_tasks_closure_ ; const raw_ptr<const TickClock> tick_clock_ ; CheckedLock queue_lock_ ; scoped_refptr<SequencedTaskRunner> service_thread_task_runner_ ; DelayedTaskHandle delayed_task_handle_)",
    "insertText": "GUARDED_BY_CONTEXT(sequence_checker_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (IntrusiveHeap<DelayedTask,std::greater<>> delayed_task_queue_)",
    "insertText": "GUARDED_BY(queue_lock_)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]