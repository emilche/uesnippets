[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FilteredServiceDirectory()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_FILTERED_SERVICE_DIRECTORY_H_ # define BASE_FUCHSIA_FILTERED_SERVICE_DIRECTORY_H_ # include<fuchsia / io / cpp / fidl . h> # include<lib / fidl / cpp / interface_handle . h> # include<lib / sys / cpp / outgoing_directory . h> # include<lib / sys / cpp / service_directory . h> # include<lib / zx / channel . h> # include<memory> # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" namespace base { class BASE_EXPORT FilteredServiceDirectory { public :)",
    "insertText": "FilteredServiceDirectory(std::shared_ptr<sys::ServiceDirectory> directory)"
  },
  {
    "label": "FilteredServiceDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilteredServiceDirectory(const FilteredServiceDirectory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilteredServiceDirectory&)",
    "insertText": "operator(const FilteredServiceDirectory&)"
  },
  {
    "label": "FilteredServiceDirectory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FilteredServiceDirectory()"
  },
  {
    "label": "AddService()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] zx_status_t)",
    "insertText": "AddService(StringPiece service_name)"
  },
  {
    "label": "ConnectClient()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] zx_status_t)",
    "insertText": "ConnectClient(fidl::InterfaceRequest<::fuchsia::io::Directory> dir_request)"
  },
  {
    "label": "outgoing_directory()",
    "kind": "Method",
    "detail": "Function (sys::OutgoingDirectory*)",
    "insertText": "outgoing_directory()"
  }
]