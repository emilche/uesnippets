[
  {
    "label": "LeastSquaresConjugateGradient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeastSquaresConjugateGradient"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "least_square_conjugate_gradient()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_LEAST_SQUARE_CONJUGATE_GRADIENT_H # define EIGEN_LEAST_SQUARE_CONJUGATE_GRADIENT_H namespace Eigen { namespace internal { template<MatrixType,Rhs,Dest,Preconditioner> EIGEN_DONT_INLINE void)",
    "insertText": "least_square_conjugate_gradient(const MatrixType& mat, const Rhs& rhs, Dest& x, const Preconditioner& precond, Index& iters, typename Dest::RealScalar& tol_error)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; typedef Dest::RealScalar RealScalar ; typedef Dest::Scalar Scalar ; typedef Matrix<Scalar,Dynamic,1> VectorType ; RealScalar tol = tol_error ; Index maxIters = iters ; Index m = mat .)",
    "insertText": "rows(), n = mat.cols()"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (VectorType residual = rhs - mat* x ; VectorType normal_residual = mat .)",
    "insertText": "adjoint()"
  },
  {
    "label": "rhsNorm2()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "rhsNorm2(mat.adjoint()*rhs).squaredNorm()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (iters = 0 ; tol_error = 0 ; return ; } RealScalar threshold = tol* tol* rhsNorm2 ; RealScalar residualNorm2 = normal_residual .)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (iters = 0 ; tol_error =)",
    "insertText": "sqrt(residualNorm2 / rhsNorm2)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (p = precond .)",
    "insertText": "solve(normal_residual)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "z(n), tmp(m)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (RealScalar absNew =)",
    "insertText": "real(normal_residual.dot(p))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "while(i < maxIters)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "noalias()"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (RealScalar absOld = absNew ; absNew =)",
    "insertText": "real(normal_residual.dot(z))"
  },
  {
    "label": "LeastSquaresConjugateGradient()",
    "kind": "Method",
    "detail": "Function (iters = i ; } } template<_MatrixType,_Preconditioner = LeastSquareDiagonalPreconditioner<_MatrixType::Scalar>> class LeastSquaresConjugateGradient ; namespace internal { template<_MatrixType,_Preconditioner> struct traits<LeastSquaresConjugateGradient<_MatrixType,_Preconditioner>> { typedef _MatrixType MatrixType ; typedef _Preconditioner Preconditioner ; } ; } template<_MatrixType,_Preconditioner> class LeastSquaresConjugateGradient : public IterativeSolverBase<LeastSquaresConjugateGradient<_MatrixType,_Preconditioner>> { typedef IterativeSolverBase<LeastSquaresConjugateGradient> Base ; using Base::matrix ; using Base::m_error ; using Base::m_iterations ; using Base::m_info ; using Base::m_isInitialized ; public : typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef _Preconditioner Preconditioner ; public :)",
    "insertText": "LeastSquaresConjugateGradient() : Base()"
  },
  {
    "label": "LeastSquaresConjugateGradient()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "LeastSquaresConjugateGradient(const EigenBase<MatrixDerived>& A) : Base(A.derived())"
  },
  {
    "label": "LeastSquaresConjugateGradient()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LeastSquaresConjugateGradient()"
  },
  {
    "label": "_solve_vector_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_vector_with_guess_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "maxIterations()",
    "kind": "Method",
    "detail": "Function (m_iterations =)",
    "insertText": "maxIterations()"
  },
  {
    "label": "least_square_conjugate_gradient()",
    "kind": "Method",
    "detail": "Function (m_error = Base::m_tolerance ;)",
    "insertText": "least_square_conjugate_gradient(matrix(), b, x, Base::m_preconditioner, m_iterations, m_error)"
  }
]