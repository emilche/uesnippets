[
  {
    "label": "FNodeTextCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeTextCache"
  },
  {
    "label": "FNodeTitleTextTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeTitleTextTable"
  },
  {
    "label": "FNodeTextTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeTextTable"
  },
  {
    "label": "FNodeTextCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphSchema . h \" # include \" Misc / ConfigCacheIni . h \" # if WITH_EDITOR struct FNodeTextCache { public :)",
    "insertText": "FNodeTextCache() : CacheRefreshID(0)"
  },
  {
    "label": "IsOutOfDate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOutOfDate(const UEdGraphNode* InOwningNode)"
  },
  {
    "label": "IsOutOfDate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOutOfDate(const UEdGraphSchema* InSchema)"
  },
  {
    "label": "SetCachedText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCachedText(FText const& InText, const UEdGraphNode* InOwningNode)"
  },
  {
    "label": "UpdateCacheIternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCacheIternal(InText)"
  },
  {
    "label": "GetSchema()",
    "kind": "Method",
    "detail": "Function (CacheRefreshID = InOwningNode ->)",
    "insertText": "GetSchema()->GetCurrentVisualizationCacheID()"
  },
  {
    "label": "SetCachedText()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCachedText(FText const& InText, const UEdGraphSchema* InSchema)"
  },
  {
    "label": "GetCurrentVisualizationCacheID()",
    "kind": "Method",
    "detail": "Function (CacheRefreshID = InSchema ->)",
    "insertText": "GetCurrentVisualizationCacheID()"
  },
  {
    "label": "GetCachedText()",
    "kind": "Method",
    "detail": "Function (} } FText&)",
    "insertText": "GetCachedText()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (CachedText =)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FText()"
  },
  {
    "label": "UpdateCacheIternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdateCacheIternal(FText const& InText)"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool bShouldUseLocalizedNodeAndPinNames = false ; GConfig ->)",
    "insertText": "GetBool(TEXT(\"Internationalization\"), TEXT(\"ShouldUseLocalizedNodeAndPinNames\"), bShouldUseLocalizedNodeAndPinNames, GEditorSettingsIni)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (CachedText = InText ; } else { CachedText =)",
    "insertText": "FromString(InText.BuildSourceString())"
  },
  {
    "label": "IsTitleCached()",
    "kind": "Method",
    "detail": "Function (} } private : FText CachedText ; int32 CacheRefreshID ; } ; struct FNodeTitleTextTable { public : bool)",
    "insertText": "IsTitleCached(ENodeTitleType::Type InTitleType, const UEdGraphNode* InOwningNode)"
  },
  {
    "label": "SetCachedTitle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCachedTitle(ENodeTitleType::Type InTitleType, FText const& InText, const UEdGraphNode* InOwningNode)"
  },
  {
    "label": "SetCachedText()",
    "kind": "Method",
    "detail": "Function (CachedNodeTitles [ InTitleType ] .)",
    "insertText": "SetCachedText(InText, InOwningNode)"
  },
  {
    "label": "GetCachedTitle()",
    "kind": "Method",
    "detail": "Function (} FText&)",
    "insertText": "GetCachedTitle(ENodeTitleType::Type TitleType)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FText&)",
    "insertText": "operator(ENodeTitleType::Type TitleIndex)"
  },
  {
    "label": "IsTooltipCached()",
    "kind": "Method",
    "detail": "Function (} private : FNodeTextCache CachedNodeTitles [ ENodeTitleType::MAX_TitleTypes ] ; } ; struct FNodeTextTable : FNodeTitleTextTable { public : bool)",
    "insertText": "IsTooltipCached(const UEdGraphNode* InOwningNode)"
  },
  {
    "label": "IsOutOfDate()",
    "kind": "Method",
    "detail": "Function (const UEdGraphSchema* NullSchema = nullptr ; return ! CachedTooltip .)",
    "insertText": "IsOutOfDate(NullSchema)"
  },
  {
    "label": "SetCachedTooltip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCachedTooltip(FText const& InText, const UEdGraphNode* InOwningNode)"
  },
  {
    "label": "SetCachedText()",
    "kind": "Method",
    "detail": "Function (const UEdGraphSchema* NullSchema = nullptr ; CachedTooltip .)",
    "insertText": "SetCachedText(InText, NullSchema)"
  },
  {
    "label": "GetCachedTooltip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetCachedTooltip()"
  }
]