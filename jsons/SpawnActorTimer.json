[
  {
    "label": "FSpawnActorTimingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpawnActorTimingInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpawnActorTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnActorTimer"
  },
  {
    "label": "FScopedSpawnActorTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSpawnActorTimer"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformTime . h \" #)",
    "insertText": "if(!UE_BUILD_SHIPPING && 1)"
  },
  {
    "label": "FSpawnActorTimer()",
    "kind": "Method",
    "detail": "Function (FName ClassName ; double SpawnTime ; } ; enum class ESpawnActorTimingType { SpawnActorNonDeferred,SpawnActorDeferred,FinishSpawning } ; class FSpawnActorTimer { public :)",
    "insertText": "FSpawnActorTimer() : bIsRecordingSpawnActorTimes(false) , FrameCount(0)"
  },
  {
    "label": "ReportSpawnActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReportSpawnActor(FName ClassName, FName ActorName, double SpawnTime, ESpawnActorTimingType SpawnActorType)"
  },
  {
    "label": "IncrementFrameCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementFrameCount()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FSpawnActorTimer&)",
    "insertText": "Get()"
  },
  {
    "label": "SpawnActorTimerCmdFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnActorTimerCmdFunc(const TArray<FString>& Args)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "OutputSpawnTimings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputSpawnTimings()"
  },
  {
    "label": "FScopedSpawnActorTimer()",
    "kind": "Method",
    "detail": "Function (bool bIsRecordingSpawnActorTimes ; TArray<FSpawnActorTimingInfo> SpawnActorInfos ; TMap<FName,FSpawnActorTimingInfo> IncompleteSpawnActorMap ; int32 FrameCount ; } ; class FScopedSpawnActorTimer { public :)",
    "insertText": "FScopedSpawnActorTimer(FName InClassName, ESpawnActorTimingType InSpawnActorType) : StartTime(FPlatformTime::Seconds()) , ClassName(InClassName) , ActorName(NAME_None) , SpawnActorType(InSpawnActorType)"
  },
  {
    "label": "FScopedSpawnActorTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedSpawnActorTimer()"
  },
  {
    "label": "SetActorName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetActorName(FName InActorName)"
  }
]