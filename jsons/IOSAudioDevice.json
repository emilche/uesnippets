[
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "FIOSAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSAudioDevice"
  },
  {
    "label": "FIOSAudioEffectsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSAudioEffectsManager"
  },
  {
    "label": "ICompressedAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompressedAudioInfo"
  },
  {
    "label": "ESoundFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESoundFormat"
  },
  {
    "label": "FIOSAudioSoundBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSAudioSoundBuffer"
  },
  {
    "label": "FIOSAudioSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSAudioSoundSource"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioEffect . h \" # include \" AudioDevice . h \" # include \" Sound / SoundWave . h \" # include \" DSP / ParamInterpolator . h \" # include \" DSP / OnePole . h \" # include<AudioToolbox / AudioToolbox . h> # include<AudioUnit / AudioUnit . h> # include<AVFoundation / AVAudioSession . h> # define AudioSampleType SInt16)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogIOSAudio, Log, All)"
  },
  {
    "label": "AudioCallbackFrameSize()",
    "kind": "Method",
    "detail": "Function (# define CHANNELS_PER_BUS 2 # define)",
    "insertText": "AudioCallbackFrameSize(8 * 1024)"
  },
  {
    "label": "FIOSAudioSoundBuffer()",
    "kind": "Method",
    "detail": "Function (class FIOSAudioDevice ; class FIOSAudioEffectsManager ; class ICompressedAudioInfo ; enum ESoundFormat { SoundFormat_Invalid,SoundFormat_LPCM,SoundFormat_ADPCM } ; class FIOSAudioSoundBuffer : public FSoundBuffer { public :)",
    "insertText": "FIOSAudioSoundBuffer(FIOSAudioDevice* InAudioDevice, USoundWave* InWave, bool InStreaming, bool InProcedural)"
  },
  {
    "label": "FIOSAudioSoundBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIOSAudioSoundBuffer(void)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (FIOSAudioSoundBuffer*)",
    "insertText": "Init(FIOSAudioDevice* IOSAudioDevice, USoundWave* InWave)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize(void)"
  },
  {
    "label": "GetCurrentChunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentChunkIndex()"
  },
  {
    "label": "GetCurrentChunkOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentChunkOffset()"
  },
  {
    "label": "ReadCompressedInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedInfo(USoundWave* SoundWave)"
  },
  {
    "label": "ReadCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedData(uint8* Destination, int32 NumFramesToDecode, bool bLooping)"
  },
  {
    "label": "ReleaseCurrentChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReleaseCurrentChunk()"
  },
  {
    "label": "FIOSAudioSoundSource()",
    "kind": "Method",
    "detail": "Function (int32 RenderCallbackBufferSize ; int32 SampleRate ; int32 SoundFormat ; int16* SampleData ; uint32 BufferSize ; ICompressedAudioInfo* DecompressionState ; bool bStreaming ; bool bIsProcedural ; } ; class FIOSAudioSoundSource : public FSoundSource { public :)",
    "insertText": "FIOSAudioSoundSource(FIOSAudioDevice* InAudioDevice, uint32 InBusNumber)"
  },
  {
    "label": "FIOSAudioSoundSource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FIOSAudioSoundSource(void)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(FWaveInstance* WaveInstance)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(void)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(void)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop(void)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause(void)"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFinished(void)"
  },
  {
    "label": "GetAudioUnitElement()",
    "kind": "Method",
    "detail": "Function (AudioUnitElement)",
    "insertText": "GetAudioUnitElement(int32 Channel)"
  },
  {
    "label": "AttachToAUGraph()",
    "kind": "Method",
    "detail": "Function (TArray<Audio::FOnePoleLPF> LowpassFilterBank ; TArray<Audio::FParam> LPFParamBank ; int32 SampleRate ; float SourceLPFFrequency ; protected : bool)",
    "insertText": "AttachToAUGraph()"
  },
  {
    "label": "DetachFromAUGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetachFromAUGraph()"
  },
  {
    "label": "IOSAudioRenderCallback()",
    "kind": "Method",
    "detail": "Function (FIOSAudioDevice* IOSAudioDevice ; FIOSAudioSoundBuffer* IOSBuffer ; uint32 BusNumber ; int32 CallbackLock ; bool bChannel0Finished ; bool bAllChannelsFinished ; private : OSStatus)",
    "insertText": "IOSAudioRenderCallback(void *InRefCon, AudioUnitRenderActionFlags *IOActionFlags, const AudioTimeStamp *InTimeStamp, UInt32 InBusNumber, UInt32 InNumberFrames, AudioBufferList *IOData)"
  },
  {
    "label": "CleanupAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupAudioBuffer()"
  },
  {
    "label": "FIOSAudioDevice()",
    "kind": "Method",
    "detail": "Function (class FIOSAudioDevice ; } ; class FIOSAudioDevice : public FAudioDevice { public :)",
    "insertText": "FIOSAudioDevice()"
  },
  {
    "label": "GetAudioUnitGraph()",
    "kind": "Method",
    "detail": "Function (} AUGraph)",
    "insertText": "GetAudioUnitGraph()"
  },
  {
    "label": "SuspendContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendContext()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar = *GLog)"
  },
  {
    "label": "UpdateDeviceDeltaTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeviceDeltaTime()"
  },
  {
    "label": "IncrementSuspendCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementSuspendCounter()"
  },
  {
    "label": "DecrementSuspendCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementSuspendCounter()"
  },
  {
    "label": "InitializeHardware()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "InitializeHardware()"
  },
  {
    "label": "TeardownHardware()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownHardware()"
  },
  {
    "label": "UpdateHardware()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHardware()"
  },
  {
    "label": "CreateEffectsManager()",
    "kind": "Method",
    "detail": "Function (FAudioEffectsManager*)",
    "insertText": "CreateEffectsManager()"
  },
  {
    "label": "CreateSoundSource()",
    "kind": "Method",
    "detail": "Function (FSoundSource*)",
    "insertText": "CreateSoundSource()"
  },
  {
    "label": "GetHardwareSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHardwareSampleRate(double& OutSampleRate)"
  },
  {
    "label": "SetHardwareSampleRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetHardwareSampleRate(const double& InSampleRate)"
  },
  {
    "label": "SetAudioSessionActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAudioSessionActive(bool bActive)"
  },
  {
    "label": "IsExernalBackgroundSoundActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExernalBackgroundSoundActive()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformSettings)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "HasCompressedAudioInfoClass()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasCompressedAudioInfoClass(USoundWave* SoundWave)"
  }
]