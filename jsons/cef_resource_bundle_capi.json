[
  {
    "label": "_cef_resource_bundle_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_resource_bundle_t"
  },
  {
    "label": "_cef_binary_value_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_binary_value_t"
  },
  {
    "label": "cef_string_userfree_t()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_RESOURCE_BUNDLE_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_RESOURCE_BUNDLE_CAPI_H_ # pragma once # include \" include / capi / cef_base_capi . h \" # include \" include / capi / cef_values_capi . h \" # ifdef __cplusplus \" C \" { # endif typedef struct _cef_resource_bundle_t { cef_base_ref_counted_t base ;)",
    "insertText": "cef_string_userfree_t(CEF_CALLBACK* get_localized_string)( struct _cef_resource_bundle_t* self, int string_id)"
  },
  {
    "label": "_cef_binary_value_t()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "_cef_binary_value_t(CEF_CALLBACK* get_data_resource)( struct _cef_resource_bundle_t* self, int resource_id)"
  },
  {
    "label": "_cef_binary_value_t()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "_cef_binary_value_t(CEF_CALLBACK* get_data_resource_for_scale)( struct _cef_resource_bundle_t* self, int resource_id, cef_scale_factor_t scale_factor)"
  },
  {
    "label": "cef_resource_bundle_get_global()",
    "kind": "Method",
    "detail": "Function (} cef_resource_bundle_t ; CEF_EXPORT cef_resource_bundle_t*)",
    "insertText": "cef_resource_bundle_get_global()"
  }
]