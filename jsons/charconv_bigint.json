[
  {
    "label": "BigUnsigned",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BigUnsigned"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CHARCONV_BIGINT_H_ # define ABSL_STRINGS_INTERNAL_CHARCONV_BIGINT_H_ # include<algorithm> # include<cstdint> # include<iostream> # include<string> # include \" absl / base / config . h \" # include \" absl / strings / ascii . h \" # include \" absl / strings / internal / charconv_parse . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace strings_internal { int kMaxSmallPowerOfFive = 1 3 ; int kMaxSmallPowerOfTen = 9 ; ABSL_DLL const uint32_t kFiveToNth [ kMaxSmallPowerOfFive + 1 ] ; ABSL_DLL const uint32_t kTenToNth [ kMaxSmallPowerOfTen + 1 ] ; template<int max_words> class BigUnsigned { public :)",
    "insertText": "static_assert(max_words == 4 || max_words == 84, \"unsupported max_words value\")"
  },
  {
    "label": "BigUnsigned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BigUnsigned() : size_(0)"
  },
  {
    "label": "BigUnsigned()",
    "kind": "Method",
    "detail": "Function (} { })",
    "insertText": "BigUnsigned(uint64_t v) : size_((v >> 32) ? 2 : v ? 1 : 0)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "uint32_t(v & 0xffffffffu), static_cast<uint32_t>(v >> 32)"
  },
  {
    "label": "BigUnsigned()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BigUnsigned(absl::string_view sv) : size_(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "if(std::find_if_not(sv.begin(), sv.end(), ascii_isdigit) != sv.end() || sv.empty())"
  },
  {
    "label": "MultiplyByTenToTheNth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByTenToTheNth(exponent_adjust)"
  },
  {
    "label": "ReadFloatMantissa()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "ReadFloatMantissa(const ParsedFloat& fp, int significant_digits)"
  },
  {
    "label": "Digits10()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Digits10()"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShiftLeft(int count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int word_shift = count / 3 2 ;)",
    "insertText": "if(word_shift >= max_words)"
  },
  {
    "label": "SetToZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToZero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (count % = 3 2 ;)",
    "insertText": "if(count == 0)"
  },
  {
    "label": "copy_backward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy_backward(words_, words_ + size_ - word_shift, words_ + size_)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int i = (std::min)(size_, max_words - 1); i > word_shift; --i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (words_ [)",
    "insertText": "i(words_[i - word_shift] << count) | (words_[i - word_shift - 1] >> (32 - count))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} words_ [ word_shift ] = words_ [ 0 ]<<count ;)",
    "insertText": "if(size_ < max_words && words_[size_])"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (+ + size_ ; } })",
    "insertText": "fill(words_, words_ + word_shift, 0u)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MultiplyBy(uint32_t v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (window + = factor* words_ [ i ] ; words_ [ i ] = window& 0 xffffffff ; window>> = 3 2 ; })",
    "insertText": "if(window && size_ < max_words)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (words_ [ size_ ] = window& 0 xffffffff ; + + size_ ; } } void)",
    "insertText": "MultiplyBy(uint64_t v)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (uint32_t words [ 2 ] ; words [ 0 ] = static_cast<)",
    "insertText": "uint32_t(v)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (words [ 1 ] = static_cast<)",
    "insertText": "uint32_t(v >> 32)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyBy(words[0])"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "MultiplyBy(2, words)"
  },
  {
    "label": "MultiplyByFiveToTheNth()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MultiplyByFiveToTheNth(int n)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyBy(kFiveToNth[kMaxSmallPowerOfFive])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n - = kMaxSmallPowerOfFive ; })",
    "insertText": "if(n > 0)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyBy(kFiveToNth[n])"
  },
  {
    "label": "MultiplyByTenToTheNth()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MultiplyByTenToTheNth(int n)"
  },
  {
    "label": "MultiplyByFiveToTheNth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyByFiveToTheNth(n)"
  },
  {
    "label": "ShiftLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShiftLeft(n)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyBy(kTenToNth[n])"
  },
  {
    "label": "FiveToTheNth()",
    "kind": "Method",
    "detail": "Function (} } BigUnsigned)",
    "insertText": "FiveToTheNth(int n)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (template<int M> void)",
    "insertText": "MultiplyBy(const BigUnsigned<M>& other)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyBy(other.size(), other.words())"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(words_, words_ + size_, 0u)"
  },
  {
    "label": "GetWord()",
    "kind": "Method",
    "detail": "Function (size_ = 0 ; } uint32_t)",
    "insertText": "GetWord(int index)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "size()"
  },
  {
    "label": "MultiplyStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyStep(int original_size, const uint32_t* other_words, int other_size, int step)"
  },
  {
    "label": "MultiplyBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyBy(int other_size, const uint32_t* other_words)"
  },
  {
    "label": "first_step()",
    "kind": "Method",
    "detail": "Function (const int original_size = size_ ; const int)",
    "insertText": "first_step(std::min)(original_size + other_size - 2, max_words - 1)"
  },
  {
    "label": "MultiplyStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyStep(original_size, other_words, other_size, step)"
  },
  {
    "label": "AddWithCarry()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddWithCarry(int index, uint32_t value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (words_ [ index ] + = value ;)",
    "insertText": "if(value > words_[index])"
  },
  {
    "label": "size_()",
    "kind": "Method",
    "detail": "Function (value = 1 ; + + index ; } else { value = 0 ; } })",
    "insertText": "size_(std::min)(max_words, (std::max)(index + 1, size_))"
  },
  {
    "label": "AddWithCarry()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddWithCarry(int index, uint64_t value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t high = value>> 3 2 ; uint32_t low = value& 0 xffffffff ; words_ [ index ] + = low ;)",
    "insertText": "if(words_[index] < low)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + high ;)",
    "insertText": "if(high == 0)"
  },
  {
    "label": "AddWithCarry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWithCarry(index + 2, static_cast<uint32_t>(1))"
  },
  {
    "label": "AddWithCarry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWithCarry(index + 1, high)"
  },
  {
    "label": "DivMod()",
    "kind": "Method",
    "detail": "Function (} } } template<uint32_t divisor> uint32_t)",
    "insertText": "DivMod()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64_t accumulator = 0 ;)",
    "insertText": "for(int i = size_ - 1; i >= 0; --i)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (accumulator<<= 3 2 ; accumulator + = words_ [ i ] ; words_ [ i ] = static_cast<)",
    "insertText": "uint32_t(accumulator / divisor)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (accumulator = accumulator % divisor ; })",
    "insertText": "while(size_ > 0 && words_[size_ - 1] == 0)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (- - size_ ; } return static_cast<)",
    "insertText": "uint32_t(accumulator)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} int size_ ; uint32_t words_ [ max_words ] ; } ; template<int N,int M> int)",
    "insertText": "Compare(const BigUnsigned<N>& lhs, const BigUnsigned<M>& rhs)"
  },
  {
    "label": "limit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "limit(std::max)(lhs.size(), rhs.size())"
  },
  {
    "label": "GetWord()",
    "kind": "Method",
    "detail": "Function (const uint32_t lhs_word = lhs .)",
    "insertText": "GetWord(i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<int N,int M> bool)",
    "insertText": "operator(const BigUnsigned<N>& lhs, const BigUnsigned<M>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<int N> std::ostream&)",
    "insertText": "operator(std::ostream& os, const BigUnsigned<N>& num)"
  }
]