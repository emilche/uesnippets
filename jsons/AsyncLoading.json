[
  {
    "label": "FAsyncPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackage"
  },
  {
    "label": "FFlushRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlushRequest"
  },
  {
    "label": "FAsyncLoadingThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadingThread"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUnsafeWeakAsyncPackagePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnsafeWeakAsyncPackagePtr"
  },
  {
    "label": "FWeakAsyncPackagePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakAsyncPackagePtr"
  },
  {
    "label": "FEventLoadNodePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLoadNodePtr"
  },
  {
    "label": "FEventLoadNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLoadNode"
  },
  {
    "label": "FEventLoadNodeArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLoadNodeArray"
  },
  {
    "label": "FEventLoadGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventLoadGraph"
  },
  {
    "label": "FAsyncLoadEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncLoadEventArgs"
  },
  {
    "label": "FImportOrImportIndexArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportOrImportIndexArray"
  },
  {
    "label": "FScopedAsyncPackageEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedAsyncPackageEvent"
  },
  {
    "label": "FAsyncPackageScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackageScope"
  },
  {
    "label": "FEDLBootNotificationManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEDLBootNotificationManager"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "FCompletionCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompletionCallback"
  },
  {
    "label": "FExportIORequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportIORequest"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FUnsafeWeakAsyncPackagePtr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" UObject / ObjectResource . h \" # include \" UObject / GCObject . h \" # include \" Serialization / AsyncPackage . h \" # include \" UObject / Package . h \" # include \" Templates / Casts . h \" # include \" UObject / ObjectRedirector . h \" # include \" UObject / UObjectThreadContext . h \" # include \" UObject / LinkerInstancingContext . h \" # include \" Templates / RefCounting . h \" # include \" Serialization / AsyncPackageLoader . h \" # include \" Async / AsyncFileHandle . h \" struct FAsyncPackage ; struct FFlushRequest ; class FAsyncLoadingThread ; enum class EAsyncPackageLoadingState : uint8 { NewPackage,WaitingForSummary,StartImportPackages,WaitingForImportPackages,SetupImports,SetupExports,ProcessNewImportsAndExports,WaitingForPostLoad,ReadyForPostLoad,PostLoad_Etc,PackageComplete,} ; struct FUnsafeWeakAsyncPackagePtr { FAsyncPackage* Package ;)",
    "insertText": "FUnsafeWeakAsyncPackagePtr(FAsyncPackage* InPackage = nullptr) : Package(InPackage)"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} FAsyncPackage&)",
    "insertText": "GetPackage()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FUnsafeWeakAsyncPackagePtr& Other)"
  },
  {
    "label": "FWeakAsyncPackagePtr()",
    "kind": "Method",
    "detail": "Function (} ; struct FWeakAsyncPackagePtr { FName PackageName ; int32 SerialNumber ;)",
    "insertText": "FWeakAsyncPackagePtr(FAsyncPackage* Package = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FWeakAsyncPackagePtr& Other)"
  },
  {
    "label": "USE_IMPLICIT_ARCS()",
    "kind": "Method",
    "detail": "Function (# else typedef FUnsafeWeakAsyncPackagePtr FCheckedWeakAsyncPackagePtr ; # endif enum class EEventLoadNode { Package_LoadSummary,Package_SetupImports,Package_ExportsSerialized,Package_NumPhases,ImportOrExport_Create = 0,ImportOrExport_Serialize,Import_NumPhases,Export_StartIO = Import_NumPhases,Export_NumPhases,MAX_NumPhases = Package_NumPhases,Invalid_Value = - 1 } ; # define)",
    "insertText": "USE_IMPLICIT_ARCS(1)"
  },
  {
    "label": "FEventLoadNodePtr()",
    "kind": "Method",
    "detail": "Function (FCheckedWeakAsyncPackagePtr WaitingPackage ; FPackageIndex ImportOrExportIndex ; EEventLoadNode Phase ;)",
    "insertText": "FEventLoadNodePtr() : Phase(EEventLoadNode::Invalid_Value)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FEventLoadNodePtr& NodePtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if 0 bool)",
    "insertText": "operator(const FEventLoadNodePtr& Other)"
  },
  {
    "label": "GetImplicitArc()",
    "kind": "Method",
    "detail": "Function (} FEventLoadNodePtr)",
    "insertText": "GetImplicitArc()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventLoadNodePtr Result ; Result . WaitingPackage = WaitingPackage ;)",
    "insertText": "if(Phase == EEventLoadNode::ImportOrExport_Serialize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Result . Phase = EEventLoadNode::Package_ExportsSerialized ;)",
    "insertText": "check(Result.ImportOrExportIndex.IsNull())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { Result . ImportOrExportIndex = ImportOrExportIndex ;)",
    "insertText": "if(Phase == EEventLoadNode::ImportOrExport_Create)"
  },
  {
    "label": "IsImport()",
    "kind": "Method",
    "detail": "Function (Result . Phase = ImportOrExportIndex .)",
    "insertText": "IsImport()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Phase == EEventLoadNode::Export_StartIO)"
  },
  {
    "label": "HumanReadableStringForDebugging()",
    "kind": "Method",
    "detail": "Function (Result . Phase = EEventLoadNode::ImportOrExport_Serialize ; } } return Result ; } # endif FString)",
    "insertText": "HumanReadableStringForDebugging()"
  },
  {
    "label": "FEventLoadNode()",
    "kind": "Method",
    "detail": "Function (} ; struct FEventLoadNode { # if USE_IMPLICIT_ARCS typedef TArray<FEventLoadNodePtr> TNodesWaitingForMeArray ; # else typedef TArray<FEventLoadNodePtr,TInlineAllocator<1>> TNodesWaitingForMeArray ; # endif TNodesWaitingForMeArray NodesWaitingForMe ; int32 NumPrerequistes ; bool bFired ; bool bAddedToGraph ;)",
    "insertText": "FEventLoadNode() : NumPrerequistes(0) , bFired(false) , bAddedToGraph(false)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} } ; struct FEventLoadNodeArray { FEventLoadNode PackageNodes [)",
    "insertText": "int(EEventLoadNode::Package_NumPhases)"
  },
  {
    "label": "FEventLoadNodeArray()",
    "kind": "Method",
    "detail": "Function (FEventLoadNode* Array ; int32 TotalNumberOfImportExportNodes ; int32 TotalNumberOfNodesAdded ; int32 NumImports ; int32 NumExports ; int32 OffsetToImports ; int32 OffsetToExports ;)",
    "insertText": "FEventLoadNodeArray() : Array(nullptr) , TotalNumberOfImportExportNodes(0) , TotalNumberOfNodesAdded(0) , NumImports(0) , NumExports(0) , OffsetToImports(0) , OffsetToExports(0)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddNode(FEventLoadNodePtr Node)"
  },
  {
    "label": "NodeRef()",
    "kind": "Method",
    "detail": "Function (FEventLoadNode&)",
    "insertText": "NodeRef(PtrToNode(Node))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (NodeRef . bAddedToGraph = true ;)",
    "insertText": "return(++TotalNumberOfNodesAdded)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveNode(FEventLoadNodePtr Node)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (NodeRef . bAddedToGraph = false ;)",
    "insertText": "return(--TotalNumberOfNodesAdded)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} FEventLoadNode&)",
    "insertText": "GetNode(FEventLoadNodePtr Node, bool bCheckAdded = true)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetAddedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAddedNodes(TArray<FEventLoadNodePtr>& OutAddedNodes, FAsyncPackage* Owner)"
  },
  {
    "label": "PtrToNode()",
    "kind": "Method",
    "detail": "Function (private : FEventLoadNode&)",
    "insertText": "PtrToNode(FEventLoadNodePtr Node)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Index ;)",
    "insertText": "if(Node.ImportOrExportIndex.IsNull())"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (Index =)",
    "insertText": "int32(Node.Phase)"
  },
  {
    "label": "ToImport()",
    "kind": "Method",
    "detail": "Function (Index = OffsetToImports + Node . ImportOrExportIndex .)",
    "insertText": "ToImport() * int32(EEventLoadNode::Import_NumPhases) + int32(Node.Phase)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(int32(Node.Phase) < int32(EEventLoadNode::Export_NumPhases))"
  },
  {
    "label": "ToExport()",
    "kind": "Method",
    "detail": "Function (Index = OffsetToExports + Node . ImportOrExportIndex .)",
    "insertText": "ToExport() * int32(EEventLoadNode::Export_NumPhases) + int32(Node.Phase)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(Array && Index < TotalNumberOfImportExportNodes && Index >= 0)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (FEventLoadNode&)",
    "insertText": "GetNode(FEventLoadNodePtr& NodeToGet)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNode(FEventLoadNodePtr& NewNode, bool bHoldForLater = false, int32 NumImplicitPrereqs = 0)"
  },
  {
    "label": "DoneAddingPrerequistesFireIfNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoneAddingPrerequistesFireIfNone(FEventLoadNodePtr& NewNode, bool bWasHeldForLater = false)"
  },
  {
    "label": "AddArc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArc(FEventLoadNodePtr& PrereqisiteNode, FEventLoadNodePtr& DependentNode)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(FEventLoadNodePtr& NodeToRemove)"
  },
  {
    "label": "NodeWillBeFiredExternally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeWillBeFiredExternally(FEventLoadNodePtr& NodeThatWasFired)"
  },
  {
    "label": "CheckForCycles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForCycles(bool bDoSlowTests = (!UE_BUILD_SHIPPING && !UE_BUILD_TEST))"
  },
  {
    "label": "CheckForCyclesInner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForCyclesInner(const TMultiMap<FEventLoadNodePtr, FEventLoadNodePtr>& Arcs, TSet<FEventLoadNodePtr>& Visited, TSet<FEventLoadNodePtr>& Stack, const FEventLoadNodePtr& Visit)"
  },
  {
    "label": "FAsyncLoadEventArgs()",
    "kind": "Method",
    "detail": "Function (} ; struct FAsyncLoadEventArgs { double TickStartTime ; const TCHAR* OutLastTypeOfWorkPerformed ; UObject* OutLastObjectWorkWasPerformedOn ; float TimeLimit ; bool bUseTimeLimit ; bool bUseFullTimeLimit ;)",
    "insertText": "FAsyncLoadEventArgs() : TickStartTime(0.0) , OutLastTypeOfWorkPerformed(nullptr) , OutLastObjectWorkWasPerformedOn(nullptr) , TimeLimit(0.0f) , bUseTimeLimit(false) , bUseFullTimeLimit(true)"
  },
  {
    "label": "HeapPop()",
    "kind": "Method",
    "detail": "Function (} } ; class FImportOrImportIndexArray : public TArray<int32> { public : void)",
    "insertText": "HeapPop(int32& OutItem, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"HeapPop\") FORCEINLINE void HeapPop(int32& OutItem, bool bAllowShrinking)"
  },
  {
    "label": "HeapPop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapPop(OutItem, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "FAsyncPackage()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAsyncPackage : public FGCObject { struct FScopedAsyncPackageEvent ; struct FAsyncPackageScope ;)",
    "insertText": "FAsyncPackage(FAsyncLoadingThread& InThread, const FAsyncPackageDesc& InDesc, struct FEDLBootNotificationManager& InEDLBootNotificationManager)"
  },
  {
    "label": "FAsyncPackage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncPackage()"
  },
  {
    "label": "TickAsyncPackage()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "TickAsyncPackage(bool bUseTimeLimit, bool bInbUseFullTimeLimit, float& InOutTimeLimit)"
  },
  {
    "label": "MarkRequestIDsAsComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRequestIDsAsComplete()"
  },
  {
    "label": "ResetLoader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLoader()"
  },
  {
    "label": "DetachLinker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachLinker()"
  },
  {
    "label": "FlushObjectLinkerCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushObjectLinkerCache()"
  },
  {
    "label": "GetLinkerRoot()",
    "kind": "Method",
    "detail": "Function (} UPackage*)",
    "insertText": "GetLinkerRoot()"
  },
  {
    "label": "HasLoadFailed()",
    "kind": "Method",
    "detail": "Function (Desc . Priority = InPriority ; } bool)",
    "insertText": "HasLoadFailed()"
  },
  {
    "label": "HasThreadedLoadingFinished()",
    "kind": "Method",
    "detail": "Function (bThreadedLoadingFinished = true ; } bool)",
    "insertText": "HasThreadedLoadingFinished()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "SetDependencyRootPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDependencyRootPackage(FAsyncPackage* InDependencyRootPackage)"
  },
  {
    "label": "IsBeingProcessedRecursively()",
    "kind": "Method",
    "detail": "Function (DependencyRootPackage = InDependencyRootPackage ; } bool)",
    "insertText": "IsBeingProcessedRecursively()"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "AddObjectReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddObjectReference(UObject* InObject)"
  },
  {
    "label": "EmptyReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyReferencedObjects()"
  },
  {
    "label": "GetLoadedPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetLoadedPackage()"
  },
  {
    "label": "GetLoadedAssetsAndPackages()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GetLoadedAssetsAndPackages(TSet<FWeakObjectPtr>& AssetList, TSet<UPackage*>& PackageList)"
  },
  {
    "label": "AreAllDependenciesFullyLoaded()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "AreAllDependenciesFullyLoaded(TSet<UPackage*>& VisitedPackages)"
  },
  {
    "label": "HasClusterObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClusterObjects()"
  },
  {
    "label": "CreateClusters()",
    "kind": "Method",
    "detail": "Function (} EAsyncPackageState::Type)",
    "insertText": "CreateClusters(double InTickStartTime, bool bInUseTimeLimit, double InOutTimeLimit)"
  },
  {
    "label": "IsDependencyOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDependencyOf(int32 RequestID)"
  },
  {
    "label": "AreAllDependenciesFullyLoadedInternal()",
    "kind": "Method",
    "detail": "Function (private : class FLinkerLoad ; bool)",
    "insertText": "AreAllDependenciesFullyLoadedInternal(FAsyncPackage* Package, TSet<UPackage*>& VisitedPackages, FString& OutError)"
  },
  {
    "label": "FCompletionCallback()",
    "kind": "Method",
    "detail": "Function (struct FCompletionCallback { bool bIsInternal ; bool bCalled ; TUniquePtr<FLoadPackageAsyncDelegate> Callback ;)",
    "insertText": "FCompletionCallback() : bIsInternal(false) , bCalled(false)"
  },
  {
    "label": "FCompletionCallback()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCompletionCallback(bool bInInternal, TUniquePtr<FLoadPackageAsyncDelegate>&& InCallback) : bIsInternal(bInInternal) , bCalled(false) , Callback(MoveTemp(InCallback))"
  },
  {
    "label": "AddDependentRequestsTo()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "AddDependentRequestsTo(FAsyncPackage* InDependency)"
  },
  {
    "label": "AddDependentRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependentRequests(TArrayView<int32 const> Requests)"
  },
  {
    "label": "IsFullyLoadedObj()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyLoadedObj(UObject* Obj)"
  },
  {
    "label": "FExportIORequest()",
    "kind": "Method",
    "detail": "Function (FAsyncPackageDesc Desc ; FLinkerLoad* Linker ; UPackage* LinkerRoot ; TArray<FCompletionCallback> CompletionCallbacks ; TMap<FName,FAsyncPackage*> PendingImportedPackages ; TArray<FAsyncPackage*> ReferencedImports ; FAsyncPackage* DependencyRootPackage ; FThreadSafeCounter DependencyRefCount ; int32 LoadImportIndex ; int32 ImportIndex ; int32 ExportIndex ; int32 PreLoadIndex ; int32 PreLoadSortIndex ; int32 FinishExternalReadDependenciesIndex ; int32 PostLoadIndex ; int32 DeferredPostLoadIndex ; int32 PostLoadInstanceIndex ; int32 DeferredFinalizeIndex ; int32 DeferredClusterIndex ; float TimeLimit ; bool bUseTimeLimit ; bool bUseFullTimeLimit ; bool bTimeLimitExceeded ; bool bLoadHasFailed ; bool bLoadHasFinished ; bool bThreadedLoadingFinished ; bool bCreatedLinkerRoot ; double TickStartTime ; UObject* LastObjectWorkWasPerformedOn ; const TCHAR* LastTypeOfWorkPerformed ; double LoadStartTime ; float LoadPercentage ; TArray<UObject*> DeferredPostLoadObjects ; TArray<TObjectPtr<UObject>> DeferredFinalizeObjects ; TArray<TObjectPtr<UObject>> PackageObjLoaded ; TArray<FLinkerLoad*> DelayedLinkerClosePackages ; TArray<UObject*> DeferredClusterObjects ; TArray<int32> RequestIDs ; FRWLock DependentRequestsLock ; TSet<int32> DependentRequests ; # if WITH_METADATA TOptional<int32> MetaDataIndex ; # endif std::atomic<int32> ReentryCount ; TSet<TObjectPtr<UObject>> ReferencedObjects ; FCriticalSection ReferencedObjectsCritical ; FAsyncLoadingThread& AsyncLoadingThread ; FEDLBootNotificationManager& EDLBootNotificationManager ; TSet<TObjectPtr<UPackage>> ImportedPackages ; public : EAsyncPackageLoadingState AsyncPackageLoadingState ; int32 SerialNumber ; FImportOrImportIndexArray ImportsThatAreNowCreated ; FImportOrImportIndexArray ImportsThatAreNowSerialized ; FImportOrImportIndexArray ExportsThatCanBeCreated ; FImportOrImportIndexArray ExportsThatCanHaveIOStarted ; FImportOrImportIndexArray ExportsThatCanBeSerialized ; TArray<IAsyncReadRequest*> ReadyPrecacheRequests ; struct FExportIORequest { int64 Offset ; int64 BytesToRead ; int32 FirstExportCovered ; int32 LastExportCovered ; TArray<int32> ExportsToRead ;)",
    "insertText": "FExportIORequest() : Offset(-1) , BytesToRead(-1) , FirstExportCovered(-1) , LastExportCovered(-1)"
  },
  {
    "label": "Event_CreateLinker()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<IAsyncReadRequest*,FAsyncPackage::FExportIORequest> PrecacheRequests ; TMap<int32,IAsyncReadRequest*> ExportIndexToPrecacheRequest ; int64 CurrentBlockOffset ; int64 CurrentBlockBytes ; TSet<int32> ExportsInThisBlock ; TMap<TPair<FName,FPackageIndex>,FPackageIndex> ObjectNameWithOuterToExport ; TSet<FWeakAsyncPackagePtr> PackagesIMayBeWaitingForBeforePostload ; TSet<FWeakAsyncPackagePtr> PackagesIAmWaitingForBeforePostload ; TSet<FWeakAsyncPackagePtr> OtherPackagesWaitingForMeBeforePostload ; TArray<FCheckedWeakAsyncPackagePtr> PackagesWaitingToLinkImports ; int32 ImportAddNodeIndex ; int32 ExportAddNodeIndex ; bool bProcessImportsAndExportsInFlight ; bool bProcessPostloadWaitInFlight ; bool bAllExportsSerialized ; void)",
    "insertText": "Event_CreateLinker()"
  },
  {
    "label": "Event_FinishLinker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_FinishLinker()"
  },
  {
    "label": "Event_StartImportPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_StartImportPackages()"
  },
  {
    "label": "Event_SetupImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_SetupImports()"
  },
  {
    "label": "Event_SetupExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_SetupExports()"
  },
  {
    "label": "Event_ProcessImportsAndExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_ProcessImportsAndExports()"
  },
  {
    "label": "Event_ExportsDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_ExportsDone()"
  },
  {
    "label": "Event_ProcessPostloadWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_ProcessPostloadWait()"
  },
  {
    "label": "Event_StartPostload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Event_StartPostload()"
  },
  {
    "label": "MarkNewObjectForLoadIfItIsAnExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNewObjectForLoadIfItIsAnExport(UObject *Object)"
  },
  {
    "label": "AnyImportsAndExportWorkOutstanding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyImportsAndExportWorkOutstanding()"
  },
  {
    "label": "ConditionalQueueProcessImportsAndExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalQueueProcessImportsAndExports(bool bRequeueForTimeout = false)"
  },
  {
    "label": "ConditionalQueueProcessPostloadWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalQueueProcessPostloadWait()"
  },
  {
    "label": "LoadImports_Event()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "LoadImports_Event()"
  },
  {
    "label": "SetupImports_Event()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "SetupImports_Event()"
  },
  {
    "label": "SetupExports_Event()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "SetupExports_Event()"
  },
  {
    "label": "ProcessImportsAndExports_Event()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "ProcessImportsAndExports_Event()"
  },
  {
    "label": "FindExistingImport()",
    "kind": "Method",
    "detail": "Function (FObjectImport*)",
    "insertText": "FindExistingImport(int32 LocalImportIndex)"
  },
  {
    "label": "LinkImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkImport(int32 LocalImportIndex)"
  },
  {
    "label": "EventDrivenCreateExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventDrivenCreateExport(int32 LocalExportIndex)"
  },
  {
    "label": "StartPrecacheRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPrecacheRequest()"
  },
  {
    "label": "EventDrivenSerializeExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventDrivenSerializeExport(int32 LocalExportIndex)"
  },
  {
    "label": "PrecacheRequestReady()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "PrecacheRequestReady(IAsyncReadRequest * Req)"
  },
  {
    "label": "MakeNextPrecacheRequestCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNextPrecacheRequestCurrent()"
  },
  {
    "label": "FlushPrecacheBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPrecacheBuffer()"
  },
  {
    "label": "EventDrivenLoadingComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventDrivenLoadingComplete()"
  },
  {
    "label": "DumpDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpDependencies(const TCHAR* Label, UObject* Obj)"
  },
  {
    "label": "DumpDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpDependencies(const TCHAR* Label, FLinkerLoad* DumpLinker, FPackageIndex Index)"
  },
  {
    "label": "EventDrivenIndexToObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "EventDrivenIndexToObject(FPackageIndex Index, bool bCheckSerialized, FPackageIndex DumpIndex = FPackageIndex())"
  },
  {
    "label": "CastEventDrivenIndexToObject()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "CastEventDrivenIndexToObject(FPackageIndex Index, bool bCheckSerialized, FPackageIndex DumpIndex = FPackageIndex())"
  },
  {
    "label": "EventDrivenIndexToObject()",
    "kind": "Method",
    "detail": "Function (UObject* Result =)",
    "insertText": "EventDrivenIndexToObject(Index, bCheckSerialized, DumpIndex)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (} FEventLoadNodeArray EventNodeArray ; FEventLoadNodePtr)",
    "insertText": "AddNode(EEventLoadNode Phase, FPackageIndex ImportOrExportIndex = FPackageIndex(), bool bHoldForLater = false, int32 NumImplicitPrereqs = 0)"
  },
  {
    "label": "DoneAddingPrerequistesFireIfNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoneAddingPrerequistesFireIfNone(EEventLoadNode Phase, FPackageIndex ImportOrExportIndex = FPackageIndex(), bool bWasHeldForLater = false)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(EEventLoadNode Phase, FPackageIndex ImportOrExportIndex = FPackageIndex())"
  },
  {
    "label": "NodeWillBeFiredExternally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NodeWillBeFiredExternally(EEventLoadNode Phase, FPackageIndex ImportOrExportIndex = FPackageIndex())"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "FireNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FireNode(FEventLoadNodePtr& NodeToFire)"
  },
  {
    "label": "GetDebuggingPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebuggingPath(FPackageIndex Idx)"
  },
  {
    "label": "SetTimeLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeLimit(FAsyncLoadEventArgs& Args, const TCHAR* WorkType)"
  },
  {
    "label": "GetOwnerThread()",
    "kind": "Method",
    "detail": "Function (Args . OutLastTypeOfWorkPerformed = WorkType ; Args . OutLastObjectWorkWasPerformedOn = LinkerRoot ; TickStartTime = Args . TickStartTime ; LastTypeOfWorkPerformed = WorkType ; LastObjectWorkWasPerformedOn = LinkerRoot ; TimeLimit = Args . TimeLimit ; bUseTimeLimit = Args . bUseTimeLimit ; bUseFullTimeLimit = Args . bUseFullTimeLimit ; } FAsyncLoadingThread&)",
    "insertText": "GetOwnerThread()"
  },
  {
    "label": "PostLoadDeferredObjects()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "PostLoadDeferredObjects(double InTickStartTime, bool bInUseTimeLimit, double InOutTimeLimit)"
  },
  {
    "label": "CloseDelayedLinkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDelayedLinkers()"
  },
  {
    "label": "GiveUpTimeSlice()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "GiveUpTimeSlice()"
  },
  {
    "label": "IsTimeLimitExceeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTimeLimitExceeded()"
  },
  {
    "label": "BeginAsyncLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAsyncLoad()"
  },
  {
    "label": "EndAsyncLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAsyncLoad()"
  },
  {
    "label": "CreateLinker()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "CreateLinker()"
  },
  {
    "label": "FinishLinker()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "FinishLinker()"
  },
  {
    "label": "LoadImports()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "LoadImports()"
  },
  {
    "label": "CreateImports()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "CreateImports()"
  },
  {
    "label": "CreateMetaData()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA EAsyncPackageState::Type)",
    "insertText": "CreateMetaData()"
  },
  {
    "label": "CreateExports()",
    "kind": "Method",
    "detail": "Function (# endif EAsyncPackageState::Type)",
    "insertText": "CreateExports()"
  },
  {
    "label": "PreLoadObjects()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "PreLoadObjects()"
  },
  {
    "label": "PostLoadObjects()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "PostLoadObjects()"
  },
  {
    "label": "FinishObjects()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "FinishObjects()"
  },
  {
    "label": "FinishExternalReadDependencies()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "FinishExternalReadDependencies()"
  },
  {
    "label": "ImportPreLoadedAsyncCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportPreLoadedAsyncCallback(const FName& PackageName, UPackage* LoadedPackage, EAsyncLoadingResult::Type Result)"
  },
  {
    "label": "AddDependencyTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependencyTree(FAsyncPackage& ImportedPackage, TSet<FAsyncPackage*>& SearchedPackages)"
  },
  {
    "label": "AddUniqueLinkerDependencyPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddUniqueLinkerDependencyPackage(FAsyncPackage& PendingImport)"
  },
  {
    "label": "AddImportDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImportDependency(const FName& PendingImport, const FName& PackageToLoad, FLinkerInstancingContext InstancingContext)"
  },
  {
    "label": "FreeReferencedImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeReferencedImports()"
  },
  {
    "label": "UpdateLoadPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLoadPercentage()"
  },
  {
    "label": "TrackCreateExportTimeForClass()",
    "kind": "Method",
    "detail": "Function (# if PERF_TRACK_DETAILED_ASYNC_STATS void)",
    "insertText": "TrackCreateExportTimeForClass(const UClass* Class, double Time)"
  },
  {
    "label": "TrackPostLoadTimeForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackPostLoadTimeForClass(const UClass* Class, double Time)"
  },
  {
    "label": "GetSerializeContext()",
    "kind": "Method",
    "detail": "Function (# endif public : FUObjectSerializeContext*)",
    "insertText": "GetSerializeContext()"
  },
  {
    "label": "FScopedAsyncPackageEvent()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedAsyncPackageEvent { FAsyncPackage* Package ; FAsyncPackage* PreviousPackage ; IAsyncPackageLoader* PreviousAsyncPackageLoader ;)",
    "insertText": "FScopedAsyncPackageEvent(FAsyncPackage* InPackage)"
  },
  {
    "label": "FScopedAsyncPackageEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedAsyncPackageEvent()"
  }
]