[
  {
    "label": "dtTileCacheLayerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheLayerHeader"
  },
  {
    "label": "dtTileCacheLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheLayer"
  },
  {
    "label": "dtTileCacheContour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheContour"
  },
  {
    "label": "dtTileCacheContourSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheContourSet"
  },
  {
    "label": "dtTileCachePolyMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCachePolyMesh"
  },
  {
    "label": "dtTileCacheClusterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheClusterSet"
  },
  {
    "label": "dtTileCachePolyMeshDetail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCachePolyMeshDetail"
  },
  {
    "label": "dtTileCacheDistanceField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheDistanceField"
  },
  {
    "label": "dtTileCacheLogContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtTileCacheLogContext"
  },
  {
    "label": "dtTileCacheAlloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheAlloc"
  },
  {
    "label": "dtTileCacheCompressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtTileCacheCompressor"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "dtFixedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtFixedArray"
  },
  {
    "label": "dtLog()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURTILECACHEBUILDER_H # define DETOURTILECACHEBUILDER_H # include \" CoreMinimal . h \" # include \" Detour / DetourAlloc . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" Detour / DetourStatus . h \" # include \" HAL / PlatformString . h \" const int DT_TILECACHE_MAGIC = ' D '<<2 4 | ' T '<<1 6 | ' L '<<8 | ' R ' ; const int DT_TILECACHE_VERSION = 1 ; const unsigned char DT_TILECACHE_NULL_AREA = 0 ; const unsigned char DT_TILECACHE_WALKABLE_AREA = 6 3 ; const unsigned short DT_TILECACHE_NULL_IDX = 0 xffff ; struct dtTileCacheLayerHeader { short version ; int tx,ty,tlayer ; unsigned short hmin,hmax ; unsigned short width,height ; unsigned short minx,maxx,miny,maxy ; dtReal bmin [ 3 ],bmax [ 3 ] ; } ; struct dtTileCacheLayer { dtTileCacheLayerHeader* header ; unsigned short regCount ; unsigned short* heights ; unsigned char* areas ; unsigned char* cons ; unsigned short* regs ; } ; struct dtTileCacheContour { unsigned short* verts ; int nverts ; unsigned short reg ; unsigned char area ; } ; struct dtTileCacheContourSet { int nconts ; dtTileCacheContour* conts ; } ; struct dtTileCachePolyMesh { int nvp ; int nverts ; int npolys ; unsigned short* verts ; unsigned short* polys ; unsigned short* flags ; unsigned char* areas ; unsigned short* regs ; } ; # if WITH_NAVMESH_CLUSTER_LINKS struct dtTileCacheClusterSet { int nclusters ; int nregs ; int npolys ; unsigned short* regMap ; unsigned short* polyMap ; } ; # endif struct dtTileCachePolyMeshDetail { int nmeshes ; int nverts ; int ntris ; unsigned int* meshes ; dtReal* verts ; unsigned char* tris ; } ; struct dtTileCacheDistanceField { unsigned short maxDist ; unsigned short* data ; } ; class dtTileCacheLogContext { public : void)",
    "insertText": "dtLog(const char* format, ...)"
  },
  {
    "label": "doDtLog()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "doDtLog(const char* , const int)"
  },
  {
    "label": "dtTileCacheAlloc()",
    "kind": "Method",
    "detail": "Function (} } ; struct dtTileCacheAlloc { ~)",
    "insertText": "dtTileCacheAlloc()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "alloc(const int size)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "free(void* ptr)"
  },
  {
    "label": "dtFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFree(ptr, DT_ALLOC_TEMP)"
  },
  {
    "label": "maxCompressedSize()",
    "kind": "Method",
    "detail": "Function (} } ; struct dtTileCacheCompressor { int)",
    "insertText": "maxCompressedSize(const int bufferSize)"
  },
  {
    "label": "compress()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "compress(const unsigned char* buffer, const int bufferSize, unsigned char* compressed, const int maxCompressedSize, int* compressedSize)"
  },
  {
    "label": "decompress()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "decompress(const unsigned char* compressed, const int compressedSize, unsigned char* buffer, const int maxBufferSize, int* bufferSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class dtFixedArray { dtTileCacheAlloc* m_alloc ; T* m_ptr ; const int m_size ; T*)",
    "insertText": "operator(T* p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(dtFixedArray<T>& p)"
  },
  {
    "label": "dtFixedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFixedArray()"
  },
  {
    "label": "dtFixedArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "dtFixedArray(dtTileCacheAlloc* a, const int s) : m_alloc(a), m_ptr((T*)a->alloc(sizeof(T)*s)), m_size(s)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_ptr, v, sizeof(T)*m_size)"
  },
  {
    "label": "getDirOffsetX()",
    "kind": "Method",
    "detail": "Function (} } ; int)",
    "insertText": "getDirOffsetX(int dir)"
  },
  {
    "label": "getDirOffsetY()",
    "kind": "Method",
    "detail": "Function (const int offset [ 4 ] = { - 1,0,1,0,} ; return offset [ dir& 0 x03 ] ; } int)",
    "insertText": "getDirOffsetY(int dir)"
  },
  {
    "label": "dtBuildTileCacheLayer()",
    "kind": "Method",
    "detail": "Function (const int offset [ 4 ] = { 0,1,0,- 1 } ; return offset [ dir& 0 x03 ] ; } dtStatus)",
    "insertText": "dtBuildTileCacheLayer(dtTileCacheCompressor* comp, dtTileCacheLayerHeader* header, const unsigned short* heights, const unsigned char* areas, const unsigned char* cons, unsigned char** outData, int* outDataSize)"
  },
  {
    "label": "dtFreeTileCacheLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCacheLayer(dtTileCacheAlloc* alloc, dtTileCacheLayer* layer)"
  },
  {
    "label": "dtDecompressTileCacheLayer()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtDecompressTileCacheLayer(dtTileCacheAlloc* alloc, dtTileCacheCompressor* comp, const unsigned char* compressed, const int compressedSize, dtTileCacheLayer** layerOut)"
  },
  {
    "label": "dtAllocTileCacheContourSet()",
    "kind": "Method",
    "detail": "Function (dtTileCacheContourSet*)",
    "insertText": "dtAllocTileCacheContourSet(dtTileCacheAlloc* alloc)"
  },
  {
    "label": "dtFreeTileCacheContourSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCacheContourSet(dtTileCacheAlloc* alloc, dtTileCacheContourSet* cset)"
  },
  {
    "label": "dtAllocTileCachePolyMesh()",
    "kind": "Method",
    "detail": "Function (dtTileCachePolyMesh*)",
    "insertText": "dtAllocTileCachePolyMesh(dtTileCacheAlloc* alloc)"
  },
  {
    "label": "dtFreeTileCachePolyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCachePolyMesh(dtTileCacheAlloc* alloc, dtTileCachePolyMesh* lmesh)"
  },
  {
    "label": "dtAllocTileCacheClusterSet()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS dtTileCacheClusterSet*)",
    "insertText": "dtAllocTileCacheClusterSet(dtTileCacheAlloc* alloc)"
  },
  {
    "label": "dtFreeTileCacheClusterSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCacheClusterSet(dtTileCacheAlloc* alloc, dtTileCacheClusterSet* clusters)"
  },
  {
    "label": "dtAllocTileCachePolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (# endif dtTileCachePolyMeshDetail*)",
    "insertText": "dtAllocTileCachePolyMeshDetail(dtTileCacheAlloc* alloc)"
  },
  {
    "label": "dtFreeTileCachePolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCachePolyMeshDetail(dtTileCacheAlloc* alloc, dtTileCachePolyMeshDetail* dmesh)"
  },
  {
    "label": "dtAllocTileCacheDistanceField()",
    "kind": "Method",
    "detail": "Function (dtTileCacheDistanceField*)",
    "insertText": "dtAllocTileCacheDistanceField(dtTileCacheAlloc* alloc)"
  },
  {
    "label": "dtFreeTileCacheDistanceField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeTileCacheDistanceField(dtTileCacheAlloc* alloc, dtTileCacheDistanceField* dfield)"
  },
  {
    "label": "dtMarkCylinderArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtMarkCylinderArea(dtTileCacheLayer& layer, const dtReal* orig, const dtReal cs, const dtReal ch, const dtReal* pos, const dtReal radius, const dtReal height, const unsigned char areaId)"
  },
  {
    "label": "dtMarkBoxArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtMarkBoxArea(dtTileCacheLayer& layer, const dtReal* orig, const dtReal cs, const dtReal ch, const dtReal* pos, const dtReal* extent, const unsigned char areaId)"
  },
  {
    "label": "dtMarkConvexArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtMarkConvexArea(dtTileCacheLayer& layer, const dtReal* orig, const dtReal cs, const dtReal ch, const dtReal* verts, const int nverts, const dtReal hmin, const dtReal hmax, const unsigned char areaId)"
  },
  {
    "label": "dtReplaceCylinderArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtReplaceCylinderArea(dtTileCacheLayer& layer, const dtReal* orig, const dtReal cs, const dtReal ch, const dtReal* pos, const dtReal radius, const dtReal height, const unsigned char areaId, const unsigned char filterAreaId)"
  },
  {
    "label": "dtReplaceBoxArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtReplaceBoxArea(dtTileCacheLayer& layer, const dtReal* orig, const dtReal cs, const dtReal ch, const dtReal* pos, const dtReal* extent, const unsigned char areaId, const unsigned char filterAreaId)"
  },
  {
    "label": "dtReplaceConvexArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtReplaceConvexArea(dtTileCacheLayer& layer, const dtReal* orig, const dtReal cs, const dtReal ch, const dtReal* verts, const int nverts, const dtReal hmin, const dtReal hmax, const unsigned char areaId, const unsigned char filterAreaId)"
  },
  {
    "label": "dtReplaceArea()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtReplaceArea(dtTileCacheLayer& layer, const unsigned char areaId, const unsigned char filterAreaId)"
  },
  {
    "label": "dtBuildTileCacheDistanceField()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCacheDistanceField(dtTileCacheAlloc* alloc, dtTileCacheLayer& layer, dtTileCacheDistanceField& dfield)"
  },
  {
    "label": "dtBuildTileCacheRegions()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCacheRegions(dtTileCacheAlloc* alloc, const int minRegionArea, const int mergeRegionArea, dtTileCacheLayer& layer, dtTileCacheDistanceField dfield)"
  },
  {
    "label": "dtBuildTileCacheRegionsMonotone()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCacheRegionsMonotone(dtTileCacheAlloc* alloc, const int minRegionArea, const int mergeRegionArea, dtTileCacheLayer& layer)"
  },
  {
    "label": "dtBuildTileCacheRegionsChunky()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCacheRegionsChunky(dtTileCacheAlloc* alloc, const int minRegionArea, const int mergeRegionArea, dtTileCacheLayer& layer, int regionChunkSize)"
  },
  {
    "label": "dtBuildTileCacheContours()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCacheContours(dtTileCacheAlloc* alloc, dtTileCacheLayer& layer, const int walkableClimb, const dtReal maxError, const dtReal simplificationElevationRatio, const dtReal cs, const dtReal ch, dtTileCacheContourSet& lcset #if WITH_NAVMESH_CLUSTER_LINKS , dtTileCacheClusterSet& lclusters #endif , const bool skipContourSimplification = false)"
  },
  {
    "label": "dtBuildTileCachePolyMesh()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCachePolyMesh(dtTileCacheAlloc* alloc, dtTileCacheLogContext* ctx, dtTileCacheContourSet& lcset, dtTileCachePolyMesh& mesh, const int walkableClimb)"
  },
  {
    "label": "dtBuildTileCachePolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (dtStatus)",
    "insertText": "dtBuildTileCachePolyMeshDetail(dtTileCacheAlloc* alloc, const dtReal cs, const dtReal ch, const dtReal sampleDist, const dtReal sampleMaxError, dtTileCacheLayer& layer, dtTileCachePolyMesh& lmesh, dtTileCachePolyMeshDetail& dmesh)"
  },
  {
    "label": "dtBuildTileCacheClusters()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS dtStatus)",
    "insertText": "dtBuildTileCacheClusters(dtTileCacheAlloc* alloc, dtTileCacheClusterSet& lclusters, dtTileCachePolyMesh& lmesh)"
  },
  {
    "label": "dtTileCacheHeaderSwapEndian()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "dtTileCacheHeaderSwapEndian(unsigned char* data, const int dataSize)"
  }
]