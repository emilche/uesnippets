[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UISMPartitionInstanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UISMPartitionInstanceManager"
  },
  {
    "label": "IISMPartitionInstanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IISMPartitionInstanceManager"
  },
  {
    "label": "UISMPartitionInstanceManagerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UISMPartitionInstanceManagerProvider"
  },
  {
    "label": "IISMPartitionInstanceManagerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IISMPartitionInstanceManagerProvider"
  },
  {
    "label": "FISMPartitionInstanceManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISMPartitionInstanceManager"
  },
  {
    "label": "FISMClientInstanceManagerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISMClientInstanceManagerData"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Interface . h \" # include \" Containers / ArrayView . h \" # include \" ISMPartition / ISMPartitionClient . h \" # include \" ISMPartitionInstanceManager . generated . h \" enum class ETypedElementWorldType : uint8 ;)",
    "insertText": "UINTERFACE(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IISMPartitionInstanceManager {)",
    "insertText": "GENERATED_BODY() public: virtual FText GetISMPartitionInstanceDisplayName(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "GetISMPartitionInstanceTooltip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetISMPartitionInstanceTooltip(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "CanEditISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEditISMPartitionInstance(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "CanMoveISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanMoveISMPartitionInstance(const FISMClientInstanceId& InstanceId, const ETypedElementWorldType WorldType)"
  },
  {
    "label": "GetISMPartitionInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetISMPartitionInstanceTransform(const FISMClientInstanceId& InstanceId, FTransform& OutInstanceTransform, bool bWorldSpace = false)"
  },
  {
    "label": "SetISMPartitionInstanceTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetISMPartitionInstanceTransform(const FISMClientInstanceId& InstanceId, const FTransform& InstanceTransform, bool bWorldSpace = false, bool bTeleport = false)"
  },
  {
    "label": "NotifyISMPartitionInstanceMovementStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyISMPartitionInstanceMovementStarted(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "NotifyISMPartitionInstanceMovementOngoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyISMPartitionInstanceMovementOngoing(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "NotifyISMPartitionInstanceMovementEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyISMPartitionInstanceMovementEnded(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "NotifyISMPartitionInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyISMPartitionInstanceSelectionChanged(const FISMClientInstanceId& InstanceId, const bool bIsSelected)"
  },
  {
    "label": "CanDeleteISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteISMPartitionInstance(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "DeleteISMPartitionInstances()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteISMPartitionInstances(TArrayView<const FISMClientInstanceId> InstanceIds)"
  },
  {
    "label": "CanDuplicateISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateISMPartitionInstance(const FISMClientInstanceId& InstanceId)"
  },
  {
    "label": "DuplicateISMPartitionInstances()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DuplicateISMPartitionInstances(TArrayView<const FISMClientInstanceId> InstanceIds, TArray<FISMClientInstanceId>& OutNewInstanceIds)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IISMPartitionInstanceManagerProvider {)",
    "insertText": "GENERATED_BODY() public: virtual IISMPartitionInstanceManager* GetISMPartitionInstanceManager(const FISMClientHandle& ClientHandle)"
  },
  {
    "label": "FISMPartitionInstanceManager()",
    "kind": "Method",
    "detail": "Function (} ; struct FISMPartitionInstanceManager { public :)",
    "insertText": "FISMPartitionInstanceManager()"
  },
  {
    "label": "FISMPartitionInstanceManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FISMPartitionInstanceManager(const FISMClientInstanceId& InInstanceId, IISMPartitionInstanceManager* InInstanceManager) : InstanceId(InInstanceId) , InstanceManager(InInstanceManager)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FISMPartitionInstanceManager& InId)"
  },
  {
    "label": "GetInstanceId()",
    "kind": "Method",
    "detail": "Function (} const FISMClientInstanceId&)",
    "insertText": "GetInstanceId()"
  },
  {
    "label": "GetISMPartitionInstanceTooltip()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetISMPartitionInstanceTooltip()"
  },
  {
    "label": "CanEditISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEditISMPartitionInstance()"
  },
  {
    "label": "CanMoveISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanMoveISMPartitionInstance(const ETypedElementWorldType WorldType)"
  },
  {
    "label": "GetISMPartitionInstanceTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetISMPartitionInstanceTransform(FTransform& OutInstanceTransform, bool bWorldSpace = false)"
  },
  {
    "label": "SetISMPartitionInstanceTransform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetISMPartitionInstanceTransform(const FTransform& InstanceTransform, bool bWorldSpace = false, bool bTeleport = false)"
  },
  {
    "label": "NotifyISMPartitionInstanceMovementStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyISMPartitionInstanceMovementStarted()"
  },
  {
    "label": "NotifyISMPartitionInstanceMovementOngoing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyISMPartitionInstanceMovementOngoing()"
  },
  {
    "label": "NotifyISMPartitionInstanceMovementEnded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyISMPartitionInstanceMovementEnded()"
  },
  {
    "label": "NotifyISMPartitionInstanceSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyISMPartitionInstanceSelectionChanged(const bool bIsSelected)"
  },
  {
    "label": "CanDeleteISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDeleteISMPartitionInstance()"
  },
  {
    "label": "DeleteISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteISMPartitionInstance()"
  },
  {
    "label": "CanDuplicateISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDuplicateISMPartitionInstance()"
  },
  {
    "label": "DuplicateISMPartitionInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DuplicateISMPartitionInstance(FISMClientInstanceId& OutNewInstanceId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FISMClientInstanceId> NewInstanceIds ;)",
    "insertText": "if(InstanceManager->DuplicateISMPartitionInstances(MakeArrayView(&InstanceId, 1), NewInstanceIds))"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (OutNewInstanceId = NewInstanceIds [ 0 ] ; return true ; } return false ; } private : FISMClientInstanceId InstanceId ; IISMPartitionInstanceManager* InstanceManager = nullptr ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: bool Serialize(FArchive& Ar)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializePtr(Ar, Manager)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializePtr(Ar, ManagerProvider)"
  },
  {
    "label": "SetInstanceManagerProvider()",
    "kind": "Method",
    "detail": "Function (Manager = InManager ; ManagerProvider = nullptr ; } void)",
    "insertText": "SetInstanceManagerProvider(IISMPartitionInstanceManagerProvider* InManagerProvider)"
  },
  {
    "label": "ResolveInstanceManager()",
    "kind": "Method",
    "detail": "Function (Manager = nullptr ; ManagerProvider = InManagerProvider ; } IISMPartitionInstanceManager*)",
    "insertText": "ResolveInstanceManager(const FISMClientHandle& ClientHandle)"
  },
  {
    "label": "SerializePtr()",
    "kind": "Method",
    "detail": "Function (} private : template<T> void)",
    "insertText": "SerializePtr(FArchive& Ar, T*& Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (enum class ERefType : uint8 { Null,Object,Raw,} ;)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ERefType RefType = ERefType::Object ; Ar<<RefType ; Ar<<Obj ; } else)",
    "insertText": "if(Ptr && !Ar.IsPersistent())"
  },
  {
    "label": "PtrInt()",
    "kind": "Method",
    "detail": "Function (ERefType RefType = ERefType::Raw ; Ar<<RefType ; uint64)",
    "insertText": "PtrInt(uint64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<PtrInt ; } else { ERefType RefType = ERefType::Null ; Ar<<RefType ; } } else)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (ERefType RefType ; Ar<<RefType ;)",
    "insertText": "switch(RefType)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (} break ; case ERefType::Raw : { uint64 PtrInt = 0 ; Ar<<PtrInt ;)",
    "insertText": "Ptr(T*)"
  }
]