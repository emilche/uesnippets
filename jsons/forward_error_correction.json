[
  {
    "label": "FecHeaderReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecHeaderReader"
  },
  {
    "label": "FecHeaderWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecHeaderWriter"
  },
  {
    "label": "ForwardErrorCorrection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForwardErrorCorrection"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Packet"
  },
  {
    "label": "SortablePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SortablePacket"
  },
  {
    "label": "LessThan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessThan"
  },
  {
    "label": "ReceivedPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceivedPacket"
  },
  {
    "label": "RecoveredPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecoveredPacket"
  },
  {
    "label": "ProtectedPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProtectedPacket"
  },
  {
    "label": "ReceivedFecPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceivedFecPacket"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_FORWARD_ERROR_CORRECTION_H_ # define MODULES_RTP_RTCP_SOURCE_FORWARD_ERROR_CORRECTION_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<memory> # include<vector> # include \" api / scoped_refptr . h \" # include \" modules / include / module_fec_types . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / forward_error_correction_internal . h \" # include \" rtc_base / copy_on_write_buffer . h \" namespace webrtc { class FecHeaderReader ; class FecHeaderWriter ; class ForwardErrorCorrection { public : class Packet { public :)",
    "insertText": "Packet()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (rtc::CopyOnWriteBuffer data ; private : int32_t ref_count_ ; } ; class SortablePacket { public : struct LessThan { template<S,T> bool)",
    "insertText": "operator()(const S& first, const T& second)"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (} ; uint32_t ssrc ; uint16_t seq_num ; } ; class ReceivedPacket : public SortablePacket { public :)",
    "insertText": "ReceivedPacket()"
  },
  {
    "label": "RecoveredPacket()",
    "kind": "Method",
    "detail": "Function (bool is_fec ; bool is_recovered ; rtc::scoped_refptr<Packet> pkt ; } ; class RecoveredPacket : public SortablePacket { public :)",
    "insertText": "RecoveredPacket()"
  },
  {
    "label": "ProtectedPacket()",
    "kind": "Method",
    "detail": "Function (bool was_recovered ; bool returned ; rtc::scoped_refptr<Packet> pkt ; } ; class ProtectedPacket : public SortablePacket { public :)",
    "insertText": "ProtectedPacket()"
  },
  {
    "label": "ReceivedFecPacket()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<ForwardErrorCorrection::Packet> pkt ; } ; using ProtectedPacketList = std::list<std::unique_ptr<ProtectedPacket>> ; class ReceivedFecPacket : public SortablePacket { public :)",
    "insertText": "ReceivedFecPacket()"
  },
  {
    "label": "ForwardErrorCorrection()",
    "kind": "Method",
    "detail": "Function (ProtectedPacketList protected_packets ; uint32_t ssrc ; size_t fec_header_size ; uint32_t protected_ssrc ; uint16_t seq_num_base ; size_t packet_mask_offset ; size_t packet_mask_size ; size_t protection_length ; rtc::scoped_refptr<ForwardErrorCorrection::Packet> pkt ; } ; using PacketList = std::list<std::unique_ptr<Packet>> ; using RecoveredPacketList = std::list<std::unique_ptr<RecoveredPacket>> ; using ReceivedFecPacketList = std::list<std::unique_ptr<ReceivedFecPacket>> ; ~)",
    "insertText": "ForwardErrorCorrection()"
  },
  {
    "label": "CreateUlpfec()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ForwardErrorCorrection>)",
    "insertText": "CreateUlpfec(uint32_t ssrc)"
  },
  {
    "label": "CreateFlexfec()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ForwardErrorCorrection>)",
    "insertText": "CreateFlexfec(uint32_t ssrc, uint32_t protected_media_ssrc)"
  },
  {
    "label": "EncodeFec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EncodeFec(const PacketList& media_packets, uint8_t protection_factor, int num_important_packets, bool use_unequal_protection, FecMaskType fec_mask_type, std::list<Packet*>* fec_packets)"
  },
  {
    "label": "DecodeFec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeFec(const ReceivedPacket& received_packet, RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "NumFecPackets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumFecPackets(int num_media_packets, int protection_factor)"
  },
  {
    "label": "MaxPacketOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxPacketOverhead()"
  },
  {
    "label": "ResetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetState(RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "ParseSequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "ParseSequenceNumber(const uint8_t* packet)"
  },
  {
    "label": "ParseSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ParseSsrc(const uint8_t* packet)"
  },
  {
    "label": "ForwardErrorCorrection()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ForwardErrorCorrection(std::unique_ptr<FecHeaderReader> fec_header_reader, std::unique_ptr<FecHeaderWriter> fec_header_writer, uint32_t ssrc, uint32_t protected_media_ssrc)"
  },
  {
    "label": "InsertZerosInPacketMasks()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "InsertZerosInPacketMasks(const PacketList& media_packets, size_t num_fec_packets)"
  },
  {
    "label": "GenerateFecPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFecPayloads(const PacketList& media_packets, size_t num_fec_packets)"
  },
  {
    "label": "FinalizeFecHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeFecHeaders(size_t num_fec_packets, uint32_t media_ssrc, uint16_t seq_num_base)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPacket(const ReceivedPacket& received_packet, RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "InsertMediaPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertMediaPacket(RecoveredPacketList* recovered_packets, const ReceivedPacket& received_packet)"
  },
  {
    "label": "UpdateCoveringFecPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCoveringFecPackets(const RecoveredPacket& packet)"
  },
  {
    "label": "InsertFecPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFecPacket(const RecoveredPacketList& recovered_packets, const ReceivedPacket& received_packet)"
  },
  {
    "label": "AssignRecoveredPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignRecoveredPackets(const RecoveredPacketList& recovered_packets, ReceivedFecPacket* fec_packet)"
  },
  {
    "label": "AttemptRecovery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptRecovery(RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "StartPacketRecovery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartPacketRecovery(const ReceivedFecPacket& fec_packet, RecoveredPacket* recovered_packet)"
  },
  {
    "label": "XorHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XorHeaders(const Packet& src, Packet* dst)"
  },
  {
    "label": "XorPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XorPayloads(const Packet& src, size_t payload_length, size_t dst_offset, Packet* dst)"
  },
  {
    "label": "FinishPacketRecovery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishPacketRecovery(const ReceivedFecPacket& fec_packet, RecoveredPacket* recovered_packet)"
  },
  {
    "label": "RecoverPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecoverPacket(const ReceivedFecPacket& fec_packet, RecoveredPacket* recovered_packet)"
  },
  {
    "label": "NumCoveredPacketsMissing()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumCoveredPacketsMissing(const ReceivedFecPacket& fec_packet)"
  },
  {
    "label": "DiscardOldRecoveredPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardOldRecoveredPackets(RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "IsOldFecPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOldFecPacket(const ReceivedFecPacket& fec_packet, const RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "FecHeaderReader()",
    "kind": "Method",
    "detail": "Function (const uint32_t ssrc_ ; const uint32_t protected_media_ssrc_ ; std::unique_ptr<FecHeaderReader> fec_header_reader_ ; std::unique_ptr<FecHeaderWriter> fec_header_writer_ ; std::vector<Packet> generated_fec_packets_ ; ReceivedFecPacketList received_fec_packets_ ; uint8_t packet_masks_ [ kUlpfecMaxMediaPackets* kUlpfecMaxPacketMaskSize ] ; uint8_t tmp_packet_masks_ [ kUlpfecMaxMediaPackets* kUlpfecMaxPacketMaskSize ] ; size_t packet_mask_size_ ; } ; class FecHeaderReader { public : ~)",
    "insertText": "FecHeaderReader()"
  },
  {
    "label": "MaxMediaPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxMediaPackets()"
  },
  {
    "label": "MaxFecPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxFecPackets()"
  },
  {
    "label": "ReadFecHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFecHeader(ForwardErrorCorrection::ReceivedFecPacket* fec_packet)"
  },
  {
    "label": "FecHeaderReader()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FecHeaderReader(size_t max_media_packets, size_t max_fec_packets)"
  },
  {
    "label": "FecHeaderWriter()",
    "kind": "Method",
    "detail": "Function (const size_t max_media_packets_ ; const size_t max_fec_packets_ ; } ; class FecHeaderWriter { public : ~)",
    "insertText": "FecHeaderWriter()"
  },
  {
    "label": "MinPacketMaskSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MinPacketMaskSize(const uint8_t* packet_mask, size_t packet_mask_size)"
  },
  {
    "label": "FecHeaderSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "FecHeaderSize(size_t packet_mask_size)"
  },
  {
    "label": "FinalizeFecHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeFecHeader(uint32_t media_ssrc, uint16_t seq_num_base, const uint8_t* packet_mask, size_t packet_mask_size, ForwardErrorCorrection::Packet* fec_packet)"
  },
  {
    "label": "FecHeaderWriter()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FecHeaderWriter(size_t max_media_packets, size_t max_fec_packets, size_t max_packet_overhead)"
  }
]