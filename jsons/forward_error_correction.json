[
  {
    "label": "FecHeaderReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecHeaderReader"
  },
  {
    "label": "FecHeaderWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecHeaderWriter"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "into"
  },
  {
    "label": "ForwardErrorCorrection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForwardErrorCorrection"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Packet"
  },
  {
    "label": "SortablePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SortablePacket"
  },
  {
    "label": "LessThan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LessThan"
  },
  {
    "label": "ReceivedPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceivedPacket"
  },
  {
    "label": "RecoveredPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecoveredPacket"
  },
  {
    "label": "ProtectedPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProtectedPacket"
  },
  {
    "label": "ReceivedFecPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceivedFecPacket"
  },
  {
    "label": "FecHeaderReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecHeaderReader"
  },
  {
    "label": "FecHeaderWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FecHeaderWriter"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Packet()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "ReceivedPacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ReceivedPacket()"
  },
  {
    "label": "RecoveredPacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RecoveredPacket()"
  },
  {
    "label": "ProtectedPacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ProtectedPacket()"
  },
  {
    "label": "ReceivedFecPacket()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ReceivedFecPacket()"
  },
  {
    "label": "CreateUlpfec()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ForwardErrorCorrection>)",
    "insertText": "CreateUlpfec(uint32_t ssrc)"
  },
  {
    "label": "CreateFlexfec()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ForwardErrorCorrection>)",
    "insertText": "CreateFlexfec(\n      uint32_t ssrc,\n      uint32_t protected_media_ssrc)"
  },
  {
    "label": "EncodeFec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EncodeFec(const PacketList& media_packets,\n                uint8_t protection_factor,\n                int num_important_packets,\n                bool use_unequal_protection,\n                FecMaskType fec_mask_type,\n                std::list<Packet*>* fec_packets)"
  },
  {
    "label": "DecodeFec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodeFec(const ReceivedPacket& received_packet,\n                 RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "NumFecPackets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumFecPackets(int num_media_packets, int protection_factor)"
  },
  {
    "label": "ResetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetState(RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "ParseSequenceNumber()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "ParseSequenceNumber(const uint8_t* packet)"
  },
  {
    "label": "ParseSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ParseSsrc(const uint8_t* packet)"
  },
  {
    "label": "ForwardErrorCorrection()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "ForwardErrorCorrection(std::unique_ptr<FecHeaderReader> fec_header_reader,\n                         std::unique_ptr<FecHeaderWriter> fec_header_writer,\n                         uint32_t ssrc,\n                         uint32_t protected_media_ssrc)"
  },
  {
    "label": "InsertZerosInPacketMasks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertZerosInPacketMasks(const PacketList& media_packets,\n                               size_t num_fec_packets)"
  },
  {
    "label": "GenerateFecPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateFecPayloads(const PacketList& media_packets,\n                           size_t num_fec_packets)"
  },
  {
    "label": "FinalizeFecHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeFecHeaders(size_t num_fec_packets,\n                          uint32_t media_ssrc,\n                          uint16_t seq_num_base)"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertPacket(const ReceivedPacket& received_packet,\n                    RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "InsertMediaPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertMediaPacket(RecoveredPacketList* recovered_packets,\n                         const ReceivedPacket& received_packet)"
  },
  {
    "label": "UpdateCoveringFecPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCoveringFecPackets(const RecoveredPacket& packet)"
  },
  {
    "label": "InsertFecPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFecPacket(const RecoveredPacketList& recovered_packets,\n                       const ReceivedPacket& received_packet)"
  },
  {
    "label": "AssignRecoveredPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignRecoveredPackets(\n      const RecoveredPacketList& recovered_packets,\n      ReceivedFecPacket* fec_packet)"
  },
  {
    "label": "AttemptRecovery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptRecovery(RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "StartPacketRecovery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartPacketRecovery(const ReceivedFecPacket& fec_packet,\n                                  RecoveredPacket* recovered_packet)"
  },
  {
    "label": "XorHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XorHeaders(const Packet& src, Packet* dst)"
  },
  {
    "label": "XorPayloads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XorPayloads(const Packet& src,\n                          size_t payload_length,\n                          size_t dst_offset,\n                          Packet* dst)"
  },
  {
    "label": "FinishPacketRecovery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishPacketRecovery(const ReceivedFecPacket& fec_packet,\n                                   RecoveredPacket* recovered_packet)"
  },
  {
    "label": "RecoverPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecoverPacket(const ReceivedFecPacket& fec_packet,\n                            RecoveredPacket* recovered_packet)"
  },
  {
    "label": "NumCoveredPacketsMissing()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumCoveredPacketsMissing(const ReceivedFecPacket& fec_packet)"
  },
  {
    "label": "DiscardOldRecoveredPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardOldRecoveredPackets(RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "IsOldFecPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOldFecPacket(const ReceivedFecPacket& fec_packet,\n                      const RecoveredPacketList* recovered_packets)"
  },
  {
    "label": "FecHeaderReader()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "FecHeaderReader(size_t max_media_packets, size_t max_fec_packets)"
  },
  {
    "label": "FecHeaderWriter()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "FecHeaderWriter(size_t max_media_packets,\n                  size_t max_fec_packets,\n                  size_t max_packet_overhead)"
  }
]