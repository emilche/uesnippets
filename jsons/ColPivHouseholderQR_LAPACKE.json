[
  {
    "label": "EIGEN_LAPACKE_QR_COLPIV()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COLPIVOTINGHOUSEHOLDERQR_LAPACKE_H # define EIGEN_COLPIVOTINGHOUSEHOLDERQR_LAPACKE_H namespace Eigen { # define)",
    "insertText": "EIGEN_LAPACKE_QR_COLPIV(EIGTYPE, LAPACKE_TYPE, LAPACKE_PREFIX, EIGCOLROW, LAPACKE_COLROW) \\ template<> template<typename InputType> inline \\ ColPivHouseholderQR<Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW, Dynamic, Dynamic> >& \\ ColPivHouseholderQR<Matrix<EIGTYPE, Dynamic, Dynamic, EIGCOLROW, Dynamic, Dynamic> >::compute( \\ const EigenBase<InputType>& matrix)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (\\ using std::abs ; \\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,EIGCOLROW,Dynamic,Dynamic> MatrixType ; \\ typedef MatrixType::RealScalar RealScalar ; \\ Index rows = matrix .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (\\ Index cols = matrix .)",
    "insertText": "cols()"
  },
  {
    "label": "diagonalSize()",
    "kind": "Method",
    "detail": "Function (\\ \\ m_qr = matrix ; \\ Index size = m_qr .)",
    "insertText": "diagonalSize()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (\\ m_hCoeffs .)",
    "insertText": "resize(size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (\\ \\ m_colsTranspositions .)",
    "insertText": "resize(cols)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ m_nonzero_pivots = 0 ; \\ m_maxpivot =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (\\ m_colsPermutation .)",
    "insertText": "indices().setZero()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (\\ \\ lapack_int lda = internal::convert_index<lapack_int,)",
    "insertText": "Index(m_qr.outerStride())"
  },
  {
    "label": "geqp3()",
    "kind": "Method",
    "detail": "Function (\\ lapack_int matrix_order = LAPACKE_COLROW ; \\ LAPACKE_ # # LAPACKE_PREFIX # #)",
    "insertText": "geqp3(matrix_order, internal::convert_index<lapack_int,Index>(rows), internal::convert_index<lapack_int,Index>(cols), \\ (LAPACKE_TYPE*)m_qr.data(), lda, (lapack_int*)m_colsPermutation.indices().data(), (LAPACKE_TYPE*)m_hCoeffs.data())"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (\\ m_isInitialized = true ; \\ m_maxpivot = m_qr .)",
    "insertText": "diagonal().cwiseAbs().maxCoeff()"
  },
  {
    "label": "adjointInPlace()",
    "kind": "Method",
    "detail": "Function (\\ m_hCoeffs .)",
    "insertText": "adjointInPlace()"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (\\ RealScalar premultiplied_threshold =)",
    "insertText": "abs(m_maxpivot) * threshold()"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (\\ lapack_int* perm = m_colsPermutation .)",
    "insertText": "indices().data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(Index i=0;i<size;i++)"
  },
  {
    "label": "m_nonzero_pivots()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "m_nonzero_pivots(abs(m_qr.coeff(i,i)) > premultiplied_threshold)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "for(Index i=0;i<cols;i++)"
  }
]