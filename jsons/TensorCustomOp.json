[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorCustomUnaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCustomUnaryOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorCustomBinaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCustomBinaryOp"
  },
  {
    "label": "TensorCustomUnaryOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CUSTOM_OP_H # define EIGEN_CXX11_TENSOR_TENSOR_CUSTOM_OP_H namespace Eigen { namespace internal { template<CustomUnaryFunc,XprType> struct traits<TensorCustomUnaryOp<CustomUnaryFunc,XprType>> { typedef XprType::Scalar Scalar ; typedef XprType::StorageKind StorageKind ; typedef XprType::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = traits<XprType>::NumDimensions ; const int Layout = traits<XprType>::Layout ; typedef traits<XprType>::PointerType PointerType ; } ; template<CustomUnaryFunc,XprType> struct eval<TensorCustomUnaryOp<CustomUnaryFunc,XprType>,Eigen::Dense> { typedef const TensorCustomUnaryOp<CustomUnaryFunc,XprType> EIGEN_DEVICE_REF type ; } ; template<CustomUnaryFunc,XprType> struct nested<TensorCustomUnaryOp<CustomUnaryFunc,XprType>> { typedef TensorCustomUnaryOp<CustomUnaryFunc,XprType> type ; } ; } template<CustomUnaryFunc,XprType> class TensorCustomUnaryOp : public TensorBase<TensorCustomUnaryOp<CustomUnaryFunc,XprType>,ReadOnlyAccessors> { public : typedef internal::traits<TensorCustomUnaryOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef internal::nested<TensorCustomUnaryOp>::type Nested ; typedef internal::traits<TensorCustomUnaryOp>::StorageKind StorageKind ; typedef internal::traits<TensorCustomUnaryOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorCustomUnaryOp(const XprType& expr, const CustomUnaryFunc& func) : m_expr(expr), m_func(func)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const CustomUnaryFunc&)",
    "insertText": "func()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const ArgType& op, const Device& device) : m_op(op), m_device(device), m_result(NULL)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (m_dimensions = op .)",
    "insertText": "func().dimensions(op.expression())"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(data)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(m_result)"
  },
  {
    "label": "deallocate_temp()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate_temp(m_result)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (m_result = NULL ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_result .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} # endif protected : void)",
    "insertText": "evalTo(EvaluatorPointerType data)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (TensorMap<Tensor<CoeffReturnType,NumDims,Layout,Index>>)",
    "insertText": "result(m_device.get(data), m_dimensions)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (m_op .)",
    "insertText": "func().eval(m_op.expression(), result, m_device)"
  },
  {
    "label": "TensorCustomBinaryOp()",
    "kind": "Method",
    "detail": "Function (} Dimensions m_dimensions ; const ArgType m_op ; const Device EIGEN_DEVICE_REF m_device ; EvaluatorPointerType m_result ; } ; namespace internal { template<CustomBinaryFunc,LhsXprType,RhsXprType> struct traits<TensorCustomBinaryOp<CustomBinaryFunc,LhsXprType,RhsXprType>> { typedef internal::promote_storage_type<LhsXprType::Scalar,RhsXprType::Scalar>::ret Scalar ; typedef internal::promote_storage_type<LhsXprType::CoeffReturnType,RhsXprType::CoeffReturnType>::ret CoeffReturnType ; typedef promote_storage_type<traits<LhsXprType>::StorageKind,traits<RhsXprType>::StorageKind>::ret StorageKind ; typedef promote_index_type<traits<LhsXprType>::Index,traits<RhsXprType>::Index>::type Index ; typedef LhsXprType::Nested LhsNested ; typedef RhsXprType::Nested RhsNested ; typedef remove_reference<LhsNested>::type _LhsNested ; typedef remove_reference<RhsNested>::type _RhsNested ; const int NumDimensions = traits<LhsXprType>::NumDimensions ; const int Layout = traits<LhsXprType>::Layout ; typedef conditional<Pointer_type_promotion<LhsXprType::Scalar,Scalar>::val,traits<LhsXprType>::PointerType,traits<RhsXprType>::PointerType>::type PointerType ; } ; template<CustomBinaryFunc,LhsXprType,RhsXprType> struct eval<TensorCustomBinaryOp<CustomBinaryFunc,LhsXprType,RhsXprType>,Eigen::Dense> { typedef const TensorCustomBinaryOp<CustomBinaryFunc,LhsXprType,RhsXprType>& type ; } ; template<CustomBinaryFunc,LhsXprType,RhsXprType> struct nested<TensorCustomBinaryOp<CustomBinaryFunc,LhsXprType,RhsXprType>> { typedef TensorCustomBinaryOp<CustomBinaryFunc,LhsXprType,RhsXprType> type ; } ; } template<CustomBinaryFunc,LhsXprType,RhsXprType> class TensorCustomBinaryOp : public TensorBase<TensorCustomBinaryOp<CustomBinaryFunc,LhsXprType,RhsXprType>,ReadOnlyAccessors> { public : typedef internal::traits<TensorCustomBinaryOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef internal::traits<TensorCustomBinaryOp>::CoeffReturnType CoeffReturnType ; typedef internal::nested<TensorCustomBinaryOp>::type Nested ; typedef internal::traits<TensorCustomBinaryOp>::StorageKind StorageKind ; typedef internal::traits<TensorCustomBinaryOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorCustomBinaryOp(const LhsXprType& lhs, const RhsXprType& rhs, const CustomBinaryFunc& func) : m_lhs_xpr(lhs), m_rhs_xpr(rhs), m_func(func)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_op(op), m_device(device), m_result(NULL)"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (m_dimensions = op .)",
    "insertText": "func().dimensions(op.lhsExpression(), op.rhsExpression())"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (m_op .)",
    "insertText": "func().eval(m_op.lhsExpression(), m_op.rhsExpression(), result, m_device)"
  }
]