[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FDiagnosticsAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiagnosticsAnalyzer"
  },
  {
    "label": "FDiagnosticsAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Trace / Analyzer . h \" # include \" TraceServices / Containers / Allocators . h \" # include \" Model / DiagnosticsPrivate . h \" # include \" Containers / UnrealString . h \" namespace TraceServices { class IAnalysisSession ; class FDiagnosticsAnalyzer : public UE::Trace::IAnalyzer { public :)",
    "insertText": "FDiagnosticsAnalyzer(IAnalysisSession& Session, FDiagnosticsProvider* InProvider)"
  },
  {
    "label": "FDiagnosticsAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDiagnosticsAnalyzer()"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "UpdateSessionMetadata()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSessionMetadata(const UE::Trace::IAnalyzer::FEventData& EventData)"
  }
]