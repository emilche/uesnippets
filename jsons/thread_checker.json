[
  {
    "label": "LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LOCKABLE"
  },
  {
    "label": "ThreadChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadChecker"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "THREAD_CHECKER_INTERNAL_CONCAT2()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_CHECKER_H_ # define BASE_THREADING_THREAD_CHECKER_H_ # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / strings / string_piece . h \" # include \" base / thread_annotations . h \" # include \" base / threading / thread_checker_impl . h \" # define)",
    "insertText": "THREAD_CHECKER_INTERNAL_CONCAT2(a, b) a##b #define THREAD_CHECKER_INTERNAL_CONCAT(a, b) \\ THREAD_CHECKER_INTERNAL_CONCAT2(a, b) #define THREAD_CHECKER_INTERNAL_UID(prefix) \\ THREAD_CHECKER_INTERNAL_CONCAT(prefix, __LINE__) #if DCHECK_IS_ON() #define THREAD_CHECKER(name) base::ThreadChecker name #define DCHECK_CALLED_ON_VALID_THREAD(name, ...) \\ base::ScopedValidateThreadChecker THREAD_CHECKER_INTERNAL_UID( \\ scoped_validate_thread_checker_)(name, ##__VA_ARGS__)"
  },
  {
    "label": "DETACH_FROM_THREAD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DETACH_FROM_THREAD(name) (name).DetachFromThread() #else #define THREAD_CHECKER(name) static_assert(true, \"\") #define DCHECK_CALLED_ON_VALID_THREAD(name, ...) EAT_CHECK_STREAM_PARAMS() #define DETACH_FROM_THREAD(name)"
  },
  {
    "label": "EnableStackLogging()",
    "kind": "Method",
    "detail": "Function (class LOCKABLE ThreadCheckerDoNothing { public : void)",
    "insertText": "EnableStackLogging()"
  },
  {
    "label": "ThreadCheckerDoNothing()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ThreadCheckerDoNothing()"
  },
  {
    "label": "ThreadCheckerDoNothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCheckerDoNothing(const ThreadCheckerDoNothing&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadCheckerDoNothing&)",
    "insertText": "operator(const ThreadCheckerDoNothing&)"
  },
  {
    "label": "ThreadCheckerDoNothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadCheckerDoNothing(ThreadCheckerDoNothing&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadCheckerDoNothing&)",
    "insertText": "operator(ThreadCheckerDoNothing&& other)"
  },
  {
    "label": "CalledOnValidThread()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "CalledOnValidThread(std::unique_ptr<void*> = nullptr)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "ScopedValidateThreadChecker()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedValidateThreadChecker(const ThreadChecker& checker) EXCLUSIVE_LOCK_FUNCTION(checker)"
  },
  {
    "label": "ScopedValidateThreadChecker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedValidateThreadChecker(const ThreadChecker& checker, const StringPiece& msg) EXCLUSIVE_LOCK_FUNCTION(checker)"
  },
  {
    "label": "ScopedValidateThreadChecker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedValidateThreadChecker(const ScopedValidateThreadChecker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedValidateThreadChecker&)",
    "insertText": "operator(const ScopedValidateThreadChecker&)"
  },
  {
    "label": "ScopedValidateThreadChecker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedValidateThreadChecker() UNLOCK_FUNCTION()"
  }
]