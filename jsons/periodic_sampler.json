[
  {
    "label": "PeriodicSamplerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeriodicSamplerBase"
  },
  {
    "label": "PeriodicSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeriodicSampler"
  },
  {
    "label": "PeriodicSamplerBase()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_PROFILING_INTERNAL_PERIODIC_SAMPLER_H_ # define ABSL_PROFILING_INTERNAL_PERIODIC_SAMPLER_H_ # include<stdint . h> # include<atomic> # include \" absl / base / optimization . h \" # include \" absl / profiling / internal / exponential_biased . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace profiling_internal { class PeriodicSamplerBase { public :)",
    "insertText": "PeriodicSamplerBase()"
  },
  {
    "label": "PeriodicSamplerBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeriodicSamplerBase(PeriodicSamplerBase&&)"
  },
  {
    "label": "PeriodicSamplerBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeriodicSamplerBase(const PeriodicSamplerBase&)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Sample()"
  },
  {
    "label": "SubtleMaybeSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubtleMaybeSample()"
  },
  {
    "label": "SubtleConfirmSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubtleConfirmSample()"
  },
  {
    "label": "GetExponentialBiased()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetExponentialBiased(int period)"
  },
  {
    "label": "period()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "period()"
  },
  {
    "label": "PeriodicSampler()",
    "kind": "Method",
    "detail": "Function (} template<Tag,int default_period = 0> class PeriodicSampler final : public PeriodicSamplerBase { public : ~)",
    "insertText": "PeriodicSampler()"
  },
  {
    "label": "SetGlobalPeriod()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGlobalPeriod(int period)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (period_ .)",
    "insertText": "store(period, std::memory_order_relaxed)"
  },
  {
    "label": "period_()",
    "kind": "Method",
    "detail": "Function (} private : std::atomic<int> period_ ; } ; template<Tag,int default_period> std::atomic<int> PeriodicSampler<Tag,default_period)",
    "insertText": "period_(default_period)"
  }
]