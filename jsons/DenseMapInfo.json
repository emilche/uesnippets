[
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_DENSEMAPINFO_H # define LLVM_ADT_DENSEMAPINFO_H # include \" llvm / ADT / Hashing . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / PointerLikeTypeTraits . h \" # include \" llvm / Support / type_traits . h \" namespace llvm { template<T> struct DenseMapInfo { } ; template<T> struct DenseMapInfo<T*> { T*)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t Val = static_cast<)",
    "insertText": "uintptr_t(-1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Val<<= PointerLikeTypeTraits<T*>::NumLowBitsAvailable ; return reinterpret_cast<)",
    "insertText": "T(Val)"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t Val = static_cast<)",
    "insertText": "uintptr_t(-2)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const T *PtrVal)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const T *LHS, const T *RHS)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const unsigned long& LHS, const unsigned long& RHS)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const unsigned long long& LHS, const unsigned long long& RHS)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const int& LHS, const int& RHS)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const long& Val)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const long& LHS, const long& RHS)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const long long& LHS, const long long& RHS)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const Pair& PairVal)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "key(uint64_t)FirstInfo::getHashValue(PairVal.first) << 32 | (uint64_t)SecondInfo::getHashValue(PairVal.second)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key << 32)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key >> 22)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key << 13)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key >> 8)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key << 3)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key >> 15)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key << 27)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "key(key >> 31)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const Pair &LHS, const Pair &RHS)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(StringRef Val)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Val.data() != getEmptyKey().data() && \"Cannot hash the empty key!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Val.data() != getTombstoneKey().data() && \"Cannot hash the tombstone key!\")"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(StringRef LHS, StringRef RHS)"
  }
]