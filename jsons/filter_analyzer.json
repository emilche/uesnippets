[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "RenderBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderBuffer"
  },
  {
    "label": "FilterAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilterAnalyzer"
  },
  {
    "label": "FilterAnalysisState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterAnalysisState"
  },
  {
    "label": "FilterRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterRegion"
  },
  {
    "label": "ConsistentFilterDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConsistentFilterDetector"
  },
  {
    "label": "FilterAnalyzer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_FILTER_ANALYZER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_FILTER_ANALYZER_H_ # include<stddef . h> # include<array> # include<atomic> # include<memory> # include<vector> # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / block . h \" namespace webrtc { class ApmDataDumper ; class RenderBuffer ; class FilterAnalyzer { public :)",
    "insertText": "FilterAnalyzer(const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "FilterAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FilterAnalyzer()"
  },
  {
    "label": "FilterAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterAnalyzer(const FilterAnalyzer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilterAnalyzer&)",
    "insertText": "operator(const FilterAnalyzer&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(rtc::ArrayView<const std::vector<float>> filters_time_domain, const RenderBuffer& render_buffer, bool* any_filter_consistent, float* max_echo_path_gain)"
  },
  {
    "label": "FilterDelaysBlocks()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const int>)",
    "insertText": "FilterDelaysBlocks()"
  },
  {
    "label": "AnalyzeRegion()",
    "kind": "Method",
    "detail": "Function (private : struct FilterAnalysisState ; void)",
    "insertText": "AnalyzeRegion(rtc::ArrayView<const std::vector<float>> filters_time_domain, const RenderBuffer& render_buffer)"
  },
  {
    "label": "UpdateFilterGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilterGain(rtc::ArrayView<const float> filters_time_domain, FilterAnalysisState* st)"
  },
  {
    "label": "PreProcessFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreProcessFilters(rtc::ArrayView<const std::vector<float>> filters_time_domain)"
  },
  {
    "label": "ResetRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRegion()"
  },
  {
    "label": "ConsistentFilterDetector()",
    "kind": "Method",
    "detail": "Function (struct FilterRegion { size_t start_sample_ ; size_t end_sample_ ; } ; class ConsistentFilterDetector { public :)",
    "insertText": "ConsistentFilterDetector(const EchoCanceller3Config& config)"
  },
  {
    "label": "Detect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Detect(rtc::ArrayView<const float> filter_to_analyze, const FilterRegion& region, const Block& x_block, size_t peak_index, int delay_blocks)"
  },
  {
    "label": "FilterAnalysisState()",
    "kind": "Method",
    "detail": "Function (private : bool significant_peak_ ; float filter_floor_accum_ ; float filter_secondary_peak_ ; size_t filter_floor_low_limit_ ; size_t filter_floor_high_limit_ ; const float active_render_threshold_ ; size_t consistent_estimate_counter_ = 0 ; int consistent_delay_reference_ = - 1 0 ; } ; struct FilterAnalysisState {)",
    "insertText": "FilterAnalysisState(const EchoCanceller3Config& config) : filter_length_blocks(config.filter.refined_initial.length_blocks), consistent_filter_detector(config)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(config.ep_strength.default_gain)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(float default_gain)"
  }
]