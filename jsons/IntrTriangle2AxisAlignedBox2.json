[
  {
    "label": "TIntrTriangle2AxisAlignedBox2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrTriangle2AxisAlignedBox2"
  },
  {
    "label": "TIntrTriangle2AxisAlignedBox2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" BoxTypes . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TIntrTriangle2AxisAlignedBox2 { protected : TTriangle2<Real> Triangle ; TAxisAlignedBox2<Real> Box ; bool bTriangleIsOriented = true ; public :)",
    "insertText": "TIntrTriangle2AxisAlignedBox2()"
  },
  {
    "label": "TIntrTriangle2AxisAlignedBox2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrTriangle2AxisAlignedBox2(TTriangle2<Real> Triangle, TAxisAlignedBox2<Real> Box, bool bTriangleIsOriented = true) : Triangle(Triangle), Box(Box), bTriangleIsOriented(bTriangleIsOriented)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (} TTriangle2<Real>)",
    "insertText": "GetTriangle()"
  },
  {
    "label": "SetTriangleOriented()",
    "kind": "Method",
    "detail": "Function (Triangle = TriangleIn ; } void)",
    "insertText": "SetTriangleOriented(const bool bIsOrientedIn)"
  },
  {
    "label": "SetBox()",
    "kind": "Method",
    "detail": "Function (bTriangleIsOriented = bIsOrientedIn ; } void)",
    "insertText": "SetBox(const TAxisAlignedBox2<Real>& BoxIn)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (Box = BoxIn ; } bool)",
    "insertText": "Test()"
  },
  {
    "label": "TriBox()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox2<Real>)",
    "insertText": "TriBox(Triangle.V[0], Triangle.V[0])"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (TriBox .)",
    "insertText": "Contain(Triangle.V[1])"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (TriBox .)",
    "insertText": "Contain(Triangle.V[2])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (bool bOutside = EdgePerp .)",
    "insertText": "Dot(Box.GetCorner(CornerIdx) - EdgeVertex)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> Edge = Triangle . V [ LeadVert ] - Triangle . V [ PrevVert ] ; Real SquaredEdgeLen = Edge .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(BoxOutsideEdge(Triangle.V[LeadVert], PerpCW(Edge) * OrientationSign))"
  }
]