[
  {
    "label": "ImplClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImplClass"
  },
  {
    "label": "EtwTraceConsumerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EtwTraceConsumerBase"
  },
  {
    "label": "EtwTraceConsumerBase()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_EVENT_TRACE_CONSUMER_H_ # define BASE_WIN_EVENT_TRACE_CONSUMER_H_ # include<windows . h> # include<evntrace . h> # include<stddef . h> # include<wmistr . h> # include<vector> # include \" base / threading / scoped_blocking_call . h \" namespace base { namespace win { template<class ImplClass> class EtwTraceConsumerBase { public :)",
    "insertText": "EtwTraceConsumerBase()"
  },
  {
    "label": "EtwTraceConsumerBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EtwTraceConsumerBase(const EtwTraceConsumerBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EtwTraceConsumerBase&)",
    "insertText": "operator(const EtwTraceConsumerBase&)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "OpenRealtimeSession()",
    "kind": "Method",
    "detail": "Function (} HRESULT)",
    "insertText": "OpenRealtimeSession(const wchar_t* session_name)"
  },
  {
    "label": "OpenFileSession()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "OpenFileSession(const wchar_t* file_name)"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Consume()"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ProcessEvent(EVENT_TRACE* event)"
  },
  {
    "label": "ProcessBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ProcessBuffer(EVENT_TRACE_LOGFILE* buffer)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEvent(event)"
  },
  {
    "label": "ProcessBufferCallback()",
    "kind": "Method",
    "detail": "Function (} ULONG WINAPI)",
    "insertText": "ProcessBufferCallback(PEVENT_TRACE_LOGFILE buffer)"
  },
  {
    "label": "wchar_t()",
    "kind": "Method",
    "detail": "Function (EVENT_TRACE_LOGFILE logfile = { } ; logfile . LoggerName = const_cast<)",
    "insertText": "wchar_t(session_name)"
  },
  {
    "label": "OpenTrace()",
    "kind": "Method",
    "detail": "Function (logfile . LogFileMode = EVENT_TRACE_REAL_TIME_MODE ; logfile . BufferCallback =& ProcessBufferCallback ; logfile . EventCallback =& ProcessEventCallback ; logfile . Context = this ; TRACEHANDLE trace_handle)",
    "insertText": "OpenTrace(&logfile)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (trace_handles_ .)",
    "insertText": "push_back(trace_handle)"
  },
  {
    "label": "wchar_t()",
    "kind": "Method",
    "detail": "Function (EVENT_TRACE_LOGFILE logfile = { } ; logfile . LogFileName = const_cast<)",
    "insertText": "wchar_t(file_name)"
  },
  {
    "label": "scoped_blocking_call()",
    "kind": "Method",
    "detail": "Function (base::ScopedBlockingCall)",
    "insertText": "scoped_blocking_call(FROM_HERE, base::BlockingType::MAY_BLOCK)"
  },
  {
    "label": "ProcessTrace()",
    "kind": "Method",
    "detail": "Function (ULONG err)",
    "insertText": "ProcessTrace(&trace_handles_[0], static_cast<ULONG>(trace_handles_.size()), nullptr, nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HRESULT hr = S_OK ;)",
    "insertText": "for(size_t i = 0; i < trace_handles_.size(); ++i)"
  },
  {
    "label": "CloseTrace()",
    "kind": "Method",
    "detail": "Function (ULONG ret)",
    "insertText": "CloseTrace(trace_handles_[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (trace_handles_ [ i ] = NULL ;)",
    "insertText": "if(FAILED(HRESULT_FROM_WIN32(ret))) hr = HRESULT_FROM_WIN32(ret)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} } trace_handles_ .)",
    "insertText": "clear()"
  }
]