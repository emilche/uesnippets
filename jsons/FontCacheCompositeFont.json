[
  {
    "label": "FFreeTypeFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeFace"
  },
  {
    "label": "FFreeTypeLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeLibrary"
  },
  {
    "label": "FSlateFontInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateFontInfo"
  },
  {
    "label": "FCachedTypefaceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedTypefaceData"
  },
  {
    "label": "FCachedFontData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedFontData"
  },
  {
    "label": "FCachedCompositeFontData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedCompositeFontData"
  },
  {
    "label": "FCachedFontRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedFontRange"
  },
  {
    "label": "FCompositeFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeFontCache"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FAsyncLoadFontFaceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadFontFaceData"
  },
  {
    "label": "FCachedTypefaceData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" CoreMinimal . h \" # include \" Fonts / CompositeFont . h \" class FFreeTypeFace ; class FFreeTypeLibrary ; struct FSlateFontInfo ; class FCachedTypefaceData { public :)",
    "insertText": "FCachedTypefaceData()"
  },
  {
    "label": "FCachedTypefaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedTypefaceData(const FTypeface& InTypeface, const float InScalingFactor = 1.0f)"
  },
  {
    "label": "GetFontData()",
    "kind": "Method",
    "detail": "Function (const FFontData*)",
    "insertText": "GetFontData(const FName& InName)"
  },
  {
    "label": "FCachedFontData()",
    "kind": "Method",
    "detail": "Function (private : struct FCachedFontData {)",
    "insertText": "FCachedFontData() : Name() , FontData(nullptr)"
  },
  {
    "label": "FCachedFontData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedFontData(const FName InName, const FFontData* InFontData) : Name(InName) , FontData(InFontData)"
  },
  {
    "label": "BinarySearchKey()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "BinarySearchKey(const FCachedFontData& InCachedFontData)"
  },
  {
    "label": "SortPredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SortPredicate(const FCachedFontData& InOne, const FCachedFontData& InTwo)"
  },
  {
    "label": "FCachedCompositeFontData()",
    "kind": "Method",
    "detail": "Function (} FName Name ; const FFontData* FontData ; } ; const FTypeface* Typeface ; TArray<FCachedFontData,TInlineAllocator<1>> CachedFontData ; float ScalingFactor ; } ; class FCachedCompositeFontData { public :)",
    "insertText": "FCachedCompositeFontData()"
  },
  {
    "label": "FCachedCompositeFontData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedCompositeFontData(const FCompositeFont& InCompositeFont)"
  },
  {
    "label": "GetFallbackTypeface()",
    "kind": "Method",
    "detail": "Function (} const FCachedTypefaceData*)",
    "insertText": "GetFallbackTypeface()"
  },
  {
    "label": "GetTypefaceForCodepoint()",
    "kind": "Method",
    "detail": "Function (} const FCachedTypefaceData*)",
    "insertText": "GetTypefaceForCodepoint(const UTF32CHAR InCodepoint)"
  },
  {
    "label": "GetCachedFontData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachedFontData(TArray<const FFontData*>& OutFontData)"
  },
  {
    "label": "RefreshFontRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshFontRanges()"
  },
  {
    "label": "FCachedFontRange()",
    "kind": "Method",
    "detail": "Function (private : struct FCachedFontRange {)",
    "insertText": "FCachedFontRange() : Range(FInt32Range::Empty()) , CachedTypeface()"
  },
  {
    "label": "FCachedFontRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedFontRange(const FInt32Range& InRange, TSharedPtr<FCachedTypefaceData> InCachedTypeface) : Range(InRange) , CachedTypeface(MoveTemp(InCachedTypeface))"
  },
  {
    "label": "BinarySearchKey()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "BinarySearchKey(const FCachedFontRange& InCachedFontRange)"
  },
  {
    "label": "SortPredicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SortPredicate(const FCachedFontRange& InOne, const FCachedFontRange& InTwo)"
  },
  {
    "label": "FCompositeFontCache()",
    "kind": "Method",
    "detail": "Function (} FInt32Range Range ; TSharedPtr<FCachedTypefaceData> CachedTypeface ; } ; const int32 CachedTypeface_DefaultIndex = 0 ; const int32 CachedTypeface_FallbackIndex = 1 ; const int32 CachedTypeface_FirstSubTypefaceIndex = 2 ; const FCompositeFont* CompositeFont ; TArray<TSharedPtr<FCachedTypefaceData>,TInlineAllocator<2>> CachedTypefaces ; TArray<FCachedFontRange> CachedPriorityFontRanges ; TArray<FCachedFontRange> CachedFontRanges ; } ; class FCompositeFontCache { public :)",
    "insertText": "FCompositeFontCache(const FFreeTypeLibrary* InFTLibrary)"
  },
  {
    "label": "FCompositeFontCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCompositeFontCache()"
  },
  {
    "label": "GetDefaultFontData()",
    "kind": "Method",
    "detail": "Function (const FFontData&)",
    "insertText": "GetDefaultFontData(const FSlateFontInfo& InFontInfo)"
  },
  {
    "label": "GetFontDataForCodepoint()",
    "kind": "Method",
    "detail": "Function (const FFontData&)",
    "insertText": "GetFontDataForCodepoint(const FSlateFontInfo& InFontInfo, const UTF32CHAR InCodepoint, float& OutScalingFactor)"
  },
  {
    "label": "GetFontFace()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFreeTypeFace>)",
    "insertText": "GetFontFace(const FFontData& InFontData)"
  },
  {
    "label": "GetFontAttributes()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetFontAttributes(const FFontData& InFontData)"
  },
  {
    "label": "FlushCompositeFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCompositeFont(const FCompositeFont& InCompositeFont)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCache()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "GetFontDataAssetResidentMemory()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetFontDataAssetResidentMemory(const UObject* FontDataAsset)"
  },
  {
    "label": "GetCachedCompositeFont()",
    "kind": "Method",
    "detail": "Function (private : const FCachedCompositeFontData*)",
    "insertText": "GetCachedCompositeFont(const FCompositeFont* const InCompositeFont)"
  },
  {
    "label": "GetCachedCompositeFont()",
    "kind": "Method",
    "detail": "Function (const FCachedCompositeFontData* const CachedCompositeFont =)",
    "insertText": "GetCachedCompositeFont(InCompositeFont)"
  },
  {
    "label": "GetFallbackCachedTypeface()",
    "kind": "Method",
    "detail": "Function (} const FCachedTypefaceData*)",
    "insertText": "GetFallbackCachedTypeface(const FCompositeFont* const InCompositeFont)"
  },
  {
    "label": "GetCachedTypefaceForCodepoint()",
    "kind": "Method",
    "detail": "Function (} const FCachedTypefaceData*)",
    "insertText": "GetCachedTypefaceForCodepoint(const FCompositeFont* const InCompositeFont, const UTF32CHAR InCodepoint)"
  },
  {
    "label": "GetBestMatchFontForAttributes()",
    "kind": "Method",
    "detail": "Function (} const FFontData*)",
    "insertText": "GetBestMatchFontForAttributes(const FCachedTypefaceData* const InCachedTypefaceData, const TSet<FName>& InFontAttributes)"
  },
  {
    "label": "DoesFontDataSupportCodepoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesFontDataSupportCodepoint(const FFontData& InFontData, const UTF32CHAR InCodepoint)"
  },
  {
    "label": "HandleCultureChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCultureChanged()"
  }
]