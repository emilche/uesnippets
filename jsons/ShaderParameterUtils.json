[
  {
    "label": "FShaderMapPointerTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapPointerTable"
  },
  {
    "label": "TUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformBuffer"
  },
  {
    "label": "TUniformBufferRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformBufferRef"
  },
  {
    "label": "TShaderRefBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShaderRefBase"
  },
  {
    "label": "ParameterType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParameterType"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" RHIUtilities . h \" # include \" ShaderParameters . h \" # include \" ShaderCore . h \" # include \" Misc / App . h \" class FShaderMapPointerTable ; template<TBufferStruct> class TUniformBuffer ; template<TBufferStruct> class TUniformBufferRef ; template<ShaderType,PointerTableType> class TShaderRefBase ; template<ShaderType> using TShaderRef = TShaderRefBase<ShaderType,FShaderMapPointerTable> ; template<class ParameterType> void)",
    "insertText": "SetShaderValue(FRHIBatchedShaderParameters& BatchedParameters , const FShaderParameter& Parameter , const ParameterType& Value , uint32 ElementIndex = 0)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 AlignedTypeSize = Align<)",
    "insertText": "uint32(sizeof(ParameterType), SHADER_PARAMETER_ARRAY_ELEMENT_ALIGNMENT)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const uint32 ElementByteOffset = ElementIndex* AlignedTypeSize ; const int32 NumBytesToSet = FMath::Min<)",
    "insertText": "int32(sizeof(ParameterType), static_cast<int32>(Parameter.GetNumBytes()) - ElementByteOffset)"
  },
  {
    "label": "SetShaderParameter()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetShaderParameter(Parameter.GetBufferIndex(), Parameter.GetBaseIndex() + ElementByteOffset, (uint32)NumBytesToSet, &Value)"
  },
  {
    "label": "SetShaderValueArray()",
    "kind": "Method",
    "detail": "Function (} } template<class ParameterType> void)",
    "insertText": "SetShaderValueArray(FRHIBatchedShaderParameters& BatchedParameters , const FShaderParameter& Parameter , const ParameterType* Values , uint32 NumElements , uint32 ElementIndex = 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const uint32 ElementByteOffset = ElementIndex* AlignedTypeSize ; const int32 NumBytesToSet = FMath::Min<)",
    "insertText": "int32(NumElements * AlignedTypeSize, Parameter.GetNumBytes() - ElementByteOffset)"
  },
  {
    "label": "SetShaderParameter()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetShaderParameter(Parameter.GetBufferIndex(), Parameter.GetBaseIndex() + ElementByteOffset, (uint32)NumBytesToSet, Values)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetTextureParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderResourceParameter& Parameter, FRHITexture* TextureRHI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "if(Parameter.GetType() == EShaderParameterType::BindlessSRV)"
  },
  {
    "label": "SetBindlessTexture()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetBindlessTexture(Parameter.GetBaseIndex(), TextureRHI)"
  },
  {
    "label": "SetShaderTexture()",
    "kind": "Method",
    "detail": "Function (} else # endif { BatchedParameters .)",
    "insertText": "SetShaderTexture(Parameter.GetBaseIndex(), TextureRHI)"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetSamplerParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderResourceParameter& Parameter, FRHISamplerState* SamplerStateRHI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "if(Parameter.GetType() == EShaderParameterType::BindlessSampler)"
  },
  {
    "label": "SetBindlessSampler()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetBindlessSampler(Parameter.GetBaseIndex(), SamplerStateRHI)"
  },
  {
    "label": "SetShaderSampler()",
    "kind": "Method",
    "detail": "Function (} else # endif { BatchedParameters .)",
    "insertText": "SetShaderSampler(Parameter.GetBaseIndex(), SamplerStateRHI)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetTextureParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderResourceParameter& TextureParameter, const FShaderResourceParameter& SamplerParameter, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, TextureParameter, TextureRHI)"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplerParameter(BatchedParameters, SamplerParameter, SamplerStateRHI)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextureParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderResourceParameter& TextureParameter, const FShaderResourceParameter& SamplerParameter, const FTexture* Texture)"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (Texture -> LastRenderTime =)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetTextureParameter(BatchedParameters, TextureParameter, Texture->TextureRHI)"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplerParameter(BatchedParameters, SamplerParameter, Texture->SamplerStateRHI)"
  },
  {
    "label": "SetSRVParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSRVParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderResourceParameter& Parameter, FRHIShaderResourceView* SRV)"
  },
  {
    "label": "SetBindlessResourceView()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetBindlessResourceView(Parameter.GetBaseIndex(), SRV)"
  },
  {
    "label": "SetShaderResourceViewParameter()",
    "kind": "Method",
    "detail": "Function (} else # endif { BatchedParameters .)",
    "insertText": "SetShaderResourceViewParameter(Parameter.GetBaseIndex(), SRV)"
  },
  {
    "label": "SetUAVParameter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetUAVParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderResourceParameter& Parameter, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "if(Parameter.GetType() == EShaderParameterType::BindlessUAV)"
  },
  {
    "label": "SetBindlessUAV()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetBindlessUAV(Parameter.GetBaseIndex(), UAV)"
  },
  {
    "label": "SetUAVParameter()",
    "kind": "Method",
    "detail": "Function (} else # endif { BatchedParameters .)",
    "insertText": "SetUAVParameter(Parameter.GetBaseIndex(), UAV)"
  },
  {
    "label": "UnsetSRVParameter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "UnsetSRVParameter(FRHIBatchedShaderUnbinds& BatchedUnbinds, const FShaderResourceParameter& Parameter)"
  },
  {
    "label": "UnsetSRV()",
    "kind": "Method",
    "detail": "Function (} else # endif { BatchedUnbinds .)",
    "insertText": "UnsetSRV(Parameter.GetBaseIndex())"
  },
  {
    "label": "UnsetUAVParameter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "UnsetUAVParameter(FRHIBatchedShaderUnbinds& BatchedUnbinds, const FShaderResourceParameter& Parameter)"
  },
  {
    "label": "UnsetUAV()",
    "kind": "Method",
    "detail": "Function (} else # endif { BatchedUnbinds .)",
    "insertText": "UnsetUAV(Parameter.GetBaseIndex())"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetUniformBufferParameter(FRHIBatchedShaderParameters& BatchedParameters, const FShaderUniformBufferParameter& Parameter, FRHIUniformBuffer* UniformBufferRHI)"
  },
  {
    "label": "SetShaderUniformBuffer()",
    "kind": "Method",
    "detail": "Function (BatchedParameters .)",
    "insertText": "SetShaderUniformBuffer(Parameter.GetBaseIndex(), UniformBufferRHI)"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (} } template<TBufferStruct> void)",
    "insertText": "SetUniformBufferParameter(FRHIBatchedShaderParameters& BatchedParameters, const TShaderUniformBufferParameter<TBufferStruct>& Parameter, const TUniformBufferRef<TBufferStruct>& UniformBufferRef)"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferParameter(BatchedParameters, Parameter, UniformBufferRef.GetReference())"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (} } template<TBufferStruct> void)",
    "insertText": "SetUniformBufferParameter(FRHIBatchedShaderParameters& BatchedParameters, const TShaderUniformBufferParameter<TBufferStruct>& Parameter, const TUniformBuffer<TBufferStruct>& UniformBuffer)"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferParameter(BatchedParameters, Parameter, UniformBuffer.GetUniformBufferRHI())"
  },
  {
    "label": "SetUniformBufferParameterImmediate()",
    "kind": "Method",
    "detail": "Function (} } template<TBufferStruct> void)",
    "insertText": "SetUniformBufferParameterImmediate(FRHIBatchedShaderParameters& BatchedParameters, const TShaderUniformBufferParameter<TBufferStruct>& Parameter, const TBufferStruct& UniformBufferValue)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FUniformBufferRHIRef UniformBufferRef =)",
    "insertText": "RHICreateUniformBuffer(&UniformBufferValue, &TBufferStruct::FTypeInfo::GetStructMetadata()->GetLayout(), UniformBuffer_SingleDraw)"
  },
  {
    "label": "SetSingleShaderValue()",
    "kind": "Method",
    "detail": "Function (} } template<TRHICmdList,TShaderTypeRHI,class ParameterType> void)",
    "insertText": "SetSingleShaderValue(TRHICmdList& RHICmdList , TShaderTypeRHI* InShaderRHI , const FShaderParameter& Parameter , const ParameterType& Value)"
  },
  {
    "label": "GetScratchShaderParameters()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderParameters& BatchedParameters = RHICmdList .)",
    "insertText": "GetScratchShaderParameters()"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, Parameter, Value)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderParameters(InShaderRHI, BatchedParameters)"
  },
  {
    "label": "SetBatchedShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (} template<TShaderType,. . . TArguments> void)",
    "insertText": "SetBatchedShaderParametersMixed(FRHIBatchedShaderParameters& BatchedParameters, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParameters(BatchedParameters, InShader, Parameters)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (InShader ->)",
    "insertText": "SetParameters(BatchedParameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetBatchedShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBatchedShaderParametersMixed(BatchedParameters, InShader, Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,TShaderTypeRHI,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixed(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TShaderTypeRHI* InShaderRHI, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixedVS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixedVS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersMixed(RHICmdList, InShader, InShader.GetVertexShader(), Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersMixedMS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixedMS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersMixed(RHICmdList, InShader, InShader.GetMeshShader(), Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersMixedAS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixedAS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersMixed(RHICmdList, InShader, InShader.GetAmplificationShader(), Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersMixedPS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixedPS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersMixed(RHICmdList, InShader, InShader.GetPixelShader(), Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersMixedGS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixedGS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersMixed(RHICmdList, InShader, InShader.GetGeometryShader(), Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersMixedCS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersMixedCS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, const typename TShaderType::FParameters& Parameters, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersMixed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersMixed(RHICmdList, InShader, InShader.GetComputeShader(), Parameters, Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,TShaderTypeRHI,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacy(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TShaderTypeRHI* InShaderRHI, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacyVS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacyVS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersLegacy(RHICmdList, InShader, InShader.GetVertexShader(), Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersLegacyMS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacyMS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersLegacy(RHICmdList, InShader, InShader.GetMeshShader(), Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersLegacyAS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacyAS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersLegacy(RHICmdList, InShader, InShader.GetAmplificationShader(), Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersLegacyPS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacyPS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersLegacy(RHICmdList, InShader, InShader.GetPixelShader(), Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersLegacyGS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacyGS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersLegacy(RHICmdList, InShader, InShader.GetGeometryShader(), Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "SetShaderParametersLegacyCS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType,. . . TArguments> void)",
    "insertText": "SetShaderParametersLegacyCS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader, TArguments&&... InArguments)"
  },
  {
    "label": "SetShaderParametersLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderParametersLegacy(RHICmdList, InShader, InShader.GetComputeShader(), Forward<TArguments>(InArguments)...)"
  },
  {
    "label": "UnsetShaderParametersLegacyPS()",
    "kind": "Method",
    "detail": "Function (} template<TRHICmdList,TShaderType> void)",
    "insertText": "UnsetShaderParametersLegacyPS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader)"
  },
  {
    "label": "GetScratchShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (FRHIBatchedShaderUnbinds& BatchedUnbinds = RHICmdList .)",
    "insertText": "GetScratchShaderUnbinds()"
  },
  {
    "label": "UnsetParameters()",
    "kind": "Method",
    "detail": "Function (InShader ->)",
    "insertText": "UnsetParameters(BatchedUnbinds)"
  },
  {
    "label": "SetBatchedShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderUnbinds(InShader.GetPixelShader(), BatchedUnbinds)"
  },
  {
    "label": "UnsetShaderParametersLegacyCS()",
    "kind": "Method",
    "detail": "Function (} } template<TRHICmdList,TShaderType> void)",
    "insertText": "UnsetShaderParametersLegacyCS(TRHICmdList& RHICmdList, const TShaderRef<TShaderType>& InShader)"
  },
  {
    "label": "SetBatchedShaderUnbinds()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderUnbinds(InShader.GetComputeShader(), BatchedUnbinds)"
  },
  {
    "label": "GUARD_SETSHADERVALUE()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "GUARD_SETSHADERVALUE(_TYPE) \\ template<typename ShaderRHIParamRef, typename TRHICmdList> \\ void SetShaderValue( TRHICmdList& RHICmdList, const ShaderRHIParamRef& Shader, const FShaderParameter& Parameter, \\ const _TYPE##d& Value, uint32 ElementIndex = 0)"
  },
  {
    "label": "SetShaderValueOnContext()",
    "kind": "Method",
    "detail": "Function (} \\ template<ShaderRHIParamRef> \\ void)",
    "insertText": "SetShaderValueOnContext(IRHICommandContext& RHICmdListContext, const ShaderRHIParamRef& Shader, const FShaderParameter& Parameter, \\ const _TYPE##d& Value, uint32 ElementIndex = 0)"
  },
  {
    "label": "SetShaderValueArray()",
    "kind": "Method",
    "detail": "Function (} \\ template<ShaderRHIParamRef,TRHICmdList> \\ void)",
    "insertText": "SetShaderValueArray(TRHICmdList& RHICmdList, const ShaderRHIParamRef& Shader, const FShaderParameter& Parameter, \\ const _TYPE##d* Values, uint32 NumElements, uint32 BaseElementIndex = 0)"
  },
  {
    "label": "GUARD_SETSHADERVALUE()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "GUARD_SETSHADERVALUE(FMatrix44) GUARD_SETSHADERVALUE(FVector2) GUARD_SETSHADERVALUE(FVector3) GUARD_SETSHADERVALUE(FVector4) GUARD_SETSHADERVALUE(FPlane4) GUARD_SETSHADERVALUE(FQuat4) GUARD_SETSHADERVALUE(::FSphere3) GUARD_SETSHADERVALUE(FBox3) template<typename TRHIShader, typename TRHICmdList> FORCEINLINE void SetTextureParameter(TRHICmdList& RHICmdList, TRHIShader* Shader, const FShaderResourceParameter& TextureParameter, const FShaderResourceParameter& SamplerParameter, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, TextureParameter, SamplerParameter, SamplerStateRHI, TextureRHI)"
  },
  {
    "label": "SetBatchedShaderParameters()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "SetBatchedShaderParameters(Shader, BatchedParameters)"
  }
]