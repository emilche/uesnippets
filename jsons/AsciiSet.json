[
  {
    "label": "FAsciiSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsciiSet"
  },
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "StringType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "InitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InitData"
  },
  {
    "label": "FAsciiSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Char . h \" class FAsciiSet { public : template<CharType,int N>)",
    "insertText": "FAsciiSet(const CharType(&Chars)[N]) : FAsciiSet(StringToBitset(Chars))"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} template<CharType> bool)",
    "insertText": "Contains(CharType Char)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (} template<CharType> uint64)",
    "insertText": "Test(CharType Char)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAsciiSet)",
    "insertText": "operator(char Char)"
  },
  {
    "label": "SetImpl()",
    "kind": "Method",
    "detail": "Function (InitData Bitset = { LoMask,HiMask } ;)",
    "insertText": "SetImpl(Bitset, TChar<char>::ToUnsigned(Char))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAsciiSet)",
    "insertText": "operator(FAsciiSet OtherSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAsciiSet)",
    "insertText": "operator()"
  },
  {
    "label": "FindFirstOrEnd()",
    "kind": "Method",
    "detail": "Function (} template<class CharType> const CharType*)",
    "insertText": "FindFirstOrEnd(const CharType* Str, FAsciiSet Set)"
  },
  {
    "label": "FindFirstOrEnd()",
    "kind": "Method",
    "detail": "Function (const CharType* Last =)",
    "insertText": "FindFirstOrEnd(Str, Set)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (Last = It ; } return Last ; } template<CharType> const CharType*)",
    "insertText": "Skip(const CharType* Str, FAsciiSet Set)"
  },
  {
    "label": "HasAny()",
    "kind": "Method",
    "detail": "Function (+ + Str ; } return Str ; } template<CharType> bool)",
    "insertText": "HasAny(const CharType* Str, FAsciiSet Set)"
  },
  {
    "label": "HasNone()",
    "kind": "Method",
    "detail": "Function (} template<CharType> bool)",
    "insertText": "HasNone(const CharType* Str, FAsciiSet Set)"
  },
  {
    "label": "HasOnly()",
    "kind": "Method",
    "detail": "Function (} template<CharType> bool)",
    "insertText": "HasOnly(const CharType* Str, FAsciiSet Set)"
  },
  {
    "label": "FindPrefixWith()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "FindPrefixWith(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "FindPrefixWithout()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "FindPrefixWithout(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "TrimPrefixWith()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "TrimPrefixWith(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "TrimPrefixWithout()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "TrimPrefixWithout(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "FindSuffixWith()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "FindSuffixWith(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "FindSuffixWithout()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "FindSuffixWithout(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "TrimSuffixWith()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "TrimSuffixWith(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "TrimSuffixWithout()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> StringType)",
    "insertText": "TrimSuffixWithout(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "HasAny()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> bool)",
    "insertText": "HasAny(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "HasNone()",
    "kind": "Method",
    "detail": "Function (} template<class StringType> bool)",
    "insertText": "HasNone(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 Match = 0 ;)",
    "insertText": "for(auto Char : Str)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (Match | = Set .)",
    "insertText": "Test(Char)"
  },
  {
    "label": "HasOnly()",
    "kind": "Method",
    "detail": "Function (} return Match = = 0 ; } template<class StringType> bool)",
    "insertText": "HasOnly(const StringType& Str, FAsciiSet Set)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto End =)",
    "insertText": "GetData(Str) + GetNum(Str)"
  },
  {
    "label": "FindFirst()",
    "kind": "Method",
    "detail": "Function (} private : enum class EDir { Forward,Reverse } ; enum class EInclude { Members,NonMembers } ; enum class EKeep { Head,Tail } ; template<EInclude Include,CharType> const CharType*)",
    "insertText": "FindFirst(FAsciiSet Set, const CharType* It, const CharType* End)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto Begin =)",
    "insertText": "GetData(Str)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (auto End = Begin +)",
    "insertText": "GetNum(Str)"
  },
  {
    "label": "Include()",
    "kind": "Method",
    "detail": "Function (auto It = Dir = = EDir::Forward ? FindFirst<)",
    "insertText": "Include(Set, Begin, End) : FindLast<Include>(Set, End - 1, Begin - 1)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} struct InitData { uint64 Lo,Hi ; } ; uint64 NilMask =)",
    "insertText": "uint64(1)"
  },
  {
    "label": "SetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImpl(InitData& Bitset, uint32 Char)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 IsLo =)",
    "insertText": "uint64(0) - (Char >> 6 == 0)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 IsHi =)",
    "insertText": "uint64(0) - (Char >> 6 == 1)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 Bit =)",
    "insertText": "uint64(1) << uint8(Char & 0x3f)"
  },
  {
    "label": "TestImpl()",
    "kind": "Method",
    "detail": "Function (Bitset . Lo | = Bit& IsLo ; Bitset . Hi | = Bit& IsHi ; } uint64)",
    "insertText": "TestImpl(uint32 Char)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint64 Bit =)",
    "insertText": "uint64(1) << (Char & 0x3f)"
  },
  {
    "label": "StringToBitset()",
    "kind": "Method",
    "detail": "Function (} template<CharType,int N> InitData)",
    "insertText": "StringToBitset(const CharType(&Chars)[N])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (InitData Bitset = { 0,0 } ;)",
    "insertText": "for(int I = 0; I < N - 1; ++I)"
  },
  {
    "label": "SetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImpl(Bitset, TChar<CharType>::ToUnsigned(Chars[I]))"
  },
  {
    "label": "FAsciiSet()",
    "kind": "Method",
    "detail": "Function (} return Bitset ; })",
    "insertText": "FAsciiSet(InitData Bitset) : LoMask(Bitset.Lo), HiMask(Bitset.Hi)"
  },
  {
    "label": "FAsciiSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAsciiSet(uint64 Lo, uint64 Hi) : LoMask(Lo), HiMask(Hi)"
  }
]