[
  {
    "label": "IImageWriteTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWriteTaskBase"
  },
  {
    "label": "IImageWriteQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWriteQueue"
  },
  {
    "label": "IImageWriteQueueModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWriteQueueModule"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" HAL / Platform . h \" # include \" ImageWriteTask . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogMacros . h \" # include \" Misc / CoreDefines . h \" # include \" Modules / ModuleInterface . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogImageWriteQueue, Warning, Warning)"
  },
  {
    "label": "IImageWriteQueue()",
    "kind": "Method",
    "detail": "Function (class IImageWriteTaskBase ; class IImageWriteQueue { public : ~)",
    "insertText": "IImageWriteQueue()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} TFuture<bool>)",
    "insertText": "Enqueue(TUniquePtr<IImageWriteTaskBase>&& InTask, bool bInBlockIfAtCapacity = true)"
  },
  {
    "label": "CreateFence()",
    "kind": "Method",
    "detail": "Function (TFuture<void>)",
    "insertText": "CreateFence(const TFunction<void()>& InOnFenceReached = TFunction<void()>())"
  },
  {
    "label": "GetNumPendingTasks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPendingTasks()"
  },
  {
    "label": "GetWriteQueue()",
    "kind": "Method",
    "detail": "Function (} ; class IImageWriteQueueModule : public IModuleInterface { public : IImageWriteQueue&)",
    "insertText": "GetWriteQueue()"
  }
]