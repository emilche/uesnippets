[
  {
    "label": "AnalysisManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisManager"
  },
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "DomTreeNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DomTreeNodeBase"
  },
  {
    "label": "DominatorTreeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeBase"
  },
  {
    "label": "BasicBlockEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlockEdge"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "DominatorTreeAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeAnalysis"
  },
  {
    "label": "DominatorTreePrinterPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreePrinterPass"
  },
  {
    "label": "DominatorTreeVerifierPass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DominatorTreeVerifierPass"
  },
  {
    "label": "DominatorTreeWrapperPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeWrapperPass"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_DOMINATORS_H # define LLVM_IR_DOMINATORS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / DepthFirstIterator . h \" # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / IR / BasicBlock . h \" # include \" llvm / IR / CFG . h \" # include \" llvm / IR / Function . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / GenericDomTree . h \" # include \" llvm / Support / raw_ostream . h \" # include<algorithm> namespace llvm { template<IRUnitT> class AnalysisManager ; class PreservedAnalyses ; template class DomTreeNodeBase<BasicBlock> ; template class DominatorTreeBase<BasicBlock> ; template void Calculate<Function,)",
    "insertText": "BasicBlock(DominatorTreeBase<GraphTraits<BasicBlock *>::NodeType> &DT, Function &F)"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (template void Calculate<Function,Inverse<)",
    "insertText": "BasicBlock(DominatorTreeBase<GraphTraits<Inverse<BasicBlock *>>::NodeType> &DT, Function &F)"
  },
  {
    "label": "BasicBlockEdge()",
    "kind": "Method",
    "detail": "Function (typedef DomTreeNodeBase<BasicBlock> DomTreeNode ; class BasicBlockEdge { const BasicBlock* Start ; const BasicBlock* End ; public :)",
    "insertText": "BasicBlockEdge(const BasicBlock *Start_, const BasicBlock *End_) : Start(Start_), End(End_)"
  },
  {
    "label": "getStart()",
    "kind": "Method",
    "detail": "Function (} const BasicBlock*)",
    "insertText": "getStart()"
  },
  {
    "label": "DominatorTree()",
    "kind": "Method",
    "detail": "Function (} ; class DominatorTree : public DominatorTreeBase<BasicBlock> { public : typedef DominatorTreeBase<BasicBlock> Base ;)",
    "insertText": "DominatorTree() : DominatorTreeBase<BasicBlock>(false)"
  },
  {
    "label": "DominatorTree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DominatorTree(DominatorTree &&Arg) : Base(std::move(static_cast<Base &>(Arg)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DominatorTree&)",
    "insertText": "operator(DominatorTree &&RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(std::move(static_cast<Base &>(RHS)))"
  },
  {
    "label": "getRootNode()",
    "kind": "Method",
    "detail": "Function (const DomTreeNode* R =)",
    "insertText": "getRootNode()"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dominates(const Instruction *Def, const Instruction *User)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dominates(const Instruction *Def, const BasicBlock *BB)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dominates(const BasicBlockEdge &BBE, const Use &U)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dominates(const BasicBlockEdge &BBE, const BasicBlock *BB)"
  },
  {
    "label": "isReachableFromEntry()",
    "kind": "Method",
    "detail": "Function (using Base::isReachableFromEntry ; bool)",
    "insertText": "isReachableFromEntry(const Use &U)"
  },
  {
    "label": "verifyDomTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyDomTree()"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct GraphTraits<DomTreeNode*> { typedef DomTreeNode NodeType ; typedef NodeType::iterator ChildIteratorType ; NodeType*)",
    "insertText": "getEntryNode(NodeType *N)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} typedef df_iterator<DomTreeNode*> nodes_iterator ; nodes_iterator)",
    "insertText": "nodes_begin(DomTreeNode *N)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(DomTreeNode *N)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<DominatorTree*> : public GraphTraits<DomTreeNode*> { NodeType*)",
    "insertText": "getEntryNode(DominatorTree *DT)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_begin(DominatorTree *N)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(DominatorTree *N)"
  },
  {
    "label": "ID()",
    "kind": "Method",
    "detail": "Function (} } ; class DominatorTreeAnalysis { public : typedef DominatorTree Result ; void*)",
    "insertText": "ID()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} DominatorTree)",
    "insertText": "run(Function &F)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "name()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses)",
    "insertText": "run(Function &F, AnalysisManager<Function> *AM)"
  },
  {
    "label": "initializeDominatorTreeWrapperPassPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeDominatorTreeWrapperPassPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "getDomTree()",
    "kind": "Method",
    "detail": "Function (} DominatorTree&)",
    "insertText": "getDomTree()"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (AU .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS, const Module *M = nullptr)"
  }
]