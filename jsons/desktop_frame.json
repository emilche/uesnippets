[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "DesktopFrame()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_DESKTOP_FRAME_H_ # define MODULES_DESKTOP_CAPTURE_DESKTOP_FRAME_H_ # include<stdint . h> # include<memory> # include<vector> # include \" modules / desktop_capture / desktop_geometry . h \" # include \" modules / desktop_capture / desktop_region . h \" # include \" modules / desktop_capture / shared_memory . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { const float kStandardDPI = 9 6 . 0 f ; class RTC_EXPORT DesktopFrame { public : const int kBytesPerPixel = 4 ; ~)",
    "insertText": "DesktopFrame()"
  },
  {
    "label": "DesktopFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopFrame(const DesktopFrame&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopFrame&)",
    "insertText": "operator(const DesktopFrame&)"
  },
  {
    "label": "rect()",
    "kind": "Method",
    "detail": "Function (DesktopRect)",
    "insertText": "rect()"
  },
  {
    "label": "scale_factor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "scale_factor()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const DesktopSize&)",
    "insertText": "size()"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (top_left_ = top_left ; } int)",
    "insertText": "stride()"
  },
  {
    "label": "may_contain_cursor()",
    "kind": "Method",
    "detail": "Function (dpi_ = dpi ; } bool)",
    "insertText": "may_contain_cursor()"
  },
  {
    "label": "capture_time_ms()",
    "kind": "Method",
    "detail": "Function (may_contain_cursor_ = may_contain_cursor ; } int64_t)",
    "insertText": "capture_time_ms()"
  },
  {
    "label": "CopyPixelsFrom()",
    "kind": "Method",
    "detail": "Function (capture_time_ms_ = time_ms ; } void)",
    "insertText": "CopyPixelsFrom(const uint8_t* src_buffer, int src_stride, const DesktopRect& dest_rect)"
  },
  {
    "label": "CopyPixelsFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyPixelsFrom(const DesktopFrame& src_frame, const DesktopVector& src_pos, const DesktopRect& dest_rect)"
  },
  {
    "label": "CopyIntersectingPixelsFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyIntersectingPixelsFrom(const DesktopFrame& src_frame, double horizontal_scale, double vertical_scale)"
  },
  {
    "label": "GetFrameDataAtPos()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "GetFrameDataAtPos(const DesktopVector& pos)"
  },
  {
    "label": "capturer_id()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "capturer_id()"
  },
  {
    "label": "CopyFrameInfoFrom()",
    "kind": "Method",
    "detail": "Function (capturer_id_ = capturer_id ; } void)",
    "insertText": "CopyFrameInfoFrom(const DesktopFrame& other)"
  },
  {
    "label": "MoveFrameInfoFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFrameInfoFrom(DesktopFrame* other)"
  },
  {
    "label": "icc_profile()",
    "kind": "Method",
    "detail": "Function (const std::vector<uint8_t>&)",
    "insertText": "icc_profile()"
  },
  {
    "label": "DesktopFrame()",
    "kind": "Method",
    "detail": "Function (icc_profile_ = icc_profile ; } protected :)",
    "insertText": "DesktopFrame(DesktopSize size, int stride, uint8_t* data, SharedMemory* shared_memory)"
  },
  {
    "label": "BasicDesktopFrame()",
    "kind": "Method",
    "detail": "Function (uint8_t* const data_ ; SharedMemory* const shared_memory_ ; private : const DesktopSize size_ ; const int stride_ ; DesktopRegion updated_region_ ; DesktopVector top_left_ ; DesktopVector dpi_ ; bool may_contain_cursor_ = false ; int64_t capture_time_ms_ ; uint32_t capturer_id_ ; std::vector<uint8_t> icc_profile_ ; } ; class RTC_EXPORT BasicDesktopFrame : public DesktopFrame { public :)",
    "insertText": "BasicDesktopFrame(DesktopSize size)"
  },
  {
    "label": "BasicDesktopFrame()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicDesktopFrame()"
  },
  {
    "label": "BasicDesktopFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicDesktopFrame(const BasicDesktopFrame&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicDesktopFrame&)",
    "insertText": "operator(const BasicDesktopFrame&)"
  },
  {
    "label": "CopyOf()",
    "kind": "Method",
    "detail": "Function (DesktopFrame*)",
    "insertText": "CopyOf(const DesktopFrame& frame)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT SharedMemoryDesktopFrame : public DesktopFrame { public : std::unique_ptr<DesktopFrame>)",
    "insertText": "Create(DesktopSize size, SharedMemoryFactory* shared_memory_factory)"
  },
  {
    "label": "SharedMemoryDesktopFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedMemoryDesktopFrame(DesktopSize size, int stride, SharedMemory* shared_memory)"
  },
  {
    "label": "SharedMemoryDesktopFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedMemoryDesktopFrame(DesktopSize size, int stride, std::unique_ptr<SharedMemory> shared_memory)"
  },
  {
    "label": "SharedMemoryDesktopFrame()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SharedMemoryDesktopFrame()"
  },
  {
    "label": "SharedMemoryDesktopFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SharedMemoryDesktopFrame(const SharedMemoryDesktopFrame&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedMemoryDesktopFrame&)",
    "insertText": "operator(const SharedMemoryDesktopFrame&)"
  },
  {
    "label": "SharedMemoryDesktopFrame()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "SharedMemoryDesktopFrame(DesktopRect rect, int stride, SharedMemory* shared_memory)"
  }
]