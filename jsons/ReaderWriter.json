[
  {
    "label": "BitstreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamWriter"
  },
  {
    "label": "DataStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataStreamer"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "bc_header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bc_header"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BitcodeDiagnosticInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitcodeDiagnosticInfo"
  },
  {
    "label": "is_error_code_enum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_error_code_enum"
  },
  {
    "label": "getLazyBitcodeModule()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Module>>)",
    "insertText": "getLazyBitcodeModule(std::unique_ptr<MemoryBuffer> &&Buffer,\n                       LLVMContext &Context,\n                       DiagnosticHandlerFunction DiagnosticHandler = nullptr,\n                       bool ShouldLazyLoadMetadata = false,\n                       bool ShouldTrackBitstreamUsage = false)"
  },
  {
    "label": "getStreamedBitcodeModule()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Module>>)",
    "insertText": "getStreamedBitcodeModule(\n      StringRef Name, std::unique_ptr<DataStreamer> Streamer,\n      LLVMContext &Context,\n      DiagnosticHandlerFunction DiagnosticHandler = nullptr)"
  },
  {
    "label": "getBitcodeTargetTriple()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getBitcodeTargetTriple(MemoryBufferRef Buffer, LLVMContext &Context,\n                         DiagnosticHandlerFunction DiagnosticHandler = nullptr)"
  },
  {
    "label": "parseBitcodeFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Module>>)",
    "insertText": "parseBitcodeFile(MemoryBufferRef Buffer, LLVMContext &Context,\n                   DiagnosticHandlerFunction DiagnosticHandler = nullptr,\n                   bool ShouldTrackBitstreamUsage = false)"
  },
  {
    "label": "WriteBitcodeToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBitcodeToFile(const Module *M, raw_ostream &Out,\n                          bool ShouldPreserveUseListOrder = false)"
  },
  {
    "label": "BitcodeDiagnosticInfo()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "BitcodeDiagnosticInfo(std::error_code EC, DiagnosticSeverity Severity,\n                          const Twine &Msg)"
  }
]