[
  {
    "label": "BitstreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamWriter"
  },
  {
    "label": "DataStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataStreamer"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "ModulePass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePass"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BitcodeDiagnosticInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitcodeDiagnosticInfo"
  },
  {
    "label": "is_error_code_enum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_error_code_enum"
  },
  {
    "label": "getLazyBitcodeModule()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_BITCODE_READERWRITER_H # define LLVM_BITCODE_READERWRITER_H # include \" llvm / IR / DiagnosticInfo . h \" # include \" llvm / Support / Endian . h \" # include \" llvm / Support / ErrorOr . h \" # include \" llvm / Support / MemoryBuffer . h \" # include<memory> # include<string> namespace llvm { class BitstreamWriter ; class DataStreamer ; class LLVMContext ; class Module ; class ModulePass ; class raw_ostream ; ErrorOr<std::unique_ptr<Module>>)",
    "insertText": "getLazyBitcodeModule(std::unique_ptr<MemoryBuffer> &&Buffer, LLVMContext &Context, DiagnosticHandlerFunction DiagnosticHandler = nullptr, bool ShouldLazyLoadMetadata = false, bool ShouldTrackBitstreamUsage = false)"
  },
  {
    "label": "getStreamedBitcodeModule()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Module>>)",
    "insertText": "getStreamedBitcodeModule(StringRef Name, std::unique_ptr<DataStreamer> Streamer, LLVMContext &Context, DiagnosticHandlerFunction DiagnosticHandler = nullptr)"
  },
  {
    "label": "getBitcodeTargetTriple()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getBitcodeTargetTriple(MemoryBufferRef Buffer, LLVMContext &Context, DiagnosticHandlerFunction DiagnosticHandler = nullptr)"
  },
  {
    "label": "parseBitcodeFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<Module>>)",
    "insertText": "parseBitcodeFile(MemoryBufferRef Buffer, LLVMContext &Context, DiagnosticHandlerFunction DiagnosticHandler = nullptr, bool ShouldTrackBitstreamUsage = false)"
  },
  {
    "label": "WriteBitcodeToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBitcodeToFile(const Module *M, raw_ostream &Out, bool ShouldPreserveUseListOrder = false)"
  },
  {
    "label": "isBitcodeWrapper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBitcodeWrapper(const unsigned char *BufPtr, const unsigned char *BufEnd)"
  },
  {
    "label": "SkipBitcodeWrapperHeader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SkipBitcodeWrapperHeader(const unsigned char *&BufPtr, const unsigned char *&BufEnd, bool VerifyBufferSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (enum { KnownHeaderSize = 4* 4,OffsetField = 2* 4,SizeField = 3* 4 } ;)",
    "insertText": "if(BufEnd-BufPtr < KnownHeaderSize)"
  },
  {
    "label": "read32le()",
    "kind": "Method",
    "detail": "Function (unsigned Offset = support::)",
    "insertText": "read32le(&BufPtr[OffsetField])"
  },
  {
    "label": "read32le()",
    "kind": "Method",
    "detail": "Function (unsigned Size = support::)",
    "insertText": "read32le(&BufPtr[SizeField])"
  },
  {
    "label": "BitcodeErrorCategory()",
    "kind": "Method",
    "detail": "Function (BufPtr + = Offset ; BufEnd = BufPtr + Size ; return false ; } const std::error_category&)",
    "insertText": "BitcodeErrorCategory()"
  },
  {
    "label": "make_error_code()",
    "kind": "Method",
    "detail": "Function (enum class BitcodeError { InvalidBitcodeSignature = 1,CorruptedBitcode } ; std::error_code)",
    "insertText": "make_error_code(BitcodeError E)"
  },
  {
    "label": "BitcodeDiagnosticInfo()",
    "kind": "Method",
    "detail": "Function (} class BitcodeDiagnosticInfo : public DiagnosticInfo { const Twine& Msg ; std::error_code EC ; public :)",
    "insertText": "BitcodeDiagnosticInfo(std::error_code EC, DiagnosticSeverity Severity, const Twine &Msg)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(DiagnosticPrinter &DP)"
  },
  {
    "label": "getError()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "getError()"
  }
]