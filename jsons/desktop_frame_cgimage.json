[
  {
    "label": "DesktopFrameCGImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopFrameCGImage"
  },
  {
    "label": "CreateForDisplay()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_MAC_DESKTOP_FRAME_CGIMAGE_H_ # define MODULES_DESKTOP_CAPTURE_MAC_DESKTOP_FRAME_CGIMAGE_H_ # include<CoreGraphics / CoreGraphics . h> # include<memory> # include \" modules / desktop_capture / desktop_frame . h \" # include \" sdk / objc / helpers / scoped_cftyperef . h \" namespace webrtc { class DesktopFrameCGImage final : public DesktopFrame { public : std::unique_ptr<DesktopFrameCGImage>)",
    "insertText": "CreateForDisplay(CGDirectDisplayID display_id)"
  },
  {
    "label": "CreateForWindow()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopFrameCGImage>)",
    "insertText": "CreateForWindow(CGWindowID window_id)"
  },
  {
    "label": "DesktopFrameCGImage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DesktopFrameCGImage()"
  },
  {
    "label": "DesktopFrameCGImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopFrameCGImage(const DesktopFrameCGImage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopFrameCGImage&)",
    "insertText": "operator(const DesktopFrameCGImage&)"
  },
  {
    "label": "CreateFromCGImage()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<DesktopFrameCGImage>)",
    "insertText": "CreateFromCGImage(rtc::ScopedCFTypeRef<CGImageRef> cg_image)"
  },
  {
    "label": "DesktopFrameCGImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopFrameCGImage(DesktopSize size, int stride, uint8_t* data, rtc::ScopedCFTypeRef<CGImageRef> cg_image, rtc::ScopedCFTypeRef<CFDataRef> cg_data)"
  }
]