[
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (# ifndef NORMLZR_H # define NORMLZR_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_NORMALIZATION # include \" unicode / chariter . h \" # include \" unicode / normalizer2 . h \" # include \" unicode / unistr . h \" # include \" unicode / unorm . h \" # include \" unicode / uobject . h \" U_NAMESPACE_BEGIN class Normalizer : public UObject { public : # ifndef enum { DONE = 0 xffff } ;)",
    "insertText": "Normalizer(const UnicodeString& str, UNormalizationMode mode)"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalizer(ConstChar16Ptr str, int32_t length, UNormalizationMode mode)"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalizer(const CharacterIterator& iter, UNormalizationMode mode)"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "Normalizer(const Normalizer& copy)"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Normalizer()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (# ifndef void U_EXPORT2)",
    "insertText": "normalize(const UnicodeString& source, UNormalizationMode mode, int32_t options, UnicodeString& result, UErrorCode &status)"
  },
  {
    "label": "compose()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "compose(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)"
  },
  {
    "label": "decompose()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "decompose(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)"
  },
  {
    "label": "quickCheck()",
    "kind": "Method",
    "detail": "Function (UNormalizationCheckResult)",
    "insertText": "quickCheck(const UnicodeString &source, UNormalizationMode mode, UErrorCode &status)"
  },
  {
    "label": "quickCheck()",
    "kind": "Method",
    "detail": "Function (UNormalizationCheckResult)",
    "insertText": "quickCheck(const UnicodeString &source, UNormalizationMode mode, int32_t options, UErrorCode &status)"
  },
  {
    "label": "isNormalized()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isNormalized(const UnicodeString &src, UNormalizationMode mode, UErrorCode &errorCode)"
  },
  {
    "label": "isNormalized()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isNormalized(const UnicodeString &src, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)"
  },
  {
    "label": "concatenate()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "concatenate(const UnicodeString &left, const UnicodeString &right, UnicodeString &result, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (# endif int32_t)",
    "insertText": "compare(const UnicodeString &s1, const UnicodeString &s2, uint32_t options, UErrorCode &errorCode)"
  },
  {
    "label": "current()",
    "kind": "Method",
    "detail": "Function (# ifndef UChar32)",
    "insertText": "current(void)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "first(void)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "last(void)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "next(void)"
  },
  {
    "label": "previous()",
    "kind": "Method",
    "detail": "Function (UChar32)",
    "insertText": "previous(void)"
  },
  {
    "label": "setIndexOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIndexOnly(int32_t index)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset(void)"
  },
  {
    "label": "getIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getIndex(void)"
  },
  {
    "label": "startIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "startIndex(void)"
  },
  {
    "label": "endIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "endIndex(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Normalizer& that)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Normalizer*)",
    "insertText": "clone(void)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "hashCode(void)"
  },
  {
    "label": "setMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setMode(UNormalizationMode newMode)"
  },
  {
    "label": "getUMode()",
    "kind": "Method",
    "detail": "Function (UNormalizationMode)",
    "insertText": "getUMode(void)"
  },
  {
    "label": "setOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOption(int32_t option, UBool value)"
  },
  {
    "label": "getOption()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getOption(int32_t option)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const UnicodeString& newText, UErrorCode &status)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(const CharacterIterator& newText, UErrorCode &status)"
  },
  {
    "label": "setText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setText(ConstChar16Ptr newText, int32_t length, UErrorCode &status)"
  },
  {
    "label": "getText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getText(UnicodeString& result)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (# endif UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Normalizer&)",
    "insertText": "operator(const Normalizer &that)"
  },
  {
    "label": "nextNormalize()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextNormalize()"
  },
  {
    "label": "previousNormalize()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "previousNormalize()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "clearBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearBuffer(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilteredNormalizer2* fFilteredNorm2 ; const Normalizer2* fNorm2 ; UNormalizationMode fUMode ; int32_t fOptions ; CharacterIterator* text ; int32_t currentIndex,nextIndex ; UnicodeString buffer ; int32_t bufferPos ; } ; # ifndef UBool)",
    "insertText": "operator(const Normalizer& other)"
  },
  {
    "label": "quickCheck()",
    "kind": "Method",
    "detail": "Function (} UNormalizationCheckResult)",
    "insertText": "quickCheck(const UnicodeString& source, UNormalizationMode mode, UErrorCode &status)"
  },
  {
    "label": "isNormalized()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "isNormalized(const UnicodeString& source, UNormalizationMode mode, UErrorCode &status)"
  }
]