[
  {
    "label": "GlslProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlslProgram"
  },
  {
    "label": "MX_RENDERGLSL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_RENDERGLSL_API"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_GLSLPROGRAM_H # define MATERIALX_GLSLPROGRAM_H # include<MaterialXRenderGlsl / Export . h> # include<MaterialXRender / Camera . h> # include<MaterialXRender / GeometryHandler . h> # include<MaterialXRender / ImageHandler . h> # include<MaterialXRender / LightHandler . h> # include<MaterialXGenShader / Shader . h> MATERIALX_NAMESPACE_BEGIN using GlslProgramPtr = std::shared_ptr<class GlslProgram> ; class GlslProgram { public : GlslProgramPtr)",
    "insertText": "create()"
  },
  {
    "label": "GlslProgram()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GlslProgram()"
  },
  {
    "label": "setStages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStages(ShaderPtr shader)"
  },
  {
    "label": "addStage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addStage(const string& stage, const string& sourceCode)"
  },
  {
    "label": "getStageSourceCode()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getStageSourceCode(const string& stage)"
  },
  {
    "label": "clearStages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearStages()"
  },
  {
    "label": "getShader()",
    "kind": "Method",
    "detail": "Function (ShaderPtr)",
    "insertText": "getShader()"
  },
  {
    "label": "Input()",
    "kind": "Method",
    "detail": "Function (struct Input { int INVALID_OPENGL_TYPE ; int location ; int gltype ; int size ; string typeString ; MaterialX::ValuePtr value ; bool isConstant ; string path ; string unit ; string colorspace ;)",
    "insertText": "Input(int inputLocation, int inputType, int inputSize, const string& inputPath) : location(inputLocation), gltype(inputType), size(inputSize), isConstant(false), path(inputPath)"
  },
  {
    "label": "getUniformsList()",
    "kind": "Method",
    "detail": "Function (} } ; using InputPtr = std::shared_ptr<Input> ; using InputMap = std::unordered_map<string,InputPtr> ; const InputMap&)",
    "insertText": "getUniformsList()"
  },
  {
    "label": "getAttributesList()",
    "kind": "Method",
    "detail": "Function (const InputMap&)",
    "insertText": "getAttributesList()"
  },
  {
    "label": "findInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findInputs(const string& variable, const InputMap& variableList, InputMap& foundList, bool exactMatch)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bind()"
  },
  {
    "label": "hasActiveAttributes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasActiveAttributes()"
  },
  {
    "label": "hasUniform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasUniform(const string& name)"
  },
  {
    "label": "bindUniform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindUniform(const string& name, ConstValuePtr value, bool errorIfMissing = true)"
  },
  {
    "label": "bindAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindAttribute(const GlslProgram::InputMap& inputs, MeshPtr mesh)"
  },
  {
    "label": "bindPartition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindPartition(MeshPartitionPtr partition)"
  },
  {
    "label": "bindMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindMesh(MeshPtr mesh)"
  },
  {
    "label": "unbindGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbindGeometry()"
  },
  {
    "label": "bindTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindTextures(ImageHandlerPtr imageHandler)"
  },
  {
    "label": "bindLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindLighting(LightHandlerPtr lightHandler, ImageHandlerPtr imageHandler)"
  },
  {
    "label": "bindViewInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindViewInformation(CameraPtr camera)"
  },
  {
    "label": "bindTimeAndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindTimeAndFrame(float time = 1.0f, float frame = 1.0f)"
  },
  {
    "label": "unbind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unbind()"
  },
  {
    "label": "printUniforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printUniforms(std::ostream& outputStream)"
  },
  {
    "label": "printAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printAttributes(std::ostream& outputStream)"
  },
  {
    "label": "updateUniformsList()",
    "kind": "Method",
    "detail": "Function (const InputMap&)",
    "insertText": "updateUniformsList()"
  },
  {
    "label": "updateAttributesList()",
    "kind": "Method",
    "detail": "Function (const InputMap&)",
    "insertText": "updateAttributesList()"
  },
  {
    "label": "clearInputLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearInputLists()"
  },
  {
    "label": "findUniformValue()",
    "kind": "Method",
    "detail": "Function (ValuePtr)",
    "insertText": "findUniformValue(const string& uniformName, const InputMap& uniformList)"
  },
  {
    "label": "bindTexture()",
    "kind": "Method",
    "detail": "Function (ImagePtr)",
    "insertText": "bindTexture(unsigned int uniformType, int uniformLocation, const FilePath& filePath, ImageHandlerPtr imageHandler, const ImageSamplingProperties& imageProperties)"
  },
  {
    "label": "deleteProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteProgram()"
  },
  {
    "label": "mapTypeToOpenGLType()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "mapTypeToOpenGLType(const TypeDesc* type)"
  },
  {
    "label": "bindUniformLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bindUniformLocation(int location, ConstValuePtr value)"
  }
]