[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FDepotData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepotData"
  },
  {
    "label": "UDiffCookCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDiffCookCommandlet"
  },
  {
    "label": "FCommandLineArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommandLineArgs"
  },
  {
    "label": "FMountWithLeafFolderNameNotEqualLongPackageNameRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMountWithLeafFolderNameNotEqualLongPackageNameRoot"
  },
  {
    "label": "FPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageData"
  },
  {
    "label": "FCookedDepot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookedDepot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPackageDiffResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageDiffResult"
  },
  {
    "label": "FDiffResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffResult"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetRegistryState . h \" # include \" Commandlets / Commandlet . h \" # include \" Containers / Array . h \" # include \" Containers / DirectoryTree . h \" # include \" Containers / Map . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / PackagePath . h \" # include \" Misc / StringBuilder . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / ObjectPtr . h \" # include \" DiffCookCommandlet . generated . h \" class ITargetPlatform ; class UCookOnTheFlyServer ; namespace UE::DiffCook::DiffDepotUtils { struct FDepotData ; })",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual int32 Main(const FString& CmdLineParams)"
  },
  {
    "label": "HasExtension()",
    "kind": "Method",
    "detail": "Function (private : struct FCommandLineArgs { FString BasePath ; FString CompPath ; TArray<FString> RequestedPackages ; } ; struct FMountWithLeafFolderNameNotEqualLongPackageNameRoot { FString PathStartingWithPlugins ; FString LongPackageNameRoot ; } ; struct FPackageData { FName PackageName ; FString CookPath ; uint32 HasExtensionBitfield = 0 ; EPackageExtension HeaderExtension = EPackageExtension::Count ; bool)",
    "insertText": "HasExtension(EPackageExtension Extension)"
  },
  {
    "label": "SetHasExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasExtension(EPackageExtension Extension, bool bValue)"
  },
  {
    "label": "FPackageDiffResult()",
    "kind": "Method",
    "detail": "Function (} ; struct FCookedDepot { FAssetRegistryState ARState ; FAssetRegistryState DevARState ; TMap<FString,FString> LongPackageNameRoots ; TMap<FString,FString> LocalPathRoots ; TMap<FName,FPackageData*> PackageDatasByPackageName ; TArray<TUniquePtr<FPackageData>> PackageDatas ; FString CookPath ; FString ProjectName ; const ITargetPlatform* TargetPlatform = nullptr ; bool bARStateValid = false ; bool bDevARStateValid = false ; bool bValid = false ; } ; enum class EPackageDiffResult { Identical,Removed,Added,Modified,Error,} ; struct FPackageDiffResult { FName PackageName ; EPackageDiffResult Result = EPackageDiffResult::Error ; EPackageExtension Extension = EPackageExtension::Count ; int64 Offset = - 1 ; int64 CombinedOffset = - 1 ;)",
    "insertText": "FPackageDiffResult(FName InPackageName = NAME_None, EPackageDiffResult InResult = EPackageDiffResult::Error, EPackageExtension InExtension = EPackageExtension::Count, int64 InOffset = 1, int64 InCombinedOffset = -1)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} ; struct FDiffResult { TArray<FPackageDiffResult> PackageDiffs ; } ; private : void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "InitializePlugins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePlugins()"
  },
  {
    "label": "TryParseCommandLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryParseCommandLine(const FString& CmdLineParams)"
  },
  {
    "label": "TryLoadDepots()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadDepots()"
  },
  {
    "label": "TryLoadDepotSummaries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoadDepotSummaries()"
  },
  {
    "label": "LoadDepotPackageLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDepotPackageLists()"
  },
  {
    "label": "LoadDepotContentRoots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDepotContentRoots(FCookedDepot& Depot)"
  },
  {
    "label": "TryConstructFilterLists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConstructFilterLists()"
  },
  {
    "label": "DiffDepotAsBinary()",
    "kind": "Method",
    "detail": "Function (FDiffResult)",
    "insertText": "DiffDepotAsBinary()"
  },
  {
    "label": "PrintSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummary(FDiffResult& Diff)"
  },
  {
    "label": "PrintPackageDiffs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintPackageDiffs(FDiffResult& Diff)"
  },
  {
    "label": "TryConvertCookPathToLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertCookPathToLongPackageName(FCookedDepot& Depot, FStringView CookPath, FString& OutLongPackageName)"
  },
  {
    "label": "TryConvertLongPackageNameToCookPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertLongPackageNameToCookPath(FCookedDepot& Depot, FStringView LongPackageName, EPackageExtension Extension, FString& OutCookPath)"
  },
  {
    "label": "GetFileNameForExtension()",
    "kind": "Method",
    "detail": "Function (FString*)",
    "insertText": "GetFileNameForExtension(UDiffCookCommandlet::FPackageData& PackageData, FString& Buffer, EPackageExtension Extension)"
  },
  {
    "label": "FindContentRootsFromDepotTree()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "FindContentRootsFromDepotTree(FCookedDepot& Depot, FString& OutEngineLocalPath, FString& OutGameLocalPath)"
  },
  {
    "label": "GetNormalizedLocalDir()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FString)",
    "insertText": "GetNormalizedLocalDir(FStringView Dir)"
  },
  {
    "label": "NormalizeLocalDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeLocalDir(FStringBuilderBase& Dir)"
  },
  {
    "label": "GetNormalizedLocalPath()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FString)",
    "insertText": "GetNormalizedLocalPath(FStringView Path)"
  },
  {
    "label": "NormalizeLocalPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeLocalPath(FStringBuilderBase& Path)"
  },
  {
    "label": "GetNormalizedFlexPath()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] FString)",
    "insertText": "GetNormalizedFlexPath(FStringView Path)"
  },
  {
    "label": "NormalizeFlexPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeFlexPath(FStringBuilderBase& Path)"
  },
  {
    "label": "ParseDiffVerbosity()",
    "kind": "Method",
    "detail": "Function (ELogVerbosity::Type)",
    "insertText": "ParseDiffVerbosity(const FString& Text)"
  }
]