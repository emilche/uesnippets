[
  {
    "label": "FObjectPropertyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPropertyNode"
  },
  {
    "label": "FObjectPropertyNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PropertyNode . h \" # include \" UObject / WeakFieldPtr . h \" typedef TArray<TWeakObjectPtr<UObject>>::TIterator TPropObjectIterator ; typedef TArray<TWeakObjectPtr<UObject>>::TConstIterator TPropObjectConstIterator ; class FObjectPropertyNode : public FComplexPropertyNode { public :)",
    "insertText": "FObjectPropertyNode()"
  },
  {
    "label": "AsObjectNode()",
    "kind": "Method",
    "detail": "Function (FObjectPropertyNode*)",
    "insertText": "AsObjectNode()"
  },
  {
    "label": "GetReadAddressUncached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReadAddressUncached(const FPropertyNode& InNode, FReadAddressListData& OutAddresses)"
  },
  {
    "label": "GetUObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetUObject(int32 InIndex)"
  },
  {
    "label": "GetUPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetUPackage(int32 InIndex)"
  },
  {
    "label": "GetNumObjects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumObjects()"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddObject(UObject* InObject)"
  },
  {
    "label": "AddObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObjects(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(UObject* InObject)"
  },
  {
    "label": "RemoveAllObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllObjects()"
  },
  {
    "label": "SetObjectPackageOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectPackageOverrides(const TMap<TWeakObjectPtr<UObject>, TWeakObjectPtr<UPackage>>& InMapping)"
  },
  {
    "label": "ClearObjectPackageOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearObjectPackageOverrides()"
  },
  {
    "label": "PurgeKilledObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PurgeKilledObjects()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetObjectBaseClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetObjectBaseClass()"
  },
  {
    "label": "GetBaseStructure()",
    "kind": "Method",
    "detail": "Function (} UStruct*)",
    "insertText": "GetBaseStructure()"
  },
  {
    "label": "GetAllStructures()",
    "kind": "Method",
    "detail": "Function (} TArray<UStruct*>)",
    "insertText": "GetAllStructures()"
  },
  {
    "label": "GetInstancesNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstancesNum()"
  },
  {
    "label": "GetMemoryOfInstance()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetMemoryOfInstance(int32 Index)"
  },
  {
    "label": "GetValuePtrOfInstance()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetValuePtrOfInstance(int32 Index, const FProperty* InProperty, const FPropertyNode* InParentNode)"
  },
  {
    "label": "GetInstanceAsUObject()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UObject>)",
    "insertText": "GetInstanceAsUObject(int32 Index)"
  },
  {
    "label": "GetStoredProperty()",
    "kind": "Method",
    "detail": "Function (} FProperty*)",
    "insertText": "GetStoredProperty()"
  },
  {
    "label": "ObjectIterator()",
    "kind": "Method",
    "detail": "Function (} TPropObjectIterator)",
    "insertText": "ObjectIterator()"
  },
  {
    "label": "ObjectConstIterator()",
    "kind": "Method",
    "detail": "Function (} TPropObjectConstIterator)",
    "insertText": "ObjectConstIterator()"
  },
  {
    "label": "GenerateSingleChild()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FPropertyNode>)",
    "insertText": "GenerateSingleChild(FName ChildPropertyName)"
  },
  {
    "label": "GetHiddenCategories()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetHiddenCategories()"
  },
  {
    "label": "IsSparseDataStruct()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSparseDataStruct(const UScriptStruct* Struct)"
  },
  {
    "label": "InitBeforeNodeFlags()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitBeforeNodeFlags()"
  },
  {
    "label": "InitChildNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitChildNodes()"
  },
  {
    "label": "GetQualifiedName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetQualifiedName(FString& PathPlusIndex, const bool bWithArrayIndex, const FPropertyNode* StopParent = nullptr, bool bIgnoreCategories = false)"
  },
  {
    "label": "GetValueBaseAddress()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetValueBaseAddress(uint8* Base, bool bIsSparseData, bool bIsStruct)"
  },
  {
    "label": "SetBestBaseClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBestBaseClass()"
  },
  {
    "label": "InternalInitChildNodes()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InternalInitChildNodes(FName SingleChildName = NAME_None)"
  },
  {
    "label": "GetCategoryProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCategoryProperties(const TSet<UClass*>& ClassesToConsider, const FProperty* CurrentProperty, bool bShouldShowDisableEditOnInstance, bool bShouldShowHiddenProperties, const TSet<FName>& CategoriesFromBlueprints, TSet<FName>& CategoriesFromProperties, TArray<FName>& SortedCategories)"
  }
]