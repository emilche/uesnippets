[
  {
    "label": "MonoInputVolumeController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonoInputVolumeController"
  },
  {
    "label": "InputVolumeController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputVolumeController"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "InputVolumeControllerTestHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputVolumeControllerTestHelper"
  },
  {
    "label": "InputVolumeController()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_CONTROLLER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_CONTROLLER_H_ # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / agc2 / clipping_predictor . h \" # include \" modules / audio_processing / audio_buffer . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / gtest_prod_util . h \" namespace webrtc { class MonoInputVolumeController ; class InputVolumeController final { public : struct Config { bool enabled = false ; int startup_min_volume = 0 ; int clipped_level_min = 7 0 ; int clipped_level_step = 1 5 ; float clipped_ratio_threshold = 0 . 1 f ; int clipped_wait_frames = 3 0 0 ; bool enable_clipping_predictor = false ; int target_range_max_dbfs = - 1 8 ; int target_range_min_dbfs = - 4 8 ; } ;)",
    "insertText": "InputVolumeController(int num_capture_channels, const Config& config)"
  },
  {
    "label": "InputVolumeController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InputVolumeController()"
  },
  {
    "label": "InputVolumeController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputVolumeController(const InputVolumeController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InputVolumeController&)",
    "insertText": "operator(const InputVolumeController&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "set_stream_analog_level()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stream_analog_level(int level)"
  },
  {
    "label": "AnalyzePreProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzePreProcess(const AudioBuffer& audio_buffer)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(absl::optional<float> speech_probability, absl::optional<float> speech_level_dbfs)"
  },
  {
    "label": "recommended_analog_level()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "recommended_analog_level()"
  },
  {
    "label": "clipping_predictor_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "clipping_predictor_enabled()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeControllerTest, AgcMinMicLevelExperimentDisabled)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeControllerTest, AgcMinMicLevelExperimentOutOfRangeAbove)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeControllerTest, AgcMinMicLevelExperimentOutOfRangeBelow)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeControllerTest, AgcMinMicLevelExperimentEnabled50)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(InputVolumeControllerParametrizedTest, ClippingParametersVerified)"
  },
  {
    "label": "AggregateChannelLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AggregateChannelLevels()"
  },
  {
    "label": "MonoInputVolumeController()",
    "kind": "Method",
    "detail": "Function (const bool analog_controller_enabled_ ; const int num_capture_channels_ ; const absl::optional<int> min_mic_level_override_ ; int recommended_input_volume_ = 0 ; bool capture_output_used_ ; const int clipped_level_step_ ; const float clipped_ratio_threshold_ ; const int clipped_wait_frames_ ; const std::unique_ptr<ClippingPredictor> clipping_predictor_ ; const bool use_clipping_predictor_step_ ; int frames_since_clipped_ ; int clipping_rate_log_counter_ ; float clipping_rate_log_ ; const int target_range_max_dbfs_ ; const int target_range_min_dbfs_ ; std::vector<std::unique_ptr<MonoInputVolumeController>> channel_controllers_ ; int channel_controlling_gain_ = 0 ; } ; class MonoInputVolumeController { public :)",
    "insertText": "MonoInputVolumeController(int clipped_level_min, int min_mic_level)"
  },
  {
    "label": "MonoInputVolumeController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MonoInputVolumeController()"
  },
  {
    "label": "MonoInputVolumeController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonoInputVolumeController(const MonoInputVolumeController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MonoInputVolumeController&)",
    "insertText": "operator(const MonoInputVolumeController&)"
  },
  {
    "label": "HandleCaptureOutputUsedChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCaptureOutputUsedChange(bool capture_output_used)"
  },
  {
    "label": "HandleClipping()",
    "kind": "Method",
    "detail": "Function (recommended_input_volume_ = level ; } void)",
    "insertText": "HandleClipping(int clipped_level_step)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(absl::optional<int> rms_error_dbfs)"
  },
  {
    "label": "clipped_level_min()",
    "kind": "Method",
    "detail": "Function (log_to_histograms_ = true ; } int)",
    "insertText": "clipped_level_min()"
  },
  {
    "label": "SetMaxLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxLevel(int level)"
  },
  {
    "label": "CheckVolumeAndReset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CheckVolumeAndReset()"
  },
  {
    "label": "UpdateInputVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputVolume(int rms_error_dbfs)"
  }
]