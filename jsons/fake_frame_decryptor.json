[
  {
    "label": "FakeFrameDecryptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeFrameDecryptor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FakeFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_FAKE_FRAME_DECRYPTOR_H_ # define API_TEST_FAKE_FRAME_DECRYPTOR_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" api / array_view . h \" # include \" api / crypto / frame_decryptor_interface . h \" # include \" api / media_types . h \" namespace webrtc { class FakeFrameDecryptor : public FrameDecryptorInterface { public :)",
    "insertText": "FakeFrameDecryptor(uint8_t fake_key = 0xAA, uint8_t expected_postfix_byte = 255)"
  },
  {
    "label": "Decrypt()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "Decrypt(cricket::MediaType media_type, const std::vector<uint32_t>& csrcs, rtc::ArrayView<const uint8_t> additional_data, rtc::ArrayView<const uint8_t> encrypted_frame, rtc::ArrayView<uint8_t> frame)"
  },
  {
    "label": "GetMaxPlaintextByteSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxPlaintextByteSize(cricket::MediaType media_type, size_t encrypted_frame_size)"
  },
  {
    "label": "SetFakeKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFakeKey(uint8_t fake_key)"
  },
  {
    "label": "GetFakeKey()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetFakeKey()"
  },
  {
    "label": "SetExpectedPostfixByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpectedPostfixByte(uint8_t expected_postfix_byte)"
  },
  {
    "label": "GetExpectedPostfixByte()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetExpectedPostfixByte()"
  },
  {
    "label": "SetFailDecryption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFailDecryption(bool fail_decryption)"
  }
]