[
  {
    "label": "PFFFT_Setup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PFFFT_Setup"
  },
  {
    "label": "Pffft",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pffft"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FloatBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatBuffer"
  },
  {
    "label": "Pffft",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pffft"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<float>)",
    "insertText": "GetView()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Pffft>)",
    "insertText": "Create(size_t fft_size,\n  // FftType fft_type)"
  },
  {
    "label": "IsValidFftSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFftSize(size_t fft_size, FftType fft_type)"
  },
  {
    "label": "IsSimdEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimdEnabled()"
  },
  {
    "label": "ForwardTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardTransform(const FloatBuffer& in, FloatBuffer* out, bool ordered)"
  },
  {
    "label": "BackwardTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackwardTransform(const FloatBuffer& in, FloatBuffer* out, bool ordered)"
  },
  {
    "label": "FrequencyDomainConvolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrequencyDomainConvolve(const FloatBuffer& fft_x,\n                               const FloatBuffer& fft_y,\n                               FloatBuffer* out,\n                               float scaling = 1.f)"
  }
]