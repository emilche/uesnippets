[
  {
    "label": "PFFFT_Setup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PFFFT_Setup"
  },
  {
    "label": "Pffft",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pffft"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FloatBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatBuffer"
  },
  {
    "label": "FloatBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_UTILITY_PFFFT_WRAPPER_H_ # define MODULES_AUDIO_PROCESSING_UTILITY_PFFFT_WRAPPER_H_ # include<memory> # include \" api / array_view . h \" struct PFFFT_Setup ; namespace webrtc { class Pffft { public : enum class FftType { kReal,kComplex } ; class FloatBuffer { public :)",
    "insertText": "FloatBuffer(const FloatBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FloatBuffer&)",
    "insertText": "operator(const FloatBuffer&)"
  },
  {
    "label": "FloatBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FloatBuffer()"
  },
  {
    "label": "GetConstView()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const float>)",
    "insertText": "GetConstView()"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<float>)",
    "insertText": "GetView()"
  },
  {
    "label": "FloatBuffer()",
    "kind": "Method",
    "detail": "Function (private : class Pffft ;)",
    "insertText": "FloatBuffer(size_t fft_size, FftType fft_type)"
  },
  {
    "label": "const_data()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "const_data()"
  },
  {
    "label": "Pffft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pffft(const Pffft&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Pffft&)",
    "insertText": "operator(const Pffft&)"
  },
  {
    "label": "Pffft()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Pffft()"
  },
  {
    "label": "IsValidFftSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFftSize(size_t fft_size, FftType fft_type)"
  },
  {
    "label": "IsSimdEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimdEnabled()"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FloatBuffer>)",
    "insertText": "CreateBuffer()"
  },
  {
    "label": "ForwardTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForwardTransform(const FloatBuffer& in, FloatBuffer* out, bool ordered)"
  },
  {
    "label": "BackwardTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackwardTransform(const FloatBuffer& in, FloatBuffer* out, bool ordered)"
  },
  {
    "label": "FrequencyDomainConvolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrequencyDomainConvolve(const FloatBuffer& fft_x, const FloatBuffer& fft_y, FloatBuffer* out, float scaling = 1.f)"
  }
]