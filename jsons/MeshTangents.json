[
  {
    "label": "FDynamicMeshTangents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshTangents"
  },
  {
    "label": "FComputeTangentsOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComputeTangentsOptions"
  },
  {
    "label": "TMeshTangents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshTangents"
  },
  {
    "label": "FDynamicMeshTangents()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" DynamicMesh3 . h \" # include \" DynamicMeshAttributeSet . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; class FDynamicMeshTangents { public : const FDynamicMesh3* Mesh = nullptr ; const FDynamicMeshNormalOverlay* Normals = nullptr ; const FDynamicMeshNormalOverlay* Tangents = nullptr ; const FDynamicMeshNormalOverlay* Bitangents = nullptr ;)",
    "insertText": "FDynamicMeshTangents(const FDynamicMesh3* MeshIn)"
  },
  {
    "label": "HasValidTangents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidTangents(bool bCheckValues=false)"
  },
  {
    "label": "GetTangentFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangentFrame(int32 TriangleID, int32 TriVertexIndex, FVector3f& NormalOut, FVector3f& TangentOut, FVector3f& BitangentOut)"
  },
  {
    "label": "GetTangentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangentVectors(int32 TriangleID, int32 TriVertexIndex, const FVector3f& Normal, FVector3f& TangentOut, FVector3f& BitangentOut)"
  },
  {
    "label": "GetTangentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangentVectors(int32 TriangleID, int32 TriVertexIndex, FVector3f& TangentOut, FVector3f& BitangentOut)"
  },
  {
    "label": "TMeshTangents()",
    "kind": "Method",
    "detail": "Function (} ; struct FComputeTangentsOptions { bool bAveraged = true ; bool bAngleWeighted = true ; } ; template<RealType> class TMeshTangents { protected : const FDynamicMesh3* Mesh ; TArray<TVector<RealType>> Tangents ; TArray<TVector<RealType>> Bitangents ; TArray<int32> AllDegenerateTris ; public :)",
    "insertText": "TMeshTangents()"
  },
  {
    "label": "TMeshTangents()",
    "kind": "Method",
    "detail": "Function (Mesh = nullptr ; })",
    "insertText": "TMeshTangents(const FDynamicMesh3* Mesh)"
  },
  {
    "label": "SetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMesh(Mesh)"
  },
  {
    "label": "SetMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMesh(const FDynamicMesh3* MeshIn)"
  },
  {
    "label": "GetTangents()",
    "kind": "Method",
    "detail": "Function (this -> Mesh = MeshIn ; } const TArray<TVector<RealType>>&)",
    "insertText": "GetTangents()"
  },
  {
    "label": "SetTangentCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentCount(Mesh->MaxTriangleID() * 3, bClearToZero)"
  },
  {
    "label": "CopyTriVertexTangents()",
    "kind": "Method",
    "detail": "Function (} template<OtherRealType> void)",
    "insertText": "CopyTriVertexTangents(const TMeshTangents<OtherRealType>& OtherTangents)"
  },
  {
    "label": "CopyTriVertexTangents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyTriVertexTangents(const FDynamicMesh3& SourceMesh)"
  },
  {
    "label": "ComputeTriVertexTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeTriVertexTangents(const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshUVOverlay* UVOverlay, const FComputeTangentsOptions& Options)"
  },
  {
    "label": "GetPerTriangleTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPerTriangleTangent(int32 TriangleID, int32 TriVertIdx, UE::Math::TVector<RealType>& TangentOut, UE::Math::TVector<RealType>& BitangentOut)"
  },
  {
    "label": "GetPerTriangleTangent()",
    "kind": "Method",
    "detail": "Function (int32 k = TriangleID* 3 + TriVertIdx ; TangentOut = Tangents [ k ] ; BitangentOut = Bitangents [ k ] ; } template<VectorType,OtherRealType> void)",
    "insertText": "GetPerTriangleTangent(int32 TriangleID, int32 TriVertIdx, VectorType& TangentOut, VectorType& BitangentOut)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (int32 k = TriangleID* 3 + TriVertIdx ; TangentOut .)",
    "insertText": "X(OtherRealType)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (TangentOut .)",
    "insertText": "Y(OtherRealType)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (TangentOut .)",
    "insertText": "Z(OtherRealType)"
  },
  {
    "label": "GetInterpolatedTriangleTangent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetInterpolatedTriangleTangent(int32 TriangleID, const UE::Math::TVector<RealType>& BaryCoords, UE::Math::TVector<RealType>& TangentOut, UE::Math::TVector<RealType>& BitangentOut)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 k = TriangleID* 3 ;)",
    "insertText": "if(k >= 0 && (k+2) < Tangents.Num())"
  },
  {
    "label": "Blend3()",
    "kind": "Method",
    "detail": "Function (TangentOut =)",
    "insertText": "Blend3(Tangents[k], Tangents[k+1], Tangents[k+2], BaryCoords.X, BaryCoords.Y, BaryCoords.Z)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(TangentOut)"
  },
  {
    "label": "Blend3()",
    "kind": "Method",
    "detail": "Function (BitangentOut =)",
    "insertText": "Blend3(Bitangents[k], Bitangents[k+1], Bitangents[k+2], BaryCoords.X, BaryCoords.Y, BaryCoords.Z)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(BitangentOut)"
  },
  {
    "label": "UnitX()",
    "kind": "Method",
    "detail": "Function (} else { TangentOut = TVector<RealType)",
    "insertText": "UnitX()"
  },
  {
    "label": "UnitY()",
    "kind": "Method",
    "detail": "Function (BitangentOut = TVector<RealType)",
    "insertText": "UnitY()"
  },
  {
    "label": "SetPerTriangleTangent()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetPerTriangleTangent(int TriangleID, int TriVertIdx, const TVector<RealType>& Tangent, const TVector<RealType>& Bitangent)"
  },
  {
    "label": "GetTriangleVertexTangentVectors()",
    "kind": "Method",
    "detail": "Function (int k = TriangleID* 3 + TriVertIdx ; Tangents [ k ] = Tangent ; Bitangents [ k ] = Bitangent ; } template<OtherVectorType> void)",
    "insertText": "GetTriangleVertexTangentVectors(int32 TriangleID, int32 TriVertexIndex, OtherVectorType& TangentOut, OtherVectorType& BitangentOut)"
  },
  {
    "label": "TangentOut()",
    "kind": "Method",
    "detail": "Function (int k = TriangleID* 3 + TriVertexIndex ;)",
    "insertText": "TangentOut(OtherVectorType)"
  },
  {
    "label": "BitangentOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitangentOut(OtherVectorType)"
  },
  {
    "label": "InitializeTriangleTangents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeTriangleTangents(bool bClearToZero)"
  },
  {
    "label": "SetTangentCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangentCount(Mesh->MaxTriangleID(), bClearToZero)"
  },
  {
    "label": "ComputeTriangleTangents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeTriangleTangents(const FDynamicMeshUVOverlay* UVOverlay, bool bOrthogonalize = true)"
  },
  {
    "label": "CopyToOverlays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyToOverlays(FDynamicMesh3& MeshToSet)"
  },
  {
    "label": "ComputeDefaultOverlayTangents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeDefaultOverlayTangents(FDynamicMesh3& Mesh)"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshAttributeSet* Attributes = Mesh .)",
    "insertText": "Attributes()"
  },
  {
    "label": "PrimaryNormals()",
    "kind": "Method",
    "detail": "Function (const FDynamicMeshNormalOverlay* NormalOverlay = Attributes ->)",
    "insertText": "PrimaryNormals()"
  },
  {
    "label": "SetMesh()",
    "kind": "Method",
    "detail": "Function (TMeshTangents Tangents ; Tangents .)",
    "insertText": "SetMesh(&Mesh)"
  },
  {
    "label": "ComputeTriVertexTangents()",
    "kind": "Method",
    "detail": "Function (Tangents .)",
    "insertText": "ComputeTriVertexTangents(NormalOverlay, UVOverlay, FComputeTangentsOptions())"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (Mesh .)",
    "insertText": "Attributes()->EnableTangents()"
  },
  {
    "label": "SetTangentCount()",
    "kind": "Method",
    "detail": "Function (} return false ; } protected : void)",
    "insertText": "SetTangentCount(int Count, bool bClearToZero)"
  },
  {
    "label": "ComputeSeparatePerTriangleTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSeparatePerTriangleTangents(const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshUVOverlay* UVOverlay, const FComputeTangentsOptions& Options)"
  },
  {
    "label": "ComputeMikkTStyleTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeMikkTStyleTangents(const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshUVOverlay* UVOverlay, const FComputeTangentsOptions& Options)"
  },
  {
    "label": "CopyTriVertexTangents()",
    "kind": "Method",
    "detail": "Function (} ; typedef TMeshTangents<float> FMeshTangentsf ; typedef TMeshTangents<double> FMeshTangentsd ; template<RealType> template<OtherRealType> void TMeshTangents<RealType)",
    "insertText": "CopyTriVertexTangents(const TMeshTangents<OtherRealType>& OtherMeshTangents)"
  },
  {
    "label": "GetBitangents()",
    "kind": "Method",
    "detail": "Function (const TArray<TVector<OtherRealType>>& OtherBitangents = OtherMeshTangents .)",
    "insertText": "GetBitangents()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Num = OtherTangents .)",
    "insertText": "Num()"
  },
  {
    "label": "InitializeTriVertexTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTriVertexTangents(false)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Tangents [ k ] = TVector<)",
    "insertText": "RealType(OtherTangents[k])"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Bitangents [ k ] = TVector<)",
    "insertText": "RealType(OtherBitangents[k])"
  },
  {
    "label": "GetDegenerateTris()",
    "kind": "Method",
    "detail": "Function (} AllDegenerateTris = OtherMeshTangents .)",
    "insertText": "GetDegenerateTris()"
  }
]