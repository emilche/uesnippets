[
  {
    "label": "FNetBitArrayPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayPrinter"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "PrintSetSummary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / NetBitArray . h \" # include \" Containers / UnrealString . h \" namespace UE::Net { class FNetBitArrayPrinter { public : template<class T> FString)",
    "insertText": "PrintSetSummary(const T& BitArray)"
  },
  {
    "label": "PrintZeroSummary()",
    "kind": "Method",
    "detail": "Function (template<class T> FString)",
    "insertText": "PrintZeroSummary(const T& BitArray)"
  },
  {
    "label": "PrintSetBits()",
    "kind": "Method",
    "detail": "Function (template<class T> FString)",
    "insertText": "PrintSetBits(const T& BitArray)"
  },
  {
    "label": "PrintZeroBits()",
    "kind": "Method",
    "detail": "Function (template<class T> FString)",
    "insertText": "PrintZeroBits(const T& BitArray)"
  },
  {
    "label": "PrintDeltaSummary()",
    "kind": "Method",
    "detail": "Function (template<class T,class U> FString)",
    "insertText": "PrintDeltaSummary(const T& BitArrayA, const U& BitArrayB)"
  },
  {
    "label": "PrintDeltaBits()",
    "kind": "Method",
    "detail": "Function (template<class T,class U> FString)",
    "insertText": "PrintDeltaBits(const T& BitArrayA, const U& BitArrayB)"
  },
  {
    "label": "FNetBitArrayPrinter()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FNetBitArrayPrinter()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (using WordType = T::StorageWordType ; FString Buffer ; Buffer .)",
    "insertText": "Reserve(1024)"
  },
  {
    "label": "GetNumBits()",
    "kind": "Method",
    "detail": "Function (const uint32 BitEndIndex = BitArray .)",
    "insertText": "GetNumBits()"
  },
  {
    "label": "EndWordMask()",
    "kind": "Method",
    "detail": "Function (const uint32 WordEndIndex = BitEndIndex / T::WordBitCount ; const WordType)",
    "insertText": "EndWordMask(~WordType(0) >> (~BitEndIndex & (T::WordBitCount - 1U)))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const WordType* BitWordData = BitArray .)",
    "insertText": "GetData()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TotalSetBits = 0 ;)",
    "insertText": "for(uint32 WordIndex = 0; WordIndex < BitArray.GetNumWords(); ++WordIndex)"
  },
  {
    "label": "bIsEndWord()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsEndWord(WordIndex == WordEndIndex)"
  },
  {
    "label": "WordType()",
    "kind": "Method",
    "detail": "Function (const WordType WordMask = bIsEndWord ? EndWordMask : ~)",
    "insertText": "WordType(0)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (const WordType BitWord = BitWordData [ WordIndex ] ; const int32 NumSetBits =)",
    "insertText": "CountBits(BitWord & WordMask)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (TotalSetBits + = NumSetBits ; Buffer + =)",
    "insertText": "Printf(TEXT(\" (0x%.2x)[%#.8x]\"), WordIndex, BitWord)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Buffer.IsEmpty())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "TEXT(\" none\")"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"%d bits set:%s\"), TotalSetBits, *Buffer)"
  },
  {
    "label": "FlipBitWord()",
    "kind": "Method",
    "detail": "Function (const WordType BitWord = BitWordData [ WordIndex ] ; const WordType)",
    "insertText": "FlipBitWord(BitWord & WordMask)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (const int32 NumZeroBits =)",
    "insertText": "CountBits(FlipBitWord)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"%d bits zero:%s\"), TotalZeroBits, *Buffer)"
  },
  {
    "label": "UE_NETBITARRAY_VALIDATE_BOTH_COMPATIBLE()",
    "kind": "Method",
    "detail": "Function (using WordTypeT = T::StorageWordType ; using WordTypeU = U::StorageWordType ;)",
    "insertText": "UE_NETBITARRAY_VALIDATE_BOTH_COMPATIBLE(BitArrayA, BitArrayB)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 DiffNumBits = 0 ;)",
    "insertText": "for(uint32 WordIndex = 0; WordIndex < BitArrayA.GetNumWords(); ++WordIndex)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (const WordTypeT BitWordA = BitWordDataA [ WordIndex ] ; const WordTypeU BitWordB = BitWordDataB [ WordIndex ] ; const WordTypeT DeltaBits = BitWordA ^ BitWordB ; DiffNumBits + =)",
    "insertText": "CountBits(DeltaBits)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"%d bits differ\"), DiffNumBits)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (DiffNumBits + = DiffBits ; Buffer + =)",
    "insertText": "Printf(TEXT(\" (0x%.2x)[%#.8x]vs[%#.8x]\"), WordIndex, BitWordA, BitWordB)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"%d bits differ:%s\"), DiffNumBits, *Buffer)"
  }
]