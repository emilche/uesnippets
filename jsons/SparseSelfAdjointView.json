[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SparseSelfAdjointView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSelfAdjointView"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "SparseSelfAdjoint2Sparse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseSelfAdjoint2Sparse"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "SparseSymmetricPermutationProduct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSymmetricPermutationProduct"
  },
  {
    "label": "permute_symm_to_symm()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_SELFADJOINTVIEW_H # define EIGEN_SPARSE_SELFADJOINTVIEW_H namespace Eigen { namespace internal { template<MatrixType,unsigned int Mode> struct traits<SparseSelfAdjointView<MatrixType,Mode>> : traits<MatrixType> { } ; template<int SrcMode,int DstMode,MatrixType,int DestOrder> void)",
    "insertText": "permute_symm_to_symm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::StorageIndex>& _dest, const typename MatrixType::StorageIndex* perm = 0)"
  },
  {
    "label": "permute_symm_to_fullsymm()",
    "kind": "Method",
    "detail": "Function (template<int Mode,MatrixType,int DestOrder> void)",
    "insertText": "permute_symm_to_fullsymm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::StorageIndex>& _dest, const typename MatrixType::StorageIndex* perm = 0)"
  },
  {
    "label": "TransposeMode()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,unsigned int _Mode> class SparseSelfAdjointView : public EigenBase<SparseSelfAdjointView<MatrixType,_Mode>> { public : enum { Mode = _Mode,)",
    "insertText": "TransposeMode((Mode & Upper) ? Lower : 0) | ((Mode & Lower) ? Upper : 0)"
  },
  {
    "label": "SparseSelfAdjointView()",
    "kind": "Method",
    "detail": "Function (typedef EigenBase<SparseSelfAdjointView> Base ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef Matrix<StorageIndex,Dynamic,1> VectorI ; typedef internal::ref_selector<MatrixType>::non_const_type MatrixTypeNested ; typedef internal::remove_all<MatrixTypeNested>::type _MatrixTypeNested ;)",
    "insertText": "SparseSelfAdjointView(MatrixType& matrix) : m_matrix(matrix)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows()==cols() && \"SelfAdjointView is only for squared matrices\")"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (} const _MatrixTypeNested&)",
    "insertText": "matrix()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> Product<OtherDerived,SparseSelfAdjointView>)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& lhs, const SparseSelfAdjointView& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> Product<SparseSelfAdjointView,OtherDerived>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> Product<OtherDerived,SparseSelfAdjointView>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& lhs, const SparseSelfAdjointView& rhs)"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (} template<DerivedU> SparseSelfAdjointView&)",
    "insertText": "rankUpdate(const SparseMatrixBase<DerivedU>& u, const Scalar& alpha = Scalar(1))"
  },
  {
    "label": "twistedBy()",
    "kind": "Method",
    "detail": "Function (SparseSymmetricPermutationProduct<_MatrixTypeNested,Mode>)",
    "insertText": "twistedBy(const PermutationMatrix<Dynamic,Dynamic,StorageIndex>& perm)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<SrcMatrixType,int SrcMode> SparseSelfAdjointView&)",
    "insertText": "operator(const SparseSymmetricPermutationProduct<SrcMatrixType,SrcMode>& permutedMatrix)"
  },
  {
    "label": "call_assignment_no_alias_no_transpose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias_no_transpose(*this, permutedMatrix)"
  },
  {
    "label": "twistedBy()",
    "kind": "Method",
    "detail": "Function (PermutationMatrix<Dynamic,Dynamic,StorageIndex> pnull ; return* this = src .)",
    "insertText": "twistedBy(pnull)"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(SparseSelfAdjointView) template<typename SrcMatrixType,unsigned int SrcMode> SparseSelfAdjointView& operator=(const SparseSelfAdjointView<SrcMatrixType,SrcMode>& src)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(Index rows, Index cols)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(rows)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows == this->rows() && cols == this->cols() && \"SparseSelfadjointView::resize() does not actually allow to resize.\")"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} protected : MatrixTypeNested m_matrix ; private : template<Dest> void)",
    "insertText": "evalTo(Dest &)"
  },
  {
    "label": "selfadjointView()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> template<unsigned int UpLo> SparseMatrixBase<Derived>::template ConstSelfAdjointViewReturnType<UpLo>::Type SparseMatrixBase<Derived)",
    "insertText": "selfadjointView()"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,unsigned int Mode> template<DerivedU> SparseSelfAdjointView<MatrixType,Mode>& SparseSelfAdjointView<MatrixType,Mode)",
    "insertText": "rankUpdate(const SparseMatrixBase<DerivedU>& u, const Scalar& alpha)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<)",
    "insertText": "Scalar(MatrixType::Flags&RowMajorBit)?RowMajor:ColMajor> tmp = u * u.adjoint()"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (internal::permute_symm_to_fullsymm<)",
    "insertText": "Mode(src.matrix(), dst)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<DestScalar,int StorageOrder,AssignFunc> void)",
    "insertText": "run(SparseMatrix<DestScalar,StorageOrder,StorageIndex> &dst, const SrcXprType &src, const AssignFunc& func)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<DestScalar,StorageOrder,StorageIndex>)",
    "insertText": "tmp(src.rows(),src.cols())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(tmp, src, AssignOpType())"
  },
  {
    "label": "call_assignment_no_alias_no_transpose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias_no_transpose(dst, tmp, func)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<DestScalar,int StorageOrder> void)",
    "insertText": "run(SparseMatrix<DestScalar,StorageOrder,StorageIndex> &dst, const SrcXprType &src, const internal::add_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (dst + = tmp ; } template<DestScalar,int StorageOrder> void)",
    "insertText": "run(SparseMatrix<DestScalar,StorageOrder,StorageIndex> &dst, const SrcXprType &src, const internal::sub_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (dst - = tmp ; } template<DestScalar> void)",
    "insertText": "run(DynamicSparseMatrix<DestScalar,ColMajor,StorageIndex>& dst, const SrcXprType &src, const AssignOpType&)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<DestScalar,ColMajor,StorageIndex>)",
    "insertText": "tmp(dst.rows(),dst.cols())"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (internal::permute_symm_to_fullsymm<)",
    "insertText": "Mode(src.matrix(), tmp)"
  },
  {
    "label": "sparse_selfadjoint_time_dense_product()",
    "kind": "Method",
    "detail": "Function (dst = tmp ; } } ; } namespace internal { template<int Mode,SparseLhsType,DenseRhsType,DenseResType,AlphaType> void)",
    "insertText": "sparse_selfadjoint_time_dense_product(const SparseLhsType& lhs, const DenseRhsType& rhs, DenseResType& res, const AlphaType& alpha)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(alpha)"
  },
  {
    "label": "LhsIsRowMajor()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<SparseLhsType,DenseRhsType::MaxColsAtCompileTime>::type SparseLhsTypeNested ; typedef internal::remove_all<SparseLhsTypeNested>::type SparseLhsTypeNestedCleaned ; typedef evaluator<SparseLhsTypeNestedCleaned> LhsEval ; typedef LhsEval::InnerIterator LhsIterator ; typedef SparseLhsType::Scalar LhsScalar ; enum {)",
    "insertText": "LhsIsRowMajor(LhsEval::Flags&RowMajorBit)==RowMajorBit, ProcessFirstHalf = ((Mode&(Upper|Lower))==(Upper|Lower)) || ( (Mode&Upper) && !LhsIsRowMajor) || ( (Mode&Lower) && LhsIsRowMajor)"
  },
  {
    "label": "lhs_nested()",
    "kind": "Method",
    "detail": "Function (SparseLhsTypeNested)",
    "insertText": "lhs_nested(lhs)"
  },
  {
    "label": "lhsEval()",
    "kind": "Method",
    "detail": "Function (LhsEval)",
    "insertText": "lhsEval(lhs_nested)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (LhsIterator)",
    "insertText": "i(lhsEval,j)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "coeffRef(j,k) += alpha * i.value() * rhs.coeff(j,k)"
  },
  {
    "label": "rhs_j()",
    "kind": "Method",
    "detail": "Function (+ + i ; } } ScalarBinaryOpTraits<AlphaType,DenseRhsType::Scalar>::ReturnType)",
    "insertText": "rhs_j(alpha*rhs(j,k))"
  },
  {
    "label": "res_j()",
    "kind": "Method",
    "detail": "Function (DenseResType::Scalar)",
    "insertText": "res_j(0)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (LhsScalar lhs_ij = i .)",
    "insertText": "value()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (res_j + = lhs_ij* rhs .)",
    "insertText": "coeff(i.index(),k)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(i.index(),k) += numext::conj(lhs_ij)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} res .)",
    "insertText": "coeffRef(j,k)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (} } } template<LhsView,Rhs,int ProductType> struct generic_product_impl<LhsView,Rhs,SparseSelfAdjointShape,DenseShape,ProductType> : generic_product_impl_base<LhsView,Rhs,generic_product_impl<LhsView,Rhs,SparseSelfAdjointShape,DenseShape,ProductType>> { template<Dest> void)",
    "insertText": "scaleAndAddTo(Dest& dst, const LhsView& lhsView, const Rhs& rhs, const typename Dest::Scalar& alpha)"
  },
  {
    "label": "lhsNested()",
    "kind": "Method",
    "detail": "Function (typedef LhsView::_MatrixTypeNested Lhs ; typedef nested_eval<Lhs,Dynamic>::type LhsNested ; typedef nested_eval<Rhs,Dynamic>::type RhsNested ; LhsNested)",
    "insertText": "lhsNested(lhsView.matrix())"
  },
  {
    "label": "rhsNested()",
    "kind": "Method",
    "detail": "Function (RhsNested)",
    "insertText": "rhsNested(rhs)"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (internal::sparse_selfadjoint_time_dense_product<)",
    "insertText": "Mode(lhsNested, rhsNested, dst, alpha)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,RhsView,int ProductType> struct generic_product_impl<Lhs,RhsView,DenseShape,SparseSelfAdjointShape,ProductType> : generic_product_impl_base<Lhs,RhsView,generic_product_impl<Lhs,RhsView,DenseShape,SparseSelfAdjointShape,ProductType>> { template<Dest> void)",
    "insertText": "scaleAndAddTo(Dest& dst, const Lhs& lhs, const RhsView& rhsView, const typename Dest::Scalar& alpha)"
  },
  {
    "label": "lhsNested()",
    "kind": "Method",
    "detail": "Function (typedef RhsView::_MatrixTypeNested Rhs ; typedef nested_eval<Lhs,Dynamic>::type LhsNested ; typedef nested_eval<Rhs,Dynamic>::type RhsNested ; LhsNested)",
    "insertText": "lhsNested(lhs)"
  },
  {
    "label": "rhsNested()",
    "kind": "Method",
    "detail": "Function (RhsNested)",
    "insertText": "rhsNested(rhsView.matrix())"
  },
  {
    "label": "dstT()",
    "kind": "Method",
    "detail": "Function (Transpose<Dest>)",
    "insertText": "dstT(dst)"
  },
  {
    "label": "TransposeMode()",
    "kind": "Method",
    "detail": "Function (internal::sparse_selfadjoint_time_dense_product<)",
    "insertText": "TransposeMode(rhsNested.transpose(), lhsNested.transpose(), dstT, alpha)"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsView,Rhs,int ProductTag> struct product_evaluator<Product<LhsView,Rhs,DefaultProduct>,ProductTag,SparseSelfAdjointShape,SparseShape> : public evaluator<Product<Rhs::PlainObject,Rhs,DefaultProduct>::PlainObject> { typedef Product<LhsView,Rhs,DefaultProduct> XprType ; typedef XprType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ;)",
    "insertText": "product_evaluator(const XprType& xpr) : m_lhs(xpr.lhs()), m_result(xpr.rows(), xpr.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (generic_product_impl<Rhs::PlainObject,Rhs,SparseShape,SparseShape,ProductTag)",
    "insertText": "evalTo(m_result, m_lhs, xpr.rhs())"
  },
  {
    "label": "product_evaluator()",
    "kind": "Method",
    "detail": "Function (} protected : Rhs::PlainObject m_lhs ; PlainObject m_result ; } ; template<Lhs,RhsView,int ProductTag> struct product_evaluator<Product<Lhs,RhsView,DefaultProduct>,ProductTag,SparseShape,SparseSelfAdjointShape> : public evaluator<Product<Lhs,Lhs::PlainObject,DefaultProduct>::PlainObject> { typedef Product<Lhs,RhsView,DefaultProduct> XprType ; typedef XprType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ;)",
    "insertText": "product_evaluator(const XprType& xpr) : m_rhs(xpr.rhs()), m_result(xpr.rows(), xpr.cols())"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (generic_product_impl<Lhs,Lhs::PlainObject,SparseShape,SparseShape,ProductTag)",
    "insertText": "evalTo(m_result, xpr.lhs(), m_rhs)"
  },
  {
    "label": "permute_symm_to_fullsymm()",
    "kind": "Method",
    "detail": "Function (} protected : Lhs::PlainObject m_rhs ; PlainObject m_result ; } ; } namespace internal { template<int Mode,MatrixType,int DestOrder> void)",
    "insertText": "permute_symm_to_fullsymm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::StorageIndex>& _dest, const typename MatrixType::StorageIndex* perm)"
  },
  {
    "label": "matEval()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::StorageIndex StorageIndex ; typedef MatrixType::Scalar Scalar ; typedef SparseMatrix<Scalar,DestOrder,StorageIndex> Dest ; typedef Matrix<StorageIndex,Dynamic,1> VectorI ; typedef evaluator<MatrixType> MatEval ; typedef evaluator<MatrixType>::InnerIterator MatIterator ; MatEval)",
    "insertText": "matEval(mat)"
  },
  {
    "label": "dest()",
    "kind": "Method",
    "detail": "Function (Dest&)",
    "insertText": "dest(_dest.derived())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { StorageOrderMatch =)",
    "insertText": "int(Dest::IsRowMajor) == int(MatrixType::IsRowMajor)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (VectorI count ; count .)",
    "insertText": "resize(size)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (count .)",
    "insertText": "setZero()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "resize(size,size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index jp = perm ? perm [ j ] : j ;)",
    "insertText": "for(MatIterator it(matEval,j); it; ++it)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (Index i = it .)",
    "insertText": "index()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Index r = it .)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index c = it .)",
    "insertText": "col()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index ip = perm ? perm [ i ] : i ;)",
    "insertText": "if(Mode==int(Upper|Lower))"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (count [ ip ] + + ; count [ jp ] + + ; } } } Index nnz = count .)",
    "insertText": "sum()"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "resizeNonZeros(nnz)"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex i = internal::convert_index<)",
    "insertText": "StorageIndex(it.index())"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index k = count [ StorageOrderMatch ? jp : ip ] + + ; dest .)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "valuePtr()[k] = it.value()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(r==c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(( (Mode&Lower)==Lower && r>c) || ( (Mode&Upper)==Upper && r<c))"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "valuePtr()[k] = numext::conj(it.value())"
  },
  {
    "label": "permute_symm_to_symm()",
    "kind": "Method",
    "detail": "Function (} } } } template<int _SrcMode,int _DstMode,MatrixType,int DstOrder> void)",
    "insertText": "permute_symm_to_symm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DstOrder,typename MatrixType::StorageIndex>& _dest, const typename MatrixType::StorageIndex* perm)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<StorageIndex,Dynamic,1> VectorI ; typedef evaluator<MatrixType> MatEval ; typedef evaluator<MatrixType>::InnerIterator MatIterator ; enum { SrcOrder = MatrixType::IsRowMajor ? RowMajor : ColMajor,StorageOrderMatch =)",
    "insertText": "int(SrcOrder) == int(DstOrder), DstMode = DstOrder==RowMajor ? (_DstMode==Upper ? Lower : Upper) : _DstMode, SrcMode = SrcOrder==RowMajor ? (_SrcMode==Upper ? Lower : Upper)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (VectorI)",
    "insertText": "count(size)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (StorageIndex ip = perm ? perm [ i ] : i ; count [)",
    "insertText": "int(DstMode)==int(Lower) ? (std::min)(ip,jp) : (std::max)(ip,jp)"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "resizeNonZeros(dest.outerIndexPtr()[size])"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (dest .)",
    "insertText": "innerIndexPtr()[k] = int(DstMode)==int(Lower) ? (std::max)(ip,jp) : (std::min)(ip,jp)"
  },
  {
    "label": "SparseSymmetricPermutationProduct()",
    "kind": "Method",
    "detail": "Function (} } } } namespace internal { template<MatrixType,int Mode> struct traits<SparseSymmetricPermutationProduct<MatrixType,Mode>> : traits<MatrixType> { } ; } template<MatrixType,int Mode> class SparseSymmetricPermutationProduct : public EigenBase<SparseSymmetricPermutationProduct<MatrixType,Mode>> { public : typedef MatrixType::Scalar Scalar ; typedef MatrixType::StorageIndex StorageIndex ; enum { RowsAtCompileTime = internal::traits<SparseSymmetricPermutationProduct>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<SparseSymmetricPermutationProduct>::ColsAtCompileTime } ; protected : typedef PermutationMatrix<Dynamic,Dynamic,StorageIndex> Perm ; public : typedef Matrix<StorageIndex,Dynamic,1> VectorI ; typedef MatrixType::Nested MatrixTypeNested ; typedef internal::remove_all<MatrixTypeNested>::type NestedExpression ;)",
    "insertText": "SparseSymmetricPermutationProduct(const MatrixType& mat, const Perm& perm) : m_matrix(mat), m_perm(perm)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (SparseMatrix<)",
    "insertText": "Scalar(Options&RowMajor)"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (internal::permute_symm_to_fullsymm<)",
    "insertText": "Mode(src.matrix(),tmp,src.perm().indices().data())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (dst = tmp ; } template<DestType,unsigned int DestMode> void)",
    "insertText": "run(SparseSelfAdjointView<DestType,DestMode>& dst, const SrcXprType &src, const internal::assign_op<Scalar,typename MatrixType::Scalar> &)"
  },
  {
    "label": "DestMode()",
    "kind": "Method",
    "detail": "Function (internal::permute_symm_to_symm<Mode,)",
    "insertText": "DestMode(src.matrix(),dst.matrix(),src.perm().indices().data())"
  }
]