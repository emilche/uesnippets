[
  {
    "label": "SparseSelfAdjointView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSelfAdjointView"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SparseSelfAdjointView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSelfAdjointView"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "SparseSelfAdjoint2Sparse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseSelfAdjoint2Sparse"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "product_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_evaluator"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SparseSymmetricPermutationProduct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseSymmetricPermutationProduct"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "permute_symm_to_symm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "permute_symm_to_symm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::StorageIndex>& _dest, const typename MatrixType::StorageIndex* perm = 0)"
  },
  {
    "label": "permute_symm_to_fullsymm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "permute_symm_to_fullsymm(const MatrixType& mat, SparseMatrix<typename MatrixType::Scalar,DestOrder,typename MatrixType::StorageIndex>& _dest, const typename MatrixType::StorageIndex* perm = 0)"
  },
  {
    "label": "lhs_nested()",
    "kind": "Method",
    "detail": "Function (SparseLhsTypeNested)",
    "insertText": "lhs_nested(lhs)"
  },
  {
    "label": "lhsEval()",
    "kind": "Method",
    "detail": "Function (LhsEval)",
    "insertText": "lhsEval(lhs_nested)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (once)",
    "insertText": "for(Index k=0; k<rhs.cols()"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (LhsIterator)",
    "insertText": "i(lhsEval,j)"
  },
  {
    "label": "res_j()",
    "kind": "Method",
    "detail": "Function (DenseResType::Scalar)",
    "insertText": "res_j(0)"
  },
  {
    "label": "rhsNested()",
    "kind": "Method",
    "detail": "Function (RhsNested)",
    "insertText": "rhsNested(rhs)"
  },
  {
    "label": "lhsNested()",
    "kind": "Method",
    "detail": "Function (LhsNested)",
    "insertText": "lhsNested(lhs)"
  },
  {
    "label": "dstT()",
    "kind": "Method",
    "detail": "Function (Transpose<Dest>)",
    "insertText": "dstT(dst)"
  },
  {
    "label": "matEval()",
    "kind": "Method",
    "detail": "Function (MatEval)",
    "insertText": "matEval(mat)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (MatIterator)",
    "insertText": "it(matEval,j)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (MatIterator)",
    "insertText": "it(matEval,j)"
  },
  {
    "label": "matEval()",
    "kind": "Method",
    "detail": "Function (MatEval)",
    "insertText": "matEval(mat)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (VectorI)",
    "insertText": "count(size)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (MatIterator)",
    "insertText": "it(matEval,j)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (MatIterator)",
    "insertText": "it(matEval,j)"
  }
]