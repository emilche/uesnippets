[
  {
    "label": "FNumericStringWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericStringWrapper"
  },
  {
    "label": "FSceneOutlinerSortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerSortHelper"
  },
  {
    "label": "FSortPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortPayload"
  },
  {
    "label": "FNumericStringWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" ISceneOutlinerTreeItem . h \" # include \" Misc / ComparisonUtility . h \" namespace SceneOutliner { struct FNumericStringWrapper { FString String ;)",
    "insertText": "FNumericStringWrapper()"
  },
  {
    "label": "FNumericStringWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNumericStringWrapper(FString&& InString) : String(InString)"
  },
  {
    "label": "FNumericStringWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNumericStringWrapper(FNumericStringWrapper&& Other) : String(MoveTemp(Other.String))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FNumericStringWrapper&)",
    "insertText": "operator(FNumericStringWrapper&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (String =)",
    "insertText": "MoveTemp(Other.String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNumericStringWrapper& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNumericStringWrapper&)",
    "insertText": "operator(const FNumericStringWrapper&)"
  },
  {
    "label": "PrimaryKeyType()",
    "kind": "Method",
    "detail": "Function (} ; } template<PrimaryKeyType,SecondaryKeyType = int32> struct FSceneOutlinerSortHelper { typedef TFunction<)",
    "insertText": "PrimaryKeyType(const ISceneOutlinerTreeItem&)"
  },
  {
    "label": "SecondaryKeyType()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "SecondaryKeyType(const ISceneOutlinerTreeItem&)"
  },
  {
    "label": "FSceneOutlinerSortHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSceneOutlinerSortHelper() : PrimarySortMode(EColumnSortMode::None), SecondarySortMode(EColumnSortMode::None)"
  },
  {
    "label": "Primary()",
    "kind": "Method",
    "detail": "Function (} FSceneOutlinerSortHelper&)",
    "insertText": "Primary(FPrimaryFunction&& Function, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PrimarySortMode = SortMode ; PrimaryFunction =)",
    "insertText": "MoveTemp(Function)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TArray<FSortPayload> SortData ; const auto End = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "PrimaryFunction()",
    "kind": "Method",
    "detail": "Function (const auto& Element = Array [ Index ] ; PrimaryKeyType PrimaryKey =)",
    "insertText": "PrimaryFunction(*Element)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SecondaryKeyType SecondaryKey ;)",
    "insertText": "if(SecondarySortMode != EColumnSortMode::None)"
  },
  {
    "label": "SecondaryFunction()",
    "kind": "Method",
    "detail": "Function (SecondaryKey =)",
    "insertText": "SecondaryFunction(*Element)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} SortData .)",
    "insertText": "Emplace(Index, MoveTemp(PrimaryKey), MoveTemp(SecondaryKey))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} SortData .)",
    "insertText": "Sort([&](const FSortPayload& One, const FSortPayload& Two){ if (PrimarySortMode == EColumnSortMode::Ascending && One.PrimaryKey != Two.PrimaryKey) return One.PrimaryKey < Two.PrimaryKey; else if (PrimarySortMode == EColumnSortMode::Descending && One.PrimaryKey != Two.PrimaryKey) return One.PrimaryKey > Two.PrimaryKey; if (SecondarySortMode == EColumnSortMode::Ascending) return One.SecondaryKey < Two.SecondaryKey; else if (SecondarySortMode == EColumnSortMode::Descending) return One.SecondaryKey > Two.SecondaryKey; return false; })"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FSceneOutlinerTreeItemPtr> NewArray ; NewArray .)",
    "insertText": "Reserve(Array.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewArray .)",
    "insertText": "Add(Array[Element.OriginalIndex])"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} Array =)",
    "insertText": "MoveTemp(NewArray)"
  },
  {
    "label": "FSortPayload()",
    "kind": "Method",
    "detail": "Function (} private : EColumnSortMode::Type PrimarySortMode ; EColumnSortMode::Type SecondarySortMode ; FPrimaryFunction PrimaryFunction ; FSecondaryFunction SecondaryFunction ; struct FSortPayload { int32 OriginalIndex ; PrimaryKeyType PrimaryKey ; SecondaryKeyType SecondaryKey ;)",
    "insertText": "FSortPayload(int32 InOriginalIndex, PrimaryKeyType&& InPrimaryKey, SecondaryKeyType&& InSecondaryKey) : OriginalIndex(InOriginalIndex), PrimaryKey(MoveTemp(InPrimaryKey)), SecondaryKey(MoveTemp(InSecondaryKey))"
  },
  {
    "label": "FSortPayload()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSortPayload(FSortPayload&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSortPayload&)",
    "insertText": "operator(FSortPayload&& rhs)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OriginalIndex = rhs . OriginalIndex ; PrimaryKey =)",
    "insertText": "MoveTemp(rhs.PrimaryKey)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SecondaryKey =)",
    "insertText": "MoveTemp(rhs.SecondaryKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSortPayload&)",
    "insertText": "operator(const FSortPayload&)"
  }
]