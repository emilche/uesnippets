[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Unwinder()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_UNWINDER_H_ # define BASE_PROFILER_UNWINDER_H_ # include<vector> # include \" base / base_export . h \" # include \" base / profiler / frame . h \" # include \" base / profiler / module_cache . h \" # include \" base / profiler / register_context . h \" namespace base { enum class UnwindResult { kCompleted,kUnrecognizedFrame,kAborted,} ; class BASE_EXPORT Unwinder { public : ~)",
    "insertText": "Unwinder()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(ModuleCache* module_cache)"
  },
  {
    "label": "OnStackCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStackCapture()"
  },
  {
    "label": "UpdateModules()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateModules()"
  },
  {
    "label": "CanUnwindFrom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanUnwindFrom(const Frame& current_frame)"
  },
  {
    "label": "TryUnwind()",
    "kind": "Method",
    "detail": "Function (UnwindResult)",
    "insertText": "TryUnwind(RegisterContext* thread_context, uintptr_t stack_top, std::vector<Frame>* stack)"
  },
  {
    "label": "Unwinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unwinder(const Unwinder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Unwinder&)",
    "insertText": "operator(const Unwinder&)"
  },
  {
    "label": "InitializeModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeModules()"
  },
  {
    "label": "module_cache()",
    "kind": "Method",
    "detail": "Function (} ModuleCache*)",
    "insertText": "module_cache()"
  }
]