[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "FSelectedSocketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedSocketInfo"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "UDataAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataAsset"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BoneContainer . h \" # include \" Animation / Skeleton . h \" enum class EBlendProfileMode : uint8 ; class UBlendProfile ; class USkeletalMesh ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSmartNameChanged, const FName&)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (enum class ESocketParentType : int32 { Skeleton,Mesh } ; class IEditableSkeleton { public : const class USkeleton&)",
    "insertText": "GetSkeleton()"
  },
  {
    "label": "IsSkeletonValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkeletonValid()"
  },
  {
    "label": "GetBlendProfiles()",
    "kind": "Method",
    "detail": "Function (const TArray<class UBlendProfile*>&)",
    "insertText": "GetBlendProfiles()"
  },
  {
    "label": "GetBlendProfile()",
    "kind": "Method",
    "detail": "Function (class UBlendProfile*)",
    "insertText": "GetBlendProfile(const FName& InBlendProfileName)"
  },
  {
    "label": "CreateNewBlendProfile()",
    "kind": "Method",
    "detail": "Function (class UBlendProfile*)",
    "insertText": "CreateNewBlendProfile(const FName& InBlendProfileName)"
  },
  {
    "label": "RemoveBlendProfile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBlendProfile(UBlendProfile* InBlendProfile)"
  },
  {
    "label": "RenameBlendProfile()",
    "kind": "Method",
    "detail": "Function (class UBlendProfile*)",
    "insertText": "RenameBlendProfile(const FName& InBlendProfileName, const FName& InNewBlendProfileName)"
  },
  {
    "label": "SetBlendProfileScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendProfileScale(const FName& InBlendProfileName, const FName& InBoneName, float InNewScale, bool bInRecurse)"
  },
  {
    "label": "SetBlendProfileMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendProfileMode(FName InBlendProfileName, EBlendProfileMode ProfileMode)"
  },
  {
    "label": "AddSocket()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshSocket*)",
    "insertText": "AddSocket(const FName& InBoneName)"
  },
  {
    "label": "DuplicateSocket()",
    "kind": "Method",
    "detail": "Function (class USkeletalMeshSocket*)",
    "insertText": "DuplicateSocket(const struct FSelectedSocketInfo& SocketInfoToDuplicate, const FName& NewParentBoneName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "RenameSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSocket(const FName OldSocketName, const FName NewSocketName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "SetSocketParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSocketParent(const FName& SocketName, const FName& NewParentName, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "DoesSocketAlreadyExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSocketAlreadyExist(const class USkeletalMeshSocket* InSocket, const FText& InSocketName, ESocketParentType SocketParentType, USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "ValidatePreviewAttachedObjects()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ValidatePreviewAttachedObjects()"
  },
  {
    "label": "RecreateBoneTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateBoneTree(class USkeletalMesh* NewPreviewMesh)"
  },
  {
    "label": "DeleteAnimNotifies()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteAnimNotifies(const TArray<FName>& InotifyNames, bool bDeleteFromAnimations = true)"
  },
  {
    "label": "DeleteSyncMarkers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteSyncMarkers(const TArray<FName>& ISyncMarkerNames, bool bDeleteFromAnimations = true)"
  },
  {
    "label": "AddNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNotify(FName NewName)"
  },
  {
    "label": "RenameNotify()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenameNotify(const FName NewName, const FName OldName, bool bRenameInAnimations = true)"
  },
  {
    "label": "AddSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSyncMarker(FName NewName)"
  },
  {
    "label": "RenameSyncMarker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenameSyncMarker(FName NewName, const FName OldName, bool bRenameInAnimations = true)"
  },
  {
    "label": "BroadcastNotifyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastNotifyChanged()"
  },
  {
    "label": "GetCompatibleAnimSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompatibleAnimSequences(TArray<struct FAssetData>& OutAssets)"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(class USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "LoadAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAdditionalPreviewSkeletalMeshes()"
  },
  {
    "label": "SetAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalPreviewSkeletalMeshes(class UDataAsset* InPreviewCollectionAsset)"
  },
  {
    "label": "RenameRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameRetargetSource(const FName InOldName, const FName InNewName)"
  },
  {
    "label": "AddRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRetargetSource(const FName& InName, USkeletalMesh* InReferenceMesh)"
  },
  {
    "label": "DeleteRetargetSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRetargetSources(const TArray<FName>& InRetargetSourceNames)"
  },
  {
    "label": "RefreshRetargetSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshRetargetSources(const TArray<FName>& InRetargetSourceNames)"
  },
  {
    "label": "AddCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompatibleSkeleton(const USkeleton* InCompatibleSkeleton)"
  },
  {
    "label": "RemoveCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleSkeleton(const USkeleton* InCompatibleSkeleton)"
  },
  {
    "label": "RemoveUnusedBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedBones()"
  },
  {
    "label": "UpdateSkeletonReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkeletonReferencePose(class USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "RegisterSlotNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSlotNode(const FName& InSlotName)"
  },
  {
    "label": "AddSlotGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSlotGroupName(const FName& InSlotName)"
  },
  {
    "label": "SetSlotGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlotGroupName(const FName& InSlotName, const FName& InGroupName)"
  },
  {
    "label": "DeleteSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSlotName(const FName& InSlotName)"
  },
  {
    "label": "DeleteSlotGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSlotGroup(const FName& InGroupName)"
  },
  {
    "label": "RenameSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSlotName(const FName InOldSlotName, const FName InNewSlotName)"
  },
  {
    "label": "RegisterOnNotifiesChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterOnNotifiesChanged(const FSimpleMulticastDelegate::FDelegate& InDelegate)"
  },
  {
    "label": "UnregisterOnNotifiesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnNotifiesChanged(void* Thing)"
  },
  {
    "label": "RegisterOnSlotsChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSlotsChanged(const FSimpleMulticastDelegate::FDelegate& InDelegate)"
  },
  {
    "label": "UnregisterOnSlotsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSlotsChanged(FDelegateHandle InHandle)"
  },
  {
    "label": "SetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingMode(FName InBoneName, EBoneTranslationRetargetingMode::Type NewRetargetingMode)"
  },
  {
    "label": "GetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (EBoneTranslationRetargetingMode::Type)",
    "insertText": "GetBoneTranslationRetargetingMode(FName InBoneName)"
  },
  {
    "label": "DoesVirtualBoneAlreadyExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesVirtualBoneAlreadyExist(const FString& InVBName)"
  },
  {
    "label": "RenameVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameVirtualBone(const FName OriginalName, const FName InVBName)"
  },
  {
    "label": "RefreshBoneTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshBoneTree()"
  }
]