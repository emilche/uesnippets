[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintData"
  },
  {
    "label": "FTransformConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformConstraint"
  },
  {
    "label": "SolveConstraints()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "SolveConstraints(const FTransform& CurrentTransform, const FTransform& BaseTransform, const TArray<FTransformConstraint>& Constraints, const FGetGlobalTransform& OnGetGlobalTransform)"
  },
  {
    "label": "SolveConstraints()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "SolveConstraints(const FTransform& CurrentTransform, const FTransform& CurrentParentTransform, const TArray<FConstraintData>& Constraints)"
  },
  {
    "label": "SolveAim()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "SolveAim(const FTransform& CurrentTransform, const FVector& TargetPosition, const FVector& AimVector, bool bUseUpVector = false, const FVector& UpVector = FVector::UpVector, float AimClampInDegree = 0.f)"
  },
  {
    "label": "QuatFromEuler()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "QuatFromEuler(const FVector& XYZAnglesInDegrees, EEulerRotationOrder RotationOrderr = EEulerRotationOrder::ZYX, bool bUseUEHandyness = false)"
  },
  {
    "label": "EulerFromQuat()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "EulerFromQuat(const FQuat& Rotation, EEulerRotationOrder RotationOrder = EEulerRotationOrder::ZYX, bool bUseUEHandyness = false)"
  },
  {
    "label": "ChangeEulerRotationOrder()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ChangeEulerRotationOrder(const FVector& XYZAnglesInDegrees, EEulerRotationOrder SourceRotationOrder, EEulerRotationOrder TargetRotationOrder, bool bUseUEHandyness = false)"
  }
]