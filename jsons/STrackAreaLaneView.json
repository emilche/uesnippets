[
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Widgets / SCompoundWidget . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" namespace UE::Sequencer { class STrackAreaView ; class STrackAreaLaneView : public SCompoundWidget,public ITrackLaneWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STrackAreaLaneView)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const FViewModelPtr& InViewModel, TSharedPtr<STrackAreaView> InTrackAreaView)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (FTrackLaneScreenAlignment)",
    "insertText": "GetAlignment(const FTimeToPixel& InTimeToPixel, const FGeometry& InParentGeometry)"
  },
  {
    "label": "GetRelativeTimeToPixel()",
    "kind": "Method",
    "detail": "Function (FTimeToPixel)",
    "insertText": "GetRelativeTimeToPixel()"
  }
]