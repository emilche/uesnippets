[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SFiltersAndPresets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFiltersAndPresets"
  },
  {
    "label": "SMultiDumpBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiDumpBrowser"
  },
  {
    "label": "SProfilerGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProfilerGraphPanel"
  },
  {
    "label": "SProfilerMiniView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProfilerMiniView"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "SProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProfilerWindow"
  },
  {
    "label": "SEventGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEventGraph"
  },
  {
    "label": "SProfilerWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" SlateFwd . h \" # include \" Misc / Guid . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" ProfilerManager . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / Layout / SSplitter . h \" class FActiveTimerHandle ; class SFiltersAndPresets ; class SMultiDumpBrowser ; class SProfilerGraphPanel ; class SProfilerMiniView ; class SVerticalBox ; typedef TSharedPtr<class SNotificationItem> SNotificationItemPtr ; typedef TSharedRef<class SNotificationItem> SNotificationItemRef ; typedef TWeakPtr<class SNotificationItem> SNotificationItemWeak ; class SProfilerWindow : public SCompoundWidget { public :)",
    "insertText": "SProfilerWindow()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SProfilerWindow)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "ManageEventGraphTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ManageEventGraphTab(const FGuid ProfilerInstanceID, const bool bCreateFakeTab, const FString TabName)"
  },
  {
    "label": "UpdateEventGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEventGraph(const FGuid ProfilerInstanceID, const FEventGraphDataRef AverageEventGraph, const FEventGraphDataRef MaximumEventGraph, bool bInitial)"
  },
  {
    "label": "ManageLoadingProgressNotificationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ManageLoadingProgressNotificationState(const FString& Filename, const EProfilerNotificationTypes NotificatonType, const ELoadingProgressStates ProgressState, const float DataLoadingProgress)"
  },
  {
    "label": "OpenProfilerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenProfilerSettings()"
  },
  {
    "label": "CloseProfilerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseProfilerSettings()"
  },
  {
    "label": "IsSessionOverlayVissible()",
    "kind": "Method",
    "detail": "Function (protected : EVisibility)",
    "insertText": "IsSessionOverlayVissible()"
  },
  {
    "label": "IsProfilerEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProfilerEnabled()"
  },
  {
    "label": "SendingServiceSideCapture_Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendingServiceSideCapture_Cancel(const FString Filename)"
  },
  {
    "label": "SendingServiceSideCapture_Load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendingServiceSideCapture_Load(const FString Filename)"
  },
  {
    "label": "ProfilerManager_OnViewModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProfilerManager_OnViewModeChanged(EProfilerViewMode NewViewMode)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "UpdateActiveDuration()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "UpdateActiveDuration(double InCurrentTime, float InDeltaTime)"
  }
]