[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__numeric_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__numeric_type"
  },
  {
    "label": "_A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_A1"
  },
  {
    "label": "_A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_A2"
  },
  {
    "label": "_A3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_A3"
  },
  {
    "label": "__promote_imp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__promote_imp"
  },
  {
    "label": "__promote",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__promote"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_PROMOTE_H # define _LIBCPP___TYPE_TRAITS_PROMOTE_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_same . h> # include<__utility / declval . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__test(...)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "__test(float)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(char)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(int)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(unsigned)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(long)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(unsigned long)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(long long)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(unsigned long long)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "__test(double)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (long double)",
    "insertText": "__test(long double)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "decltype(__test(declval<_Tp>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (const bool value = _IsNotSame<type,void>::value ; } ; template<> struct __numeric_type<void> { const bool value = true ; } ; template<class _A1,class _A2 = void,class _A3 = void,bool = __numeric_type<_A1>::value&& __numeric_type<_A2>::value&& __numeric_type<_A3>::value> class __promote_imp { public : const bool value = false ; } ; template<class _A1,class _A2,class _A3> class __promote_imp<_A1,_A2,_A3,true> { private : typedef __promote_imp<_A1>::type __type1 ; typedef __promote_imp<_A2>::type __type2 ; typedef __promote_imp<_A3>::type __type3 ; public : typedef)",
    "insertText": "decltype(__type1() + __type2() + __type3())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (const bool value = true ; } ; template<class _A1,class _A2> class __promote_imp<_A1,_A2,void,true> { private : typedef __promote_imp<_A1>::type __type1 ; typedef __promote_imp<_A2>::type __type2 ; public : typedef)",
    "insertText": "decltype(__type1() + __type2())"
  }
]