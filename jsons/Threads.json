[
  {
    "label": "FThreadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadInfo"
  },
  {
    "label": "IThreadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IThreadProvider"
  },
  {
    "label": "IEditableThreadProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableThreadProvider"
  },
  {
    "label": "IThreadProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" HAL / PlatformAffinity . h \" # include \" Templates / Function . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { struct FThreadInfo { uint32 Id ; const TCHAR* Name ; const TCHAR* GroupName ; } ; class IThreadProvider : public IProvider { public : ~)",
    "insertText": "IThreadProvider()"
  },
  {
    "label": "GetModCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetModCount()"
  },
  {
    "label": "EnumerateThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateThreads(TFunctionRef<void(const FThreadInfo&)> Callback)"
  },
  {
    "label": "GetThreadName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetThreadName(uint32 ThreadId)"
  },
  {
    "label": "IEditableThreadProvider()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableThreadProvider : public IEditableProvider { public : ~)",
    "insertText": "IEditableThreadProvider()"
  },
  {
    "label": "AddThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddThread(uint32 Id, const TCHAR* Name, EThreadPriority Priority)"
  },
  {
    "label": "GetThreadProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetThreadProviderName()"
  },
  {
    "label": "ReadThreadProvider()",
    "kind": "Method",
    "detail": "Function (const IThreadProvider&)",
    "insertText": "ReadThreadProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "EditThreadProvider()",
    "kind": "Method",
    "detail": "Function (IEditableThreadProvider&)",
    "insertText": "EditThreadProvider(IAnalysisSession& Session)"
  }
]