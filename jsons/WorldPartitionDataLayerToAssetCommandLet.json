[
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "UDataLayerInstanceWithAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstanceWithAsset"
  },
  {
    "label": "UDataLayerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerFactory"
  },
  {
    "label": "UDeprecatedDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDeprecatedDataLayerInstance"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UDataLayerConversionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerConversionInfo"
  },
  {
    "label": "UDataLayerToAssetCommandletContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerToAssetCommandletContext"
  },
  {
    "label": "UDataLayerToAssetCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerToAssetCommandlet"
  },
  {
    "label": "EReturnCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReturnCode"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectAnnotation . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / StrongObjectPtr . h \" # include \" Commandlets / Commandlet . h \" # include \" Commandlets / WorldPartitionCommandletHelpers . h \" # include \" PackageSourceControlHelper . h \" # include \" WorldPartition / DataLayer / DataLayerAsset . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # include \" WorldPartition / DataLayer / DeprecatedDataLayerInstance . h \" # include \" WorldPartition / DataLayer / ActorDataLayer . h \" # include \" WorldPartitionDataLayerToAssetCommandLet . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogDataLayerToAssetCommandlet, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class UDataLayerAsset ; class UDataLayerInstance ; class UDataLayerInstanceWithAsset ; class UDataLayerFactory ; class UDeprecatedDataLayerInstance ; class UWorld ;)",
    "insertText": "UCLASS(Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "IsConverting()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsConverting()"
  },
  {
    "label": "GetPreviousConversions()",
    "kind": "Method",
    "detail": "Function (} TArray<TWeakObjectPtr<UDataLayerConversionInfo>> const&)",
    "insertText": "GetPreviousConversions()"
  },
  {
    "label": "SetDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataLayerInstance(UDataLayerInstanceWithAsset* InDataLayerInstance)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: const TArray<TObjectPtr<UDataLayerConversionInfo>>& GetDataLayerConversionInfos()"
  },
  {
    "label": "GetDataLayerConversionInfo()",
    "kind": "Method",
    "detail": "Function (UDataLayerConversionInfo*)",
    "insertText": "GetDataLayerConversionInfo(const UDataLayerAsset* DataLayerAsset)"
  },
  {
    "label": "GetDataLayerConversionInfo()",
    "kind": "Method",
    "detail": "Function (UDataLayerConversionInfo*)",
    "insertText": "GetDataLayerConversionInfo(const UDataLayerInstanceWithAsset* DataLayerInstance)"
  },
  {
    "label": "GetDataLayerConversionInfo()",
    "kind": "Method",
    "detail": "Function (UDataLayerConversionInfo*)",
    "insertText": "GetDataLayerConversionInfo(const FActorDataLayer& ActorDataLayer)"
  },
  {
    "label": "StoreExistingDataLayer()",
    "kind": "Method",
    "detail": "Function (UDataLayerConversionInfo*)",
    "insertText": "StoreExistingDataLayer(FAssetData& AssetData)"
  },
  {
    "label": "StoreDataLayerAssetConversion()",
    "kind": "Method",
    "detail": "Function (UDataLayerConversionInfo*)",
    "insertText": "StoreDataLayerAssetConversion(const UDeprecatedDataLayerInstance* DataLayerToConvert, UDataLayerAsset* NewDataLayerAsset)"
  },
  {
    "label": "StoreDataLayerInstanceConversion()",
    "kind": "Method",
    "detail": "Function (UDataLayerConversionInfo*)",
    "insertText": "StoreDataLayerInstanceConversion(const UDataLayerAsset* DataLayerAsset, UDataLayerInstanceWithAsset* NewDataLayerInstance)"
  },
  {
    "label": "SetPreviousConversions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPreviousConversions(UDataLayerConversionInfo* CurrentConversion, TArray<TWeakObjectPtr<UDataLayerConversionInfo>>&& PreviousConversions)"
  },
  {
    "label": "FindDataLayerConversionInfos()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDataLayerConversionInfos(FName DataLayerAssetName, TArray<TWeakObjectPtr<UDataLayerConversionInfo>>& OutConversionInfos)"
  },
  {
    "label": "LogConversionInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogConversionInfos()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Config = Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (Success = 0,CommandletInitializationError,DataLayerConversionError,ActorDataLayerRemappingError,ProjectSpecificConversionError,} ; int32)",
    "insertText": "Main(const FString& Params)"
  },
  {
    "label": "PerformProjectSpecificConversions()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "PerformProjectSpecificConversions(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext)"
  },
  {
    "label": "BuildConversionInfos()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildConversionInfos(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "CreateConversionFromDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateConversionFromDataLayer(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, const UDeprecatedDataLayerInstance* DataLayer, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "GetOrCreateDataLayerAssetForConversion()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UDataLayerAsset>)",
    "insertText": "GetOrCreateDataLayerAssetForConversion(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, FName DataLayerName)"
  },
  {
    "label": "ResolvePreviousConversionsToCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePreviousConversionsToCurrent(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext)"
  },
  {
    "label": "CreateDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDataLayerInstances(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext)"
  },
  {
    "label": "RebuildDataLayerHierarchies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RebuildDataLayerHierarchies(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext)"
  },
  {
    "label": "RemapActorDataLayersToAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemapActorDataLayersToAssets(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "RemapActorDataLayers()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemapActorDataLayers(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, AActor* Actor)"
  },
  {
    "label": "RemapDataLayersAssetsFromPreviousConversions()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RemapDataLayersAssetsFromPreviousConversions(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, AActor* Actor)"
  },
  {
    "label": "DeletePreviousConversionsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeletePreviousConversionsData(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "CommitConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CommitConversion(TStrongObjectPtr<UDataLayerToAssetCommandletContext>& CommandletContext, FPackageSourceControlHelper& PackageHelper)"
  },
  {
    "label": "GetConversionFolder()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConversionFolder()"
  },
  {
    "label": "IsAssetInConversionFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetInConversionFolder(const FSoftObjectPath& DataLayerAsset)"
  }
]