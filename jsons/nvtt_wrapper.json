[
  {
    "label": "nvtt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nvtt"
  },
  {
    "label": "NvttInputOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvttInputOptions"
  },
  {
    "label": "NvttCompressionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvttCompressionOptions"
  },
  {
    "label": "NvttOutputOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvttOutputOptions"
  },
  {
    "label": "NvttCompressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NvttCompressor"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# ifndef NVTT_WRAPPER_H # define NVTT_WRAPPER_H # if NVTT_SHARED # if defined _WIN32 | | defined WIN32 | | defined __NT__ | | defined __WIN32__ | | defined __MINGW32__ # ifdef NVTT_EXPORTS # define)",
    "insertText": "__declspec(dllexport) # else # define NVTT_API __declspec(dllimport) # endif #endif #if defined __GNUC__ >= 4 # ifdef NVTT_EXPORTS # define NVTT_API __attribute__((visibility(\"default\")))"
  },
  {
    "label": "nvttCreateInputOptions()",
    "kind": "Method",
    "detail": "Function (typedef struct nvtt::CompressionOptions NvttCompressionOptions ; typedef struct nvtt::OutputOptions NvttOutputOptions ; typedef struct nvtt::Compressor NvttCompressor ; # else typedef struct NvttInputOptions NvttInputOptions ; typedef struct NvttCompressionOptions NvttCompressionOptions ; typedef struct NvttOutputOptions NvttOutputOptions ; typedef struct NvttCompressor NvttCompressor ; # endif typedef enum { NVTT_Format_RGB,NVTT_Format_RGBA = NVTT_Format_RGB,NVTT_Format_DXT1,NVTT_Format_DXT1a,NVTT_Format_DXT3,NVTT_Format_DXT5,NVTT_Format_DXT5n,NVTT_Format_BC1 = NVTT_Format_DXT1,NVTT_Format_BC1a = NVTT_Format_DXT1a,NVTT_Format_BC2 = NVTT_Format_DXT3,NVTT_Format_BC3 = NVTT_Format_DXT5,NVTT_Format_BC3n = NVTT_Format_DXT5n,NVTT_Format_BC4,NVTT_Format_BC5,} NvttFormat ; typedef enum { NVTT_Quality_Fastest,NVTT_Quality_Normal,NVTT_Quality_Production,NVTT_Quality_Highest,} NvttQuality ; typedef enum { NVTT_WrapMode_Clamp,NVTT_WrapMode_Repeat,NVTT_WrapMode_Mirror,} NvttWrapMode ; typedef enum { NVTT_TextureType_2D,NVTT_TextureType_Cube,} NvttTextureType ; typedef enum { NVTT_InputFormat_BGRA_8UB,} NvttInputFormat ; typedef enum { NVTT_MipmapFilter_Box,NVTT_MipmapFilter_Triangle,NVTT_MipmapFilter_Kaiser,} NvttMipmapFilter ; typedef enum { NVTT_ColorTransform_None,NVTT_ColorTransform_Linear,} NvttColorTransform ; typedef enum { NVTT_RoundMode_None,NVTT_RoundMode_ToNextPowerOfTwo,NVTT_RoundMode_ToNearestPowerOfTwo,NVTT_RoundMode_ToPreviousPowerOfTwo,} NvttRoundMode ; typedef enum { NVTT_AlphaMode_None,NVTT_AlphaMode_Transparency,NVTT_AlphaMode_Premultiplied,} NvttAlphaMode ; typedef enum { NVTT_Error_InvalidInput,NVTT_Error_UserInterruption,NVTT_Error_UnsupportedFeature,NVTT_Error_CudaError,NVTT_Error_Unknown,NVTT_Error_FileOpen,NVTT_Error_FileWrite,} NvttError ; typedef enum { NVTT_False,NVTT_True,} NvttBoolean ; # ifdef __cplusplus \" C \" { # endif NvttInputOptions*)",
    "insertText": "nvttCreateInputOptions()"
  },
  {
    "label": "nvttDestroyInputOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttDestroyInputOptions(NvttInputOptions * inputOptions)"
  },
  {
    "label": "nvttSetInputOptionsTextureLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsTextureLayout(NvttInputOptions * inputOptions, NvttTextureType type, int w, int h, int d)"
  },
  {
    "label": "nvttResetInputOptionsTextureLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttResetInputOptionsTextureLayout(NvttInputOptions * inputOptions)"
  },
  {
    "label": "nvttSetInputOptionsMipmapData()",
    "kind": "Method",
    "detail": "Function (NvttBoolean)",
    "insertText": "nvttSetInputOptionsMipmapData(NvttInputOptions * inputOptions, const void * data, int w, int h, int d, int face, int mipmap)"
  },
  {
    "label": "nvttSetInputOptionsFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsFormat(NvttInputOptions * inputOptions, NvttInputFormat format)"
  },
  {
    "label": "nvttSetInputOptionsAlphaMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsAlphaMode(NvttInputOptions * inputOptions, NvttAlphaMode alphaMode)"
  },
  {
    "label": "nvttSetInputOptionsGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsGamma(NvttInputOptions * inputOptions, float inputGamma, float outputGamma)"
  },
  {
    "label": "nvttSetInputOptionsWrapMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsWrapMode(NvttInputOptions * inputOptions, NvttWrapMode mode)"
  },
  {
    "label": "nvttSetInputOptionsMipmapFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsMipmapFilter(NvttInputOptions * inputOptions, NvttMipmapFilter filter)"
  },
  {
    "label": "nvttSetInputOptionsMipmapGeneration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsMipmapGeneration(NvttInputOptions * inputOptions, NvttBoolean enabled, int maxLevel)"
  },
  {
    "label": "nvttSetInputOptionsKaiserParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsKaiserParameters(NvttInputOptions * inputOptions, float width, float alpha, float stretch)"
  },
  {
    "label": "nvttSetInputOptionsNormalMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsNormalMap(NvttInputOptions * inputOptions, NvttBoolean b)"
  },
  {
    "label": "nvttSetInputOptionsConvertToNormalMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsConvertToNormalMap(NvttInputOptions * inputOptions, NvttBoolean convert)"
  },
  {
    "label": "nvttSetInputOptionsHeightEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsHeightEvaluation(NvttInputOptions * inputOptions, float redScale, float greenScale, float blueScale, float alphaScale)"
  },
  {
    "label": "nvttSetInputOptionsNormalFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsNormalFilter(NvttInputOptions * inputOptions, float sm, float medium, float big, float large)"
  },
  {
    "label": "nvttSetInputOptionsNormalizeMipmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsNormalizeMipmaps(NvttInputOptions * inputOptions, NvttBoolean b)"
  },
  {
    "label": "nvttSetInputOptionsColorTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsColorTransform(NvttInputOptions * inputOptions, NvttColorTransform t)"
  },
  {
    "label": "nvttSetInputOptionsLinearTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsLinearTransform(NvttInputOptions * inputOptions, int channel, float w0, float w1, float w2, float w3)"
  },
  {
    "label": "nvttSetInputOptionsMaxExtents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsMaxExtents(NvttInputOptions * inputOptions, int dim)"
  },
  {
    "label": "nvttSetInputOptionsRoundMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetInputOptionsRoundMode(NvttInputOptions * inputOptions, NvttRoundMode mode)"
  },
  {
    "label": "nvttCreateCompressionOptions()",
    "kind": "Method",
    "detail": "Function (NvttCompressionOptions*)",
    "insertText": "nvttCreateCompressionOptions()"
  },
  {
    "label": "nvttDestroyCompressionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttDestroyCompressionOptions(NvttCompressionOptions * compressionOptions)"
  },
  {
    "label": "nvttSetCompressionOptionsFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetCompressionOptionsFormat(NvttCompressionOptions * compressionOptions, NvttFormat format)"
  },
  {
    "label": "nvttSetCompressionOptionsQuality()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetCompressionOptionsQuality(NvttCompressionOptions * compressionOptions, NvttQuality quality)"
  },
  {
    "label": "nvttSetCompressionOptionsColorWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetCompressionOptionsColorWeights(NvttCompressionOptions * compressionOptions, float red, float green, float blue, float alpha)"
  },
  {
    "label": "nvttSetCompressionOptionsPixelFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetCompressionOptionsPixelFormat(NvttCompressionOptions * compressionOptions, unsigned int bitcount, unsigned int rmask, unsigned int gmask, unsigned int bmask, unsigned int amask)"
  },
  {
    "label": "nvttSetCompressionOptionsQuantization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetCompressionOptionsQuantization(NvttCompressionOptions * compressionOptions, NvttBoolean colorDithering, NvttBoolean alphaDithering, NvttBoolean binaryAlpha, int alphaThreshold)"
  },
  {
    "label": "nvttCreateOutputOptions()",
    "kind": "Method",
    "detail": "Function (NvttOutputOptions*)",
    "insertText": "nvttCreateOutputOptions()"
  },
  {
    "label": "nvttDestroyOutputOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttDestroyOutputOptions(NvttOutputOptions * outputOptions)"
  },
  {
    "label": "nvttSetOutputOptionsFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetOutputOptionsFileName(NvttOutputOptions * outputOptions, const char * fileName)"
  },
  {
    "label": "nvttSetOutputOptionsOutputHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttSetOutputOptionsOutputHeader(NvttOutputOptions * outputOptions, NvttBoolean b)"
  },
  {
    "label": "nvttCreateCompressor()",
    "kind": "Method",
    "detail": "Function (NvttCompressor*)",
    "insertText": "nvttCreateCompressor()"
  },
  {
    "label": "nvttDestroyCompressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvttDestroyCompressor(NvttCompressor * compressor)"
  },
  {
    "label": "nvttCompress()",
    "kind": "Method",
    "detail": "Function (NvttBoolean)",
    "insertText": "nvttCompress(const NvttCompressor * compressor, const NvttInputOptions * inputOptions, const NvttCompressionOptions * compressionOptions, const NvttOutputOptions * outputOptions)"
  },
  {
    "label": "nvttEstimateSize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nvttEstimateSize(const NvttCompressor * compressor, const NvttInputOptions * inputOptions, const NvttCompressionOptions * compressionOptions)"
  },
  {
    "label": "nvttErrorString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "nvttErrorString(NvttError e)"
  },
  {
    "label": "nvttVersion()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "nvttVersion()"
  }
]