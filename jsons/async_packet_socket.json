[
  {
    "label": "PacketTimeUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketTimeUpdateParams"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PacketTimeUpdateParams()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_ASYNC_PACKET_SOCKET_H_ # define RTC_BASE_ASYNC_PACKET_SOCKET_H_ # include<vector> # include \" api / sequence_checker . h \" # include \" rtc_base / callback_list . h \" # include \" rtc_base / dscp . h \" # include \" rtc_base / network / sent_packet . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / time_utils . h \" namespace rtc { struct PacketTimeUpdateParams {)",
    "insertText": "PacketTimeUpdateParams()"
  },
  {
    "label": "PacketTimeUpdateParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketTimeUpdateParams(const PacketTimeUpdateParams& other)"
  },
  {
    "label": "PacketOptions()",
    "kind": "Method",
    "detail": "Function (int rtp_sendtime_extension_id = - 1 ; std::vector<char> srtp_auth_key ; int srtp_auth_tag_len = - 1 ; int64_t srtp_packet_index = - 1 ; } ; struct RTC_EXPORT PacketOptions {)",
    "insertText": "PacketOptions()"
  },
  {
    "label": "PacketOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketOptions(DiffServCodePoint dscp)"
  },
  {
    "label": "PacketOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketOptions(const PacketOptions& other)"
  },
  {
    "label": "AsyncPacketSocket()",
    "kind": "Method",
    "detail": "Function (DiffServCodePoint dscp = DSCP_NO_CHANGE ; int64_t packet_id = - 1 ; PacketTimeUpdateParams packet_time_params ; PacketInfo info_signaled_after_sent ; } ; class RTC_EXPORT AsyncPacketSocket : public sigslot::has_slots<> { public : enum State { STATE_CLOSED,STATE_BINDING,STATE_BOUND,STATE_CONNECTING,STATE_CONNECTED } ;)",
    "insertText": "AsyncPacketSocket()"
  },
  {
    "label": "AsyncPacketSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncPacketSocket(const AsyncPacketSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncPacketSocket&)",
    "insertText": "operator(const AsyncPacketSocket&)"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "GetRemoteAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetRemoteAddress()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb, const PacketOptions& options)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* pv, size_t cb, const SocketAddress& addr, const PacketOptions& options)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Close()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (State)",
    "insertText": "GetState()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(Socket::Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Socket::Option opt, int value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(int error)"
  },
  {
    "label": "SubscribeClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubscribeClose(const void* removal_tag, std::function<void(AsyncPacketSocket*, int)> callback)"
  },
  {
    "label": "UnsubscribeClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsubscribeClose(const void* removal_tag)"
  },
  {
    "label": "NotifyClosedForTest()",
    "kind": "Method",
    "detail": "Function (sigslot::signal5<AsyncPacketSocket*,const char*,size_t,const SocketAddress&,const int64_t&> SignalReadPacket ; sigslot::signal2<AsyncPacketSocket*,const SentPacket&> SignalSentPacket ; sigslot::signal1<AsyncPacketSocket*> SignalReadyToSend ; sigslot::signal2<AsyncPacketSocket*,const SocketAddress&> SignalAddressReady ; sigslot::signal1<AsyncPacketSocket*> SignalConnect ; void)",
    "insertText": "NotifyClosedForTest(int err)"
  },
  {
    "label": "NotifyClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyClosed(err)"
  },
  {
    "label": "SignalClose()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SignalClose(AsyncPacketSocket* s, int err)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(s, this)"
  },
  {
    "label": "NotifyClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyClosed(int err)"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&network_checker_)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (on_close_ .)",
    "insertText": "Send(this, err)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker network_checker_ ; private : webrtc::CallbackList<AsyncPacketSocket*,int> on_close_)",
    "insertText": "RTC_GUARDED_BY(&network_checker_)"
  },
  {
    "label": "CopySocketInformationToPacketInfo()",
    "kind": "Method",
    "detail": "Function (sigslot::signal2<AsyncListenSocket*,AsyncPacketSocket*> SignalNewConnection ; } ; void)",
    "insertText": "CopySocketInformationToPacketInfo(size_t packet_size_bytes, const AsyncPacketSocket& socket_from, bool is_connectionless, rtc::PacketInfo* info)"
  }
]