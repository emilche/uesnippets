[
  {
    "label": "SSLIdentity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLIdentity"
  },
  {
    "label": "TransportOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TransportOptions"
  },
  {
    "label": "TransportDescriptionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportDescriptionFactory"
  },
  {
    "label": "TransportDescriptionFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TRANSPORT_DESCRIPTION_FACTORY_H_ # define P2P_BASE_TRANSPORT_DESCRIPTION_FACTORY_H_ # include<memory> # include<utility> # include \" api / field_trials_view . h \" # include \" p2p / base / ice_credentials_iterator . h \" # include \" p2p / base / transport_description . h \" # include \" rtc_base / rtc_certificate . h \" namespace rtc { class SSLIdentity ; } namespace cricket { struct TransportOptions { bool ice_restart = false ; bool prefer_passive_role = false ; bool enable_ice_renomination = false ; } ; class TransportDescriptionFactory { public :)",
    "insertText": "TransportDescriptionFactory(const webrtc::FieldTrialsView& field_trials)"
  },
  {
    "label": "TransportDescriptionFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TransportDescriptionFactory()"
  },
  {
    "label": "secure()",
    "kind": "Method",
    "detail": "Function (SecurePolicy)",
    "insertText": "secure()"
  },
  {
    "label": "set_certificate()",
    "kind": "Method",
    "detail": "Function (secure_ = s ; } void)",
    "insertText": "set_certificate(rtc::scoped_refptr<rtc::RTCCertificate> certificate)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (certificate_ =)",
    "insertText": "move(certificate)"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<TransportDescription>)",
    "insertText": "CreateOffer(const TransportOptions& options, const TransportDescription* current_description, IceCredentialsIterator* ice_credentials)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TransportDescription>)",
    "insertText": "CreateAnswer(const TransportDescription* offer, const TransportOptions& options, bool require_transport_attributes, const TransportDescription* current_description, IceCredentialsIterator* ice_credentials)"
  },
  {
    "label": "trials()",
    "kind": "Method",
    "detail": "Function (const webrtc::FieldTrialsView&)",
    "insertText": "trials()"
  }
]