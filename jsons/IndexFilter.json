[
  {
    "label": "TestIndexFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestIndexFilter"
  },
  {
    "label": "ValueMaskFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueMaskFilter"
  },
  {
    "label": "MultiGroupFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiGroupFilter"
  },
  {
    "label": "RandomLeafFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomLeafFilter"
  },
  {
    "label": "AttributeHashFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AttributeHashFilter"
  },
  {
    "label": "LevelSetFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetFilter"
  },
  {
    "label": "BBoxFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BBoxFilter"
  },
  {
    "label": "BinaryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BinaryFilter"
  },
  {
    "label": "FilterTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FilterTraits"
  },
  {
    "label": "generateRandomSubset()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_INDEX_FILTER_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_INDEX_FILTER_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<openvdb / Types . h> # include<openvdb / math / Transform . h> # include<openvdb / tools / Interpolation . h> # include \" IndexIterator . h \" # include \" AttributeArray . h \" # include \" AttributeGroup . h \" # include \" AttributeSet . h \" # include<random> # include<numeric> # include<unordered_map> class TestIndexFilter ; namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { namespace index_filter_internal { template<RandGenT,IntType> std::vector<IntType>)",
    "insertText": "generateRandomSubset(const unsigned int seed, const IntType n, const IntType m)"
  },
  {
    "label": "values()",
    "kind": "Method",
    "detail": "Function (std::vector<IntType>)",
    "insertText": "values(m)"
  },
  {
    "label": "iota()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iota(values.begin(), values.end(), 0)"
  },
  {
    "label": "randGen()",
    "kind": "Method",
    "detail": "Function (RandGenT)",
    "insertText": "randGen(seed)"
  },
  {
    "label": "shuffle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shuffle(values.begin(), values.end(), randGen)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "resize(n)"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sort(values.begin(), values.end())"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} template<IterT> bool)",
    "insertText": "valid(const IterT& iter)"
  },
  {
    "label": "isValueOn()",
    "kind": "Method",
    "detail": "Function (const bool valueOn = iter .)",
    "insertText": "isValueOn()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IndexVector indices ;)",
    "insertText": "for(const auto& name : names)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (try { indices .)",
    "insertText": "emplace_back(attributeSet.groupIndex(name))"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(LookupError&)"
  },
  {
    "label": "MultiGroupFilter()",
    "kind": "Method",
    "detail": "Function (} } return indices ; } public :)",
    "insertText": "MultiGroupFilter(const NameVector& include, const NameVector& exclude, const AttributeSet& attributeSet) : mInclude(MultiGroupFilter::namesToIndices(attributeSet, include)) , mExclude(MultiGroupFilter::namesToIndices(attributeSet, exclude))"
  },
  {
    "label": "MultiGroupFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MultiGroupFilter(const IndexVector& include, const IndexVector& exclude) : mInclude(include) , mExclude(exclude)"
  },
  {
    "label": "MultiGroupFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MultiGroupFilter(const MultiGroupFilter& filter) : mInclude(filter.mInclude) , mExclude(filter.mExclude) , mIncludeHandles(filter.mIncludeHandles) , mExcludeHandles(filter.mExcludeHandles) , mInitialized(filter.mInitialized)"
  },
  {
    "label": "initialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "initialized()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (} template<LeafT> index::State)",
    "insertText": "state(const LeafT&)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (mIncludeHandles .)",
    "insertText": "clear()"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (mIncludeHandles .)",
    "insertText": "emplace_back(leaf.groupHandle(i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const auto& i : mExclude)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mInitialized)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool includeValid = mIncludeHandles .)",
    "insertText": "empty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (includeValid = true ; break ; } })",
    "insertText": "if(!includeValid)"
  },
  {
    "label": "RandomLeafFilter()",
    "kind": "Method",
    "detail": "Function (} return true ; } private : IndexVector mInclude ; IndexVector mExclude ; HandleVector mIncludeHandles ; HandleVector mExcludeHandles ; bool mInitialized = false ; } ; template<PointDataTreeT,RandGenT> class RandomLeafFilter { public : using SeedCountPair = std::pair<Index,Index> ; using LeafMap = std::unordered_map<openvdb::Coord,SeedCountPair> ;)",
    "insertText": "RandomLeafFilter(const PointDataTreeT& tree, const Index64 targetPoints, const unsigned int seed = 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index64 currentPoints = 0 ;)",
    "insertText": "for(auto iter = tree.cbeginLeaf(); iter; ++iter)"
  },
  {
    "label": "pointCount()",
    "kind": "Method",
    "detail": "Function (currentPoints + = iter ->)",
    "insertText": "pointCount()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} const float factor = targetPoints> currentPoints ? 1 . 0 f :)",
    "insertText": "float(targetPoints) / float(currentPoints)"
  },
  {
    "label": "generator()",
    "kind": "Method",
    "detail": "Function (std::mt19937)",
    "insertText": "generator(seed)"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (std::uniform_int_distribution<unsigned int>)",
    "insertText": "dist(0, std::numeric_limits<unsigned int>::max() - 1)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int leafPoints = static_cast<)",
    "insertText": "int(targetPoints)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (mLeafMap [ iter ->)",
    "insertText": "origin()] = SeedCountPair(dist(generator), leafPoints)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (break ; } totalPointsFloat + = factor* static_cast<)",
    "insertText": "float(iter->pointCount())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const auto leafPoints = static_cast<)",
    "insertText": "int(math::Floor(totalPointsFloat))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (totalPointsFloat - = static_cast<)",
    "insertText": "float(leafPoints)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (using index_filter_internal::generateRandomSubset ; auto it = mLeafMap .)",
    "insertText": "find(leaf.origin())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(openvdb::KeyError, \"Cannot find leaf origin in map for random filter - \" << leaf.origin())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} const SeedCountPair& value = it -> second ; const unsigned int seed = static_cast<unsigned)",
    "insertText": "int(value.first)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const auto total = static_cast<)",
    "insertText": "Index(leaf.pointCount())"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (mCount =)",
    "insertText": "min(value.second, total)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (mIndices = generateRandomSubset<RandGenT,)",
    "insertText": "int(seed, mCount, total)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (mSubsetOffset = - 1 ; mNextIndex = - 1 ; } void)",
    "insertText": "next()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (mSubsetOffset + + ; mNextIndex = mSubsetOffset> = mCount ? std::numeric_limits<int)",
    "insertText": "max()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const int index =* iter ;)",
    "insertText": "while(mNextIndex < index) this->next()"
  },
  {
    "label": "AttributeHashFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AttributeHashFilter(const AttributeHashFilter& filter) : mIndex(filter.mIndex) , mFactor(filter.mFactor) , mSeed(filter.mSeed)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (} index::State)",
    "insertText": "state()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(leaf.hasAttribute(mIndex))"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mIdHandle .)",
    "insertText": "reset(new Handle(leaf.constAttributeArray(mIndex)))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mIdHandle)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const IntType id = mIdHandle ->)",
    "insertText": "get(*iter)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const unsigned int seed = mSeed + static_cast<unsigned)",
    "insertText": "int(id)"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (std::uniform_real_distribution<double>)",
    "insertText": "dist(0.0, 1.0)"
  },
  {
    "label": "LevelSetFilter()",
    "kind": "Method",
    "detail": "Function (} private : const size_t mIndex ; const double mFactor ; const unsigned int mSeed ; Handle::UniquePtr mIdHandle ; } ; template<LevelSetGridT> class LevelSetFilter { public : using ValueT = LevelSetGridT::ValueType ; using Handle = AttributeHandle<openvdb::Vec3f> ;)",
    "insertText": "LevelSetFilter(const LevelSetGridT& grid, const math::Transform& transform, const ValueT min, const ValueT max) : mAccessor(grid.getConstAccessor()) , mLevelSetTransform(grid.transform()) , mTransform(transform) , mMin(min) , mMax(max)"
  },
  {
    "label": "LevelSetFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LevelSetFilter(const LevelSetFilter& filter) : mAccessor(filter.mAccessor) , mLevelSetTransform(filter.mLevelSetTransform) , mTransform(filter.mTransform) , mMin(filter.mMin) , mMax(filter.mMax)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mPositionHandle .)",
    "insertText": "reset(new Handle(leaf.constAttributeArray(\"P\")))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mPositionHandle)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(iter)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const openvdb::Coord ijk = iter .)",
    "insertText": "getCoord()"
  },
  {
    "label": "asVec3d()",
    "kind": "Method",
    "detail": "Function (const openvdb::Vec3f voxelIndexSpace = ijk .)",
    "insertText": "asVec3d()"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (const openvdb::Vec3f pointWorldSpace = mTransform .)",
    "insertText": "indexToWorld(pointVoxelSpace + voxelIndexSpace)"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (const openvdb::Vec3f pointIndexSpace = mLevelSetTransform .)",
    "insertText": "worldToIndex(pointWorldSpace)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const LevelSetGridT::ValueType value = tools::)",
    "insertText": "sample(mAccessor, pointIndexSpace)"
  },
  {
    "label": "invert()",
    "kind": "Method",
    "detail": "Function (const bool invert = mMin> mMax ; return)",
    "insertText": "invert(value < mMax || value > mMin) : (value < mMax && value > mMin)"
  },
  {
    "label": "BBoxFilter()",
    "kind": "Method",
    "detail": "Function (} private : const LevelSetGridT::ConstAccessor mAccessor ; const math::Transform& mLevelSetTransform ; const math::Transform& mTransform ; const ValueT mMin ; const ValueT mMax ; Handle::UniquePtr mPositionHandle ; } ; class BBoxFilter { public : using Handle = AttributeHandle<openvdb::Vec3f> ;)",
    "insertText": "BBoxFilter(const openvdb::math::Transform& transform, const openvdb::BBoxd& bboxWS) : mTransform(transform) , mBbox(transform.worldToIndex(bboxWS))"
  },
  {
    "label": "BBoxFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BBoxFilter(const BBoxFilter& filter) : mTransform(filter.mTransform) , mBbox(filter.mBbox)"
  },
  {
    "label": "isInside()",
    "kind": "Method",
    "detail": "Function (const openvdb::Vec3f pointIndexSpace = pointVoxelSpace + voxelIndexSpace ; return mBbox .)",
    "insertText": "isInside(pointIndexSpace)"
  },
  {
    "label": "BinaryFilter()",
    "kind": "Method",
    "detail": "Function (} private : const openvdb::math::Transform& mTransform ; const openvdb::BBoxd mBbox ; Handle::UniquePtr mPositionHandle ; } ; template<T1,T2,bool And = true> class BinaryFilter { public :)",
    "insertText": "BinaryFilter(const T1& filter1, const T2& filter2) : mFilter1(filter1) , mFilter2(filter2)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (} template<LeafT> index::State)",
    "insertText": "state(const LeafT& leaf)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} template<LeafT> void)",
    "insertText": "reset(const LeafT& leaf)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (mFilter1 .)",
    "insertText": "reset(leaf)"
  },
  {
    "label": "computeState()",
    "kind": "Method",
    "detail": "Function (} private : index::State)",
    "insertText": "computeState(index::State state1, index::State state2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(state1 == index::NONE && state2 == index::NONE)"
  }
]