[
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineFunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunctionPass"
  },
  {
    "label": "MachineFunctionPass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEFUNCTIONPASS_H # define LLVM_CODEGEN_MACHINEFUNCTIONPASS_H # include \" llvm / Pass . h \" namespace llvm { class MachineFunction ; class MachineFunctionPass : public FunctionPass { protected :)",
    "insertText": "MachineFunctionPass(char &ID) : FunctionPass(ID)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnMachineFunction(MachineFunction &MF)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "createPrinterPass()",
    "kind": "Method",
    "detail": "Function (private : Pass*)",
    "insertText": "createPrinterPass(raw_ostream &O, const std::string &Banner)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  }
]