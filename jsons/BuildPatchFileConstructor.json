[
  {
    "label": "FBuildPatchAppManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildPatchAppManifest"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IBuildInstallerSharedContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildInstallerSharedContext"
  },
  {
    "label": "FChunkPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkPart"
  },
  {
    "label": "IFileSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileSystem"
  },
  {
    "label": "IChunkSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkSource"
  },
  {
    "label": "IChunkReferenceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkReferenceTracker"
  },
  {
    "label": "IInstallerError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallerError"
  },
  {
    "label": "IInstallerAnalytics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInstallerAnalytics"
  },
  {
    "label": "IFileConstructorStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFileConstructorStat"
  },
  {
    "label": "IBuildManifestSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildManifestSet"
  },
  {
    "label": "IBuildInstallerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildInstallerThread"
  },
  {
    "label": "IChunkDbChunkSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IChunkDbChunkSource"
  },
  {
    "label": "FFileConstructorConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileConstructorConfig"
  },
  {
    "label": "FBuildPatchFileConstructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildPatchFileConstructor"
  },
  {
    "label": "FBuildPatchFileConstructor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" HAL / Runnable . h \" # include \" BuildPatchProgress . h \" # include \" BuildPatchManifest . h \" # include \" Installer / Controllable . h \" # include \" Common / SpeedRecorder . h \" # include \" BuildPatchInstall . h \" class FBuildPatchAppManifest ; enum class EConstructionError : uint8 ; class IBuildInstallerSharedContext ; namespace BuildPatchServices { struct FChunkPart ; class IFileSystem ; class IChunkSource ; class IChunkReferenceTracker ; class IInstallerError ; class IInstallerAnalytics ; class IFileConstructorStat ; class IBuildManifestSet ; class IBuildInstallerThread ; class IChunkDbChunkSource ; struct FFileConstructorConfig { IBuildManifestSet* ManifestSet ; FString InstallDirectory ; FString StagingDirectory ; FString MetaDirectory ; TArray<FString> ConstructList ; EInstallMode InstallMode ; IBuildInstallerSharedContext* SharedContext ; bool bDeleteChunkDBFilesAfterUse = false ; } ; class FBuildPatchFileConstructor : public IControllable { public :)",
    "insertText": "FBuildPatchFileConstructor(FFileConstructorConfig Configuration, IFileSystem* FileSystem, IChunkSource* ChunkSource, IChunkDbChunkSource* ChunkDbChunkSource, IChunkReferenceTracker* ChunkReferenceTracker, IInstallerError* InstallerError, IInstallerAnalytics* InstallerAnalytics, IFileConstructorStat* FileConstructorStat)"
  },
  {
    "label": "FBuildPatchFileConstructor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBuildPatchFileConstructor()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "SetPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPaused(bool bInIsPaused)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (bIsPaused = bInIsPaused ; } void)",
    "insertText": "Abort()"
  },
  {
    "label": "GetRequiredDiskSpace()",
    "kind": "Method",
    "detail": "Function (bShouldAbort = true ; } uint64)",
    "insertText": "GetRequiredDiskSpace()"
  },
  {
    "label": "GetAvailableDiskSpace()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetAvailableDiskSpace()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FBuildPatchFileConstructor, FOnBeforeDeleteFile, const FString&)"
  },
  {
    "label": "OnBeforeDeleteFile()",
    "kind": "Method",
    "detail": "Function (FOnBeforeDeleteFile&)",
    "insertText": "OnBeforeDeleteFile()"
  },
  {
    "label": "CountBytesProcessed()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CountBytesProcessed(const int64& ByteCount)"
  },
  {
    "label": "GetFileToConstruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFileToConstruct(FString& Filename)"
  },
  {
    "label": "GetRemainingBytes()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetRemainingBytes()"
  },
  {
    "label": "CalculateInProgressDiskSpaceRequired()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalculateInProgressDiskSpaceRequired(const FFileManifest& InProgressFileManifest, uint64 InProgressFileSize)"
  },
  {
    "label": "CalculateDiskSpaceRequirementsWithDeleteDuringInstall()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalculateDiskSpaceRequirementsWithDeleteDuringInstall(const TArray<FString>& InConstructionStack)"
  },
  {
    "label": "ConstructFileFromChunks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConstructFileFromChunks(const FString& BuildFilename, const FFileManifest& FileManifest, bool bResumeExisting)"
  },
  {
    "label": "AppendChunkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendChunkData(const FChunkPart& ChunkPart, TArray<uint8>& DestinationBuffer, EConstructionError& ConstructionError)"
  },
  {
    "label": "DeleteDirectoryContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteDirectoryContents(const FString& RootDirectory)"
  },
  {
    "label": "WriteJobThreadRun()",
    "kind": "Method",
    "detail": "Function (private : const FFileConstructorConfig Configuration ; bool bIsDownloadStarted ; bool bInitialDiskSizeCheck ; FThreadSafeBool bIsPaused ; FThreadSafeBool bShouldAbort ; FCriticalSection ThreadLock ; TArray<FString> ConstructionStack ; IFileSystem* FileSystem ; IChunkSource* ChunkSource ; IChunkDbChunkSource* ChunkDbSource ; IChunkReferenceTracker* ChunkReferenceTracker ; IInstallerError* InstallerError ; IInstallerAnalytics* InstallerAnalytics ; IFileConstructorStat* FileConstructorStat ; int64 TotalJobSize ; int64 ByteProcessed ; std::atomic_uint64_t RequiredDiskSpace ; std::atomic_uint64_t AvailableDiskSpace ; FOnBeforeDeleteFile BeforeDeleteFileEvent ; IBuildInstallerThread* WriteJobThread ; void)",
    "insertText": "WriteJobThreadRun()"
  },
  {
    "label": "WriteBufferSize()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> WriteBuffers [ 2 ] ; int32 CurrentFillBuffer = 0 ; uint32)",
    "insertText": "WriteBufferSize(4 << 20)"
  },
  {
    "label": "IFileConstructorStat()",
    "kind": "Method",
    "detail": "Function (FEvent* WriteJobCompleteEvent = nullptr ; FEvent* WriteJobStartEvent = nullptr ; TArray<uint8>* WriteJobBufferToWrite = nullptr ; FArchive* WriteJobArchive = nullptr ; std::atomic_bool bWriteJobCompleted = false ; bool bWriteJobRunning = false ; TArray<int32> FileCompletionPositions ; } ; class IFileConstructorStat { public : ~)",
    "insertText": "IFileConstructorStat()"
  },
  {
    "label": "OnResumeStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnResumeStarted()"
  },
  {
    "label": "OnResumeCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResumeCompleted()"
  },
  {
    "label": "OnChunkGet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChunkGet(const FGuid& ChunkId)"
  },
  {
    "label": "OnFileStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileStarted(const FString& Filename, int64 FileSize)"
  },
  {
    "label": "OnFileProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileProgress(const FString& Filename, int64 TotalBytes)"
  },
  {
    "label": "OnFileCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCompleted(const FString& Filename, bool bSuccess)"
  },
  {
    "label": "OnConstructionCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstructionCompleted()"
  },
  {
    "label": "OnProcessedDataUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProcessedDataUpdated(int64 TotalBytes)"
  },
  {
    "label": "OnTotalRequiredUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTotalRequiredUpdated(int64 TotalBytes)"
  },
  {
    "label": "OnBeforeAdminister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeAdminister()"
  },
  {
    "label": "OnAfterAdminister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterAdminister(const ISpeedRecorder::FRecord& Record)"
  },
  {
    "label": "OnBeforeRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeRead()"
  },
  {
    "label": "OnAfterRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterRead(const ISpeedRecorder::FRecord& Record)"
  },
  {
    "label": "OnBeforeWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeWrite()"
  },
  {
    "label": "OnAfterWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAfterWrite(const ISpeedRecorder::FRecord& Record)"
  },
  {
    "label": "CalculateRequiredDiskSpace()",
    "kind": "Method",
    "detail": "Function (} ; } namespace FileConstructorHelpers { uint64)",
    "insertText": "CalculateRequiredDiskSpace(const FBuildPatchAppManifestPtr& CurrentManifest, const FBuildPatchAppManifestRef& BuildManifest, const BuildPatchServices::EInstallMode& InstallMode, const TSet<FString>& InstallTags)"
  }
]