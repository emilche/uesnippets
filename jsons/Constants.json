[
  {
    "label": "ArrayType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayType"
  },
  {
    "label": "IntegerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntegerType"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "VectorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorType"
  },
  {
    "label": "SequentialType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequentialType"
  },
  {
    "label": "ConstantExprKeyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstantExprKeyType"
  },
  {
    "label": "ConstantClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantClass"
  },
  {
    "label": "ConstantAggrKeyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstantAggrKeyType"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "ConstantFP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantFP"
  },
  {
    "label": "LLVMContextImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContextImpl"
  },
  {
    "label": "ConstantAggregateZero",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantAggregateZero"
  },
  {
    "label": "ConstantArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantArray"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "ConstantStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantStruct"
  },
  {
    "label": "ConstantVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantVector"
  },
  {
    "label": "ConstantPointerNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantPointerNull"
  },
  {
    "label": "ConstantDataSequential",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantDataSequential"
  },
  {
    "label": "ConstantDataArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantDataArray"
  },
  {
    "label": "ConstantDataVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantDataVector"
  },
  {
    "label": "BlockAddress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockAddress"
  },
  {
    "label": "ConstantExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantExpr"
  },
  {
    "label": "UndefValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UndefValue"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_CONSTANTS_H # define LLVM_IR_CONSTANTS_H # include \" llvm / ADT / APFloat . h \" # include \" llvm / ADT / APInt . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / IR / Constant . h \" # include \" llvm / IR / DerivedTypes . h \" # include \" llvm / IR / OperandTraits . h \" namespace llvm { class ArrayType ; class IntegerType ; class StructType ; class PointerType ; class VectorType ; class SequentialType ; struct ConstantExprKeyType ; template<class ConstantClass> struct ConstantAggrKeyType ; class ConstantInt : public Constant { void)",
    "insertText": "anchor()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t, unsigned)"
  },
  {
    "label": "ConstantInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantInt(const ConstantInt &)"
  },
  {
    "label": "ConstantInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantInt(IntegerType *Ty, const APInt& V)"
  },
  {
    "label": "destroyConstantImpl()",
    "kind": "Method",
    "detail": "Function (APInt Val ; class Constant ; void)",
    "insertText": "destroyConstantImpl()"
  },
  {
    "label": "handleOperandChangeImpl()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "handleOperandChangeImpl(Value *From, Value *To, Use *U)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (protected : void* operator)",
    "insertText": "new(size_t s)"
  },
  {
    "label": "getTrue()",
    "kind": "Method",
    "detail": "Function (} public : ConstantInt*)",
    "insertText": "getTrue(LLVMContext &Context)"
  },
  {
    "label": "getFalse()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "getFalse(LLVMContext &Context)"
  },
  {
    "label": "getTrue()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getTrue(Type *Ty)"
  },
  {
    "label": "getFalse()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFalse(Type *Ty)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(Type *Ty, uint64_t V, bool isSigned = false)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "get(IntegerType *Ty, uint64_t V, bool isSigned = false)"
  },
  {
    "label": "getSigned()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "getSigned(IntegerType *Ty, int64_t V)"
  },
  {
    "label": "getSigned()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSigned(Type *Ty, int64_t V)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "get(LLVMContext &Context, const APInt &V)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (ConstantInt*)",
    "insertText": "get(IntegerType *Ty, StringRef Str, uint8_t radix)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(Type* Ty, const APInt& V)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const APInt&)",
    "insertText": "getValue()"
  },
  {
    "label": "getZExtValue()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getZExtValue()"
  },
  {
    "label": "getSExtValue()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "getSExtValue()"
  },
  {
    "label": "equalsInt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equalsInt(uint64_t V)"
  },
  {
    "label": "isValueValidForType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValueValidForType(Type *Ty, uint64_t V)"
  },
  {
    "label": "isValueValidForType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValueValidForType(Type *Ty, int64_t V)"
  },
  {
    "label": "isNegative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNegative()"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isZero()"
  },
  {
    "label": "isMaxValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMaxValue(bool isSigned)"
  },
  {
    "label": "isMinValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMinValue(bool isSigned)"
  },
  {
    "label": "uge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "uge(uint64_t Num)"
  },
  {
    "label": "getLimitedValue()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getLimitedValue(uint64_t Limit = ~0ULL)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Value *V)"
  },
  {
    "label": "ConstantFP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantFP(const ConstantFP &)"
  },
  {
    "label": "ConstantFP()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantFP(Type *Ty, const APFloat& V)"
  },
  {
    "label": "getZeroValueForNegation()",
    "kind": "Method",
    "detail": "Function (} public : Constant*)",
    "insertText": "getZeroValueForNegation(Type *Ty)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(Type* Ty, double V)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(Type* Ty, StringRef Str)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (ConstantFP*)",
    "insertText": "get(LLVMContext &Context, const APFloat &V)"
  },
  {
    "label": "getNaN()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getNaN(Type *Ty, bool Negative = false, unsigned type = 0)"
  },
  {
    "label": "getNegativeZero()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getNegativeZero(Type *Ty)"
  },
  {
    "label": "getInfinity()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getInfinity(Type *Ty, bool Negative = false)"
  },
  {
    "label": "isValueValidForType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValueValidForType(Type *Ty, const APFloat &V)"
  },
  {
    "label": "getValueAPF()",
    "kind": "Method",
    "detail": "Function (const APFloat&)",
    "insertText": "getValueAPF()"
  },
  {
    "label": "isInfinity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInfinity()"
  },
  {
    "label": "isNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNaN()"
  },
  {
    "label": "isExactlyValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isExactlyValue(const APFloat &V)"
  },
  {
    "label": "isExactlyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isExactlyValue(double V)"
  },
  {
    "label": "FV()",
    "kind": "Method",
    "detail": "Function (bool ignored ; APFloat)",
    "insertText": "FV(V)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (FV .)",
    "insertText": "convert(Val.getSemantics(), APFloat::rmNearestTiesToEven, &ignored)"
  },
  {
    "label": "ConstantAggregateZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantAggregateZero(const ConstantAggregateZero &)"
  },
  {
    "label": "ConstantAggregateZero()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantAggregateZero(Type *ty) : Constant(ty, ConstantAggregateZeroVal, nullptr, 0)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} public : ConstantAggregateZero*)",
    "insertText": "get(Type *Ty)"
  },
  {
    "label": "getSequentialElement()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSequentialElement()"
  },
  {
    "label": "getStructElement()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getStructElement(unsigned Elt)"
  },
  {
    "label": "getElementValue()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getElementValue(Constant *C)"
  },
  {
    "label": "getElementValue()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getElementValue(unsigned Idx)"
  },
  {
    "label": "getNumElements()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumElements()"
  },
  {
    "label": "ConstantArray()",
    "kind": "Method",
    "detail": "Function (} } ; class ConstantArray : public Constant { struct ConstantAggrKeyType<ConstantArray> ;)",
    "insertText": "ConstantArray(const ConstantArray &)"
  },
  {
    "label": "ConstantArray()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantArray(ArrayType *T, ArrayRef<Constant *> Val)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : Constant*)",
    "insertText": "get(ArrayType *T, ArrayRef<Constant*> V)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (private : Constant*)",
    "insertText": "getImpl(ArrayType *T, ArrayRef<Constant *> V)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Constant)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (ArrayType*)",
    "insertText": "getType()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<ConstantArray> : public VariadicOperandTraits<ConstantArray> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ConstantArray, Constant)"
  },
  {
    "label": "ConstantStruct()",
    "kind": "Method",
    "detail": "Function (struct ConstantAggrKeyType<ConstantStruct> ;)",
    "insertText": "ConstantStruct(const ConstantStruct &)"
  },
  {
    "label": "ConstantStruct()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantStruct(StructType *T, ArrayRef<Constant *> Val)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : Constant*)",
    "insertText": "get(StructType *T, ArrayRef<Constant*> V)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(StructType *T, ...)"
  },
  {
    "label": "getAnon()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getAnon(ArrayRef<Constant*> V, bool Packed = false)"
  },
  {
    "label": "getAnon()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getAnon(LLVMContext &Ctx, ArrayRef<Constant*> V, bool Packed = false)"
  },
  {
    "label": "getTypeForElements()",
    "kind": "Method",
    "detail": "Function (} StructType*)",
    "insertText": "getTypeForElements(ArrayRef<Constant*> V, bool Packed = false)"
  },
  {
    "label": "getTypeForElements()",
    "kind": "Method",
    "detail": "Function (StructType*)",
    "insertText": "getTypeForElements(LLVMContext &Ctx, ArrayRef<Constant*> V, bool Packed = false)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<ConstantStruct> : public VariadicOperandTraits<ConstantStruct> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ConstantStruct, Constant)"
  },
  {
    "label": "ConstantVector()",
    "kind": "Method",
    "detail": "Function (struct ConstantAggrKeyType<ConstantVector> ;)",
    "insertText": "ConstantVector(const ConstantVector &)"
  },
  {
    "label": "ConstantVector()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantVector(VectorType *T, ArrayRef<Constant *> Val)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : Constant*)",
    "insertText": "get(ArrayRef<Constant*> V)"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (private : Constant*)",
    "insertText": "getImpl(ArrayRef<Constant *> V)"
  },
  {
    "label": "getSplat()",
    "kind": "Method",
    "detail": "Function (public : Constant*)",
    "insertText": "getSplat(unsigned NumElts, Constant *Elt)"
  },
  {
    "label": "getSplatValue()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getSplatValue()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<ConstantVector> : public VariadicOperandTraits<ConstantVector> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ConstantVector, Constant)"
  },
  {
    "label": "ConstantPointerNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantPointerNull(const ConstantPointerNull &)"
  },
  {
    "label": "ConstantPointerNull()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantPointerNull(PointerType *T) : Constant(T, Value::ConstantPointerNullVal, nullptr, 0)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} public : ConstantPointerNull*)",
    "insertText": "get(PointerType *T)"
  },
  {
    "label": "ConstantDataSequential()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantDataSequential(const ConstantDataSequential &)"
  },
  {
    "label": "ConstantDataSequential()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantDataSequential(Type *ty, ValueTy VT, const char *Data) : Constant(ty, VT, nullptr, 0), DataElements(Data), Next(nullptr)"
  },
  {
    "label": "ConstantDataSequential()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ConstantDataSequential()"
  },
  {
    "label": "getImpl()",
    "kind": "Method",
    "detail": "Function (delete Next ; } Constant*)",
    "insertText": "getImpl(StringRef Bytes, Type *Ty)"
  },
  {
    "label": "isElementTypeCompatible()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "isElementTypeCompatible(const Type *Ty)"
  },
  {
    "label": "getElementAsInteger()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getElementAsInteger(unsigned i)"
  },
  {
    "label": "getElementAsAPFloat()",
    "kind": "Method",
    "detail": "Function (APFloat)",
    "insertText": "getElementAsAPFloat(unsigned i)"
  },
  {
    "label": "getElementAsFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "getElementAsFloat(unsigned i)"
  },
  {
    "label": "getElementAsConstant()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getElementAsConstant(unsigned i)"
  },
  {
    "label": "getElementType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getElementType()"
  },
  {
    "label": "getElementByteSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "getElementByteSize()"
  },
  {
    "label": "isString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isString()"
  },
  {
    "label": "isCString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCString()"
  },
  {
    "label": "getAsString()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getAsString()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isString() && \"Not a string\")"
  },
  {
    "label": "getAsCString()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getAsCString()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isCString() && \"Isn't a C string\")"
  },
  {
    "label": "getRawDataValues()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getRawDataValues()"
  },
  {
    "label": "getElementPointer()",
    "kind": "Method",
    "detail": "Function (} private : const char*)",
    "insertText": "getElementPointer(unsigned Elt)"
  },
  {
    "label": "ConstantDataArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantDataArray(const ConstantDataArray &)"
  },
  {
    "label": "ConstantDataArray()",
    "kind": "Method",
    "detail": "Function (class ConstantDataSequential ;)",
    "insertText": "ConstantDataArray(Type *ty, const char *Data) : ConstantDataSequential(ty, ConstantDataArrayVal, Data)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} public : Constant*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<uint8_t> Elts)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<uint16_t> Elts)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<uint32_t> Elts)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<uint64_t> Elts)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<float> Elts)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(LLVMContext &Context, ArrayRef<double> Elts)"
  },
  {
    "label": "getFP()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFP(LLVMContext &Context, ArrayRef<uint16_t> Elts)"
  },
  {
    "label": "getFP()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFP(LLVMContext &Context, ArrayRef<uint32_t> Elts)"
  },
  {
    "label": "getFP()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFP(LLVMContext &Context, ArrayRef<uint64_t> Elts)"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getString(LLVMContext &Context, StringRef Initializer, bool AddNull = true)"
  },
  {
    "label": "ConstantDataVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstantDataVector(const ConstantDataVector &)"
  },
  {
    "label": "ConstantDataVector()",
    "kind": "Method",
    "detail": "Function (class ConstantDataSequential ;)",
    "insertText": "ConstantDataVector(Type *ty, const char *Data) : ConstantDataSequential(ty, ConstantDataVectorVal, Data)"
  },
  {
    "label": "BlockAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlockAddress(Function *F, BasicBlock *BB)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : BlockAddress*)",
    "insertText": "get(Function *F, BasicBlock *BB)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (BlockAddress*)",
    "insertText": "get(BasicBlock *BB)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (BlockAddress*)",
    "insertText": "lookup(const BasicBlock *BB)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "getFunction()"
  },
  {
    "label": "getBasicBlock()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getBasicBlock()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<BlockAddress> : public FixedNumOperandTraits<BlockAddress,2> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(BlockAddress, Value)"
  },
  {
    "label": "ConstantExpr()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ConstantExpr(Type *ty, unsigned Opcode, Use *Ops, unsigned NumOps) : Constant(ty, ConstantExprVal, Ops, NumOps)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData(Opcode)"
  },
  {
    "label": "getAlignOf()",
    "kind": "Method",
    "detail": "Function (} public : Constant*)",
    "insertText": "getAlignOf(Type *Ty)"
  },
  {
    "label": "getSizeOf()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSizeOf(Type *Ty)"
  },
  {
    "label": "getOffsetOf()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOffsetOf(StructType *STy, unsigned FieldNo)"
  },
  {
    "label": "getOffsetOf()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOffsetOf(Type *Ty, Constant *FieldNo)"
  },
  {
    "label": "getNeg()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getNeg(Constant *C, bool HasNUW = false, bool HasNSW =false)"
  },
  {
    "label": "getFNeg()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFNeg(Constant *C)"
  },
  {
    "label": "getNot()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getNot(Constant *C)"
  },
  {
    "label": "getAdd()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getAdd(Constant *C1, Constant *C2, bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "getFAdd()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFAdd(Constant *C1, Constant *C2)"
  },
  {
    "label": "getSub()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSub(Constant *C1, Constant *C2, bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "getFSub()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFSub(Constant *C1, Constant *C2)"
  },
  {
    "label": "getMul()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getMul(Constant *C1, Constant *C2, bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "getFMul()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFMul(Constant *C1, Constant *C2)"
  },
  {
    "label": "getUDiv()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getUDiv(Constant *C1, Constant *C2, bool isExact = false)"
  },
  {
    "label": "getSDiv()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSDiv(Constant *C1, Constant *C2, bool isExact = false)"
  },
  {
    "label": "getFDiv()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFDiv(Constant *C1, Constant *C2)"
  },
  {
    "label": "getURem()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getURem(Constant *C1, Constant *C2)"
  },
  {
    "label": "getSRem()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSRem(Constant *C1, Constant *C2)"
  },
  {
    "label": "getFRem()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFRem(Constant *C1, Constant *C2)"
  },
  {
    "label": "getAnd()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getAnd(Constant *C1, Constant *C2)"
  },
  {
    "label": "getOr()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getOr(Constant *C1, Constant *C2)"
  },
  {
    "label": "getXor()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getXor(Constant *C1, Constant *C2)"
  },
  {
    "label": "getShl()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getShl(Constant *C1, Constant *C2, bool HasNUW = false, bool HasNSW = false)"
  },
  {
    "label": "getLShr()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getLShr(Constant *C1, Constant *C2, bool isExact = false)"
  },
  {
    "label": "getAShr()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getAShr(Constant *C1, Constant *C2, bool isExact = false)"
  },
  {
    "label": "getTrunc()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getTrunc(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getSExt()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSExt(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getZExt()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getZExt(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getFPTrunc()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFPTrunc(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getFPExtend()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFPExtend(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getUIToFP()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getUIToFP(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getSIToFP()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSIToFP(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getFPToUI()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFPToUI(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getFPToSI()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFPToSI(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getPtrToInt()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getPtrToInt(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getIntToPtr()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getIntToPtr(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getBitCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getBitCast(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getAddrSpaceCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getAddrSpaceCast(Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getNSWNeg()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getNSWNeg(Constant *C)"
  },
  {
    "label": "getNUWNeg()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNUWNeg(Constant *C)"
  },
  {
    "label": "getNSWAdd()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNSWAdd(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNUWAdd()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNUWAdd(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNSWSub()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNSWSub(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNUWSub()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNUWSub(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNSWMul()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNSWMul(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNUWMul()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNUWMul(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNSWShl()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNSWShl(Constant *C1, Constant *C2)"
  },
  {
    "label": "getNUWShl()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getNUWShl(Constant *C1, Constant *C2)"
  },
  {
    "label": "getExactSDiv()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getExactSDiv(Constant *C1, Constant *C2)"
  },
  {
    "label": "getExactUDiv()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getExactUDiv(Constant *C1, Constant *C2)"
  },
  {
    "label": "getExactAShr()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getExactAShr(Constant *C1, Constant *C2)"
  },
  {
    "label": "getExactLShr()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getExactLShr(Constant *C1, Constant *C2)"
  },
  {
    "label": "getBinOpIdentity()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getBinOpIdentity(unsigned Opcode, Type *Ty)"
  },
  {
    "label": "getBinOpAbsorber()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getBinOpAbsorber(unsigned Opcode, Type *Ty)"
  },
  {
    "label": "getCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getCast(unsigned ops, Constant *C, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getZExtOrBitCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getZExtOrBitCast(Constant *C, Type *Ty)"
  },
  {
    "label": "getSExtOrBitCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSExtOrBitCast(Constant *C, Type *Ty)"
  },
  {
    "label": "getTruncOrBitCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getTruncOrBitCast(Constant *C, Type *Ty)"
  },
  {
    "label": "getPointerCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getPointerCast(Constant *C, Type *Ty)"
  },
  {
    "label": "getPointerBitCastOrAddrSpaceCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getPointerBitCastOrAddrSpaceCast(Constant *C, Type *Ty)"
  },
  {
    "label": "getIntegerCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getIntegerCast(Constant *C, Type *Ty, bool isSigned)"
  },
  {
    "label": "getFPCast()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFPCast(Constant *C, Type *Ty)"
  },
  {
    "label": "isCast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCast()"
  },
  {
    "label": "isCompare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCompare()"
  },
  {
    "label": "hasIndices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasIndices()"
  },
  {
    "label": "isGEPWithNoNotionalOverIndexing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isGEPWithNoNotionalOverIndexing()"
  },
  {
    "label": "getSelect()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getSelect(Constant *C, Constant *V1, Constant *V2, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "get(unsigned Opcode, Constant *C1, Constant *C2, unsigned Flags = 0, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getCompare()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getCompare(unsigned short pred, Constant *C1, Constant *C2, bool OnlyIfReduced = false)"
  },
  {
    "label": "getICmp()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getICmp(unsigned short pred, Constant *LHS, Constant *RHS, bool OnlyIfReduced = false)"
  },
  {
    "label": "getFCmp()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getFCmp(unsigned short pred, Constant *LHS, Constant *RHS, bool OnlyIfReduced = false)"
  },
  {
    "label": "getGetElementPtr()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getGetElementPtr(Type *Ty, Constant *C, ArrayRef<Constant *> IdxList, bool InBounds = false, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getGetElementPtr()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getGetElementPtr(Type *Ty, Constant *C, Constant *Idx, bool InBounds = false, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getGetElementPtr()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getGetElementPtr(Type *Ty, Constant *C, ArrayRef<Value *> IdxList, bool InBounds = false, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getInBoundsGetElementPtr()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getInBoundsGetElementPtr(Type *Ty, Constant *C, ArrayRef<Constant *> IdxList)"
  },
  {
    "label": "getInBoundsGetElementPtr()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getInBoundsGetElementPtr(Type *Ty, Constant *C, Constant *Idx)"
  },
  {
    "label": "getInBoundsGetElementPtr()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getInBoundsGetElementPtr(Type *Ty, Constant *C, ArrayRef<Value *> IdxList)"
  },
  {
    "label": "getExtractElement()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getExtractElement(Constant *Vec, Constant *Idx, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getInsertElement()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getInsertElement(Constant *Vec, Constant *Elt, Constant *Idx, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getShuffleVector()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getShuffleVector(Constant *V1, Constant *V2, Constant *Mask, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getExtractValue()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getExtractValue(Constant *Agg, ArrayRef<unsigned> Idxs, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getInsertValue()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getInsertValue(Constant *Agg, Constant *Val, ArrayRef<unsigned> Idxs, Type *OnlyIfReducedTy = nullptr)"
  },
  {
    "label": "getOpcode()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getOpcode()"
  },
  {
    "label": "getPredicate()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPredicate()"
  },
  {
    "label": "getIndices()",
    "kind": "Method",
    "detail": "Function (ArrayRef<unsigned>)",
    "insertText": "getIndices()"
  },
  {
    "label": "getOpcodeName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getOpcodeName()"
  },
  {
    "label": "getWithOperandReplaced()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getWithOperandReplaced(unsigned OpNo, Constant *Op)"
  },
  {
    "label": "getWithOperands()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getWithOperands(ArrayRef<Constant*> Ops)"
  },
  {
    "label": "getWithOperands()",
    "kind": "Method",
    "detail": "Function (} Constant*)",
    "insertText": "getWithOperands(ArrayRef<Constant *> Ops, Type *Ty, bool OnlyIfReduced = false)"
  },
  {
    "label": "getAsInstruction()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "getAsInstruction()"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "setValueSubclassData(unsigned short D)"
  },
  {
    "label": "setValueSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueSubclassData(D)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<ConstantExpr> : public VariadicOperandTraits<ConstantExpr,1> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ConstantExpr, Constant)"
  },
  {
    "label": "UndefValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndefValue(const UndefValue &)"
  },
  {
    "label": "UndefValue()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "UndefValue(Type *T) : Constant(T, UndefValueVal, nullptr, 0)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} public : UndefValue*)",
    "insertText": "get(Type *T)"
  }
]