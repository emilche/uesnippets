[
  {
    "label": "FConfigCacheIni",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigCacheIni"
  },
  {
    "label": "FConfigFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigFile"
  },
  {
    "label": "FConfigSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigSection"
  },
  {
    "label": "FConfigValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigValue"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFile"
  },
  {
    "label": "FSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSection"
  },
  {
    "label": "FConfigValueReadCallbackId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfigValueReadCallbackId"
  },
  {
    "label": "FIgnoreScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIgnoreScope"
  },
  {
    "label": "UE_WITH_CONFIG_TRACKING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" UObject / NameTypes . h \" # define)",
    "insertText": "UE_WITH_CONFIG_TRACKING(WITH_EDITOR || 0)"
  },
  {
    "label": "FFile()",
    "kind": "Method",
    "detail": "Function (class FConfigFile ; class FConfigSection ; struct FConfigValue ; # endif # if WITH_EDITOR | | UE_WITH_CONFIG_TRACKING namespace UE::ConfigAccessTracking { enum class ELoadType : uint8 { ConfigSystem,LocalIniFile,LocalSingleIniFile,ExternalIniFile,ExternalSingleIniFile,Manual,SuppressReporting,Uninitialized,} ; } # endif # if UE_WITH_CONFIG_TRACKING namespace UE::ConfigAccessTracking { struct FFile : public FRefCountBase {)",
    "insertText": "FFile(const FConfigFile* InConfigFile)"
  },
  {
    "label": "GetFilenameToLoad()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFilenameToLoad()"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "SetAsLoadTypeConfigSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsLoadTypeConfigSystem(FConfigCacheIni& ConfigSystem, FConfigFile& ConfigFile)"
  },
  {
    "label": "FSection()",
    "kind": "Method",
    "detail": "Function (public : const FConfigFile* ConfigFile = nullptr ; FName OverrideFilenameToLoad ; private : FName PlatformName = NAME_None ; FStringView SavedConfigFilePlatformName ; bool bSavedHasConfigFile : 1 ; bool bSavedConfigFileHasPlatformName : 1 ; bool bPlatformNameInitialized : 1 ; bool bOverridePlatformName : 1 ; bool bSavedOverridePlatformName : 1 ; } ; struct FSection : public FRefCountBase {)",
    "insertText": "FSection(FFile& InFileAccess, FStringView InSectionName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FFile> FileAccess ; FNameEntryId SectionName ; } ; using FConfigValueReadCallbackFunc = TFunction<)",
    "insertText": "void(UE::ConfigAccessTracking::FSection* Section, FMinimalName ValueName, const FConfigValue& ConfigValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FConfigValueReadCallbackId { int32 Id = - 1 ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "RemoveConfigValueReadCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConfigValueReadCallback(FConfigValueReadCallbackId DelegateHandle)"
  },
  {
    "label": "FIgnoreScope()",
    "kind": "Method",
    "detail": "Function (struct FIgnoreScope { public :)",
    "insertText": "FIgnoreScope()"
  },
  {
    "label": "OnConfigValueReadInternal()",
    "kind": "Method",
    "detail": "Function (private : bool bPreviousIgnoreReads = false ; } ; namespace Private { std::atomic<int32> ConfigValueReadCallbackQuantity ; void)",
    "insertText": "OnConfigValueReadInternal(UE::ConfigAccessTracking::FSection* Section, FMinimalName ValueName, const FConfigValue& ConfigValue)"
  },
  {
    "label": "OnConfigValueRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigValueRead(UE::ConfigAccessTracking::FSection* Section, FMinimalName ValueName, const FConfigValue& ConfigValue)"
  },
  {
    "label": "OnConfigValueReadInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConfigValueReadInternal(Section, ValueName, ConfigValue)"
  }
]