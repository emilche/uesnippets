[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FProfilerHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProfilerHelper"
  },
  {
    "label": "FBinaryFindIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBinaryFindIndex"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Stats / StatsMisc . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(Profiler, Log, All)"
  },
  {
    "label": "PROFILER_SCOPE_LOG_TIME()",
    "kind": "Method",
    "detail": "Function (# define DEBUG_PROFILER_PERFORMANCE 0 # if DEBUG_PROFILER_PERFORMANCE = = 1 # define)",
    "insertText": "PROFILER_SCOPE_LOG_TIME(arg0,arg1) SCOPE_LOG_TIME(arg0,arg1) #else #define PROFILER_SCOPE_LOG_TIME(arg0,arg1) #endif DECLARE_CYCLE_STAT_EXTERN( TEXT(\"DataGraphOnPaint\"), STAT_DG_OnPaint, STATGROUP_Profiler,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"ProfilerHandleData\"), STAT_PM_HandleProfilerData, STATGROUP_Profiler,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"ProfilerTick\"), STAT_PM_Tick, STATGROUP_Profiler,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"ProfilerMemoryUsage\"),STAT_PM_MemoryUsage, STATGROUP_Profiler,)"
  },
  {
    "label": "ShortenName()",
    "kind": "Method",
    "detail": "Function (enum class EGraphStyles { Line,Combined,InvalidOrMax,} ; class FProfilerHelper { public : FString)",
    "insertText": "ShortenName(const FString& NameToShorten, const int32 Limit = 16)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Result(NameToShorten)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "FString(TEXT(\"...\")) + Result.Right(Limit)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (} return Result ; } } ; class FBinaryFindIndex { public : template<class T> int32)",
    "insertText": "LessEqual(const TArray<T>& Array, const T& Item, const int32 FirstIndex = 0, const int32 LastIndex = INDEX_NONE)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 LocalLastIndex = LastIndex = = INDEX_NONE ? Array .)",
    "insertText": "Num()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 Length = LocalLastIndex - FirstIndex ; int32 Middle = Length ; int32 Offset = FirstIndex ;)",
    "insertText": "while(Middle > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Middle = Length / 2 ;)",
    "insertText": "if(Array[Offset + Middle] <= Item)"
  },
  {
    "label": "GreaterEqual()",
    "kind": "Method",
    "detail": "Function (Offset + = Middle ; } Length - = Middle ; } return Offset ; } template<class T> int32)",
    "insertText": "GreaterEqual(const TArray<T>& Array, const T& Item, const int32 FirstIndex = 0, const int32 LastIndex = INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Middle = Length / 2 ;)",
    "insertText": "if(Array[Offset + Middle] >= Item)"
  }
]