[
  {
    "label": "UVertexColorImportOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVertexColorImportOptions"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "UMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshComponent"
  },
  {
    "label": "SImportVertexColorOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImportVertexColorOptions"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" IDetailCustomization . h \" # include \" SImportVertexColorOptions . generated . h \")",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UVertexColorImportOptions() : UVIndex(0), LODIndex(0), bRed(true), bBlue(true), bGreen(true), bAlpha(true), bImportToInstance(true), NumLODs(0), bCanImportToInstance(false)"
  },
  {
    "label": "CreateColorMask()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "CreateColorMask()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (FColor Mask = FColor::Black ; Mask . R = bRed ? 2 5 5 : 0 ; Mask . B = bBlue ? 2 5 5 : 0 ; Mask . G = bGreen ? 2 5 5 : 0 ; Mask . A = bAlpha ? 2 5 5 : 0 ; return Mask ; } } ; class IDetailsView ; class UMeshComponent ; class SImportVertexColorOptions : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SImportVertexColorOptions)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, WidgetWindow) SLATE_ARGUMENT(FText, FullPath) SLATE_ARGUMENT(UMeshComponent*, Component) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bShouldImport = true ;)",
    "insertText": "if(WidgetWindow.IsValid())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (WidgetWindow .)",
    "insertText": "Pin()->RequestDestroyWindow()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnCancel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnCancel()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldImport()"
  }
]