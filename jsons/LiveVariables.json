[
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "LiveVariables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveVariables"
  },
  {
    "label": "VarInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VarInfo"
  },
  {
    "label": "LiveVariables()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVEVARIABLES_H # define LLVM_CODEGEN_LIVEVARIABLES_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / IndexedMap . h \" # include \" llvm / ADT / SmallSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / SparseBitVector . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / MachineInstr . h \" # include \" llvm / Target / TargetRegisterInfo . h \" namespace llvm { class MachineBasicBlock ; class MachineRegisterInfo ; class LiveVariables : public MachineFunctionPass { public : char ID ;)",
    "insertText": "LiveVariables() : MachineFunctionPass(ID)"
  },
  {
    "label": "initializeLiveVariablesPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeLiveVariablesPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "removeKill()",
    "kind": "Method",
    "detail": "Function (} struct VarInfo { SparseBitVector<> AliveBlocks ; std::vector<MachineInstr*> Kills ; bool)",
    "insertText": "removeKill(MachineInstr *MI)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::vector<MachineInstr*>::iterator I =)",
    "insertText": "find(Kills.begin(), Kills.end(), MI)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Kills .)",
    "insertText": "erase(I)"
  },
  {
    "label": "isLiveIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLiveIn(const MachineBasicBlock &MBB, unsigned Reg, MachineRegisterInfo &MRI)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "HandlePhysRegKill()",
    "kind": "Method",
    "detail": "Function (} ; private : IndexedMap<VarInfo,VirtReg2IndexFunctor> VirtRegInfo ; SparseBitVector<> PHIJoins ; private : MachineFunction* MF ; MachineRegisterInfo* MRI ; const TargetRegisterInfo* TRI ; std::vector<MachineInstr*> PhysRegDef ; std::vector<MachineInstr*> PhysRegUse ; std::vector<SmallVector<unsigned,4>> PHIVarInfo ; DenseMap<MachineInstr*,unsigned> DistanceMap ; bool)",
    "insertText": "HandlePhysRegKill(unsigned Reg, MachineInstr *MI)"
  },
  {
    "label": "HandleRegMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRegMask(const MachineOperand&)"
  },
  {
    "label": "HandlePhysRegUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePhysRegUse(unsigned Reg, MachineInstr *MI)"
  },
  {
    "label": "HandlePhysRegDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePhysRegDef(unsigned Reg, MachineInstr *MI, SmallVectorImpl<unsigned> &Defs)"
  },
  {
    "label": "UpdatePhysRegDefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysRegDefs(MachineInstr *MI, SmallVectorImpl<unsigned> &Defs)"
  },
  {
    "label": "FindLastRefOrPartRef()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "FindLastRefOrPartRef(unsigned Reg)"
  },
  {
    "label": "FindLastPartialDef()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "FindLastPartialDef(unsigned Reg, SmallSet<unsigned,4> &PartDefRegs)"
  },
  {
    "label": "analyzePHINodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePHINodes(const MachineFunction& Fn)"
  },
  {
    "label": "runOnInstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runOnInstr(MachineInstr *MI, SmallVectorImpl<unsigned> &Defs)"
  },
  {
    "label": "runOnBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runOnBlock(MachineBasicBlock *MBB, unsigned NumRegs)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "runOnMachineFunction(MachineFunction &MF)"
  },
  {
    "label": "RegisterDefIsDead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDefIsDead(MachineInstr *MI, unsigned Reg)"
  },
  {
    "label": "replaceKillInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceKillInstruction(unsigned Reg, MachineInstr *OldMI, MachineInstr *NewMI)"
  },
  {
    "label": "addVirtualRegisterKilled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVirtualRegisterKilled(unsigned IncomingReg, MachineInstr *MI, bool AddIfNotFound = false)"
  },
  {
    "label": "removeVirtualRegisterKilled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "removeVirtualRegisterKilled(unsigned reg, MachineInstr *MI)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool Removed = false ;)",
    "insertText": "for(unsigned i = 0, e = MI->getNumOperands(); i != e; ++i)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (MachineOperand& MO = MI ->)",
    "insertText": "getOperand(i)"
  },
  {
    "label": "setIsKill()",
    "kind": "Method",
    "detail": "Function (MO .)",
    "insertText": "setIsKill(false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Removed = true ; break ; } })",
    "insertText": "assert(Removed && \"Register is not used by this instruction!\")"
  },
  {
    "label": "addVirtualRegisterDead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVirtualRegisterDead(unsigned IncomingReg, MachineInstr *MI, bool AddIfNotFound = false)"
  },
  {
    "label": "removeVirtualRegisterDead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "removeVirtualRegisterDead(unsigned reg, MachineInstr *MI)"
  },
  {
    "label": "setIsDead()",
    "kind": "Method",
    "detail": "Function (MO .)",
    "insertText": "setIsDead(false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Removed = true ; break ; } })",
    "insertText": "assert(Removed && \"Register is not defined by this instruction!\")"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (VirtRegInfo .)",
    "insertText": "clear()"
  },
  {
    "label": "getVarInfo()",
    "kind": "Method",
    "detail": "Function (} VarInfo&)",
    "insertText": "getVarInfo(unsigned RegIdx)"
  },
  {
    "label": "MarkVirtRegAliveInBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkVirtRegAliveInBlock(VarInfo& VRInfo, MachineBasicBlock* DefBlock, MachineBasicBlock *BB)"
  },
  {
    "label": "MarkVirtRegAliveInBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkVirtRegAliveInBlock(VarInfo& VRInfo, MachineBasicBlock* DefBlock, MachineBasicBlock *BB, std::vector<MachineBasicBlock*> &WorkList)"
  },
  {
    "label": "HandleVirtRegDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtRegDef(unsigned reg, MachineInstr *MI)"
  },
  {
    "label": "HandleVirtRegUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtRegUse(unsigned reg, MachineBasicBlock *MBB, MachineInstr *MI)"
  },
  {
    "label": "isLiveIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLiveIn(unsigned Reg, const MachineBasicBlock &MBB)"
  },
  {
    "label": "isLiveOut()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLiveOut(unsigned Reg, const MachineBasicBlock &MBB)"
  },
  {
    "label": "addNewBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNewBlock(MachineBasicBlock *BB, MachineBasicBlock *DomBB, MachineBasicBlock *SuccBB)"
  },
  {
    "label": "isPHIJoin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPHIJoin(unsigned Reg)"
  },
  {
    "label": "setPHIJoin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPHIJoin(unsigned Reg)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (PHIJoins .)",
    "insertText": "set(Reg)"
  }
]