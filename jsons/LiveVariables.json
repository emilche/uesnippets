[
  {
    "label": "computes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "computes"
  },
  {
    "label": "computes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "computes"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "LiveVariables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveVariables"
  },
  {
    "label": "VarInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VarInfo"
  },
  {
    "label": "isLiveIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLiveIn(const MachineBasicBlock &MBB,\n                  unsigned Reg,\n                  MachineRegisterInfo &MRI)"
  },
  {
    "label": "HandlePhysRegKill()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePhysRegKill(unsigned Reg, MachineInstr *MI)"
  },
  {
    "label": "HandleRegMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRegMask(const MachineOperand&)"
  },
  {
    "label": "HandlePhysRegUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePhysRegUse(unsigned Reg, MachineInstr *MI)"
  },
  {
    "label": "HandlePhysRegDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePhysRegDef(unsigned Reg, MachineInstr *MI,\n                        SmallVectorImpl<unsigned> &Defs)"
  },
  {
    "label": "UpdatePhysRegDefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysRegDefs(MachineInstr *MI, SmallVectorImpl<unsigned> &Defs)"
  },
  {
    "label": "analyzePHINodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePHINodes(const MachineFunction& Fn)"
  },
  {
    "label": "runOnInstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runOnInstr(MachineInstr *MI, SmallVectorImpl<unsigned> &Defs)"
  },
  {
    "label": "runOnBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runOnBlock(MachineBasicBlock *MBB, unsigned NumRegs)"
  },
  {
    "label": "replaceKillInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceKillInstruction(unsigned Reg, MachineInstr *OldMI,\n                              MachineInstr *NewMI)"
  },
  {
    "label": "removeVirtualRegistersKilled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeVirtualRegistersKilled(MachineInstr *MI)"
  },
  {
    "label": "MarkVirtRegAliveInBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkVirtRegAliveInBlock(VarInfo& VRInfo, MachineBasicBlock* DefBlock,\n                               MachineBasicBlock *BB)"
  },
  {
    "label": "MarkVirtRegAliveInBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkVirtRegAliveInBlock(VarInfo& VRInfo, MachineBasicBlock* DefBlock,\n                               MachineBasicBlock *BB,\n                               std::vector<MachineBasicBlock*> &WorkList)"
  },
  {
    "label": "HandleVirtRegDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtRegDef(unsigned reg, MachineInstr *MI)"
  },
  {
    "label": "HandleVirtRegUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtRegUse(unsigned reg, MachineBasicBlock *MBB,\n                        MachineInstr *MI)"
  },
  {
    "label": "isLiveOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLiveOut(unsigned Reg, const MachineBasicBlock &MBB)"
  },
  {
    "label": "addNewBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNewBlock(MachineBasicBlock *BB,\n                   MachineBasicBlock *DomBB,\n                   MachineBasicBlock *SuccBB)"
  }
]