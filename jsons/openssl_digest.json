[
  {
    "label": "OpenSSLDigest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLDigest"
  },
  {
    "label": "OpenSSLDigest()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_OPENSSL_DIGEST_H_ # define RTC_BASE_OPENSSL_DIGEST_H_ # include<openssl / ossl_typ . h> # include<stddef . h> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / message_digest . h \" namespace rtc { class OpenSSLDigest final : public MessageDigest { public :)",
    "insertText": "OpenSSLDigest(absl::string_view algorithm)"
  },
  {
    "label": "OpenSSLDigest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OpenSSLDigest()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const void* buf, size_t len)"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Finish(void* buf, size_t len)"
  },
  {
    "label": "GetDigestEVP()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDigestEVP(absl::string_view algorithm, const EVP_MD** md)"
  },
  {
    "label": "GetDigestName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDigestName(const EVP_MD* md, std::string* algorithm)"
  },
  {
    "label": "GetDigestSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDigestSize(absl::string_view algorithm, size_t* len)"
  }
]