[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___BIT_BYTESWAP_H # define _LIBCPP___BIT_BYTESWAP_H # include<__concepts / arithmetic . h> # include<__config> # include<cstdint> # include<cstdlib> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 20 template <integral _Tp> _LIBCPP_HIDE_FROM_ABI constexpr _Tp byteswap(_Tp __val)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(sizeof(_Tp) == 4)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(sizeof(_Tp) == 8)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_HAS_NO_INT128 } else if)",
    "insertText": "constexpr(sizeof(_Tp) == 16)"
  },
  {
    "label": "__has_builtin()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "__has_builtin(__builtin_bswap128) return __builtin_bswap128(__val)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<)",
    "insertText": "_Tp(byteswap(static_cast<uint64_t>(__val))) << 64 | static_cast<_Tp>(byteswap(static_cast<uint64_t>(__val >> 64)))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif # endif } else {)",
    "insertText": "static_assert(sizeof(_Tp) == 0, \"byteswap is unimplemented for integral types of this size\")"
  }
]