[
  {
    "label": "FStereoLayerVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStereoLayerVS"
  },
  {
    "label": "FStereoLayerPS_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStereoLayerPS_Base"
  },
  {
    "label": "FStereoLayerPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStereoLayerPS"
  },
  {
    "label": "FStereoLayerPS_External",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStereoLayerPS_External"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" GlobalShader . h \" # include \" ShaderParameterUtils . h \" class FStereoLayerVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FStereoLayerVS,Global,ENGINE_API)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InQuadAdjust .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InQuadAdjust\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InUVAdjust .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InUVAdjust\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InViewProjection .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InViewProjection\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InWorld .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InWorld\"))"
  },
  {
    "label": "FStereoLayerVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStereoLayerVS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FVector2D QuadSize, FBox2D UVRect, const FMatrix& ViewProjection, const FMatrix& World)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InQuadAdjust, FVector2f(QuadSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InUVAdjust.IsBound())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FVector4f UVAdjust ; UVAdjust . X = static_cast<)",
    "insertText": "float(UVRect.Min.X)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UVAdjust . Y = static_cast<)",
    "insertText": "float(UVRect.Min.Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UVAdjust . Z = static_cast<)",
    "insertText": "float(UVRect.Max.X - UVRect.Min.X)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (UVAdjust . W = static_cast<)",
    "insertText": "float(UVRect.Max.Y - UVRect.Min.Y)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InUVAdjust, UVAdjust)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InViewProjection.IsBound())"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InViewProjection, (FMatrix44f)ViewProjection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InWorld.IsBound())"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InWorld, (FMatrix44f)World)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InQuadAdjust)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InUVAdjust)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InViewProjection)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InWorld)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FStereoLayerPS_Base : public FGlobalShader {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FStereoLayerPS_Base, NonVirtual)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, InTexture, InTextureSampler, SamplerStateRHI, TextureRHI)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (const float OpaqueVal = bIsOpaque ? 1 . 0 : 0 . 0 ;)",
    "insertText": "SetShaderValue(BatchedParameters, InIsOpaque, OpaqueVal)"
  },
  {
    "label": "FStereoLayerPS_Base()",
    "kind": "Method",
    "detail": "Function (} } protected :)",
    "insertText": "FStereoLayerPS_Base(const ShaderMetaType::CompiledShaderInitializerType& Initializer, const TCHAR* TextureParamName) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTexture .)",
    "insertText": "Bind(Initializer.ParameterMap, TextureParamName, SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTextureSampler .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InTextureSampler\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InIsOpaque .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InIsOpaque\"))"
  },
  {
    "label": "FStereoLayerPS_Base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStereoLayerPS_Base()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTextureSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InIsOpaque)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FStereoLayerPS : public FStereoLayerPS_Base {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FStereoLayerPS,Global,ENGINE_API)"
  },
  {
    "label": "FStereoLayerPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStereoLayerPS()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FStereoLayerPS_External : public FStereoLayerPS_Base {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FStereoLayerPS_External, Global, ENGINE_API)"
  },
  {
    "label": "FStereoLayerPS_External()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStereoLayerPS_External()"
  }
]