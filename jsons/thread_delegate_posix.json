[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_THREAD_DELEGATE_POSIX_H_ # define BASE_PROFILER_THREAD_DELEGATE_POSIX_H_ # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / profiler / sampling_profiler_thread_token . h \" # include \" base / profiler / thread_delegate . h \" # include \" base / threading / platform_thread . h \" namespace base { class BASE_EXPORT ThreadDelegatePosix : public ThreadDelegate { public : std::unique_ptr<ThreadDelegatePosix>)",
    "insertText": "Create(SamplingProfilerThreadToken thread_token)"
  },
  {
    "label": "ThreadDelegatePosix()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadDelegatePosix()"
  },
  {
    "label": "ThreadDelegatePosix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadDelegatePosix(const ThreadDelegatePosix&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadDelegatePosix&)",
    "insertText": "operator(const ThreadDelegatePosix&)"
  },
  {
    "label": "GetThreadId()",
    "kind": "Method",
    "detail": "Function (PlatformThreadId)",
    "insertText": "GetThreadId()"
  },
  {
    "label": "GetStackBaseAddress()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetStackBaseAddress()"
  },
  {
    "label": "GetRegistersToRewrite()",
    "kind": "Method",
    "detail": "Function (std::vector<uintptr_t*>)",
    "insertText": "GetRegistersToRewrite(RegisterContext* thread_context)"
  },
  {
    "label": "ThreadDelegatePosix()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ThreadDelegatePosix(PlatformThreadId id, uintptr_t base_address)"
  }
]