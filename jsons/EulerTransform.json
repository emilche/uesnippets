[
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBaseStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseStructure"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEulerTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEulerTransform"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" UObject / ObjectMacros . h \" # include \" EulerTransform . generated . h \" class UScriptStruct ; template<class T> struct TBaseStructure ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (XYZ,XZY,YXZ,YZX,ZXY,ZYX } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FEulerTransform()",
    "kind": "Method",
    "detail": "Function (const FEulerTransform Identity ;)",
    "insertText": "FEulerTransform() : Location(ForceInitToZero) , Rotation(ForceInitToZero) , Scale(FVector::OneVector)"
  },
  {
    "label": "FEulerTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEulerTransform(const FVector& InLocation, const FRotator& InRotation, const FVector& InScale) : Location(InLocation) , Rotation(InRotation) , Scale(InScale)"
  },
  {
    "label": "FEulerTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEulerTransform(const FRotator& InRotation, const FVector& InLocation, const FVector& InScale) : Location(InLocation) , Rotation(InRotation) , Scale(InScale)"
  },
  {
    "label": "FEulerTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEulerTransform(const FTransform& InTransform) : Location(InTransform.GetLocation()) , Rotation(InTransform.GetRotation().Rotator()) , Scale(InTransform.GetScale3D())"
  },
  {
    "label": "FromFTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromFTransform(const FTransform& InTransform)"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (Location = InTransform .)",
    "insertText": "GetLocation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (Rotation = InTransform .)",
    "insertText": "GetRotation().Rotator()"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (Scale = InTransform .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FEulerTransform& Other, FReal Tolerance = KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Rotator()",
    "kind": "Method",
    "detail": "Function (} const FRotator&)",
    "insertText": "Rotator()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (Location = InValue ; } void)",
    "insertText": "SetRotation(const FQuat& InValue)"
  },
  {
    "label": "SetRotator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotator(const FRotator& InValue)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (Rotation = InValue ; } void)",
    "insertText": "SetScale3D(const FVector& InValue)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (Scale = InValue ; } void)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TBaseStructure<FEulerTransform> { UScriptStruct*)",
    "insertText": "Get()"
  }
]