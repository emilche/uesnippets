[
  {
    "label": "FTrackDetailsWidgetCustomizations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackDetailsWidgetCustomizations"
  },
  {
    "label": "STrackDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackDetails"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" IDetailsView . h \" # include \" Misc / NotifyHook . h \" # include \" PropertyEditorDelegates . h \" # include \" PropertyEditorModule . h \" # include \" PropertyPermissionList . h \" # include \" Sequencer . h \" # include \" Widgets / SCompoundWidget . h \" struct FTrackDetailsWidgetCustomizations { TMap<UStruct*,FOnGetDetailCustomizationInstance> DetailCustomizationInstances ; TMap<FName,FOnGetPropertyTypeCustomizationInstance> PropertyTypeCustomizationInstances ; } ; class STrackDetails : public SCompoundWidget,public FNotifyHook { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STrackDetails)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TOptional<FDetailsViewArgs>, ViewArgs) SLATE_ARGUMENT(FTrackDetailsWidgetCustomizations, Customizations) SLATE_ARGUMENT(bool, NotifyMovieSceneDataChanged) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TArray<TWeakObjectPtr<>>& InWeakObjects, const TWeakPtr<FSequencer>& InWeakSequencer)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (WeakObjectsToModify = InWeakObjects ; WeakSequencer = InWeakSequencer ; bNotifyMovieSceneDataChanged = InArgs . _NotifyMovieSceneDataChanged ; const TSharedPtr<FSequencer> Sequencer = InWeakSequencer .)",
    "insertText": "Pin()"
  },
  {
    "label": "FPropertyEditorModule()",
    "kind": "Method",
    "detail": "Function (FPropertyEditorModule& PropertyEditorModule = FModuleManager::GetModuleChecked<)",
    "insertText": "FPropertyEditorModule(TEXT(\"PropertyEditor\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FDetailsViewArgs DetailsViewArgs ;)",
    "insertText": "if(InArgs._ViewArgs.IsSet())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (DetailsViewArgs = InArgs . _ViewArgs .)",
    "insertText": "GetValue()"
  },
  {
    "label": "CreateDetailView()",
    "kind": "Method",
    "detail": "Function (} else { DetailsViewArgs . bAllowSearch = false ; DetailsViewArgs . bCustomFilterAreaLocation = true ; DetailsViewArgs . bCustomNameAreaLocation = true ; DetailsViewArgs . bHideSelectionTip = true ; DetailsViewArgs . bLockable = false ; DetailsViewArgs . bSearchInitialKeyFocus = true ; DetailsViewArgs . bUpdatesFromSelection = false ; DetailsViewArgs . bShowOptions = false ; DetailsViewArgs . bShowModifiedPropertiesOption = false ; DetailsViewArgs . bShowScrollBar = false ; DetailsViewArgs . NotifyHook = this ; DetailsViewArgs . ColumnWidth = 0 . 4 5 f ; } DetailsView = PropertyEditorModule .)",
    "insertText": "CreateDetailView(DetailsViewArgs)"
  },
  {
    "label": "RegisterInstancedCustomPropertyLayout()",
    "kind": "Method",
    "detail": "Function (DetailsView ->)",
    "insertText": "RegisterInstancedCustomPropertyLayout(Instance.Key, Instance.Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const TPair<FName, FOnGetPropertyTypeCustomizationInstance>& Instance : InArgs._Customizations.PropertyTypeCustomizationInstances)"
  },
  {
    "label": "RegisterInstancedCustomPropertyTypeLayout()",
    "kind": "Method",
    "detail": "Function (DetailsView ->)",
    "insertText": "RegisterInstancedCustomPropertyTypeLayout(Instance.Key, Instance.Value)"
  },
  {
    "label": "SetIsPropertyVisibleDelegate()",
    "kind": "Method",
    "detail": "Function (} DetailsView ->)",
    "insertText": "SetIsPropertyVisibleDelegate(FIsPropertyVisible::CreateLambda([](const FPropertyAndParent& PropertyAndParent) { return FPropertyEditorPermissionList::Get().DoesPropertyPassFilter(PropertyAndParent.Property.GetOwnerStruct(), PropertyAndParent.Property.GetFName()); }))"
  },
  {
    "label": "OnInitializeDetailsPanel()",
    "kind": "Method",
    "detail": "Function (Sequencer ->)",
    "insertText": "OnInitializeDetailsPanel().Broadcast(DetailsView.ToSharedRef(), Sequencer.ToSharedRef())"
  },
  {
    "label": "SetObjects()",
    "kind": "Method",
    "detail": "Function (DetailsView ->)",
    "insertText": "SetObjects(InWeakObjects)"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (ChildSlot [ DetailsView .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(!Sequencer->IsReadOnly())"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPreChange(FProperty* const InPropertyAboutToChange)"
  },
  {
    "label": "ModifyObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyObjects()"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPreChange(FEditPropertyChain* const InPropertyAboutToChange)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& InPropertyChangedEvent, FProperty* const InPropertyThatChanged)"
  },
  {
    "label": "NotifyMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (Sequencer ->)",
    "insertText": "NotifyMovieSceneDataChanged(EMovieSceneDataChangeType::TrackValueChanged)"
  },
  {
    "label": "GetDetailsView()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<IDetailsView>)",
    "insertText": "GetDetailsView()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (WeakObject ->)",
    "insertText": "Modify()"
  }
]