[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIORequestBSDSocket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIORequestBSDSocket"
  },
  {
    "label": "FIOAccessBSDSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOAccessBSDSocket"
  },
  {
    "label": "FStorageTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStorageTraits"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # if PLATFORM_HAS_BSD_SOCKETS # include \" Containers / UnrealString . h \" # include \" EventLoop / BSDSocket / BSDSocketTypes . h \" # include \" EventLoop / IEventLoopIOManager . h \" # include \" EventLoop / EventLoopManagedStorage . h \" # include \" Templates / Function . h \" namespace UE::EventLoop { enum class ESocketIoRequestStatus : uint8 { Ok,NoResources,Invalid,} ; using FSocketIOCallback = TUniqueFunction<)",
    "insertText": "void(SOCKET Socket, ESocketIoRequestStatus Status, EIOFlags SignaledFlags)"
  },
  {
    "label": "FIOAccessBSDSocket()",
    "kind": "Method",
    "detail": "Function (using FSocketIORequestDestroyedCallback = FManagedStorageOnRemoveComplete ; struct FIORequestBSDSocket { SOCKET Socket = INVALID_SOCKET ; EIOFlags Flags = EIOFlags::None ; FSocketIOCallback Callback ; } ; class FIOAccessBSDSocket final : public FNoncopyable { public : struct FStorageTraits : public FManagedStorageDefaultTraits { using FExternalHandle = FIORequestHandle ; } ; using FStorageType = TManagedStorage<FIORequestBSDSocket,FStorageTraits> ;)",
    "insertText": "FIOAccessBSDSocket(FStorageType& InIORequestStorage) : IORequestStorage(InIORequestStorage)"
  },
  {
    "label": "CreateSocketIORequest()",
    "kind": "Method",
    "detail": "Function (} FIORequestHandle)",
    "insertText": "CreateSocketIORequest(FIORequestBSDSocket&& Request)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} return IORequestStorage .)",
    "insertText": "Add({MoveTemp(Request)})"
  },
  {
    "label": "DestroyIORequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyIORequest(FIORequestHandle& Handle, FSocketIORequestDestroyedCallback&& OnDestroyComplete = FSocketIORequestDestroyedCallback())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (IORequestStorage .)",
    "insertText": "Remove(Handle, MoveTemp(OnDestroyComplete))"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} private : FStorageType& IORequestStorage ; } ; } FString)",
    "insertText": "LexToString(UE::EventLoop::ESocketIoRequestStatus Status)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  }
]