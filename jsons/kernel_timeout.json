[
  {
    "label": "Futex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Futex"
  },
  {
    "label": "Waiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Waiter"
  },
  {
    "label": "KernelTimeout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KernelTimeout"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "KernelTimeout()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_INTERNAL_KERNEL_TIMEOUT_H_ # define ABSL_SYNCHRONIZATION_INTERNAL_KERNEL_TIMEOUT_H_ # include<time . h> # include<algorithm> # include<limits> # include \" absl / base / internal / raw_logging . h \" # include \" absl / time / clock . h \" # include \" absl / time / time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace synchronization_internal { class Futex ; class Waiter ; class KernelTimeout { public :)",
    "insertText": "KernelTimeout(absl::Time t) : ns_(MakeNs(t))"
  },
  {
    "label": "KernelTimeout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "KernelTimeout() : ns_(0)"
  },
  {
    "label": "Never()",
    "kind": "Method",
    "detail": "Function (} KernelTimeout)",
    "insertText": "Never()"
  },
  {
    "label": "MakeNs()",
    "kind": "Method",
    "detail": "Function (private : int64_t ns_ ; int64_t)",
    "insertText": "MakeNs(absl::Time t)"
  },
  {
    "label": "ToUnixNanos()",
    "kind": "Method",
    "detail": "Function (int64_t x =)",
    "insertText": "ToUnixNanos(t)"
  },
  {
    "label": "kInfinite()",
    "kind": "Method",
    "detail": "Function (DWord)",
    "insertText": "kInfinite(std::numeric_limits<DWord>::max)()"
  },
  {
    "label": "max_nanos()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "max_nanos(std::numeric_limits<int64_t>::max)()"
  },
  {
    "label": "ms_from_now()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ms_from_now((std::min)(max_nanos, static_cast<uint64_t>(ns_ - now)) + 999999u)"
  },
  {
    "label": "MakeAbsTimespec()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } # endif class Futex ; class Waiter ; } ; struct timespec)",
    "insertText": "MakeAbsTimespec()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64_t n = ns_ ; const int64_t kNanosPerSecond = 1 0 0 0* 1 0 0 0* 1 0 0 0 ;)",
    "insertText": "if(n == 0)"
  },
  {
    "label": "ABSL_RAW_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_RAW_LOG(ERROR, \"Tried to create a timespec from a non-timeout; never do this.\")"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n(std::numeric_limits<int64_t>::max)()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(n < 0)"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (struct timespec abstime ; int64_t)",
    "insertText": "seconds(std::min)(n / kNanosPerSecond, int64_t{(std::numeric_limits<time_t>::max)()})"
  },
  {
    "label": "time_t()",
    "kind": "Method",
    "detail": "Function (abstime . tv_sec = static_cast<)",
    "insertText": "time_t(seconds)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (abstime . tv_nsec = static_cast<)",
    "insertText": "decltype(abstime.tv_nsec)>(n % kNanosPerSecond)"
  }
]