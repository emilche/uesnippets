[
  {
    "label": "ClosestSurfacePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClosestSurfacePoint"
  },
  {
    "label": "PointAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointAccessor"
  },
  {
    "label": "LeafOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LeafOp"
  },
  {
    "label": "NodeOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeOp"
  },
  {
    "label": "ClosestPointDist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClosestPointDist"
  },
  {
    "label": "UpdatePoints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UpdatePoints"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const GridT& grid, float isovalue = 0.0,\n        InterrupterT* interrupter = nullptr)"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "search(const std::vector<Vec3R>& points, std::vector<float>& distances)"
  },
  {
    "label": "searchAndReplace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "searchAndReplace(std::vector<Vec3R>& points, std::vector<float>& distances)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initialize(const GridT&, float isovalue, InterrupterT*)"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "search(std::vector<Vec3R>&, std::vector<float>&, bool transformPoints)"
  },
  {
    "label": "LeafOp()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LeafOp(std::vector<Vec4R>& leafBoundingSpheres,\n        const std::vector<const Index32LeafT*>& leafNodes,\n        const math::Transform& transform,\n        const PointList& surfacePointList)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(bool threaded = true)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(bool threaded = true)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(bool threaded = true)"
  },
  {
    "label": "UpdatePoints()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "UpdatePoints(\n        const Vec4s& sphere,\n        const std::vector<Vec3R>& points,\n        std::vector<float>& distances,\n        std::vector<unsigned char>& mask,\n        bool overlapping)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(bool threaded = true)"
  },
  {
    "label": "mtRand()",
    "kind": "Method",
    "detail": "Function (RandGen)",
    "insertText": "mtRand(/*seed=*/0)"
  },
  {
    "label": "ptnAcc()",
    "kind": "Method",
    "detail": "Function (v2s_internal::PointAccessor)",
    "insertText": "ptnAcc(instancePoints)"
  },
  {
    "label": "scatter()",
    "kind": "Method",
    "detail": "Function (InterrupterT>)",
    "insertText": "scatter(\n            ptnAcc, scatterCount, mtRand, 1.0, interrupter)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (v2s_internal::UpdatePoints)",
    "insertText": "op(\n            sphere, instancePoints, instanceRadius, instanceMask, overlapping)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (BoolTreeT)",
    "insertText": "mask(false)"
  },
  {
    "label": "idxLeafs()",
    "kind": "Method",
    "detail": "Function (Index32LeafManagerT)",
    "insertText": "idxLeafs(*mIdxTreePt)"
  },
  {
    "label": "leafBS()",
    "kind": "Method",
    "detail": "Function (v2s_internal::LeafOp<Index32LeafT>)",
    "insertText": "leafBS(\n        mLeafBoundingSpheres, mLeafNodes, transform, mSurfacePointList)"
  },
  {
    "label": "nodeBS()",
    "kind": "Method",
    "detail": "Function (v2s_internal::NodeOp)",
    "insertText": "nodeBS(mNodeBoundingSpheres, mLeafRanges, mLeafBoundingSpheres)"
  },
  {
    "label": "cpd()",
    "kind": "Method",
    "detail": "Function (v2s_internal::ClosestPointDist<Index32LeafT>)",
    "insertText": "cpd(points, distances, mSurfacePointList,\n        mLeafNodes, mLeafRanges, mLeafBoundingSpheres, mNodeBoundingSpheres,\n        mMaxNodeLeafs, transformPoints)"
  },
  {
    "label": "search()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "search(points, distances, true)"
  }
]