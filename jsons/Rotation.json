[
  {
    "label": "_FQuat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_FQuat"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRotation"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Real . h \" # include \" Chaos / Vector . h \" # include \" Chaos / Matrix . h \" # if ! COMPILE_WITHOUT_UNREAL_SUPPORT # include \" Math / Quat . h \" # include \" Math / RotationMatrix . h \" # else # include<array> # include<cmath> struct _FQuat { public : const Chaos::FReal)",
    "insertText": "operator(const int32 i)"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (_FQuat Quat ; Quat . angles = InAngles ; return Quat ; } } ; using FQuat = _FQuat ; # endif namespace Chaos { template<class T,int d> class TRotation { private :)",
    "insertText": "TRotation()"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class TRotation<FRealSingle,3> : public UE::Math::TQuat<FRealSingle> { using BaseQuat = UE::Math::TQuat<FRealSingle> ; public :)",
    "insertText": "TRotation() : BaseQuat()"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRotation(const BaseQuat& Quat) : BaseQuat(Quat)"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRotation(const FMatrix44f& Matrix) : BaseQuat(Matrix)"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRotation(const FMatrix44d& Matrix) : BaseQuat(FMatrix44f(Matrix))"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (} template<OtherType>)",
    "insertText": "TRotation(const UE::Math::TQuat<OtherType>& Other) : BaseQuat((FRealSingle)Other.X, (FRealSingle)Other.Y, (FRealSingle)Other.Z, (FRealSingle)Other.W)"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (} PMatrix<FRealSingle,3,3>)",
    "insertText": "ToMatrix()"
  },
  {
    "label": "ToMatrix()",
    "kind": "Method",
    "detail": "Function (PMatrix<FRealSingle,3,3> R ;)",
    "insertText": "ToMatrix(R)"
  },
  {
    "label": "GetAngle()",
    "kind": "Method",
    "detail": "Function (OutAngle =)",
    "insertText": "GetAngle()"
  },
  {
    "label": "GetRotationAxisSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRotationAxisSafe(TVector<FRealSingle, 3>& OutAxis, const TVector<FRealSingle, 3>& DefaultAxis, FRealSingle EpsilionSq = 1e-6f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FRealSingle LenSq = X* X + Y* Y + Z* Z ;)",
    "insertText": "if(LenSq > EpsilionSq)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (FRealSingle InvLen =)",
    "insertText": "InvSqrt(LenSq)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (OutAxis = TVector<)",
    "insertText": "FRealSingle(X * InvLen, Y * InvLen, Z * InvLen)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (const FRealSingle x2 = X + X ; const FRealSingle y2 = Y + Y ; const FRealSingle z2 = Z + Z ; const FRealSingle xx = X* x2 ; const FRealSingle xy = X* y2 ; const FRealSingle xz = X* z2 ; const FRealSingle yy = Y* y2 ; const FRealSingle yz = Y* z2 ; const FRealSingle zz = Z* z2 ; const FRealSingle wx = W* x2 ; const FRealSingle wy = W* y2 ; const FRealSingle wz = W* z2 ; OutX = TVector<)",
    "insertText": "FRealSingle(1.0f - (yy + zz), xy + wz, xz - wy)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (OutY = TVector<)",
    "insertText": "FRealSingle(xy - wz, 1.0f - (xx + zz), yz + wx)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (OutZ = TVector<)",
    "insertText": "FRealSingle(xz + wy, yz - wx, 1.0f - (xx + yy))"
  },
  {
    "label": "ToSwingTwistX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToSwingTwistX(BaseQuat& OutSwing, BaseQuat& OutTwist)"
  },
  {
    "label": "OutTwist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutTwist(X != 0.0f)? BaseQuat(X, 0, 0, W).GetNormalized()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (OutSwing =* this* OutTwist .)",
    "insertText": "Inverse()"
  },
  {
    "label": "GetAbsMax()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "GetAbsMax()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "DotProduct(const TRotation<FRealSingle, 3>& L, const TRotation<FRealSingle, 3>& R)"
  },
  {
    "label": "Conjugate()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealSingle,3>)",
    "insertText": "Conjugate(const ::Chaos::TRotation<FRealSingle, 3>& InR)"
  },
  {
    "label": "Negate()",
    "kind": "Method",
    "detail": "Function (TRotation<FRealSingle,3>)",
    "insertText": "Negate(const ::Chaos::TRotation<FRealSingle, 3>& InR)"
  },
  {
    "label": "FromIdentity()",
    "kind": "Method",
    "detail": "Function (TRotation<FRealSingle,3>)",
    "insertText": "FromIdentity()"
  },
  {
    "label": "FromElements()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealSingle,3>)",
    "insertText": "FromElements(const FRealSingle X, const FRealSingle Y, const FRealSingle Z, const FRealSingle W)"
  },
  {
    "label": "BaseQuat()",
    "kind": "Method",
    "detail": "Function (using FQuatReal = BaseQuat::FReal ; return)",
    "insertText": "BaseQuat((FQuatReal)X, (FQuatReal)Y, (FQuatReal)Z, (FQuatReal)W)"
  },
  {
    "label": "FromElements()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealSingle,3>)",
    "insertText": "FromElements(const ::Chaos::TVector<FRealSingle, 3>& V, const FRealSingle W)"
  },
  {
    "label": "FromAxisAngle()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealSingle,3>)",
    "insertText": "FromAxisAngle(const ::Chaos::TVector<FRealSingle, 3>& Axis, const FRealSingle AngleRad)"
  },
  {
    "label": "FromVector()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealSingle,3>)",
    "insertText": "FromVector(const ::Chaos::TVector<FRealSingle, 3>& V)"
  },
  {
    "label": "FromRotatedVector()",
    "kind": "Method",
    "detail": "Function (TRotation<FRealSingle,3>)",
    "insertText": "FromRotatedVector(const ::Chaos::TVector<FRealSingle, 3>& InitialVector, const ::Chaos::TVector<FRealSingle, 3>& FinalVector)"
  },
  {
    "label": "CalculateAngularVelocity1()",
    "kind": "Method",
    "detail": "Function (TVector<FRealSingle,3>)",
    "insertText": "CalculateAngularVelocity1(const TRotation<FRealSingle, 3>& R0, const TRotation<FRealSingle, 3>& InR1, const FRealSingle InDt)"
  },
  {
    "label": "CalculateAngularVelocity2()",
    "kind": "Method",
    "detail": "Function (TVector<FRealSingle,3>)",
    "insertText": "CalculateAngularVelocity2(const TRotation<FRealSingle, 3>& R0, const TRotation<FRealSingle, 3>& InR1, const FRealSingle InDt)"
  },
  {
    "label": "CalculateAngularVelocity()",
    "kind": "Method",
    "detail": "Function (TVector<FRealSingle,3>)",
    "insertText": "CalculateAngularVelocity(const TRotation<FRealSingle, 3>& InR0, const TRotation<FRealSingle, 3>& InR1, const FRealSingle InDt)"
  },
  {
    "label": "CalculateAngularDelta()",
    "kind": "Method",
    "detail": "Function (} TVector<FRealSingle,3>)",
    "insertText": "CalculateAngularDelta(const TRotation<FRealSingle, 3>& InR0, const TRotation<FRealSingle, 3>& InR1)"
  },
  {
    "label": "IntegrateRotationWithAngularVelocity()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealSingle,3>)",
    "insertText": "IntegrateRotationWithAngularVelocity(const TRotation<FRealSingle, 3>& InR0, const TVector<FRealSingle, 3>& InW, const FRealSingle InDt)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNearlyEqual(const TRotation<FRealSingle, 3>& A, const TRotation<FRealSingle, 3>& B, const FRealSingle Epsilon)"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRotation(const FMatrix44d& Matrix) : BaseQuat(Matrix)"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRotation(const FMatrix44f& Matrix) : BaseQuat(FMatrix44d(Matrix))"
  },
  {
    "label": "TRotation()",
    "kind": "Method",
    "detail": "Function (} template<OtherType>)",
    "insertText": "TRotation(const UE::Math::TQuat<OtherType>& Other) : BaseQuat((FRealDouble)Other.X, (FRealDouble)Other.Y, (FRealDouble)Other.Z, (FRealDouble)Other.W)"
  },
  {
    "label": "GetRotationAxisSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetRotationAxisSafe(TVector<FRealDouble, 3>& OutAxis, const TVector<FRealDouble, 3>& DefaultAxis, FRealDouble EpsilionSq = 1e-6f)"
  },
  {
    "label": "FRealDouble()",
    "kind": "Method",
    "detail": "Function (OutAxis = TVector<)",
    "insertText": "FRealDouble(X * InvLen, Y * InvLen, Z * InvLen)"
  },
  {
    "label": "FRealDouble()",
    "kind": "Method",
    "detail": "Function (const FRealDouble x2 = X + X ; const FRealDouble y2 = Y + Y ; const FRealDouble z2 = Z + Z ; const FRealDouble xx = X* x2 ; const FRealDouble xy = X* y2 ; const FRealDouble xz = X* z2 ; const FRealDouble yy = Y* y2 ; const FRealDouble yz = Y* z2 ; const FRealDouble zz = Z* z2 ; const FRealDouble wx = W* x2 ; const FRealDouble wy = W* y2 ; const FRealDouble wz = W* z2 ; OutX = TVector<)",
    "insertText": "FRealDouble(1.0f - (yy + zz), xy + wz, xz - wy)"
  },
  {
    "label": "FRealDouble()",
    "kind": "Method",
    "detail": "Function (OutY = TVector<)",
    "insertText": "FRealDouble(xy - wz, 1.0f - (xx + zz), yz + wx)"
  },
  {
    "label": "FRealDouble()",
    "kind": "Method",
    "detail": "Function (OutZ = TVector<)",
    "insertText": "FRealDouble(xz + wy, yz - wx, 1.0f - (xx + yy))"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (} FRealDouble)",
    "insertText": "DotProduct(const TRotation<FRealDouble, 3>& L, const TRotation<FRealDouble, 3>& R)"
  },
  {
    "label": "Conjugate()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealDouble,3>)",
    "insertText": "Conjugate(const ::Chaos::TRotation<FRealDouble, 3>& InR)"
  },
  {
    "label": "Negate()",
    "kind": "Method",
    "detail": "Function (TRotation<FRealDouble,3>)",
    "insertText": "Negate(const ::Chaos::TRotation<FRealDouble, 3>& InR)"
  },
  {
    "label": "FromElements()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealDouble,3>)",
    "insertText": "FromElements(const FRealDouble X, const FRealDouble Y, const FRealDouble Z, const FRealDouble W)"
  },
  {
    "label": "FromElements()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealDouble,3>)",
    "insertText": "FromElements(const ::Chaos::TVector<FRealDouble, 3>& V, const FRealDouble W)"
  },
  {
    "label": "FromAxisAngle()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealDouble,3>)",
    "insertText": "FromAxisAngle(const ::Chaos::TVector<FRealDouble, 3>& Axis, const FRealDouble AngleRad)"
  },
  {
    "label": "FromVector()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealDouble,3>)",
    "insertText": "FromVector(const ::Chaos::TVector<FRealDouble, 3>& V)"
  },
  {
    "label": "FromRotatedVector()",
    "kind": "Method",
    "detail": "Function (TRotation<FRealDouble,3>)",
    "insertText": "FromRotatedVector(const ::Chaos::TVector<FRealDouble, 3>& InitialVector, const ::Chaos::TVector<FRealDouble, 3>& FinalVector)"
  },
  {
    "label": "CalculateAngularVelocity1()",
    "kind": "Method",
    "detail": "Function (TVector<FRealDouble,3>)",
    "insertText": "CalculateAngularVelocity1(const TRotation<FRealDouble, 3>& R0, const TRotation<FRealDouble, 3>& InR1, const FRealDouble InDt)"
  },
  {
    "label": "CalculateAngularVelocity2()",
    "kind": "Method",
    "detail": "Function (TVector<FRealDouble,3>)",
    "insertText": "CalculateAngularVelocity2(const TRotation<FRealDouble, 3>& R0, const TRotation<FRealDouble, 3>& InR1, const FRealDouble InDt)"
  },
  {
    "label": "CalculateAngularVelocity()",
    "kind": "Method",
    "detail": "Function (TVector<FRealDouble,3>)",
    "insertText": "CalculateAngularVelocity(const TRotation<FRealDouble, 3>& InR0, const TRotation<FRealDouble, 3>& InR1, const FRealDouble InDt)"
  },
  {
    "label": "CalculateAngularDelta()",
    "kind": "Method",
    "detail": "Function (} TVector<FRealDouble,3>)",
    "insertText": "CalculateAngularDelta(const TRotation<FRealDouble, 3>& InR0, const TRotation<FRealDouble, 3>& InR1)"
  },
  {
    "label": "IntegrateRotationWithAngularVelocity()",
    "kind": "Method",
    "detail": "Function (} TRotation<FRealDouble,3>)",
    "insertText": "IntegrateRotationWithAngularVelocity(const TRotation<FRealDouble, 3>& InR0, const TVector<FRealDouble, 3>& InW, const FRealDouble InDt)"
  },
  {
    "label": "IsNearlyEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNearlyEqual(const TRotation<FRealDouble, 3>& A, const TRotation<FRealDouble, 3>& B, const FRealDouble Epsilon)"
  }
]