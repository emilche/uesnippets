[
  {
    "label": "FPropertyStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyStats"
  },
  {
    "label": "FPropertyDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyDefinition"
  },
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "UMovieSceneBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneBlenderSystem"
  },
  {
    "label": "UMovieScenePropertyInstantiatorSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScenePropertyInstantiatorSystem"
  },
  {
    "label": "FContributorKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContributorKey"
  },
  {
    "label": "FObjectPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPropertyInfo"
  },
  {
    "label": "FBlenderSystemInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlenderSystemInfo"
  },
  {
    "label": "FSetupBlenderSystemResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetupBlenderSystemResult"
  },
  {
    "label": "FPropertyParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyParameters"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / EntityAllocationIterator . h \" # include \" EntitySystem / MovieSceneDecompositionQuery . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityInstantiatorSystem . h \" # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" EntitySystem / MovieScenePropertyComponentHandler . h \" # include \" EntitySystem / MovieScenePropertyRegistry . h \" # include \" Misc / TVariant . h \" # include \" Misc / Optional . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" MovieScenePropertyInstantiator . generated . h \" namespace UE { namespace MovieScene { struct FPropertyStats ; struct FPropertyDefinition ; class FEntityManager ; } } class UMovieSceneBlenderSystem ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public : using FMovieSceneEntityID = UE::MovieScene::FMovieSceneEntityID ;)",
    "insertText": "GENERATED_BODY() MOVIESCENETRACKS_API UMovieScenePropertyInstantiatorSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "GetStatsForProperty()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FPropertyStats)",
    "insertText": "GetStatsForProperty(UE::MovieScene::FCompositePropertyTypeID PropertyID)"
  },
  {
    "label": "RecomposeBlend()",
    "kind": "Method",
    "detail": "Function (template<PropertyTraits,ValueType> UE::MovieScene::TRecompositionResult<ValueType>)",
    "insertText": "RecomposeBlend(const UE::MovieScene::TPropertyComponents<PropertyTraits>& InComponents, const UE::MovieScene::FDecompositionQuery& InQuery, const ValueType& InCurrentValue)"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ; using StorageType = PropertyTraits::StorageType ; StorageType TmpStorage { } ;)",
    "insertText": "ConvertOperationalProperty(InCurrentValue, TmpStorage)"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::TRecompositionResult<StorageType> Result =)",
    "insertText": "RecomposeBlendOperational(InComponents, InQuery, TmpStorage)"
  },
  {
    "label": "ConversionResult()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::TRecompositionResult<ValueType>)",
    "insertText": "ConversionResult(InCurrentValue, Result.Values.Num())"
  },
  {
    "label": "ConvertOperationalProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertOperationalProperty(Result.Values[Index], ConversionResult.Values[Index])"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (} return ConversionResult ; } template<PropertyTraits> UE::MovieScene::TRecompositionResult<PropertyTraits::StorageType>)",
    "insertText": "RecomposeBlendOperational(const UE::MovieScene::TPropertyComponents<PropertyTraits>& InComponents, const UE::MovieScene::FDecompositionQuery& InQuery, const typename PropertyTraits::StorageType& InCurrentValue)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "OnLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLink()"
  },
  {
    "label": "OnUnlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnlink()"
  },
  {
    "label": "OnCleanTaggedGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCleanTaggedGarbage()"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "FContributorKey()",
    "kind": "Method",
    "detail": "Function (private : using FChannelMask = TBitArray<TFixedAllocator<1>> ; using FSlowPropertyPtr = TSharedPtr<FTrackInstancePropertyBindings> ; struct FContributorKey {)",
    "insertText": "FContributorKey(int32 InPropertyIndex) : PropertyIndex(InPropertyIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} int32 PropertyIndex ; uint32)",
    "insertText": "GetTypeHash(FContributorKey In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FContributorKey A, FContributorKey B)"
  },
  {
    "label": "MakeContributorKey()",
    "kind": "Method",
    "detail": "Function (} UE::MovieScene::FResolvedProperty Property ; TWeakObjectPtr<UMovieSceneBlenderSystem> Blender ; UObject* BoundObject ; FMovieScenePropertyBinding PropertyBinding ; FChannelMask EmptyChannels ; UE::MovieScene::FMovieSceneEntityID FinalBlendOutputID ; UE::MovieScene::FMovieSceneEntityID PreviousFastPathID ; uint16 BlendChannel ; int32 PropertyDefinitionIndex ; TOptional<int32> ConvertedFromPropertyDefinitionIndex ; int16 HBias = 0 ; uint8 bWantsRestoreState : 1 ; uint8 bSupportsFastPath : 1 ; uint8 bNeedsInitialValue : 1 ; uint8 bMaxHBiasHasChanged : 1 ; uint8 bIsPartiallyAnimated : 1 ; } ; private : struct FBlenderSystemInfo { UClass* BlenderSystemClass = nullptr ; UE::MovieScene::FComponentTypeID BlenderTypeTag ; } ; struct FSetupBlenderSystemResult { FBlenderSystemInfo CurrentInfo ; FBlenderSystemInfo PreviousInfo ; } ; struct FPropertyParameters { FObjectPropertyInfo* PropertyInfo ; const UE::MovieScene::FPropertyDefinition* PropertyDefinition ; int32 PropertyInfoIndex ; FContributorKey)",
    "insertText": "MakeContributorKey()"
  },
  {
    "label": "MakeOutputComponentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeOutputComponentType(const UE::MovieScene::FEntityManager& EntityManager, TArrayView<const UE::MovieScene::FPropertyCompositeDefinition> Composites, UE::MovieScene::FComponentMask& OutComponentType)"
  },
  {
    "label": "DiscoverInvalidatedProperties()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DiscoverInvalidatedProperties(TBitArray<>& OutInvalidatedProperties)"
  },
  {
    "label": "DiscoverExpiredProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscoverExpiredProperties(TBitArray<>& OutInvalidatedProperties)"
  },
  {
    "label": "DiscoverNewProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscoverNewProperties(TBitArray<>& OutInvalidatedProperties)"
  },
  {
    "label": "UpgradeFloatToDoubleProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpgradeFloatToDoubleProperties(const TBitArray<>& InvalidatedProperties)"
  },
  {
    "label": "ProcessInvalidatedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInvalidatedProperties(const TBitArray<>& InvalidatedProperties)"
  },
  {
    "label": "UpdatePropertyInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePropertyInfo(const FPropertyParameters& Params)"
  },
  {
    "label": "InitializeFastPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFastPath(const FPropertyParameters& Params)"
  },
  {
    "label": "InitializeBlendPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBlendPath(const FPropertyParameters& Params)"
  },
  {
    "label": "DestroyStaleProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStaleProperty(int32 PropertyIndex)"
  },
  {
    "label": "PostDestroyStaleProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDestroyStaleProperties()"
  },
  {
    "label": "SetupBlenderSystem()",
    "kind": "Method",
    "detail": "Function (FSetupBlenderSystemResult)",
    "insertText": "SetupBlenderSystem(const FPropertyParameters& Params)"
  },
  {
    "label": "ResolveProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveProperty(UE::MovieScene::FCustomAccessorView CustomAccessors, UObject* Object, const FMovieScenePropertyBinding& PropertyBinding, const UE::MovieScene::FEntityGroupID& GroupID, int32 PropertyDefinitionIndex)"
  },
  {
    "label": "FindPropertyFromSource()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FPropertyRecomposerPropertyInfo)",
    "insertText": "FindPropertyFromSource(FMovieSceneEntityID EntityID, UObject* Object)"
  },
  {
    "label": "InitializePropertyMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializePropertyMetaData(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (private : uint16 INVALID_BLEND_CHANNEL =)",
    "insertText": "uint16(-1)"
  },
  {
    "label": "RecomposeBlendOperational()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FEntityGroupingPolicyKey PropertyGroupingKey ; TSparseArray<FObjectPropertyInfo> ResolvedProperties ; TMultiMap<FContributorKey,FMovieSceneEntityID> Contributors ; TMultiMap<FContributorKey,FMovieSceneEntityID> NewContributors ; TArray<UE::MovieScene::FPropertyStats> PropertyStats ; UE::MovieScene::FComponentMask CleanFastPathMask ; TBitArray<> PendingInvalidatedProperties ; TBitArray<> InitializePropertyMetaDataTasks ; TBitArray<> SaveGlobalStateTasks ; UE::MovieScene::FBuiltInComponentTypes* BuiltInComponents ; UE::MovieScene::FPropertyRecomposerImpl RecomposerImpl ; } ; template<PropertyTraits> UE::MovieScene::TRecompositionResult<PropertyTraits::StorageType>)",
    "insertText": "RecomposeBlendOperational(const UE::MovieScene::TPropertyComponents<PropertyTraits>& Components, const UE::MovieScene::FDecompositionQuery& InQuery, const typename PropertyTraits::StorageType& InCurrentValue)"
  }
]