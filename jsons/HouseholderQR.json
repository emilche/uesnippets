[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "HouseholderQR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HouseholderQR"
  },
  {
    "label": "SolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolverBase"
  },
  {
    "label": "householder_qr_inplace_blocked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "householder_qr_inplace_blocked"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_QR_H # define EIGEN_QR_H namespace Eigen { namespace internal { template<_MatrixType> struct traits<HouseholderQR<_MatrixType>> : traits<_MatrixType> { typedef MatrixXpr XprKind ; typedef SolverStorage StorageKind ; typedef int StorageIndex ; enum { Flags = 0 } ; } ; } template<_MatrixType> class HouseholderQR : public SolverBase<HouseholderQR<_MatrixType>> { public : typedef _MatrixType MatrixType ; typedef SolverBase<HouseholderQR> Base ; class SolverBase<HouseholderQR> ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(HouseholderQR)"
  },
  {
    "label": "RowsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef Matrix<Scalar,RowsAtCompileTime,)",
    "insertText": "RowsAtCompileTime(MatrixType::Flags&RowMajorBit)"
  },
  {
    "label": "HouseholderQR()",
    "kind": "Method",
    "detail": "Function (typedef internal::plain_diag_type<MatrixType>::type HCoeffsType ; typedef internal::plain_row_type<MatrixType>::type RowVectorType ; typedef HouseholderSequence<MatrixType,internal::remove_all<HCoeffsType::ConjugateReturnType>::type> HouseholderSequenceType ;)",
    "insertText": "HouseholderQR() : m_qr(), m_hCoeffs(), m_temp(), m_isInitialized(false)"
  },
  {
    "label": "HouseholderQR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HouseholderQR(Index rows, Index cols) : m_qr(rows, cols), m_hCoeffs((std::min)(rows,cols)), m_temp(cols), m_isInitialized(false)"
  },
  {
    "label": "HouseholderQR()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "HouseholderQR(const EigenBase<InputType>& matrix) : m_qr(matrix.rows(), matrix.cols()), m_hCoeffs((std::min)(matrix.rows(),matrix.cols())), m_temp(matrix.cols()), m_isInitialized(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived())"
  },
  {
    "label": "HouseholderQR()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "HouseholderQR(EigenBase<InputType>& matrix) : m_qr(matrix.derived()), m_hCoeffs((std::min)(matrix.rows(),matrix.cols())), m_temp(matrix.cols()), m_isInitialized(false)"
  },
  {
    "label": "computeInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeInPlace()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_PARSED_BY_DOXYGEN template<Rhs> const Solve<HouseholderQR,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& b)"
  },
  {
    "label": "householderQ()",
    "kind": "Method",
    "detail": "Function (# endif HouseholderSequenceType)",
    "insertText": "householderQ()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"HouseholderQR is not initialized.\")"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (} const MatrixType&)",
    "insertText": "matrixQR()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_qr = matrix .)",
    "insertText": "derived()"
  },
  {
    "label": "logAbsDeterminant()",
    "kind": "Method",
    "detail": "Function (MatrixType::RealScalar)",
    "insertText": "logAbsDeterminant()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "hCoeffs()",
    "kind": "Method",
    "detail": "Function (} const HCoeffsType&)",
    "insertText": "hCoeffs()"
  },
  {
    "label": "_solve_impl_transposed()",
    "kind": "Method",
    "detail": "Function (template<bool Conjugate,RhsType,DstType> void)",
    "insertText": "_solve_impl_transposed(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "absDeterminant()",
    "kind": "Method",
    "detail": "Function (MatrixType m_qr ; HCoeffsType m_hCoeffs ; RowVectorType m_temp ; bool m_isInitialized ; } ; template<MatrixType> MatrixType::RealScalar HouseholderQR<MatrixType)",
    "insertText": "absDeterminant()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_qr.rows() == m_qr.cols() && \"You can't take the determinant of a non-square matrix!\")"
  },
  {
    "label": "householder_qr_inplace_unblocked()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<MatrixQR,HCoeffs> void)",
    "insertText": "householder_qr_inplace_unblocked(MatrixQR& mat, HCoeffs& hCoeffs, typename MatrixQR::Scalar* tempData = 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "size(std::min)(rows,cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(hCoeffs.size() == size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<Scalar,MatrixQR::ColsAtCompileTime,1> TempType ; TempType tempVector ;)",
    "insertText": "if(tempData==0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "resize(cols)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (tempData = tempVector .)",
    "insertText": "data()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index k = 0; k < size; ++k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index remainingRows = rows - k ; Index remainingCols = cols - k - 1 ; RealScalar beta ; mat .)",
    "insertText": "col(k).tail(remainingRows).makeHouseholderInPlace(hCoeffs.coeffRef(k), beta)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "coeffRef(k,k)"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "bottomRightCorner(remainingRows, remainingCols) .applyHouseholderOnTheLeft(mat.col(k).tail(remainingRows-1), hCoeffs.coeffRef(k), tempData+k+1)"
  },
  {
    "label": "InnerStrideIsOne()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixQR,HCoeffs,MatrixQRScalar = MatrixQR::Scalar,bool)",
    "insertText": "InnerStrideIsOne(MatrixQR::InnerStrideAtCompileTime == 1 && HCoeffs::InnerStrideAtCompileTime == 1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(MatrixQR& mat, HCoeffs& hCoeffs, Index maxBlockSize=32, typename MatrixQR::Scalar* tempData = 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "size(std::min)(rows, cols)"
  },
  {
    "label": "blockSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockSize(std::min)(maxBlockSize,size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index k = 0 ;)",
    "insertText": "for(k = 0; k < size; k += blockSize)"
  },
  {
    "label": "bs()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "bs(std::min)(size-k,blockSize)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Index tcols = cols - k - bs ; Index brows = rows - k ; BlockType A11_21 = mat .)",
    "insertText": "block(k,k,brows,bs)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (Block<HCoeffs,Dynamic,1> hCoeffsSegment = hCoeffs .)",
    "insertText": "segment(k,bs)"
  },
  {
    "label": "householder_qr_inplace_unblocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "householder_qr_inplace_unblocked(A11_21, hCoeffsSegment, tempData)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (BlockType A21_22 = mat .)",
    "insertText": "block(k,k+bs,brows,tcols)"
  },
  {
    "label": "apply_block_householder_on_the_left()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "apply_block_householder_on_the_left(A21_22,A11_21,hCoeffsSegment, false)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} } } } ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<_MatrixType> template<RhsType,DstType> void HouseholderQR<_MatrixType)",
    "insertText": "_solve_impl(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "rank(std::min)(rows(), cols())"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (RhsType::PlainObject)",
    "insertText": "c(rhs)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "applyOnTheLeft(householderQ().setLength(rank).adjoint())"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "topLeftCorner(rank, rank) .template triangularView<Upper>() .solveInPlace(c.topRows(rank))"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "topRows(rank) = c.topRows(rank)"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "bottomRows(cols()-rank).setZero()"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "topLeftCorner(rank, rank) .template triangularView<Upper>() .transpose().template conjugateIf<Conjugate>() .solveInPlace(c.topRows(rank))"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "bottomRows(rows()-rank).setZero()"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "applyOnTheLeft(householderQ().setLength(rank).template conjugateIf<!Conjugate>())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_hCoeffs .)",
    "insertText": "resize(size)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::householder_qr_inplace_blocked<MatrixType,HCoeffsType)",
    "insertText": "run(m_qr, m_hCoeffs, 48, m_temp.data())"
  },
  {
    "label": "householderQr()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; } template<Derived> const HouseholderQR<MatrixBase<Derived>::PlainObject> MatrixBase<Derived)",
    "insertText": "householderQr()"
  }
]