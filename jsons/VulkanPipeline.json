[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRHIGraphicsPipelineState"
  },
  {
    "label": "FVulkanPSOKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPSOKey"
  },
  {
    "label": "FVulkanShaderHashes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanShaderHashes"
  },
  {
    "label": "FVulkanPipelineSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanPipelineSize"
  },
  {
    "label": "FDescriptorSetLayoutBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDescriptorSetLayoutBinding"
  },
  {
    "label": "FGfxPipelineDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGfxPipelineDesc"
  },
  {
    "label": "FBlendAttachment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendAttachment"
  },
  {
    "label": "FVertexBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexBinding"
  },
  {
    "label": "FVertexAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexAttribute"
  },
  {
    "label": "FRasterizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizer"
  },
  {
    "label": "FDepthStencil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencil"
  },
  {
    "label": "FRenderTargets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderTargets"
  },
  {
    "label": "FAttachmentRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttachmentRef"
  },
  {
    "label": "FStencilAttachmentRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStencilAttachmentRef"
  },
  {
    "label": "FAttachmentDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttachmentDesc"
  },
  {
    "label": "FStencilAttachmentDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStencilAttachmentDesc"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FPipelineCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipelineCache"
  },
  {
    "label": "FScopedRWAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedRWAccessor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPipelineCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipelineCache"
  },
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRHIGraphicsPipelineState"
  },
  {
    "label": "FVulkanLRUCacheFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanLRUCacheFile"
  },
  {
    "label": "FFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileHeader"
  },
  {
    "label": "class",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "class"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRHIGraphicsPipelineState"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipelineDescriptorState"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRHIGraphicsPipelineState"
  },
  {
    "label": "TVulkanResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVulkanResourceTraits"
  },
  {
    "label": "FRHIComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputePipelineState"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "TVulkanResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVulkanResourceTraits"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(0)"
  },
  {
    "label": "GetVulkanGfxShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVulkanGfxShaders(const FBoundShaderStateInput& BSI, FVulkanShader* OutShaders[ShaderStage::NumGraphicsStages])"
  },
  {
    "label": "GetVulkanGfxShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVulkanGfxShaders(FVulkanDevice* Device, const FVulkanRHIGraphicsPipelineState& GfxPipelineState, FVulkanShader* OutShaders[ShaderStage::NumGraphicsStages])"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkDescriptorSetLayoutBinding& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkPipelineColorBlendAttachmentState& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkVertexInputBindingDescription& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkVertexInputAttributeDescription& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkPipelineRasterizationStateCreateInfo& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkPipelineDepthStencilStateCreateInfo& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkAttachmentReference& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkAttachmentReferenceStencilLayout& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkAttachmentDescription &InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const VkAttachmentDescriptionStencilLayout& InState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFrom(const FVulkanRenderTargetLayout &InState)"
  },
  {
    "label": "InitAndLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAndLoad(const TArray<FString>& CacheFilenames)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(const FString& CacheFilename)"
  },
  {
    "label": "RebuildCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildCache()"
  },
  {
    "label": "NotifyDeletedComputePipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDeletedComputePipeline(FVulkanComputePipeline* Pipeline)"
  },
  {
    "label": "OnShaderPipelineCacheOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPipelineCacheOpened(FString const& Name, EShaderPlatform Platform, uint32 Count, const FGuid& VersionGuid, FShaderPipelineCache::FShaderCachePrecompileContext& ShaderCachePrecompileContext)"
  },
  {
    "label": "OnShaderPipelineCachePrecompilationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPipelineCachePrecompilationComplete(uint32 Count, double Seconds, const FShaderPipelineCache::FShaderCachePrecompileContext& ShaderCachePrecompileContext)"
  },
  {
    "label": "CreateGfxEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGfxEntry(const FGraphicsPipelineStateInitializer& PSOInitializer, FVulkanDescriptorSetsLayoutInfo& DescriptorSetLayoutInfo, FGfxPipelineDesc* Desc)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const TArray<FString>& CacheFilenames, FPipelineCache& Cache)"
  },
  {
    "label": "SavePSOCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePSOCache(const FString& CacheFilename, FPipelineCache& Cache)"
  },
  {
    "label": "DestroyCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCache()"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "NotifyDeletedGraphicsPSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDeletedGraphicsPSO(FRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "CreateGfxPipelineFromEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateGfxPipelineFromEntry(FVulkanRHIGraphicsPipelineState* PSO, FVulkanShader* Shaders[ShaderStage::NumGraphicsStages], FGraphicsPipelineStateInitializer::EPSOPrecacheCompileType PSOCompileType)"
  },
  {
    "label": "CreateVKPipeline()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateVKPipeline(FVulkanRHIGraphicsPipelineState* PSO, FVulkanShader* Shaders[ShaderStage::NumGraphicsStages], const VkGraphicsPipelineCreateInfo& PipelineInfo, FGraphicsPipelineStateInitializer::EPSOPrecacheCompileType PSOCompileType)"
  },
  {
    "label": "TickLRU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickLRU()"
  },
  {
    "label": "LRUEvictImmediately()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LRUEvictImmediately()"
  },
  {
    "label": "LRUTrim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUTrim(uint32 nSpaceNeeded)"
  },
  {
    "label": "LRUAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUAdd(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "LRUTouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUTouch(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "LRUEvictOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LRUEvictOne(bool bOnlyOld = false)"
  },
  {
    "label": "LRURemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRURemoveAll()"
  },
  {
    "label": "LRUDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUDump()"
  },
  {
    "label": "LRUDebugEvictAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUDebugEvictAll()"
  },
  {
    "label": "LRURemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRURemove(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "LRUCheckNotInside()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUCheckNotInside(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "FScopedPipelineCache()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FScopedPipelineCache(PipelineAccessType == EPipelineCacheAccess::Exclusive, PipelineCache, PipelineCacheLock)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FArchive& Ar)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(FArchive& Ar)"
  },
  {
    "label": "FVulkanPipeline()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanPipeline(FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanComputePipeline()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanComputePipeline(FVulkanDevice* InDevice, FVulkanComputeShader* InShader)"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FVulkanRHIGraphicsPipelineState(FVulkanDevice* Device, const FGraphicsPipelineStateInitializer& PSOInitializer, const FGfxPipelineDesc& Desc, FVulkanPSOKey* Key)"
  },
  {
    "label": "DeleteVkPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteVkPipeline(bool bImmediate)"
  },
  {
    "label": "GetPatchedSpirvCode()",
    "kind": "Method",
    "detail": "Function (FVulkanShader::FSpirvCode)",
    "insertText": "GetPatchedSpirvCode(FVulkanShader* Shader)"
  },
  {
    "label": "PurgeShaderModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeShaderModules(FVulkanShader*const* Shaders)"
  }
]