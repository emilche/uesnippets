[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRHIGraphicsPipelineState"
  },
  {
    "label": "FVulkanPSOKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPSOKey"
  },
  {
    "label": "FVulkanShaderHashes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanShaderHashes"
  },
  {
    "label": "FVulkanPipelineSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanPipelineSize"
  },
  {
    "label": "FDescriptorSetLayoutBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDescriptorSetLayoutBinding"
  },
  {
    "label": "FGfxPipelineDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGfxPipelineDesc"
  },
  {
    "label": "FBlendAttachment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendAttachment"
  },
  {
    "label": "FVertexBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexBinding"
  },
  {
    "label": "FVertexAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexAttribute"
  },
  {
    "label": "FRasterizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizer"
  },
  {
    "label": "FDepthStencil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencil"
  },
  {
    "label": "FRenderTargets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderTargets"
  },
  {
    "label": "FAttachmentRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttachmentRef"
  },
  {
    "label": "FStencilAttachmentRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStencilAttachmentRef"
  },
  {
    "label": "FAttachmentDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttachmentDesc"
  },
  {
    "label": "FStencilAttachmentDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStencilAttachmentDesc"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FPipelineCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPipelineCache"
  },
  {
    "label": "FScopedRWAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedRWAccessor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanLRUCacheFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanLRUCacheFile"
  },
  {
    "label": "FFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileHeader"
  },
  {
    "label": "FVulkanPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipeline"
  },
  {
    "label": "FVulkanComputePipelineDescriptorState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipelineDescriptorState"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "TVulkanResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVulkanResourceTraits"
  },
  {
    "label": "FRHIComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputePipelineState"
  },
  {
    "label": "GetShaderKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanResources . h \" # include \" VulkanShaderResources . h \" # include \" VulkanDescriptorSets . h \" # include \" ShaderPipelineCache . h \" # define VULKAN_PSO_CACHE_DEBUG 0 # define VULKAN_USE_SHADERKEYS 1 class FVulkanDevice ; class FVulkanRHIGraphicsPipelineState ; using FVulkanRHIGraphicsPipelineStateLRU = TDoubleLinkedList<FVulkanRHIGraphicsPipelineState*> ; using FVulkanRHIGraphicsPipelineStateLRUNode = FVulkanRHIGraphicsPipelineStateLRU::TDoubleLinkedListNode ; class FVulkanPSOKey : public TDataKey<FVulkanPSOKey,true> { } ; template<TVulkanShader> uint64)",
    "insertText": "GetShaderKey(FRHIGraphicsShader* ShaderType)"
  },
  {
    "label": "TVulkanShader()",
    "kind": "Method",
    "detail": "Function (TVulkanShader* VulkanShader = static_cast<)",
    "insertText": "TVulkanShader(ShaderType)"
  },
  {
    "label": "FVulkanShader()",
    "kind": "Method",
    "detail": "Function (FVulkanShader* BaseVulkanShader = static_cast<)",
    "insertText": "FVulkanShader(VulkanShader)"
  },
  {
    "label": "GetShaderKeyForGfxStage()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetShaderKeyForGfxStage(const FBoundShaderStateInput& BSI, ShaderStage::EStage Stage)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "check(0)"
  },
  {
    "label": "GetVulkanGfxShaders()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "GetVulkanGfxShaders(const FBoundShaderStateInput& BSI, FVulkanShader* OutShaders[ShaderStage::NumGraphicsStages])"
  },
  {
    "label": "GetVulkanGfxShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVulkanGfxShaders(FVulkanDevice* Device, const FVulkanRHIGraphicsPipelineState& GfxPipelineState, FVulkanShader* OutShaders[ShaderStage::NumGraphicsStages])"
  },
  {
    "label": "FVulkanShaderHashes()",
    "kind": "Method",
    "detail": "Function (struct FVulkanShaderHashes { uint32 Hash ; FSHAHash Stages [ ShaderStage::MaxNumStages ] ;)",
    "insertText": "FVulkanShaderHashes()"
  },
  {
    "label": "FVulkanShaderHashes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanShaderHashes(const FGraphicsPipelineStateInitializer& PSOInitializer)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FVulkanShaderHashes& Hashes)"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "MemCrc32(Stages, sizeof(Stages))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FVulkanShaderHashes& A, const FVulkanShaderHashes& B)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDescriptorSetLayoutBinding { uint32 Binding ; uint8 DescriptorType ; uint8 StageFlags ; void)",
    "insertText": "ReadFrom(const VkDescriptorSetLayoutBinding& InState)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkDescriptorSetLayoutBinding& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDescriptorSetLayoutBinding& In)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (uint32 VertexInputKey ; uint16 RasterizationSamples ; uint16 ControlPoints ; uint32 Topology ; struct FBlendAttachment { bool bBlend ; uint8 ColorBlendOp ; uint8 SrcColorBlendFactor ; uint8 DstColorBlendFactor ; uint8 AlphaBlendOp ; uint8 SrcAlphaBlendFactor ; uint8 DstAlphaBlendFactor ; uint8 ColorWriteMask ; void)",
    "insertText": "ReadFrom(const VkPipelineColorBlendAttachmentState& InState)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkPipelineColorBlendAttachmentState& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FBlendAttachment& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkVertexInputBindingDescription& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FVertexBinding& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkVertexInputAttributeDescription& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FVertexAttribute& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkPipelineRasterizationStateCreateInfo& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FRasterizer& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkPipelineDepthStencilStateCreateInfo& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDepthStencil& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkAttachmentReference& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FAttachmentRef& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkAttachmentReferenceStencilLayout& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FStencilAttachmentRef& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkAttachmentDescription& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FStencilAttachmentDesc { uint64 InitialLayout ; uint64 FinalLayout ; bool)",
    "insertText": "operator(const FStencilAttachmentDesc& In)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(VkAttachmentDescriptionStencilLayout& OutState)"
  },
  {
    "label": "ReadFrom()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FAttachmentDesc> Descriptions ; FStencilAttachmentDesc StencilDescription ; uint8 NumAttachments ; uint8 NumColorAttachments ; uint8 bHasDepthStencil ; uint8 bHasResolveAttachments ; uint8 bHasDepthStencilResolve ; uint8 bHasFragmentDensityAttachment ; uint8 NumUsedClearValues ; uint32 RenderPassCompatibleHash ; FVector Extent3D ; void)",
    "insertText": "ReadFrom(const FVulkanRenderTargetLayout &InState)"
  },
  {
    "label": "WriteInto()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInto(FVulkanRenderTargetLayout& OutState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FRenderTargets& In)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(const FString& CacheFilename)"
  },
  {
    "label": "FVulkanPipelineStateCacheManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanPipelineStateCacheManager(FVulkanDevice* InParent)"
  },
  {
    "label": "FVulkanPipelineStateCacheManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanPipelineStateCacheManager()"
  },
  {
    "label": "RebuildCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildCache()"
  },
  {
    "label": "GetOrCreateComputePipeline()",
    "kind": "Method",
    "detail": "Function (FVulkanComputePipeline*)",
    "insertText": "GetOrCreateComputePipeline(FVulkanComputeShader* ComputeShader)"
  },
  {
    "label": "NotifyDeletedComputePipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDeletedComputePipeline(FVulkanComputePipeline* Pipeline)"
  },
  {
    "label": "OnShaderPipelineCacheOpened()",
    "kind": "Method",
    "detail": "Function (private : class FPipelineCache ; void)",
    "insertText": "OnShaderPipelineCacheOpened(FString const& Name, EShaderPlatform Platform, uint32 Count, const FGuid& VersionGuid, FShaderPipelineCache::FShaderCachePrecompileContext& ShaderCachePrecompileContext)"
  },
  {
    "label": "OnShaderPipelineCachePrecompilationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShaderPipelineCachePrecompilationComplete(uint32 Count, double Seconds, const FShaderPipelineCache::FShaderCachePrecompileContext& ShaderCachePrecompileContext)"
  },
  {
    "label": "CreateGfxEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGfxEntry(const FGraphicsPipelineStateInitializer& PSOInitializer, FVulkanDescriptorSetsLayoutInfo& DescriptorSetLayoutInfo, FGfxPipelineDesc* Desc)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const TArray<FString>& CacheFilenames, FPipelineCache& Cache)"
  },
  {
    "label": "SavePSOCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePSOCache(const FString& CacheFilename, FPipelineCache& Cache)"
  },
  {
    "label": "DestroyCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCache()"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FVulkanComputePipeline*)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShaderRHI)"
  },
  {
    "label": "NotifyDeletedGraphicsPSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDeletedGraphicsPSO(FRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "CreateGfxPipelineFromEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateGfxPipelineFromEntry(FVulkanRHIGraphicsPipelineState* PSO, FVulkanShader* Shaders[ShaderStage::NumGraphicsStages], FGraphicsPipelineStateInitializer::EPSOPrecacheCompileType PSOCompileType)"
  },
  {
    "label": "CreateVKPipeline()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateVKPipeline(FVulkanRHIGraphicsPipelineState* PSO, FVulkanShader* Shaders[ShaderStage::NumGraphicsStages], const VkGraphicsPipelineCreateInfo& PipelineInfo, FGraphicsPipelineStateInitializer::EPSOPrecacheCompileType PSOCompileType)"
  },
  {
    "label": "FindOrAddLayout()",
    "kind": "Method",
    "detail": "Function (FVulkanLayout*)",
    "insertText": "FindOrAddLayout(const FVulkanDescriptorSetsLayoutInfo& DescriptorSetLayoutInfo, bool bGfxLayout)"
  },
  {
    "label": "CreateComputePipelineFromShader()",
    "kind": "Method",
    "detail": "Function (FVulkanComputePipeline*)",
    "insertText": "CreateComputePipelineFromShader(FVulkanComputeShader* Shader)"
  },
  {
    "label": "TickLRU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickLRU()"
  },
  {
    "label": "LRUEvictImmediately()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LRUEvictImmediately()"
  },
  {
    "label": "LRUTrim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUTrim(uint32 nSpaceNeeded)"
  },
  {
    "label": "LRUAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUAdd(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "LRUTouch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUTouch(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "LRUEvictOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LRUEvictOne(bool bOnlyOld = false)"
  },
  {
    "label": "LRURemoveAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRURemoveAll()"
  },
  {
    "label": "LRUDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUDump()"
  },
  {
    "label": "LRUDebugEvictAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUDebugEvictAll()"
  },
  {
    "label": "LRURemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRURemove(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "LRUCheckNotInside()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LRUCheckNotInside(FVulkanRHIGraphicsPipelineState* PSO)"
  },
  {
    "label": "FScopedRWAccessor()",
    "kind": "Method",
    "detail": "Function (FVulkanDevice* Device ; bool bEvictImmediately ; FString CompiledPSOCacheTopFolderPath ; FString CompiledPSOCacheFolderName ; FDelegateHandle OnShaderPipelineCacheOpenedDelegate ; FDelegateHandle OnShaderPipelineCachePrecompilationCompleteDelegate ; FRWLock ComputePipelineLock ; TMap<uint64,FVulkanComputePipeline*> ComputePipelineEntries ; template<TType> class FScopedRWAccessor { bool bWriteAccess ; TType& ProtectedObj ; FRWLock& RWLock ; public :)",
    "insertText": "FScopedRWAccessor(bool bWriteAccessIn, TType& ProtectedObjIn, FRWLock& RWLockIn) : bWriteAccess(bWriteAccessIn), ProtectedObj(ProtectedObjIn), RWLock(RWLockIn)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (bWriteAccess ? RWLock .)",
    "insertText": "WriteLock() : RWLock.ReadLock()"
  },
  {
    "label": "FScopedRWAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedRWAccessor()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (bWriteAccess ? RWLock .)",
    "insertText": "WriteUnlock() : RWLock.ReadUnlock()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} TType&)",
    "insertText": "Get()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (} } ; FPipelineCache GlobalPSOCache ; FPipelineCache CurrentPrecompilingPSOCache ; bool bPrecompilingCacheLoadedFromFile ; FGuid CurrentPrecompilingPSOCacheGuid ; TSet<FGuid> CompiledPSOCaches ; FCriticalSection LayoutMapCS ; TMap<FVulkanDescriptorSetsLayoutInfo,FVulkanLayout*> LayoutMap ; FVulkanDescriptorSetLayoutMap DSetLayoutMap ; FCriticalSection GraphicsPSOLockedCS ; TMap<FVulkanPSOKey,FVulkanRHIGraphicsPipelineState*> GraphicsPSOLockedMap ; FCriticalSection LRUCS ; FVulkanRHIGraphicsPipelineStateLRU LRU ; uint32 LRUUsedPipelineSize = 0 ; uint32 LRUUsedPipelineCount = 0 ; uint32 LRUUsedPipelineMax = 0 ; TMap<uint64,FVulkanPipelineSize> LRU2SizeList ; bool bUseLRU = true ; class FVulkanDynamicRHI ; class FVulkanCommandListContext ; class FVulkanRHIGraphicsPipelineState ; struct FVulkanLRUCacheFile { enum { LRU_CACHE_VERSION = 2,} ; struct FFileHeader { int32 Version = - 1 ; int32 SizeOfPipelineSizes = - 1 ; } Header ; TArray<FVulkanPipelineSize> PipelineSizes ; void)",
    "insertText": "Save(FArchive& Ar)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(FArchive& Ar)"
  },
  {
    "label": "FVulkanPipeline()",
    "kind": "Method",
    "detail": "Function (} ; } ; class FVulkanPipeline { public :)",
    "insertText": "FVulkanPipeline(FVulkanDevice* InDevice)"
  },
  {
    "label": "FVulkanPipeline()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanPipeline()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (VkPipeline)",
    "insertText": "GetHandle()"
  },
  {
    "label": "vkDestroyPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vkDestroyPipeline(Device->GetInstanceHandle(), Pipeline, VULKAN_CPU_ALLOCATOR)"
  },
  {
    "label": "GetDeferredDeletionQueue()",
    "kind": "Method",
    "detail": "Function (} else { Device ->)",
    "insertText": "GetDeferredDeletionQueue().EnqueueResource(VulkanRHI::FDeferredDeletionQueue2::EType::Pipeline, Pipeline)"
  },
  {
    "label": "FVulkanComputePipeline()",
    "kind": "Method",
    "detail": "Function (} Pipeline = VK_NULL_HANDLE ; } } # endif protected : FVulkanDevice* Device ; VkPipeline Pipeline ; FVulkanLayout* Layout ; class FVulkanPipelineStateCacheManager ; class FVulkanRHIGraphicsPipelineState ; class FVulkanComputePipelineDescriptorState ; } ; class FVulkanComputePipeline : public FVulkanPipeline,public FRHIComputePipelineState { public :)",
    "insertText": "FVulkanComputePipeline(FVulkanDevice* InDevice, FVulkanComputeShader* InShader)"
  },
  {
    "label": "FVulkanComputePipeline()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanComputePipeline()"
  },
  {
    "label": "GetShaderCodeHeader()",
    "kind": "Method",
    "detail": "Function (const FVulkanShaderHeader&)",
    "insertText": "GetShaderCodeHeader()"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (} const FVulkanLayout&)",
    "insertText": "GetLayout()"
  },
  {
    "label": "vkCmdBindPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vkCmdBindPipeline(CmdBuffer, VK_PIPELINE_BIND_POINT_COMPUTE, Pipeline)"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} } ; class FVulkanRHIGraphicsPipelineState : public FRHIGraphicsPipelineState { public :)",
    "insertText": "FVulkanRHIGraphicsPipelineState(FVulkanDevice* Device, const FGraphicsPipelineStateInitializer& PSOInitializer, const FGfxPipelineDesc& Desc, FVulkanPSOKey* Key)"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRHIGraphicsPipelineState()"
  },
  {
    "label": "GetVertexInputState()",
    "kind": "Method",
    "detail": "Function (const FVulkanVertexInputStateInfo&)",
    "insertText": "GetVertexInputState()"
  },
  {
    "label": "vkCmdBindPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vkCmdBindPipeline(CmdBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, VulkanPipeline)"
  },
  {
    "label": "GetShaderKey()",
    "kind": "Method",
    "detail": "Function (} const uint64)",
    "insertText": "GetShaderKey(EShaderFrequency Frequency)"
  },
  {
    "label": "GetStageForFrequency()",
    "kind": "Method",
    "detail": "Function (ShaderStage::EStage Stage =)",
    "insertText": "GetStageForFrequency(Frequency)"
  },
  {
    "label": "FVulkanGeometryShader()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_MESH_SHADERS case SF_Mesh : return static_cast<)",
    "insertText": "FVulkanGeometryShader(VulkanShaders[ShaderStage::Mesh])"
  },
  {
    "label": "FVulkanGeometryShader()",
    "kind": "Method",
    "detail": "Function (# endif # if VULKAN_SUPPORTS_GEOMETRY_SHADERS case SF_Geometry : return static_cast<)",
    "insertText": "FVulkanGeometryShader(VulkanShaders[ShaderStage::Geometry])"
  },
  {
    "label": "DeleteVkPipeline()",
    "kind": "Method",
    "detail": "Function (# endif default : return nullptr ; } } void)",
    "insertText": "DeleteVkPipeline(bool bImmediate)"
  },
  {
    "label": "GetOrCreateShaderModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOrCreateShaderModules(TRefCountPtr<FVulkanShaderModule>(&ShaderModulesOUT)[ShaderStage::NumGraphicsStages], FVulkanShader* const* Shaders)"
  },
  {
    "label": "GetPatchedSpirvCode()",
    "kind": "Method",
    "detail": "Function (FVulkanShader::FSpirvCode)",
    "insertText": "GetPatchedSpirvCode(FVulkanShader* Shader)"
  },
  {
    "label": "PurgeShaderModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeShaderModules(FVulkanShader*const* Shaders)"
  }
]