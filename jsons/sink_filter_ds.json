[
  {
    "label": "CaptureSinkFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaptureSinkFilter"
  },
  {
    "label": "CaptureInputPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaptureInputPin"
  },
  {
    "label": "CaptureInputPin()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CAPTURE_MAIN_SOURCE_WINDOWS_SINK_FILTER_DS_H_ # define MODULES_VIDEO_CAPTURE_MAIN_SOURCE_WINDOWS_SINK_FILTER_DS_H_ # include<dshow . h> # include<atomic> # include<memory> # include<vector> # include \" api / sequence_checker . h \" # include \" modules / video_capture / video_capture_impl . h \" # include \" modules / video_capture / windows / help_functions_ds . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { namespace videocapturemodule { class CaptureSinkFilter ; class CaptureInputPin : public IMemInputPin,public IPin { public :)",
    "insertText": "CaptureInputPin(CaptureSinkFilter* filter)"
  },
  {
    "label": "SetRequestedCapability()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetRequestedCapability(const VideoCaptureCapability& capability)"
  },
  {
    "label": "OnFilterActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterActivated()"
  },
  {
    "label": "OnFilterDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterDeactivated()"
  },
  {
    "label": "CaptureInputPin()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "CaptureInputPin()"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (private : CaptureSinkFilter*)",
    "insertText": "Filter()"
  },
  {
    "label": "AttemptConnection()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "AttemptConnection(IPin* receive_pin, const AM_MEDIA_TYPE* media_type)"
  },
  {
    "label": "DetermineCandidateFormats()",
    "kind": "Method",
    "detail": "Function (std::vector<AM_MEDIA_TYPE*>)",
    "insertText": "DetermineCandidateFormats(IPin* receive_pin, const AM_MEDIA_TYPE* media_type)"
  },
  {
    "label": "ClearAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllocator(bool decommit)"
  },
  {
    "label": "CheckDirection()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckDirection(IPin* pin)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryInterface)(REFIID riid, void** ppv)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Connect)(IPin* receive_pin, const AM_MEDIA_TYPE* media_type)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ReceiveConnection)(IPin* connector, const AM_MEDIA_TYPE* media_type)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Disconnect)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ConnectedTo)(IPin** pin)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ConnectionMediaType)(AM_MEDIA_TYPE* media_type)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryPinInfo)(PIN_INFO* info)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryDirection)(PIN_DIRECTION* pin_dir)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryId)(LPWSTR* id)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryAccept)(const AM_MEDIA_TYPE* media_type)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(EnumMediaTypes)(IEnumMediaTypes** types)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryInternalConnections)(IPin** pins, ULONG* count)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(EndOfStream)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(BeginFlush)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(EndFlush)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(NewSegment)(REFERENCE_TIME start, REFERENCE_TIME stop, double rate)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetAllocator)(IMemAllocator** allocator)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(NotifyAllocator)(IMemAllocator* allocator, BOOL read_only)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetAllocatorRequirements)(ALLOCATOR_PROPERTIES* props)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Receive)(IMediaSample* sample)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ReceiveMultiple)(IMediaSample** samples, long count, long* processed)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(ReceiveCanBlock)()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SequenceChecker main_checker_ ; SequenceChecker capture_checker_ ; VideoCaptureCapability requested_capability_)",
    "insertText": "RTC_GUARDED_BY(main_checker_)"
  },
  {
    "label": "CaptureSinkFilter()",
    "kind": "Method",
    "detail": "Function (} ; } ; class CaptureSinkFilter : public IBaseFilter { public :)",
    "insertText": "CaptureSinkFilter(VideoCaptureImpl* capture_observer)"
  },
  {
    "label": "ProcessCapturedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCapturedFrame(unsigned char* buffer, size_t length, const VideoCaptureCapability& frame_info)"
  },
  {
    "label": "NotifyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyEvent(long code, LONG_PTR param1, LONG_PTR param2)"
  },
  {
    "label": "IsStopped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStopped()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetClassID)(CLSID* clsid)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetState)(DWORD msecs, FILTER_STATE* state)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(SetSyncSource)(IReferenceClock* clock)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(GetSyncSource)(IReferenceClock** clock)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Pause)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Run)(REFERENCE_TIME start)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(Stop)()"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(EnumPins)(IEnumPins** pins)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(FindPin)(LPCWSTR id, IPin** pin)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryFilterInfo)(FILTER_INFO* info)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(JoinFilterGraph)(IFilterGraph* graph, LPCWSTR name)"
  },
  {
    "label": "STDMETHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STDMETHOD(QueryVendorInfo)(LPWSTR* vendor_info)"
  },
  {
    "label": "CaptureSinkFilter()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "CaptureSinkFilter()"
  }
]