[
  {
    "label": "FNURBSSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNURBSSurface"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FCylinderSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Surfaces / Surface . h \" namespace UE::CADKernel { class FNURBSSurface ; class FCylinderSurface : public FSurface { FEntity ; protected : FMatrixH Matrix ; double Radius ;)",
    "insertText": "FCylinderSurface(const double InToleranceGeometric, const FMatrixH& InMatrix, double InRadius, double InStartLength = -HUGE_VALUE, double InEndLength = HUGE_VALUE, double InStartAngle = 0.0, double InEndAngle = DOUBLE_TWO_PI)"
  },
  {
    "label": "FCylinderSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCylinderSurface(const double InToleranceGeometric, const FMatrixH& InMatrix, const double InRadius, const FSurfacicBoundary& Boundary)"
  },
  {
    "label": "FCylinderSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCylinderSurface()"
  },
  {
    "label": "ComputeMinToleranceIso()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeMinToleranceIso()"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (FPoint Origin = Matrix .)",
    "insertText": "Multiply(FPoint::ZeroPoint)"
  },
  {
    "label": "ComputeScaleAlongAxis()",
    "kind": "Method",
    "detail": "Function (FPoint Point2DU { 1,0,0 } ; double ToleranceU = Tolerance3D / Radius ; double ScaleU =)",
    "insertText": "ComputeScaleAlongAxis(Point2DU, Matrix, Origin)"
  },
  {
    "label": "ComputeScaleAlongAxis()",
    "kind": "Method",
    "detail": "Function (ToleranceU / = ScaleU ; FPoint Point2DV { 0,1,0 } ; double ToleranceV = Tolerance3D /)",
    "insertText": "ComputeScaleAlongAxis(Point2DV, Matrix, Origin)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (MinToleranceIso .)",
    "insertText": "Set(ToleranceU, ToleranceV)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (Ar<<Matrix ; Ar<<Radius ; } TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (# endif ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FPoint2D& InSurfacicCoordinate, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(const FSurfacicBoundary& InBoundaries, FCoordinateGrid& OutCoordinates)"
  },
  {
    "label": "PresampleIsoCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresampleIsoCircle(InBoundaries, OutCoordinates, EIso::IsoU)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ EIso::IsoV ] .)",
    "insertText": "Empty(3)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ EIso::IsoV ] .)",
    "insertText": "Add(InBoundaries[EIso::IsoV].Min)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ EIso::IsoV ] .)",
    "insertText": "Add((InBoundaries[EIso::IsoV].Max + InBoundaries[EIso::IsoV].Min) / 2.0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutCoordinates [ EIso::IsoV ] .)",
    "insertText": "Add(InBoundaries[EIso::IsoV].Max)"
  }
]