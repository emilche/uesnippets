[
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UMaterialExpressionShadingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionShadingModel"
  },
  {
    "label": "EMaterialShadingModel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMaterialShadingModel"
  },
  {
    "label": "CompileShadingModelBlendFunction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Materials / MaterialExpression . h \" # include \" MaterialExpressionShadingModel . generated . h \" class FMaterialCompiler ; int32)",
    "insertText": "CompileShadingModelBlendFunction(FMaterialCompiler* Compiler, int32 A, int32 B, int32 Alpha)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(collapsecategories, hidecategories = Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITOR virtual int32 Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "CompilePreview()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompilePreview(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetOutputType()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOutputType(int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  }
]