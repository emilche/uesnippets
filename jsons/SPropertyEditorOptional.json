[
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "SPropertyEditorOptional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorOptional"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Fonts / SlateFontInfo . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Styling / AppStyle . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" UserInterface / PropertyEditor / PropertyEditorConstants . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" IPropertyUtilities . h \" class FPropertyEditor ; class SPropertyEditorOptional : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyEditorOptional) : _Font(FAppStyle::GetFontStyle(PropertyEditorConstants::PropertyFontStyle))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_END_ARGS() static bool Supports(const TSharedRef<FPropertyEditor>& InPropertyEditor)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FPropertyEditor>& InPropertyEditor, TSharedRef<IPropertyUtilities> InPropertyUtilities)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float& OutMaxDesiredWidth)"
  },
  {
    "label": "GetOptionalTooltipText()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "GetOptionalTooltipText()"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "MakeWidgetForOption()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeWidgetForOption(TSharedPtr<FText> InOption)"
  },
  {
    "label": "OnOptionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOptionChanged(TSharedPtr<FText> NewOption, ESelectInfo::Type)"
  }
]