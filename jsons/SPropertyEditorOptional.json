[
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "SPropertyEditorOptional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorOptional"
  },
  {
    "label": "Supports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Supports(const TSharedRef<FPropertyEditor>& InPropertyEditor)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FPropertyEditor>& InPropertyEditor, TSharedRef<IPropertyUtilities> InPropertyUtilities)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float& OutMaxDesiredWidth)"
  },
  {
    "label": "MakeWidgetForOption()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeWidgetForOption(TSharedPtr<FText> InOption)"
  },
  {
    "label": "OnOptionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOptionChanged(TSharedPtr<FText> NewOption, ESelectInfo::Type)"
  }
]