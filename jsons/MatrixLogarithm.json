[
  {
    "label": "matrix_log_min_pade_degree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_log_min_pade_degree"
  },
  {
    "label": "matrix_log_max_pade_degree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "matrix_log_max_pade_degree"
  },
  {
    "label": "MatrixLogarithmAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixLogarithmAtomic"
  },
  {
    "label": "MatrixLogarithmReturnValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixLogarithmReturnValue"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "matrix_log_compute_2x2()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIX_LOGARITHM # define EIGEN_MATRIX_LOGARITHM namespace Eigen { namespace internal { template<Scalar> struct matrix_log_min_pade_degree { const int value = 3 ; } ; template<Scalar> struct matrix_log_max_pade_degree { typedef NumTraits<Scalar>::Real RealScalar ; const int value = std::numeric_limits<RealScalar>::digits<= 2 4 ? 5 : std::numeric_limits<RealScalar>::digits<= 5 3 ? 7 : std::numeric_limits<RealScalar>::digits<= 6 4 ? 8 : std::numeric_limits<RealScalar>::digits<= 1 0 6 ? 1 0 : 1 1 ; } ; template<MatrixType> void)",
    "insertText": "matrix_log_compute_2x2(const MatrixType& A, MatrixType& result)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; using std::abs ; using std::ceil ; using std::imag ; using std::log ; Scalar logA00 =)",
    "insertText": "log(A(0,0))"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (Scalar logA11 =)",
    "insertText": "log(A(1,1))"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(0,0)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(1,0) = Scalar(0)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(1,1)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (Scalar y =)",
    "insertText": "A(1,1) - A(0,0)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(0,1) = A(0,1) / A(0,0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((abs(A(0,0)) < RealScalar(0.5)*abs(A(1,1))) || (abs(A(0,0)) > 2*abs(A(1,1))))"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(0,1) = A(0,1) * (logA11 - logA00)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (} else { RealScalar unwindingNumber =)",
    "insertText": "ceil((imag(logA11 - logA00) - RealScalar(EIGEN_PI)) / RealScalar(2*EIGEN_PI))"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(0,1) = A(0,1) * (numext::log1p(y/A(0,0)) + Scalar(0,RealScalar(2*EIGEN_PI)*unwindingNumber))"
  },
  {
    "label": "matrix_log_get_pade_degree()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "matrix_log_get_pade_degree(float normTminusI)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const float maxNormForPade [ ] = { 2 . 5 1 1 1 5 7 3 9 3 4 5 5 5 0 5 4 e - 1,4 . 0 5 3 5 8 3 7 4 1 1 8 8 0 4 9 3 e - 1,5 . 3 1 4 9 7 2 9 9 6 7 1 1 7 3 1 0 e - 1 } ; const int minPadeDegree = matrix_log_min_pade_degree<float>::value ; const int maxPadeDegree = matrix_log_max_pade_degree<float>::value ; int degree = minPadeDegree ;)",
    "insertText": "for(; degree <= maxPadeDegree; ++degree) if (normTminusI <= maxNormForPade[degree - minPadeDegree])"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (typedef NumTraits<MatrixType::Scalar>::Real RealScalar ; const int minPadeDegree = 3 ; const int maxPadeDegree = 1 1 ;)",
    "insertText": "assert(degree >= minPadeDegree && degree <= maxPadeDegree)"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (const RealScalar nodes [ ] [ maxPadeDegree ] = { { 0 . 1 1 2 7 0 1 6 6 5 3 7 9 2 5 8 3 1 1 4 8 2 0 7 3 4 6 0 0 2 1 7 6 0 0 L,0 . 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 L,0 . 8 8 7 2 9 8 3 3 4 6 2 0 7 4 1 6 8 8 5 1 7 9 2 6 5 3 9 9 7 8 2 4 0 0 L },{ 0 . 0 6 9 4 3 1 8 4 4 2 0 2 9 7 3 7 1 2 3 8 8 0 2 6 7 5 5 5 5 3 5 9 5 3 L,0 . 3 3 0 0 0 9 4 7 8 2 0 7 5 7 1 8 6 7 5 9 8 6 6 7 1 2 0 4 4 8 3 7 7 7 L,0 . 6 6 9 9 9 0 5 2 1 7 9 2 4 2 8 1 3 2 4 0 1 3 3 2 8 7 9 5 5 1 6 2 2 3 L,0 . 9 3 0 5 6 8 1 5 5 7 9 7 0 2 6 2 8 7 6 1 1 9 7 3 2 4 4 4 4 6 4 0 4 8 L },{ 0 . 0 4 6 9 1 0 0 7 7 0 3 0 6 6 8 0 0 3 6 0 1 1 8 6 5 6 0 8 5 0 3 0 3 5 L,0 . 2 3 0 7 6 5 3 4 4 9 4 7 1 5 8 4 5 4 4 8 1 8 4 2 7 8 9 6 4 9 8 9 5 6 L,0 . 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 L,0 . 7 6 9 2 3 4 6 5 5 0 5 2 8 4 1 5 4 5 5 1 8 1 5 7 2 1 0 3 5 0 1 0 4 4 L,0 . 9 5 3 0 8 9 9 2 2 9 6 9 3 3 1 9 9 6 3 9 8 8 1 3 4 3 9 1 4 9 6 9 6 5 L },{ 0 . 0 3 3 7 6 5 2 4 2 8 9 8 4 2 3 9 8 6 0 9 3 8 4 9 2 2 2 7 5 3 0 0 2 7 L,0 . 1 6 9 3 9 5 3 0 6 7 6 6 8 6 7 7 4 3 1 6 9 3 0 0 2 0 2 4 9 0 0 4 7 3 L,0 . 3 8 0 6 9 0 4 0 6 9 5 8 4 0 1 5 4 5 6 8 4 7 4 9 1 3 9 1 5 9 6 4 4 0 L,0 . 6 1 9 3 0 9 5 9 3 0 4 1 5 9 8 4 5 4 3 1 5 2 5 0 8 6 0 8 4 0 3 5 6 0 L,0 . 8 3 0 6 0 4 6 9 3 2 3 3 1 3 2 2 5 6 8 3 0 6 9 9 7 9 7 5 0 9 9 5 2 7 L,0 . 9 6 6 2 3 4 7 5 7 1 0 1 5 7 6 0 1 3 9 0 6 1 5 0 7 7 7 2 4 6 9 9 7 3 L },{ 0 . 0 2 5 4 4 6 0 4 3 8 2 8 6 2 0 7 3 7 7 3 6 9 0 5 1 5 7 9 7 6 0 7 4 4 L,0 . 1 2 9 2 3 4 4 0 7 2 0 0 3 0 2 7 8 0 0 6 8 0 6 7 6 1 3 3 5 9 6 0 5 8 L,0 . 2 9 7 0 7 7 4 2 4 3 1 1 3 0 1 4 1 6 5 4 6 6 9 6 7 9 3 9 6 1 5 1 9 3 L,0 . 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 L,0 . 7 0 2 9 2 2 5 7 5 6 8 8 6 9 8 5 8 3 4 5 3 3 0 3 2 0 6 0 3 8 4 8 0 7 L,0 . 8 7 0 7 6 5 5 9 2 7 9 9 6 9 7 2 1 9 9 3 1 9 3 2 3 8 6 6 4 0 3 9 4 2 L,0 . 9 7 4 5 5 3 9 5 6 1 7 1 3 7 9 2 6 2 2 6 3 0 9 4 8 4 2 0 2 3 9 2 5 6 L },{ 0 . 0 1 9 8 5 5 0 7 1 7 5 1 2 3 1 8 8 4 1 5 8 2 1 9 5 6 5 7 1 5 2 6 3 5 L,0 . 1 0 1 6 6 6 7 6 1 2 9 3 1 8 6 6 3 0 2 0 4 2 2 3 0 3 1 7 6 2 0 8 4 8 L,0 . 2 3 7 2 3 3 7 9 5 0 4 1 8 3 5 5 0 7 0 9 1 1 3 0 4 7 5 4 0 5 3 7 6 8 L,0 . 4 0 8 2 8 2 6 7 8 7 5 2 1 7 5 0 9 7 5 3 0 2 6 1 9 2 8 8 1 9 9 0 8 0 L,0 . 5 9 1 7 1 7 3 2 1 2 4 7 8 2 4 9 0 2 4 6 9 7 3 8 0 7 1 1 8 0 0 9 2 0 L,0 . 7 6 2 7 6 6 2 0 4 9 5 8 1 6 4 4 9 2 9 0 8 8 6 9 5 2 4 5 9 4 6 2 3 2 L,0 . 8 9 8 3 3 3 2 3 8 7 0 6 8 1 3 3 6 9 7 9 5 7 7 6 9 6 8 2 3 7 9 1 5 2 L,0 . 9 8 0 1 4 4 9 2 8 2 4 8 7 6 8 1 1 5 8 4 1 7 8 0 4 3 4 2 8 4 7 3 6 5 L },{ 0 . 0 1 5 9 1 9 8 8 0 2 4 6 1 8 6 9 5 5 0 8 2 2 1 1 8 9 8 5 4 8 1 6 3 6 L,0 . 0 8 1 9 8 4 4 4 6 3 3 6 6 8 2 1 0 2 8 5 0 2 8 5 1 0 5 9 6 5 1 3 2 6 L,0 . 1 9 3 3 1 4 2 8 3 6 4 9 7 0 4 8 0 1 3 4 5 6 4 8 9 8 0 3 2 9 2 6 2 9 L,0 . 3 3 7 8 7 3 2 8 8 2 9 8 0 9 5 5 3 5 4 8 0 7 3 0 9 9 2 6 7 8 3 3 1 7 L,0 . 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 L,0 . 6 6 2 1 2 6 7 1 1 7 0 1 9 0 4 4 6 4 5 1 9 2 6 9 0 0 7 3 2 1 6 6 8 3 L,0 . 8 0 6 6 8 5 7 1 6 3 5 0 2 9 5 1 9 8 6 5 4 3 5 1 0 1 9 6 7 0 7 3 7 1 L,0 . 9 1 8 0 1 5 5 5 3 6 6 3 3 1 7 8 9 7 1 4 9 7 1 4 8 9 4 0 3 4 8 6 7 4 L,0 . 9 8 4 0 8 0 1 1 9 7 5 3 8 1 3 0 4 4 9 1 7 7 8 8 1 0 1 4 5 1 8 3 6 4 L },{ 0 . 0 1 3 0 4 6 7 3 5 7 4 1 4 1 4 1 3 9 9 6 1 0 1 7 9 9 3 9 5 7 7 7 4 0 L,0 . 0 6 7 4 6 8 3 1 6 6 5 5 5 0 7 7 4 4 6 3 3 9 5 1 6 5 5 7 8 8 2 5 3 5 L,0 . 1 6 0 2 9 5 2 1 5 8 5 0 4 8 7 7 9 6 8 8 2 8 3 6 3 1 7 4 4 2 5 6 3 2 L,0 . 2 8 3 3 0 2 3 0 2 9 3 5 3 7 6 4 0 4 6 0 0 3 6 7 0 2 8 4 1 7 1 0 7 9 L,0 . 4 2 5 5 6 2 8 3 0 5 0 9 1 8 4 3 9 4 5 5 7 5 8 6 9 9 9 4 3 5 1 4 0 0 L,0 . 5 7 4 4 3 7 1 6 9 4 9 0 8 1 5 6 0 5 4 4 2 4 1 3 0 0 0 5 6 4 8 6 0 0 L,0 . 7 1 6 6 9 7 6 9 7 0 6 4 6 2 3 5 9 5 3 9 9 6 3 2 9 7 1 5 8 2 8 9 2 1 L,0 . 8 3 9 7 0 4 7 8 4 1 4 9 5 1 2 2 0 3 1 1 7 1 6 3 6 8 2 5 5 7 4 3 6 8 L,0 . 9 3 2 5 3 1 6 8 3 3 4 4 4 9 2 2 5 5 3 6 6 0 4 8 3 4 4 2 1 1 7 4 6 5 L,0 . 9 8 6 9 5 3 2 6 4 2 5 8 5 8 5 8 6 0 0 3 8 9 8 2 0 0 6 0 4 2 2 2 6 0 L },{ 0 . 0 1 0 8 8 5 6 7 0 9 2 6 9 7 1 5 0 3 5 9 8 0 3 0 9 9 9 4 3 8 5 7 1 3 L,0 . 0 5 6 4 6 8 7 0 0 1 1 5 9 5 2 3 5 0 4 6 2 4 2 1 1 1 5 3 4 8 0 3 6 4 L,0 . 1 3 4 9 2 3 9 9 7 2 1 2 9 7 5 3 3 7 9 5 3 2 9 1 8 7 3 9 8 4 4 2 3 3 L,0 . 2 4 0 4 5 1 9 3 5 3 9 6 5 9 4 0 9 2 0 3 7 1 3 7 1 6 5 2 7 0 6 9 5 2 L,0 . 3 6 5 2 2 8 4 2 2 0 2 3 8 2 7 5 1 3 8 3 4 2 3 4 0 0 7 2 9 9 5 6 9 2 L,0 . 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 L,0 . 6 3 4 7 7 1 5 7 7 9 7 6 1 7 2 4 8 6 1 6 5 7 6 5 9 9 2 7 0 0 4 3 0 8 L,0 . 7 5 9 5 4 8 0 6 4 6 0 3 4 0 5 9 0 7 9 6 2 8 6 2 8 3 4 7 2 9 3 0 4 8 L,0 . 8 6 5 0 7 6 0 0 2 7 8 7 0 2 4 6 6 2 0 4 6 7 0 8 1 2 6 0 1 5 5 7 6 7 L,0 . 9 4 3 5 3 1 2 9 9 8 8 4 0 4 7 6 4 9 5 3 7 5 7 8 8 8 4 6 5 1 9 6 3 6 L,0 . 9 8 9 1 1 4 3 2 9 0 7 3 0 2 8 4 9 6 4 0 1 9 6 9 0 0 0 5 6 1 4 2 8 7 L } } ; const RealScalar weights [ ] [ maxPadeDegree ] = { { 0 . 2 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 L,0 . 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 L,0 . 2 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 L },{ 0 . 1 7 3 9 2 7 4 2 2 5 6 8 7 2 6 9 2 8 6 8 6 5 3 1 9 7 4 6 1 0 9 9 9 7 L,0 . 3 2 6 0 7 2 5 7 7 4 3 1 2 7 3 0 7 1 3 1 3 4 6 8 0 2 5 3 8 9 0 0 0 3 L,0 . 3 2 6 0 7 2 5 7 7 4 3 1 2 7 3 0 7 1 3 1 3 4 6 8 0 2 5 3 8 9 0 0 0 3 L,0 . 1 7 3 9 2 7 4 2 2 5 6 8 7 2 6 9 2 8 6 8 6 5 3 1 9 7 4 6 1 0 9 9 9 7 L },{ 0 . 1 1 8 4 6 3 4 4 2 5 2 8 0 9 4 5 4 3 7 5 7 1 3 2 0 2 0 3 5 9 9 5 8 7 L,0 . 2 3 9 3 1 4 3 3 5 2 4 9 6 8 3 2 3 4 0 2 0 6 4 5 7 5 7 4 1 7 8 1 9 1 L,0 . 2 8 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 L,0 . 2 3 9 3 1 4 3 3 5 2 4 9 6 8 3 2 3 4 0 2 0 6 4 5 7 5 7 4 1 7 8 1 9 1 L,0 . 1 1 8 4 6 3 4 4 2 5 2 8 0 9 4 5 4 3 7 5 7 1 3 2 0 2 0 3 5 9 9 5 8 7 L },{ 0 . 0 8 5 6 6 2 2 4 6 1 8 9 5 8 5 1 7 2 5 2 0 1 4 8 0 7 1 0 8 6 3 6 6 5 L,0 . 1 8 0 3 8 0 7 8 6 5 2 4 0 6 9 3 0 3 7 8 4 9 1 6 7 5 6 9 1 8 8 5 8 1 L,0 . 2 3 3 9 5 6 9 6 7 2 8 6 3 4 5 5 2 3 6 9 4 9 3 5 1 7 1 9 9 4 7 7 5 5 L,0 . 2 3 3 9 5 6 9 6 7 2 8 6 3 4 5 5 2 3 6 9 4 9 3 5 1 7 1 9 9 4 7 7 5 5 L,0 . 1 8 0 3 8 0 7 8 6 5 2 4 0 6 9 3 0 3 7 8 4 9 1 6 7 5 6 9 1 8 8 5 8 1 L,0 . 0 8 5 6 6 2 2 4 6 1 8 9 5 8 5 1 7 2 5 2 0 1 4 8 0 7 1 0 8 6 3 6 6 5 L },{ 0 . 0 6 4 7 4 2 4 8 3 0 8 4 4 3 4 8 4 6 6 3 5 3 0 5 7 1 6 3 3 9 5 4 1 0 L,0 . 1 3 9 8 5 2 6 9 5 7 4 4 6 3 8 3 3 3 9 5 0 7 3 3 8 8 5 7 1 1 8 8 9 8 L,0 . 1 9 0 9 1 5 0 2 5 2 5 2 5 5 9 4 7 2 4 7 5 1 8 4 8 8 7 7 4 4 4 8 7 6 L,0 . 2 0 8 9 7 9 5 9 1 8 3 6 7 3 4 6 9 3 8 7 7 5 5 1 0 2 0 4 0 8 1 6 3 3 L,0 . 1 9 0 9 1 5 0 2 5 2 5 2 5 5 9 4 7 2 4 7 5 1 8 4 8 8 7 7 4 4 4 8 7 6 L,0 . 1 3 9 8 5 2 6 9 5 7 4 4 6 3 8 3 3 3 9 5 0 7 3 3 8 8 5 7 1 1 8 8 9 8 L,0 . 0 6 4 7 4 2 4 8 3 0 8 4 4 3 4 8 4 6 6 3 5 3 0 5 7 1 6 3 3 9 5 4 1 0 L },{ 0 . 0 5 0 6 1 4 2 6 8 1 4 5 1 8 8 1 2 9 5 7 6 2 6 5 6 7 7 1 5 4 9 8 1 1 L,0 . 1 1 1 1 9 0 5 1 7 2 2 6 6 8 7 2 3 5 2 7 2 1 7 7 9 9 7 2 1 3 1 2 0 4 L,0 . 1 5 6 8 5 3 3 2 2 9 3 8 9 4 3 6 4 3 6 6 8 9 8 1 1 0 0 9 9 3 3 0 0 7 L,0 . 1 8 1 3 4 1 8 9 1 6 8 9 1 8 0 9 9 1 4 8 2 5 7 5 2 2 4 6 3 8 5 9 7 8 L,0 . 1 8 1 3 4 1 8 9 1 6 8 9 1 8 0 9 9 1 4 8 2 5 7 5 2 2 4 6 3 8 5 9 7 8 L,0 . 1 5 6 8 5 3 3 2 2 9 3 8 9 4 3 6 4 3 6 6 8 9 8 1 1 0 0 9 9 3 3 0 0 7 L,0 . 1 1 1 1 9 0 5 1 7 2 2 6 6 8 7 2 3 5 2 7 2 1 7 7 9 9 7 2 1 3 1 2 0 4 L,0 . 0 5 0 6 1 4 2 6 8 1 4 5 1 8 8 1 2 9 5 7 6 2 6 5 6 7 7 1 5 4 9 8 1 1 L },{ 0 . 0 4 0 6 3 7 1 9 4 1 8 0 7 8 7 2 0 5 9 8 5 9 4 6 0 7 9 0 5 5 2 6 1 8 L,0 . 0 9 0 3 2 4 0 8 0 3 4 7 4 2 8 7 0 2 0 2 9 2 3 6 0 1 5 6 2 1 4 5 6 4 L,0 . 1 3 0 3 0 5 3 4 8 2 0 1 4 6 7 7 3 1 1 5 9 3 7 1 4 3 4 7 0 9 3 1 6 4 L,0 . 1 5 6 1 7 3 5 3 8 5 2 0 0 0 1 4 2 0 0 3 4 3 1 5 2 0 3 2 9 2 2 2 1 8 L,0 . 1 6 5 1 1 9 6 7 7 5 0 0 6 2 9 8 8 1 5 8 2 2 6 2 5 3 4 6 4 3 4 8 7 0 L,0 . 1 5 6 1 7 3 5 3 8 5 2 0 0 0 1 4 2 0 0 3 4 3 1 5 2 0 3 2 9 2 2 2 1 8 L,0 . 1 3 0 3 0 5 3 4 8 2 0 1 4 6 7 7 3 1 1 5 9 3 7 1 4 3 4 7 0 9 3 1 6 4 L,0 . 0 9 0 3 2 4 0 8 0 3 4 7 4 2 8 7 0 2 0 2 9 2 3 6 0 1 5 6 2 1 4 5 6 4 L,0 . 0 4 0 6 3 7 1 9 4 1 8 0 7 8 7 2 0 5 9 8 5 9 4 6 0 7 9 0 5 5 2 6 1 8 L },{ 0 . 0 3 3 3 3 5 6 7 2 1 5 4 3 4 4 0 6 8 7 9 6 7 8 4 4 0 4 9 4 6 6 6 5 9 L,0 . 0 7 4 7 2 5 6 7 4 5 7 5 2 9 0 2 9 6 5 7 2 8 8 8 1 6 9 8 2 8 8 4 8 7 L,0 . 1 0 9 5 4 3 1 8 1 2 5 7 9 9 1 0 2 1 9 9 7 7 6 7 4 6 7 1 1 4 0 8 1 6 L,0 . 1 3 4 6 3 3 3 5 9 6 5 4 9 9 8 1 7 7 5 4 5 6 1 3 4 6 0 7 8 4 7 3 4 7 L,0 . 1 4 7 7 6 2 1 1 2 3 5 7 3 7 6 4 3 5 0 8 6 9 4 6 4 9 7 3 2 5 6 6 9 2 L,0 . 1 4 7 7 6 2 1 1 2 3 5 7 3 7 6 4 3 5 0 8 6 9 4 6 4 9 7 3 2 5 6 6 9 2 L,0 . 1 3 4 6 3 3 3 5 9 6 5 4 9 9 8 1 7 7 5 4 5 6 1 3 4 6 0 7 8 4 7 3 4 7 L,0 . 1 0 9 5 4 3 1 8 1 2 5 7 9 9 1 0 2 1 9 9 7 7 6 7 4 6 7 1 1 4 0 8 1 6 L,0 . 0 7 4 7 2 5 6 7 4 5 7 5 2 9 0 2 9 6 5 7 2 8 8 8 1 6 9 8 2 8 8 4 8 7 L,0 . 0 3 3 3 3 5 6 7 2 1 5 4 3 4 4 0 6 8 7 9 6 7 8 4 4 0 4 9 4 6 6 6 5 9 L },{ 0 . 0 2 7 8 3 4 2 8 3 5 5 8 0 8 6 8 3 3 2 4 1 3 7 6 8 6 0 2 2 1 2 7 4 3 L,0 . 0 6 2 7 9 0 1 8 4 7 3 2 4 5 2 3 1 2 3 1 7 3 4 7 1 4 9 6 1 1 9 7 0 1 L,0 . 0 9 3 1 4 5 1 0 5 4 6 3 8 6 7 1 2 5 7 1 3 0 4 8 8 2 0 7 1 5 8 2 8 0 L,0 . 1 1 6 5 9 6 8 8 2 2 9 5 9 9 5 2 3 9 9 5 9 2 6 1 8 5 2 4 2 1 5 8 7 6 L,0 . 1 3 1 4 0 2 2 7 2 2 5 5 1 2 3 3 3 1 0 9 0 3 4 4 4 3 4 9 4 5 2 5 4 6 L,0 . 1 3 6 4 6 2 5 4 3 3 8 8 9 5 0 3 1 5 3 5 7 2 4 1 7 6 4 1 6 8 1 7 1 1 L,0 . 1 3 1 4 0 2 2 7 2 2 5 5 1 2 3 3 3 1 0 9 0 3 4 4 4 3 4 9 4 5 2 5 4 6 L,0 . 1 1 6 5 9 6 8 8 2 2 9 5 9 9 5 2 3 9 9 5 9 2 6 1 8 5 2 4 2 1 5 8 7 6 L,0 . 0 9 3 1 4 5 1 0 5 4 6 3 8 6 7 1 2 5 7 1 3 0 4 8 8 2 0 7 1 5 8 2 8 0 L,0 . 0 6 2 7 9 0 1 8 4 7 3 2 4 5 2 3 1 2 3 1 7 3 4 7 1 4 9 6 1 1 9 7 0 1 L,0 . 0 2 7 8 3 4 2 8 3 5 5 8 0 8 6 8 3 3 2 4 1 3 7 6 8 6 0 2 2 1 2 7 4 3 L } } ; MatrixType TminusI = T -)",
    "insertText": "Identity(T.rows(), T.rows())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "setZero(T.rows(), T.rows())"
  },
  {
    "label": "weight()",
    "kind": "Method",
    "detail": "Function (RealScalar weight = weights [ degree - minPadeDegree ] [ k ] ; RealScalar node = nodes [ degree - minPadeDegree ] [ k ] ; result + =)",
    "insertText": "weight(MatrixType::Identity(T.rows(), T.rows()) + node * TminusI) .template triangularView<Upper>().solve(TminusI)"
  },
  {
    "label": "matrix_log_compute_big()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType> void)",
    "insertText": "matrix_log_compute_big(const MatrixType& A, MatrixType& result)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (typedef MatrixType::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; using std::pow ; int numberOfSquareRoots = 0 ; int numberOfExtraSquareRoots = 0 ; int degree ; MatrixType T = A,sqrtT ; const int maxPadeDegree = matrix_log_max_pade_degree<Scalar>::value ; const RealScalar maxNormForPade =)",
    "insertText": "RealScalar(maxPadeDegree<= 5? 5.3149729967117310e-1L: maxPadeDegree<= 7? 2.6429608311114350e-1L: maxPadeDegree<= 8? 2.32777776523703892094e-1L: maxPadeDegree<=10? 1.05026503471351080481093652651105e-1L: 1.1880960220216759245467951592883642e-1L)"
  },
  {
    "label": "normTminusI()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "normTminusI(T - MatrixType::Identity(T.rows(), T.rows())).cwiseAbs().colwise().sum().maxCoeff()"
  },
  {
    "label": "matrix_log_get_pade_degree()",
    "kind": "Method",
    "detail": "Function (degree =)",
    "insertText": "matrix_log_get_pade_degree(normTminusI)"
  },
  {
    "label": "matrix_log_get_pade_degree()",
    "kind": "Method",
    "detail": "Function (int degree2 =)",
    "insertText": "matrix_log_get_pade_degree(normTminusI / RealScalar(2))"
  },
  {
    "label": "matrix_sqrt_triangular()",
    "kind": "Method",
    "detail": "Function (+ + numberOfExtraSquareRoots ; })",
    "insertText": "matrix_sqrt_triangular(T, sqrtT)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (T = sqrtT . template triangularView<)",
    "insertText": "Upper()"
  },
  {
    "label": "matrix_log_compute_pade()",
    "kind": "Method",
    "detail": "Function (+ + numberOfSquareRoots ; })",
    "insertText": "matrix_log_compute_pade(result, T, degree)"
  },
  {
    "label": "pow()",
    "kind": "Method",
    "detail": "Function (result* =)",
    "insertText": "pow(RealScalar(2), RealScalar(numberOfSquareRoots))"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> class MatrixLogarithmAtomic { public : MatrixType)",
    "insertText": "compute(const MatrixType& A)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (using std::log ; MatrixType)",
    "insertText": "result(A.rows(), A.rows())"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef internal::nested_eval<Derived,1 0>::type DerivedEvalType ; typedef internal::remove_all<DerivedEvalType>::type DerivedEvalTypeClean ; typedef internal::traits<DerivedEvalTypeClean> Traits ; typedef std::complex<NumTraits<Scalar>::Real> ComplexScalar ; typedef Matrix<ComplexScalar,Dynamic,Dynamic,0,Traits::RowsAtCompileTime,Traits::ColsAtCompileTime> DynMatrixType ; typedef internal::MatrixLogarithmAtomic<DynMatrixType> AtomicType ; AtomicType atomic ; internal::matrix_function_compute<DerivedEvalTypeClean::PlainObject)",
    "insertText": "run(m_A, atomic, result)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} private : const DerivedNested m_A ; } ; namespace internal { template<Derived> struct traits<MatrixLogarithmReturnValue<Derived>> { typedef Derived::PlainObject ReturnType ; } ; } template<Derived> const MatrixLogarithmReturnValue<Derived> MatrixBase<Derived)",
    "insertText": "log()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows() == cols())"
  }
]