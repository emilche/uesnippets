[
  {
    "label": "FAnimNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_AssetPlayerBase"
  },
  {
    "label": "UAnimGraphNode_AssetPlayerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_AssetPlayerBase"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimNode_RelevantAssetPlayerBase . h \" # include \" Animation / AnimSync . h \" # include \" AnimNode_AssetPlayerBase . generated . h \")",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FAnimNode_AssetPlayerBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimNode_AssetPlayerBase()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "UpdateAssetPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetPlayer(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "CreateTickRecordForNode()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CreateTickRecordForNode(const FAnimationUpdateContext& Context, UAnimSequenceBase* Sequence, bool bLooping, float PlayRate, bool bIsEvaluator)"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetGroupName()"
  },
  {
    "label": "SetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccumulatedTime(float NewTime)"
  },
  {
    "label": "GetCachedBlendWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCachedBlendWeight()"
  },
  {
    "label": "ClearCachedBlendWeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedBlendWeight()"
  },
  {
    "label": "GetCurrentAssetTimePlayRateAdjusted()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAssetTimePlayRateAdjusted()"
  },
  {
    "label": "GetDeltaTimeRecord()",
    "kind": "Method",
    "detail": "Function (const FDeltaTimeRecord*)",
    "insertText": "GetDeltaTimeRecord()"
  },
  {
    "label": "GetSyncParams()",
    "kind": "Method",
    "detail": "Function (FDeltaTimeRecord DeltaTimeRecord ; bool bHasBeenFullWeight = false ; UE::Anim::FAnimSyncParams)",
    "insertText": "GetSyncParams(bool bRequestedInertialization)"
  }
]