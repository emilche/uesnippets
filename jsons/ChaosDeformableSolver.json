[
  {
    "label": "FDeformableSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeformableSolver"
  },
  {
    "label": "FGameThreadAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameThreadAccess"
  },
  {
    "label": "FPhysicsThreadAccess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsThreadAccess"
  },
  {
    "label": "FDeformableSolver()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDCollisionSpringConstraints . h \" # include \" Chaos / PBDEvolution . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDTriangleMeshCollisions . h \" # include \" Chaos / TriangleMesh . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" Chaos / Deformable / GaussSeidelCorotatedConstraints . h \" # include \" Chaos / Deformable / GaussSeidelNeohookeanConstraints . h \" # include \" Chaos / Deformable / GaussSeidelWeakConstraints . h \" # include \" Chaos / Deformable / GaussSeidelDynamicWeakConstraints . h \" # include \" Chaos / Deformable / GaussSeidelSphereRepulsionConstraints . h \" # include \" Chaos / Deformable / GaussSeidelMainConstraint . h \" # include \" Chaos / Deformable / MuscleActivationConstraints . h \" # include \" Chaos / Deformable / GaussSeidelCorotatedCodimensionalConstraints . h \" # include \" Chaos / Deformable / GaussSeidelLinearCodimensionalConstraints . h \" # include \" Chaos / XPBDWeakConstraints . h \" # include \" Chaos / BlendedXPBDCorotatedConstraints . h \" # include \" Chaos / XPBDGridBasedCorotatedConstraints . h \" # include \" Chaos / Deformable / ChaosDeformableSolverTypes . h \" # include \" Chaos / Deformable / ChaosDeformableSolverProxy . h \" # include \" Chaos / Deformable / ChaosDeformableCollisionsProxy . h \" # include \" Chaos / Deformable / ChaosDeformableConstraintsProxy . h \" # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" Templates / UniquePtr . h \" namespace Chaos::Softs { class FDeformableSolver : public FPhysicsSolverEvents { class FGameThreadAccess ; class FPhysicsThreadAccess ; public :)",
    "insertText": "FDeformableSolver(FDeformableSolverProperties InProp = FDeformableSolverProperties())"
  },
  {
    "label": "FDeformableSolver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDeformableSolver()"
  },
  {
    "label": "FPhysicsThreadAccess()",
    "kind": "Method",
    "detail": "Function (class FPhysicsThreadAccess { public :)",
    "insertText": "FPhysicsThreadAccess(FDeformableSolver* InSolver, const FPhysicsThreadAccessor&) : Solver(InSolver)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()()"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(FSolverReal DeltaTime)"
  },
  {
    "label": "AdvanceDt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceDt(FSolverReal DeltaTime)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(const FDeformableSolverProperties&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FSolverReal DeltaTime)"
  },
  {
    "label": "UpdateOutputState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOutputState(FThreadingProxy&)"
  },
  {
    "label": "PullInputPackage()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FDeformablePackage>)",
    "insertText": "PullInputPackage()"
  },
  {
    "label": "PushOutputPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushOutputPackage(int32 Frame, FDeformableDataMap&& Package)"
  },
  {
    "label": "InitializeSimulationObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSimulationObjects()"
  },
  {
    "label": "InitializeSimulationObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSimulationObject(FThreadingProxy&)"
  },
  {
    "label": "InitializeKinematicConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeKinematicConstraint()"
  },
  {
    "label": "InitializeSelfCollisionVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSelfCollisionVariables()"
  },
  {
    "label": "RemoveSimulationObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSimulationObjects()"
  },
  {
    "label": "GetProperties()",
    "kind": "Method",
    "detail": "Function (const FDeformableSolverProperties&)",
    "insertText": "GetProperties()"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (} FPBDEvolution*)",
    "insertText": "GetEvolution()"
  },
  {
    "label": "GetObjectsMap()",
    "kind": "Method",
    "detail": "Function (} TArrayCollectionArray<const UObject*>&)",
    "insertText": "GetObjectsMap()"
  },
  {
    "label": "HasObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasObject(UObject* InObject)"
  },
  {
    "label": "AddProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProxy(FThreadingProxy* InObject)"
  },
  {
    "label": "RemoveProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProxy(FThreadingProxy* InObject)"
  },
  {
    "label": "PushInputPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushInputPackage(int32 Frame, FDeformableDataMap&& InPackage)"
  },
  {
    "label": "SetEnableSolver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableSolver(bool InbEnableSolver)"
  },
  {
    "label": "GetEnableSolver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableSolver()"
  },
  {
    "label": "PullOutputPackage()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FDeformablePackage>)",
    "insertText": "PullOutputPackage()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&SolverEnabledMutex)"
  },
  {
    "label": "UpdateSimulationObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSimulationObjects(FSolverReal DeltaTime)"
  },
  {
    "label": "InitializeSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSimulationSpace()"
  },
  {
    "label": "InitializeDeformableParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDeformableParticles(FFleshThreadingProxy&)"
  },
  {
    "label": "UpdateTransientConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransientConstraints()"
  },
  {
    "label": "PostProcessTransientConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessTransientConstraints()"
  },
  {
    "label": "InitializeKinematicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeKinematicParticles(FFleshThreadingProxy&)"
  },
  {
    "label": "InitializeTetrahedralOrTriangleConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTetrahedralOrTriangleConstraint(FFleshThreadingProxy&)"
  },
  {
    "label": "InitializeGidBasedConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGidBasedConstraints(FFleshThreadingProxy&)"
  },
  {
    "label": "InitializeGaussSeidelConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGaussSeidelConstraints(FFleshThreadingProxy& Proxy)"
  },
  {
    "label": "InitializeWeakConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWeakConstraint(FFleshThreadingProxy&)"
  },
  {
    "label": "InitializeCollisionBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeCollisionBodies(FCollisionManagerProxy&)"
  },
  {
    "label": "InitializeConstraintBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeConstraintBodies(FConstraintManagerProxy& Proxy)"
  },
  {
    "label": "InitializeGridBasedConstraintVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGridBasedConstraintVariables()"
  },
  {
    "label": "InitializeGaussSeidelConstraintVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeGaussSeidelConstraintVariables()"
  },
  {
    "label": "InitializeMuscleActivationVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMuscleActivationVariables()"
  },
  {
    "label": "InitializeMuscleActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMuscleActivation(FFleshThreadingProxy& Proxy)"
  },
  {
    "label": "UpdateCollisionBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollisionBodies(FCollisionManagerProxy&, FThreadingProxy::FKey, FSolverReal DeltaTime)"
  },
  {
    "label": "UpdateConstraintBodies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConstraintBodies(FConstraintManagerProxy& Proxy, FThreadingProxy::FKey Owner, FSolverReal DeltaTime)"
  },
  {
    "label": "ComputeParticleTargets()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::TVec3<FSolverReal>>)",
    "insertText": "ComputeParticleTargets(const TArray<TArray<int32>>& ParticleIndices)"
  },
  {
    "label": "DebugDrawSimulationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawSimulationData()"
  },
  {
    "label": "DebugDrawTetrahedralParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawTetrahedralParticles(FFleshThreadingProxy& Proxy)"
  },
  {
    "label": "WriteFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFrame(FThreadingProxy& InProxy, const FSolverReal DeltaTime)"
  },
  {
    "label": "WriteTrisGEO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTrisGEO(const FSolverParticles& Particles, const TArray<TVec3<int32>>& Mesh)"
  }
]