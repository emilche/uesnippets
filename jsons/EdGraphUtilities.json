[
  {
    "label": "FCompilerResultsLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompilerResultsLog"
  },
  {
    "label": "SGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphNode"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGraphPanelNodeFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphPanelNodeFactory"
  },
  {
    "label": "FGraphPanelPinFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphPanelPinFactory"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FGraphPanelPinConnectionFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphPanelPinConnectionFactory"
  },
  {
    "label": "FConnectionDrawingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConnectionDrawingPolicy"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FEdGraphUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdGraphUtilities"
  },
  {
    "label": "FNodeVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeVisitor"
  },
  {
    "label": "FNodeFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNodeFactory"
  },
  {
    "label": "FWeakGraphPinPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakGraphPinPtr"
  },
  {
    "label": "FGraphPanelNodeFactory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FCompilerResultsLog ; class SGraphNode ; class SGraphPin ; class UEdGraph ; class UEdGraphNode ; class UFunction ; class UObject ; struct FGraphPanelNodeFactory : public TSharedFromThis<FGraphPanelNodeFactory> { public : ~)",
    "insertText": "FGraphPanelNodeFactory()"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class SGraphNode>)",
    "insertText": "CreateNode(class UEdGraphNode* Node)"
  },
  {
    "label": "CreatePin()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class SGraphPin>)",
    "insertText": "CreatePin(class UEdGraphPin* Pin)"
  },
  {
    "label": "CreateConnectionPolicy()",
    "kind": "Method",
    "detail": "Function (} class FConnectionDrawingPolicy*)",
    "insertText": "CreateConnectionPolicy(const class UEdGraphSchema* Schema, int32 InBackLayerID, int32 InFrontLayerID, float ZoomFactor, const class FSlateRect& InClippingRect, class FSlateWindowElementList& InDrawElements, class UEdGraph* InGraphObj)"
  },
  {
    "label": "UnregisterVisualNodeFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterVisualNodeFactory(TSharedPtr<FGraphPanelNodeFactory> OldFactory)"
  },
  {
    "label": "RegisterVisualPinFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterVisualPinFactory(TSharedPtr<FGraphPanelPinFactory> NewFactory)"
  },
  {
    "label": "UnregisterVisualPinFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterVisualPinFactory(TSharedPtr<FGraphPanelPinFactory> OldFactory)"
  },
  {
    "label": "RegisterVisualPinConnectionFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterVisualPinConnectionFactory(TSharedPtr<FGraphPanelPinConnectionFactory> NewFactory)"
  },
  {
    "label": "UnregisterVisualPinConnectionFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterVisualPinConnectionFactory(TSharedPtr<FGraphPanelPinConnectionFactory> OldFactory)"
  },
  {
    "label": "PostProcessPastedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessPastedNodes(TSet<class UEdGraphNode*>& SpawnedNodes)"
  },
  {
    "label": "GetNetFromPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetNetFromPin(UEdGraphPin* Pin)"
  },
  {
    "label": "CloneGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "CloneGraph(UEdGraph* Source, UObject* NewOuter, FCompilerResultsLog* MessageLog = NULL, bool bCloningForCompile = false)"
  },
  {
    "label": "CloneAndMergeGraphIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneAndMergeGraphIn(UEdGraph* MergeTarget, UEdGraph* SourceGraph, FCompilerResultsLog& MessageLog, bool bRequireSchemaMatch, bool bInIsCompiling = false, TArray<UEdGraphNode*>* OutClonedNodes = NULL)"
  },
  {
    "label": "MergeChildrenGraphsIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeChildrenGraphsIn(UEdGraph* MergeTarget, UEdGraph* ParentGraph, bool bRequireSchemaMatch, bool bInIsCompiling = false, FCompilerResultsLog* MessageLog = nullptr)"
  },
  {
    "label": "RenameGraphCloseToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameGraphCloseToName(UEdGraph* Graph, const FString& BaseName, int32 StartIndex = 1)"
  },
  {
    "label": "RenameGraphToNameOrCloseToName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameGraphToNameOrCloseToName(UEdGraph* Graph, const FString& DesiredName)"
  },
  {
    "label": "ExportNodesToText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportNodesToText(TSet<UObject*> NodesToExport, FString& ExportedText)"
  },
  {
    "label": "ImportNodesFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportNodesFromText(UEdGraph* DestinationGraph, const FString& TextToImport, TSet<UEdGraphNode*>& ImportedNodeSet)"
  },
  {
    "label": "CanImportNodesFromText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImportNodesFromText(const UEdGraph* DestinationGraph, const FString& TextToImport)"
  },
  {
    "label": "CalculateApproximateNodeBoundaries()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "CalculateApproximateNodeBoundaries(const TArray<UEdGraphNode*>& Nodes)"
  },
  {
    "label": "CopyCommonState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCommonState(UEdGraphNode* OldNode, UEdGraphNode* NewNode)"
  },
  {
    "label": "TouchNode()",
    "kind": "Method",
    "detail": "Function (struct FNodeVisitor { TSet<UEdGraphNode*> VisitedNodes ; void)",
    "insertText": "TouchNode(UEdGraphNode* Node)"
  },
  {
    "label": "TraverseNodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TraverseNodes(UEdGraphNode* Node)"
  },
  {
    "label": "IsSetParam()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsSetParam(const UFunction* Function, const FName ParameterName)"
  },
  {
    "label": "IsMapParam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMapParam(const UFunction* Function, const FName ParameterName)"
  },
  {
    "label": "IsArrayDependentParam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsArrayDependentParam(const UFunction* Function, const FName ParameterName)"
  },
  {
    "label": "IsDynamicContainerParam()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicContainerParam(const UFunction* Function, const FName ParameterName)"
  },
  {
    "label": "FindArrayParamPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "FindArrayParamPin(const UFunction* Function, const UEdGraphNode* Node)"
  },
  {
    "label": "FindSetParamPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "FindSetParamPin(const UFunction* Function, const UEdGraphNode* Node)"
  },
  {
    "label": "FindMapParamPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "FindMapParamPin(const UFunction* Function, const UEdGraphNode* Node)"
  },
  {
    "label": "FindPinFromMetaData()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "FindPinFromMetaData(const UFunction* Function, const UEdGraphNode* Node, FName MetaData)"
  },
  {
    "label": "GetPinConnectionMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPinConnectionMap(const UEdGraphNode* Node, TMap<FString, TSet<UEdGraphPin*>>& OutPinConnections)"
  },
  {
    "label": "ReconnectPinMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconnectPinMap(UEdGraphNode* Node, const TMap<FString, TSet<UEdGraphPin*>>& PinConnections)"
  },
  {
    "label": "CopyPinDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyPinDefaults(const UEdGraphNode* NodeFrom, UEdGraphNode* NodeTo)"
  },
  {
    "label": "FEdGraphUtilities()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<FGraphPanelNodeFactory>> VisualNodeFactories ; TArray<TSharedPtr<FGraphPanelPinFactory>> VisualPinFactories ; TArray<TSharedPtr<FGraphPanelPinConnectionFactory>> VisualPinConnectionFactories ; class FNodeFactory ;)",
    "insertText": "FEdGraphUtilities()"
  },
  {
    "label": "FWeakGraphPinPtr()",
    "kind": "Method",
    "detail": "Function (} } ; struct FWeakGraphPinPtr {)",
    "insertText": "FWeakGraphPinPtr()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FWeakGraphPinPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeakGraphPinPtr(const FWeakGraphPinPtr &OtherPinPtr)"
  },
  {
    "label": "FWeakGraphPinPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeakGraphPinPtr(const class UEdGraphPin *Pin)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (PinName =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "FEdGraphPinReference()",
    "kind": "Method",
    "detail": "Function (PinReference =)",
    "insertText": "FEdGraphPinReference()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FWeakGraphPinPtr &OtherPinPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PinName = OtherPinPtr . PinName ; PinReference = OtherPinPtr . PinReference ; NodeObjectPtr = OtherPinPtr . NodeObjectPtr ; } void)",
    "insertText": "operator(const class UEdGraphPin *Pin)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} class UEdGraphPin*)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; class UEdGraphPin*)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  }
]