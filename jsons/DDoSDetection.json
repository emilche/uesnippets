[
  {
    "label": "FDDoSPacketCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDDoSPacketCounters"
  },
  {
    "label": "FDDoSState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDDoSState"
  },
  {
    "label": "FDDoSStateConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDDoSStateConfig"
  },
  {
    "label": "FDDoSDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDDoSDetection"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformTime . h \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FDDoSSeverityEscalation, FString)"
  },
  {
    "label": "FDDoSPacketCounters()",
    "kind": "Method",
    "detail": "Function (struct FDDoSPacketCounters { int32 NonConnPacketCounter ; int32 NetConnPacketCounter ; int32 DisconnPacketCounter ; int32 BadPacketCounter ; int32 ErrorPacketCounter ; int32 DroppedPacketCounter ; int32 WorstFrameReceiveTimeMS ;)",
    "insertText": "FDDoSPacketCounters() : NonConnPacketCounter(0) , NetConnPacketCounter(0) , DisconnPacketCounter(0) , BadPacketCounter(0) , ErrorPacketCounter(0) , DroppedPacketCounter(0) , WorstFrameReceiveTimeMS(0)"
  },
  {
    "label": "FDDoSState()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDDoSState { bool bSendEscalateAnalytics ; int32 EscalateQuotaPacketsPerSec ; int32 EscalateQuotaDisconnPacketsPerSec ; int32 EscalateQuotaBadPacketsPerSec ; int16 EscalateTimeQuotaMSPerFrame ; int32 PacketLimitPerFrame ; int32 PacketTimeLimitMSPerFrame ; int32 NetConnPacketTimeLimitMSPerFrame ; int32 CooloffTime ;)",
    "insertText": "FDDoSState() : bSendEscalateAnalytics(true) , EscalateQuotaPacketsPerSec(-1) , EscalateQuotaDisconnPacketsPerSec(-1) , EscalateQuotaBadPacketsPerSec(-1) , EscalateTimeQuotaMSPerFrame(-1) , PacketLimitPerFrame(-1) , PacketTimeLimitMSPerFrame(-1) , NetConnPacketTimeLimitMSPerFrame(-1) , CooloffTime(-1)"
  },
  {
    "label": "HasHitQuota()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasHitQuota(FDDoSPacketCounters& InCounter, int32 TimePassedMS)"
  },
  {
    "label": "FDDoSStateConfig()",
    "kind": "Method",
    "detail": "Function (const bool bAtQuota = EscalateQuotaPacketsPerSec> 0&& InCounter . NonConnPacketCounter> = EscalateQuotaPacketsPerSec ; const bool bAtDisconnQuota = EscalateQuotaDisconnPacketsPerSec> 0&& InCounter . DisconnPacketCounter> = EscalateQuotaDisconnPacketsPerSec ; const bool bAtBadQuota = EscalateQuotaBadPacketsPerSec> 0&& InCounter . BadPacketCounter> = EscalateQuotaBadPacketsPerSec ; const bool bAtTimeQuota = EscalateTimeQuotaMSPerFrame> 0&& TimePassedMS> EscalateTimeQuotaMSPerFrame ; return bAtQuota | | bAtDisconnQuota | | bAtBadQuota | | bAtTimeQuota ; } } ; struct FDDoSStateConfig : public FDDoSState { FString SeverityCategory ;)",
    "insertText": "FDDoSStateConfig() : SeverityCategory(TEXT(\"\"))"
  },
  {
    "label": "ApplyState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyState(FDDoSState& Target)"
  },
  {
    "label": "ApplyAdjustedState()",
    "kind": "Method",
    "detail": "Function (Target . bSendEscalateAnalytics = bSendEscalateAnalytics ; Target . EscalateQuotaPacketsPerSec = EscalateQuotaPacketsPerSec ; Target . EscalateQuotaDisconnPacketsPerSec = EscalateQuotaDisconnPacketsPerSec ; Target . EscalateQuotaBadPacketsPerSec = EscalateQuotaBadPacketsPerSec ; Target . EscalateTimeQuotaMSPerFrame = EscalateTimeQuotaMSPerFrame ; Target . PacketLimitPerFrame = PacketLimitPerFrame ; Target . PacketTimeLimitMSPerFrame = PacketTimeLimitMSPerFrame ; Target . NetConnPacketTimeLimitMSPerFrame = NetConnPacketTimeLimitMSPerFrame ; Target . CooloffTime = CooloffTime ; } void)",
    "insertText": "ApplyAdjustedState(FDDoSState& Target, float FrameAdjustment)"
  },
  {
    "label": "PacketLimitPerFrame()",
    "kind": "Method",
    "detail": "Function (Target .)",
    "insertText": "PacketLimitPerFrame(PacketLimitPerFrame == -1 ? -1 : (int32)((float)PacketLimitPerFrame * FrameAdjustment))"
  },
  {
    "label": "PacketTimeLimitMSPerFrame()",
    "kind": "Method",
    "detail": "Function (Target .)",
    "insertText": "PacketTimeLimitMSPerFrame(PacketTimeLimitMSPerFrame == -1 ? -1 : (int32)((float)PacketTimeLimitMSPerFrame * FrameAdjustment))"
  },
  {
    "label": "NetConnPacketTimeLimitMSPerFrame()",
    "kind": "Method",
    "detail": "Function (Target .)",
    "insertText": "NetConnPacketTimeLimitMSPerFrame(NetConnPacketTimeLimitMSPerFrame == -1 ? -1 : (int32)((float)NetConnPacketTimeLimitMSPerFrame * FrameAdjustment))"
  },
  {
    "label": "FDDoSDetection()",
    "kind": "Method",
    "detail": "Function (} } ; class FDDoSDetection : protected FDDoSPacketCounters,protected FDDoSState { public :)",
    "insertText": "FDDoSDetection()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(int32 MaxTickRate)"
  },
  {
    "label": "InitConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConfig()"
  },
  {
    "label": "SetMaxTickRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxTickRate(int32 MaxTickRate)"
  },
  {
    "label": "UpdateSeverity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSeverity(bool bEscalate)"
  },
  {
    "label": "PreFrameReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreFrameReceive(float DeltaTime)"
  },
  {
    "label": "PostFrameReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFrameReceive()"
  },
  {
    "label": "CondCheckNonConnQuotasAndLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CondCheckNonConnQuotasAndLimits()"
  },
  {
    "label": "CheckNonConnQuotasAndLimits()",
    "kind": "Method",
    "detail": "Function (bHitFrameNonConnLimit =)",
    "insertText": "CheckNonConnQuotasAndLimits()"
  },
  {
    "label": "CondCheckNetConnLimits()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CondCheckNetConnLimits()"
  },
  {
    "label": "CheckNetConnLimits()",
    "kind": "Method",
    "detail": "Function (bHitFrameNetConnLimit =)",
    "insertText": "CheckNetConnLimits()"
  },
  {
    "label": "CheckLogRestrictions()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CheckLogRestrictions()"
  },
  {
    "label": "IsDDoSDetectionEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDDoSDetectionEnabled()"
  },
  {
    "label": "GetNonConnPacketCounter()",
    "kind": "Method",
    "detail": "Function (+ + NonConnPacketCounter ; } int32)",
    "insertText": "GetNonConnPacketCounter()"
  },
  {
    "label": "GetNetConnPacketCounter()",
    "kind": "Method",
    "detail": "Function (+ + NetConnPacketCounter ; } int32)",
    "insertText": "GetNetConnPacketCounter()"
  },
  {
    "label": "GetDisconnPacketCounter()",
    "kind": "Method",
    "detail": "Function (+ + DisconnPacketCounter ; } int32)",
    "insertText": "GetDisconnPacketCounter()"
  },
  {
    "label": "GetBadPacketCounter()",
    "kind": "Method",
    "detail": "Function (+ + BadPacketCounter ; } int32)",
    "insertText": "GetBadPacketCounter()"
  },
  {
    "label": "GetErrorPacketCounter()",
    "kind": "Method",
    "detail": "Function (+ + ErrorPacketCounter ; } int32)",
    "insertText": "GetErrorPacketCounter()"
  },
  {
    "label": "GetDroppedPacketCounter()",
    "kind": "Method",
    "detail": "Function (DroppedPacketCounter + = Count ; } int32)",
    "insertText": "GetDroppedPacketCounter()"
  }
]