[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "OutputFormatRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OutputFormatRequest"
  },
  {
    "label": "VideoAdapter()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_BASE_VIDEO_ADAPTER_H_ # define MEDIA_BASE_VIDEO_ADAPTER_H_ # include<stdint . h> # include<string> # include<utility> # include \" absl / types / optional . h \" # include \" api / video / video_source_interface . h \" # include \" common_video / framerate_controller . h \" # include \" media / base / video_common . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread_annotations . h \" namespace cricket { class RTC_EXPORT VideoAdapter { public :)",
    "insertText": "VideoAdapter()"
  },
  {
    "label": "VideoAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoAdapter(int source_resolution_alignment)"
  },
  {
    "label": "VideoAdapter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoAdapter(const VideoAdapter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoAdapter&)",
    "insertText": "operator(const VideoAdapter&)"
  },
  {
    "label": "AdaptFrameResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AdaptFrameResolution(int in_width, int in_height, int64_t in_timestamp_ns, int* cropped_width, int* cropped_height, int* out_width, int* out_height) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnOutputFormatRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputFormatRequest(const absl::optional<VideoFormat>& format) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnOutputFormatRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputFormatRequest(const absl::optional<std::pair<int, int>>& target_aspect_ratio, const absl::optional<int>& max_pixel_count, const absl::optional<int>& max_fps) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnOutputFormatRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutputFormatRequest(const absl::optional<std::pair<int, int>>& target_landscape_aspect_ratio, const absl::optional<int>& max_landscape_pixel_count, const absl::optional<std::pair<int, int>>& target_portrait_aspect_ratio, const absl::optional<int>& max_portrait_pixel_count, const absl::optional<int>& max_fps) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "OnSinkWants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSinkWants(const rtc::VideoSinkWants& sink_wants) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetTargetPixels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetPixels()"
  },
  {
    "label": "GetMaxFramerate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxFramerate()"
  },
  {
    "label": "DropFrame()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DropFrame(int64_t in_timestamp_ns) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (int frames_in_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (struct OutputFormatRequest { absl::optional<std::pair<int,int>> target_landscape_aspect_ratio ; absl::optional<int> max_landscape_pixel_count ; absl::optional<std::pair<int,int>> target_portrait_aspect_ratio ; absl::optional<int> max_portrait_pixel_count ; absl::optional<int> max_fps ; std::string)",
    "insertText": "ToString()"
  }
]