[
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "SlotIndexes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SlotIndexes"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "NO_STACK_SLOT()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_VIRTREGMAP_H # define LLVM_CODEGEN_VIRTREGMAP_H # include \" llvm / ADT / IndexedMap . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / Target / TargetRegisterInfo . h \" namespace llvm { class MachineInstr ; class MachineFunction ; class MachineRegisterInfo ; class TargetInstrInfo ; class raw_ostream ; class SlotIndexes ; class VirtRegMap : public MachineFunctionPass { public : enum { NO_PHYS_REG = 0,)",
    "insertText": "NO_STACK_SLOT(1L << 30)-1, MAX_STACK_SLOT = (1L << 18)"
  },
  {
    "label": "createSpillSlot()",
    "kind": "Method",
    "detail": "Function (private : MachineRegisterInfo* MRI ; const TargetInstrInfo* TII ; const TargetRegisterInfo* TRI ; MachineFunction* MF ; IndexedMap<unsigned,VirtReg2IndexFunctor> Virt2PhysMap ; IndexedMap<int,VirtReg2IndexFunctor> Virt2StackSlotMap ; IndexedMap<unsigned,VirtReg2IndexFunctor> Virt2SplitMap ; unsigned)",
    "insertText": "createSpillSlot(const TargetRegisterClass *RC)"
  },
  {
    "label": "VirtRegMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VirtRegMap(const VirtRegMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const VirtRegMap&)"
  },
  {
    "label": "VirtRegMap()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "VirtRegMap() : MachineFunctionPass(ID), Virt2PhysMap(NO_PHYS_REG), Virt2StackSlotMap(NO_STACK_SLOT), Virt2SplitMap(0)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnMachineFunction(MachineFunction &MF)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (AU .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AU)"
  },
  {
    "label": "getMachineFunction()",
    "kind": "Method",
    "detail": "Function (} MachineFunction&)",
    "insertText": "getMachineFunction()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MF && \"getMachineFunction called before runOnMachineFunction\")"
  },
  {
    "label": "hasPhys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasPhys(unsigned virtReg)"
  },
  {
    "label": "getPhys()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPhys(unsigned virtReg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(TargetRegisterInfo::isVirtualRegister(virtReg))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(TargetRegisterInfo::isVirtualRegister(virtReg) && TargetRegisterInfo::isPhysicalRegister(physReg))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Virt2PhysMap[virtReg] == NO_PHYS_REG && \"attempt to assign physical register to already mapped \" \"virtual register\")"
  },
  {
    "label": "clearVirt()",
    "kind": "Method",
    "detail": "Function (Virt2PhysMap [ virtReg ] = physReg ; } void)",
    "insertText": "clearVirt(unsigned virtReg)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Virt2PhysMap[virtReg] != NO_PHYS_REG && \"attempt to clear a not assigned virtual register\")"
  },
  {
    "label": "clearAllVirt()",
    "kind": "Method",
    "detail": "Function (Virt2PhysMap [ virtReg ] = NO_PHYS_REG ; } void)",
    "insertText": "clearAllVirt()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Virt2PhysMap .)",
    "insertText": "clear()"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "grow()"
  },
  {
    "label": "hasPreferredPhys()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasPreferredPhys(unsigned VirtReg)"
  },
  {
    "label": "hasKnownPreference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasKnownPreference(unsigned VirtReg)"
  },
  {
    "label": "setIsSplitFromReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIsSplitFromReg(unsigned virtReg, unsigned SReg)"
  },
  {
    "label": "getPreSplitReg()",
    "kind": "Method",
    "detail": "Function (Virt2SplitMap [ virtReg ] = SReg ; } unsigned)",
    "insertText": "getPreSplitReg(unsigned virtReg)"
  },
  {
    "label": "getPreSplitReg()",
    "kind": "Method",
    "detail": "Function (unsigned Orig =)",
    "insertText": "getPreSplitReg(VirtReg)"
  },
  {
    "label": "getStackSlot()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getStackSlot(unsigned virtReg)"
  },
  {
    "label": "assignVirt2StackSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignVirt2StackSlot(unsigned virtReg, int frameIndex)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, const Module* M = nullptr)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const VirtRegMap &VRM)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (VRM .)",
    "insertText": "print(OS)"
  }
]