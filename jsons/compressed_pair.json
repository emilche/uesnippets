[
  {
    "label": "__default_init_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__default_init_tag"
  },
  {
    "label": "__value_init_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__value_init_tag"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__compressed_pair_elem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__compressed_pair_elem"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "_T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T2"
  },
  {
    "label": "__compressed_pair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__compressed_pair"
  },
  {
    "label": "_U1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_U1"
  },
  {
    "label": "_U2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_U2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_COMPRESSED_PAIR_H # define _LIBCPP___MEMORY_COMPRESSED_PAIR_H # include<__config> # include<__utility / forward . h> # include<__utility / move . h> # include<tuple> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} ; struct __value_init_tag { } ; template<class _Tp,int _Idx,bool _CanBeEmptyBase = is_empty<_Tp>::value&& ! __libcpp_is_final<_Tp>::value> struct __compressed_pair_elem { using _ParamT = _Tp ; using reference = _Tp& ; using const_reference = const _Tp& ; _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair_elem(__default_init_tag)"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair_elem(__value_init_tag) : __value_()"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<__compressed_pair_elem,decay<_Up>::type>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair_elem(_Up&& __u) : __value_(std::forward<_Up>(__u))"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class . . . _Args,size_t . . . _Indices> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "__compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args, __tuple_indices<_Indices...>) : __value_(std::forward<_Args>(std::get<_Indices>(__args))...)"
  },
  {
    "label": "__get()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 reference)",
    "insertText": "__get()"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair_elem(__value_init_tag) : __value_type()"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<__compressed_pair_elem,decay<_Up>::type>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair_elem(_Up&& __u) : __value_type(std::forward<_Up>(__u))"
  },
  {
    "label": "__compressed_pair_elem()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class . . . _Args,size_t . . . _Indices> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "__compressed_pair_elem(piecewise_construct_t, tuple<_Args...> __args, __tuple_indices<_Indices...>) : __value_type(std::forward<_Args>(std::get<_Indices>(__args))...)"
  },
  {
    "label": "__compressed_pair()",
    "kind": "Method",
    "detail": "Function (using _Base1 _LIBCPP_NODEBUG = __compressed_pair_elem<_T1,0> ; using _Base2 _LIBCPP_NODEBUG = __compressed_pair_elem<_T2,1> ; template<bool _Dummy = true,class = __enable_if_t<__dependent_type<is_default_constructible<_T1>,_Dummy>::value&& __dependent_type<is_default_constructible<_T2>,_Dummy>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair() : _Base1(__value_init_tag()), _Base2(__value_init_tag())"
  },
  {
    "label": "__compressed_pair()",
    "kind": "Method",
    "detail": "Function (} template<class _U1,class _U2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "__compressed_pair(_U1&& __t1, _U2&& __t2) : _Base1(std::forward<_U1>(__t1)), _Base2(std::forward<_U2>(__t2))"
  },
  {
    "label": "__compressed_pair()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class . . . _Args1,class . . . _Args2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "__compressed_pair(piecewise_construct_t __pc, tuple<_Args1...> __first_args, tuple<_Args2...> __second_args) : _Base1(__pc, std::move(__first_args), typename __make_tuple_indices<sizeof...(_Args1)>::type()), _Base2(__pc, std::move(__second_args), typename __make_tuple_indices<sizeof...(_Args2)>::type())"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _Base1::reference)",
    "insertText": "first()"
  },
  {
    "label": "second()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _Base2::reference)",
    "insertText": "second()"
  },
  {
    "label": "__get_first_base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Base1*)",
    "insertText": "__get_first_base(__compressed_pair* __pair)"
  },
  {
    "label": "__get_second_base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Base2*)",
    "insertText": "__get_second_base(__compressed_pair* __pair)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "swap(__compressed_pair& __x) _NOEXCEPT_(__is_nothrow_swappable<_T1>::value && __is_nothrow_swappable<_T2>::value)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(first(), __x.first())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(second(), __x.second())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _T1,class _T2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "swap(__compressed_pair<_T1, _T2>& __x, __compressed_pair<_T1, _T2>& __y) _NOEXCEPT_(__is_nothrow_swappable<_T1>::value && __is_nothrow_swappable<_T2>::value)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (__x .)",
    "insertText": "swap(__y)"
  }
]