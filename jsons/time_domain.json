[
  {
    "label": "SequenceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManager"
  },
  {
    "label": "SequenceManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceManagerImpl"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "TimeDomain()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TIME_DOMAIN_H_ # define BASE_TASK_SEQUENCE_MANAGER_TIME_DOMAIN_H_ # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / task / common / lazy_now . h \" # include \" base / task / sequence_manager / tasks . h \" # include \" base / time / tick_clock . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { class SequenceManager ; namespace internal { class SequenceManagerImpl ; } class BASE_EXPORT TimeDomain : public TickClock { public :)",
    "insertText": "TimeDomain(const TimeDomain&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeDomain&)",
    "insertText": "operator(const TimeDomain&)"
  },
  {
    "label": "TimeDomain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TimeDomain()"
  },
  {
    "label": "MaybeFastForwardToWakeUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeFastForwardToWakeUp(absl::optional<WakeUp> next_wake_up, bool quit_when_idle_requested)"
  },
  {
    "label": "AsValue()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "AsValue()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "NotifyPolicyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPolicyChanged()"
  },
  {
    "label": "OnAssignedToSequenceManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssignedToSequenceManager(internal::SequenceManagerImpl* sequence_manager)"
  }
]