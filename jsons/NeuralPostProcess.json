[
  {
    "label": "FNeuralPostProcessResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNeuralPostProcessResource"
  },
  {
    "label": "FScreenPassTextureViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPassTextureViewport"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" OverridePassSequence . h \" # include \" PostProcess / PostProcessMaterialInputs . h \" # include \" PostProcess / NeuralPostProcessInterface . h \")",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FNeuralPostProcessShaderParameters, ) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<float4>, RWNeuralTexture) SHADER_PARAMETER_RDG_TEXTURE_SRV(Texture2D, NeuralTexture) SHADER_PARAMETER_RDG_BUFFER_UAV(RWBuffer<float>, InputNeuralBuffer) SHADER_PARAMETER_RDG_BUFFER_UAV(RWBuffer<uint>, NeuralSourceType) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<float>, OutputNeuralBuffer) SHADER_PARAMETER(FVector4f, InputNeuralBufferDimension) SHADER_PARAMETER(FVector4f, OutputNeuralBufferDimension) END_SHADER_PARAMETER_STRUCT() FNeuralPostProcessShaderParameters GetDefaultNeuralPostProcessShaderParameters( FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FNeuralPostProcessResource { FRDGTextureRef Texture = nullptr ; FRDGBufferRef InputBuffer = nullptr ; FRDGBufferRef OutputBuffer = nullptr ; FRDGBufferRef SourceTypeBuffer = nullptr ; FVector4f InputBufferDimension ; FVector4f OutputBufferDimension ; int32 NeuralProfileId = INDEX_NONE ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetupNeuralPostProcessShaderParametersForRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupNeuralPostProcessShaderParametersForRead(FNeuralPostProcessShaderParameters& NeuralPostProcessShaderParameters, FRDGBuilder& GraphBuilder, const FNeuralPostProcessResource& NeuralPostProcessResource)"
  },
  {
    "label": "AllocateNeuralPostProcessingResourcesIfNeeded()",
    "kind": "Method",
    "detail": "Function (FNeuralPostProcessResource)",
    "insertText": "AllocateNeuralPostProcessingResourcesIfNeeded(FRDGBuilder& GraphBuilder, const class FScreenPassTextureViewport& OutputViewport, int32 NeuralProfileId, bool bUsedWithNeuralNetworks)"
  },
  {
    "label": "ApplyNeuralPostProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNeuralPostProcess(FRDGBuilder& GraphBuilder, const FViewInfo& View, FIntRect Rect, FNeuralPostProcessResource& NeuralPostProcessResource)"
  },
  {
    "label": "IsNeuralPostProcessEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNeuralPostProcessEnabled()"
  },
  {
    "label": "ShouldApplyNeuralPostProcessForMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyNeuralPostProcessForMaterial(const class FMaterial* Material)"
  },
  {
    "label": "IsNeuralPostProcessShaderParameterUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNeuralPostProcessShaderParameterUsed(FNeuralPostProcessShaderParameters& NeuralPostProcessShaderParameters)"
  }
]