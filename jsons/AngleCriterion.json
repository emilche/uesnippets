[
  {
    "label": "FAngleCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAngleCriterion"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FAngleCriterion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Mesh / Criteria / Criterion . h \" namespace UE::CADKernel { class FAngleCriterion : public FCriterion { class FEntity ; protected : double AngleCriterionValue ; double SinMaxAngle ;)",
    "insertText": "FAngleCriterion(double DegreeAngle)"
  },
  {
    "label": "DegreesToRadians()",
    "kind": "Method",
    "detail": "Function (AngleCriterionValue =)",
    "insertText": "DegreesToRadians(DegreeAngle)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (SinMaxAngle =)",
    "insertText": "sin(AngleCriterionValue * 0.5)"
  },
  {
    "label": "FAngleCriterion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAngleCriterion()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Ar<<AngleCriterionValue ; Ar<<SinMaxAngle ; } double)",
    "insertText": "Value()"
  },
  {
    "label": "IsAppliedBetweenBreaks()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAppliedBetweenBreaks()"
  }
]