[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SAdvancedTransformInputBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAdvancedTransformInputBox"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SAdvancedRotationInputBox . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Widgets / Input / SButton . h \" # include \" Styling / AppStyle . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / Commands / UICommandInfo . h \" # if WITH_EDITOR # include \" DetailCategoryBuilder . h \" # include \" DetailLayoutBuilder . h \" # include \" IDetailChildrenBuilder . h \" # include \" DetailWidgetRow . h \" # include \" IDetailGroup . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # endif namespace ESlateTransformComponent { enum Type : int { Location,Rotation,Scale,Max } ; } template<TransformType = FTransform,NumericType = FVector::FReal> class SAdvancedTransformInputBox : public SCompoundWidget { public : typedef SNumericVectorInputBox<NumericType,UE::Math::TVector<NumericType>,3> SNumericVectorInputBox3 ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnTransformChanged, TransformType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnTransformCommitted, TransformType, ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(TOptional<NumericType>, FOnGetNumericValue, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnNumericValueChanged, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type, NumericType)"
  },
  {
    "label": "DECLARE_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FiveParams(FOnNumericValueCommitted, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type, NumericType, ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnBeginSliderMovement, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnEndSliderMovement, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type, NumericType)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnGetIsComponentRelative, ESlateTransformComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnIsComponentRelativeChanged, ESlateTransformComponent::Type, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRotationRepresentationChanged, ESlateRotationRepresentation::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnScaleLockChanged, bool)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(ECheckBoxState, FOnGetToggleChecked, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnToggleChanged, ESlateTransformComponent::Type, ESlateRotationRepresentation::Type, ESlateTransformSubComponent::Type, ECheckBoxState)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCopyToClipboard, ESlateTransformComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPasteFromClipboard, ESlateTransformComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnResetToDefault, ESlateTransformComponent::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FDiffersFromDefault, ESlateTransformComponent::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SAdvancedTransformInputBox ) : _ConstructLocation(true) , _ConstructRotation(true) , _ConstructScale(true) , _UseQuaternionForRotation(false) , _RotationRepresentation(TSharedPtr<ESlateRotationRepresentation::Type>( new ESlateRotationRepresentation::Type(ESlateRotationRepresentation::Rotator))) , _bColorAxisLabels(true) , _ShowInlineLabels(false) , _LocationLabel(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Location\", \"Location\")) , _RotationLabel(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Rotation\", \"Rotation\")) , _ScaleLabel(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Scale\", \"Scale\")) , _LabelPadding( FMargin( 0.f,0.f,6.f,0.f ) ) , _Font(FAppStyle::Get().GetFontStyle(\"NormalFont\")) , _AllowSpin(true) , _LocationSpinDelta(0.01f) , _ScaleSpinDelta(0.001f) , _AllowEditRotationRepresentation(true) , _DisplayScaleLock(true) , _IsScaleLocked(TSharedPtr<bool>(new bool(false))) , _DisplayRelativeWorld(false) , _DisplayToggle( false ) , _TogglePadding( FMargin( 1.f,0.f,1.f,0.f ))"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, ConstructLocation ) SLATE_ARGUMENT( bool, ConstructRotation ) SLATE_ARGUMENT( bool, ConstructScale ) SLATE_ARGUMENT( bool, UseQuaternionForRotation ) SLATE_ATTRIBUTE( TOptional<TransformType>, Transform ) SLATE_EVENT( FOnTransformChanged, OnTransformChanged ) SLATE_EVENT( FOnTransformCommitted, OnTransformCommitted ) SLATE_ARGUMENT( TSharedPtr<ESlateRotationRepresentation::Type>, RotationRepresentation ) SLATE_EVENT( FOnRotationRepresentationChanged, OnRotationRepresentationChanged ) SLATE_EVENT( FOnGetNumericValue, OnGetNumericValue ) SLATE_EVENT( FOnNumericValueChanged, OnNumericValueChanged ) SLATE_EVENT( FOnNumericValueCommitted, OnNumericValueCommitted ) SLATE_EVENT(FOnBeginSliderMovement, OnBeginSliderMovement) SLATE_EVENT(FOnEndSliderMovement, OnEndSliderMovement) SLATE_ARGUMENT( bool, bColorAxisLabels ) SLATE_ARGUMENT( bool, ShowInlineLabels ) SLATE_ARGUMENT( FText, LocationLabel ) SLATE_ARGUMENT( FText, RotationLabel ) SLATE_ARGUMENT( FText, ScaleLabel ) SLATE_ARGUMENT( FMargin, LabelPadding ) SLATE_ATTRIBUTE( FSlateFontInfo, Font ) SLATE_ARGUMENT( bool, AllowSpin ) SLATE_ATTRIBUTE( NumericType, LocationSpinDelta ) SLATE_ATTRIBUTE( NumericType, ScaleSpinDelta ) SLATE_ARGUMENT( bool, AllowEditRotationRepresentation ) SLATE_ARGUMENT( bool, DisplayScaleLock ) SLATE_ARGUMENT( TSharedPtr<bool>, IsScaleLocked ) SLATE_EVENT( FOnScaleLockChanged, OnScaleLockChanged ) SLATE_ARGUMENT( bool, DisplayRelativeWorld ) SLATE_EVENT( FOnGetIsComponentRelative, OnGetIsComponentRelative ) SLATE_EVENT( FOnIsComponentRelativeChanged, OnIsComponentRelativeChanged ) SLATE_ARGUMENT( bool, DisplayToggle ) SLATE_EVENT( FOnGetToggleChecked, OnGetToggleChecked ) SLATE_EVENT( FOnToggleChanged, OnToggleChanged ) SLATE_ARGUMENT( FMargin, TogglePadding ) SLATE_EVENT( FOnCopyToClipboard, OnCopyToClipboard ) SLATE_EVENT( FOnPasteFromClipboard, OnPasteFromClipboard ) SLATE_EVENT( FOnResetToDefault, OnResetToDefault ) SLATE_EVENT( FDiffersFromDefault, DiffersFromDefault ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SVerticalBox> VerticalBox =)",
    "insertText": "SNew(SVerticalBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VerticalBox ->)",
    "insertText": "AddSlot() [ ConstructWidget(InArgs, ESlateTransformComponent::Location)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._ConstructRotation)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VerticalBox ->)",
    "insertText": "AddSlot() [ ConstructWidget(InArgs, ESlateTransformComponent::Rotation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._ConstructScale)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (VerticalBox ->)",
    "insertText": "AddSlot() [ ConstructWidget(InArgs, ESlateTransformComponent::Scale)"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [ VerticalBox ] ; } TSharedRef<SWidget>)",
    "insertText": "ConstructWidget(const FArguments& InArgs, ESlateTransformComponent::Type InComponent)"
  },
  {
    "label": "BoxArgs()",
    "kind": "Method",
    "detail": "Function (SHorizontalBox::FArguments)",
    "insertText": "BoxArgs((FSlateBaseNamedArgs&)BoxArgs) = (FSlateBaseNamedArgs)"
  },
  {
    "label": "SArgumentNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHorizontalBox> HorizontalBox =)",
    "insertText": "SArgumentNew(BoxArgs, SHorizontalBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .Padding(InArgs._LabelPadding) .AutoWidth() [ ConstructLabel(InArgs, InComponent)"
  },
  {
    "label": "OnGetNumericValue()",
    "kind": "Method",
    "detail": "Function (TOptional<FVector>)",
    "insertText": "OnGetNumericValue()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TOptional<TransformType> Xfo = Transform .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(OnGetNumericValue.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FVector Location = FVector::OneVector ; Location . X = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Location, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X).Get(Location.X)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Location . Y = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Location, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y).Get(Location.Y)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Location . Z = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Location, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z).Get(Location.Z)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FRotator Rotator = FRotator::ZeroRotator ; Rotator . Roll = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Rotator, ESlateTransformSubComponent::Roll).Get(Rotator.Roll)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Rotator . Pitch = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Rotator, ESlateTransformSubComponent::Pitch).Get(Rotator.Pitch)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Rotator . Yaw = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Rotator, ESlateTransformSubComponent::Yaw).Get(Rotator.Yaw)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FQuat Quat = FQuat::Identity ; Quat . X = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Quaternion, ESlateTransformSubComponent::X).Get(Quat.X)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Quat . Y = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Quaternion, ESlateTransformSubComponent::Y).Get(Quat.Y)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Quat . Z = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Quaternion, ESlateTransformSubComponent::Z).Get(Quat.Z)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Quat . W = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Rotation, ESlateRotationRepresentation::Quaternion, ESlateTransformSubComponent::W).Get(Quat.W)"
  },
  {
    "label": "FQuat()",
    "kind": "Method",
    "detail": "Function (} return TOptional<)",
    "insertText": "FQuat()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FVector Scale = FVector::OneVector ; Scale . X = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Scale, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X).Get(Scale.X)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Scale . Y = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Scale, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y).Get(Scale.Y)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Scale . Z = OnGetNumericValue .)",
    "insertText": "Execute(ESlateTransformComponent::Scale, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z).Get(Scale.Z)"
  },
  {
    "label": "OnGetScale()",
    "kind": "Method",
    "detail": "Function (TOptional<FVector>)",
    "insertText": "OnGetScale(ESlateTransformComponent::Type InComponent)"
  },
  {
    "label": "UseQuaternionForRotation()",
    "kind": "Method",
    "detail": "Function (TransformType)",
    "insertText": "UseQuaternionForRotation()"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (TransformType Result = TransformType::Identity ; Result .)",
    "insertText": "SetLocation(OnGetLocation().Get(Result.GetLocation()))"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetScale3D(OnGetScale().Get(Result.GetScale3D()))"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetRotation(OnGetQuaternion().Get(Result.GetRotation()))"
  },
  {
    "label": "OnGetRotator()",
    "kind": "Method",
    "detail": "Function (} else { const FRotator Rotator =)",
    "insertText": "OnGetRotator().Get(Result.Rotator())"
  },
  {
    "label": "TransformType()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "TransformType(Rotator, Result.GetLocation(), Result.GetScale3D())"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (} Result .)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (XAttribute = TAttribute<TOptional<NumericType>)",
    "insertText": "CreateLambda([OnGetNumericValue, OnGetVector, InComponent]() -> TOptional<NumericType> { return OnGetNumericValue.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (YAttribute = TAttribute<TOptional<NumericType>)",
    "insertText": "CreateLambda([OnGetNumericValue, OnGetVector, InComponent]() -> TOptional<NumericType> { return OnGetNumericValue.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (ZAttribute = TAttribute<TOptional<NumericType>)",
    "insertText": "CreateLambda([OnGetNumericValue, OnGetVector, InComponent]() -> TOptional<NumericType> { return OnGetNumericValue.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._Transform.IsBound() || InArgs._Transform.IsSet())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (Vector3Attribute = TAttribute<TOptional<FVector>)",
    "insertText": "CreateLambda([OnGetVector, InComponent]() -> TOptional<FVector> { return OnGetVector(InComponent); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} SNumericVectorInputBox3::FOnNumericValueChanged XChanged,YChanged,ZChanged ;)",
    "insertText": "if(OnNumericValueChanged.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (XChanged = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnNumericValueChanged, InComponent](NumericType InValue) { OnNumericValueChanged.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X, InValue); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (YChanged = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnNumericValueChanged, InComponent](NumericType InValue) { OnNumericValueChanged.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y, InValue); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (ZChanged = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnNumericValueChanged, InComponent](NumericType InValue) { OnNumericValueChanged.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z, InValue); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FSimpleDelegate XBeginSlide,YBeginSlide,ZBeginSlide ;)",
    "insertText": "if(OnBeginSliderMovement.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (XBeginSlide =)",
    "insertText": "CreateLambda([OnBeginSliderMovement, InComponent]() { OnBeginSliderMovement.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (YBeginSlide =)",
    "insertText": "CreateLambda([OnBeginSliderMovement, InComponent]() { OnBeginSliderMovement.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (ZBeginSlide =)",
    "insertText": "CreateLambda([OnBeginSliderMovement, InComponent]() { OnBeginSliderMovement.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} SNumericVectorInputBox3::FOnNumericValueChanged XEndSlide,YEndSlide,ZEndSlide ;)",
    "insertText": "if(OnEndSliderMovement.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (XEndSlide = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnEndSliderMovement, InComponent](NumericType InValue) { OnEndSliderMovement.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X, InValue); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (YEndSlide = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnEndSliderMovement, InComponent](NumericType InValue) { OnEndSliderMovement.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y, InValue); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (ZEndSlide = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnEndSliderMovement, InComponent](NumericType InValue) { OnEndSliderMovement.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z, InValue); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} SNumericVectorInputBox3::FOnVectorValueChanged VectorChanged ;)",
    "insertText": "if(OnTransformChanged.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (VectorChanged = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnTransformChanged, OnGetTransform, InComponent](FVector InValue) { if(OnTransformChanged.IsBound()) { TransformType Transform = OnGetTransform(); if(InComponent == ESlateTransformComponent::Location) { Transform.SetLocation(InValue); } else { Transform.SetScale3D(InValue); } OnTransformChanged.Execute(Transform); } })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} SNumericVectorInputBox3::FOnNumericValueCommitted XCommitted,YCommitted,ZCommitted ;)",
    "insertText": "if(OnNumericValueCommitted.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (XCommitted = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnNumericValueCommitted, InComponent](NumericType InValue, ETextCommit::Type InCommitType) { OnNumericValueCommitted.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X, InValue, InCommitType); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (YCommitted = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnNumericValueCommitted, InComponent](NumericType InValue, ETextCommit::Type InCommitType) { OnNumericValueCommitted.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y, InValue, InCommitType); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (ZCommitted = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnNumericValueCommitted, InComponent](NumericType InValue, ETextCommit::Type InCommitType) { OnNumericValueCommitted.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z, InValue, InCommitType); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} SNumericVectorInputBox3::FOnVectorValueCommitted VectorCommitted ;)",
    "insertText": "if(OnTransformCommitted.IsBound())"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (VectorCommitted = SNumericVectorInputBox3::)",
    "insertText": "CreateLambda([OnTransformCommitted, OnGetTransform, InComponent](FVector InValue, ETextCommit::Type InCommitType) { if(OnTransformCommitted.IsBound()) { TransformType Transform = OnGetTransform(); if(InComponent == ESlateTransformComponent::Location) { Transform.SetLocation(InValue); } else { Transform.SetScale3D(InValue); } OnTransformCommitted.Execute(Transform, InCommitType); } })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<bool> ScaleLockState = InArgs . _IsScaleLocked ; SNumericVectorInputBox3::FOnConstrainVector ConstrainComponents ;)",
    "insertText": "if(InComponent == ESlateTransformComponent::Scale)"
  },
  {
    "label": "CreateStatic()",
    "kind": "Method",
    "detail": "Function (ConstrainComponents = SNumericVectorInputBox3::)",
    "insertText": "CreateStatic(&SAdvancedTransformInputBox::ConstrainScale, TAttribute<bool>::CreateLambda([ScaleLockState]() { return *ScaleLockState.Get(); }))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} } InputWidget =)",
    "insertText": "SNew(SNumericVectorInputBox3) .Font(InArgs._Font) .AllowSpin(InArgs._AllowSpin) .SpinDelta(InComponent == ESlateTransformComponent::Location ? InArgs._LocationSpinDelta : InArgs._ScaleSpinDelta) .bColorAxisLabels(InArgs._bColorAxisLabels) .X(XAttribute) .Y(YAttribute) .Z(ZAttribute) .Vector(Vector3Attribute) .OnXChanged(XChanged) .OnYChanged(YChanged) .OnZChanged(ZChanged) .OnVectorChanged(VectorChanged) .OnXCommitted(XCommitted) .OnYCommitted(YCommitted) .OnZCommitted(ZCommitted) .OnVectorCommitted(VectorCommitted) .ConstrainVector(ConstrainComponents) .DisplayToggle(InArgs._DisplayToggle) .TogglePadding(InArgs._TogglePadding) .OnXBeginSliderMovement(XBeginSlide) .OnYBeginSliderMovement(YBeginSlide) .OnZBeginSliderMovement(ZBeginSlide) .OnXEndSliderMovement(XEndSlide) .OnYEndSliderMovement(YEndSlide) .OnZEndSliderMovement(ZEndSlide) .ToggleXChecked_Lambda([OnGetToggleChecked, InComponent]() -> ECheckBoxState { if(OnGetToggleChecked.IsBound()) { return OnGetToggleChecked.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X); } return ECheckBoxState::Checked; }) .ToggleYChecked_Lambda([OnGetToggleChecked, InComponent]() -> ECheckBoxState { if(OnGetToggleChecked.IsBound()) { return OnGetToggleChecked.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y); } return ECheckBoxState::Checked; }) .ToggleZChecked_Lambda([OnGetToggleChecked, InComponent]() -> ECheckBoxState { if(OnGetToggleChecked.IsBound()) { return OnGetToggleChecked.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z); } return ECheckBoxState::Checked; }) .OnToggleXChanged_Lambda([OnToggleChanged, InComponent](ECheckBoxState InState) { if(OnToggleChanged.IsBound()) { OnToggleChanged.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::X, InState); } }) .OnToggleYChanged_Lambda([OnToggleChanged, InComponent](ECheckBoxState InState) { if(OnToggleChanged.IsBound()) { OnToggleChanged.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Y, InState); } }) .OnToggleZChanged_Lambda([OnToggleChanged, InComponent](ECheckBoxState InState) { if(OnToggleChanged.IsBound()) { OnToggleChanged.Execute(InComponent, ESlateRotationRepresentation::EulerXYZ, ESlateTransformSubComponent::Z, InState); } })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (RotationGetNumericValue = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnGetNumericValue, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent) -> TOptional<NumericType> { return OnGetNumericValue.Execute(InComponent, InRepr, InSubComponent); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (RotationValueChanged = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnNumericValueChanged, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent, NumericType InValue) { OnNumericValueChanged.Execute(InComponent, InRepr, InSubComponent, InValue); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (RotationValueCommitted = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnNumericValueCommitted, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent, NumericType InValue, ETextCommit::Type InCommitType) { OnNumericValueCommitted.Execute(InComponent, InRepr, InSubComponent, InValue, InCommitType); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (RotationBeginSliderMovement = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnBeginSliderMovement, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent) { OnBeginSliderMovement.Execute(InComponent, InRepr, InSubComponent); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (RotationEndSliderMovement = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnEndSliderMovement, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent, NumericType InValue) { OnEndSliderMovement.Execute(InComponent, InRepr, InSubComponent, InValue); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (QuaternionAttribute = TAttribute<TOptional<FQuat>)",
    "insertText": "CreateLambda([OnGetQuaternion]() -> TOptional<FQuat> { return OnGetQuaternion(); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (} else { RotatorAttribute = TAttribute<TOptional<FRotator>)",
    "insertText": "CreateLambda([OnGetRotator]() -> TOptional<FRotator> { return OnGetRotator(); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (QuaternionChanged = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnTransformChanged, OnGetTransform](FQuat InQuaternion) { TransformType Xfo = OnGetTransform(); Xfo.SetRotation(InQuaternion); OnTransformChanged.Execute(Xfo); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (} else { RotatorChanged = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnTransformChanged, OnGetTransform](FRotator InRotator) { TransformType Xfo = OnGetTransform(); Xfo = TransformType(InRotator, Xfo.GetLocation(), Xfo.GetScale3D()); OnTransformChanged.Execute(Xfo); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (QuaternionCommitted = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnTransformCommitted, OnGetTransform](FQuat InQuaternion, ETextCommit::Type InCommitType) { TransformType Xfo = OnGetTransform(); Xfo.SetRotation(InQuaternion); OnTransformCommitted.Execute(Xfo, InCommitType); })"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (} else { RotatorCommitted = SAdvancedRotationInputBox<NumericType>::)",
    "insertText": "CreateLambda([OnTransformCommitted, OnGetTransform](FRotator InRotator, ETextCommit::Type InCommitType) { TransformType Xfo = OnGetTransform(); Xfo = TransformType(InRotator, Xfo.GetLocation(), Xfo.GetScale3D()); OnTransformCommitted.Execute(Xfo, InCommitType); })"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} } TSharedPtr<ESlateRotationRepresentation::Type> RotationRepresentationPtr = InArgs . _RotationRepresentation ; InputWidget =)",
    "insertText": "SNew(SAdvancedRotationInputBox<NumericType>) .Font(InArgs._Font) .AllowSpin(InArgs._AllowSpin) .bColorAxisLabels(InArgs._bColorAxisLabels) .Representation_Lambda([RotationRepresentationPtr]() -> ESlateRotationRepresentation::Type { if(RotationRepresentationPtr.IsValid()) { return *RotationRepresentationPtr.Get(); } return ESlateRotationRepresentation::Rotator; }) .OnGetNumericValue(RotationGetNumericValue) .OnNumericValueChanged(RotationValueChanged) .OnNumericValueCommitted(RotationValueCommitted) .Rotator(RotatorAttribute) .OnRotatorChanged(RotatorChanged) .OnRotatorCommitted(RotatorCommitted) .Quaternion(QuaternionAttribute) .OnQuaternionChanged(QuaternionChanged) .OnQuaternionCommitted(QuaternionCommitted) .DisplayToggle(InArgs._DisplayToggle) .TogglePadding(InArgs._TogglePadding) .OnBeginSliderMovement(RotationBeginSliderMovement) .OnEndSliderMovement(RotationEndSliderMovement) .OnGetToggleChecked(SAdvancedRotationInputBox<NumericType>::FOnGetToggleChecked::CreateLambda( [OnGetToggleChecked, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent) -> ECheckBoxState { if(OnGetToggleChecked.IsBound()) { return OnGetToggleChecked.Execute(InComponent, InRepr, InSubComponent); } return ECheckBoxState::Checked; })) .OnToggleChanged(SAdvancedRotationInputBox<NumericType>::FOnToggleChanged::CreateLambda( [OnToggleChanged, InComponent](ESlateRotationRepresentation::Type InRepr, ESlateTransformSubComponent::Type InSubComponent, ECheckBoxState InState) { if(OnToggleChanged.IsBound()) { return OnToggleChanged.Execute(InComponent, InRepr, InSubComponent, InState); } }))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(InputWidget != SNullWidget::NullWidget)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Fill) .VAlign(VAlign_Center) .FillWidth(1.f)"
  },
  {
    "label": "ConstructLabel()",
    "kind": "Method",
    "detail": "Function (} return HorizontalBox ; } TSharedRef<SWidget>)",
    "insertText": "ConstructLabel(const FArguments& InArgs, ESlateTransformComponent::Type InComponent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TAttribute<bool> EnabledAttribute = InArgs . _IsEnabled ; TSharedRef<SWidget> LabelWidget = SNullWidget::NullWidget ;)",
    "insertText": "if(InComponent == ESlateTransformComponent::Rotation && InArgs._AllowEditRotationRepresentation)"
  },
  {
    "label": "GetRotationRepresentationLabels()",
    "kind": "Method",
    "detail": "Function (const TArray<FText>& Labels =)",
    "insertText": "GetRotationRepresentationLabels()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ESlateRotationRepresentation::Type> RotationRepresentationPtr = InArgs . _RotationRepresentation ; FOnRotationRepresentationChanged OnRotationRepresentationChanged = InArgs . _OnRotationRepresentationChanged ; LabelWidget =)",
    "insertText": "SNew(SComboButton) .IsEnabled(true) .ContentPadding(0) .OnGetMenuContent_Lambda([Labels, RotationRepresentationPtr, OnRotationRepresentationChanged] { FMenuBuilder MenuBuilder(true, nullptr); for (int32 LabelIndex = 0; LabelIndex < Labels.Num(); LabelIndex++) { MenuBuilder.AddMenuEntry( Labels[LabelIndex], FText(), FSlateIcon(), FUIAction ( FExecuteAction::CreateLambda([LabelIndex, RotationRepresentationPtr, OnRotationRepresentationChanged]() { if(OnRotationRepresentationChanged.IsBound()) { OnRotationRepresentationChanged.Execute((ESlateRotationRepresentation::Type)LabelIndex); } if(RotationRepresentationPtr.IsValid()) { *RotationRepresentationPtr.Get() = (ESlateRotationRepresentation::Type)LabelIndex; } }), FCanExecuteAction(), FIsActionChecked::CreateLambda([LabelIndex, RotationRepresentationPtr]() -> bool { if(RotationRepresentationPtr.IsValid()) { return LabelIndex == (int32)*RotationRepresentationPtr.Get(); } return false; }) ), NAME_None, EUserInterfaceActionType::Check); } return MenuBuilder.MakeWidget(); }) .ButtonContent() [ SNew(STextBlock) .Font(InArgs._Font) .Text_Lambda([RotationRepresentationPtr, Labels]() -> FText { if(RotationRepresentationPtr.IsValid()) { return Labels[(int32)*RotationRepresentationPtr.Get()]; } return Labels[0]; })"
  },
  {
    "label": "LabelText()",
    "kind": "Method",
    "detail": "Function (} else { const FText&)",
    "insertText": "LabelText(InComponent == ESlateTransformComponent::Rotation) ? InArgs._RotationLabel : ( (InComponent == ESlateTransformComponent::Location) ? InArgs._LocationLabel : InArgs._ScaleLabel)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (LabelWidget =)",
    "insertText": "SNew(STextBlock) .IsEnabled(EnabledAttribute) .Font(InArgs._Font) .Text(LabelText)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (BoxArgs .)",
    "insertText": "IsEnabled(true)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .AutoWidth()"
  },
  {
    "label": "ConstructScaleLockWidget()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<SWidget> ScaleLockWidget =)",
    "insertText": "ConstructScaleLockWidget(InArgs, InComponent)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (ScaleLockWidget ->)",
    "insertText": "SetEnabled(EnabledAttribute)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .Padding(FMargin(4.f, 0.f, 0.f, 0.f))"
  },
  {
    "label": "ConstructRelativeWorldWidget()",
    "kind": "Method",
    "detail": "Function (} const TSharedRef<SWidget> RelativeWorldWidget =)",
    "insertText": "ConstructRelativeWorldWidget(InArgs, InComponent)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalBox ->)",
    "insertText": "AddSlot() .HAlign(HAlign_Right) .VAlign(VAlign_Center) .Padding(FMargin(4.f, 0.f, 0.f, 0.f))"
  },
  {
    "label": "ConstructScaleLockWidget()",
    "kind": "Method",
    "detail": "Function (} return HorizontalBox ; } TSharedRef<SWidget>)",
    "insertText": "ConstructScaleLockWidget(const FArguments& InArgs, ESlateTransformComponent::Type InComponent)"
  },
  {
    "label": "NSLOCTEXT()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<bool> LockState = InArgs . _IsScaleLocked ; FOnScaleLockChanged OnScaleLockChanged = InArgs . _OnScaleLockChanged ; const FText TooltipText =)",
    "insertText": "NSLOCTEXT(\"SAdvancedTransformInputBox\", \"PreserveScaleToolTip\", \"When locked, scales uniformly based on the current xyz scale values so the object maintains its shape in each direction when scaled\")"
  },
  {
    "label": "GetScaleLockIcon()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } const FSlateBrush*)",
    "insertText": "GetScaleLockIcon(bool bIsLocked)"
  },
  {
    "label": "ConstructRelativeWorldWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "ConstructRelativeWorldWidget(const FArguments& InArgs, ESlateTransformComponent::Type InComponent)"
  },
  {
    "label": "NSLOCTEXT()",
    "kind": "Method",
    "detail": "Function (FOnGetIsComponentRelative OnGetIsComponentRelative = InArgs . _OnGetIsComponentRelative ; ; FOnIsComponentRelativeChanged OnIsComponentRelativeChanged = InArgs . _OnIsComponentRelativeChanged ; const FText TooltipFormat =)",
    "insertText": "NSLOCTEXT(\"SAdvancedTransformInputBox\", \"RelativeWorldTooltip\", \"Cycles the Transform {0} coordinate system between world and local (relative) space.\\nShift clicking this button affects the whole transform.\")"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (const FText LocationTooltip =)",
    "insertText": "Format(TooltipFormat, NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Location\", \"Location\"))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (const FText RotationTooltip =)",
    "insertText": "Format(TooltipFormat, NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Rotation\", \"Rotation\"))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (const FText ScaleTooltip =)",
    "insertText": "Format(TooltipFormat, NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Scale\", \"Scale\"))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (FText TooltipText ;)",
    "insertText": "switch(InComponent)"
  },
  {
    "label": "GetRelativeWorldIcon()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } const FSlateIcon&)",
    "insertText": "GetRelativeWorldIcon(bool bRelative)"
  },
  {
    "label": "LocalIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LocalIconName(\"Icons.Transform\")"
  },
  {
    "label": "FSlateIcon()",
    "kind": "Method",
    "detail": "Function (FSlateIcon LocalIcon =)",
    "insertText": "FSlateIcon(FAppStyle::GetAppStyleSetName(), LocalIconName)"
  },
  {
    "label": "FSlateIcon()",
    "kind": "Method",
    "detail": "Function (FSlateIcon WorldIcon =)",
    "insertText": "FSlateIcon(FAppStyle::GetAppStyleSetName(), WorldIconName)"
  },
  {
    "label": "ConstructDetailGroup()",
    "kind": "Method",
    "detail": "Function (} IDetailGroup&)",
    "insertText": "ConstructDetailGroup(IDetailChildrenBuilder& InBuilder, FName GroupName, const FText& LocalizedDisplayName)"
  },
  {
    "label": "ConfigureComponentWidgetRow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConfigureComponentWidgetRow(FDetailWidgetRow& WidgetRow, ESlateTransformComponent::Type InComponent, typename SAdvancedTransformInputBox<TransformType>::FArguments WidgetArgs)"
  },
  {
    "label": "CopyAction()",
    "kind": "Method",
    "detail": "Function (WidgetRow .)",
    "insertText": "CopyAction(FUIAction( FExecuteAction::CreateLambda([WidgetArgs, InComponent]() { WidgetArgs._OnCopyToClipboard.ExecuteIfBound(InComponent); }), FCanExecuteAction()))"
  },
  {
    "label": "PasteAction()",
    "kind": "Method",
    "detail": "Function (WidgetRow .)",
    "insertText": "PasteAction(FUIAction( FExecuteAction::CreateLambda([WidgetArgs, InComponent]() { WidgetArgs._OnPasteFromClipboard.ExecuteIfBound(InComponent); }), FCanExecuteAction::CreateLambda([WidgetArgs]() -> bool { return WidgetArgs._IsEnabled.Get(); })))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(WidgetArgs._OnResetToDefault.IsBound() && WidgetArgs._DiffersFromDefault.IsBound())"
  },
  {
    "label": "OverrideResetToDefault()",
    "kind": "Method",
    "detail": "Function (WidgetRow .)",
    "insertText": "OverrideResetToDefault(FResetToDefaultOverride::Create( TAttribute<bool>::CreateLambda([WidgetArgs, InComponent]() -> bool { if(!WidgetArgs._IsEnabled.Get()) { return false; } return WidgetArgs._DiffersFromDefault.Execute(InComponent); }), FSimpleDelegate::CreateLambda([WidgetArgs, InComponent]() { WidgetArgs._OnResetToDefault.Execute(InComponent); }) ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InComponent != ESlateTransformComponent::Max)"
  },
  {
    "label": "NameContent()",
    "kind": "Method",
    "detail": "Function (WidgetRow .)",
    "insertText": "NameContent() .HAlign(HAlign_Fill) [ SAdvancedTransformInputBox<TransformType>::ConstructLabel(WidgetArgs, InComponent) ] .ValueContent() .MinDesiredWidth(375.f) .MaxDesiredWidth(375.f) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() [ SAdvancedTransformInputBox<TransformType>::ConstructWidget(WidgetArgs, InComponent)"
  },
  {
    "label": "ConfigureHeader()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "ConfigureHeader(FDetailWidgetRow& HeaderRow, const FText& InLabel, const FText& InTooltip, typename SAdvancedTransformInputBox<TransformType>::FArguments WidgetArgs, TSharedPtr<SWidget> NameContent = TSharedPtr<SWidget>())"
  },
  {
    "label": "ConfigureComponentWidgetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureComponentWidgetRow(HeaderRow, ESlateTransformComponent::Max, WidgetArgs)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SAssignNew(NameContent, STextBlock) .Font(IDetailLayoutBuilder::GetDetailFont()) .Text(InLabel) .ToolTipText(InTooltip)"
  },
  {
    "label": "Visibility()",
    "kind": "Method",
    "detail": "Function (} HeaderRow .)",
    "insertText": "Visibility(WidgetArgs._Visibility) .NameContent() [ NameContent.ToSharedRef()"
  },
  {
    "label": "ConstructGroupedTransformRows()",
    "kind": "Method",
    "detail": "Function (} template<BuilderType = IDetailCategoryBuilder> FDetailWidgetRow&)",
    "insertText": "ConstructGroupedTransformRows(BuilderType& InBuilder, const FText& InLabel, const FText& InTooltip, typename SAdvancedTransformInputBox<TransformType>::FArguments WidgetArgs, TSharedPtr<SWidget> NameContent = TSharedPtr<SWidget>())"
  },
  {
    "label": "ConstructDetailGroup()",
    "kind": "Method",
    "detail": "Function (IDetailGroup& Group =)",
    "insertText": "ConstructDetailGroup(InBuilder, *InLabel.ToString(), InLabel)"
  },
  {
    "label": "HeaderRow()",
    "kind": "Method",
    "detail": "Function (FDetailWidgetRow& HeaderRow = Group .)",
    "insertText": "HeaderRow()"
  },
  {
    "label": "ConfigureHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureHeader(HeaderRow, InLabel, InTooltip, WidgetArgs, NameContent)"
  },
  {
    "label": "AddWidgetRow()",
    "kind": "Method",
    "detail": "Function (FDetailWidgetRow& WidgetRow = Group .)",
    "insertText": "AddWidgetRow()"
  },
  {
    "label": "ConfigureComponentWidgetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureComponentWidgetRow(WidgetRow, ESlateTransformComponent::Location, WidgetArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(WidgetArgs._ConstructRotation)"
  },
  {
    "label": "ConfigureComponentWidgetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureComponentWidgetRow(WidgetRow, ESlateTransformComponent::Rotation, WidgetArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(WidgetArgs._ConstructScale)"
  },
  {
    "label": "ConfigureComponentWidgetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureComponentWidgetRow(WidgetRow, ESlateTransformComponent::Scale, WidgetArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<FText> Labels ;)",
    "insertText": "if(Labels.IsEmpty())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"EulerXYZ\", \"Euler XYZ\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"EulerXZY\", \"Euler XZY\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"EulerYXZ\", \"Euler YXZ\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"EulerYZX\", \"Euler YZX\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"EulerZXY\", \"Euler ZXY\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"EulerZYX\", \"Euler ZYX\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Rotator\", \"Rotator\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"Quaternion\", \"Quaternion\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Labels .)",
    "insertText": "Add(NSLOCTEXT(\"SAdvancedTransformInputBox\", \"AxisAndAngle\", \"Axis And Angle\"))"
  },
  {
    "label": "ConstrainScale()",
    "kind": "Method",
    "detail": "Function (} return Labels ; } void)",
    "insertText": "ConstrainScale(int32 ComponentIndex, UE::Math::TVector<NumericType> OldValue, UE::Math::TVector<NumericType>& NewValue, TAttribute<bool> ConstrainComponents)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} break ; } case ESlateTransformComponent::Rotation : {)",
    "insertText": "switch(Representation)"
  },
  {
    "label": "EulerFromQuat()",
    "kind": "Method",
    "detail": "Function (const FVector Euler =)",
    "insertText": "EulerFromQuat(Transform.GetRotation(), EEulerRotationOrder(RotationOrder), true)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} break ; } case ESlateRotationRepresentation::Quaternion : {)",
    "insertText": "switch(SubComponent)"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (} break ; } case ESlateRotationRepresentation::AxisAndAngle : { FVector Axis ; NumericType Angle ; Transform .)",
    "insertText": "GetRotation().ToAxisAndAngle(Axis, Angle)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (} break ; } } return TOptional<)",
    "insertText": "NumericType()"
  },
  {
    "label": "ApplyNumericValueChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyNumericValueChange(TransformType& Transform, NumericType Value, ESlateTransformComponent::Type Component, ESlateRotationRepresentation::Type Representation, ESlateTransformSubComponent::Type SubComponent)"
  },
  {
    "label": "EulerFromQuat()",
    "kind": "Method",
    "detail": "Function (FVector Euler =)",
    "insertText": "EulerFromQuat(Transform.GetRotation(), EEulerRotationOrder(RotationOrder))"
  },
  {
    "label": "Rotator()",
    "kind": "Method",
    "detail": "Function (break ; } case ESlateRotationRepresentation::Rotator : { FRotator Rotator = Transform .)",
    "insertText": "Rotator()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (break ; } case ESlateRotationRepresentation::Quaternion : { FQuat Rotation = Transform .)",
    "insertText": "GetRotation()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (Transform .)",
    "insertText": "SetRotation(Rotation)"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (break ; } } break ; } case ESlateTransformComponent::Scale : { UE::Math::TVector<NumericType> Scale3D = Transform .)",
    "insertText": "GetScale3D()"
  }
]