[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPBDParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDParticles"
  },
  {
    "label": "TPBDParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Real . h \" # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / DynamicParticles . h \" namespace Chaos { template<class T,int d> class TPBDParticles : public TDynamicParticles<T,d> { public :)",
    "insertText": "TPBDParticles() : TDynamicParticles<T, d>()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MP)"
  },
  {
    "label": "TPBDParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPBDParticles(const TPBDParticles<T, d>& Other)"
  },
  {
    "label": "TPBDParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPBDParticles(TPBDParticles<T, d>&& Other) : TDynamicParticles<T, d>(MoveTemp(Other)), MP(MoveTemp(Other.MP))"
  },
  {
    "label": "TPBDParticles()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TPBDParticles()"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>&)",
    "insertText": "P(const int32 index)"
  },
  {
    "label": "GetP()",
    "kind": "Method",
    "detail": "Function (MP [ index ] = InP ; } TArrayCollectionArray<TVector<T,d>>&)",
    "insertText": "GetP()"
  }
]