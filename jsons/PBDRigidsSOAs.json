[
  {
    "label": "IParticleUniqueIndices",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IParticleUniqueIndices"
  },
  {
    "label": "FParticleUniqueIndicesMultithreaded",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleUniqueIndicesMultithreaded"
  },
  {
    "label": "FUniqueIdxPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueIdxPage"
  },
  {
    "label": "TParticleMapArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticleMapArray"
  },
  {
    "label": "TParticleArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticleArray"
  },
  {
    "label": "FPBDRigidsSOAs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSOAs"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "GetParticleDebugName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandle . h \" # include \" ChaosVisualDebugger / ChaosVisualDebuggerTrace . h \" # include \" UObject / ExternalPhysicsCustomObjectVersion . h \" namespace Chaos { namespace CVars { bool bRemoveParticleFromMovingKinematicsOnDisable ; bool bChaosSolverCheckParticleViews ; } template<TParticleType> const FString&)",
    "insertText": "GetParticleDebugName(const TParticleType& Particle)"
  },
  {
    "label": "DebugName()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_NAME return* Particle .)",
    "insertText": "DebugName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# else const FString SNoDebugNames =)",
    "insertText": "TEXT(\"<UNKNOWN>\")"
  },
  {
    "label": "GenerateUniqueIdx()",
    "kind": "Method",
    "detail": "Function (FUniqueIdx)",
    "insertText": "GenerateUniqueIdx()"
  },
  {
    "label": "ReleaseIdx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseIdx(FUniqueIdx Unique)"
  },
  {
    "label": "FParticleUniqueIndicesMultithreaded()",
    "kind": "Method",
    "detail": "Function (} ; class FParticleUniqueIndicesMultithreaded : public IParticleUniqueIndices { public :)",
    "insertText": "FParticleUniqueIndicesMultithreaded() : Block(0)"
  },
  {
    "label": "AddPageAndAcquireNextId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPageAndAcquireNextId(false)"
  },
  {
    "label": "FUniqueIdx()",
    "kind": "Method",
    "detail": "Function (FUniqueIdx RetIdx =)",
    "insertText": "FUniqueIdx(AddPageAndAcquireNextId( true))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (int32 PageIdx = Unique . Idx / IndicesPerPage ; int32 Entry = Unique . Idx % IndicesPerPage ; FUniqueIdxPage& Page =* Pages [ PageIdx ] ; FreeIndices .)",
    "insertText": "Push(&Page.Indices[Entry])"
  },
  {
    "label": "FParticleUniqueIndicesMultithreaded()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FParticleUniqueIndicesMultithreaded()"
  },
  {
    "label": "AddPageAndAcquireNextId()",
    "kind": "Method",
    "detail": "Function (} } private : int32)",
    "insertText": "AddPageAndAcquireNextId(bool bAcquireNextIdx)"
  },
  {
    "label": "FUniqueIdxPage()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FUniqueIdxPage> Page = MakeUnique<)",
    "insertText": "FUniqueIdxPage()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 PageIdx = Pages .)",
    "insertText": "Num()"
  },
  {
    "label": "FUniqueIdx()",
    "kind": "Method",
    "detail": "Function (int32 FirstIdxInPage = PageIdx* IndicesPerPage ; Page -> Indices [ 0 ] =)",
    "insertText": "FUniqueIdx(FirstIdxInPage)"
  },
  {
    "label": "FUniqueIdx()",
    "kind": "Method",
    "detail": "Function (Page -> Indices [ Count ] =)",
    "insertText": "FUniqueIdx(FirstIdxInPage + Count)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (FreeIndices .)",
    "insertText": "Push(&Page->Indices[Count])"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} Pages .)",
    "insertText": "Emplace(MoveTemp(Page))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const TParticleType* Particle)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} template<TParticle1> void)",
    "insertText": "Insert(const TArray<TParticle1*>& ParticlesToInsert)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<bool> Contains ; Contains .)",
    "insertText": "AddZeroed(ParticlesToInsert.Num())"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (auto Particle = ParticlesToInsert [ Idx ] ; Contains [ Idx ] = ParticleToIndex .)",
    "insertText": "Contains(Particle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParticleToIndex .)",
    "insertText": "Add(Particle, NextIdx++)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } ParticleArray .)",
    "insertText": "Reserve(ParticleArray.Num() + NextIdx - ParticleArray.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (auto Particle = ParticlesToInsert [ Idx ] ; ParticleArray .)",
    "insertText": "Add(Particle)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Insert(TParticleType* Particle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParticleToIndex .)",
    "insertText": "Add(Particle, ParticleArray.Num())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(TParticleType* Particle)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (int32 Idx =* IdxPtr ; ParticleArray .)",
    "insertText": "RemoveAtSwap(Idx)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ParticleToIndex [ ParticleArray [ Idx ] ] = Idx ; } ParticleToIndex .)",
    "insertText": "Remove(Particle)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "AsAlwaysSerializableArray()",
    "kind": "Method",
    "detail": "Function (TArray<TSerializablePtr<TParticleType>>& SerializableArray =)",
    "insertText": "AsAlwaysSerializableArray(ParticleArray)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<SerializableArray ; int32 Idx = 0 ;)",
    "insertText": "for(auto Particle : ParticleArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParticleToIndex .)",
    "insertText": "Add(Particle, Idx++)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (} } const TArray<TParticleType*>&)",
    "insertText": "GetArray()"
  },
  {
    "label": "GetContainerListMask()",
    "kind": "Method",
    "detail": "Function (ContainerListMask = InMask ; } EGeometryParticleListMask)",
    "insertText": "GetContainerListMask()"
  },
  {
    "label": "FGeometryParticles()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DETERMINISTIC BiggestParticleID = 0 ; # endif StaticParticles = MakeUnique<)",
    "insertText": "FGeometryParticles()"
  },
  {
    "label": "FKinematicGeometryParticles()",
    "kind": "Method",
    "detail": "Function (KinematicParticles = MakeUnique<)",
    "insertText": "FKinematicGeometryParticles()"
  },
  {
    "label": "FPBDRigidParticles()",
    "kind": "Method",
    "detail": "Function (DynamicDisabledParticles = MakeUnique<)",
    "insertText": "FPBDRigidParticles()"
  },
  {
    "label": "FPBDRigidClusteredParticles()",
    "kind": "Method",
    "detail": "Function (ClusteredParticles = MakeUnique<)",
    "insertText": "FPBDRigidClusteredParticles()"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (GeometryCollectionParticles = MakeUnique<TPBDGeometryCollectionParticles<)",
    "insertText": "FReal()"
  },
  {
    "label": "SetContainerListMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContainerListMasks()"
  },
  {
    "label": "UpdateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViews()"
  },
  {
    "label": "FPBDRigidsSOAs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDRigidsSOAs(const FPBDRigidsSOAs&)"
  },
  {
    "label": "FPBDRigidsSOAs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDRigidsSOAs(FPBDRigidsSOAs&& Other)"
  },
  {
    "label": "FPBDRigidsSOAs()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDRigidsSOAs()"
  },
  {
    "label": "RemoveParticleBehavior()",
    "kind": "Method",
    "detail": "Function (ClusteredParticles ->)",
    "insertText": "RemoveParticleBehavior()"
  },
  {
    "label": "ShrinkArrays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShrinkArrays(const float MaxSlackFraction, const int32 MinSlack)"
  },
  {
    "label": "ShrinkArrays()",
    "kind": "Method",
    "detail": "Function (StaticParticles ->)",
    "insertText": "ShrinkArrays(MaxSlackFraction, MinSlack)"
  },
  {
    "label": "UpdateDirtyViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateDirtyViews()"
  },
  {
    "label": "CreateStaticParticles()",
    "kind": "Method",
    "detail": "Function (} TArray<FGeometryParticleHandle*>)",
    "insertText": "CreateStaticParticles(int32 NumParticles, const FUniqueIdx* ExistingIndices = nullptr, const FGeometryParticleParameters& Params = FGeometryParticleParameters())"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Physics/StaticParticles\"))"
  },
  {
    "label": "FGeometryParticleHandle()",
    "kind": "Method",
    "detail": "Function (auto Results = CreateParticlesHelper<)",
    "insertText": "FGeometryParticleHandle(NumParticles, ExistingIndices, Params.bDisabled ? StaticDisabledParticles : StaticParticles, Params)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Physics/KinematicParticles\"))"
  },
  {
    "label": "FKinematicGeometryParticleHandle()",
    "kind": "Method",
    "detail": "Function (auto Results = CreateParticlesHelper<)",
    "insertText": "FKinematicGeometryParticleHandle(NumParticles, ExistingIndices, Params.bDisabled ? KinematicDisabledParticles : KinematicParticles, Params)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Physics/DynamicParticles\"))"
  },
  {
    "label": "FPBDRigidParticleHandle()",
    "kind": "Method",
    "detail": "Function (auto Results = CreateParticlesHelper<)",
    "insertText": "FPBDRigidParticleHandle(NumParticles, ExistingIndices, Params.bDisabled ? DynamicDisabledParticles : DynamicParticles, Params)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (;)",
    "insertText": "if(!Params.bStartSleeping)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToActiveArray(Results)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Physics/GeometryCollectionParticles\"))"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (TArray<TPBDGeometryCollectionParticleHandle<FReal,3>*> Results = CreateParticlesHelper<TPBDGeometryCollectionParticleHandle<)",
    "insertText": "FReal(NumParticles, ExistingIndices, GeometryCollectionParticles, Params)"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "SetObjectStateLowLevel(Chaos::EObjectStateType::Sleeping)"
  },
  {
    "label": "SetSleeping()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "SetSleeping(true)"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (} else { Handle ->)",
    "insertText": "SetObjectStateLowLevel(Chaos::EObjectStateType::Dynamic)"
  },
  {
    "label": "SetSleeping()",
    "kind": "Method",
    "detail": "Function (Handle ->)",
    "insertText": "SetSleeping(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Params.bDisabled)"
  },
  {
    "label": "InsertGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertGeometryCollectionParticle(Handle)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Physics/ClusteredParticles\"))"
  },
  {
    "label": "FPBDRigidClusteredParticleHandle()",
    "kind": "Method",
    "detail": "Function (auto NewClustered = CreateParticlesHelper<)",
    "insertText": "FPBDRigidClusteredParticleHandle(NumParticles, ExistingIndices, ClusteredParticles, Params)"
  },
  {
    "label": "InsertClusteredParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertClusteredParticles(NewClustered)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToActiveArray(reinterpret_cast<TArray<FPBDRigidParticleHandle*>&>(NewClustered))"
  },
  {
    "label": "MarkTransientDirtyParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTransientDirtyParticle(FGeometryParticleHandle* Particle, const bool bUpdateViews = true)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Rigid, TransientDirtyMapArray)"
  },
  {
    "label": "DestroyParticle()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "DestroyParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, ResimStaticParticles)"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (FKinematicGeometryParticleHandle* Kinematic = Particle ->)",
    "insertText": "CastToKinematicParticle()"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Kinematic, ResimKinematicParticles)"
  },
  {
    "label": "CVD_TRACE_PARTICLE_DESTROYED()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CVD_TRACE_PARTICLE_DESTROYED(Particle)"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (auto PBDRigid = Particle ->)",
    "insertText": "CastToRigidParticle()"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(PBDRigid, ResimDynamicParticles)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(PBDRigid, ResimDynamicKinematicParticles)"
  },
  {
    "label": "RemoveFromActiveArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RemoveFromActiveArray(PBDRigid, false)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(PBDRigid, MovingKinematicsMapArray)"
  },
  {
    "label": "RemoveGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGeometryCollectionParticle(GCHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FPBDRigidClusteredParticleHandle* PBDRigidClustered = Particle->CastToClustered())"
  },
  {
    "label": "RemoveClusteredParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClusteredParticle(PBDRigidClustered)"
  },
  {
    "label": "GetDynamicParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GetDynamicParticles().GetSleepDataLock().WriteLock()"
  },
  {
    "label": "GetDynamicParticles()",
    "kind": "Method",
    "detail": "Function (TArray<TSleepData<FReal,3>>& SleepData =)",
    "insertText": "GetDynamicParticles().GetSleepData()"
  },
  {
    "label": "RemoveAllSwap()",
    "kind": "Method",
    "detail": "Function (SleepData .)",
    "insertText": "RemoveAllSwap([Particle](TSleepData<FReal, 3>& Entry) { return Entry.Particle == Particle; })"
  },
  {
    "label": "GetDynamicParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicParticles().GetSleepDataLock().WriteUnlock()"
  },
  {
    "label": "DestroyHandleSwap()",
    "kind": "Method",
    "detail": "Function (} ParticleHandles .)",
    "insertText": "DestroyHandleSwap(Particle)"
  },
  {
    "label": "DisableParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (PBDRigid ->)",
    "insertText": "SetDisabled(true)"
  },
  {
    "label": "SetVf()",
    "kind": "Method",
    "detail": "Function (PBDRigid ->)",
    "insertText": "SetVf(FVec3f(0))"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (PBDRigid ->)",
    "insertText": "SetWf(FVec3f(0))"
  },
  {
    "label": "RemoveGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGeometryCollectionParticle(PBDRigidGC)"
  },
  {
    "label": "SetDynamicParticleSOA()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "SetDynamicParticleSOA(PBDRigid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(Particle->CastToKinematicParticle())"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "MoveToSOA(*KinematicDisabledParticles)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (} else { Particle ->)",
    "insertText": "MoveToSOA(*StaticDisabledParticles)"
  },
  {
    "label": "CheckParticleViewMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckParticleViewMask(Particle)"
  },
  {
    "label": "EnableParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (PBDRigid ->)",
    "insertText": "SetDisabled(false)"
  },
  {
    "label": "InsertGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertGeometryCollectionParticle(PBDRigidGC)"
  },
  {
    "label": "InsertClusteredParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertClusteredParticle(PBDRigidClustered)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!PBDRigid->Sleeping() && Particle->ObjectState() == EObjectStateType::Dynamic)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToActiveArray(PBDRigid)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "MoveToSOA(*KinematicParticles)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (} else { Particle ->)",
    "insertText": "MoveToSOA(*StaticParticles)"
  },
  {
    "label": "ActivateParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateParticle(FGeometryParticleHandle* Particle, const bool DeferUpdateViews=false)"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (PBDRigid ->)",
    "insertText": "SetObjectStateLowLevel(EObjectStateType::Dynamic)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(PBDRigid->ObjectState() == EObjectStateType::Dynamic)"
  },
  {
    "label": "ActivateParticles()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "ActivateParticles(const TArray<FGeometryParticleHandle*>& Particles)"
  },
  {
    "label": "ActivateParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateParticle(Particle, true)"
  },
  {
    "label": "DeactivateParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeactivateParticle(FGeometryParticleHandle* Particle, const bool DeferUpdateViews=false)"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (PBDRigid ->)",
    "insertText": "SetObjectStateLowLevel(EObjectStateType::Sleeping)"
  },
  {
    "label": "RemoveFromActiveArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RemoveFromActiveArray(PBDRigid, true)"
  },
  {
    "label": "DeactivateParticles()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "DeactivateParticles(const TArray<FGeometryParticleHandle*>& Particles)"
  },
  {
    "label": "DeactivateParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateParticle(Particle, true)"
  },
  {
    "label": "RebuildViews()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildViews()"
  },
  {
    "label": "SetDynamicParticleSOA()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDynamicParticleSOA(FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "ObjectState()",
    "kind": "Method",
    "detail": "Function (const EObjectStateType State = Particle ->)",
    "insertText": "ObjectState()"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "MoveToSOA(*DynamicDisabledParticles)"
  },
  {
    "label": "RemoveFromActiveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromActiveArray(Particle->CastToRigidParticle(), false)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, MovingKinematicsMapArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(Particle->ObjectState() != EObjectStateType::Dynamic)"
  },
  {
    "label": "RemoveFromActiveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromActiveArray(Particle->CastToRigidParticle(), true)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "AddToActiveArray(Particle->CastToRigidParticle())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particle->ObjectState() != EObjectStateType::Kinematic)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Particle->Type == EParticleType::Clustered)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "MoveToSOA(*ClusteredParticles)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, ResimDynamicKinematicParticles)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particle, ResimDynamicParticles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Particle->Type == EParticleType::GeometryCollection)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (Particle ->)",
    "insertText": "MoveToSOA(*GeometryCollectionParticles)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "switch(State)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, ResimDynamicParticles)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particle, ResimDynamicKinematicParticles)"
  },
  {
    "label": "MoveToSOA()",
    "kind": "Method",
    "detail": "Function (} break ; case EObjectStateType::Dynamic : Particle ->)",
    "insertText": "MoveToSOA(*DynamicParticles)"
  },
  {
    "label": "SetClusteredParticleSOA()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClusteredParticleSOA(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(ClusteredParticle, MovingKinematicsMapArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TPBDGeometryCollectionParticleHandle<FReal, 3>* GCParticle = ClusteredParticle->CastToGeometryCollection())"
  },
  {
    "label": "RemoveGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGeometryCollectionParticle(GCParticle)"
  },
  {
    "label": "InsertGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertGeometryCollectionParticle(GCParticle)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ClusteredParticle->GetParticleType() != Chaos::EParticleType::GeometryCollection)"
  },
  {
    "label": "RemoveClusteredParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClusteredParticle(ClusteredParticle)"
  },
  {
    "label": "InsertClusteredParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertClusteredParticle(ClusteredParticle)"
  },
  {
    "label": "RemoveFromActiveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromActiveArray(ClusteredParticle->CastToRigidParticle(), true)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "AddToActiveArray(ClusteredParticle->CastToRigidParticle())"
  },
  {
    "label": "CheckParticleViewMask()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CheckParticleViewMask(ClusteredParticle)"
  },
  {
    "label": "MarkMovingKinematic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkMovingKinematic(FKinematicGeometryParticleHandle* Particle)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Rigid, MovingKinematicsMapArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Rigid, TransientDirtyMapArray)"
  },
  {
    "label": "UpdateAllMovingKinematic()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateAllMovingKinematic()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ;)",
    "insertText": "while(Index < MovingKinematicsMapArray.GetArray().Num())"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Rigid, MovingKinematicsMapArray)"
  },
  {
    "label": "MarkTransientDirtyParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkTransientDirtyParticle(Rigid)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const FName SOAsName =)",
    "insertText": "TEXT(\"PBDRigidsSOAs\")"
  },
  {
    "label": "ScopedMemory()",
    "kind": "Method",
    "detail": "Function (FChaosArchiveScopedMemory)",
    "insertText": "ScopedMemory(Ar, SOAsName, false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (ParticleHandles .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar<<StaticParticles ; Ar<<StaticDisabledParticles ; Ar<<KinematicParticles ; Ar<<KinematicDisabledParticles ; Ar<<DynamicParticles ; Ar<<DynamicDisabledParticles ; Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "AssignIdxHelper()",
    "kind": "Method",
    "detail": "Function (Ar<<DynamicKinematicParticles ; } { auto)",
    "insertText": "AssignIdxHelper(const auto& Particles)"
  },
  {
    "label": "UniqueIdx()",
    "kind": "Method",
    "detail": "Function (Particles ->)",
    "insertText": "UniqueIdx(ParticleIdx)"
  },
  {
    "label": "GTGeometryParticle()",
    "kind": "Method",
    "detail": "Function (Particles ->)",
    "insertText": "GTGeometryParticle(ParticleIdx)->SetUniqueIdx(Unique)"
  },
  {
    "label": "AssignIdxHelper()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AssignIdxHelper(StaticParticles)"
  },
  {
    "label": "AssignIdxHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIdxHelper(StaticDisabledParticles)"
  },
  {
    "label": "AssignIdxHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIdxHelper(KinematicParticles)"
  },
  {
    "label": "AssignIdxHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIdxHelper(DynamicParticles)"
  },
  {
    "label": "AssignIdxHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignIdxHelper(DynamicDisabledParticles)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(ClusteredParticles->Size() == 0)"
  },
  {
    "label": "GetNonDisabledView()",
    "kind": "Method",
    "detail": "Function (} const TParticleView<FGeometryParticles>&)",
    "insertText": "GetNonDisabledView()"
  },
  {
    "label": "GetDirtyParticlesView()",
    "kind": "Method",
    "detail": "Function (} const TParticleView<FPBDRigidParticles>&)",
    "insertText": "GetDirtyParticlesView()"
  },
  {
    "label": "GetDynamicGeometryCollectionArray()",
    "kind": "Method",
    "detail": "Function (} const TArray<FPBDGeometryCollectionParticleHandle*>&)",
    "insertText": "GetDynamicGeometryCollectionArray()"
  },
  {
    "label": "InsertGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertGeometryCollectionParticle(TPBDGeometryCollectionParticleHandle<FReal, 3>* GCParticle)"
  },
  {
    "label": "Sleeping()",
    "kind": "Method",
    "detail": "Function (const Chaos::EObjectStateType State = GCParticle ->)",
    "insertText": "Sleeping() ? Chaos::EObjectStateType::Sleeping : GCParticle->ObjectState()"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType:::)",
    "insertText": "AddToList(GCParticle, StaticGeometryCollectionArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType::Kinematic :)",
    "insertText": "AddToList(GCParticle, KinematicGeometryCollectionArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType::Dynamic :)",
    "insertText": "AddToList(GCParticle, DynamicGeometryCollectionArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType::Sleeping :)",
    "insertText": "AddToList(GCParticle, SleepingGeometryCollectionArray)"
  },
  {
    "label": "RemoveGeometryCollectionParticle()",
    "kind": "Method",
    "detail": "Function (break ; } } } void)",
    "insertText": "RemoveGeometryCollectionParticle(TPBDGeometryCollectionParticleHandle<FReal, 3>* GCParticle)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(GCParticle, StaticGeometryCollectionArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(GCParticle, KinematicGeometryCollectionArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(GCParticle, SleepingGeometryCollectionArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(GCParticle, DynamicGeometryCollectionArray)"
  },
  {
    "label": "GetClusteredParticles()",
    "kind": "Method",
    "detail": "Function (} const auto&)",
    "insertText": "GetClusteredParticles()"
  },
  {
    "label": "CheckViewMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckViewMasks()"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (template<TListType,TParticleHandleType> void)",
    "insertText": "AddToList(TParticleHandleType* Particle, TListType& List)"
  },
  {
    "label": "AddToLists()",
    "kind": "Method",
    "detail": "Function ({ Particle ->)",
    "insertText": "AddToLists(List.GetContainerListMask())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (List .)",
    "insertText": "Insert(Particle)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (} } template<TListType,TParticleHandleType> void)",
    "insertText": "AddToList(const TArray<TParticleHandleType*> Particles, TListType& List)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} List .)",
    "insertText": "Insert(Particles)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (} template<TListType,TParticleHandleType> void)",
    "insertText": "RemoveFromList(TParticleHandleType* Particle, TListType& List)"
  },
  {
    "label": "RemoveFromLists()",
    "kind": "Method",
    "detail": "Function ({ Particle ->)",
    "insertText": "RemoveFromLists(List.GetContainerListMask())"
  },
  {
    "label": "CheckSOAMasks()",
    "kind": "Method",
    "detail": "Function (} } template<TSOAType> void)",
    "insertText": "CheckSOAMasks(TSOAType* SOA)"
  },
  {
    "label": "MakeConstParticleView()",
    "kind": "Method",
    "detail": "Function (TArray<TSOAView<FGeometryParticles>> SOAViewArray = { SOA } ; auto View =)",
    "insertText": "MakeConstParticleView(MoveTemp(SOAViewArray))"
  },
  {
    "label": "CheckListMasks()",
    "kind": "Method",
    "detail": "Function (} } template<TListType> void)",
    "insertText": "CheckListMasks(TListType& List)"
  },
  {
    "label": "SOAView()",
    "kind": "Method",
    "detail": "Function (TSOAView<FGeometryParticles>)",
    "insertText": "SOAView(&List.GetArray())"
  },
  {
    "label": "CheckParticleViewMask()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CheckParticleViewMask(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "if(CVars::bChaosSolverCheckParticleViews)"
  },
  {
    "label": "CheckParticleViewMaskImpl()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "CheckParticleViewMaskImpl(const FGeometryParticleHandle* Particle)"
  },
  {
    "label": "CreateParticlesHelper()",
    "kind": "Method",
    "detail": "Function (template<TParticleHandleType,TParticles> TArray<TParticleHandleType*>)",
    "insertText": "CreateParticlesHelper(int32 NumParticles, const FUniqueIdx* ExistingIndices, TUniquePtr<TParticles>& Particles, const FGeometryParticleParameters& Params)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const int32 ParticlesStartIdx = Particles ->)",
    "insertText": "Size()"
  },
  {
    "label": "AddParticles()",
    "kind": "Method",
    "detail": "Function (Particles ->)",
    "insertText": "AddParticles(NumParticles)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<TParticleHandleType*> ReturnHandles ; ReturnHandles .)",
    "insertText": "AddUninitialized(NumParticles)"
  },
  {
    "label": "AddHandles()",
    "kind": "Method",
    "detail": "Function (ParticleHandles .)",
    "insertText": "AddHandles(NumParticles)"
  },
  {
    "label": "CreateParticleHandle()",
    "kind": "Method",
    "detail": "Function (const int32 ParticleIdx = Count + ParticlesStartIdx ; const int32 HandleIdx = Count + HandlesStartIdx ; TUniquePtr<TParticleHandleType> NewParticleHandle =)",
    "insertText": "CreateParticleHandle(MakeSerializable(Particles), ParticleIdx, HandleIdx)"
  },
  {
    "label": "SetParticleID()",
    "kind": "Method",
    "detail": "Function (NewParticleHandle ->)",
    "insertText": "SetParticleID(FParticleID{ INDEX_NONE, BiggestParticleID++ })"
  },
  {
    "label": "AddToLists()",
    "kind": "Method",
    "detail": "Function (NewParticleHandle ->)",
    "insertText": "AddToLists(Particles->GetContainerListMask())"
  },
  {
    "label": "SetUniqueIdx()",
    "kind": "Method",
    "detail": "Function (} else { ReturnHandles [ Count ] ->)",
    "insertText": "SetUniqueIdx(UniqueIndices.GenerateUniqueIdx())"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (} ParticleHandles .)",
    "insertText": "Handle(HandleIdx) = MoveTemp(NewParticleHandle)"
  },
  {
    "label": "HasCollision()",
    "kind": "Method",
    "detail": "Function (Particles ->)",
    "insertText": "HasCollision(ParticleIdx)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (} return ReturnHandles ; } void)",
    "insertText": "AddToActiveArray(const TArray<FPBDRigidParticleHandle*>& Particles)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particles, ActiveParticlesMapArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particles, ResimActiveParticlesMapArray)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FPBDRigidParticleHandle* Particle : Particles)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, TransientDirtyMapArray)"
  },
  {
    "label": "AddToActiveArray()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddToActiveArray(FPBDRigidParticleHandle* Particle)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particle, ActiveParticlesMapArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particle, ResimActiveParticlesMapArray)"
  },
  {
    "label": "RemoveFromActiveArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFromActiveArray(FPBDRigidParticleHandle* Particle, bool bStillDirty)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, ActiveParticlesMapArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(Particle, ResimActiveParticlesMapArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bStillDirty)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToList(Particle, TransientDirtyMapArray)"
  },
  {
    "label": "InsertClusteredParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertClusteredParticle(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType:::)",
    "insertText": "AddToList(ClusteredParticle, StaticClusteredMapArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType::Kinematic :)",
    "insertText": "AddToList(ClusteredParticle, KinematicClusteredMapArray)"
  },
  {
    "label": "AddToList()",
    "kind": "Method",
    "detail": "Function (break ; case EObjectStateType::Dynamic : case EObjectStateType::Sleeping :)",
    "insertText": "AddToList(ClusteredParticle, DynamicClusteredMapArray)"
  },
  {
    "label": "InsertClusteredParticles()",
    "kind": "Method",
    "detail": "Function (break ; } } } void)",
    "insertText": "InsertClusteredParticles(const TArray<FPBDRigidClusteredParticleHandle*>& ClusteredParticleArray)"
  },
  {
    "label": "RemoveClusteredParticle()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveClusteredParticle(FPBDRigidClusteredParticleHandle* ClusteredParticle)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(ClusteredParticle, StaticClusteredMapArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(ClusteredParticle, KinematicClusteredMapArray)"
  },
  {
    "label": "RemoveFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromList(ClusteredParticle, DynamicClusteredMapArray)"
  }
]