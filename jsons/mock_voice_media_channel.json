[
  {
    "label": "MockVoiceMediaChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockVoiceMediaChannel"
  },
  {
    "label": "MockVoiceMediaChannel()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_MOCK_VOICE_MEDIA_CHANNEL_H_ # define PC_TEST_MOCK_VOICE_MEDIA_CHANNEL_H_ # include<memory> # include<string> # include<vector> # include \" api / call / audio_sink . h \" # include \" media / base / media_channel . h \" # include \" rtc_base / gunit . h \" # include \" test / gmock . h \" # include \" test / gtest . h \" using::testing::InvokeWithoutArgs ; using::testing::Mock ; namespace cricket { class MockVoiceMediaChannel : public VoiceMediaChannel { public :)",
    "insertText": "MockVoiceMediaChannel(webrtc::TaskQueueBase* network_thread) : VoiceMediaChannel(network_thread)"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(void, SetInterface, (NetworkInterface * iface), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnPacketReceived, (rtc::CopyOnWriteBuffer packet, int64_t packet_time_us), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnPacketSent, (const rtc::SentPacket& sent_packet), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnReadyToSend, (bool ready), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnNetworkRouteChanged, (absl::string_view transport_name, const rtc::NetworkRoute& network_route), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, AddSendStream, (const StreamParams& sp), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, RemoveSendStream, (uint32_t ssrc), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, AddRecvStream, (const StreamParams& sp), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, RemoveRecvStream, (uint32_t ssrc), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, ResetUnsignaledRecvStream, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnDemuxerCriteriaUpdatePending, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnDemuxerCriteriaUpdateComplete, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(int, GetRtpSendTimeExtnId, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetFrameEncryptor, (uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetFrameDecryptor, (uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetVideoCodecSwitchingEnabled, (bool enabled), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(webrtc::RtpParameters, GetRtpSendParameters, (uint32_t ssrc), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(webrtc::RTCError, SetRtpSendParameters, (uint32_t ssrc, const webrtc::RtpParameters& parameters), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetEncoderToPacketizerFrameTransformer, (uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetDepacketizerToDecoderFrameTransformer, (uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, SetSendParameters, (const AudioSendParameters& params), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, SetRecvParameters, (const AudioRecvParameters& params), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(webrtc::RtpParameters, GetRtpReceiveParameters, (uint32_t ssrc), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(webrtc::RtpParameters, GetDefaultRtpReceiveParameters, (), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetPlayout, (bool playout), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetSend, (bool send), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, SetAudioSend, (uint32_t ssrc, bool enable, const AudioOptions* options, AudioSource* source), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, SetOutputVolume, (uint32_t ssrc, double volume), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, SetDefaultOutputVolume, (double volume), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, CanInsertDtmf, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, InsertDtmf, (uint32_t ssrc, int event, int duration), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, GetStats, (VoiceMediaInfo * info, bool get_and_clear_legacy_stats), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetRawAudioSink, (uint32_t ssrc, std::unique_ptr<webrtc::AudioSinkInterface> sink), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, SetDefaultRawAudioSink, (std::unique_ptr<webrtc::AudioSinkInterface> sink), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(std::vector<webrtc::RtpSource>, GetSources, (uint32_t ssrc), (const, override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(bool, SetBaseMinimumPlayoutDelayMs, (uint32_t ssrc, int delay_ms), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(absl::optional<int>, GetBaseMinimumPlayoutDelayMs, (uint32_t ssrc), (const, override))"
  }
]