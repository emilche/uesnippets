[
  {
    "label": "siphash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "siphash"
  },
  {
    "label": "sipkey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sipkey"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SIPHASH_H # define SIPHASH_H # include<stddef . h> # if)",
    "insertText": "defined(_WIN32) && defined(_MSC_VER) && (_MSC_VER < 1600)"
  },
  {
    "label": "_SIP_ULL()",
    "kind": "Method",
    "detail": "Function (typedef unsigned __int32 uint32_t ; typedef unsigned __int64 uint64_t ; # else # include<stdint . h> # endif # define)",
    "insertText": "_SIP_ULL(high, low) (((uint64_t)high << 32) | low) #define SIP_ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b)))) #define SIP_U32TO8_LE(p, v) \\ (p)[0] = (uint8_t)((v) >> 0)"
  },
  {
    "label": "SIP_U64TO8_LE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SIP_U64TO8_LE(p, v) \\ SIP_U32TO8_LE((p) + 0, (uint32_t)((v) >> 0))"
  },
  {
    "label": "SIP_U32TO8_LE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "SIP_U32TO8_LE((p) + 4, (uint32_t)((v) >> 32))"
  },
  {
    "label": "SIP_U8TO64_LE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SIP_U8TO64_LE(p) \\ (((uint64_t)((p)[0]) << 0) | ((uint64_t)((p)[1]) << 8) \\ | ((uint64_t)((p)[2]) << 16) | ((uint64_t)((p)[3]) << 24) \\ | ((uint64_t)((p)[4]) << 32) | ((uint64_t)((p)[5]) << 40) \\ | ((uint64_t)((p)[6]) << 48) | ((uint64_t)((p)[7]) << 56))"
  },
  {
    "label": "sip_keyof()",
    "kind": "Method",
    "detail": "Function (0,0,0,0,{ 0 },0,0 } struct siphash { uint64_t v0,v1,v2,v3 ; unsigned char buf [ 8 ],* p ; uint64_t c ; } ; # define SIP_KEYLEN 1 6 struct sipkey { uint64_t k [ 2 ] ; } ; # define)",
    "insertText": "sip_keyof(k) sip_tokey(&(struct sipkey){{0}}, (k)) static struct sipkey * sip_tokey(struct sipkey *key, const void *src)"
  },
  {
    "label": "SIP_U8TO64_LE()",
    "kind": "Method",
    "detail": "Function (key -> k [ 0 ] =)",
    "insertText": "SIP_U8TO64_LE((const unsigned char *)src)"
  },
  {
    "label": "SIP_U8TO64_LE()",
    "kind": "Method",
    "detail": "Function (key -> k [ 1 ] =)",
    "insertText": "SIP_U8TO64_LE((const unsigned char *)src + 8)"
  },
  {
    "label": "SIP_U64TO8_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SIP_U64TO8_LE((unsigned char *)dst, u64)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i = 0; i < rounds; i++)"
  },
  {
    "label": "SIP_ROTL()",
    "kind": "Method",
    "detail": "Function (H -> v0 + = H -> v1 ; H -> v1 =)",
    "insertText": "SIP_ROTL(H->v1, 13)"
  },
  {
    "label": "SIP_ROTL()",
    "kind": "Method",
    "detail": "Function (H -> v1 ^ = H -> v0 ; H -> v0 =)",
    "insertText": "SIP_ROTL(H->v0, 32)"
  },
  {
    "label": "SIP_ROTL()",
    "kind": "Method",
    "detail": "Function (H -> v2 + = H -> v3 ; H -> v3 =)",
    "insertText": "SIP_ROTL(H->v3, 16)"
  },
  {
    "label": "SIP_ROTL()",
    "kind": "Method",
    "detail": "Function (H -> v3 ^ = H -> v2 ; H -> v0 + = H -> v3 ; H -> v3 =)",
    "insertText": "SIP_ROTL(H->v3, 21)"
  },
  {
    "label": "SIP_ROTL()",
    "kind": "Method",
    "detail": "Function (H -> v3 ^ = H -> v0 ; H -> v2 + = H -> v1 ; H -> v1 =)",
    "insertText": "SIP_ROTL(H->v1, 17)"
  },
  {
    "label": "SIP_ROTL()",
    "kind": "Method",
    "detail": "Function (H -> v1 ^ = H -> v2 ; H -> v2 =)",
    "insertText": "SIP_ROTL(H->v2, 32)"
  },
  {
    "label": "sip24_init()",
    "kind": "Method",
    "detail": "Function (} } struct siphash*)",
    "insertText": "sip24_init(struct siphash *H, const struct sipkey *key)"
  },
  {
    "label": "_SIP_ULL()",
    "kind": "Method",
    "detail": "Function (k[0])",
    "insertText": "_SIP_ULL(0x736f6d65U, 0x70736575U)"
  },
  {
    "label": "_SIP_ULL()",
    "kind": "Method",
    "detail": "Function (k[1])",
    "insertText": "_SIP_ULL(0x646f7261U, 0x6e646f6dU)"
  },
  {
    "label": "_SIP_ULL()",
    "kind": "Method",
    "detail": "Function (k[0])",
    "insertText": "_SIP_ULL(0x6c796765U, 0x6e657261U)"
  },
  {
    "label": "_SIP_ULL()",
    "kind": "Method",
    "detail": "Function (k[1])",
    "insertText": "_SIP_ULL(0x74656462U, 0x79746573U)"
  },
  {
    "label": "sip_endof()",
    "kind": "Method",
    "detail": "Function (H -> p = H -> buf ; H -> c = 0 ; return H ; } # define)",
    "insertText": "sip_endof(a) (&(a)[sizeof(a) / sizeof *(a)]) static struct siphash * sip24_update(struct siphash *H, const void *src, size_t len)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "p(const unsigned char *)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (p++ = *p++)",
    "insertText": "while(p < pe && H->p < sip_endof(H->buf))"
  },
  {
    "label": "SIP_U8TO64_LE()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "SIP_U8TO64_LE(H->buf)"
  },
  {
    "label": "sip_round()",
    "kind": "Method",
    "detail": "Function (H -> v3 ^ = m ;)",
    "insertText": "sip_round(H, 2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (H -> v0 ^ = m ; H -> p = H -> buf ; H -> c + = 8 ; })",
    "insertText": "while(p < pe)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (const char)",
    "insertText": "left(char)(H->p - H->buf)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "b(H->c + left)"
  },
  {
    "label": "sip_round()",
    "kind": "Method",
    "detail": "Function (H -> v0 ^ = b ; H -> v2 ^ = 0 xff ;)",
    "insertText": "sip_round(H, 4)"
  },
  {
    "label": "sip24_final()",
    "kind": "Method",
    "detail": "Function (struct siphash state = SIPHASH_INITIALIZER ; return)",
    "insertText": "sip24_final(sip24_update(sip24_init(&state, key), src, len))"
  },
  {
    "label": "sip24_valid()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "sip24_valid(void)"
  },
  {
    "label": "sip_tokey()",
    "kind": "Method",
    "detail": "Function (const unsigned char vectors [ 6 4 ] [ 8 ] = { { 0 x31,0 x0e,0 x0e,0 xdd,0 x47,0 xdb,0 x6f,0 x72,},{ 0 xfd,0 x67,0 xdc,0 x93,0 xc5,0 x39,0 xf8,0 x74,},{ 0 x5a,0 x4f,0 xa9,0 xd9,0 x09,0 x80,0 x6c,0 x0d,},{ 0 x2d,0 x7e,0 xfb,0 xd7,0 x96,0 x66,0 x67,0 x85,},{ 0 xb7,0 x87,0 x71,0 x27,0 xe0,0 x94,0 x27,0 xcf,},{ 0 x8d,0 xa6,0 x99,0 xcd,0 x64,0 x55,0 x76,0 x18,},{ 0 xce,0 xe3,0 xfe,0 x58,0 x6e,0 x46,0 xc9,0 xcb,},{ 0 x37,0 xd1,0 x01,0 x8b,0 xf5,0 x00,0 x02,0 xab,},{ 0 x62,0 x24,0 x93,0 x9a,0 x79,0 xf5,0 xf5,0 x93,},{ 0 xb0,0 xe4,0 xa9,0 x0b,0 xdf,0 x82,0 x00,0 x9e,},{ 0 xf3,0 xb9,0 xdd,0 x94,0 xc5,0 xbb,0 x5d,0 x7a,},{ 0 xa7,0 xad,0 x6b,0 x22,0 x46,0 x2f,0 xb3,0 xf4,},{ 0 xfb,0 xe5,0 x0e,0 x86,0 xbc,0 x8f,0 x1e,0 x75,},{ 0 x90,0 x3d,0 x84,0 xc0,0 x27,0 x56,0 xea,0 x14,},{ 0 xee,0 xf2,0 x7a,0 x8e,0 x90,0 xca,0 x23,0 xf7,},{ 0 xe5,0 x45,0 xbe,0 x49,0 x61,0 xca,0 x29,0 xa1,},{ 0 xdb,0 x9b,0 xc2,0 x57,0 x7f,0 xcc,0 x2a,0 x3f,},{ 0 x94,0 x47,0 xbe,0 x2c,0 xf5,0 xe9,0 x9a,0 x69,},{ 0 x9c,0 xd3,0 x8d,0 x96,0 xf0,0 xb3,0 xc1,0 x4b,},{ 0 xbd,0 x61,0 x79,0 xa7,0 x1d,0 xc9,0 x6d,0 xbb,},{ 0 x98,0 xee,0 xa2,0 x1a,0 xf2,0 x5c,0 xd6,0 xbe,},{ 0 xc7,0 x67,0 x3b,0 x2e,0 xb0,0 xcb,0 xf2,0 xd0,},{ 0 x88,0 x3e,0 xa3,0 xe3,0 x95,0 x67,0 x53,0 x93,},{ 0 xc8,0 xce,0 x5c,0 xcd,0 x8c,0 x03,0 x0c,0 xa8,},{ 0 x94,0 xaf,0 x49,0 xf6,0 xc6,0 x50,0 xad,0 xb8,},{ 0 xea,0 xb8,0 x85,0 x8a,0 xde,0 x92,0 xe1,0 xbc,},{ 0 xf3,0 x15,0 xbb,0 x5b,0 xb8,0 x35,0 xd8,0 x17,},{ 0 xad,0 xcf,0 x6b,0 x07,0 x63,0 x61,0 x2e,0 x2f,},{ 0 xa5,0 xc9,0 x1d,0 xa7,0 xac,0 xaa,0 x4d,0 xde,},{ 0 x71,0 x65,0 x95,0 x87,0 x66,0 x50,0 xa2,0 xa6,},{ 0 x28,0 xef,0 x49,0 x5c,0 x53,0 xa3,0 x87,0 xad,},{ 0 x42,0 xc3,0 x41,0 xd8,0 xfa,0 x92,0 xd8,0 x32,},{ 0 xce,0 x7c,0 xf2,0 x72,0 x2f,0 x51,0 x27,0 x71,},{ 0 xe3,0 x78,0 x59,0 xf9,0 x46,0 x23,0 xf3,0 xa7,},{ 0 x38,0 x12,0 x05,0 xbb,0 x1a,0 xb0,0 xe0,0 x12,},{ 0 xae,0 x97,0 xa1,0 x0f,0 xd4,0 x34,0 xe0,0 x15,},{ 0 xb4,0 xa3,0 x15,0 x08,0 xbe,0 xff,0 x4d,0 x31,},{ 0 x81,0 x39,0 x62,0 x29,0 xf0,0 x90,0 x79,0 x02,},{ 0 x4d,0 x0c,0 xf4,0 x9e,0 xe5,0 xd4,0 xdc,0 xca,},{ 0 x5c,0 x73,0 x33,0 x6a,0 x76,0 xd8,0 xbf,0 x9a,},{ 0 xd0,0 xa7,0 x04,0 x53,0 x6b,0 xa9,0 x3e,0 x0e,},{ 0 x92,0 x59,0 x58,0 xfc,0 xd6,0 x42,0 x0c,0 xad,},{ 0 xa9,0 x15,0 xc2,0 x9b,0 xc8,0 x06,0 x73,0 x18,},{ 0 x95,0 x2b,0 x79,0 xf3,0 xbc,0 x0a,0 xa6,0 xd4,},{ 0 xf2,0 x1d,0 xf2,0 xe4,0 x1d,0 x45,0 x35,0 xf9,},{ 0 x87,0 x57,0 x75,0 x19,0 x04,0 x8f,0 x53,0 xa9,},{ 0 x10,0 xa5,0 x6c,0 xf5,0 xdf,0 xcd,0 x9a,0 xdb,},{ 0 xeb,0 x75,0 x09,0 x5c,0 xcd,0 x98,0 x6c,0 xd0,},{ 0 x51,0 xa9,0 xcb,0 x9e,0 xcb,0 xa3,0 x12,0 xe6,},{ 0 x96,0 xaf,0 xad,0 xfc,0 x2c,0 xe6,0 x66,0 xc7,},{ 0 x72,0 xfe,0 x52,0 x97,0 x5a,0 x43,0 x64,0 xee,},{ 0 x5a,0 x16,0 x45,0 xb2,0 x76,0 xd5,0 x92,0 xa1,},{ 0 xb2,0 x74,0 xcb,0 x8e,0 xbf,0 x87,0 x87,0 x0a,},{ 0 x6f,0 x9b,0 xb4,0 x20,0 x3d,0 xe7,0 xb3,0 x81,},{ 0 xea,0 xec,0 xb2,0 xa3,0 x0b,0 x22,0 xa8,0 x7f,},{ 0 x99,0 x24,0 xa4,0 x3c,0 xc1,0 x31,0 x57,0 x24,},{ 0 xbd,0 x83,0 x8d,0 x3a,0 xaf,0 xbf,0 x8d,0 xb7,},{ 0 x0b,0 x1a,0 x2a,0 x32,0 x65,0 xd5,0 x1a,0 xea,},{ 0 x13,0 x50,0 x79,0 xa3,0 x23,0 x1c,0 xe6,0 x60,},{ 0 x93,0 x2b,0 x28,0 x46,0 xe4,0 xd7,0 x06,0 x66,},{ 0 xe1,0 x91,0 x5f,0 x5c,0 xb1,0 xec,0 xa4,0 x6c,},{ 0 xf3,0 x25,0 x96,0 x5c,0 xa1,0 x6d,0 x62,0 x9f,},{ 0 x57,0 x5f,0 xf2,0 x8e,0 x60,0 x38,0 x1b,0 xe5,},{ 0 x72,0 x45,0 x06,0 xeb,0 x4c,0 x32,0 x8a,0 x95,} } ; unsigned char in [ 6 4 ] ; struct sipkey k ; size_t i ;)",
    "insertText": "sip_tokey(&k, \"\\000\\001\\002\\003\\004\\005\\006\\007\\010\\011\" \"\\012\\013\\014\\015\\016\\017\")"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (in [)",
    "insertText": "i(unsigned char)"
  },
  {
    "label": "main()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } # ifdef SIPHASH_MAIN # include<stdio . h> int)",
    "insertText": "main(void)"
  },
  {
    "label": "sip24_valid()",
    "kind": "Method",
    "detail": "Function (const int ok =)",
    "insertText": "sip24_valid()"
  }
]