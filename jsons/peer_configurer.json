[
  {
    "label": "PeerConfigurer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConfigurer"
  },
  {
    "label": "PeerConfigurer()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_PCLF_PEER_CONFIGURER_H_ # define API_TEST_PCLF_PEER_CONFIGURER_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / async_resolver_factory . h \" # include \" api / audio / audio_mixer . h \" # include \" api / call / call_factory_interface . h \" # include \" api / fec_controller . h \" # include \" api / rtc_event_log / rtc_event_log_factory_interface . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / test / create_peer_connection_quality_test_frame_generator . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / pclf / media_quality_test_params . h \" # include \" api / test / peer_network_dependencies . h \" # include \" api / transport / network_control . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / network . h \" # include \" rtc_base / rtc_certificate_generator . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / thread . h \" namespace webrtc { namespace webrtc_pc_e2e { class PeerConfigurer { public : using VideoSource = absl::variant<std::unique_ptr<test::FrameGeneratorInterface>,CapturingDeviceIndex> ;)",
    "insertText": "PeerConfigurer(const PeerNetworkDependencies& network_dependencies)"
  },
  {
    "label": "PeerConfigurer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerConfigurer(rtc::Thread* network_thread, rtc::NetworkManager* network_manager, rtc::PacketSocketFactory* packet_socket_factory) : components_( std::make_unique<InjectableComponents>(network_thread, network_manager, packet_socket_factory)), params_(std::make_unique<Params>()), configurable_params_(std::make_unique<ConfigurableParams>())"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} PeerConfigurer*)",
    "insertText": "SetName(absl::string_view name)"
  },
  {
    "label": "SetTaskQueueFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetTaskQueueFactory(std::unique_ptr<TaskQueueFactory> task_queue_factory)"
  },
  {
    "label": "SetCallFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetCallFactory(std::unique_ptr<CallFactoryInterface> call_factory)"
  },
  {
    "label": "SetEventLogFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetEventLogFactory(std::unique_ptr<RtcEventLogFactoryInterface> event_log_factory)"
  },
  {
    "label": "SetFecControllerFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetFecControllerFactory(std::unique_ptr<FecControllerFactoryInterface> fec_controller_factory)"
  },
  {
    "label": "SetNetworkControllerFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetNetworkControllerFactory(std::unique_ptr<NetworkControllerFactoryInterface> network_controller_factory)"
  },
  {
    "label": "SetVideoEncoderFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetVideoEncoderFactory(std::unique_ptr<VideoEncoderFactory> video_encoder_factory)"
  },
  {
    "label": "SetVideoDecoderFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetVideoDecoderFactory(std::unique_ptr<VideoDecoderFactory> video_decoder_factory)"
  },
  {
    "label": "SetNetEqFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetNetEqFactory(std::unique_ptr<NetEqFactory> neteq_factory)"
  },
  {
    "label": "SetAudioProcessing()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetAudioProcessing(rtc::scoped_refptr<webrtc::AudioProcessing> audio_processing)"
  },
  {
    "label": "SetAudioMixer()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetAudioMixer(rtc::scoped_refptr<webrtc::AudioMixer> audio_mixer)"
  },
  {
    "label": "SetUseNetworkThreadAsWorkerThread()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetUseNetworkThreadAsWorkerThread()"
  },
  {
    "label": "SetAsyncResolverFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetAsyncResolverFactory(std::unique_ptr<webrtc::AsyncResolverFactory> async_resolver_factory)"
  },
  {
    "label": "SetRTCCertificateGenerator()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetRTCCertificateGenerator(std::unique_ptr<rtc::RTCCertificateGeneratorInterface> cert_generator)"
  },
  {
    "label": "SetSSLCertificateVerifier()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetSSLCertificateVerifier(std::unique_ptr<rtc::SSLCertificateVerifier> tls_cert_verifier)"
  },
  {
    "label": "SetIceTransportFactory()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetIceTransportFactory(std::unique_ptr<IceTransportFactory> factory)"
  },
  {
    "label": "SetPortAllocatorExtraFlags()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetPortAllocatorExtraFlags(uint32_t extra_flags)"
  },
  {
    "label": "AddVideoConfig()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "AddVideoConfig(VideoConfig config)"
  },
  {
    "label": "AddVideoConfig()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "AddVideoConfig(VideoConfig config, std::unique_ptr<test::FrameGeneratorInterface> generator)"
  },
  {
    "label": "AddVideoConfig()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "AddVideoConfig(VideoConfig config, CapturingDeviceIndex capturing_device_index)"
  },
  {
    "label": "SetVideoSubscription()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetVideoSubscription(VideoSubscription subscription)"
  },
  {
    "label": "SetVideoCodecs()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetVideoCodecs(std::vector<VideoCodecConfig> video_codecs)"
  },
  {
    "label": "SetAudioConfig()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetAudioConfig(AudioConfig config)"
  },
  {
    "label": "SetUseUlpFEC()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetUseUlpFEC(bool value)"
  },
  {
    "label": "SetUseFlexFEC()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetUseFlexFEC(bool value)"
  },
  {
    "label": "SetVideoEncoderBitrateMultiplier()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetVideoEncoderBitrateMultiplier(double multiplier)"
  },
  {
    "label": "SetRtcEventLogPath()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetRtcEventLogPath(std::string path)"
  },
  {
    "label": "SetAecDumpPath()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetAecDumpPath(std::string path)"
  },
  {
    "label": "SetRTCConfiguration()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetRTCConfiguration(PeerConnectionInterface::RTCConfiguration configuration)"
  },
  {
    "label": "SetRTCOfferAnswerOptions()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetRTCOfferAnswerOptions(PeerConnectionInterface::RTCOfferAnswerOptions options)"
  },
  {
    "label": "SetBitrateSettings()",
    "kind": "Method",
    "detail": "Function (PeerConfigurer*)",
    "insertText": "SetBitrateSettings(BitrateSettings bitrate_settings)"
  },
  {
    "label": "ReleaseComponents()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<InjectableComponents>)",
    "insertText": "ReleaseComponents()"
  },
  {
    "label": "ReleaseParams()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Params>)",
    "insertText": "ReleaseParams()"
  },
  {
    "label": "ReleaseConfigurableParams()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ConfigurableParams>)",
    "insertText": "ReleaseConfigurableParams()"
  },
  {
    "label": "ReleaseVideoSources()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoSource>)",
    "insertText": "ReleaseVideoSources()"
  },
  {
    "label": "components()",
    "kind": "Method",
    "detail": "Function (InjectableComponents*)",
    "insertText": "components()"
  },
  {
    "label": "params()",
    "kind": "Method",
    "detail": "Function (} Params*)",
    "insertText": "params()"
  },
  {
    "label": "configurable_params()",
    "kind": "Method",
    "detail": "Function (} ConfigurableParams*)",
    "insertText": "configurable_params()"
  }
]