[
  {
    "label": "msgpack_unpack_struct_decl()",
    "kind": "Method",
    "detail": "Function (# ifndef msgpack_unpack_func # error msgpack_unpack_func template is not defined # endif # ifndef msgpack_unpack_callback # error msgpack_unpack_callback template is not defined # endif # ifndef msgpack_unpack_struct # error msgpack_unpack_struct template is not defined # endif # ifndef msgpack_unpack_struct_decl # define)",
    "insertText": "msgpack_unpack_struct_decl(name) msgpack_unpack_struct(name) #endif #ifndef msgpack_unpack_object #error msgpack_unpack_object type is not defined #endif #ifndef msgpack_unpack_user #error msgpack_unpack_user type is not defined #endif #ifndef USE_CASE_RANGE #if !defined(_MSC_VER) #define USE_CASE_RANGE #endif #endif msgpack_unpack_struct_decl(_stack)"
  },
  {
    "label": "msgpack_unpack_struct_decl()",
    "kind": "Method",
    "detail": "Function (msgpack_unpack_object obj ; size_t count ; unsigned int ct ; msgpack_unpack_object map_key ; } ;)",
    "insertText": "msgpack_unpack_struct_decl(_context)"
  },
  {
    "label": "msgpack_unpack_struct()",
    "kind": "Method",
    "detail": "Function (msgpack_unpack_user user ; unsigned int cs ; unsigned int trail ; unsigned int top ;)",
    "insertText": "msgpack_unpack_struct(_stack)"
  },
  {
    "label": "msgpack_unpack_func()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "msgpack_unpack_func(void, _init)(msgpack_unpack_struct(_context)* ctx)"
  },
  {
    "label": "msgpack_unpack_callback()",
    "kind": "Method",
    "detail": "Function (ctx -> cs = MSGPACK_CS_HEADER ; ctx -> trail = 0 ; ctx -> top = 0 ; ctx -> stack [ 0 ] . obj =)",
    "insertText": "msgpack_unpack_callback(_root)(&ctx->user)"
  },
  {
    "label": "msgpack_unpack_func()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "msgpack_unpack_func(msgpack_unpack_object, _data)(msgpack_unpack_struct(_context)* ctx)"
  },
  {
    "label": "msgpack_unpack_func()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "msgpack_unpack_func(int, _execute)(msgpack_unpack_struct(_context)* ctx, const char* data, size_t len, size_t* off)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(len >= *off)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function ({ const unsigned char*)",
    "insertText": "p(unsigned char*)"
  },
  {
    "label": "pe()",
    "kind": "Method",
    "detail": "Function (const unsigned char* const)",
    "insertText": "pe(unsigned char*)"
  },
  {
    "label": "push_simple_value()",
    "kind": "Method",
    "detail": "Function (int ret ; # define)",
    "insertText": "push_simple_value(func) \\ ret = msgpack_unpack_callback(func)(user, &obj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ret < 0)"
  },
  {
    "label": "again_fixed_trail_if_zero()",
    "kind": "Method",
    "detail": "Function (\\ cs = _cs ; \\ goto _fixed_trail_again # define)",
    "insertText": "again_fixed_trail_if_zero(_cs, trail_len, ifzero)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(trail == 0)"
  },
  {
    "label": "msgpack_unpack_callback()",
    "kind": "Method",
    "detail": "Function (\\ ret = MSGPACK_UNPACK_NOMEM_ERROR ; \\ goto _failed ; \\ } \\ ret =)",
    "insertText": "msgpack_unpack_callback(func)(user, count_, &stack[top].obj)"
  },
  {
    "label": "NEXT_CS()",
    "kind": "Method",
    "detail": "Function (obj = stack [ top ] . obj ; goto _push ; } \\ stack [ top ] . ct = ct_ ; \\ stack [ top ] . count = count_ ; \\ + + top ; \\ goto _header_again # define)",
    "insertText": "NEXT_CS(p) \\ ((unsigned int)*p & 0x1f) #ifdef USE_CASE_RANGE #define SWITCH_RANGE_BEGIN switch(*p)"
  },
  {
    "label": "SWITCH_RANGE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SWITCH_RANGE(FROM, TO)"
  },
  {
    "label": "SWITCH_RANGE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SWITCH_RANGE(FROM, TO) } else if(FROM <= *p && *p <= TO)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# define SWITCH_RANGE_DEFAULT } else { # define SWITCH_RANGE_END } } # endif)",
    "insertText": "if(p == pe)"
  },
  {
    "label": "SWITCH_RANGE()",
    "kind": "Method",
    "detail": "Function (default : ret = MSGPACK_UNPACK_PARSE_ERROR ; goto _failed ; })",
    "insertText": "SWITCH_RANGE(0xa0, 0xbf) again_fixed_trail_if_zero(MSGPACK_ACS_STR_VALUE, ((unsigned int)*p & 0x1f), _str_zero)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_float, mem.f)"
  },
  {
    "label": "_msgpack_load64()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_DOUBLE : { union { uint64_t i ; double f ; } mem ;)",
    "insertText": "_msgpack_load64(uint64_t, n, &mem.i)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(TARGET_OS_IPHONE) #elif defined(__arm__) && !(__ARM_EABI__) mem.i = (mem.i & 0xFFFFFFFFUL) << 32UL | (mem.i >> 32UL)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "push_fixed_value(_double, mem.f)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_UINT_8 :)",
    "insertText": "push_fixed_value(_uint8, *(uint8_t*)n)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_uint16, tmp)"
  },
  {
    "label": "_msgpack_load32()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_UINT_32 : { uint32_t tmp ;)",
    "insertText": "_msgpack_load32(uint32_t,n,&tmp)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_uint32, tmp)"
  },
  {
    "label": "_msgpack_load64()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_UINT_64 : { uint64_t tmp ;)",
    "insertText": "_msgpack_load64(uint64_t,n,&tmp)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_uint64, tmp)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_INT_8 :)",
    "insertText": "push_fixed_value(_int8, *(int8_t*)n)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_int16, tmp)"
  },
  {
    "label": "_msgpack_load32()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_INT_32 : { int32_t tmp ;)",
    "insertText": "_msgpack_load32(int32_t,n,&tmp)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_int32, tmp)"
  },
  {
    "label": "_msgpack_load64()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_INT_64 : { int64_t tmp ;)",
    "insertText": "_msgpack_load64(int64_t,n,&tmp)"
  },
  {
    "label": "push_fixed_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_fixed_value(_int64, tmp)"
  },
  {
    "label": "again_fixed_trail_if_zero()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_FIXEXT_1 :)",
    "insertText": "again_fixed_trail_if_zero(MSGPACK_ACS_EXT_VALUE, 1+1, _ext_zero)"
  },
  {
    "label": "again_fixed_trail_if_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "again_fixed_trail_if_zero(MSGPACK_ACS_STR_VALUE, tmp, _str_zero)"
  },
  {
    "label": "_msgpack_load16()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_CS_BIN_16 : { uint16_t tmp ;)",
    "insertText": "_msgpack_load16(uint16_t,n,&tmp)"
  },
  {
    "label": "again_fixed_trail_if_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "again_fixed_trail_if_zero(MSGPACK_ACS_BIN_VALUE, tmp, _bin_zero)"
  },
  {
    "label": "again_fixed_trail_if_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "again_fixed_trail_if_zero(MSGPACK_ACS_EXT_VALUE, tmp + 1, _ext_zero)"
  },
  {
    "label": "push_variable_value()",
    "kind": "Method",
    "detail": "Function (} case MSGPACK_ACS_STR_VALUE : _str_zero :)",
    "insertText": "push_variable_value(_str, data, n, trail)"
  },
  {
    "label": "start_container()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start_container(_array, tmp, MSGPACK_CT_ARRAY_ITEM)"
  },
  {
    "label": "start_container()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start_container(_map, tmp, MSGPACK_CT_MAP_KEY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} default : ret = MSGPACK_UNPACK_PARSE_ERROR ; goto _failed ; } } _push :)",
    "insertText": "if(top == 0)"
  },
  {
    "label": "msgpack_unpack_callback()",
    "kind": "Method",
    "detail": "Function (obj = c -> obj ; - - top ; goto _push ; } goto _header_again ; case MSGPACK_CT_MAP_KEY : c -> map_key = obj ; c -> ct = MSGPACK_CT_MAP_VALUE ; goto _header_again ; case MSGPACK_CT_MAP_VALUE : ret =)",
    "insertText": "msgpack_unpack_callback(_map_item)(user, &c->obj, c->map_key, obj)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (obj = c -> obj ; - - top ; goto _push ; } c -> ct = MSGPACK_CT_MAP_KEY ; goto _header_again ; default : ret = MSGPACK_UNPACK_PARSE_ERROR ; goto _failed ; } _header_again : cs = MSGPACK_CS_HEADER ; + + p ; })",
    "insertText": "while(p != pe)"
  }
]