[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SAnimNotifyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyNode"
  },
  {
    "label": "SAnimNotifyTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyTrack"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "SNotifyEdTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotifyEdTrack"
  },
  {
    "label": "FNotifyDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNotifyDragDropOp"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNotifyMarqueeOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotifyMarqueeOperation"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FAnimNotifyPanelCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimNotifyPanelCommands"
  },
  {
    "label": "SAnimNotifyPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyPanel"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FScopedSavedNotifySelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSavedNotifySelection"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / UObjectGlobals . h \" # include \" Misc / Attribute . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Styling / AppStyle . h \" # include \" Framework / MarqueeRect . h \" # include \" SAnimTrackPanel . h \" # include \" SAnimEditorBase . h \" # include \" AssetRegistry / AssetData . h \" # include \" Framework / Commands / Commands . h \" # include \" SAnimTimingPanel . h \" # include \" EditorUndoClient . h \" # include \" AnimTimeline / AnimModel . h \" # include \" Containers / ArrayView . h \" class FSlateWindowElementList ; class SAnimNotifyNode ; class SAnimNotifyTrack ; class SBorder ; class SScrollBar ; struct Rect ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSelectionChanged, const TArray<UObject*>& ) DECLARE_DELEGATE( FOnTrackSelectionChanged ) DECLARE_DELEGATE( FOnUpdatePanel ) DECLARE_DELEGATE_RetVal( float, FOnGetScrubValue ) DECLARE_DELEGATE( FRefreshOffsetsRequest ) DECLARE_DELEGATE( FDeleteNotify ) DECLARE_DELEGATE_RetVal( bool, FOnGetIsAnimNotifySelectionValidForReplacement ) DECLARE_DELEGATE_TwoParams( FReplaceWithNotify, FString, UClass* ) DECLARE_DELEGATE_TwoParams( FReplaceWithBlueprintNotify, FString, FString ) DECLARE_DELEGATE_OneParam( FReplaceWithSyncMarker, FString ) DECLARE_DELEGATE( FDeselectAllNotifies ) DECLARE_DELEGATE_OneParam( FOnGetBlueprintNotifyData, TArray<FAssetData>& ) DECLARE_DELEGATE_OneParam( FOnGetNativeNotifyClasses, TArray<UClass*>&) DECLARE_DELEGATE_RetVal_ThreeParams(bool, FOnSnapPosition, float& , float , TArrayView<const FName>)"
  },
  {
    "label": "FNotifyMarqueeOperation()",
    "kind": "Method",
    "detail": "Function (class SAnimNotifyTrack ; class SNotifyEdTrack ; class FNotifyDragDropOp ; namespace ENotifyPasteMode { enum Type { MousePosition,OriginalTime } ; } namespace ENotifyPasteMultipleMode { enum Type { Relative,Absolute } ; } namespace ENotifyStateHandleHit { enum Type { Start,End,None } ; } struct FNotifyMarqueeOperation {)",
    "insertText": "FNotifyMarqueeOperation() : Operation(Add) , bActive(false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} enum Type { Remove,Add,Replace } Operation ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Start(const FVector2D& InStartLocation, FNotifyMarqueeOperation::Type InOperationType, TArray<TSharedPtr<SAnimNotifyNode>>& InOriginalSelection)"
  },
  {
    "label": "FMarqueeRect()",
    "kind": "Method",
    "detail": "Function (Rect =)",
    "insertText": "FMarqueeRect(InStartLocation)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (Operation = InOperationType ; OriginalSelection = InOriginalSelection ; } void)",
    "insertText": "End()"
  },
  {
    "label": "FMarqueeRect()",
    "kind": "Method",
    "detail": "Function (Rect =)",
    "insertText": "FMarqueeRect()"
  },
  {
    "label": "OperationTypeFromMouseEvent()",
    "kind": "Method",
    "detail": "Function (} FNotifyMarqueeOperation::Type)",
    "insertText": "OperationTypeFromMouseEvent(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "FAnimNotifyPanelCommands()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimNotifyPanelCommands() : TCommands<FAnimNotifyPanelCommands>(\"AnimNotifyPanel\", NSLOCTEXT(\"Contexts\", \"AnimNotifyPanel\", \"Anim Notify Panel\"), NAME_None, FAppStyle::GetAppStyleSetName())"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FUICommandInfo> DeleteNotify ; TSharedPtr<FUICommandInfo> CopyNotifies ; TSharedPtr<FUICommandInfo> PasteNotifies ; void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SAnimNotifyPanel : public SAnimTrackPanel,public FEditorUndoClient { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimNotifyPanel ) : _Sequence() , _CurrentPosition() , _ViewInputMin() , _ViewInputMax() , _InputMin() , _InputMax() , _OnSetInputViewRange() , _OnSelectionChanged() , _OnGetScrubValue() , _OnRequestRefreshOffsets()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(class UAnimSequenceBase*, Sequence) SLATE_ARGUMENT( float, WidgetWidth ) SLATE_ATTRIBUTE( float, CurrentPosition ) SLATE_ATTRIBUTE( float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_ATTRIBUTE( float, InputMin ) SLATE_ATTRIBUTE( float, InputMax ) SLATE_EVENT( FOnSetInputViewRange, OnSetInputViewRange ) SLATE_EVENT( FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FOnGetScrubValue, OnGetScrubValue ) SLATE_EVENT( FRefreshOffsetsRequest, OnRequestRefreshOffsets ) SLATE_EVENT( FOnGetTimingNodeVisibility, OnGetTimingNodeVisibility ) SLATE_EVENT( FOnInvokeTab, OnInvokeTab ) SLATE_EVENT( FSimpleDelegate, OnNotifiesChanged ) SLATE_EVENT( FOnSnapPosition, OnSnapPosition ) SLATE_EVENT( FOnNotifyStateHandleBeingDragged, OnNotifyStateHandleBeingDragged) SLATE_EVENT( FOnNotifyNodesBeingDragged, OnNotifyNodesBeingDragged) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "SAnimNotifyPanel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAnimNotifyPanel()"
  },
  {
    "label": "SetSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequence(class UAnimSequenceBase * InSequence)"
  },
  {
    "label": "GetNewTrackName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNewTrackName()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AddTrack()"
  },
  {
    "label": "InsertTrack()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "InsertTrack(int32 TrackIndexToInsert)"
  },
  {
    "label": "DeleteTrack()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DeleteTrack(int32 TrackIndexToDelete)"
  },
  {
    "label": "CanDeleteTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteTrack(int32 TrackIndexToDelete)"
  },
  {
    "label": "OnCommitTrackName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommitTrackName(const FText& InText, ETextCommit::Type CommitInfo, int32 TrackIndexToName)"
  },
  {
    "label": "RequestUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdate()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "CalculateDraggedNodePos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalculateDraggedNodePos()"
  },
  {
    "label": "OnNotifyNodeDragStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNotifyNodeDragStarted(TArray<TSharedPtr<SAnimNotifyNode>> NotifyNodes, TSharedRef<SWidget> Decorator, const FVector2D& ScreenCursorPos, const FVector2D& ScreenNodePosition, const bool bDragOnMarker)"
  },
  {
    "label": "GetSequenceLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSequenceLength()"
  },
  {
    "label": "CopySelectedNodesToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedNodesToClipboard()"
  },
  {
    "label": "OnPasteNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteNodes(SAnimNotifyTrack* RequestTrack, float ClickTime, ENotifyPasteMode::Type PasteMode, ENotifyPasteMultipleMode::Type MultiplePasteType)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "RefreshMarqueeSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshMarqueeSelectedNodes(const FGeometry& PanelGeo)"
  },
  {
    "label": "OnNotifyObjectChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNotifyObjectChanged(UObject* EditorBaseObj, bool bRebuild)"
  },
  {
    "label": "IsNotifySelectionValidForReplacement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotifySelectionValidForReplacement()"
  },
  {
    "label": "OnReplaceSelectedWithNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceSelectedWithNotify(FString NewNotifyName, UClass* NewNotifyClass)"
  },
  {
    "label": "OnReplaceSelectedWithNotifyBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceSelectedWithNotifyBlueprint(FString NewBlueprintNotifyName, FString NewBlueprintNotifyClass)"
  },
  {
    "label": "OnReplaceSelectedWithSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceSelectedWithSyncMarker(FString NewBlueprintNotifyName)"
  },
  {
    "label": "HandleObjectsSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsSelected(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "RequestRefresh()",
    "kind": "Method",
    "detail": "Function (} private : struct FScopedSavedNotifySelection ; TWeakPtr<FAnimModel> WeakModel ; TSharedPtr<SBorder> PanelArea ; TSharedPtr<SScrollBar> NotifyTrackScrollBar ; class UAnimSequenceBase* Sequence ; float WidgetWidth ; TAttribute<float> CurrentPosition ; FOnSelectionChanged OnSelectionChanged ; FOnGetScrubValue OnGetScrubValue ; FOnGetTimingNodeVisibility OnGetTimingNodeVisibility ; FNotifyMarqueeOperation Marquee ; FRefreshOffsetsRequest OnRequestRefreshOffsets ; float CurrentDragXPosition ; TArray<TSharedPtr<SAnimNotifyTrack>> NotifyAnimTracks ; TArray<TSharedPtr<SNotifyEdTrack>> NotifyEditorTracks ; void)",
    "insertText": "RequestRefresh()"
  },
  {
    "label": "RefreshNotifyTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNotifyTracks()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "OnDeletePressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeletePressed()"
  },
  {
    "label": "DeleteSelectedNodeObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedNodeObjects()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "DeselectAllNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAllNotifies()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "PopulateNotifyBlueprintClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateNotifyBlueprintClasses(TArray<FString>& InOutAllowedClasses)"
  },
  {
    "label": "OnGetNotifyBlueprintData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetNotifyBlueprintData(TArray<FAssetData>& OutNotifyData, TArray<FString>* InOutAllowedClassNames)"
  },
  {
    "label": "OnGetNativeNotifyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetNativeNotifyData(TArray<UClass*>& OutClasses, UClass* NotifyOutermost, TArray<FString>* OutAllowedBlueprintClassNames)"
  },
  {
    "label": "OnNotifyTrackScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNotifyTrackScrolled(float InScrollOffsetFraction)"
  },
  {
    "label": "InputViewRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InputViewRangeChanged(float ViewMin, float ViewMax)"
  }
]