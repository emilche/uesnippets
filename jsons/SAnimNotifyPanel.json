[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SAnimNotifyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyNode"
  },
  {
    "label": "SAnimNotifyTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyTrack"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "SAnimNotifyNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyNode"
  },
  {
    "label": "SAnimNotifyTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyTrack"
  },
  {
    "label": "SNotifyEdTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotifyEdTrack"
  },
  {
    "label": "FNotifyDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNotifyDragDropOp"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNotifyMarqueeOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotifyMarqueeOperation"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FAnimNotifyPanelCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimNotifyPanelCommands"
  },
  {
    "label": "SAnimNotifyPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimNotifyPanel"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FScopedSavedNotifySelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSavedNotifySelection"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "array",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "array"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "SetSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequence(class UAnimSequenceBase *\tInSequence)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "AddTrack()"
  },
  {
    "label": "InsertTrack()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "InsertTrack(int32 TrackIndexToInsert)"
  },
  {
    "label": "DeleteTrack()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "DeleteTrack(int32 TrackIndexToDelete)"
  },
  {
    "label": "CanDeleteTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteTrack(int32 TrackIndexToDelete)"
  },
  {
    "label": "OnCommitTrackName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommitTrackName(const FText& InText, ETextCommit::Type CommitInfo, int32 TrackIndexToName)"
  },
  {
    "label": "RequestUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdate()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "OnNotifyNodeDragStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNotifyNodeDragStarted(TArray<TSharedPtr<SAnimNotifyNode>> NotifyNodes, TSharedRef<SWidget> Decorator, const FVector2D& ScreenCursorPos, const FVector2D& ScreenNodePosition, const bool bDragOnMarker)"
  },
  {
    "label": "OnPasteNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteNodes(SAnimNotifyTrack* RequestTrack, float ClickTime, ENotifyPasteMode::Type PasteMode, ENotifyPasteMultipleMode::Type MultiplePasteType)"
  },
  {
    "label": "RefreshMarqueeSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshMarqueeSelectedNodes(const FGeometry& PanelGeo)"
  },
  {
    "label": "OnNotifyObjectChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNotifyObjectChanged(UObject* EditorBaseObj, bool bRebuild)"
  },
  {
    "label": "IsNotifySelectionValidForReplacement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotifySelectionValidForReplacement()"
  },
  {
    "label": "OnReplaceSelectedWithNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceSelectedWithNotify(FString NewNotifyName, UClass* NewNotifyClass)"
  },
  {
    "label": "OnReplaceSelectedWithNotifyBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceSelectedWithNotifyBlueprint(FString NewBlueprintNotifyName, FString NewBlueprintNotifyClass)"
  },
  {
    "label": "OnReplaceSelectedWithSyncMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceSelectedWithSyncMarker(FString NewBlueprintNotifyName)"
  },
  {
    "label": "HandleObjectsSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectsSelected(const TArray<UObject*>& InObjects)"
  },
  {
    "label": "RequestRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefresh()"
  },
  {
    "label": "RefreshNotifyTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNotifyTracks()"
  },
  {
    "label": "OnDeletePressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeletePressed()"
  },
  {
    "label": "DeleteSelectedNodeObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedNodeObjects()"
  },
  {
    "label": "OnTrackSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTrackSelectionChanged()"
  },
  {
    "label": "DeselectAllNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAllNotifies()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "PopulateNotifyBlueprintClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateNotifyBlueprintClasses(TArray<FString>& InOutAllowedClasses)"
  },
  {
    "label": "OnGetNotifyBlueprintData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetNotifyBlueprintData(TArray<FAssetData>& OutNotifyData, TArray<FString>* InOutAllowedClassNames)"
  },
  {
    "label": "OnGetNativeNotifyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetNativeNotifyData(TArray<UClass*>& OutClasses, UClass* NotifyOutermost, TArray<FString>* OutAllowedBlueprintClassNames)"
  },
  {
    "label": "OnNotifyTrackScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNotifyTrackScrolled(float InScrollOffsetFraction)"
  }
]