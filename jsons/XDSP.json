[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<windef . h> # include<math . h> # if)",
    "insertText": "defined(_XBOX) #include <ppcintrinsics.h> #else #include <emmintrin.h> #endif #if !defined(DSPASSERT) #if DBG #define DSPASSERT(exp) if (!(exp))"
  },
  {
    "label": "OutputDebugStringA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputDebugStringA(\"XDSP ASSERT: \" #exp \", {\" __FUNCTION__ \"}\\n\")"
  },
  {
    "label": "__debugbreak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__debugbreak()"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "DSPASSERT(exp) __assume(exp) #endif #endif #if !defined(ISPOWEROF2) #define ISPOWEROF2(n) ( ((n)&((n)-1)) == 0 && (n) != 0)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "warning(push) #pragma warning(disable: 4328 4640)"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (typedef XVECTOR& XVECTORREF ; typedef const XVECTOR& XVECTORREFC ; void)",
    "insertText": "vmulComplex(__out XVECTORREF rResult, __out XVECTORREF iResult, __in XVECTORREFC r1, __in XVECTORREFC i1, __in XVECTORREFC r2, __in XVECTORREFC i2)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vi1i2 =)",
    "insertText": "_mm_mul_ps(i1, i2)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vr1r2 =)",
    "insertText": "_mm_mul_ps(r1, r2)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vr1i2 =)",
    "insertText": "_mm_mul_ps(r1, i2)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vr2i1 =)",
    "insertText": "_mm_mul_ps(r2, i1)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (rResult =)",
    "insertText": "_mm_sub_ps(vr1r2, vi1i2)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (iResult =)",
    "insertText": "_mm_add_ps(vr1i2, vr2i1)"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vmulComplex(__inout XVECTORREF r1, __inout XVECTORREF i1, __in XVECTORREFC r2, __in XVECTORREFC i2)"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ButterflyDIT4_1(__inout XVECTORREF r1, __inout XVECTORREF i1)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (const XVECTOR vDFT4SignBits1 = { 0 . 0 f,- 0 . 0 f,0 . 0 f,- 0 . 0 f } ; const XVECTOR vDFT4SignBits2 = { 0 . 0 f,0 . 0 f,- 0 . 0 f,- 0 . 0 f } ; const XVECTOR vDFT4SignBits3 = { 0 . 0 f,- 0 . 0 f,- 0 . 0 f,0 . 0 f } ; XVECTOR rTemp =)",
    "insertText": "_mm_add_ps(_mm_shuffle_ps(r1, r1, _MM_SHUFFLE(1, 1, 0, 0)), _mm_xor_ps(_mm_shuffle_ps(r1, r1, _MM_SHUFFLE(3, 3, 2, 2)), vDFT4SignBits1))"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR iTemp =)",
    "insertText": "_mm_add_ps(_mm_shuffle_ps(i1, i1, _MM_SHUFFLE(1, 1, 0, 0)), _mm_xor_ps(_mm_shuffle_ps(i1, i1, _MM_SHUFFLE(3, 3, 2, 2)), vDFT4SignBits1))"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR rZrWiZiW =)",
    "insertText": "_mm_shuffle_ps(rTemp, iTemp, _MM_SHUFFLE(3, 2, 3, 2))"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR rZiWrZiW =)",
    "insertText": "_mm_shuffle_ps(rZrWiZiW, rZrWiZiW, _MM_SHUFFLE(3, 0, 3, 0))"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR iZrWiZrW =)",
    "insertText": "_mm_shuffle_ps(rZrWiZiW, rZrWiZiW, _MM_SHUFFLE(1, 2, 1, 2))"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (r1 =)",
    "insertText": "_mm_add_ps(_mm_shuffle_ps(rTemp, rTemp, _MM_SHUFFLE(1, 0, 1, 0)), _mm_xor_ps(rZiWrZiW, vDFT4SignBits2))"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (i1 =)",
    "insertText": "_mm_add_ps(_mm_shuffle_ps(iTemp, iTemp, _MM_SHUFFLE(1, 0, 1, 0)), _mm_xor_ps(iZrWiZrW, vDFT4SignBits3))"
  },
  {
    "label": "ButterflyDIT4_4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ButterflyDIT4_4(__inout XVECTORREF r0, __inout XVECTORREF r1, __inout XVECTORREF r2, __inout XVECTORREF r3, __inout XVECTORREF i0, __inout XVECTORREF i1, __inout XVECTORREF i2, __inout XVECTORREF i3, __in_ecount(uStride*4) const XVECTOR* __restrict pUnityTableReal, __in_ecount(uStride*4) const XVECTOR* __restrict pUnityTableImaginary, const UINT32 uStride, const BOOL fLast)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pUnityTableReal != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pUnityTableImaginary != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT((UINT_PTR)pUnityTableReal % 16 == 0)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT((UINT_PTR)pUnityTableImaginary % 16 == 0)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(ISPOWEROF2(uStride))"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR rTemp0,rTemp1,rTemp2,rTemp3,rTemp4,rTemp5,rTemp6,rTemp7 ; XVECTOR iTemp0,iTemp1,iTemp2,iTemp3,iTemp4,iTemp5,iTemp6,iTemp7 ; rTemp0 =)",
    "insertText": "_mm_add_ps(r0, r2)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (iTemp0 =)",
    "insertText": "_mm_add_ps(i0, i2)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (rTemp2 =)",
    "insertText": "_mm_add_ps(r1, r3)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (iTemp2 =)",
    "insertText": "_mm_add_ps(i1, i3)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (rTemp1 =)",
    "insertText": "_mm_sub_ps(r0, r2)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (iTemp1 =)",
    "insertText": "_mm_sub_ps(i0, i2)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (rTemp3 =)",
    "insertText": "_mm_sub_ps(r1, r3)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (iTemp3 =)",
    "insertText": "_mm_sub_ps(i1, i3)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (rTemp4 =)",
    "insertText": "_mm_add_ps(rTemp0, rTemp2)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (iTemp4 =)",
    "insertText": "_mm_add_ps(iTemp0, iTemp2)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (rTemp5 =)",
    "insertText": "_mm_add_ps(rTemp1, iTemp3)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (iTemp5 =)",
    "insertText": "_mm_sub_ps(iTemp1, rTemp3)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (rTemp6 =)",
    "insertText": "_mm_sub_ps(rTemp0, rTemp2)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (iTemp6 =)",
    "insertText": "_mm_sub_ps(iTemp0, iTemp2)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (rTemp7 =)",
    "insertText": "_mm_sub_ps(rTemp1, iTemp3)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (iTemp7 =)",
    "insertText": "_mm_add_ps(iTemp1, rTemp3)"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vmulComplex(rTemp5, iTemp5, pUnityTableReal[uStride], pUnityTableImaginary[uStride])"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vmulComplex(rTemp6, iTemp6, pUnityTableReal[uStride*2], pUnityTableImaginary[uStride*2])"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vmulComplex(rTemp7, iTemp7, pUnityTableReal[uStride*3], pUnityTableImaginary[uStride*3])"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(rTemp4, iTemp4)"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(rTemp5, iTemp5)"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(rTemp6, iTemp6)"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(rTemp7, iTemp7)"
  },
  {
    "label": "FFT4()",
    "kind": "Method",
    "detail": "Function (} r0 = rTemp4 ; i0 = iTemp4 ; r1 = rTemp5 ; i1 = iTemp5 ; r2 = rTemp6 ; i2 = iTemp6 ; r3 = rTemp7 ; i3 = iTemp7 ; } void)",
    "insertText": "FFT4(__inout_ecount(uCount) XVECTOR* __restrict pReal, __inout_ecount(uCount) XVECTOR* __restrict pImaginary, const UINT32 uCount=1)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pReal != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pImaginary != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT((UINT_PTR)pReal % 16 == 0)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT((UINT_PTR)pImaginary % 16 == 0)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(ISPOWEROF2(uCount))"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(pReal[uIndex], pImaginary[uIndex])"
  },
  {
    "label": "FFT8()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FFT8(__inout_ecount(uCount*2) XVECTOR* __restrict pReal, __inout_ecount(uCount*2) XVECTOR* __restrict pImaginary, const UINT32 uCount=1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (XVECTOR wr1 = { 1 . 0 f,0 . 7 0 7 1 0 6 7 7 f,0 . 0 f,- 0 . 7 0 7 1 0 6 7 7 f } ; XVECTOR wi1 = { 0 . 0 f,- 0 . 7 0 7 1 0 6 7 7 f,- 1 . 0 f,- 0 . 7 0 7 1 0 6 7 7 f } ; XVECTOR wr2 = { - 1 . 0 f,- 0 . 7 0 7 1 0 6 7 7 f,0 . 0 f,0 . 7 0 7 1 0 6 7 7 f } ; XVECTOR wi2 = { 0 . 0 f,0 . 7 0 7 1 0 6 7 7 f,1 . 0 f,0 . 7 0 7 1 0 6 7 7 f } ;)",
    "insertText": "for(UINT32 uIndex=0; uIndex<uCount; ++uIndex)"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR* __restrict pR = pReal + uIndex* 2 ; XVECTOR* __restrict pI = pImaginary + uIndex* 2 ; XVECTOR oddsR =)",
    "insertText": "_mm_shuffle_ps(pR[0], pR[1], _MM_SHUFFLE(3, 1, 3, 1))"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR evensR =)",
    "insertText": "_mm_shuffle_ps(pR[0], pR[1], _MM_SHUFFLE(2, 0, 2, 0))"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR oddsI =)",
    "insertText": "_mm_shuffle_ps(pI[0], pI[1], _MM_SHUFFLE(3, 1, 3, 1))"
  },
  {
    "label": "_mm_shuffle_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR evensI =)",
    "insertText": "_mm_shuffle_ps(pI[0], pI[1], _MM_SHUFFLE(2, 0, 2, 0))"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(oddsR, oddsI)"
  },
  {
    "label": "ButterflyDIT4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_1(evensR, evensI)"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (XVECTOR r,i ;)",
    "insertText": "vmulComplex(r, i, oddsR, oddsI, wr1, wi1)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (pR [ 0 ] =)",
    "insertText": "_mm_add_ps(evensR, r)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (pI [ 0 ] =)",
    "insertText": "_mm_add_ps(evensI, i)"
  },
  {
    "label": "vmulComplex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vmulComplex(r, i, oddsR, oddsI, wr2, wi2)"
  },
  {
    "label": "FFT16()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FFT16(__inout_ecount(uCount*4) XVECTOR* __restrict pReal, __inout_ecount(uCount*4) XVECTOR* __restrict pImaginary, const UINT32 uCount=1)"
  },
  {
    "label": "ButterflyDIT4_4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_4(pReal[uIndex*4], pReal[uIndex*4 + 1], pReal[uIndex*4 + 2], pReal[uIndex*4 + 3], pImaginary[uIndex*4], pImaginary[uIndex*4 + 1], pImaginary[uIndex*4 + 2], pImaginary[uIndex*4 + 3], aUnityTableReal, aUnityTableImaginary, 1, TRUE)"
  },
  {
    "label": "FFT()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FFT(__inout_ecount((uLength*uCount)/4) XVECTOR* __restrict pReal, __inout_ecount((uLength*uCount)/4) XVECTOR* __restrict pImaginary, __in_ecount(uLength*uCount) const XVECTOR* __restrict pUnityTable, const UINT32 uLength, const UINT32 uCount=1)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pUnityTable != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT((UINT_PTR)pUnityTable % 16 == 0)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uLength > 16)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(ISPOWEROF2(uLength))"
  },
  {
    "label": "pUnityTable()",
    "kind": "Method",
    "detail": "Function (const XVECTOR* __restrict pUnityTableReal = pUnityTable ; const XVECTOR* __restrict pUnityTableImaginary =)",
    "insertText": "pUnityTable(uLength>>2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const UINT32 uTotal = uCount* uLength ; const UINT32 uTotal_vectors = uTotal>> 2 ; const UINT32 uStage_vectors = uLength>> 2 ; const UINT32 uStage_vectors_mask = uStage_vectors - 1 ; const UINT32 uStride = uLength>> 4 ; const UINT32 uStrideMask = uStride - 1 ; const UINT32 uStride2 = uStride* 2 ; const UINT32 uStride3 = uStride* 3 ; const UINT32 uStrideInvMask = ~ uStrideMask ;)",
    "insertText": "for(UINT32 uIndex=0; uIndex<(uTotal_vectors>>2); ++uIndex)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (const UINT32)",
    "insertText": "n((uIndex & uStrideInvMask) << 2) + (uIndex & uStrideMask)"
  },
  {
    "label": "ButterflyDIT4_4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ButterflyDIT4_4(pReal[n], pReal[n + uStride], pReal[n + uStride2], pReal[n + uStride3], pImaginary[n ], pImaginary[n + uStride], pImaginary[n + uStride2], pImaginary[n + uStride3], pUnityTableReal + (n & uStage_vectors_mask), pUnityTableImaginary + (n & uStage_vectors_mask), uStride, FALSE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(uLength > 16*4)"
  },
  {
    "label": "FFT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT(pReal, pImaginary, pUnityTable+(uLength>>1), uLength>>2, uCount*4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(uLength == 16*4)"
  },
  {
    "label": "FFT16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT16(pReal, pImaginary, uCount*4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(uLength == 8*4)"
  },
  {
    "label": "FFT8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT8(pReal, pImaginary, uCount*4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(uLength == 4*4)"
  },
  {
    "label": "FFT4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT4(pReal, pImaginary, uCount*4)"
  },
  {
    "label": "FFTInitializeUnityTable()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FFTInitializeUnityTable(__out_ecount(uLength) XVECTOR* __restrict pUnityTable, UINT32 uLength)"
  },
  {
    "label": "pfUnityTable()",
    "kind": "Method",
    "detail": "Function (FLOAT32* __restrict)",
    "insertText": "pfUnityTable(FLOAT32* __restrict)"
  },
  {
    "label": "uIndex()",
    "kind": "Method",
    "detail": "Function (UINT32)",
    "insertText": "uIndex(i*uLength)"
  },
  {
    "label": "cosf()",
    "kind": "Method",
    "detail": "Function (pfUnityTable [ uIndex ] =)",
    "insertText": "cosf(FLOAT32(i)*FLOAT32(j)*flStep)"
  },
  {
    "label": "sinf()",
    "kind": "Method",
    "detail": "Function (pfUnityTable [ uIndex + uLength* 4 ] = -)",
    "insertText": "sinf(FLOAT32(i)*FLOAT32(j)*flStep)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } pfUnityTable + = uLength* 8 ; })",
    "insertText": "while(uLength > 16)"
  },
  {
    "label": "FFTUnswizzle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FFTUnswizzle(__out_ecount((1<<uLog2Length)/4) XVECTOR* __restrict pOutput, __in_ecount((1<<uLog2Length)/4) const XVECTOR* __restrict pInput, const UINT32 uLog2Length)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pOutput != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pInput != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uLog2Length >= 2)"
  },
  {
    "label": "pfOutput()",
    "kind": "Method",
    "detail": "Function (FLOAT32* __restrict)",
    "insertText": "pfOutput(FLOAT32* __restrict)"
  },
  {
    "label": "pfInput()",
    "kind": "Method",
    "detail": "Function (const FLOAT32* __restrict)",
    "insertText": "pfInput(const FLOAT32* __restrict)"
  },
  {
    "label": "UINT32()",
    "kind": "Method",
    "detail": "Function (const UINT32 uLength =)",
    "insertText": "UINT32(1 << uLog2Length)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (UINT32 n = uIndex ;)",
    "insertText": "n((n & 0xcccccccc) >> 2 ) | ( (n & 0x33333333) << 2)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xf0f0f0f0) >> 4 ) | ( (n & 0x0f0f0f0f) << 4)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xff00ff00) >> 8 ) | ( (n & 0x00ff00ff) << 8)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xffff0000) >> 16 ) | ( (n & 0x0000ffff) << 16)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n(32 - uLog2Length)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (pfOutput [ n ] = pfInput [ uIndex ] ; } } else {)",
    "insertText": "for(UINT32 uIndex=0; uIndex<uLength; ++uIndex)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (UINT32)",
    "insertText": "n(uIndex>>3)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n(32 - (uLog2Length-3))"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((uIndex & 0x7) << (uLog2Length - 3))"
  },
  {
    "label": "FFTPolar()",
    "kind": "Method",
    "detail": "Function (pfOutput [ n ] = pfInput [ uIndex ] ; } } } void)",
    "insertText": "FFTPolar(__out_ecount(uLength/4) XVECTOR* __restrict pOutput, __in_ecount(uLength/4) const XVECTOR* __restrict pInputReal, __in_ecount(uLength/4) const XVECTOR* __restrict pInputImaginary, const UINT32 uLength)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pInputReal != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(pInputImaginary != NULL)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uLength >= 4)"
  },
  {
    "label": "_mm_set_ps1()",
    "kind": "Method",
    "detail": "Function (FLOAT32 flOneOverLength = 1 . 0 f / uLength ; XVECTOR vOneOverLength =)",
    "insertText": "_mm_set_ps1(flOneOverLength)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vReal =)",
    "insertText": "_mm_mul_ps(pInputReal[uIndex], vOneOverLength)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vImaginary =)",
    "insertText": "_mm_mul_ps(pInputImaginary[uIndex], vOneOverLength)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vRR =)",
    "insertText": "_mm_mul_ps(vReal, vReal)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vII =)",
    "insertText": "_mm_mul_ps(vImaginary, vImaginary)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vRRplusII =)",
    "insertText": "_mm_add_ps(vRR, vII)"
  },
  {
    "label": "_mm_sqrt_ps()",
    "kind": "Method",
    "detail": "Function (XVECTOR vTotal =)",
    "insertText": "_mm_sqrt_ps(vRRplusII)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (pOutput [ uIndex ] =)",
    "insertText": "_mm_add_ps(vTotal, vTotal)"
  },
  {
    "label": "Deinterleave()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Deinterleave(__out_ecount((uChannelCount*uFrameCount)/4) XVECTOR* __restrict pOutput, __in_ecount((uChannelCount*uFrameCount)/4) const XVECTOR* __restrict pInput, const UINT32 uChannelCount, const UINT32 uFrameCount)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uChannelCount > 1)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uFrameCount > 0)"
  },
  {
    "label": "Interleave()",
    "kind": "Method",
    "detail": "Function (pfOutput [ uChannel* uFrameCount + uFrame ] = pfInput [ uFrame* uChannelCount + uChannel ] ; } } } void)",
    "insertText": "Interleave(__out_ecount((uChannelCount*uFrameCount)/4) XVECTOR* __restrict pOutput, __in_ecount((uChannelCount*uFrameCount)/4) const XVECTOR* __restrict pInput, const UINT32 uChannelCount, const UINT32 uFrameCount)"
  },
  {
    "label": "FFTInterleaved()",
    "kind": "Method",
    "detail": "Function (pfOutput [ uFrame* uChannelCount + uChannel ] = pfInput [ uChannel* uFrameCount + uFrame ] ; } } } void)",
    "insertText": "FFTInterleaved(__inout_ecount((1<<uLog2Length*uChannelCount)/4) XVECTOR* __restrict pReal, __out_ecount((1<<uLog2Length*uChannelCount)/4) XVECTOR* __restrict pImaginary, __in_ecount(1<<uLog2Length) const XVECTOR* __restrict pUnityTable, const UINT32 uChannelCount, const UINT32 uLog2Length)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uChannelCount > 0 && uChannelCount <= 6)"
  },
  {
    "label": "DSPASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DSPASSERT(uLog2Length >= 2 && uLog2Length <= 9)"
  },
  {
    "label": "Deinterleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinterleave(vRealTemp, pReal, uChannelCount, uLength)"
  },
  {
    "label": "CopyMemory()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CopyMemory(vRealTemp, pReal, (uLength>>2)*sizeof(XVECTOR))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(UINT32 u=0; u<uChannelCount*(uLength>>2); u++)"
  },
  {
    "label": "_mm_setzero_ps()",
    "kind": "Method",
    "detail": "Function (vImaginaryTemp [ u ] =)",
    "insertText": "_mm_setzero_ps()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(uLength > 16)"
  },
  {
    "label": "FFT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT(&vRealTemp[uChannel*(uLength>>2)], &vImaginaryTemp[uChannel*(uLength>>2)], pUnityTable, uLength)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(uLength == 16)"
  },
  {
    "label": "FFT16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT16(&vRealTemp[uChannel*(uLength>>2)], &vImaginaryTemp[uChannel*(uLength>>2)])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(uLength == 8)"
  },
  {
    "label": "FFT8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT8(&vRealTemp[uChannel*(uLength>>2)], &vImaginaryTemp[uChannel*(uLength>>2)])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(uLength == 4)"
  },
  {
    "label": "FFT4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFT4(&vRealTemp[uChannel*(uLength>>2)], &vImaginaryTemp[uChannel*(uLength>>2)])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(UINT32 uChannel=0; uChannel<uChannelCount; ++uChannel)"
  },
  {
    "label": "FFTUnswizzle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFTUnswizzle(&pReal[uChannel*(uLength>>2)], &vRealTemp[uChannel*(uLength>>2)], uLog2Length)"
  },
  {
    "label": "FFTUnswizzle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFTUnswizzle(&pImaginary[uChannel*(uLength>>2)], &vImaginaryTemp[uChannel*(uLength>>2)], uLog2Length)"
  },
  {
    "label": "IFFTDeinterleaved()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "IFFTDeinterleaved(__inout_ecount((1<<uLog2Length*uChannelCount)/4) XVECTOR* __restrict pReal, __out_ecount((1<<uLog2Length*uChannelCount)/4) XVECTOR* __restrict pImaginary, __in_ecount(1<<uLog2Length) const XVECTOR* __restrict pUnityTable, const UINT32 uChannelCount, const UINT32 uLog2Length)"
  },
  {
    "label": "_mm_set_ps1()",
    "kind": "Method",
    "detail": "Function (const XVECTOR vRnp =)",
    "insertText": "_mm_set_ps1(1.0f/uLength)"
  },
  {
    "label": "_mm_set_ps1()",
    "kind": "Method",
    "detail": "Function (const XVECTOR vRnm =)",
    "insertText": "_mm_set_ps1(-1.0f/uLength)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (vRealTemp [ u ] =)",
    "insertText": "_mm_mul_ps(pReal[u], vRnp)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (vImaginaryTemp [ u ] =)",
    "insertText": "_mm_mul_ps(pImaginary[u], vRnm)"
  },
  {
    "label": "FFTUnswizzle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFTUnswizzle(&vImaginaryTemp[uChannel*(uLength>>2)], &vRealTemp[uChannel*(uLength>>2)], uLog2Length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(uChannelCount > 1)"
  },
  {
    "label": "Interleave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Interleave(pReal, vImaginaryTemp, uChannelCount, uLength)"
  },
  {
    "label": "CopyMemory()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CopyMemory(pReal, vImaginaryTemp, (uLength>>2)*sizeof(XVECTOR))"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} } # pragma)",
    "insertText": "warning(pop)"
  }
]