[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___UTILITY_MOVE_H # define _LIBCPP___UTILITY_MOVE_H # include<__config> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _Tp> _LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR typename remove_reference<_Tp>::type&& move(_Tp&& __t)"
  },
  {
    "label": "_Up()",
    "kind": "Method",
    "detail": "Function (typedef _LIBCPP_NODEBUG remove_reference<_Tp>::type _Up ; return static_cast<)",
    "insertText": "_Up(__t)"
  },
  {
    "label": "move_if_noexcept()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> using __move_if_noexcept_result_t = conditional<! is_nothrow_move_constructible<_Tp>::value&& is_copy_constructible<_Tp>::value,const _Tp&,_Tp&&>::type ; template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 __move_if_noexcept_result_t<_Tp>)",
    "insertText": "move_if_noexcept(_Tp& __x)"
  }
]