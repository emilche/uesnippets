[
  {
    "label": "FMovieScenePreAnimatedMaterialParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePreAnimatedMaterialParameters"
  },
  {
    "label": "TPreAnimatedMaterialTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedMaterialTraits"
  },
  {
    "label": "TMovieSceneMaterialSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMovieSceneMaterialSystem"
  },
  {
    "label": "FMaterialGroupingPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialGroupingPolicy"
  },
  {
    "label": "TApplyMaterialSwitchers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TApplyMaterialSwitchers"
  },
  {
    "label": "TInitializeBoundMaterials",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInitializeBoundMaterials"
  },
  {
    "label": "TReinitializeBoundMaterials",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TReinitializeBoundMaterials"
  },
  {
    "label": "TAddBoundMaterialMutationImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAddBoundMaterialMutationImpl"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" EntitySystem / MovieScenePreAnimatedStateSystem . h \" # include \" EntitySystem / MovieSceneEntityMutations . h \" # include \" Materials / MaterialInstance . h \" # include \" Materials / MaterialInstanceDynamic . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / MovieSceneEntitySystemRunner . h \" # include \" EntitySystem / MovieSceneComponentTypeInfo . h \" # include \" EntitySystem / MovieSceneCachedEntityFilterResult . h \" # include \" EntitySystem / MovieSceneEntityGroupingSystem . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedObjectStorage . h \" # include \" MovieSceneTracksComponentTypes . h \" # include \" UObject / SoftObjectPtr . h \" # include \" MovieSceneMaterialSystem . generated . h \")",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Reinitialize Bound Materials\"), MovieSceneEval_ReinitializeBoundMaterials, STATGROUP_MovieSceneECS, MOVIESCENETRACKS_API)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() MOVIESCENETRACKS_API UMaterialInterface* GetMaterial()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(UMaterialInterface* InMaterial)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::MovieScene { template<AccessorType,. . . RequiredComponents> struct TPreAnimatedMaterialTraits : FBoundObjectPreAnimatedStateTraits { using KeyType = AccessorType::KeyType ; using StorageType = FMovieScenePreAnimatedMaterialParameters ;)",
    "insertText": "static_assert(THasAddReferencedObjectForComponent<StorageType>::Value, \"StorageType is not correctly exposed to the reference graph!\")"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (FMovieScenePreAnimatedMaterialParameters)",
    "insertText": "CachePreAnimatedValue(typename TCallTraits<RequiredComponents>::ParamType... InRequiredComponents)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AccessorType Accessor { InRequiredComponents . . . } ; FMovieScenePreAnimatedMaterialParameters Parameters ;)",
    "insertText": "if(Accessor)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (Parameters .)",
    "insertText": "SetMaterial(Accessor.GetMaterial())"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} return Parameters ; } void)",
    "insertText": "RestorePreAnimatedValue(const KeyType& InKey, const FMovieScenePreAnimatedMaterialParameters& PreAnimatedValue, const FRestoreStateParams& Params)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (Accessor .)",
    "insertText": "SetMaterial(PreAnimatedValue.GetMaterial())"
  },
  {
    "label": "OnLink()",
    "kind": "Method",
    "detail": "Function (} } } } ; template<AccessorType,. . . RequiredComponents> using TPreAnimatedMaterialParameterTraits = TPreAnimatedMaterialTraits<AccessorType,RequiredComponents . . .> ; template<AccessorType,. . . RequiredComponents> class TMovieSceneMaterialSystem { public : using MaterialSwitcherStorageType = TPreAnimatedStateStorage<TPreAnimatedMaterialTraits<AccessorType,RequiredComponents . . .>> ; using MaterialParameterStorageType = TPreAnimatedStateStorage<TPreAnimatedMaterialParameterTraits<AccessorType,RequiredComponents . . .>> ; TSharedPtr<MaterialSwitcherStorageType> MaterialSwitcherStorage ; TSharedPtr<MaterialParameterStorageType> MaterialParameterStorage ; void)",
    "insertText": "OnLink(UMovieSceneEntitySystemLinker* Linker, TComponentTypeID<RequiredComponents>... InRequiredComponents)"
  },
  {
    "label": "OnUnlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnlink(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRun(UMovieSceneEntitySystemLinker* Linker, TComponentTypeID<RequiredComponents>... InRequiredComponents, FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePreAnimatedState(UMovieSceneEntitySystemLinker* Linker, TComponentTypeID<RequiredComponents>... InRequiredComponents, const IMovieScenePreAnimatedStateSystemInterface::FPreAnimationParameters& InParameters)"
  },
  {
    "label": "OnPostSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSpawn(UMovieSceneEntitySystemLinker* InLinker, TComponentTypeID<RequiredComponents>... InRequiredComponents)"
  },
  {
    "label": "InitializeGroupKeys()",
    "kind": "Method",
    "detail": "Function (protected : struct FMaterialGroupingPolicy { using GroupKeyType = TTuple<RequiredComponents . . .,FMaterialParameterInfo> ; void)",
    "insertText": "InitializeGroupKeys(TEntityGroupingHandlerBase<FMaterialGroupingPolicy>& Handler, FEntityGroupBuilder* Builder, FEntityAllocationIteratorItem Item, FReadEntityIDs EntityIDs, TWrite<FEntityGroupID> GroupIDs, TRead<RequiredComponents>... Components)"
  },
  {
    "label": "GetAllocationType()",
    "kind": "Method",
    "detail": "Function (const FComponentMask& AllocationType = Item .)",
    "insertText": "GetAllocationType()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTracksComponentTypes* TracksComponents =)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TComponentTypeID<FName> ParameterName ;)",
    "insertText": "if(AllocationType.Contains(TracksComponents->ScalarParameterName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParameterName = TracksComponents -> ScalarParameterName ; } else)",
    "insertText": "if(AllocationType.Contains(TracksComponents->VectorParameterName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParameterName = TracksComponents -> VectorParameterName ; } else)",
    "insertText": "if(AllocationType.Contains(TracksComponents->ColorParameterName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParameterName = TracksComponents -> ColorParameterName ; } TComponentTypeID<FMaterialParameterInfo> ParameterInfo ;)",
    "insertText": "if(AllocationType.Contains(TracksComponents->ScalarMaterialParameterInfo))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParameterInfo = TracksComponents -> ScalarMaterialParameterInfo ; } else)",
    "insertText": "if(AllocationType.Contains(TracksComponents->VectorMaterialParameterInfo))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ParameterInfo = TracksComponents -> VectorMaterialParameterInfo ; } else)",
    "insertText": "if(AllocationType.Contains(TracksComponents->ColorMaterialParameterInfo))"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (ParameterInfo = TracksComponents -> ColorMaterialParameterInfo ; } const FEntityAllocation* Allocation = Item .)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Allocation ->)",
    "insertText": "Num()"
  },
  {
    "label": "TryReadComponents()",
    "kind": "Method",
    "detail": "Function (TReadOptional<FName> ParameterNames = ParameterName ? Allocation ->)",
    "insertText": "TryReadComponents(ParameterName) : TReadOptional<FName>()"
  },
  {
    "label": "TryReadComponents()",
    "kind": "Method",
    "detail": "Function (TReadOptional<FMaterialParameterInfo> ParameterInfos = ParameterInfo ? Allocation ->)",
    "insertText": "TryReadComponents(ParameterInfo) : TReadOptional<FMaterialParameterInfo>()"
  },
  {
    "label": "MakeTuple()",
    "kind": "Method",
    "detail": "Function (GroupKeyType Key = ParameterInfos ?)",
    "insertText": "MakeTuple(Components[Index]..., ParameterInfos[Index]) : ParameterNames ? MakeTuple(Components[Index]..., FMaterialParameterInfo(ParameterNames[Index])) : MakeTuple(Components[Index]..., FMaterialParameterInfo())"
  },
  {
    "label": "GetOrAllocateGroupIndex()",
    "kind": "Method",
    "detail": "Function (const int32 NewGroupIndex = Handler .)",
    "insertText": "GetOrAllocateGroupIndex(Key, Builder)"
  },
  {
    "label": "MakeGroupID()",
    "kind": "Method",
    "detail": "Function (FEntityGroupID NewGroupID = Builder ->)",
    "insertText": "MakeGroupID(NewGroupIndex)"
  },
  {
    "label": "AddEntityToGroup()",
    "kind": "Method",
    "detail": "Function (Builder ->)",
    "insertText": "AddEntityToGroup(EntityIDs[Index], NewGroupID)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (GroupIDs [ Index ] = NewGroupID ; } } # if WITH_EDITOR bool)",
    "insertText": "OnObjectsReplaced(GroupKeyType& InOutKey, const TMap<UObject*, UObject*>& ReplacementMap)"
  },
  {
    "label": "UMaterialInterface()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface* NewMaterial = Cast<)",
    "insertText": "UMaterialInterface(ObjectResult.GetObject())"
  },
  {
    "label": "Accessor()",
    "kind": "Method",
    "detail": "Function (AccessorType)",
    "insertText": "Accessor(Inputs...)"
  },
  {
    "label": "UMaterialInstanceDynamic()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceDynamic* ExistingMID = Cast<)",
    "insertText": "UMaterialInstanceDynamic(ExistingMaterial)"
  },
  {
    "label": "InitializeBoundMaterial()",
    "kind": "Method",
    "detail": "Function (} } ; template<AccessorType,. . . RequiredComponents> struct TInitializeBoundMaterials { bool)",
    "insertText": "InitializeBoundMaterial(typename TCallTraits<RequiredComponents>::ParamType... Inputs, FObjectComponent& OutDynamicMaterial)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (OutDynamicMaterial =)",
    "insertText": "Null()"
  },
  {
    "label": "Weak()",
    "kind": "Method",
    "detail": "Function (OutDynamicMaterial =)",
    "insertText": "Weak(MID)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (Accessor .)",
    "insertText": "SetMaterial(CurrentMID)"
  },
  {
    "label": "Weak()",
    "kind": "Method",
    "detail": "Function (OutDynamicMaterial =)",
    "insertText": "Weak(NewMaterial)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (Accessor .)",
    "insertText": "SetMaterial(NewMaterial)"
  },
  {
    "label": "InitializeBoundMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBoundMaterial(Inputs..., OutDynamicMaterial)"
  },
  {
    "label": "TReinitializeBoundMaterials()",
    "kind": "Method",
    "detail": "Function (} } ; template<AccessorType,. . . RequiredComponents> struct TReinitializeBoundMaterials { UMovieSceneEntitySystemLinker* Linker ; TArray<FMovieSceneEntityID> ReboundMaterials ;)",
    "insertText": "TReinitializeBoundMaterials(UMovieSceneEntitySystemLinker* InLinker) : Linker(InLinker)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachAllocation(int32 Num, const FMovieSceneEntityID* EntityIDs, const RequiredComponents*... Inputs, FObjectComponent* Objects)"
  },
  {
    "label": "ForEachEntity()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachEntity(FMovieSceneEntityID EntityID, typename TCallTraits<RequiredComponents>::ParamType... Inputs, FObjectComponent& OutDynamicMaterial)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReboundMaterials .)",
    "insertText": "Add(EntityID)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PostTask()"
  },
  {
    "label": "AddComponent()",
    "kind": "Method",
    "detail": "Function (Linker -> EntityManager .)",
    "insertText": "AddComponent(EntityID, TracksComponents->Tags.BoundMaterialChanged)"
  },
  {
    "label": "TAddBoundMaterialMutationImpl()",
    "kind": "Method",
    "detail": "Function (} } } ; template<. . .> struct TAddBoundMaterialMutationImpl ; template<AccessorType,. . . RequiredComponents,int . . . Indices> struct TAddBoundMaterialMutationImpl<AccessorType,TIntegerSequence<int,Indices . . .>,RequiredComponents . . .> : IMovieSceneEntityMutation {)",
    "insertText": "TAddBoundMaterialMutationImpl(TComponentTypeID<RequiredComponents>... InRequiredComponents) : ComponentTypes(InRequiredComponents...)"
  },
  {
    "label": "CreateMutation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateMutation(FEntityManager* EntityManager, FComponentMask* InOutEntityComponentTypes)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (InOutEntityComponentTypes ->)",
    "insertText": "Set(TracksComponents->BoundMaterial)"
  },
  {
    "label": "InitializeAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeAllocation(FEntityAllocation* Allocation, const FComponentMask& AllocationType)"
  },
  {
    "label": "WriteComponents()",
    "kind": "Method",
    "detail": "Function (TComponentWriter<FObjectComponent> BoundMaterials = Allocation ->)",
    "insertText": "WriteComponents(TracksComponents->BoundMaterial, FEntityAllocationWriteContext::NewAllocation())"
  },
  {
    "label": "InitializeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAllocation(Allocation, BoundMaterials, Allocation->ReadComponents(ComponentTypes.template Get<Indices>())...)"
  },
  {
    "label": "InitializeAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeAllocation(FEntityAllocation* Allocation, FObjectComponent* OutBoundMaterials, const RequiredComponents*... InRequiredComponents)"
  },
  {
    "label": "UMovieSceneEntityGroupingSystem()",
    "kind": "Method",
    "detail": "Function (UMovieSceneEntityGroupingSystem* GroupingSystem = Linker -> LinkSystem<)",
    "insertText": "UMovieSceneEntityGroupingSystem()"
  },
  {
    "label": "AddGrouping()",
    "kind": "Method",
    "detail": "Function (GroupingKey = GroupingSystem ->)",
    "insertText": "AddGrouping(FMaterialGroupingPolicy(), InRequiredComponents...)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MaterialSwitcherFilter .)",
    "insertText": "Reset()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (MaterialSwitcherFilter .)",
    "insertText": "All({ InRequiredComponents..., BuiltInComponents->ObjectResult })"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (MaterialParameterFilter .)",
    "insertText": "All({ InRequiredComponents... })"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (MaterialParameterFilter .)",
    "insertText": "Any({ TracksComponents->ScalarParameterName, TracksComponents->ColorParameterName, TracksComponents->VectorParameterName, TracksComponents->ScalarMaterialParameterInfo, TracksComponents->ColorMaterialParameterInfo, TracksComponents->VectorMaterialParameterInfo })"
  },
  {
    "label": "AddRaw()",
    "kind": "Method",
    "detail": "Function (Linker -> Events . PostSpawnEvent .)",
    "insertText": "AddRaw(this, &TMovieSceneMaterialSystem<AccessorType, RequiredComponents...>::OnPostSpawn, InRequiredComponents...)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (ReinitializeBoundMaterials . Filter .)",
    "insertText": "All({ TracksComponents->BoundMaterial, InRequiredComponents... })"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (ReinitializeBoundMaterials . Filter .)",
    "insertText": "None({ BuiltInComponents->Tags.NeedsUnlink })"
  },
  {
    "label": "RemoveGrouping()",
    "kind": "Method",
    "detail": "Function (GroupingSystem ->)",
    "insertText": "RemoveGrouping(GroupingKey)"
  },
  {
    "label": "FEntityGroupingPolicyKey()",
    "kind": "Method",
    "detail": "Function (} GroupingKey =)",
    "insertText": "FEntityGroupingPolicyKey()"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (Linker -> Events . PostSpawnEvent .)",
    "insertText": "RemoveAll(this)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ;)",
    "insertText": "SCOPE_CYCLE_COUNTER(MovieSceneEval_ReinitializeBoundMaterials) FMovieSceneTracksComponentTypes* TracksComponents = FMovieSceneTracksComponentTypes::Get()"
  },
  {
    "label": "WriteContext()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationWriteContext)",
    "insertText": "WriteContext(InLinker->EntityManager)"
  },
  {
    "label": "ReinitializeBoundMaterialsTask()",
    "kind": "Method",
    "detail": "Function (TReinitializeBoundMaterials<AccessorType,RequiredComponents . . .>)",
    "insertText": "ReinitializeBoundMaterialsTask(InLinker)"
  },
  {
    "label": "LockGuard()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationMutexGuard)",
    "insertText": "LockGuard(Allocation, EComponentHeaderLockMode::LockFree)"
  },
  {
    "label": "ForEachAllocation()",
    "kind": "Method",
    "detail": "Function (ReinitializeBoundMaterialsTask .)",
    "insertText": "ForEachAllocation(Num, Allocation->GetRawEntityIDs(), Allocation->ReadComponents(InRequiredComponents)..., Allocation->WriteComponents(TracksComponents->BoundMaterial, WriteContext))"
  },
  {
    "label": "GetRunner()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FMovieSceneEntitySystemRunner> Runner = Linker ->)",
    "insertText": "GetRunner()"
  },
  {
    "label": "GetCurrentPhase()",
    "kind": "Method",
    "detail": "Function (ESystemPhase CurrentPhase = Runner ->)",
    "insertText": "GetCurrentPhase()"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (TApplyMaterialSwitchers<AccessorType,RequiredComponents . . .> ApplyMaterialSwitchers ;)",
    "insertText": "FEntityTaskBuilder() .ReadAllOf(InRequiredComponents...) .Read(BuiltInComponents->ObjectResult) .FilterAll({ BuiltInComponents->Tags.NeedsLink }) .FilterNone({ BuiltInComponents->Tags.Ignored }) .RunInline_PerEntity(&Linker->EntityManager, ApplyMaterialSwitchers)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (FEntityComponentFilter)",
    "insertText": "Filter(MaterialParameterFilter)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "All({ BuiltInComponents->Tags.NeedsLink })"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (Filter .)",
    "insertText": "None({ BuiltInComponents->Tags.ImportedEntity })"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using MutationType = TAddBoundMaterialMutationImpl<AccessorType,TMakeIntegerSequence<int,)",
    "insertText": "sizeof(RequiredComponents)"
  },
  {
    "label": "MutateAll()",
    "kind": "Method",
    "detail": "Function (Linker -> EntityManager .)",
    "insertText": "MutateAll(Filter, MutationType(InRequiredComponents...))"
  },
  {
    "label": "ReinitializeBoundMaterialsTask()",
    "kind": "Method",
    "detail": "Function (TReinitializeBoundMaterials<AccessorType,RequiredComponents . . .>)",
    "insertText": "ReinitializeBoundMaterialsTask(Linker)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityTaskBuilder() .ReadEntityIDs() .ReadAllOf(InRequiredComponents...) .Write(TracksComponents->BoundMaterial) .FilterAll({ BuiltInComponents->Tags.NeedsLink }) .FilterNone({ BuiltInComponents->Tags.Ignored, BuiltInComponents->Tags.NeedsUnlink }) .RunInline_PerEntity(&Linker->EntityManager, ReinitializeBoundMaterialsTask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ;)",
    "insertText": "if(Linker->EntityManager.Contains(MaterialSwitcherFilter))"
  },
  {
    "label": "BeginTrackingAndCachePreAnimatedValuesTask()",
    "kind": "Method",
    "detail": "Function (TPreAnimatedStateTaskParams<RequiredComponents . . .> Params ; Params . AdditionalFilter = MaterialSwitcherFilter ; MaterialSwitcherStorage ->)",
    "insertText": "BeginTrackingAndCachePreAnimatedValuesTask(Linker, Params, InRequiredComponents...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Linker->EntityManager.Contains(MaterialParameterFilter))"
  }
]