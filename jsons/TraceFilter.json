[
  {
    "label": "FTraceFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTraceFilter"
  },
  {
    "label": "TObjectFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectFilter"
  },
  {
    "label": "UE_TRACE_FORCE_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / EnableIf . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" GameFramework / Actor . h \" # include \" Engine / World . h \" # include \" Components / ActorComponent . h \" # include \" Components / SkeletalMeshComponent . h \" # include \" Animation / AnimInstance . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Object . h \" # if)",
    "insertText": "UE_TRACE_FORCE_ENABLED(UE_TRACE_ENABLED && !IS_PROGRAM && !UE_BUILD_SHIPPING)"
  },
  {
    "label": "CanTrace()",
    "kind": "Method",
    "detail": "Function (struct TObjectFilter { public : template<T> TEnableIf<TPointerIsConvertibleFromTo<TRemovePointer<T>::Type,UWorld>::Value,bool>::Type)",
    "insertText": "CanTrace(const T* Object)"
  },
  {
    "label": "World()",
    "kind": "Method",
    "detail": "Function (const UWorld*)",
    "insertText": "World(const UWorld*)"
  },
  {
    "label": "Actor()",
    "kind": "Method",
    "detail": "Function (const AActor*)",
    "insertText": "Actor(const AActor*)"
  },
  {
    "label": "ActorComponent()",
    "kind": "Method",
    "detail": "Function (const UActorComponent*)",
    "insertText": "ActorComponent(const UActorComponent*)"
  },
  {
    "label": "AnimInstance()",
    "kind": "Method",
    "detail": "Function (const UAnimInstance*)",
    "insertText": "AnimInstance(const UAnimInstance*)"
  },
  {
    "label": "TEnableIf()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "TEnableIf(!TPointerIsConvertibleFromTo<typename TRemovePointer<T>::Type, UActorComponent>::Value && !TPointerIsConvertibleFromTo<typename TRemovePointer<T>::Type, AActor>::Value && !TPointerIsConvertibleFromTo<typename TRemovePointer<T>::Type, UWorld>::Value && !TPointerIsConvertibleFromTo<typename TRemovePointer<T>::Type, UAnimInstance>::Value && TPointerIsConvertibleFromTo<typename TRemovePointer<T>::Type, UObject>::Value), bool>::Type FORCEINLINE CanTrace(const T* Object)"
  },
  {
    "label": "BaseObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "BaseObject(const UObject*)"
  },
  {
    "label": "SetObjectIsTraceable()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool bForceThreadSafe = true> void)",
    "insertText": "SetObjectIsTraceable(const UObject* InObject, bool bIsTraceable)"
  },
  {
    "label": "MarkObjectTraceable()",
    "kind": "Method",
    "detail": "Function (template<bool bForceThreadSafe = true> void)",
    "insertText": "MarkObjectTraceable(const UObject* InObject)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "IsObjectTraceable()",
    "kind": "Method",
    "detail": "Function (template<bool bForceThreadSafe = true> bool)",
    "insertText": "IsObjectTraceable(const UObject* InObject)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (} ; template void FTraceFilter::SetObjectIsTraceable<)",
    "insertText": "true(const UObject* InObject, bool bIsTraceable)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (template void FTraceFilter::SetObjectIsTraceable<)",
    "insertText": "false(const UObject* InObject, bool bIsTraceable)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (template void FTraceFilter::MarkObjectTraceable<)",
    "insertText": "true(const UObject* InObject)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (template void FTraceFilter::MarkObjectTraceable<)",
    "insertText": "false(const UObject* InObject)"
  }
]