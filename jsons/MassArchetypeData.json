[
  {
    "label": "FMassEntityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityQuery"
  },
  {
    "label": "FMassExecutionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassExecutionContext"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FMassArchetypeEntityCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeEntityCollection"
  },
  {
    "label": "FMassArchetypeChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeChunk"
  },
  {
    "label": "FMassArchetypeFragmentConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeFragmentConfig"
  },
  {
    "label": "FMassArchetypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeData"
  },
  {
    "label": "FTransientChunkLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransientChunkLocation"
  },
  {
    "label": "FMassArchetypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeHelper"
  },
  {
    "label": "SanitizeChunkMemorySize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SanitizeChunkMemorySize(const int32 InChunkMemorySize, const bool bLogMismatch = true)"
  },
  {
    "label": "FStructView()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FStructView(ChunkFragmentData[Index])"
  },
  {
    "label": "GetSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetSharedFragmentValues(Entity.Index)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FMassArchetypeCompositionDescriptor& InCompositionDescriptor, const uint32 ArchetypeDataVersion)"
  },
  {
    "label": "InitializeWithSimilar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWithSimilar(const FMassArchetypeData& BaseArchetype, FMassArchetypeCompositionDescriptor&& NewComposition, const uint32 ArchetypeDataVersion)"
  },
  {
    "label": "AddEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntity(FMassEntityHandle Entity, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues)"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntity(FMassEntityHandle Entity)"
  },
  {
    "label": "ExecuteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteFunction(FMassExecutionContext& RunContext, const FMassExecuteFunction& Function, const FMassQueryRequirementIndicesMapping& RequirementMapping\n\t\t, FMassArchetypeEntityCollection::FConstEntityRangeArrayView EntityRangeContainer, const FMassChunkConditionFunction& ChunkCondition)"
  },
  {
    "label": "ExecuteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteFunction(FMassExecutionContext& RunContext, const FMassExecuteFunction& Function, const FMassQueryRequirementIndicesMapping& RequirementMapping\n\t\t, const FMassChunkConditionFunction& ChunkCondition)"
  },
  {
    "label": "CompactEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompactEntities(const double TimeAllowed)"
  },
  {
    "label": "MoveEntityToAnotherArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveEntityToAnotherArchetype(const FMassEntityHandle Entity, FMassArchetypeData& NewArchetype, const FMassArchetypeSharedFragmentValues* SharedFragmentValuesOverride = nullptr)"
  },
  {
    "label": "SetFragmentsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFragmentsData(const FMassEntityHandle Entity, TArrayView<const FInstancedStruct> FragmentSources)"
  },
  {
    "label": "SetFragmentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFragmentData(FMassArchetypeEntityCollection::FConstEntityRangeArrayView EntityRangeContainer, const FInstancedStruct& FragmentSource)"
  },
  {
    "label": "DebugPrintArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugPrintArchetype(FOutputDevice& Ar)"
  },
  {
    "label": "REMOVEME_GetArrayViewForFragmentInChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "REMOVEME_GetArrayViewForFragmentInChunk(int32 ChunkIndex, const UScriptStruct* FragmentType, void*& OutChunkBase, int32& OutNumEntities)"
  },
  {
    "label": "MakeEntityHandle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeEntityHandle(Entity.Index)"
  },
  {
    "label": "BatchDestroyEntityChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchDestroyEntityChunks(FMassArchetypeEntityCollection::FConstEntityRangeArrayView EntityRangeContainer, TArray<FMassEntityHandle>& OutEntitiesRemoved)"
  },
  {
    "label": "BatchAddEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddEntities(TConstArrayView<FMassEntityHandle> Entities, const FMassArchetypeSharedFragmentValues& SharedFragmentValues\n\t\t, TArray<FMassArchetypeEntityCollection::FArchetypeEntityRange>& OutNewRanges)"
  },
  {
    "label": "BatchMoveEntitiesToAnotherArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchMoveEntitiesToAnotherArchetype(const FMassArchetypeEntityCollection& EntityCollection, FMassArchetypeData& NewArchetype\n\t\t, TArray<FMassEntityHandle>& OutEntitiesBeingMoved, TArray<FMassArchetypeEntityCollection::FArchetypeEntityRange>* OutNewChunks = nullptr\n\t\t, const FMassArchetypeSharedFragmentValues* SharedFragmentValuesToAdd = nullptr\n\t\t, const FMassSharedFragmentBitSet* SharedFragmentToRemoveBitSet = nullptr\n\t\t, const FMassConstSharedFragmentBitSet* ConstSharedFragmentToRemoveBitSet = nullptr)"
  },
  {
    "label": "BatchSetFragmentValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchSetFragmentValues(TConstArrayView<FMassArchetypeEntityCollection::FArchetypeEntityRange> EntityCollection, const FMassGenericPayloadViewSlice& Payload)"
  },
  {
    "label": "PrepareNextEntitiesSpanInternal()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeEntityCollection::FArchetypeEntityRange)",
    "insertText": "PrepareNextEntitiesSpanInternal(TConstArrayView<FMassEntityHandle> Entities, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues, const int32 StartingChunk = 0)"
  },
  {
    "label": "BatchRemoveEntitiesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRemoveEntitiesInternal(const int32 ChunkIndex, const int32 StartIndexWithinChunk, const int32 NumberToRemove)"
  },
  {
    "label": "MoveFragmentsToAnotherArchetypeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFragmentsToAnotherArchetypeInternal(FMassArchetypeData& TargetArchetype, FTransientChunkLocation Target, const FTransientChunkLocation Source, const int32 ElementsNum)"
  },
  {
    "label": "MoveFragmentsToNewLocationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFragmentsToNewLocationInternal(FTransientChunkLocation Target, const FTransientChunkLocation Source, const int32 NumberToMove)"
  },
  {
    "label": "ConfigureFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureFragments()"
  },
  {
    "label": "BindEntityRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindEntityRequirements(FMassExecutionContext& RunContext, const FMassFragmentIndicesMapping& EntityFragmentsMapping, FMassArchetypeChunk& Chunk, const int32 SubchunkStart, const int32 SubchunkLength)"
  },
  {
    "label": "BindChunkFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindChunkFragmentRequirements(FMassExecutionContext& RunContext, const FMassFragmentIndicesMapping& ChunkFragmentsMapping, FMassArchetypeChunk& Chunk)"
  },
  {
    "label": "BindConstSharedFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindConstSharedFragmentRequirements(FMassExecutionContext& RunContext, const FMassArchetypeSharedFragmentValues& SharedFragmentValues, const FMassFragmentIndicesMapping& ChunkFragmentsMapping)"
  },
  {
    "label": "BindSharedFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindSharedFragmentRequirements(FMassExecutionContext& RunContext, FMassArchetypeSharedFragmentValues& SharedFragmentValues, const FMassFragmentIndicesMapping& ChunkFragmentsMapping)"
  },
  {
    "label": "SetSharedFragmentsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedFragmentsData(const FMassEntityHandle Entity, TConstArrayView<FSharedStruct> SharedFragmentValueOverrides)"
  },
  {
    "label": "AddEntityInternal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddEntityInternal(FMassEntityHandle Entity, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues)"
  },
  {
    "label": "RemoveEntityInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntityInternal(const int32 AbsoluteIndex)"
  },
  {
    "label": "FMassArchetypeHandle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FMassArchetypeHandle(Archetype)"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeData& Archetype, const FMassFragmentRequirements& Requirements\n\t\t, const bool bBailOutOnFirstFail = true, FOutputDevice* OutputDevice = nullptr)"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeData& Archetype, const FMassFragmentRequirements& Requirements)"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeCompositionDescriptor& ArchetypeComposition, const FMassFragmentRequirements& Requirements)"
  }
]