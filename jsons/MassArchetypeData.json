[
  {
    "label": "FMassEntityQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityQuery"
  },
  {
    "label": "FMassExecutionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassExecutionContext"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FMassArchetypeEntityCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeEntityCollection"
  },
  {
    "label": "FMassArchetypeChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeChunk"
  },
  {
    "label": "FMassArchetypeFragmentConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeFragmentConfig"
  },
  {
    "label": "FMassArchetypeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeData"
  },
  {
    "label": "FTransientChunkLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransientChunkLocation"
  },
  {
    "label": "FMassArchetypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeHelper"
  },
  {
    "label": "SanitizeChunkMemorySize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassEntityManager . h \" # include \" MassArchetypeTypes . h \" struct FMassEntityQuery ; struct FMassExecutionContext ; class FOutputDevice ; struct FMassArchetypeEntityCollection ; namespace UE::Mass { int32)",
    "insertText": "SanitizeChunkMemorySize(const int32 InChunkMemorySize, const bool bLogMismatch = true)"
  },
  {
    "label": "FMassArchetypeChunk()",
    "kind": "Method",
    "detail": "Function (} struct FMassArchetypeChunk { private : uint8* RawMemory = nullptr ; SIZE_T AllocSize = 0 ; int32 NumInstances = 0 ; int32 SerialModificationNumber = 0 ; TArray<FInstancedStruct> ChunkFragmentData ; FMassArchetypeSharedFragmentValues SharedFragmentValues ; public :)",
    "insertText": "FMassArchetypeChunk(const SIZE_T InAllocSize, TConstArrayView<FInstancedStruct> InChunkFragmentTemplates, FMassArchetypeSharedFragmentValues InSharedFragmentValues) : AllocSize(InAllocSize) , ChunkFragmentData(InChunkFragmentTemplates) , SharedFragmentValues(InSharedFragmentValues)"
  },
  {
    "label": "RawMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RawMemory(uint8*)FMemory::Malloc(AllocSize)"
  },
  {
    "label": "FMassArchetypeChunk()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMassArchetypeChunk()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(RawMemory)"
  },
  {
    "label": "GetEntityArrayElementRef()",
    "kind": "Method",
    "detail": "Function (RawMemory = nullptr ; } } FMassEntityHandle&)",
    "insertText": "GetEntityArrayElementRef(int32 ChunkBase, int32 IndexWithinChunk)"
  },
  {
    "label": "GetRawMemory()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "GetRawMemory()"
  },
  {
    "label": "RemoveMultipleInstances()",
    "kind": "Method",
    "detail": "Function (NumInstances + = Count ; SerialModificationNumber + + ; } void)",
    "insertText": "RemoveMultipleInstances(uint32 Count)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NumInstances - = Count ;)",
    "insertText": "check(NumInstances >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SerialModificationNumber + + ;)",
    "insertText": "if(NumInstances == 0)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (RawMemory = nullptr ; } } void)",
    "insertText": "AddInstance()"
  },
  {
    "label": "AddMultipleInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMultipleInstances(1)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInstance()"
  },
  {
    "label": "RemoveMultipleInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMultipleInstances(1)"
  },
  {
    "label": "GetSerialModificationNumber()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSerialModificationNumber()"
  },
  {
    "label": "FindMutableChunkFragment()",
    "kind": "Method",
    "detail": "Function (} FInstancedStruct*)",
    "insertText": "FindMutableChunkFragment(const UScriptStruct* Type)"
  },
  {
    "label": "Recycle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Recycle(TConstArrayView<FInstancedStruct> InChunkFragmentsTemplate, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SerialModificationNumber + + ; ChunkFragmentData = InChunkFragmentsTemplate ; SharedFragmentValues = InSharedFragmentValues ;)",
    "insertText": "if(RawMemory == nullptr)"
  },
  {
    "label": "IsValidSubChunk()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsValidSubChunk(const int32 StartIndex, const int32 Length)"
  },
  {
    "label": "DebugGetChunkFragmentCount()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MASSENTITY_DEBUG int32)",
    "insertText": "DebugGetChunkFragmentCount()"
  },
  {
    "label": "GetMutableSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (} # endif FMassArchetypeSharedFragmentValues&)",
    "insertText": "GetMutableSharedFragmentValues()"
  },
  {
    "label": "FMassArchetypeData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMassArchetypeData { private : FMassArchetypeCompositionDescriptor CompositionDescriptor ; TArray<FInstancedStruct> ChunkFragmentsTemplate ; TArray<FMassArchetypeFragmentConfig,TInlineAllocator<1 6>> FragmentConfigs ; TArray<FMassArchetypeChunk> Chunks ; TMap<int32,int32> EntityMap ; TMap<const UScriptStruct*,int32> FragmentIndexMap ; int32 NumEntitiesPerChunk ; SIZE_T TotalBytesPerEntity = 0 ; int32 EntityListOffsetWithinChunk ; uint32 CreatedArchetypeDataVersion = 0 ; # if WITH_MASSENTITY_DEBUG TArray<FName> DebugNames ; # endif const SIZE_T ChunkMemorySize = 0 ; FMassEntityQuery ; FMassArchetypeEntityCollection ; FMassDebugger ; public :)",
    "insertText": "FMassArchetypeData(const FMassArchetypeCreationParams& CreationParams = FMassArchetypeCreationParams())"
  },
  {
    "label": "GetFragmentConfigs()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FMassArchetypeFragmentConfig>)",
    "insertText": "GetFragmentConfigs()"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (const int32 AbsoluteIndex = EntityMap .)",
    "insertText": "FindChecked(EntityIndex)"
  },
  {
    "label": "GetSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (const int32 ChunkIndex = AbsoluteIndex / NumEntitiesPerChunk ; return Chunks [ ChunkIndex ] .)",
    "insertText": "GetSharedFragmentValues()"
  },
  {
    "label": "GetSharedFragmentValues()",
    "kind": "Method",
    "detail": "Function (} const FMassArchetypeSharedFragmentValues&)",
    "insertText": "GetSharedFragmentValues(FMassEntityHandle Entity)"
  },
  {
    "label": "ForEachFragmentType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachFragmentType(TFunction< void(const UScriptStruct* )> Function)"
  },
  {
    "label": "HasFragmentType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFragmentType(const UScriptStruct* FragmentType)"
  },
  {
    "label": "HasTagType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTagType(const UScriptStruct* FragmentType)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEquivalent(const FMassArchetypeCompositionDescriptor& OtherCompositionDescriptor)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FMassArchetypeCompositionDescriptor& InCompositionDescriptor, const uint32 ArchetypeDataVersion)"
  },
  {
    "label": "InitializeWithSimilar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWithSimilar(const FMassArchetypeData& BaseArchetype, FMassArchetypeCompositionDescriptor&& NewComposition, const uint32 ArchetypeDataVersion)"
  },
  {
    "label": "AddEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntity(FMassEntityHandle Entity, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues)"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntity(FMassEntityHandle Entity)"
  },
  {
    "label": "HasFragmentDataForEntity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFragmentDataForEntity(const UScriptStruct* FragmentType, int32 EntityIndex)"
  },
  {
    "label": "GetFragmentDataForEntityChecked()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetFragmentDataForEntityChecked(const UScriptStruct* FragmentType, int32 EntityIndex)"
  },
  {
    "label": "GetFragmentDataForEntity()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetFragmentDataForEntity(const UScriptStruct* FragmentType, int32 EntityIndex)"
  },
  {
    "label": "GetInternalIndexForEntityChecked()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetInternalIndexForEntityChecked(const int32 EntityIndex)"
  },
  {
    "label": "GetNumEntitiesPerChunk()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumEntitiesPerChunk()"
  },
  {
    "label": "GetChunkAllocSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetChunkAllocSize()"
  },
  {
    "label": "GetNonEmptyChunkCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNonEmptyChunkCount()"
  },
  {
    "label": "GetCreatedArchetypeDataVersion()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCreatedArchetypeDataVersion()"
  },
  {
    "label": "ExecuteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteFunction(FMassExecutionContext& RunContext, const FMassExecuteFunction& Function, const FMassQueryRequirementIndicesMapping& RequirementMapping , const FMassChunkConditionFunction& ChunkCondition)"
  },
  {
    "label": "ExecutionFunctionForChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutionFunctionForChunk(FMassExecutionContext& RunContext, const FMassExecuteFunction& Function, const FMassQueryRequirementIndicesMapping& RequirementMapping , const FMassArchetypeEntityCollection::FArchetypeEntityRange& EntityRange, const FMassChunkConditionFunction& ChunkCondition = FMassChunkConditionFunction())"
  },
  {
    "label": "CompactEntities()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompactEntities(const double TimeAllowed)"
  },
  {
    "label": "MoveEntityToAnotherArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveEntityToAnotherArchetype(const FMassEntityHandle Entity, FMassArchetypeData& NewArchetype, const FMassArchetypeSharedFragmentValues* SharedFragmentValuesOverride = nullptr)"
  },
  {
    "label": "SetFragmentsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFragmentsData(const FMassEntityHandle Entity, TArrayView<const FInstancedStruct> FragmentSources)"
  },
  {
    "label": "SetFragmentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFragmentData(FMassArchetypeEntityCollection::FConstEntityRangeArrayView EntityRangeContainer, const FInstancedStruct& FragmentSource)"
  },
  {
    "label": "GetRequirementsFragmentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequirementsFragmentMapping(TConstArrayView<FMassFragmentRequirementDescription> Requirements, FMassFragmentIndicesMapping& OutFragmentIndices)"
  },
  {
    "label": "GetRequirementsChunkFragmentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequirementsChunkFragmentMapping(TConstArrayView<FMassFragmentRequirementDescription> ChunkRequirements, FMassFragmentIndicesMapping& OutFragmentIndices)"
  },
  {
    "label": "GetRequirementsConstSharedFragmentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequirementsConstSharedFragmentMapping(TConstArrayView<FMassFragmentRequirementDescription> Requirements, FMassFragmentIndicesMapping& OutFragmentIndices)"
  },
  {
    "label": "GetRequirementsSharedFragmentMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRequirementsSharedFragmentMapping(TConstArrayView<FMassFragmentRequirementDescription> Requirements, FMassFragmentIndicesMapping& OutFragmentIndices)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "DebugGetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DebugGetDescription()"
  },
  {
    "label": "CopyDebugNamesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyDebugNamesFrom(const FMassArchetypeData& Other)"
  },
  {
    "label": "DebugGetEntityMemoryNumbers()",
    "kind": "Method",
    "detail": "Function (# if WITH_MASSENTITY_DEBUG DebugNames = Other . DebugNames ; # endif } # if WITH_MASSENTITY_DEBUG void)",
    "insertText": "DebugGetEntityMemoryNumbers(SIZE_T& OutActiveChunksMemorySize, SIZE_T& OutActiveEntitiesMemorySize)"
  },
  {
    "label": "AddUniqueDebugName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniqueDebugName(const FName& Name)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (DebugNames .)",
    "insertText": "AddUnique(Name)"
  },
  {
    "label": "GetDebugNames()",
    "kind": "Method",
    "detail": "Function (} const TConstArrayView<FName>)",
    "insertText": "GetDebugNames()"
  },
  {
    "label": "DebugPrintArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugPrintArchetype(FOutputDevice& Ar)"
  },
  {
    "label": "DebugPrintEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugPrintEntity(FMassEntityHandle Entity, FOutputDevice& Ar, const TCHAR* InPrefix = TEXT(\"\"))"
  },
  {
    "label": "REMOVEME_GetArrayViewForFragmentInChunk()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "REMOVEME_GetArrayViewForFragmentInChunk(int32 ChunkIndex, const UScriptStruct* FragmentType, void*& OutChunkBase, int32& OutNumEntities)"
  },
  {
    "label": "GetFragmentIndexChecked()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFragmentIndexChecked(const UScriptStruct* FragmentType)"
  },
  {
    "label": "GetFragmentData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetFragmentData(const int32 FragmentIndex, const FMassRawEntityInChunkData EntityIndex)"
  },
  {
    "label": "MakeEntityHandle()",
    "kind": "Method",
    "detail": "Function (} FMassRawEntityInChunkData)",
    "insertText": "MakeEntityHandle(int32 EntityIndex)"
  },
  {
    "label": "FMassRawEntityInChunkData()",
    "kind": "Method",
    "detail": "Function (const int32 ChunkIndex = AbsoluteIndex / NumEntitiesPerChunk ; return)",
    "insertText": "FMassRawEntityInChunkData(Chunks[ChunkIndex].GetRawMemory(), AbsoluteIndex % NumEntitiesPerChunk)"
  },
  {
    "label": "MakeEntityHandle()",
    "kind": "Method",
    "detail": "Function (} FMassRawEntityInChunkData)",
    "insertText": "MakeEntityHandle(FMassEntityHandle Entity)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "BatchDestroyEntityChunks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BatchDestroyEntityChunks(FMassArchetypeEntityCollection::FConstEntityRangeArrayView EntityRangeContainer, TArray<FMassEntityHandle>& OutEntitiesRemoved)"
  },
  {
    "label": "BatchAddEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddEntities(TConstArrayView<FMassEntityHandle> Entities, const FMassArchetypeSharedFragmentValues& SharedFragmentValues , TArray<FMassArchetypeEntityCollection::FArchetypeEntityRange>& OutNewRanges)"
  },
  {
    "label": "BatchMoveEntitiesToAnotherArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchMoveEntitiesToAnotherArchetype(const FMassArchetypeEntityCollection& EntityCollection, FMassArchetypeData& NewArchetype , TArray<FMassEntityHandle>& OutEntitiesBeingMoved, TArray<FMassArchetypeEntityCollection::FArchetypeEntityRange>* OutNewChunks = nullptr , const FMassArchetypeSharedFragmentValues* SharedFragmentValuesToAdd = nullptr , const FMassSharedFragmentBitSet* SharedFragmentToRemoveBitSet = nullptr , const FMassConstSharedFragmentBitSet* ConstSharedFragmentToRemoveBitSet = nullptr)"
  },
  {
    "label": "BatchSetFragmentValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchSetFragmentValues(TConstArrayView<FMassArchetypeEntityCollection::FArchetypeEntityRange> EntityCollection, const FMassGenericPayloadViewSlice& Payload)"
  },
  {
    "label": "PrepareNextEntitiesSpanInternal()",
    "kind": "Method",
    "detail": "Function (protected : FMassArchetypeEntityCollection::FArchetypeEntityRange)",
    "insertText": "PrepareNextEntitiesSpanInternal(TConstArrayView<FMassEntityHandle> Entities, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues, const int32 StartingChunk = 0)"
  },
  {
    "label": "BatchRemoveEntitiesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRemoveEntitiesInternal(const int32 ChunkIndex, const int32 StartIndexWithinChunk, const int32 NumberToRemove)"
  },
  {
    "label": "MoveFragmentsToAnotherArchetypeInternal()",
    "kind": "Method",
    "detail": "Function (struct FTransientChunkLocation { uint8* RawChunkMemory ; int32 IndexWithinChunk ; } ; void)",
    "insertText": "MoveFragmentsToAnotherArchetypeInternal(FMassArchetypeData& TargetArchetype, FTransientChunkLocation Target, const FTransientChunkLocation Source, const int32 ElementsNum)"
  },
  {
    "label": "MoveFragmentsToNewLocationInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFragmentsToNewLocationInternal(FTransientChunkLocation Target, const FTransientChunkLocation Source, const int32 NumberToMove)"
  },
  {
    "label": "ConfigureFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureFragments()"
  },
  {
    "label": "BindEntityRequirements()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindEntityRequirements(FMassExecutionContext& RunContext, const FMassFragmentIndicesMapping& EntityFragmentsMapping, FMassArchetypeChunk& Chunk, const int32 SubchunkStart, const int32 SubchunkLength)"
  },
  {
    "label": "BindChunkFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindChunkFragmentRequirements(FMassExecutionContext& RunContext, const FMassFragmentIndicesMapping& ChunkFragmentsMapping, FMassArchetypeChunk& Chunk)"
  },
  {
    "label": "BindConstSharedFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindConstSharedFragmentRequirements(FMassExecutionContext& RunContext, const FMassArchetypeSharedFragmentValues& SharedFragmentValues, const FMassFragmentIndicesMapping& ChunkFragmentsMapping)"
  },
  {
    "label": "BindSharedFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindSharedFragmentRequirements(FMassExecutionContext& RunContext, FMassArchetypeSharedFragmentValues& SharedFragmentValues, const FMassFragmentIndicesMapping& ChunkFragmentsMapping)"
  },
  {
    "label": "SetSharedFragmentsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedFragmentsData(const FMassEntityHandle Entity, TConstArrayView<FSharedStruct> SharedFragmentValueOverrides)"
  },
  {
    "label": "GetOrAddChunk()",
    "kind": "Method",
    "detail": "Function (FMassArchetypeChunk&)",
    "insertText": "GetOrAddChunk(const FMassArchetypeSharedFragmentValues& SharedFragmentValues, int32& OutAbsoluteIndex, int32& OutIndexWithinChunk)"
  },
  {
    "label": "AddEntityInternal()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "AddEntityInternal(FMassEntityHandle Entity, const FMassArchetypeSharedFragmentValues& InSharedFragmentValues)"
  },
  {
    "label": "RemoveEntityInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEntityInternal(const int32 AbsoluteIndex)"
  },
  {
    "label": "ArchetypeDataFromHandle()",
    "kind": "Method",
    "detail": "Function (} ; struct FMassArchetypeHelper { FMassArchetypeData*)",
    "insertText": "ArchetypeDataFromHandle(const FMassArchetypeHandle& ArchetypeHandle)"
  },
  {
    "label": "ArchetypeDataFromHandleChecked()",
    "kind": "Method",
    "detail": "Function (} FMassArchetypeData&)",
    "insertText": "ArchetypeDataFromHandleChecked(const FMassArchetypeHandle& ArchetypeHandle)"
  },
  {
    "label": "ArchetypeHandleFromData()",
    "kind": "Method",
    "detail": "Function (} FMassArchetypeHandle)",
    "insertText": "ArchetypeHandleFromData(const TSharedPtr<FMassArchetypeData>& Archetype)"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (} # if WITH_MASSENTITY_DEBUG bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeData& Archetype, const FMassFragmentRequirements& Requirements , const bool bBailOutOnFirstFail = true, FOutputDevice* OutputDevice = nullptr)"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeData& Archetype, const FMassFragmentRequirements& Requirements)"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeCompositionDescriptor& ArchetypeComposition, const FMassFragmentRequirements& Requirements)"
  }
]