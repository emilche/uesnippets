[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSATResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSATResult"
  },
  {
    "label": "FSATSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSATSettings"
  },
  {
    "label": "FSATResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Plane . h \" # include \" Chaos / Utilities . h \" namespace Chaos { enum class ESATFeatureType { None,Plane,Edge,Vertex,} ; struct FSATResult {)",
    "insertText": "FSATResult()"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (ESATFeatureType::None,ESATFeatureType::None },FeatureIndices { INDEX_NONE,INDEX_NONE },)",
    "insertText": "SignedDistance(TNumericLimits<FReal>::Lowest())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsPlaneContact()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaneContact()"
  },
  {
    "label": "SwapShapes()",
    "kind": "Method",
    "detail": "Function (} FSATResult&)",
    "insertText": "SwapShapes()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(FeatureTypes[0], FeatureTypes[1])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(FeatureIndices[0], FeatureIndices[1])"
  },
  {
    "label": "IsMinkowskiSumFace()",
    "kind": "Method",
    "detail": "Function (} FReal PlaneBias ; FReal ObjectBias ; } ; bool)",
    "insertText": "IsMinkowskiSumFace(const FVec3& A, const FVec3& B, const FVec3& C, const FVec3& D)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FVec3 BA =)",
    "insertText": "CrossProduct(B, A)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FVec3 DC =)",
    "insertText": "CrossProduct(D, C)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal CBA =)",
    "insertText": "DotProduct(C, BA)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal DBA =)",
    "insertText": "DotProduct(D, BA)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal ADC =)",
    "insertText": "DotProduct(A, DC)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal BDC =)",
    "insertText": "DotProduct(B, DC)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FReal Tolerance = 1 . e - 2 f ;)",
    "insertText": "return((CBA * DBA) < -Tolerance) && ((ADC * BDC) < -Tolerance) && ((CBA * BDC) > Tolerance)"
  },
  {
    "label": "SATPlaneVertex()",
    "kind": "Method",
    "detail": "Function (} template<ConvexImplicitType1,ConvexImplicitType2> FSATResult)",
    "insertText": "SATPlaneVertex(const ConvexImplicitType1& Convex1, const FRigidTransform3& Convex1Transform, const ConvexImplicitType2& Convex2, const FRigidTransform3& Convex2Transform, const FReal CullDistance)"
  },
  {
    "label": "GetRelativeTransformNoScale()",
    "kind": "Method",
    "detail": "Function (FSATResult Result ; const FRigidTransform3 Convex2ToConvex1Transform = Convex2Transform .)",
    "insertText": "GetRelativeTransformNoScale(Convex1Transform)"
  },
  {
    "label": "NumPlanes()",
    "kind": "Method",
    "detail": "Function (const int32 NumPlanes2 = Convex2 .)",
    "insertText": "NumPlanes()"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const TPlaneConcrete<FReal,3> Plane2 = Convex2 .)",
    "insertText": "GetPlane(PlaneIndex2)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 PlaneN2In1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformVectorNoScale(Plane2.Normal())"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 PlaneX2In1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformPositionNoScale(Plane2.X())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FReal NearestVertexDistance = TNumericLimits<FReal)",
    "insertText": "Max()"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (int32 NearestVertexIndex1 = INDEX_NONE ; const int32 NumVertices1 = Convex1 .)",
    "insertText": "NumVertices()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 VertexX1 = Convex1 .)",
    "insertText": "GetVertex(VertexIndex1)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal VertexDistance =)",
    "insertText": "DotProduct(VertexX1 - PlaneX2In1, PlaneN2In1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NearestVertexDistance = VertexDistance ; NearestVertexIndex1 = VertexIndex1 ; } })",
    "insertText": "if(NearestVertexDistance > CullDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NearestVertexDistance > Result.SignedDistance)"
  },
  {
    "label": "SATEdgeEdge()",
    "kind": "Method",
    "detail": "Function (Result . FeatureTypes [ 0 ] = ESATFeatureType::Vertex ; Result . FeatureTypes [ 1 ] = ESATFeatureType::Plane ; Result . FeatureIndices [ 0 ] = NearestVertexIndex1 ; Result . FeatureIndices [ 1 ] = PlaneIndex2 ; Result . SignedDistance = NearestVertexDistance ; } } return Result ; } template<ConvexImplicitType1,ConvexImplicitType2> FSATResult)",
    "insertText": "SATEdgeEdge(const ConvexImplicitType1& Convex1, const FRigidTransform3& Convex1Transform, const ConvexImplicitType2& Convex2, const FRigidTransform3& Convex2Transform, const FReal CullDistance)"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (const FVec3 Centroid2 = Convex2 .)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 Centroid2In1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformPositionNoScale(Centroid2)"
  },
  {
    "label": "NumEdges()",
    "kind": "Method",
    "detail": "Function (const int32 NumEdges1 = Convex1 .)",
    "insertText": "NumEdges()"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 EdgeVertexIndex2A = Convex2 .)",
    "insertText": "GetEdgeVertex(EdgeIndex2, 0)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 EdgeVertexIndex2B = Convex2 .)",
    "insertText": "GetEdgeVertex(EdgeIndex2, 1)"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgeVertex2AIn1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformPositionNoScale(FVector(Convex2.GetVertex(EdgeVertexIndex2A)))"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgeVertex2BIn1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformPositionNoScale(FVector(Convex2.GetVertex(EdgeVertexIndex2B)))"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (const int32 EdgePlaneIndex2A = Convex2 .)",
    "insertText": "GetEdgePlane(EdgeIndex2, 0)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (const int32 EdgePlaneIndex2B = Convex2 .)",
    "insertText": "GetEdgePlane(EdgeIndex2, 1)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgePlaneNormal2AIn1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformVectorNoScale(Convex2.GetPlane(EdgePlaneIndex2A).Normal())"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgePlaneNormal2BIn1 = Convex2ToConvex1Transform .)",
    "insertText": "TransformVectorNoScale(Convex2.GetPlane(EdgePlaneIndex2B).Normal())"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 EdgeVertexIndex1A = Convex1 .)",
    "insertText": "GetEdgeVertex(EdgeIndex1, 0)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (const int32 EdgeVertexIndex1B = Convex1 .)",
    "insertText": "GetEdgeVertex(EdgeIndex1, 1)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgeVertex1A = Convex1 .)",
    "insertText": "GetVertex(EdgeVertexIndex1A)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgeVertex1B = Convex1 .)",
    "insertText": "GetVertex(EdgeVertexIndex1B)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (const int32 EdgePlaneIndex1A = Convex1 .)",
    "insertText": "GetEdgePlane(EdgeIndex1, 0)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (const int32 EdgePlaneIndex1B = Convex1 .)",
    "insertText": "GetEdgePlane(EdgeIndex1, 1)"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgePlaneNormal1A = Convex1 .)",
    "insertText": "GetPlane(EdgePlaneIndex1A).Normal()"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgePlaneNormal1B = Convex1 .)",
    "insertText": "GetPlane(EdgePlaneIndex1B).Normal()"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (continue ; } FVec3 EdgeNormal =)",
    "insertText": "CrossProduct(EdgeVertex1B - EdgeVertex1A, EdgeVertex2BIn1 - EdgeVertex2AIn1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(FVec3::DotProduct(EdgeNormal, EdgeVertex2AIn1 - Centroid2In1) < 0)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (EdgeNormal = - EdgeNormal ; } const FReal EdgeDistance =)",
    "insertText": "DotProduct(EdgeVertex1A - EdgeVertex2AIn1, EdgeNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(EdgeDistance > Result.SignedDistance)"
  },
  {
    "label": "SATPenetration()",
    "kind": "Method",
    "detail": "Function (Result . FeatureTypes [ 0 ] = ESATFeatureType::Edge ; Result . FeatureTypes [ 1 ] = ESATFeatureType::Edge ; Result . FeatureIndices [ 0 ] = EdgeIndex1 ; Result . FeatureIndices [ 1 ] = EdgeIndex2 ; Result . SignedDistance = EdgeDistance ; } } } return Result ; } template<ConvexImplicitType1,ConvexImplicitType2> FSATResult)",
    "insertText": "SATPenetration(const ConvexImplicitType1& Convex1, const FRigidTransform3& Convex1Transform, const ConvexImplicitType2& Convex2, const FRigidTransform3& Convex2Transform, const FReal CullDistance, const FSATSettings& Settings)"
  },
  {
    "label": "SATPlaneVertex()",
    "kind": "Method",
    "detail": "Function (FSATResult PlaneResult1 =)",
    "insertText": "SATPlaneVertex(Convex1, Convex1Transform, Convex2, Convex2Transform, CullDistance)"
  },
  {
    "label": "SATPlaneVertex()",
    "kind": "Method",
    "detail": "Function (} FSATResult PlaneResult2 =)",
    "insertText": "SATPlaneVertex(Convex2, Convex2Transform, Convex1, Convex1Transform, CullDistance).SwapShapes()"
  },
  {
    "label": "SATEdgeEdge()",
    "kind": "Method",
    "detail": "Function (} FSATResult EdgeResult =)",
    "insertText": "SATEdgeEdge(Convex1, Convex1Transform, Convex2, Convex2Transform, CullDistance)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} const FReal MaxPlaneDistance =)",
    "insertText": "Max(PlaneResult1.SignedDistance, PlaneResult2.SignedDistance)"
  },
  {
    "label": "bUseEdgeResult()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bUseEdgeResult(EdgeResult.SignedDistance > MaxPlaneDistance + Settings.PlaneBias)"
  }
]