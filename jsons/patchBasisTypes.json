[
  {
    "label": "OsdPatchParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OsdPatchParam"
  },
  {
    "label": "OsdPatchArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OsdPatchArray"
  },
  {
    "label": "OsdPatchCoord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OsdPatchCoord"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_OSD_PATCH_BASIS_TYPES_H # define OPENSUBDIV3_OSD_PATCH_BASIS_TYPES_H # if !)",
    "insertText": "defined(OSD_PATCH_BASIS_GLSL) && \\ !defined(OSD_PATCH_BASIS_HLSL) && \\ !defined(OSD_PATCH_BASIS_CUDA) && \\ !defined(OSD_PATCH_BASIS_OPENCL) && \\ !defined(OSD_PATCH_BASIS_METAL)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (namespace OPENSUBDIV_VERSION { namespace Osd { # endif # if)",
    "insertText": "defined(OSD_PATCH_BASIS_GLSL) #define OSD_FUNCTION_STORAGE_CLASS #define OSD_DATA_STORAGE_CLASS #define OSD_REAL float #define OSD_REAL_CAST float #define OSD_OPTIONAL(a) true #define OSD_OPTIONAL_INIT(a,b) b #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0 #define OSD_IN_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_OUT_ARRAY(elementType, identifier, arraySize) \\ out elementType identifier[arraySize] #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) \\ inout elementType identifier[arraySize] #define OSD_ARRAY_2(elementType,a0,a1) \\ elementType[](a0,a1) #define OSD_ARRAY_3(elementType,a0,a1,a2) \\ elementType[](a0,a1,a2) #define OSD_ARRAY_4(elementType,a0,a1,a2,a3) \\ elementType[](a0,a1,a2,a3) #define OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5) \\ elementType[](a0,a1,a2,a3,a4,a5) #define OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7) \\ elementType[](a0,a1,a2,a3,a4,a5,a6,a7) #define OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8) \\ elementType[](a0,a1,a2,a3,a4,a5,a6,a7,a8) #define OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) \\ elementType[](a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) #elif defined(OSD_PATCH_BASIS_HLSL) #define OSD_FUNCTION_STORAGE_CLASS #define OSD_DATA_STORAGE_CLASS #define OSD_REAL float #define OSD_REAL_CAST float #define OSD_OPTIONAL(a) true #define OSD_OPTIONAL_INIT(a,b) b #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0 #define OSD_IN_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_OUT_ARRAY(elementType, identifier, arraySize) \\ out elementType identifier[arraySize] #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) \\ inout elementType identifier[arraySize] #define OSD_ARRAY_2(elementType,a0,a1)"
  },
  {
    "label": "OSD_ARRAY_3()",
    "kind": "Method",
    "detail": "Function (a0,a1 } # define)",
    "insertText": "OSD_ARRAY_3(elementType,a0,a1,a2)"
  },
  {
    "label": "OSD_ARRAY_4()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2 } # define)",
    "insertText": "OSD_ARRAY_4(elementType,a0,a1,a2,a3)"
  },
  {
    "label": "OSD_ARRAY_6()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3 } # define)",
    "insertText": "OSD_ARRAY_6(elementType,a0,a1,a2,a3,a4,a5)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5 } # define)",
    "insertText": "OSD_ARRAY_8(elementType,a0,a1,a2,a3,a4,a5,a6,a7)"
  },
  {
    "label": "OSD_ARRAY_9()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7 } # define)",
    "insertText": "OSD_ARRAY_9(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8)"
  },
  {
    "label": "OSD_ARRAY_12()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7,a8 } # define)",
    "insertText": "OSD_ARRAY_12(elementType,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11 } # elif)",
    "insertText": "defined(OSD_PATCH_BASIS_CUDA) #define OSD_FUNCTION_STORAGE_CLASS __device__ #define OSD_DATA_STORAGE_CLASS #define OSD_REAL float #define OSD_REAL_CAST float #define OSD_OPTIONAL(a) true #define OSD_OPTIONAL_INIT(a,b) b #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0 #define OSD_IN_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_OUT_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_ARRAY_2(elementType,a0,a1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11 } # elif)",
    "insertText": "defined(OSD_PATCH_BASIS_OPENCL) #define OSD_FUNCTION_STORAGE_CLASS static #define OSD_DATA_STORAGE_CLASS #define OSD_REAL float #define OSD_REAL_CAST convert_float #define OSD_OPTIONAL(a) true #define OSD_OPTIONAL_INIT(a,b) b #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0 #define OSD_IN_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_OUT_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_ARRAY_2(elementType,a0,a1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11 } # elif)",
    "insertText": "defined(OSD_PATCH_BASIS_METAL) #define OSD_FUNCTION_STORAGE_CLASS #define OSD_DATA_STORAGE_CLASS #define OSD_REAL float #define OSD_REAL_CAST float #define OSD_OPTIONAL(a) true #define OSD_OPTIONAL_INIT(a,b) b #define OSD_ARRAY_ARG_BOUND_OPTIONAL 0 #define OSD_IN_ARRAY(elementType, identifier, arraySize) \\ thread elementType* identifier #define OSD_OUT_ARRAY(elementType, identifier, arraySize) \\ thread elementType* identifier #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) \\ thread elementType* identifier #define OSD_ARRAY_2(elementType,a0,a1)"
  },
  {
    "label": "OSD_OPTIONAL()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11 } # else # define OSD_FUNCTION_STORAGE_CLASS # define OSD_DATA_STORAGE_CLASS # define OSD_REAL float # define OSD_REAL_CAST float # define)",
    "insertText": "OSD_OPTIONAL(a) (a) #define OSD_OPTIONAL_INIT(a,b) (a ? b : 0) #define OSD_ARRAY_ARG_BOUND_OPTIONAL 1 #define OSD_IN_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_OUT_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_INOUT_ARRAY(elementType, identifier, arraySize) \\ elementType identifier[arraySize] #define OSD_ARRAY_2(elementType,a0,a1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11 } # endif # if)",
    "insertText": "defined(OSD_PATCH_BASIS_OPENCL)"
  },
  {
    "label": "OsdPatchCoordInit()",
    "kind": "Method",
    "detail": "Function (typedef struct OsdPatchArray OsdPatchArray ; typedef struct OsdPatchCoord OsdPatchCoord ; # endif # define OSD_PATCH_DESCRIPTOR_QUADS 3 # define OSD_PATCH_DESCRIPTOR_TRIANGLES 4 # define OSD_PATCH_DESCRIPTOR_LOOP 5 # define OSD_PATCH_DESCRIPTOR_REGULAR 6 # define OSD_PATCH_DESCRIPTOR_GREGORY_BASIS 9 # define OSD_PATCH_DESCRIPTOR_GREGORY_TRIANGLE 1 0 struct OsdPatchCoord { int arrayIndex ; int patchIndex ; int vertIndex ; float s ; float t ; } ; OSD_FUNCTION_STORAGE_CLASS OsdPatchCoord)",
    "insertText": "OsdPatchCoordInit(int arrayIndex, int patchIndex, int vertIndex, float s, float t)"
  },
  {
    "label": "OsdPatchArrayInit()",
    "kind": "Method",
    "detail": "Function (OsdPatchCoord coord ; coord . arrayIndex = arrayIndex ; coord . patchIndex = patchIndex ; coord . vertIndex = vertIndex ; coord . s = s ; coord . t = t ; return coord ; } struct OsdPatchArray { int regDesc ; int desc ; int numPatches ; int indexBase ; int stride ; int primitiveIdBase ; } ; OSD_FUNCTION_STORAGE_CLASS OsdPatchArray)",
    "insertText": "OsdPatchArrayInit(int regDesc, int desc, int numPatches, int indexBase, int stride, int primitiveIdBase)"
  },
  {
    "label": "OsdPatchParamInit()",
    "kind": "Method",
    "detail": "Function (OsdPatchArray array ; array . regDesc = regDesc ; array . desc = desc ; array . numPatches = numPatches ; array . indexBase = indexBase ; array . stride = stride ; array . primitiveIdBase = primitiveIdBase ; return array ; } struct OsdPatchParam { int field0 ; int field1 ; float sharpness ; } ; OSD_FUNCTION_STORAGE_CLASS OsdPatchParam)",
    "insertText": "OsdPatchParamInit(int field0, int field1, float sharpness)"
  },
  {
    "label": "OsdPatchParamGetFaceId()",
    "kind": "Method",
    "detail": "Function (OsdPatchParam param ; param . field0 = field0 ; param . field1 = field1 ; param . sharpness = sharpness ; return param ; } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetFaceId(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetU()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetU(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetV()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetV(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetTransition()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetTransition(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetBoundary()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetBoundary(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetNonQuadRoot()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetNonQuadRoot(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetDepth()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdPatchParamGetDepth(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamGetParamFraction()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS OSD_REAL)",
    "insertText": "OsdPatchParamGetParamFraction(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamIsRegular()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS bool)",
    "insertText": "OsdPatchParamIsRegular(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamIsTriangleRotated()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS bool)",
    "insertText": "OsdPatchParamIsTriangleRotated(OsdPatchParam param)"
  },
  {
    "label": "OsdPatchParamNormalize()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdPatchParamNormalize(OsdPatchParam param, OSD_INOUT_ARRAY(OSD_REAL, uv, 2))"
  },
  {
    "label": "OsdPatchParamGetParamFraction()",
    "kind": "Method",
    "detail": "Function (OSD_REAL fracInv = 1 . 0 f /)",
    "insertText": "OsdPatchParamGetParamFraction(param)"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (uv [ 0 ] = uv [ 0 ]* fracInv -)",
    "insertText": "OSD_REAL_CAST(OsdPatchParamGetU(param))"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (uv [ 1 ] = uv [ 1 ]* fracInv -)",
    "insertText": "OSD_REAL_CAST(OsdPatchParamGetV(param))"
  },
  {
    "label": "OsdPatchParamUnnormalize()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdPatchParamUnnormalize(OsdPatchParam param, OSD_INOUT_ARRAY(OSD_REAL, uv, 2))"
  },
  {
    "label": "uv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uv(uv[0] + OSD_REAL_CAST(OsdPatchParamGetU(param)))"
  },
  {
    "label": "uv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uv(uv[1] + OSD_REAL_CAST(OsdPatchParamGetV(param)))"
  },
  {
    "label": "OsdPatchParamNormalizeTriangle()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdPatchParamNormalizeTriangle(OsdPatchParam param, OSD_INOUT_ARRAY(OSD_REAL, uv, 2))"
  },
  {
    "label": "OsdPatchParamGetDepth()",
    "kind": "Method",
    "detail": "Function (int depthFactor = 1<<)",
    "insertText": "OsdPatchParamGetDepth(param)"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (uv [ 0 ] =)",
    "insertText": "OSD_REAL_CAST(depthFactor - OsdPatchParamGetU(param)) - (uv[0] * fracInv)"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (uv [ 1 ] =)",
    "insertText": "OSD_REAL_CAST(depthFactor - OsdPatchParamGetV(param)) - (uv[1] * fracInv)"
  },
  {
    "label": "OsdPatchParamNormalize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OsdPatchParamNormalize(param, uv)"
  },
  {
    "label": "OsdPatchParamUnnormalizeTriangle()",
    "kind": "Method",
    "detail": "Function (} } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdPatchParamUnnormalizeTriangle(OsdPatchParam param, OSD_INOUT_ARRAY(OSD_REAL, uv, 2))"
  },
  {
    "label": "uv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uv(OSD_REAL_CAST(depthFactor - OsdPatchParamGetU(param)) - uv[0])"
  },
  {
    "label": "uv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "uv(OSD_REAL_CAST(depthFactor - OsdPatchParamGetV(param)) - uv[1])"
  },
  {
    "label": "OsdPatchParamUnnormalize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OsdPatchParamUnnormalize(param, uv)"
  }
]