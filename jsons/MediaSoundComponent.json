[
  {
    "label": "FMediaAudioResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaAudioResampler"
  },
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "FMediaSoundComponentClockSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaSoundComponentClockSink"
  },
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "IMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaPlayer"
  },
  {
    "label": "UMediaPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaPlayer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaSoundComponentSpectralData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaSoundComponentSpectralData"
  },
  {
    "label": "FMediaSoundGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaSoundGenerator"
  },
  {
    "label": "FSoundGeneratorParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundGeneratorParams"
  },
  {
    "label": "UMediaSoundComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMediaSoundComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / SynthComponent . h \" # include \" Containers / Array . h \" # include \" HAL / CriticalSection . h \" # include \" MediaSampleQueue . h \" # include \" Misc / Timespan . h \" # include \" Templates / Atomic . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" DSP / SpectrumAnalyzer . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / EnvelopeFollower . h \" # include \" Sound / SoundClass . h \" # include \" Sound / SoundGenerator . h \" # include \" MediaAudioResampler . h \" # include \" MediaSoundComponent . generated . h \" class FMediaAudioResampler ; class FMediaPlayerFacade ; class FMediaSoundComponentClockSink ; class IMediaAudioSample ; class IMediaPlayer ; class UMediaPlayer ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Mono,Stereo,Surround } ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Min_64,Small_256,Medium_512,Large_1024,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"SpectralData\")"
  },
  {
    "label": "FMediaSoundGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class FMediaSoundGenerator : public ISoundGenerator { public : struct FSoundGeneratorParams { int32 SampleRate = 0 ; int32 NumChannels = 0 ; TSharedPtr<FMediaAudioSampleQueue,ESPMode::ThreadSafe> SampleQueue ; uint32 PreviousSampleQueueFlushCount = 0 ; bool bSpectralAnalysisEnabled = false ; bool bEnvelopeFollowingEnabled = false ; int32 EnvelopeFollowerAttackTime = 0 ; int32 EnvelopeFollowerReleaseTime = 0 ; Audio::FSpectrumAnalyzerSettings SpectrumAnalyzerSettings ; TArray<float> FrequenciesToAnalyze ; float CachedRate = 0 . 0 f ; FTimespan CachedTime ; FTimespan LastPlaySampleTime ; } ;)",
    "insertText": "FMediaSoundGenerator(FSoundGeneratorParams& InParams)"
  },
  {
    "label": "FMediaSoundGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMediaSoundGenerator()"
  },
  {
    "label": "OnEndGenerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndGenerate()"
  },
  {
    "label": "OnGenerateAudio()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnGenerateAudio(float* OutAudio, int32 NumSamples)"
  },
  {
    "label": "SetCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedData(float InCachedRate, const FTimespan& InCachedTime)"
  },
  {
    "label": "SetLastPlaySampleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastPlaySampleTime(const FTimespan& InLastPlaySampleTime)"
  },
  {
    "label": "SetEnableSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableSpectralAnalysis(bool bInSpectralAnlaysisEnabled)"
  },
  {
    "label": "SetEnableEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableEnvelopeFollowing(bool bInEnvelopeFollowingEnabled)"
  },
  {
    "label": "SetSpectrumAnalyzerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpectrumAnalyzerSettings(Audio::FSpectrumAnalyzerSettings::EFFTSize InFFTSize, const TArray<float>& InFrequenciesToAnalyze)"
  },
  {
    "label": "SetEnvelopeFollowingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnvelopeFollowingSettings(int32 InAttackTimeMsec, int32 InReleaseTimeMsec)"
  },
  {
    "label": "SetSampleQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleQueue(TSharedPtr<FMediaAudioSampleQueue, ESPMode::ThreadSafe>& InSampleQueue)"
  },
  {
    "label": "GetSpectralData()",
    "kind": "Method",
    "detail": "Function (TArray<FMediaSoundComponentSpectralData>)",
    "insertText": "GetSpectralData()"
  },
  {
    "label": "GetNormalizedSpectralData()",
    "kind": "Method",
    "detail": "Function (TArray<FMediaSoundComponentSpectralData>)",
    "insertText": "GetNormalizedSpectralData()"
  },
  {
    "label": "GetCurrentEnvelopeValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentEnvelopeValue()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} private : FSoundGeneratorParams Params ; FMediaAudioResampler Resampler ; Audio::AlignedFloatBuffer AudioScratchBuffer ; Audio::FAsyncSpectrumAnalyzer SpectrumAnalyzer ; Audio::FEnvelopeFollower EnvelopeFollower ; TAtomic<float> CachedRate ; TAtomic<FTimespan> CachedTime ; TAtomic<FTimespan> LastPlaySampleTime ; float CurrentEnvelopeValue = 0 . 0 f ; bool bEnvelopeFollowerSettingsChanged = false ; FCriticalSection AnalysisCritSect ; FCriticalSection SampleQueueCritSect ; } ;)",
    "insertText": "UCLASS(ClassGroup=Media, editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, Category=\"Media\")"
  },
  {
    "label": "UMediaSoundComponent()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UMediaSoundComponent(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "UMediaSoundComponent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UMediaSoundComponent()"
  },
  {
    "label": "GetSoundClass()",
    "kind": "Method",
    "detail": "Function (USoundClass*)",
    "insertText": "GetSoundClass()"
  },
  {
    "label": "AddClockSink()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddClockSink()"
  },
  {
    "label": "RemoveClockSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveClockSink()"
  },
  {
    "label": "UpdatePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlayer()"
  },
  {
    "label": "SetDefaultMediaPlayer()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetDefaultMediaPlayer(UMediaPlayer* NewMediaPlayer)"
  },
  {
    "label": "CollectAttenuationShapesForVisualization()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "CollectAttenuationShapesForVisualization(TMultiMap<EAttenuationShape::Type, FBaseAttenuationSettings::AttenuationShapeDetails>& ShapeDetailsMap)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Activate(bool bReset = false)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetSelectedAttenuationSettings()",
    "kind": "Method",
    "detail": "Function (# endif protected : const FSoundAttenuationSettings*)",
    "insertText": "GetSelectedAttenuationSettings()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Init(int32& SampleRate)"
  },
  {
    "label": "CreateSoundGenerator()",
    "kind": "Method",
    "detail": "Function (ISoundGeneratorPtr)",
    "insertText": "CreateSoundGenerator(const FSoundGeneratorInitParams& InParams)"
  }
]