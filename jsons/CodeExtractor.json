[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "RegionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNode"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CodeExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodeExtractor"
  },
  {
    "label": "CodeExtractor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TRANSFORMS_UTILS_CODEEXTRACTOR_H # define LLVM_TRANSFORMS_UTILS_CODEEXTRACTOR_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / SetVector . h \" namespace llvm { class BasicBlock ; class DominatorTree ; class Function ; class Loop ; class Module ; class RegionNode ; class Type ; class Value ; class CodeExtractor { typedef SetVector<Value*> ValueSet ; DominatorTree* const DT ; const bool AggregateArgs ; SetVector<BasicBlock*> Blocks ; unsigned NumExitBlocks ; Type* RetTy ; public :)",
    "insertText": "CodeExtractor(BasicBlock *BB, bool AggregateArgs = false)"
  },
  {
    "label": "CodeExtractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CodeExtractor(ArrayRef<BasicBlock *> BBs, DominatorTree *DT = nullptr, bool AggregateArgs = false)"
  },
  {
    "label": "CodeExtractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CodeExtractor(DominatorTree &DT, Loop &L, bool AggregateArgs = false)"
  },
  {
    "label": "CodeExtractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CodeExtractor(DominatorTree &DT, const RegionNode &RN, bool AggregateArgs = false)"
  },
  {
    "label": "extractCodeRegion()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "extractCodeRegion()"
  },
  {
    "label": "isEligible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEligible()"
  },
  {
    "label": "findInputsOutputs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "findInputsOutputs(ValueSet &Inputs, ValueSet &Outputs)"
  },
  {
    "label": "severSplitPHINodes()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "severSplitPHINodes(BasicBlock *&Header)"
  },
  {
    "label": "splitReturnBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitReturnBlocks()"
  },
  {
    "label": "constructFunction()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "constructFunction(const ValueSet &inputs, const ValueSet &outputs, BasicBlock *header, BasicBlock *newRootNode, BasicBlock *newHeader, Function *oldFunction, Module *M)"
  },
  {
    "label": "moveCodeToFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveCodeToFunction(Function *newFunction)"
  },
  {
    "label": "emitCallAndSwitchStatement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitCallAndSwitchStatement(Function *newFunction, BasicBlock *newHeader, ValueSet &inputs, ValueSet &outputs)"
  }
]