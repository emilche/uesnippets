[
  {
    "label": "assign_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "assign_op"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "add_assign_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "add_assign_op"
  },
  {
    "label": "sub_assign_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sub_assign_op"
  },
  {
    "label": "mul_assign_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mul_assign_op"
  },
  {
    "label": "div_assign_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "div_assign_op"
  },
  {
    "label": "swap_assign_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "swap_assign_op"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ASSIGNMENT_FUNCTORS_H # define EIGEN_ASSIGNMENT_FUNCTORS_H namespace Eigen { namespace internal { template<DstScalar,SrcScalar> struct assign_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(assign_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b)"
  },
  {
    "label": "assignPacket()",
    "kind": "Method",
    "detail": "Function (a = b ; } template<int Alignment,Packet> EIGEN_STRONG_INLINE void)",
    "insertText": "assignPacket(DstScalar* a, const Packet& b)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<DstScalar,Packet,)",
    "insertText": "Alignment(a,b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstScalar> struct assign_op<DstScalar,void> { } ; template<DstScalar,SrcScalar> struct functor_traits<assign_op<DstScalar,SrcScalar>> { enum { Cost = NumTraits<DstScalar>::ReadCost,PacketAccess = is_same<DstScalar,SrcScalar>::value&& packet_traits<DstScalar>::Vectorizable&& packet_traits<SrcScalar>::Vectorizable } ; } ; template<DstScalar,SrcScalar> struct add_assign_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(add_assign_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<DstScalar,Packet,)",
    "insertText": "Alignment(a,internal::padd(internal::ploadt<Packet,Alignment>(a),b))"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstScalar,SrcScalar> struct functor_traits<add_assign_op<DstScalar,SrcScalar>> { enum { Cost = NumTraits<DstScalar>::ReadCost + NumTraits<DstScalar>::AddCost,PacketAccess = is_same<DstScalar,SrcScalar>::value&& packet_traits<DstScalar>::HasAdd } ; } ; template<DstScalar,SrcScalar> struct sub_assign_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<DstScalar,Packet,)",
    "insertText": "Alignment(a,internal::psub(internal::ploadt<Packet,Alignment>(a),b))"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstScalar,SrcScalar> struct functor_traits<sub_assign_op<DstScalar,SrcScalar>> { enum { Cost = NumTraits<DstScalar>::ReadCost + NumTraits<DstScalar>::AddCost,PacketAccess = is_same<DstScalar,SrcScalar>::value&& packet_traits<DstScalar>::HasSub } ; } ; template<DstScalar,SrcScalar = DstScalar> struct mul_assign_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(mul_assign_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<DstScalar,Packet,)",
    "insertText": "Alignment(a,internal::pmul(internal::ploadt<Packet,Alignment>(a),b))"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstScalar,SrcScalar> struct functor_traits<mul_assign_op<DstScalar,SrcScalar>> { enum { Cost = NumTraits<DstScalar>::ReadCost + NumTraits<DstScalar>::MulCost,PacketAccess = is_same<DstScalar,SrcScalar>::value&& packet_traits<DstScalar>::HasMul } ; } ; template<DstScalar,SrcScalar = DstScalar> struct div_assign_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(div_assign_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b)"
  },
  {
    "label": "Alignment()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<DstScalar,Packet,)",
    "insertText": "Alignment(a,internal::pdiv(internal::ploadt<Packet,Alignment>(a),b))"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstScalar,SrcScalar> struct functor_traits<div_assign_op<DstScalar,SrcScalar>> { enum { Cost = NumTraits<DstScalar>::ReadCost + NumTraits<DstScalar>::MulCost,PacketAccess = is_same<DstScalar,SrcScalar>::value&& packet_traits<DstScalar>::HasDiv } ; } ; template<Scalar> struct swap_assign_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(swap_assign_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Scalar& a, const Scalar& b)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_GPUCC Scalar t = b ; const_cast<)",
    "insertText": "Scalar(b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (a = t ; # else using std::swap ;)",
    "insertText": "swap(a,const_cast<Scalar&>(b))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } } ; template<Scalar> struct functor_traits<swap_assign_op<Scalar>> { enum { Cost = 3* NumTraits<Scalar>::ReadCost,PacketAccess = # if)",
    "insertText": "defined(EIGEN_VECTORIZE_AVX) && EIGEN_COMP_CLANG && (EIGEN_COMP_CLANG<800 || defined(__apple_build_version__))"
  }
]