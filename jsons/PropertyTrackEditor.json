[
  {
    "label": "FPropertyTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyTrackEditor"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FPropertyTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Templates / SubclassOf . h \" # include \" KeyPropertyParams . h \" # include \" ISequencer . h \" # include \" MovieSceneTrack . h \" # include \" UObject / Package . h \" # include \" MovieSceneTrackEditor . h \" # include \" KeyframeTrackEditor . h \" # include \" ISequencerObjectChangeListener . h \" # include \" AnimatedPropertyKey . h \" # include \" Tracks / MovieScenePropertyTrack . h \" template<TrackType> class FPropertyTrackEditor : public FKeyframeTrackEditor<TrackType> { public :)",
    "insertText": "FPropertyTrackEditor(TSharedRef<ISequencer> InSequencer ) : FKeyframeTrackEditor<TrackType>( InSequencer)"
  },
  {
    "label": "FPropertyTrackEditor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyTrackEditor(TSharedRef<ISequencer> InSequencer, TArrayView<const FAnimatedPropertyKey> InWatchedPropertyTypes ) : FKeyframeTrackEditor<TrackType>( InSequencer)"
  },
  {
    "label": "AddWatchedProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWatchedProperty(Key)"
  },
  {
    "label": "FPropertyTrackEditor()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FPropertyTrackEditor()"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencer> SequencerPtr =)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetObjectChangeListener()",
    "kind": "Method",
    "detail": "Function (ISequencerObjectChangeListener& ObjectChangeListener = SequencerPtr ->)",
    "insertText": "GetObjectChangeListener()"
  },
  {
    "label": "GetOnAnimatablePropertyChanged()",
    "kind": "Method",
    "detail": "Function (ObjectChangeListener .)",
    "insertText": "GetOnAnimatablePropertyChanged(PropertyKey ).RemoveAll( this)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (} } } public : bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "GenerateKeysFromPropertyChanged()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "GenerateKeysFromPropertyChanged(const FPropertyChangedParams& PropertyChangedParams, UMovieSceneSection* SectionToKey, FGeneratedTrackKeys& OutGeneratedKeys)"
  },
  {
    "label": "ForCustomizedUseOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForCustomizedUseOnly()"
  },
  {
    "label": "GetLeafMostProperty()",
    "kind": "Method",
    "detail": "Function (const FProperty* ChangedProperty = PropertyChangedParams . PropertyPath .)",
    "insertText": "GetLeafMostProperty().Property.Get()"
  },
  {
    "label": "SetPropertyNameAndPath()",
    "kind": "Method",
    "detail": "Function (NewTrack ->)",
    "insertText": "SetPropertyNameAndPath(ChangedProperty->GetFName(), PropertyChangedParams.GetPropertyPathString())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FText DisplayText ;)",
    "insertText": "for(int32 PropertyIndex = PropertyChangedParams.PropertyPath.GetNumProperties() - 1; PropertyIndex >= 0; --PropertyIndex)"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo& Info = PropertyChangedParams . PropertyPath .)",
    "insertText": "GetPropertyInfo(PropertyIndex)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (const FArrayProperty* ParentArrayProperty = PropertyIndex> 0 ? CastField<)",
    "insertText": "FArrayProperty(PropertyChangedParams.PropertyPath.GetPropertyInfo(PropertyIndex - 1).Property.Get())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FProperty* ArrayInnerProperty = Info . Property .)",
    "insertText": "Get()"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (DisplayText =)",
    "insertText": "Format(NSLOCTEXT(\"PropertyTrackEditor\", \"DisplayTextArrayFormat\", \"{0} ({1}[{2}])\"), ChangedProperty->GetDisplayNameText(), (ParentArrayProperty ? ParentArrayProperty : ArrayInnerProperty)->GetDisplayNameText(), FText::AsNumber(Info.ArrayIndex))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(DisplayText.IsEmpty())"
  },
  {
    "label": "FStructProperty()",
    "kind": "Method",
    "detail": "Function (const FStructProperty* ParentStructProperty = PropertyIndex> 0 ? CastField<)",
    "insertText": "FStructProperty(PropertyChangedParams.PropertyPath.GetPropertyInfo(PropertyIndex - 1).Property.Get())"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (DisplayText =)",
    "insertText": "Format(NSLOCTEXT(\"PropertyTrackEditor\", \"DisplayTextStructFormat\", \"{0} ({1})\"), ChangedProperty->GetDisplayNameText(), ParentStructProperty->GetDisplayNameText())"
  },
  {
    "label": "GetDisplayNameText()",
    "kind": "Method",
    "detail": "Function (DisplayText = ChangedProperty ->)",
    "insertText": "GetDisplayNameText()"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (} NewTrack ->)",
    "insertText": "SetDisplayName(DisplayText)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (# endif } } UMovieSceneTrack*)",
    "insertText": "AddTrack(UMovieScene* FocusedMovieScene, const FGuid& ObjectHandle, TSubclassOf<class UMovieSceneTrack> TrackClass, FName UniqueTypeName)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTrack* Track = FocusedMovieScene ->)",
    "insertText": "AddTrack(TrackClass, ObjectHandle)"
  },
  {
    "label": "AddWatchedProperty()",
    "kind": "Method",
    "detail": "Function (PropertyTrack -> UniqueTrackName = UniqueTypeName ; } return Track ; } protected : void)",
    "insertText": "AddWatchedProperty(FAnimatedPropertyKey PropertyKey)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSequencer()->GetObjectChangeListener().GetOnAnimatablePropertyChanged( PropertyKey ).AddRaw( this, &FPropertyTrackEditor::OnAnimatedPropertyChanged)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (WatchedProperties .)",
    "insertText": "Add(PropertyKey)"
  },
  {
    "label": "OnAnimatedPropertyChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAnimatedPropertyChanged(const FPropertyChangedParams& PropertyChangedParams)"
  },
  {
    "label": "AnimatablePropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnimatablePropertyChanged(FOnKeyProperty::CreateRaw( this, &FPropertyTrackEditor::OnKeyProperty, PropertyChangedParams ))"
  },
  {
    "label": "AddWatchedPropertyType()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddWatchedPropertyType(FName WatchedPropertyTypeName)"
  },
  {
    "label": "AddWatchedProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWatchedProperty(FAnimatedPropertyKey::FromPropertyTypeName(WatchedPropertyTypeName))"
  },
  {
    "label": "GetCustomizedTrackClass()",
    "kind": "Method",
    "detail": "Function (} TSubclassOf<UMovieSceneTrack>)",
    "insertText": "GetCustomizedTrackClass(const FProperty* Property)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FString& MetaSequencerTrackClass = Property ->)",
    "insertText": "GetMetaData(TEXT( \"SequencerTrackClass\" ))"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (UClass* MetaClass = UClass::TryFindTypeSlow<)",
    "insertText": "UClass(MetaSequencerTrackClass)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (MetaClass = LoadObject<)",
    "insertText": "UClass(nullptr, *MetaSequencerTrackClass)"
  },
  {
    "label": "OnKeyProperty()",
    "kind": "Method",
    "detail": "Function (} return MetaClass ; } return nullptr ; } FKeyPropertyResult)",
    "insertText": "OnKeyProperty(FFrameNumber KeyTime, FPropertyChangedParams PropertyChangedParams)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UMovieSceneTrack> TrackClass ;)",
    "insertText": "if(CustomizedClass != nullptr)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (TrackClass = CustomizedClass ; } else { TrackClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "UniqueName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "UniqueName(*PropertyChangedParams.PropertyPath.ToString(TEXT(\".\")))"
  },
  {
    "label": "PropertyChangedParams()",
    "kind": "Method",
    "detail": "Function (auto GenerateKeys = [ this,)",
    "insertText": "PropertyChangedParams(UMovieSceneSection* Section, FGeneratedTrackKeys& OutGeneratedKeys)"
  },
  {
    "label": "GenerateKeysFromPropertyChanged()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "GenerateKeysFromPropertyChanged(PropertyChangedParams, Section, OutGeneratedKeys)"
  },
  {
    "label": "AddKeysToObjects()",
    "kind": "Method",
    "detail": "Function (} ; return this ->)",
    "insertText": "AddKeysToObjects(PropertyChangedParams.ObjectsThatChanged, KeyTime, PropertyChangedParams.KeyMode, TrackClass, UniqueName, [&](TrackType* NewTrack) { InitializeNewTrack(NewTrack, PropertyChangedParams); }, GenerateKeys)"
  }
]