[
  {
    "label": "SDlgPickPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDlgPickPath"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWindow . h \" # define LOCTEXT_NAMESPACE \" DlgPickPath \" class SDlgPickPath : public SWindow { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDlgPickPath) : _AllowReadOnlyFolders(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FText, Title) SLATE_ARGUMENT(FText, DefaultPath) SLATE_ARGUMENT(bool, AllowReadOnlyFolders) SLATE_END_ARGS() SDlgPickPath() : UserResponse(EAppReturnType::Cancel)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type)",
    "insertText": "ShowModal()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetPath()"
  },
  {
    "label": "OnPathChange()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPathChange(const FString& NewPath)"
  },
  {
    "label": "OnButtonClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClick(EAppReturnType::Type ButtonID)"
  },
  {
    "label": "ValidatePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePath()"
  }
]