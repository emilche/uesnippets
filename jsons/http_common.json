[
  {
    "label": "CryptString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CryptString"
  },
  {
    "label": "SocketAddress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketAddress"
  },
  {
    "label": "HttpAuthContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HttpAuthContext"
  },
  {
    "label": "HttpAuthResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HttpAuthResult"
  },
  {
    "label": "HttpAuthContext()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_HTTP_COMMON_H_ # define RTC_BASE_HTTP_COMMON_H_ # include<string> # include \" absl / strings / string_view . h \" namespace rtc { class CryptString ; class SocketAddress ; struct HttpAuthContext { std::string auth_method ;)",
    "insertText": "HttpAuthContext(absl::string_view auth) : auth_method(auth)"
  },
  {
    "label": "HttpAuthContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "HttpAuthContext()"
  },
  {
    "label": "HttpAuthenticate()",
    "kind": "Method",
    "detail": "Function (} } ; enum HttpAuthResult { HAR_RESPONSE,HAR_IGNORE,HAR_CREDENTIALS,HAR_ERROR } ; HttpAuthResult)",
    "insertText": "HttpAuthenticate(absl::string_view challenge, const SocketAddress& server, absl::string_view method, absl::string_view uri, absl::string_view username, const CryptString& password, HttpAuthContext*& context, std::string& response, std::string& auth_method)"
  }
]