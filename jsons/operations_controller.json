[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "OperationToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OperationToken"
  },
  {
    "label": "OperationsController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OperationsController"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "OperationToken()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_COMMON_OPERATIONS_CONTROLLER_H_ # define BASE_TASK_COMMON_OPERATIONS_CONTROLLER_H_ # include<atomic> # include<cstdint> # include \" base / base_export . h \" # include \" base / memory / raw_ptr_exclusion . h \" # include \" base / synchronization / waitable_event . h \" namespace base { namespace internal { class BASE_EXPORT OperationsController { public : class OperationToken { public : ~)",
    "insertText": "OperationToken()"
  },
  {
    "label": "OperationToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OperationToken(const OperationToken&)"
  },
  {
    "label": "OperationToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OperationToken(OperationToken&& other)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (this -> outer_ = other . outer_ ; other . outer_ = nullptr ; } operator)",
    "insertText": "bool()"
  },
  {
    "label": "OperationsController()",
    "kind": "Method",
    "detail": "Function (} RAW_PTR_EXCLUSION OperationsController* outer_ ; } ;)",
    "insertText": "OperationsController()"
  },
  {
    "label": "OperationsController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OperationsController(const OperationsController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OperationsController&)",
    "insertText": "operator(const OperationsController&)"
  },
  {
    "label": "StartAcceptingOperations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAcceptingOperations()"
  },
  {
    "label": "TryBeginOperation()",
    "kind": "Method",
    "detail": "Function (OperationToken)",
    "insertText": "TryBeginOperation()"
  },
  {
    "label": "ShutdownAndWaitForZeroOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownAndWaitForZeroOperations()"
  },
  {
    "label": "kFlagsBitMask()",
    "kind": "Method",
    "detail": "Function (private : uint32_t kShuttingDownBitMask = uint32_t { 1 }<<3 1 ; uint32_t kAcceptingOperationsBitMask = uint32_t { 1 }<<3 0 ; uint32_t)",
    "insertText": "kFlagsBitMask(kShuttingDownBitMask | kAcceptingOperationsBitMask)"
  },
  {
    "label": "ExtractCount()",
    "kind": "Method",
    "detail": "Function (uint32_t kCountBitMask = ~ kFlagsBitMask ; enum class State { kRejectingOperations,kAcceptingOperations,kShuttingDown,} ; uint32_t)",
    "insertText": "ExtractCount(uint32_t value)"
  },
  {
    "label": "DecrementBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementBy(uint32_t n)"
  }
]