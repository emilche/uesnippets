[
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UVirtualTextureBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVirtualTextureBuilder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "URuntimeVirtualTextureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTextureComponent"
  },
  {
    "label": "FRuntimeVirtualTextureSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRuntimeVirtualTextureSceneProxy"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / TextureDefines . h \" # include \" UObject / PerPlatformProperties . h \" # include \" RenderCommandFence . h \" # include \" SceneComponent . h \" # include \" SceneTypes . h \" # include \" RuntimeVirtualTextureComponent . generated . h \" class URuntimeVirtualTexture ; class UTexture2D ; class UVirtualTextureBuilder ; enum class EShadingPath ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Low = 0,Medium = 1,High = 2,Epic = 3,} ;)",
    "insertText": "UCLASS(Blueprintable, ClassGroup = Rendering, HideCategories = (Activation, Collision, Cooking, HLOD, Mobility, LOD, Navigation, Object, Physics), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY(EditAnywhere, Category = VolumeBounds)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FDelegateHandle PieEndDelegateHandle ; # endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FGetHidePrimitivesDelegate, bool&, bool&)"
  },
  {
    "label": "SetVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualTexture(URuntimeVirtualTexture* InVirtualTexture)"
  },
  {
    "label": "GetVirtualTexture()",
    "kind": "Method",
    "detail": "Function (URuntimeVirtualTexture*)",
    "insertText": "GetVirtualTexture()"
  },
  {
    "label": "IsScalable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScalable()"
  },
  {
    "label": "GetStreamingTexture()",
    "kind": "Method",
    "detail": "Function (UVirtualTextureBuilder*)",
    "insertText": "GetStreamingTexture()"
  },
  {
    "label": "IsStreamingLowMips()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStreamingLowMips(EShadingPath ShadingPath)"
  },
  {
    "label": "IsStreamingLowMipsOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingLowMipsOnly()"
  },
  {
    "label": "GetStreamingMipsFixedColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetStreamingMipsFixedColor()"
  },
  {
    "label": "GetLossyCompressionAmount()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte<ETextureLossyCompressionAmount>)",
    "insertText": "GetLossyCompressionAmount()"
  },
  {
    "label": "IsStreamingTextureInvalid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsStreamingTextureInvalid()"
  },
  {
    "label": "SetStreamingTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamingTexture(UVirtualTextureBuilder* InTexture)"
  },
  {
    "label": "InitializeStreamingTexture()",
    "kind": "Method",
    "detail": "Function (StreamingTexture = InTexture ; } void)",
    "insertText": "InitializeStreamingTexture(EShadingPath ShadingPath, uint32 InSizeX, uint32 InSizeY, uint8* InData)"
  },
  {
    "label": "SetBoundsAlignActor()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "SetBoundsAlignActor(AActor* InActor)"
  },
  {
    "label": "GetBoundsAlignActor()",
    "kind": "Method",
    "detail": "Function (TSoftObjectPtr<AActor>&)",
    "insertText": "GetBoundsAlignActor()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "ShouldCreateRenderState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateRenderState()"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "SendRenderTransform_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransform_Concurrent()"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CheckForErrors()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (# endif FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "CalculateStreamingTextureSettingsHash()",
    "kind": "Method",
    "detail": "Function (protected : uint64)",
    "insertText": "CalculateStreamingTextureSettingsHash()"
  },
  {
    "label": "IsActiveInWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActiveInWorld()"
  }
]