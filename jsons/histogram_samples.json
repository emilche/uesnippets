[
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "SampleCountIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleCountIterator"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SingleSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SingleSample"
  },
  {
    "label": "Metadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Metadata"
  },
  {
    "label": "NegativeSampleReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NegativeSampleReason"
  },
  {
    "label": "Operator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Operator"
  },
  {
    "label": "AtomicSingleSample()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_HISTOGRAM_SAMPLES_H_ # define BASE_METRICS_HISTOGRAM_SAMPLES_H_ # include<stddef . h> # include<stdint . h> # include<limits> # include<memory> # include<string> # include \" base / atomicops . h \" # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / metrics / histogram_base . h \" namespace base { class Pickle ; class PickleIterator ; class SampleCountIterator ; class BASE_EXPORT HistogramSamples { public : struct SingleSample { uint16_t bucket ; uint16_t count ; } ; union BASE_EXPORT AtomicSingleSample {)",
    "insertText": "AtomicSingleSample() : as_atomic(0)"
  },
  {
    "label": "AtomicSingleSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicSingleSample(subtle::Atomic32 rhs) : as_atomic(rhs)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} SingleSample)",
    "insertText": "Load()"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (SingleSample)",
    "insertText": "Extract(bool disable)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Accumulate(size_t bucket, HistogramBase::Count count)"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisabled()"
  },
  {
    "label": "LocalMetadata()",
    "kind": "Method",
    "detail": "Function (private : SingleSample as_parts ; subtle::Atomic32 as_atomic ; } ; struct Metadata { size_t kExpectedInstanceSize = 2 4 ; uint64_t id ; # ifdef ARCH_CPU_64_BITS subtle::Atomic64 sum ; # else int64_t sum ; # endif HistogramBase::AtomicCount redundant_count { 0 } ; AtomicSingleSample single_sample ; } ; struct BASE_EXPORT LocalMetadata : Metadata {)",
    "insertText": "LocalMetadata()"
  },
  {
    "label": "HistogramSamples()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "HistogramSamples(const HistogramSamples&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HistogramSamples&)",
    "insertText": "operator(const HistogramSamples&)"
  },
  {
    "label": "HistogramSamples()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HistogramSamples()"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulate(HistogramBase::Sample value, HistogramBase::Count count)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "GetCount(HistogramBase::Sample value)"
  },
  {
    "label": "TotalCount()",
    "kind": "Method",
    "detail": "Function (HistogramBase::Count)",
    "insertText": "TotalCount()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const HistogramSamples& other)"
  },
  {
    "label": "AddFromPickle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFromPickle(PickleIterator* iter)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtract(const HistogramSamples& other)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SampleCountIterator>)",
    "insertText": "Iterator()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Pickle* pickle)"
  },
  {
    "label": "ToGraphDict()",
    "kind": "Method",
    "detail": "Function (base::Value::Dict)",
    "insertText": "ToGraphDict(StringPiece histogram_name, int32_t flags)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "id()"
  },
  {
    "label": "NoBarrier_Load()",
    "kind": "Method",
    "detail": "Function (# ifdef ARCH_CPU_64_BITS return)",
    "insertText": "NoBarrier_Load(&meta_->sum)"
  },
  {
    "label": "redundant_count()",
    "kind": "Method",
    "detail": "Function (# else return meta_ -> sum ; # endif } HistogramBase::Count)",
    "insertText": "redundant_count()"
  },
  {
    "label": "HistogramSamples()",
    "kind": "Method",
    "detail": "Function (} protected : enum NegativeSampleReason { SAMPLES_HAVE_LOGGED_BUT_NOT_SAMPLE,SAMPLES_SAMPLE_LESS_THAN_LOGGED,SAMPLES_ADDED_NEGATIVE_COUNT,SAMPLES_ADD_WENT_NEGATIVE,SAMPLES_ADD_OVERFLOW,SAMPLES_ACCUMULATE_NEGATIVE_COUNT,SAMPLES_ACCUMULATE_WENT_NEGATIVE,DEPRECATED_SAMPLES_ACCUMULATE_OVERFLOW,SAMPLES_ACCUMULATE_OVERFLOW,MAX_NEGATIVE_SAMPLE_REASONS } ;)",
    "insertText": "HistogramSamples(uint64_t id, Metadata* meta)"
  },
  {
    "label": "HistogramSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramSamples(uint64_t id, std::unique_ptr<Metadata> meta)"
  },
  {
    "label": "AddSubtractImpl()",
    "kind": "Method",
    "detail": "Function (enum Operator { ADD,SUBTRACT } ; bool)",
    "insertText": "AddSubtractImpl(SampleCountIterator* iter, Operator op)"
  },
  {
    "label": "AccumulateSingleSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AccumulateSingleSample(HistogramBase::Sample value, HistogramBase::Count count, size_t bucket)"
  },
  {
    "label": "IncreaseSumAndCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseSumAndCount(int64_t sum, HistogramBase::Count count)"
  },
  {
    "label": "RecordNegativeSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNegativeSample(NegativeSampleReason reason, HistogramBase::Count increment)"
  },
  {
    "label": "single_sample()",
    "kind": "Method",
    "detail": "Function (AtomicSingleSample&)",
    "insertText": "single_sample()"
  },
  {
    "label": "WriteAsciiBucketValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAsciiBucketValue(HistogramBase::Count current, double scaled_sum, std::string* output)"
  },
  {
    "label": "GetAsciiBody()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAsciiBody()"
  },
  {
    "label": "GetAsciiHeader()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAsciiHeader(StringPiece histogram_name, int32_t flags)"
  },
  {
    "label": "GetSimpleAsciiBucketRange()",
    "kind": "Method",
    "detail": "Function (const std::string)",
    "insertText": "GetSimpleAsciiBucketRange(HistogramBase::Sample sample)"
  },
  {
    "label": "meta()",
    "kind": "Method",
    "detail": "Function (Metadata*)",
    "insertText": "meta()"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Done()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Next()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(HistogramBase::Sample* min, int64_t* max, HistogramBase::Count* count)"
  },
  {
    "label": "GetBucketIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBucketIndex(size_t* index)"
  },
  {
    "label": "SingleSampleIterator()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT SingleSampleIterator : public SampleCountIterator { public :)",
    "insertText": "SingleSampleIterator(HistogramBase::Sample min, int64_t max, HistogramBase::Count count)"
  },
  {
    "label": "SingleSampleIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SingleSampleIterator(HistogramBase::Sample min, int64_t max, HistogramBase::Count count, size_t bucket_index)"
  },
  {
    "label": "SingleSampleIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SingleSampleIterator()"
  }
]