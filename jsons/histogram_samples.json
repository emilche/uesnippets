[
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "SampleCountIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleCountIterator"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SingleSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SingleSample"
  },
  {
    "label": "Metadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Metadata"
  },
  {
    "label": "exists",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "exists"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "NegativeSampleReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NegativeSampleReason"
  },
  {
    "label": "Operator",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Operator"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (SingleSample)",
    "insertText": "Extract(bool disable)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Accumulate(size_t bucket, HistogramBase::Count count)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const HistogramSamples& other)"
  },
  {
    "label": "AddFromPickle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFromPickle(PickleIterator* iter)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtract(const HistogramSamples& other)"
  },
  {
    "label": "AccumulateSingleSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AccumulateSingleSample(HistogramBase::Sample value,\n                              HistogramBase::Count count,\n                              size_t bucket)"
  },
  {
    "label": "IncreaseSumAndCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseSumAndCount(int64_t sum, HistogramBase::Count count)"
  },
  {
    "label": "RecordNegativeSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordNegativeSample(NegativeSampleReason reason,\n                            HistogramBase::Count increment)"
  },
  {
    "label": "SingleSampleIterator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SingleSampleIterator(HistogramBase::Sample min,\n                       int64_t max,\n                       HistogramBase::Count count)"
  }
]