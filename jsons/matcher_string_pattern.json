[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ID()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SUBSTRING_SET_MATCHER_MATCHER_STRING_PATTERN_H_ # define BASE_SUBSTRING_SET_MATCHER_MATCHER_STRING_PATTERN_H_ # include<string> # include \" base / base_export . h \" namespace base { class BASE_EXPORT MatcherStringPattern { public : using ID = size_t ; ID kInvalidId = static_cast<)",
    "insertText": "ID(-1)"
  },
  {
    "label": "MatcherStringPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatcherStringPattern(std::string pattern, ID id)"
  },
  {
    "label": "MatcherStringPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatcherStringPattern(const MatcherStringPattern&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MatcherStringPattern&)",
    "insertText": "operator(const MatcherStringPattern&)"
  },
  {
    "label": "MatcherStringPattern()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MatcherStringPattern()"
  },
  {
    "label": "MatcherStringPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatcherStringPattern(MatcherStringPattern&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MatcherStringPattern&)",
    "insertText": "operator(MatcherStringPattern&&)"
  },
  {
    "label": "pattern()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "pattern()"
  }
]