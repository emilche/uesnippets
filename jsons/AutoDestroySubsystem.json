[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FLatentActionManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionManager"
  },
  {
    "label": "UAutoDestroySubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAutoDestroySubsystem"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Subsystems / WorldSubsystem . h \" # include \" Stats / Stats . h \" # include \" Engine / EngineTypes . h \" # include \" AutoDestroySubsystem . generated . h \" class AActor ; struct FLatentActionManager ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: bool RegisterActor(AActor* ActorToRegister)"
  },
  {
    "label": "UnregisterActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterActor(AActor* ActorToRemove)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (protected : ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "CheckLatentActionsOnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckLatentActionsOnActor(FLatentActionManager& LatentActionManager, AActor* ActorToCheck, float WorldDeltaTime)"
  },
  {
    "label": "ActorComponentsAreReadyForDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActorComponentsAreReadyForDestroy(AActor* const ActorToCheck)"
  }
]