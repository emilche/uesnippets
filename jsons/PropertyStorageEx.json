[
  {
    "label": "AMF_PROPERTY_CONTENT_ENUM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_PROPERTY_CONTENT_ENUM"
  },
  {
    "label": "AMF_PROPERTY_ACCESS_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_PROPERTY_ACCESS_TYPE"
  },
  {
    "label": "AMFEnumDescriptionEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFEnumDescriptionEntry"
  },
  {
    "label": "AMFPropertyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyInfo"
  },
  {
    "label": "AMF_NO_VTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AMF_NO_VTABLE"
  },
  {
    "label": "AMFPropertyStorageEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyStorageEx"
  },
  {
    "label": "AMFPropertyStorageExVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyStorageExVtbl"
  },
  {
    "label": "AMF_RESULT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_RESULT"
  },
  {
    "label": "AMFGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFGuid"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef AMF_PropertyStorageEx_h # define AMF_PropertyStorageEx_h # pragma once # include \" PropertyStorage . h \" # if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "AMF_PROPERTY_ACCESS_READ_WRITE()",
    "kind": "Method",
    "detail": "Function (# endif typedef enum AMF_PROPERTY_CONTENT_ENUM { AMF_PROPERTY_CONTENT_DEFAULT = 0,AMF_PROPERTY_CONTENT_XML,AMF_PROPERTY_CONTENT_FILE_OPEN_PATH,AMF_PROPERTY_CONTENT_FILE_SAVE_PATH,AMF_PROPERTY_CONTENT_INTEGER_ARRAY,AMF_PROPERTY_CONTENT_FLOAT_ARRAY } AMF_PROPERTY_CONTENT_ENUM ; typedef enum AMF_PROPERTY_ACCESS_TYPE { AMF_PROPERTY_ACCESS_PRIVATE = 0,AMF_PROPERTY_ACCESS_READ = 0 x1,AMF_PROPERTY_ACCESS_WRITE = 0 x2,)",
    "insertText": "AMF_PROPERTY_ACCESS_READ_WRITE(AMF_PROPERTY_ACCESS_READ | AMF_PROPERTY_ACCESS_WRITE), AMF_PROPERTY_ACCESS_WRITE_RUNTIME = 0x4, AMF_PROPERTY_ACCESS_FULL = 0xFF, AMF_PROPERTY_ACCESS_NON_PERSISTANT = 0x4000, AMF_PROPERTY_ACCESS_NON_PERSISTANT_READ = (AMF_PROPERTY_ACCESS_NON_PERSISTANT | AMF_PROPERTY_ACCESS_READ), AMF_PROPERTY_ACCESS_NON_PERSISTANT_READ_WRITE = (AMF_PROPERTY_ACCESS_NON_PERSISTANT | AMF_PROPERTY_ACCESS_READ_WRITE), AMF_PROPERTY_ACCESS_NON_PERSISTANT_FULL = (AMF_PROPERTY_ACCESS_NON_PERSISTANT | AMF_PROPERTY_ACCESS_FULL)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef struct AMFEnumDescriptionEntry { amf_int value ; const wchar_t* name ; } AMFEnumDescriptionEntry ; typedef amf_uint32 AMF_PROPERTY_CONTENT_TYPE ; typedef struct AMFPropertyInfo { const wchar_t* name ; const wchar_t* desc ; AMF_VARIANT_TYPE type ; AMF_PROPERTY_CONTENT_TYPE contentType ; AMFVariantStruct defaultValue ; AMFVariantStruct minValue ; AMFVariantStruct maxValue ; AMF_PROPERTY_ACCESS_TYPE accessType ; const AMFEnumDescriptionEntry* pEnumDescription ; # if)",
    "insertText": "defined(__cplusplus) AMFPropertyInfo() : name(NULL), desc(NULL), type(), contentType(), defaultValue(), minValue(), maxValue(), accessType(AMF_PROPERTY_ACCESS_FULL), pEnumDescription(NULL)"
  },
  {
    "label": "AMFPropertyInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AMFPropertyInfo(const AMFPropertyInfo& propery) : name(propery.name), desc(propery.desc), type(propery.type), contentType(propery.contentType), defaultValue(propery.defaultValue), minValue(propery.minValue), maxValue(propery.maxValue), accessType(propery.accessType), pEnumDescription(propery.pEnumDescription)"
  },
  {
    "label": "AMFPropertyInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "AMFPropertyInfo()"
  },
  {
    "label": "AllowedRead()",
    "kind": "Method",
    "detail": "Function (} amf_bool AMF_STD_CALL)",
    "insertText": "AllowedRead()"
  },
  {
    "label": "AllowedWrite()",
    "kind": "Method",
    "detail": "Function (} amf_bool AMF_STD_CALL)",
    "insertText": "AllowedWrite()"
  },
  {
    "label": "AllowedChangeInRuntime()",
    "kind": "Method",
    "detail": "Function (} amf_bool AMF_STD_CALL)",
    "insertText": "AllowedChangeInRuntime()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AMFPropertyInfo&)",
    "insertText": "operator(const AMFPropertyInfo& propery)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AMF_DECLARE_IID(0x16b8958d, 0xe943, 0x4a33, 0xa3, 0x5a, 0x88, 0x5a, 0xd8, 0x28, 0xf2, 0x67) virtual amf_size AMF_STD_CALL GetPropertiesInfoCount()"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetPropertyInfo(amf_size index, const AMFPropertyInfo** ppInfo)"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetPropertyInfo(const wchar_t* name, const AMFPropertyInfo** ppInfo)"
  },
  {
    "label": "ValidateProperty()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "ValidateProperty(const wchar_t* name, AMFVariantStruct value, AMFVariantStruct* pOutValidated)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (} ; typedef AMFInterfacePtr_T<AMFPropertyStorageEx> AMFPropertyStorageExPtr ; # else)",
    "insertText": "AMF_DECLARE_IID(AMFPropertyStorageEx, 0x16b8958d, 0xe943, 0x4a33, 0xa3, 0x5a, 0x88, 0x5a, 0xd8, 0x28, 0xf2, 0x67)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (typedef struct AMFPropertyStorageExVtbl {)",
    "insertText": "amf_long(AMF_STD_CALL *Acquire)(AMFPropertyStorageEx* pThis)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_long(AMF_STD_CALL *Release)(AMFPropertyStorageEx* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *QueryInterface)(AMFPropertyStorageEx* pThis, const struct AMFGuid *interfaceID, void** ppInterface)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *SetProperty)(AMFPropertyStorageEx* pThis, const wchar_t* name, AMFVariantStruct value)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetProperty)(AMFPropertyStorageEx* pThis, const wchar_t* name, AMFVariantStruct* pValue)"
  },
  {
    "label": "amf_bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_bool(AMF_STD_CALL *HasProperty)(AMFPropertyStorageEx* pThis, const wchar_t* name)"
  },
  {
    "label": "amf_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_size(AMF_STD_CALL *GetPropertyCount)(AMFPropertyStorageEx* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetPropertyAt)(AMFPropertyStorageEx* pThis, amf_size index, wchar_t* name, amf_size nameSize, AMFVariantStruct* pValue)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *Clear)(AMFPropertyStorageEx* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *AddTo)(AMFPropertyStorageEx* pThis, AMFPropertyStorage* pDest, amf_bool overwrite, amf_bool deep)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyTo)(AMFPropertyStorageEx* pThis, AMFPropertyStorage* pDest, amf_bool deep)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *AddObserver)(AMFPropertyStorageEx* pThis, AMFPropertyStorageObserver* pObserver)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *RemoveObserver)(AMFPropertyStorageEx* pThis, AMFPropertyStorageObserver* pObserver)"
  },
  {
    "label": "amf_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_size(AMF_STD_CALL *GetPropertiesInfoCount)(AMFPropertyStorageEx* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetPropertyInfoAt)(AMFPropertyStorageEx* pThis, amf_size index, const AMFPropertyInfo** ppInfo)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetPropertyInfo)(AMFPropertyStorageEx* pThis, const wchar_t* name, const AMFPropertyInfo** ppInfo)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *ValidateProperty)(AMFPropertyStorageEx* pThis, const wchar_t* name, AMFVariantStruct value, AMFVariantStruct* pOutValidated)"
  }
]