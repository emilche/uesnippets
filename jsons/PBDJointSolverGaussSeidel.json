[
  {
    "label": "FPBDJointSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSolver"
  },
  {
    "label": "Body()",
    "kind": "Method",
    "detail": "Function (class FPBDJointSolver { public : const int32 MaxConstrainedBodies = 2 ; FConstraintSolverBody&)",
    "insertText": "Body(int32 BodyIndex)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} const FRotation3&)",
    "insertText": "R(int BodyIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "P(int BodyIndex)"
  },
  {
    "label": "Q()",
    "kind": "Method",
    "detail": "Function (} const FRotation3)",
    "insertText": "Q(int BodyIndex)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "V(int BodyIndex)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "W(int BodyIndex)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "InvM(int32 BodyIndex)"
  },
  {
    "label": "GetNetLinearImpulse()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetNetLinearImpulse()"
  },
  {
    "label": "SetSolverBodies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSolverBodies(FSolverBody* SolverBody0, FSolverBody* SolverBody1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (SolverBodies [ 0 ] =* SolverBody0 ; SolverBodies [ 1 ] =* SolverBody1 ; } void)",
    "insertText": "Init(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FRigidTransform3& XL0, const FRigidTransform3& XL1)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "UpdateMasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMasses(const FReal InvMassScale0, const FReal InvMassScale1)"
  },
  {
    "label": "ApplyConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConstraints(const FReal Dt, const FReal InSolverStiffness, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityConstraints(const FReal Dt, const FReal InSolverStiffness, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyProjections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProjections(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bLastIteration)"
  },
  {
    "label": "SetShockPropagationScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShockPropagationScales(const FReal InvMScale0, const FReal InvMScale1, const FReal Dt)"
  },
  {
    "label": "SetIsBroken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsBroken(const bool bInIsBroken)"
  },
  {
    "label": "IsBroken()",
    "kind": "Method",
    "detail": "Function (bIsBroken = bInIsBroken ; } bool)",
    "insertText": "IsBroken()"
  },
  {
    "label": "IsViolating()",
    "kind": "Method",
    "detail": "Function (bIsViolating = bInIsViolating ; } bool)",
    "insertText": "IsViolating()"
  },
  {
    "label": "InitDerivedState()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "InitDerivedState()"
  },
  {
    "label": "UpdateDerivedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDerivedState(const int32 BodyIndex)"
  },
  {
    "label": "UpdateDerivedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDerivedState()"
  },
  {
    "label": "UpdateMass0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMass0()"
  },
  {
    "label": "UpdateMass1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMass1()"
  },
  {
    "label": "ApplyPositionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraints(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyRotationConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraints(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPositionDrives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionDrives(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyRotationDrives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationDrives(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyLinearVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLinearVelocityConstraints(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyAngularVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAngularVelocityConstraints(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPositionDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionDelta(const int32 BodyIndex, const FVec3& DP)"
  },
  {
    "label": "ApplyPositionDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionDelta(const FVec3& DP0, const FVec3& DP1)"
  },
  {
    "label": "ApplyRotationDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationDelta(const int32 BodyIndex, const FVec3& DR)"
  },
  {
    "label": "ApplyRotationDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationDelta(const FVec3& DR0, const FVec3& DR1)"
  },
  {
    "label": "ApplyDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDelta(const int32 BodyIndex, const FVec3& DP, const FVec3& DR1)"
  },
  {
    "label": "ApplyVelocityDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityDelta(const int32 BodyIndex, const FVec3& DV, const FVec3& DW)"
  },
  {
    "label": "ApplyVelocityDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityDelta(const FVec3& DV0, const FVec3& DW0, const FVec3& DV1, const FVec3& DW1)"
  },
  {
    "label": "ApplyAngularVelocityDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAngularVelocityDelta(const FVec3& DW0, const FVec3& DW1)"
  },
  {
    "label": "ApplyPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraint(const FReal JointStiffness, const FVec3& Axis, const FReal Delta, const FVec3& Connector0Correction = FVec3(0), const int32 LinearHardLambdaIndex = -1)"
  },
  {
    "label": "ApplyPositionConstraintSoft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionConstraintSoft(const FReal Dt, const FReal JointStiffness, const FReal JointDamping, const bool bAccelerationMode, const FVec3& Axis, const FReal Delta, const FReal TargetVel, FReal& Lambda)"
  },
  {
    "label": "ApplyRotationConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraint(const FReal JointStiffness, const FVec3& Axis, const FReal Angle, const int32 AngularHardLambdaIndex = -1)"
  },
  {
    "label": "ApplyRotationConstraintKD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraintKD(const int32 KIndex, const int32 DIndex, const FReal JointStiffness, const FVec3& Axis, const FReal Angle, const int32 AngularHardLambdaIndex = -1)"
  },
  {
    "label": "ApplyRotationConstraintDD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraintDD(const FReal JointStiffness, const FVec3& Axis, const FReal Angle, const int32 AngularHardLambdaIndex = -1)"
  },
  {
    "label": "ApplyRotationConstraintSoft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraintSoft(const FReal Dt, const FReal JointStiffness, const FReal JointDamping, const bool bAccelerationMode, const FVec3& Axis, const FReal Angle, const FReal AngVelTarget, const FReal LambdaLimit, FReal& Lambda)"
  },
  {
    "label": "ApplyRotationConstraintSoftKD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraintSoftKD(const int32 KIndex, const int32 DIndex, const FReal Dt, const FReal JointStiffness, const FReal JointDamping, const bool bAccelerationMode, const FVec3& Axis, const FReal Angle, const FReal AngVelTarget, const FReal LambdaLimit, FReal& Lambda)"
  },
  {
    "label": "ApplyRotationConstraintSoftDD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationConstraintSoftDD(const FReal Dt, const FReal JointStiffness, const FReal JointDamping, const bool bAccelerationMode, const FVec3& Axis, const FReal Angle, const FReal AngVelTarget, const FReal LambdaLimit, FReal& Lambda)"
  },
  {
    "label": "ApplyLockedRotationConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLockedRotationConstraints(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bApplyTwist, const bool bApplySwing)"
  },
  {
    "label": "ApplyTwistConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTwistConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplyConeConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConeConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplySingleLockedSwingConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingleLockedSwingConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplyDualConeSwingConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDualConeSwingConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplySwingConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySwingConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplySwingTwistDrives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySwingTwistDrives(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bTwistDriveEnabled, const bool bSwing1DriveEnabled, const bool bSwing2DriveEnabled)"
  },
  {
    "label": "ApplySLerpDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySLerpDrive(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPointPositionConstraintKD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPointPositionConstraintKD(const int32 KIndex, const int32 DIndex, const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPointPositionConstraintDD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPointPositionConstraintDD(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplySphericalPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySphericalPositionConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyCylindricalPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCylindricalPositionConstraint(const FReal Dt, const int32 AxisIndex, const EJointMotionType AxialMotion, const EJointMotionType RadialMotion, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPlanarPositionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPlanarPositionConstraint(const FReal Dt, const int32 AxisIndex, const EJointMotionType AxialMotion, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPositionDrive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionDrive(const FReal Dt, const int32 AxisIndex, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FVec3& Axis, const FReal DeltaPos, const FReal DeltaVel)"
  },
  {
    "label": "ApplyPositionProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPositionProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, FVec3& DP1, FVec3& DR1)"
  },
  {
    "label": "ApplyRotationProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRotationProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, FVec3& DP1, FVec3& DR1)"
  },
  {
    "label": "ApplyPointProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPointProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplySphereProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySphereProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplyTranslateProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTranslateProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplyConeProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConeProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, const bool bPositionLocked, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplySwingProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySwingProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const FReal Alpha, const bool bPositionLocked, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplySingleLockedSwingProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingleLockedSwingProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const FReal Alpha, const bool bPositionLocked, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplyDoubleLockedSwingProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDoubleLockedSwingProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, const bool bPositionLocked, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplyDualConeSwingProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDualConeSwingProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const FReal Alpha, const bool bPositionLocked, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplyTwistProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTwistProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, const bool bPositionLocked, FVec3& NetDP1, FVec3& NetDR1)"
  },
  {
    "label": "ApplyVelocityProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityProjection(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Alpha, const FVec3& DP1, const FVec3& DR1)"
  },
  {
    "label": "ApplyLinearVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLinearVelocityConstraint(const FReal Stiffness, const FVec3& Axis, const FVec3& Connector0Correction = FVec3(0), const FReal TargetVel = 0)"
  },
  {
    "label": "ApplyPointVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPointVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplySphericalVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySphericalVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyCylindricalVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCylindricalVelocityConstraint(const FReal Dt, const int32 AxisIndex, const EJointMotionType AxialMotion, const EJointMotionType RadialMotion, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyPlanarVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPlanarVelocityConstraint(const FReal Dt, const int32 AxisIndex, const EJointMotionType AxialMotion, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "ApplyTwistVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTwistVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplyConeVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyConeVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplySingleLockedSwingVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingleLockedSwingVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplyDualConeSwingVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDualConeSwingVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplySwingVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySwingVelocityConstraint(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, const bool bUseSoftLimit)"
  },
  {
    "label": "ApplyAngularVelocityConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAngularVelocityConstraint(const FReal Stiffness, const FVec3& Axis, const FReal TargetVel = 0.0f)"
  },
  {
    "label": "ApplyLockedRotationVelocityConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLockedRotationVelocityConstraints(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const bool bApplyTwist, const bool bApplySwing)"
  },
  {
    "label": "CalculateLinearConstraintPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateLinearConstraintPadding(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Restitution, const int32 AxisIndex, const FVec3 Axis, FReal& InOutPos)"
  },
  {
    "label": "CalculateAngularConstraintPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateAngularConstraintPadding(const FReal Dt, const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const FReal Restitution, const EJointAngularConstraintIndex ConstraintIndex, const FVec3 Axis, FReal& InOutAngle)"
  },
  {
    "label": "CalculateConstraintAxisLinearVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateConstraintAxisLinearVelocities(const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisLinearVelocities)"
  },
  {
    "label": "CalculateSphericalConstraintAxisLinearVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSphericalConstraintAxisLinearVelocities(const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisLinearVelocities)"
  },
  {
    "label": "CalculateCylindricalConstraintAxisLinearVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateCylindricalConstraintAxisLinearVelocities(const int32 AxisIndex, const EJointMotionType AxialMotion, const EJointMotionType RadialMotion, const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisLinearVelocities)"
  },
  {
    "label": "CalculatePlanarConstraintAxisLinearVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculatePlanarConstraintAxisLinearVelocities(const int32 AxisIndex, const EJointMotionType AxialMotion, const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisLinearVelocities)"
  },
  {
    "label": "CalculateConstraintAxisAngularVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateConstraintAxisAngularVelocities(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisAngularVelocities)"
  },
  {
    "label": "CalculateTwistConstraintAxisAngularVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateTwistConstraintAxisAngularVelocities(const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisAngularVelocities)"
  },
  {
    "label": "CalculateConeConstraintAxisAngularVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateConeConstraintAxisAngularVelocities(const FPBDJointSettings& JointSettings, FVec3& ConstraintAxisAngularVelocities)"
  },
  {
    "label": "CalculateDualConeSwingConstraintAxisAngularVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateDualConeSwingConstraintAxisAngularVelocities(const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, FVec3& ConstraintAxisAngularVelocities)"
  },
  {
    "label": "CalculateSwingConstraintAxisAngularVelocities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSwingConstraintAxisAngularVelocities(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const EJointAngularConstraintIndex SwingConstraintIndex, FVec3& ConstraintAxisAngularVelocities)"
  }
]