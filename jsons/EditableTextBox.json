[
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "USlateWidgetStyleAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateWidgetStyleAsset"
  },
  {
    "label": "UEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableTextBox"
  },
  {
    "label": "IErrorReportingWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IErrorReportingWidget"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnEditableTextBoxChangedEvent, const FText&, Text)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(FText InText)"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText(FText InText)"
  },
  {
    "label": "SetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredWidth(float InMinDesiredWidth)"
  },
  {
    "label": "SetIsCaretMovedWhenGainFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsCaretMovedWhenGainFocus(bool bIsCaretMovedWhenGainFocus)"
  },
  {
    "label": "SetSelectAllTextWhenFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextWhenFocused(bool bSelectAllTextWhenFocused)"
  },
  {
    "label": "SetRevertTextOnEscape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRevertTextOnEscape(bool bRevertTextOnEscape)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClearKeyboardFocusOnCommit(bool bClearKeyboardFocusOnCommit)"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectAllTextOnCommit(bool bSelectAllTextOnCommit)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(FText InError)"
  },
  {
    "label": "SetIsPassword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsPassword(bool bIsPassword)"
  },
  {
    "label": "ClearError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearError()"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(ETextJustify::Type InJustification)"
  },
  {
    "label": "SetTextOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextOverflowPolicy(ETextOverflowPolicy InOverflowPolicy)"
  },
  {
    "label": "SetForegroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForegroundColor(FLinearColor color)"
  },
  {
    "label": "HandleOnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextChanged(const FText& Text)"
  },
  {
    "label": "HandleOnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnTextCommitted(const FText& Text, ETextCommit::Type CommitMethod)"
  },
  {
    "label": "SetTextInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetTextInternal(const FText& InText)"
  }
]