[
  {
    "label": "_Xp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Xp"
  },
  {
    "label": "_Yp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Yp"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__xref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__xref"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_Ap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ap"
  },
  {
    "label": "_Bp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Bp"
  },
  {
    "label": "__common_ref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_ref"
  },
  {
    "label": "common_reference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "common_reference"
  },
  {
    "label": "__common_reference_sub_bullet3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_reference_sub_bullet3"
  },
  {
    "label": "__common_reference_sub_bullet2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_reference_sub_bullet2"
  },
  {
    "label": "__common_reference_sub_bullet1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__common_reference_sub_bullet1"
  },
  {
    "label": "basic_common_reference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "basic_common_reference"
  },
  {
    "label": "_Vp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Vp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_COMMON_REFERENCE_H # define _LIBCPP___TYPE_TRAITS_COMMON_REFERENCE_H # include<__config> # include<__type_traits / common_type . h> # include<__type_traits / copy_cv . h> # include<__type_traits / copy_cvref . h> # include<__type_traits / is_convertible . h> # include<__type_traits / is_reference . h> # include<__type_traits / remove_cv . h> # include<__type_traits / remove_cvref . h> # include<__type_traits / remove_reference . h> # include<__utility / declval . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 template <class _Xp, class _Yp> using __cond_res = decltype(false ? declval<_Xp(&)()>()() : declval<_Yp(&)()>()())"
  }
]