[
  {
    "label": "FReplayPlaylistTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistTracker"
  },
  {
    "label": "FReplayPlaylistUpdatedOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistUpdatedOptions"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FReplayPlaylistParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplayPlaylistParams"
  },
  {
    "label": "FGameInstanceReplayPlaylistHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameInstanceReplayPlaylistHelper"
  },
  {
    "label": "FDemoNetDriverReplayPlaylistHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDemoNetDriverReplayPlaylistHelper"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "UDemoNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetDriver"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / SharedPointer . h \" # include \" Net / Core / Connection / NetResult . h \" # include \" Net / ReplayResult . h \")",
    "insertText": "DECLARE_DELEGATE_TwoParams(FPreStartNextPlaylistReplay, const struct FReplayPlaylistTracker& , struct FReplayPlaylistUpdatedOptions&)"
  },
  {
    "label": "FReplayPlaylistTracker()",
    "kind": "Method",
    "detail": "Function (struct FReplayPlaylistUpdatedOptions { TOptional<class UWorld*> NewWorldOverride ; TOptional<TArray<FString>> NewAdditionalOptions ; } ; struct FReplayPlaylistParams { TArray<FString> Playlist ; FPreStartNextPlaylistReplay PreStartNextPlaylistReplayDelegate ; FReplayPlaylistUpdatedOptions InitialOptions ; } ; struct FReplayPlaylistTracker : public TSharedFromThis<FReplayPlaylistTracker>,public FNoncopyable { private : using ThisClass = FReplayPlaylistTracker ; class FGameInstanceReplayPlaylistHelper ; class FDemoNetDriverReplayPlaylistHelper ; public : ~)",
    "insertText": "FReplayPlaylistTracker()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bIsStartingReplay = false ;)",
    "insertText": "Reset()"
  },
  {
    "label": "IsOnLastReplay()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "IsOnLastReplay()"
  },
  {
    "label": "GetNumReplays()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "GetNumReplays()"
  },
  {
    "label": "GetCurrentReplay()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "GetCurrentReplay()"
  },
  {
    "label": "GetGameInstance()",
    "kind": "Method",
    "detail": "Function (} class UGameInstance*)",
    "insertText": "GetGameInstance()"
  },
  {
    "label": "FReplayPlaylistTracker()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FReplayPlaylistTracker(const FReplayPlaylistParams& Params, class UGameInstance* InGameInstance)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Restart()"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "PlayNextReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayNextReplay()"
  },
  {
    "label": "OnDemoPlaybackFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemoPlaybackFailed(UWorld* InWorld, const UE::Net::TNetResult<EReplayResult>& Result)"
  },
  {
    "label": "OnDemoStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemoStopped(UWorld* InWorld)"
  },
  {
    "label": "OnDemoPlaybackFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemoPlaybackFinished(UWorld* InWorld)"
  }
]