[
  {
    "label": "IParameterTransmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IParameterTransmitter"
  },
  {
    "label": "FParameterInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterInterface"
  },
  {
    "label": "FParameterTransmitterInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterTransmitterInitParams"
  },
  {
    "label": "ISoundGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundGenerator"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "UAudioPropertiesSheetAssetBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioPropertiesSheetAssetBase"
  },
  {
    "label": "UAudioPropertiesBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioPropertiesBindings"
  },
  {
    "label": "USoundAttenuation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundAttenuation"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundEffectSourcePreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSourcePreset"
  },
  {
    "label": "USoundEffectSourcePresetChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSourcePresetChain"
  },
  {
    "label": "USoundSourceBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSourceBus"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FActiveSound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveSound"
  },
  {
    "label": "FAudioParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioParameter"
  },
  {
    "label": "FSoundAttenuationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundAttenuationSettings"
  },
  {
    "label": "FSoundGeneratorInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundGeneratorInitParams"
  },
  {
    "label": "FSoundParseParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundParseParameters"
  },
  {
    "label": "FSoundSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSourceBusSendInfo"
  },
  {
    "label": "FSoundSubmixSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSubmixSendInfo"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UCurveTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveTable"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDefines . h \" # include \" CoreMinimal . h \" # include \" Sound / SoundTimecodeOffset . h \" # include \" SoundConcurrency . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" SoundBase . generated . h \" namespace Audio { class IParameterTransmitter ; struct FParameterInterface ; struct FParameterTransmitterInitParams ; using FDeviceId = uint32 ; ; using FParameterInterfacePtr = TSharedPtr<FParameterInterface,ESPMode::ThreadSafe> ; } class ISoundGenerator ; class UAssetUserData ; class UAudioPropertiesSheetAssetBase ; class UAudioPropertiesBindings ; class USoundAttenuation ; class USoundClass ; class USoundEffectSourcePreset ; class USoundEffectSourcePresetChain ; class USoundSourceBus ; class USoundSubmix ; class USoundSubmixBase ; class USoundWave ; enum class EBusSendType : uint8 ; namespace EMaxConcurrentResolutionRule { enum Type : int ; } struct FActiveSound ; struct FAudioParameter ; struct FSoundAttenuationSettings ; struct FSoundGeneratorInitParams ; struct FSoundParseParameters ; struct FSoundSourceBusSendInfo ; struct FSoundSubmixSendInfo ; struct FWaveInstance ; typedef TSharedPtr<ISoundGenerator,ESPMode::ThreadSafe> ISoundGeneratorPtr ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Disabled,PlayWhenSilent,Restart } ;)",
    "insertText": "UCLASS(config=Engine, hidecategories=Object, abstract, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Sound, meta = (DisplayName = \"Class\"), AssetRegistrySearchable)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif public : # if WITH_EDITORONLY_DATA void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "CanBeClusterRoot()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CanBeClusterRoot()"
  },
  {
    "label": "CanBeInCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeInCluster()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "IsPlayable()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsPlayable()"
  },
  {
    "label": "SupportsSubtitles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSubtitles()"
  },
  {
    "label": "HasAttenuationNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAttenuationNode()"
  },
  {
    "label": "GetAttenuationSettingsToApply()",
    "kind": "Method",
    "detail": "Function (const FSoundAttenuationSettings*)",
    "insertText": "GetAttenuationSettingsToApply()"
  },
  {
    "label": "GetMaxDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxDistance()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDuration()"
  },
  {
    "label": "HasDelayNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDelayNode()"
  },
  {
    "label": "HasConcatenatorNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConcatenatorNode()"
  },
  {
    "label": "IsPlayWhenSilent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayWhenSilent()"
  },
  {
    "label": "GetVolumeMultiplier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVolumeMultiplier()"
  },
  {
    "label": "GetPitchMultiplier()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPitchMultiplier()"
  },
  {
    "label": "GetSubtitlePriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSubtitlePriority()"
  },
  {
    "label": "GetCurveData()",
    "kind": "Method",
    "detail": "Function (class UCurveTable*)",
    "insertText": "GetCurveData()"
  },
  {
    "label": "IsOneShot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOneShot()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(class FAudioDevice* AudioDevice, const UPTRINT NodeWaveInstanceHash, FActiveSound& ActiveSound, const FSoundParseParameters& ParseParams, TArray<FWaveInstance*>& WaveInstances)"
  },
  {
    "label": "GetSoundClass()",
    "kind": "Method",
    "detail": "Function (} USoundClass*)",
    "insertText": "GetSoundClass()"
  },
  {
    "label": "GetSoundSubmix()",
    "kind": "Method",
    "detail": "Function (USoundSubmixBase*)",
    "insertText": "GetSoundSubmix()"
  },
  {
    "label": "GetSoundSubmixSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoundSubmixSends(TArray<FSoundSubmixSendInfo>& OutSends)"
  },
  {
    "label": "GetSoundSourceBusSends()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSoundSourceBusSends(EBusSendType BusSendType, TArray<FSoundSourceBusSendInfo>& OutSends)"
  },
  {
    "label": "GetConcurrencyHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConcurrencyHandles(TArray<FConcurrencyHandle>& OutConcurrencyHandles)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPriority()"
  },
  {
    "label": "GetSoundWavesWithCookedAnalysisData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoundWavesWithCookedAnalysisData(TArray<USoundWave*>& OutSoundWaves)"
  },
  {
    "label": "HasCookedFFTData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedFFTData()"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  },
  {
    "label": "InitParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitParameters(TArray<FAudioParameter>& ParametersToInit, FName InFeatureName = NAME_None)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResources()"
  },
  {
    "label": "ImplementsParameterInterface()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ImplementsParameterInterface(Audio::FParameterInterfacePtr InParameterInterface)"
  },
  {
    "label": "CreateParameterTransmitter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<Audio::IParameterTransmitter>)",
    "insertText": "CreateParameterTransmitter(Audio::FParameterTransmitterInitParams&& InParams)"
  },
  {
    "label": "IsParameterValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParameterValid(const FAudioParameter& InParameter)"
  },
  {
    "label": "GetAllDefaultParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllDefaultParameters(TArray<FAudioParameter>& OutParameters)"
  },
  {
    "label": "GetTimecodeOffset()",
    "kind": "Method",
    "detail": "Function (TOptional<FSoundTimecodeOffset>)",
    "insertText": "GetTimecodeOffset()"
  },
  {
    "label": "InjectPropertySheet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectPropertySheet()"
  },
  {
    "label": "ComputeMaxDistance()",
    "kind": "Method",
    "detail": "Function (# endif protected : float)",
    "insertText": "ComputeMaxDistance()"
  }
]