[
  {
    "label": "UnicodeString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeString"
  },
  {
    "label": "U_COMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_COMMON_API"
  },
  {
    "label": "Edits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Edits"
  },
  {
    "label": "Edits()",
    "kind": "Method",
    "detail": "Function (# ifndef __EDITS_H__ # define __EDITS_H__ # include \" unicode / utypes . h \" # include \" unicode / uobject . h \" U_NAMESPACE_BEGIN class UnicodeString ; class Edits U_FINAL : public UMemory { public :)",
    "insertText": "Edits() : array(stackArray), capacity(STACK_CAPACITY), length(0), delta(0), numChanges(0), errorCode_(U_ZERO_ERROR)"
  },
  {
    "label": "Edits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Edits(const Edits &other) : array(stackArray), capacity(STACK_CAPACITY), length(other.length), delta(other.delta), numChanges(other.numChanges), errorCode_(other.errorCode_)"
  },
  {
    "label": "copyArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyArray(other)"
  },
  {
    "label": "Edits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Edits(Edits &&src) U_NOEXCEPT : array(stackArray), capacity(STACK_CAPACITY), length(src.length), delta(src.delta), numChanges(src.numChanges), errorCode_(src.errorCode_)"
  },
  {
    "label": "moveArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveArray(src)"
  },
  {
    "label": "Edits()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Edits()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Edits&)",
    "insertText": "operator(const Edits &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Edits&)",
    "insertText": "operator(Edits &&src)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "addUnchanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addUnchanged(int32_t unchangedLength)"
  },
  {
    "label": "addReplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addReplace(int32_t oldLength, int32_t newLength)"
  },
  {
    "label": "copyErrorTo()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "copyErrorTo(UErrorCode &outErrorCode)"
  },
  {
    "label": "lengthDelta()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "lengthDelta()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Iterator(const Iterator &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator&)",
    "insertText": "operator(const Iterator &other)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "next(UErrorCode &errorCode)"
  },
  {
    "label": "findSourceIndex()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "findSourceIndex(int32_t i, UErrorCode &errorCode)"
  },
  {
    "label": "findDestinationIndex()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "findDestinationIndex(int32_t i, UErrorCode &errorCode)"
  },
  {
    "label": "destinationIndexFromSourceIndex()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "destinationIndexFromSourceIndex(int32_t i, UErrorCode &errorCode)"
  },
  {
    "label": "sourceIndexFromDestinationIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "sourceIndexFromDestinationIndex(int32_t i, UErrorCode &errorCode)"
  },
  {
    "label": "hasChange()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "hasChange()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (# endif private : class Edits ;)",
    "insertText": "Iterator(const uint16_t *a, int32_t len, UBool oc, UBool crs)"
  },
  {
    "label": "readLength()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "readLength(int32_t head)"
  },
  {
    "label": "updateNextIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateNextIndexes()"
  },
  {
    "label": "updatePreviousIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updatePreviousIndexes()"
  },
  {
    "label": "noNext()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "noNext()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "next(UBool onlyChanges, UErrorCode &errorCode)"
  },
  {
    "label": "previous()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "previous(UErrorCode &errorCode)"
  },
  {
    "label": "findIndex()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "findIndex(int32_t i, UBool findSource, UErrorCode &errorCode)"
  },
  {
    "label": "getCoarseChangesIterator()",
    "kind": "Method",
    "detail": "Function (const uint16_t* array ; int32_t index,length ; int32_t remaining ; UBool onlyChanges_,coarse ; int8_t dir ; UBool changed ; int32_t oldLength_,newLength_ ; int32_t srcIndex,replIndex,destIndex ; } ; Iterator)",
    "insertText": "getCoarseChangesIterator()"
  },
  {
    "label": "getCoarseIterator()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "getCoarseIterator()"
  },
  {
    "label": "getFineChangesIterator()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "getFineChangesIterator()"
  },
  {
    "label": "getFineIterator()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "getFineIterator()"
  },
  {
    "label": "mergeAndAppend()",
    "kind": "Method",
    "detail": "Function (} Edits&)",
    "insertText": "mergeAndAppend(const Edits &ab, const Edits &bc, UErrorCode &errorCode)"
  },
  {
    "label": "releaseArray()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "releaseArray()"
  },
  {
    "label": "copyArray()",
    "kind": "Method",
    "detail": "Function (Edits&)",
    "insertText": "copyArray(const Edits &other)"
  },
  {
    "label": "moveArray()",
    "kind": "Method",
    "detail": "Function (Edits&)",
    "insertText": "moveArray(Edits &src)"
  },
  {
    "label": "setLastUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLastUnit(int32_t last)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (array [)",
    "insertText": "length(uint16_t)"
  },
  {
    "label": "lastUnit()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "lastUnit()"
  },
  {
    "label": "growArray()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "growArray()"
  }
]