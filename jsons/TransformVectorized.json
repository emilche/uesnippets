[
  {
    "label": "Z_Construct_UScriptStruct_FTransform3d_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTransform3d_Statics"
  },
  {
    "label": "Z_Construct_UScriptStruct_FTransform3f_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTransform3f_Statics"
  },
  {
    "label": "Z_Construct_UScriptStruct_FTransform_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTransform_Statics"
  },
  {
    "label": "TAlignOfTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlignOfTransform"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "TTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTransform"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Logging / LogMacros . h \" # include \" Math / Axis . h \" # include \" Math / MathFwd . h \" # include \" Math / Matrix . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / ScalarRegister . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / UnrealMathVectorConstants . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" # include \" Math / VectorRegister . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / NameTypes . h \" # if ENABLE_VECTORIZED_TRANSFORM struct Z_Construct_UScriptStruct_FTransform3d_Statics ; struct Z_Construct_UScriptStruct_FTransform3f_Statics ; struct Z_Construct_UScriptStruct_FTransform_Statics ; namespace UE { namespace Math { template<T> struct TAlignOfTransform { } ; template<> struct TAlignOfTransform<float> { enum { Value = FMath::Max<)",
    "insertText": "uint64(16, alignof(TPersistentVectorRegisterType<float>))"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TAlignOfTransform<double> { enum { Value = FMath::Max<)",
    "insertText": "uint64(16, alignof(TPersistentVectorRegisterType<double>))"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct)",
    "insertText": "alignas(TAlignOfTransform<T>::Value)"
  },
  {
    "label": "DiagnosticCheckNaN_Scale3D()",
    "kind": "Method",
    "detail": "Function (Z_Construct_UScriptStruct_FTransform3f_Statics ; Z_Construct_UScriptStruct_FTransform3d_Statics ; Z_Construct_UScriptStruct_FTransform_Statics ; using FReal = T ; using TransformVectorRegister = TVectorRegisterType<T> ; protected : TPersistentVectorRegisterType<T> Rotation ; TPersistentVectorRegisterType<T> Translation ; TPersistentVectorRegisterType<T> Scale3D ; public : const TTransform<T> Identity ; # if ENABLE_NAN_DIAGNOSTIC void)",
    "insertText": "DiagnosticCheckNaN_Scale3D()"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "logOrEnsureNanError(TEXT(\"TTransform<T> Vectorized Scale3D contains NaN\"))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Scale3D = GlobalVectorConstants::Float1110)",
    "insertText": "T(this)"
  },
  {
    "label": "DiagnosticCheckNaN_Translate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DiagnosticCheckNaN_Translate()"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "logOrEnsureNanError(TEXT(\"TTransform<T> Vectorized Translation contains NaN\"))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const_cast<TTransform<)",
    "insertText": "T(this)->Translation = VectorZero()"
  },
  {
    "label": "DiagnosticCheckNaN_Rotate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DiagnosticCheckNaN_Rotate()"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "logOrEnsureNanError(TEXT(\"TTransform<T> Vectorized Rotation contains NaN\"))"
  },
  {
    "label": "DiagnosticCheckNaN_All()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DiagnosticCheckNaN_All()"
  },
  {
    "label": "DiagnosticCheck_IsValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DiagnosticCheck_IsValid()"
  },
  {
    "label": "logOrEnsureNanError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "logOrEnsureNanError(TEXT(\"TTransform Vectorized transform is not valid: %s\"), *ToHumanReadableString())"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "TTransform()"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (Rotation = GlobalVectorConstants::Float0001 ; Translation = GlobalVectorConstants::FloatZero ; Scale3D = GlobalVectorConstants::Float1110 ; })",
    "insertText": "TTransform(const TVector<T>& InTranslation)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (Rotation = GlobalVectorConstants::Float0001 ; Translation =)",
    "insertText": "MakeVectorRegister(InTranslation.X, InTranslation.Y, InTranslation.Z, 0.0f)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(const TQuat<T>& InRotation)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorLoadAligned(&InRotation)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(const TRotator<T>& InRotation)"
  },
  {
    "label": "MakeFromRotator()",
    "kind": "Method",
    "detail": "Function (TQuat<T> InQuatRotation = TQuat<T)",
    "insertText": "MakeFromRotator(InRotation)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorLoadAligned(&InQuatRotation)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(const TQuat<T>& InRotation, const TVector<T>& InTranslation, const TVector<T>& InScale3D = TVector<T>(1.f, 1.f, 1.f))"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "MakeVectorRegister(InScale3D.X, InScale3D.Y, InScale3D.Z, 0.0f)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(const TransformVectorRegister& InRotation, const TransformVectorRegister& InTranslation, const TransformVectorRegister& InScale3D) : Rotation(InRotation), Translation(InTranslation), Scale3D(InScale3D)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(const TRotator<T>& InRotation, const TVector<T>& InTranslation, const TVector<T>& InScale3D = TVector<T>(1.f, 1.f, 1.f))"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(ENoInit)"
  },
  {
    "label": "Log2()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_NAN_DIAGNOSTIC FReal qnan =)",
    "insertText": "Log2(-5.3f)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "MakeVectorRegister(qnan, qnan, qnan, qnan)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "TTransform(const TMatrix<T>& InMatrix)"
  },
  {
    "label": "SetFromMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromMatrix(InMatrix)"
  },
  {
    "label": "TTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTransform(const TVector<T>& InX, const TVector<T>& InY, const TVector<T>& InZ, const TVector<T>& InTranslation)"
  },
  {
    "label": "SetFromMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromMatrix(TMatrix<T>(InX, InY, InZ, InTranslation))"
  },
  {
    "label": "DebugPrint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugPrint()"
  },
  {
    "label": "DebugEqualMatrix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DebugEqualMatrix(const TMatrix<T>& Matrix)"
  },
  {
    "label": "ToHumanReadableString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToHumanReadableString()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "InitFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFromString(const FString& InSourceString)"
  },
  {
    "label": "ToMatrixInternal()",
    "kind": "Method",
    "detail": "Function (TMatrix<T> OutMatrix ; TransformVectorRegister DiagonalsXYZ ; TransformVectorRegister Adds ; TransformVectorRegister Subtracts ;)",
    "insertText": "ToMatrixInternal(DiagonalsXYZ, Adds, Subtracts)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister DiagonalsXYZ_W0 =)",
    "insertText": "VectorSet_W0(DiagonalsXYZ)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister AddX_DC_DiagX_DC =)",
    "insertText": "VectorShuffle(Adds, DiagonalsXYZ_W0, 0, 0, 0, 0)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister SubZ_DC_DiagW_DC =)",
    "insertText": "VectorShuffle(Subtracts, DiagonalsXYZ_W0, 2, 0, 3, 0)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Row0 =)",
    "insertText": "VectorShuffle(AddX_DC_DiagX_DC, SubZ_DC_DiagW_DC, 2, 0, 0, 2)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister SubX_DC_DiagY_DC =)",
    "insertText": "VectorShuffle(Subtracts, DiagonalsXYZ_W0, 0, 0, 1, 0)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister AddY_DC_DiagW_DC =)",
    "insertText": "VectorShuffle(Adds, DiagonalsXYZ_W0, 1, 0, 3, 0)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Row1 =)",
    "insertText": "VectorShuffle(SubX_DC_DiagY_DC, AddY_DC_DiagW_DC, 0, 2, 0, 2)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister AddZ_DC_SubY_DC =)",
    "insertText": "VectorShuffle(Adds, Subtracts, 2, 0, 1, 0)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Row2 =)",
    "insertText": "VectorShuffle(AddZ_DC_SubY_DC, DiagonalsXYZ_W0, 0, 2, 2, 3)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Row0, &(OutMatrix.M[0][0]))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Row1, &(OutMatrix.M[1][0]))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Row2, &(OutMatrix.M[2][0]))"
  },
  {
    "label": "VectorSet_W1()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Row3 =)",
    "insertText": "VectorSet_W1(Translation)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Row3, &(OutMatrix.M[3][0]))"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} TTransform)",
    "insertText": "Inverse()"
  },
  {
    "label": "ToMatrixNoScale()",
    "kind": "Method",
    "detail": "Function (} else { return TTransform<T>::Identity ; } } TMatrix<T>)",
    "insertText": "ToMatrixNoScale()"
  },
  {
    "label": "ToMatrixInternalNoScale()",
    "kind": "Method",
    "detail": "Function (TMatrix<T> OutMatrix ; TransformVectorRegister DiagonalsXYZ ; TransformVectorRegister Adds ; TransformVectorRegister Subtracts ;)",
    "insertText": "ToMatrixInternalNoScale(DiagonalsXYZ, Adds, Subtracts)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && WITH_EDITORONLY_DATA check( Atom1.IsRotationNormalized())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(FMath::Abs(Alpha) <= ZERO_ANIMWEIGHT_THRESH)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FMath::Abs(Alpha - 1.0f) <= ZERO_ANIMWEIGHT_THRESH)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (} else { TransformVectorRegister BlendWeight =)",
    "insertText": "VectorLoadFloat1(&Alpha)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (Translation = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(Atom1.Translation, Atom2.Translation, BlendWeight)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (Scale3D = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(Atom1.Scale3D, Atom2.Scale3D, BlendWeight)"
  },
  {
    "label": "VectorLerpQuat()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister VRotation =)",
    "insertText": "VectorLerpQuat(Atom1.Rotation, Atom2.Rotation, BlendWeight)"
  },
  {
    "label": "VectorNormalizeQuaternion()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorNormalizeQuaternion(VRotation)"
  },
  {
    "label": "BlendWith()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BlendWith(const TTransform<T>& OtherAtom, float Alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && WITH_EDITORONLY_DATA check( IsRotationNormalized())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(Alpha > ZERO_ANIMWEIGHT_THRESH)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (Translation = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(Translation, OtherAtom.Translation, BlendWeight)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (Scale3D = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(Scale3D, OtherAtom.Scale3D, BlendWeight)"
  },
  {
    "label": "VectorLerpQuat()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister VRotation =)",
    "insertText": "VectorLerpQuat(Rotation, OtherAtom.Rotation, BlendWeight)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } TTransform<T>)",
    "insertText": "operator(const TTransform<T>& Atom)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorAdd(Translation, Atom.Translation)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorAdd(Rotation, Atom.Rotation)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorAdd(Scale3D, Atom.Scale3D)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Mult = MultScalar . Value ; return TTransform<)",
    "insertText": "T(VectorMultiply(Rotation, Mult), VectorMultiply(Translation, Mult), VectorMultiply(Scale3D, Mult))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TTransform<T>&)",
    "insertText": "operator(const ScalarRegister& MultScalar)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Mult = MultScalar . Value ; Translation =)",
    "insertText": "VectorMultiply(Translation, Mult)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorMultiply(Rotation, Mult)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiply(Scale3D, Mult)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (TTransform<T>)",
    "insertText": "GetRelativeTransform(const TTransform<T>& Other)"
  },
  {
    "label": "GetRelativeTransformReverse()",
    "kind": "Method",
    "detail": "Function (TTransform<T>)",
    "insertText": "GetRelativeTransformReverse(const TTransform<T>& Other)"
  },
  {
    "label": "SetToRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToRelativeTransform(const TTransform<T>& ParentTransform)"
  },
  {
    "label": "Rotator()",
    "kind": "Method",
    "detail": "Function (} TRotator<T>)",
    "insertText": "Rotator()"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (TQuat<T> OutRotation ;)",
    "insertText": "VectorStoreAligned(Rotation, &OutRotation)"
  },
  {
    "label": "GetDeterminant()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetDeterminant()"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector4<T> OutScale3D ;)",
    "insertText": "VectorStoreAligned(Scale3D, &OutScale3D)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorLoadFloat3_W0(&Origin)"
  },
  {
    "label": "ContainsNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsNaN()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<* reinterpret_cast<TQuat<)",
    "insertText": "T(&(M.Rotation))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<* reinterpret_cast<TVector<)",
    "insertText": "T(&(M.Translation))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Ar<<* reinterpret_cast<TVector<)",
    "insertText": "T(&(M.Scale3D))"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (M . Translation =)",
    "insertText": "VectorSet_W0(M.Translation)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (M . Scale3D =)",
    "insertText": "VectorSet_W0(M.Scale3D)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (Ar<<* this ; return true ; } bool)",
    "insertText": "SerializeFromMismatchedTag(FName StructTag, FArchive& Ar)"
  },
  {
    "label": "Private_AnyHasNegativeScale()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Private_AnyHasNegativeScale(const TransformVectorRegister& InScale3D, const TransformVectorRegister& InOtherScale3D)"
  },
  {
    "label": "Private_RotationEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Private_RotationEquals(const TransformVectorRegister& InRotation, const FReal ToleranceScalar = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister MyRotation = Rotation ; const TransformVectorRegister Tolerance =)",
    "insertText": "VectorLoadFloat1(&ToleranceScalar)"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotationSub =)",
    "insertText": "VectorAbs(VectorSubtract(MyRotation, InRotation))"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotationAdd =)",
    "insertText": "VectorAbs(VectorAdd(MyRotation, InRotation))"
  },
  {
    "label": "Private_TranslationEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Private_TranslationEquals(const TransformVectorRegister& InTranslation, const FReal ToleranceScalar = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister TranslationDiff =)",
    "insertText": "VectorAbs(VectorSubtract(Translation, InTranslation))"
  },
  {
    "label": "Private_Scale3DEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Private_Scale3DEquals(const TransformVectorRegister& InScale3D, const FReal ToleranceScalar = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister ScaleDiff =)",
    "insertText": "VectorAbs(VectorSubtract(Scale3D, InScale3D))"
  },
  {
    "label": "AreRotationsEqual()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "AreRotationsEqual(const TTransform<T>& A, const TTransform<T>& B, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "AreTranslationsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreTranslationsEqual(const TTransform<T>& A, const TTransform<T>& B, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "AreScale3DsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreScale3DsEqual(const TTransform<T>& A, const TTransform<T>& B, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "RotationEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RotationEquals(const TTransform<T>& Other, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "TranslationEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TranslationEquals(const TTransform<T>& Other, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Scale3DEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Scale3DEquals(const TTransform<T>& Other, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const TTransform<T>& Other, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Identical(const TTransform<T>* Other, uint32 PortFlags)"
  },
  {
    "label": "EqualsNoScale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsNoScale(const TTransform<T>& Other, FReal Tolerance=UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Multiply(TTransform<T>* OutTransform, const TTransform<T>* A, const TTransform<T>* B)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorLoadFloat3_W0(&InTranslation)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorLoadFloat3_W0(&InScale3D)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "SetIdentityZeroScale()",
    "kind": "Method",
    "detail": "Function (Rotation = GlobalVectorConstants::Float0001 ; Translation = GlobalVectorConstants::FloatZero ; Scale3D = GlobalVectorConstants::Float1110 ; } void)",
    "insertText": "SetIdentityZeroScale()"
  },
  {
    "label": "MultiplyScale3D()",
    "kind": "Method",
    "detail": "Function (Rotation = GlobalVectorConstants::Float0001 ; Translation = GlobalVectorConstants::FloatZero ; Scale3D = GlobalVectorConstants::FloatZero ; } void)",
    "insertText": "MultiplyScale3D(const TVector<T>& Scale3DMultiplier)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiply(Scale3D, VectorLoadFloat3_W0(&Scale3DMultiplier))"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTranslation(const TVector<T>& NewTranslation)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorLoadFloat3_W0(&NewTranslation)"
  },
  {
    "label": "CopyTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTranslation(const TTransform<T>& Other)"
  },
  {
    "label": "ConcatenateRotation()",
    "kind": "Method",
    "detail": "Function (Translation = Other . Translation ; } void)",
    "insertText": "ConcatenateRotation(const TQuat<T>& DeltaRotation)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorQuaternionMultiply2(Rotation, VectorLoadAligned(&DeltaRotation))"
  },
  {
    "label": "AddToTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToTranslation(const TVector<T>& DeltaTranslation)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorAdd(Translation, VectorLoadFloat3_W0(&DeltaTranslation))"
  },
  {
    "label": "AddTranslations()",
    "kind": "Method",
    "detail": "Function (} TVector<T>)",
    "insertText": "AddTranslations(const TTransform<T>& A, const TTransform<T>& B)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> Result ;)",
    "insertText": "VectorStoreFloat3(VectorAdd(A.Translation, B.Translation), &Result)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> Result ;)",
    "insertText": "VectorStoreFloat3(VectorSubtract(A.Translation, B.Translation), &Result)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorLoadAligned(&NewRotation)"
  },
  {
    "label": "CopyRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyRotation(const TTransform<T>& Other)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (Rotation = Other . Rotation ; } void)",
    "insertText": "SetScale3D(const TVector<T>& NewScale3D)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorLoadFloat3_W0(&NewScale3D)"
  },
  {
    "label": "CopyScale3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyScale3D(const TTransform<T>& Other)"
  },
  {
    "label": "SetTranslationAndScale3D()",
    "kind": "Method",
    "detail": "Function (Scale3D = Other . Scale3D ; } void)",
    "insertText": "SetTranslationAndScale3D(const TVector<T>& NewTranslation, const TVector<T>& NewScale3D)"
  },
  {
    "label": "GetTranslationRegister()",
    "kind": "Method",
    "detail": "Function (} const TPersistentVectorRegisterType<T>&)",
    "insertText": "GetTranslationRegister()"
  },
  {
    "label": "SetRotationRegister()",
    "kind": "Method",
    "detail": "Function (Translation = InTranslation ; } void)",
    "insertText": "SetRotationRegister(TransformVectorRegister InRotation)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (Rotation = InRotation ; } void)",
    "insertText": "Accumulate(const TTransform<T>& SourceAtom)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorQuaternionMultiply2(SourceAtom.Rotation, Rotation)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorAdd(Translation, SourceAtom.Translation)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiply(Scale3D, SourceAtom.Scale3D)"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Accumulate(const TTransform<T>& Atom, const ScalarRegister& BlendWeightScalar)"
  },
  {
    "label": "BlendWeight()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister)",
    "insertText": "BlendWeight(BlendWeightScalar.Value)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BlendedRotation =)",
    "insertText": "VectorMultiply(Atom.Rotation, BlendWeight)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BlendedScale =)",
    "insertText": "VectorMultiply(Atom.Scale3D, BlendWeight)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorQuaternionMultiply2(BlendedRotation, Rotation)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorMultiplyAdd(Atom.Translation, BlendWeight, Translation)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiply(Scale3D, BlendedScale)"
  },
  {
    "label": "AccumulateWithShortestRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateWithShortestRotation(const TTransform<T>& DeltaAtom, const ScalarRegister& BlendWeightScalar)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BlendedRotation =)",
    "insertText": "VectorMultiply(DeltaAtom.Rotation, BlendWeight)"
  },
  {
    "label": "VectorAccumulateQuaternionShortestPath()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorAccumulateQuaternionShortestPath(Rotation, BlendedRotation)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorMultiplyAdd(DeltaAtom.Translation, BlendWeight, Translation)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiplyAdd(DeltaAtom.Scale3D, BlendWeight, Scale3D)"
  },
  {
    "label": "AccumulateWithAdditiveScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateWithAdditiveScale(const TTransform<T>& Atom, const ScalarRegister& BlendWeightScalar)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiply(Scale3D, VectorMultiplyAdd(Atom.Scale3D, BlendWeight, DefaultScale))"
  },
  {
    "label": "LerpTranslationScale3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LerpTranslationScale3D(const TTransform<T>& SourceAtom1, const TTransform<T>& SourceAtom2, const ScalarRegister& AlphaScalar)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister)",
    "insertText": "Alpha(AlphaScalar.Value)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (Translation = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(SourceAtom1.Translation, SourceAtom2.Translation, Alpha)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (Scale3D = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(SourceAtom1.Scale3D, SourceAtom2.Scale3D, Alpha)"
  },
  {
    "label": "NormalizeRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NormalizeRotation()"
  },
  {
    "label": "VectorNormalizeQuaternion()",
    "kind": "Method",
    "detail": "Function (Rotation =)",
    "insertText": "VectorNormalizeQuaternion(Rotation)"
  },
  {
    "label": "IsRotationNormalized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRotationNormalized()"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister TestValue =)",
    "insertText": "VectorAbs(VectorSubtract(VectorOne(), VectorDot4(Rotation, Rotation)))"
  },
  {
    "label": "BlendFromIdentityAndAccumulate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendFromIdentityAndAccumulate(TTransform<T>& FinalAtom, const TTransform<T>& SourceAtom, const ScalarRegister& BlendWeightScalar)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Const0001 = GlobalVectorConstants::Float0001 ; const TransformVectorRegister ConstNegative0001 =)",
    "insertText": "VectorSubtract(VectorZero(), Const0001)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister VOneMinusAlpha =)",
    "insertText": "VectorSubtract(VectorOne(), BlendWeight)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister DefaultScale = GlobalVectorConstants::Float1110 ; const TransformVectorRegister RotationB = SourceAtom . Rotation ; const TransformVectorRegister QuatRotationDirMask =)",
    "insertText": "VectorCompareGE(RotationB, VectorZero())"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BiasTimesA =)",
    "insertText": "VectorSelect(QuatRotationDirMask, Const0001, ConstNegative0001)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotateBTimesWeight =)",
    "insertText": "VectorMultiply(RotationB, BlendWeight)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister UnnormalizedRotation =)",
    "insertText": "VectorMultiplyAdd(BiasTimesA, VOneMinusAlpha, RotateBTimesWeight)"
  },
  {
    "label": "VectorNormalizeSafe()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BlendedRotation =)",
    "insertText": "VectorNormalizeSafe(UnnormalizedRotation, Const0001)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (FinalAtom . Rotation =)",
    "insertText": "VectorQuaternionMultiply2(BlendedRotation, FinalAtom.Rotation)"
  },
  {
    "label": "VectorZero()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Zero =)",
    "insertText": "VectorZero()"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BlendedTranslation = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(Zero, SourceAtom.Translation, BlendWeight)"
  },
  {
    "label": "TransformVectorRegister()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister BlendedScale3D = FMath::Lerp<)",
    "insertText": "TransformVectorRegister(Zero, SourceAtom.Scale3D, BlendWeight)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (FinalAtom . Translation =)",
    "insertText": "VectorAdd(FinalAtom.Translation, BlendedTranslation)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (FinalAtom . Scale3D =)",
    "insertText": "VectorMultiply(FinalAtom.Scale3D, VectorAdd(DefaultScale, BlendedScale3D))"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (} TQuat<T>)",
    "insertText": "GetRotation()"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> OutTranslation ;)",
    "insertText": "VectorStoreFloat3(Translation, &OutTranslation)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> OutScale3D ;)",
    "insertText": "VectorStoreFloat3(Scale3D, &OutScale3D)"
  },
  {
    "label": "CopyTranslationAndScale3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTranslationAndScale3D(const TTransform<T>& SrcBA)"
  },
  {
    "label": "SetFromMatrix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFromMatrix(const TMatrix<T>& InMatrix)"
  },
  {
    "label": "ExtractScaling()",
    "kind": "Method",
    "detail": "Function (TMatrix<T> M = InMatrix ; TVector<T> InScale = M .)",
    "insertText": "ExtractScaling()"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorLoadFloat3_W0(&InScale)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Scale3D =)",
    "insertText": "VectorMultiply(Scale3D, (TransformVectorRegister)GlobalVectorConstants::FloatMinus1_111)"
  },
  {
    "label": "SetAxis()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "SetAxis(0, -M.GetScaledAxis( EAxis::X ))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} TQuat<T> InRotation = TQuat<)",
    "insertText": "T(M)"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (TVector<T> InTranslation = InMatrix .)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "ToMatrixInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ToMatrixInternal(TransformVectorRegister& OutDiagonals, TransformVectorRegister& OutAdds, TransformVectorRegister& OutSubtracts)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (# endif const TransformVectorRegister MyRotation = Rotation ; const TransformVectorRegister RotationX2Y2Z2 =)",
    "insertText": "VectorAdd(MyRotation, MyRotation)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotationXX2YY2ZZ2 =)",
    "insertText": "VectorMultiply(RotationX2Y2Z2, MyRotation)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister yy2_xx2_xx2 =)",
    "insertText": "VectorSwizzle(RotationXX2YY2ZZ2, 1, 0, 0, 0)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister zz2_zz2_yy2 =)",
    "insertText": "VectorSwizzle(RotationXX2YY2ZZ2, 2, 2, 1, 0)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister DiagonalSum =)",
    "insertText": "VectorAdd(yy2_xx2_xx2, zz2_zz2_yy2)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Diagonals =)",
    "insertText": "VectorSubtract(VectorOne(), DiagonalSum)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutDiagonals =)",
    "insertText": "VectorMultiply(Diagonals, Scale3D)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister x_y_x =)",
    "insertText": "VectorSwizzle(MyRotation, 0, 1, 0, 0)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister y2_z2_z2 =)",
    "insertText": "VectorSwizzle(RotationX2Y2Z2, 1, 2, 2, 0)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotBase =)",
    "insertText": "VectorMultiply(x_y_x, y2_z2_z2)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister w_w_w =)",
    "insertText": "VectorReplicate(MyRotation, 3)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister z2_x2_y2 =)",
    "insertText": "VectorSwizzle(RotationX2Y2Z2, 2, 0, 1, 0)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotOffset =)",
    "insertText": "VectorMultiply(w_w_w, z2_x2_y2)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Adds =)",
    "insertText": "VectorAdd(RotBase, RotOffset)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutAdds =)",
    "insertText": "VectorMultiply(Adds, Scale3D)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Scale3DYZXW =)",
    "insertText": "VectorSwizzle(Scale3D, 1, 2, 0, 3)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Subtracts =)",
    "insertText": "VectorSubtract(RotBase, RotOffset)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutSubtracts =)",
    "insertText": "VectorMultiply(Subtracts , Scale3DYZXW)"
  },
  {
    "label": "ToMatrixInternalNoScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToMatrixInternalNoScale(TransformVectorRegister& OutDiagonals, TransformVectorRegister& OutAdds, TransformVectorRegister& OutSubtracts)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && WITH_EDITORONLY_DATA ensure( IsRotationNormalized())"
  },
  {
    "label": "GetSafeScaleReciprocal()",
    "kind": "Method",
    "detail": "Function (} TransformVectorRegister)",
    "insertText": "GetSafeScaleReciprocal(const TransformVectorRegister& InScale, const ScalarRegister& Tolerance = ScalarRegister(GlobalVectorConstants::SmallNumber))"
  },
  {
    "label": "VectorReciprocalAccurate()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister ReciprocalScale =)",
    "insertText": "VectorReciprocalAccurate(InScale)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister ScaleZeroMask =)",
    "insertText": "VectorCompareGE(TransformVectorRegister(Tolerance.Value), VectorAbs(InScale))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister SafeReciprocalScale =)",
    "insertText": "VectorSelect(ScaleZeroMask, VectorZero(), ReciprocalScale)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister InvScale =)",
    "insertText": "VectorSet_W0(GetSafeScaleReciprocal(VectorSet_W1(Scale3D), ScalarRegister(GlobalVectorConstants::SmallNumber)))"
  },
  {
    "label": "VectorQuaternionInverse()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister InvRotation =)",
    "insertText": "VectorQuaternionInverse(Rotation)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister ScaledTranslation =)",
    "insertText": "VectorMultiply(InvScale, Translation)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister t2 =)",
    "insertText": "VectorQuaternionRotateVector(InvRotation, ScaledTranslation)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister InvTranslation =)",
    "insertText": "VectorSet_W0(VectorNegate(t2))"
  },
  {
    "label": "MultiplyUsingMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MultiplyUsingMatrixWithScale(TTransform<T>* OutTransform, const TTransform<T>* A, const TTransform<T>* B)"
  },
  {
    "label": "GetRelativeTransformUsingMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRelativeTransformUsingMatrixWithScale(TTransform<T>* OutTransform, const TTransform<T>* Base, const TTransform<T>* Relative)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (public : struct TTransform<double> ; template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg> && std::is_same_v<T, float>)> explicit TTransform(const TTransform<FArg>& From) : TTransform(MakeVectorRegisterFloatFromDouble(From.Rotation), MakeVectorRegisterFloatFromDouble(From.Translation), MakeVectorRegisterFloatFromDouble(From.Scale3D))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} struct TTransform<float> ; template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg> && std::is_same_v<T, double>)> explicit TTransform(const TTransform<FArg>& From) : TTransform(MakeVectorRegisterDouble(From.Rotation), MakeVectorRegisterDouble(From.Translation), MakeVectorRegisterDouble(From.Scale3D))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if !)",
    "insertText": "defined(_MSC_VER) || defined(__clang__)"
  },
  {
    "label": "AnyHasNegativeScale()",
    "kind": "Method",
    "detail": "Function (template<> const FTransform3d FTransform3d::Identity ; # endif template<T> bool TTransform<T)",
    "insertText": "AnyHasNegativeScale(const TVector<T>& InScale3D, const TVector<T>& InOtherScale3D)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister VectorInOtherScale3D =)",
    "insertText": "VectorLoadFloat3_W0(&InOtherScale3D)"
  },
  {
    "label": "ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (} template<T> void TTransform<T)",
    "insertText": "ScaleTranslation(const TVector<T>& InScale3D)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Translation =)",
    "insertText": "VectorMultiply(Translation, VectorInScale3D)"
  },
  {
    "label": "ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (} template<T> void TTransform<T)",
    "insertText": "ScaleTranslation(const T& InScale)"
  },
  {
    "label": "ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleTranslation(TVector<T>(InScale))"
  },
  {
    "label": "RemoveScaling()",
    "kind": "Method",
    "detail": "Function (} template<T> void TTransform<T)",
    "insertText": "RemoveScaling(T Tolerance)"
  },
  {
    "label": "ConstructTransformFromMatrixWithDesiredScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructTransformFromMatrixWithDesiredScale(A->ToMatrixWithScale(), B->ToMatrixWithScale(), VectorMultiply(A->Scale3D, B->Scale3D), *OutTransform)"
  },
  {
    "label": "ConstructTransformFromMatrixWithDesiredScale()",
    "kind": "Method",
    "detail": "Function (} template<T> void TTransform<T)",
    "insertText": "ConstructTransformFromMatrixWithDesiredScale(const UE::Math::TMatrix<T>& AMatrix, const UE::Math::TMatrix<T>& BMatrix, const TransformVectorRegister& DesiredScale, TTransform<T>& OutTransform)"
  },
  {
    "label": "RemoveScaling()",
    "kind": "Method",
    "detail": "Function (UE::Math::TMatrix<T> M = AMatrix* BMatrix ; M .)",
    "insertText": "RemoveScaling()"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> SignedScale ;)",
    "insertText": "VectorStoreFloat3(VectorSign(DesiredScale), &SignedScale)"
  },
  {
    "label": "SetAxis()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "SetAxis(0, SignedScale.X * M.GetScaledAxis(EAxis::X))"
  },
  {
    "label": "SetAxis()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "SetAxis(1, SignedScale.Y * M.GetScaledAxis(EAxis::Y))"
  },
  {
    "label": "SetAxis()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "SetAxis(2, SignedScale.Z * M.GetScaledAxis(EAxis::Z))"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Rotation .)",
    "insertText": "Normalize()"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (OutTransform . Scale3D = DesiredScale ; OutTransform . Rotation =)",
    "insertText": "VectorLoadAligned(&Rotation)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (OutTransform . Translation =)",
    "insertText": "VectorLoadFloat3_W0(&Translation)"
  },
  {
    "label": "MultiplyUsingMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyUsingMatrixWithScale(OutTransform, A, B)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (} else { const TransformVectorRegister QuatA = A -> Rotation ; const TransformVectorRegister QuatB = B -> Rotation ; const TransformVectorRegister TranslateA = A -> Translation ; const TransformVectorRegister TranslateB = B -> Translation ; const TransformVectorRegister ScaleA = A -> Scale3D ; const TransformVectorRegister ScaleB = B -> Scale3D ; OutTransform -> Rotation =)",
    "insertText": "VectorQuaternionMultiply2(QuatB, QuatA)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister ScaledTransA =)",
    "insertText": "VectorMultiply(TranslateA, ScaleB)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotatedTranslate =)",
    "insertText": "VectorQuaternionRotateVector(QuatB, ScaledTransA)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (OutTransform -> Translation =)",
    "insertText": "VectorAdd(RotatedTranslate, TranslateB)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutTransform -> Scale3D =)",
    "insertText": "VectorMultiply(ScaleA, ScaleB)"
  },
  {
    "label": "GetScaled()",
    "kind": "Method",
    "detail": "Function (} } template<T> TTransform<T> TTransform<T)",
    "insertText": "GetScaled(T InScale)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (TTransform<T>)",
    "insertText": "A(*this)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister VScale =)",
    "insertText": "VectorLoadFloat1(&InScale)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (A . Scale3D =)",
    "insertText": "VectorMultiply(A.Scale3D, VScale)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister InputVector =)",
    "insertText": "VectorLoadAligned(&V)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister InputVectorW0 =)",
    "insertText": "VectorSet_W0(InputVector)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotatedVec =)",
    "insertText": "VectorQuaternionRotateVector(Rotation, InputVectorW0)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister WWWW =)",
    "insertText": "VectorReplicate(InputVector, 3)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister TranslatedVec =)",
    "insertText": "VectorMultiplyAdd(VectorSet_W1(Translation), WWWW, RotatedVec)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (TVector4<T> NewVectOutput ;)",
    "insertText": "VectorStoreAligned(TranslatedVec, &NewVectOutput)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister ScaledVec =)",
    "insertText": "VectorMultiply(Scale3D, InputVectorW0)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister RotatedVec =)",
    "insertText": "VectorQuaternionRotateVector(Rotation, ScaledVec)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister InputVectorW0 =)",
    "insertText": "VectorLoadFloat3_W0(&V)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister TranslatedVec =)",
    "insertText": "VectorAdd(RotatedVec, Translation)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> Result ;)",
    "insertText": "VectorStoreFloat3(TranslatedVec, &Result)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> Result ;)",
    "insertText": "VectorStoreFloat3(RotatedVec, &Result)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister TranslatedVec =)",
    "insertText": "VectorSet_W0(VectorSubtract(InputVector, Translation))"
  },
  {
    "label": "VectorQuaternionInverseRotateVector()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister VR =)",
    "insertText": "VectorQuaternionInverseRotateVector(Rotation, TranslatedVec)"
  },
  {
    "label": "GetSafeScaleReciprocal()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister SafeReciprocal =)",
    "insertText": "GetSafeScaleReciprocal(VectorSet_W1(Scale3D))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister VResult =)",
    "insertText": "VectorMultiply(VR, SafeReciprocal)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (TVector<T> Result ;)",
    "insertText": "VectorStoreFloat3(VResult, &Result)"
  },
  {
    "label": "VectorQuaternionInverseRotateVector()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister VR =)",
    "insertText": "VectorQuaternionInverseRotateVector(Rotation, InputVector)"
  },
  {
    "label": "InverseTransformRotation()",
    "kind": "Method",
    "detail": "Function (} template<T> TQuat<T> TTransform<T)",
    "insertText": "InverseTransformRotation(const TQuat<T>& Q)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> TTransform<T> TTransform<T)",
    "insertText": "operator(const TTransform<T>& Other)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (TTransform<T> Output ;)",
    "insertText": "Multiply(&Output, this, &Other)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Multiply(this, this, &Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> TTransform<T> TTransform<T)",
    "insertText": "operator(const TQuat<T>& Other)"
  },
  {
    "label": "OtherTransform()",
    "kind": "Method",
    "detail": "Function (TTransform<T> Output,)",
    "insertText": "OtherTransform(Other, TVector<T>::ZeroVector, TVector<T>::OneVector)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Multiply(&Output, this, &OtherTransform)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Multiply(this, this, &OtherTransform)"
  },
  {
    "label": "GetScaledAxis()",
    "kind": "Method",
    "detail": "Function (} template<T> TVector<T> TTransform<T)",
    "insertText": "GetScaledAxis(EAxis::Type InAxis)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InAxis == EAxis::Y)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TransformVector(TVector<T>(0.f, 0.f, 1.f))"
  },
  {
    "label": "GetUnitAxis()",
    "kind": "Method",
    "detail": "Function (} template<T> TVector<T> TTransform<T)",
    "insertText": "GetUnitAxis(EAxis::Type InAxis)"
  },
  {
    "label": "TransformVectorNoScale()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TransformVectorNoScale(TVector<T>(0.f, 0.f, 1.f))"
  },
  {
    "label": "Mirror()",
    "kind": "Method",
    "detail": "Function (} template<T> void TTransform<T)",
    "insertText": "Mirror(EAxis::Type MirrorAxis, EAxis::Type FlipAxis)"
  },
  {
    "label": "ToMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (UE::Math::TMatrix<T> M =)",
    "insertText": "ToMatrixWithScale()"
  },
  {
    "label": "Mirror()",
    "kind": "Method",
    "detail": "Function (M .)",
    "insertText": "Mirror(MirrorAxis, FlipAxis)"
  },
  {
    "label": "SetFromMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromMatrix(M)"
  },
  {
    "label": "GetMaximumAxisScale()",
    "kind": "Method",
    "detail": "Function (} template<T> float TTransform<T)",
    "insertText": "GetMaximumAxisScale()"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (float Scale3DAbsMax ; const TransformVectorRegister Scale3DAbsXYZ0 =)",
    "insertText": "VectorAbs(Scale3D)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Scale3DAbsYZX0 =)",
    "insertText": "VectorSwizzle(Scale3DAbsXYZ0, 1,2,0,3)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister Scale3DAbsZXY0 =)",
    "insertText": "VectorSwizzle(Scale3DAbsXYZ0, 2,0,1,3)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister t0 =)",
    "insertText": "VectorMax(Scale3DAbsXYZ0, Scale3DAbsYZX0)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister t2 =)",
    "insertText": "VectorMax(t0, Scale3DAbsZXY0)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(t2, &Scale3DAbsMax)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister t0 =)",
    "insertText": "VectorMin(Scale3DAbsXYZ0, Scale3DAbsYZX0)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (const TransformVectorRegister t2 =)",
    "insertText": "VectorMin(t0, Scale3DAbsZXY0)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(t2, &Scale3DAbsMin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TVector<T> SafeReciprocalScale ;)",
    "insertText": "if(FMath::Abs(InScale.X) <= Tolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SafeReciprocalScale . X = 0 . f ; } else { SafeReciprocalScale . X = 1 . f / InScale . X ; })",
    "insertText": "if(FMath::Abs(InScale.Y) <= Tolerance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SafeReciprocalScale . Y = 0 . f ; } else { SafeReciprocalScale . Y = 1 . f / InScale . Y ; })",
    "insertText": "if(FMath::Abs(InScale.Z) <= Tolerance)"
  }
]