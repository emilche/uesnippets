[
  {
    "label": "Z_Construct_UScriptStruct_FTransform3d_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTransform3d_Statics"
  },
  {
    "label": "Z_Construct_UScriptStruct_FTransform3f_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTransform3f_Statics"
  },
  {
    "label": "Z_Construct_UScriptStruct_FTransform_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FTransform_Statics"
  },
  {
    "label": "TAlignOfTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlignOfTransform"
  },
  {
    "label": "TAlignOfTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlignOfTransform"
  },
  {
    "label": "TAlignOfTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAlignOfTransform"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "TTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTransform"
  },
  {
    "label": "TTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTransform"
  },
  {
    "label": "InitFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitFromString( const FString& InSourceString )"
  },
  {
    "label": "InverseFast()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "InverseFast()"
  },
  {
    "label": "AnyHasNegativeScale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyHasNegativeScale(const TVector<T>& InScale3D, const TVector<T>& InOtherScale3D)"
  },
  {
    "label": "ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleTranslation(const TVector<T>& InScale3D)"
  },
  {
    "label": "ScaleTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleTranslation(const T& Scale)"
  },
  {
    "label": "RemoveScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveScaling(T Tolerance=UE_SMALL_NUMBER)"
  },
  {
    "label": "SetToRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToRelativeTransform(const TTransform<T>& ParentTransform)"
  },
  {
    "label": "Mirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mirror(EAxis::Type MirrorAxis, EAxis::Type FlipAxis)"
  },
  {
    "label": "GetSafeScaleReciprocal()",
    "kind": "Method",
    "detail": "Function (TVector<T>)",
    "insertText": "GetSafeScaleReciprocal(const TVector<T>& InScale, T Tolerance=UE_SMALL_NUMBER)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(FName StructTag, FArchive& Ar)"
  },
  {
    "label": "AreRotationsEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AreRotationsEqual(*this, Other, Tolerance)"
  },
  {
    "label": "AreTranslationsEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AreTranslationsEqual(*this, Other, Tolerance)"
  },
  {
    "label": "AreScale3DsEqual()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AreScale3DsEqual(*this, Other, Tolerance)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Equals(*Other, 0.f)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Multiply(TTransform<T>* OutTransform, const TTransform<T>* A, const TTransform<T>* B)"
  },
  {
    "label": "BlendWeight()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister)",
    "insertText": "BlendWeight(BlendWeightScalar.Value)"
  },
  {
    "label": "BlendWeight()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister)",
    "insertText": "BlendWeight(BlendWeightScalar.Value)"
  },
  {
    "label": "BlendWeight()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister)",
    "insertText": "BlendWeight(BlendWeightScalar.Value)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister)",
    "insertText": "Alpha(AlphaScalar.Value)"
  },
  {
    "label": "BlendWeight()",
    "kind": "Method",
    "detail": "Function (TransformVectorRegister)",
    "insertText": "BlendWeight(BlendWeightScalar.Value)"
  },
  {
    "label": "MultiplyUsingMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyUsingMatrixWithScale(TTransform<T>* OutTransform, const TTransform<T>* A, const TTransform<T>* B)"
  },
  {
    "label": "ConstructTransformFromMatrixWithDesiredScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructTransformFromMatrixWithDesiredScale(const TMatrix<T>& AMatrix, const TMatrix<T>& BMatrix, const TransformVectorRegister& DesiredScale, TTransform<T>& OutTransform)"
  },
  {
    "label": "GetRelativeTransformUsingMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRelativeTransformUsingMatrixWithScale(TTransform<T>* OutTransform, const TTransform<T>* Base, const TTransform<T>* Relative)"
  },
  {
    "label": "Private_AnyHasNegativeScale()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Private_AnyHasNegativeScale(VectorInScale3D, VectorInOtherScale3D)"
  },
  {
    "label": "MultiplyUsingMatrixWithScale()",
    "kind": "Method",
    "detail": "Function (quat)",
    "insertText": "MultiplyUsingMatrixWithScale(OutTransform, A, B)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (TTransform<T>)",
    "insertText": "A(*this)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (TTransform<T>)",
    "insertText": "A(*this)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (work)",
    "insertText": "checkSlow(V.W == 0.f || V.W == 1.f)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (work)",
    "insertText": "checkSlow(V.W == 0.f || V.W == 1.f)"
  },
  {
    "label": "OtherTransform()",
    "kind": "Method",
    "detail": "Function (TTransform<T>)",
    "insertText": "OtherTransform(Other, TVector<T>::ZeroVector, TVector<T>::OneVector)"
  }
]