[
  {
    "label": "FSQHitchRepeaterCVars",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSQHitchRepeaterCVars"
  },
  {
    "label": "FHitchDetectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitchDetectionInfo"
  },
  {
    "label": "FScopedSQHitchRepeater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSQHitchRepeater"
  },
  {
    "label": "FHitchDetectionInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # include \" HAL / IConsoleManager . h \" # include \" PhysXPublic . h \" # include \" CollisionQueryParams . h \" # include \" CollisionQueryFilterCallback . h \" # include \" WorldCollision . h \" # if DETECT_SQ_HITCHES struct FSQHitchRepeaterCVars { int SQHitchDetection ; FAutoConsoleVariableRef CVarSQHitchDetection ; int SQHitchDetectionForceNames ; FAutoConsoleVariableRef CVarSQHitchDetectionForceNames ; float SQHitchDetectionThreshold ; FAutoConsoleVariableRef CVarSQHitchDetectionThreshold ; } ; # endif struct FHitchDetectionInfo { # if DETECT_SQ_HITCHES FVector Start ; FVector End ; FTransform Pose ; ECollisionChannel TraceChannel ; const FCollisionQueryParams& Params ; bool bInTM ;)",
    "insertText": "FHitchDetectionInfo(const FVector& InStart, const FVector& InEnd, ECollisionChannel InTraceChannel, const FCollisionQueryParams& InParams) : Start(InStart) , End(InEnd) , TraceChannel(InTraceChannel) , Params(InParams) , bInTM(false)"
  },
  {
    "label": "FHitchDetectionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHitchDetectionInfo(const FTransform& InPose, ECollisionChannel InTraceChannel, const FCollisionQueryParams& InParams) : Pose(InPose) , TraceChannel(InTraceChannel) , Params(InParams) , bInTM(true)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Printf(TEXT(\"Start:%s End:%s TraceChannel:%d Params:%s\"), *Start.ToString(), *End.ToString(), (int32)TraceChannel, *Params.ToString())"
  },
  {
    "label": "FHitchDetectionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; # else)",
    "insertText": "FHitchDetectionInfo(const FVector&, const FVector&, ECollisionChannel, const FCollisionQueryParams&)"
  },
  {
    "label": "FHitchDetectionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHitchDetectionInfo(const FTransform& InPose, ECollisionChannel InTraceChannel, const FCollisionQueryParams& InParams)"
  },
  {
    "label": "RepeatOnHitch()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<BufferType> struct FScopedSQHitchRepeater { # if DETECT_SQ_HITCHES double HitchDuration ; FDurationTimer HitchTimer ; int32 LoopCounter ; BufferType& UserBuffer ; BufferType* OriginalBuffer ; BufferType* RepeatBuffer ; FCollisionQueryFilterCallback& QueryCallback ; FHitchDetectionInfo HitchDetectionInfo ; bool)",
    "insertText": "RepeatOnHitch()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (HitchTimer .)",
    "insertText": "Stop()"
  },
  {
    "label": "bLoop()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "bLoop(LoopCounter < FSQHitchRepeaterCVars::SQHitchDetection) && (HitchDuration * 1000.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + LoopCounter ; QueryCallback . bRecordHitches = QueryCallback . bRecordHitches ? true : bLoop&& FSQHitchRepeaterCVars::SQHitchDetection = = 1 ;)",
    "insertText": "if(bLoop)"
  },
  {
    "label": "BufferType()",
    "kind": "Method",
    "detail": "Function (RepeatBuffer = new)",
    "insertText": "BufferType(*OriginalBuffer)"
  },
  {
    "label": "FScopedSQHitchRepeater()",
    "kind": "Method",
    "detail": "Function (} else {* RepeatBuffer =* OriginalBuffer ; } } return bLoop ; } else { return false ; } })",
    "insertText": "FScopedSQHitchRepeater(BufferType& OutBuffer, FCollisionQueryFilterCallback& QueryCallback, const FHitchDetectionInfo& InHitchDetectionInfo) : HitchDuration(0.0) , HitchTimer(HitchDuration) , LoopCounter(0) , UserBuffer(OutBuffer) , OriginalBuffer(nullptr) , RepeatBuffer(nullptr) , QueryCallback(QueryCallback) , HitchDetectionInfo(InHitchDetectionInfo)"
  },
  {
    "label": "BufferType()",
    "kind": "Method",
    "detail": "Function (OriginalBuffer = new)",
    "insertText": "BufferType(UserBuffer)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (HitchTimer .)",
    "insertText": "Start()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (} } BufferType&)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (const double DurationInMS = HitchDuration* 1 0 0 0 . 0 ;)",
    "insertText": "UE_LOG(LogCollision, Warning, TEXT(\"SceneQueryHitch: took %.3fms with %d calls to PreFilter\"), DurationInMS, QueryCallback.PreFilterHitchInfo.Num())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} QueryCallback . PreFilterHitchInfo .)",
    "insertText": "Empty()"
  },
  {
    "label": "FScopedSQHitchRepeater()",
    "kind": "Method",
    "detail": "Function (} QueryCallback . bRecordHitches = false ; delete RepeatBuffer ; delete OriginalBuffer ; } # else)",
    "insertText": "FScopedSQHitchRepeater(BufferType& OutBuffer, FCollisionQueryFilterCallback& PQueryCallback, const FHitchDetectionInfo& InHitchDetectionInfo) : UserBuffer(OutBuffer)"
  }
]