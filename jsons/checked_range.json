[
  {
    "label": "CheckedContiguousRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckedContiguousRange"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_CHECKED_RANGE_H_ # define BASE_CONTAINERS_CHECKED_RANGE_H_ # include<stddef . h> # include<iterator> # include<type_traits> # include<utility> # include \" base / check . h \" # include \" base / containers / checked_iterators . h \" # include \" base / template_util . h \" namespace base { template<ContiguousContainer> class CheckedContiguousRange { public : using element_type = std::remove_pointer_t<)",
    "insertText": "decltype(std::data(std::declval<ContiguousContainer&>()))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using value_type = std::remove_cv_t<element_type> ; using reference = element_type& ; using const_reference = const element_type& ; using pointer = element_type* ; using const_pointer = const element_type* ; using iterator = CheckedContiguousIterator<element_type> ; using const_iterator = CheckedContiguousConstIterator<element_type> ; using reverse_iterator = std::reverse_iterator<iterator> ; using const_reverse_iterator = std::reverse_iterator<const_iterator> ; using difference_type = iterator::difference_type ; using size_type = size_t ;)",
    "insertText": "static_assert(!std::is_reference<ContiguousContainer>::value, \"Error: ContiguousContainer can not be a reference.\")"
  },
  {
    "label": "CheckedContiguousRange()",
    "kind": "Method",
    "detail": "Function (template<Container> class CheckedContiguousRange ;)",
    "insertText": "CheckedContiguousRange()"
  },
  {
    "label": "CheckedContiguousRange()",
    "kind": "Method",
    "detail": "Function (template<int& . . . ExplicitArgumentBarrier,Container,= std::enable_if_t<std::is_same<remove_cvref_t<ContiguousContainer>,remove_cvref_t<Container>>::value>>)",
    "insertText": "CheckedContiguousRange(Container&& container) noexcept : container_(&container)"
  },
  {
    "label": "element_type()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,Container,= std::enable_if_t<std::is_convertible<CheckedContiguousRange<Container)",
    "insertText": "element_type(*)[], element_type (*)[]>::value>> constexpr CheckedContiguousRange( CheckedContiguousRange<Container> range) noexcept : container_(range.container_)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "back()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(size_type idx)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "data()"
  },
  {
    "label": "cdata()",
    "kind": "Method",
    "detail": "Function (} const_pointer)",
    "insertText": "cdata()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "MakeCheckedContiguousRange()",
    "kind": "Method",
    "detail": "Function (} private : ContiguousContainer* container_ = nullptr ; } ; template<ContiguousContainer> using CheckedContiguousConstRange = CheckedContiguousRange<const ContiguousContainer> ; template<int& . . . ExplicitArgumentBarrier,ContiguousContainer> auto)",
    "insertText": "MakeCheckedContiguousRange(ContiguousContainer&& container)"
  },
  {
    "label": "MakeCheckedContiguousConstRange()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,ContiguousContainer> auto)",
    "insertText": "MakeCheckedContiguousConstRange(ContiguousContainer&& container)"
  }
]