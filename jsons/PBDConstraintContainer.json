[
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "FPBDConstraintContainer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / Transform . h \" # include \" Chaos / Evolution / SolverBody . h \" # include \" Chaos / Evolution / SolverConstraintContainer . h \" # include \" Chaos / Evolution / ConstraintGroupSolver . h \" # include \" Chaos / Island / IslandManagerFwd . h \" namespace Chaos { class FPBDConstraintContainer { public :)",
    "insertText": "FPBDConstraintContainer(FConstraintHandleTypeID InConstraintHandleType)"
  },
  {
    "label": "FPBDConstraintContainer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDConstraintContainer()"
  },
  {
    "label": "GetContainerId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetContainerId()"
  },
  {
    "label": "GetConstraintHandleType()",
    "kind": "Method",
    "detail": "Function (ContainerId = InContainerId ; } const FConstraintHandleTypeID&)",
    "insertText": "GetConstraintHandleType()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "UpdatePositionBasedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionBasedState(const FReal Dt)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "DisconnectConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectConstraints(const TSet<TGeometryParticleHandle<FReal, 3>*>&)"
  },
  {
    "label": "OnDisableParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDisableParticle(FGeometryParticleHandle* DisabledParticle)"
  },
  {
    "label": "OnEnableParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnableParticle(FGeometryParticleHandle* EnabledParticle)"
  },
  {
    "label": "CreateSceneSolver()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateSceneSolver(const int32 Priority)"
  },
  {
    "label": "CreateGroupSolver()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateGroupSolver(const int32 Priority)"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } const FConstraintHandleTypeID&)",
    "insertText": "GetType()"
  },
  {
    "label": "InvalidType()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "InvalidType()"
  },
  {
    "label": "As()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "As()"
  }
]