[
  {
    "label": "FPBDAnimDriveConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDAnimDriveConstraint"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / PBDStiffness . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" ChaosStats . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos PBD Anim Drive Constraint\"), STAT_PBD_AnimDriveConstraint, STATGROUP_Chaos)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (namespace Chaos::Softs { class FPBDAnimDriveConstraint final { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDAnimDriveConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDAnimDriveConstraint(const int32 InParticleOffset, const int32 InParticleCount, const TArray<FSolverVec3>& InAnimationPositions, const TArray<FSolverVec3>& InAnimationVelocities, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection ) : AnimationPositions(InAnimationPositions) , AnimationVelocities(InAnimationVelocities) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Stiffness( FSolverVec2(GetWeightedFloatAnimDriveStiffness(PropertyCollection, 1.f)), WeightMaps.FindRef(GetAnimDriveStiffnessString(PropertyCollection, AnimDriveStiffnessName.ToString())), InParticleCount) , Damping( FSolverVec2(GetWeightedFloatAnimDriveDamping(PropertyCollection, 1.f)), WeightMaps.FindRef(GetAnimDriveDampingString(PropertyCollection, AnimDriveDampingName.ToString())), InParticleCount) , AnimDriveStiffnessIndex(PropertyCollection) , AnimDriveDampingIndex(PropertyCollection)"
  },
  {
    "label": "FPBDAnimDriveConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDAnimDriveConstraint(const int32 InParticleOffset, const int32 InParticleCount, const TArray<FSolverVec3>& InAnimationPositions, const TArray<FSolverVec3>& , const TArray<FSolverVec3>& InAnimationVelocities, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers ) : AnimationPositions(InAnimationPositions) , AnimationVelocities(InAnimationVelocities) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Stiffness(FSolverVec2::UnitVector, StiffnessMultipliers, InParticleCount) , Damping(FSolverVec2::UnitVector, DampingMultipliers, InParticleCount) , AnimDriveStiffnessIndex(ForceInit) , AnimDriveDampingIndex(ForceInit)"
  },
  {
    "label": "FPBDAnimDriveConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDAnimDriveConstraint()"
  },
  {
    "label": "GetStiffness()",
    "kind": "Method",
    "detail": "Function (} FSolverVec2)",
    "insertText": "GetStiffness()"
  },
  {
    "label": "GetDamping()",
    "kind": "Method",
    "detail": "Function (} FSolverVec2)",
    "insertText": "GetDamping()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "WeightedValue()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2)",
    "insertText": "WeightedValue(GetWeightedFloatAnimDriveStiffness(PropertyCollection))"
  },
  {
    "label": "GetAnimDriveStiffnessString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetAnimDriveStiffnessString(PropertyCollection)"
  },
  {
    "label": "FPBDStiffness()",
    "kind": "Method",
    "detail": "Function (Stiffness =)",
    "insertText": "FPBDStiffness(WeightedValue, WeightMaps.FindRef(WeightMapName), ParticleCount)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (} else { Stiffness .)",
    "insertText": "SetWeightedValue(WeightedValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(IsAnimDriveDampingMutable(PropertyCollection))"
  },
  {
    "label": "WeightedValue()",
    "kind": "Method",
    "detail": "Function (const FSolverVec2)",
    "insertText": "WeightedValue(GetWeightedFloatAnimDriveDamping(PropertyCollection))"
  },
  {
    "label": "GetAnimDriveDampingString()",
    "kind": "Method",
    "detail": "Function (const FString& WeightMapName =)",
    "insertText": "GetAnimDriveDampingString(PropertyCollection)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness, const FSolverVec2& InDamping)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Damping .)",
    "insertText": "SetWeightedValue(InDamping)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyPBDValues(Dt, NumIterations)"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "GetConstArrayView(const FSolverParticles& Particles, const TArray<FSolverVec3>& Data)"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FSolverVec3>)",
    "insertText": "GetConstArrayView(const FSolverParticlesRange& Particles, const TArray<FSolverVec3>& Data)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_PBD_AnimDriveConstraint)"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<FSolverVec3> AnimationPositionsView =)",
    "insertText": "GetConstArrayView(InParticles, AnimationPositions)"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<FSolverVec3> AnimationVelocitiesView =)",
    "insertText": "GetConstArrayView(InParticles, AnimationVelocities)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &InParticles, &Dt, &AnimationPositionsView, &AnimationVelocitiesView](int32 Index) { const FSolverReal ParticleStiffness = Stiffness[Index]; const FSolverReal ParticleDamping = Damping[Index]; ApplyHelper(InParticles, ParticleStiffness, ParticleDamping, Dt, Index, AnimationPositionsView[Index], AnimationVelocitiesView[Index]); })"
  },
  {
    "label": "ParticleDamping()",
    "kind": "Method",
    "detail": "Function (} else { const FSolverReal)",
    "insertText": "ParticleDamping(FSolverReal)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &InParticles, ParticleDamping, &Dt, &AnimationPositionsView, &AnimationVelocitiesView](int32 Index) { const FSolverReal ParticleStiffness = Stiffness[Index]; ApplyHelper(InParticles, ParticleStiffness, ParticleDamping, Dt, Index, AnimationPositionsView[Index], AnimationVelocitiesView[Index]); })"
  },
  {
    "label": "ParticleStiffness()",
    "kind": "Method",
    "detail": "Function (} } else { const FSolverReal)",
    "insertText": "ParticleStiffness(FSolverReal)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &InParticles, &ParticleStiffness, &Dt, &AnimationPositionsView, &AnimationVelocitiesView](int32 Index) { const FSolverReal ParticleDamping = Damping[Index]; ApplyHelper(InParticles, ParticleStiffness, ParticleDamping, Dt, Index, AnimationPositionsView[Index], AnimationVelocitiesView[Index]); })"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &InParticles, &ParticleStiffness, &ParticleDamping, &Dt, &AnimationPositionsView, &AnimationVelocitiesView](int32 Index) { ApplyHelper(InParticles, ParticleStiffness, ParticleDamping, Dt, Index, AnimationPositionsView[Index], AnimationVelocitiesView[Index]); })"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} } } private : template<SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& Particles, const FSolverReal InStiffness, const FSolverReal InDamping, const FSolverReal Dt, const int32 Index, const FSolverVec3& AnimPosition, const FSolverVec3& AnimVelocity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 ParticleIndex = ParticleOffset + Index ;)",
    "insertText": "if(Particles.InvM(ParticleIndex) == (FSolverReal)0.)"
  },
  {
    "label": "InStiffness()",
    "kind": "Method",
    "detail": "Function (ParticlePosition - =)",
    "insertText": "InStiffness(ParticlePosition - AnimPosition)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 ParticleDisplacement = ParticlePosition - Particles .)",
    "insertText": "GetX(ParticleIndex)"
  },
  {
    "label": "AnimationDisplacement()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "AnimationDisplacement(AnimVelocity)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 RelativeDisplacement = ParticleDisplacement - AnimationDisplacement ; ParticlePosition - = InDamping* RelativeDisplacement ; } private : const TArray<FSolverVec3>& AnimationPositions ; const TArray<FSolverVec3>& AnimationVelocities ; const int32 ParticleOffset ; const int32 ParticleCount ; FPBDStiffness Stiffness ; FPBDStiffness Damping ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(AnimDriveStiffness, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(AnimDriveDamping, float)"
  }
]