[
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_UTIL_INTERNAL_H_ # define BASE_STRINGS_STRING_UTIL_INTERNAL_H_ # include \" base / ranges / algorithm . h \" # include \" base / strings / string_piece . h \" namespace base::internal { template<CharT,= std::enable_if_t<std::is_integral<CharT>::value>> CharT)",
    "insertText": "ToLowerASCII(CharT c)"
  },
  {
    "label": "CompareCaseInsensitiveASCIIT()",
    "kind": "Method",
    "detail": "Function (} template<T,CharT = T::value_type> int)",
    "insertText": "CompareCaseInsensitiveASCIIT(T a, T b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t i = 0 ;)",
    "insertText": "while(i < a.length() && i < b.length())"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (CharT lower_a =)",
    "insertText": "ToLowerASCII(a[i])"
  },
  {
    "label": "ToLowerASCII()",
    "kind": "Method",
    "detail": "Function (CharT lower_b =)",
    "insertText": "ToLowerASCII(b[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i + + ; })",
    "insertText": "if(a.length() == b.length())"
  }
]