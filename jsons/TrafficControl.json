[
  {
    "label": "FAckSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAckSample"
  },
  {
    "label": "FSeqSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeqSample"
  },
  {
    "label": "FNetworkTrafficAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkTrafficAnalyzer"
  },
  {
    "label": "FNetworkCongestionControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkCongestionControl"
  },
  {
    "label": "FNetworkTrafficAnalyzer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Net / Util / SequenceNumber . h \" # include \" Net / Core / Misc / ResizableCircularQueue . h \" # include \" EngineLogs . h \" struct FAckSample ; struct FSeqSample ; class FNetworkTrafficAnalyzer ; class FNetworkCongestionControl ; struct FSeqSample { double Timestamp ; int32 Seq ; int32 PacketSize ; } ; struct FAckSample { double Timestamp ; int32 Ack ; } ; class FNetworkTrafficAnalyzer { public :)",
    "insertText": "FNetworkTrafficAnalyzer(FNetworkCongestionControl* InTrafficControlModule)"
  },
  {
    "label": "OnAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAck(const FAckSample& AckSample)"
  },
  {
    "label": "OnSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSend(const FSeqSample& SeqSample)"
  },
  {
    "label": "FNetworkCongestionControl()",
    "kind": "Method",
    "detail": "Function (} private : FNetworkCongestionControl* TrafficControlModule ; TResizableCircularQueue<FSeqSample> OutPacketRecords ; using SeqT = TSequenceNumber<8,uint8> ; double LatestUplinkBandwidth ; double LatestRTT ; SeqT OutSeq ; SeqT OutAckedSeq ; uint32 BytesInFlight ; bool bInitialized ; } ; class FNetworkCongestionControl { public :)",
    "insertText": "FNetworkCongestionControl(double ConfiguredNetSpeed, uint32 MaxPackets)"
  },
  {
    "label": "IsReadyToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToSend(double Timestamp)"
  },
  {
    "label": "UpdateMinRTT()",
    "kind": "Method",
    "detail": "Function (private : FNetworkTrafficAnalyzer Analyzer ; double MinRTT ; double NetSpeed ; uint32 MaxPacketsAllowedInFlight ; private : void)",
    "insertText": "UpdateMinRTT(double Timestamp)"
  }
]