[
  {
    "label": "RacefulWorklist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RacefulWorklist"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Node"
  },
  {
    "label": "RandomizedView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomizedView"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_RACEFUL_WORKLIST_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_RACEFUL_WORKLIST_H_ # include<algorithm> # include<atomic> # include<vector> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / rand_util . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / starscan / metadata_allocator . h \" namespace partition_alloc::internal { template<T> class RacefulWorklist { struct Node {)",
    "insertText": "Node(const T& value) : value(value)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Node(const Node& other) : value(other.value), is_being_visited( other.is_being_visited.load(std::memory_order_relaxed)), is_visited(other.is_visited.load(std::memory_order_relaxed))"
  },
  {
    "label": "RandomizedView()",
    "kind": "Method",
    "detail": "Function (} T value ; std::atomic<bool> is_being_visited { false } ; std::atomic<bool> is_visited { false } ; } ; using Underlying = std::vector<Node,MetadataAllocator<Node>> ; public : class RandomizedView { public :)",
    "insertText": "RandomizedView(RacefulWorklist& worklist) : worklist_(worklist), offset_(0)"
  },
  {
    "label": "RandomizedView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RandomizedView(const RandomizedView&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const RandomizedView&)",
    "insertText": "operator(const RandomizedView&)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<Function> void)",
    "insertText": "Visit(Function f)"
  },
  {
    "label": "RacefulWorklist()",
    "kind": "Method",
    "detail": "Function (private : RacefulWorklist& worklist_ ; size_t offset_ ; } ;)",
    "insertText": "RacefulWorklist()"
  },
  {
    "label": "RacefulWorklist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RacefulWorklist(const RacefulWorklist&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RacefulWorklist&)",
    "insertText": "operator(const RacefulWorklist&)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(const T& t)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (data_ .)",
    "insertText": "push_back(Node(t))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} template<It> void)",
    "insertText": "Push(It begin, It end)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transform(begin, end, std::back_inserter(data_), [](const T& t) { return Node(t); })"
  },
  {
    "label": "VisitNonConcurrently()",
    "kind": "Method",
    "detail": "Function (} template<Function> void)",
    "insertText": "VisitNonConcurrently(Function)"
  },
  {
    "label": "VisitNonConcurrently()",
    "kind": "Method",
    "detail": "Function (private : Underlying data_ ; std::atomic<bool> fully_visited_ { false } ; } ; template<T> template<Function> void RacefulWorklist<T)",
    "insertText": "VisitNonConcurrently(Function f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto& data = worklist_ . data_ ; std::vector<Underlying::iterator,MetadataAllocator<Underlying::iterator>> to_revisit ;)",
    "insertText": "if(worklist_.fully_visited_.load(std::memory_order_acquire))"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (const auto offset_it =)",
    "insertText": "next(data.begin(), offset_)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (to_revisit .)",
    "insertText": "push_back(it)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (continue ; } it -> is_being_visited .)",
    "insertText": "store(true, std::memory_order_relaxed)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f(it->value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto it = data.begin(); it != offset_it; ++it)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(auto it : to_revisit)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} worklist_ . fully_visited_ .)",
    "insertText": "store(true, std::memory_order_release)"
  }
]