[
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMATTER_INTEGRAL_H # define _LIBCPP___FORMAT_FORMATTER_INTEGRAL_H # include<__concepts / arithmetic . h> # include<__concepts / same_as . h> # include<__config> # include<__format / format_error . h> # include<__format / formatter . h> # include<__format / formatter_output . h> # include<__format / parser_std_format_spec . h> # include<__utility / unreachable . h> # include<charconv> # include<limits> # include<string> # ifndef _LIBCPP_HAS_NO_LOCALIZATION # include<locale> # endif # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__insert_sign()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__insert_sign(char* __buf, bool __negative, __format_spec::__sign __sign)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__grouping.empty() && __size > __grouping[0], \"The slow grouping formatting is used while there will be no \" \"separators written\")"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (string __r ; auto __end = __grouping .)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto __ptr = __grouping .)",
    "insertText": "begin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__size - =* __ptr ;)",
    "insertText": "if(__size > 0) __r.push_back(*__ptr)"
  },
  {
    "label": "__libcpp_unreachable()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "__libcpp_unreachable()"
  },
  {
    "label": "__format_char()",
    "kind": "Method",
    "detail": "Function (} template<__formatter::__char_type _CharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__format_char(integral auto __value, output_iterator<const _CharT&> auto __out_it, __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__out_it)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using _Tp =)",
    "insertText": "decltype(__value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(signed_integral<_CharT>)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(__value < 0 || static_cast<make_unsigned_t<_Tp>>(__value) > numeric_limits<_CharT>::max()) std::__throw_format_error(\"Integral value outside the range of the char type\")"
  },
  {
    "label": "_CharT()",
    "kind": "Method",
    "detail": "Function (} } const auto __c = static_cast<)",
    "insertText": "_CharT(__value)"
  },
  {
    "label": "__to_buffer()",
    "kind": "Method",
    "detail": "Function (} template<integral _Tp> _LIBCPP_HIDE_FROM_ABI char*)",
    "insertText": "__to_buffer(char* __first, char* __last, _Tp __value, int __base)"
  },
  {
    "label": "to_chars()",
    "kind": "Method",
    "detail": "Function (to_chars_result __r =)",
    "insertText": "to_chars(__first, __last, __value, __base)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__r.ec == errc(0), \"Internal buffer too small\")"
  },
  {
    "label": "__insert_sign()",
    "kind": "Method",
    "detail": "Function (char* __first =)",
    "insertText": "__insert_sign(__begin, __negative, __specs.__std_.__sign_)"
  },
  {
    "label": "__to_buffer()",
    "kind": "Method",
    "detail": "Function (char* __last =)",
    "insertText": "__to_buffer(__first, __end, __value, __base)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_HAS_NO_LOCALIZATION)",
    "insertText": "if(__specs.__std_.__locale_specific_form_)"
  },
  {
    "label": "_CharT()",
    "kind": "Method",
    "detail": "Function (const auto& __np = use_facet<numpunct<)",
    "insertText": "_CharT(__ctx.locale())"
  },
  {
    "label": "grouping()",
    "kind": "Method",
    "detail": "Function (string __grouping = __np .)",
    "insertText": "grouping()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t __size = __last - __first ;)",
    "insertText": "if(!__grouping.empty() && __size > __grouping[0]) return __formatter::__write_using_decimal_separators( __ctx.out(), __begin, __first, __last, __formatter::__determine_grouping(__size, __grouping), __np.thousands_sep(), __specs)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (} # endif auto __out_it = __ctx .)",
    "insertText": "out()"
  },
  {
    "label": "_CharT()",
    "kind": "Method",
    "detail": "Function (__specs . __alignment_ = __format_spec::__alignment::__right ; __specs . __fill_ =)",
    "insertText": "_CharT('0')"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (int32_t __size = __first - __begin ; __specs . __width_ - =)",
    "insertText": "min(__size, __specs.__width_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__specs.__std_.__type_ != __format_spec::__type::__hexadecimal_upper_case) [[likely]] return __formatter::__write(__first, __last, __ctx.out(), __specs)"
  },
  {
    "label": "__format_integer()",
    "kind": "Method",
    "detail": "Function (} template<unsigned_integral _Tp,class _CharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__format_integer(_Tp __value, auto& __ctx, __format_spec::__parsed_specifications<_CharT> __specs, bool __negative = false) -> decltype(__ctx.out())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} case __format_spec::__type::__binary_upper_case : { array<char,__formatter::__buffer_size<)",
    "insertText": "decltype(__value), 2>()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} case __format_spec::__type::__octal : { array<char,__formatter::__buffer_size<)",
    "insertText": "decltype(__value), 8>()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} case __format_spec::__type::__default : case __format_spec::__type::__decimal : { array<char,__formatter::__buffer_size<)",
    "insertText": "decltype(__value), 10>()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} case __format_spec::__type::__hexadecimal_lower_case : { array<char,__formatter::__buffer_size<)",
    "insertText": "decltype(__value), 16>()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (} default :)",
    "insertText": "_LIBCPP_ASSERT(false, \"The parse function should have validated the type\")"
  },
  {
    "label": "__format_integer()",
    "kind": "Method",
    "detail": "Function (} } template<signed_integral _Tp,class _CharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__format_integer(_Tp __value, auto& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__ctx.out())"
  },
  {
    "label": "__to_unsigned_like()",
    "kind": "Method",
    "detail": "Function (auto __r =)",
    "insertText": "__to_unsigned_like(__value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool __negative = __value<0 ;)",
    "insertText": "if(__negative) __r = __complement(__r)"
  },
  {
    "label": "__format_bool()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> struct _LIBCPP_TEMPLATE_VIS __bool_strings ; template<> struct _LIBCPP_TEMPLATE_VIS __bool_strings<char> { string_view __true { \" true \" } ; string_view __false { \" false \" } ; } ; # ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS template<> struct _LIBCPP_TEMPLATE_VIS __bool_strings<wchar_t> { wstring_view __true { L \" true \" } ; wstring_view __false { L \" false \" } ; } ; # endif template<class _CharT> _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__format_bool(bool __value, auto& __ctx, __format_spec::__parsed_specifications<_CharT> __specs) -> decltype(__ctx.out())"
  },
  {
    "label": "truename()",
    "kind": "Method",
    "detail": "Function (basic_string<_CharT> __str = __value ? __np .)",
    "insertText": "truename() : __np.falsename()"
  },
  {
    "label": "__write()",
    "kind": "Method",
    "detail": "Function (} # endif basic_string_view<_CharT> __str = __value ? __formatter::__bool_strings<_CharT>::__true : __formatter::__bool_strings<_CharT>::__false ; return)",
    "insertText": "__write(__str.begin(), __str.end(), __ctx.out(), __specs)"
  }
]