[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FlagHelp()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_INTERNAL_USAGE_H_ # define ABSL_FLAGS_INTERNAL_USAGE_H_ # include<iosfwd> # include<string> # include \" absl / base / config . h \" # include \" absl / flags / commandlineflag . h \" # include \" absl / flags / declare . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace flags_internal { enum class HelpFormat { kHumanReadable,} ; void)",
    "insertText": "FlagHelp(std::ostream& out, const CommandLineFlag& flag, HelpFormat format = HelpFormat::kHumanReadable)"
  },
  {
    "label": "FlagsHelp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagsHelp(std::ostream& out, absl::string_view filter, HelpFormat format, absl::string_view program_usage_message)"
  },
  {
    "label": "HandleUsageFlags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HandleUsageFlags(std::ostream& out, absl::string_view program_usage_message)"
  },
  {
    "label": "GetFlagsHelpMatchSubstr()",
    "kind": "Method",
    "detail": "Function (enum class HelpMode { kNone,kImportant,kShort,kFull,kPackage,kMatch,kVersion,kOnlyCheckArgs } ; std::string)",
    "insertText": "GetFlagsHelpMatchSubstr()"
  },
  {
    "label": "GetFlagsHelpMode()",
    "kind": "Method",
    "detail": "Function (HelpMode)",
    "insertText": "GetFlagsHelpMode()"
  },
  {
    "label": "GetFlagsHelpFormat()",
    "kind": "Method",
    "detail": "Function (HelpFormat)",
    "insertText": "GetFlagsHelpFormat()"
  },
  {
    "label": "SetFlagsHelpMatchSubstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlagsHelpMatchSubstr(absl::string_view)"
  },
  {
    "label": "SetFlagsHelpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlagsHelpMode(HelpMode)"
  },
  {
    "label": "SetFlagsHelpFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlagsHelpFormat(HelpFormat)"
  },
  {
    "label": "DeduceUsageFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeduceUsageFlags(absl::string_view name, absl::string_view value)"
  }
]