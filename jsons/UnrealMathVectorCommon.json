[
  {
    "label": "FGenericPlatformMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMath"
  },
  {
    "label": "FMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMath"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (# pragma once struct FGenericPlatformMath ; struct FMath ; VectorRegister4Double)",
    "insertText": "MakeVectorRegister(double X, double Y, double Z, float W)"
  },
  {
    "label": "VectorZero()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorZero(void)"
  },
  {
    "label": "VectorOne()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorOne(void)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoad(const UE::Math::TQuat<T>* Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoad(const UE::Math::TVector4<T>* Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoad(const VectorRegister4Float* Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoad(const VectorRegister4Double* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadAligned(const UE::Math::TQuat<T>* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadAligned(const UE::Math::TVector4<T>* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadAligned(const UE::Math::TPlane<T>* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadAligned(const VectorRegister4Float* Ptr)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadFloat3(const UE::Math::TVector<T>* Ptr)"
  },
  {
    "label": "VectorLoadDouble3()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadDouble3(const double* Ptr)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat3_W0(const float* Ptr)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadFloat3_W0(const double* Ptr)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadFloat3_W0(const UE::Math::TVector<T>* Ptr)"
  },
  {
    "label": "VectorLoadFloat3_W0()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadFloat3_W0(const UE::Math::TRotator<T>* Ptr)"
  },
  {
    "label": "VectorLoadDouble3_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadDouble3_W0(const double* Ptr)"
  },
  {
    "label": "VectorLoadFloat3_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat3_W1(const float* Ptr)"
  },
  {
    "label": "VectorLoadFloat3_W1()",
    "kind": "Method",
    "detail": "Function (} template<T> TVectorRegisterType<T>)",
    "insertText": "VectorLoadFloat3_W1(const UE::Math::TVector<T>* Ptr)"
  },
  {
    "label": "VectorLoadDouble3_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadDouble3_W1(const double* Ptr)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat1(const VectorRegister4Float* Ptr)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadFloat1(const VectorRegister4Double* Ptr)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadFloat1(const double* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} # if SUPPORT_DOUBLE_TO_FLOAT_VECTOR_CONVERSION void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, float* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(MakeVectorRegisterFloatFromDouble(Vec), Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> void)",
    "insertText": "VectorStoreAligned(const TVectorRegisterType<T>& Vec, UE::Math::TVector4<T>* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Vec, (T*)Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, struct UE::Math::TVector4<double>* Dst)"
  },
  {
    "label": "DoubleVec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "DoubleVec(Vec)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(DoubleVec, Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "VectorStoreAligned(const TVectorRegisterType<T>& Vec, struct UE::Math::TQuat<T>* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, struct UE::Math::TQuat<double>* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, VectorRegister4Float* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (* Dst = Vec ; } void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, VectorRegister4Double* Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (* Dst = Vec ; } # if SUPPORT_DOUBLE_TO_FLOAT_VECTOR_CONVERSION void)",
    "insertText": "VectorStore(const VectorRegister4Double& Vec, float* Dst)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float FloatVec =)",
    "insertText": "MakeVectorRegisterFloatFromDouble(Vec)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStore(FloatVec, Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> void)",
    "insertText": "VectorStore(const VectorRegister4Float& Vec, UE::Math::TVector4<T>* Dst)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Vec, Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "VectorStore(const VectorRegister4Double& Vec, UE::Math::TVector4<T>* Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "VectorStore(const TVectorRegisterType<T>& Vec, struct UE::Math::TQuat<T>* Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore(const VectorRegister4Float& Vec, struct UE::Math::TQuat<double>* Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore(const VectorRegister4Float& Vec, VectorRegister4Float* Dst)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (* Dst = Vec ; } void)",
    "insertText": "VectorStore(const VectorRegister4Double& Vec, VectorRegister4Double* Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (* Dst = Vec ; } # if SUPPORT_DOUBLE_TO_FLOAT_VECTOR_CONVERSION void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Double& Vec, float* Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat3(FloatVec, Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Float& Vec, UE::Math::TVector<T>* Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat3(Vec, (T*)Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Double& Vec, UE::Math::TVector<T>* Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Float& Vec, UE::Math::TRotator<T>* Dst)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Double& Vec, UE::Math::TRotator<T>* Dst)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} # if SUPPORT_DOUBLE_TO_FLOAT_VECTOR_CONVERSION void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Double& Vec, float* Dst)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(FloatVec, Dst)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Float& Vec, int32* Dst)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(Vec, (float*)Dst)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Double& Vec, int32* Dst)"
  },
  {
    "label": "XMask64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "XMask64((uint64*)(&X))"
  },
  {
    "label": "XMask32()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "XMask32(uint32)(XMask64 & 0xFFFFFFFF)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float FloatVec =)",
    "insertText": "VectorLoadFloat1((float*)(&XMask32))"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Double& Vec, int64* Dst)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(Vec, (double*)Dst)"
  },
  {
    "label": "VectorReciprocalSqrtAccurate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalSqrtAccurate(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocalSqrtAccurate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalSqrtAccurate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorReciprocalAccurate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalAccurate(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocalAccurate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalAccurate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorNormalize()",
    "kind": "Method",
    "detail": "Function (} template<TVectorRegisterType> TVectorRegisterType)",
    "insertText": "VectorNormalize(const TVectorRegisterType& Vector)"
  },
  {
    "label": "VectorNormalizeAccurate()",
    "kind": "Method",
    "detail": "Function (} template<TVectorRegisterType> TVectorRegisterType)",
    "insertText": "VectorNormalizeAccurate(const TVectorRegisterType& Vector)"
  },
  {
    "label": "VectorNormalizeEstimate()",
    "kind": "Method",
    "detail": "Function (} template<TVectorRegisterType> TVectorRegisterType)",
    "insertText": "VectorNormalizeEstimate(const TVectorRegisterType& Vector)"
  },
  {
    "label": "VectorNormalizeSafe()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorNormalizeSafe(const VectorRegister4Float& Vector, const VectorRegister4Float& DefaultValue)"
  },
  {
    "label": "VectorDot4()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float SquareSum =)",
    "insertText": "VectorDot4(Vector, Vector)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float NonZeroMask =)",
    "insertText": "VectorCompareGE(SquareSum, GlobalVectorConstants::SmallLengthThreshold)"
  },
  {
    "label": "VectorReciprocalSqrtAccurate()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float InvLength =)",
    "insertText": "VectorReciprocalSqrtAccurate(SquareSum)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float NormalizedVector =)",
    "insertText": "VectorMultiply(InvLength, Vector)"
  },
  {
    "label": "VectorNormalizeSafe()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorNormalizeSafe(const VectorRegister4Double& Vector, const VectorRegister4Double& DefaultValue)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double NonZeroMask =)",
    "insertText": "VectorCompareGE(SquareSum, GlobalVectorConstants::DoubleSmallLengthThreshold)"
  },
  {
    "label": "VectorAnyLesserThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAnyLesserThan(VectorRegister4Float Vec1, VectorRegister4Float Vec2)"
  },
  {
    "label": "VectorAnyLesserThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAnyLesserThan(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "VectorAllGreaterThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAllGreaterThan(VectorRegister4Float Vec1, VectorRegister4Float Vec2)"
  },
  {
    "label": "VectorAllGreaterThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAllGreaterThan(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "VectorAllLesserThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAllLesserThan(VectorRegister4Float Vec1, VectorRegister4Float Vec2)"
  },
  {
    "label": "VectorAllLesserThan()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorAllLesserThan(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "VectorClamp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorClamp(const VectorRegister4Float& X, const VectorRegister4Float& VecMin, const VectorRegister4Float& VecMax)"
  },
  {
    "label": "VectorClamp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorClamp(const VectorRegister4Double& X, const VectorRegister4Double& VecMin, const VectorRegister4Double& VecMax)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} template<> VectorRegister4Float)",
    "insertText": "Min(const VectorRegister4Float A, const VectorRegister4Float B)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} template<> VectorRegister4Double)",
    "insertText": "Min(const VectorRegister4Double A, const VectorRegister4Double B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} template<> VectorRegister4Float)",
    "insertText": "Max(const VectorRegister4Float A, const VectorRegister4Float B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} template<> VectorRegister4Double)",
    "insertText": "Max(const VectorRegister4Double A, const VectorRegister4Double B)"
  },
  {
    "label": "VectorLerp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLerp(const VectorRegister4Float& A, const VectorRegister4Float& B, const VectorRegister4Float& Alpha)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float SubVec =)",
    "insertText": "VectorSubtract(GlobalVectorConstants::FloatOne, Alpha)"
  },
  {
    "label": "VectorLerp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLerp(const VectorRegister4Double& A, const VectorRegister4Double& B, const VectorRegister4Double& Alpha)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double SubVec =)",
    "insertText": "VectorSubtract(GlobalVectorConstants::DoubleOne, Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (} template<> struct TCustomLerp<VectorRegister4Float> { bool Value = true ; VectorRegister4Float)",
    "insertText": "Lerp(const VectorRegister4Float& A, const VectorRegister4Float& B, const VectorRegister4Float& Alpha)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TCustomLerp<VectorRegister4Double> { bool Value = true ; VectorRegister4Double)",
    "insertText": "Lerp(const VectorRegister4Double& A, const VectorRegister4Double& B, const VectorRegister4Double& Alpha)"
  },
  {
    "label": "VectorAccumulateQuaternionShortestPath()",
    "kind": "Method",
    "detail": "Function (} } ; VectorRegister4Float)",
    "insertText": "VectorAccumulateQuaternionShortestPath(const VectorRegister4Float& A, const VectorRegister4Float& B)"
  },
  {
    "label": "VectorZeroFloat()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float Zero =)",
    "insertText": "VectorZeroFloat()"
  },
  {
    "label": "VectorDot4()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float RotationDot =)",
    "insertText": "VectorDot4(A, B)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float QuatRotationDirMask =)",
    "insertText": "VectorCompareGE(RotationDot, Zero)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float NegativeB =)",
    "insertText": "VectorSubtract(Zero, B)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float BiasTimesB =)",
    "insertText": "VectorSelect(QuatRotationDirMask, B, NegativeB)"
  },
  {
    "label": "VectorAccumulateQuaternionShortestPath()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorAccumulateQuaternionShortestPath(const VectorRegister4Double& A, const VectorRegister4Double& B)"
  },
  {
    "label": "VectorZeroDouble()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double Zero =)",
    "insertText": "VectorZeroDouble()"
  },
  {
    "label": "VectorNormalizeQuaternion()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorNormalizeQuaternion(const VectorRegister4Float& UnnormalizedQuat)"
  },
  {
    "label": "VectorNormalizeQuaternion()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorNormalizeQuaternion(const VectorRegister4Double& UnnormalizedQuat)"
  },
  {
    "label": "VectorMod360()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorMod360(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorTruncate()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Temp =)",
    "insertText": "VectorTruncate(VectorDivide(X, GlobalVectorConstants::Float360))"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float FloatResult =)",
    "insertText": "VectorNegateMultiplyAdd(GlobalVectorConstants::Float360, Temp, X)"
  },
  {
    "label": "VectorTruncate()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Temp =)",
    "insertText": "VectorTruncate(VectorDivide(X, GlobalVectorConstants::Double360))"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double DoubleResult =)",
    "insertText": "VectorNegateMultiplyAdd(GlobalVectorConstants::Double360, Temp, X)"
  },
  {
    "label": "VectorMod360()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float V0 =)",
    "insertText": "VectorMod360(UnnormalizedRotator)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float V1 =)",
    "insertText": "VectorAdd(V0, GlobalVectorConstants::Float360)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float V2 =)",
    "insertText": "VectorSelect(VectorCompareGE(V0, VectorZeroFloat()), V0, V1)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float V3 =)",
    "insertText": "VectorSubtract(V2, GlobalVectorConstants::Float360)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float V4 =)",
    "insertText": "VectorSelect(VectorCompareGT(V2, GlobalVectorConstants::Float180), V3, V2)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double V1 =)",
    "insertText": "VectorAdd(V0, GlobalVectorConstants::Double360)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double V2 =)",
    "insertText": "VectorSelect(VectorCompareGE(V0, VectorZeroDouble()), V0, V1)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double V3 =)",
    "insertText": "VectorSubtract(V2, GlobalVectorConstants::Double360)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double V4 =)",
    "insertText": "VectorSelect(VectorCompareGT(V2, GlobalVectorConstants::Double180), V3, V2)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float OneMinusAlpha =)",
    "insertText": "VectorSubtract(VectorOneFloat(), Alpha)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float NegativeA =)",
    "insertText": "VectorSubtract(Zero, A)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float BiasTimesA =)",
    "insertText": "VectorSelect(QuatRotationDirMask, A, NegativeA)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float BTimesWeight =)",
    "insertText": "VectorMultiply(B, Alpha)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float UnnormalizedResult =)",
    "insertText": "VectorMultiplyAdd(BiasTimesA, OneMinusAlpha, BTimesWeight)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Double OneMinusAlpha =)",
    "insertText": "VectorSubtract(VectorOneDouble(), Alpha)"
  },
  {
    "label": "VectorBiLerpQuat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBiLerpQuat(const VectorRegister4Double& P00, const VectorRegister4Double& P10, const VectorRegister4Double& P01, const VectorRegister4Double& P11, const VectorRegister4Double& FracX, const VectorRegister4Double& FracY)"
  },
  {
    "label": "VectorQuaternionInverse()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorQuaternionInverse(const VectorRegister4Float& NormalizedQuat)"
  },
  {
    "label": "VectorQuaternionInverse()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorQuaternionInverse(const VectorRegister4Double& NormalizedQuat)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorQuaternionRotateVector(const VectorRegister4Float& Quat, const VectorRegister4Float& VectorW0)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float QW =)",
    "insertText": "VectorReplicate(Quat, 3)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float T =)",
    "insertText": "VectorCross(Quat, VectorW0)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (T =)",
    "insertText": "VectorAdd(T, T)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float VTemp0 =)",
    "insertText": "VectorMultiplyAdd(QW, T, VectorW0)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float VTemp1 =)",
    "insertText": "VectorCross(Quat, T)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float Rotated =)",
    "insertText": "VectorAdd(VTemp0, VTemp1)"
  },
  {
    "label": "VectorQuaternionInverse()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float QInv =)",
    "insertText": "VectorQuaternionInverse(Quat)"
  },
  {
    "label": "VectorQuaternionInverseRotateVector()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorQuaternionInverseRotateVector(const VectorRegister4Double& Quat, const VectorRegister4Double& VectorW0)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMultiply(VectorRegister4Double Vec1, VectorRegister4Float Vec2)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMultiplyAdd(VectorRegister4Double Vec1, VectorRegister4Float Vec2, VectorRegister4Double Acc)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMultiplyAdd(VectorRegister4Double Vec1, VectorRegister4Float Vec2, VectorRegister4Float Acc)"
  },
  {
    "label": "VectorSetDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSetDouble(double X, double Y, double Z, double W)"
  },
  {
    "label": "VectorSetDouble1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSetDouble1(double D)"
  },
  {
    "label": "VectorStoreDouble3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreDouble3(const VectorRegister4Double& Vec, double* Ptr)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat3(Vec, Ptr)"
  },
  {
    "label": "VectorStoreDouble1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreDouble1(const VectorRegister4Double& Vec, double* Ptr)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreFloat1(Vec, Ptr)"
  },
  {
    "label": "VectorSetFloat3()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSetFloat3(float X, float Y, float Z)"
  },
  {
    "label": "VectorSetFloat3()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSetFloat3(double X, double Y, double Z)"
  },
  {
    "label": "VectorSetDouble3()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSetDouble3(double X, double Y, double Z)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSet(float X, float Y, float Z, float W)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSet(double X, double Y, double Z, double W)"
  },
  {
    "label": "VectorSet()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSet(uint32 X, uint32 Y, uint32 Z, uint32 W)"
  },
  {
    "label": "VectorFractional()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorFractional(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorFractional()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorFractional(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorQuaternionMultiply(FQuat4f* RESTRICT Result, const FQuat4f* RESTRICT Quat1, const FQuat4f* RESTRICT Quat2)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float Q1 =)",
    "insertText": "VectorLoadAligned(Quat1)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float Q2 =)",
    "insertText": "VectorLoadAligned(Quat2)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float QResult =)",
    "insertText": "VectorQuaternionMultiply2(Q1, Q2)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(QResult, Result)"
  },
  {
    "label": "VectorQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorQuaternionMultiply(FQuat4d* RESTRICT Result, const FQuat4d* RESTRICT Quat1, const FQuat4d* RESTRICT Quat2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(_MSC_VER) #pragma intrinsic( _BitScanForward ) FORCEINLINE uint32 appCountTrailingZeros(uint32 Value)"
  }
]