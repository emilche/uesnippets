[
  {
    "label": "FGenericPlatformMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMath"
  },
  {
    "label": "FMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMath"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "TCustomLerp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCustomLerp"
  },
  {
    "label": "VectorZeroFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorZeroFloat()"
  },
  {
    "label": "VectorOneFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorOneFloat()"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegister(Ptr[0], Ptr[1], Ptr[2], 0.0f)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadFloat3(Ptr)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadFloat3(Ptr)"
  },
  {
    "label": "VectorLoadDouble3()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadDouble3(Ptr)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegister(Ptr[0], Ptr[1], Ptr[2], 1.0f)"
  },
  {
    "label": "VectorLoadFloat3_W1()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadFloat3_W1(Ptr)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReplicate(*Ptr, 0)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReplicate(*Ptr, 0)"
  },
  {
    "label": "VectorLoadDouble1()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadDouble1(Ptr)"
  },
  {
    "label": "DoubleVec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "DoubleVec(Vec)"
  },
  {
    "label": "DoubleVec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "DoubleVec(Vec)"
  },
  {
    "label": "DoubleVec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "DoubleVec(Vec)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocalSqrt(Vec)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocalSqrt(Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocal(Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocal(Vec)"
  },
  {
    "label": "VectorNormalize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorNormalize(Vector)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSelect(NonZeroMask, NormalizedVector, DefaultValue)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSelect(NonZeroMask, NormalizedVector, DefaultValue)"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorAnyGreaterThan( Vec2, Vec1 )"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorAnyGreaterThan(Vec2, Vec1)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorMin(A, B)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorMin(A, B)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorMax(A, B)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorMax(A, B)"
  },
  {
    "label": "VectorLerp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLerp(A, B, Alpha)"
  },
  {
    "label": "VectorLerp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLerp(A, B, Alpha)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorAdd(A, BiasTimesB)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorAdd(A, BiasTimesB)"
  },
  {
    "label": "VectorNormalizeSafe()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorNormalizeSafe(UnnormalizedQuat, GlobalVectorConstants::Float0001)"
  },
  {
    "label": "VectorNormalizeSafe()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorNormalizeSafe(UnnormalizedQuat, GlobalVectorConstants::Double0001)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorMultiply(GlobalVectorConstants::QINV_SIGN_MASK, NormalizedQuat)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorMultiply(GlobalVectorConstants::DOUBLE_QINV_SIGN_MASK, NormalizedQuat)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorQuaternionRotateVector(QInv, VectorW0)"
  },
  {
    "label": "VectorQuaternionRotateVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorQuaternionRotateVector(QInv, VectorW0)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSetFloat1(D)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, 0.0f)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, 0.0)"
  },
  {
    "label": "VectorSetFloat3()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSetFloat3(X, Y, Z)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  }
]