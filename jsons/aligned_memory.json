[
  {
    "label": "AlignedFreeDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlignedFreeDeleter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_ALIGNED_MEMORY_H_ # define BASE_MEMORY_ALIGNED_MEMORY_H_ # include<stddef . h> # include<stdint . h> # include<ostream> # include \" base / base_export . h \" # include \" base / bits . h \" # include \" base / check . h \" # include \" build / build_config . h \" # if)",
    "insertText": "defined(COMPILER_MSVC)"
  },
  {
    "label": "AlignedAlloc()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void*)",
    "insertText": "AlignedAlloc(size_t size, size_t alignment)"
  },
  {
    "label": "AlignedFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignedFree(void* ptr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(COMPILER_MSVC) _aligned_free(ptr)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "free(ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } struct AlignedFreeDeleter { void)",
    "insertText": "operator()(void* ptr)"
  },
  {
    "label": "AlignedFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlignedFree(ptr)"
  },
  {
    "label": "SUPPORTS_BUILTIN_IS_ALIGNED()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef __has_builtin # define)",
    "insertText": "SUPPORTS_BUILTIN_IS_ALIGNED(__has_builtin(__builtin_is_aligned)) #else #define SUPPORTS_BUILTIN_IS_ALIGNED 0 #endif inline bool IsAligned(uintptr_t val, size_t alignment)"
  },
  {
    "label": "__builtin_is_aligned()",
    "kind": "Method",
    "detail": "Function (# if SUPPORTS_BUILTIN_IS_ALIGNED return)",
    "insertText": "__builtin_is_aligned(val, alignment)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "DCHECK(bits::IsPowerOfTwo(alignment))"
  },
  {
    "label": "IsAligned()",
    "kind": "Method",
    "detail": "Function (# endif } # undef SUPPORTS_BUILTIN_IS_ALIGNED bool)",
    "insertText": "IsAligned(const void* val, size_t alignment)"
  }
]