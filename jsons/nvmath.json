[
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_H # define NV_MATH_H # include<nvcore / nvcore . h> # include<nvcore / Debug . h> # include<math . h> # if NVMATH_SHARED # ifdef NVMATH_EXPORTS # define DLL_EXPORT # define NVMATH_CLASS DLL_EXPORT_CLASS # else # define DLL_IMPORT # define NVMATH_CLASS DLL_IMPORT # endif # else # define # define NVMATH_CLASS # endif # ifndef PI # define PI)",
    "insertText": "float(3.1415926535897932384626433833) #endif #define NV_EPSILON (0.0001f) #define NV_NORMAL_EPSILON (0.001f) #if _MSC_VER < 1700 inline double sqrt_assert(const double f)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(f >= 0.0f)"
  },
  {
    "label": "sqrtf_assert()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "sqrtf_assert(const float f)"
  },
  {
    "label": "acos_assert()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "acos_assert(const double f)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(f >= -1.0f && f <= 1.0f)"
  },
  {
    "label": "acosf_assert()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "acosf_assert(const float f)"
  },
  {
    "label": "asin_assert()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "asin_assert(const double f)"
  },
  {
    "label": "asinf_assert()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "asinf_assert(const float f)"
  },
  {
    "label": "toRadian()",
    "kind": "Method",
    "detail": "Function (} # define sqrt sqrt_assert # define sqrtf sqrtf_assert # define acos acos_assert # define acosf acosf_assert # define asin asin_assert # define asinf asinf_assert # endif # if NV_OS_WIN32 # include<float . h> # endif namespace nv { float)",
    "insertText": "toRadian(float degree)"
  },
  {
    "label": "toDegree()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "toDegree(float radian)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equal(const float f0, const float f1, const float epsilon = NV_EPSILON)"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isZero(const float f, const float epsilon = NV_EPSILON)"
  },
  {
    "label": "isFinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFinite(const float f)"
  },
  {
    "label": "_finite()",
    "kind": "Method",
    "detail": "Function (# if NV_OS_WIN32 return)",
    "insertText": "_finite(f)"
  },
  {
    "label": "isfinite()",
    "kind": "Method",
    "detail": "Function (# elif NV_OS_DARWIN return)",
    "insertText": "isfinite(f)"
  },
  {
    "label": "finitef()",
    "kind": "Method",
    "detail": "Function (# elif NV_OS_LINUX return)",
    "insertText": "finitef(f)"
  },
  {
    "label": "isNan()",
    "kind": "Method",
    "detail": "Function (# else # error \" isFinite not supported \" # endif } bool)",
    "insertText": "isNan(const float f)"
  },
  {
    "label": "_isnan()",
    "kind": "Method",
    "detail": "Function (# if NV_OS_WIN32 return)",
    "insertText": "_isnan(f)"
  },
  {
    "label": "isnan()",
    "kind": "Method",
    "detail": "Function (# elif NV_OS_DARWIN return)",
    "insertText": "isnan(f)"
  },
  {
    "label": "isnanf()",
    "kind": "Method",
    "detail": "Function (# elif NV_OS_LINUX return)",
    "insertText": "isnanf(f)"
  },
  {
    "label": "log2()",
    "kind": "Method",
    "detail": "Function (# else # error \" isNan not supported \" # endif } uint)",
    "insertText": "log2(uint i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint value = 0 ;)",
    "insertText": "while(i >>= 1)"
  },
  {
    "label": "lerp()",
    "kind": "Method",
    "detail": "Function (value + + ; } return value ; } float)",
    "insertText": "lerp(float f0, float f1, float t)"
  },
  {
    "label": "square()",
    "kind": "Method",
    "detail": "Function (const float s = 1 . 0 f - t ; return f0* s + f1* t ; } float)",
    "insertText": "square(float f)"
  }
]