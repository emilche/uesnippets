[
  {
    "label": "UMaterialExpressionReroute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionReroute"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Materials / MaterialExpressionRerouteBase . h \" # include \" MaterialExpressionReroute . generated . h \")",
    "insertText": "UCLASS(collapsecategories, hidecategories=Object, DisplayName = \"Reroute\", MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "CompilePreview()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompilePreview(FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "GetCreationDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCreationDescription()"
  },
  {
    "label": "GetCreationName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCreationName()"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  },
  {
    "label": "GetRerouteInput()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "GetRerouteInput(FExpressionInput& OutInput)"
  }
]