[
  {
    "label": "ScenarioIceConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScenarioIceConnection"
  },
  {
    "label": "IceConnectionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceConnectionObserver"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PEER_SCENARIO_SCENARIO_CONNECTION_H_ # define TEST_PEER_SCENARIO_SCENARIO_CONNECTION_H_ # include<functional> # include<memory> # include<string> # include<vector> # include \" api / candidate . h \" # include \" api / jsep . h \" # include \" p2p / base / transport_description . h \" # include \" test / network / network_emulation_manager . h \" # include \" test / scoped_key_value_config . h \" namespace webrtc { class ScenarioIceConnection { public : class IceConnectionObserver { public : void)",
    "insertText": "OnPacketReceived(rtc::CopyOnWriteBuffer packet)"
  },
  {
    "label": "OnIceCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIceCandidates(const std::string& mid, const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "IceConnectionObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "IceConnectionObserver()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; std::unique_ptr<ScenarioIceConnection>)",
    "insertText": "Create(test::NetworkEmulationManagerImpl* net, IceConnectionObserver* observer)"
  },
  {
    "label": "ScenarioIceConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScenarioIceConnection()"
  },
  {
    "label": "SendRtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRtpPacket(rtc::ArrayView<const uint8_t> packet_view)"
  },
  {
    "label": "SendRtcpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRtcpPacket(rtc::ArrayView<const uint8_t> packet_view)"
  },
  {
    "label": "SetRemoteSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteSdp(SdpType type, const std::string& remote_sdp)"
  },
  {
    "label": "SetLocalSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSdp(SdpType type, const std::string& local_sdp)"
  },
  {
    "label": "endpoint()",
    "kind": "Method",
    "detail": "Function (EmulatedEndpoint*)",
    "insertText": "endpoint()"
  },
  {
    "label": "transport_description()",
    "kind": "Method",
    "detail": "Function (const cricket::TransportDescription&)",
    "insertText": "transport_description()"
  }
]