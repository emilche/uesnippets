[
  {
    "label": "FPBDAltitudeSpringConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDAltitudeSpringConstraints"
  },
  {
    "label": "FPBDAltitudeSpringConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" namespace Chaos::Softs { class FPBDAltitudeSpringConstraints { public :)",
    "insertText": "FPBDAltitudeSpringConstraints(const FSolverParticles& InParticles, TArray<TVec4<int32>>&& InConstraints, const FSolverReal InStiffness = (FSolverReal)1.) : Constraints(InConstraints), Stiffness(InStiffness)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (RestLength .)",
    "insertText": "Init((FSolverReal)0., 4 * Constraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Volumes .)",
    "insertText": "Init((FSolverReal)0., Constraints.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TVec4<int32> Constraint = Constraints [ ElementIndex ] ;)",
    "insertText": "for(int32 i = 0; i < 4; i++)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = InParticles .)",
    "insertText": "GetX(Constraint[i])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "GetX(Constraint[(i + 1) % 4])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "GetX(Constraint[(i + 2) % 4])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "GetX(Constraint[(i + 3) % 4])"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (RestLength [ 4* ElementIndex + i ] =)",
    "insertText": "DotProduct(FSolverVec3::CrossProduct(P3 - P2, P4 - P2), P1 - P2) / FSolverVec3::CrossProduct(P3 - P2, P4 - P2).Size()"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (} const FSolverVec3& P1 = InParticles .)",
    "insertText": "GetX(Constraint[0])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "GetX(Constraint[1])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "GetX(Constraint[2])"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "GetX(Constraint[3])"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Volumes [ ElementIndex ] =)",
    "insertText": "DotProduct(FSolverVec3::CrossProduct(P2 - P1, P3 - P1), P4 - P1) / (FSolverReal)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InitColor(InParticles)"
  },
  {
    "label": "FPBDAltitudeSpringConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDAltitudeSpringConstraints()"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (} TVec4<FSolverVec3>)",
    "insertText": "GetGradients(const FSolverParticles& InParticles, const int32 ElementIndex, const int32 ie)"
  },
  {
    "label": "Grads()",
    "kind": "Method",
    "detail": "Function (TVec4<FSolverVec3>)",
    "insertText": "Grads(FSolverVec3((FSolverReal)0.))"
  },
  {
    "label": "Constraint()",
    "kind": "Method",
    "detail": "Function (; const TVec4<int32>& Constraint = Constraints [ ElementIndex ] ; const int32 i1 = Constraint [ ie ] ; const int32 i2 =)",
    "insertText": "Constraint(ie + 1)"
  },
  {
    "label": "Constraint()",
    "kind": "Method",
    "detail": "Function (const int32 i3 =)",
    "insertText": "Constraint(ie + 2)"
  },
  {
    "label": "Constraint()",
    "kind": "Method",
    "detail": "Function (const int32 i4 =)",
    "insertText": "Constraint(ie + 3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P1 = InParticles .)",
    "insertText": "P(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "P(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "P(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "P(i4)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P1P2 = P1 - P2 ; const FSolverVec3 P3P2 = P3 - P2 ; const FSolverVec3 P4P2 = P4 - P2 ; FSolverVec3 ScaledBottomNormal =)",
    "insertText": "CrossProduct(P3 - P2, P4 - P2)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (FSolverReal ScaledVolume =)",
    "insertText": "DotProduct(ScaledBottomNormal, P1 - P2)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (FSolverReal ScaledArea = ScaledBottomNormal .)",
    "insertText": "Size()"
  },
  {
    "label": "dAdX()",
    "kind": "Method",
    "detail": "Function (TVec4<FSolverVec3>)",
    "insertText": "dAdX(FSolverVec3((FSolverReal)0.))"
  },
  {
    "label": "ScaleddAdV()",
    "kind": "Method",
    "detail": "Function (FSolverVec3)",
    "insertText": "ScaleddAdV((FSolverReal)0.)"
  },
  {
    "label": "ScaleddAdW()",
    "kind": "Method",
    "detail": "Function (ScaleddAdV [ 0 ] = - ScaledBottomNormal [ 1 ]* P4P2 [ 2 ] + ScaledBottomNormal [ 2 ]* P4P2 [ 1 ] ; ScaleddAdV [ 1 ] = ScaledBottomNormal [ 0 ]* P4P2 [ 2 ] - ScaledBottomNormal [ 2 ]* P4P2 [ 0 ] ; ScaleddAdV [ 2 ] = - ScaledBottomNormal [ 0 ]* P4P2 [ 1 ] + ScaledBottomNormal [ 1 ]* P4P2 [ 0 ] ; FSolverVec3)",
    "insertText": "ScaleddAdW((FSolverReal)0.)"
  },
  {
    "label": "dAdX()",
    "kind": "Method",
    "detail": "Function (ScaleddAdW [ 0 ] = ScaledBottomNormal [ 1 ]* P3P2 [ 2 ] - ScaledBottomNormal [ 2 ]* P3P2 [ 1 ] ; ScaleddAdW [ 1 ] = - ScaledBottomNormal [ 0 ]* P3P2 [ 2 ] + ScaledBottomNormal [ 2 ]* P3P2 [ 0 ] ; ScaleddAdW [ 2 ] = ScaledBottomNormal [ 0 ]* P3P2 [ 1 ] - ScaledBottomNormal [ 1 ]* P3P2 [ 0 ] ;)",
    "insertText": "dAdX(FSolverReal)"
  },
  {
    "label": "dVdX()",
    "kind": "Method",
    "detail": "Function (dAdX [ 1 ] = - dAdX [ 2 ] - dAdX [ 3 ] ; TVec4<FSolverVec3>)",
    "insertText": "dVdX(FSolverVec3((FSolverReal)0.))"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (dVdX [ 0 ] =)",
    "insertText": "CrossProduct(P3P2, P4P2)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (dVdX [ 2 ] =)",
    "insertText": "CrossProduct(P4P2, P1P2)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (dVdX [ 3 ] =)",
    "insertText": "CrossProduct(P1P2, P3P2)"
  },
  {
    "label": "dVdX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dVdX(dVdX[0] + dVdX[2] + dVdX[3])"
  },
  {
    "label": "ScaledVolume()",
    "kind": "Method",
    "detail": "Function (Grads [ je ] = -)",
    "insertText": "ScaledVolume(ScaledArea * ScaledArea) * dAdX[je] + (FSolverReal)"
  },
  {
    "label": "GetScalingFactor()",
    "kind": "Method",
    "detail": "Function (} return Grads ; } FSolverReal)",
    "insertText": "GetScalingFactor(const FSolverParticles& InParticles, const int32 ElementIndex, const int32 ie, const TVec4<FSolverVec3>& Grads)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "S(CurrentLength - RestLength[4*ElementIndex+ie]) / ( InParticles.InvM(i1) * Grads[0].SizeSquared() + InParticles.InvM(i2) * Grads[1].SizeSquared() + InParticles.InvM(i3) * Grads[2].SizeSquared() + InParticles.InvM(i4) * Grads[3].SizeSquared())"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosPBDAltitudeSpringApplySingle)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ ElementIndex ] ;)",
    "insertText": "for(int ie = 0; ie < 4; ++ie)"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (const TVec4<FSolverVec3> Grads =)",
    "insertText": "GetGradients(Particles, ElementIndex, ie)"
  },
  {
    "label": "GetScalingFactor()",
    "kind": "Method",
    "detail": "Function (const FSolverReal S =)",
    "insertText": "GetScalingFactor(Particles, ElementIndex, ie, Grads)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i1) -= S * Particles.InvM(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i2) -= S * Particles.InvM(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i3) -= S * Particles.InvM(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (Particles .)",
    "insertText": "P(i4) -= S * Particles.InvM(i4)"
  },
  {
    "label": "ApplySingleElementAllInOne()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplySingleElementAllInOne(FSolverParticles& Particles, const FSolverReal Dt, const int32 ElementIndex)"
  },
  {
    "label": "Stiffness()",
    "kind": "Method",
    "detail": "Function (const FSolverReal S =)",
    "insertText": "Stiffness(CurrentLength - RestLength[4 * ElementIndex + ie]) / ( Particles.InvM(i1) * Grads[0].SizeSquared() + Particles.InvM(i2) * Grads[1].SizeSquared() + Particles.InvM(i3) * Grads[2].SizeSquared() + Particles.InvM(i4) * Grads[3].SizeSquared())"
  },
  {
    "label": "ApplySingleElementVolumeAllInOne()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplySingleElementVolumeAllInOne(FSolverParticles& Particles, const FSolverReal Dt, const int32 ElementIndex)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (TVec4<FSolverVec3> Grads ; const TVec4<int32>& Constraint = Constraints [ ElementIndex ] ; const FSolverVec3& P1 = Particles .)",
    "insertText": "P(Constraint[0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = Particles .)",
    "insertText": "P(Constraint[1])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = Particles .)",
    "insertText": "P(Constraint[2])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = Particles .)",
    "insertText": "P(Constraint[3])"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P2P1 = P2 - P1 ; const FSolverVec3 P4P1 = P4 - P1 ; const FSolverVec3 P3P1 = P3 - P1 ; Grads [ 1 ] =)",
    "insertText": "CrossProduct(P3P1, P4P1) / (FSolverReal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Grads [ 2 ] =)",
    "insertText": "CrossProduct(P4P1, P2P1) / (FSolverReal)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (Grads [ 3 ] =)",
    "insertText": "CrossProduct(P2P1, P3P1) / (FSolverReal)"
  },
  {
    "label": "Grads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grads(Grads[1] + Grads[2] + Grads[3])"
  },
  {
    "label": "Stiffness()",
    "kind": "Method",
    "detail": "Function (const FSolverReal S =)",
    "insertText": "Stiffness(Volume - Volumes[ElementIndex]) / ( Particles.InvM(i1) * Grads[0].SizeSquared() + Particles.InvM(i2) * Grads[1].SizeSquared() + Particles.InvM(i3) * Grads[2].SizeSquared() + Particles.InvM(i4) * Grads[3].SizeSquared())"
  },
  {
    "label": "ApplySingleElementShortest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplySingleElementShortest(FSolverParticles& Particles, const FSolverReal Dt, const int32 ElementIndex)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosPBDAltitudeSpringApplySingleShortest)"
  },
  {
    "label": "GetSingleElementShortestLength()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ ElementIndex ] ; int32 ie =)",
    "insertText": "GetSingleElementShortestLength(Particles, Dt, ElementIndex)"
  },
  {
    "label": "GetSingleElementShortestLength()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSingleElementShortestLength(FSolverParticles& Particles, const FSolverReal Dt, const int32 ElementIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FSolverReal CurrentConstraint = CurrentLength - RestLength [ 4* ElementIndex + ie ] ;)",
    "insertText": "if(CurrentConstraint < MinConstraint)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosPBDAltitudeSpringApplySerial)"
  },
  {
    "label": "ApplySingleElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySingleElement(Particles, Dt, ElementIndex)"
  },
  {
    "label": "ApplyInParallel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyInParallel(FSolverParticles& Particles, const FSolverReal Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosPBDAltitudeSpringApply)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintColorNum = ConstraintsPerColorStartIndex .)",
    "insertText": "Num()"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (const int32 ColorStart = ConstraintsPerColorStartIndex [ ConstraintColorIndex ] ; const int32 ColorSize = ConstraintsPerColorStartIndex [ ConstraintColorIndex + 1 ] - ColorStart ;)",
    "insertText": "PhysicsParallelFor(ColorSize, [&](const int32 Index) { const int32 ConstraintIndex = ColorStart + Index; ApplySingleElement(Particles, Dt, ConstraintIndex); })"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (} } } } protected : TArray<TVec4<int32>> Constraints ; protected : private : void)",
    "insertText": "InitColor(const FSolverParticles& Particles)"
  },
  {
    "label": "ComputeGraphColoring()",
    "kind": "Method",
    "detail": "Function ({ const TArray<TArray<int32>> ConstraintsPerColor =)",
    "insertText": "ComputeGraphColoring(Constraints, Particles)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<TVec4<int32>> ReorderedConstraints ; TArray<FSolverReal> ReorderedRestLength ; TArray<FSolverReal> ReorderedVolumes ; TArray<int32> OrigToReorderedIndices ; ReorderedConstraints .)",
    "insertText": "SetNumUninitialized(Constraints.Num())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ReorderedRestLength .)",
    "insertText": "SetNumUninitialized(RestLength.Num())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (ReorderedVolumes .)",
    "insertText": "SetNumUninitialized(Volumes.Num())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ConstraintsPerColorStartIndex .)",
    "insertText": "Reset(ConstraintsPerColor.Num() + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ReorderedIndex = 0 ;)",
    "insertText": "for(const TArray<int32>& ConstraintsBatch : ConstraintsPerColor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ConstraintsPerColorStartIndex .)",
    "insertText": "Add(ReorderedIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 OrigIndex = BatchConstraint ; ReorderedConstraints [ ReorderedIndex ] = Constraints [ OrigIndex ] ;)",
    "insertText": "for(int32 kk = 0; kk < 4; kk++)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Constraints =)",
    "insertText": "MoveTemp(ReorderedConstraints)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RestLength =)",
    "insertText": "MoveTemp(ReorderedRestLength)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Volumes =)",
    "insertText": "MoveTemp(ReorderedVolumes)"
  }
]