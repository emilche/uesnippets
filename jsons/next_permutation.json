[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_BidirectionalIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirectionalIterator"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_NEXT_PERMUTATION_H # define _LIBCPP___ALGORITHM_NEXT_PERMUTATION_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / reverse . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<__utility / pair . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _BidirectionalIterator, class _Sentinel> _LIBCPP_CONSTEXPR_AFTER_CXX17 pair<_BidirectionalIterator, bool> __next_permutation(_BidirectionalIterator __first, _Sentinel __last, _Compare&& __comp)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (using _Result = pair<_BidirectionalIterator,bool> ; _BidirectionalIterator __last_iter = _IterOps<_AlgPolicy)",
    "insertText": "next(__first, __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_BidirectionalIterator __i = __last_iter ;)",
    "insertText": "if(__first == __last || __first == --__i) return _Result(std::move(__last_iter), false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_BidirectionalIterator __ip1 = __i ;)",
    "insertText": "if(__comp(*--__i, *__ip1))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_BidirectionalIterator __j = __last_iter ;)",
    "insertText": "while(!__comp(*__i, *--__j))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (_IterOps<_AlgPolicy)",
    "insertText": "iter_swap(__i, __j)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__reverse<)",
    "insertText": "_AlgPolicy(__ip1, __last_iter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__i == __first)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__reverse<)",
    "insertText": "_AlgPolicy(__first, __last_iter)"
  },
  {
    "label": "next_permutation()",
    "kind": "Method",
    "detail": "Function (} } } template<class _BidirectionalIterator,class _Compare> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (using _Comp_ref = __comp_ref_type<_Compare>::type ; return std::__next_permutation<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), static_cast<_Comp_ref>(__comp))"
  },
  {
    "label": "next_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _BidirectionalIterator> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)"
  }
]