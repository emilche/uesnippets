[
  {
    "label": "TLumenCardOBB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLumenCardOBB"
  },
  {
    "label": "GetMinDensity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Math / Box . h \" # include \" Math / Matrix . h \" # include \" Math / Vector . h \" namespace MeshCardRepresentation { float)",
    "insertText": "GetMinDensity()"
  },
  {
    "label": "GetNormalTreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalTreshold()"
  },
  {
    "label": "IsDebugMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDebugMode()"
  },
  {
    "label": "GetDebugSurfelDirection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDebugSurfelDirection()"
  },
  {
    "label": "TLumenCardOBB()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class TLumenCardOBB { public : UE::Math::TVector<T> Origin ; UE::Math::TVector<T> AxisX ; UE::Math::TVector<T> AxisY ; UE::Math::TVector<T> AxisZ ; UE::Math::TVector<T> Extent ;)",
    "insertText": "TLumenCardOBB()"
  },
  {
    "label": "TLumenCardOBB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TLumenCardOBB(EForceInit)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TLumenCardOBB(const TLumenCardOBB<FArg>& From)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Origin = UE::Math::TVector<)",
    "insertText": "T(From.Origin)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AxisX = UE::Math::TVector<)",
    "insertText": "T(From.AxisX)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AxisY = UE::Math::TVector<)",
    "insertText": "T(From.AxisY)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (AxisZ = UE::Math::TVector<)",
    "insertText": "T(From.AxisZ)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Extent = UE::Math::TVector<)",
    "insertText": "T(From.Extent)"
  },
  {
    "label": "GetDirection()",
    "kind": "Method",
    "detail": "Function (Origin = UE::Math::TVector<T>::ZeroVector ; AxisX = UE::Math::TVector<T>::ZeroVector ; AxisY = UE::Math::TVector<T>::ZeroVector ; AxisZ = UE::Math::TVector<T>::ZeroVector ; Extent = UE::Math::TVector<T>::ZeroVector ; } UE::Math::TVector<T>)",
    "insertText": "GetDirection()"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (UE::Math::TMatrix<T> CardToLocal ; CardToLocal .)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "SetAxes()",
    "kind": "Method",
    "detail": "Function (CardToLocal .)",
    "insertText": "SetAxes(&AxisX, &AxisY, &AxisZ, &Origin)"
  },
  {
    "label": "TransformLocalToCard()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TVector<T>)",
    "insertText": "TransformLocalToCard(UE::Math::TVector<T> LocalPosition)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<T> Offset = LocalPosition - Origin ; return UE::Math::TVector<)",
    "insertText": "T(Offset | AxisX, Offset | AxisY, Offset | AxisZ)"
  },
  {
    "label": "TransformCardToLocal()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TVector<T>)",
    "insertText": "TransformCardToLocal(UE::Math::TVector<T> CardPosition)"
  },
  {
    "label": "TransformLocalToCard()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<T> CardPositon =)",
    "insertText": "TransformLocalToCard(WorldPosition)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} TLumenCardOBB<T>)",
    "insertText": "Transform(UE::Math::TMatrix<T> LocalToWorld)"
  },
  {
    "label": "TransformPosition()",
    "kind": "Method",
    "detail": "Function (TLumenCardOBB<T> WorldOBB ; WorldOBB . Origin = LocalToWorld .)",
    "insertText": "TransformPosition(Origin)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (const UE::Math::TVector<T> ScaledXAxis = LocalToWorld .)",
    "insertText": "TransformVector(AxisX)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (const UE::Math::TVector<T> ScaledYAxis = LocalToWorld .)",
    "insertText": "TransformVector(AxisY)"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (const UE::Math::TVector<T> ScaledZAxis = LocalToWorld .)",
    "insertText": "TransformVector(AxisZ)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const T XAxisLength = ScaledXAxis .)",
    "insertText": "Size()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (WorldOBB . AxisY = ScaledYAxis /)",
    "insertText": "Max(YAxisLength, UE_DELTA)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (WorldOBB . AxisZ = ScaledZAxis /)",
    "insertText": "Max(ZAxisLength, UE_DELTA)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (WorldOBB . AxisX = UE::Math::TVector<T)",
    "insertText": "CrossProduct(WorldOBB.AxisZ, WorldOBB.AxisY)"
  },
  {
    "label": "CreateOrthonormalBasis()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<T)",
    "insertText": "CreateOrthonormalBasis(WorldOBB.AxisX, WorldOBB.AxisY, WorldOBB.AxisZ)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (WorldOBB . Extent = Extent* UE::Math::TVector<)",
    "insertText": "T(XAxisLength, YAxisLength, ZAxisLength)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (WorldOBB . Extent . Z =)",
    "insertText": "Max(WorldOBB.Extent.Z, 1.0f)"
  },
  {
    "label": "BoxMin()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<T>)",
    "insertText": "BoxMin(AxisX.GetAbs() * -Extent.X + AxisY.GetAbs() * -Extent.Y + AxisZ.GetAbs() * -Extent.Z + Origin)"
  },
  {
    "label": "BoxMax()",
    "kind": "Method",
    "detail": "Function (UE::Math::TVector<T>)",
    "insertText": "BoxMax(AxisX.GetAbs() * +Extent.X + AxisY.GetAbs() * +Extent.Y + AxisZ.GetAbs() * +Extent.Z + Origin)"
  },
  {
    "label": "ContainsNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsNaN()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TLumenCardOBB<T>& Data)"
  }
]