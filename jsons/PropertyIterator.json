[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPropertyIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPropertyIterator"
  },
  {
    "label": "TPropertyIterator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Field . h \" # include \" UObject / UObjectIterator . h \" template<class T> class TPropertyIterator { private : const UStruct* Struct ; FField* Field ; TObjectIterator<UStruct> ClassIterator ; public :)",
    "insertText": "TPropertyIterator() : Struct(nullptr) , Field(nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Struct =* ClassIterator ; Field = Struct -> ChildProperties ;)",
    "insertText": "if(!Field || !Field->IsA<T>())"
  },
  {
    "label": "IterateToNext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateToNext()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } } operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TPropertyIterator<T>& Lhs, const TPropertyIterator<T>& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (} const UStruct*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FField* NewField = Field ; do {)",
    "insertText": "if(NewField)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewField = NewField -> Next ; })",
    "insertText": "if(!NewField && ClassIterator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + ClassIterator ;)",
    "insertText": "if(ClassIterator)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Struct =* ClassIterator ; NewField = Struct -> ChildProperties ; } else { NewField = nullptr ; } } })",
    "insertText": "while(ClassIterator && (!NewField || !NewField->IsA<T>()))"
  }
]