[
  {
    "label": "AudioMultiVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioMultiVector"
  },
  {
    "label": "PostDecodeVad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PostDecodeVad"
  },
  {
    "label": "BackgroundNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BackgroundNoise"
  },
  {
    "label": "ChannelParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChannelParameters"
  },
  {
    "label": "BackgroundNoise()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_BACKGROUND_NOISE_H_ # define MODULES_AUDIO_CODING_NETEQ_BACKGROUND_NOISE_H_ # include<string . h> # include<memory> # include \" api / array_view . h \" namespace webrtc { class AudioMultiVector ; class PostDecodeVad ; class BackgroundNoise { public : size_t kMaxLpcOrder = 8 ;)",
    "insertText": "BackgroundNoise(size_t num_channels)"
  },
  {
    "label": "BackgroundNoise()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BackgroundNoise()"
  },
  {
    "label": "BackgroundNoise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackgroundNoise(const BackgroundNoise&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BackgroundNoise&)",
    "insertText": "operator(const BackgroundNoise&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Update(const AudioMultiVector& sync_buffer, const PostDecodeVad& vad)"
  },
  {
    "label": "GenerateBackgroundNoise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBackgroundNoise(rtc::ArrayView<const int16_t> random_vector, size_t channel, int mute_slope, bool too_many_expands, size_t num_noise_samples, int16_t* buffer)"
  },
  {
    "label": "Energy()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Energy(size_t channel)"
  },
  {
    "label": "SetMuteFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMuteFactor(size_t channel, int16_t value)"
  },
  {
    "label": "MuteFactor()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "MuteFactor(size_t channel)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (const int16_t*)",
    "insertText": "Filter(size_t channel)"
  },
  {
    "label": "FilterState()",
    "kind": "Method",
    "detail": "Function (const int16_t*)",
    "insertText": "FilterState(size_t channel)"
  },
  {
    "label": "SetFilterState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterState(size_t channel, rtc::ArrayView<const int16_t> input)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "Scale(size_t channel)"
  },
  {
    "label": "ScaleShift()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "ScaleShift(size_t channel)"
  },
  {
    "label": "initialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initialized()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (energy = 2 5 0 0 ; max_energy = 0 ; energy_update_threshold = 5 0 0 0 0 0 ; low_energy_update_threshold = 0 ;)",
    "insertText": "memset(filter_state, 0, sizeof(filter_state))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(filter, 0, sizeof(filter))"
  },
  {
    "label": "CalculateAutoCorrelation()",
    "kind": "Method",
    "detail": "Function (filter [ 0 ] = 4 0 9 6 ; mute_factor = 0 ; scale = 2 0 0 0 0 ; scale_shift = 2 4 ; } int32_t energy ; int32_t max_energy ; int32_t energy_update_threshold ; int32_t low_energy_update_threshold ; int16_t filter_state [ kMaxLpcOrder ] ; int16_t filter [ kMaxLpcOrder + 1 ] ; int16_t mute_factor ; int16_t scale ; int16_t scale_shift ; } ; int32_t)",
    "insertText": "CalculateAutoCorrelation(const int16_t* signal, size_t length, int32_t* auto_correlation)"
  },
  {
    "label": "IncrementEnergyThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementEnergyThreshold(size_t channel, int32_t sample_energy)"
  },
  {
    "label": "SaveParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveParameters(size_t channel, const int16_t* lpc_coefficients, const int16_t* filter_state, int32_t sample_energy, int32_t residual_energy)"
  }
]