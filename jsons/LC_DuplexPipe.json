[
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "DuplexPipe()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Commands . h \" # include \" LC_Assert . h \" # include \" LC_Platform . h \" class DuplexPipe { public :)",
    "insertText": "DuplexPipe(void)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(void)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(void)"
  },
  {
    "label": "SendCommandAndWaitForAck()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SendCommandAndWaitForAck(const T& command, const void* payload, size_t payloadSize)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (const commands::Header header = { T::ID,static_cast<)",
    "insertText": "uint32_t(payloadSize)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(&header, sizeof(commands::Header))"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(&command, sizeof(T))"
  },
  {
    "label": "LC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_ASSERT(payload != nullptr, \"Cannot send command payload.\")"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(payload, payloadSize)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} commands::Acknowledge ack = { } ;)",
    "insertText": "Read(&ack, sizeof(commands::Acknowledge))"
  },
  {
    "label": "ReceiveHeader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReceiveHeader(commands::Header* header)"
  },
  {
    "label": "ReceiveCommand()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "ReceiveCommand(T* command, void* payload, size_t payloadSize)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool success =)",
    "insertText": "Read(command, sizeof(T))"
  },
  {
    "label": "LC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LC_ASSERT(payload != nullptr, \"Cannot receive command payload.\")"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (success& =)",
    "insertText": "Read(payload, payloadSize)"
  },
  {
    "label": "SendAck()",
    "kind": "Method",
    "detail": "Function (} return success ; } void)",
    "insertText": "SendAck(void)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (commands::Acknowledge ack = { } ;)",
    "insertText": "Send(&ack, sizeof(commands::Acknowledge))"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} protected : HANDLE m_pipe ; private : void)",
    "insertText": "Send(const void* buffer, size_t size)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(void* buffer, size_t size)"
  }
]