[
  {
    "label": "StringSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringSaver"
  },
  {
    "label": "BumpPtrStringSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BumpPtrStringSaver"
  },
  {
    "label": "StringSaver()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_STRINGSAVER_H # define LLVM_SUPPORT_STRINGSAVER_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / Twine . h \" # include \" llvm / Support / Allocator . h \" namespace llvm { class StringSaver { protected : ~)",
    "insertText": "StringSaver()"
  },
  {
    "label": "saveImpl()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "saveImpl(StringRef S)"
  },
  {
    "label": "StringSaver()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "StringSaver(BumpPtrAllocator &Alloc) : Alloc(Alloc)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "save(const char *S)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "save(StringRef S)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "save(const Twine &S)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "save(std::string &S)"
  },
  {
    "label": "BumpPtrStringSaver()",
    "kind": "Method",
    "detail": "Function (} private : BumpPtrAllocator& Alloc ; } ; class BumpPtrStringSaver final : public StringSaver { public :)",
    "insertText": "BumpPtrStringSaver(BumpPtrAllocator &Alloc) : StringSaver(Alloc)"
  }
]