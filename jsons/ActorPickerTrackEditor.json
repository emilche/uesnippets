[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FTrackEditorBindingIDPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackEditorBindingIDPicker"
  },
  {
    "label": "FMovieSceneObjectBindingID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingID"
  },
  {
    "label": "FActorPickerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorPickerTrackEditor"
  },
  {
    "label": "FActorPickerID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPickerID"
  },
  {
    "label": "FActorPickerID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameFramework / Actor . h \" # include \" Misc / Guid . h \" # include \" ISequencer . h \" # include \" MovieSceneTrackEditor . h \" class AActor ; class FMenuBuilder ; class USceneComponent ; class FTrackEditorBindingIDPicker ; struct FMovieSceneObjectBindingID ; class FActorPickerTrackEditor : public FMovieSceneTrackEditor { public : struct FActorPickerID {)",
    "insertText": "FActorPickerID(AActor* InActorPicked, const FMovieSceneObjectBindingID& InExistingBindingID) : ActorPicked(InActorPicked), ExistingBindingID(InExistingBindingID)"
  },
  {
    "label": "FActorPickerTrackEditor()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<AActor> ActorPicked ; FMovieSceneObjectBindingID ExistingBindingID ; } ;)",
    "insertText": "FActorPickerTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "IsActorPickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPickable(const AActor* const ParentActor, FGuid ObjectBinding, UMovieSceneSection* InSection)"
  },
  {
    "label": "ShowActorSubMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowActorSubMenu(FMenuBuilder& MenuBuilder, TArray<FGuid> ObjectBindings, UMovieSceneSection* Section)"
  },
  {
    "label": "ActorPicked()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ActorPicked(AActor* ParentActor, TArray<FGuid> ObjectBinding, UMovieSceneSection* Section)"
  },
  {
    "label": "ExistingBindingPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExistingBindingPicked(FMovieSceneObjectBindingID ExistingBindingID, TArray<FGuid> ObjectBindings, UMovieSceneSection* Section)"
  },
  {
    "label": "ActorPickerIDPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorPickerIDPicked(FActorPickerID, const TArray<FGuid>& ObjectBindings, UMovieSceneSection* Section)"
  },
  {
    "label": "ActorComponentPicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorComponentPicked(FName ComponentName, FActorPickerID ActorPickerID, TArray<FGuid> ObjectBindings, UMovieSceneSection* Section)"
  },
  {
    "label": "PickActorInteractive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PickActorInteractive(const TArray<FGuid>& ObjectBindings, UMovieSceneSection* Section)"
  }
]