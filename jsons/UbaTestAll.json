[
  {
    "label": "UBA_TEST()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaTestBasics . h \" # include \" UbaTestCache . h \" # include \" UbaTestConfig . h \" # include \" UbaTestCrypto . h \" # include \" UbaTestNetwork . h \" # include \" UbaTestScheduler . h \" # include \" UbaTestSession . h \" # include \" UbaTestStorage . h \" # include \" UbaTestStress . h \" # include \" UbaTestStdOut . h \" namespace uba { # define UBA_ALLPLATFORM_TESTS \\)",
    "insertText": "UBA_TEST(TestTime) \\ UBA_TEST(TestEvents) \\ UBA_TEST(TestPaths) \\ UBA_TEST(TestFiles) \\ UBA_TEST(TestMemoryBlock) \\ UBA_TEST(TestParseArguments) \\ UBA_TEST(TestBinaryWriter) \\ UBA_TEST(TestSockets) \\ UBA_TEST(TestClientServer) \\ UBA_TEST(TestClientServer2) \\ UBA_TEST(TestClientServerMem) \\ UBA_TEST(TestStorage) \\ UBA_TEST(TestDetouredTestApp) \\ UBA_TEST(TestRemoteDetouredTestApp) \\ UBA_TEST(TestCompactPathTable) \\ UBA_TEST(TestCacheEntry) \\ UBA_TEST(TestHashTable) \\ UBA_TEST(TestConfig) \\ UBA_TEST(TestCrypto) \\ UBA_TEST(TestBinDependencies) \\ #define UBA_POSIX_TESTS \\ UBA_TEST(TestDetouredClang) \\ #define UBA_NONMAC_TESTS \\ UBA_TEST(TestMultipleDetouredProcesses) \\ UBA_TEST(TestLogLines) \\ UBA_TEST(TestLogLinesNoDetour) \\ UBA_TEST(TestLocalSchedule) \\ UBA_TEST(TestLocalScheduleReuse) \\ UBA_TEST(TestRemoteScheduleReuse) \\ UBA_TEST(TestCacheClientAndServer) \\ #define UBA_WINDOWS_TESTS \\ UBA_NONMAC_TESTS \\ UBA_TEST(TestKnownSystemFiles) \\ UBA_TEST(TestCustomService) \\ UBA_TEST(TestStdOutLocal) \\ UBA_TEST(TestStdOutViaCmd) \\ UBA_TEST(TestRootPaths) \\ #define UBA_LINUX_TESTS \\ UBA_NONMAC_TESTS \\ UBA_POSIX_TESTS \\ UBA_TEST(TestDetouredTouch) \\ UBA_TEST(TestRemoteDetouredClang) \\ #define UBA_MAC_TESTS \\ UBA_POSIX_TESTS #if !PLATFORM_WINDOWS #undef UBA_WINDOWS_TESTS #define UBA_WINDOWS_TESTS #endif #if !PLATFORM_LINUX #undef UBA_LINUX_TESTS #define UBA_LINUX_TESTS #endif #if !PLATFORM_MAC #undef UBA_MAC_TESTS #define UBA_MAC_TESTS #endif #define UBA_TESTS \\ UBA_ALLPLATFORM_TESTS \\ UBA_WINDOWS_TESTS \\ UBA_LINUX_TESTS \\ UBA_MAC_TESTS \\ #define UBA_TEST(x) \\ if (!filter || Contains(TC(#x), filter))"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (\\ logger .)",
    "insertText": "Info(TC(\"Running %s...\"), TC(#x))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!x(testLogger, testRootDir)) \\ return logger.Error(TC(\" %s failed\"), TC(#x))"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (\\ logger .)",
    "insertText": "Info(TC(\" %s success!\"), TC(#x))"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (\\ } bool)",
    "insertText": "RunTests(int argc, tchar* argv[])"
  },
  {
    "label": "logger()",
    "kind": "Method",
    "detail": "Function (LoggerWithWriter)",
    "insertText": "logger(g_consoleLogWriter, TC(\"\"))"
  },
  {
    "label": "filteredWriter()",
    "kind": "Method",
    "detail": "Function (FilteredLogWriter)",
    "insertText": "filteredWriter(g_consoleLogWriter, LogEntryType_Warning)"
  },
  {
    "label": "testLogger()",
    "kind": "Method",
    "detail": "Function (LoggerWithWriter)",
    "insertText": "testLogger(filteredWriter, TC(\" \"))"
  },
  {
    "label": "GetTempPathW()",
    "kind": "Method",
    "detail": "Function (StringBuffer<5 1 2> testRootDir ; # if PLATFORM_WINDOWS StringBuffer<> temp ; temp . count =)",
    "insertText": "GetTempPathW(temp.capacity, temp.data)"
  },
  {
    "label": "GetLongPathNameW()",
    "kind": "Method",
    "detail": "Function (testRootDir . count =)",
    "insertText": "GetLongPathNameW(temp.data, testRootDir.data, testRootDir.capacity)"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (testRootDir .)",
    "insertText": "EnsureEndsWithSlash().Append(L\"UbaTest\")"
  },
  {
    "label": "GetFullPathNameW()",
    "kind": "Method",
    "detail": "Function (# else testRootDir . count =)",
    "insertText": "GetFullPathNameW(\"~/UbaTest\", testRootDir.capacity, testRootDir.data, nullptr)"
  },
  {
    "label": "DeleteAllFiles()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DeleteAllFiles(logger, testRootDir.data, false)"
  },
  {
    "label": "CreateDirectoryW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDirectoryW(testRootDir.data)"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (testRootDir .)",
    "insertText": "EnsureEndsWithSlash()"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (logger .)",
    "insertText": "Info(TC(\"Running tests (Test rootdir: %s)\"), testRootDir.data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const tchar* filter = nullptr ;)",
    "insertText": "if(argc > 1)"
  },
  {
    "label": "Info()",
    "kind": "Method",
    "detail": "Function (UBA_TESTS logger .)",
    "insertText": "Info(TC(\"Tests finished successfully!\"))"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(2000)"
  }
]