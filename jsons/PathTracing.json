[
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FRHIRayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingShader"
  },
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PathTracingResources . h \" # include \" ShaderParameterMacros . h \")",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FPathTracingSkylight, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, SkylightTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, SkylightPdf) SHADER_PARAMETER_SAMPLER(SamplerState, SkylightTextureSampler) SHADER_PARAMETER(float, SkylightInvResolution) SHADER_PARAMETER(int32, SkylightMipCount) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "PrepareSkyTexture()",
    "kind": "Method",
    "detail": "Function (class FScene ; class FViewInfo ; class FSceneViewFamily ; class FRHIRayTracingShader ; class FGlobalShaderMap ; bool)",
    "insertText": "PrepareSkyTexture(FRDGBuilder& GraphBuilder, FScene* Scene, const FViewInfo& View, bool SkylightEnabled, bool UseMISCompensation, FPathTracingSkylight* SkylightParameters)"
  },
  {
    "label": "GetPathTracingDefaultMissShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetPathTracingDefaultMissShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetPathTracingDefaultOpaqueHitShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetPathTracingDefaultOpaqueHitShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetPathTracingDefaultHiddenHitShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetPathTracingDefaultHiddenHitShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetGPULightmassDefaultMissShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetGPULightmassDefaultMissShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetGPULightmassDefaultOpaqueHitShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetGPULightmassDefaultOpaqueHitShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "GetGPULightmassDefaultHiddenHitShader()",
    "kind": "Method",
    "detail": "Function (FRHIRayTracingShader*)",
    "insertText": "GetGPULightmassDefaultHiddenHitShader(const FGlobalShaderMap* ShaderMap)"
  },
  {
    "label": "PreparePathTracingRTPSO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreparePathTracingRTPSO()"
  },
  {
    "label": "PreparePathTracingCloudMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreparePathTracingCloudMaterial(FScene* Scene, TArrayView<FViewInfo> Views)"
  },
  {
    "label": "UsesDecals()",
    "kind": "Method",
    "detail": "Function (namespace PathTracing { bool)",
    "insertText": "UsesDecals(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UsesReferenceAtmosphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesReferenceAtmosphere(const FViewInfo& View)"
  },
  {
    "label": "UsesReferenceDOF()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesReferenceDOF(const FViewInfo& View)"
  },
  {
    "label": "NeedsAntiAliasing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsAntiAliasing(const FViewInfo& View)"
  }
]