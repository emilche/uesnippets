[
  {
    "label": "TensorLazyBaseEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorLazyBaseEvaluator"
  },
  {
    "label": "TensorLazyEvaluatorReadOnly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorLazyEvaluatorReadOnly"
  },
  {
    "label": "TensorLazyEvaluatorWritable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorLazyEvaluatorWritable"
  },
  {
    "label": "TensorLazyEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorLazyEvaluator"
  },
  {
    "label": "TensorRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorRef"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorLazyBaseEvaluator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_REF_H # define EIGEN_CXX11_TENSOR_TENSOR_REF_H namespace Eigen { namespace internal { template<Dimensions,Scalar> class TensorLazyBaseEvaluator { public :)",
    "insertText": "TensorLazyBaseEvaluator() : m_refcount(0)"
  },
  {
    "label": "TensorLazyBaseEvaluator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TensorLazyBaseEvaluator()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const Scalar*)",
    "insertText": "data()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const Scalar)",
    "insertText": "coeff(DenseIndex index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(DenseIndex index)"
  },
  {
    "label": "incrRefCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrRefCount()"
  },
  {
    "label": "decrRefCount()",
    "kind": "Method",
    "detail": "Function (+ + m_refcount ; } void)",
    "insertText": "decrRefCount()"
  },
  {
    "label": "refCount()",
    "kind": "Method",
    "detail": "Function (- - m_refcount ; } int)",
    "insertText": "refCount()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TensorLazyBaseEvaluator&)",
    "insertText": "operator(const TensorLazyBaseEvaluator& other)"
  },
  {
    "label": "TensorLazyEvaluatorReadOnly()",
    "kind": "Method",
    "detail": "Function (int m_refcount ; } ; template<Dimensions,Expr,Device> class TensorLazyEvaluatorReadOnly : public TensorLazyBaseEvaluator<Dimensions,TensorEvaluator<Expr,Device>::Scalar> { public : typedef TensorEvaluator<Expr,Device>::Scalar Scalar ; typedef StorageMemory<Scalar,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; typedef TensorEvaluator<Expr,Device> EvalType ;)",
    "insertText": "TensorLazyEvaluatorReadOnly(const Expr& expr, const Device& device) : m_impl(expr, device), m_dummy(Scalar(0))"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "TensorLazyEvaluatorReadOnly()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TensorLazyEvaluatorReadOnly()"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(DenseIndex)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(false && \"can't reference the coefficient of a rvalue\")"
  },
  {
    "label": "TensorLazyEvaluatorWritable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TensorLazyEvaluatorWritable()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; template<Dimensions,Expr,Device> class TensorLazyEvaluator : public internal::conditional<)",
    "insertText": "bool(internal::is_lvalue<Expr>::value)"
  },
  {
    "label": "TensorLazyEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef Base::Scalar Scalar ;)",
    "insertText": "TensorLazyEvaluator(const Expr& expr, const Device& device) : Base(expr, device)"
  },
  {
    "label": "TensorLazyEvaluator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TensorLazyEvaluator()"
  },
  {
    "label": "TensorRef()",
    "kind": "Method",
    "detail": "Function (} } ; } template<PlainObjectType> class TensorRef : public TensorBase<TensorRef<PlainObjectType>> { public : typedef TensorRef<PlainObjectType> Self ; typedef PlainObjectType::Base Base ; typedef Eigen::internal::nested<Self>::type Nested ; typedef internal::traits<PlainObjectType>::StorageKind StorageKind ; typedef internal::traits<PlainObjectType>::Index Index ; typedef internal::traits<PlainObjectType>::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Base::CoeffReturnType CoeffReturnType ; typedef Scalar* PointerType ; typedef PointerType PointerArgType ; const Index NumIndices = PlainObjectType::NumIndices ; typedef PlainObjectType::Dimensions Dimensions ; enum { IsAligned = false,PacketAccess = false,BlockAccess = false,PreferBlockAccess = false,Layout = PlainObjectType::Layout,CoordAccess = false,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorRef() : m_evaluator(NULL)"
  },
  {
    "label": "TensorRef()",
    "kind": "Method",
    "detail": "Function (} template<Expression> EIGEN_STRONG_INLINE)",
    "insertText": "TensorRef(const Expression& expr) : m_evaluator(new internal::TensorLazyEvaluator<Dimensions, Expression, DefaultDevice>(expr, DefaultDevice()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Expression> EIGEN_STRONG_INLINE TensorRef&)",
    "insertText": "operator(const Expression& expr)"
  },
  {
    "label": "unrefEvaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unrefEvaluator()"
  },
  {
    "label": "DefaultDevice()",
    "kind": "Method",
    "detail": "Function (m_evaluator = new internal::TensorLazyEvaluator<Dimensions,Expression,)",
    "insertText": "DefaultDevice(expr, DefaultDevice())"
  },
  {
    "label": "TensorRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TensorRef(const TensorRef& other) : m_evaluator(other.m_evaluator)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_evaluator->refCount() > 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TensorRef&)",
    "insertText": "operator(const TensorRef& other)"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (} return* this ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "rank()"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "dimension(Index n)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "size()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(Index index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_VARIADIC_TEMPLATES template<. . . IndexTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(Index firstIndex, IndexTypes... otherIndices)"
  },
  {
    "label": "num_indices()",
    "kind": "Method",
    "detail": "Function (const std::size_t)",
    "insertText": "num_indices(sizeof...(otherIndices) + 1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (const array<Index,num_indices> indices { { firstIndex,otherIndices . . . } } ; return)",
    "insertText": "coeff(indices)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} template<. . . IndexTypes> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index firstIndex, IndexTypes... otherIndices)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (const array<Index,num_indices> indices { { firstIndex,otherIndices . . . } } ; return)",
    "insertText": "coeffRef(indices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # else EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(Index i0, Index i1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(Index i0, Index i1, Index i2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(Index i0, Index i1, Index i2, Index i3)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "operator()(Index i0, Index i1, Index i2, Index i3, Index i4)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index i0, Index i1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index i0, Index i1, Index i2)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index i0, Index i1, Index i2, Index i3, Index i4)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} # endif template<std::size_t NumIndices> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "coeff(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index index = 0 ;)",
    "insertText": "if(PlainObjectType::Options & RowMajor)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (index + = indices [ 0 ] ;)",
    "insertText": "for(size_t i = 1; i < NumIndices; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (index = index* dims [ i ] + indices [ i ] ; } } else { index + = indices [ NumIndices - 1 ] ;)",
    "insertText": "for(int i = NumIndices-2; i >= 0; --i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (index = index* dims [ i ] + indices [ i ] ; } } return m_evaluator ->)",
    "insertText": "coeff(index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} template<std::size_t NumIndices> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(const array<Index, NumIndices>& indices)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (index = index* dims [ i ] + indices [ i ] ; } } return m_evaluator ->)",
    "insertText": "coeffRef(index)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (delete m_evaluator ; } } } internal::TensorLazyBaseEvaluator<Dimensions,Scalar>* m_evaluator ; } ; template<Derived,Device> struct TensorEvaluator<const TensorRef<Derived>,Device> { typedef Derived::Index Index ; typedef Derived::Scalar Scalar ; typedef Derived::Scalar CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef Derived::Dimensions Dimensions ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,PacketAccess = false,BlockAccess = false,PreferBlockAccess = false,Layout = TensorRef<Derived>::Layout,CoordAccess = false,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const TensorRef<Derived>& m, const Device&) : m_ref(m)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} protected : TensorRef<Derived> m_ref ; } ; template<Derived,Device> struct TensorEvaluator<TensorRef<Derived>,Device> : public TensorEvaluator<const TensorRef<Derived>,Device> { typedef Derived::Index Index ; typedef Derived::Scalar Scalar ; typedef Derived::Scalar CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef Derived::Dimensions Dimensions ; typedef TensorEvaluator<const TensorRef<Derived>,Device> Base ; enum { IsAligned = false,PacketAccess = false,BlockAccess = false,PreferBlockAccess = false,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(TensorRef<Derived>& m, const Device& d) : Base(m, d)"
  }
]