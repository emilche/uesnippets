[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OCurves_h # define Alembic_AbcGeom_OCurves_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / Basis . h> # include<Alembic / AbcGeom / CurveType . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / OGeomParam . h> # include<Alembic / AbcGeom / OGeomBase . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OCurvesSchema : public OGeomBaseSchema<CurvesSchemaInfo> { public : class Sample { public :)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (m_type = kCubic ; m_wrap = kNonPeriodic ; m_basis = kBezierBasis ; })",
    "insertText": "Sample(const Abc::P3fArraySample &iPos ) : m_positions( iPos)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (m_type = kCubic ; m_wrap = kNonPeriodic ; m_basis = kBezierBasis ; })",
    "insertText": "Sample(const Abc::P3fArraySample &iPos, const Abc::Int32ArraySample &iNVertices, const CurveType &iType = kCubic, const CurvePeriodicity iWrap = kNonPeriodic, const OFloatGeomParam::Sample &iWidths = \\ OFloatGeomParam::Sample(), const OV2fGeomParam::Sample &iUVs = OV2fGeomParam::Sample(), const ON3fGeomParam::Sample &iNormals = ON3fGeomParam::Sample(), const BasisType &iBasis = kBezierBasis, const Abc::FloatArraySample &iPosWeight = \\ Abc::FloatArraySample(), const Abc::UcharArraySample &iOrders = Abc::UcharArraySample(), const Abc::FloatArraySample &iKnots = Abc::FloatArraySample() ): m_positions( iPos ), m_nVertices( iNVertices ), m_type( iType ), m_wrap( iWrap ), m_widths( iWidths ), m_uvs( iUVs ), m_normals( iNormals ), m_basis( iBasis ), m_positionWeights( iPosWeight ), m_orders( iOrders ), m_knots( iKnots)"
  },
  {
    "label": "getWidths()",
    "kind": "Method",
    "detail": "Function (} const OFloatGeomParam::Sample&)",
    "insertText": "getWidths()"
  },
  {
    "label": "getPositions()",
    "kind": "Method",
    "detail": "Function (m_widths = iWidths ; } const Abc::P3fArraySample&)",
    "insertText": "getPositions()"
  },
  {
    "label": "getPositionWeights()",
    "kind": "Method",
    "detail": "Function (m_positions = iSmp ; } const Abc::FloatArraySample&)",
    "insertText": "getPositionWeights()"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (m_positionWeights = iSmp ; } void)",
    "insertText": "setType(const CurveType &iType)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (m_type = iType ; } CurveType)",
    "insertText": "getType()"
  },
  {
    "label": "getWrap()",
    "kind": "Method",
    "detail": "Function (m_wrap = iWrap ; } CurvePeriodicity)",
    "insertText": "getWrap()"
  },
  {
    "label": "setCurvesNumVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCurvesNumVertices(const Abc::Int32ArraySample &iNVertices)"
  },
  {
    "label": "getCurvesNumVertices()",
    "kind": "Method",
    "detail": "Function (m_nVertices = iNVertices ; } const Abc::Int32ArraySample&)",
    "insertText": "getCurvesNumVertices()"
  },
  {
    "label": "getSelfBounds()",
    "kind": "Method",
    "detail": "Function (m_uvs = iUVs ; } const Abc::Box3d&)",
    "insertText": "getSelfBounds()"
  },
  {
    "label": "getVelocities()",
    "kind": "Method",
    "detail": "Function (m_selfBounds = iBnds ; } const Abc::V3fArraySample&)",
    "insertText": "getVelocities()"
  },
  {
    "label": "getNormals()",
    "kind": "Method",
    "detail": "Function (m_velocities = iVelocities ; } const ON3fGeomParam::Sample&)",
    "insertText": "getNormals()"
  },
  {
    "label": "getBasis()",
    "kind": "Method",
    "detail": "Function (m_normals = iNormals ; } BasisType)",
    "insertText": "getBasis()"
  },
  {
    "label": "getOrders()",
    "kind": "Method",
    "detail": "Function (m_basis = iBasis ; } const Abc::UcharArraySample&)",
    "insertText": "getOrders()"
  },
  {
    "label": "getKnots()",
    "kind": "Method",
    "detail": "Function (m_orders = iOrders ; } const Abc::FloatArraySample&)",
    "insertText": "getKnots()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "isPartialSample()",
    "kind": "Method",
    "detail": "Function (m_type = kCubic ; m_wrap = kNonPeriodic ; m_basis = kBezierBasis ; } bool)",
    "insertText": "isPartialSample()"
  },
  {
    "label": "OCurvesSchema()",
    "kind": "Method",
    "detail": "Function (m_selectiveExport = false ; m_numSamples = 0 ; m_timeSamplingIndex = 0 ; })",
    "insertText": "OCurvesSchema(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument() ) : OGeomBaseSchema<CurvesSchemaInfo>( iParent, iName, iArg0, iArg1, iArg2, iArg3)"
  },
  {
    "label": "GetTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr tsPtr =)",
    "insertText": "GetTimeSampling(iArg0, iArg1, iArg2, iArg3)"
  },
  {
    "label": "GetTimeSamplingIndex()",
    "kind": "Method",
    "detail": "Function (AbcA::index_t tsIndex =)",
    "insertText": "GetTimeSamplingIndex(iArg0, iArg1, iArg2, iArg3)"
  },
  {
    "label": "GetCompoundPropertyWriterPtr()",
    "kind": "Method",
    "detail": "Function (tsIndex =)",
    "insertText": "GetCompoundPropertyWriterPtr(iParent )->getObject( )->getArchive()->addTimeSampling( *tsPtr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "init(tsIndex, Abc::IsSparse( iArg0, iArg1, iArg2, iArg3 ))"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "getObject().getArchive().getTimeSampling( 0)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(this_type::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(const AbcA::index_t iTsIdx, bool isSparse)"
  },
  {
    "label": "selectiveSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "selectiveSet(const Sample &iSamp)"
  },
  {
    "label": "createPositionProperty()",
    "kind": "Method",
    "detail": "Function (Abc::OP3fArrayProperty m_positionsProperty ; Abc::OInt32ArrayProperty m_nVerticesProperty ; bool m_selectiveExport ; size_t m_numSamples ; uint32_t m_timeSamplingIndex ; void)",
    "insertText": "createPositionProperty()"
  },
  {
    "label": "createVertexProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createVertexProperties()"
  },
  {
    "label": "createVelocityProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createVelocityProperty()"
  },
  {
    "label": "createUVsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createUVsProperty(const Sample &iSamp)"
  },
  {
    "label": "createNormalsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createNormalsProperty(const Sample &iSamp)"
  },
  {
    "label": "createWidthProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createWidthProperty(const Sample &iSamp)"
  },
  {
    "label": "createPositionWeightsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createPositionWeightsProperty()"
  },
  {
    "label": "createOrdersProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createOrdersProperty()"
  },
  {
    "label": "createKnotsProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createKnotsProperty()"
  },
  {
    "label": "calcBasisAndType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calcBasisAndType(Alembic::Util::uint8_t (&basisAndType)[4], const Sample &iSamp)"
  }
]