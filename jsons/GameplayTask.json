[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UGameplayTaskResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTaskResource"
  },
  {
    "label": "UGameplayTasksComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTasksComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayResourceSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayResourceSet"
  },
  {
    "label": "UGameplayTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTask"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FGameplayTaskInstanceNamePredicate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTaskInstanceNamePredicate"
  },
  {
    "label": "FGameplayTaskInstanceClassPredicate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTaskInstanceClassPredicate"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / ScriptInterface . h \" # include \" UObject / ScriptMacros . h \" # include \" GameplayTaskOwnerInterface . h \" # include \" UObject / WeakInterfacePtr . h \" # include \" GameplayTaskTypes . h \" # include \" GameplayTask . generated . h \" class AActor ; class UGameplayTaskResource ; class UGameplayTasksComponent ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameplayTasks, Log, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (StartOnTop,StartAtEnd,RequestCancelAndStartOnTop,RequestCancelAndStartAtEnd,} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef uint8 FResourceID ; enum { MaxResources =)",
    "insertText": "sizeof(FFlagContainer)"
  },
  {
    "label": "FGameplayResourceSet()",
    "kind": "Method",
    "detail": "Function (private : FFlagContainer Flags ; public :)",
    "insertText": "FGameplayResourceSet(FFlagContainer InFlags = 0) : Flags(InFlags)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} FFlagContainer)",
    "insertText": "GetFlags()"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(1 << ResourceID)"
  },
  {
    "label": "AddSet()",
    "kind": "Method",
    "detail": "Function (} FGameplayResourceSet&)",
    "insertText": "AddSet(FGameplayResourceSet Other)"
  },
  {
    "label": "RemoveSet()",
    "kind": "Method",
    "detail": "Function (Flags | = Other . Flags ; return* this ; } FGameplayResourceSet&)",
    "insertText": "RemoveSet(FGameplayResourceSet Other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (Flags& = ~ Other . Flags ; return* this ; } void)",
    "insertText": "Clear()"
  },
  {
    "label": "FFlagContainer()",
    "kind": "Method",
    "detail": "Function (Flags =)",
    "insertText": "FFlagContainer(0)"
  },
  {
    "label": "HasAllIDs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllIDs(FGameplayResourceSet Other)"
  },
  {
    "label": "HasAnyID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyID(FGameplayResourceSet Other)"
  },
  {
    "label": "GetOverlap()",
    "kind": "Method",
    "detail": "Function (} FGameplayResourceSet)",
    "insertText": "GetOverlap(FGameplayResourceSet Other)"
  },
  {
    "label": "GetDifference()",
    "kind": "Method",
    "detail": "Function (} FGameplayResourceSet)",
    "insertText": "GetDifference(FGameplayResourceSet Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGameplayResourceSet& Other)"
  },
  {
    "label": "NoResources()",
    "kind": "Method",
    "detail": "Function (} FGameplayResourceSet)",
    "insertText": "NoResources()"
  },
  {
    "label": "GetDebugDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDebugDescription()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, BlueprintType, meta = (ExposedAsyncProxy=AsyncTask), config = Game, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: DECLARE_DYNAMIC_MULTICAST_DELEGATE(FGenericGameplayTaskDelegate)"
  },
  {
    "label": "UGameplayTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UGameplayTask(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Activate()"
  },
  {
    "label": "InitTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTask(IGameplayTaskOwnerInterface& InTaskOwner, uint8 InPriority)"
  },
  {
    "label": "InitSimulatedTask()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitSimulatedTask(UGameplayTasksComponent& InGameplayTasksComponent)"
  },
  {
    "label": "TickTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickTask(float DeltaTime)"
  },
  {
    "label": "ExternalConfirm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExternalConfirm(bool bEndTask)"
  },
  {
    "label": "ExternalCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalCancel()"
  },
  {
    "label": "MarkOwnerFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkOwnerFinished()"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (bOwnerFinished = true ; } FString)",
    "insertText": "GetDebugString()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetOwnerActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetOwnerActor()"
  },
  {
    "label": "GetAvatarActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetAvatarActor()"
  },
  {
    "label": "NewTask()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "NewTask(UObject* WorldContextObject, FName InstanceName = FName())"
  },
  {
    "label": "NewTask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewTask(TScriptInterface<IGameplayTaskOwnerInterface> TaskOwner, FName InstanceName = FName())"
  },
  {
    "label": "NewTask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewTask(UObject& WorldContextObject, FName InstanceName = FName())"
  },
  {
    "label": "NewTask()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "NewTask(IGameplayTaskOwnerInterface& TaskOwner, FName InstanceName = FName())"
  },
  {
    "label": "NewTaskUninitialized()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "NewTaskUninitialized()"
  },
  {
    "label": "TaskOwnerEnded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TaskOwnerEnded()"
  },
  {
    "label": "IsSupportedForNetworking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupportedForNetworking()"
  },
  {
    "label": "IsSimulatedTask()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulatedTask()"
  },
  {
    "label": "IsSimulating()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSimulating()"
  },
  {
    "label": "IsPausable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPausable()"
  },
  {
    "label": "HasOwnerFinished()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasOwnerFinished()"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetPriority()"
  },
  {
    "label": "GetRequiredResources()",
    "kind": "Method",
    "detail": "Function (} FGameplayResourceSet)",
    "insertText": "GetRequiredResources()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "IsFinished()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFinished()"
  },
  {
    "label": "GetChildTask()",
    "kind": "Method",
    "detail": "Function (} UGameplayTask*)",
    "insertText": "GetChildTask()"
  },
  {
    "label": "GetGameplayTasksComponent()",
    "kind": "Method",
    "detail": "Function (} UGameplayTasksComponent*)",
    "insertText": "GetGameplayTasksComponent()"
  },
  {
    "label": "IsOwnedByTasksComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOwnedByTasksComponent()"
  },
  {
    "label": "AddRequiredResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequiredResource(T::StaticClass())"
  },
  {
    "label": "AddClaimedResource()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "AddClaimedResource()"
  },
  {
    "label": "AddClaimedResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClaimedResource(T::StaticClass())"
  },
  {
    "label": "AddRequiredResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRequiredResource(TSubclassOf<UGameplayTaskResource> RequiredResource)"
  },
  {
    "label": "AddRequiredResourceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequiredResourceSet(const TArray<TSubclassOf<UGameplayTaskResource> >& RequiredResourceSet)"
  },
  {
    "label": "AddRequiredResourceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequiredResourceSet(FGameplayResourceSet RequiredResourceSet)"
  },
  {
    "label": "AddClaimedResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClaimedResource(TSubclassOf<UGameplayTaskResource> ClaimedResource)"
  },
  {
    "label": "AddClaimedResourceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClaimedResourceSet(const TArray<TSubclassOf<UGameplayTaskResource> >& AdditionalResourcesToClaim)"
  },
  {
    "label": "AddClaimedResourceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClaimedResourceSet(FGameplayResourceSet AdditionalResourcesToClaim)"
  },
  {
    "label": "GetResourceOverlapPolicy()",
    "kind": "Method",
    "detail": "Function (ETaskResourceOverlapPolicy)",
    "insertText": "GetResourceOverlapPolicy()"
  },
  {
    "label": "ConvertToTaskOwner()",
    "kind": "Method",
    "detail": "Function (IGameplayTaskOwnerInterface*)",
    "insertText": "ConvertToTaskOwner(UObject& OwnerObject)"
  },
  {
    "label": "ConvertToTaskOwner()",
    "kind": "Method",
    "detail": "Function (IGameplayTaskOwnerInterface*)",
    "insertText": "ConvertToTaskOwner(AActor& OwnerActor)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "GetGameplayTasksComponent()",
    "kind": "Method",
    "detail": "Function (UGameplayTasksComponent*)",
    "insertText": "GetGameplayTasksComponent(const UGameplayTask& Task)"
  },
  {
    "label": "GetGameplayTaskOwner()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetGameplayTaskOwner(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskAvatar()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetGameplayTaskAvatar(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskDefaultPriority()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetGameplayTaskDefaultPriority()"
  },
  {
    "label": "OnGameplayTaskInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayTaskInitialized(UGameplayTask& Task)"
  },
  {
    "label": "OnGameplayTaskDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayTaskDeactivated(UGameplayTask& Task)"
  },
  {
    "label": "RegisterReplicationFragments()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_IRIS void)",
    "insertText": "RegisterReplicationFragments(UE::Net::FFragmentRegistrationContext& Context, UE::Net::EFragmentRegistrationFlags RegistrationFlags)"
  },
  {
    "label": "ActivateInTaskQueue()",
    "kind": "Method",
    "detail": "Function (# endif private : UGameplayTasksComponent ; void)",
    "insertText": "ActivateInTaskQueue()"
  },
  {
    "label": "PauseInTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseInTaskQueue()"
  },
  {
    "label": "PerformActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformActivation()"
  },
  {
    "label": "GenerateDebugDescription()",
    "kind": "Method",
    "detail": "Function (DebugDescription =)",
    "insertText": "GenerateDebugDescription()"
  },
  {
    "label": "GetTaskStateName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTaskStateName()"
  },
  {
    "label": "NewTask()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class T> T*)",
    "insertText": "NewTask(UObject& WorldContextObject, FName InstanceName)"
  },
  {
    "label": "ConvertToTaskOwner()",
    "kind": "Method",
    "detail": "Function (IGameplayTaskOwnerInterface* TaskOwner =)",
    "insertText": "ConvertToTaskOwner(WorldContextObject)"
  },
  {
    "label": "NewTask()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewTask(IGameplayTaskOwnerInterface& TaskOwner, FName InstanceName)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* MyObj = NewObject<)",
    "insertText": "T()"
  },
  {
    "label": "InitTask()",
    "kind": "Method",
    "detail": "Function (MyObj -> InstanceName = InstanceName ; MyObj ->)",
    "insertText": "InitTask(TaskOwner, TaskOwner.GetGameplayTaskDefaultPriority())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InstanceName = DesiredInstanceName ; } bool)",
    "insertText": "operator()(const UGameplayTask* A)"
  },
  {
    "label": "FGameplayTaskInstanceClassPredicate()",
    "kind": "Method",
    "detail": "Function (} FName InstanceName ; } ; struct FGameplayTaskInstanceClassPredicate {)",
    "insertText": "FGameplayTaskInstanceClassPredicate(TSubclassOf<UGameplayTask> Class)"
  }
]