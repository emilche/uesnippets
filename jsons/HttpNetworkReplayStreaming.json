[
  {
    "label": "FHttpNetworkReplayStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpNetworkReplayStreamer"
  },
  {
    "label": "HTTPNETWORKREPLAYSTREAMING_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HTTPNETWORKREPLAYSTREAMING_API"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FQueuedHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedHttpRequest"
  },
  {
    "label": "IHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHttpRequest"
  },
  {
    "label": "FQueuedHttpRequestAddEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedHttpRequestAddEvent"
  },
  {
    "label": "FQueuedHttpRequestAddUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedHttpRequestAddUser"
  },
  {
    "label": "FQueuedGotoFakeCheckpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedGotoFakeCheckpoint"
  },
  {
    "label": "FCachedResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedResponse"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHttpStreamFArchive()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" NetworkReplayStreaming . h \" # include \" Interfaces / IHttpRequest . h \" # include \" Tickable . h \" # include \" HttpNetworkReplayStreaming . generated . h \" class FHttpNetworkReplayStreamer ; class FHttpStreamFArchive : public FArchive { public :)",
    "insertText": "FHttpStreamFArchive() : Pos( 0 ), bAtEndOfReplay( false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AtEnd()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Buffer ; int32 Pos ; bool bAtEndOfReplay ; } ; namespace EQueuedHttpRequestType { enum Type { StartUploading,UploadingHeader,UploadingStream,StopUploading,StartDownloading,DownloadingHeader,DownloadingStream,RefreshingViewer,EnumeratingSessions,EnumeratingCheckpoints,UploadingCheckpoint,DownloadingCheckpoint,AddingUser,UploadingCustomEvent,EnumeratingCustomEvent,RequestEventData,UploadHeader,StopStreaming,KeepReplay,} ; const TCHAR*)",
    "insertText": "ToString(EQueuedHttpRequestType::Type Type)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Unknown EQueuedHttpRequestType type.\")"
  },
  {
    "label": "FQueuedHttpRequest()",
    "kind": "Method",
    "detail": "Function (} } ; class FHttpNetworkReplayStreamer ; class FQueuedHttpRequest { public :)",
    "insertText": "FQueuedHttpRequest(const EQueuedHttpRequestType::Type InType, TSharedPtr< class IHttpRequest, ESPMode::ThreadSafe > InRequest ) : Type( InType ), Request( InRequest ), RetryProgress( 0 ), MaxRetries( 0 ), RetryDelay( 0.0f ), NextRetryTime( 0.0)"
  },
  {
    "label": "FQueuedHttpRequest()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQueuedHttpRequest(const EQueuedHttpRequestType::Type InType, TSharedPtr< class IHttpRequest, ESPMode::ThreadSafe > InRequest, const int32 InMaxRetries, const float InRetryDelay ) : Type( InType ), Request( InRequest ), RetryProgress( 0 ), MaxRetries( InMaxRetries ), RetryDelay( InRetryDelay ), NextRetryTime( 0.0)"
  },
  {
    "label": "FQueuedHttpRequest()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FQueuedHttpRequest()"
  },
  {
    "label": "PreProcess()",
    "kind": "Method",
    "detail": "Function (} EQueuedHttpRequestType::Type Type ; TSharedPtr<class IHttpRequest,ESPMode::ThreadSafe> Request ; int32 RetryProgress ; int32 MaxRetries ; float RetryDelay ; double NextRetryTime ; bool)",
    "insertText": "PreProcess(FHttpNetworkReplayStreamer* Streamer, const FString& ServerURL, const FString& SessionName)"
  },
  {
    "label": "FQueuedHttpRequestAddEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FQueuedHttpRequestAddEvent()"
  },
  {
    "label": "FQueuedHttpRequestAddUser()",
    "kind": "Method",
    "detail": "Function (FString Name ; uint32 TimeInMS ; FString Group ; FString Meta ; } ; class FQueuedHttpRequestAddUser : public FQueuedHttpRequest { public :)",
    "insertText": "FQueuedHttpRequestAddUser(const FString& InUser, TSharedRef<class IHttpRequest, ESPMode::ThreadSafe> InHttpRequest)"
  },
  {
    "label": "FQueuedHttpRequestAddUser()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FQueuedHttpRequestAddUser()"
  },
  {
    "label": "FQueuedGotoFakeCheckpoint()",
    "kind": "Method",
    "detail": "Function (} ; class FQueuedGotoFakeCheckpoint : public FQueuedHttpRequest { public :)",
    "insertText": "FQueuedGotoFakeCheckpoint()"
  },
  {
    "label": "FCachedResponse()",
    "kind": "Method",
    "detail": "Function (} ; class FCachedResponse { public :)",
    "insertText": "FCachedResponse(FHttpResponsePtr InResponse, const double InLastAccessTime ) : Response( InResponse ), LastAccessTime( InLastAccessTime)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} FHttpResponsePtr Response ; double LastAccessTime ; } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_NETRESULT_ENUM()",
    "kind": "Method",
    "detail": "Function (Success,FailedJsonParse,DataUnavailable,InvalidHttpResponse,CompressionFailed,DecompressionFailed,InvalidPayload,Unknown,} ;)",
    "insertText": "DECLARE_NETRESULT_ENUM(EHttpReplayResult)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EHttpReplayResult Enum)"
  },
  {
    "label": "FHttpNetworkReplayStreamer()",
    "kind": "Method",
    "detail": "Function (class FHttpNetworkReplayStreamer : public INetworkReplayStreamer { using FHttpReplayResult = UE::Net::TNetResult<EHttpReplayResult> ; public :)",
    "insertText": "FHttpNetworkReplayStreamer()"
  },
  {
    "label": "StartStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartStreaming(const FStartStreamingParameters& Params, const FStartStreamingCallback& Delegate)"
  },
  {
    "label": "StopStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopStreaming()"
  },
  {
    "label": "GetHeaderArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetHeaderArchive()"
  },
  {
    "label": "GetStreamingArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetStreamingArchive()"
  },
  {
    "label": "GetCheckpointArchive()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "GetCheckpointArchive()"
  },
  {
    "label": "FlushCheckpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpoint(const uint32 TimeInMS)"
  },
  {
    "label": "GotoCheckpointIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoCheckpointIndex(const int32 CheckpointIndex, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "GotoTimeInMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GotoTimeInMS(const uint32 TimeInMS, const FGotoCallback& Delegate, EReplayCheckpointType CheckpointType)"
  },
  {
    "label": "UpdateTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTotalDemoTime(uint32 TimeInMS)"
  },
  {
    "label": "UpdatePlaybackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackTime(uint32 TimeInMS)"
  },
  {
    "label": "GetTotalDemoTime()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTotalDemoTime()"
  },
  {
    "label": "SetHighPriorityTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPriorityTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsDataAvailableForTimeRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataAvailableForTimeRange(const uint32 StartTimeInMS, const uint32 EndTimeInMS)"
  },
  {
    "label": "IsLoadingCheckpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingCheckpoint()"
  },
  {
    "label": "IsLive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLive()"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "DeleteFinishedStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFinishedStream(const FString& StreamName, const int32 UserIndex, const FDeleteFinishedStreamCallback& Delegate)"
  },
  {
    "label": "EnumerateStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateStreams(const FNetworkReplayVersion& InReplayVersion, const int32 UserIndex, const FString& MetaString, const TArray< FString >& ExtraParms, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEvents(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FEnumerateEventsCallback& Delegate)"
  },
  {
    "label": "EnumerateRecentStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateRecentStreams(const FNetworkReplayVersion& ReplayVersion, const int32 UserIndex, const FEnumerateStreamsCallback& Delegate)"
  },
  {
    "label": "AddUserToReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUserToReplay(const FString& UserString)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& EventId, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventId, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventData(const FString& ReplayName, const FString& EventId, const int32 UserIndex, const FRequestEventDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "RequestEventGroupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEventGroupData(const FString& ReplayName, const FString& Group, const int32 UserIndex, const FRequestEventGroupDataCallback& Delegate)"
  },
  {
    "label": "SearchEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchEvents(const FString& EventGroup, const FSearchEventsCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "KeepReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplay(const FString& ReplayName, const bool bKeep, const int32 UserIndex, const FKeepReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplayFriendlyName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplayFriendlyName(const FString& ReplayName, const FString& NewFriendlyName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "RenameReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameReplay(const FString& ReplayName, const FString& NewName, const int32 UserIndex, const FRenameReplayCallback& Delegate)"
  },
  {
    "label": "GetReplayID()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReplayID()"
  },
  {
    "label": "RefreshHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshHeader()"
  },
  {
    "label": "DownloadHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DownloadHeader(const FDownloadHeaderCallback& Delegate)"
  },
  {
    "label": "GetMaxFriendlyNameSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxFriendlyNameSize()"
  },
  {
    "label": "UploadHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadHeader()"
  },
  {
    "label": "FlushStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushStream()"
  },
  {
    "label": "ConditionallyFlushStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyFlushStream()"
  },
  {
    "label": "StopUploading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopUploading()"
  },
  {
    "label": "IsTaskPendingOrInFlight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTaskPendingOrInFlight(const EQueuedHttpRequestType::Type Type)"
  },
  {
    "label": "CancelInFlightOrPendingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelInFlightOrPendingTask(const EQueuedHttpRequestType::Type Type)"
  },
  {
    "label": "ConditionallyDownloadNextChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyDownloadNextChunk()"
  },
  {
    "label": "RefreshViewer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshViewer(const bool bFinal)"
  },
  {
    "label": "ConditionallyRefreshViewer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyRefreshViewer()"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastError(EHttpReplayResult::Unknown)"
  },
  {
    "label": "SetLastError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLastError(FHttpReplayResult&& Result)"
  },
  {
    "label": "CancelStreamingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelStreamingRequests()"
  },
  {
    "label": "FlushCheckpointInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCheckpointInternal(uint32 TimeInMS)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddOrUpdateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateEvent(const FString& Name, const uint32 TimeInMS, const FString& Group, const FString& Meta, const TArray<uint8>& Data)"
  },
  {
    "label": "AddRequestToQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestToQueue(const EQueuedHttpRequestType::Type Type, TSharedPtr<class IHttpRequest, ESPMode::ThreadSafe> Request, const int32 InMaxRetries = 0, const float InRetryDelay = 0.0f)"
  },
  {
    "label": "AddCustomRequestToQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomRequestToQueue(TSharedPtr<FQueuedHttpRequest> Request)"
  },
  {
    "label": "AddResponseToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResponseToCache(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse)"
  },
  {
    "label": "CleanupResponseCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupResponseCache()"
  },
  {
    "label": "RetryRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetryRequest(TSharedPtr<FQueuedHttpRequest> Request, FHttpResponsePtr HttpResponse, const bool bIgnoreResponseCode = false)"
  },
  {
    "label": "EnumerateCheckpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateCheckpoints()"
  },
  {
    "label": "ConditionallyEnumerateCheckpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyEnumerateCheckpoints()"
  },
  {
    "label": "ProcessRequestInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRequestInternal(TSharedPtr< class IHttpRequest, ESPMode::ThreadSafe > Request)"
  },
  {
    "label": "SupportsCompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsCompression()"
  },
  {
    "label": "DecompressResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecompressResponse(FHttpResponsePtr HttpResponse, TArray<uint8>& ResultBuffer)"
  },
  {
    "label": "CompressRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressRequest(FHttpRequestPtr HttpRequest, const TArray<uint8>& RequestBuffer)"
  },
  {
    "label": "InternalGotoTimeInMS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalGotoTimeInMS(const uint32 TimeInMS, const FGotoCallback& Delegate, bool bDelta)"
  },
  {
    "label": "InternalGotoCheckpointIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalGotoCheckpointIndex(const int32 CheckpointIndex, const FGotoCallback& Delegate, const FHttpRequestCompleteDelegate& RequestDelegate)"
  },
  {
    "label": "RequestFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestFinished(EReplayStreamerState ExpectedStreamerState, EQueuedHttpRequestType::Type ExpectedType, FHttpRequestPtr HttpRequest)"
  },
  {
    "label": "HttpStartDownloadingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpStartDownloadingFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpDownloadHeaderFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpDownloadHeaderFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDownloadHeaderCallback Delegate)"
  },
  {
    "label": "HttpDownloadFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpDownloadFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, int32 RequestedStreamChunkIndex, bool bStreamWasLive)"
  },
  {
    "label": "HttpDownloadCheckpointFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpDownloadCheckpointFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpDownloadCheckpointDeltaFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpDownloadCheckpointDeltaFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpRefreshViewerFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpRefreshViewerFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpStartUploadingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpStartUploadingFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpStopUploadingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpStopUploadingFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpHeaderUploadFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpHeaderUploadFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpUploadStreamFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpUploadStreamFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpUploadCheckpointFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpUploadCheckpointFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpUploadCustomEventFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpUploadCustomEventFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpEnumerateSessionsFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpEnumerateSessionsFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FEnumerateStreamsCallback Delegate)"
  },
  {
    "label": "HttpEnumerateCheckpointsFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpEnumerateCheckpointsFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpEnumerateEventsFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpEnumerateEventsFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FEnumerateEventsCallback EnumerateEventsDelegate)"
  },
  {
    "label": "HttpAddUserFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpAddUserFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "HttpRequestEventDataFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HttpRequestEventDataFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRequestEventDataCallback RequestEventDataCompleteDelegate)"
  },
  {
    "label": "KeepReplayFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepReplayFinished(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FKeepReplayCallback KeepReplayDelegate, FString ReplayName)"
  },
  {
    "label": "ProcessNextHttpRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessNextHttpRequest()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const float DeltaTime)"
  },
  {
    "label": "IsHttpRequestInFlight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHttpRequestInFlight()"
  },
  {
    "label": "HasPendingHttpRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingHttpRequests()"
  },
  {
    "label": "IsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreaming()"
  },
  {
    "label": "CreateReplayStreamer()",
    "kind": "Method",
    "detail": "Function (FHttpStreamFArchive HeaderArchive ; FHttpStreamFArchive StreamArchive ; FHttpStreamFArchive CheckpointArchive ; FString SessionName ; FNetworkReplayVersion ReplayVersion ; FString ServerURL ; int32 StreamChunkIndex ; double LastChunkTime ; double LastRefreshViewerTime ; double LastRefreshCheckpointTime ; EReplayStreamerState StreamerState ; bool bStopStreamingCalled ; bool bStreamIsLive ; FString StreamMetadata ; int32 NumTotalStreamChunks ; uint32 TotalDemoTimeInMS ; uint32 LastTotalDemoTimeInMS ; uint32 StreamTimeRangeStart ; uint32 StreamTimeRangeEnd ; FString ViewerName ; uint32 HighPriorityEndTime ; FStartStreamingCallback StartStreamingDelegate ; FGotoCallback GotoCheckpointDelegate ; int32 DownloadCheckpointIndex ; int32 DeltaDownloadCheckpointIndex ; int64 LastGotoTimeInMS ; FReplayEventList CheckpointList ; TArray<TSharedPtr<FQueuedHttpRequest>> QueuedHttpRequests ; TSharedPtr<FQueuedHttpRequest> InFlightHttpRequest ; TSet<FString> EventGroupSet ; uint64 TotalUploadBytes ; TMap<FString,FCachedResponse> ResponseCache ; int32 RefreshViewerFails ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS class FHttpNetworkReplayStreamingFactory : public INetworkReplayStreamingFactory,public FTickableGameObject { public : TSharedPtr<INetworkReplayStreamer>)",
    "insertText": "CreateReplayStreamer()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  }
]