[
  {
    "label": "IAssetEditorInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetEditorInstance"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SActorDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SActorDetails"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SLevelEditorModeContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelEditorModeContent"
  },
  {
    "label": "SLevelEditorToolBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelEditorToolBox"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "IWorldHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldHierarchy"
  },
  {
    "label": "SLevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelEditor"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "IToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkit"
  },
  {
    "label": "FAssetThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnailPool"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkit"
  },
  {
    "label": "IToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkit"
  },
  {
    "label": "FLevelViewportTabContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportTabContent"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "SLevelEditorToolBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelEditorToolBox"
  },
  {
    "label": "IToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkit"
  },
  {
    "label": "SActorDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SActorDetails"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize( const TSharedRef<SDockTab>& OwnerTab, const TSharedRef<SWindow>& OwnerWindow )"
  },
  {
    "label": "GetActiveViewport()",
    "kind": "Method",
    "detail": "Function (SLevelViewport>)",
    "insertText": "GetActiveViewport()"
  },
  {
    "label": "TryInvokeTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "TryInvokeTab( FName TabID )"
  },
  {
    "label": "SyncDetailsToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncDetailsToSelection()"
  },
  {
    "label": "CanCloseApp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseApp()"
  },
  {
    "label": "AttachSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "AttachSequencer( TSharedPtr<SWidget> SequencerWidget, TSharedPtr<IAssetEditorInstance> NewSequencerAssetEditor )"
  },
  {
    "label": "SpawnLevelEditorTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnLevelEditorTab(const FSpawnTabArgs& Args, FName TabIdentifier, FString InitializationPayload)"
  },
  {
    "label": "CanSpawnLevelEditorTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSpawnLevelEditorTab(const FSpawnTabArgs& Args, FName TabIdentifier)"
  },
  {
    "label": "SpawnLevelEditorModeTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnLevelEditorModeTab(const FSpawnTabArgs& Args, FEdMode* EditorMode)"
  },
  {
    "label": "SummonDetailsPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SummonDetailsPanel( FName Identifier )"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "RegisterMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMenus()"
  },
  {
    "label": "RestoreContentArea()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "RestoreContentArea( const TSharedRef<SDockTab>& OwnerTab, const TSharedRef<SWindow>& OwnerWindow )"
  },
  {
    "label": "HandleExperimentalSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExperimentalSettingChanged(FName PropertyName)"
  },
  {
    "label": "RefreshEditorModeCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshEditorModeCommands()"
  },
  {
    "label": "EditorModeCommandsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditorModeCommandsChanged()"
  },
  {
    "label": "GetEditorModeTabId()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetEditorModeTabId( FEditorModeID ModeID )"
  },
  {
    "label": "ToggleEditorMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleEditorMode( FEditorModeID ModeID )"
  },
  {
    "label": "IsModeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModeActive(FEditorModeID ModeID)"
  },
  {
    "label": "ShouldShowModeInToolbar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowModeInToolbar(FEditorModeID ModeID)"
  },
  {
    "label": "OnPropertyObjectArrayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPropertyObjectArrayChanged(const FString& NewTitle, const TArray< UObject* >& UObjects )"
  },
  {
    "label": "OnLayoutHasChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLayoutHasChanged()"
  },
  {
    "label": "ConstructTitleBarMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructTitleBarMessages()"
  },
  {
    "label": "BuildViewportTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "BuildViewportTab( const FText& Label, const FString LayoutId, const FString& InitializationPayload )"
  },
  {
    "label": "OnViewportTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportTabClosed(TSharedRef<SDockTab> ClosedTab)"
  },
  {
    "label": "OnToolboxTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolboxTabClosed(TSharedRef<SDockTab> ClosedTab)"
  },
  {
    "label": "SaveViewportTabInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveViewportTabInfo(TSharedRef<const class FLevelViewportTabContent> ViewportTabContent)"
  },
  {
    "label": "ResetViewportTabInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetViewportTabInfo()"
  },
  {
    "label": "HandleEditorMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEditorMapChange( uint32 MapChangeFlags )"
  },
  {
    "label": "HandleAssetsDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAssetsDeleted(const TArray<UClass*>& DeletedClasses)"
  },
  {
    "label": "OnIsmInstanceRemoving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIsmInstanceRemoving(const FSMInstanceElementId& SMInstanceElementId, int32 InstanceIndex)"
  },
  {
    "label": "OnElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnElementSelectionChanged(const UTypedElementSelectionSet* SelectionSet, bool bForceRefresh = false)"
  },
  {
    "label": "OnActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorSelectionChanged(const TArray<UObject*>& NewSelection, bool bForceRefresh)"
  },
  {
    "label": "OnOverridePropertyEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOverridePropertyEditorSelection(const TArray<AActor*>& NewSelection, bool bForceRefresh = false)"
  },
  {
    "label": "OnLevelActorDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorDeleted(AActor* InActor)"
  },
  {
    "label": "OnLevelActorOuterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorOuterChanged(AActor* InActor = nullptr, UObject* InOldOuter = nullptr)"
  },
  {
    "label": "RegisterStatusBarTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStatusBarTools()"
  },
  {
    "label": "CreateSceneOutliner()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISceneOutliner>)",
    "insertText": "CreateSceneOutliner(FName TabIdentifier)"
  },
  {
    "label": "OnExtendSceneOutlinerTabContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtendSceneOutlinerTabContextMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "GetSceneOutlinerLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSceneOutlinerLabel(FName SceneOutlinerTabIdentifier)"
  },
  {
    "label": "ResetMostRecentOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMostRecentOutliner()"
  }
]