[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "TCachingMeshSDF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCachingMeshSDF"
  },
  {
    "label": "EInsideModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInsideModes"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" MeshQueries . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / DenseGrid3 . h \" # include \" Async / ParallelFor . h \" # include \" Implicit / GridInterpolant . h \" namespace UE { namespace Geometry { template<class TriangleMeshType> class TCachingMeshSDF { public : const TriangleMeshType* Mesh ; const TMeshAABBTree3<TriangleMeshType>* Spatial ; float CellSize ; FVector3d ExpandBounds =)",
    "insertText": "Zero()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (float MaxOffsetDistance = 0 ; bool bUseParallel = true ; bool bComputeSigns = true ; int ApproxMaxCellsPerDimension = 4 0 9 6 ; enum EInsideModes { CrossingCount = 0,WindingCount = 1 } ; EInsideModes InsideMode = EInsideModes::WindingCount ; bool bWantClosestTriGrid = false ; bool bWantIntersectionsGrid = false ; TFunction<)",
    "insertText": "bool(void)> CancelF = []()"
  },
  {
    "label": "TCachingMeshSDF()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCachingMeshSDF(const TriangleMeshType* MeshIn, float CellSizeIn, const TMeshAABBTree3<TriangleMeshType>* SpatialIn, bool bAutoBuild) : Mesh(MeshIn), Spatial(SpatialIn), CellSize(CellSizeIn)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} } protected : float UpperBoundDistance ; double MaxDistQueryDist ; public : bool)",
    "insertText": "Validate()"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d Bounds = Spatial ->)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (CellSize =)",
    "insertText": "float(MaxDim / (ApproxMaxCellsPerDimension - 4))"
  },
  {
    "label": "GridOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridOrigin(FVector3f)Bounds.Min - fBufferWidth * FVector3f::One() - (FVector3f)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "max(FVector3f)Bounds.Max + fBufferWidth * FVector3f::One() + (FVector3f)"
  },
  {
    "label": "NI()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NI(int)((max.X - GridOrigin.X) / CellSize)"
  },
  {
    "label": "NJ()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NJ(int)((max.Y - GridOrigin.Y) / CellSize)"
  },
  {
    "label": "NK()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NK(int)((max.Z - GridOrigin.Z) / CellSize)"
  },
  {
    "label": "UpperBoundDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpperBoundDistance(float)((NI + NJ + NK) * CellSize)"
  },
  {
    "label": "FDenseGrid3f()",
    "kind": "Method",
    "detail": "Function (Grid =)",
    "insertText": "FDenseGrid3f(NI, NJ, NK, UpperBoundDistance)"
  },
  {
    "label": "MaxOffsetDistance()",
    "kind": "Method",
    "detail": "Function (MaxDistQueryDist =)",
    "insertText": "MaxOffsetDistance(2 * CellSize * FMathf::Sqrt2)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (ClosestTriGrid .)",
    "insertText": "Resize(NI, NJ, NK)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (ClosestTriGrid .)",
    "insertText": "Assign(-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bComputeSigns == true)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (IntersectionCount .)",
    "insertText": "Assign(0)"
  },
  {
    "label": "compute_intersections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_intersections(GridOrigin, CellSize, NI, NJ, NK, IntersectionCount)"
  },
  {
    "label": "CleanupUnwanted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupUnwanted()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (IntersectionsGrid .)",
    "insertText": "Resize(0, 0, 0)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetValue(FVector3i Idx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float f = Grid [ Idx ] ;)",
    "insertText": "if(f == UpperBoundDistance || f == -UpperBoundDistance)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "p(FVector3d)cell_center(Idx)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (float sign =)",
    "insertText": "Sign(f)"
  },
  {
    "label": "sign()",
    "kind": "Method",
    "detail": "Function (f + = 0 . 0 0 0 1 f ; } else { f =)",
    "insertText": "sign(float)FMathd::Sqrt(dsqr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} Grid [ Idx ] = f ;)",
    "insertText": "if(bWantClosestTriGrid)"
  },
  {
    "label": "MakeInterpolant()",
    "kind": "Method",
    "detail": "Function (ClosestTriGrid [ Idx ] = near_tid ; } } return f ; } TTriLinearGridInterpolant<TCachingMeshSDF>)",
    "insertText": "MakeInterpolant()"
  },
  {
    "label": "Dimensions()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "Dimensions()"
  },
  {
    "label": "GetGrid()",
    "kind": "Method",
    "detail": "Function (} const FDenseGrid3f&)",
    "insertText": "GetGrid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "operator(FVector3i Idx)"
  },
  {
    "label": "cell_center()",
    "kind": "Method",
    "detail": "Function (} private : FVector3f)",
    "insertText": "cell_center(const FVector3i& IJK)"
  },
  {
    "label": "compute_intersections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute_intersections(FVector3f Origin, float DX, int32 NI, int32 NJ, int32 NK, FDenseGrid3i& IntersectionCount)"
  },
  {
    "label": "compute_signs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute_signs(int NI, int NJ, int NK, FDenseGrid3f& Distances, FDenseGrid3i& IntersectionCount)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NJ*NK, [this, &NI, &NJ, &NK, &Distances, &IntersectionCount](int32 vi) { if (CancelF()) { return; } int32 J = vi % NJ, K = vi / NJ; int32 total_count = 0; for (int I = 0; I < NI; ++I) { total_count += IntersectionCount.At(I, J, K); if ( (InsideMode == EInsideModes::WindingCount && total_count > 0) || (InsideMode == EInsideModes::CrossingCount && total_count % 2 == 1) ) { Distances.At(I, J, K) = -Distances.At(I, J, K); } } }, !bUseParallel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int K = 0; K < NK; ++K)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int total_count = 0 ;)",
    "insertText": "for(int I = 0; I < NI; ++I)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (total_count + = IntersectionCount .)",
    "insertText": "At(I, J, K)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Distances .)",
    "insertText": "At(I, J, K) = -Distances.At(I, J, K)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (} } } } } } public : int)",
    "insertText": "Orientation(double X1, double Y1, double X2, double Y2, double& TwiceSignedArea)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TwiceSignedArea = Y1* X2 - X1* Y2 ;)",
    "insertText": "if(TwiceSignedArea > 0)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (A = B = C = 0 ; X1 - = X0 ; X2 - = X0 ; X3 - = X0 ; Y1 - = Y0 ; Y2 - = Y0 ; Y3 - = Y0 ; int signa =)",
    "insertText": "Orientation(X2, Y2, X3, Y3, A)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (int signb =)",
    "insertText": "Orientation(X3, Y3, X1, Y1, B)"
  },
  {
    "label": "Orientation()",
    "kind": "Method",
    "detail": "Function (int signc =)",
    "insertText": "Orientation(X1, Y1, X2, Y2, C)"
  }
]