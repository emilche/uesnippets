[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_UNIQUE_COPY_H # define _LIBCPP___ALGORITHM_RANGES_UNIQUE_COPY_H # include<__algorithm / in_out_result . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / make_projected . h> # include<__algorithm / unique_copy . h> # include<__concepts / same_as . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / projected . h> # include<__iterator / readable_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / forward . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__can_reread_from_output()",
    "kind": "Method",
    "detail": "Function (template<class _InIter,class _OutIter> using unique_copy_result = in_out_result<_InIter,_OutIter> ; namespace __unique_copy { template<class _InIter,class _OutIter> concept)",
    "insertText": "__can_reread_from_output(input_iterator<_OutIter> && same_as<iter_value_t<_InIter>, iter_value_t<_OutIter>>)"
  },
  {
    "label": "__get_algo_tag()",
    "kind": "Method",
    "detail": "Function (struct __fn { template<class _InIter,class _OutIter> consteval auto)",
    "insertText": "__get_algo_tag()"
  },
  {
    "label": "_OutIter()",
    "kind": "Method",
    "detail": "Function (template<input_iterator _InIter,sentinel_for<_InIter> _Sent,weakly_incrementable _OutIter,class _Proj = identity,indirect_equivalence_relation<projected<_InIter,_Proj>> _Comp = ranges::equal_to> requires indirectly_copyable<_InIter,)",
    "insertText": "_OutIter(forward_iterator<_InIter> || (input_iterator<_OutIter> && same_as<iter_value_t<_InIter>, iter_value_t<_OutIter>>) || indirectly_copyable_storable<_InIter, _OutIter>) _LIBCPP_HIDE_FROM_ABI constexpr unique_copy_result<_InIter, _OutIter> operator()(_InIter __first, _Sent __last, _OutIter __result, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__unique_copy<)",
    "insertText": "_RangeAlgPolicy(std::move(__first), std::move(__last), std::move(__result), std::__make_projected(__comp, __proj), __algo_tag_t<_InIter, _OutIter>())"
  },
  {
    "label": "_OutIter()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,weakly_incrementable _OutIter,class _Proj = identity,indirect_equivalence_relation<projected<iterator_t<_Range>,_Proj>> _Comp = ranges::equal_to> requires indirectly_copyable<iterator_t<_Range>,)",
    "insertText": "_OutIter(forward_iterator<iterator_t<_Range>> || (input_iterator<_OutIter> && same_as<range_value_t<_Range>, iter_value_t<_OutIter>>) || indirectly_copyable_storable<iterator_t<_Range>, _OutIter>) _LIBCPP_HIDE_FROM_ABI constexpr unique_copy_result<borrowed_iterator_t<_Range>, _OutIter> operator()(_Range&& __range, _OutIter __result, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__unique_copy<)",
    "insertText": "_RangeAlgPolicy(ranges::begin(__range), ranges::end(__range), std::move(__result), std::__make_projected(__comp, __proj), __algo_tag_t<iterator_t<_Range>, _OutIter>())"
  }
]