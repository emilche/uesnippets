[
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CreateSocketPair()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POSIX_UNIX_DOMAIN_SOCKET_H_ # define BASE_POSIX_UNIX_DOMAIN_SOCKET_H_ # include<stddef . h> # include<stdint . h> # include<sys / types . h> # include<vector> # include \" base / base_export . h \" # include \" base / files / scoped_file . h \" # include \" base / process / process_handle . h \" # include \" build / build_config . h \" namespace base { class Pickle ; bool BASE_EXPORT)",
    "insertText": "CreateSocketPair(ScopedFD* one, ScopedFD* two)"
  },
  {
    "label": "EnableReceiveProcessId()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT UnixDomainSocket { public : const size_t kMaxFileDescriptors ; bool)",
    "insertText": "EnableReceiveProcessId(int fd)"
  },
  {
    "label": "SendMsg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMsg(int fd, const void* msg, size_t length, const std::vector<int>& fds)"
  },
  {
    "label": "RecvMsg()",
    "kind": "Method",
    "detail": "Function (ssize_t)",
    "insertText": "RecvMsg(int fd, void* msg, size_t length, std::vector<ScopedFD>* fds)"
  },
  {
    "label": "RecvMsgWithPid()",
    "kind": "Method",
    "detail": "Function (ssize_t)",
    "insertText": "RecvMsgWithPid(int fd, void* msg, size_t length, std::vector<ScopedFD>* fds, ProcessId* pid)"
  },
  {
    "label": "SendRecvMsg()",
    "kind": "Method",
    "detail": "Function (ssize_t)",
    "insertText": "SendRecvMsg(int fd, uint8_t* reply, unsigned reply_len, int* result_fd, const Pickle& request)"
  },
  {
    "label": "SendRecvMsgWithFlags()",
    "kind": "Method",
    "detail": "Function (ssize_t)",
    "insertText": "SendRecvMsgWithFlags(int fd, uint8_t* reply, unsigned reply_len, int recvmsg_flags, int* result_fd, const Pickle& request)"
  },
  {
    "label": "RecvMsgWithFlags()",
    "kind": "Method",
    "detail": "Function (private : ssize_t)",
    "insertText": "RecvMsgWithFlags(int fd, void* msg, size_t length, int flags, std::vector<ScopedFD>* fds, ProcessId* pid)"
  }
]