[
  {
    "label": "FRDGBlackboard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBlackboard"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStruct"
  },
  {
    "label": "TStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStruct"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "RDG_REGISTER_BLACKBOARD_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / GeneratedTypeName . h \" # include \" RenderGraphAllocator . h \" # include \" RenderGraphDefinitions . h \" # include \" Templates / UnrealTemplate . h \" # define)",
    "insertText": "RDG_REGISTER_BLACKBOARD_STRUCT(StructType) \\ template <> \\ inline FString FRDGBlackboard::GetTypeName<StructType>()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GetTypeName(TEXT(#StructType), TEXT(__FILE__), __LINE__)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ } class FRDGBlackboard { public : template<StructType,. . . ArgsType> StructType&)",
    "insertText": "Create(ArgsType&&... Args)"
  },
  {
    "label": "StructType()",
    "kind": "Method",
    "detail": "Function (using HelperStructType = TStruct<StructType> ; const int32 StructIndex = GetStructIndex<)",
    "insertText": "StructType()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Blackboard .)",
    "insertText": "SetNumZeroed(StructIndex + 1)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} FStruct*& Result = Blackboard [ StructIndex ] ;)",
    "insertText": "checkf(!Result, TEXT(\"RDGBlackboard duplicate Create called on struct '%s'. Only one Create call per struct is allowed.\"), GetGeneratedTypeName<StructType>())"
  },
  {
    "label": "HelperStructType()",
    "kind": "Method",
    "detail": "Function (Result = Allocator . Alloc<)",
    "insertText": "HelperStructType(Forward<ArgsType&&>(Args)...)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<StructType> const StructType*)",
    "insertText": "Get()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Blackboard .)",
    "insertText": "Empty()"
  },
  {
    "label": "FStruct()",
    "kind": "Method",
    "detail": "Function (} struct FStruct { ~)",
    "insertText": "FStruct()"
  },
  {
    "label": "TStruct()",
    "kind": "Method",
    "detail": "Function (} ; template<StructType> struct TStruct final : public FStruct { template<. . . TArgs>)",
    "insertText": "TStruct(TArgs&&... Args) : Struct(Forward<TArgs&&>(Args)...)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} StructType Struct ; } ; template<StructType> FString)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetTypeName(const TCHAR* ClassName, const TCHAR* FileName, uint32 LineNumber)"
  },
  {
    "label": "AllocateIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AllocateIndex(FString&& TypeName)"
  },
  {
    "label": "GetStructIndex()",
    "kind": "Method",
    "detail": "Function (template<StructType> uint32)",
    "insertText": "GetStructIndex()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Index = UINT_MAX ;)",
    "insertText": "if(Index == UINT_MAX)"
  },
  {
    "label": "AllocateIndex()",
    "kind": "Method",
    "detail": "Function (Index =)",
    "insertText": "AllocateIndex(GetTypeName<StructType>())"
  }
]