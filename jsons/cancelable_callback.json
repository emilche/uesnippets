[
  {
    "label": "CancelableCallbackImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CancelableCallbackImpl"
  },
  {
    "label": "CancelableCallbackImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CANCELABLE_CALLBACK_H_ # define BASE_CANCELABLE_CALLBACK_H_ # include<utility> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / check . h \" # include \" base / compiler_specific . h \" # include \" base / functional / callback_internal . h \" # include \" base / memory / weak_ptr . h \" namespace base { namespace internal { template<CallbackType> class CancelableCallbackImpl { public :)",
    "insertText": "CancelableCallbackImpl()"
  },
  {
    "label": "CancelableCallbackImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableCallbackImpl(const CancelableCallbackImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CancelableCallbackImpl&)",
    "insertText": "operator(const CancelableCallbackImpl&)"
  },
  {
    "label": "CancelableCallbackImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelableCallbackImpl(CallbackType callback) : callback_(std::move(callback))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(callback_)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "InvalidateWeakPtrs()",
    "kind": "Method",
    "detail": "Function (weak_ptr_factory_ .)",
    "insertText": "InvalidateWeakPtrs()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (callback_ .)",
    "insertText": "Reset()"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCancelled()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(CallbackType callback)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(callback)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (callback_ =)",
    "insertText": "move(callback)"
  },
  {
    "label": "callback()",
    "kind": "Method",
    "detail": "Function (} CallbackType)",
    "insertText": "callback()"
  },
  {
    "label": "MakeForwarder()",
    "kind": "Method",
    "detail": "Function (CallbackType forwarder ;)",
    "insertText": "MakeForwarder(&forwarder)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ForwarderType =)",
    "insertText": "void(CancelableCallbackImpl::*)(Args...)"
  },
  {
    "label": "MakeForwarder()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "MakeForwarder(OnceCallback<void(Args...)>* out)"
  },
  {
    "label": "ForwardRepeating()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "ForwardRepeating(Args... args)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (callback_ .)",
    "insertText": "Run(std::forward<Args>(args)...)"
  },
  {
    "label": "ForwardOnce()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "ForwardOnce(Args... args)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(callback_).Run(std::forward<Args>(args)...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} CallbackType callback_ ; base::WeakPtrFactory<CancelableCallbackImpl> weak_ptr_factory_ { this } ; } ; } template<Signature> using CancelableOnceCallback = internal::CancelableCallbackImpl<OnceCallback<Signature>> ; using CancelableOnceClosure = CancelableOnceCallback<)",
    "insertText": "void()"
  }
]