[
  {
    "label": "FHitIntersectionResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitIntersectionResult"
  },
  {
    "label": "ISpatial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatial"
  },
  {
    "label": "IMeshSpatial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMeshSpatial"
  },
  {
    "label": "FQueryOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryOptions"
  },
  {
    "label": "IProjectionTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IProjectionTarget"
  },
  {
    "label": "IOrientedProjectionTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOrientedProjectionTarget"
  },
  {
    "label": "IIntersectionTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IIntersectionTarget"
  },
  {
    "label": "ISpatial()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Ray . h \" # include \" VectorTypes . h \" namespace MeshIntersection { struct FHitIntersectionResult { int TriangleId ; double Distance ; FVector3d BaryCoords ; } ; } namespace UE { namespace Geometry { class ISpatial { public : ~)",
    "insertText": "ISpatial()"
  },
  {
    "label": "SupportsPointContainment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPointContainment()"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInside(const FVector3d & Point)"
  },
  {
    "label": "IMeshSpatial()",
    "kind": "Method",
    "detail": "Function (} ; class IMeshSpatial : public ISpatial { public : ~)",
    "insertText": "IMeshSpatial()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (struct FQueryOptions { double MaxDistance = TNumericLimits<double)",
    "insertText": "Max()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "bool(int)"
  },
  {
    "label": "FQueryOptions()",
    "kind": "Method",
    "detail": "Function (bool bAllowUnsafeModifiedMeshQueries = false ;)",
    "insertText": "FQueryOptions()"
  },
  {
    "label": "FQueryOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQueryOptions(TFunction<bool(int)> TriangleFilterF) : TriangleFilterF(TriangleFilterF)"
  },
  {
    "label": "FQueryOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FQueryOptions(double MaxDistance, TFunction<bool(int)> TriangleFilterF = nullptr) : MaxDistance(MaxDistance), TriangleFilterF(TriangleFilterF)"
  },
  {
    "label": "SupportsNearestTriangle()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "SupportsNearestTriangle()"
  },
  {
    "label": "FindNearestTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindNearestTriangle(const FVector3d& Point, double& NearestDistSqrOut, const FQueryOptions& Options = FQueryOptions())"
  },
  {
    "label": "SupportsTriangleRayIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTriangleRayIntersection()"
  },
  {
    "label": "FindNearestHitTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindNearestHitTriangle(const FRay3d& Ray, const FQueryOptions& Options = FQueryOptions())"
  },
  {
    "label": "FindNearestHitTriangle()",
    "kind": "Method",
    "detail": "Function (FVector3d BaryCoords ; return)",
    "insertText": "FindNearestHitTriangle(Ray, NearestT, TID, BaryCoords, Options)"
  },
  {
    "label": "FindNearestHitTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindNearestHitTriangle(const FRay3d& Ray, double& NearestT, int& TID, FVector3d& BaryCoords, const FQueryOptions& Options = FQueryOptions())"
  },
  {
    "label": "FindAllHitTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAllHitTriangles(const FRay3d& Ray, TArray<MeshIntersection::FHitIntersectionResult>& OutHits, const FQueryOptions& Options = FQueryOptions())"
  },
  {
    "label": "IProjectionTarget()",
    "kind": "Method",
    "detail": "Function (} ; class IProjectionTarget { public : ~)",
    "insertText": "IProjectionTarget()"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "Project(const FVector3d& Point, int Identifier = -1)"
  },
  {
    "label": "IOrientedProjectionTarget()",
    "kind": "Method",
    "detail": "Function (} ; class IOrientedProjectionTarget : public IProjectionTarget { public : ~)",
    "insertText": "IOrientedProjectionTarget()"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "Project(const FVector3d& Point, FVector3d& ProjectNormalOut, int Identifier = -1)"
  },
  {
    "label": "IIntersectionTarget()",
    "kind": "Method",
    "detail": "Function (} ; class IIntersectionTarget { public : ~)",
    "insertText": "IIntersectionTarget()"
  },
  {
    "label": "HasNormal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNormal()"
  },
  {
    "label": "RayIntersect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RayIntersect(const FRay3d& Ray, FVector3d& HitOut, FVector3d& HitNormalOut)"
  }
]