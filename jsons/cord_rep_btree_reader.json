[
  {
    "label": "CordRepBtreeReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CordRepBtreeReader"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_BTREE_READER_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_BTREE_READER_H_ # include<cassert> # include \" absl / base / config . h \" # include \" absl / strings / internal / cord_data_edge . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cord_rep_btree . h \" # include \" absl / strings / internal / cord_rep_btree_navigator . h \" # include \" absl / strings / internal / cord_rep_flat . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class CordRepBtreeReader { public : using ReadResult = CordRepBtreeNavigator::ReadResult ; using Position = CordRepBtreeNavigator::Position ; operator)",
    "insertText": "bool()"
  },
  {
    "label": "btree()",
    "kind": "Method",
    "detail": "Function (} CordRepBtree*)",
    "insertText": "btree()"
  },
  {
    "label": "node()",
    "kind": "Method",
    "detail": "Function (} CordRep*)",
    "insertText": "node()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "length()"
  },
  {
    "label": "remaining()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "remaining()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (navigator_ .)",
    "insertText": "Reset()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "Init(CordRepBtree* tree)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Next()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Skip(size_t skip)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Read(size_t n, size_t chunk_size, CordRep*& tree)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "Seek(size_t offset)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(btree() != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(tree != nullptr)"
  },
  {
    "label": "InitFirst()",
    "kind": "Method",
    "detail": "Function (const CordRep* edge = navigator_ .)",
    "insertText": "InitFirst(tree)"
  },
  {
    "label": "EdgeData()",
    "kind": "Method",
    "detail": "Function (remaining_ = tree -> length - edge -> length ; return)",
    "insertText": "EdgeData(edge)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(edge != nullptr)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (length)",
    "insertText": "Current()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (CordRepBtreeNavigator::Position pos = navigator_ .)",
    "insertText": "Skip(skip + edge_length)"
  },
  {
    "label": "EdgeData()",
    "kind": "Method",
    "detail": "Function (remaining_ = 0 ; return { } ; } remaining_ - = skip - pos . offset + pos . edge -> length ; return)",
    "insertText": "EdgeData(pos.edge).substr(pos.offset)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (const CordRepBtreeNavigator::Position pos = navigator_ .)",
    "insertText": "Seek(offset)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (remaining_ =)",
    "insertText": "length() - offset - chunk.length()"
  }
]