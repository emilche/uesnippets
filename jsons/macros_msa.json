[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDE_LIBYUV_MACROS_MSA_H_ # define INCLUDE_LIBYUV_MACROS_MSA_H_ # if !)",
    "insertText": "defined(LIBYUV_DISABLE_MSA) && defined(__mips_msa) #include <msa.h> #include <stdint.h> #if (__mips_isa_rev >= 6) #define LW(psrc) \\ ({ \\ const uint8_t* psrc_lw_m = (const uint8_t*)(psrc); \\ uint32_t val_m; \\ asm volatile(\"lw %[val_m], %[psrc_lw_m] \\n\" \\ : [val_m] \"=r\"(val_m) \\ : [psrc_lw_m] \"m\"(*psrc_lw_m)); \\ val_m; \\ }) #if (__mips == 64) #define LD(psrc) \\ ({ \\ const uint8_t* psrc_ld_m = (const uint8_t*)(psrc); \\ uint64_t val_m = 0; \\ asm volatile(\"ld %[val_m], %[psrc_ld_m] \\n\" \\ : [val_m] \"=r\"(val_m) \\ : [psrc_ld_m] \"m\"(*psrc_ld_m)); \\ val_m; \\ }) #else #define LD(psrc) \\ ({ \\ const uint8_t* psrc_ld_m = (const uint8_t*)(psrc); \\ uint32_t val0_m, val1_m; \\ uint64_t val_m = 0; \\ val0_m = LW(psrc_ld_m); \\ val1_m = LW(psrc_ld_m + 4); \\ val_m = (uint64_t)(val1_m); \\ val_m = (uint64_t)((val_m << 32) & 0xFFFFFFFF00000000); \\ val_m = (uint64_t)(val_m | (uint64_t)val0_m); \\ val_m; \\ }) #endif #define SW(val, pdst) \\ ({ \\ uint8_t* pdst_sw_m = (uint8_t*)(pdst); \\ uint32_t val_m = (val); \\ asm volatile(\"sw %[val_m], %[pdst_sw_m] \\n\" \\ : [pdst_sw_m] \"=m\"(*pdst_sw_m) \\ : [val_m] \"r\"(val_m)); \\ }) #if (__mips == 64) #define SD(val, pdst) \\ ({ \\ uint8_t* pdst_sd_m = (uint8_t*)(pdst); \\ uint64_t val_m = (val); \\ asm volatile(\"sd %[val_m], %[pdst_sd_m] \\n\" \\ : [pdst_sd_m] \"=m\"(*pdst_sd_m) \\ : [val_m] \"r\"(val_m)); \\ }) #else #define SD(val, pdst) \\ ({ \\ uint8_t* pdst_sd_m = (uint8_t*)(pdst); \\ uint32_t val0_m, val1_m; \\ val0_m = (uint32_t)((val)&0x00000000FFFFFFFF); \\ val1_m = (uint32_t)(((val) >> 32) & 0x00000000FFFFFFFF); \\ SW(val0_m, pdst_sd_m); \\ SW(val1_m, pdst_sd_m + 4); \\ }) #endif #else #define LW(psrc) \\ ({ \\ uint8_t* psrc_lw_m = (uint8_t*)(psrc); \\ uint32_t val_lw_m; \\ \\ __asm__ volatile( \\ \"lwr %[val_lw_m], 0(%[psrc_lw_m]) \\n\\t\" \\ \"lwl %[val_lw_m], 3(%[psrc_lw_m]) \\n\\t\" \\ \\ : [val_lw_m] \"=&r\"(val_lw_m) \\ : [psrc_lw_m] \"r\"(psrc_lw_m)); \\ \\ val_lw_m; \\ }) #if (__mips == 64) #define LD(psrc) \\ ({ \\ uint8_t* psrc_ld_m = (uint8_t*)(psrc); \\ uint64_t val_ld_m = 0; \\ \\ __asm__ volatile( \\ \"ldr %[val_ld_m], 0(%[psrc_ld_m]) \\n\\t\" \\ \"ldl %[val_ld_m], 7(%[psrc_ld_m]) \\n\\t\" \\ \\ : [val_ld_m] \"=&r\"(val_ld_m) \\ : [psrc_ld_m] \"r\"(psrc_ld_m)); \\ \\ val_ld_m; \\ }) #else #define LD(psrc) \\ ({ \\ const uint8_t* psrc_ld_m = (const uint8_t*)(psrc); \\ uint32_t val0_m, val1_m; \\ uint64_t val_m = 0; \\ val0_m = LW(psrc_ld_m); \\ val1_m = LW(psrc_ld_m + 4); \\ val_m = (uint64_t)(val1_m); \\ val_m = (uint64_t)((val_m << 32) & 0xFFFFFFFF00000000); \\ val_m = (uint64_t)(val_m | (uint64_t)val0_m); \\ val_m; \\ }) #endif #define SW(val, pdst) \\ ({ \\ uint8_t* pdst_sw_m = (uint8_t*)(pdst); \\ uint32_t val_m = (val); \\ asm volatile(\"usw %[val_m], %[pdst_sw_m] \\n\" \\ : [pdst_sw_m] \"=m\"(*pdst_sw_m) \\ : [val_m] \"r\"(val_m)); \\ }) #define SD(val, pdst) \\ ({ \\ uint8_t* pdst_sd_m = (uint8_t*)(pdst); \\ uint32_t val0_m, val1_m; \\ val0_m = (uint32_t)((val)&0x00000000FFFFFFFF); \\ val1_m = (uint32_t)(((val) >> 32) & 0x00000000FFFFFFFF); \\ SW(val0_m, pdst_sd_m); \\ SW(val1_m, pdst_sd_m + 4); \\ }) #endif #define LD_B(RTYPE, psrc) *((RTYPE*)(psrc)) #define LD_UB(...) LD_B(const v16u8, __VA_ARGS__) #define LD_H(RTYPE, psrc) *((RTYPE*)(psrc)) #define LD_UH(...) LD_H(const v8u16, __VA_ARGS__) #define ST_B(RTYPE, in, pdst) *((RTYPE*)(pdst)) = (in) #define ST_UB(...) ST_B(v16u8, __VA_ARGS__) #define ST_H(RTYPE, in, pdst) *((RTYPE*)(pdst)) = (in) #define ST_UH(...) ST_H(v8u16, __VA_ARGS__) #define LD_B2(RTYPE, psrc, stride, out0, out1)"
  },
  {
    "label": "LD_B()",
    "kind": "Method",
    "detail": "Function (\\ out0 =)",
    "insertText": "LD_B(RTYPE, (psrc))"
  },
  {
    "label": "LD_B()",
    "kind": "Method",
    "detail": "Function (\\ out1 =)",
    "insertText": "LD_B(RTYPE, (psrc) + stride)"
  },
  {
    "label": "LD_UB2()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "LD_UB2(...) LD_B2(const v16u8, __VA_ARGS__) #define LD_B4(RTYPE, psrc, stride, out0, out1, out2, out3)"
  },
  {
    "label": "LD_B2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "LD_B2(RTYPE, (psrc), stride, out0, out1)"
  },
  {
    "label": "LD_B2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "LD_B2(RTYPE, (psrc) + 2 * stride, stride, out2, out3)"
  },
  {
    "label": "LD_UB4()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "LD_UB4(...) LD_B4(const v16u8, __VA_ARGS__) #define ST_B2(RTYPE, in0, in1, pdst, stride)"
  },
  {
    "label": "ST_B()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ST_B(RTYPE, in0, (pdst))"
  },
  {
    "label": "ST_B()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ST_B(RTYPE, in1, (pdst) + stride)"
  },
  {
    "label": "ST_UB2()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "ST_UB2(...) ST_B2(v16u8, __VA_ARGS__) #define ST_B4(RTYPE, in0, in1, in2, in3, pdst, stride)"
  },
  {
    "label": "ST_B2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ST_B2(RTYPE, in0, in1, (pdst), stride)"
  },
  {
    "label": "ST_B2()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ST_B2(RTYPE, in2, in3, (pdst) + 2 * stride, stride)"
  },
  {
    "label": "ST_UB4()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "ST_UB4(...) ST_B4(v16u8, __VA_ARGS__) #define ST_H2(RTYPE, in0, in1, pdst, stride)"
  },
  {
    "label": "ST_H()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ST_H(RTYPE, in0, (pdst))"
  },
  {
    "label": "ST_H()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ST_H(RTYPE, in1, (pdst) + stride)"
  },
  {
    "label": "ST_UH2()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "ST_UH2(...) ST_H2(v8u16, __VA_ARGS__) #define VSHF_B2(RTYPE, in0, in1, in2, in3, mask0, mask1, out0, out1)"
  },
  {
    "label": "out0()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "out0(RTYPE)__msa_vshf_b((v16i8)mask0, (v16i8)in1, (v16i8)in0)"
  },
  {
    "label": "out1()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "out1(RTYPE)__msa_vshf_b((v16i8)mask1, (v16i8)in3, (v16i8)in2)"
  },
  {
    "label": "VSHF_B2_UB()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VSHF_B2_UB(...) VSHF_B2(v16u8, __VA_ARGS__) #define ILVRL_B2(RTYPE, in0, in1, out0, out1)"
  },
  {
    "label": "out0()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "out0(RTYPE)__msa_ilvr_b((v16i8)in0, (v16i8)in1)"
  },
  {
    "label": "out1()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "out1(RTYPE)__msa_ilvl_b((v16i8)in0, (v16i8)in1)"
  }
]