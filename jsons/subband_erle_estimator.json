[
  {
    "label": "SubbandErleEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SubbandErleEstimator"
  },
  {
    "label": "AccumulatedSpectra",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AccumulatedSpectra"
  },
  {
    "label": "SubbandErleEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_SUBBAND_ERLE_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_SUBBAND_ERLE_ESTIMATOR_H_ # include<stddef . h> # include<array> # include<memory> # include<vector> # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" namespace webrtc { class SubbandErleEstimator { public :)",
    "insertText": "SubbandErleEstimator(const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "SubbandErleEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SubbandErleEstimator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(rtc::ArrayView<const float, kFftLengthBy2Plus1> X2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> E2, const std::vector<bool>& converged_filters)"
  },
  {
    "label": "Erle()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "Erle(bool onset_compensated)"
  },
  {
    "label": "AccumulatedSpectra()",
    "kind": "Method",
    "detail": "Function (private : struct AccumulatedSpectra {)",
    "insertText": "AccumulatedSpectra(size_t num_capture_channels) : Y2(num_capture_channels), E2(num_capture_channels), low_render_energy(num_capture_channels), num_points(num_capture_channels)"
  },
  {
    "label": "UpdateAccumulatedSpectra()",
    "kind": "Method",
    "detail": "Function (} std::vector<std::array<float,kFftLengthBy2Plus1>> Y2 ; std::vector<std::array<float,kFftLengthBy2Plus1>> E2 ; std::vector<std::array<bool,kFftLengthBy2Plus1>> low_render_energy ; std::vector<int> num_points ; } ; void)",
    "insertText": "UpdateAccumulatedSpectra(rtc::ArrayView<const float, kFftLengthBy2Plus1> X2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> E2, const std::vector<bool>& converged_filters)"
  },
  {
    "label": "ResetAccumulatedSpectra()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAccumulatedSpectra()"
  },
  {
    "label": "UpdateBands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBands(const std::vector<bool>& converged_filters)"
  },
  {
    "label": "DecreaseErlePerBandForLowRenderSignals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecreaseErlePerBandForLowRenderSignals()"
  }
]