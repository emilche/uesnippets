[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FObjectPostSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPostSaveContext"
  },
  {
    "label": "FObjectPreSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPreSaveContext"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "IMeshPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMeshPainter"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "MESHPAINT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESHPAINT_API"
  },
  {
    "label": "FModeToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeToolkit"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "IMeshPaintEdMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" EdMode . h \" class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FObjectPostSaveContext ; class FObjectPreSaveContext ; class FSceneView ; class FViewport ; class UFactory ; class IMeshPainter ; class UViewportInteractor ; struct FAssetData ; class IMeshPaintEdMode : public FEdMode { public :)",
    "insertText": "IMeshPaintEdMode()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "GetToolkit()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FModeToolkit>)",
    "insertText": "GetToolkit()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "ProcessCapturedMouseMoves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessCapturedMouseMoves(FEditorViewportClient* InViewportClient, FViewport* InViewport, const TArrayView<FIntPoint>& CapturedMouseMoves)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* InViewportClient, FViewport* InViewport, FKey InKey, EInputEvent InEvent)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Select(AActor* InActor, bool bInSelected)"
  },
  {
    "label": "ActorSelectionChangeNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorSelectionChangeNotify()"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "ProcessEditDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessEditDelete()"
  },
  {
    "label": "GetMeshPainter()",
    "kind": "Method",
    "detail": "Function (IMeshPainter*)",
    "insertText": "GetMeshPainter()"
  },
  {
    "label": "OnPreSaveWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPreSaveWorld(UWorld* World, FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnPostSaveWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSaveWorld(UWorld* World, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnPostImportAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostImportAsset(UFactory* Factory, UObject* Object)"
  },
  {
    "label": "OnPostReimportAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostReimportAsset(UObject* Object, bool bSuccess)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetRemoved(const FAssetData& AssetData)"
  },
  {
    "label": "OnVRAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVRAction(FEditorViewportClient& ViewportClient, class UViewportInteractor* Interactor, const struct FViewportActionKeyInput& Action, bool& bOutIsInputCaptured, bool& bWasHandled)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& OldToNewInstanceMap)"
  },
  {
    "label": "OnResetViewMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetViewMode()"
  }
]