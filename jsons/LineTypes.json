[
  {
    "label": "TLine2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLine2"
  },
  {
    "label": "TLine3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLine3"
  },
  {
    "label": "TLine2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> struct TLine2 { TVector2<T> Origin ; TVector2<T> Direction ;)",
    "insertText": "TLine2()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (Origin = TVector2<T)",
    "insertText": "Zero()"
  },
  {
    "label": "UnitX()",
    "kind": "Method",
    "detail": "Function (Direction = TVector2<T)",
    "insertText": "UnitX()"
  },
  {
    "label": "TLine2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLine2(const TVector2<T>& OriginIn, const TVector2<T>& DirectionIn) : Origin(OriginIn), Direction(DirectionIn)"
  },
  {
    "label": "FromPoints()",
    "kind": "Method",
    "detail": "Function (} TLine2<T>)",
    "insertText": "FromPoints(const TVector2<T>& Point0, const TVector2<T>& Point1)"
  },
  {
    "label": "PointAt()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "PointAt(T LineParameter)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector2<T>& QueryPoint)"
  },
  {
    "label": "ParameterT()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "ParameterT(QueryPoint - Origin).Dot(Direction)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (TVector2<T> proj = Origin + ParameterT* Direction ;)",
    "insertText": "return(proj - QueryPoint).SquaredLength()"
  },
  {
    "label": "NearestPoint()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "NearestPoint(const TVector2<T>& QueryPoint)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (T x0 = QueryPoint . X - Origin . X ; T y0 = QueryPoint . Y - Origin . Y ; T x1 = Direction . X ; T y1 = Direction . Y ; T det = x0* y1 - x1* y0 ;)",
    "insertText": "return(det > OnLineTolerance ? +1 : (det < -OnLineTolerance ? -1 : 0))"
  },
  {
    "label": "IntersectionPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IntersectionPoint(const TLine2<T>& OtherLine, TVector2<T>& IntersectionPointOut, T ParallelDotTolerance = TMathUtil<T>::ZeroTolerance)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<T> diff = OtherLine . Origin - Origin ; T D0DotPerpD1 =)",
    "insertText": "DotPerp(Direction, OtherLine.Direction)"
  },
  {
    "label": "invD0DotPerpD1()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "invD0DotPerpD1((T)1)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (T diffDotPerpD1 =)",
    "insertText": "DotPerp(diff, OtherLine.Direction)"
  },
  {
    "label": "TLine3()",
    "kind": "Method",
    "detail": "Function (T s = diffDotPerpD1* invD0DotPerpD1 ; IntersectionPointOut = Origin + s* Direction ; return true ; } return false ; } } ; typedef TLine2<double> FLine2d ; typedef TLine2<float> FLine2f ; template<T> struct TLine3 { TVector<T> Origin ; TVector<T> Direction ;)",
    "insertText": "TLine3()"
  },
  {
    "label": "TLine3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLine3(const TVector<T>& OriginIn, const TVector<T>& DirectionIn) : Origin(OriginIn), Direction(DirectionIn)"
  },
  {
    "label": "FromPoints()",
    "kind": "Method",
    "detail": "Function (} TLine3<T>)",
    "insertText": "FromPoints(const TVector<T>& Point0, const TVector<T>& Point1)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector<T>& QueryPoint)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "t(QueryPoint - Origin).Dot(Direction)"
  },
  {
    "label": "NearestPoint()",
    "kind": "Method",
    "detail": "Function (} TVector<T>)",
    "insertText": "NearestPoint(const TVector<T>& QueryPoint)"
  }
]