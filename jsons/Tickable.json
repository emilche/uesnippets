[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTickableObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickableObjectBase"
  },
  {
    "label": "FTickableObjectEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickableObjectEntry"
  },
  {
    "label": "FTickableStatics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTickableStatics"
  },
  {
    "label": "FTickableGameObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickableGameObject"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Misc / ScopeLock . h \" # include \" Engine / EngineBaseTypes . h \" enum class ETickableTickType : uint8 { Conditional,Always,Never,NewObject } ; class FTickableObjectBase { protected : struct FTickableObjectEntry { FTickableObjectBase* TickableObject = nullptr ; ETickableTickType TickType = ETickableTickType::NewObject ; bool)",
    "insertText": "operator(FTickableObjectBase* OtherObject)"
  },
  {
    "label": "SetTickTypeForTickableObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickTypeForTickableObject(FTickableObjectBase* TickableObject, ETickableTickType NewTickType)"
  },
  {
    "label": "StartTicking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTicking()"
  },
  {
    "label": "FinishTicking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishTicking()"
  },
  {
    "label": "SimpleTickObjects()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SimpleTickObjects(FTickableStatics& Statics, TFunctionRef<void(FTickableObjectBase*)> TickFunc)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "GetStatics()",
    "kind": "Method",
    "detail": "Function (} ; class FTickableGameObject : public FTickableObjectBase { FTickableStatics&)",
    "insertText": "GetStatics()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_NONCOPYABLE(FTickableGameObject)"
  },
  {
    "label": "FTickableGameObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTickableGameObject()"
  },
  {
    "label": "IsTickableWhenPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableWhenPaused()"
  },
  {
    "label": "TickObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickObjects(UWorld* World, ELevelTick LevelTickType, bool bIsPaused, float DeltaSeconds)"
  }
]