[
  {
    "label": "MdlSyntax",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MdlSyntax"
  },
  {
    "label": "MX_GENMDL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENMDL_API"
  },
  {
    "label": "MdlSyntax()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_MDLSYNTAX_H # define MATERIALX_MDLSYNTAX_H # include<MaterialXGenMdl / Export . h> # include<MaterialXGenShader / Syntax . h> MATERIALX_NAMESPACE_BEGIN class MdlSyntax ; using MdlSyntaxPtr = shared_ptr<MdlSyntax> ; class MdlSyntax : public Syntax { public :)",
    "insertText": "MdlSyntax()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (SyntaxPtr)",
    "insertText": "create()"
  },
  {
    "label": "getConstantQualifier()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getConstantQualifier()"
  },
  {
    "label": "getArrayTypeSuffix()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getArrayTypeSuffix(const TypeDesc* type, const Value& value)"
  },
  {
    "label": "getArrayVariableSuffix()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "getArrayVariableSuffix(const TypeDesc*, const Value&)"
  },
  {
    "label": "remapEnumeration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "remapEnumeration(const string& value, const TypeDesc* type, const string& enumNames, std::pair<const TypeDesc*, ValuePtr>& result)"
  },
  {
    "label": "makeValidName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeValidName(string& name)"
  }
]