[
  {
    "label": "URegionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URegionType"
  },
  {
    "label": "URegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "URegion"
  },
  {
    "label": "uregion_getRegionFromCode()",
    "kind": "Method",
    "detail": "Function (# ifndef UREGION_H # define UREGION_H # include \" unicode / utypes . h \" # include \" unicode / uenum . h \" typedef enum URegionType { URGN_UNKNOWN,URGN_TERRITORY,URGN_WORLD,URGN_CONTINENT,URGN_SUBCONTINENT,URGN_GROUPING,URGN_DEPRECATED,# ifndef URGN_LIMIT # endif } URegionType ; # if ! UCONFIG_NO_FORMATTING struct URegion ; typedef struct URegion URegion ; U_STABLE const URegion* U_EXPORT2)",
    "insertText": "uregion_getRegionFromCode(const char *regionCode, UErrorCode *status)"
  },
  {
    "label": "uregion_getRegionFromNumericCode()",
    "kind": "Method",
    "detail": "Function (U_STABLE const URegion* U_EXPORT2)",
    "insertText": "uregion_getRegionFromNumericCode(int32_t code, UErrorCode *status)"
  },
  {
    "label": "uregion_getAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "uregion_getAvailable(URegionType type, UErrorCode *status)"
  },
  {
    "label": "uregion_areEqual()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregion_areEqual(const URegion* uregion, const URegion* otherRegion)"
  },
  {
    "label": "uregion_getContainingRegion()",
    "kind": "Method",
    "detail": "Function (U_STABLE const URegion* U_EXPORT2)",
    "insertText": "uregion_getContainingRegion(const URegion* uregion)"
  },
  {
    "label": "uregion_getContainingRegionOfType()",
    "kind": "Method",
    "detail": "Function (U_STABLE const URegion* U_EXPORT2)",
    "insertText": "uregion_getContainingRegionOfType(const URegion* uregion, URegionType type)"
  },
  {
    "label": "uregion_getContainedRegions()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "uregion_getContainedRegions(const URegion* uregion, UErrorCode *status)"
  },
  {
    "label": "uregion_getContainedRegionsOfType()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "uregion_getContainedRegionsOfType(const URegion* uregion, URegionType type, UErrorCode *status)"
  },
  {
    "label": "uregion_contains()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregion_contains(const URegion* uregion, const URegion* otherRegion)"
  },
  {
    "label": "uregion_getPreferredValues()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "uregion_getPreferredValues(const URegion* uregion, UErrorCode *status)"
  },
  {
    "label": "uregion_getRegionCode()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "uregion_getRegionCode(const URegion* uregion)"
  },
  {
    "label": "uregion_getNumericCode()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregion_getNumericCode(const URegion* uregion)"
  },
  {
    "label": "uregion_getType()",
    "kind": "Method",
    "detail": "Function (U_STABLE URegionType U_EXPORT2)",
    "insertText": "uregion_getType(const URegion* uregion)"
  }
]