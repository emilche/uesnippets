[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TSimpleGeometryParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimpleGeometryParticles"
  },
  {
    "label": "TSimpleGeometryParticles()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Particles . h \" # include \" Chaos / Rotation . h \" # include \" UObject / FortniteValkyrieBranchObjectVersion . h \" # include \" UObject / UE5ReleaseStreamObjectVersion . h \" namespace Chaos { template<class T,int d> class TSimpleGeometryParticles : public TParticles<T,d> { public : using TArrayCollection::Size ; using TParticles<T,d>::GetX ;)",
    "insertText": "TSimpleGeometryParticles() : TParticles<T, d>()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MR)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MGeometry)"
  },
  {
    "label": "TSimpleGeometryParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSimpleGeometryParticles(const TSimpleGeometryParticles<T, d>& Other)"
  },
  {
    "label": "TSimpleGeometryParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSimpleGeometryParticles(TSimpleGeometryParticles<T, d>&& Other) : TParticles<T, d>(MoveTemp(Other)) , MR(MoveTemp(Other.MR)) , MGeometry(MoveTemp(Other.MGeometry))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSimpleGeometryParticles&)",
    "insertText": "operator(const TSimpleGeometryParticles<T, d>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSimpleGeometryParticles&)",
    "insertText": "operator(TSimpleGeometryParticles<T, d>&& Other)"
  },
  {
    "label": "TSimpleGeometryParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSimpleGeometryParticles(TParticles<T, d>&& Other) : TParticles<T, d>(MoveTemp(Other))"
  },
  {
    "label": "TSimpleGeometryParticles()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TSimpleGeometryParticles()"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetR(const int32 Index, const TRotation<T, d>& InR)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MR [ Index ] = TRotation<FRealSingle,)",
    "insertText": "d(InR)"
  },
  {
    "label": "GetRf()",
    "kind": "Method",
    "detail": "Function (} const TRotation<FRealSingle,d>)",
    "insertText": "GetRf(const int32 Index)"
  },
  {
    "label": "GetR()",
    "kind": "Method",
    "detail": "Function (MR [ Index ] = InR ; } const TArrayCollectionArray<TRotation<FRealSingle,d>>&)",
    "insertText": "GetR()"
  },
  {
    "label": "SetGeometryImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometryImpl(Index, InGeometry)"
  },
  {
    "label": "GetAllGeometry()",
    "kind": "Method",
    "detail": "Function (} const TArray<FImplicitObjectPtr>&)",
    "insertText": "GetAllGeometry()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TParticles<T,d)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FFortniteValkyrieBranchObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArrayCollectionArray<TSerializablePtr<FImplicitObject>> LGeometry ; TArrayCollectionArray<TUniquePtr<Chaos::FImplicitObject>> LDynamicGeometry ; Ar<<LGeometry<<LDynamicGeometry ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (MGeometry .)",
    "insertText": "SetNumUninitialized(LGeometry.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 ImplicitIndex = 0 ;)",
    "insertText": "for(const TSerializablePtr<FImplicitObject>& ImplicitObjectPtr : LGeometry)"
  },
  {
    "label": "CopyGeometry()",
    "kind": "Method",
    "detail": "Function (MGeometry [ ImplicitIndex + + ] = ImplicitObjectPtr ->)",
    "insertText": "CopyGeometry()"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (} } } else { Ar<<MGeometry ; } Ar .)",
    "insertText": "UsingCustomVersion(FUE5ReleaseStreamObjectVersion::GUID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Ar<<MR ; } else { TArrayCollectionArray<TRotation<FReal,d>> RDouble ; RDouble .)",
    "insertText": "Resize(MR.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (RDouble [ Index ] = TRotation<FReal,)",
    "insertText": "d(MR[Index])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} Ar<<RDouble ; MR .)",
    "insertText": "Resize(RDouble.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MR [ Index ] = TRotation<FRealSingle,)",
    "insertText": "d(RDouble[Index])"
  },
  {
    "label": "SetGeometryImpl()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "SetGeometryImpl(const int32 Index, const FImplicitObjectPtr& InGeometry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MGeometry [ Index ] = InGeometry ; } private : TArrayCollectionArray<TRotation<FRealSingle,d>> MR ; TArrayCollectionArray<FImplicitObjectPtr> MGeometry ; } ; template<T,int d> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TSimpleGeometryParticles<T, d>& Particles)"
  }
]