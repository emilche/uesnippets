[
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "HourClockType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HourClockType"
  },
  {
    "label": "AmPmClockType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AmPmClockType"
  },
  {
    "label": "DurationFormatWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DurationFormatWidth"
  },
  {
    "label": "DateFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DateFormat"
  },
  {
    "label": "TimeFormatTimeOfDay()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatTimeOfDay(const Time& time)"
  },
  {
    "label": "TimeFormatTimeOfDayWithMilliseconds()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatTimeOfDayWithMilliseconds(\n    const Time& time)"
  },
  {
    "label": "TimeFormatTimeOfDayWithHourClockType()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatTimeOfDayWithHourClockType(\n    const Time& time,\n    HourClockType type,\n    AmPmClockType ampm)"
  },
  {
    "label": "TimeFormatShortDate()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatShortDate(const Time& time)"
  },
  {
    "label": "TimeFormatShortDateNumeric()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatShortDateNumeric(const Time& time)"
  },
  {
    "label": "TimeFormatShortDateAndTime()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatShortDateAndTime(const Time& time)"
  },
  {
    "label": "TimeFormatMonthAndYearForTimeZone()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatMonthAndYearForTimeZone(\n    const Time& time,\n    const icu::TimeZone* time_zone)"
  },
  {
    "label": "TimeFormatMonthAndYear()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatMonthAndYear(const Time& time)"
  },
  {
    "label": "TimeFormatShortDateAndTimeWithTimeZone()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatShortDateAndTimeWithTimeZone(\n    const Time& time)"
  },
  {
    "label": "TimeFormatFriendlyDateAndTime()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatFriendlyDateAndTime(const Time& time)"
  },
  {
    "label": "TimeFormatFriendlyDate()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatFriendlyDate(const Time& time)"
  },
  {
    "label": "TimeFormatWithPattern()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "TimeFormatWithPattern(const Time& time,\n                                                      const char* pattern)"
  },
  {
    "label": "TimeDurationFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeDurationFormat(\n    const TimeDelta time,\n    const DurationFormatWidth width,\n    std::u16string* out)"
  },
  {
    "label": "TimeDurationFormatWithSeconds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TimeDurationFormatWithSeconds(\n    const TimeDelta time,\n    const DurationFormatWidth width,\n    std::u16string* out)"
  },
  {
    "label": "DateIntervalFormat()",
    "kind": "Method",
    "detail": "Function (std::u16string)",
    "insertText": "DateIntervalFormat(const Time& begin_time,\n                                                   const Time& end_time,\n                                                   DateFormat format)"
  },
  {
    "label": "GetHourClockType()",
    "kind": "Method",
    "detail": "Function (HourClockType)",
    "insertText": "GetHourClockType()"
  }
]