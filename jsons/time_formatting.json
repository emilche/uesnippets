[
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "HourClockType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HourClockType"
  },
  {
    "label": "AmPmClockType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AmPmClockType"
  },
  {
    "label": "DurationFormatWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DurationFormatWidth"
  },
  {
    "label": "DateFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DateFormat"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_I18N_TIME_FORMATTING_H_ # define BASE_I18N_TIME_FORMATTING_H_ # include<string> # include \" base / i18n / base_i18n_export . h \" # include \" build / build_config . h \" # include \" build / chromeos_buildflags . h \" # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS_ASH)"
  },
  {
    "label": "TimeFormatTimeOfDay()",
    "kind": "Method",
    "detail": "Function (class Time ; class TimeDelta ; enum HourClockType { k12HourClock,k24HourClock,} ; enum AmPmClockType { kDropAmPm,kKeepAmPm,} ; enum DurationFormatWidth { DURATION_WIDTH_WIDE,DURATION_WIDTH_SHORT,DURATION_WIDTH_NARROW,DURATION_WIDTH_NUMERIC } ; enum DateFormat { DATE_FORMAT_YEAR_MONTH,DATE_FORMAT_MONTH_WEEKDAY_DAY,} ; BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatTimeOfDay(const Time& time)"
  },
  {
    "label": "TimeFormatTimeOfDayWithMilliseconds()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatTimeOfDayWithMilliseconds(const Time& time)"
  },
  {
    "label": "TimeFormatTimeOfDayWithHourClockType()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatTimeOfDayWithHourClockType(const Time& time, HourClockType type, AmPmClockType ampm)"
  },
  {
    "label": "TimeFormatShortDate()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatShortDate(const Time& time)"
  },
  {
    "label": "TimeFormatShortDateNumeric()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatShortDateNumeric(const Time& time)"
  },
  {
    "label": "TimeFormatShortDateAndTime()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatShortDateAndTime(const Time& time)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS_ASH) BASE_I18N_EXPORT std::u16string TimeFormatMonthAndYearForTimeZone( const Time& time, const icu::TimeZone* time_zone)"
  },
  {
    "label": "TimeFormatMonthAndYear()",
    "kind": "Method",
    "detail": "Function (# endif BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatMonthAndYear(const Time& time)"
  },
  {
    "label": "TimeFormatShortDateAndTimeWithTimeZone()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatShortDateAndTimeWithTimeZone(const Time& time)"
  },
  {
    "label": "TimeFormatFriendlyDateAndTime()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatFriendlyDateAndTime(const Time& time)"
  },
  {
    "label": "TimeFormatFriendlyDate()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatFriendlyDate(const Time& time)"
  },
  {
    "label": "TimeFormatWithPattern()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "TimeFormatWithPattern(const Time& time, const char* pattern)"
  },
  {
    "label": "TimeDurationFormat()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_I18N_EXPORT bool)",
    "insertText": "TimeDurationFormat(const TimeDelta time, const DurationFormatWidth width, std::u16string* out)"
  },
  {
    "label": "TimeDurationFormatWithSeconds()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_I18N_EXPORT bool)",
    "insertText": "TimeDurationFormatWithSeconds(const TimeDelta time, const DurationFormatWidth width, std::u16string* out)"
  },
  {
    "label": "DateIntervalFormat()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT std::u16string)",
    "insertText": "DateIntervalFormat(const Time& begin_time, const Time& end_time, DateFormat format)"
  },
  {
    "label": "GetHourClockType()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT HourClockType)",
    "insertText": "GetHourClockType()"
  }
]