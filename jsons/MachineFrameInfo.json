[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "TargetFrameLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetFrameLowering"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "BitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitVector"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "CalleeSavedInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CalleeSavedInfo"
  },
  {
    "label": "MachineFrameInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFrameInfo"
  },
  {
    "label": "StackObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StackObject"
  },
  {
    "label": "CalleeSavedInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEFRAMEINFO_H # define LLVM_CODEGEN_MACHINEFRAMEINFO_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<vector> namespace llvm { class raw_ostream ; class DataLayout ; class TargetRegisterClass ; class Type ; class MachineFunction ; class MachineBasicBlock ; class TargetFrameLowering ; class TargetMachine ; class BitVector ; class Value ; class AllocaInst ; class CalleeSavedInfo { unsigned Reg ; int FrameIdx ; public :)",
    "insertText": "CalleeSavedInfo(unsigned R, int FI = 0) : Reg(R), FrameIdx(FI)"
  },
  {
    "label": "getReg()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getReg()"
  },
  {
    "label": "StackObject()",
    "kind": "Method",
    "detail": "Function (FrameIdx = FI ; } } ; class MachineFrameInfo { struct StackObject { int64_t SPOffset ; uint64_t Size ; unsigned Alignment ; bool isImmutable ; bool isSpillSlot ; const AllocaInst* Alloca ; bool PreAllocated ; bool isAliased ;)",
    "insertText": "StackObject(uint64_t Sz, unsigned Al, int64_t SP, bool IM, bool isSS, const AllocaInst *Val, bool A) : SPOffset(SP), Size(Sz), Alignment(Al), isImmutable(IM), isSpillSlot(isSS), Alloca(Val), PreAllocated(false), isAliased(A)"
  },
  {
    "label": "MachineFrameInfo()",
    "kind": "Method",
    "detail": "Function (} } ; unsigned StackAlignment ; bool StackRealignable ; std::vector<StackObject> Objects ; unsigned NumFixedObjects ; bool HasVarSizedObjects ; bool FrameAddressTaken ; bool ReturnAddressTaken ; bool HasStackMap ; bool HasPatchPoint ; uint64_t StackSize ; int OffsetAdjustment ; unsigned MaxAlignment ; bool AdjustsStack ; bool HasCalls ; int StackProtectorIdx ; int FunctionContextIdx ; unsigned MaxCallFrameSize ; std::vector<CalleeSavedInfo> CSInfo ; bool CSIValid ; SmallVector<std::pair<int,int64_t>,3 2> LocalFrameObjects ; int64_t LocalFrameSize ; unsigned LocalFrameMaxAlign ; bool UseLocalStackAllocationBlock ; bool RealignOption ; bool HasOpaqueSPAdjustment ; bool HasVAStart ; bool HasMustTailInVarArgFunc ; bool HasTailCall ; MachineBasicBlock* Save ; MachineBasicBlock* Restore ; public :)",
    "insertText": "MachineFrameInfo(unsigned StackAlign, bool isStackRealign, bool RealignOpt) : StackAlignment(StackAlign), StackRealignable(isStackRealign), RealignOption(RealignOpt)"
  },
  {
    "label": "hasStackObjects()",
    "kind": "Method",
    "detail": "Function (StackSize = NumFixedObjects = OffsetAdjustment = MaxAlignment = 0 ; HasVarSizedObjects = false ; FrameAddressTaken = false ; ReturnAddressTaken = false ; HasStackMap = false ; HasPatchPoint = false ; AdjustsStack = false ; HasCalls = false ; StackProtectorIdx = - 1 ; FunctionContextIdx = - 1 ; MaxCallFrameSize = 0 ; CSIValid = false ; LocalFrameSize = 0 ; LocalFrameMaxAlign = 0 ; UseLocalStackAllocationBlock = false ; HasOpaqueSPAdjustment = false ; HasVAStart = false ; HasMustTailInVarArgFunc = false ; Save = nullptr ; Restore = nullptr ; HasTailCall = false ; } bool)",
    "insertText": "hasStackObjects()"
  },
  {
    "label": "hasVarSizedObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasVarSizedObjects()"
  },
  {
    "label": "getFunctionContextIndex()",
    "kind": "Method",
    "detail": "Function (StackProtectorIdx = I ; } int)",
    "insertText": "getFunctionContextIndex()"
  },
  {
    "label": "isFrameAddressTaken()",
    "kind": "Method",
    "detail": "Function (FunctionContextIdx = I ; } bool)",
    "insertText": "isFrameAddressTaken()"
  },
  {
    "label": "isReturnAddressTaken()",
    "kind": "Method",
    "detail": "Function (FrameAddressTaken = T ; } bool)",
    "insertText": "isReturnAddressTaken()"
  },
  {
    "label": "hasPatchPoint()",
    "kind": "Method",
    "detail": "Function (HasStackMap = s ; } bool)",
    "insertText": "hasPatchPoint()"
  },
  {
    "label": "getObjectIndexBegin()",
    "kind": "Method",
    "detail": "Function (HasPatchPoint = s ; } int)",
    "insertText": "getObjectIndexBegin()"
  },
  {
    "label": "getNumFixedObjects()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumFixedObjects()"
  },
  {
    "label": "mapLocalFrameObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mapLocalFrameObject(int ObjectIndex, int64_t Offset)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (LocalFrameObjects .)",
    "insertText": "push_back(std::pair<int, int64_t>(ObjectIndex, Offset))"
  },
  {
    "label": "getLocalFrameObjectMap()",
    "kind": "Method",
    "detail": "Function (Objects [ ObjectIndex + NumFixedObjects ] . PreAllocated = true ; } std::pair<int,int64_t>)",
    "insertText": "getLocalFrameObjectMap(int i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i >= 0 && (unsigned)i < LocalFrameObjects.size() && \"Invalid local object reference!\")"
  },
  {
    "label": "setLocalFrameSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLocalFrameSize(int64_t sz)"
  },
  {
    "label": "getLocalFrameSize()",
    "kind": "Method",
    "detail": "Function (LocalFrameSize = sz ; } int64_t)",
    "insertText": "getLocalFrameSize()"
  },
  {
    "label": "getLocalFrameMaxAlign()",
    "kind": "Method",
    "detail": "Function (LocalFrameMaxAlign = Align ; } unsigned)",
    "insertText": "getLocalFrameMaxAlign()"
  },
  {
    "label": "isObjectPreAllocated()",
    "kind": "Method",
    "detail": "Function (UseLocalStackAllocationBlock = v ; } bool)",
    "insertText": "isObjectPreAllocated(int ObjectIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(unsigned(ObjectIdx+NumFixedObjects) < Objects.size() && \"Invalid Object Idx!\")"
  },
  {
    "label": "getObjectAlignment()",
    "kind": "Method",
    "detail": "Function (Objects [ ObjectIdx + NumFixedObjects ] . Size = Size ; } unsigned)",
    "insertText": "getObjectAlignment(int ObjectIdx)"
  },
  {
    "label": "ensureMaxAlignment()",
    "kind": "Method",
    "detail": "Function (Objects [ ObjectIdx + NumFixedObjects ] . Alignment = Align ;)",
    "insertText": "ensureMaxAlignment(Align)"
  },
  {
    "label": "getObjectAllocation()",
    "kind": "Method",
    "detail": "Function (} const AllocaInst*)",
    "insertText": "getObjectAllocation(int ObjectIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isDeadObjectIndex(ObjectIdx) && \"Getting frame offset for a dead object?\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isDeadObjectIndex(ObjectIdx) && \"Setting frame offset for a dead object?\")"
  },
  {
    "label": "getStackSize()",
    "kind": "Method",
    "detail": "Function (Objects [ ObjectIdx + NumFixedObjects ] . SPOffset = SPOffset ; } uint64_t)",
    "insertText": "getStackSize()"
  },
  {
    "label": "estimateStackSize()",
    "kind": "Method",
    "detail": "Function (StackSize = Size ; } unsigned)",
    "insertText": "estimateStackSize(const MachineFunction &MF)"
  },
  {
    "label": "getOffsetAdjustment()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getOffsetAdjustment()"
  },
  {
    "label": "getMaxAlignment()",
    "kind": "Method",
    "detail": "Function (OffsetAdjustment = Adj ; } unsigned)",
    "insertText": "getMaxAlignment()"
  },
  {
    "label": "adjustsStack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "adjustsStack()"
  },
  {
    "label": "hasCalls()",
    "kind": "Method",
    "detail": "Function (AdjustsStack = V ; } bool)",
    "insertText": "hasCalls()"
  },
  {
    "label": "hasOpaqueSPAdjustment()",
    "kind": "Method",
    "detail": "Function (HasCalls = V ; } bool)",
    "insertText": "hasOpaqueSPAdjustment()"
  },
  {
    "label": "hasVAStart()",
    "kind": "Method",
    "detail": "Function (HasOpaqueSPAdjustment = B ; } bool)",
    "insertText": "hasVAStart()"
  },
  {
    "label": "hasMustTailInVarArgFunc()",
    "kind": "Method",
    "detail": "Function (HasVAStart = B ; } bool)",
    "insertText": "hasMustTailInVarArgFunc()"
  },
  {
    "label": "hasTailCall()",
    "kind": "Method",
    "detail": "Function (HasMustTailInVarArgFunc = B ; } bool)",
    "insertText": "hasTailCall()"
  },
  {
    "label": "getMaxCallFrameSize()",
    "kind": "Method",
    "detail": "Function (HasTailCall = true ; } unsigned)",
    "insertText": "getMaxCallFrameSize()"
  },
  {
    "label": "CreateFixedObject()",
    "kind": "Method",
    "detail": "Function (MaxCallFrameSize = S ; } int)",
    "insertText": "CreateFixedObject(uint64_t Size, int64_t SPOffset, bool Immutable, bool isAliased = false)"
  },
  {
    "label": "CreateFixedSpillStackObject()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CreateFixedSpillStackObject(uint64_t Size, int64_t SPOffset)"
  },
  {
    "label": "isFixedObjectIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFixedObjectIndex(int ObjectIdx)"
  },
  {
    "label": "isAliasedObjectIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAliasedObjectIndex(int ObjectIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(unsigned(ObjectIdx + NumFixedObjects) < Objects.size() && \"Invalid Object Idx!\")"
  },
  {
    "label": "CreateSpillStackObject()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CreateSpillStackObject(uint64_t Size, unsigned Alignment)"
  },
  {
    "label": "RemoveStackObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStackObject(int ObjectIdx)"
  },
  {
    "label": "CreateVariableSizedObject()",
    "kind": "Method",
    "detail": "Function (Objects [ ObjectIdx + NumFixedObjects ] . Size = ~ 0 ULL ; } int)",
    "insertText": "CreateVariableSizedObject(unsigned Alignment, const AllocaInst *Alloca)"
  },
  {
    "label": "getCalleeSavedInfo()",
    "kind": "Method",
    "detail": "Function (const std::vector<CalleeSavedInfo>&)",
    "insertText": "getCalleeSavedInfo()"
  },
  {
    "label": "isCalleeSavedInfoValid()",
    "kind": "Method",
    "detail": "Function (CSInfo = CSI ; } bool)",
    "insertText": "isCalleeSavedInfoValid()"
  },
  {
    "label": "getSavePoint()",
    "kind": "Method",
    "detail": "Function (CSIValid = v ; } MachineBasicBlock*)",
    "insertText": "getSavePoint()"
  },
  {
    "label": "getRestorePoint()",
    "kind": "Method",
    "detail": "Function (Save = NewSave ; } MachineBasicBlock*)",
    "insertText": "getRestorePoint()"
  },
  {
    "label": "getPristineRegs()",
    "kind": "Method",
    "detail": "Function (Restore = NewRestore ; } BitVector)",
    "insertText": "getPristineRegs(const MachineFunction &MF)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(const MachineFunction &MF, raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump(const MachineFunction &MF)"
  }
]