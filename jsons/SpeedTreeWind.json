[
  {
    "label": "rewritten",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rewritten"
  },
  {
    "label": "FSpeedTreeWind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpeedTreeWind"
  },
  {
    "label": "FSpeedTreeWind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpeedTreeWind"
  },
  {
    "label": "Constants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Constants"
  },
  {
    "label": "EOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOptions"
  },
  {
    "label": "EShaderValues",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderValues"
  },
  {
    "label": "EOscillationComponents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOscillationComponents"
  },
  {
    "label": "SBranchWindLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBranchWindLevel"
  },
  {
    "label": "SWindGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SWindGroup"
  },
  {
    "label": "SParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SParams"
  },
  {
    "label": "SBranchWindLevel()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "SBranchWindLevel()"
  },
  {
    "label": "SWindGroup()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "SWindGroup()"
  },
  {
    "label": "SParams()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "SParams()"
  },
  {
    "label": "FSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSpeedTreeWind()"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParams(const FSpeedTreeWind::SParams& sParams)"
  },
  {
    "label": "SetStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStrength(float fStrength)"
  },
  {
    "label": "SetDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirection(const FVector& vDir)"
  },
  {
    "label": "SetGustMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustMin(float InGustMin)"
  },
  {
    "label": "SetGustMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustMax(float InGustMax)"
  },
  {
    "label": "SetInitDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitDirection(const FVector& vDir)"
  },
  {
    "label": "EnableGusting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGusting(bool bEnabled)"
  },
  {
    "label": "SetGustFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustFrequency(float fGustFreq)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(float fScalar)"
  },
  {
    "label": "SetTreeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeValues(const FVector& vBranchAnchor, float fMaxBranchLength)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(EOptions eOption, bool bState)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(bool bEnabled, double fTime)"
  },
  {
    "label": "Gust()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Gust(double fTime)"
  },
  {
    "label": "LinearSigmoid()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LinearSigmoid(float fInput, float fLinearness)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Interpolate(float fA, float fB, float fAmt)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(float* pVector)"
  },
  {
    "label": "ComputeWindAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeWindAnchor(float* pPos)"
  }
]