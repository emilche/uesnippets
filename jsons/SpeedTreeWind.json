[
  {
    "label": "FSpeedTreeWind",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpeedTreeWind"
  },
  {
    "label": "Constants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Constants"
  },
  {
    "label": "EOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOptions"
  },
  {
    "label": "EShaderValues",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderValues"
  },
  {
    "label": "EOscillationComponents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOscillationComponents"
  },
  {
    "label": "SBranchWindLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBranchWindLevel"
  },
  {
    "label": "SWindGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SWindGroup"
  },
  {
    "label": "SParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SParams"
  },
  {
    "label": "SBranchWindLevel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" UniformBuffer . h \" class FSpeedTreeWind { public : enum Constants { NUM_WIND_POINTS_IN_CURVE = 1 0,NUM_BRANCH_LEVELS = 2,NUM_LEAF_GROUPS = 2 } ; enum EOptions { GLOBAL_WIND,GLOBAL_PRESERVE_SHAPE,BRANCH_SIMPLE_1,BRANCH_DIRECTIONAL_1,BRANCH_DIRECTIONAL_FROND_1,BRANCH_TURBULENCE_1,BRANCH_WHIP_1,BRANCH_OSC_COMPLEX_1,BRANCH_SIMPLE_2,BRANCH_DIRECTIONAL_2,BRANCH_DIRECTIONAL_FROND_2,BRANCH_TURBULENCE_2,BRANCH_WHIP_2,BRANCH_OSC_COMPLEX_2,LEAF_RIPPLE_VERTEX_NORMAL_1,LEAF_RIPPLE_COMPUTED_1,LEAF_TUMBLE_1,LEAF_TWITCH_1,LEAF_OCCLUSION_1,LEAF_RIPPLE_VERTEX_NORMAL_2,LEAF_RIPPLE_COMPUTED_2,LEAF_TUMBLE_2,LEAF_TWITCH_2,LEAF_OCCLUSION_2,FROND_RIPPLE_ONE_SIDED,FROND_RIPPLE_TWO_SIDED,FROND_RIPPLE_ADJUST_LIGHTING,ROLLING,NUM_WIND_OPTIONS } ; enum EShaderValues { SH_WIND_DIR_X,SH_WIND_DIR_Y,SH_WIND_DIR_Z,SH_GENERAL_STRENGTH,SH_GLOBAL_TIME,SH_GLOBAL_DISTANCE,SH_GLOBAL_HEIGHT,SH_GLOBAL_HEIGHT_EXPONENT,SH_BRANCH_1_TIME,SH_BRANCH_1_DISTANCE,SH_BRANCH_2_TIME,SH_BRANCH_2_DISTANCE,SH_BRANCH_1_TWITCH,SH_BRANCH_1_TWITCH_FREQ_SCALE,SH_BRANCH_2_TWITCH,SH_BRANCH_2_TWITCH_FREQ_SCALE,SH_BRANCH_1_WHIP,SH_BRANCH_2_WHIP,SH_WIND_PACK0,SH_WIND_PACK1,SH_WIND_ANCHOR_X,SH_WIND_ANCHOR_Y,SH_WIND_ANCHOR_Z,SH_WIND_PACK2,SH_GLOBAL_DIRECTION_ADHERENCE,SH_BRANCH_1_DIRECTION_ADHERENCE,SH_BRANCH_2_DIRECTION_ADHERENCE,SH_WIND_PACK5,SH_BRANCH_1_TURBULENCE,SH_BRANCH_2_TURBULENCE,SH_WIND_PACK6,SH_WIND_PACK7,SH_LEAF_1_RIPPLE_TIME,SH_LEAF_1_RIPPLE_DISTANCE,SH_LEAF_1_LEEWARD_SCALAR,SH_WIND_PACK8,SH_LEAF_1_TUMBLE_TIME,SH_LEAF_1_TUMBLE_FLIP,SH_LEAF_1_TUMBLE_TWIST,SH_LEAF_1_TUMBLE_DIRECTION_ADHERENCE,SH_LEAF_1_TWITCH_THROW,SH_LEAF_1_TWITCH_SHARPNESS,SH_LEAF_1_TWITCH_TIME,SH_WIND_PACK9,SH_LEAF_2_RIPPLE_TIME,SH_LEAF_2_RIPPLE_DISTANCE,SH_LEAF_2_LEEWARD_SCALAR,SH_WIND_PACK10,SH_LEAF_2_TUMBLE_TIME,SH_LEAF_2_TUMBLE_FLIP,SH_LEAF_2_TUMBLE_TWIST,SH_LEAF_2_TUMBLE_DIRECTION_ADHERENCE,SH_LEAF_2_TWITCH_THROW,SH_LEAF_2_TWITCH_SHARPNESS,SH_LEAF_2_TWITCH_TIME,SH_WIND_PACK11,SH_FROND_RIPPLE_TIME,SH_FROND_RIPPLE_DISTANCE,SH_FROND_RIPPLE_TILE,SH_FROND_RIPPLE_LIGHTING_SCALAR,SH_ROLLING_BRANCH_FIELD_MIN,SH_ROLLING_BRANCH_LIGHTING_ADJUST,SH_ROLLING_BRANCH_VERTICAL_OFFSET,SH_WIND_PACK12,SH_ROLLING_LEAF_RIPPLE_MIN,SH_ROLLING_LEAF_TUMBLE_MIN,SH_ROLLING_X,SH_ROLLING_Y,SH_ROLLING_NOISE_PERIOD,SH_ROLLING_NOISE_SIZE,SH_ROLLING_NOISE_TURBULENCE,SH_ROLLING_NOISE_TWIST,NUM_SHADER_VALUES } ; enum EOscillationComponents { OSC_GLOBAL,OSC_BRANCH_1,OSC_BRANCH_2,OSC_LEAF_1_RIPPLE,OSC_LEAF_1_TUMBLE,OSC_LEAF_1_TWITCH,OSC_LEAF_2_RIPPLE,OSC_LEAF_2_TUMBLE,OSC_LEAF_2_TWITCH,OSC_FROND_RIPPLE,NUM_OSC_COMPONENTS } ; struct SBranchWindLevel {)",
    "insertText": "SBranchWindLevel()"
  },
  {
    "label": "SWindGroup()",
    "kind": "Method",
    "detail": "Function (float m_afDistance [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afDirectionAdherence [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afWhip [ NUM_WIND_POINTS_IN_CURVE ] ; float m_fTurbulence ; float m_fTwitch ; float m_fTwitchFreqScale ; } ; struct SWindGroup {)",
    "insertText": "SWindGroup()"
  },
  {
    "label": "SParams()",
    "kind": "Method",
    "detail": "Function (float m_afRippleDistance [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afTumbleFlip [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afTumbleTwist [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afTumbleDirectionAdherence [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afTwitchThrow [ NUM_WIND_POINTS_IN_CURVE ] ; float m_fTwitchSharpness ; float m_fRollMaxScale ; float m_fRollMinScale ; float m_fRollSpeed ; float m_fRollSeparation ; float m_fLeewardScalar ; } ; struct SParams {)",
    "insertText": "SParams()"
  },
  {
    "label": "FSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (float m_fStrengthResponse ; float m_fDirectionResponse ; float m_fAnchorOffset ; float m_fAnchorDistanceScale ; float m_afFrequencies [ NUM_OSC_COMPONENTS ] [ NUM_WIND_POINTS_IN_CURVE ] ; float m_fGlobalHeight ; float m_fGlobalHeightExponent ; float m_afGlobalDistance [ NUM_WIND_POINTS_IN_CURVE ] ; float m_afGlobalDirectionAdherence [ NUM_WIND_POINTS_IN_CURVE ] ; SBranchWindLevel m_asBranch [ NUM_BRANCH_LEVELS ] ; SWindGroup m_asLeaf [ NUM_LEAF_GROUPS ] ; float m_afFrondRippleDistance [ NUM_WIND_POINTS_IN_CURVE ] ; float m_fFrondRippleTile ; float m_fFrondRippleLightingScalar ; float m_fRollingNoiseSize ; float m_fRollingNoiseTwist ; float m_fRollingNoiseTurbulence ; float m_fRollingNoisePeriod ; float m_fRollingNoiseSpeed ; float m_fRollingBranchFieldMin ; float m_fRollingBranchLightingAdjust ; float m_fRollingBranchVerticalOffset ; float m_fRollingLeafRippleMin ; float m_fRollingLeafTumbleMin ; float m_fGustFrequency ; float m_fGustStrengthMin ; float m_fGustStrengthMax ; float m_fGustDurationMin ; float m_fGustDurationMax ; float m_fGustRiseScalar ; float m_fGustFallScalar ; } ;)",
    "insertText": "FSpeedTreeWind()"
  },
  {
    "label": "SetParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParams(const FSpeedTreeWind::SParams& sParams)"
  },
  {
    "label": "GetParams()",
    "kind": "Method",
    "detail": "Function (const FSpeedTreeWind::SParams&)",
    "insertText": "GetParams(void)"
  },
  {
    "label": "SetStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStrength(float fStrength)"
  },
  {
    "label": "SetDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirection(const FVector& vDir)"
  },
  {
    "label": "SetGustMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustMin(float InGustMin)"
  },
  {
    "label": "SetGustMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustMax(float InGustMax)"
  },
  {
    "label": "SetInitDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitDirection(const FVector& vDir)"
  },
  {
    "label": "EnableGusting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGusting(bool bEnabled)"
  },
  {
    "label": "SetGustFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGustFrequency(float fGustFreq)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(float fScalar)"
  },
  {
    "label": "SetTreeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeValues(const FVector& vBranchAnchor, float fMaxBranchLength)"
  },
  {
    "label": "GetBranchAnchor()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetBranchAnchor(void)"
  },
  {
    "label": "GetMaxBranchLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxBranchLength(void)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOption(EOptions eOption, bool bState)"
  },
  {
    "label": "IsOptionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOptionEnabled(EOptions eOption)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(bool bEnabled, double fTime)"
  },
  {
    "label": "GetShaderTable()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetShaderTable(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSpeedTreeWind& Wind)"
  },
  {
    "label": "SetNeedsReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeedsReload(bool bReload = true)"
  },
  {
    "label": "NeedsReload()",
    "kind": "Method",
    "detail": "Function (m_bNeedsReload = bReload ; } bool)",
    "insertText": "NeedsReload(void)"
  },
  {
    "label": "RandomFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "RandomFloat(float fMin, float fMax)"
  },
  {
    "label": "LinearSigmoid()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LinearSigmoid(float fInput, float fLinearness)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Interpolate(float fA, float fB, float fAmt)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize(float* pVector)"
  },
  {
    "label": "ComputeWindAnchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeWindAnchor(float* pPos)"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (protected : SParams m_sParams ; float m_fStrength ; float m_afDirection [ 3 ] ; double m_fLastTime ; double m_fElapsedTime ; bool m_bGustingEnabled ; float m_fGust ; double m_fGustTarget ; double m_fGustRiseTarget ; double m_fGustFallTarget ; double m_fGustStart ; double m_fGustAtStart ; double m_fGustFallStart ; float m_fStrengthTarget ; double m_fStrengthChangeStartTime ; double m_fStrengthChangeEndTime ; float m_fStrengthAtStart ; float m_afDirectionTarget [ 3 ] ; float m_afDirectionMidTarget [ 3 ] ; double m_fDirectionChangeStartTime ; double m_fDirectionChangeEndTime ; float m_afDirectionAtStart [ 3 ] ; float m_afRollingOffset [ 2 ] ; float m_fCombinedStrength ; float m_afOscillationTimes [ NUM_OSC_COMPONENTS ] ; bool m_abOptions [ NUM_WIND_OPTIONS ] ; float m_afBranchWindAnchor [ 3 ] ; float m_fMaxBranchLevel1Length ; bool m_bNeedsReload ;)",
    "insertText": "MS_ALIGN(16) float m_afShaderTable[NUM_SHADER_VALUES * 2] GCC_ALIGN(16)"
  }
]