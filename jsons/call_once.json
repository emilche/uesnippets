[
  {
    "label": "once_flag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "once_flag"
  },
  {
    "label": "SchedulingHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedulingHelper"
  },
  {
    "label": "ControlWord()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_CALL_ONCE_H_ # define ABSL_BASE_CALL_ONCE_H_ # include<algorithm> # include<atomic> # include<cstdint> # include<type_traits> # include<utility> # include \" absl / base / internal / invoke . h \" # include \" absl / base / internal / low_level_scheduling . h \" # include \" absl / base / internal / raw_logging . h \" # include \" absl / base / internal / scheduling_mode . h \" # include \" absl / base / internal / spinlock_wait . h \" # include \" absl / base / macros . h \" # include \" absl / base / optimization . h \" # include \" absl / base / port . h \" namespace absl { ABSL_NAMESPACE_BEGIN class once_flag ; namespace base_internal { std::atomic<uint32_t>*)",
    "insertText": "ControlWord(absl::once_flag* flag)"
  },
  {
    "label": "call_once()",
    "kind": "Method",
    "detail": "Function (} template<Callable,. . . Args> void)",
    "insertText": "call_once(absl::once_flag& flag, Callable&& fn, Args&&... args)"
  },
  {
    "label": "once_flag()",
    "kind": "Method",
    "detail": "Function (class once_flag { public :)",
    "insertText": "once_flag() : control_(0)"
  },
  {
    "label": "once_flag()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "once_flag(const once_flag&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (once_flag&)",
    "insertText": "operator(const once_flag&)"
  },
  {
    "label": "ControlWord()",
    "kind": "Method",
    "detail": "Function (private : std::atomic<uint32_t>*)",
    "insertText": "ControlWord(once_flag* flag)"
  },
  {
    "label": "LowLevelCallOnce()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint32_t> control_ ; } ; namespace base_internal { template<Callable,. . . Args> void)",
    "insertText": "LowLevelCallOnce(absl::once_flag* flag, Callable&& fn, Args&&... args)"
  },
  {
    "label": "SchedulingHelper()",
    "kind": "Method",
    "detail": "Function (class SchedulingHelper { public :)",
    "insertText": "SchedulingHelper(base_internal::SchedulingMode mode) : mode_(mode)"
  },
  {
    "label": "DisableRescheduling()",
    "kind": "Method",
    "detail": "Function (guard_result_ = base_internal::)",
    "insertText": "DisableRescheduling()"
  },
  {
    "label": "SchedulingHelper()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "SchedulingHelper()"
  },
  {
    "label": "EnableRescheduling()",
    "kind": "Method",
    "detail": "Function (base_internal::)",
    "insertText": "EnableRescheduling(guard_result_)"
  },
  {
    "label": "CallOnceImpl()",
    "kind": "Method",
    "detail": "Function (} } private : base_internal::SchedulingMode mode_ ; bool guard_result_ ; } ; enum { kOnceInit = 0,kOnceRunning = 0 x65C2937B,kOnceWaiter = 0 x05A308D2,kOnceDone = 2 2 1,} ; template<Callable,. . . Args> ABSL_ATTRIBUTE_NOINLINE void)",
    "insertText": "CallOnceImpl(std::atomic<uint32_t>* control, base_internal::SchedulingMode scheduling_mode, Callable&& fn, Args&&... args)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG { uint32_t old_control = control ->)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "ABSL_RAW_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_RAW_LOG(FATAL, \"Unexpected value for control word: 0x%lx\", static_cast<unsigned long>(old_control))"
  },
  {
    "label": "maybe_disable_scheduling()",
    "kind": "Method",
    "detail": "Function (} } # endif const base_internal::SpinLockWaitTransition trans [ ] = { { kOnceInit,kOnceRunning,true },{ kOnceRunning,kOnceWaiter,false },{ kOnceDone,kOnceDone,true } } ; base_internal::SchedulingHelper)",
    "insertText": "maybe_disable_scheduling(scheduling_mode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t old_control = kOnceInit ;)",
    "insertText": "if(control->compare_exchange_strong(old_control, kOnceRunning, std::memory_order_relaxed) || base_internal::SpinLockWait(control, ABSL_ARRAYSIZE(trans), trans, scheduling_mode) == kOnceInit)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invoke(std::forward<Callable>(fn), std::forward<Args>(args)...)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (old_control = control ->)",
    "insertText": "exchange(base_internal::kOnceDone, std::memory_order_release)"
  },
  {
    "label": "SpinLockWake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpinLockWake(control, true)"
  },
  {
    "label": "ControlWord()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint32_t>* once =)",
    "insertText": "ControlWord(flag)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32_t s = once ->)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "CallOnceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallOnceImpl(once, base_internal::SCHEDULE_KERNEL_ONLY, std::forward<Callable>(fn), std::forward<Args>(args)...)"
  },
  {
    "label": "ControlWord()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint32_t>* once =)",
    "insertText": "ControlWord(&flag)"
  },
  {
    "label": "CallOnceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallOnceImpl(once, base_internal::SCHEDULE_COOPERATIVE_AND_KERNEL, std::forward<Callable>(fn), std::forward<Args>(args)...)"
  }
]