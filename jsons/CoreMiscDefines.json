[
  {
    "label": "EForceInit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EForceInit"
  },
  {
    "label": "ENoInit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENoInit"
  },
  {
    "label": "EInPlace",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInPlace"
  },
  {
    "label": "EPerElement",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPerElement"
  },
  {
    "label": "TStaticDeprecateExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStaticDeprecateExpression"
  },
  {
    "label": "PREPROCESSOR_JOIN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PREPROCESSOR_JOIN"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPlatformUserId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformUserId"
  },
  {
    "label": "FInputDeviceId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceId"
  },
  {
    "label": "FPlatformInputDeviceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformInputDeviceState"
  },
  {
    "label": "WARNING_LOCATION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" HAL / PreprocessorHelpers . h \" # define)",
    "insertText": "WARNING_LOCATION(Line) __FILE__ \"(\" PREPROCESSOR_TO_STRING(Line) \")\" #ifndef RC_INVOKED #define PLAYWORLD_PACKAGE_PREFIX TEXT(\"UEDPIE\") #ifndef WITH_EDITORONLY_DATA #if !PLATFORM_CAN_SUPPORT_EDITORONLY_DATA || UE_SERVER || PLATFORM_IOS #define WITH_EDITORONLY_DATA 0 #else #define WITH_EDITORONLY_DATA 1 #endif #endif #ifndef WITH_METADATA #define WITH_METADATA WITH_EDITORONLY_DATA #elif WITH_EDITORONLY_DATA && !WITH_METADATA #error WITH_EDITORONLY_DATA=1 requires WITH_METADATA=1 #endif #ifndef UE_CHECK_DISABLE_OPTIMIZATION #define UE_CHECK_DISABLE_OPTIMIZATION 0 #endif #define UE_DISABLE_OPTIMIZATION_SHIP PRAGMA_DISABLE_OPTIMIZATION_ACTUAL #if UE_BUILD_DEBUG #define UE_ENABLE_OPTIMIZATION_SHIP PRAGMA_DISABLE_OPTIMIZATION_ACTUAL #else #define UE_ENABLE_OPTIMIZATION_SHIP PRAGMA_ENABLE_OPTIMIZATION_ACTUAL #endif #if UE_CHECK_DISABLE_OPTIMIZATION #define UE_DISABLE_OPTIMIZATION static_assert(false, \"Error UE_DISABLE_OPTIMIZATION submitted. Use UE_DISABLE_OPTIMIZATION_SHIP to submit with optimizations off.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# define UE_ENABLE_OPTIMIZATION)",
    "insertText": "static_assert(false, \"Error UE_ENABLE_OPTIMIZATION submitted. Use UE_ENABLE_OPTIMIZATION_SHIP to submit with optimizations off.\")"
  },
  {
    "label": "UE_DEPRECATED_MACRO()",
    "kind": "Method",
    "detail": "Function (# else # define UE_DISABLE_OPTIMIZATION UE_DISABLE_OPTIMIZATION_SHIP # define UE_ENABLE_OPTIMIZATION UE_ENABLE_OPTIMIZATION_SHIP # endif # define PRAGMA_DISABLE_OPTIMIZATION \\)",
    "insertText": "UE_DEPRECATED_MACRO(5.2, \"PRAGMA_DISABLE_OPTIMIZATION has been deprecated. Use UE_DISABLE_OPTIMIZATION for temporary development or UE_DISABLE_OPTIMIZATION_SHIP to submit\") \\ UE_DISABLE_OPTIMIZATION_SHIP #define PRAGMA_ENABLE_OPTIMIZATION \\ UE_DEPRECATED_MACRO(5.2, \"PRAGMA_ENABLE_OPTIMIZATION has been deprecated. Use UE_ENABLE_OPTIMIZATION for temporary development or UE_ENABLE_OPTIMIZATION_SHIP to submit\") \\ UE_ENABLE_OPTIMIZATION_SHIP #if UE_BUILD_DEBUG #define FORCEINLINE_DEBUGGABLE FORCEINLINE_DEBUGGABLE_ACTUAL #else #define FORCEINLINE_DEBUGGABLE FORCEINLINE #endif #if STATS #define CLOCK_CYCLES(Timer)"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (Timer - =)",
    "insertText": "Cycles()"
  },
  {
    "label": "UNCLOCK_CYCLES()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "UNCLOCK_CYCLES(Timer)"
  },
  {
    "label": "CLOCK_CYCLES()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "CLOCK_CYCLES(Timer) #define UNCLOCK_CYCLES(Timer) #endif #define SHUTDOWN_IF_EXIT_REQUESTED #define RETURN_IF_EXIT_REQUESTED #define RETURN_VAL_IF_EXIT_REQUESTED(x) #if CHECK_PUREVIRTUALS #define PURE_VIRTUAL(func,...)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "PURE_VIRTUAL(func,...)"
  },
  {
    "label": "LowLevelFatalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelFatalError(TEXT(\"Pure virtual not implemented (%s)\"), TEXT(#func))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (__VA_ARGS__ } # endif # ifndef USING_CODE_ANALYSIS # define USING_CODE_ANALYSIS 0 # endif # if USING_CODE_ANALYSIS # if !)",
    "insertText": "defined(CA_IN ) || !defined( CA_OUT ) || !defined( CA_READ_ONLY ) || !defined( CA_WRITE_ONLY ) || !defined( CA_VALID_POINTER ) || !defined( CA_CHECK_RETVAL ) || !defined( CA_NO_RETURN ) || !defined( CA_SUPPRESS ) || !defined( CA_ASSUME ) #error Code analysis macros are not configured correctly for this platform #endif #else #define CA_IN #define CA_OUT #define CA_READ_ONLY #define CA_WRITE_ONLY #define CA_VALID_POINTER #define CA_CHECK_RETVAL #define CA_NO_RETURN #define CA_SUPPRESS( WarningNumber ) #define CA_ASSUME( Expr ) #define CA_CONSTANT_IF(Condition) if (Condition) #endif #ifndef USING_THREAD_SANITISER #define USING_THREAD_SANITISER 0 #endif #if USING_THREAD_SANITISER #if !defined( TSAN_SAFE ) || !defined( TSAN_BEFORE ) || !defined( TSAN_AFTER ) || !defined( TSAN_ATOMIC ) #error Thread Sanitiser macros are not configured correctly for this platform #endif #else #define TSAN_SAFE #define TSAN_BEFORE(Addr) #define TSAN_AFTER(Addr) #define TSAN_ATOMIC(Type)"
  },
  {
    "label": "UE_PUSH_MACRO()",
    "kind": "Method",
    "detail": "Function (INDEX_NONE = - 1 } ; enum { UNICODE_BOM = 0 xfeff } ; enum EForceInit { ForceInit,ForceInitToZero } ; enum ENoInit { NoInit } ; enum EInPlace { InPlace } ; enum EPerElement { PerElement } ; # endif # ifdef __clang__ # define)",
    "insertText": "UE_PUSH_MACRO(name) _Pragma(PREPROCESSOR_TO_STRING(push_macro(name))) #define UE_POP_MACRO(name) _Pragma(PREPROCESSOR_TO_STRING(pop_macro(name))) #else #define UE_PUSH_MACRO(name) __pragma(push_macro(name)) #define UE_POP_MACRO(name) __pragma(pop_macro(name)) #endif #ifdef __COUNTER__ #define ANONYMOUS_VARIABLE( Name ) PREPROCESSOR_JOIN(Name, __COUNTER__) #else #define ANONYMOUS_VARIABLE( Name ) PREPROCESSOR_JOIN(Name, __LINE__) #endif #define UE_CALL_ONCE(Func, ...) static int32 ANONYMOUS_VARIABLE(ThreadSafeOnce) = ((Func)(__VA_ARGS__), 1) #if defined (__INTELLISENSE__) #define UE_DEPRECATED(Version, Message) #else #define UE_DEPRECATED(Version, Message) [[deprecated(Message \" Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.\")]] #endif #ifndef UE_DEPRECATED_FORGAME #define UE_DEPRECATED_FORGAME PREPROCESSOR_NOTHING_FUNCTION #endif #ifndef UE_DEPRECATED_FORENGINE #define UE_DEPRECATED_FORENGINE UE_DEPRECATED #endif #if UE_VALIDATE_INTERNAL_API #define UE_INTERNAL [[deprecated(\"Please remove usage of this internal API before upgrading to the next release, otherwise your project will no longer compile.\")]] #else #define UE_INTERNAL #endif #if defined(UE_DIRECT_HEADER_COMPILE) #define UE_DEPRECATED_HEADER(Version, Message) #elif defined(_MSC_VER) #if UE_WARNINGS_AS_ERRORS #define UE_DEPRECATED_HEADER(Version, Message) __pragma(message(__FILE__ \"(\" PREPROCESSOR_TO_STRING(__LINE__) \"): error C4996: \" Message \" Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.\")) #else #define UE_DEPRECATED_HEADER(Version, Message) __pragma(message(__FILE__ \"(\" PREPROCESSOR_TO_STRING(__LINE__) \"): warning C4996: \" Message \" Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.\")) #endif #else #define UE_DEPRECATED_HEADER(Version, Message) _Pragma(PREPROCESSOR_TO_STRING(message(Message \" Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.\")))"
  },
  {
    "label": "UE_STATIC_DEPRECATE()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "UE_STATIC_DEPRECATE(Version, bExpression, Message) \\ struct PREPROCESSOR_JOIN(FDeprecationMsg_, __LINE__)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (\\ [ [)",
    "insertText": "deprecated(Message \" Please update your code to the new API before upgrading to the next release, otherwise your project will no longer compile.\")]] \\ static constexpr int condition(TStaticDeprecateExpression<true>)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "PREPROCESSOR_JOIN(FDeprecationMsg_, __LINE__)::condition(TStaticDeprecateExpression<!!(bExpression)>()) } #define UE_STATIC_ASSERT_WARN(bExpression, Message) \\ struct PREPROCESSOR_JOIN(FStaticWarningMsg_, __LINE__)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (\\ [ [)",
    "insertText": "deprecated(Message)]] \\ static constexpr int condition(TStaticDeprecateExpression<true>)"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "PREPROCESSOR_JOIN(FStaticWarningMsg_, __LINE__)::condition(TStaticDeprecateExpression<!(bExpression)>()) } #define UE_PTRDIFF_TO_INT32(argument) static_cast<int32>(argument) #define UE_PTRDIFF_TO_UINT32(argument) static_cast<uint32>(argument) #define UE_NONCOPYABLE(TypeName) \\ TypeName(TypeName&&)"
  },
  {
    "label": "TypeName()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TypeName(const TypeName&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\&)",
    "insertText": "operator(const TypeName&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\&)",
    "insertText": "operator(TypeName&&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (struct FPlatformUserId { bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPlatformUserId IdToReturn ; IdToReturn . InternalId = InInternalId ; return IdToReturn ; } bool)",
    "insertText": "operator(const FPlatformUserId& Other)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FInputDeviceId IdToReturn ; IdToReturn . InternalId = InInternalId ; return IdToReturn ; } int32)",
    "insertText": "GetId()"
  }
]