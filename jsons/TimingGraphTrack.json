[
  {
    "label": "FFrameStatsCachedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameStatsCachedEvent"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FTimingGraphSeries",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingGraphSeries"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSimpleTimingEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimpleTimingEvent"
  },
  {
    "label": "FTimingGraphTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingGraphTrack"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Insights / ViewModels / GraphSeries . h \" # include \" Insights / ViewModels / GraphTrack . h \" namespace UE::Insights::TimingProfiler { struct FFrameStatsCachedEvent ; class STimingView ; })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FSeriesVisibilityChangedDelegate, bool bOnOff)"
  },
  {
    "label": "FTimingGraphSeries()",
    "kind": "Method",
    "detail": "Function (class FTimingGraphSeries : public FGraphSeries { public : enum class ESeriesType { Frame,Timer,StatsCounter,FrameStatsTimer } ; struct FSimpleTimingEvent { double StartTime ; double Duration ; } ; public :)",
    "insertText": "FTimingGraphSeries(FTimingGraphSeries::ESeriesType Type)"
  },
  {
    "label": "FTimingGraphSeries()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingGraphSeries()"
  },
  {
    "label": "FormatValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatValue(double Value)"
  },
  {
    "label": "CompareEventsByStartTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareEventsByStartTime(const FSimpleTimingEvent& EventA, const FSimpleTimingEvent& EventB)"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (public : ESeriesType Type ; union { uint32 TimerId ; uint32 CounterId ; } ; ETraceFrameType FrameType ; double CachedSessionDuration ; TArray<FSimpleTimingEvent> CachedEvents ; TArray<UE::Insights::TimingProfiler::FFrameStatsCachedEvent> FrameStatsCachedEvents ; uint32 CachedTimelinesNum = 0 ; bool bIsTime ; bool bIsMemory ; bool bIsFloatingPoint ; FSeriesVisibilityChangedDelegate VisibilityChangedDelegate ; } ; class FTimingGraphTrack : public FGraphTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FTimingGraphTrack, FGraphTrack) public: FTimingGraphTrack(TSharedPtr<UE::Insights::TimingProfiler::STimingView> InTimingView)"
  },
  {
    "label": "FTimingGraphTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingGraphTrack()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "AddDefaultFrameSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultFrameSeries()"
  },
  {
    "label": "GetFrameSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "GetFrameSeries(ETraceFrameType FrameType)"
  },
  {
    "label": "GetTimerSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "GetTimerSeries(uint32 TimerId)"
  },
  {
    "label": "AddTimerSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "AddTimerSeries(uint32 TimerId, FLinearColor Color)"
  },
  {
    "label": "RemoveTimerSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTimerSeries(uint32 TimerId)"
  },
  {
    "label": "GetFrameStatsTimerSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "GetFrameStatsTimerSeries(uint32 TimerId, ETraceFrameType FrameType)"
  },
  {
    "label": "AddFrameStatsTimerSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "AddFrameStatsTimerSeries(uint32 TimerId, ETraceFrameType FrameType, FLinearColor Color)"
  },
  {
    "label": "RemoveFrameStatsTimerSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFrameStatsTimerSeries(uint32 TimerId, ETraceFrameType FrameType)"
  },
  {
    "label": "GetStatsCounterSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "GetStatsCounterSeries(uint32 CounterId)"
  },
  {
    "label": "AddStatsCounterSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingGraphSeries>)",
    "insertText": "AddStatsCounterSeries(uint32 CounterId, FLinearColor Color)"
  },
  {
    "label": "RemoveStatsCounterSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStatsCounterSeries(uint32 CounterId)"
  },
  {
    "label": "GetNumSeriesForTimer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumSeriesForTimer(uint32 TimerId)"
  },
  {
    "label": "UpdateFrameSeries()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateFrameSeries(FTimingGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "UpdateTimerSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimerSeries(FTimingGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "UpdateFrameStatsTimerSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFrameStatsTimerSeries(FTimingGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "UpdateStatsCounterSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsCounterSeries(FTimingGraphSeries& Series, const FTimingTrackViewport& Viewport)"
  },
  {
    "label": "GetVisibleTimelineIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVisibleTimelineIndexes(TSet<uint32>& TimelineIndexes)"
  },
  {
    "label": "DrawVerticalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVerticalAxisGrid(const ITimingTrackDrawContext& Context)"
  },
  {
    "label": "LoadDefaultSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDefaultSettings()"
  },
  {
    "label": "ContextMenu_ToggleOption_Execute()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ContextMenu_ToggleOption_Execute(EGraphOptions Option)"
  }
]