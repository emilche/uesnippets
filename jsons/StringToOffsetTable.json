[
  {
    "label": "StringToOffsetTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringToOffsetTable"
  },
  {
    "label": "GetOrAddStringOffset()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TABLEGEN_STRINGTOOFFSETTABLE_H # define LLVM_TABLEGEN_STRINGTOOFFSETTABLE_H # include \" llvm / ADT / SmallString . h \" # include \" llvm / ADT / StringExtras . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / Support / raw_ostream . h \" # include<cctype> namespace llvm { class StringToOffsetTable { StringMap<unsigned> StringOffset ; std::string AggregateString ; public : unsigned)",
    "insertText": "GetOrAddStringOffset(StringRef Str, bool appendZero = true)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (auto IterBool = StringOffset .)",
    "insertText": "insert(std::make_pair(Str, AggregateString.size()))"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (AggregateString .)",
    "insertText": "append(Str.begin(), Str.end())"
  },
  {
    "label": "EmitString()",
    "kind": "Method",
    "detail": "Function (} return IterBool . first -> second ; } void)",
    "insertText": "EmitString(raw_ostream &O)"
  },
  {
    "label": "raw_svector_ostream()",
    "kind": "Method",
    "detail": "Function (SmallString<2 5 6> Str ;)",
    "insertText": "raw_svector_ostream(Str).write_escaped(AggregateString)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (AggregateString = Str .)",
    "insertText": "str()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (O<<\" \\ \" \" ; unsigned CharsPrinted = 0 ;)",
    "insertText": "for(unsigned i = 0, e = AggregateString.size(); i != e; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (O<<\" \\ \" \\ n \\ \" \" ; CharsPrinted = 0 ; } O<<AggregateString [ i ] ; + + CharsPrinted ;)",
    "insertText": "if(AggregateString[i] != '\\\\')"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i+1 < AggregateString.size() && \"Incomplete escape sequence!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isdigit(AggregateString[i+2]) && isdigit(AggregateString[i+3]) && \"Expected 3 digit octal escape!\")"
  }
]