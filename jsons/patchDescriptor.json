[
  {
    "label": "PatchDescriptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchDescriptor"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "PatchDescriptor()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_PATCH_DESCRIPTOR_H # define OPENSUBDIV3_FAR_PATCH_DESCRIPTOR_H # include \" . . / version . h \" # include \" . . / far / types . h \" # include \" . . / sdc / types . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchDescriptor { public : enum Type { NON_PATCH = 0,POINTS,LINES,QUADS,TRIANGLES,LOOP,REGULAR,GREGORY,GREGORY_BOUNDARY,GREGORY_BASIS,GREGORY_TRIANGLE } ; public :)",
    "insertText": "PatchDescriptor() : _type(NON_PATCH)"
  },
  {
    "label": "PatchDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PatchDescriptor(int type) : _type(type)"
  },
  {
    "label": "PatchDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PatchDescriptor(PatchDescriptor const & d ) : _type(d.GetType())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PatchDescriptor&)",
    "insertText": "operator(PatchDescriptor const & d)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (_type = d .)",
    "insertText": "GetType()"
  },
  {
    "label": "IsAdaptive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAdaptive(Type type)"
  },
  {
    "label": "GetNumControlVertices()",
    "kind": "Method",
    "detail": "Function (} short)",
    "insertText": "GetNumControlVertices(Type t)"
  },
  {
    "label": "GetNumFVarControlVertices()",
    "kind": "Method",
    "detail": "Function (short)",
    "insertText": "GetNumFVarControlVertices(Type t)"
  },
  {
    "label": "GetNumControlVertices()",
    "kind": "Method",
    "detail": "Function (short)",
    "insertText": "GetNumControlVertices()"
  },
  {
    "label": "GetNumFVarControlVertices()",
    "kind": "Method",
    "detail": "Function (} short)",
    "insertText": "GetNumFVarControlVertices()"
  },
  {
    "label": "GetRegularPatchSize()",
    "kind": "Method",
    "detail": "Function (} short)",
    "insertText": "GetRegularPatchSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(PatchDescriptor const other)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print()"
  },
  {
    "label": "GetNumControlVertices()",
    "kind": "Method",
    "detail": "Function (private : unsigned int _type ; } ; typedef Vtr::ConstArray<PatchDescriptor> ConstPatchDescriptorArray ; short)",
    "insertText": "GetNumControlVertices(Type type)"
  }
]