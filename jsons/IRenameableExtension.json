[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModelTypeID . h \" # include \" Delegates / Delegate . h \" class FText ; namespace UE { namespace Sequencer { class IRenameableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IRenameableExtension) virtual ~IRenameableExtension()"
  },
  {
    "label": "OnRenameRequested()",
    "kind": "Method",
    "detail": "Function (} FSimpleMulticastDelegate&)",
    "insertText": "OnRenameRequested()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename(const FText& NewName)"
  },
  {
    "label": "IsRenameValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenameValid(const FText& NewName, FText& OutErrorMessage)"
  },
  {
    "label": "IsRenameValidImpl()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsRenameValidImpl(const FText& NewName, FText& OutErrorMessage)"
  }
]