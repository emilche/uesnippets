[
  {
    "label": "FScreenVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenVertex"
  },
  {
    "label": "FScreenVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenVertexDeclaration"
  },
  {
    "label": "FScreenPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPS"
  },
  {
    "label": "FScreenFromSlice0PS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenFromSlice0PS"
  },
  {
    "label": "FScreenUnwrapSlicesPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenUnwrapSlicesPS"
  },
  {
    "label": "FScreenPSInvertAlpha",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPSInvertAlpha"
  },
  {
    "label": "FScreenPSsRGBSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPSsRGBSource"
  },
  {
    "label": "FScreenPSMipLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPSMipLevel"
  },
  {
    "label": "FScreenPSsRGBSourceMipLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPSsRGBSourceMipLevel"
  },
  {
    "label": "FScreenPS_OSE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenPS_OSE"
  },
  {
    "label": "FScreenVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenVS"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" GlobalShader . h \" # include \" ShaderParameterUtils . h \" # include \" SceneView . h \" # include \" StereoRenderUtils . h \" struct FScreenVertex { FVector2f Position ; FVector2f UV ; } ; bool)",
    "insertText": "operator(const FScreenVertex &a, const FScreenVertex &b)"
  },
  {
    "label": "FScreenVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} class FScreenVertexDeclaration : public FRenderResource { public : FVertexDeclarationRHIRef VertexDeclarationRHI ; ~)",
    "insertText": "FScreenVertexDeclaration()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationElementList Elements ; uint16 Stride =)",
    "insertText": "sizeof(FScreenVertex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(FVertexElement(0,STRUCT_OFFSET(FScreenVertex,Position),VET_Float2,0,Stride))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(FVertexElement(0,STRUCT_OFFSET(FScreenVertex,UV),VET_Float2,1,Stride))"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (VertexDeclarationRHI =)",
    "insertText": "RHICreateVertexDeclaration(Elements)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (VertexDeclarationRHI .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; TGlobalResource<FScreenVertexDeclaration> GScreenVertexDeclaration ; class FScreenPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenPS,Global,ENGINE_API)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTexture .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"InTexture\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTextureSampler .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"InTextureSampler\"))"
  },
  {
    "label": "FScreenPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters,InTexture,InTextureSampler,Texture)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters,InTexture,InTextureSampler,SamplerStateRHI,TextureRHI)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTextureSampler)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FScreenFromSlice0PS : public FScreenPS {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenFromSlice0PS, Global, ENGINE_API)"
  },
  {
    "label": "Aspects()",
    "kind": "Method",
    "detail": "Function (UE::StereoRenderUtils::FStereoShaderAspects)",
    "insertText": "Aspects(Parameters.Platform)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SCREEN_PS_FROM_SLICE0\"), 1)"
  },
  {
    "label": "FScreenFromSlice0PS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenFromSlice0PS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FScreenPS(Initializer)"
  },
  {
    "label": "FScreenFromSlice0PS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenFromSlice0PS()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FScreenUnwrapSlicesPS : public FScreenPS {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenUnwrapSlicesPS, Global, ENGINE_API)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_DESKTOP)",
    "insertText": "if(FScreenPS::ShouldCompilePermutation(Parameters))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SCREEN_PS_UNWRAP_SLICES\"), 1)"
  },
  {
    "label": "FScreenUnwrapSlicesPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenUnwrapSlicesPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FScreenPS(Initializer)"
  },
  {
    "label": "FScreenUnwrapSlicesPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenUnwrapSlicesPS()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FScreenPSInvertAlpha : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenPSInvertAlpha, Global, ENGINE_API)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTexture .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InTexture\"), SPF_Mandatory)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTextureSampler .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InTextureSampler\"))"
  },
  {
    "label": "FScreenPSInvertAlpha()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPSInvertAlpha()"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, InTexture, InTextureSampler, Texture)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, InTexture, InTextureSampler, SamplerStateRHI, TextureRHI)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FScreenPSsRGBSource : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenPSsRGBSource, Global, ENGINE_API)"
  },
  {
    "label": "FScreenPSsRGBSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPSsRGBSource()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FScreenPSMipLevel : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenPSMipLevel, Global, ENGINE_API)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InMipLevelParameter .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"MipLevel\"))"
  },
  {
    "label": "FScreenPSMipLevel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPSMipLevel()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FTexture* Texture, int MipLevel = 0)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InMipLevelParameter, MipLevel)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHISamplerState* SamplerStateRHI, FRHITexture* TextureRHI, int MipLevel = 0)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InMipLevelParameter)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FScreenPSsRGBSourceMipLevel : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenPSsRGBSourceMipLevel, Global, ENGINE_API)"
  },
  {
    "label": "FScreenPSsRGBSourceMipLevel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPSsRGBSourceMipLevel()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FScreenPS_OSE : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenPS_OSE,Global,ENGINE_API)"
  },
  {
    "label": "FScreenPS_OSE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenPS_OSE()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FScreenVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FScreenVS,Global,ENGINE_API)"
  },
  {
    "label": "FScreenVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScreenVS()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FRHIUniformBuffer* ViewUniformBuffer)"
  },
  {
    "label": "FViewUniformShaderParameters()",
    "kind": "Method",
    "detail": "Function (FGlobalShader::SetParameters<)",
    "insertText": "FViewUniformShaderParameters(BatchedParameters, ViewUniformBuffer)"
  }
]