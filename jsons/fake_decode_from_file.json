[
  {
    "label": "FakeDecodeFromFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeDecodeFromFile"
  },
  {
    "label": "FakeDecodeFromFile()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_FAKE_DECODE_FROM_FILE_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_FAKE_DECODE_FROM_FILE_H_ # include<memory> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio_codecs / audio_decoder . h \" # include \" modules / audio_coding / neteq / tools / input_audio_file . h \" namespace webrtc { namespace test { class FakeDecodeFromFile : public AudioDecoder { public :)",
    "insertText": "FakeDecodeFromFile(std::unique_ptr<InputAudioFile> input, int sample_rate_hz, bool stereo) : input_(std::move(input)), sample_rate_hz_(sample_rate_hz), stereo_(stereo)"
  },
  {
    "label": "FakeDecodeFromFile()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakeDecodeFromFile()"
  },
  {
    "label": "ParsePayload()",
    "kind": "Method",
    "detail": "Function (std::vector<ParseResult>)",
    "insertText": "ParsePayload(rtc::Buffer&& payload, uint32_t timestamp)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "PacketDuration()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PacketDuration(const uint8_t* encoded, size_t encoded_len)"
  },
  {
    "label": "PrepareEncoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareEncoded(uint32_t timestamp, size_t samples, size_t original_payload_size_bytes, rtc::ArrayView<uint8_t> encoded)"
  }
]