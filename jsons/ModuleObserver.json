[
  {
    "label": "FModuleObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleObserver"
  },
  {
    "label": "FModuleObserver()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Modules / ModuleManager . h \" class FModuleObserver { public :)",
    "insertText": "FModuleObserver(FName InModuleName, FSimpleDelegate InOnModuleLoaded, FSimpleDelegate InOnModuleUnloaded) : ModuleName(InModuleName) , OnModuleLoaded(InOnModuleLoaded) , OnModuleUnloaded(InOnModuleUnloaded)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FModuleManager& ModuleManager =)",
    "insertText": "Get()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnModuleLoaded .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "OnModulesChanged()",
    "kind": "Method",
    "detail": "Function (} ModuleManager .)",
    "insertText": "OnModulesChanged().AddRaw(this, &FModuleObserver::OnModulesChanged)"
  },
  {
    "label": "FModuleObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FModuleObserver()"
  },
  {
    "label": "OnModulesChanged()",
    "kind": "Method",
    "detail": "Function (} ModuleManager .)",
    "insertText": "OnModulesChanged().RemoveAll(this)"
  },
  {
    "label": "OnModulesChanged()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnModulesChanged(FName InModuleName, EModuleChangeReason Reason)"
  }
]