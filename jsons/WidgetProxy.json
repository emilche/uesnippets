[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FFastPathPerFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastPathPerFrameData"
  },
  {
    "label": "FSlateInvalidationWidgetPostHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetPostHeap"
  },
  {
    "label": "FSlateInvalidationWidgetList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationWidgetList"
  },
  {
    "label": "FSlateWidgetPersistentState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateWidgetPersistentState"
  },
  {
    "label": "FSlateInvalidationRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRoot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateInvalidationWidgetVisibility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateInvalidationWidgetVisibility"
  },
  {
    "label": "FWidgetProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetProxy"
  },
  {
    "label": "FUpdateResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateResult"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FWidgetProxyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetProxyHandle"
  },
  {
    "label": "UE_SLATE_WITH_INVALIDATIONWIDGETLIST_DEBUGGING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Types / PaintArgs . h \" # include \" Styling / WidgetStyle . h \" # include \" Misc / MemStack . h \" # include \" FastUpdate / SlateInvalidationRootHandle . h \" # include \" FastUpdate / SlateInvalidationWidgetIndex . h \" # include \" FastUpdate / SlateInvalidationWidgetSortOrder . h \" # include \" FastUpdate / WidgetUpdateFlags . h \" # include \" Layout / Clipping . h \" # include \" Layout / FlowDirection . h \" # include \" Rendering / DrawElements . h \" # include<type_traits> class SWidget ; class FPaintArgs ; struct FFastPathPerFrameData ; class FSlateInvalidationWidgetPostHeap ; class FSlateInvalidationWidgetList ; struct FSlateWidgetPersistentState ; class FSlateInvalidationRoot ; enum class EInvalidateWidgetReason : uint8 ; # define UE_SLATE_WITH_WIDGETPROXY_WEAKPTR 0 # define UE_SLATE_VERIFY_WIDGETPROXY_WEAKPTR_STALE 0 # define UE_SLATE_WITH_WIDGETPROXY_WIDGETTYPE 0 # define)",
    "insertText": "UE_SLATE_WITH_INVALIDATIONWIDGETLIST_DEBUGGING(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FSlateInvalidationWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSlateInvalidationWidgetVisibility() : Flags(0)"
  },
  {
    "label": "FSlateInvalidationWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateInvalidationWidgetVisibility(EVisibility InVisibility) : bAncestorsVisible(true) , bVisible(InVisibility.IsVisible()) , bAncestorCollapse(false) , bCollapse(InVisibility == EVisibility::Collapsed) , FlagPadding(0)"
  },
  {
    "label": "FSlateInvalidationWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateInvalidationWidgetVisibility(FSlateInvalidationWidgetVisibility ParentFlags, EVisibility InVisibility) : bAncestorsVisible(ParentFlags.IsVisible()) , bVisible(InVisibility.IsVisible()) , bAncestorCollapse(ParentFlags.IsCollapsed()) , bCollapse(InVisibility == EVisibility::Collapsed) , FlagPadding(0)"
  },
  {
    "label": "FSlateInvalidationWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateInvalidationWidgetVisibility(const FSlateInvalidationWidgetVisibility& Other) : Flags(Other.Flags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSlateInvalidationWidgetVisibility&)",
    "insertText": "operator(const FSlateInvalidationWidgetVisibility& Other)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (Flags = Other . Flags ; return* this ; } bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "FSlateInvalidationWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FSlateInvalidationWidgetVisibility(ParentFlags, InVisibility)"
  },
  {
    "label": "SetAncestorsVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAncestorsVisibility(FSlateInvalidationWidgetVisibility ParentFlags)"
  },
  {
    "label": "IsCollapsed()",
    "kind": "Method",
    "detail": "Function (bAncestorCollapse = ParentFlags .)",
    "insertText": "IsCollapsed()"
  },
  {
    "label": "MimicAsParent()",
    "kind": "Method",
    "detail": "Function (} FSlateInvalidationWidgetVisibility)",
    "insertText": "MimicAsParent()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlateInvalidationWidgetVisibility Result ; Result . bAncestorsVisible = bAncestorsVisible ; Result . bVisible = bAncestorsVisible ; Result . bCollapse = bAncestorCollapse ; Result . bAncestorCollapse = bAncestorCollapse ; return Result ; } bool)",
    "insertText": "operator(FSlateInvalidationWidgetVisibility Other)"
  },
  {
    "label": "FWidgetProxy()",
    "kind": "Method",
    "detail": "Function (class FWidgetProxy { public :)",
    "insertText": "FWidgetProxy(SWidget& InWidget)"
  },
  {
    "label": "FUpdateResult()",
    "kind": "Method",
    "detail": "Function (struct FUpdateResult {)",
    "insertText": "FUpdateResult()"
  },
  {
    "label": "FUpdateResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUpdateResult(int32 InPreviousOutgoingLayerId, int32 InNewOutgoingLayerId) : PreviousOutgoingLayerId(InPreviousOutgoingLayerId) , NewOutgoingLayerId(InNewOutgoingLayerId) , bPainted(true)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} int32 PreviousOutgoingLayerId = INDEX_NONE ; int32 NewOutgoingLayerId = INDEX_NONE ; bool bPainted = false ; } ; FUpdateResult)",
    "insertText": "Update(const FPaintArgs& PaintArgs, FSlateWindowElementList& OutDrawElements)"
  },
  {
    "label": "ProcessLayoutInvalidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLayoutInvalidation(FSlateInvalidationWidgetPostHeap& UpdateList, FSlateInvalidationWidgetList& FastPathWidgetList, FSlateInvalidationRoot& Root)"
  },
  {
    "label": "ProcessPostInvalidation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessPostInvalidation(FSlateInvalidationWidgetPostHeap& UpdateList, FSlateInvalidationWidgetList& FastPathWidgetList, FSlateInvalidationRoot& Root)"
  },
  {
    "label": "MarkProxyUpdatedThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkProxyUpdatedThisFrame(FSlateInvalidationWidgetPostHeap& UpdateList)"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_WITH_WIDGETPROXY_WEAKPTR SWidget*)",
    "insertText": "GetWidget()"
  },
  {
    "label": "ensureAlways()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_VERIFY_WIDGETPROXY_WEAKPTR_STALE)",
    "insertText": "ensureAlways(!Widget.IsStale())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (# endif return Widget .)",
    "insertText": "Pin().Get()"
  },
  {
    "label": "GetWidgetAsShared()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetWidgetAsShared()"
  },
  {
    "label": "ResetWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWidget()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Widget .)",
    "insertText": "Reset()"
  },
  {
    "label": "IsSameWidget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSameWidget(const SWidget* InWidget)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if UE_SLATE_VERIFY_WIDGETPROXY_WEAKPTR_STALE)",
    "insertText": "return(InWidget == Widget.Pin().Get()) || (Widget.IsStale() && GetTypeHash(Widget) == GetTypeHash(InWidget))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private : # if UE_SLATE_WITH_WIDGETPROXY_WEAKPTR TWeakPtr<SWidget> Widget ; # else SWidget* Widget ; # endif # if UE_SLATE_WITH_WIDGETPROXY_WIDGETTYPE FName WidgetType ; # endif public : FSlateInvalidationWidgetIndex Index ; FSlateInvalidationWidgetIndex ParentIndex ; FSlateInvalidationWidgetIndex LeafMostChildIndex ; EInvalidateWidgetReason CurrentInvalidateReason ; FSlateInvalidationWidgetVisibility Visibility ; union { struct { public : uint8 bContainedByWidgetPreHeap : 1 ; uint8 bContainedByWidgetPostHeap : 1 ; uint8 bContainedByWidgetPrepassList : 1 ; uint8 bIsInvalidationRoot : 1 ; uint8 bIsVolatilePrepass : 1 ; } ; uint8 PrivateFlags ; } ; # if UE_SLATE_WITH_INVALIDATIONWIDGETLIST_DEBUGGING union { struct { public : uint8 bDebug_LastFrameVisible : 1 ; uint8 bDebug_LastFrameVisibleSet : 1 ; uint8 bDebug_AttributeUpdated : 1 ; uint8 bDebug_Updated : 1 ; } ; uint8 PrivateDebugFlags ; } ; # endif } ; # if ! UE_SLATE_WITH_WIDGETPROXY_WIDGETTYPE)",
    "insertText": "static_assert(sizeof(FWidgetProxy) <= 32, \"FWidgetProxy should be 32 bytes\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UE_SLATE_WITH_WIDGETPROXY_WEAKPTR)",
    "insertText": "static_assert(std::is_trivially_destructible_v<FWidgetProxy>, \"FWidgetProxy must be trivially destructible\")"
  },
  {
    "label": "FSlateWidgetPersistentState()",
    "kind": "Method",
    "detail": "Function (template<> struct TIsPODType<FWidgetProxy> { enum { Value = true } ; } ; # endif struct FSlateWidgetPersistentState {)",
    "insertText": "FSlateWidgetPersistentState() : CachedElementHandle() , LayerId(0) , OutgoingLayerId(0) , IncomingUserIndex(INDEX_NONE) , IncomingFlowDirection(EFlowDirection::LeftToRight) , InitialPixelSnappingMethod(EWidgetPixelSnapping::Inherit) , bParentEnabled(true) , bInheritedHittestability(false) , bDeferredPainting(false) , bIsInGameLayer(false)"
  },
  {
    "label": "FWidgetProxyHandle()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<SWidget> PaintParent ; TOptional<FSlateClippingState> InitialClipState ; FGeometry AllottedGeometry ; FGeometry DesktopGeometry ; FSlateRect CullingBounds ; FWidgetStyle WidgetStyle ; FSlateCachedElementsHandle CachedElementHandle ; int32 LayerId ; int32 OutgoingLayerId ; int8 IncomingUserIndex ; EFlowDirection IncomingFlowDirection ; EWidgetPixelSnapping InitialPixelSnappingMethod ; uint8 bParentEnabled : 1 ; uint8 bInheritedHittestability : 1 ; uint8 bDeferredPainting : 1 ; uint8 bIsInGameLayer : 1 ; const FSlateWidgetPersistentState NoState ; } ; class FWidgetProxyHandle { class SWidget ; class FSlateInvalidationRoot ; class FSlateInvalidationWidgetList ; public :)",
    "insertText": "FWidgetProxyHandle() : WidgetIndex(FSlateInvalidationWidgetIndex::Invalid)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid(const SWidget& Widget)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const SWidget* Widget)"
  },
  {
    "label": "GetInvalidationRootHandle()",
    "kind": "Method",
    "detail": "Function (FSlateInvalidationRootHandle)",
    "insertText": "GetInvalidationRootHandle()"
  },
  {
    "label": "HasAllInvalidationReason()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllInvalidationReason(const SWidget* Widget, EInvalidateWidgetReason Reason)"
  },
  {
    "label": "HasAnyInvalidationReason()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyInvalidationReason(const SWidget* Widget, EInvalidateWidgetReason Reason)"
  },
  {
    "label": "GetProxy()",
    "kind": "Method",
    "detail": "Function (FWidgetProxy&)",
    "insertText": "GetProxy()"
  },
  {
    "label": "GetInvalidationRoot_NoCheck()",
    "kind": "Method",
    "detail": "Function (private : FSlateInvalidationRoot*)",
    "insertText": "GetInvalidationRoot_NoCheck()"
  },
  {
    "label": "MarkWidgetDirty_NoCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkWidgetDirty_NoCheck(FWidgetProxy& Proxy)"
  },
  {
    "label": "MarkWidgetDirty_NoCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkWidgetDirty_NoCheck(EInvalidateWidgetReason InvalidateReason)"
  },
  {
    "label": "UpdateWidgetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWidgetFlags(const SWidget* Widget, EWidgetUpdateFlags Previous, EWidgetUpdateFlags NewFlags)"
  },
  {
    "label": "FWidgetProxyHandle()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FWidgetProxyHandle(const FSlateInvalidationRootHandle& InInvalidationRoot, FSlateInvalidationWidgetIndex InIndex, FSlateInvalidationWidgetSortOrder InSortIndex)"
  },
  {
    "label": "FWidgetProxyHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWidgetProxyHandle(FSlateInvalidationWidgetIndex InIndex)"
  }
]