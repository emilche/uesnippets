[
  {
    "label": "AudioChecksum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioChecksum"
  },
  {
    "label": "AudioChecksum()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_AUDIO_CHECKSUM_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_AUDIO_CHECKSUM_H_ # include<memory> # include<string> # include \" modules / audio_coding / neteq / tools / audio_sink . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / message_digest . h \" # include \" rtc_base / string_encode . h \" # include \" rtc_base / system / arch . h \" namespace webrtc { namespace test { class AudioChecksum : public AudioSink { public :)",
    "insertText": "AudioChecksum() : checksum_(rtc::MessageDigestFactory::Create(rtc::DIGEST_MD5)), checksum_result_(checksum_->Size()), finished_(false)"
  },
  {
    "label": "AudioChecksum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioChecksum(const AudioChecksum&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioChecksum&)",
    "insertText": "operator(const AudioChecksum&)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteArray(const int16_t* audio, size_t num_samples)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# ifndef WEBRTC_ARCH_LITTLE_ENDIAN # error \" Big - endian gives a different checksum \" # endif checksum_ ->)",
    "insertText": "Update(audio, num_samples * sizeof(*audio))"
  },
  {
    "label": "Finish()",
    "kind": "Method",
    "detail": "Function (finished_ = true ; checksum_ ->)",
    "insertText": "Finish(checksum_result_.data(), checksum_result_.size())"
  },
  {
    "label": "hex_encode()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "hex_encode(checksum_result_)"
  }
]