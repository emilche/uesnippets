[
  {
    "label": "FAdvancedPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAdvancedPreviewScene"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "IStaticMeshEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStaticMeshEditor"
  },
  {
    "label": "SStaticMeshEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SStaticMeshEditorViewport"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UStaticMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshSocket"
  },
  {
    "label": "FStaticMeshEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshEditorViewportClient"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FInputEventState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEventState"
  },
  {
    "label": "FStaticMeshEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UnrealWidgetFwd . h \" # include \" EditorViewportClient . h \" # include \" Components . h \" # include \" Interfaces / Interface_CollisionDataProvider . h \" class FAdvancedPreviewScene ; class FCanvas ; class IStaticMeshEditor ; class SStaticMeshEditorViewport ; class UStaticMesh ; class UStaticMeshComponent ; class UStaticMeshSocket ; class FStaticMeshEditorViewportClient : public FEditorViewportClient,public TSharedFromThis<FStaticMeshEditorViewportClient> { public :)",
    "insertText": "FStaticMeshEditorViewportClient(TWeakPtr<IStaticMeshEditor> InStaticMeshEditor, const TSharedRef<SStaticMeshEditorViewport>& InStaticMeshEditorViewport, const TSharedRef<FAdvancedPreviewScene>& InPreviewScene, UStaticMesh* InPreviewStaticMesh, UStaticMeshComponent* InPreviewStaticMeshComponent)"
  },
  {
    "label": "FStaticMeshEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticMeshEditorViewportClient()"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseMove(FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* Viewport, FInputDeviceId DeviceId, FKey Key, float Delta, float DeltaTime, int32 NumSamples=1, bool bGamepad=false)"
  },
  {
    "label": "ProcessClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessClick(class FSceneView& View, class HHitProxy* HitProxy, FKey Key, EInputEvent Event, uint32 HitX, uint32 HitY)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCanvas(FViewport& InViewport, FSceneView& View, FCanvas& Canvas)"
  },
  {
    "label": "InputWidgetDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputWidgetDelta(FViewport* Viewport, EAxisList::Type CurrentAxis, FVector& Drag, FRotator& Rot, FVector& Scale)"
  },
  {
    "label": "TrackingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStarted(const struct FInputEventState& InInputState, bool bIsDragging, bool bNudge)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped()"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "CanSetWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetWidgetMode(UE::Widget::EWidgetMode NewMode)"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetCoordSystem()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWidgetCoordSystem()"
  },
  {
    "label": "GetWidgetCoordSystemSpace()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordSystemSpace()"
  },
  {
    "label": "ShouldOrbitCamera()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOrbitCamera()"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(UStaticMesh* InStaticMesh, UStaticMeshComponent* InPreviewStaticMeshComponent, bool bResetCamera=true)"
  },
  {
    "label": "GetSelectedEdges()",
    "kind": "Method",
    "detail": "Function (TSet<int32>&)",
    "insertText": "GetSelectedEdges()"
  },
  {
    "label": "OnMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMeshChanged()"
  },
  {
    "label": "OnSocketSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketSelectionChanged(UStaticMeshSocket* SelectedSocket)"
  },
  {
    "label": "DrawUVsForMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawUVsForMesh(FViewport* InViewport, FCanvas* InCanvas, int32 InTextYPos)"
  },
  {
    "label": "ToggleDrawUVOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDrawUVOverlay()"
  },
  {
    "label": "SetDrawUVOverlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawUVOverlay(bool bShouldDraw)"
  },
  {
    "label": "IsDrawUVOverlayChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawUVOverlayChecked()"
  },
  {
    "label": "SetShowNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowNormals(bool bShowOn)"
  },
  {
    "label": "SetShowTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowTangents(bool bShowOn)"
  },
  {
    "label": "SetShowBinormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowBinormals(bool bShowOn)"
  },
  {
    "label": "SetShowSimpleCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowSimpleCollisions(bool bShowOn)"
  },
  {
    "label": "SetShowComplexCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowComplexCollisions(bool bShowOn)"
  },
  {
    "label": "SetShowPivots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowPivots(bool bShowOn)"
  },
  {
    "label": "SetShowGrids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowGrids(bool bShowOn)"
  },
  {
    "label": "SetShowVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowVertices(bool bShowOn)"
  },
  {
    "label": "SetShowWireframes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowWireframes(bool bShowOn)"
  },
  {
    "label": "SetShowVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowVertexColors(bool bShowOn)"
  },
  {
    "label": "ToggleShowNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowNormals()"
  },
  {
    "label": "IsShowNormalsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowNormalsChecked()"
  },
  {
    "label": "ToggleShowTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowTangents()"
  },
  {
    "label": "IsShowTangentsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowTangentsChecked()"
  },
  {
    "label": "ToggleShowBinormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowBinormals()"
  },
  {
    "label": "IsShowBinormalsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowBinormalsChecked()"
  },
  {
    "label": "ToggleShowSimpleCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowSimpleCollision()"
  },
  {
    "label": "IsShowSimpleCollisionChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowSimpleCollisionChecked()"
  },
  {
    "label": "ToggleShowComplexCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowComplexCollision()"
  },
  {
    "label": "IsShowComplexCollisionChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowComplexCollisionChecked()"
  },
  {
    "label": "ToggleShowSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowSockets()"
  },
  {
    "label": "IsShowSocketsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowSocketsChecked()"
  },
  {
    "label": "ToggleShowPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowPivot()"
  },
  {
    "label": "IsShowPivotChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowPivotChecked()"
  },
  {
    "label": "ToggleDrawAdditionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDrawAdditionalData()"
  },
  {
    "label": "IsDrawAdditionalDataChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawAdditionalDataChecked()"
  },
  {
    "label": "ToggleDrawVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDrawVertices()"
  },
  {
    "label": "IsDrawVerticesChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawVerticesChecked()"
  },
  {
    "label": "SetFloorAndEnvironmentVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFloorAndEnvironmentVisibility(const bool bVisible)"
  },
  {
    "label": "PerspectiveCameraMoved()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PerspectiveCameraMoved()"
  },
  {
    "label": "OnAssetViewerSettingsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetViewerSettingsChanged(const FName& InPropertyName)"
  },
  {
    "label": "SetAdvancedShowFlagsForScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdvancedShowFlagsForScene(const bool bAdvancedShowFlags)"
  },
  {
    "label": "UpdateSimpleCollisionDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSimpleCollisionDisplay()"
  },
  {
    "label": "UpdateComplexCollisionDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComplexCollisionDisplay()"
  },
  {
    "label": "IsCustomModeUsingWidget()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsCustomModeUsingWidget()"
  }
]