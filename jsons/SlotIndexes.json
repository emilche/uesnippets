[
  {
    "label": "IndexListEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexListEntry"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "SlotIndex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SlotIndex"
  },
  {
    "label": "SlotIndexes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SlotIndexes"
  },
  {
    "label": "Slot",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Slot"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "Idx2MBBCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Idx2MBBCompare"
  },
  {
    "label": "IntervalMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalMapInfo"
  },
  {
    "label": "IndexListEntry()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SLOTINDEXES_H # define LLVM_CODEGEN_SLOTINDEXES_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / IntervalMap . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / ilist . h \" # include \" llvm / CodeGen / MachineFunction . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / MachineInstrBundle . h \" # include \" llvm / Support / Allocator . h \" namespace llvm { class IndexListEntry : public ilist_node<IndexListEntry> { MachineInstr* mi ; unsigned index ; public :)",
    "insertText": "IndexListEntry(MachineInstr *mi, unsigned index) : mi(mi), index(index)"
  },
  {
    "label": "getInstr()",
    "kind": "Method",
    "detail": "Function (} MachineInstr*)",
    "insertText": "getInstr()"
  },
  {
    "label": "getIndex()",
    "kind": "Method",
    "detail": "Function (this -> mi = mi ; } unsigned)",
    "insertText": "getIndex()"
  },
  {
    "label": "setPoison()",
    "kind": "Method",
    "detail": "Function (this -> index = index ; } # ifdef EXPENSIVE_CHECKS void)",
    "insertText": "setPoison()"
  },
  {
    "label": "intptr_t()",
    "kind": "Method",
    "detail": "Function (intptr_t tmp = reinterpret_cast<)",
    "insertText": "intptr_t(mi)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(((tmp & 0x1) == 0x0) && \"Pointer already poisoned?\")"
  },
  {
    "label": "MachineInstr()",
    "kind": "Method",
    "detail": "Function (tmp | = 0 x1 ; mi = reinterpret_cast<)",
    "insertText": "MachineInstr(tmp)"
  },
  {
    "label": "isPoisoned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPoisoned()"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<> struct ilist_traits<IndexListEntry> : public ilist_default_traits<IndexListEntry> { private : ilist_half_node<IndexListEntry> Sentinel ; public : IndexListEntry*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(IndexListEntry *)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} IndexListEntry*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} IndexListEntry*)",
    "insertText": "ensureHead(IndexListEntry*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(IndexListEntry*, IndexListEntry*)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deleteNode(IndexListEntry *N)"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "createNode(const IndexListEntry &)"
  },
  {
    "label": "SlotIndex()",
    "kind": "Method",
    "detail": "Function (} ; class SlotIndex { class SlotIndexes ; enum Slot { Slot_Block,Slot_EarlyClobber,Slot_Register,Slot_Dead,Slot_Count } ; PointerIntPair<IndexListEntry*,2,unsigned> lie ;)",
    "insertText": "SlotIndex(IndexListEntry *entry, unsigned slot) : lie(entry, slot)"
  },
  {
    "label": "listEntry()",
    "kind": "Method",
    "detail": "Function (} IndexListEntry*)",
    "insertText": "listEntry()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValid() && \"Attempt to compare reserved index.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (# ifdef EXPENSIVE_CHECKS)",
    "insertText": "assert(!lie.getPointer()->isPoisoned() && \"Attempt to access deleted list-entry.\")"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (# endif return lie .)",
    "insertText": "getPointer()"
  },
  {
    "label": "getSlot()",
    "kind": "Method",
    "detail": "Function (} Slot)",
    "insertText": "getSlot()"
  },
  {
    "label": "SlotIndex()",
    "kind": "Method",
    "detail": "Function (} public : enum { InstrDist = 4* Slot_Count } ;)",
    "insertText": "SlotIndex() : lie(nullptr, 0)"
  },
  {
    "label": "SlotIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SlotIndex(const SlotIndex &li, Slot s) : lie(li.listEntry(), unsigned(s))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(lie.getPointer() != nullptr && \"Attempt to construct index with 0 pointer.\")"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &os)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(SlotIndex other)"
  },
  {
    "label": "isSameInstr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSameInstr(SlotIndex A, SlotIndex B)"
  },
  {
    "label": "isEarlierInstr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEarlierInstr(SlotIndex A, SlotIndex B)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "distance(SlotIndex other)"
  },
  {
    "label": "getInstrDistance()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getInstrDistance(SlotIndex other)"
  },
  {
    "label": "isBlock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isBlock()"
  },
  {
    "label": "isEarlyClobber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEarlyClobber()"
  },
  {
    "label": "isRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegister()"
  },
  {
    "label": "isDead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDead()"
  },
  {
    "label": "getBaseIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getBaseIndex()"
  },
  {
    "label": "getBoundaryIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getBoundaryIndex()"
  },
  {
    "label": "getRegSlot()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getRegSlot(bool EC = false)"
  },
  {
    "label": "getDeadSlot()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getDeadSlot()"
  },
  {
    "label": "getNextSlot()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getNextSlot()"
  },
  {
    "label": "SlotIndex()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "SlotIndex(listEntry(), s + 1)"
  },
  {
    "label": "getNextIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getNextIndex()"
  },
  {
    "label": "getPrevSlot()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getPrevSlot()"
  },
  {
    "label": "SlotIndex()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "SlotIndex(listEntry(), s - 1)"
  },
  {
    "label": "getPrevIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getPrevIndex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct isPodLike<SlotIndex> { const bool value = true ; } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &os, SlotIndex li)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (li .)",
    "insertText": "print(os)"
  },
  {
    "label": "IndexListEntry()",
    "kind": "Method",
    "detail": "Function (IndexListEntry* entry = static_cast<)",
    "insertText": "IndexListEntry(ileAllocator.Allocate(sizeof(IndexListEntry), alignOf<IndexListEntry>()))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(entry) IndexListEntry(mi, index)"
  },
  {
    "label": "SlotIndexes()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "SlotIndexes() : MachineFunctionPass(ID)"
  },
  {
    "label": "initializeSlotIndexesPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeSlotIndexesPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &au)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnMachineFunction(MachineFunction &fn)"
  },
  {
    "label": "renumberIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renumberIndexes()"
  },
  {
    "label": "repairIndexesInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "repairIndexesInRange(MachineBasicBlock *MBB, MachineBasicBlock::iterator Begin, MachineBasicBlock::iterator End)"
  },
  {
    "label": "getZeroIndex()",
    "kind": "Method",
    "detail": "Function (SlotIndex)",
    "insertText": "getZeroIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(indexList.front().getIndex() == 0 && \"First index is not 0?\")"
  },
  {
    "label": "getLastIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getLastIndex()"
  },
  {
    "label": "hasIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasIndex(const MachineInstr *instr)"
  },
  {
    "label": "getInstructionIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getInstructionIndex(const MachineInstr *MI)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (Mi2IndexMap::const_iterator itr = mi2iMap .)",
    "insertText": "find(getBundleStart(MI))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(itr != mi2iMap.end() && \"Instruction not found in maps.\")"
  },
  {
    "label": "getNextNonNullIndex()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getNextNonNullIndex(SlotIndex Index)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (IndexList::iterator E = indexList .)",
    "insertText": "end()"
  },
  {
    "label": "getIndexBefore()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getIndexBefore(const MachineInstr *MI)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (const MachineBasicBlock* MBB = MI ->)",
    "insertText": "getParent()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MBB && \"MI must be inserted inna basic block\")"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::const_iterator I = MI,B = MBB ->)",
    "insertText": "begin()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (- - I ; Mi2IndexMap::const_iterator MapItr = mi2iMap .)",
    "insertText": "find(I)"
  },
  {
    "label": "getIndexAfter()",
    "kind": "Method",
    "detail": "Function (} } SlotIndex)",
    "insertText": "getIndexAfter(const MachineInstr *MI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + I ;)",
    "insertText": "if(I == E) return getMBBEndIdx(MBB)"
  },
  {
    "label": "getMBBRange()",
    "kind": "Method",
    "detail": "Function (} } const std::pair<SlotIndex,SlotIndex>&)",
    "insertText": "getMBBRange(unsigned Num)"
  },
  {
    "label": "getMBBStartIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getMBBStartIdx(unsigned Num)"
  },
  {
    "label": "getMBBStartIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getMBBStartIdx(const MachineBasicBlock *mbb)"
  },
  {
    "label": "getMBBEndIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getMBBEndIdx(unsigned Num)"
  },
  {
    "label": "getMBBEndIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "getMBBEndIdx(const MachineBasicBlock *mbb)"
  },
  {
    "label": "getMBBFromIndex()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock*)",
    "insertText": "getMBBFromIndex(SlotIndex index)"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<IdxMBBPair>::const_iterator I =)",
    "insertText": "lower_bound(idx2MBBMap.begin(), idx2MBBMap.end(), index)"
  },
  {
    "label": "J()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<IdxMBBPair>::const_iterator)",
    "insertText": "J((I != idx2MBBMap.end() && I->first > index) || (I == idx2MBBMap.end() && idx2MBBMap.size()>0)) ? (I-1)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(J != idx2MBBMap.end() && J->first <= index && index < getMBBEndIdx(J->second) && \"index does not correspond to an MBB\")"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (SmallVectorImpl<IdxMBBPair>::const_iterator itr =)",
    "insertText": "lower_bound(idx2MBBMap.begin(), idx2MBBMap.end(), start)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool resVal = false ;)",
    "insertText": "while(itr != idx2MBBMap.end())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (mbbs .)",
    "insertText": "push_back(itr->second)"
  },
  {
    "label": "getMBBCoveringRange()",
    "kind": "Method",
    "detail": "Function (resVal = true ; + + itr ; } return resVal ; } MachineBasicBlock*)",
    "insertText": "getMBBCoveringRange(SlotIndex start, SlotIndex end)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(start < end && \"Backwards ranges not allowed.\")"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (itr =)",
    "insertText": "prev(itr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!mi->isInsideBundle() && \"Instructions inside bundles should use bundle start's slot.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mi2iMap.find(mi) == mi2iMap.end() && \"Instr already indexed.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!mi->isDebugValue() && \"Cannot number DBG_VALUE instructions.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mi->getParent() != nullptr && \"Instr must be added to function.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexList::iterator prevItr,nextItr ;)",
    "insertText": "if(Late)"
  },
  {
    "label": "getIndexAfter()",
    "kind": "Method",
    "detail": "Function (nextItr =)",
    "insertText": "getIndexAfter(mi).listEntry()"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (prevItr =)",
    "insertText": "prev(nextItr)"
  },
  {
    "label": "getIndexBefore()",
    "kind": "Method",
    "detail": "Function (} else { prevItr =)",
    "insertText": "getIndexBefore(mi).listEntry()"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (nextItr =)",
    "insertText": "next(prevItr)"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "dist((nextItr->getIndex() - prevItr->getIndex())/2)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IndexList::iterator newItr = indexList .)",
    "insertText": "insert(nextItr, createEntry(mi, newNumber))"
  },
  {
    "label": "newIndex()",
    "kind": "Method",
    "detail": "Function (SlotIndex)",
    "insertText": "newIndex(&*newItr, SlotIndex::Slot_Block)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (mi2iMap .)",
    "insertText": "insert(std::make_pair(mi, newIndex))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (Mi2IndexMap::iterator mi2iItr = mi2iMap .)",
    "insertText": "find(mi)"
  },
  {
    "label": "miEntry()",
    "kind": "Method",
    "detail": "Function (IndexListEntry*)",
    "insertText": "miEntry(mi2iItr->second.listEntry())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(miEntry->getInstr() == mi && \"Instruction indexes broken.\")"
  },
  {
    "label": "setInstr()",
    "kind": "Method",
    "detail": "Function (miEntry ->)",
    "insertText": "setInstr(nullptr)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (mi2iMap .)",
    "insertText": "erase(mi2iItr)"
  },
  {
    "label": "replaceMachineInstrInMaps()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "replaceMachineInstrInMaps(MachineInstr *mi, MachineInstr *newMI)"
  },
  {
    "label": "miEntry()",
    "kind": "Method",
    "detail": "Function (SlotIndex replaceBaseIndex = mi2iItr -> second ; IndexListEntry*)",
    "insertText": "miEntry(replaceBaseIndex.listEntry())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(miEntry->getInstr() == mi && \"Mismatched instruction in index tables.\")"
  },
  {
    "label": "setInstr()",
    "kind": "Method",
    "detail": "Function (miEntry ->)",
    "insertText": "setInstr(newMI)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (mi2iMap .)",
    "insertText": "insert(std::make_pair(newMI, replaceBaseIndex))"
  },
  {
    "label": "insertMBBInMaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insertMBBInMaps(MachineBasicBlock *mbb)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (MachineFunction::iterator nextMBB =)",
    "insertText": "next(MachineFunction::iterator(mbb))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexListEntry* startEntry = nullptr ; IndexListEntry* endEntry = nullptr ; IndexList::iterator newItr ;)",
    "insertText": "if(nextMBB == mbb->getParent()->end())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (startEntry =& indexList .)",
    "insertText": "back()"
  },
  {
    "label": "createEntry()",
    "kind": "Method",
    "detail": "Function (endEntry =)",
    "insertText": "createEntry(nullptr, 0)"
  },
  {
    "label": "insertAfter()",
    "kind": "Method",
    "detail": "Function (newItr = indexList .)",
    "insertText": "insertAfter(startEntry, endEntry)"
  },
  {
    "label": "getMBBStartIdx()",
    "kind": "Method",
    "detail": "Function (endEntry =)",
    "insertText": "getMBBStartIdx(nextMBB).listEntry()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (newItr = indexList .)",
    "insertText": "insert(endEntry, startEntry)"
  },
  {
    "label": "startIdx()",
    "kind": "Method",
    "detail": "Function (} SlotIndex)",
    "insertText": "startIdx(startEntry, SlotIndex::Slot_Block)"
  },
  {
    "label": "endIdx()",
    "kind": "Method",
    "detail": "Function (SlotIndex)",
    "insertText": "endIdx(endEntry, SlotIndex::Slot_Block)"
  },
  {
    "label": "prevMBB()",
    "kind": "Method",
    "detail": "Function (MachineFunction::iterator)",
    "insertText": "prevMBB(mbb)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(prevMBB != mbb->getParent()->end() && \"Can't insert a new block at the beginning of a function.\")"
  },
  {
    "label": "getNumber()",
    "kind": "Method",
    "detail": "Function (- - prevMBB ; MBBRanges [ prevMBB ->)",
    "insertText": "getNumber()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(unsigned(mbb->getNumber()) == MBBRanges.size() && \"Blocks must be added in order\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (MBBRanges .)",
    "insertText": "push_back(std::make_pair(startIdx, endIdx))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (idx2MBBMap .)",
    "insertText": "push_back(IdxMBBPair(startIdx, mbb))"
  },
  {
    "label": "renumberIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "renumberIndexes(newItr)"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sort(idx2MBBMap.begin(), idx2MBBMap.end(), Idx2MBBCompare())"
  },
  {
    "label": "eraseIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eraseIndex(SlotIndex index)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (# ifdef EXPENSIVE_CHECKS indexList .)",
    "insertText": "remove(entry)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (graveyardList .)",
    "insertText": "push_back(entry)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (# else indexList .)",
    "insertText": "erase(entry)"
  }
]