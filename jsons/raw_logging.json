[
  {
    "label": "ABSL_RAW_LOG()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_RAW_LOGGING_H_ # define ABSL_BASE_INTERNAL_RAW_LOGGING_H_ # include<string> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / internal / atomic_hook . h \" # include \" absl / base / log_severity . h \" # include \" absl / base / macros . h \" # include \" absl / base / optimization . h \" # include \" absl / base / port . h \" # define)",
    "insertText": "ABSL_RAW_LOG(severity, ...)"
  },
  {
    "label": "Basename()",
    "kind": "Method",
    "detail": "Function (\\ const char* absl_raw_log_internal_basename = \\::absl::)",
    "insertText": "Basename(__FILE__, sizeof(__FILE__) - 1)"
  },
  {
    "label": "RawLog()",
    "kind": "Method",
    "detail": "Function (\\::absl::)",
    "insertText": "RawLog(ABSL_RAW_LOG_INTERNAL_##severity, \\ absl_raw_log_internal_basename, __LINE__, \\ __VA_ARGS__)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define ABSL_RAW_CHECK(condition, message)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ABSL_PREDICT_FALSE(!(condition)))"
  },
  {
    "label": "ABSL_RAW_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_RAW_LOG(FATAL, \"Check %s failed: %s\", #condition, message)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define ABSL_INTERNAL_LOG(severity, message)"
  },
  {
    "label": "internal_log_function()",
    "kind": "Method",
    "detail": "Function (\\ const char* absl_raw_log_internal_filename = __FILE__ ; \\::absl::)",
    "insertText": "internal_log_function(\\ ABSL_RAW_LOG_INTERNAL_##severity, absl_raw_log_internal_filename, \\ __LINE__, message)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(ABSL_RAW_LOG_INTERNAL_##severity == ::absl::LogSeverity::kFatal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define ABSL_INTERNAL_CHECK(condition, message)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (\\ std::string death_message = \" Check \" # condition \" failed : \" ; \\ death_message + =)",
    "insertText": "string(message)"
  },
  {
    "label": "ABSL_INTERNAL_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_LOG(FATAL, death_message)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define ABSL_RAW_LOG_INTERNAL_INFO ::absl::LogSeverity::kInfo #define ABSL_RAW_LOG_INTERNAL_WARNING ::absl::LogSeverity::kWarning #define ABSL_RAW_LOG_INTERNAL_ERROR ::absl::LogSeverity::kError #define ABSL_RAW_LOG_INTERNAL_FATAL ::absl::LogSeverity::kFatal #define ABSL_RAW_LOG_INTERNAL_LEVEL(severity) \\ ::absl::NormalizeLogSeverity(severity)"
  },
  {
    "label": "RawLog()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace raw_log_internal { void)",
    "insertText": "RawLog(absl::LogSeverity severity, const char* file, int line, const char* format, ...) ABSL_PRINTF_ATTRIBUTE(4, 5)"
  },
  {
    "label": "AsyncSignalSafeWriteToStderr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncSignalSafeWriteToStderr(const char* s, size_t len)"
  },
  {
    "label": "Basename()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Basename(const char* fname, int offset)"
  },
  {
    "label": "RawLoggingFullySupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RawLoggingFullySupported()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using LogFilterAndPrefixHook =)",
    "insertText": "bool(*)(absl::LogSeverity severity, const char* file, int line, char** buf, int* buf_size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using AbortHook =)",
    "insertText": "void(*)(const char* file, int line, const char* buf_start, const char* prefix_end, const char* buf_end)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using InternalLogFunction =)",
    "insertText": "void(*)(absl::LogSeverity severity, const char* file, int line, const std::string& message)"
  },
  {
    "label": "RegisterLogFilterAndPrefixHook()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_ATOMIC_HOOK_ATTRIBUTES ABSL_DLL base_internal::AtomicHook<InternalLogFunction> internal_log_function ; void)",
    "insertText": "RegisterLogFilterAndPrefixHook(LogFilterAndPrefixHook func)"
  },
  {
    "label": "RegisterAbortHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAbortHook(AbortHook func)"
  },
  {
    "label": "RegisterInternalLogFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInternalLogFunction(InternalLogFunction func)"
  }
]