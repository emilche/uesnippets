[
  {
    "label": "SignalMan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SignalMan"
  },
  {
    "label": "Signaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Signaler"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifdef OS_NT typedef void* HANDLE ; # else # ifdef HAS_CPP11 # include<memory> # include<mutex> # endif # endif struct SignalMan ; typedef)",
    "insertText": "void(*SignalFunc)( void *ptr)"
  },
  {
    "label": "Signaler()",
    "kind": "Method",
    "detail": "Function (class Signaler { public :)",
    "insertText": "Signaler()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Block()"
  },
  {
    "label": "Catch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Catch()"
  },
  {
    "label": "Disable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disable()"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetState()"
  },
  {
    "label": "IsIntr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntr()"
  },
  {
    "label": "OnIntr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIntr(SignalFunc callback, void *ptr)"
  },
  {
    "label": "DeleteOnIntr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteOnIntr(void *ptr)"
  },
  {
    "label": "Intr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intr()"
  },
  {
    "label": "GetMutex()",
    "kind": "Method",
    "detail": "Function (private : SignalMan* list ; int disable ; bool isIntr ; # ifdef OS_NT HANDLE hmutex ; # else # ifdef HAS_CPP11 std::mutex* mutex ; std::mutex&)",
    "insertText": "GetMutex()"
  }
]