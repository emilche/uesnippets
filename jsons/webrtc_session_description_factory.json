[
  {
    "label": "WebRtcSessionDescriptionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcSessionDescriptionFactory"
  },
  {
    "label": "CertificateRequestState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CertificateRequestState"
  },
  {
    "label": "CreateSessionDescriptionRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateSessionDescriptionRequest"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "WebRtcSessionDescriptionFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_WEBRTC_SESSION_DESCRIPTION_FACTORY_H_ # define PC_WEBRTC_SESSION_DESCRIPTION_FACTORY_H_ # include<stdint . h> # include<functional> # include<memory> # include<queue> # include<string> # include \" absl / functional / any_invocable . h \" # include \" api / jsep . h \" # include \" api / peer_connection_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_base . h \" # include \" p2p / base / transport_description . h \" # include \" p2p / base / transport_description_factory . h \" # include \" pc / media_session . h \" # include \" pc / sdp_state_provider . h \" # include \" rtc_base / rtc_certificate . h \" # include \" rtc_base / rtc_certificate_generator . h \" # include \" rtc_base / unique_id_generator . h \" # include \" rtc_base / weak_ptr . h \" namespace webrtc { class WebRtcSessionDescriptionFactory { public :)",
    "insertText": "WebRtcSessionDescriptionFactory(ConnectionContext* context, const SdpStateProvider* sdp_info, const std::string& session_id, bool dtls_enabled, std::unique_ptr<rtc::RTCCertificateGeneratorInterface> cert_generator, rtc::scoped_refptr<rtc::RTCCertificate> certificate, std::function<void(const rtc::scoped_refptr<rtc::RTCCertificate>&)> on_certificate_ready, const FieldTrialsView& field_trials)"
  },
  {
    "label": "WebRtcSessionDescriptionFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WebRtcSessionDescriptionFactory()"
  },
  {
    "label": "WebRtcSessionDescriptionFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WebRtcSessionDescriptionFactory(const WebRtcSessionDescriptionFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WebRtcSessionDescriptionFactory&)",
    "insertText": "operator(const WebRtcSessionDescriptionFactory&)"
  },
  {
    "label": "CopyCandidatesFromSessionDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCandidatesFromSessionDescription(const SessionDescriptionInterface* source_desc, const std::string& content_name, SessionDescriptionInterface* dest_desc)"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOffer(CreateSessionDescriptionObserver* observer, const PeerConnectionInterface::RTCOfferAnswerOptions& options, const cricket::MediaSessionOptions& session_options)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAnswer(CreateSessionDescriptionObserver* observer, const cricket::MediaSessionOptions& session_options)"
  },
  {
    "label": "SetSdesPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSdesPolicy(cricket::SecurePolicy secure_policy)"
  },
  {
    "label": "SdesPolicy()",
    "kind": "Method",
    "detail": "Function (cricket::SecurePolicy)",
    "insertText": "SdesPolicy()"
  },
  {
    "label": "set_enable_encrypted_rtp_header_extensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_enable_encrypted_rtp_header_extensions(bool enable)"
  },
  {
    "label": "set_enable_encrypted_rtp_header_extensions()",
    "kind": "Method",
    "detail": "Function (session_desc_factory_ .)",
    "insertText": "set_enable_encrypted_rtp_header_extensions(enable)"
  },
  {
    "label": "set_is_unified_plan()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_is_unified_plan(bool is_unified_plan)"
  },
  {
    "label": "set_is_unified_plan()",
    "kind": "Method",
    "detail": "Function (session_desc_factory_ .)",
    "insertText": "set_is_unified_plan(is_unified_plan)"
  },
  {
    "label": "waiting_for_certificate_for_testing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "waiting_for_certificate_for_testing()"
  },
  {
    "label": "InternalCreateOffer()",
    "kind": "Method",
    "detail": "Function (} Type type ; rtc::scoped_refptr<CreateSessionDescriptionObserver> observer ; cricket::MediaSessionOptions options ; } ; void)",
    "insertText": "InternalCreateOffer(CreateSessionDescriptionRequest request)"
  },
  {
    "label": "InternalCreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalCreateAnswer(CreateSessionDescriptionRequest request)"
  },
  {
    "label": "FailPendingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailPendingRequests(const std::string& reason)"
  },
  {
    "label": "PostCreateSessionDescriptionFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreateSessionDescriptionFailed(CreateSessionDescriptionObserver* observer, const std::string& error)"
  },
  {
    "label": "PostCreateSessionDescriptionSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCreateSessionDescriptionSucceeded(CreateSessionDescriptionObserver* observer, std::unique_ptr<SessionDescriptionInterface> description)"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Post(absl::AnyInvocable<void() &&> callback)"
  },
  {
    "label": "OnCertificateRequestFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCertificateRequestFailed()"
  },
  {
    "label": "SetCertificate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCertificate(rtc::scoped_refptr<rtc::RTCCertificate> certificate)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::queue<CreateSessionDescriptionRequest> create_session_description_requests_ ; TaskQueueBase* const signaling_thread_ ; cricket::TransportDescriptionFactory transport_desc_factory_ ; cricket::MediaSessionDescriptionFactory session_desc_factory_ ; uint64_t session_version_ ; const std::unique_ptr<rtc::RTCCertificateGeneratorInterface> cert_generator_ ; const SdpStateProvider* sdp_info_ ; const std::string session_id_ ; CertificateRequestState certificate_request_state_ ; std::queue<absl::AnyInvocable<)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void(const rtc::scoped_refptr<rtc::RTCCertificate>&)"
  }
]