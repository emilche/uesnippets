[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IPluginWardenModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPluginWardenModule"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" enum class EEntitlementCacheLevelRequest : uint8 ; class IPluginWardenModule : public IModuleInterface { public : IPluginWardenModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "CheckEntitlementForPlugin()",
    "kind": "Method",
    "detail": "Function (} enum class EUnauthorizedErrorHandling { Silent,ShowMessage,ShowMessageOpenStore } ; void)",
    "insertText": "CheckEntitlementForPlugin(const FText& PluginFriendlyName, const FString& PluginItemId, const FString& PluginOfferId, const EEntitlementCacheLevelRequest CacheLevel, const FText& UnauthorizedMessageOverride, EUnauthorizedErrorHandling UnauthorizedErrorHandling, TFunction<void()> AuthorizedCallback)"
  },
  {
    "label": "CheckEntitlementForPlugin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckEntitlementForPlugin(const FText& PluginFriendlyName, const FString& PluginItemId, const FString& PluginOfferId, const FText& UnauthorizedMessageOverride, EUnauthorizedErrorHandling UnauthorizedErrorHandling, TFunction<void()> AuthorizedCallback)"
  }
]