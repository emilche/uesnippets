[
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "ULocalMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalMessage"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "AGameMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameMode"
  },
  {
    "label": "ULocalMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalMessage"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "defines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "defines"
  },
  {
    "label": "StartMatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartMatch()"
  },
  {
    "label": "EndMatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndMatch()"
  },
  {
    "label": "RestartGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartGame()"
  },
  {
    "label": "AbortMatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortMatch()"
  },
  {
    "label": "SetMatchState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMatchState(FName NewState)"
  },
  {
    "label": "OnMatchStateSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMatchStateSet()"
  },
  {
    "label": "K2_OnSetMatchState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnSetMatchState(FName NewState)"
  },
  {
    "label": "HandleMatchIsWaitingToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchIsWaitingToStart()"
  },
  {
    "label": "ReadyToStartMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToStartMatch()"
  },
  {
    "label": "HandleMatchHasStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchHasStarted()"
  },
  {
    "label": "ReadyToEndMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToEndMatch()"
  },
  {
    "label": "HandleMatchHasEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchHasEnded()"
  },
  {
    "label": "HandleLeavingMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLeavingMap()"
  },
  {
    "label": "HandleMatchAborted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMatchAborted()"
  },
  {
    "label": "GetNetworkNumber()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNetworkNumber()"
  },
  {
    "label": "PlayerSwitchedToSpectatorOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayerSwitchedToSpectatorOnly(APlayerController* PC)"
  },
  {
    "label": "RemovePlayerControllerFromPlayerCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlayerControllerFromPlayerCount(APlayerController* PC)"
  },
  {
    "label": "GetTravelType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTravelType()"
  },
  {
    "label": "Say()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Say(const FString& Msg)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast( AActor* Sender, const FString& Msg, FName Type = NAME_None )"
  },
  {
    "label": "BroadcastLocalized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastLocalized( AActor* Sender, TSubclassOf<ULocalMessage> Message, int32 Switch = 0, APlayerState* RelatedPlayerState_1 = NULL, APlayerState* RelatedPlayerState_2 = NULL, UObject* OptionalObject = NULL )"
  },
  {
    "label": "AddInactivePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInactivePlayer(APlayerState* PlayerState, APlayerController* PC)"
  },
  {
    "label": "FindInactivePlayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindInactivePlayer(APlayerController* PC)"
  },
  {
    "label": "OverridePlayerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlayerState(APlayerController* PC, APlayerState* OldPlayerState)"
  },
  {
    "label": "SetSeamlessTravelViewTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSeamlessTravelViewTarget(APlayerController* PC)"
  },
  {
    "label": "PreCommitMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreCommitMapChange(const FString& PreviousMapName, const FString& NextMapName)"
  },
  {
    "label": "PostCommitMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCommitMapChange()"
  },
  {
    "label": "NotifyPendingConnectionLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPendingConnectionLost(const FUniqueNetIdRepl& ConnectionUniqueId)"
  },
  {
    "label": "HandleDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisconnect(UWorld* InWorld, UNetDriver* NetDriver)"
  }
]