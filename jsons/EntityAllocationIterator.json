[
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FEntityAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocation"
  },
  {
    "label": "FEntityAllocationIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationIterator"
  },
  {
    "label": "FEntityAllocationIteratorProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocationIteratorProxy"
  },
  {
    "label": "FEntityAllocationIterator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" namespace UE { namespace MovieScene { class FEntityManager ; struct FEntityAllocation ; struct FEntityAllocationIterator ; using FEntityAllocationIteratorItem = FEntityAllocationProxy ; struct FEntityAllocationIterator {)",
    "insertText": "FEntityAllocationIterator(const FEntityManager* InManager)"
  },
  {
    "label": "FEntityAllocationIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityAllocationIterator(const FEntityManager* InManager, const FEntityComponentFilter* InFilter)"
  },
  {
    "label": "FEntityAllocationIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityAllocationIterator(FEntityAllocationIterator&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationIterator&)",
    "insertText": "operator(FEntityAllocationIterator&&)"
  },
  {
    "label": "FEntityAllocationIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEntityAllocationIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEntityAllocationIteratorItem)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FEntityAllocationIterator& Other)"
  },
  {
    "label": "FindMatchingAllocationStartingAt()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "FindMatchingAllocationStartingAt(int32 Index)"
  },
  {
    "label": "FEntityAllocationIteratorProxy()",
    "kind": "Method",
    "detail": "Function (const FEntityComponentFilter* Filter ; const FEntityManager* Manager ; int32 AllocationIndex ; } ; struct FEntityAllocationIteratorProxy {)",
    "insertText": "FEntityAllocationIteratorProxy(const FEntityManager* InManager, const FEntityComponentFilter* InFilter) : Manager(InManager), Filter(InFilter)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} FEntityAllocationIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FEntityAllocationIterator)",
    "insertText": "end()"
  }
]