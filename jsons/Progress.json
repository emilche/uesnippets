[
  {
    "label": "FProgress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgress"
  },
  {
    "label": "FProgressBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressBase"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FProgressManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressManager"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" namespace UE::CADKernel { class FProgress ; class FProgressBase ; class FProgressManager { class FProgress ; protected : FProgress* RootProgress ; FProgress* CurrentProgress ; FProgress*)",
    "insertText": "GetRoot()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update()"
  },
  {
    "label": "GetProgression()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetProgression()"
  },
  {
    "label": "GetCurrentStep()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentStep()"
  },
  {
    "label": "SetCurrentProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentProgress(FProgress* InProgress)"
  },
  {
    "label": "GetCurrentProgress()",
    "kind": "Method",
    "detail": "Function (FProgress*)",
    "insertText": "GetCurrentProgress()"
  },
  {
    "label": "FProgress()",
    "kind": "Method",
    "detail": "Function (} } ; class FProgress { class FProgressManager ; private : FString Name ; FProgress* Parent = nullptr ; FProgress* UnderlyingProgress = nullptr ; int32 StepCount ; int32 Progression = 0 ; public :)",
    "insertText": "FProgress(int32 InStepCount, const FString& InStepName = FString())"
  },
  {
    "label": "FProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProgress(const FString& StepName = FString()) : FProgress(1, StepName)"
  },
  {
    "label": "FProgress()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FProgress()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "IsRoot()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsRoot()"
  },
  {
    "label": "UnderlyingFinished()",
    "kind": "Method",
    "detail": "Function (UnderlyingProgress = Progress ; } void)",
    "insertText": "UnderlyingFinished(FProgress* Progress)"
  },
  {
    "label": "GetProgression()",
    "kind": "Method",
    "detail": "Function (Ratio + = UnderlyingProgress ->)",
    "insertText": "GetProgression() / (double)"
  }
]