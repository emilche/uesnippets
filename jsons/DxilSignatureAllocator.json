[
  {
    "label": "DxilSignatureAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignatureAllocator"
  },
  {
    "label": "PackElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PackElement"
  },
  {
    "label": "DummyElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DummyElement"
  },
  {
    "label": "ConflictType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConflictType"
  },
  {
    "label": "PackedRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PackedRegister"
  },
  {
    "label": "PackElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilConstants . h \" # include<vector> namespace hlsl { class DxilSignatureAllocator { public : class PackElement { public : ~)",
    "insertText": "PackElement()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "GetID()"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (DXIL::SemanticKind)",
    "insertText": "GetKind()"
  },
  {
    "label": "GetInterpolationMode()",
    "kind": "Method",
    "detail": "Function (DXIL::InterpolationMode)",
    "insertText": "GetInterpolationMode()"
  },
  {
    "label": "GetInterpretation()",
    "kind": "Method",
    "detail": "Function (DXIL::SemanticInterpretationKind)",
    "insertText": "GetInterpretation()"
  },
  {
    "label": "GetDataBitWidth()",
    "kind": "Method",
    "detail": "Function (DXIL::SignatureDataWidth)",
    "insertText": "GetDataBitWidth()"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRows()"
  },
  {
    "label": "GetCols()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCols()"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllocated()"
  },
  {
    "label": "GetStartRow()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetStartRow()"
  },
  {
    "label": "GetStartCol()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetStartCol()"
  },
  {
    "label": "ClearLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLocation()"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocation(uint32_t StartRow, uint32_t StartCol)"
  },
  {
    "label": "DummyElement()",
    "kind": "Method",
    "detail": "Function (} ; class DummyElement : public PackElement { public : uint32_t id ; uint32_t rows,cols ; uint32_t row,col ; DXIL::SemanticKind kind ; DXIL::InterpolationMode interpolation ; DXIL::SemanticInterpretationKind interpretation ; DXIL::SignatureDataWidth dataBitWidth ; uint32_t indexFlags ; public :)",
    "insertText": "DummyElement(uint32_t index = 0) : id(index), rows(1), cols(1), row((uint32_t)-1), col((uint32_t)-1), kind(DXIL::SemanticKind::Arbitrary), interpolation(DXIL::InterpolationMode::Undefined), interpretation(DXIL::SemanticInterpretationKind::Arb), dataBitWidth(DXIL::SignatureDataWidth::Undefined), indexFlags(0)"
  },
  {
    "label": "DummyElement()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DummyElement()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (row =)",
    "insertText": "col(uint32_t)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocation(uint32_t Row, uint32_t Col)"
  },
  {
    "label": "GetIndexFlags()",
    "kind": "Method",
    "detail": "Function (row = Row ; col = Col ; } } ; const uint8_t kIndexedUp = 1<<0 ; const uint8_t kIndexedDown = 1<<1 ; uint8_t)",
    "insertText": "GetIndexFlags(unsigned row, unsigned rows)"
  },
  {
    "label": "GetElementFlags()",
    "kind": "Method",
    "detail": "Function (} const uint8_t kEFOccupied = 1<<0 ; const uint8_t kEFArbitrary = 1<<1 ; const uint8_t kEFSGV = 1<<2 ; const uint8_t kEFSV = 1<<3 ; const uint8_t kEFTessFactor = 1<<4 ; const uint8_t kEFClipCull = 1<<5 ; const uint8_t kEFConflictsWithIndexed = kEFSGV | kEFSV ; uint8_t)",
    "insertText": "GetElementFlags(const PackElement *SE)"
  },
  {
    "label": "GetConflictFlagsLeft()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetConflictFlagsLeft(uint8_t flags)"
  },
  {
    "label": "GetConflictFlagsRight()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetConflictFlagsRight(uint8_t flags)"
  },
  {
    "label": "PackedRegister()",
    "kind": "Method",
    "detail": "Function (enum ConflictType { kNoConflict = 0,kConflictsWithIndexed,kConflictsWithIndexedTessFactor,kConflictsWithInterpolationMode,kInsufficientFreeComponents,kOverlapElement,kIllegalComponentOrder,kConflictFit,kConflictDataWidth,} ; struct PackedRegister { uint8_t Flags [ 4 ] ; DXIL::InterpolationMode Interp : 8 ; uint8_t IndexFlags : 2 ; uint8_t IndexingFixed : 1 ; DXIL::SignatureDataWidth DataWidth ;)",
    "insertText": "PackedRegister()"
  },
  {
    "label": "DetectRowConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectRowConflict(uint8_t flags, uint8_t indexFlags, DXIL::InterpolationMode interp, unsigned width, DXIL::SignatureDataWidth dataWidth)"
  },
  {
    "label": "DetectColConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectColConflict(uint8_t flags, unsigned col, unsigned width)"
  },
  {
    "label": "PlaceElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaceElement(uint8_t flags, uint8_t indexFlags, DXIL::InterpolationMode interp, unsigned col, unsigned width, DXIL::SignatureDataWidth dataWidth)"
  },
  {
    "label": "DxilSignatureAllocator()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DxilSignatureAllocator(unsigned numRegisters, bool useMinPrecision)"
  },
  {
    "label": "GetIgnoreIndexing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreIndexing()"
  },
  {
    "label": "DetectRowConflict()",
    "kind": "Method",
    "detail": "Function (m_bIgnoreIndexing = ignoreIndexing ; } ConflictType)",
    "insertText": "DetectRowConflict(const PackElement *SE, unsigned row)"
  },
  {
    "label": "DetectColConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectColConflict(const PackElement *SE, unsigned row, unsigned col)"
  },
  {
    "label": "PlaceElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaceElement(const PackElement *SE, unsigned row, unsigned col)"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "FindNext(unsigned &foundRow, unsigned &foundCol, PackElement *SE, unsigned startRow, unsigned numRows, unsigned startCol = 0)"
  },
  {
    "label": "PackNext()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackNext(PackElement *SE, unsigned startRow, unsigned numRows, unsigned startCol = 0)"
  },
  {
    "label": "PackGreedy()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackGreedy(std::vector<PackElement *> elements, unsigned startRow, unsigned numRows, unsigned startCol = 0)"
  },
  {
    "label": "PackOptimized()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackOptimized(std::vector<PackElement *> elements, unsigned startRow, unsigned numRows)"
  },
  {
    "label": "PackPrefixStable()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackPrefixStable(std::vector<PackElement *> elements, unsigned startRow, unsigned numRows)"
  },
  {
    "label": "UseMinPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMinPrecision()"
  }
]