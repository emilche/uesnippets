[
  {
    "label": "DxilSignatureAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignatureAllocator"
  },
  {
    "label": "PackElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PackElement"
  },
  {
    "label": "DummyElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DummyElement"
  },
  {
    "label": "ConflictType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConflictType"
  },
  {
    "label": "PackedRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PackedRegister"
  },
  {
    "label": "GetElementFlags()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetElementFlags(const PackElement *SE)"
  },
  {
    "label": "GetConflictFlagsLeft()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetConflictFlagsLeft(uint8_t flags)"
  },
  {
    "label": "GetConflictFlagsRight()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetConflictFlagsRight(uint8_t flags)"
  },
  {
    "label": "DetectRowConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectRowConflict(uint8_t flags, uint8_t indexFlags,\n                                   DXIL::InterpolationMode interp,\n                                   unsigned width,\n                                   DXIL::SignatureDataWidth dataWidth)"
  },
  {
    "label": "DetectColConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectColConflict(uint8_t flags, unsigned col, unsigned width)"
  },
  {
    "label": "PlaceElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaceElement(uint8_t flags, uint8_t indexFlags,\n                      DXIL::InterpolationMode interp, unsigned col,\n                      unsigned width, DXIL::SignatureDataWidth dataWidth)"
  },
  {
    "label": "DetectRowConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectRowConflict(const PackElement *SE, unsigned row)"
  },
  {
    "label": "DetectColConflict()",
    "kind": "Method",
    "detail": "Function (ConflictType)",
    "insertText": "DetectColConflict(const PackElement *SE, unsigned row,\n                                 unsigned col)"
  },
  {
    "label": "PlaceElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaceElement(const PackElement *SE, unsigned row, unsigned col)"
  },
  {
    "label": "FindNext()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "FindNext(unsigned &foundRow, unsigned &foundCol, PackElement *SE,\n                    unsigned startRow, unsigned numRows, unsigned startCol = 0)"
  },
  {
    "label": "PackNext()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackNext(PackElement *SE, unsigned startRow, unsigned numRows,\n                    unsigned startCol = 0)"
  },
  {
    "label": "PackGreedy()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackGreedy(std::vector<PackElement *> elements, unsigned startRow,\n                      unsigned numRows, unsigned startCol = 0)"
  },
  {
    "label": "PackOptimized()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackOptimized(std::vector<PackElement *> elements, unsigned startRow,\n                         unsigned numRows)"
  },
  {
    "label": "PackPrefixStable()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "PackPrefixStable(std::vector<PackElement *> elements,\n                            unsigned startRow, unsigned numRows)"
  }
]