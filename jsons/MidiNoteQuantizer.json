[
  {
    "label": "Scale",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Scale"
  },
  {
    "label": "ScaleDegreeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScaleDegreeSet"
  },
  {
    "label": "FMidiNoteQuantizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMidiNoteQuantizer"
  },
  {
    "label": "FMidNoteQuantizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMidNoteQuantizer"
  },
  {
    "label": "ScaleDegreeSet()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "ScaleDegreeSet(const TArray<float>& InScaleDegrees, const TArray<float>& InChordTones = {})"
  },
  {
    "label": "GetScaleDegreeSet()",
    "kind": "Method",
    "detail": "Function (TArrayView<float>)",
    "insertText": "GetScaleDegreeSet(bool bChordTonesOnlyIfApplicable = false)"
  },
  {
    "label": "QuantizeMidiNote()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "QuantizeMidiNote(const float InNote, const float InRoot, EMusicalScale::Scale InScale, bool bChordTonesOnlyIfApplicable = false)"
  },
  {
    "label": "QuantizeMidiNote()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "QuantizeMidiNote(const float InNote, const float InRoot, const TArrayView<float> InScaleDegrees, const float InSemitoneScaleRange = 12.0f)"
  },
  {
    "label": "QuantizeValueToScaleDegree()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "QuantizeValueToScaleDegree(const float InValue, const TArrayView<float> InScaleDegrees, const float InSemitoneScaleRange = 12.0f)"
  }
]