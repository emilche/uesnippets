[
  {
    "label": "Scale",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Scale"
  },
  {
    "label": "ScaleDegreeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScaleDegreeSet"
  },
  {
    "label": "FMidiNoteQuantizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMidiNoteQuantizer"
  },
  {
    "label": "ScaleDegreeSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { namespace EMusicalScale { enum Scale { Major,Minor_Dorian,Phrygian,Lydian,Dominant7th_Mixolydian,NaturalMinor_Aeolian,HalfDiminished_Locrian,Chromatic,WholeTone,DiminishedWholeTone,MajorPentatonic,MinorPentatonic,Blues,Bebop_Major,Bebop_Minor,Bebop_MinorNumber2,Bebop_Dominant,HarmonicMajor,HarmonicMinor,MelodicMinor,SixthModeOfHarmonicMinor,LydianAugmented,LydianDominant,Augmented,Diminished,Diminished_BeginWithHalfStep,Diminished_BeginWithWholeStep,HalfDiminished_LocrianNumber2,Spanish_or_Jewish,Hindu,Count } ; } struct ScaleDegreeSet { public :)",
    "insertText": "ScaleDegreeSet(const TArray<float>& InScaleDegrees, const TArray<float>& InChordTones = {})"
  },
  {
    "label": "GetScaleDegreeSet()",
    "kind": "Method",
    "detail": "Function (TArrayView<float>)",
    "insertText": "GetScaleDegreeSet(bool bChordTonesOnlyIfApplicable = false)"
  },
  {
    "label": "QuantizeMidiNote()",
    "kind": "Method",
    "detail": "Function (private : TArray<float> ScaleDegrees ; TArray<float> ChordTones ; } ; class FMidiNoteQuantizer { public : float)",
    "insertText": "QuantizeMidiNote(const float InNote, const float InRoot, EMusicalScale::Scale InScale, bool bChordTonesOnlyIfApplicable = false)"
  },
  {
    "label": "QuantizeMidiNote()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "QuantizeMidiNote(const float InNote, const float InRoot, const TArrayView<float> InScaleDegrees, const float InSemitoneScaleRange = 12.0f)"
  },
  {
    "label": "QuantizeValueToScaleDegree()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "QuantizeValueToScaleDegree(const float InValue, const TArrayView<float> InScaleDegrees, const float InSemitoneScaleRange = 12.0f)"
  }
]