[
  {
    "label": "FClangPlatformMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClangPlatformMath"
  },
  {
    "label": "CountLeadingZeros8()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GenericPlatform / GenericPlatformMath . h \" struct FClangPlatformMath : public FGenericPlatformMath { uint8)",
    "insertText": "CountLeadingZeros8(uint8 Value)"
  },
  {
    "label": "CountLeadingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountLeadingZeros(uint32 Value)"
  },
  {
    "label": "CountLeadingZeros64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "CountLeadingZeros64(uint64 Value)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountTrailingZeros(uint32 Value)"
  },
  {
    "label": "CountTrailingZeros64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "CountTrailingZeros64(uint64 Value)"
  },
  {
    "label": "FloorLog2()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FloorLog2(uint32 Value)"
  },
  {
    "label": "FloorLog2NonZero()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FloorLog2NonZero(uint32 Value)"
  },
  {
    "label": "FloorLog2_64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "FloorLog2_64(uint64 Value)"
  },
  {
    "label": "FloorLog2NonZero_64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "FloorLog2NonZero_64(uint64 Value)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<IntType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<IntType>) > static FORCEINLINE bool AddAndCheckForOverflow(IntType A, IntType B, IntType& OutResult)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<IntType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<IntType>) > static FORCEINLINE bool SubtractAndCheckForOverflow(IntType A, IntType B, IntType& OutResult)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<IntType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<IntType>) > static FORCEINLINE bool MultiplyAndCheckForOverflow(IntType A, IntType B, IntType& OutResult)"
  }
]