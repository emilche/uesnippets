[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FCollectionItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollectionItem"
  },
  {
    "label": "FCollectionContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionContextMenu"
  },
  {
    "label": "FCollectionContextMenu()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CollectionManagerTypes . h \" # include \" Containers / Array . h \" # include \" Input / Reply . h \" # include \" Math / Color . h \" # include \" SCollectionView . h \" # include \" Templates / SharedPointer . h \" class FMenuBuilder ; class FText ; class FUICommandList ; class SWidget ; struct FCollectionItem ; class FCollectionContextMenu : public TSharedFromThis<FCollectionContextMenu> { public :)",
    "insertText": "FCollectionContextMenu(const TWeakPtr<SCollectionView>& InCollectionView)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands(TSharedPtr< FUICommandList > InCommandList)"
  },
  {
    "label": "MakeCollectionTreeContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeCollectionTreeContextMenu(TSharedPtr< FUICommandList > InCommandList)"
  },
  {
    "label": "MakeNewCollectionSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNewCollectionSubMenu(FMenuBuilder& MenuBuilder, ECollectionStorageMode::Type StorageMode, SCollectionView::FCreateCollectionPayload InCreationPayload)"
  },
  {
    "label": "MakeSaveDynamicCollectionSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSaveDynamicCollectionSubMenu(FMenuBuilder& MenuBuilder, FText InSearchQuery)"
  },
  {
    "label": "MakeCollectionShareTypeSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCollectionShareTypeSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "UpdateProjectSourceControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProjectSourceControl()"
  },
  {
    "label": "CanRenameSelectedCollections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameSelectedCollections()"
  },
  {
    "label": "MakeSetColorSubMenu()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MakeSetColorSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ExecuteNewCollection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ExecuteNewCollection(ECollectionShareType::Type CollectionType, ECollectionStorageMode::Type StorageMode, SCollectionView::FCreateCollectionPayload InCreationPayload)"
  },
  {
    "label": "ExecuteSetCollectionShareType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteSetCollectionShareType(ECollectionShareType::Type CollectionType)"
  },
  {
    "label": "ExecuteSaveDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteSaveDynamicCollection(FCollectionNameType InCollection, FText InSearchQuery)"
  },
  {
    "label": "ExecuteRenameCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteRenameCollection()"
  },
  {
    "label": "ExecuteUpdateCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteUpdateCollection()"
  },
  {
    "label": "ExecuteRefreshCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteRefreshCollection()"
  },
  {
    "label": "ExecuteSaveCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteSaveCollection()"
  },
  {
    "label": "ExecuteDestroyCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteDestroyCollection()"
  },
  {
    "label": "ExecuteDestroyCollectionConfirmed()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "ExecuteDestroyCollectionConfirmed(TArray<TSharedPtr<FCollectionItem>> CollectionList)"
  },
  {
    "label": "ExecuteResetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteResetColor()"
  },
  {
    "label": "ExecutePickColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePickColor()"
  },
  {
    "label": "CanExecuteNewCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteNewCollection(ECollectionShareType::Type CollectionType, bool bIsValidChildType)"
  },
  {
    "label": "CanExecuteSetCollectionShareType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteSetCollectionShareType(ECollectionShareType::Type CollectionType)"
  },
  {
    "label": "IsSetCollectionShareTypeChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetCollectionShareTypeChecked(ECollectionShareType::Type CollectionType)"
  },
  {
    "label": "CanExecuteSaveDynamicCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteSaveDynamicCollection(FCollectionNameType InCollection)"
  },
  {
    "label": "CanExecuteRenameCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteRenameCollection()"
  },
  {
    "label": "CanExecuteDestroyCollection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteDestroyCollection(bool bAnyManagedBySCC)"
  },
  {
    "label": "SelectedHasCustomColors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectedHasCustomColors()"
  },
  {
    "label": "CanExecuteColorChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteColorChange()"
  },
  {
    "label": "OnColorClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnColorClicked(const FLinearColor InColor)"
  },
  {
    "label": "OnColorCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorCommitted(const FLinearColor InColor)"
  },
  {
    "label": "ResetColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetColors()"
  }
]