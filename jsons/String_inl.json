[
  {
    "label": "CBasicString()",
    "kind": "Method",
    "detail": "Function (template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "CBasicString()"
  },
  {
    "label": "SetHeapDescription()",
    "kind": "Method",
    "detail": "Function (CArray<char,bUseCustomAllocator)",
    "insertText": "SetHeapDescription(\"CString\")"
  },
  {
    "label": "CBasicString()",
    "kind": "Method",
    "detail": "Function (* this = \" \" ; } template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "CBasicString(const CBasicString& cCopy) : CArray<char, bUseCustomAllocator>()"
  },
  {
    "label": "CBasicString()",
    "kind": "Method",
    "detail": "Function (* this = cCopy ; } template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "CBasicString(const char* pchData)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} template<bool bUseCustomAllocator> void CBasicString<bUseCustomAllocator)",
    "insertText": "clear(void)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (* this = \" \" ; } template<bool bUseCustomAllocator> void CBasicString<bUseCustomAllocator)",
    "insertText": "resize(size_t uiSize)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(uiSize + 1)"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (super::m_uiSize = uiSize ; super::m_pData [ super::m_uiSize ] = 0 ; } template<bool bUseCustomAllocator> const char* CBasicString<bUseCustomAllocator)",
    "insertText": "c_str(void)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (char* pNewData =)",
    "insertText": "Allocate(super::m_uiSize + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (char* pNew = pNewData ; char* pOld = super::m_pData ;)",
    "insertText": "for(size_t i = 0; i < super::m_uiSize; ++pNew, ++pOld, ++i)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(super::m_pData)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (super::m_pData = pNewData ; super::m_uiDataSize = super::m_uiSize + 1 ; super::m_pData [ super::m_uiSize ] = 0 ; } } template<bool bUseCustomAllocator> size_t CBasicString<bUseCustomAllocator)",
    "insertText": "length(void)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (} template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "substr(size_t uiStart, size_t uiCount)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (CBasicString strReturn ; size_t uiLength =)",
    "insertText": "size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (strReturn .)",
    "insertText": "resize(uiCount)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(strReturn.m_pData, super::m_pData + uiStart, uiCount * sizeof(char))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} return strReturn ; } template<bool bUseCustomAllocator> size_t CBasicString<bUseCustomAllocator)",
    "insertText": "find(char chFind, size_t uiStart)"
  },
  {
    "label": "uiReturn()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "uiReturn(size_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uiReturn = i ; break ; } return uiReturn ; } template<bool bUseCustomAllocator> void CBasicString<bUseCustomAllocator)",
    "insertText": "operator(const char* pchData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t uiSize = 0 ;)",
    "insertText": "if(pchData != 0) uiSize = strlen(pchData)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(super::m_uiSize + uiSize + 1)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&(super::m_pData[super::m_uiSize]), pchData, uiSize * sizeof(char))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (strReturn =* this ; strReturn + = pchData ; } return strReturn ; } template<bool bUseCustomAllocator> void CBasicString<bUseCustomAllocator)",
    "insertText": "operator(const CBasicString& strRight)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(super::m_uiSize + strRight.m_uiSize + 1)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&(super::m_pData[super::m_uiSize]), strRight.m_pData, strRight.m_uiSize * sizeof(char))"
  },
  {
    "label": "strReturn()",
    "kind": "Method",
    "detail": "Function (CBasicString)",
    "insertText": "strReturn(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (strReturn + = strRight ; return strReturn ; } template<bool bUseCustomAllocator> void CBasicString<bUseCustomAllocator)",
    "insertText": "operator(const char& chRight)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(super::m_uiSize + 2)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(strRight.m_uiSize + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (char* pThis = super::m_pData ; char* pRight = strRight . m_pData ;)",
    "insertText": "for(; *pThis == *pRight; ++pThis, ++pRight) if (*pThis == 0)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (const st_int32 c_nMaxStringSize = 2 0 4 8 ; st_char szBuffer [ c_nMaxStringSize ] ; va_list vlArgs ;)",
    "insertText": "va_start(vlArgs, pchFormat)"
  },
  {
    "label": "CBasicString()",
    "kind": "Method",
    "detail": "Function (szBuffer [ c_nMaxStringSize - 1 ] = ' \\ 0 ' ; return)",
    "insertText": "CBasicString(szBuffer)"
  },
  {
    "label": "Extension()",
    "kind": "Method",
    "detail": "Function (} template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "Extension(char chExtensionChar)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (CBasicString strReturn ; char* pCurrent = super::m_pData + super::m_uiSize - 1 ;)",
    "insertText": "while(pCurrent >= super::m_pData)"
  },
  {
    "label": "uiSize()",
    "kind": "Method",
    "detail": "Function (+ + pCurrent ; size_t)",
    "insertText": "uiSize(super::m_pData + super::m_uiSize - pCurrent)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (strReturn .)",
    "insertText": "resize(uiSize)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(strReturn.m_pData, pCurrent, uiSize * sizeof(char))"
  },
  {
    "label": "NoExtension()",
    "kind": "Method",
    "detail": "Function (break ; } - - pCurrent ; } return strReturn ; } template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "NoExtension(char chExtensionChar)"
  },
  {
    "label": "uiSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "uiSize(pCurrent - super::m_pData)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(strReturn.m_pData, super::m_pData, uiSize * sizeof(char))"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (break ; } - - pCurrent ; } return strReturn ; } template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "Path(CBasicString strDelimiters)"
  },
  {
    "label": "NoPath()",
    "kind": "Method",
    "detail": "Function (pCurrent = super::m_pData ; break ; } } - - pCurrent ; } return strReturn ; } template<bool bUseCustomAllocator> CBasicString<bUseCustomAllocator> CBasicString<bUseCustomAllocator)",
    "insertText": "NoPath(CBasicString strDelimiters)"
  }
]