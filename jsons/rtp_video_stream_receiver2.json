[
  {
    "label": "NackRequester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NackRequester"
  },
  {
    "label": "PacketRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketRouter"
  },
  {
    "label": "ReceiveStatistics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveStatistics"
  },
  {
    "label": "RtcpRttStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpRttStats"
  },
  {
    "label": "RtpPacketReceived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketReceived"
  },
  {
    "label": "Transport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transport"
  },
  {
    "label": "UlpfecReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UlpfecReceiver"
  },
  {
    "label": "RtpVideoStreamReceiver2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpVideoStreamReceiver2"
  },
  {
    "label": "OnCompleteFrameCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnCompleteFrameCallback"
  },
  {
    "label": "RtcpFeedbackBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcpFeedbackBuffer"
  },
  {
    "label": "LossNotificationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LossNotificationState"
  },
  {
    "label": "ParseGenericDependenciesResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ParseGenericDependenciesResult"
  },
  {
    "label": "OnCompleteFrameCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_RTP_VIDEO_STREAM_RECEIVER2_H_ # define VIDEO_RTP_VIDEO_STREAM_RECEIVER2_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / crypto / frame_decryptor_interface . h \" # include \" api / sequence_checker . h \" # include \" api / units / timestamp . h \" # include \" api / video / color_space . h \" # include \" api / video / video_codec_type . h \" # include \" call / rtp_packet_sink_interface . h \" # include \" call / syncable . h \" # include \" call / video_receive_stream . h \" # include \" modules / rtp_rtcp / include / receive_statistics . h \" # include \" modules / rtp_rtcp / include / remote_ntp_time_estimator . h \" # include \" modules / rtp_rtcp / include / rtp_header_extension_map . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / absolute_capture_time_interpolator . h \" # include \" modules / rtp_rtcp / source / capture_clock_offset_updater . h \" # include \" modules / rtp_rtcp / source / rtp_dependency_descriptor_extension . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_impl2 . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_interface . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" modules / rtp_rtcp / source / video_rtp_depacketizer . h \" # include \" modules / video_coding / h264_sps_pps_tracker . h \" # include \" modules / video_coding / loss_notification_controller . h \" # include \" modules / video_coding / nack_requester . h \" # include \" modules / video_coding / packet_buffer . h \" # include \" modules / video_coding / rtp_frame_reference_finder . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / numerics / sequence_number_util . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" # include \" video / buffered_frame_decryptor . h \" # include \" video / rtp_video_stream_receiver_frame_transformer_delegate . h \" # include \" video / unique_timestamp_counter . h \" namespace webrtc { class NackRequester ; class PacketRouter ; class ReceiveStatistics ; class RtcpRttStats ; class RtpPacketReceived ; class Transport ; class UlpfecReceiver ; class RtpVideoStreamReceiver2 : public LossNotificationSender,public RecoveredPacketReceiver,public RtpPacketSinkInterface,public KeyFrameRequestSender,public NackSender,public OnDecryptedFrameCallback,public OnDecryptionStatusChangeCallback,public RtpVideoFrameReceiver { public : class OnCompleteFrameCallback { public : ~)",
    "insertText": "OnCompleteFrameCallback()"
  },
  {
    "label": "OnCompleteFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCompleteFrame(std::unique_ptr<EncodedFrame> frame)"
  },
  {
    "label": "RtpVideoStreamReceiver2()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "RtpVideoStreamReceiver2(TaskQueueBase* current_queue, Clock* clock, Transport* transport, RtcpRttStats* rtt_stats, PacketRouter* packet_router, const VideoReceiveStreamInterface::Config* config, ReceiveStatistics* rtp_receive_statistics, RtcpPacketTypeCounterObserver* rtcp_packet_type_counter_observer, RtcpCnameCallback* rtcp_cname_callback, NackPeriodicProcessor* nack_periodic_processor, OnCompleteFrameCallback* complete_frame_callback, rtc::scoped_refptr<FrameDecryptorInterface> frame_decryptor, rtc::scoped_refptr<FrameTransformerInterface> frame_transformer, const FieldTrialsView& field_trials, RtcEventLog* event_log)"
  },
  {
    "label": "RtpVideoStreamReceiver2()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpVideoStreamReceiver2()"
  },
  {
    "label": "AddReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReceiveCodec(uint8_t payload_type, VideoCodecType video_codec, const std::map<std::string, std::string>& codec_params, bool raw_payload)"
  },
  {
    "label": "RemoveReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReceiveCodec(uint8_t payload_type)"
  },
  {
    "label": "RemoveReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReceiveCodecs()"
  },
  {
    "label": "StartReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartReceive()"
  },
  {
    "label": "StopReceive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopReceive()"
  },
  {
    "label": "GetSyncInfo()",
    "kind": "Method",
    "detail": "Function (absl::optional<Syncable::Info>)",
    "insertText": "GetSyncInfo()"
  },
  {
    "label": "DeliverRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeliverRtcp(const uint8_t* rtcp_packet, size_t rtcp_packet_length)"
  },
  {
    "label": "FrameContinuous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameContinuous(int64_t seq_num)"
  },
  {
    "label": "FrameDecoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameDecoded(int64_t seq_num)"
  },
  {
    "label": "SignalNetworkState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalNetworkState(NetworkState state)"
  },
  {
    "label": "GetUniqueFramesSeen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetUniqueFramesSeen()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&packet_sequence_checker_)"
  },
  {
    "label": "OnRtpPacket()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRtpPacket(const RtpPacketReceived& packet)"
  },
  {
    "label": "OnReceivedPayloadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedPayloadData(rtc::CopyOnWriteBuffer codec_payload, const RtpPacketReceived& rtp_packet, const RTPVideoHeader& video)"
  },
  {
    "label": "OnRecoveredPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRecoveredPacket(const uint8_t* packet, size_t packet_length)"
  },
  {
    "label": "RequestKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestKeyFrame()"
  },
  {
    "label": "SendNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNack(const std::vector<uint16_t>& sequence_numbers, bool buffering_allowed)"
  },
  {
    "label": "SendLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLossNotification(uint16_t last_decoded_seq_num, uint16_t last_received_seq_num, bool decodability_flag, bool buffering_allowed)"
  },
  {
    "label": "IsDecryptable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDecryptable()"
  },
  {
    "label": "OnDecryptedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecryptedFrame(std::unique_ptr<RtpFrameObject> frame)"
  },
  {
    "label": "OnDecryptionStatusChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDecryptionStatusChange(FrameDecryptorInterface::Status status)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(rtc::scoped_refptr<FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(rtc::scoped_refptr<FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpExtensions(const std::vector<RtpExtension>& extensions)"
  },
  {
    "label": "GetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (const RtpHeaderExtensionMap&)",
    "insertText": "GetRtpExtensions()"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(int64_t max_rtt_ms)"
  },
  {
    "label": "OnLocalSsrcChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSsrcChange(uint32_t local_ssrc)"
  },
  {
    "label": "SetRtcpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtcpMode(RtcpMode mode)"
  },
  {
    "label": "SetReferenceTimeReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferenceTimeReport(bool enabled)"
  },
  {
    "label": "SetPacketSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacketSink(RtpPacketSinkInterface* packet_sink)"
  },
  {
    "label": "SetLossNotificationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLossNotificationEnabled(bool enabled)"
  },
  {
    "label": "SetNackHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackHistory(TimeDelta history)"
  },
  {
    "label": "ulpfec_payload_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ulpfec_payload_type()"
  },
  {
    "label": "red_payload_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "red_payload_type()"
  },
  {
    "label": "SetProtectionPayloadTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProtectionPayloadTypes(int red_payload_type, int ulpfec_payload_type)"
  },
  {
    "label": "LastReceivedPacketMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "LastReceivedPacketMs()"
  },
  {
    "label": "LastReceivedKeyframePacketMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "LastReceivedKeyframePacketMs()"
  },
  {
    "label": "ManageFrame()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ManageFrame(std::unique_ptr<RtpFrameObject> frame)"
  },
  {
    "label": "OnCompleteFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompleteFrames(RtpFrameReferenceFinder::ReturnVector frame) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "RtcpFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (class RtcpFeedbackBuffer : public KeyFrameRequestSender,public NackSender,public LossNotificationSender { public :)",
    "insertText": "RtcpFeedbackBuffer(KeyFrameRequestSender* key_frame_request_sender, NackSender* nack_sender, LossNotificationSender* loss_notification_sender)"
  },
  {
    "label": "RtcpFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcpFeedbackBuffer()"
  },
  {
    "label": "SendBufferedRtcpFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBufferedRtcpFeedback()"
  },
  {
    "label": "ClearLossNotificationState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLossNotificationState()"
  },
  {
    "label": "LossNotificationState()",
    "kind": "Method",
    "detail": "Function (private : struct LossNotificationState {)",
    "insertText": "LossNotificationState(uint16_t last_decoded_seq_num, uint16_t last_received_seq_num, bool decodability_flag) : last_decoded_seq_num(last_decoded_seq_num), last_received_seq_num(last_received_seq_num), decodability_flag(decodability_flag)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} uint16_t last_decoded_seq_num ; uint16_t last_received_seq_num ; bool decodability_flag ; } ; RTC_NO_UNIQUE_ADDRESS SequenceChecker packet_sequence_checker_ ; KeyFrameRequestSender* const key_frame_request_sender_ ; NackSender* const nack_sender_ ; LossNotificationSender* const loss_notification_sender_ ; bool request_key_frame_)",
    "insertText": "RTC_GUARDED_BY(packet_sequence_checker_)"
  },
  {
    "label": "ReceivePacket()",
    "kind": "Method",
    "detail": "Function (} ; enum ParseGenericDependenciesResult { kDropPacket,kHasGenericDescriptor,kNoGenericDescriptor } ; void)",
    "insertText": "ReceivePacket(const RtpPacketReceived& packet) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "ParseAndHandleEncapsulatingHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseAndHandleEncapsulatingHeader(const RtpPacketReceived& packet) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "NotifyReceiverOfEmptyPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyReceiverOfEmptyPacket(uint16_t seq_num) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "IsRedEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRedEnabled()"
  },
  {
    "label": "InsertSpsPpsIntoTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertSpsPpsIntoTracker(uint8_t payload_type) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "OnInsertedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertedPacket(video_coding::PacketBuffer::InsertResult result) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "ParseGenericDependenciesExtension()",
    "kind": "Method",
    "detail": "Function (ParseGenericDependenciesResult)",
    "insertText": "ParseGenericDependenciesExtension(const RtpPacketReceived& rtp_packet, RTPVideoHeader* video_header) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "OnAssembledFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssembledFrame(std::unique_ptr<RtpFrameObject> frame) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "UpdatePacketReceiveTimestamps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketReceiveTimestamps(const RtpPacketReceived& packet, bool is_keyframe) RTC_RUN_ON(packet_sequence_checker_)"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<BufferedFrameDecryptor> buffered_frame_decryptor_)",
    "insertText": "RTC_PT_GUARDED_BY(packet_sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool frames_decryptable_)",
    "insertText": "RTC_GUARDED_BY(worker_task_checker_)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp next_keyframe_request_for_missing_video_structure_ =)",
    "insertText": "MinusInfinity()"
  }
]