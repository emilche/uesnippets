[
  {
    "label": "RegistryParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegistryParser"
  },
  {
    "label": "registered()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_REGISTRYPARSER_H # define LLVM_SUPPORT_REGISTRYPARSER_H # include \" llvm / Support / CommandLine . h \" # include \" llvm / Support / Registry . h \" namespace llvm { template<T,U = RegistryTraits<T>> class RegistryParser : public cl::parser<const U::entry*>,public Registry<T,U>::listener { typedef U traits ; typedef U::entry entry ; typedef Registry<T,U>::listener listener ; protected : void)",
    "insertText": "registered(const entry &E)"
  },
  {
    "label": "addLiteralOption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLiteralOption(traits::nameof(E), &E, traits::descof(E))"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "initialize(cl::Option &O)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (cl::parser<const U::entry*)",
    "insertText": "initialize(O)"
  }
]