[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_ # include<memory> # include<ostream> # include<string> # include<type_traits> # include \" gtest / gtest - message . h \" # include \" gtest / internal / gtest - port . h \")",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\)"
  },
  {
    "label": "AssertionResult()",
    "kind": "Method",
    "detail": "Function (class GTEST_API_ AssertionResult { public :)",
    "insertText": "AssertionResult(const AssertionResult& other)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && (_MSC_VER < 1910 || _MSC_VER >= 1920) GTEST_DISABLE_MSC_WARNINGS_PUSH_(4800 ) #endif template <typename T> explicit AssertionResult( const T& success, typename std::enable_if< !std::is_convertible<T, AssertionResult>::value>::type* = nullptr) : success_(success)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(_MSC_VER) && (_MSC_VER < 1910 || _MSC_VER >= 1920) GTEST_DISABLE_MSC_WARNINGS_POP_() #endif AssertionResult& operator=(AssertionResult other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other)"
  },
  {
    "label": "message()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "message()"
  },
  {
    "label": "failure_message()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "failure_message()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> AssertionResult&)",
    "insertText": "operator(const T& value)"
  },
  {
    "label": "AppendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMessage(Message() << value)"
  },
  {
    "label": "AppendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMessage(Message() << basic_manipulator)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (message_ ->)",
    "insertText": "append(a_message.GetString().c_str())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(AssertionResult& other)"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (bool success_ ; std::unique_ptr<::std::string> message_ ; } ; GTEST_API_ AssertionResult)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "AssertionFailure()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "AssertionFailure()"
  },
  {
    "label": "AssertionFailure()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "AssertionFailure(const Message& msg)"
  }
]