[
  {
    "label": "FMultiTransformBlendHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultiTransformBlendHelper"
  },
  {
    "label": "FFilterOptionPerAxis",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilterOptionPerAxis"
  },
  {
    "label": "FTransformFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformFilter"
  },
  {
    "label": "FConstraintDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintDescription"
  },
  {
    "label": "FConstraintOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintOffset"
  },
  {
    "label": "FTransformConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformConstraint"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConstraintDescriptionEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintDescriptionEx"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FTransformConstraintDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformConstraintDescription"
  },
  {
    "label": "FAimConstraintDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAimConstraintDescription"
  },
  {
    "label": "FConstraintDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintDescriptor"
  },
  {
    "label": "FConstraintData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintData"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CommonAnimTypes . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" EulerTransform . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / Transform . h \" # include \" Math / TransformVectorized . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealNames . h \" # include \" Constraint . generated . h \" struct FMultiTransformBlendHelper ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Axis Filter\")"
  },
  {
    "label": "FFilterOptionPerAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFilterOptionPerAxis() : bX(true) , bY(true) , bZ(true)"
  },
  {
    "label": "FilterVector()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterVector(FVector& Input, const FVector& ResetValue = FVector::ZeroVector)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Input . X = ResetValue . X ; })",
    "insertText": "if(!bY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Input . Y = ResetValue . Y ; })",
    "insertText": "if(!bZ)"
  },
  {
    "label": "FilterQuat()",
    "kind": "Method",
    "detail": "Function (Input . Z = ResetValue . Z ; } } void)",
    "insertText": "FilterQuat(FQuat& Input, const FQuat& ResetValue = FQuat::Identity)"
  },
  {
    "label": "Rotator()",
    "kind": "Method",
    "detail": "Function (FRotator Rotator = Input .)",
    "insertText": "Rotator()"
  },
  {
    "label": "FilterRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterRotator(Rotator, ResetValue.Rotator())"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (Input = Rotator .)",
    "insertText": "Quaternion()"
  },
  {
    "label": "FilterRotator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterRotator(FRotator& Input, const FRotator& ResetValue = FRotator::ZeroRotator)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Input . Yaw = ResetValue . Yaw ; } } FArchive&)",
    "insertText": "operator(FArchive & Ar, FFilterOptionPerAxis & D)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Ar<<D . bX ; Ar<<D . bY ; Ar<<D . bZ ; return Ar ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Axis Filter\")"
  },
  {
    "label": "FilterTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTransform(FTransform& Input)"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (FVector Location = Input .)",
    "insertText": "GetLocation()"
  },
  {
    "label": "FilterVector()",
    "kind": "Method",
    "detail": "Function (TranslationFilter .)",
    "insertText": "FilterVector(Location)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (Input .)",
    "insertText": "SetLocation(Location)"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (FQuat Rotation = Input .)",
    "insertText": "GetRotation()"
  },
  {
    "label": "FilterQuat()",
    "kind": "Method",
    "detail": "Function (RotationFilter .)",
    "insertText": "FilterQuat(Rotation)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (Input .)",
    "insertText": "SetRotation(Rotation)"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (FVector Scale3D = Input .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "FilterVector()",
    "kind": "Method",
    "detail": "Function (ScaleFilter .)",
    "insertText": "FilterVector(Scale3D, FVector::OneVector)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (Input .)",
    "insertText": "SetScale3D(Scale3D)"
  },
  {
    "label": "FilterTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterTransform(FEulerTransform& Input)"
  },
  {
    "label": "FilterRotator()",
    "kind": "Method",
    "detail": "Function (Input . Location = Location ; FRotator Rotation = Input . Rotation ; RotationFilter .)",
    "insertText": "FilterRotator(Rotation)"
  },
  {
    "label": "FilterVector()",
    "kind": "Method",
    "detail": "Function (Input . Rotation = Rotation ; FVector Scale = Input . Scale ; ScaleFilter .)",
    "insertText": "FilterVector(Scale, FVector::OneVector)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Constraint\")"
  },
  {
    "label": "FConstraintDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstraintDescription() : bTranslation(true) , bRotation(true) , bScale(false) , bParent(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive & Ar, FConstraintDescription & D)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Ar<<D . bTranslation ; Ar<<D . bRotation ; Ar<<D . bScale ; Ar<<D . bParent ; Ar<<D . TranslationAxes ; Ar<<D . RotationAxes ; Ar<<D . ScaleAxes ; return Ar ; } } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FConstraintOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstraintOffset() : Translation(FVector::ZeroVector) , Rotation(FQuat::Identity) , Scale(FVector::OneVector) , Parent(FTransform::Identity)"
  },
  {
    "label": "ApplyInverseOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyInverseOffset(const FTransform& InTarget, FTransform& OutSource)"
  },
  {
    "label": "SaveInverseOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInverseOffset(const FTransform& Source, const FTransform& Target, const FConstraintDescription& Operator)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Translation = FVector::ZeroVector ; Rotation = FQuat::Identity ; Scale = FVector::OneVector ; Parent = FTransform::Identity ; } FArchive&)",
    "insertText": "operator(FArchive & Ar, FConstraintOffset & D)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Transform Constraint\")"
  },
  {
    "label": "FTransformConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformConstraint() : SourceNode(NAME_None) , TargetNode(NAME_None) , Weight(1.f) , bMaintainOffset(true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive & Ar, FTransformConstraint & D)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (Ar<<D . Operator ; Ar<<D . SourceNode ; Ar<<D . TargetNode ; Ar<<D . Weight ; Ar<<D . bMaintainOffset ; return Ar ; } } ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = FAimConstraintDescription)"
  },
  {
    "label": "FConstraintDescriptionEx()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FConstraintDescriptionEx()"
  },
  {
    "label": "AccumulateConstraintTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateConstraintTransform(const FTransform& TargetTransform, const FTransform& CurrentTransform, const FTransform& CurrentParentTransform, float Weight, FMultiTransformBlendHelper& BlendHelperInLocalSpace) const PURE_VIRTUAL(AccumulateConstraintTransform,)"
  },
  {
    "label": "DoesAffectRotation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesAffectRotation()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<AxesFilterOption ; } FArchive&)",
    "insertText": "operator(FArchive & Ar, FConstraintDescriptionEx & D)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (D .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "FTransformConstraintDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformConstraintDescription(const ETransformConstraintType InType = ETransformConstraintType::Translation) :TransformType (InType)"
  },
  {
    "label": "AccumulateConstraintTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateConstraintTransform(const FTransform& TargetTransform, const FTransform& CurrentTransform, const FTransform& CurrentParentTransform, float Weight, FMultiTransformBlendHelper& BlendHelperInLocalSpace)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "ensure(false)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"None\")"
  },
  {
    "label": "FAimConstraintDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAimConstraintDescription() : LookAt_Axis() , LookUp_Axis(FVector::UpVector) , bUseLookUp(false) , LookUpTarget(ForceInitToZero)"
  },
  {
    "label": "FConstraintDescriptor()",
    "kind": "Method",
    "detail": "Function (FConstraintDescriptionEx* ConstraintDescription ;)",
    "insertText": "FConstraintDescriptor() : Type(EConstraintType::MAX) , ConstraintDescription(nullptr)"
  },
  {
    "label": "FConstraintDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintDescriptor(const FTransformConstraintDescription& InT) : Type(EConstraintType::Transform) , ConstraintDescription(nullptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InT)"
  },
  {
    "label": "FConstraintDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintDescriptor(const FAimConstraintDescription& InA) : Type(EConstraintType::Aim) , ConstraintDescription(nullptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InA)"
  },
  {
    "label": "FConstraintDescriptor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintDescriptor(const FConstraintDescriptor& InOther) : ConstraintDescription(nullptr)"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (* this = InOther ; } FString)",
    "insertText": "GetDisplayString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TEXT(\"Null\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstraintDescriptor&)",
    "insertText": "operator(const FConstraintDescriptor& Other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Clear()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> Type = Other . Type ;)",
    "insertText": "if(Other.IsValid())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Set(*Other.GetTypedConstraint<FTransformConstraintDescription>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Other.Type == EConstraintType::Aim)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Set(*Other.GetTypedConstraint<FAimConstraintDescription>())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } private : void)",
    "insertText": "Set(const FAimConstraintDescription& InA)"
  },
  {
    "label": "FAimConstraintDescription()",
    "kind": "Method",
    "detail": "Function (ConstraintDescription = new)",
    "insertText": "FAimConstraintDescription(InA)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FTransformConstraintDescription& InT)"
  },
  {
    "label": "FTransformConstraintDescription()",
    "kind": "Method",
    "detail": "Function (ConstraintDescription = new)",
    "insertText": "FTransformConstraintDescription(InT)"
  },
  {
    "label": "GetTypedConstraint()",
    "kind": "Method",
    "detail": "Function (delete ConstraintDescription ; ConstraintDescription = nullptr ; } } public : template<T> T*)",
    "insertText": "GetTypedConstraint()"
  },
  {
    "label": "FConstraintDescriptor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FConstraintDescriptor()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive & Ar, FConstraintDescriptor & D)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<D . Type ;)",
    "insertText": "if(D.Type == EConstraintType::Transform)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FTransformConstraintDescription Trans ; Ar<<Trans ; D .)",
    "insertText": "Set(Trans)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(D.Type == EConstraintType::Aim)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FAimConstraintDescription Aim ; Ar<<Aim ; D .)",
    "insertText": "Set(Aim)"
  },
  {
    "label": "DoesAffectTranslation()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "DoesAffectTranslation()"
  },
  {
    "label": "DoesAffectScale()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "DoesAffectScale()"
  },
  {
    "label": "DoesAffectTransform()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "DoesAffectTransform()"
  },
  {
    "label": "ApplyConstraintTransform()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ApplyConstraintTransform(const FTransform& TargetTransform, const FTransform& CurrentTransform, const FTransform& CurrentParentTransform, float Weight, FMultiTransformBlendHelper& BlendHelperInLocalSpace)"
  },
  {
    "label": "FConstraintData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstraintData() : Weight(1.f) , bMaintainOffset(true) , Offset(FTransform::Identity)"
  },
  {
    "label": "FConstraintData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintData(const FTransformConstraintDescription& InTrans, FName InTargetNode = NAME_None, float InWeight = 1.f, bool bInMaintainOffset = true, const FTransform& InOffset = FTransform::Identity) : Constraint(InTrans) , Weight(InWeight) , bMaintainOffset(bInMaintainOffset) , Offset(InOffset)"
  },
  {
    "label": "FConstraintData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstraintData(const FAimConstraintDescription& InAim, FName InTargetNode = NAME_None, float InWeight = 1.f, bool bInMaintainOffset = true, const FTransform& InOffset = FTransform::Identity) : Constraint(InAim) , Weight(InWeight) , bMaintainOffset(bInMaintainOffset) , Offset(InOffset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive & Ar, FConstraintData & D)"
  },
  {
    "label": "ApplyInverseOffset()",
    "kind": "Method",
    "detail": "Function (Ar<<D . Constraint ; Ar<<D . Weight ; Ar<<D . bMaintainOffset ; Ar<<D . Offset ; return Ar ; } void)",
    "insertText": "ApplyInverseOffset(const FTransform& InTarget, FTransform& OutSource, const FTransform& InBaseTransform)"
  },
  {
    "label": "SaveInverseOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveInverseOffset(const FTransform& Source, const FTransform& Target, const FTransform& InBaseTransform)"
  },
  {
    "label": "ResetOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetOffset()"
  },
  {
    "label": "ApplyConstraintTransform()",
    "kind": "Method",
    "detail": "Function (Offset = FTransform::Identity ; } void)",
    "insertText": "ApplyConstraintTransform(const FTransform& TargetTransform, const FTransform& InCurrentTransform, const FTransform& CurrentParentTransform, FMultiTransformBlendHelper& BlendHelperInLocalSpace)"
  }
]