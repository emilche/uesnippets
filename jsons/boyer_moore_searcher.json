[
  {
    "label": "_Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Key"
  },
  {
    "label": "_Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Value"
  },
  {
    "label": "_Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Hash"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "_BMSkipTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BMSkipTable"
  },
  {
    "label": "_RandomAccessIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator1"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_RandomAccessIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator2"
  },
  {
    "label": "_Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iterator"
  },
  {
    "label": "_Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Container"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_BOYER_MOORE_SEARCHER_H # define _LIBCPP___FUNCTIONAL_BOYER_MOORE_SEARCHER_H # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_BMSkipTable()",
    "kind": "Method",
    "detail": "Function (template<class _Key,class _Value,class _Hash,class _BinaryPredicate> class _BMSkipTable<_Key,_Value,_Hash,_BinaryPredicate,false> { private : using value_type = _Value ; using key_type = _Key ; const value_type __default_value_ ; unordered_map<_Key,_Value,_Hash,_BinaryPredicate> __table_ ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "_BMSkipTable(size_t __sz, value_type __default_value, _Hash __hash, _BinaryPredicate __pred) : __default_value_(__default_value), __table_(__sz, __hash, __pred)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "insert(const key_type& __key, value_type __val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__table_ [ __key ] = __val ; } _LIBCPP_HIDE_FROM_ABI value_type)",
    "insertText": "operator(const key_type& __key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto __it = __table_ .)",
    "insertText": "find(__key)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Key,class _Value,class _Hash,class _BinaryPredicate> class _BMSkipTable<_Key,_Value,_Hash,_BinaryPredicate,true> { private : using value_type = _Value ; using key_type = _Key ; using unsigned_key_type = make_unsigned_t<key_type> ; std::array<value_type,2 5 6> __table_ ;)",
    "insertText": "static_assert(numeric_limits<unsigned_key_type>::max() < 256)"
  },
  {
    "label": "_BMSkipTable()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "_BMSkipTable(size_t, value_type __default_value, _Hash, _BinaryPredicate)"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill_n(__table_.data(), __table_.size(), __default_value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "insert(key_type __key, value_type __val)"
  },
  {
    "label": "unsigned_key_type()",
    "kind": "Method",
    "detail": "Function (__table_ [ static_cast<)",
    "insertText": "unsigned_key_type(__key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI value_type)",
    "insertText": "operator(key_type __key)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _RandomAccessIterator1,class _Hash = hash<iterator_traits<_RandomAccessIterator1>::value_type>,class _BinaryPredicate = equal_to<>> class _LIBCPP_TEMPLATE_VIS boyer_moore_searcher { private : using difference_type = std::iterator_traits<_RandomAccessIterator1>::difference_type ; using value_type = std::iterator_traits<_RandomAccessIterator1>::value_type ; using __skip_table_type = _BMSkipTable<value_type,difference_type,_Hash,_BinaryPredicate,is_integral_v<value_type>&&)",
    "insertText": "sizeof(value_type)"
  },
  {
    "label": "boyer_moore_searcher()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "boyer_moore_searcher(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _Hash __hash = _Hash(), _BinaryPredicate __pred = _BinaryPredicate()) : __first_(__first), __last_(__last), __pred_(__pred), __pattern_length_(__last - __first), __skip_table_(std::make_shared<__skip_table_type>(__pattern_length_, -1, __hash, __pred_)), __suffix_(std::__allocate_shared_unbounded_array<difference_type[]>( allocator<difference_type>(), __pattern_length_ + 1))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (difference_type __i = 0 ;)",
    "insertText": "while(__first != __last)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (__skip_table_ ->)",
    "insertText": "insert(*__first, __i)"
  },
  {
    "label": "__build_suffix_table()",
    "kind": "Method",
    "detail": "Function (+ + __first ; + + __i ; })",
    "insertText": "__build_suffix_table(__first_, __last_, __pred_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator2> pair<_RandomAccessIterator2,_RandomAccessIterator2>)",
    "insertText": "operator()(_RandomAccessIterator2 __first, _RandomAccessIterator2 __last)"
  },
  {
    "label": "__search()",
    "kind": "Method",
    "detail": "Function (} private : _RandomAccessIterator1 __first_ ; _RandomAccessIterator1 __last_ ; _BinaryPredicate __pred_ ; difference_type __pattern_length_ ; shared_ptr<__skip_table_type> __skip_table_ ; shared_ptr<difference_type [ ]> __suffix_ ; template<class _RandomAccessIterator2> pair<_RandomAccessIterator2,_RandomAccessIterator2>)",
    "insertText": "__search(_RandomAccessIterator2 __f, _RandomAccessIterator2 __l)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_RandomAccessIterator2 __current = __f ; const _RandomAccessIterator2 __last = __l - __pattern_length_ ; const __skip_table_type& __skip_table =* __skip_table_ ;)",
    "insertText": "while(__current <= __last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (difference_type __j = __pattern_length_ ;)",
    "insertText": "while(__pred_(__first_[__j - 1], __current[__j - 1]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - __j ;)",
    "insertText": "if(__j == 0) return std::make_pair(__current, __current + __pattern_length_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} difference_type __k = __skip_table [ __current [ __j - 1 ] ] ; difference_type __m = __j - __k - 1 ;)",
    "insertText": "if(__k < __j && __m > __suffix_[__j])"
  },
  {
    "label": "__compute_bm_prefix()",
    "kind": "Method",
    "detail": "Function (} template<class _Iterator,class _Container> void)",
    "insertText": "__compute_bm_prefix(_Iterator __first, _Iterator __last, _BinaryPredicate __pred, _Container& __prefix)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const size_t __count = __last - __first ; __prefix [ 0 ] = 0 ; size_t __k = 0 ;)",
    "insertText": "for(size_t __i = 1; __i != __count; ++__i)"
  },
  {
    "label": "__build_suffix_table()",
    "kind": "Method",
    "detail": "Function (__prefix [ __i ] = __k ; } } void)",
    "insertText": "__build_suffix_table(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _BinaryPredicate __pred)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const size_t __count = __last - __first ;)",
    "insertText": "if(__count == 0)"
  },
  {
    "label": "__scratch()",
    "kind": "Method",
    "detail": "Function (vector<difference_type>)",
    "insertText": "__scratch(__count)"
  },
  {
    "label": "__compute_bm_prefix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__compute_bm_prefix(__first, __last, __pred, __scratch)"
  },
  {
    "label": "__compute_bm_prefix()",
    "kind": "Method",
    "detail": "Function (using _ReverseIter = reverse_iterator<_RandomAccessIterator1> ;)",
    "insertText": "__compute_bm_prefix(_ReverseIter(__last), _ReverseIter(__first), __pred, __scratch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const size_t __j = __count - __scratch [ __i ] ; const difference_type __k = __i - __scratch [ __i ] + 1 ;)",
    "insertText": "if(__suffix_[__j] > __k)"
  },
  {
    "label": "boyer_moore_horspool_searcher()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "boyer_moore_horspool_searcher(_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _Hash __hash = _Hash(), _BinaryPredicate __pred = _BinaryPredicate()) : __first_(__first), __last_(__last), __pred_(__pred), __pattern_length_(__last - __first), __skip_table_(std::make_shared<__skip_table_type>(__pattern_length_, __pattern_length_, __hash, __pred_))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (__skip_table_ ->)",
    "insertText": "insert(*__first, __pattern_length_ - 1 - __i)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (} __current + = __skip_table [ __current [ __pattern_length_ - 1 ] ] ; } return)",
    "insertText": "make_pair(__l, __l)"
  }
]