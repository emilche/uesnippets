[
  {
    "label": "RtpPacketToSend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacketToSend"
  },
  {
    "label": "RtpPacketToSend()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_PACKET_TO_SEND_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_PACKET_TO_SEND_H_ # include<stddef . h> # include<stdint . h> # include<utility> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_timing . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtp_header_extensions . h \" # include \" modules / rtp_rtcp / source / rtp_packet . h \" namespace webrtc { class RtpPacketToSend : public RtpPacket { public : using Type = RtpPacketMediaType ;)",
    "insertText": "RtpPacketToSend(const ExtensionManager* extensions)"
  },
  {
    "label": "RtpPacketToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketToSend(const ExtensionManager* extensions, size_t capacity)"
  },
  {
    "label": "RtpPacketToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketToSend(const RtpPacketToSend& packet)"
  },
  {
    "label": "RtpPacketToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketToSend(RtpPacketToSend&& packet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketToSend&)",
    "insertText": "operator(const RtpPacketToSend& packet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketToSend&)",
    "insertText": "operator(RtpPacketToSend&& packet)"
  },
  {
    "label": "RtpPacketToSend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpPacketToSend()"
  },
  {
    "label": "capture_time()",
    "kind": "Method",
    "detail": "Function (webrtc::Timestamp)",
    "insertText": "capture_time()"
  },
  {
    "label": "set_packet_type()",
    "kind": "Method",
    "detail": "Function (capture_time_ = time ; } void)",
    "insertText": "set_packet_type(RtpPacketMediaType type)"
  },
  {
    "label": "packet_type()",
    "kind": "Method",
    "detail": "Function (packet_type_ = type ; } absl::optional<RtpPacketMediaType>)",
    "insertText": "packet_type()"
  },
  {
    "label": "retransmitted_sequence_number()",
    "kind": "Method",
    "detail": "Function (retransmitted_sequence_number_ = sequence_number ; } absl::optional<uint16_t>)",
    "insertText": "retransmitted_sequence_number()"
  },
  {
    "label": "allow_retransmission()",
    "kind": "Method",
    "detail": "Function (allow_retransmission_ = allow_retransmission ; } bool)",
    "insertText": "allow_retransmission()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (additional_data_ =)",
    "insertText": "move(data)"
  },
  {
    "label": "set_packetization_finish_time()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_packetization_finish_time(webrtc::Timestamp time)"
  },
  {
    "label": "VideoTimingExtension()",
    "kind": "Method",
    "detail": "Function (SetExtension<)",
    "insertText": "VideoTimingExtension(VideoSendTiming::GetDeltaCappedMs(time - capture_time_), VideoTimingExtension::kPacketizationFinishDeltaOffset)"
  },
  {
    "label": "set_pacer_exit_time()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_pacer_exit_time(webrtc::Timestamp time)"
  },
  {
    "label": "VideoTimingExtension()",
    "kind": "Method",
    "detail": "Function (SetExtension<)",
    "insertText": "VideoTimingExtension(VideoSendTiming::GetDeltaCappedMs(time - capture_time_), VideoTimingExtension::kPacerExitDeltaOffset)"
  },
  {
    "label": "set_network_time()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_network_time(webrtc::Timestamp time)"
  },
  {
    "label": "VideoTimingExtension()",
    "kind": "Method",
    "detail": "Function (SetExtension<)",
    "insertText": "VideoTimingExtension(VideoSendTiming::GetDeltaCappedMs(time - capture_time_), VideoTimingExtension::kNetworkTimestampDeltaOffset)"
  },
  {
    "label": "set_network2_time()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_network2_time(webrtc::Timestamp time)"
  },
  {
    "label": "VideoTimingExtension()",
    "kind": "Method",
    "detail": "Function (SetExtension<)",
    "insertText": "VideoTimingExtension(VideoSendTiming::GetDeltaCappedMs(time - capture_time_), VideoTimingExtension::kNetwork2TimestampDeltaOffset)"
  },
  {
    "label": "set_first_packet_of_frame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_first_packet_of_frame(bool is_first_packet)"
  },
  {
    "label": "is_first_packet_of_frame()",
    "kind": "Method",
    "detail": "Function (is_first_packet_of_frame_ = is_first_packet ; } bool)",
    "insertText": "is_first_packet_of_frame()"
  },
  {
    "label": "is_key_frame()",
    "kind": "Method",
    "detail": "Function (is_key_frame_ = is_key_frame ; } bool)",
    "insertText": "is_key_frame()"
  },
  {
    "label": "fec_protect_packet()",
    "kind": "Method",
    "detail": "Function (fec_protect_packet_ = protect ; } bool)",
    "insertText": "fec_protect_packet()"
  },
  {
    "label": "is_red()",
    "kind": "Method",
    "detail": "Function (is_red_ = is_red ; } bool)",
    "insertText": "is_red()"
  },
  {
    "label": "time_in_send_queue()",
    "kind": "Method",
    "detail": "Function (time_in_send_queue_ = time_in_send_queue ; } absl::optional<TimeDelta>)",
    "insertText": "time_in_send_queue()"
  }
]