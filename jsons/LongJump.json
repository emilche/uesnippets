[
  {
    "label": "FLongJump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLongJump"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once #)",
    "insertText": "if(defined(__AUTORTFM) && __AUTORTFM)"
  },
  {
    "label": "FLongJump()",
    "kind": "Method",
    "detail": "Function (class FLongJump { public :)",
    "insertText": "FLongJump()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(this, 0, sizeof(*this))"
  },
  {
    "label": "TryCatch()",
    "kind": "Method",
    "detail": "Function (} template<TTryFunctor,TCatchFunctor> void)",
    "insertText": "TryCatch(const TTryFunctor& TryFunctor, const TCatchFunctor& CatchFunctor)"
  },
  {
    "label": "Throw()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "Throw()"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(!bIsSet)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "if(!setjmp(JmpBuf)) #else if (!_setjmp(JmpBuf))"
  },
  {
    "label": "TryFunctor()",
    "kind": "Method",
    "detail": "Function (bIsSet = true ;)",
    "insertText": "TryFunctor()"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (bIsSet = false ; } else {)",
    "insertText": "ASSERT(bIsSet)"
  },
  {
    "label": "CatchFunctor()",
    "kind": "Method",
    "detail": "Function (bIsSet = false ;)",
    "insertText": "CatchFunctor()"
  },
  {
    "label": "longjmp()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "longjmp(JmpBuf, 1)"
  },
  {
    "label": "_longjmp()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "_longjmp(JmpBuf, 1)"
  }
]