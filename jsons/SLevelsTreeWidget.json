[
  {
    "label": "FLevelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelModel"
  },
  {
    "label": "FLevelCollectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelCollectionModel"
  },
  {
    "label": "SWorldHierarchyImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldHierarchyImpl"
  },
  {
    "label": "SLevelsTreeWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelsTreeWidget"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STreeView . h \" # include \" AssetRegistry / AssetData . h \" # include \" IWorldTreeItem . h \" class FLevelModel ; class FLevelCollectionModel ; class SWorldHierarchyImpl ; class SLevelsTreeWidget : public STreeView<WorldHierarchy::FWorldTreeItemPtr> { public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedPtr<FLevelCollectionModel>& InWorldModel, const TSharedPtr<SWorldHierarchyImpl>& InHierachy)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetWorldAssetsFromDrag()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "GetWorldAssetsFromDrag(const FDragDropEvent& DragDropEvent, TArray<FAssetData>& OutWorldAssetList)"
  },
  {
    "label": "CanAttachAllItemsToRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAttachAllItemsToRoot(const TArray<WorldHierarchy::FWorldTreeItemPtr>& Items)"
  }
]