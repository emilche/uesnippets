[
  {
    "label": "TCircularBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCircularBuffer"
  },
  {
    "label": "TCircularBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" template<InElementType> class TCircularBuffer { public : using ElementType = InElementType ;)",
    "insertText": "TCircularBuffer(uint32 Capacity)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "AddZeroed(FMath::RoundUpToPowerOfTwo(Capacity))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (IndexMask = Elements .)",
    "insertText": "Num()"
  },
  {
    "label": "TCircularBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCircularBuffer(uint32 Capacity, const ElementType& InitialValue)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Init(InitialValue, FMath::RoundUpToPowerOfTwo(Capacity))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : ElementType&)",
    "insertText": "operator(uint32 Index)"
  },
  {
    "label": "GetNextIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNextIndex(uint32 CurrentIndex)"
  },
  {
    "label": "GetPreviousIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPreviousIndex(uint32 CurrentIndex)"
  }
]