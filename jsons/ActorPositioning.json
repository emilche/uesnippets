[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "FPositioningData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPositioningData"
  },
  {
    "label": "FSnappedPositioningData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnappedPositioningData"
  },
  {
    "label": "FActorPositionTraceResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPositionTraceResult"
  },
  {
    "label": "ResultState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ResultState"
  },
  {
    "label": "FActorPositioning",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPositioning"
  },
  {
    "label": "FPositioningData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Settings / LevelEditorViewportSettings . h \" class AActor ; class FLevelEditorViewportClient ; class FSceneView ; class UActorFactory ; struct FViewportCursorLocation ; struct FPositioningData {)",
    "insertText": "FPositioningData(const FVector& InSurfaceLocation, const FVector& InSurfaceNormal) : SurfaceLocation(InSurfaceLocation) , SurfaceNormal(InSurfaceNormal) , PlacementExtent(0.f) , StartTransform(FTransform::Identity) , ActorFactory(nullptr) , bAlignRotation(false)"
  },
  {
    "label": "ULevelEditorViewportSettings()",
    "kind": "Method",
    "detail": "Function (SnapToSurface)",
    "insertText": "ULevelEditorViewportSettings()"
  },
  {
    "label": "UsePlacementExtent()",
    "kind": "Method",
    "detail": "Function (bAlignRotation = Settings . bEnabled&& Settings . bSnapRotation ; } FVector SurfaceLocation ; FVector SurfaceNormal ; FPositioningData&)",
    "insertText": "UsePlacementExtent(const FVector& InPlacementExtent)"
  },
  {
    "label": "UseStartTransform()",
    "kind": "Method",
    "detail": "Function (PlacementExtent = InPlacementExtent ; return* this ; } FVector PlacementExtent ; FPositioningData&)",
    "insertText": "UseStartTransform(const FTransform& InStartTransform)"
  },
  {
    "label": "UseFactory()",
    "kind": "Method",
    "detail": "Function (StartTransform = InStartTransform ; return* this ; } FTransform StartTransform ; FPositioningData&)",
    "insertText": "UseFactory(const UActorFactory* InActorFactory)"
  },
  {
    "label": "AlignToSurfaceRotation()",
    "kind": "Method",
    "detail": "Function (ActorFactory = InActorFactory ; return* this ; } const UActorFactory* ActorFactory ; FPositioningData&)",
    "insertText": "AlignToSurfaceRotation(bool bInAlignRotation)"
  },
  {
    "label": "FSnappedPositioningData()",
    "kind": "Method",
    "detail": "Function (bAlignRotation = bInAlignRotation ; return* this ; } bool bAlignRotation ; } ; struct FSnappedPositioningData : FPositioningData {)",
    "insertText": "FSnappedPositioningData(FLevelEditorViewportClient* InLevelViewportClient, const FVector& InSurfaceLocation, const FVector& InSurfaceNormal) : FPositioningData(InSurfaceLocation, InSurfaceNormal) , LevelViewportClient(InLevelViewportClient) , bDrawSnapHelpers(false)"
  },
  {
    "label": "DrawSnapHelpers()",
    "kind": "Method",
    "detail": "Function (} FLevelEditorViewportClient* LevelViewportClient ; FSnappedPositioningData&)",
    "insertText": "DrawSnapHelpers(bool bInDrawSnapHelpers)"
  },
  {
    "label": "FActorPositionTraceResult()",
    "kind": "Method",
    "detail": "Function (bAlignRotation = bInAlignRotation ; return* this ; } } ; struct FActorPositionTraceResult { enum ResultState { HitSuccess,Default,Failed,} ;)",
    "insertText": "FActorPositionTraceResult() : State(Failed), Location(0.f), SurfaceNormal(0.f, 0.f, 1.f)"
  },
  {
    "label": "TraceWorldForPositionWithDefault()",
    "kind": "Method",
    "detail": "Function (} ResultState State ; FVector Location ; FVector SurfaceNormal ; TWeakObjectPtr<AActor> HitActor ; } ; struct FActorPositioning { FActorPositionTraceResult)",
    "insertText": "TraceWorldForPositionWithDefault(const FViewportCursorLocation& Cursor, const FSceneView& View, const TArray<AActor*>* IgnoreActors = nullptr)"
  },
  {
    "label": "TraceWorldForPosition()",
    "kind": "Method",
    "detail": "Function (FActorPositionTraceResult)",
    "insertText": "TraceWorldForPosition(const FViewportCursorLocation& Cursor, const FSceneView& View, const TArray<AActor*>* IgnoreActors = nullptr)"
  },
  {
    "label": "TraceWorldForPosition()",
    "kind": "Method",
    "detail": "Function (FActorPositionTraceResult)",
    "insertText": "TraceWorldForPosition(const UWorld& InWorld, const FSceneView& InSceneView, const FVector& RayStart, const FVector& RayEnd, const TArray<AActor*>* IgnoreActors = nullptr)"
  },
  {
    "label": "GetCurrentViewportPlacementTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetCurrentViewportPlacementTransform(const AActor& Actor, bool bSnap = true, const FViewportCursorLocation* InCursor = nullptr)"
  },
  {
    "label": "GetActorPositionInFrontOfCamera()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetActorPositionInFrontOfCamera(const AActor& InActor, const FVector& InCameraOrigin, const FVector& InCameraDirection)"
  },
  {
    "label": "GetSnappedSurfaceAlignedTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSnappedSurfaceAlignedTransform(const FSnappedPositioningData& PositioningData)"
  },
  {
    "label": "GetSurfaceAlignedTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetSurfaceAlignedTransform(const FPositioningData& PositioningData)"
  }
]