[
  {
    "label": "FFileSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileSpan"
  },
  {
    "label": "FFileSpan()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Misc / SecureHash . h \" namespace BuildPatchServices { struct FFileSpan {)",
    "insertText": "FFileSpan(const FString& InFilename, uint64 InSize, uint64 InStartIdx, bool InIsUnixExecutable, const FString& InSymlinkTarget) : Filename(InFilename) , Size(InSize) , StartIdx(InStartIdx) , IsUnixExecutable(InIsUnixExecutable) , SymlinkTarget(InSymlinkTarget)"
  },
  {
    "label": "FFileSpan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileSpan(const FFileSpan& CopyFrom) : Filename(CopyFrom.Filename) , Size(CopyFrom.Size) , StartIdx(CopyFrom.StartIdx) , SHAHash(CopyFrom.SHAHash) , IsUnixExecutable(CopyFrom.IsUnixExecutable) , SymlinkTarget(CopyFrom.SymlinkTarget)"
  },
  {
    "label": "FFileSpan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileSpan(FFileSpan&& MoveFrom) : Filename(MoveTemp(MoveFrom.Filename)) , Size(MoveTemp(MoveFrom.Size)) , StartIdx(MoveTemp(MoveFrom.StartIdx)) , SHAHash(MoveTemp(MoveFrom.SHAHash)) , IsUnixExecutable(MoveTemp(MoveFrom.IsUnixExecutable)) , SymlinkTarget(MoveTemp(MoveFrom.SymlinkTarget))"
  },
  {
    "label": "FFileSpan()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFileSpan() : Size(0) , StartIdx(0) , IsUnixExecutable(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFileSpan&)",
    "insertText": "operator(const FFileSpan& CopyFrom)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Filename = CopyFrom . Filename ; Size = CopyFrom . Size ; StartIdx = CopyFrom . StartIdx ; SHAHash = CopyFrom . SHAHash ; IsUnixExecutable = CopyFrom . IsUnixExecutable ; SymlinkTarget = CopyFrom . SymlinkTarget ; return* this ; } FFileSpan&)",
    "insertText": "operator(FFileSpan&& MoveFrom)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Filename =)",
    "insertText": "MoveTemp(MoveFrom.Filename)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "MoveTemp(MoveFrom.Size)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (StartIdx =)",
    "insertText": "MoveTemp(MoveFrom.StartIdx)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SHAHash =)",
    "insertText": "MoveTemp(MoveFrom.SHAHash)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (IsUnixExecutable =)",
    "insertText": "MoveTemp(MoveFrom.IsUnixExecutable)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SymlinkTarget =)",
    "insertText": "MoveTemp(MoveFrom.SymlinkTarget)"
  }
]