[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_PUSH_HEAP_H # define _LIBCPP___ALGORITHM_PUSH_HEAP_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Compare, class _RandomAccessIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void __sift_up(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare&& __comp, typename iterator_traits<_RandomAccessIterator>::difference_type __len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using value_type = iterator_traits<_RandomAccessIterator>::value_type ;)",
    "insertText": "if(__len > 1)"
  },
  {
    "label": "__len()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__len(__len - 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_RandomAccessIterator __ptr = __first + __len ;)",
    "insertText": "if(__comp(*__ptr, *--__last))"
  },
  {
    "label": "__t()",
    "kind": "Method",
    "detail": "Function (value_type)",
    "insertText": "__t(_IterOps<_AlgPolicy>::__iter_move(__last))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__last = __ptr ;)",
    "insertText": "if(__len == 0)"
  },
  {
    "label": "__len()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__len(__len - 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (__ptr = __first + __len ; })",
    "insertText": "while(__comp(*__ptr, __t))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* __last =)",
    "insertText": "move(__t)"
  },
  {
    "label": "__push_heap()",
    "kind": "Method",
    "detail": "Function (} } } template<class _AlgPolicy,class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "__push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare& __comp)"
  },
  {
    "label": "_CompRef()",
    "kind": "Method",
    "detail": "Function (using _CompRef = __comp_ref_type<_Compare>::type ; iterator_traits<_RandomAccessIterator>::difference_type __len = __last - __first ; std::__sift_up<_AlgPolicy,)",
    "insertText": "_CompRef(std::move(__first), std::move(__last), __comp, __len)"
  },
  {
    "label": "push_heap()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__push_heap<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__last), __comp)"
  },
  {
    "label": "push_heap()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)"
  },
  {
    "label": "push_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_heap(std::move(__first), std::move(__last), __less<typename iterator_traits<_RandomAccessIterator>::value_type>())"
  }
]