[
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimNode_ScaleChainLength",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_ScaleChainLength"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneIndices . h \" # include \" BoneContainer . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" AnimNode_ScaleChainLength . generated . h \" class USkeletalMeshComponent ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (FixedDefaultLengthValue,Distance,ChainLength,} ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = Links)"
  },
  {
    "label": "FAnimNode_ScaleChainLength()",
    "kind": "Method",
    "detail": "Function (bool bBoneIndicesCached ; TArray<FCompactPoseBoneIndex> ChainBoneIndices ; public :)",
    "insertText": "FAnimNode_ScaleChainLength()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "GetInitialChainLength()",
    "kind": "Method",
    "detail": "Function (protected : double)",
    "insertText": "GetInitialChainLength(FCompactPose& InLSPose, FCSPose<FCompactPose>& InCSPose)"
  }
]