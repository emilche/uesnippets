[
  {
    "label": "FRPCDoSCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRPCDoSCounters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRPCTrackingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRPCTrackingInfo"
  },
  {
    "label": "FActiveRPCTrackingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActiveRPCTrackingInfo"
  },
  {
    "label": "FRPCDoSState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRPCDoSState"
  },
  {
    "label": "FRPCDoSStateConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRPCDoSStateConfig"
  },
  {
    "label": "FRPCDoSDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRPCDoSDetection"
  },
  {
    "label": "FLightweightRPCTracking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightweightRPCTracking"
  },
  {
    "label": "FLightweightRPCEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightweightRPCEntry"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TScopeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScopeBase"
  },
  {
    "label": "FTickScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTickScope"
  },
  {
    "label": "FPacketScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPacketScope"
  },
  {
    "label": "FSequentialRPCScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequentialRPCScope"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / CoreNet . h \" # include \" Analytics / RPCDoSDetectionAnalytics . h \" # include \" RPCDoSDetection . generated . h \" # define RPC_QUOTA_DEBUG 0 # define RPC_DOS_DEV_STATS 0 # define RPC_DOS_SCOPE_DEBUG 1 using FGetRPCDoSAddress = TUniqueFunction<)",
    "insertText": "FString()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FRPCDoSKickPlayer = TUniqueFunction<)",
    "insertText": "void()"
  },
  {
    "label": "ResetRPCCounters()",
    "kind": "Method",
    "detail": "Function (# if RPC_DOS_SCOPE_DEBUG namespace UE::Net { int32 GRPCDoSScopeDebugging ; } # endif struct FRPCDoSCounters { int32 RPCCounter = 0 ; double AccumRPCTime = 0 . 0 ; # if RPC_QUOTA_DEBUG double DebugAccumRPCTime = 0 . 0 ; # endif public : void)",
    "insertText": "ResetRPCCounters()"
  },
  {
    "label": "AccumulateCounter()",
    "kind": "Method",
    "detail": "Function (RPCCounter = 0 ; AccumRPCTime = 0 . 0 ; # if RPC_QUOTA_DEBUG DebugAccumRPCTime = 0 . 0 ; # endif } void)",
    "insertText": "AccumulateCounter(const FRPCDoSCounters& InCounter)"
  },
  {
    "label": "GetCurrentHistoryIdx()",
    "kind": "Method",
    "detail": "Function (RPCCounter + = InCounter . RPCCounter ; AccumRPCTime + = InCounter . AccumRPCTime ; # if RPC_QUOTA_DEBUG DebugAccumRPCTime + = InCounter . DebugAccumRPCTime ; # endif } } ; enum class ERPCBlockState : uint8 { Unchecked,OnAllowList,NotBlocked,Blocked } ; struct FRPCTrackingInfo { FRPCDoSCounters PerPeriodHistory [ 1 6 ] = { } ; uint8 HistoryCount = 0 ; uint8 LastTrackedSecondIncrement = 0 ; ERPCBlockState BlockState = ERPCBlockState::Unchecked ; TSharedPtr<FRPCAnalytics> RPCTrackingAnalyticsEntry ; public : uint8)",
    "insertText": "GetCurrentHistoryIdx()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(config)"
  },
  {
    "label": "ApplyImpliedValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyImpliedValues()"
  },
  {
    "label": "HasHitQuota_Count()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHitQuota_Count(const FRPCDoSCounters(&PerPeriodHistory)[16], FRPCDoSCounters& InFrameCounter)"
  },
  {
    "label": "HasHitQuota_Time()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHitQuota_Time(const FRPCDoSCounters(&PerPeriodHistory)[16], FRPCDoSCounters& InFrameCounter)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "LoadStructConfig()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadStructConfig(const TCHAR* SectionName, const TCHAR* InFilename=nullptr)"
  },
  {
    "label": "ValidateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateConfig()"
  },
  {
    "label": "GetHighestTimePeriod()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetHighestTimePeriod()"
  },
  {
    "label": "GetAllTimePeriods()",
    "kind": "Method",
    "detail": "Function (const TArray<int8>&)",
    "insertText": "GetAllTimePeriods()"
  },
  {
    "label": "ApplyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyState(FRPCDoSState& Target)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} ; enum class ERPCNotifyResult : uint8 { ExecuteRPC,BlockRPC } ; enum class ERPCDoSSeverityUpdate : uint8 { Escalate,AutoEscalate,Deescalate } ; enum class ERPCDoSEscalateReason : uint8 { CountLimit,TimeLimit,AutoEscalate,Deescalate } ; enum class EPostSequentialRPCType : uint8 { MidPacket,PostPacket } ; class FRPCDoSDetection : protected FRPCDoSState { struct FRPCDoSStateConfig ; struct FLightweightRPCTracking { int32 TrackingNum = 2 5 6 ; struct FLightweightRPCEntry { UFunction* Function ; FName Name ; } ; FLightweightRPCEntry RPC [ TrackingNum ] = { } ; uint8 Count = 0 ; } ; public : void)",
    "insertText": "Init(FName NetDriverName, TSharedPtr<FNetAnalyticsAggregator>& AnalyticsAggregator, FGetWorld&& InWorldFunc, FGetRPCDoSAddress&& InAddressFunc, FGetRPCDoSPlayerUID&& InPlayerUIDFunc, FRPCDoSKickPlayer&& InKickPlayerFunc)"
  },
  {
    "label": "InitConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConfig(FName NetDriverName)"
  },
  {
    "label": "UpdateSeverity_Private()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSeverity_Private(Update, Reason)"
  },
  {
    "label": "PreTickDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreTickDispatch(double TimeSeconds)"
  },
  {
    "label": "PreReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreReceivedPacket(double TimeSeconds)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT_EXCLUSIVE()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Net ; # if RPC_DOS_DEV_STATS)",
    "insertText": "CSV_SCOPED_TIMING_STAT_EXCLUSIVE(RPCDoS_Checks)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (# endif # if RPC_DOS_SCOPE_DEBUG)",
    "insertText": "ensure(GRPCDoSScopeDebugging == 0 || TickScopePrivate.IsActive())"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (# endif PacketScopePrivate .)",
    "insertText": "SetActive(true)"
  },
  {
    "label": "GetPacketScope()",
    "kind": "Method",
    "detail": "Function (FPacketScope& PacketScope =)",
    "insertText": "GetPacketScope()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PacketScope . ReceivedPacketStartTime = TimeSeconds ; # if 1 SequentialRPCScopePrivate .)",
    "insertText": "Reset()"
  },
  {
    "label": "NotifyReceivedRPC()",
    "kind": "Method",
    "detail": "Function (# endif } ERPCNotifyResult)",
    "insertText": "NotifyReceivedRPC(FNetBitReader& Reader, TSet<FNetworkGUID>& UnmappedGuids, UObject* Object, UFunction* Function, FName FunctionName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(bRPCDoSDetection && !bHitchSuspendDetection)"
  },
  {
    "label": "PreSequentialRPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSequentialRPC()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bRPCTrackingEnabled)"
  },
  {
    "label": "GetSequentialRPCScope()",
    "kind": "Method",
    "detail": "Function (FSequentialRPCScope& SequentialRPCScope =)",
    "insertText": "GetSequentialRPCScope()"
  },
  {
    "label": "CheckRPCTracking()",
    "kind": "Method",
    "detail": "Function (Result = SequentialRPCScope .)",
    "insertText": "CheckRPCTracking(*this, Function, FunctionName)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (SequentialRPCScope . DebugReceivedRPCStartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "LightweightReceivedRPC()",
    "kind": "Method",
    "detail": "Function (# endif } return Result ; } void)",
    "insertText": "LightweightReceivedRPC(UFunction* Function, FName FunctionName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UNLIKELY(ForcedRPCTracking == FunctionName && FMath::FRand() <= ForcedRPCTrackingChance))"
  },
  {
    "label": "EnableForcedRPCTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableForcedRPCTracking(Function, FunctionName, FPlatformTime::Seconds())"
  },
  {
    "label": "PostReceivedRPC()",
    "kind": "Method",
    "detail": "Function (FLightweightRPCTracking& LightweightRPCTracking = SequentialRPCScope . LightweightRPCTracking ; FLightweightRPCTracking::FLightweightRPCEntry& CurEntry = LightweightRPCTracking . RPC [ LightweightRPCTracking . Count + + ] ; CurEntry . Function = Function ; CurEntry . Name = FunctionName ; } } } void)",
    "insertText": "PostReceivedRPC()"
  },
  {
    "label": "DebugAccumRPCTime()",
    "kind": "Method",
    "detail": "Function (FrameCounter .)",
    "insertText": "DebugAccumRPCTime(PacketScope.DebugReceivedRPCEndTime - PacketScope.DebugReceivedRPCStartTime)"
  },
  {
    "label": "GetTickScope()",
    "kind": "Method",
    "detail": "Function (FTickScope& TickScope =)",
    "insertText": "GetTickScope()"
  },
  {
    "label": "CondCheckCountQuota()",
    "kind": "Method",
    "detail": "Function (TickScope . FrameCounter . RPCCounter + + ; RPCIntervalCounter + + ; SequentialRPCScope . ReceivedPacketRPCCount + + ; PacketScope . bPacketContainsRPC = true ; TickScope .)",
    "insertText": "CondCheckCountQuota(*this)"
  },
  {
    "label": "PostSequentialRPC()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PostSequentialRPC(EPostSequentialRPCType SequenceType, double TimeSeconds, FRPCDoSCounters* RPCCounter, FRPCTrackingInfo* RPCTrackingInfo)"
  },
  {
    "label": "PostReceivedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReceivedPacket(double TimeSeconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(GetPacketScope().bPacketContainsRPC)"
  },
  {
    "label": "PostReceivedRPCPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReceivedRPCPacket(TimeSeconds)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (} ReceivedPacketEndTime = TimeSeconds ; PacketScopePrivate .)",
    "insertText": "SetActive(false)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (# if RPC_DOS_SCOPE_DEBUG)",
    "insertText": "ensure(GRPCDoSScopeDebugging == 0 || !SequentialRPCScopePrivate.IsActive())"
  },
  {
    "label": "PostReceivedRPCPacket()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "PostReceivedRPCPacket(double TimeSeconds)"
  },
  {
    "label": "PostTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTickDispatch()"
  },
  {
    "label": "NotifyClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyClose()"
  },
  {
    "label": "ShouldMonitorReceivedRPC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldMonitorReceivedRPC()"
  },
  {
    "label": "IsRPCDoSDetectionEnabled()",
    "kind": "Method",
    "detail": "Function (# if RPC_QUOTA_DEBUG return true ; # endif return bRPCTrackingEnabled ; } bool)",
    "insertText": "IsRPCDoSDetectionEnabled()"
  },
  {
    "label": "SetPlayerUIDFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerUIDFunc(FGetRPCDoSPlayerUID&& InPlayerUIDFunc)"
  },
  {
    "label": "SetKickPlayerFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKickPlayerFunc(FRPCDoSKickPlayer&& InKickPlayerFunc)"
  },
  {
    "label": "UpdateSeverity_Private()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSeverity_Private(ERPCDoSSeverityUpdate Update, ERPCDoSEscalateReason Reason)"
  },
  {
    "label": "InitState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitState(double TimeSeconds)"
  },
  {
    "label": "CondCheckCountQuota()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CondCheckCountQuota()"
  },
  {
    "label": "UpdateSeverity()",
    "kind": "Method",
    "detail": "Function (TickScope .)",
    "insertText": "UpdateSeverity(*this, ERPCDoSSeverityUpdate::Escalate, ERPCDoSEscalateReason::CountLimit)"
  },
  {
    "label": "CondCheckTimeQuota()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CondCheckTimeQuota(double TimeSeconds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextTimeQuotaCheck = TimeSeconds + TimeQuotaCheckInterval ;)",
    "insertText": "if(HasHitQuota_Time(CounterPerPeriodHistory, TickScope.FrameCounter))"
  },
  {
    "label": "UpdateSeverity()",
    "kind": "Method",
    "detail": "Function (TickScope .)",
    "insertText": "UpdateSeverity(*this, ERPCDoSSeverityUpdate::Escalate, ERPCDoSEscalateReason::TimeLimit)"
  },
  {
    "label": "CheckRPCTracking()",
    "kind": "Method",
    "detail": "Function (} } } ERPCNotifyResult)",
    "insertText": "CheckRPCTracking(UFunction* Function, FName FunctionName)"
  },
  {
    "label": "RecalculatePeriodHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculatePeriodHistory(const TArray<int8>& InTimePeriods, FRPCDoSCounters(&OutPerPeriodHistory)[16], int32 StartPerSecHistoryIdx=INDEX_NONE)"
  },
  {
    "label": "EnableRPCTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRPCTracking(double TimeSeconds)"
  },
  {
    "label": "EnableForcedRPCTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableForcedRPCTracking(UFunction* Function, FName FunctionName, double TimeSeconds)"
  },
  {
    "label": "DisableRPCTracking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableRPCTracking(double TimeSeconds)"
  },
  {
    "label": "FindOrAddRPCTracking()",
    "kind": "Method",
    "detail": "Function (FRPCTrackingInfo&)",
    "insertText": "FindOrAddRPCTracking(UFunction* InFunc, bool& bOutNewTracking)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FRPCTrackingInfo>& SharedResult = RPCTracking .)",
    "insertText": "FindOrAdd(InFunc)"
  },
  {
    "label": "FRPCTrackingInfo()",
    "kind": "Method",
    "detail": "Function (SharedResult = MakeShared<)",
    "insertText": "FRPCTrackingInfo()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActiveRPCTracking .)",
    "insertText": "Add({InFunc, SharedResult.Get()})"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bOutNewTracking = true ; } return* SharedResult .)",
    "insertText": "Get()"
  },
  {
    "label": "ClearStaleRPCTracking()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearStaleRPCTracking(double TimeSeconds)"
  },
  {
    "label": "CachePlayerAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePlayerAddress()"
  },
  {
    "label": "CachePlayerUID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePlayerUID()"
  },
  {
    "label": "GetPlayerAddress()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetPlayerAddress()"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Net ; # if RPC_DOS_SCOPE_DEBUG)",
    "insertText": "ensure(GRPCDoSScopeDebugging == 0 || bScopeActive != bInVal)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "T(this)->Reset()"
  },
  {
    "label": "UpdateSeverity()",
    "kind": "Method",
    "detail": "Function (} private : bool bScopeActive = false ; } ; class FTickScope : public TScopeBase<FTickScope> { public : void)",
    "insertText": "UpdateSeverity(FRPCDoSDetection& This, ERPCDoSSeverityUpdate Update, ERPCDoSEscalateReason Reason)"
  },
  {
    "label": "CondCheckCountQuota()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CondCheckCountQuota(FRPCDoSDetection& This)"
  },
  {
    "label": "CondCheckTimeQuota()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CondCheckTimeQuota(FRPCDoSDetection& This, double TimeSeconds)"
  },
  {
    "label": "CondCheckTimeQuota()",
    "kind": "Method",
    "detail": "Function (This .)",
    "insertText": "CondCheckTimeQuota(TimeSeconds)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Net ; # if RPC_DOS_SCOPE_DEBUG)",
    "insertText": "ensure(GRPCDoSScopeDebugging == 0 || PacketScopePrivate.IsActive())"
  },
  {
    "label": "CheckRPCTracking()",
    "kind": "Method",
    "detail": "Function (} ERPCNotifyResult)",
    "insertText": "CheckRPCTracking(FRPCDoSDetection& This, UFunction* Function, FName FunctionName)"
  },
  {
    "label": "FindOrAddRPCTracking()",
    "kind": "Method",
    "detail": "Function (} FRPCTrackingInfo&)",
    "insertText": "FindOrAddRPCTracking(FRPCDoSDetection& This, UFunction* InFunc, bool& bOutNewTracking)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (using namespace UE::Net ; # if RPC_DOS_SCOPE_DEBUG)",
    "insertText": "ensure(GRPCDoSScopeDebugging == 0 || SequentialRPCScopePrivate.IsActive())"
  }
]