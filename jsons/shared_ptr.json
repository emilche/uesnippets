[
  {
    "label": "_Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Alloc"
  },
  {
    "label": "__allocator_destructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__allocator_destructor"
  },
  {
    "label": "_ValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ValueType"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_EXCEPTION_ABI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_EXCEPTION_ABI"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_LIBCPP_TYPE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TYPE_VIS"
  },
  {
    "label": "_Dp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Dp"
  },
  {
    "label": "__shared_ptr_pointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__shared_ptr_pointer"
  },
  {
    "label": "__shared_ptr_emplace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__shared_ptr_emplace"
  },
  {
    "label": "_ALIGNAS_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ALIGNAS_TYPE"
  },
  {
    "label": "__shared_ptr_dummy_rebind_allocator_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__shared_ptr_dummy_rebind_allocator_type"
  },
  {
    "label": "_Other",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Other"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__compatible_with",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__compatible_with"
  },
  {
    "label": "_Ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ptr"
  },
  {
    "label": "__is_deletable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_deletable"
  },
  {
    "label": "__is_array_deletable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_array_deletable"
  },
  {
    "label": "_Pt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pt"
  },
  {
    "label": "__well_formed_deleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__well_formed_deleter"
  },
  {
    "label": "_Yp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Yp"
  },
  {
    "label": "__shared_ptr_deleter_ctor_reqs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__shared_ptr_deleter_ctor_reqs"
  },
  {
    "label": "_LIBCPP_SHARED_PTR_TRIVIAL_ABI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_SHARED_PTR_TRIVIAL_ABI"
  },
  {
    "label": "_CntrlBlk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CntrlBlk"
  },
  {
    "label": "__shared_ptr_default_allocator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__shared_ptr_default_allocator"
  },
  {
    "label": "_OrigPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OrigPtr"
  },
  {
    "label": "__shared_ptr_default_delete",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__shared_ptr_default_delete"
  },
  {
    "label": "_Un",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Un"
  },
  {
    "label": "__sp_aligned_storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__sp_aligned_storage"
  },
  {
    "label": "__unbounded_array_control_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unbounded_array_control_block"
  },
  {
    "label": "_Array",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Array"
  },
  {
    "label": "__bounded_array_control_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__bounded_array_control_block"
  },
  {
    "label": "owner_less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "owner_less"
  },
  {
    "label": "shared_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "shared_ptr"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_SHARED_PTR_H # define _LIBCPP___MEMORY_SHARED_PTR_H # include<__availability> # include<__config> # include<__functional / binary_function . h> # include<__functional / operations . h> # include<__functional / reference_wrapper . h> # include<__iterator / access . h> # include<__memory / addressof . h> # include<__memory / allocation_guard . h> # include<__memory / allocator . h> # include<__memory / allocator_traits . h> # include<__memory / auto_ptr . h> # include<__memory / compressed_pair . h> # include<__memory / construct_at . h> # include<__memory / pointer_traits . h> # include<__memory / uninitialized_algorithms . h> # include<__memory / unique_ptr . h> # include<__utility / forward . h> # include<__utility / move . h> # include<__utility / swap . h> # include<cstddef> # include<cstdlib> # include<iosfwd> # include<stdexcept> # include<type_traits> # include<typeinfo> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_ATOMIC_HEADER) # include <atomic> #endif #if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__allocator_destructor()",
    "kind": "Method",
    "detail": "Function (typedef _LIBCPP_NODEBUG allocator_traits<_Alloc> __alloc_traits ; public : typedef _LIBCPP_NODEBUG __alloc_traits::pointer pointer ; typedef _LIBCPP_NODEBUG __alloc_traits::size_type size_type ; private : _Alloc& __alloc_ ; size_type __s_ ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__allocator_destructor(_Alloc& __a, size_type __s) _NOEXCEPT : __alloc_(__a), __s_(__s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "operator()(pointer __p)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(__alloc_, __p, __s_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "defined(__clang__) && __has_builtin(__atomic_add_fetch) \\ && defined(__ATOMIC_RELAXED) \\ && defined(__ATOMIC_ACQ_REL) # define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT #elif defined(_LIBCPP_COMPILER_GCC) # define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT #endif template <class _ValueType> inline _LIBCPP_INLINE_VISIBILITY _ValueType __libcpp_relaxed_load(_ValueType const* __value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_THREADS) && \\ defined(__ATOMIC_RELAXED) && \\ (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC)) return __atomic_load_n(__value, __ATOMIC_RELAXED)"
  },
  {
    "label": "__libcpp_acquire_load()",
    "kind": "Method",
    "detail": "Function (# else return* __value ; # endif } template<class _ValueType> _LIBCPP_INLINE_VISIBILITY _ValueType)",
    "insertText": "__libcpp_acquire_load(_ValueType const* __value)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_THREADS) && \\ defined(__ATOMIC_ACQUIRE) && \\ (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC)) return __atomic_load_n(__value, __ATOMIC_ACQUIRE)"
  },
  {
    "label": "__libcpp_atomic_refcount_increment()",
    "kind": "Method",
    "detail": "Function (# else return* __value ; # endif } template<class _Tp> _LIBCPP_INLINE_VISIBILITY _Tp)",
    "insertText": "__libcpp_atomic_refcount_increment(_Tp& __t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS) return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED)"
  },
  {
    "label": "__libcpp_atomic_refcount_decrement()",
    "kind": "Method",
    "detail": "Function (# else return __t + = 1 ; # endif } template<class _Tp> _LIBCPP_INLINE_VISIBILITY _Tp)",
    "insertText": "__libcpp_atomic_refcount_decrement(_Tp& __t)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS) return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL)"
  },
  {
    "label": "bad_weak_ptr()",
    "kind": "Method",
    "detail": "Function (# else return __t - = 1 ; # endif } class _LIBCPP_EXCEPTION_ABI bad_weak_ptr : public std::exception { public :)",
    "insertText": "bad_weak_ptr()"
  },
  {
    "label": "bad_weak_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bad_weak_ptr(const bad_weak_ptr&)"
  },
  {
    "label": "what()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "what()"
  },
  {
    "label": "__throw_bad_weak_ptr()",
    "kind": "Method",
    "detail": "Function (} ; _LIBCPP_NORETURN _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__throw_bad_weak_ptr()"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "abort()"
  },
  {
    "label": "__shared_count()",
    "kind": "Method",
    "detail": "Function (# endif } template<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr ; class _LIBCPP_TYPE_VIS __shared_count {)",
    "insertText": "__shared_count(const __shared_count&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__shared_count&)",
    "insertText": "operator(const __shared_count&)"
  },
  {
    "label": "__shared_count()",
    "kind": "Method",
    "detail": "Function (protected : long __shared_owners_ ; ~)",
    "insertText": "__shared_count()"
  },
  {
    "label": "__on_zero_shared()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "__on_zero_shared()"
  },
  {
    "label": "__shared_count()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__shared_count(long __refs = 0) _NOEXCEPT : __shared_owners_(__refs)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(_LIBCPP_SHARED_PTR_DEFINE_LEGACY_INLINE_FUNCTIONS) void __add_shared()"
  },
  {
    "label": "__release_shared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "__release_shared()"
  },
  {
    "label": "__add_shared()",
    "kind": "Method",
    "detail": "Function (# else _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__add_shared()"
  },
  {
    "label": "__libcpp_atomic_refcount_increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__libcpp_atomic_refcount_increment(__shared_owners_)"
  },
  {
    "label": "__shared_weak_count()",
    "kind": "Method",
    "detail": "Function (} } ; class _LIBCPP_TYPE_VIS __shared_weak_count : private __shared_count { long __shared_weak_owners_ ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__shared_weak_count(long __refs = 0) _NOEXCEPT : __shared_count(__refs), __shared_weak_owners_(__refs)"
  },
  {
    "label": "__shared_weak_count()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "__shared_weak_count()"
  },
  {
    "label": "__add_weak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__add_weak()"
  },
  {
    "label": "__libcpp_atomic_refcount_increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__libcpp_atomic_refcount_increment(__shared_weak_owners_)"
  },
  {
    "label": "__release_weak()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "__release_weak()"
  },
  {
    "label": "use_count()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY long)",
    "insertText": "use_count()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (} __shared_weak_count*)",
    "insertText": "lock()"
  },
  {
    "label": "__get_deleter()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "__get_deleter(const type_info&)"
  },
  {
    "label": "__on_zero_shared_weak()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "__on_zero_shared_weak()"
  },
  {
    "label": "__shared_ptr_pointer()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp,class _Dp,class _Alloc> class __shared_ptr_pointer : public __shared_weak_count { __compressed_pair<__compressed_pair<_Tp,_Dp>,_Alloc> __data_ ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a) : __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a))"
  },
  {
    "label": "__get_deleter()",
    "kind": "Method",
    "detail": "Function (} ; # ifndef _LIBCPP_NO_RTTI template<class _Tp,class _Dp,class _Alloc> const void* __shared_ptr_pointer<_Tp,_Dp,_Alloc)",
    "insertText": "__get_deleter(const type_info& __t)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (__data_ .)",
    "insertText": "first().second()(__data_.first().first())"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (__data_ .)",
    "insertText": "first().second().~_Dp()"
  },
  {
    "label": "__a()",
    "kind": "Method",
    "detail": "Function (typedef __allocator_traits_rebind<_Alloc,__shared_ptr_pointer>::type _Al ; typedef allocator_traits<_Al> _ATraits ; typedef pointer_traits<_ATraits::pointer> _PTraits ; _Al)",
    "insertText": "__a(__data_.second())"
  },
  {
    "label": "second()",
    "kind": "Method",
    "detail": "Function (__data_ .)",
    "insertText": "second().~_Alloc()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (__a .)",
    "insertText": "deallocate(_PTraits::pointer_to(*this), 1)"
  },
  {
    "label": "__shared_ptr_emplace()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Alloc> struct __shared_ptr_emplace : __shared_weak_count { template<class . . . _Args> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__shared_ptr_emplace(_Alloc __a, _Args&& ...__args) : __storage_(_VSTD::move(__a))"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 7 using _TpAlloc = __allocator_traits_rebind<_Alloc,_Tp>::type ; _TpAlloc)",
    "insertText": "__tmp(*__get_alloc())"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (allocator_traits<_TpAlloc)",
    "insertText": "construct(__tmp, __get_elem(), _VSTD::forward<_Args>(__args)...)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "new((void*)__get_elem()) _Tp(_VSTD::forward<_Args>(__args)...)"
  },
  {
    "label": "__get_alloc()",
    "kind": "Method",
    "detail": "Function (# endif } _LIBCPP_HIDE_FROM_ABI _Alloc*)",
    "insertText": "__get_alloc()"
  },
  {
    "label": "__get_elem()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Tp*)",
    "insertText": "__get_elem()"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (allocator_traits<_TpAlloc)",
    "insertText": "destroy(__tmp, __get_elem())"
  },
  {
    "label": "__get_elem()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__get_elem()->~_Tp()"
  },
  {
    "label": "_Storage()",
    "kind": "Method",
    "detail": "Function (__storage_ . ~)",
    "insertText": "_Storage()"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (allocator_traits<_ControlBlockAlloc)",
    "insertText": "deallocate(__tmp, pointer_traits<_ControlBlockPointer>::pointer_to(*this), 1)"
  },
  {
    "label": "_ALIGNAS_TYPE()",
    "kind": "Method",
    "detail": "Function (} using _CompressedPair = __compressed_pair<_Alloc,_Tp> ; struct)",
    "insertText": "_ALIGNAS_TYPE(_CompressedPair)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (char __blob_ [)",
    "insertText": "sizeof(_CompressedPair)"
  },
  {
    "label": "_Storage()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "_Storage(_Alloc&& __a)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)__get_alloc()) _Alloc(_VSTD::move(__a))"
  },
  {
    "label": "__get_alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__get_alloc()->~_Alloc()"
  },
  {
    "label": "_CompressedPair()",
    "kind": "Method",
    "detail": "Function (_CompressedPair* __as_pair = reinterpret_cast<)",
    "insertText": "_CompressedPair(__blob_)"
  },
  {
    "label": "__get_first_base()",
    "kind": "Method",
    "detail": "Function (_CompressedPair::_Base1* __first =)",
    "insertText": "__get_first_base(__as_pair)"
  },
  {
    "label": "_Alloc()",
    "kind": "Method",
    "detail": "Function (_Alloc* __alloc = reinterpret_cast<)",
    "insertText": "_Alloc(__first)"
  },
  {
    "label": "__get_second_base()",
    "kind": "Method",
    "detail": "Function (_CompressedPair::_Base2* __second =)",
    "insertText": "__get_second_base(__as_pair)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (_Tp* __elem = reinterpret_cast<)",
    "insertText": "_Tp(__second)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (_Storage __storage_ ; } ; struct __shared_ptr_dummy_rebind_allocator_type ; template<> class _LIBCPP_TEMPLATE_VIS allocator<__shared_ptr_dummy_rebind_allocator_type> { public : template<class _Other> struct rebind { typedef allocator<_Other> other ; } ; } ; template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this ; template<class _Tp,class _Up> struct __compatible_with # if _LIBCPP_STD_VER> 1 4 : is_convertible<remove_extent_t<_Tp>*,remove_extent_t<_Up>*> { } ; # else : is_convertible<_Tp*,_Up*> { } ; # endif template<class _Ptr,class = void> struct __is_deletable : false_type { } ; template<class _Ptr> struct __is_deletable<_Ptr,)",
    "insertText": "decltype(delete declval<_Ptr>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Ptr,class = void> struct __is_array_deletable : false_type { } ; template<class _Ptr> struct __is_array_deletable<_Ptr,)",
    "insertText": "decltype(delete[] declval<_Ptr>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Dp,class _Pt,class =)",
    "insertText": "decltype(declval<_Dp>()(declval<_Pt>()))> static true_type __well_formed_deleter_test(int)"
  },
  {
    "label": "__well_formed_deleter_test()",
    "kind": "Method",
    "detail": "Function (template<class,class> false_type)",
    "insertText": "__well_formed_deleter_test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class _Dp,class _Pt> struct __well_formed_deleter :)",
    "insertText": "decltype(__well_formed_deleter_test<_Dp, _Pt>(0))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Dp,class _Tp,class _Yp> struct __shared_ptr_deleter_ctor_reqs { const bool value = __compatible_with<_Tp,_Yp>::value&& is_move_constructible<_Dp>::value&& __well_formed_deleter<_Dp,_Tp*>::value ; } ; # if)",
    "insertText": "defined(_LIBCPP_ABI_ENABLE_SHARED_PTR_TRIVIAL_ABI) # define _LIBCPP_SHARED_PTR_TRIVIAL_ABI __attribute__((trivial_abi))"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (public : # if _LIBCPP_STD_VER> 1 4 typedef weak_ptr<_Tp> weak_type ; typedef remove_extent_t<_Tp> element_type ; # else typedef _Tp element_type ; # endif private : element_type* __ptr_ ; __shared_weak_count* __cntrl_ ; public : _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "shared_ptr() _NOEXCEPT : __ptr_(nullptr), __cntrl_(nullptr)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "shared_ptr(nullptr_t) _NOEXCEPT : __ptr_(nullptr), __cntrl_(nullptr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<class _Yp,class = __enable_if_t<_And<__compatible_with<_Yp,_Tp> # if !)",
    "insertText": "defined(_LIBCPP_CXX03_LANG) && !defined(_LIBCPP_COMPILER_GCC) , _If<is_array<_Tp>::value, __is_array_deletable<_Yp*>, __is_deletable<_Yp*> > #endif >::value > > explicit shared_ptr(_Yp* __p) : __ptr_(__p)"
  },
  {
    "label": "__hold()",
    "kind": "Method",
    "detail": "Function (unique_ptr<_Yp>)",
    "insertText": "__hold(__p)"
  },
  {
    "label": "_CntrlBlk()",
    "kind": "Method",
    "detail": "Function (typedef __shared_ptr_default_allocator<_Yp>::type _AllocT ; typedef __shared_ptr_pointer<_Yp*,__shared_ptr_default_delete<_Tp,_Yp>,_AllocT> _CntrlBlk ; __cntrl_ = new)",
    "insertText": "_CntrlBlk(__p, __shared_ptr_default_delete<_Tp, _Yp>(), _AllocT())"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (__hold .)",
    "insertText": "release()"
  },
  {
    "label": "__enable_weak_this()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__enable_weak_this(__p, __p)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} template<class _Yp,class _Dp,class = __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp,_Yp,element_type>::value>> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(_Yp* __p, _Dp __d) : __ptr_(__p)"
  },
  {
    "label": "_CntrlBlk()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_NO_EXCEPTIONS try { # endif typedef __shared_ptr_default_allocator<_Yp>::type _AllocT ; typedef __shared_ptr_pointer<_Yp*,_Dp,_AllocT> _CntrlBlk ; # ifndef _LIBCPP_CXX03_LANG __cntrl_ = new)",
    "insertText": "_CntrlBlk(__p, _VSTD::move(__d), _AllocT())"
  },
  {
    "label": "_CntrlBlk()",
    "kind": "Method",
    "detail": "Function (# else __cntrl_ = new)",
    "insertText": "_CntrlBlk(__p, __d, _AllocT())"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_NO_EXCEPTIONS })",
    "insertText": "catch(...)"
  },
  {
    "label": "__d()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__d(__p)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif } template<class _Yp,class _Dp,class _Alloc,class = __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp,_Yp,element_type>::value>> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(_Yp* __p, _Dp __d, _Alloc __a) : __ptr_(__p)"
  },
  {
    "label": "__a2()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_NO_EXCEPTIONS try { # endif typedef __shared_ptr_pointer<_Yp*,_Dp,_Alloc> _CntrlBlk ; typedef __allocator_traits_rebind<_Alloc,_CntrlBlk>::type _A2 ; typedef __allocator_destructor<_A2> _D2 ; _A2)",
    "insertText": "__a2(__a)"
  },
  {
    "label": "__hold2()",
    "kind": "Method",
    "detail": "Function (unique_ptr<_CntrlBlk,_D2>)",
    "insertText": "__hold2(__a2.allocate(1), _D2(__a2, 1))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)_VSTD::addressof(*__hold2.get())) #ifndef _LIBCPP_CXX03_LANG _CntrlBlk(__p, _VSTD::move(__d), __a)"
  },
  {
    "label": "_CntrlBlk()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "_CntrlBlk(__p, __d, __a)"
  },
  {
    "label": "addressof()",
    "kind": "Method",
    "detail": "Function (# endif __cntrl_ =)",
    "insertText": "addressof(*__hold2.release())"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif } template<class _Dp> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(nullptr_t __p, _Dp __d) : __ptr_(nullptr)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif } template<class _Dp,class _Alloc> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a) : __ptr_(nullptr)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif } template<class _Yp> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT : __ptr_(__p), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(const shared_ptr& __r) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} template<class _Yp,class = __enable_if_t<__compatible_with<_Yp,_Tp>::value>> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(const shared_ptr<_Yp>& __r) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(shared_ptr&& __r) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (__r . __ptr_ = nullptr ; __r . __cntrl_ = nullptr ; } template<class _Yp,class = __enable_if_t<__compatible_with<_Yp,_Tp>::value>> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(shared_ptr<_Yp>&& __r) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (__r . __ptr_ = nullptr ; __r . __cntrl_ = nullptr ; } template<class _Yp,class = __enable_if_t<__compatible_with<_Yp,_Tp>::value>> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(const weak_ptr<_Yp>& __r) : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER<= 1 4 | |)",
    "insertText": "defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR) template<class _Yp, class = __enable_if_t<is_convertible<_Yp*, element_type*>::value> > _LIBCPP_HIDE_FROM_ABI shared_ptr(auto_ptr<_Yp>&& __r) : __ptr_(__r.get())"
  },
  {
    "label": "_CntrlBlk()",
    "kind": "Method",
    "detail": "Function (typedef __shared_ptr_pointer<_Yp*,default_delete<_Yp>,allocator<_Yp>> _CntrlBlk ; __cntrl_ = new)",
    "insertText": "_CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>())"
  },
  {
    "label": "__enable_weak_this()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__enable_weak_this(__r.get(), __r.get())"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Yp,class _Dp,class = __enable_if_t<! is_lvalue_reference<_Dp>::value&& is_convertible<unique_ptr<_Yp,_Dp>::pointer,element_type*>::value>> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "shared_ptr(unique_ptr<_Yp, _Dp>&& __r) : __ptr_(__r.get())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER> 1 1)",
    "insertText": "if(__ptr_ == nullptr)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI ~)",
    "insertText": "shared_ptr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>&)",
    "insertText": "operator(const shared_ptr& __r)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shared_ptr(__r).swap(*this)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shared_ptr(_VSTD::move(__r)).swap(*this)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__ptr_, __r.__ptr_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__cntrl_, __r.__cntrl_)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "reset()"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shared_ptr().swap(*this)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} template<class _Yp,class = __enable_if_t<__compatible_with<_Yp,_Tp>::value>> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "reset(_Yp* __p)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shared_ptr(__p).swap(*this)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} template<class _Yp,class _Dp,class = __enable_if_t<__compatible_with<_Yp,_Tp>::value>> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "reset(_Yp* __p, _Dp __d)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shared_ptr(__p, __d).swap(*this)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} template<class _Yp,class _Dp,class _Alloc,class = __enable_if_t<__compatible_with<_Yp,_Tp>::value>> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "reset(_Yp* __p, _Dp __d, _Alloc __a)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shared_ptr(__p, __d, __a).swap(*this)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI element_type*)",
    "insertText": "get()"
  },
  {
    "label": "unique()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "unique()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "bool()"
  },
  {
    "label": "owner_before()",
    "kind": "Method",
    "detail": "Function (} template<class _Up> _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "owner_before(shared_ptr<_Up> const& __p)"
  },
  {
    "label": "__create_with_control_block()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Yp,class _CntrlBlk> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "__create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl)"
  },
  {
    "label": "__enable_weak_this()",
    "kind": "Method",
    "detail": "Function (shared_ptr<_Tp> __r ; __r . __ptr_ = __p ; __r . __cntrl_ = __cntrl ; __r .)",
    "insertText": "__enable_weak_this(__r.__ptr_, __r.__ptr_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef remove_cv<_Yp>::type _RawYp ;)",
    "insertText": "if(__e && __e->__weak_this_.expired())"
  },
  {
    "label": "_RawYp()",
    "kind": "Method",
    "detail": "Function (__e -> __weak_this_ = shared_ptr<)",
    "insertText": "_RawYp(*this, const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)))"
  },
  {
    "label": "__enable_weak_this()",
    "kind": "Method",
    "detail": "Function (} } _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__enable_weak_this(...)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (shared_ptr<_Tp>)",
    "insertText": "shared_ptr(weak_ptr<_Tp>)"
  },
  {
    "label": "shared_ptr()",
    "kind": "Method",
    "detail": "Function (shared_ptr<_Tp>)",
    "insertText": "shared_ptr(unique_ptr<_Tp, _Dp>)"
  },
  {
    "label": "allocate_shared()",
    "kind": "Method",
    "detail": "Function (# endif template<class _Tp,class _Alloc,class . . . _Args,class = __enable_if_t<! is_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "allocate_shared(const _Alloc& __a, _Args&& ...__args)"
  },
  {
    "label": "__guard()",
    "kind": "Method",
    "detail": "Function (using _ControlBlock = __shared_ptr_emplace<_Tp,_Alloc> ; using _ControlBlockAllocator = __allocator_traits_rebind<_Alloc,_ControlBlock>::type ; __allocation_guard<_ControlBlockAllocator>)",
    "insertText": "__guard(__a, 1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)_VSTD::addressof(*__guard.__get())) _ControlBlock(__a, _VSTD::forward<_Args>(__args)...)"
  },
  {
    "label": "__release_ptr()",
    "kind": "Method",
    "detail": "Function (auto __control_block = __guard .)",
    "insertText": "__release_ptr()"
  },
  {
    "label": "make_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class . . . _Args,class = __enable_if_t<! is_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "make_shared(_Args&& ...__args)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 4 template<size_t _Alignment> struct __sp_aligned_storage {)",
    "insertText": "alignas(_Alignment)"
  },
  {
    "label": "__get_data()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp,class _Alloc> struct __unbounded_array_control_block ; template<class _Tp,class _Alloc> struct __unbounded_array_control_block<_Tp [ ],_Alloc> : __shared_weak_count { _LIBCPP_HIDE_FROM_ABI _Tp*)",
    "insertText": "__get_data()"
  },
  {
    "label": "__uninitialized_allocator_fill_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__uninitialized_allocator_fill_n(__alloc_, std::begin(__data_), __count_, __arg)"
  },
  {
    "label": "__unbounded_array_control_block()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__unbounded_array_control_block(_Alloc const& __alloc, size_t __count) : __alloc_(__alloc), __count_(__count)"
  },
  {
    "label": "__uninitialized_allocator_value_construct_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__uninitialized_allocator_value_construct_n(__alloc_, std::begin(__data_), __count_)"
  },
  {
    "label": "__bytes_for()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI size_t)",
    "insertText": "__bytes_for(size_t __elements)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t __bytes = __elements = = 0 ?)",
    "insertText": "sizeof(__unbounded_array_control_block) : (__elements - 1) * sizeof(_Tp) + sizeof(__unbounded_array_control_block)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (size_t __align =)",
    "insertText": "alignof(_Tp)"
  },
  {
    "label": "__unbounded_array_control_block()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI ~)",
    "insertText": "__unbounded_array_control_block()"
  },
  {
    "label": "__value_alloc()",
    "kind": "Method",
    "detail": "Function (__allocator_traits_rebind_t<_Alloc,_Tp>)",
    "insertText": "__value_alloc(__alloc_)"
  },
  {
    "label": "__allocator_destroy_multidimensional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + __count_)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (using _AlignedStorage = __sp_aligned_storage<)",
    "insertText": "alignof(__unbounded_array_control_block)"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (using _StorageAlloc = __allocator_traits_rebind_t<_Alloc,_AlignedStorage> ; using _PointerTraits = pointer_traits<allocator_traits<_StorageAlloc>::pointer> ; _StorageAlloc)",
    "insertText": "__tmp(__alloc_)"
  },
  {
    "label": "_Alloc()",
    "kind": "Method",
    "detail": "Function (__alloc_ . ~)",
    "insertText": "_Alloc()"
  },
  {
    "label": "__bytes_for()",
    "kind": "Method",
    "detail": "Function (size_t __size =)",
    "insertText": "__bytes_for(__count_)"
  },
  {
    "label": "_AlignedStorage()",
    "kind": "Method",
    "detail": "Function (_AlignedStorage* __storage = reinterpret_cast<)",
    "insertText": "_AlignedStorage(this)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (allocator_traits<_StorageAlloc)",
    "insertText": "deallocate(__tmp, _PointerTraits::pointer_to(*__storage), __size)"
  },
  {
    "label": "__allocate_shared_unbounded_array()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_NO_UNIQUE_ADDRESS _Alloc __alloc_ ; size_t __count_ ; union { _Tp __data_ [ 1 ] ; } ; } ; template<class _Array,class _Alloc,class . . . _Arg> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Array>)",
    "insertText": "__allocate_shared_unbounded_array(const _Alloc& __a, size_t __n, _Arg&& ...__arg)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (using _ControlBlock = __unbounded_array_control_block<_Array,_Alloc> ; using _AlignedStorage = __sp_aligned_storage<)",
    "insertText": "alignof(_ControlBlock)"
  },
  {
    "label": "__guard()",
    "kind": "Method",
    "detail": "Function (using _StorageAlloc = __allocator_traits_rebind_t<_Alloc,_AlignedStorage> ; __allocation_guard<_StorageAlloc>)",
    "insertText": "__guard(__a, _ControlBlock::__bytes_for(__n) / sizeof(_AlignedStorage))"
  },
  {
    "label": "_ControlBlock()",
    "kind": "Method",
    "detail": "Function (_ControlBlock* __control_block = reinterpret_cast<)",
    "insertText": "_ControlBlock(std::addressof(*__guard.__get()))"
  },
  {
    "label": "__construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__construct_at(__control_block, __a, __n, std::forward<_Arg>(__arg)...)"
  },
  {
    "label": "__uninitialized_allocator_fill_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__uninitialized_allocator_fill_n(__alloc_, std::addressof(__data_[0]), _Count, __arg)"
  },
  {
    "label": "__bounded_array_control_block()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__bounded_array_control_block(_Alloc const& __alloc) : __alloc_(__alloc)"
  },
  {
    "label": "__uninitialized_allocator_value_construct_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__uninitialized_allocator_value_construct_n(__alloc_, std::addressof(__data_[0]), _Count)"
  },
  {
    "label": "__bounded_array_control_block()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI ~)",
    "insertText": "__bounded_array_control_block()"
  },
  {
    "label": "__allocator_destroy_multidimensional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + _Count)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (allocator_traits<_ControlBlockAlloc)",
    "insertText": "deallocate(__tmp, _PointerTraits::pointer_to(*this), sizeof(*this))"
  },
  {
    "label": "__allocate_shared_bounded_array()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_NO_UNIQUE_ADDRESS _Alloc __alloc_ ; union { _Tp __data_ [ _Count ] ; } ; } ; template<class _Array,class _Alloc,class . . . _Arg> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Array>)",
    "insertText": "__allocate_shared_bounded_array(const _Alloc& __a, _Arg&& ...__arg)"
  },
  {
    "label": "__construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__construct_at(__control_block, __a, std::forward<_Arg>(__arg)...)"
  },
  {
    "label": "allocate_shared()",
    "kind": "Method",
    "detail": "Function (} # endif # if _LIBCPP_STD_VER> 1 7 template<class _Tp,class _Alloc,class = __enable_if_t<is_bounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "allocate_shared(const _Alloc& __a)"
  },
  {
    "label": "allocate_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Alloc,class = __enable_if_t<is_bounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "allocate_shared(const _Alloc& __a, const remove_extent_t<_Tp>& __u)"
  },
  {
    "label": "allocate_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Alloc,class = __enable_if_t<is_unbounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "allocate_shared(const _Alloc& __a, size_t __n)"
  },
  {
    "label": "allocate_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Alloc,class = __enable_if_t<is_unbounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "allocate_shared(const _Alloc& __a, size_t __n, const remove_extent_t<_Tp>& __u)"
  },
  {
    "label": "make_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class = __enable_if_t<is_bounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "make_shared()"
  },
  {
    "label": "make_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class = __enable_if_t<is_bounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "make_shared(const remove_extent_t<_Tp>& __u)"
  },
  {
    "label": "make_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class = __enable_if_t<is_unbounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "make_shared(size_t __n)"
  },
  {
    "label": "make_shared()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class = __enable_if_t<is_unbounded_array<_Tp>::value>> _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>)",
    "insertText": "make_shared(size_t __n, const remove_extent_t<_Tp>& __u)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y)"
  },
  {
    "label": "_Vp()",
    "kind": "Method",
    "detail": "Function (# if _LIBCPP_STD_VER<= 1 1 typedef common_type<_Tp*,_Up*>::type _Vp ; return less<)",
    "insertText": "_Vp()(__x.get(), __y.get())"
  },
  {
    "label": "less()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "less()(__x.get(), __y.get())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const shared_ptr<_Tp>& __x, nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(nullptr_t, const shared_ptr<_Tp>& __x)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (__x .)",
    "insertText": "swap(__y)"
  },
  {
    "label": "static_pointer_cast()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY shared_ptr<_Tp>)",
    "insertText": "static_pointer_cast(const shared_ptr<_Up>& __r)"
  },
  {
    "label": "dynamic_pointer_cast()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY shared_ptr<_Tp>)",
    "insertText": "dynamic_pointer_cast(const shared_ptr<_Up>& __r)"
  },
  {
    "label": "_ET()",
    "kind": "Method",
    "detail": "Function (typedef shared_ptr<_Tp>::element_type _ET ; _ET* __p = dynamic_cast<)",
    "insertText": "_ET(__r.get())"
  },
  {
    "label": "const_pointer_cast()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> shared_ptr<_Tp>)",
    "insertText": "const_pointer_cast(const shared_ptr<_Up>& __r)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (typedef shared_ptr<_Tp>::element_type _RTp ; return shared_ptr<)",
    "insertText": "_Tp(__r, const_cast<_RTp*>(__r.get()))"
  },
  {
    "label": "reinterpret_pointer_cast()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> shared_ptr<_Tp>)",
    "insertText": "reinterpret_pointer_cast(const shared_ptr<_Up>& __r)"
  },
  {
    "label": "get_deleter()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_NO_RTTI template<class _Dp,class _Tp> _LIBCPP_INLINE_VISIBILITY _Dp*)",
    "insertText": "get_deleter(const shared_ptr<_Tp>& __p)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Tp> class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS weak_ptr { public : # if _LIBCPP_STD_VER> 1 4 typedef remove_extent_t<_Tp> element_type ; # else typedef _Tp element_type ; # endif private : element_type* __ptr_ ; __shared_weak_count* __cntrl_ ; public : _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "weak_ptr()"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (template<class _Yp> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "weak_ptr(shared_ptr<_Yp> const& __r, typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type = 0)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY)",
    "insertText": "weak_ptr(weak_ptr const& __r)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (template<class _Yp> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "weak_ptr(weak_ptr<_Yp> const& __r, typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type = 0)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY)",
    "insertText": "weak_ptr(weak_ptr&& __r)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (template<class _Yp> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "weak_ptr(weak_ptr<_Yp>&& __r, typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type = 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY weak_ptr&)",
    "insertText": "operator(weak_ptr const& __r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Yp> enable_if<__compatible_with<_Yp,_Tp>::value,weak_ptr&>::type _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "operator(weak_ptr<_Yp> const& __r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY weak_ptr&)",
    "insertText": "operator(weak_ptr&& __r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Yp> enable_if<__compatible_with<_Yp,_Tp>::value,weak_ptr&>::type _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "operator(weak_ptr<_Yp>&& __r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Yp> enable_if<__compatible_with<_Yp,_Tp>::value,weak_ptr&>::type _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "operator(shared_ptr<_Yp> const& __r)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "swap(weak_ptr& __r)"
  },
  {
    "label": "expired()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "expired()"
  },
  {
    "label": "owner_before()",
    "kind": "Method",
    "detail": "Function (template<class _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "owner_before(const shared_ptr<_Up>& __r)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (# endif template<class _Tp> _LIBCPP_CONSTEXPR weak_ptr<_Tp)",
    "insertText": "weak_ptr() _NOEXCEPT : __ptr_(nullptr), __cntrl_(nullptr)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> weak_ptr<_Tp)",
    "insertText": "weak_ptr(weak_ptr const& __r) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> template<class _Yp> weak_ptr<_Tp)",
    "insertText": "weak_ptr(shared_ptr<_Yp> const& __r, typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> template<class _Yp> weak_ptr<_Tp)",
    "insertText": "weak_ptr(weak_ptr<_Yp> const& __r, typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> weak_ptr<_Tp)",
    "insertText": "weak_ptr(weak_ptr&& __r) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (__r . __ptr_ = nullptr ; __r . __cntrl_ = nullptr ; } template<class _Tp> template<class _Yp> weak_ptr<_Tp)",
    "insertText": "weak_ptr(weak_ptr<_Yp>&& __r, typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type) _NOEXCEPT : __ptr_(__r.__ptr_), __cntrl_(__r.__cntrl_)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "weak_ptr(__r).swap(*this)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "weak_ptr(_VSTD::move(__r)).swap(*this)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y)"
  },
  {
    "label": "weak_ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "weak_ptr().swap(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()(shared_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()( weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Tp> struct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp>> : __binary_function<weak_ptr<_Tp>,weak_ptr<_Tp>,bool> { _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()( weak_ptr<_Tp> const& __x, weak_ptr<_Tp> const& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; # if _LIBCPP_STD_VER> 1 4 template<> struct _LIBCPP_TEMPLATE_VIS owner_less<void> { template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()( shared_ptr<_Tp> const& __x, weak_ptr<_Up> const& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()( weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator()( weak_ptr<_Tp> const& __x, weak_ptr<_Up> const& __y)"
  },
  {
    "label": "enable_shared_from_this()",
    "kind": "Method",
    "detail": "Function (} typedef void is_transparent ; } ; # endif template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this { weak_ptr<_Tp> __weak_this_ ; protected : _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "enable_shared_from_this()"
  },
  {
    "label": "enable_shared_from_this()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "enable_shared_from_this(enable_shared_from_this const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY enable_shared_from_this&)",
    "insertText": "operator(enable_shared_from_this const&)"
  },
  {
    "label": "shared_from_this()",
    "kind": "Method",
    "detail": "Function (} public : _LIBCPP_INLINE_VISIBILITY shared_ptr<_Tp>)",
    "insertText": "shared_from_this()"
  },
  {
    "label": "weak_from_this()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 4 _LIBCPP_INLINE_VISIBILITY weak_ptr<_Tp>)",
    "insertText": "weak_from_this()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_DEPRECATED_IN_CXX17 typedef size_t result_type ; # endif _LIBCPP_INLINE_VISIBILITY size_t)",
    "insertText": "operator()(const shared_ptr<_Tp>& __ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _CharT,class _Traits,class _Yp> _LIBCPP_INLINE_VISIBILITY basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_THREADS)"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unlock()"
  },
  {
    "label": "__sp_mut()",
    "kind": "Method",
    "detail": "Function (private : _LIBCPP_CONSTEXPR)",
    "insertText": "__sp_mut(void*)"
  },
  {
    "label": "__sp_mut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__sp_mut(const __sp_mut&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__sp_mut&)",
    "insertText": "operator(const __sp_mut&)"
  },
  {
    "label": "__get_sp_mut()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS __sp_mut&)",
    "insertText": "__get_sp_mut(const void*)"
  },
  {
    "label": "atomic_is_lock_free()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "atomic_is_lock_free(const shared_ptr<_Tp>*)"
  },
  {
    "label": "__get_sp_mut()",
    "kind": "Method",
    "detail": "Function (__sp_mut& __m =)",
    "insertText": "__get_sp_mut(__p)"
  },
  {
    "label": "atomic_store()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR void)",
    "insertText": "atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (__p ->)",
    "insertText": "swap(__r)"
  },
  {
    "label": "atomic_store_explicit()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR void)",
    "insertText": "atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)"
  },
  {
    "label": "atomic_store()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_store(__p, __r)"
  },
  {
    "label": "atomic_exchange()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR shared_ptr<_Tp>)",
    "insertText": "atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)"
  },
  {
    "label": "atomic_compare_exchange_strong()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR bool)",
    "insertText": "atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__temp, *__p)"
  },
  {
    "label": "atomic_compare_exchange_strong_explicit()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR bool)",
    "insertText": "atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w, memory_order, memory_order)"
  },
  {
    "label": "atomic_compare_exchange_weak_explicit()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR bool)",
    "insertText": "atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w, memory_order, memory_order)"
  }
]