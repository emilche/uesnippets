[
  {
    "label": "CScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CScope"
  },
  {
    "label": "SAccessLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SAccessLevel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SAccessLevel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Text / UTF8String . h \" # include \" uLang / Common / Containers / Array . h \" namespace uLang { class CScope ; struct SAccessLevel { enum class EKind : int8_t { Public,Internal,Protected,Private,Scoped,EpicInternal,} ; EKind _Kind ; uLang::TArray<const CScope*> _Scopes ;)",
    "insertText": "SAccessLevel() : _Kind(SAccessLevel::EKind::Internal)"
  },
  {
    "label": "SAccessLevel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SAccessLevel(SAccessLevel::EKind Kind) : _Kind(Kind)"
  },
  {
    "label": "SAccessLevel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SAccessLevel(const SAccessLevel&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SAccessLevel&)",
    "insertText": "operator(const SAccessLevel&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const SAccessLevel& Lhs, const SAccessLevel& Rhs)"
  },
  {
    "label": "KindAsCString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "KindAsCString(SAccessLevel::EKind AccessLevelKind)"
  }
]