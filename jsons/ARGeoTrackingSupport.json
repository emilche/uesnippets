[
  {
    "label": "FCheckGeoTrackingAvailabilityAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCheckGeoTrackingAvailabilityAsyncTask"
  },
  {
    "label": "FGetGeoLocationAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetGeoLocationAsyncTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "UARGeoTrackingSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UARGeoTrackingSupport"
  },
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "CheckGeoTrackingAvailability()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "CheckGeoTrackingAvailability(FString& OutError)"
  },
  {
    "label": "CheckGeoTrackingAvailability()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "CheckGeoTrackingAvailability(float Longitude, float Latitude, FString& OutError)"
  },
  {
    "label": "GetGeoLocationAtWorldPosition()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetGeoLocationAtWorldPosition(const FVector& WorldPosition, FString& OutError)"
  },
  {
    "label": "FinishWithAvailability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishWithAvailability(bool bInIsAvailable)"
  },
  {
    "label": "FinishWithError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishWithError(const FString& InError)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FGeoTrackingAvailabilityDelegate, bool, bIsAvailable, FString, Error)"
  },
  {
    "label": "FinishWithGeoLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishWithGeoLocation(float InLongitude, float InLatitude, float InAltitude)"
  },
  {
    "label": "FinishWithError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishWithError(const FString& InError)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(FGetGeoLocationDelegate, float, Longitude, float, Latitude, float, Altitude, FString, Error)"
  }
]