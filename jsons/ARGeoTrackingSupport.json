[
  {
    "label": "FCheckGeoTrackingAvailabilityAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCheckGeoTrackingAvailabilityAsyncTask"
  },
  {
    "label": "FGetGeoLocationAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGetGeoLocationAsyncTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "AUGMENTEDREALITY_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AUGMENTEDREALITY_API"
  },
  {
    "label": "UARGeoTrackingSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UARGeoTrackingSupport"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ARBlueprintProxy . h \" # include \" Misc / Optional . h \" # include \" ARTypes . h \" # include \" Features / IModularFeature . h \" # include \" ARGeoTrackingSupport . generated . h \" class FCheckGeoTrackingAvailabilityAsyncTask ; class FGetGeoLocationAsyncTask ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Undetermined,Low,Medium,High,} ;)",
    "insertText": "UCLASS(BlueprintType, Abstract, Category=\"AR|Geo Tracking\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: static FName GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName FeatureName =)",
    "insertText": "FName(TEXT(\"ARGeoTrackingSupport\"))"
  },
  {
    "label": "CheckGeoTrackingAvailability()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCheckGeoTrackingAvailabilityAsyncTask,ESPMode::ThreadSafe>)",
    "insertText": "CheckGeoTrackingAvailability(FString& OutError)"
  },
  {
    "label": "CheckGeoTrackingAvailability()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCheckGeoTrackingAvailabilityAsyncTask,ESPMode::ThreadSafe>)",
    "insertText": "CheckGeoTrackingAvailability(float Longitude, float Latitude, FString& OutError)"
  },
  {
    "label": "GetGeoLocationAtWorldPosition()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGetGeoLocationAsyncTask,ESPMode::ThreadSafe>)",
    "insertText": "GetGeoLocationAtWorldPosition(const FVector& WorldPosition, FString& OutError)"
  },
  {
    "label": "FinishWithError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishWithError(const FString& InError)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : bool bIsAvailable = false ; } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FGeoTrackingAvailabilityDelegate, bool, bIsAvailable, FString, Error)"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Activate()"
  },
  {
    "label": "ReportSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSuccess()"
  },
  {
    "label": "ReportFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFailure()"
  },
  {
    "label": "FinishWithGeoLocation()",
    "kind": "Method",
    "detail": "Function (TOptional<float> Longitude ; TOptional<float> Latitude ; TSharedPtr<FCheckGeoTrackingAvailabilityAsyncTask,ESPMode::ThreadSafe> MyTask ; FString Error ; } ; class FGetGeoLocationAsyncTask : public FARAsyncTask { public : void)",
    "insertText": "FinishWithGeoLocation(float InLongitude, float InLatitude, float InAltitude)"
  },
  {
    "label": "GetLongitude()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLongitude()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: DECLARE_DYNAMIC_MULTICAST_DELEGATE_FourParams(FGetGeoLocationDelegate, float, Longitude, float, Latitude, float, Altitude, FString, Error)"
  }
]