[
  {
    "label": "finish_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "finish_reduce"
  },
  {
    "label": "start_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_reduce"
  },
  {
    "label": "start_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_reduce"
  },
  {
    "label": "finish_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "finish_reduce"
  },
  {
    "label": "finish_deterministic_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "finish_deterministic_reduce"
  },
  {
    "label": "start_deterministic_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_deterministic_reduce"
  },
  {
    "label": "start_deterministic_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_deterministic_reduce"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "lambda_reduce_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "lambda_reduce_body"
  },
  {
    "label": "allocate_sibling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate_sibling(task* start_reduce_task, task *tasks[], size_t start_bytes, size_t finish_bytes)"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (task_group_context)",
    "insertText": "context(PARALLEL_REDUCE)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "__TBB_ASSERT(my_context==root_task,NULL)"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (task_group_context)",
    "insertText": "context(PARALLEL_REDUCE)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  }
]