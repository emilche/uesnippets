[
  {
    "label": "finish_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "finish_reduce"
  },
  {
    "label": "start_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_reduce"
  },
  {
    "label": "finish_deterministic_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "finish_deterministic_reduce"
  },
  {
    "label": "start_deterministic_reduce",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "start_deterministic_reduce"
  },
  {
    "label": "lambda_reduce_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "lambda_reduce_body"
  },
  {
    "label": "finish_reduce()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_reduce_H # define __TBB_parallel_reduce_H # include<new> # include \" task . h \" # include \" aligned_space . h \" # include \" partitioner . h \" # include \" tbb_profiling . h \" namespace tbb { namespace interface9 { namespace internal { using namespace tbb::internal ; enum { root_task,left_child,right_child } ; typedef char reduction_context ; template<Body> class finish_reduce : public flag_task { bool has_right_zombie ; const reduction_context my_context ; Body* my_body ; aligned_space<Body> zombie_space ;)",
    "insertText": "finish_reduce(reduction_context context_ ) : has_right_zombie(false), my_context(context_), my_body(NULL)"
  },
  {
    "label": "finish_reduce()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "finish_reduce()"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "execute()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (Body* s = zombie_space .)",
    "insertText": "begin()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (my_body ->)",
    "insertText": "join(*s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(my_context==left_child ) itt_store_word_with_release( static_cast<finish_reduce*>(parent())->my_body, my_body)"
  },
  {
    "label": "note_affinity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "note_affinity(affinity_id id)"
  },
  {
    "label": "note_affinity()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "note_affinity(id)"
  },
  {
    "label": "start_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Body_> class finish_reduce ; public :)",
    "insertText": "start_reduce(const Range& range, Body* body, Partitioner& partitioner ) : my_body(body), my_range(range), my_partition(partitioner), my_context(root_task)"
  },
  {
    "label": "start_reduce()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "start_reduce(start_reduce& parent_, typename Partitioner::split_type& split_obj ) : my_body(parent_.my_body), my_range(parent_.my_range, split_obj), my_partition(parent_.my_partition, split_obj), my_context(right_child)"
  },
  {
    "label": "set_affinity()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "set_affinity(*this)"
  },
  {
    "label": "start_reduce()",
    "kind": "Method",
    "detail": "Function (parent_ . my_context = left_child ; })",
    "insertText": "start_reduce(start_reduce& parent_, const Range& r, depth_t d ) : my_body(parent_.my_body), my_range(r), my_partition(parent_.my_partition, split()), my_context(right_child)"
  },
  {
    "label": "align_depth()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "align_depth(d)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (parent_ . my_context = left_child ; } void)",
    "insertText": "run(const Range& range, Body& body, Partitioner& partitioner)"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (# if ! __TBB_TASK_GROUP_CONTEXT | | TBB_JOIN_OUTER_TASK_GROUP)",
    "insertText": "spawn_root_and_wait(*new(task::allocate_root()) start_reduce(range,&body,partitioner))"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (# else task_group_context)",
    "insertText": "context(PARALLEL_REDUCE)"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_root_and_wait(*new(task::allocate_root(context)) start_reduce(range,&body,partitioner))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# endif } } # if __TBB_TASK_GROUP_CONTEXT void)",
    "insertText": "run(const Range& range, Body& body, Partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "run_body()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "run_body(Range &r)"
  },
  {
    "label": "offer_work()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "offer_work(typename Partitioner::split_type& split_obj)"
  },
  {
    "label": "allocate_sibling()",
    "kind": "Method",
    "detail": "Function (task* tasks [ 2 ] ;)",
    "insertText": "allocate_sibling(static_cast<task*>(this), tasks, sizeof(start_reduce), sizeof(finish_type))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)tasks[0]) finish_type(my_context)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)tasks[1]) start_reduce(*this, split_obj)"
  },
  {
    "label": "spawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn(*tasks[1])"
  },
  {
    "label": "offer_work()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "offer_work(const Range& r, depth_t d = 0)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)tasks[1]) start_reduce(*this, r, d)"
  },
  {
    "label": "allocate_sibling()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "allocate_sibling(task* start_reduce_task, task *tasks[], size_t start_bytes, size_t finish_bytes)"
  },
  {
    "label": "allocate_continuation()",
    "kind": "Method",
    "detail": "Function (tasks [ 0 ] =& start_reduce_task ->)",
    "insertText": "allocate_continuation().allocate(finish_bytes)"
  },
  {
    "label": "set_parent()",
    "kind": "Method",
    "detail": "Function (start_reduce_task ->)",
    "insertText": "set_parent(tasks[0])"
  },
  {
    "label": "set_ref_count()",
    "kind": "Method",
    "detail": "Function (tasks [ 0 ] ->)",
    "insertText": "set_ref_count(2)"
  },
  {
    "label": "allocate_child()",
    "kind": "Method",
    "detail": "Function (tasks [ 1 ] =& tasks [ 0 ] ->)",
    "insertText": "allocate_child().allocate(start_bytes)"
  },
  {
    "label": "check_being_stolen()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "check_being_stolen(*this)"
  },
  {
    "label": "finish_type()",
    "kind": "Method",
    "detail": "Function (finish_type* parent_ptr = static_cast<)",
    "insertText": "finish_type(parent())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (my_body =)",
    "insertText": "new(parent_ptr->zombie_space.begin() ) Body(*my_body,split())"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (parent_ptr -> has_right_zombie = true ; } } else)",
    "insertText": "__TBB_ASSERT(my_context==root_task,NULL)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_partition .)",
    "insertText": "execute(*this, my_range)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_body!=parent_ptr->zombie_space.begin(),NULL)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(parent_ptr->my_body, my_body)"
  },
  {
    "label": "finish_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} return NULL ; } template<Body> class finish_deterministic_reduce : public task { Body& my_left_body ; Body my_right_body ;)",
    "insertText": "finish_deterministic_reduce(Body &body ) : my_left_body( body ), my_right_body( body, split())"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (my_left_body .)",
    "insertText": "join(my_right_body)"
  },
  {
    "label": "start_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start_deterministic_reduce(const Range& range, Body& body, Partitioner& partitioner ) : my_body( body ), my_range( range ), my_partition( partitioner)"
  },
  {
    "label": "start_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "start_deterministic_reduce(start_deterministic_reduce& parent_, finish_type& c, typename Partitioner::split_type& split_obj ) : my_body( c.my_right_body ), my_range( parent_.my_range, split_obj ), my_partition( parent_.my_partition, split_obj)"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (# if ! __TBB_TASK_GROUP_CONTEXT | | TBB_JOIN_OUTER_TASK_GROUP)",
    "insertText": "spawn_root_and_wait(*new(task::allocate_root()) start_deterministic_reduce(range,&body,partitioner))"
  },
  {
    "label": "spawn_root_and_wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "spawn_root_and_wait(*new(task::allocate_root(context)) start_deterministic_reduce(range,body,partitioner))"
  },
  {
    "label": "allocate_sibling()",
    "kind": "Method",
    "detail": "Function (task* tasks [ 2 ] ;)",
    "insertText": "allocate_sibling(static_cast<task*>(this), tasks, sizeof(start_deterministic_reduce), sizeof(finish_type))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)tasks[0]) finish_type(my_body)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new((void*)tasks[1]) start_deterministic_reduce(*this, *static_cast<finish_type*>(tasks[0]), split_obj)"
  },
  {
    "label": "my_body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_body(r)"
  },
  {
    "label": "lambda_reduce_body()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "lambda_reduce_body(const Value& identity, const RealBody& body, const Reduction& reduction ) : identity_element(identity) , my_real_body(body) , my_reduction(reduction) , my_value(identity)"
  },
  {
    "label": "lambda_reduce_body()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "lambda_reduce_body(const lambda_reduce_body& other ) : identity_element(other.identity_element) , my_real_body(other.my_real_body) , my_reduction(other.my_reduction) , my_value(other.my_value)"
  },
  {
    "label": "lambda_reduce_body()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "lambda_reduce_body(lambda_reduce_body& other, tbb::split ) : identity_element(other.identity_element) , my_real_body(other.my_real_body) , my_reduction(other.my_reduction) , my_value(other.identity_element)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(Range& range)"
  },
  {
    "label": "my_real_body()",
    "kind": "Method",
    "detail": "Function (my_value =)",
    "insertText": "my_real_body(range, const_cast<const Value&>(my_value))"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "join(lambda_reduce_body& rhs)"
  },
  {
    "label": "my_reduction()",
    "kind": "Method",
    "detail": "Function (my_value =)",
    "insertText": "my_reduction(const_cast<const Value&>(my_value), const_cast<const Value&>(rhs.my_value))"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (} Value)",
    "insertText": "result()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_reduce<Range,Body,const __TBB_DEFAULT_PARTITIONER)",
    "insertText": "run(range, body, __TBB_DEFAULT_PARTITIONER())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, const simple_partitioner& partitioner)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_reduce<Range,Body,const simple_partitioner)",
    "insertText": "run(range, body, partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, const auto_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, const static_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, affinity_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TASK_GROUP_CONTEXT template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, task_group_context& context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_reduce<Range,Body,const __TBB_DEFAULT_PARTITIONER)",
    "insertText": "run(range, body, __TBB_DEFAULT_PARTITIONER(), context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, const simple_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_reduce<Range,Body,const simple_partitioner)",
    "insertText": "run(range, body, partitioner, context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, const auto_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, const static_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_reduce(const Range& range, Body& body, affinity_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} # endif template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (internal::lambda_reduce_body<Range,Value,RealBody,Reduction>)",
    "insertText": "body(identity, real_body, reduction)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const simple_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const auto_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const static_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, affinity_partitioner& partitioner)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TASK_GROUP_CONTEXT template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const simple_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const auto_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const static_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, affinity_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} # endif template<Range,Body> void)",
    "insertText": "parallel_deterministic_reduce(const Range& range, Body& body)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_deterministic_reduce<Range,Body,const simple_partitioner)",
    "insertText": "run(range, body, simple_partitioner())"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_deterministic_reduce(const Range& range, Body& body, const simple_partitioner& partitioner)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_deterministic_reduce(const Range& range, Body& body, const static_partitioner& partitioner)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TASK_GROUP_CONTEXT template<Range,Body> void)",
    "insertText": "parallel_deterministic_reduce(const Range& range, Body& body, task_group_context& context)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::start_deterministic_reduce<Range,Body,const simple_partitioner)",
    "insertText": "run(range, body, simple_partitioner(), context)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_deterministic_reduce(const Range& range, Body& body, const simple_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Body> void)",
    "insertText": "parallel_deterministic_reduce(const Range& range, Body& body, const static_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} # endif template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_deterministic_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_deterministic_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const simple_partitioner& partitioner)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_deterministic_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const static_partitioner& partitioner)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TASK_GROUP_CONTEXT template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_deterministic_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, task_group_context& context)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_deterministic_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const simple_partitioner& partitioner, task_group_context& context)"
  },
  {
    "label": "parallel_deterministic_reduce()",
    "kind": "Method",
    "detail": "Function (} template<Range,Value,RealBody,Reduction> Value)",
    "insertText": "parallel_deterministic_reduce(const Range& range, const Value& identity, const RealBody& real_body, const Reduction& reduction, const static_partitioner& partitioner, task_group_context& context)"
  }
]