[
  {
    "label": "_Fn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Fn"
  },
  {
    "label": "_View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_View"
  },
  {
    "label": "transform_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "transform_view"
  },
  {
    "label": "__iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__iterator"
  },
  {
    "label": "__sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__sentinel"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "__transform_view_iterator_concept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__transform_view_iterator_concept"
  },
  {
    "label": "__transform_view_iterator_category_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__transform_view_iterator_category_base"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_TRANSFORM_VIEW_H # define _LIBCPP___RANGES_TRANSFORM_VIEW_H # include<__compare / three_way_comparable . h> # include<__concepts / constructible . h> # include<__concepts / convertible_to . h> # include<__concepts / copyable . h> # include<__concepts / derived_from . h> # include<__concepts / equality_comparable . h> # include<__concepts / invocable . h> # include<__config> # include<__functional / bind_back . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__ranges / access . h> # include<__ranges / all . h> # include<__ranges / concepts . h> # include<__ranges / copyable_box . h> # include<__ranges / empty . h> # include<__ranges / range_adaptor . h> # include<__ranges / size . h> # include<__ranges / view_interface . h> # include<__utility / forward . h> # include<__utility / in_place . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "_View()",
    "kind": "Method",
    "detail": "Function (template<class _Fn,class _View> concept __regular_invocable_with_range_ref = regular_invocable<_Fn,range_reference_t<_View>> ; template<class _View,class _Fn> concept __transform_view_constraints = view<_View>&& is_object_v<_Fn>&& regular_invocable<_Fn&,range_reference_t<_View>>&& __can_reference<invoke_result_t<_Fn&,range_reference_t<_View>>> ; template<input_range _View,copy_constructible _Fn> requires __transform_view_constraints<_View,_Fn> class transform_view : public view_interface<transform_view<_View,_Fn>> { template<bool> class __iterator ; template<bool> class __sentinel ; _LIBCPP_NO_UNIQUE_ADDRESS __copyable_box<_Fn> __func_ ; _LIBCPP_NO_UNIQUE_ADDRESS _View __base_ =)",
    "insertText": "_View()"
  },
  {
    "label": "transform_view()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "transform_view()"
  },
  {
    "label": "transform_view()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "transform_view(_View __base, _Fn __func) : __func_(std::in_place, std::move(__func)), __base_(std::move(__base))"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _View)",
    "insertText": "base()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI __iterator<false>)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI __sentinel<false>)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "size()"
  },
  {
    "label": "transform_view()",
    "kind": "Method",
    "detail": "Function (transform_view<views::all_t<_Range>, _Fn>)",
    "insertText": "transform_view(_Range&&, _Fn)"
  },
  {
    "label": "_Base()",
    "kind": "Method",
    "detail": "Function (template<class _View> struct __transform_view_iterator_concept { using type = input_iterator_tag ; } ; template<random_access_range _View> struct __transform_view_iterator_concept<_View> { using type = random_access_iterator_tag ; } ; template<bidirectional_range _View> struct __transform_view_iterator_concept<_View> { using type = bidirectional_iterator_tag ; } ; template<forward_range _View> struct __transform_view_iterator_concept<_View> { using type = forward_iterator_tag ; } ; template<class,class> struct __transform_view_iterator_category_base { } ; template<forward_range _View,class _Fn> struct __transform_view_iterator_category_base<_View,_Fn> { using _Cat = iterator_traits<iterator_t<_View>>::iterator_category ; using iterator_category = conditional_t<is_lvalue_reference_v<invoke_result_t<_Fn&,range_reference_t<_View>>>,conditional_t<derived_from<_Cat,contiguous_iterator_tag>,random_access_iterator_tag,_Cat>,input_iterator_tag> ; } ; template<input_range _View,copy_constructible _Fn> requires __transform_view_constraints<_View,_Fn> template<bool _Const> class transform_view<_View,_Fn>::__iterator : public __transform_view_iterator_category_base<_View,_Fn> { using _Parent = __maybe_const<_Const,transform_view> ; using _Base = __maybe_const<_Const,_View> ; _Parent* __parent_ = nullptr ; template<bool> class transform_view<_View,_Fn>::__iterator ; template<bool> class transform_view<_View,_Fn>::__sentinel ; public : iterator_t<_Base> __current_ = iterator_t<)",
    "insertText": "_Base()"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (using iterator_concept = __transform_view_iterator_concept<_View>::type ; using value_type = remove_cvref_t<invoke_result_t<_Fn&,range_reference_t<_Base>>> ; using difference_type = range_difference_t<_Base> ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator()"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator(_Parent& __parent, iterator_t<_Base> __current) : __parent_(std::addressof(__parent)), __current_(std::move(__current))"
  },
  {
    "label": "__iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__iterator(__iterator<!_Const> __i) requires _Const && convertible_to<iterator_t<_View>, iterator_t<_Base>> : __parent_(__i.__parent_), __current_(std::move(__i.__current_))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator*() const noexcept(noexcept(std::invoke(*__parent_->__func_, *__current_)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI __iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __current_ ; return* this ; } _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (auto __tmp =* this ; - -* this ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI __iterator&)",
    "insertText": "operator(difference_type __n)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (__current_ - = __n ; return* this ; } _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator[](difference_type __n) const noexcept(noexcept(std::invoke(*__parent_->__func_, __current_[__n])))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const __iterator& __x, const __iterator& __y)"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (template<bool> class transform_view<_View,_Fn>::__iterator ; template<bool> class transform_view<_View,_Fn>::__sentinel ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel()"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel(sentinel_t<_Base> __end) : __end_(__end)"
  },
  {
    "label": "__sentinel()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__sentinel(__sentinel<!_Const> __i) requires _Const && convertible_to<sentinel_t<_View>, sentinel_t<_Base>> : __end_(std::move(__i.__end_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Fn> requires constructible_from<decay_t<_Fn>,_Fn> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Fn&& __f) const noexcept(is_nothrow_constructible_v<decay_t<_Fn>, _Fn>)"
  }
]