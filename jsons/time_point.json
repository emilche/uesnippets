[
  {
    "label": "_Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Clock"
  },
  {
    "label": "_Duration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Duration"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Duration2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Duration2"
  },
  {
    "label": "_Duration1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Duration1"
  },
  {
    "label": "_ToDuration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ToDuration"
  },
  {
    "label": "_Rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rep"
  },
  {
    "label": "_Period",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Period"
  },
  {
    "label": "_Rep2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rep2"
  },
  {
    "label": "_Period2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Period2"
  },
  {
    "label": "_Rep1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rep1"
  },
  {
    "label": "_Period1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Period1"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHRONO_TIME_POINT_H # define _LIBCPP___CHRONO_TIME_POINT_H # include<__chrono / duration . h> # include<__config> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<class _Clock,class _Duration = _Clock::duration> class _LIBCPP_TEMPLATE_VIS time_point {)",
    "insertText": "static_assert(__is_duration<_Duration>::value, \"Second template parameter of time_point must be a std::chrono::duration\")"
  },
  {
    "label": "time_point()",
    "kind": "Method",
    "detail": "Function (public : typedef _Clock clock ; typedef _Duration duration ; typedef duration::rep rep ; typedef duration::period period ; private : duration __d_ ; public : _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "time_point() : __d_(duration::zero())"
  },
  {
    "label": "time_point()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "time_point(const duration& __d) : __d_(__d)"
  },
  {
    "label": "time_point()",
    "kind": "Method",
    "detail": "Function (} template<class _Duration2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "time_point(const time_point<clock, _Duration2>& __t, typename enable_if < is_convertible<_Duration2, duration>::value >::type* = nullptr) : __d_(__t.time_since_epoch())"
  },
  {
    "label": "time_since_epoch()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 duration)",
    "insertText": "time_since_epoch()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__d_ + = __d ; return* this ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 time_point&)",
    "insertText": "operator(const duration& __d)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__d_ - = __d ; return* this ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR time_point)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR time_point)",
    "insertText": "max()"
  },
  {
    "label": "time_point_cast()",
    "kind": "Method",
    "detail": "Function (} } ; } template<class _Clock,class _Duration1,class _Duration2> struct _LIBCPP_TEMPLATE_VIS common_type<chrono::time_point<_Clock,_Duration1>,chrono::time_point<_Clock,_Duration2>> { typedef chrono::time_point<_Clock,common_type<_Duration1,_Duration2>::type> type ; } ; namespace chrono { template<class _ToDuration,class _Clock,class _Duration> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 time_point<_Clock,_ToDuration>)",
    "insertText": "time_point_cast(const time_point<_Clock, _Duration>& __t)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 4 template<class _ToDuration,class _Clock,class _Duration> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,time_point<_Clock,_ToDuration>>::type)",
    "insertText": "floor(const time_point<_Clock, _Duration>& __t)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (} template<class _ToDuration,class _Clock,class _Duration> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,time_point<_Clock,_ToDuration>>::type)",
    "insertText": "ceil(const time_point<_Clock, _Duration>& __t)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (} template<class _ToDuration,class _Clock,class _Duration> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<__is_duration<_ToDuration>::value,time_point<_Clock,_ToDuration>>::type)",
    "insertText": "round(const time_point<_Clock, _Duration>& __t)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (} template<class _Rep,class _Period> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR enable_if<numeric_limits<_Rep>::is_signed,duration<_Rep,_Period>>::type)",
    "insertText": "abs(duration<_Rep, _Period> __d)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Clock,class _Duration1,class _Duration2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 bool)",
    "insertText": "operator(const time_point<_Clock, _Duration1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Clock,class _Duration1,class _Rep2,class _Period2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 time_point<_Clock,common_type<_Duration1,duration<_Rep2,_Period2>>::type>)",
    "insertText": "operator(const time_point<_Clock, _Duration1>& __lhs, const duration<_Rep2, _Period2>& __rhs)"
  },
  {
    "label": "_Tr()",
    "kind": "Method",
    "detail": "Function (typedef time_point<_Clock,common_type<_Duration1,duration<_Rep2,_Period2>>::type> _Tr ; return)",
    "insertText": "_Tr(__lhs.time_since_epoch() + __rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Rep1,class _Period1,class _Clock,class _Duration2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 time_point<_Clock,common_type<duration<_Rep1,_Period1>,_Duration2>::type>)",
    "insertText": "operator(const duration<_Rep1, _Period1>& __lhs, const time_point<_Clock, _Duration2>& __rhs)"
  },
  {
    "label": "_Ret()",
    "kind": "Method",
    "detail": "Function (typedef time_point<_Clock,common_type<_Duration1,duration<_Rep2,_Period2>>::type> _Ret ; return)",
    "insertText": "_Ret(__lhs.time_since_epoch() -__rhs)"
  }
]