[
  {
    "label": "ABSL_SCOPED_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_SCOPED_LOCKABLE"
  },
  {
    "label": "CordzUpdateScope()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORDZ_UPDATE_SCOPE_H_ # define ABSL_STRINGS_INTERNAL_CORDZ_UPDATE_SCOPE_H_ # include \" absl / base / config . h \" # include \" absl / base / optimization . h \" # include \" absl / base / thread_annotations . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cordz_info . h \" # include \" absl / strings / internal / cordz_update_tracker . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { class ABSL_SCOPED_LOCKABLE CordzUpdateScope { public :)",
    "insertText": "CordzUpdateScope(CordzInfo* info, CordzUpdateTracker::MethodIdentifier method) ABSL_EXCLUSIVE_LOCK_FUNCTION(info) : info_(info)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (info ->)",
    "insertText": "Lock(method)"
  },
  {
    "label": "CordzUpdateScope()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CordzUpdateScope(CordzUpdateScope&& rhs)"
  },
  {
    "label": "CordzUpdateScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordzUpdateScope(const CordzUpdateScope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CordzUpdateScope&)",
    "insertText": "operator(CordzUpdateScope&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CordzUpdateScope&)",
    "insertText": "operator(const CordzUpdateScope&)"
  },
  {
    "label": "CordzUpdateScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CordzUpdateScope() ABSL_UNLOCK_FUNCTION()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (info_ ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "SetCordRep()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetCordRep(CordRep* rep)"
  },
  {
    "label": "SetCordRep()",
    "kind": "Method",
    "detail": "Function (info_ ->)",
    "insertText": "SetCordRep(rep)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} } CordzInfo*)",
    "insertText": "info()"
  }
]