[
  {
    "label": "FVulkanAndroidPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanAndroidPlatform"
  },
  {
    "label": "FGDTimingFramePacer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGDTimingFramePacer"
  },
  {
    "label": "FAndroidVulkanFramePacer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidVulkanFramePacer"
  },
  {
    "label": "FGDTimingFramePacer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGDTimingFramePacer"
  },
  {
    "label": "FKnownFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKnownFrameInfo"
  },
  {
    "label": "LoadVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadVulkanLibrary()"
  },
  {
    "label": "LoadVulkanInstanceFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadVulkanInstanceFunctions(VkInstance inInstance)"
  },
  {
    "label": "FreeVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVulkanLibrary()"
  },
  {
    "label": "InitDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDevice(FVulkanDevice* InDevice)"
  },
  {
    "label": "PostInitGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitGPU(const FVulkanDevice& InDevice)"
  },
  {
    "label": "GetInstanceExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceExtensions(FVulkanInstanceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetInstanceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "GetDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceExtensions(FVulkanDevice* Device, FVulkanDeviceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetDeviceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "NotifyFoundDeviceLayersAndExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoundDeviceLayersAndExtensions(VkPhysicalDevice PhysicalDevice, const TArray<const ANSICHAR*>& Layers, const TArray<const ANSICHAR*>& Extensions)"
  },
  {
    "label": "CreateSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSurface(void* WindowHandle, VkInstance Instance, VkSurfaceKHR* OutSurface)"
  },
  {
    "label": "SupportsBCTextureFormats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBCTextureFormats()"
  },
  {
    "label": "SupportsTimestampRenderQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTimestampRenderQueries()"
  },
  {
    "label": "SupportsDynamicResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDynamicResolution()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (USE_STATIC_FEATURE_LEVEL_ENUMS)",
    "insertText": "return(UE_ANDROID_STATIC_FEATURE_LEVEL == ERHIFeatureLevel::ES3_1)"
  },
  {
    "label": "HasCustomFrameTiming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCustomFrameTiming()"
  },
  {
    "label": "OverridePlatformHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlatformHandlers(bool bInit)"
  },
  {
    "label": "FramePace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FramePace(FVulkanDevice& Device, void* WindowHandle, VkSwapchainKHR Swapchain, uint32 PresentID, VkPresentInfoKHR& Info)"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Present(VkQueue Queue, VkPresentInfoKHR& PresentInfo)"
  },
  {
    "label": "CreateSwapchainKHR()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateSwapchainKHR(void* WindowHandle, VkPhysicalDevice PhysicalDevice, VkDevice Device, const VkSwapchainCreateInfoKHR* CreateInfo, const VkAllocationCallbacks* Allocator, VkSwapchainKHR* Swapchain)"
  },
  {
    "label": "DestroySwapchainKHR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySwapchainKHR(VkDevice Device, VkSwapchainKHR Swapchain, const VkAllocationCallbacks* Allocator)"
  },
  {
    "label": "PrecompilePSO()",
    "kind": "Method",
    "detail": "Function (VkPipelineCache)",
    "insertText": "PrecompilePSO(FVulkanDevice* Device, const TArrayView<uint8> OptionalPSOCacheData, FGraphicsPipelineStateInitializer::EPSOPrecacheCompileType PSOCompileType, const VkGraphicsPipelineCreateInfo* PipelineInfo, const FGfxPipelineDesc* GfxEntry, const FVulkanRenderTargetLayout* RTLayout, TArrayView<uint32_t> VS, TArrayView<uint32_t> PS, size_t& AfterSize, FString* FailureMessageOUT = nullptr)"
  },
  {
    "label": "AreRemoteCompileServicesActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreRemoteCompileServicesActive()"
  },
  {
    "label": "StartRemoteCompileServices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRemoteCompileServices(int NumServices)"
  },
  {
    "label": "StopRemoteCompileServices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRemoteCompileServices()"
  },
  {
    "label": "SetupImageMemoryRequirementWorkaround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupImageMemoryRequirementWorkaround(const FVulkanDevice& InDevice)"
  },
  {
    "label": "SetImageMemoryRequirementWorkaround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImageMemoryRequirementWorkaround(VkImageCreateInfo& ImageCreateInfo)"
  },
  {
    "label": "GetVulkanProfileNameForFeatureLevel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVulkanProfileNameForFeatureLevel(ERHIFeatureLevel::Type FeatureLevel, bool bRaytracing)"
  },
  {
    "label": "WriteCrashMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCrashMarker(const FOptionalVulkanDeviceExtensions& OptionalExtensions, FVulkanCmdBuffer* CmdBuffer, VkBuffer DestBuffer, const TArrayView<uint32>& Entries, bool bAdding)"
  },
  {
    "label": "FGDTimingFramePacer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FGDTimingFramePacer(VkDevice InDevice, VkSwapchainKHR InSwapChain)"
  },
  {
    "label": "ScheduleNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleNextFrame(uint32 InPresentID, int32 FramePace, int32 RefreshRate)"
  },
  {
    "label": "UpdateSyncDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSyncDuration(int32 FramePace, int32 RefreshRate)"
  },
  {
    "label": "PollPastFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollPastFrameInfo()"
  }
]