[
  {
    "label": "FVulkanAndroidPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanAndroidPlatform"
  },
  {
    "label": "FGDTimingFramePacer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGDTimingFramePacer"
  },
  {
    "label": "FAndroidVulkanFramePacer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidVulkanFramePacer"
  },
  {
    "label": "FKnownFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKnownFrameInfo"
  },
  {
    "label": "VULKAN_SHOULD_ENABLE_DRAW_MARKERS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHI . h \" # define VK_USE_PLATFORM_ANDROID_KHR 1 # define VULKAN_ENABLE_DUMP_LAYER 0 # define VULKAN_DYNAMICALLYLOADED 1 # define)",
    "insertText": "VULKAN_SHOULD_ENABLE_DRAW_MARKERS(UE_BUILD_DEVELOPMENT || UE_BUILD_DEBUG) #define VULKAN_USE_IMAGE_ACQUIRE_FENCES 0 #define VULKAN_USE_CREATE_ANDROID_SURFACE 1 #define VULKAN_SHOULD_USE_LLM (UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT) #define VULKAN_SHOULD_USE_COMMANDWRAPPERS VULKAN_SHOULD_USE_LLM #define VULKAN_ENABLE_LRU_CACHE 1 #define VULKAN_SUPPORTS_GOOGLE_DISPLAY_TIMING 1 #define VULKAN_PURGE_SHADER_MODULES 0 #define VULKAN_SUPPORTS_DEDICATED_ALLOCATION 0 #define VULKAN_SUPPORTS_ASTC_DECODE_MODE 1 #define VULKAN_SUPPORTS_NV_DIAGNOSTIC_CHECKPOINT 0 #define VULKAN_SUPPORTS_SCALAR_BLOCK_LAYOUT 1 #define VULKAN_SUPPORTS_TRANSIENT_RESOURCE_ALLOCATOR 0 #define VULKAN_SUPPORTS_DRIVER_PROPERTIES 0 #define VULKAN_SUPPORTS_DESCRIPTOR_INDEXING 1 #define VULKAN_SUPPORTS_GPU_CRASH_DUMPS 1 #define VULKAN_SUPPORTS_RAY_TRACING_POSITION_FETCH 0 #define UE_VK_API_VERSION VK_API_VERSION_1_1 #define ENUM_VK_ENTRYPOINTS_PLATFORM_BASE(EnumMacro) #define ENUM_VK_ENTRYPOINTS_PLATFORM_INSTANCE(EnumMacro) \\ EnumMacro(PFN_vkCreateAndroidSurfaceKHR, vkCreateAndroidSurfaceKHR) \\ EnumMacro(PFN_vkGetAndroidHardwareBufferPropertiesANDROID, vkGetAndroidHardwareBufferPropertiesANDROID) #define ENUM_VK_ENTRYPOINTS_OPTIONAL_PLATFORM_INSTANCE(EnumMacro) \\ EnumMacro(PFN_vkGetRefreshCycleDurationGOOGLE, vkGetRefreshCycleDurationGOOGLE) \\ EnumMacro(PFN_vkGetPastPresentationTimingGOOGLE, vkGetPastPresentationTimingGOOGLE)"
  },
  {
    "label": "LoadVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "LoadVulkanLibrary()"
  },
  {
    "label": "LoadVulkanInstanceFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadVulkanInstanceFunctions(VkInstance inInstance)"
  },
  {
    "label": "FreeVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVulkanLibrary()"
  },
  {
    "label": "InitDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDevice(FVulkanDevice* InDevice)"
  },
  {
    "label": "PostInitGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitGPU(const FVulkanDevice& InDevice)"
  },
  {
    "label": "GetInstanceExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceExtensions(FVulkanInstanceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetInstanceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "GetDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceExtensions(FVulkanDevice* Device, FVulkanDeviceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetDeviceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "NotifyFoundDeviceLayersAndExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyFoundDeviceLayersAndExtensions(VkPhysicalDevice PhysicalDevice, const TArray<const ANSICHAR*>& Layers, const TArray<const ANSICHAR*>& Extensions)"
  },
  {
    "label": "CreateSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSurface(void* WindowHandle, VkInstance Instance, VkSurfaceKHR* OutSurface)"
  },
  {
    "label": "GetHardwareWindowHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetHardwareWindowHandle()"
  },
  {
    "label": "SupportsBCTextureFormats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBCTextureFormats()"
  },
  {
    "label": "SupportsASTCTextureFormats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsASTCTextureFormats()"
  },
  {
    "label": "SupportsTimestampRenderQueries()",
    "kind": "Method",
    "detail": "Function (ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::ES2_REMOVED ] = SP_NumPlatforms ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::ES3_1 ] = SP_VULKAN_ES3_1_ANDROID ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::SM4_REMOVED ] = SP_NumPlatforms ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::SM5 ] = SP_NumPlatforms ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::SM6 ] = SP_NumPlatforms ; } else { ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::ES2_REMOVED ] = SP_NumPlatforms ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::ES3_1 ] = SP_VULKAN_ES3_1_ANDROID ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::SM4_REMOVED ] = SP_VULKAN_SM5_ANDROID ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::SM5 ] = SP_VULKAN_SM5_ANDROID ; ShaderPlatformForFeatureLevel [ ERHIFeatureLevel::SM6 ] = SP_NumPlatforms ; } } bool)",
    "insertText": "SupportsTimestampRenderQueries()"
  },
  {
    "label": "SupportsDynamicResolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDynamicResolution()"
  },
  {
    "label": "RequiresMobileRenderer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresMobileRenderer()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if USE_STATIC_FEATURE_LEVEL_ENUMS)",
    "insertText": "return(UE_ANDROID_STATIC_FEATURE_LEVEL == ERHIFeatureLevel::ES3_1)"
  },
  {
    "label": "ShouldUseDesktopVulkan()",
    "kind": "Method",
    "detail": "Function (# else return !)",
    "insertText": "ShouldUseDesktopVulkan()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (# endif } ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel(ERHIFeatureLevel::Type RequestedFeatureLevel)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (# if USE_STATIC_FEATURE_LEVEL_ENUMS return UE_ANDROID_STATIC_FEATURE_LEVEL ; # else return)",
    "insertText": "GetFeatureLevel(RequestedFeatureLevel)"
  },
  {
    "label": "HasCustomFrameTiming()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "HasCustomFrameTiming()"
  },
  {
    "label": "SupportsVolumeTextureRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsVolumeTextureRendering()"
  },
  {
    "label": "RequiresPresentLayoutFix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresPresentLayoutFix()"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "Present(VkQueue Queue, VkPresentInfoKHR& PresentInfo)"
  },
  {
    "label": "CreateSwapchainKHR()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateSwapchainKHR(void* WindowHandle, VkPhysicalDevice PhysicalDevice, VkDevice Device, const VkSwapchainCreateInfoKHR* CreateInfo, const VkAllocationCallbacks* Allocator, VkSwapchainKHR* Swapchain)"
  },
  {
    "label": "DestroySwapchainKHR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySwapchainKHR(VkDevice Device, VkSwapchainKHR Swapchain, const VkAllocationCallbacks* Allocator)"
  },
  {
    "label": "PrecompilePSO()",
    "kind": "Method",
    "detail": "Function (VkPipelineCache)",
    "insertText": "PrecompilePSO(FVulkanDevice* Device, const TArrayView<uint8> OptionalPSOCacheData, FGraphicsPipelineStateInitializer::EPSOPrecacheCompileType PSOCompileType, const VkGraphicsPipelineCreateInfo* PipelineInfo, const FGfxPipelineDesc* GfxEntry, const FVulkanRenderTargetLayout* RTLayout, TArrayView<uint32_t> VS, TArrayView<uint32_t> PS, size_t& AfterSize, FString* FailureMessageOUT = nullptr)"
  },
  {
    "label": "AreRemoteCompileServicesActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreRemoteCompileServicesActive()"
  },
  {
    "label": "StartRemoteCompileServices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRemoteCompileServices(int NumServices)"
  },
  {
    "label": "StopRemoteCompileServices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRemoteCompileServices()"
  },
  {
    "label": "RecreateSwapchainOnFail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateSwapchainOnFail()"
  },
  {
    "label": "SetupImageMemoryRequirementWorkaround()",
    "kind": "Method",
    "detail": "Function (OutFallbackFormat0 = VK_FORMAT_A1R5G5B5_UNORM_PACK16 ; OutFallbackFormat1 = VK_FORMAT_B8G8R8A8_UNORM ; return VK_FORMAT_R5G5B5A1_UNORM_PACK16 ; } ; void)",
    "insertText": "SetupImageMemoryRequirementWorkaround(const FVulkanDevice& InDevice)"
  },
  {
    "label": "SetImageMemoryRequirementWorkaround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetImageMemoryRequirementWorkaround(VkImageCreateInfo& ImageCreateInfo)"
  },
  {
    "label": "GetVulkanProfileNameForFeatureLevel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVulkanProfileNameForFeatureLevel(ERHIFeatureLevel::Type FeatureLevel, bool bRaytracing)"
  },
  {
    "label": "RequiredWaveOpsShaderStageFlags()",
    "kind": "Method",
    "detail": "Function (VkShaderStageFlags)",
    "insertText": "RequiredWaveOpsShaderStageFlags(VkShaderStageFlags VulkanDeviceShaderStageFlags)"
  },
  {
    "label": "FGDTimingFramePacer()",
    "kind": "Method",
    "detail": "Function (# if USE_ANDROID_VULKAN_SWAPPY bool bSwappyEnabledAtRHIInit ; # endif protected : void* VulkanLib ; bool bAttemptedLoad ; # if VULKAN_SUPPORTS_GOOGLE_DISPLAY_TIMING bool bHasGoogleDisplayTiming ; TUniquePtr<class FGDTimingFramePacer> GDTimingFramePacer ; # endif TUniquePtr<struct FAndroidVulkanFramePacer> FramePacer ; int32 CachedFramePace ; int32 CachedRefreshRate ; int32 CachedSyncInterval ; int32 SuccessfulRefreshRateFrames ; int32 UnsuccessfulRefreshRateFrames ; TArray<TArray<ANSICHAR>> DebugVulkanDeviceLayers ; TArray<TArray<ANSICHAR>> DebugVulkanInstanceLayers ; TArray<TArray<ANSICHAR>> SwappyRequiredExtensions ; int32 AFBCWorkaroundOption ; int32 ASTCWorkaroundOption ; } ; # if VULKAN_SUPPORTS_GOOGLE_DISPLAY_TIMING class FGDTimingFramePacer : FNoncopyable { public :)",
    "insertText": "FGDTimingFramePacer(VkDevice InDevice, VkSwapchainKHR InSwapChain)"
  },
  {
    "label": "GetPresentTimesInfo()",
    "kind": "Method",
    "detail": "Function (const VkPresentTimesInfoGOOGLE*)",
    "insertText": "GetPresentTimesInfo()"
  },
  {
    "label": "ScheduleNextFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ScheduleNextFrame(uint32 InPresentID, int32 FramePace, int32 RefreshRate)"
  },
  {
    "label": "UpdateSyncDuration()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSyncDuration(int32 FramePace, int32 RefreshRate)"
  },
  {
    "label": "PredictLastScheduledFramePresentTime()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "PredictLastScheduledFramePresentTime(uint32 CurrentPresentID)"
  },
  {
    "label": "CalculateMinPresentTime()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalculateMinPresentTime(uint64 CpuPresentTime)"
  },
  {
    "label": "CalculateMaxPresentTime()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalculateMaxPresentTime(uint64 CpuPresentTime)"
  },
  {
    "label": "CalculateNearestVsTime()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalculateNearestVsTime(uint64 ActualPresentTime, uint64 TargetTime)"
  },
  {
    "label": "PollPastFrameInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollPastFrameInfo()"
  }
]