[
  {
    "label": "GatedRecurrentLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GatedRecurrentLayer"
  },
  {
    "label": "GatedRecurrentLayer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_GRU_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_GRU_H_ # include<array> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / agc2 / cpu_features . h \" # include \" modules / audio_processing / agc2 / rnn_vad / vector_math . h \" namespace webrtc { namespace rnn_vad { int kGruLayerMaxUnits = 2 4 ; class GatedRecurrentLayer { public :)",
    "insertText": "GatedRecurrentLayer(int input_size, int output_size, rtc::ArrayView<const int8_t> bias, rtc::ArrayView<const int8_t> weights, rtc::ArrayView<const int8_t> recurrent_weights, const AvailableCpuFeatures& cpu_features, absl::string_view layer_name)"
  },
  {
    "label": "GatedRecurrentLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatedRecurrentLayer(const GatedRecurrentLayer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GatedRecurrentLayer&)",
    "insertText": "operator(const GatedRecurrentLayer&)"
  },
  {
    "label": "GatedRecurrentLayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GatedRecurrentLayer()"
  },
  {
    "label": "input_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "input_size()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "size()"
  },
  {
    "label": "ComputeOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeOutput(rtc::ArrayView<const float> input)"
  }
]