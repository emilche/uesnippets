[
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "SFbxSceneSkeletalMeshReimportListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFbxSceneSkeletalMeshReimportListView"
  },
  {
    "label": "UFbxSceneImportOptionsSkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSceneImportOptionsSkeletalMesh"
  },
  {
    "label": "SFbxSceneSkeletalMeshReimportListView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Fbx / SSceneBaseMeshListView . h \" struct FPropertyChangedEvent ; class SFbxSceneSkeletalMeshReimportListView : public SFbxSSceneBaseMeshListView { public : ~)",
    "insertText": "SFbxSceneSkeletalMeshReimportListView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SFbxSceneSkeletalMeshReimportListView) : _SceneInfo(nullptr) , _SceneInfoOriginal(nullptr) , _MeshStatusMap(nullptr) , _GlobalImportSettings(nullptr) , _OverrideNameOptionsMap(nullptr) , _SceneImportOptionsSkeletalMeshDisplay(nullptr)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FFbxSceneInfo>, SceneInfo) SLATE_ARGUMENT(TSharedPtr<FFbxSceneInfo>, SceneInfoOriginal) SLATE_ARGUMENT(FbxSceneReimportStatusMapPtr, MeshStatusMap) SLATE_ARGUMENT( UnFbx::FBXImportOptions*, GlobalImportSettings) SLATE_ARGUMENT(FbxOverrideNameOptionsArrayPtr, OverrideNameOptions) SLATE_ARGUMENT( ImportOptionsNameMapPtr, OverrideNameOptionsMap) SLATE_ARGUMENT( class UFbxSceneImportOptionsSkeletalMesh*, SceneImportOptionsSkeletalMeshDisplay) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnGenerateRowFbxSceneListView()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowFbxSceneListView(FbxMeshInfoPtr Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnFinishedChangingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingProperties(const FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "OnToggleFilterAddContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleFilterAddContent(ECheckBoxState CheckType)"
  },
  {
    "label": "IsFilterAddContentChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsFilterAddContentChecked()"
  },
  {
    "label": "IsFilterDeleteContentChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsFilterDeleteContentChecked()"
  },
  {
    "label": "IsFilterOverwriteContentChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsFilterOverwriteContentChecked()"
  },
  {
    "label": "IsFilterDiffChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsFilterDiffChecked()"
  },
  {
    "label": "SetSelectionImportState()",
    "kind": "Method",
    "detail": "Function (FbxSceneReimportStatusMapPtr MeshStatusMap ; void)",
    "insertText": "SetSelectionImportState(bool MarkForImport)"
  },
  {
    "label": "OnToggleSelectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSelectAll(ECheckBoxState CheckType)"
  },
  {
    "label": "OnOpenContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnOpenContextMenu()"
  },
  {
    "label": "OnChangedOverrideOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangedOverrideOptions(TSharedPtr<FString> ItemSelected, ESelectInfo::Type SelectInfo)"
  }
]