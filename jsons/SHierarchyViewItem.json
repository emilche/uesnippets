[
  {
    "label": "FHierarchyModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyModel"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FHierarchyRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyRoot"
  },
  {
    "label": "FNamedSlotModelBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedSlotModelBase"
  },
  {
    "label": "FNamedSlotModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedSlotModel"
  },
  {
    "label": "FNamedSlotModelSubclass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedSlotModelSubclass"
  },
  {
    "label": "FHierarchyWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyWidget"
  },
  {
    "label": "SHierarchyViewItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHierarchyViewItem"
  },
  {
    "label": "FHierarchyModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" WidgetReference . h \" # include \" WidgetBlueprintEditor . h \" class FHierarchyModel : public TSharedFromThis<FHierarchyModel> { public :)",
    "insertText": "FHierarchyModel(TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FHierarchyModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHierarchyModel()"
  },
  {
    "label": "GetUniqueName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetUniqueName()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "GetImageToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetImageToolTipText()"
  },
  {
    "label": "GetLabelToolTipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetLabelToolTipText()"
  },
  {
    "label": "GetFilterStrings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFilterStrings(TArray<FString>& OutStrings)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutStrings .)",
    "insertText": "Add(GetText().ToString())"
  },
  {
    "label": "GetImage()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetImage()"
  },
  {
    "label": "GetFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetFont()"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(FDragDropEvent const& DragDropEvent, EItemDropZone DropZone)"
  },
  {
    "label": "OnVerifyNameTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyNameTextChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "OnNameTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommited(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GatherChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherChildren(TArray< TSharedPtr<FHierarchyModel> >& Children)"
  },
  {
    "label": "OnSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelection()"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter()"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseLeave()"
  },
  {
    "label": "RefreshSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshSelection()"
  },
  {
    "label": "ContainsSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsSelection()"
  },
  {
    "label": "IsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelected()"
  },
  {
    "label": "IsHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHovered()"
  },
  {
    "label": "CanControlLockedInDesigner()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanControlLockedInDesigner()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FHierarchyModel>> Children ;)",
    "insertText": "GetChildren(Children)"
  },
  {
    "label": "SetIsLockedInDesigner()",
    "kind": "Method",
    "detail": "Function (child ->)",
    "insertText": "SetIsLockedInDesigner(NewIsLocked, bRecursive)"
  },
  {
    "label": "DoesWidgetOverrideNavigation()",
    "kind": "Method",
    "detail": "Function (} } } } bool)",
    "insertText": "DoesWidgetOverrideNavigation()"
  },
  {
    "label": "CanRename()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRename()"
  },
  {
    "label": "OnBeginEditing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBeginEditing()"
  },
  {
    "label": "OnEndEditing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndEditing()"
  },
  {
    "label": "IsRoot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRoot()"
  },
  {
    "label": "UpdateSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelection()"
  },
  {
    "label": "AsDraggedWidgetReference()",
    "kind": "Method",
    "detail": "Function (FWidgetReference)",
    "insertText": "AsDraggedWidgetReference()"
  },
  {
    "label": "HasCircularReferences()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCircularReferences(class UWidgetBlueprint* Blueprint, class UWidget* Widget, TSharedPtr<class FDragDropOperation>& DragDropOp)"
  },
  {
    "label": "DetermineDragDropPreviewWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineDragDropPreviewWidgets(TArray<class UWidget*>& OutWidgets, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "RemovePreviewWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePreviewWidget(class UWidgetBlueprint* Blueprint, class UWidget* Widget)"
  },
  {
    "label": "InitializeChildren()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitializeChildren()"
  },
  {
    "label": "FHierarchyRoot()",
    "kind": "Method",
    "detail": "Function (protected : bool bInitialized ; bool bIsSelected ; TWeakPtr<FWidgetBlueprintEditor> BlueprintEditor ; TArray<TSharedPtr<FHierarchyModel>> Models ; } ; class FHierarchyRoot : public FHierarchyModel { public :)",
    "insertText": "FHierarchyRoot(TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FHierarchyRoot()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHierarchyRoot()"
  },
  {
    "label": "DoesWidgetOverrideFlowDirection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesWidgetOverrideFlowDirection()"
  },
  {
    "label": "FNamedSlotModelBase()",
    "kind": "Method",
    "detail": "Function (private : FText RootText ; } ; class FNamedSlotModelBase : public FHierarchyModel { public :)",
    "insertText": "FNamedSlotModelBase(FName InSlotName, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FNamedSlotModelBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNamedSlotModelBase()"
  },
  {
    "label": "GetNamedSlotHost()",
    "kind": "Method",
    "detail": "Function (protected : INamedSlotInterface*)",
    "insertText": "GetNamedSlotHost()"
  },
  {
    "label": "GetNamedSlotHostWidget()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetNamedSlotHostWidget()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildren(TArray< TSharedPtr<FHierarchyModel> >& Children)"
  },
  {
    "label": "DoDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoDrop(INamedSlotInterface* NamedSlotHost, UWidget* DroppingWidget)"
  },
  {
    "label": "FNamedSlotModel()",
    "kind": "Method",
    "detail": "Function (protected : FName SlotName ; } ; class FNamedSlotModel : public FNamedSlotModelBase { public :)",
    "insertText": "FNamedSlotModel(FWidgetReference InItem, FName InSlotName, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FNamedSlotModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNamedSlotModel()"
  },
  {
    "label": "FNamedSlotModelSubclass()",
    "kind": "Method",
    "detail": "Function (protected : FWidgetReference Item ; } ; class FNamedSlotModelSubclass : public FNamedSlotModelBase { public :)",
    "insertText": "FNamedSlotModelSubclass(UWidgetBlueprint* Blueprint, FName InSlotName, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FNamedSlotModelSubclass()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FNamedSlotModelSubclass()"
  },
  {
    "label": "FHierarchyWidget()",
    "kind": "Method",
    "detail": "Function (protected : TWeakObjectPtr<UWidgetBlueprint> Blueprint ; } ; class FHierarchyWidget : public FHierarchyModel { public :)",
    "insertText": "FHierarchyWidget(FWidgetReference InItem, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FHierarchyWidget()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHierarchyWidget()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "GetTemplate()",
    "kind": "Method",
    "detail": "Function (bHiddenInDesigner = !IsVisible)",
    "insertText": "GetTemplate()"
  },
  {
    "label": "SetIsLockedInDesigner()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "SetIsLockedInDesigner(bool NewIsLocked, bool bRecursive)"
  },
  {
    "label": "GetTemplate()",
    "kind": "Method",
    "detail": "Function (Item .)",
    "insertText": "GetTemplate()->SetLockedInDesigner(NewIsLocked)"
  },
  {
    "label": "GetPreview()",
    "kind": "Method",
    "detail": "Function (Item .)",
    "insertText": "GetPreview()->SetLockedInDesigner(NewIsLocked)"
  },
  {
    "label": "RequestBeginRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestBeginRename()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, HighlightText ) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef< STableViewBase >& InOwnerTableView, TSharedPtr<FHierarchyModel> InModel)"
  },
  {
    "label": "SHierarchyViewItem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SHierarchyViewItem()"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FHierarchyModel> TargetItem)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FHierarchyModel> TargetItem)"
  },
  {
    "label": "OnBeginNameTextEdit()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBeginNameTextEdit()"
  },
  {
    "label": "OnEndNameTextEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndNameTextEdit()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "OnRequestBeginRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestBeginRename()"
  },
  {
    "label": "ShouldAppearHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAppearHovered()"
  },
  {
    "label": "GetItemFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetItemFont()"
  },
  {
    "label": "GetItemText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetItemText()"
  },
  {
    "label": "OnToggleVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleVisibility()"
  },
  {
    "label": "OnToggleLockedInDesigner()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleLockedInDesigner()"
  },
  {
    "label": "GetLockBrushForWidget()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLockBrushForWidget()"
  },
  {
    "label": "GetVisibilityBrushForWidget()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetVisibilityBrushForWidget()"
  }
]