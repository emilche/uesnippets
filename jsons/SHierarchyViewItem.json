[
  {
    "label": "FHierarchyModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyModel"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "UWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidget"
  },
  {
    "label": "FHierarchyRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyRoot"
  },
  {
    "label": "FNamedSlotModelBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedSlotModelBase"
  },
  {
    "label": "FNamedSlotModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedSlotModel"
  },
  {
    "label": "FNamedSlotModelSubclass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamedSlotModelSubclass"
  },
  {
    "label": "FHierarchyWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyWidget"
  },
  {
    "label": "SHierarchyViewItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHierarchyViewItem"
  },
  {
    "label": "FHierarchyModel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FHierarchyModel(TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(FDragDropEvent const& DragDropEvent, EItemDropZone DropZone)"
  },
  {
    "label": "OnVerifyNameTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyNameTextChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "OnNameTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommited(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GatherChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherChildren(TArray< TSharedPtr<FHierarchyModel> >& Children)"
  },
  {
    "label": "RefreshSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelection()"
  },
  {
    "label": "ContainsSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsSelection()"
  },
  {
    "label": "FWidgetReference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FWidgetReference()"
  },
  {
    "label": "HasCircularReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCircularReferences(class UWidgetBlueprint* Blueprint, class UWidget* Widget, TSharedPtr<class FDragDropOperation>& DragDropOp)"
  },
  {
    "label": "DetermineDragDropPreviewWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineDragDropPreviewWidgets(TArray<class UWidget*>& OutWidgets, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "RemovePreviewWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePreviewWidget(class UWidgetBlueprint* Blueprint, class UWidget* Widget)"
  },
  {
    "label": "InitializeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeChildren()"
  },
  {
    "label": "FHierarchyRoot()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FHierarchyRoot(TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FNamedSlotModelBase()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FNamedSlotModelBase(FName InSlotName, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "DoDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoDrop(INamedSlotInterface* NamedSlotHost, UWidget* DroppingWidget)"
  },
  {
    "label": "FNamedSlotModel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FNamedSlotModel(FWidgetReference InItem, FName InSlotName, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FNamedSlotModelSubclass()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FNamedSlotModelSubclass(UWidgetBlueprint* Blueprint, FName InSlotName, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FHierarchyWidget()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FHierarchyWidget(FWidgetReference InItem, TSharedPtr<FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef< STableViewBase >& InOwnerTableView, TSharedPtr<FHierarchyModel> InModel)"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FHierarchyModel> TargetItem)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(const FDragDropEvent& DragDropEvent, EItemDropZone DropZone, TSharedPtr<FHierarchyModel> TargetItem)"
  },
  {
    "label": "OnBeginNameTextEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginNameTextEdit()"
  },
  {
    "label": "OnEndNameTextEdit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndNameTextEdit()"
  },
  {
    "label": "OnVerifyNameTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyNameTextChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "OnNameTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommited(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnRequestBeginRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequestBeginRename()"
  },
  {
    "label": "OnToggleVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleVisibility()"
  },
  {
    "label": "OnToggleLockedInDesigner()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleLockedInDesigner()"
  }
]