[
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FFloat16Color",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFloat16Color"
  },
  {
    "label": "FInstanceCullingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingManager"
  },
  {
    "label": "FLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneProxy"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRDGExternalAccessQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGExternalAccessQueue"
  },
  {
    "label": "FRectLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRectLightSceneProxy"
  },
  {
    "label": "FRenderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderResource"
  },
  {
    "label": "FRenderTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTarget"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHIUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIUniformBuffer"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FSceneViewStateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateInterface"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereRenderSceneInfo"
  },
  {
    "label": "FSkyAtmosphereSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereSceneProxy"
  },
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "FSparseVolumeTextureViewerSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSparseVolumeTextureViewerSceneProxy"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FVolumetricCloudRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricCloudRenderSceneInfo"
  },
  {
    "label": "FVolumetricCloudSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricCloudSceneProxy"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "FDeferredDecalUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredDecalUpdateParams"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UPlanarReflectionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlanarReflectionComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UReflectionCaptureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReflectionCaptureComponent"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FHairStrandsInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsInstance"
  },
  {
    "label": "FLightRenderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightRenderParameters"
  },
  {
    "label": "FPersistentPrimitiveIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentPrimitiveIndex"
  },
  {
    "label": "TSHVectorRGB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSHVectorRGB"
  },
  {
    "label": "FCustomPrimitiveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPrimitiveData"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FPrimitiveSceneDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneDesc"
  },
  {
    "label": "FInstancedStaticMeshSceneDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstancedStaticMeshSceneDesc"
  },
  {
    "label": "FLightSceneDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightSceneDesc"
  },
  {
    "label": "EBasePassDrawListType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBasePassDrawListType"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FReflectionCaptureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureData"
  },
  {
    "label": "USceneCaptureComponent2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneCaptureComponent2D"
  },
  {
    "label": "USceneCaptureComponentCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneCaptureComponentCube"
  },
  {
    "label": "FPrecomputedLightVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolume"
  },
  {
    "label": "FPrecomputedVolumetricLightmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmap"
  },
  {
    "label": "URuntimeVirtualTextureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTextureComponent"
  },
  {
    "label": "FPrecomputedVisibilityHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVisibilityHandler"
  },
  {
    "label": "FPrecomputedVolumeDistanceField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumeDistanceField"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "UExponentialHeightFogComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExponentialHeightFogComponent"
  },
  {
    "label": "FLocalFogVolumeSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalFogVolumeSceneProxy"
  },
  {
    "label": "FPhysicsFieldSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsFieldSceneProxy"
  },
  {
    "label": "UWindDirectionalSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWindDirectionalSourceComponent"
  },
  {
    "label": "FWindSourceSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindSourceSceneProxy"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "ULumenSceneCardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULumenSceneCardComponent"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FGPUSkinCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCache"
  },
  {
    "label": "IComputeTaskWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IComputeTaskWorker"
  },
  {
    "label": "FFXSystemInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFXSystemInterface"
  },
  {
    "label": "FMaterialParameterCollectionInstanceResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialParameterCollectionInstanceResource"
  },
  {
    "label": "FPixelInspectorRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPixelInspectorRequest"
  },
  {
    "label": "FRayTracingDynamicGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingDynamicGeometryCollection"
  },
  {
    "label": "FRayTracingSkinnedGeometryUpdateQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingSkinnedGeometryUpdateQueue"
  },
  {
    "label": "FCustomRenderPassRendererInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomRenderPassRendererInput"
  },
  {
    "label": "FCustomRenderPassBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomRenderPassBase"
  },
  {
    "label": "FSceneViewStateReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewStateReference"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" HAL / Platform . h \" # include \" Math / MathFwd . h \" # include \" Misc / EnumClassFlags . h \" # include \" RenderGraphFwd . h \" # include \" Engine / EngineTypes . h \" # include \" PrimitiveComponentId . h \" # include \" ShowFlags . h \" class AWorldSettings ; class FArchive ; class FFloat16Color ; class FInstanceCullingManager ; class FLightSceneProxy ; class FMaterial ; class FMaterialShaderMap ; class FName ; class FOutputDevice ; class FPrimitiveSceneInfo ; class FRDGBuilder ; class FRDGExternalAccessQueue ; class FRectLightSceneProxy ; class FRenderResource ; class FRenderTarget ; class FRHICommandListImmediate ; class FRHIUniformBuffer ; class FScene ; class FSceneRenderer ; class FSceneViewStateInterface ; class FSkyAtmosphereRenderSceneInfo ; class FSkyAtmosphereSceneProxy ; class FSkyLightSceneProxy ; class FSparseVolumeTextureViewerSceneProxy ; class FTexture ; class FVertexFactory ; class FViewInfo ; class FVolumetricCloudRenderSceneInfo ; class FVolumetricCloudSceneProxy ; class UDecalComponent ; struct FDeferredDecalUpdateParams ; class UInstancedStaticMeshComponent ; class ULightComponent ; class UPlanarReflectionComponent ; class UPrimitiveComponent ; class UReflectionCaptureComponent ; class USkyLightComponent ; class UStaticMeshComponent ; class UTextureCube ; enum class EPrimitiveDirtyState : uint8 ; enum class EShadingPath ; enum EShaderPlatform : uint16 ; namespace ERHIFeatureLevel { enum Type : int ; } struct FHairStrandsInstance ; struct FLightRenderParameters ; struct FPersistentPrimitiveIndex ; template<int32 MaxSHOrder> class TSHVectorRGB ; using FSHVectorRGB3 = TSHVectorRGB<3> ; struct FCustomPrimitiveData ; class FSceneViewFamily ; struct FPrimitiveSceneDesc ; struct FInstancedStaticMeshSceneDesc ; struct FLightSceneDesc ; enum EBasePassDrawListType { EBasePass_Default = 0,EBasePass_Masked,EBasePass_MAX } ; enum class EUpdateAllPrimitiveSceneInfosAsyncOps { None = 0,CacheMeshDrawCommands = 1<<0,CreateLightPrimitiveInteractions = 1<<1,CacheMaterialUniformExpressions = 1<<2,All = CacheMeshDrawCommands | CreateLightPrimitiveInteractions | CacheMaterialUniformExpressions } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EUpdateAllPrimitiveSceneInfosAsyncOps)"
  },
  {
    "label": "FSceneInterface()",
    "kind": "Method",
    "detail": "Function (class FSceneInterface { public :)",
    "insertText": "FSceneInterface(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitive(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "RemovePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimitive(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "ReleasePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePrimitive(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "BatchAddPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddPrimitives(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "BatchRemovePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRemovePrimitives(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "BatchReleasePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchReleasePrimitives(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfos(FRDGBuilder& GraphBuilder, EUpdateAllPrimitiveSceneInfosAsyncOps AsyncOps = EUpdateAllPrimitiveSceneInfosAsyncOps::None)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfos(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "UpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveTransform(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdatePrimitiveOcclusionBoundsSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveOcclusionBoundsSlack(UPrimitiveComponent* Primitive, float NewSlack)"
  },
  {
    "label": "UpdatePrimitiveDrawDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveDrawDistance(UPrimitiveComponent* Primitive, float MinDrawDistance, float MaxDrawDistance, float VirtualTextureMaxDrawDistance)"
  },
  {
    "label": "UpdateInstanceCullDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstanceCullDistance(UPrimitiveComponent* Primitive, float StartCullDistance, float EndCullDistance)"
  },
  {
    "label": "UpdatePrimitiveAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveAttachment(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdatePrimitiveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveInstances(UInstancedStaticMeshComponent* Primitive)"
  },
  {
    "label": "UpdateCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomPrimitiveData(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdatePrimitiveDistanceFieldSceneData_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveDistanceFieldSceneData_GameThread(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo(int32 PrimitiveIndex)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo(FPrimitiveComponentId PrimitiveId)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo(const FPersistentPrimitiveIndex& PersistentPrimitiveIndex)"
  },
  {
    "label": "GetPreviousLocalToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreviousLocalToWorld(const FPrimitiveSceneInfo* PrimitiveSceneInfo, FMatrix& OutPreviousLocalToWorld)"
  },
  {
    "label": "RemoveLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLight(ULightComponent* Light)"
  },
  {
    "label": "AddInvisibleLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInvisibleLight(ULightComponent* Light)"
  },
  {
    "label": "SetSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkyLight(FSkyLightSceneProxy* Light)"
  },
  {
    "label": "DisableSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableSkyLight(FSkyLightSceneProxy* Light)"
  },
  {
    "label": "HasSkyLightRequiringLightingBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSkyLightRequiringLightingBuild()"
  },
  {
    "label": "HasAtmosphereLightRequiringLightingBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAtmosphereLightRequiringLightingBuild()"
  },
  {
    "label": "AddDecal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDecal(UDecalComponent* Component)"
  },
  {
    "label": "RemoveDecal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDecal(UDecalComponent* Component)"
  },
  {
    "label": "UpdateDecalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecalTransform(UDecalComponent* Component)"
  },
  {
    "label": "UpdateDecalFadeOutTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecalFadeOutTime(UDecalComponent* Component)"
  },
  {
    "label": "UpdateDecalFadeInTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecalFadeInTime(UDecalComponent* Component)"
  },
  {
    "label": "BatchUpdateDecals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchUpdateDecals(TArray<FDeferredDecalUpdateParams>&& UpdateParams)"
  },
  {
    "label": "AddReflectionCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReflectionCapture(class UReflectionCaptureComponent* Component)"
  },
  {
    "label": "RemoveReflectionCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveReflectionCapture(class UReflectionCaptureComponent* Component)"
  },
  {
    "label": "GetReflectionCaptureData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetReflectionCaptureData(UReflectionCaptureComponent* Component, class FReflectionCaptureData& OutCaptureData)"
  },
  {
    "label": "UpdateReflectionCaptureTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateReflectionCaptureTransform(class UReflectionCaptureComponent* Component)"
  },
  {
    "label": "AllocateReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateReflectionCaptures(const TArray<UReflectionCaptureComponent*>& NewCaptures, const TCHAR* CaptureReason, bool bVerifyOnlyCapturing, bool bCapturingForMobile, bool bInsideTick)"
  },
  {
    "label": "ReleaseReflectionCubemap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseReflectionCubemap(UReflectionCaptureComponent* CaptureComponent)"
  },
  {
    "label": "ResetReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetReflectionCaptures(bool bOnlyIfOOM)"
  },
  {
    "label": "AllocateReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateReflectionCaptures(NewCaptures, CaptureReason, bVerifyOnlyCapturing, bCapturingForMobile, false)"
  },
  {
    "label": "UpdateSkyCaptureContents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSkyCaptureContents(const USkyLightComponent* CaptureComponent, bool bCaptureEmissiveOnly, UTextureCube* SourceCubemap, FTexture* OutProcessedTexture, float& OutAverageBrightness, FSHVectorRGB3& OutIrradianceEnvironmentMap, TArray<FFloat16Color>* OutRadianceMap, FLinearColor* SpecifiedCubemapColorScale)"
  },
  {
    "label": "AllocateAndCaptureFrameSkyEnvMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateAndCaptureFrameSkyEnvMap(FRDGBuilder& GraphBuilder, FSceneRenderer& SceneRenderer, FViewInfo& MainView, bool bShouldRenderSkyAtmosphere, bool bShouldRenderVolumetricCloud, FInstanceCullingManager& InstanceCullingManager, FRDGExternalAccessQueue& ExternalAccessQueue)"
  },
  {
    "label": "ValidateSkyLightRealTimeCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateSkyLightRealTimeCapture(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef SceneColorTexture)"
  },
  {
    "label": "AddPlanarReflection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlanarReflection(class UPlanarReflectionComponent* Component)"
  },
  {
    "label": "RemovePlanarReflection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePlanarReflection(class UPlanarReflectionComponent* Component)"
  },
  {
    "label": "UpdatePlanarReflectionTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePlanarReflectionTransform(UPlanarReflectionComponent* Component)"
  },
  {
    "label": "UpdateSceneCaptureContents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneCaptureContents(class USceneCaptureComponent2D* CaptureComponent)"
  },
  {
    "label": "UpdateSceneCaptureContents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneCaptureContents(class USceneCaptureComponentCube* CaptureComponent)"
  },
  {
    "label": "UpdatePlanarReflectionContents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePlanarReflectionContents(class UPlanarReflectionComponent* CaptureComponent, class FSceneRenderer& MainSceneRenderer)"
  },
  {
    "label": "AddPrecomputedLightVolume()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPrecomputedLightVolume(const class FPrecomputedLightVolume* Volume)"
  },
  {
    "label": "RemovePrecomputedLightVolume()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePrecomputedLightVolume(const class FPrecomputedLightVolume* Volume)"
  },
  {
    "label": "HasPrecomputedVolumetricLightmap_RenderThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPrecomputedVolumetricLightmap_RenderThread()"
  },
  {
    "label": "RemovePrecomputedVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePrecomputedVolumetricLightmap(const class FPrecomputedVolumetricLightmap* Volume)"
  },
  {
    "label": "AddRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddRuntimeVirtualTexture(class URuntimeVirtualTextureComponent* Component)"
  },
  {
    "label": "RemoveRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveRuntimeVirtualTexture(class URuntimeVirtualTextureComponent* Component)"
  },
  {
    "label": "GetRuntimeVirtualTextureHidePrimitiveMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetRuntimeVirtualTextureHidePrimitiveMask(uint8& bHideMaskEditor, uint8& bHideMaskGame)"
  },
  {
    "label": "InvalidateRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateRuntimeVirtualTexture(class URuntimeVirtualTextureComponent* Component, FBoxSphereBounds const& WorldBounds)"
  },
  {
    "label": "InvalidatePathTracedOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidatePathTracedOutput()"
  },
  {
    "label": "InvalidateLumenSurfaceCache_GameThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateLumenSurfaceCache_GameThread(UPrimitiveComponent* Component)"
  },
  {
    "label": "GetPrimitiveUniformShaderParameters_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPrimitiveUniformShaderParameters_RenderThread(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool& bHasPrecomputedVolumetricLightmap, FMatrix& PreviousLocalToWorld, int32& SingleCaptureIndex, bool& OutputVelocity)"
  },
  {
    "label": "UpdateLightTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateLightTransform(ULightComponent* Light)"
  },
  {
    "label": "UpdateLightColorAndBrightness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightColorAndBrightness(ULightComponent* Light)"
  },
  {
    "label": "SetPrecomputedVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrecomputedVisibility(const class FPrecomputedVisibilityHandler* PrecomputedVisibilityHandler)"
  },
  {
    "label": "SetPrecomputedVolumeDistanceField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPrecomputedVolumeDistanceField(const class FPrecomputedVolumeDistanceField* PrecomputedVolumeDistanceField)"
  },
  {
    "label": "UpdateStaticDrawLists()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStaticDrawLists()"
  },
  {
    "label": "UpdateCachedRenderStates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateCachedRenderStates(class FPrimitiveSceneProxy* SceneProxy)"
  },
  {
    "label": "UpdatePrimitiveSelectedState_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePrimitiveSelectedState_RenderThread(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bIsSelected)"
  },
  {
    "label": "UpdatePrimitiveVelocityState_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePrimitiveVelocityState_RenderThread(FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bIsBeingMoved)"
  },
  {
    "label": "AddExponentialHeightFog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExponentialHeightFog(class UExponentialHeightFogComponent* FogComponent)"
  },
  {
    "label": "RemoveExponentialHeightFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExponentialHeightFog(class UExponentialHeightFogComponent* FogComponent)"
  },
  {
    "label": "HasAnyExponentialHeightFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyExponentialHeightFog()"
  },
  {
    "label": "AddLocalFogVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalFogVolume(class FLocalFogVolumeSceneProxy* FogProxy)"
  },
  {
    "label": "RemoveLocalFogVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLocalFogVolume(class FLocalFogVolumeSceneProxy* FogProxy)"
  },
  {
    "label": "HasAnyLocalFogVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyLocalFogVolume()"
  },
  {
    "label": "AddSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSkyAtmosphere(FSkyAtmosphereSceneProxy* SkyAtmosphereSceneProxy, bool bStaticLightingBuilt)"
  },
  {
    "label": "RemoveSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSkyAtmosphere(FSkyAtmosphereSceneProxy* SkyAtmosphereSceneProxy)"
  },
  {
    "label": "GetSkyAtmosphereSceneInfo()",
    "kind": "Method",
    "detail": "Function (FSkyAtmosphereRenderSceneInfo*)",
    "insertText": "GetSkyAtmosphereSceneInfo()"
  },
  {
    "label": "AddSparseVolumeTextureViewer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSparseVolumeTextureViewer(FSparseVolumeTextureViewerSceneProxy* SVTV)"
  },
  {
    "label": "RemoveSparseVolumeTextureViewer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSparseVolumeTextureViewer(FSparseVolumeTextureViewerSceneProxy* SVTV)"
  },
  {
    "label": "AddVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVolumetricCloud(FVolumetricCloudSceneProxy* VolumetricCloudSceneProxy)"
  },
  {
    "label": "RemoveVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVolumetricCloud(FVolumetricCloudSceneProxy* VolumetricCloudSceneProxy)"
  },
  {
    "label": "AddHairStrands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHairStrands(FHairStrandsInstance* Proxy)"
  },
  {
    "label": "RemoveHairStrands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHairStrands(FHairStrandsInstance* Proxy)"
  },
  {
    "label": "GetLightIESAtlasSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightIESAtlasSlot(const FLightSceneProxy* Proxy, FLightRenderParameters* Out)"
  },
  {
    "label": "GetRectLightAtlasSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRectLightAtlasSlot(const FRectLightSceneProxy* Proxy, FLightRenderParameters* Out)"
  },
  {
    "label": "SetPhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsField(class FPhysicsFieldSceneProxy* PhysicsFieldSceneProxy)"
  },
  {
    "label": "ResetPhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPhysicsField()"
  },
  {
    "label": "ShowPhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPhysicsField()"
  },
  {
    "label": "UpdatePhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicsField(FRDGBuilder& GraphBuilder, FViewInfo& View)"
  },
  {
    "label": "GetVolumetricCloudSceneInfo()",
    "kind": "Method",
    "detail": "Function (} FVolumetricCloudRenderSceneInfo*)",
    "insertText": "GetVolumetricCloudSceneInfo()"
  },
  {
    "label": "AddWindSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWindSource(class UWindDirectionalSourceComponent* WindComponent)"
  },
  {
    "label": "RemoveWindSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWindSource(class UWindDirectionalSourceComponent* WindComponent)"
  },
  {
    "label": "UpdateWindSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindSource(class UWindDirectionalSourceComponent* WindComponent)"
  },
  {
    "label": "GetWindSources_RenderThread()",
    "kind": "Method",
    "detail": "Function (const TArray<class FWindSourceSceneProxy*>&)",
    "insertText": "GetWindSources_RenderThread()"
  },
  {
    "label": "GetWindParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindParameters(const FVector& Position, FVector& OutDirection, float& OutSpeed, float& OutMinGustAmt, float& OutMaxGustAmt)"
  },
  {
    "label": "GetWindParameters_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindParameters_GameThread(const FVector& Position, FVector& OutDirection, float& OutSpeed, float& OutMinGustAmt, float& OutMaxGustAmt)"
  },
  {
    "label": "GetDirectionalWindParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirectionalWindParameters(FVector& OutDirection, float& OutSpeed, float& OutMinGustAmt, float& OutMaxGustAmt)"
  },
  {
    "label": "AddSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpeedTreeWind(class FVertexFactory* VertexFactory, const class UStaticMesh* StaticMesh)"
  },
  {
    "label": "RemoveSpeedTreeWind_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpeedTreeWind_RenderThread(class FVertexFactory* VertexFactory, const class UStaticMesh* StaticMesh)"
  },
  {
    "label": "UpdateSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpeedTreeWind(double CurrentTime)"
  },
  {
    "label": "GetSpeedTreeUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer*)",
    "insertText": "GetSpeedTreeUniformBuffer(const FVertexFactory* VertexFactory)"
  },
  {
    "label": "AddLumenSceneCard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLumenSceneCard(class ULumenSceneCardComponent* LumenSceneCardComponent)"
  },
  {
    "label": "UpdateLumenSceneCardTransform()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateLumenSceneCardTransform(class ULumenSceneCardComponent* LumenSceneCardComponent)"
  },
  {
    "label": "RemoveLumenSceneCard()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveLumenSceneCard(class ULumenSceneCardComponent* LumenSceneCardComponent)"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddPrimitive(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "RemovePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimitive(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "ReleasePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePrimitive(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "UpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveTransform(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "BatchAddPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddPrimitives(TArrayView<FPrimitiveSceneDesc*> InPrimitives)"
  },
  {
    "label": "BatchRemovePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRemovePrimitives(TArrayView<FPrimitiveSceneDesc*> InPrimitives)"
  },
  {
    "label": "BatchReleasePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchReleasePrimitives(TArrayView<FPrimitiveSceneDesc*> InPrimitives)"
  },
  {
    "label": "UpdateCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomPrimitiveData(FPrimitiveSceneDesc* Primitive, const FCustomPrimitiveData& CustomPrimitiveData)"
  },
  {
    "label": "UpdatePrimitiveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveInstances(FInstancedStaticMeshSceneDesc* Primitive)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "GetRelevantLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRelevantLights(UPrimitiveComponent* Primitive, TArray<const ULightComponent*>* RelevantLights)"
  },
  {
    "label": "RequiresHitProxies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresHitProxies()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetRenderScene()",
    "kind": "Method",
    "detail": "Function (FScene*)",
    "insertText": "GetRenderScene()"
  },
  {
    "label": "OnWorldCleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldCleanup()"
  },
  {
    "label": "UpdateSceneSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneSettings(AWorldSettings* WorldSettings)"
  },
  {
    "label": "StartUpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartUpdatePrimitiveTransform(int32 NumPrimitives)"
  },
  {
    "label": "FinishUpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishUpdatePrimitiveTransform()"
  },
  {
    "label": "GetGPUSkinCache()",
    "kind": "Method",
    "detail": "Function (class FGPUSkinCache*)",
    "insertText": "GetGPUSkinCache()"
  },
  {
    "label": "SetFXSystem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFXSystem(class FFXSystemInterface* InFXSystem)"
  },
  {
    "label": "GetFXSystem()",
    "kind": "Method",
    "detail": "Function (class FFXSystemInterface*)",
    "insertText": "GetFXSystem()"
  },
  {
    "label": "DumpUnbuiltLightInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpUnbuiltLightInteractions(FOutputDevice& Ar)"
  },
  {
    "label": "UpdateParameterCollections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateParameterCollections(const TArray<class FMaterialParameterCollectionInstanceResource*>& InParameterCollections)"
  },
  {
    "label": "Export()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Export(FArchive& Ar)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLevelAddedToWorld(const FName& InLevelName, UWorld* InWorld, bool bIsLightingScenario)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLevelRemovedFromWorld(const FName& InLevelName, UWorld* InWorld, bool bIsLightingScenario)"
  },
  {
    "label": "HasAnyLights()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyLights()"
  },
  {
    "label": "IsEditorScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorScene()"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "GetShadingPath()",
    "kind": "Method",
    "detail": "Function (EShadingPath)",
    "insertText": "GetShadingPath(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetShadingPath()",
    "kind": "Method",
    "detail": "Function (EShadingPath)",
    "insertText": "GetShadingPath()"
  },
  {
    "label": "InitializePixelInspector()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "InitializePixelInspector(FRenderTarget* BufferFinalColor, FRenderTarget* BufferSceneColor, FRenderTarget* BufferDepth, FRenderTarget* BufferHDR, FRenderTarget* BufferA, FRenderTarget* BufferBCDEF, int32 BufferIndex)"
  },
  {
    "label": "GetScenePrimitiveComponentIds()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FPrimitiveComponentId>)",
    "insertText": "GetScenePrimitiveComponentIds()"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "GetFrameNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetFrameNumber()"
  },
  {
    "label": "UpdateCachedRayTracingState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateCachedRayTracingState(class FPrimitiveSceneProxy* SceneProxy)"
  },
  {
    "label": "GetRayTracingDynamicGeometryCollection()",
    "kind": "Method",
    "detail": "Function (} class FRayTracingDynamicGeometryCollection*)",
    "insertText": "GetRayTracingDynamicGeometryCollection()"
  },
  {
    "label": "ReloadNaniteFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReloadNaniteFixedFunctionBins()"
  },
  {
    "label": "FCustomRenderPassRendererInput()",
    "kind": "Method",
    "detail": "Function (} struct FCustomRenderPassRendererInput {)",
    "insertText": "FCustomRenderPassRendererInput() : EngineShowFlags(ESFIM_Game)"
  },
  {
    "label": "AddCustomRenderPass()",
    "kind": "Method",
    "detail": "Function (} FVector ViewLocation ; FMatrix ViewRotationMatrix ; FMatrix ProjectionMatrix ; TSet<FPrimitiveComponentId> HiddenPrimitives ; TOptional<TSet<FPrimitiveComponentId>> ShowOnlyPrimitives ; FEngineShowFlags EngineShowFlags ; const AActor* ViewActor = nullptr ; class FSceneViewStateInterface* ViewStateInterface = nullptr ; int32 PostVolumeUserFlags = 0 ; bool bIsSceneCapture = false ; bool bUseMainViewFamilyShowFlags = false ; bool bOverridesPostVolumeUserFlags = false ; class FCustomRenderPassBase* CustomRenderPass = nullptr ; } ; bool)",
    "insertText": "AddCustomRenderPass(const FSceneViewFamily* ViewFamily, const FCustomRenderPassRendererInput& CustomRenderPassInput)"
  }
]