[
  {
    "label": "FT_SIZEOF_INT()",
    "kind": "Method",
    "detail": "Function (# ifndef __FTCONFIG_H__ # define __FTCONFIG_H__ # include<ft2build . h> # include FT_CONFIG_OPTIONS_H # include FT_CONFIG_STANDARD_LIBRARY_H FT_BEGIN_HEADER # ifndef FT_CHAR_BIT # define FT_CHAR_BIT CHAR_BIT # endif # if FT_UINT_MAX = = 0 xFFFFUL # define)",
    "insertText": "FT_SIZEOF_INT(16 / FT_CHAR_BIT) #elif FT_UINT_MAX == 0xFFFFFFFFUL #define FT_SIZEOF_INT (32 / FT_CHAR_BIT) #elif FT_UINT_MAX > 0xFFFFFFFFUL && FT_UINT_MAX == 0xFFFFFFFFFFFFFFFFUL #define FT_SIZEOF_INT (64 / FT_CHAR_BIT) #else #error \"Unsupported size of `int' type!\" #endif #if FT_ULONG_MAX == 0xFFFFFFFFUL #define FT_SIZEOF_LONG (32 / FT_CHAR_BIT) #elif FT_ULONG_MAX > 0xFFFFFFFFUL && FT_ULONG_MAX == 0xFFFFFFFFFFUL #define FT_SIZEOF_LONG (32 / FT_CHAR_BIT) #elif FT_ULONG_MAX > 0xFFFFFFFFUL && FT_ULONG_MAX == 0xFFFFFFFFFFFFFFFFUL #define FT_SIZEOF_LONG (64 / FT_CHAR_BIT) #else #error \"Unsupported size of `long' type!\" #endif #ifndef FT_UNUSED #define FT_UNUSED( arg ) ( (arg) = (arg) ) #endif #if defined( __APPLE__ ) || ( defined( __MWERKS__ ) && defined( macintosh ) ) #include <errno.h> #ifdef ECANCELED #include \"AvailabilityMacros.h\" #endif #if defined( __LP64__ ) && \\ ( MAC_OS_X_VERSION_MIN_REQUIRED <= MAC_OS_X_VERSION_10_4 ) #undef FT_MACINTOSH #endif #elif defined( __SC__ ) || defined( __MRC__)"
  },
  {
    "label": "FT_SIZEOF_INT()",
    "kind": "Method",
    "detail": "Function (typedef unsigned short FT_UInt16 ; # if 0 typedef signed XXX FT_Int32 ; typedef unsigned XXX FT_UInt32 ; typedef signed XXX FT_Int64 ; # endif # if)",
    "insertText": "FT_SIZEOF_INT(32 / FT_CHAR_BIT)"
  },
  {
    "label": "FT_SIZEOF_LONG()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int FT_UInt32 ; # elif)",
    "insertText": "FT_SIZEOF_LONG(32 / FT_CHAR_BIT)"
  },
  {
    "label": "FT_SIZEOF_LONG()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long FT_UFast ; # endif # if)",
    "insertText": "FT_SIZEOF_LONG(64 / FT_CHAR_BIT) #define FT_LONG64 #define FT_INT64 long #elif defined( _MSC_VER ) && _MSC_VER >= 900 #define FT_LONG64 #define FT_INT64 __int64 #elif defined( __BORLANDC__ ) #define FT_LONG64 #define FT_INT64 __int64 #elif defined( __WATCOMC__ ) #elif defined( __MWERKS__ ) #define FT_LONG64 #define FT_INT64 long long int #elif defined( __GNUC__ ) #define FT_LONG64 #define FT_INT64 long long int #endif #if defined( FT_LONG64 ) && !defined( FT_CONFIG_OPTION_FORCE_INT64)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# endif # define FT_BEGIN_STMNT do { # define FT_END_STMNT })",
    "insertText": "while(0 ) #define FT_DUMMY_STMNT FT_BEGIN_STMNT FT_END_STMNT #ifndef FT_CONFIG_OPTION_NO_ASSEMBLER #if defined( __CC_ARM ) || defined( __ARMCC__ ) #define FT_MULFIX_ASSEMBLER FT_MulFix_arm static __inline FT_Int32 FT_MulFix_arm( FT_Int32 a, FT_Int32 b)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (register FT_Int32 t,t2 ; __asm { smull t2,t,b,a mov a,t,asr # 3 1 add a,a,# 0 x8000 adds t2,t2,a adc t,t,# 0 mov a,t2,lsr # 1 6 orr a,a,t,lsl # 1 6 } return a ; } # endif # ifdef __GNUC__ # if)",
    "insertText": "defined(__arm__ ) && !defined( __thumb__ ) && \\ !( defined( __CC_ARM ) || defined( __ARMCC__ ) ) #define FT_MULFIX_ASSEMBLER FT_MulFix_arm static __inline__ FT_Int32 FT_MulFix_arm( FT_Int32 a, FT_Int32 b)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (register FT_Int32 t,t2 ; __asm__)",
    "insertText": "__volatile__(\"smull %1, %2, %4, %3\\n\\t\" \"mov %0, %2, asr #31\\n\\t\" \"add %0, %0, #0x8000\\n\\t\" \"adds %1, %1, %0\\n\\t\" \"adc %2, %2, #0\\n\\t\" \"mov %0, %1, lsr #16\\n\\t\" \"orr %0, %0, %2, lsl #16\\n\\t\" : \"=r\"(a), \"=&r\"(t2), \"=&r\"(t) : \"r\"(a), \"r\"(b) : \"cc\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (register FT_Int32 result ; __asm__)",
    "insertText": "__volatile__(\"imul %%edx\\n\" \"movl %%edx, %%ecx\\n\" \"sarl $31, %%ecx\\n\" \"addl $0x8000, %%ecx\\n\" \"addl %%ecx, %%eax\\n\" \"adcl $0, %%edx\\n\" \"shrl $16, %%eax\\n\" \"shll $16, %%edx\\n\" \"addl %%edx, %%eax\\n\" : \"=a\"(result), \"=d\"(b) : \"a\"(a), \"d\"(b) : \"%ecx\", \"cc\")"
  }
]