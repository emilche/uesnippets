[
  {
    "label": "RangeValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RangeValueType"
  },
  {
    "label": "PredicateType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredicateType"
  },
  {
    "label": "HeapGetLeftChildIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Common . h \" # include \" uLang / Common / Templates / Sorting . h \" # include \" uLang / Common / Templates / Invoke . h \" # include \" uLang / Common / Templates / Storage . h \" namespace uLang { namespace AlgoImpl { ULANG_FORCEINLINE int32_t)",
    "insertText": "HeapGetLeftChildIndex(int32_t Index)"
  },
  {
    "label": "HeapGetParentIndex()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "HeapGetParentIndex(int32_t Index)"
  },
  {
    "label": "HeapSiftDown()",
    "kind": "Method",
    "detail": "Function (} template<RangeValueType,ProjectionType,PredicateType> ULANG_FORCEINLINE void)",
    "insertText": "HeapSiftDown(RangeValueType* Heap, int32_t Index, const int32_t Count, const ProjectionType& Projection, const PredicateType& Predicate)"
  },
  {
    "label": "HeapGetLeftChildIndex()",
    "kind": "Method",
    "detail": "Function (const int32_t LeftChildIndex =)",
    "insertText": "HeapGetLeftChildIndex(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32_t RightChildIndex = LeftChildIndex + 1 ; int32_t MinChildIndex = LeftChildIndex ;)",
    "insertText": "if(RightChildIndex < Count)"
  },
  {
    "label": "Predicate()",
    "kind": "Method",
    "detail": "Function (MinChildIndex =)",
    "insertText": "Predicate(uLang::Invoke(Projection, Heap[LeftChildIndex]), uLang::Invoke(Projection, Heap[RightChildIndex]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Predicate( uLang::Invoke(Projection, Heap[MinChildIndex]), uLang::Invoke(Projection, Heap[Index]) ))"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "Swap(Heap[Index], Heap[MinChildIndex])"
  },
  {
    "label": "HeapSiftUp()",
    "kind": "Method",
    "detail": "Function (Index = MinChildIndex ; } } template<class RangeValueType,ProjectionType,class PredicateType> ULANG_FORCEINLINE int32_t)",
    "insertText": "HeapSiftUp(RangeValueType* Heap, int32_t RootIndex, int32_t NodeIndex, const ProjectionType& Projection, const PredicateType& Predicate)"
  },
  {
    "label": "HeapGetParentIndex()",
    "kind": "Method",
    "detail": "Function (int32_t ParentIndex =)",
    "insertText": "HeapGetParentIndex(NodeIndex)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "Swap(Heap[NodeIndex], Heap[ParentIndex])"
  },
  {
    "label": "HeapifyInternal()",
    "kind": "Method",
    "detail": "Function (NodeIndex = ParentIndex ; } return NodeIndex ; } template<RangeValueType,ProjectionType,PredicateType> ULANG_FORCEINLINE void)",
    "insertText": "HeapifyInternal(RangeValueType* First, int32_t Num, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "HeapSiftDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSiftDown(First, Index, Num, Projection, Predicate)"
  },
  {
    "label": "HeapSortInternal()",
    "kind": "Method",
    "detail": "Function (} } template<RangeValueType,ProjectionType,class PredicateType> void)",
    "insertText": "HeapSortInternal(RangeValueType* First, int32_t Num, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "ReversePredicateWrapper()",
    "kind": "Method",
    "detail": "Function (TReversePredicate<PredicateType>)",
    "insertText": "ReversePredicateWrapper(Predicate)"
  },
  {
    "label": "HeapifyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapifyInternal(First, Num, Projection, ReversePredicateWrapper)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(First[0], First[Index])"
  },
  {
    "label": "HeapSiftDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSiftDown(First, 0, Index, Projection, ReversePredicateWrapper)"
  },
  {
    "label": "HeapSort()",
    "kind": "Method",
    "detail": "Function (} } } namespace Algo { template<RangeType> ULANG_FORCEINLINE void)",
    "insertText": "HeapSort(RangeType& Range)"
  },
  {
    "label": "HeapSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSortInternal(ULangGetData(Range), ULangGetNum(Range), SIdentityFunctor(), TLess<>())"
  },
  {
    "label": "HeapSort()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,PredicateType> ULANG_FORCEINLINE void)",
    "insertText": "HeapSort(RangeType& Range, PredicateType Predicate)"
  },
  {
    "label": "HeapSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSortInternal(ULangGetData(Range), ULangGetNum(Range), SIdentityFunctor(), uLang::Move(Predicate))"
  },
  {
    "label": "HeapSortBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType> ULANG_FORCEINLINE void)",
    "insertText": "HeapSortBy(RangeType& Range, ProjectionType Projection)"
  },
  {
    "label": "HeapSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSortInternal(ULangGetData(Range), ULangGetNum(Range), uLang::Move(Projection), TLess<>())"
  },
  {
    "label": "HeapSortBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,PredicateType> ULANG_FORCEINLINE void)",
    "insertText": "HeapSortBy(RangeType& Range, ProjectionType Projection, PredicateType Predicate)"
  },
  {
    "label": "HeapSortInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapSortInternal(ULangGetData(Range), ULangGetNum(Range), uLang::Move(Projection), uLang::Move(Predicate))"
  }
]