[
  {
    "label": "padded_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "padded_mutex"
  },
  {
    "label": "x86_eliding_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x86_eliding_mutex"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__x86_eliding_mutex_impl_H # define __TBB__x86_eliding_mutex_impl_H # ifndef __TBB_spin_mutex_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif #)",
    "insertText": "if(__TBB_x86_32 || __TBB_x86_64)"
  },
  {
    "label": "x86_eliding_mutex()",
    "kind": "Method",
    "detail": "Function (namespace interface7 { namespace internal { template<Mutex,bool is_rw> class padded_mutex ; class x86_eliding_mutex : tbb::internal::mutex_copy_deprecated_and_disabled { __TBB_atomic_flag flag ; class padded_mutex<x86_eliding_mutex,false> ; public :)",
    "insertText": "x86_eliding_mutex() : flag(0)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_USE_X86_ELIDING_MUTEX | | __TBB_GCC_VERSION<4 0 0 0 0 # else private : # endif class scoped_lock : tbb::internal::no_copy { private : x86_eliding_mutex* my_mutex ; public :)",
    "insertText": "scoped_lock() : my_mutex(NULL)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(x86_eliding_mutex& m ) : my_mutex(NULL)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acquire(m)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(x86_eliding_mutex& m)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!my_mutex, \"already holding a lock\")"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (my_mutex =& m ; my_mutex ->)",
    "insertText": "lock()"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "try_acquire(x86_eliding_mutex& m)"
  },
  {
    "label": "try_lock()",
    "kind": "Method",
    "detail": "Function (bool result = m .)",
    "insertText": "try_lock()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (my_mutex =& m ; } return result ; } void)",
    "insertText": "release()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_mutex, \"release on scoped_lock that is not holding a lock\")"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (my_mutex ->)",
    "insertText": "unlock()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (my_mutex = NULL ; } ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "__TBB_LockByteElided()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_LockByteElided(flag)"
  },
  {
    "label": "__TBB_UnlockByteElided()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_UnlockByteElided(flag)"
  }
]