[
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FVisualLoggerTimeSliderArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerTimeSliderArgs"
  },
  {
    "label": "FVisualLoggerTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLoggerTimeSliderController"
  },
  {
    "label": "FScrubRangeToScreen",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScrubRangeToScreen"
  },
  {
    "label": "FDrawTickArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDrawTickArgs"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SScrollBar . h \" class FSlateWindowElementList ; struct FVisualLoggerTimeSliderArgs {)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRangeChanged, TRange<double> ) DECLARE_DELEGATE_TwoParams( FOnScrubPositionChanged, double, bool ) FVisualLoggerTimeSliderArgs() : ScrubPosition(0.) , ViewRange(TRange<double>(0., 5.)) , ClampRange(TRange<double>(0., 5.)) , AllowZoom(true) , CursorSize(0.05f)"
  },
  {
    "label": "FVisualLoggerTimeSliderController()",
    "kind": "Method",
    "detail": "Function (} TAttribute<double> ScrubPosition ; FOnScrubPositionChanged OnScrubPositionChanged ; FSimpleDelegate OnBeginScrubberMovement ; FSimpleDelegate OnEndScrubberMovement ; TAttribute<TRange<double>> ViewRange ; TAttribute<TRange<double>> ClampRange ; FOnRangeChanged OnViewRangeChanged ; TAttribute<double> TimeSnapInterval ; bool AllowZoom ; TAttribute<float> CursorSize ; } ; class FVisualLoggerTimeSliderController { public :)",
    "insertText": "FVisualLoggerTimeSliderController(const FVisualLoggerTimeSliderArgs& InArgs)"
  },
  {
    "label": "SetTimesliderArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimesliderArgs(const FVisualLoggerTimeSliderArgs& InArgs)"
  },
  {
    "label": "OnPaintTimeSlider()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintTimeSlider(bool bMirrorLabels, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(SWidget& WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(TSharedRef<const SWidget> WidgetOwner, const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnPaintSectionView()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OnPaintSectionView(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, bool bEnabled, bool bDisplayTickLines, bool bDisplayScrubPosition)"
  },
  {
    "label": "GetTimeSliderArgs()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerTimeSliderArgs&)",
    "insertText": "GetTimeSliderArgs()"
  },
  {
    "label": "SetExternalScrollbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExternalScrollbar(TSharedRef<SScrollBar> Scrollbar)"
  },
  {
    "label": "SetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeRange(double MinValue, double MaxValue)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(double MinValue, double MaxValue)"
  },
  {
    "label": "IsPanning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPanning()"
  },
  {
    "label": "DrawTicks()",
    "kind": "Method",
    "detail": "Function (private : struct FScrubRangeToScreen ; struct FDrawTickArgs ; void)",
    "insertText": "DrawTicks(FSlateWindowElementList& OutDrawElements, const FScrubRangeToScreen& RangeToScreen, FDrawTickArgs& InArgs)"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  }
]