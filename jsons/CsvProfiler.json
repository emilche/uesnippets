[
  {
    "label": "FCsvProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvProfiler"
  },
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FScopedCsvStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvStat"
  },
  {
    "label": "FScopedCsvStatExclusive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvStatExclusive"
  },
  {
    "label": "FCsvDeclaredStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCsvDeclaredStat"
  },
  {
    "label": "FCsvProfilerFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvProfilerFrame"
  },
  {
    "label": "FCsvProfilerProcessingThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvProfilerProcessingThread"
  },
  {
    "label": "FCsvProfilerThreadData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvProfilerThreadData"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FCsvPersistentCustomStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCsvPersistentCustomStats"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCsvCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCsvCategory"
  },
  {
    "label": "FCsvCaptureCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCsvCaptureCommand"
  },
  {
    "label": "FCsvPersistentCustomStatBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvPersistentCustomStatBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TCsvPersistentCustomStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCsvPersistentCustomStat"
  },
  {
    "label": "FCsvStreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCsvStreamWriter"
  },
  {
    "label": "FScopedCsvStatExclusiveConditional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvStatExclusiveConditional"
  },
  {
    "label": "FScopedCsvStatRecursive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvStatRecursive"
  },
  {
    "label": "FScopedCsvStatRecursiveConditional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvStatRecursiveConditional"
  },
  {
    "label": "FScopedCsvWaitConditional",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvWaitConditional"
  },
  {
    "label": "FScopedCsvSetWaitStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCsvSetWaitStat"
  },
  {
    "label": "CSV_CATEGORY_INDEX()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Async / TaskGraphFwd . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Queue . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" ProfilingDebugging / CsvProfilerConfig . h \" # include \" ProfilingDebugging / CsvProfilerTrace . h \" # include \" ProfilingDebugging / MiscTrace . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / IsValidVariadicFunctionArg . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" UObject / NameTypes . h \" # include \" AutoRTFM / AutoRTFM . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Async / TaskGraphInterfaces . h \" # endif # include<atomic> class FCsvProfiler ; class FEvent ; class FScopedCsvStat ; class FScopedCsvStatExclusive ; struct FCsvDeclaredStat ; # if CSV_PROFILER # define)",
    "insertText": "CSV_CATEGORY_INDEX(CategoryName) (_GCsvCategory_##CategoryName.Index) #define CSV_CATEGORY_INDEX_GLOBAL (0) #define CSV_DEFINE_CATEGORY(CategoryName,bDefaultValue) FCsvCategory _GCsvCategory_##CategoryName(TEXT(#CategoryName),bDefaultValue) #define CSV_DEFINE_CATEGORY_MODULE(Module_API,CategoryName,bDefaultValue) FCsvCategory Module_API _GCsvCategory_##CategoryName(TEXT(#CategoryName),bDefaultValue) #define CSV_DECLARE_CATEGORY_EXTERN(CategoryName) extern FCsvCategory _GCsvCategory_##CategoryName #define CSV_DECLARE_CATEGORY_MODULE_EXTERN(Module_API,CategoryName) extern Module_API FCsvCategory _GCsvCategory_##CategoryName #define CSV_EVENT(Category, Format, ...) \\ FCsvProfiler::RecordEventf( CSV_CATEGORY_INDEX(Category), Format, ##__VA_ARGS__)"
  },
  {
    "label": "TRACE_BOOKMARK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_BOOKMARK(TEXT(PREPROCESSOR_TO_STRING(Category)) TEXT(\"/\") Format, ##__VA_ARGS__) #define CSV_EVENT_GLOBAL(Format, ...) \\ FCsvProfiler::RecordEventf( CSV_CATEGORY_INDEX_GLOBAL, Format, ##__VA_ARGS__)"
  },
  {
    "label": "TRACE_BOOKMARK()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TRACE_BOOKMARK(Format, ##__VA_ARGS__) #define CSV_METADATA(Key,Value) FCsvProfiler::SetMetadata( Key, Value ) #define CSV_NON_PERSISTENT_METADATA(Key,Value) FCsvProfiler::SetNonPersistentMetadata( Key, Value ) #define CSV_CUSTOM_STAT_MINIMAL(Category,StatName,Value,Op) FCsvProfiler::RecordCustomStatMinimal(#StatName, CSV_CATEGORY_INDEX(Category), Value, Op)"
  },
  {
    "label": "CSV_CUSTOM_STAT_MINIMAL_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_CUSTOM_STAT_MINIMAL_GLOBAL(StatName,Value,Op) FCsvProfiler::RecordCustomStatMinimal(#StatName, CSV_CATEGORY_INDEX_GLOBAL, Value, Op)"
  },
  {
    "label": "CSV_CATEGORY_INDEX()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "CSV_CATEGORY_INDEX(CategoryName) (0) #define CSV_CATEGORY_INDEX_GLOBAL (0) #define CSV_DEFINE_CATEGORY(CategoryName,bDefaultValue) #define CSV_DEFINE_CATEGORY_MODULE(Module_API,CategoryName,bDefaultValue) #define CSV_DECLARE_CATEGORY_EXTERN(CategoryName) #define CSV_DECLARE_CATEGORY_MODULE_EXTERN(Module_API,CategoryName) #define CSV_EVENT(Category, Format, ...) #define CSV_EVENT_GLOBAL(Format, ...) #define CSV_METADATA(Key,Value) #define CSV_NON_PERSISTENT_METADATA(Key,Value) #define CSV_CUSTOM_STAT_MINIMAL(Category,StatName,Value,Op) #define CSV_CUSTOM_STAT_MINIMAL_GLOBAL(StatName,Value,Op) #endif #if CSV_PROFILER && !CSV_PROFILER_MINIMAL #define CSV_STAT_FNAME(StatName) (_GCsvStat_##StatName.Name) #define CSV_SCOPED_TIMING_STAT(Category,StatName) \\ TRACE_CSV_PROFILER_INLINE_STAT(#StatName, CSV_CATEGORY_INDEX(Category))"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ FScopedCsvStat _ScopedCsvStat_ # #)",
    "insertText": "StatName(#StatName, CSV_CATEGORY_INDEX(Category), \"CSV_\"#StatName)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_TIMING_STAT_GLOBAL(StatName) \\ TRACE_CSV_PROFILER_INLINE_STAT(#StatName, CSV_CATEGORY_INDEX_GLOBAL)"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ FScopedCsvStat _ScopedCsvStat_ # #)",
    "insertText": "StatName(#StatName, CSV_CATEGORY_INDEX_GLOBAL, \"CSV_\"#StatName)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT_EXCLUSIVE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_TIMING_STAT_EXCLUSIVE(StatName) \\ TRACE_CSV_PROFILER_INLINE_STAT_EXCLUSIVE(#StatName)"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ FScopedCsvStatExclusive _ScopedCsvStatExclusive_ # #)",
    "insertText": "StatName(#StatName, \"CSV_\"#StatName)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT_EXCLUSIVE_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_TIMING_STAT_EXCLUSIVE_CONDITIONAL(StatName,Condition) \\ TRACE_CSV_PROFILER_INLINE_STAT_EXCLUSIVE(#StatName)"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ FScopedCsvStatExclusiveConditional _ScopedCsvStatExclusive_ # #)",
    "insertText": "StatName(#StatName,Condition, \"CSV_\"#StatName)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT_RECURSIVE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_TIMING_STAT_RECURSIVE(Category,StatName) \\ TRACE_CSV_PROFILER_INLINE_STAT(#StatName, CSV_CATEGORY_INDEX(Category))"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ thread_local int32 _ScopedCsvStatRecursive_EntryCount_ # # StatName = 0 ; \\ FScopedCsvStatRecursive _ScopedCsvStatRecursive_ # #)",
    "insertText": "StatName(_ScopedCsvStatRecursive_EntryCount_ ## StatName, #StatName, CSV_CATEGORY_INDEX(Category), \"CSV_\"#StatName)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT_RECURSIVE_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_TIMING_STAT_RECURSIVE_CONDITIONAL(Category,StatName,Condition) \\ TRACE_CSV_PROFILER_INLINE_STAT(#StatName, CSV_CATEGORY_INDEX(Category))"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ thread_local int32 _ScopedCsvStatRecursive_EntryCount_ # # StatName = 0 ; \\ FScopedCsvStatRecursiveConditional _ScopedCsvStatRecursive_ # #)",
    "insertText": "StatName(_ScopedCsvStatRecursive_EntryCount_ ## StatName, #StatName, CSV_CATEGORY_INDEX(Category), Condition, \"CSV_\"#StatName)"
  },
  {
    "label": "CSV_SCOPED_WAIT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_WAIT(WaitTime) FScopedCsvWaitConditional _ScopedCsvWait(WaitTime>0 && FCsvProfiler::IsWaitTrackingEnabledOnCurrentThread())"
  },
  {
    "label": "CSV_SCOPED_WAIT_CONDITIONAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_WAIT_CONDITIONAL(Condition) FScopedCsvWaitConditional _ScopedCsvWait(Condition)"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT(StatName) \\ TRACE_CSV_PROFILER_INLINE_STAT_EXCLUSIVE(\"EventWait/\"#StatName)"
  },
  {
    "label": "StatName()",
    "kind": "Method",
    "detail": "Function (\\ FScopedCsvSetWaitStat _ScopedCsvSetWaitStat # #)",
    "insertText": "StatName(\"EventWait/\"#StatName, \"CsvEventWait/\"#StatName, \"CsvEventWait/\"#StatName\" (Non-CP)\")"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT_IGNORE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT_IGNORE() FScopedCsvSetWaitStat _ScopedCsvSetWaitStat ## StatName()"
  },
  {
    "label": "CSV_CUSTOM_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_CUSTOM_STAT(Category,StatName,Value,Op) \\ TRACE_CSV_PROFILER_INLINE_STAT(#StatName, CSV_CATEGORY_INDEX(Category))"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RecordCustomStat(#StatName, CSV_CATEGORY_INDEX(Category), Value, Op)"
  },
  {
    "label": "CSV_CUSTOM_STAT_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_CUSTOM_STAT_GLOBAL(StatName,Value,Op) \\ TRACE_CSV_PROFILER_INLINE_STAT(#StatName, CSV_CATEGORY_INDEX_GLOBAL)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RecordCustomStat(#StatName, CSV_CATEGORY_INDEX_GLOBAL, Value, Op)"
  },
  {
    "label": "CSV_DEFINE_STAT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_DEFINE_STAT(Category,StatName) FCsvDeclaredStat _GCsvStat_##StatName((TCHAR*)TEXT(#StatName), CSV_CATEGORY_INDEX(Category))"
  },
  {
    "label": "CSV_DEFINE_STAT_GLOBAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_DEFINE_STAT_GLOBAL(StatName) FCsvDeclaredStat _GCsvStat_##StatName((TCHAR*)TEXT(#StatName), CSV_CATEGORY_INDEX_GLOBAL)"
  },
  {
    "label": "CSV_DECLARE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CSV_DECLARE_STAT_EXTERN(Category,StatName) extern FCsvDeclaredStat _GCsvStat_##StatName #define CSV_CUSTOM_STAT_DEFINED(StatName,Value,Op) FCsvProfiler::RecordCustomStat(_GCsvStat_##StatName.Name, _GCsvStat_##StatName.CategoryIndex, Value, Op)"
  },
  {
    "label": "CSV_STAT_FNAME()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "CSV_STAT_FNAME(StatName) NAME_None #define CSV_SCOPED_TIMING_STAT(Category,StatName) #define CSV_SCOPED_TIMING_STAT_GLOBAL(StatName) #define CSV_SCOPED_TIMING_STAT_EXCLUSIVE(StatName) #define CSV_SCOPED_TIMING_STAT_EXCLUSIVE_CONDITIONAL(StatName,Condition) #define CSV_SCOPED_TIMING_STAT_RECURSIVE(Category,StatName) #define CSV_SCOPED_TIMING_STAT_RECURSIVE_CONDITIONAL(Category,StatName,Condition) #define CSV_SCOPED_WAIT(WaitTime) #define CSV_SCOPED_WAIT_CONDITIONAL(Condition) #define CSV_SCOPED_SET_WAIT_STAT(StatName) #define CSV_SCOPED_SET_WAIT_STAT_IGNORE() #define CSV_CUSTOM_STAT(Category,StatName,Value,Op) #define CSV_CUSTOM_STAT_GLOBAL(StatName,Value,Op) #define CSV_DEFINE_STAT(Category,StatName) #define CSV_DEFINE_STAT_GLOBAL(StatName) #define CSV_DECLARE_STAT_EXTERN(Category,StatName) #define CSV_CUSTOM_STAT_DEFINED(StatName,Value,Op)"
  },
  {
    "label": "FCsvDeclaredStat()",
    "kind": "Method",
    "detail": "Function (class FCsvProfilerProcessingThread ; class FCsvProfilerThreadData ; class FName ; struct FCsvPersistentCustomStats ; enum class ECsvCustomStatOp : uint8 { Set,Min,Max,Accumulate,} ; enum class ECsvCommandType : uint8 { Start,Stop,Count } ; struct FCsvCategory ; struct FCsvDeclaredStat {)",
    "insertText": "FCsvDeclaredStat(const TCHAR* InNameString, uint32 InCategoryIndex) : Name(InNameString) , CategoryIndex(InCategoryIndex)"
  },
  {
    "label": "TRACE_CSV_PROFILER_DECLARED_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CSV_PROFILER_DECLARED_STAT(Name, InCategoryIndex)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} FName Name ; uint32 CategoryIndex ; } ; enum class ECsvProfilerFlags { None = 0,WriteCompletionFile = 1,CompressOutput = 2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECsvProfilerFlags)"
  },
  {
    "label": "FCsvCaptureCommand()",
    "kind": "Method",
    "detail": "Function (struct FCsvCaptureCommand {)",
    "insertText": "FCsvCaptureCommand() : CommandType(ECsvCommandType::Count) , FrameRequested(-1) , Value(-1)"
  },
  {
    "label": "FCsvCaptureCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCsvCaptureCommand(ECsvCommandType InCommandType, uint32 InFrameRequested, uint32 InValue, const FString& InDestinationFolder, const FString& InFilename, ECsvProfilerFlags InFlags) : CommandType(InCommandType) , FrameRequested(InFrameRequested) , Value(InValue) , DestinationFolder(InDestinationFolder) , Filename(InFilename) , Flags(InFlags)"
  },
  {
    "label": "FCsvCaptureCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCsvCaptureCommand(ECsvCommandType InCommandType, uint32 InFrameRequested, TPromise<FString>* InCompletion, TSharedFuture<FString> InFuture) : CommandType(InCommandType) , FrameRequested(InFrameRequested) , Completion(MoveTemp(InCompletion)) , Future(InFuture)"
  },
  {
    "label": "FCsvPersistentCustomStatBase()",
    "kind": "Method",
    "detail": "Function (} ECsvCommandType CommandType ; uint32 FrameRequested ; uint32 Value ; FString DestinationFolder ; FString Filename ; ECsvProfilerFlags Flags ; TPromise<FString>* Completion ; TSharedFuture<FString> Future ; } ; enum class ECsvPersistentCustomStatType : uint8 { Float,Int,Count } ; class FCsvPersistentCustomStatBase { public :)",
    "insertText": "FCsvPersistentCustomStatBase(FName InName, uint32 InCategoryIndex, bool bInResetEachFrame, ECsvPersistentCustomStatType InStatType) : Name(InName), CategoryIndex(InCategoryIndex), bResetEachFrame(bInResetEachFrame), StatType(InStatType)"
  },
  {
    "label": "GetStatType()",
    "kind": "Method",
    "detail": "Function (} ECsvPersistentCustomStatType)",
    "insertText": "GetStatType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Add(float Rhs)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (float Previous = Value .)",
    "insertText": "load(std::memory_order_consume)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (float Desired = Previous + Rhs ;)",
    "insertText": "while(!Value.compare_exchange_weak(Previous, Desired, std::memory_order_release, std::memory_order_consume))"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (Desired = Previous + Rhs ; } return Desired ; } float)",
    "insertText": "Sub(float Rhs)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(float NewVal)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetClassStatType()",
    "kind": "Method",
    "detail": "Function (} ECsvPersistentCustomStatType)",
    "insertText": "GetClassStatType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add(int32 Rhs)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Sub(int32 Rhs)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 NewVal)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "store(NewVal, std::memory_order_relaxed)"
  },
  {
    "label": "FCsvProfiler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCsvProfiler()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FCsvProfiler*)",
    "insertText": "Get()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "BeginStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginStat(const char* StatName, uint32 CategoryIndex, const char* NamedEventName = nullptr)"
  },
  {
    "label": "BeginStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginStat(const FName& StatName, uint32 CategoryIndex)"
  },
  {
    "label": "EndStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndStat(const char* StatName, uint32 CategoryIndex)"
  },
  {
    "label": "EndStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndStat(const FName& StatName, uint32 CategoryIndex)"
  },
  {
    "label": "BeginExclusiveStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginExclusiveStat(const char * StatName, const char* NamedEventName = nullptr)"
  },
  {
    "label": "EndExclusiveStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndExclusiveStat(const char * StatName)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStat(const char * StatName, uint32 CategoryIndex, float Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStat(const FName& StatName, uint32 CategoryIndex, float Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStat(const char* StatName, uint32 CategoryIndex, double Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStat(const FName& StatName, uint32 CategoryIndex, double Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStat(const char * StatName, uint32 CategoryIndex, int32 Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStat(const FName& StatName, uint32 CategoryIndex, int32 Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStatMinimal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStatMinimal(const char* StatName, uint32 CategoryIndex, float Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStatMinimal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStatMinimal(const char* StatName, uint32 CategoryIndex, int32 Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordCustomStatMinimal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordCustomStatMinimal(const char* StatName, uint32 CategoryIndex, double Value, const ECsvCustomStatOp CustomStatOp)"
  },
  {
    "label": "RecordEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEvent(int32 CategoryIndex, const FString& EventText)"
  },
  {
    "label": "RecordEventAtFrameStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEventAtFrameStart(int32 CategoryIndex, const FString& EventText)"
  },
  {
    "label": "RecordEventAtTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEventAtTimestamp(int32 CategoryIndex, const FString& EventText, uint64 Cycles64)"
  },
  {
    "label": "SetMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetadata(const TCHAR* Key, const TCHAR* Value)"
  },
  {
    "label": "SetNonPersistentMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonPersistentMetadata(const TCHAR* Key, const TCHAR* Value)"
  },
  {
    "label": "RegisterCategory()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegisterCategory(const FString& Name, bool bEnableByDefault, bool bIsGlobal)"
  },
  {
    "label": "GetCategoryIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCategoryIndex(const FString& Name)"
  },
  {
    "label": "RecordEventf()",
    "kind": "Method",
    "detail": "Function (template<FmtType,. . . Types> void)",
    "insertText": "RecordEventf(int32 CategoryIndex, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "RecordEventfInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEventfInternal(CategoryIndex, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "BeginSetWaitStat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginSetWaitStat(const char* StatName, const char* FormattedStatName, const char* FormattedStatNameNonCP)"
  },
  {
    "label": "EndSetWaitStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSetWaitStat()"
  },
  {
    "label": "BeginWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginWait()"
  },
  {
    "label": "EndWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWait()"
  },
  {
    "label": "IsCapturing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturing()"
  },
  {
    "label": "IsCapturing_Renderthread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCapturing_Renderthread()"
  },
  {
    "label": "IsWritingFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWritingFile()"
  },
  {
    "label": "IsEndCapturePending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEndCapturePending()"
  },
  {
    "label": "GetCaptureFrameNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCaptureFrameNumber()"
  },
  {
    "label": "GetCaptureFrameNumberRT()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCaptureFrameNumberRT()"
  },
  {
    "label": "GetNumFrameToCaptureOnEvent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFrameToCaptureOnEvent()"
  },
  {
    "label": "GetCsvID()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetCsvID()"
  },
  {
    "label": "EnableCategoryByString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableCategoryByString(const FString& CategoryName)"
  },
  {
    "label": "EnableCategoryByIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCategoryByIndex(uint32 CategoryIndex, bool bEnable)"
  },
  {
    "label": "IsCategoryEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCategoryEnabled(uint32 CategoryIndex)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "BeginCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCapture(int InNumFramesToCapture = -1, const FString& InDestinationFolder = FString(), const FString& InFilename = FString(), ECsvProfilerFlags InFlags = ECsvProfilerFlags::None)"
  },
  {
    "label": "EndCapture()",
    "kind": "Method",
    "detail": "Function (TSharedFuture<FString>)",
    "insertText": "EndCapture(FGraphEventRef EventToSignal = nullptr)"
  },
  {
    "label": "OnEndFramePostFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndFramePostFork()"
  },
  {
    "label": "BeginFrameRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrameRT()"
  },
  {
    "label": "EndFrameRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameRT()"
  },
  {
    "label": "SetDeviceProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceProfileName(FString InDeviceProfileName)"
  },
  {
    "label": "GetOutputFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOutputFilename()"
  },
  {
    "label": "IsWaitTrackingEnabledOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWaitTrackingEnabledOnCurrentThread()"
  },
  {
    "label": "GetFrameExecCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFrameExecCommands(TArray<FString>& OutFrameCommands)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnCSVProfileStart)"
  },
  {
    "label": "OnCSVProfileStart()",
    "kind": "Method",
    "detail": "Function (FOnCSVProfileStart&)",
    "insertText": "OnCSVProfileStart()"
  },
  {
    "label": "OnCSVProfileFirstFrame()",
    "kind": "Method",
    "detail": "Function (FOnCSVProfileFirstFrame&)",
    "insertText": "OnCSVProfileFirstFrame()"
  },
  {
    "label": "OnCSVProfileEndRequested()",
    "kind": "Method",
    "detail": "Function (FOnCSVProfileEndRequested&)",
    "insertText": "OnCSVProfileEndRequested()"
  },
  {
    "label": "OnCSVProfileEnd()",
    "kind": "Method",
    "detail": "Function (FOnCSVProfileEnd&)",
    "insertText": "OnCSVProfileEnd()"
  },
  {
    "label": "OnCSVProfileFinished()",
    "kind": "Method",
    "detail": "Function (FOnCSVProfileFinished&)",
    "insertText": "OnCSVProfileFinished()"
  },
  {
    "label": "OnCSVProfileEndFrame()",
    "kind": "Method",
    "detail": "Function (FOnCSVProfileEndFrame&)",
    "insertText": "OnCSVProfileEndFrame()"
  },
  {
    "label": "SetRHIThreadId()",
    "kind": "Method",
    "detail": "Function (RenderThreadId = InRenderThreadId ; } void)",
    "insertText": "SetRHIThreadId(uint32 InRHIThreadId)"
  },
  {
    "label": "GetOrCreatePersistentCustomStatInt()",
    "kind": "Method",
    "detail": "Function (RHIThreadId = InRHIThreadId ; } TCsvPersistentCustomStat<int32>*)",
    "insertText": "GetOrCreatePersistentCustomStatInt(FName Name, int32 CategoryIndex = CSV_CATEGORY_INDEX_GLOBAL, bool bResetEachFrame = false)"
  },
  {
    "label": "GetOrCreatePersistentCustomStatFloat()",
    "kind": "Method",
    "detail": "Function (TCsvPersistentCustomStat<float>*)",
    "insertText": "GetOrCreatePersistentCustomStatFloat(FName Name, int32 CategoryIndex = CSV_CATEGORY_INDEX_GLOBAL, bool bResetEachFrame = false)"
  },
  {
    "label": "RecordEventfInternal()",
    "kind": "Method",
    "detail": "Function (private : void VARARGS)",
    "insertText": "RecordEventfInternal(int32 CategoryIndex, const TCHAR* Fmt, ...)"
  },
  {
    "label": "SetMetadataInternal()",
    "kind": "Method",
    "detail": "Function (enum class EMetadataPersistenceType : int8 { Persistent,NonPersistent } ; void)",
    "insertText": "SetMetadataInternal(const TCHAR* Key, const TCHAR* Value, bool bSanitize=true, EMetadataPersistenceType PersistenceType = EMetadataPersistenceType::Persistent)"
  },
  {
    "label": "FinalizeCsvFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeCsvFile()"
  },
  {
    "label": "ProcessStatData()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ProcessStatData()"
  },
  {
    "label": "BeginCaptureInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCaptureInternal(const FCsvCaptureCommand& CurrentCommand)"
  },
  {
    "label": "TryEndCaptureInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryEndCaptureInternal(const FCsvCaptureCommand& CurrentCommand)"
  },
  {
    "label": "FScopedCsvStat()",
    "kind": "Method",
    "detail": "Function (int32 NumFramesToCapture ; int32 CaptureFrameNumber ; int32 CaptureFrameNumberRT ; int32 CaptureOnEventFrameCount ; FGuid CsvGUID ; bool bInsertEndFrameAtFrameStart ; bool bNamedEventsWasEnabled ; uint64 LastEndFrameTimestamp ; uint32 CaptureEndFrameCount ; double CaptureStartTime ; FString OutputFilename ; TQueue<FCsvCaptureCommand> CommandQueue ; FCsvProfilerProcessingThread* ProcessingThread ; FEvent* FileWriteBlockingEvent ; FThreadSafeCounter IsShuttingDown ; TMap<FString,FString> MetadataMap ; TMap<FString,FString> NonPersistentMetadataMap ; TQueue<TMap<FString,FString>> MetadataQueue ; FCriticalSection MetadataCS ; class FCsvStreamWriter* CsvWriter ; ECsvProfilerFlags CurrentFlags ; FOnCSVProfileStart OnCSVProfileStartDelegate ; FOnCSVProfileFirstFrame OnCSVProfileFirstFrameDelegate ; FOnCSVProfileEndRequested OnCSVProfileEndRequestedDelegate ; FOnCSVProfileEnd OnCSVProfileEndDelegate ; FOnCSVProfileEndFrame OnCSVProfileEndFrameDelegate ; FOnCSVProfileFinished OnCSVProfileFinishedDelegate ; std::atomic<uint32> RenderThreadId { 0 } ; std::atomic<uint32> RHIThreadId { 0 } ; } ; class FScopedCsvStat { public :)",
    "insertText": "FScopedCsvStat(const char * InStatName, uint32 InCategoryIndex, const char * InNamedEventName = nullptr) : StatName(InStatName) , CategoryIndex(InCategoryIndex)"
  },
  {
    "label": "BeginStat()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "BeginStat(StatName, CategoryIndex, InNamedEventName)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PushOnAbortHandler(this, [SN = StatName, CI = CategoryIndex](){ FCsvProfiler::EndStat(SN, CI); })"
  },
  {
    "label": "FScopedCsvStat()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedCsvStat()"
  },
  {
    "label": "PopOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopOnAbortHandler(this)"
  },
  {
    "label": "EndStat()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "EndStat(StatName, CategoryIndex)"
  },
  {
    "label": "FScopedCsvStatExclusive()",
    "kind": "Method",
    "detail": "Function (} ; } const char* StatName ; uint32 CategoryIndex ; } ; class FScopedCsvStatExclusive { public :)",
    "insertText": "FScopedCsvStatExclusive(const char * InStatName, const char* InNamedEventName = nullptr) : StatName(InStatName)"
  },
  {
    "label": "BeginExclusiveStat()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "BeginExclusiveStat(StatName, InNamedEventName)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PushOnAbortHandler(this, [SN = StatName](){ FCsvProfiler::EndExclusiveStat(SN); })"
  },
  {
    "label": "FScopedCsvStatExclusive()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedCsvStatExclusive()"
  },
  {
    "label": "EndExclusiveStat()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "EndExclusiveStat(StatName)"
  },
  {
    "label": "FScopedCsvStatExclusiveConditional()",
    "kind": "Method",
    "detail": "Function (} ; } const char* StatName ; } ; class FScopedCsvStatExclusiveConditional { public :)",
    "insertText": "FScopedCsvStatExclusiveConditional(const char * InStatName, bool bInCondition, const char* InNamedEventName = nullptr) : StatName(InStatName) , bCondition(bInCondition)"
  },
  {
    "label": "FScopedCsvStatExclusiveConditional()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedCsvStatExclusiveConditional()"
  },
  {
    "label": "FScopedCsvStatRecursive()",
    "kind": "Method",
    "detail": "Function (} } const char* StatName ; bool bCondition ; } ; class FScopedCsvStatRecursive { const char* StatName ; uint32 CategoryIndex ; int32& EntryCounter ; public :)",
    "insertText": "FScopedCsvStatRecursive(int32& InEntryCounter, const char* InStatName, uint32 InCategoryIndex, const char* InNamedEventName = nullptr) : StatName(InStatName) , CategoryIndex(InCategoryIndex) , EntryCounter(InEntryCounter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + EntryCounter ;)",
    "insertText": "if(EntryCounter == 1)"
  },
  {
    "label": "FScopedCsvStatRecursive()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedCsvStatRecursive()"
  },
  {
    "label": "FScopedCsvStatRecursiveConditional()",
    "kind": "Method",
    "detail": "Function (} - - EntryCounter ; } } ; class FScopedCsvStatRecursiveConditional { const char* StatName ; uint32 CategoryIndex ; int32& EntryCounter ; bool bCondition ; public :)",
    "insertText": "FScopedCsvStatRecursiveConditional(int32& InEntryCounter, const char* InStatName, uint32 InCategoryIndex, bool bInCondition, const char* InNamedEventName = nullptr) : StatName(InStatName) , CategoryIndex(InCategoryIndex) , EntryCounter(InEntryCounter) , bCondition(bInCondition)"
  },
  {
    "label": "FScopedCsvStatRecursiveConditional()",
    "kind": "Method",
    "detail": "Function (} } } ~)",
    "insertText": "FScopedCsvStatRecursiveConditional()"
  },
  {
    "label": "FScopedCsvWaitConditional()",
    "kind": "Method",
    "detail": "Function (} - - EntryCounter ; } } } ; class FScopedCsvWaitConditional { public :)",
    "insertText": "FScopedCsvWaitConditional(bool bInCondition) : bCondition(bInCondition)"
  },
  {
    "label": "FScopedCsvWaitConditional()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedCsvWaitConditional()"
  },
  {
    "label": "FScopedCsvSetWaitStat()",
    "kind": "Method",
    "detail": "Function (} } bool bCondition ; } ; class FScopedCsvSetWaitStat { public :)",
    "insertText": "FScopedCsvSetWaitStat(const char* InStatName = nullptr, const char* InFormattedStatName = nullptr, const char* InFormattedStatNameNonCP = nullptr) : StatName(InStatName) , FormattedStatName(InFormattedStatName) , FormattedStatNameNonCP(InFormattedStatNameNonCP)"
  },
  {
    "label": "BeginSetWaitStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSetWaitStat(StatName, FormattedStatName, FormattedStatNameNonCP)"
  },
  {
    "label": "FScopedCsvSetWaitStat()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedCsvSetWaitStat()"
  },
  {
    "label": "FCsvCategory()",
    "kind": "Method",
    "detail": "Function (} const char* StatName ; const char* FormattedStatName ; const char* FormattedStatNameNonCP ; } ; struct FCsvCategory {)",
    "insertText": "FCsvCategory() : Index(-1)"
  },
  {
    "label": "FCsvCategory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCsvCategory(const TCHAR* CategoryString, bool bDefaultValue, bool bIsGlobal = false)"
  },
  {
    "label": "RegisterCategory()",
    "kind": "Method",
    "detail": "Function (Name = CategoryString ; Index =)",
    "insertText": "RegisterCategory(Name, bDefaultValue, bIsGlobal)"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_MODULE_EXTERN()",
    "kind": "Method",
    "detail": "Function (} uint32 Index ; FString Name ; } ;)",
    "insertText": "CSV_DECLARE_CATEGORY_MODULE_EXTERN(CORE_API, Exclusive)"
  }
]