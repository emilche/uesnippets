[
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "FExtensibilityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtensibilityManager"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerCustomizationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerCustomizationManager"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "ISequencerEditorObjectBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditorObjectBinding"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "FSequencerInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerInitParams"
  },
  {
    "label": "FTrackModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackModel"
  },
  {
    "label": "IObjectSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IObjectSchema"
  },
  {
    "label": "IOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerColumn"
  },
  {
    "label": "IOutlinerIndicatorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOutlinerIndicatorBuilder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TSequencerChannelInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSequencerChannelInterface"
  },
  {
    "label": "FSequencerViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerViewParams"
  },
  {
    "label": "FSequencerHostCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerHostCapabilities"
  },
  {
    "label": "ISequencerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerModule"
  },
  {
    "label": "FSequenceEditorEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceEditorEntry"
  },
  {
    "label": "AddTrackMenu_PropertiesSection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" ToolMenuContext . h \" # include \" ISequencer . h \" # include \" Modules / ModuleInterface . h \" # include \" AnimatedPropertyKey . h \" # include \" ISequencerChannelInterface . h \" # include \" IMovieRendererInterface . h \" # include \" MovieSceneSequenceEditor . h \" class IKeyArea ; class FExtender ; class FStructOnScope ; class FExtensibilityManager ; class FMenuBuilder ; class FSequencerCustomizationManager ; class ISequencerTrackEditor ; class ISequencerEditorObjectBinding ; class IToolkitHost ; class UMovieSceneSequence ; struct FSequencerInitParams ; namespace UE::Sequencer { class FTrackModel ; class IObjectSchema ; class IOutlinerColumn ; class IOutlinerIndicatorBuilder ; } enum class ECurveEditorTreeFilterType : uint32 ; template<> struct TSequencerChannelInterface ; namespace SequencerMenuExtensionPoints { const FName)",
    "insertText": "AddTrackMenu_PropertiesSection(\"AddTrackMenu_PropertiesSection\")"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} enum class ESequencerScrubberStyle : uint8 { Vanilla,FrameBlock,} ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedRef<ISequencerTrackEditor>, FOnCreateTrackEditor, TSharedRef<ISequencer>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedRef<ISequencerEditorObjectBinding>, FOnCreateEditorObjectBinding, TSharedRef<ISequencer>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedPtr<UE::Sequencer::FTrackModel>, FOnCreateTrackModel, UMovieSceneTrack*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSharedRef<UE::Sequencer::IOutlinerColumn>, FOnCreateOutlinerColumn)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSharedRef<UE::Sequencer::IOutlinerIndicatorBuilder>, FOnCreateOutlinerIndicator)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGetContextMenuContent, FMenuBuilder&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnGetAddMenuContent, FMenuBuilder& , TSharedRef<ISequencer>)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnInitToolMenuContext, FToolMenuContext&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnBuildCustomContextMenuForGuid, FMenuBuilder&, FGuid)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSequencerCreated, TSharedRef<ISequencer>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnPreSequencerInit, TSharedRef<ISequencer>, TSharedRef<ISequencerObjectChangeListener>, const FSequencerInitParams&)"
  },
  {
    "label": "FSequencerViewParams()",
    "kind": "Method",
    "detail": "Function (struct FSequencerViewParams { FOnGetAddMenuContent OnGetAddMenuContent ; FOnBuildCustomContextMenuForGuid OnBuildCustomContextMenuForGuid ; FSimpleDelegate OnReceivedFocus ; FOnInitToolMenuContext OnInitToolMenuContext ; ISequencer::FOnGetPlaybackSpeeds OnGetPlaybackSpeeds ; TSharedPtr<FExtender> AddMenuExtender ; TSharedPtr<FExtender> ToolbarExtender ; FString UniqueName ; bool bReadOnly ; bool bShowPlaybackRangeInTimeSlider ; ESequencerScrubberStyle ScrubberStyle ;)",
    "insertText": "FSequencerViewParams(FString InName = FString()) : OnGetPlaybackSpeeds(ISequencer::FOnGetPlaybackSpeeds::CreateLambda([]() { return TArray<float>{ 0.1f, 0.25f, 0.5f, 1.f, 2.f, 5.f, 10.f }; })) , UniqueName(MoveTemp(InName)) , bReadOnly(false) , bShowPlaybackRangeInTimeSlider(false) , ScrubberStyle(ESequencerScrubberStyle::Vanilla)"
  },
  {
    "label": "FSequencerHostCapabilities()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSequencerHostCapabilities { bool bSupportsSaveMovieSceneAsset ; bool bSupportsCurveEditor ; bool bSupportsRecording ; bool bSupportsRenderMovie ; bool bSupportsAddFromContentBrowser ; bool bSupportsSidebar ; bool bSupportsViewportSelectability ;)",
    "insertText": "FSequencerHostCapabilities() : bSupportsSaveMovieSceneAsset(false) , bSupportsCurveEditor(false) , bSupportsRecording(false) , bSupportsRenderMovie(false) , bSupportsAddFromContentBrowser(false) , bSupportsSidebar(false) , bSupportsViewportSelectability(false)"
  },
  {
    "label": "FSequencerInitParams()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSequencerInitParams { UMovieSceneSequence* RootSequence ; TSharedPtr<IToolkitHost> ToolkitHost ; FSequencerViewParams ViewParams ; FSequencerHostCapabilities HostCapabilities ; bool bEditWithinLevelEditor ; TSharedPtr<FMovieSceneSpawnRegister> SpawnRegister ; TAttribute<TArray<UObject*>> EventContexts ; TAttribute<UObject*> PlaybackContext ; TAttribute<IMovieScenePlaybackClient*> PlaybackClient ;)",
    "insertText": "FSequencerInitParams() : RootSequence(nullptr) , ToolkitHost(nullptr) , bEditWithinLevelEditor(false) , SpawnRegister(nullptr)"
  },
  {
    "label": "ISequencerModule()",
    "kind": "Method",
    "detail": "Function (} } ; class ISequencerModule : public IModuleInterface { public : ~)",
    "insertText": "ISequencerModule()"
  },
  {
    "label": "CreateSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencer>)",
    "insertText": "CreateSequencer(const FSequencerInitParams& InitParams)"
  },
  {
    "label": "RegisterTrackEditor()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterTrackEditor(FOnCreateTrackEditor InOnCreateTrackEditor, TArrayView<FAnimatedPropertyKey> AnimatedPropertyTypes = TArrayView<FAnimatedPropertyKey>())"
  },
  {
    "label": "UnRegisterTrackEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterTrackEditor(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterTrackModel()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterTrackModel(FOnCreateTrackModel InCreator)"
  },
  {
    "label": "UnregisterTrackModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTrackModel(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOutlinerColumn()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOutlinerColumn(FOnCreateOutlinerColumn InCreator)"
  },
  {
    "label": "UnregisterOutlinerColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOutlinerColumn(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOutlinerIndicator()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOutlinerIndicator(FOnCreateOutlinerIndicator InCreator)"
  },
  {
    "label": "UnregisterOutlinerIndicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOutlinerIndicator(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOnSequencerCreated()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnSequencerCreated(FOnSequencerCreated::FDelegate InOnSequencerCreated)"
  },
  {
    "label": "UnregisterOnSequencerCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSequencerCreated(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterOnPreSequencerInit()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterOnPreSequencerInit(FOnPreSequencerInit::FDelegate InOnPreSequencerInit)"
  },
  {
    "label": "UnregisterOnPreSequencerInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnPreSequencerInit(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterEditorObjectBinding()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterEditorObjectBinding(FOnCreateEditorObjectBinding InOnCreateEditorObjectBinding)"
  },
  {
    "label": "UnRegisterEditorObjectBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterEditorObjectBinding(FDelegateHandle InHandle)"
  },
  {
    "label": "RegisterPropertyAnimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPropertyAnimator(FAnimatedPropertyKey Key)"
  },
  {
    "label": "UnRegisterPropertyAnimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterPropertyAnimator(FAnimatedPropertyKey Key)"
  },
  {
    "label": "CanAnimateProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAnimateProperty(FProperty* Property)"
  },
  {
    "label": "GetObjectBindingContextMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetObjectBindingContextMenuExtensibilityManager()"
  },
  {
    "label": "GetAddTrackMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetAddTrackMenuExtensibilityManager()"
  },
  {
    "label": "GetToolBarExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetToolBarExtensibilityManager()"
  },
  {
    "label": "GetViewMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetViewMenuExtensibilityManager()"
  },
  {
    "label": "GetActionsMenuExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetActionsMenuExtensibilityManager()"
  },
  {
    "label": "GetSidebarExtensibilityManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FExtensibilityManager>)",
    "insertText": "GetSidebarExtensibilityManager()"
  },
  {
    "label": "GetSequencerCustomizationManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencerCustomizationManager>)",
    "insertText": "GetSequencerCustomizationManager()"
  },
  {
    "label": "RegisterObjectSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterObjectSchema(TSharedPtr<UE::Sequencer::IObjectSchema> InObjectSchema)"
  },
  {
    "label": "UnregisterObjectSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterObjectSchema(TSharedPtr<UE::Sequencer::IObjectSchema> InSchema)"
  },
  {
    "label": "GetObjectSchemas()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TSharedPtr<UE::Sequencer::IObjectSchema>>)",
    "insertText": "GetObjectSchemas()"
  },
  {
    "label": "FindObjectSchema()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::IObjectSchema>)",
    "insertText": "FindObjectSchema(const UObject* Object)"
  },
  {
    "label": "RegisterChannelInterface()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "RegisterChannelInterface()"
  },
  {
    "label": "RegisterChannelInterface()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> void)",
    "insertText": "RegisterChannelInterface(TUniquePtr<ISequencerChannelInterface>&& InInterface)"
  },
  {
    "label": "FindChannelEditorInterface()",
    "kind": "Method",
    "detail": "Function (ISequencerChannelInterface*)",
    "insertText": "FindChannelEditorInterface(FName ChannelTypeName)"
  },
  {
    "label": "GetSequencerSelectionFilterType()",
    "kind": "Method",
    "detail": "Function (ECurveEditorTreeFilterType)",
    "insertText": "GetSequencerSelectionFilterType()"
  },
  {
    "label": "RegisterSequenceEditor()",
    "kind": "Method",
    "detail": "Function (public : FDelegateHandle)",
    "insertText": "RegisterSequenceEditor(UClass* SequenceClass, TUniquePtr<FMovieSceneSequenceEditor>&& InSequenceEditor)"
  },
  {
    "label": "NewHandle()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "NewHandle(FDelegateHandle::GenerateNewHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SequenceEditors .)",
    "insertText": "Add(FSequenceEditorEntry{ NewHandle, SequenceClass, MoveTemp(InSequenceEditor) })"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (SequenceEditors .)",
    "insertText": "RemoveAll([Handle](const FSequenceEditorEntry& In){ return In.Handle == Handle; })"
  },
  {
    "label": "FindSequenceEditor()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneSequenceEditor*)",
    "insertText": "FindSequenceEditor(UClass* SequenceClass)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UClass* MostRelevantClass = nullptr ; FMovieSceneSequenceEditor* SequenceEditor = nullptr ;)",
    "insertText": "for(const FSequenceEditorEntry& Entry : SequenceEditors)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (MostRelevantClass = Entry . ApplicableClass ; SequenceEditor = Entry . Editor .)",
    "insertText": "Get()"
  },
  {
    "label": "RegisterPropertyTrackEditor()",
    "kind": "Method",
    "detail": "Function (} } } return SequenceEditor ; } public : template<PropertyTrackEditorType> FDelegateHandle)",
    "insertText": "RegisterPropertyTrackEditor()"
  },
  {
    "label": "GetAnimatedPropertyTypes()",
    "kind": "Method",
    "detail": "Function (auto PropertyTypes =)",
    "insertText": "GetAnimatedPropertyTypes()"
  },
  {
    "label": "RegisterMovieRenderer()",
    "kind": "Method",
    "detail": "Function (} public : FDelegateHandle)",
    "insertText": "RegisterMovieRenderer(TUniquePtr<IMovieRendererInterface>&& InMovieRenderer)"
  },
  {
    "label": "UnregisterMovieRenderer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMovieRenderer(FDelegateHandle InDelegateHandle)"
  },
  {
    "label": "GetMovieRenderer()",
    "kind": "Method",
    "detail": "Function (IMovieRendererInterface*)",
    "insertText": "GetMovieRenderer(const FString& InMovieRendererName)"
  },
  {
    "label": "GetMovieRendererNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetMovieRendererNames()"
  },
  {
    "label": "ChannelType()",
    "kind": "Method",
    "detail": "Function (RegisterChannelInterface<)",
    "insertText": "ChannelType(TUniquePtr<ISequencerChannelInterface>(new TSequencerChannelInterface<ChannelType>()))"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (const FName ChannelTypeName =)",
    "insertText": "StaticStruct()->GetFName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ChannelToEditorInterfaceMap .)",
    "insertText": "Add(ChannelTypeName, MoveTemp(InInterface))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TUniquePtr<ISequencerChannelInterface>* Found = ChannelToEditorInterfaceMap .)",
    "insertText": "Find(ChannelTypeName)"
  }
]