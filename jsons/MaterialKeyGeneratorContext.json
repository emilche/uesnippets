[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialKeyGeneratorContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialKeyGeneratorContext"
  },
  {
    "label": "FMaterialKeyGeneratorContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / StringBuilder . h \" # include \" RHIShaderPlatform . h \" # include \" Serialization / CompactBinary . h \" # include \" Serialization / CompactBinaryWriter . h \" # include \" Serialization / ShaderKeyGenerator . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" enum class EMaterialKeyInclude : uint32 { ShaderDependencies = 0 x1,SourceAndMaterialState = 0 x2,Globals = 0 x4,UObjectData = 0 x8,All = ShaderDependencies | SourceAndMaterialState | Globals | UObjectData,} ; class FMaterialKeyGeneratorContext { public : enum class EMode : uint8 { Emitting,Saving,Loading,} ; public :)",
    "insertText": "FMaterialKeyGeneratorContext(TUniqueFunction<void(const void* Data, uint64 Size)>&& HashFunction, EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "FMaterialKeyGeneratorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialKeyGeneratorContext(FString& InResultString, EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "FMaterialKeyGeneratorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialKeyGeneratorContext(FCbWriter& InWriter, EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "FMaterialKeyGeneratorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialKeyGeneratorContext(FCbObjectView LoadRoot, EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "FMaterialKeyGeneratorContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMaterialKeyGeneratorContext()"
  },
  {
    "label": "AddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFlags(EMaterialKeyInclude Flags)"
  },
  {
    "label": "RemoveFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFlags(EMaterialKeyInclude Flags)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(EMaterialKeyInclude Flags, bool bIncluded)"
  },
  {
    "label": "HasAllFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllFlags(EMaterialKeyInclude Flags)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (EMaterialKeyInclude)",
    "insertText": "GetFlags()"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (EMode)",
    "insertText": "GetMode()"
  },
  {
    "label": "IsEmitting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmitting()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "IsSaving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSaving()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "GetShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "GetShaderPlatform()"
  },
  {
    "label": "GetShaderFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShaderFormat()"
  },
  {
    "label": "RecordAndEmit()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "RecordAndEmit(FUtf8StringView Name, T&& Data)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Record(FUtf8StringView Name, T&& Data)"
  },
  {
    "label": "RecordObjectStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordObjectStart(FUtf8StringView Name)"
  },
  {
    "label": "RecordObjectEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordObjectEnd()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad(TFunctionRef<void()> Action)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Emit(T&& Data)"
  },
  {
    "label": "EmitFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitFunc(TFunctionRef<void(FShaderKeyGenerator&)> Callback)"
  },
  {
    "label": "EmitDebugText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDebugText(FStringView Data)"
  },
  {
    "label": "EmitSeparator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSeparator()"
  },
  {
    "label": "EmitBoolInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBoolInt(bool Data)"
  },
  {
    "label": "GetKeyGenIfEmitting()",
    "kind": "Method",
    "detail": "Function (FShaderKeyGenerator*)",
    "insertText": "GetKeyGenIfEmitting()"
  },
  {
    "label": "GetKeyGenIfEmittingChecked()",
    "kind": "Method",
    "detail": "Function (FShaderKeyGenerator&)",
    "insertText": "GetKeyGenIfEmittingChecked()"
  },
  {
    "label": "HasLoadError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLoadError()"
  },
  {
    "label": "GetCurrentObject()",
    "kind": "Method",
    "detail": "Function (private : FCbObjectView)",
    "insertText": "GetCurrentObject()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : union { FShaderKeyGenerator KeyGen ; TArray<FCbObjectView,TInlineAllocator<2>> ObjectStack ; FCbWriter* Writer ; } ; FName ShaderFormat ; EShaderPlatform ShaderPlatform = EShaderPlatform::SP_NumPlatforms ; EMode Mode = EMode::Emitting ; EMaterialKeyInclude IncludeFlags = EMaterialKeyInclude::All ; bool bHasLoadError = false ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMaterialKeyInclude)"
  },
  {
    "label": "EnumAddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumAddFlags(IncludeFlags, Flags)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumRemoveFlags(IncludeFlags, Flags)"
  },
  {
    "label": "AddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFlags(Flags)"
  },
  {
    "label": "RemoveFlags()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RemoveFlags(Flags)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Record(Name, Data)"
  },
  {
    "label": "Emit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Emit(Data)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (bHasLoadError = true ; } break ; default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Action()"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(KeyGen)"
  },
  {
    "label": "AppendDebugText()",
    "kind": "Method",
    "detail": "Function (KeyGen .)",
    "insertText": "AppendDebugText(Data)"
  },
  {
    "label": "AppendSeparator()",
    "kind": "Method",
    "detail": "Function (KeyGen .)",
    "insertText": "AppendSeparator()"
  },
  {
    "label": "AppendBoolInt()",
    "kind": "Method",
    "detail": "Function (KeyGen .)",
    "insertText": "AppendBoolInt(Data)"
  }
]