[
  {
    "label": "StringValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringValue"
  },
  {
    "label": "ScalarTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarTraits"
  },
  {
    "label": "FlowStringValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlowStringValue"
  },
  {
    "label": "VirtualRegisterDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VirtualRegisterDefinition"
  },
  {
    "label": "MappingTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MappingTraits"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineStackObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineStackObject"
  },
  {
    "label": "ObjectType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "ScalarEnumerationTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScalarEnumerationTraits"
  },
  {
    "label": "FixedMachineStackObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedMachineStackObject"
  },
  {
    "label": "MachineFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineFrameInfo"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "StringValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LIB_CODEGEN_MIRYAMLMAPPING_H # define LLVM_LIB_CODEGEN_MIRYAMLMAPPING_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / YAMLTraits . h \" # include<vector> namespace llvm { namespace yaml { struct StringValue { std::string Value ; SMRange SourceRange ;)",
    "insertText": "StringValue()"
  },
  {
    "label": "StringValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringValue(std::string Value) : Value(std::move(Value))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const StringValue &Other)"
  },
  {
    "label": "input()",
    "kind": "Method",
    "detail": "Function (OS<<S . Value ; } StringRef)",
    "insertText": "input(StringRef Scalar, void *Ctx, StringValue &S)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (S . Value = Scalar .)",
    "insertText": "str()"
  },
  {
    "label": "FlowStringValue()",
    "kind": "Method",
    "detail": "Function (} } ; struct FlowStringValue : StringValue {)",
    "insertText": "FlowStringValue()"
  },
  {
    "label": "FlowStringValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FlowStringValue(std::string Value) : StringValue(Value)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct ScalarTraits<FlowStringValue> { void)",
    "insertText": "output(const FlowStringValue &S, void *, llvm::raw_ostream &OS)"
  },
  {
    "label": "input()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "input(StringRef Scalar, void *Ctx, FlowStringValue &S)"
  },
  {
    "label": "mustQuote()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "mustQuote(StringRef Scalar)"
  },
  {
    "label": "LLVM_YAML_IS_SEQUENCE_VECTOR()",
    "kind": "Method",
    "detail": "Function (} } ; } })",
    "insertText": "LLVM_YAML_IS_SEQUENCE_VECTOR(llvm::yaml::StringValue) LLVM_YAML_IS_FLOW_SEQUENCE_VECTOR(llvm::yaml::FlowStringValue)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (namespace yaml { struct VirtualRegisterDefinition { unsigned ID ; StringValue Class ; } ; template<> struct MappingTraits<VirtualRegisterDefinition> { void)",
    "insertText": "mapping(IO &YamlIO, VirtualRegisterDefinition &Reg)"
  },
  {
    "label": "mapRequired()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapRequired(\"id\", Reg.ID)"
  },
  {
    "label": "mapRequired()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapRequired(\"class\", Reg.Class)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} const bool flow = true ; } ; struct MachineBasicBlock { unsigned ID ; StringValue Name ; unsigned Alignment = 0 ; bool IsLandingPad = false ; bool AddressTaken = false ; std::vector<FlowStringValue> Successors ; std::vector<FlowStringValue> LiveIns ; std::vector<StringValue> Instructions ; } ; template<> struct MappingTraits<MachineBasicBlock> { void)",
    "insertText": "mapping(IO &YamlIO, MachineBasicBlock &MBB)"
  },
  {
    "label": "mapRequired()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapRequired(\"id\", MBB.ID)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"name\", MBB.Name, StringValue())"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"alignment\", MBB.Alignment)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"isLandingPad\", MBB.IsLandingPad)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"addressTaken\", MBB.AddressTaken)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"successors\", MBB.Successors)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"liveins\", MBB.LiveIns)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"instructions\", MBB.Instructions)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} } ; struct MachineStackObject { enum ObjectType { DefaultType,SpillSlot,VariableSized } ; unsigned ID ; ObjectType Type = DefaultType ; int64_t Offset = 0 ; uint64_t Size = 0 ; unsigned Alignment = 0 ; } ; template<> struct ScalarEnumerationTraits<MachineStackObject::ObjectType> { void)",
    "insertText": "enumeration(yaml::IO &IO, MachineStackObject::ObjectType &Type)"
  },
  {
    "label": "enumCase()",
    "kind": "Method",
    "detail": "Function (IO .)",
    "insertText": "enumCase(Type, \"default\", MachineStackObject::DefaultType)"
  },
  {
    "label": "enumCase()",
    "kind": "Method",
    "detail": "Function (IO .)",
    "insertText": "enumCase(Type, \"spill-slot\", MachineStackObject::SpillSlot)"
  },
  {
    "label": "enumCase()",
    "kind": "Method",
    "detail": "Function (IO .)",
    "insertText": "enumCase(Type, \"variable-sized\", MachineStackObject::VariableSized)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct MappingTraits<MachineStackObject> { void)",
    "insertText": "mapping(yaml::IO &YamlIO, MachineStackObject &Object)"
  },
  {
    "label": "mapRequired()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapRequired(\"id\", Object.ID)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"type\", Object.Type, MachineStackObject::DefaultType)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"offset\", Object.Offset)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"alignment\", Object.Alignment)"
  },
  {
    "label": "enumeration()",
    "kind": "Method",
    "detail": "Function (} const bool flow = true ; } ; struct FixedMachineStackObject { enum ObjectType { DefaultType,SpillSlot } ; unsigned ID ; ObjectType Type = DefaultType ; int64_t Offset = 0 ; uint64_t Size = 0 ; unsigned Alignment = 0 ; bool IsImmutable = false ; bool IsAliased = false ; } ; template<> struct ScalarEnumerationTraits<FixedMachineStackObject::ObjectType> { void)",
    "insertText": "enumeration(yaml::IO &IO, FixedMachineStackObject::ObjectType &Type)"
  },
  {
    "label": "enumCase()",
    "kind": "Method",
    "detail": "Function (IO .)",
    "insertText": "enumCase(Type, \"default\", FixedMachineStackObject::DefaultType)"
  },
  {
    "label": "enumCase()",
    "kind": "Method",
    "detail": "Function (IO .)",
    "insertText": "enumCase(Type, \"spill-slot\", FixedMachineStackObject::SpillSlot)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct MappingTraits<FixedMachineStackObject> { void)",
    "insertText": "mapping(yaml::IO &YamlIO, FixedMachineStackObject &Object)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"type\", Object.Type, FixedMachineStackObject::DefaultType)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"size\", Object.Size)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"isImmutable\", Object.IsImmutable)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"isAliased\", Object.IsAliased)"
  },
  {
    "label": "LLVM_YAML_IS_SEQUENCE_VECTOR()",
    "kind": "Method",
    "detail": "Function (} } const bool flow = true ; } ; } })",
    "insertText": "LLVM_YAML_IS_SEQUENCE_VECTOR(llvm::yaml::VirtualRegisterDefinition) LLVM_YAML_IS_SEQUENCE_VECTOR(llvm::yaml::MachineBasicBlock) LLVM_YAML_IS_SEQUENCE_VECTOR(llvm::yaml::MachineStackObject) LLVM_YAML_IS_SEQUENCE_VECTOR(llvm::yaml::FixedMachineStackObject)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (namespace yaml { struct MachineFrameInfo { bool IsFrameAddressTaken = false ; bool IsReturnAddressTaken = false ; bool HasStackMap = false ; bool HasPatchPoint = false ; uint64_t StackSize = 0 ; int OffsetAdjustment = 0 ; unsigned MaxAlignment = 0 ; bool AdjustsStack = false ; bool HasCalls = false ; unsigned MaxCallFrameSize = 0 ; bool HasOpaqueSPAdjustment = false ; bool HasVAStart = false ; bool HasMustTailInVarArgFunc = false ; } ; template<> struct MappingTraits<MachineFrameInfo> { void)",
    "insertText": "mapping(IO &YamlIO, MachineFrameInfo &MFI)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"isFrameAddressTaken\", MFI.IsFrameAddressTaken)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"isReturnAddressTaken\", MFI.IsReturnAddressTaken)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasStackMap\", MFI.HasStackMap)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasPatchPoint\", MFI.HasPatchPoint)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"stackSize\", MFI.StackSize)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"offsetAdjustment\", MFI.OffsetAdjustment)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"maxAlignment\", MFI.MaxAlignment)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"adjustsStack\", MFI.AdjustsStack)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasCalls\", MFI.HasCalls)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"maxCallFrameSize\", MFI.MaxCallFrameSize)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasOpaqueSPAdjustment\", MFI.HasOpaqueSPAdjustment)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasVAStart\", MFI.HasVAStart)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasMustTailInVarArgFunc\", MFI.HasMustTailInVarArgFunc)"
  },
  {
    "label": "mapping()",
    "kind": "Method",
    "detail": "Function (} } ; struct MachineFunction { StringRef Name ; unsigned Alignment = 0 ; bool ExposesReturnsTwice = false ; bool HasInlineAsm = false ; bool IsSSA = false ; bool TracksRegLiveness = false ; bool TracksSubRegLiveness = false ; std::vector<VirtualRegisterDefinition> VirtualRegisters ; MachineFrameInfo FrameInfo ; std::vector<FixedMachineStackObject> FixedStackObjects ; std::vector<MachineStackObject> StackObjects ; std::vector<MachineBasicBlock> BasicBlocks ; } ; template<> struct MappingTraits<MachineFunction> { void)",
    "insertText": "mapping(IO &YamlIO, MachineFunction &MF)"
  },
  {
    "label": "mapRequired()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapRequired(\"name\", MF.Name)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"alignment\", MF.Alignment)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"exposesReturnsTwice\", MF.ExposesReturnsTwice)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"hasInlineAsm\", MF.HasInlineAsm)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"isSSA\", MF.IsSSA)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"tracksRegLiveness\", MF.TracksRegLiveness)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"tracksSubRegLiveness\", MF.TracksSubRegLiveness)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"registers\", MF.VirtualRegisters)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"frameInfo\", MF.FrameInfo)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"fixedStack\", MF.FixedStackObjects)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"stack\", MF.StackObjects)"
  },
  {
    "label": "mapOptional()",
    "kind": "Method",
    "detail": "Function (YamlIO .)",
    "insertText": "mapOptional(\"body\", MF.BasicBlocks)"
  }
]