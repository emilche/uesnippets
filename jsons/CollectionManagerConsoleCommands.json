[
  {
    "label": "FCollectionManagerConsoleCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionManagerConsoleCommands"
  },
  {
    "label": "FCollectionManagerConsoleCommands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / IConsoleManager . h \" # include \" CollectionManagerModule . h \" # include \" CollectionManagerTypes . h \" # include \" ICollectionManager . h \" # include \" CollectionManagerLog . h \" # define LOCTEXT_NAMESPACE \" CollectionManager \" class FCollectionManagerConsoleCommands { public : const FCollectionManagerModule& Module ; FAutoConsoleCommand CreateCommand ; FAutoConsoleCommand DestroyCommand ; FAutoConsoleCommand AddCommand ; FAutoConsoleCommand RemoveCommand ;)",
    "insertText": "FCollectionManagerConsoleCommands(const FCollectionManagerModule& InModule) : Module(InModule) , CreateCommand( TEXT( \"CollectionManager.Create\" ), *LOCTEXT(\"CommandText_Create\", \"Creates a collection of the specified name and type\").ToString(), FConsoleCommandWithArgsDelegate::CreateRaw( this, &FCollectionManagerConsoleCommands::Create ) ) , DestroyCommand( TEXT( \"CollectionManager.Destroy\" ), *LOCTEXT(\"CommandText_Destroy\", \"Deletes a collection of the specified name and type\").ToString(), FConsoleCommandWithArgsDelegate::CreateRaw( this, &FCollectionManagerConsoleCommands::Destroy ) ) , AddCommand( TEXT( \"CollectionManager.Add\" ), *LOCTEXT(\"CommandText_Add\", \"Adds the specified object path to the specified collection\").ToString(), FConsoleCommandWithArgsDelegate::CreateRaw( this, &FCollectionManagerConsoleCommands::Add ) ) , RemoveCommand( TEXT( \"CollectionManager.Remove\" ), *LOCTEXT(\"CommandText_Remove\", \"Removes the specified object path from the specified collection\").ToString(), FConsoleCommandWithArgsDelegate::CreateRaw( this, &FCollectionManagerConsoleCommands::Remove ))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Create(const TArray<FString>& Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ShareStr = Args [ 1 ] ; ECollectionShareType::Type ShareType ;)",
    "insertText": "if(ShareStr == TEXT(\"LOCAL\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ShareType = ECollectionShareType::CST_Local ; } else)",
    "insertText": "if(ShareStr == TEXT(\"PRIVATE\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ShareType = ECollectionShareType::CST_Private ; } else)",
    "insertText": "if(ShareStr == TEXT(\"SHARED\"))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (ShareType = ECollectionShareType::CST_Shared ; } else {)",
    "insertText": "UE_LOG(LogCollectionManager, Warning, TEXT(\"Invalid collection share type: %s\"), *ShareStr)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (StorageMode =)",
    "insertText": "FromString(*Args[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Module.Get().CreateCollection(CollectionName, ShareType, StorageMode))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogCollectionManager, Warning, TEXT(\"Failed to create collection: %s\"), *CollectionName.ToString())"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Destroy(const TArray<FString>& Args)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogCollectionManager, Warning, TEXT(\"Failed to destroyed collection: %s\"), *CollectionName.ToString())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Add(const TArray<FString>& Args)"
  },
  {
    "label": "ObjectPath()",
    "kind": "Method",
    "detail": "Function (FString ShareStr = Args [ 1 ] ; FSoftObjectPath)",
    "insertText": "ObjectPath(Args[2])"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogCollectionManager, Warning, TEXT(\"Failed to add %s to collection %s\"), *ObjectPath.ToString(), *CollectionName.ToString())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Remove(const TArray<FString>& Args)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogCollectionManager, Warning, TEXT(\"Failed to remove %s from collection %s\"), *ObjectPath.ToString(), *CollectionName.ToString())"
  }
]