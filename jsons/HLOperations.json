[
  {
    "label": "Argument",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Argument"
  },
  {
    "label": "ArrayRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayRef"
  },
  {
    "label": "AttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AttributeSet"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "FunctionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionType"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetHLOpcodeGroup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" llvm / IR / IRBuilder . h \" # include<string> namespace llvm { class Argument ; template<T> class ArrayRef ; class AttributeSet ; class CallInst ; class Function ; class FunctionType ; class Module ; class StringRef ; class Type ; class Value ; } namespace hlsl { enum class HLOpcodeGroup { NotHL,HLExtIntrinsic,HLIntrinsic,HLCast,HLInit,HLBinOp,HLUnOp,HLSubscript,HLMatLoadStore,HLSelect,HLCreateHandle,HLCreateNodeOutputHandle,HLIndexNodeHandle,HLCreateNodeInputRecordHandle,HLAnnotateHandle,HLWaveMatrix_Annotate,HLAnnotateNodeHandle,HLAnnotateNodeRecordHandle,NumOfHLOps } ; enum class HLBinaryOpcode { Invalid,Mul,Div,Rem,Add,Sub,Shl,Shr,LT,GT,LE,GE,EQ,NE,And,Xor,Or,LAnd,LOr,UDiv,URem,UShr,ULT,UGT,ULE,UGE,NumOfBO,} ; enum class HLUnaryOpcode { Invalid,PostInc,PostDec,PreInc,PreDec,Plus,Minus,Not,LNot,NumOfUO,} ; enum class HLSubscriptOpcode { DefaultSubscript,ColMatSubscript,RowMatSubscript,ColMatElement,RowMatElement,DoubleSubscript,CBufferSubscript,VectorSubscript,} ; enum class HLCastOpcode { DefaultCast,UnsignedUnsignedCast,FromUnsignedCast,ToUnsignedCast,ColMatrixToVecCast,RowMatrixToVecCast,ColMatrixToRowMatrix,RowMatrixToColMatrix,HandleToResCast,HandleToNodeOutputCast,NodeOutputToHandleCast,HandleToNodeRecordCast,NodeRecordToHandleCast,} ; enum class HLMatLoadStoreOpcode { ColMatLoad,ColMatStore,RowMatLoad,RowMatStore,} ; const char* const HLPrefix ; HLOpcodeGroup)",
    "insertText": "GetHLOpcodeGroup(llvm::Function *F)"
  },
  {
    "label": "GetHLOpcodeGroupByName()",
    "kind": "Method",
    "detail": "Function (HLOpcodeGroup)",
    "insertText": "GetHLOpcodeGroupByName(const llvm::Function *F)"
  },
  {
    "label": "GetHLOpcodeGroupNameByAttr()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetHLOpcodeGroupNameByAttr(llvm::Function *F)"
  },
  {
    "label": "GetHLLowerStrategy()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetHLLowerStrategy(llvm::Function *F)"
  },
  {
    "label": "GetHLOpcode()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetHLOpcode(const llvm::CallInst *CI)"
  },
  {
    "label": "GetRowMajorOpcode()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetRowMajorOpcode(HLOpcodeGroup group, unsigned opcode)"
  },
  {
    "label": "SetHLLowerStrategy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHLLowerStrategy(llvm::Function *F, llvm::StringRef S)"
  },
  {
    "label": "SetHLWaveSensitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHLWaveSensitive(llvm::Function *F)"
  },
  {
    "label": "IsHLWaveSensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHLWaveSensitive(llvm::Function *F)"
  },
  {
    "label": "GetUnsignedOpcode()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetUnsignedOpcode(unsigned opcode)"
  },
  {
    "label": "HasUnsignedOpcode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUnsignedOpcode(HLBinaryOpcode opcode)"
  },
  {
    "label": "GetUnsignedOpcode()",
    "kind": "Method",
    "detail": "Function (HLBinaryOpcode)",
    "insertText": "GetUnsignedOpcode(HLBinaryOpcode opcode)"
  },
  {
    "label": "GetHLOpcodeGroupName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetHLOpcodeGroupName(HLOpcodeGroup op)"
  },
  {
    "label": "GetOrCreateHLFunction()",
    "kind": "Method",
    "detail": "Function (namespace HLOperandIndex { const unsigned kOpcodeIdx = 0 ; const unsigned kInvalidIdx = UINT32_MAX ; const unsigned kMatStoreDstPtrOpIdx = 1 ; const unsigned kMatStoreValOpIdx = 2 ; const unsigned kMatLoadPtrOpIdx = 1 ; const unsigned kSubscriptObjectOpIdx = 1 ; const unsigned kSubscriptIndexOpIdx = 2 ; const unsigned kDoubleSubscriptMipLevelOpIdx = 3 ; const unsigned kMatSubscriptMatOpIdx = 1 ; const unsigned kMatSubscriptSubOpIdx = 2 ; const unsigned kMatArrayInitMatOpIdx = 1 ; const unsigned kMatArrayInitFirstArgOpIdx = 2 ; const unsigned kArrayInitPtrOpIdx = 1 ; const unsigned kArrayInitFirstArgOpIdx = 2 ; const unsigned kInitFirstArgOpIdx = 1 ; const unsigned kUnaryOpSrc0Idx = 1 ; const unsigned kBinaryOpSrc0Idx = 1 ; const unsigned kBinaryOpSrc1Idx = 2 ; const unsigned kTrinaryOpSrc0Idx = 1 ; const unsigned kTrinaryOpSrc1Idx = 2 ; const unsigned kTrinaryOpSrc2Idx = 3 ; const unsigned kInterlockedDestOpIndex = 1 ; const unsigned kInterlockedValueOpIndex = 2 ; const unsigned kInterlockedOriginalValueOpIndex = 3 ; const unsigned kInterlockedMethodValueOpIndex = 3 ; const unsigned kInterlockedCmpDestOpIndex = 1 ; const unsigned kInterlockedCmpCompareValueOpIndex = 2 ; const unsigned kInterlockedCmpValueOpIndex = 3 ; const unsigned kInterlockedCmpOriginalValueOpIndex = 4 ; const unsigned kLerpOpXIdx = 1 ; const unsigned kLerpOpYIdx = 2 ; const unsigned kLerpOpSIdx = 3 ; const unsigned kProcessTessFactorRawDetailFactor = 1 ; const unsigned kProcessTessFactorRawDensityFactor = 2 ; const unsigned kProcessTessFactorRoundedDetailFactor = 3 ; const unsigned kProcessTessFactorRoundedDensityFactor = 4 ; const unsigned kProcessTessFactorRawEdgeFactor = 1 ; const unsigned kProcessTessFactorInsideScale = 2 ; const unsigned kProcessTessFactorRoundedEdgeFactor = 3 ; const unsigned kProcessTessFactorRoundedInsideFactor = 4 ; const unsigned kProcessTessFactorUnRoundedInsideFactor = 5 ; const unsigned kReflectOpIIdx = 1 ; const unsigned kReflectOpNIdx = 2 ; const unsigned kRefractOpIIdx = 1 ; const unsigned kRefractOpNIdx = 2 ; const unsigned kRefractOpEtaIdx = 3 ; const unsigned kSmoothStepOpMinIdx = 1 ; const unsigned kSmoothStepOpMaxIdx = 2 ; const unsigned kSmoothStepOpXIdx = 3 ; const unsigned kClampOpXIdx = 1 ; const unsigned kClampOpMinIdx = 2 ; const unsigned kClampOpMaxIdx = 3 ; const unsigned kHandleOpIdx = 1 ; const unsigned kStoreOffsetOpIdx = 2 ; const unsigned kStoreValOpIdx = 3 ; const unsigned kBufLoadAddrOpIdx = 2 ; const unsigned kBufLoadStatusOpIdx = 3 ; const unsigned kRWTexLoadStatusOpIdx = 3 ; const unsigned kTexLoadOffsetOpIdx = 3 ; const unsigned kTexLoadStatusOpIdx = 4 ; const unsigned kTex2DMSLoadSampleIdxOpIdx = 3 ; const unsigned kTex2DMSLoadOffsetOpIdx = 4 ; const unsigned kTex2DMSLoadStatusOpIdx = 5 ; const unsigned kMipLoadAddrOpIdx = 3 ; const unsigned kMipLoadOffsetOpIdx = 4 ; const unsigned kMipLoadStatusOpIdx = 5 ; const unsigned kSampleSamplerArgIndex = 2 ; const unsigned kSampleCoordArgIndex = 3 ; const unsigned kSampleOffsetArgIndex = 4 ; const unsigned kSampleClampArgIndex = 5 ; const unsigned kSampleStatusArgIndex = 6 ; const unsigned kSampleGDDXArgIndex = 4 ; const unsigned kSampleGDDYArgIndex = 5 ; const unsigned kSampleGOffsetArgIndex = 6 ; const unsigned kSampleGClampArgIndex = 7 ; const unsigned kSampleGStatusArgIndex = 8 ; const unsigned kSampleCmpCmpValArgIndex = 4 ; const unsigned kSampleCmpOffsetArgIndex = 5 ; const unsigned kSampleCmpClampArgIndex = 6 ; const unsigned kSampleCmpStatusArgIndex = 7 ; const unsigned kSampleCmpBCmpValArgIndex = 4 ; const unsigned kSampleCmpBBiasArgIndex = 5 ; const unsigned kSampleCmpBOffsetArgIndex = 6 ; const unsigned kSampleCmpBClampArgIndex = 7 ; const unsigned kSampleCmpBStatusArgIndex = 8 ; const unsigned kSampleCmpGCmpValArgIndex = 4 ; const unsigned kSampleCmpGDDXArgIndex = 5 ; const unsigned kSampleCmpGDDYArgIndex = 6 ; const unsigned kSampleCmpGOffsetArgIndex = 7 ; const unsigned kSampleCmpGClampArgIndex = 8 ; const unsigned kSampleCmpGStatusArgIndex = 9 ; const unsigned kSampleBBiasArgIndex = 4 ; const unsigned kSampleBOffsetArgIndex = 5 ; const unsigned kSampleBClampArgIndex = 6 ; const unsigned kSampleBStatusArgIndex = 7 ; const unsigned kSampleLLevelArgIndex = 4 ; const unsigned kSampleLOffsetArgIndex = 5 ; const unsigned kSampleLStatusArgIndex = 6 ; const unsigned kSampleCmpLLevelArgIndex = 5 ; const unsigned kSampleCmpLOffsetArgIndex = 6 ; const unsigned kSampleCmpLZCmpValArgIndex = 4 ; const unsigned kSampleCmpLZOffsetArgIndex = 5 ; const unsigned kSampleCmpLZStatusArgIndex = 6 ; const unsigned kGatherSamplerArgIndex = 2 ; const unsigned kGatherCoordArgIndex = 3 ; const unsigned kGatherOffsetArgIndex = 4 ; const unsigned kGatherStatusArgIndex = 5 ; const unsigned kGatherSampleOffsetArgIndex = 5 ; const unsigned kGatherStatusWithSampleOffsetArgIndex = 8 ; const unsigned kGatherCubeStatusArgIndex = 4 ; const unsigned kGatherCmpCmpValArgIndex = 4 ; const unsigned kGatherCmpOffsetArgIndex = 5 ; const unsigned kGatherCmpStatusArgIndex = 6 ; const unsigned kGatherCmpSampleOffsetArgIndex = 6 ; const unsigned kGatherCmpStatusWithSampleOffsetArgIndex = 9 ; const unsigned kGatherCmpCubeStatusArgIndex = 5 ; const unsigned kWriteSamplerFeedbackSampledArgIndex = 2 ; const unsigned kWriteSamplerFeedbackSamplerArgIndex = 3 ; const unsigned kWriteSamplerFeedbackCoordArgIndex = 4 ; const unsigned kWriteSamplerFeedbackBias_BiasArgIndex = 5 ; const unsigned kWriteSamplerFeedbackLevel_LodArgIndex = 5 ; const unsigned kWriteSamplerFeedbackGrad_DdxArgIndex = 5 ; const unsigned kWriteSamplerFeedbackGrad_DdyArgIndex = 6 ; const unsigned kWriteSamplerFeedback_ClampArgIndex = 5 ; const unsigned kWriteSamplerFeedbackBias_ClampArgIndex = 6 ; const unsigned kWriteSamplerFeedbackGrad_ClampArgIndex = 7 ; const unsigned kStreamAppendStreamOpIndex = 1 ; const unsigned kStreamAppendDataOpIndex = 2 ; const unsigned kAppendValOpIndex = 2 ; const unsigned kObjectInterlockedDestOpIndex = 2 ; const unsigned kObjectInterlockedValueOpIndex = 3 ; const unsigned kObjectInterlockedOriginalValueOpIndex = 4 ; const unsigned kObjectInterlockedCmpDestOpIndex = 2 ; const unsigned kObjectInterlockedCmpCompareValueOpIndex = 3 ; const unsigned kObjectInterlockedCmpValueOpIndex = 4 ; const unsigned kObjectInterlockedCmpOriginalValueOpIndex = 5 ; const unsigned kGetSamplePositionSampleIdxOpIndex = 2 ; const unsigned kGetDimensionsMipLevelOpIndex = 2 ; const unsigned kGetDimensionsMipWidthOpIndex = 3 ; const unsigned kGetDimensionsNoMipWidthOpIndex = 2 ; const unsigned kWaveAllEqualValueOpIdx = 1 ; const unsigned kCreateHandleResourceOpIdx = 1 ; const unsigned kCreateHandleIndexOpIdx = 2 ; const unsigned kAnnotateHandleResourcePropertiesOpIdx = 2 ; const unsigned kAnnotateHandleResourceTypeOpIdx = 3 ; const unsigned kAnnotateWaveMatrixPtrOpIdx = 1 ; const unsigned kAnnotateWaveMatrixPropertiesOpIdx = 2 ; const unsigned kTraceRayRayDescOpIdx = 7 ; const unsigned kTraceRayPayLoadOpIdx = 8 ; const unsigned kCallShaderPayloadOpIdx = 2 ; const unsigned kTraceRayInlineRayDescOpIdx = 5 ; const unsigned kReportIntersectionAttributeOpIdx = 3 ; const unsigned kDispatchMeshOpThreadX = 1 ; const unsigned kDispatchMeshOpThreadY = 2 ; const unsigned kDispatchMeshOpThreadZ = 3 ; const unsigned kDispatchMeshOpPayload = 4 ; const unsigned kWaveMatThisOpIdx = 1 ; const unsigned kWaveMatFillScalarOpIdx = 2 ; const unsigned kWaveMatScalarOpOpIdx = 2 ; const unsigned kWaveMatOther1OpIdx = 2 ; const unsigned kWaveMatOther2OpIdx = 3 ; const unsigned kWaveMatLoadStoreBufOpIdx = 2 ; const unsigned kWaveMatLoadStoreStartOpIdx = 3 ; const unsigned kWaveMatLoadStoreStrideOpIdx = 4 ; const unsigned kWaveMatLoadStoreColMajorOpIdx = 5 ; const unsigned kWaveMatFragLoadStoreAlignmentOpIdx = 5 ; const unsigned kWaveMatLoadStoreAlignmentOpIdx = 6 ; const unsigned kIncrementOutputCountCountIdx = 2 ; const unsigned kBarrierMemoryTypeFlagsOpIdx = 1 ; const unsigned kBarrierSemanticFlagsOpIdx = 2 ; const unsigned kAllocateRecordNumRecordsIdx = 2 ; const unsigned kNodeOutputMetadataIDIdx = 1 ; const unsigned kIndexNodeHandleArrayIDIdx = 2 ; const unsigned kNodeInputRecordMetadataIDIdx = 1 ; const unsigned kNodeHandleToResCastOpIdx = 1 ; const unsigned kAnnotateNodeHandleNodePropIdx = 2 ; const unsigned kAnnotateNodeRecordHandleNodeRecordPropIdx = 2 ; } llvm::Function*)",
    "insertText": "GetOrCreateHLFunction(llvm::Module &M, llvm::FunctionType *funcTy, HLOpcodeGroup group, unsigned opcode)"
  },
  {
    "label": "GetOrCreateHLFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetOrCreateHLFunction(llvm::Module &M, llvm::FunctionType *funcTy, HLOpcodeGroup group, llvm::StringRef *groupName, llvm::StringRef *fnName, unsigned opcode)"
  },
  {
    "label": "GetOrCreateHLFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetOrCreateHLFunction(llvm::Module &M, llvm::FunctionType *funcTy, HLOpcodeGroup group, unsigned opcode, const llvm::AttributeSet &attribs)"
  },
  {
    "label": "GetOrCreateHLFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetOrCreateHLFunction(llvm::Module &M, llvm::FunctionType *funcTy, HLOpcodeGroup group, llvm::StringRef *groupName, llvm::StringRef *fnName, unsigned opcode, const llvm::AttributeSet &attribs)"
  },
  {
    "label": "GetOrCreateHLFunctionWithBody()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetOrCreateHLFunctionWithBody(llvm::Module &M, llvm::FunctionType *funcTy, HLOpcodeGroup group, unsigned opcode, llvm::StringRef name)"
  },
  {
    "label": "callHLFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "callHLFunction(llvm::Module &Module, HLOpcodeGroup OpcodeGroup, unsigned Opcode, llvm::Type *RetTy, llvm::ArrayRef<llvm::Value *> Args, const llvm::AttributeSet &attribs, llvm::IRBuilder<> &Builder)"
  },
  {
    "label": "callHLFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "callHLFunction(llvm::Module &Module, HLOpcodeGroup OpcodeGroup, unsigned Opcode, llvm::Type *RetTy, llvm::ArrayRef<llvm::Value *> Args, llvm::IRBuilder<> &Builder)"
  }
]