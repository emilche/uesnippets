[
  {
    "label": "StringMapConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMapConstIterator"
  },
  {
    "label": "StringMapIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMapIterator"
  },
  {
    "label": "StringMapEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMapEntry"
  },
  {
    "label": "StringMapEntryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMapEntryBase"
  },
  {
    "label": "StringMapImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMapImpl"
  },
  {
    "label": "InitTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitTy"
  },
  {
    "label": "StringMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringMap"
  },
  {
    "label": "StringMapEntryBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_STRINGMAP_H # define LLVM_ADT_STRINGMAP_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / Support / Allocator . h \" # include<cstring> # include<utility> namespace llvm { template<ValueT> class StringMapConstIterator ; template<ValueT> class StringMapIterator ; template<ValueTy> class StringMapEntry ; class StringMapEntryBase { unsigned StrLen ; public :)",
    "insertText": "StringMapEntryBase(unsigned Len) : StrLen(Len)"
  },
  {
    "label": "getKeyLength()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getKeyLength()"
  },
  {
    "label": "StringMapImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMapImpl(StringMapImpl &&RHS) : TheTable(RHS.TheTable), NumBuckets(RHS.NumBuckets), NumItems(RHS.NumItems), NumTombstones(RHS.NumTombstones), ItemSize(RHS.ItemSize)"
  },
  {
    "label": "StringMapImpl()",
    "kind": "Method",
    "detail": "Function (RHS . TheTable = nullptr ; RHS . NumBuckets = 0 ; RHS . NumItems = 0 ; RHS . NumTombstones = 0 ; })",
    "insertText": "StringMapImpl(unsigned InitSize, unsigned ItemSize)"
  },
  {
    "label": "RehashTable()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "RehashTable(unsigned BucketNo = 0)"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "LookupBucketFor(StringRef Key)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindKey(StringRef Key)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKey(StringMapEntryBase *V)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (StringMapEntryBase*)",
    "insertText": "RemoveKey(StringRef Key)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "init(unsigned Size)"
  },
  {
    "label": "getTombstoneVal()",
    "kind": "Method",
    "detail": "Function (public : StringMapEntryBase*)",
    "insertText": "getTombstoneVal()"
  },
  {
    "label": "getNumBuckets()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumBuckets()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(TheTable, Other.TheTable)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(NumBuckets, Other.NumBuckets)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(NumItems, Other.NumItems)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(NumTombstones, Other.NumTombstones)"
  },
  {
    "label": "StringMapEntry()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueTy> class StringMapEntry : public StringMapEntryBase {)",
    "insertText": "StringMapEntry(StringMapEntry &E)"
  },
  {
    "label": "StringMapEntry()",
    "kind": "Method",
    "detail": "Function (public : ValueTy second ;)",
    "insertText": "StringMapEntry(unsigned strLen) : StringMapEntryBase(strLen), second()"
  },
  {
    "label": "StringMapEntry()",
    "kind": "Method",
    "detail": "Function (} template<class InitTy>)",
    "insertText": "StringMapEntry(unsigned strLen, InitTy &&V) : StringMapEntryBase(strLen), second(std::forward<InitTy>(V))"
  },
  {
    "label": "getKey()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getKey()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const ValueTy&)",
    "insertText": "getValue()"
  },
  {
    "label": "getKeyData()",
    "kind": "Method",
    "detail": "Function (second = V ; } const char*)",
    "insertText": "getKeyData()"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "first()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<AllocatorTy,InitType> StringMapEntry*)",
    "insertText": "Create(StringRef Key, AllocatorTy &Allocator, InitType &&InitVal)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (unsigned KeyLength = Key .)",
    "insertText": "size()"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned AllocSize = static_cast<)",
    "insertText": "unsigned(sizeof(StringMapEntry))"
  },
  {
    "label": "StringMapEntry()",
    "kind": "Method",
    "detail": "Function (unsigned Alignment = alignOf<)",
    "insertText": "StringMapEntry()"
  },
  {
    "label": "StringMapEntry()",
    "kind": "Method",
    "detail": "Function (StringMapEntry* NewItem = static_cast<)",
    "insertText": "StringMapEntry(Allocator.Allocate(AllocSize,Alignment))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(NewItem) StringMapEntry(KeyLength, std::forward<InitType>(InitVal))"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* StrBuffer = const_cast<)",
    "insertText": "char(NewItem->getKeyData())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (StrBuffer [ KeyLength ] = 0 ; return NewItem ; } template<AllocatorTy> StringMapEntry*)",
    "insertText": "Create(StringRef Key, AllocatorTy &Allocator)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<InitType> StringMapEntry*)",
    "insertText": "Create(StringRef Key, InitType &&InitVal)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (MallocAllocator A ; return)",
    "insertText": "Create(Key, A, std::forward<InitType>(InitVal))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} StringMapEntry*)",
    "insertText": "Create(StringRef Key)"
  },
  {
    "label": "GetStringMapEntryFromKeyData()",
    "kind": "Method",
    "detail": "Function (} StringMapEntry&)",
    "insertText": "GetStringMapEntryFromKeyData(const char *KeyData)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (char* Ptr = const_cast<)",
    "insertText": "char(KeyData) - sizeof(StringMapEntry<ValueTy>)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} template<AllocatorTy> void)",
    "insertText": "Destroy(AllocatorTy &Allocator)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned AllocSize = static_cast<)",
    "insertText": "unsigned(sizeof(StringMapEntry)) + getKeyLength()"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Deallocate(static_cast<void *>(this), AllocSize)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (MallocAllocator A ;)",
    "insertText": "Destroy(A)"
  },
  {
    "label": "StringMap()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueTy,AllocatorTy = MallocAllocator> class StringMap : public StringMapImpl { AllocatorTy Allocator ; public : typedef StringMapEntry<ValueTy> MapEntryTy ;)",
    "insertText": "StringMap() : StringMapImpl(static_cast<unsigned>(sizeof(MapEntryTy)))"
  },
  {
    "label": "StringMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMap(unsigned InitialSize) : StringMapImpl(InitialSize, static_cast<unsigned>(sizeof(MapEntryTy)))"
  },
  {
    "label": "StringMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMap(AllocatorTy A) : StringMapImpl(static_cast<unsigned>(sizeof(MapEntryTy))), Allocator(A)"
  },
  {
    "label": "StringMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMap(unsigned InitialSize, AllocatorTy A) : StringMapImpl(InitialSize, static_cast<unsigned>(sizeof(MapEntryTy))), Allocator(A)"
  },
  {
    "label": "StringMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMap(StringMap &&RHS) : StringMapImpl(std::move(RHS)), Allocator(std::move(RHS.Allocator))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StringMap&)",
    "insertText": "operator(StringMap RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Allocator, RHS.Allocator)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(StringRef Key)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (int Bucket =)",
    "insertText": "FindKey(Key)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} ValueTy)",
    "insertText": "lookup(StringRef Key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const_iterator it =)",
    "insertText": "find(Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueTy&)",
    "insertText": "operator(StringRef Key)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(StringRef Key)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "insert(MapEntryTy *KeyValue)"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (unsigned BucketNo =)",
    "insertText": "LookupBucketFor(KeyValue->getKey())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringMapEntryBase*& Bucket = TheTable [ BucketNo ] ;)",
    "insertText": "if(Bucket && Bucket != getTombstoneVal())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Bucket = KeyValue ; + + NumItems ;)",
    "insertText": "assert(NumItems + NumTombstones <= NumBuckets)"
  },
  {
    "label": "RehashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RehashTable()"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (unsigned BucketNo =)",
    "insertText": "LookupBucketFor(KV.first)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringMapEntryBase*& Bucket = TheTable [ BucketNo ] ;)",
    "insertText": "if(Bucket && Bucket != getTombstoneVal()) return std::make_pair(iterator(TheTable + BucketNo, false), false)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Bucket =)",
    "insertText": "Create(KV.first, Allocator, std::move(KV.second))"
  },
  {
    "label": "RehashTable()",
    "kind": "Method",
    "detail": "Function (BucketNo =)",
    "insertText": "RehashTable(BucketNo)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "MapEntryTy()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "MapEntryTy(Bucket)->Destroy(Allocator)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} Bucket = nullptr ; } NumItems = 0 ; NumTombstones = 0 ; } void)",
    "insertText": "remove(MapEntryTy *KeyValue)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKey(KeyValue)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(iterator I)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (MapEntryTy& V =* I ;)",
    "insertText": "remove(&V)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (V .)",
    "insertText": "Destroy(Allocator)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(StringRef Key)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(I)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} } }::operator)",
    "insertText": "delete(TheTable)"
  },
  {
    "label": "StringMapConstIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueTy> class StringMapConstIterator { protected : StringMapEntryBase** Ptr ; public : typedef StringMapEntry<ValueTy> value_type ;)",
    "insertText": "StringMapConstIterator() : Ptr(nullptr)"
  },
  {
    "label": "StringMapConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMapConstIterator(StringMapEntryBase **Bucket, bool NoAdvance = false) : Ptr(Bucket)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const value_type&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const StringMapConstIterator &RHS)"
  },
  {
    "label": "AdvancePastEmptyBuckets()",
    "kind": "Method",
    "detail": "Function (+ + Ptr ;)",
    "insertText": "AdvancePastEmptyBuckets()"
  },
  {
    "label": "StringMapIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueTy> class StringMapIterator : public StringMapConstIterator<ValueTy> { public :)",
    "insertText": "StringMapIterator()"
  },
  {
    "label": "StringMapIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringMapIterator(StringMapEntryBase **Bucket, bool NoAdvance = false) : StringMapConstIterator<ValueTy>(Bucket, NoAdvance)"
  }
]