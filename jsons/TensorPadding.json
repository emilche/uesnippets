[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorPaddingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorPaddingOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "BlockIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockIteratorState"
  },
  {
    "label": "TensorPaddingOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_PADDING_H # define EIGEN_CXX11_TENSOR_TENSOR_PADDING_H namespace Eigen { namespace internal { template<PaddingDimensions,XprType> struct traits<TensorPaddingOp<PaddingDimensions,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<PaddingDimensions,XprType> struct eval<TensorPaddingOp<PaddingDimensions,XprType>,Eigen::Dense> { typedef const TensorPaddingOp<PaddingDimensions,XprType>& type ; } ; template<PaddingDimensions,XprType> struct nested<TensorPaddingOp<PaddingDimensions,XprType>,1,eval<TensorPaddingOp<PaddingDimensions,XprType>>::type> { typedef TensorPaddingOp<PaddingDimensions,XprType> type ; } ; } template<PaddingDimensions,XprType> class TensorPaddingOp : public TensorBase<TensorPaddingOp<PaddingDimensions,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorPaddingOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorPaddingOp>::type Nested ; typedef Eigen::internal::traits<TensorPaddingOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorPaddingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorPaddingOp(const XprType& expr, const PaddingDimensions& padding_dims, const Scalar padding_value) : m_xpr(expr), m_padding_dims(padding_dims), m_padding_value(padding_value)"
  },
  {
    "label": "padding()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const PaddingDimensions&)",
    "insertText": "padding()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumDims > 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_dimensions = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ 0 ] = 1 ; m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ i ] = m_inputStrides [ i - 1 ]* input_dims [ i - 1 ] ; m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; } m_outputStrides [ NumDims ] = m_outputStrides [ NumDims - 1 ]* m_dimensions [ NumDims - 1 ] ; } else { m_inputStrides [ NumDims - 1 ] = 1 ; m_outputStrides [ NumDims ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < dimensions().TotalSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index inputIndex = 0 ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i > 0; --i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStrides [ i ] ;)",
    "insertText": "if(isPaddingAtIndexForDim(idx, i))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (index - = idx* m_outputStrides [ i ] ; })",
    "insertText": "if(isPaddingAtIndexForDim(index, 0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (index - = idx* m_outputStrides [ i + 1 ] ; })",
    "insertText": "if(isPaddingAtIndexForDim(index, NumDims-1))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} return m_impl .)",
    "insertText": "coeff(inputIndex)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "packetRowMajor()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "packetRowMajor(index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (TensorOpCost cost = m_impl .)",
    "insertText": "costPerCoeff(vectorized)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims; ++i) updateCostPerDimension(cost, i, i == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i >= 0; --i) updateCostPerDimension(cost, i, i == NumDims - 1)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} return cost ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "lastLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "lastLevelCacheSize()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (} const bool IsColMajor = Layout = = static_cast<)",
    "insertText": "int(ColMajor)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (const int inner_dim_idx = IsColMajor ? 0 : NumDims - 1 ; Index offset = desc .)",
    "insertText": "offset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ; const int stride_dim = IsColMajor ? dim : dim + 1 ; output_offsets [ dim ] = offset / m_outputStrides [ stride_dim ] ; offset - = output_offsets [ dim ]* m_outputStrides [ stride_dim ] ; } output_offsets [ inner_dim_idx ] = offset ; DSizes<Index,NumDims> input_offsets = output_offsets ;)",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ; input_offset + = input_offsets [ dim ]* m_inputStrides [ dim ] ; } Index output_offset = 0 ; const DSizes<Index,NumDims> output_strides = internal::strides<)",
    "insertText": "Layout(desc.dimensions())"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i + 1 : NumDims - i - 2 ; it [ i ] . count = 0 ; it [ i ] . size = desc .)",
    "insertText": "dimension(dim)"
  },
  {
    "label": "input_stride()",
    "kind": "Method",
    "detail": "Function (it [ i ] . input_stride = m_inputStrides [ dim ] ; it [ i ] . input_span = it [ i ] .)",
    "insertText": "input_stride(it[i].size - 1)"
  },
  {
    "label": "output_stride()",
    "kind": "Method",
    "detail": "Function (it [ i ] . output_stride = output_strides [ dim ] ; it [ i ] . output_span = it [ i ] .)",
    "insertText": "output_stride(it[i].size - 1)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (} const Index input_inner_dim_size = static_cast<)",
    "insertText": "Index(m_impl.dimensions()[inner_dim_idx])"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index output_size = desc .)",
    "insertText": "size()"
  },
  {
    "label": "dimension()",
    "kind": "Method",
    "detail": "Function (const Index output_inner_dim_size = desc .)",
    "insertText": "dimension(inner_dim_idx)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index output_inner_pad_before_size = input_offsets [ inner_dim_idx ]<0 ?)",
    "insertText": "mini(numext::abs(input_offsets[inner_dim_idx]), output_inner_dim_size)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const Index output_inner_copy_size =)",
    "insertText": "mini((output_inner_dim_size - output_inner_pad_before_size), numext::maxi(input_inner_dim_size - (input_offsets[inner_dim_idx] + output_inner_pad_before_size), Index(0)))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(output_inner_copy_size >= 0)"
  },
  {
    "label": "output_inner_pad_after_size()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "output_inner_pad_after_size(output_inner_dim_size - output_inner_copy_size - output_inner_pad_before_size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(output_inner_dim_size == (output_inner_pad_before_size + output_inner_copy_size + output_inner_pad_after_size))"
  },
  {
    "label": "isPaddingAtIndexForDim()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? i : NumDims - i - 1 ; output_padded [ dim ] =)",
    "insertText": "isPaddingAtIndexForDim(output_coord[dim], dim)"
  },
  {
    "label": "prepareStorage()",
    "kind": "Method",
    "detail": "Function (} typedef internal::StridedLinearBufferCopy<ScalarNoConst,Index> LinCopy ; const TensorBlock::Storage block_storage =)",
    "insertText": "prepareStorage(desc, scratch)"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (const bool squeeze_writes =)",
    "insertText": "NumDims(input_inner_dim_size == m_dimensions[inner_dim_idx]) && (input_inner_dim_size == output_inner_dim_size)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (const int squeeze_dim = IsColMajor ? inner_dim_idx + 1 : inner_dim_idx - 1 ; const Index squeeze_max_coord = squeeze_writes ?)",
    "insertText": "mini(static_cast<Index>(m_dimensions[squeeze_dim] - m_padding[squeeze_dim].second), static_cast<Index>(output_offsets[squeeze_dim] + desc.dimension(squeeze_dim))) : static_cast<Index>(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool is_padded = false ;)",
    "insertText": "for(int j = 1; j < NumDims; ++j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? j : NumDims - j - 1 ; is_padded = output_padded [ dim ] ;)",
    "insertText": "if(is_padded)"
  },
  {
    "label": "FillLinear()",
    "kind": "Method",
    "detail": "Function (size + = output_inner_dim_size ; LinCopy::template Run<LinCopy::)",
    "insertText": "FillLinear(typename LinCopy::Dst(output_offset, 1, block_storage.data()), typename LinCopy::Src(0, 0, &m_paddingValue), output_inner_dim_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(squeeze_writes)"
  },
  {
    "label": "Linear()",
    "kind": "Method",
    "detail": "Function (const Index squeeze_num = squeeze_max_coord - output_coord [ squeeze_dim ] ; size + = output_inner_dim_size* squeeze_num ; LinCopy::template Run<LinCopy::)",
    "insertText": "Linear(typename LinCopy::Dst(output_offset, 1, block_storage.data()), typename LinCopy::Src(input_offset, 1, m_impl.data()), output_inner_dim_size * squeeze_num)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (it [ 0 ] .)",
    "insertText": "count(squeeze_num - 1)"
  },
  {
    "label": "input_stride()",
    "kind": "Method",
    "detail": "Function (input_offset + = it [ 0 ] .)",
    "insertText": "input_stride(squeeze_num - 1)"
  },
  {
    "label": "output_stride()",
    "kind": "Method",
    "detail": "Function (output_offset + = it [ 0 ] .)",
    "insertText": "output_stride(squeeze_num - 1)"
  },
  {
    "label": "squeeze_dim()",
    "kind": "Method",
    "detail": "Function (output_coord [)",
    "insertText": "squeeze_dim(squeeze_num - 1)"
  },
  {
    "label": "FillLinear()",
    "kind": "Method",
    "detail": "Function (} else { size + = output_inner_dim_size ; { const Index out = output_offset ; LinCopy::template Run<LinCopy::)",
    "insertText": "FillLinear(typename LinCopy::Dst(out, 1, block_storage.data()), typename LinCopy::Src(0, 0, &m_paddingValue), output_inner_pad_before_size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} { const Index out = output_offset + output_inner_pad_before_size ; const Index in = input_offset + output_inner_pad_before_size ;)",
    "insertText": "eigen_assert(output_inner_copy_size == 0 || m_impl.data() != NULL)"
  },
  {
    "label": "Linear()",
    "kind": "Method",
    "detail": "Function (LinCopy::template Run<LinCopy::)",
    "insertText": "Linear(typename LinCopy::Dst(out, 1, block_storage.data()), typename LinCopy::Src(in, 1, m_impl.data()), output_inner_copy_size)"
  },
  {
    "label": "FillLinear()",
    "kind": "Method",
    "detail": "Function (} { const Index out = output_offset + output_inner_pad_before_size + output_inner_copy_size ; LinCopy::template Run<LinCopy::)",
    "insertText": "FillLinear(typename LinCopy::Dst(out, 1, block_storage.data()), typename LinCopy::Src(0, 0, &m_paddingValue), output_inner_pad_after_size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int j = 0; j < NumDims - 1; ++j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int dim = IsColMajor ? j + 1 : NumDims - j - 2 ;)",
    "insertText": "if(++it[j].count < it[j].size)"
  },
  {
    "label": "AsTensorMaterializedBlock()",
    "kind": "Method",
    "detail": "Function (} } return block_storage .)",
    "insertText": "AsTensorMaterializedBlock()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "BlockIteratorState()",
    "kind": "Method",
    "detail": "Function (} # endif private : struct BlockIteratorState {)",
    "insertText": "BlockIteratorState() : count(0), size(0), input_stride(0), input_span(0), output_stride(0), output_span(0)"
  },
  {
    "label": "isPaddingAtIndexForDim()",
    "kind": "Method",
    "detail": "Function (} Index count ; Index size ; Index input_stride ; Index input_span ; Index output_stride ; Index output_span ; } ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE bool)",
    "insertText": "isPaddingAtIndexForDim(Index index, int dim_index)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HAS_INDEX_LIST) return (!internal::index_pair_first_statically_eq<PaddingDimensions>(dim_index, 0) && index < m_padding[dim_index].first) || (!internal::index_pair_second_statically_eq<PaddingDimensions>(dim_index, 0) && index >= m_dimensions[dim_index] - m_padding[dim_index].second)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(index < m_padding[dim_index].first) || (index >= m_dimensions[dim_index] - m_padding[dim_index].second)"
  },
  {
    "label": "isLeftPaddingCompileTimeZero()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE bool)",
    "insertText": "isLeftPaddingCompileTimeZero(int dim_index)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HAS_INDEX_LIST) return internal::index_pair_first_statically_eq<PaddingDimensions>(dim_index, 0)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "EIGEN_UNUSED_VARIABLE(dim_index)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_HAS_INDEX_LIST) return internal::index_pair_second_statically_eq<PaddingDimensions>(dim_index, 0)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double in = static_cast<)",
    "insertText": "double(m_impl.dimensions()[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double out = in + m_padding [ i ] . first + m_padding [ i ] . second ;)",
    "insertText": "if(out == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double reduction = in / out ; cost* = reduction ;)",
    "insertText": "if(first)"
  },
  {
    "label": "TensorOpCost()",
    "kind": "Method",
    "detail": "Function (cost + =)",
    "insertText": "TensorOpCost(0, 0, 2 * TensorOpCost::AddCost<Index>() + reduction * (1 * TensorOpCost::AddCost<Index>()))"
  },
  {
    "label": "TensorOpCost()",
    "kind": "Method",
    "detail": "Function (} else { cost + =)",
    "insertText": "TensorOpCost(0, 0, 2 * TensorOpCost::AddCost<Index>() + 2 * TensorOpCost::MulCost<Index>() + reduction * (2 * TensorOpCost::MulCost<Index>() + 1 * TensorOpCost::DivCost<Index>()))"
  },
  {
    "label": "packetColMajor()",
    "kind": "Method",
    "detail": "Function (} } protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetColMajor(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+PacketSize-1 < dimensions().TotalSize())"
  },
  {
    "label": "firstPaddedRight()",
    "kind": "Method",
    "detail": "Function (const Index firstIdx = index ; const Index lastIdx = index + PacketSize - 1 ; const Index lastPaddedLeft = m_padding [ i ] . first* m_outputStrides [ i ] ; const Index)",
    "insertText": "firstPaddedRight(m_dimensions[i] - m_padding[i].second)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index lastPaddedRight = m_outputStrides [ i + 1 ] ;)",
    "insertText": "if(!isLeftPaddingCompileTimeZero(i) && lastIdx < lastPaddedLeft)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!isRightPaddingCompileTimeZero(i) && firstIdx >= firstPaddedRight && lastIdx < lastPaddedRight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((isLeftPaddingCompileTimeZero(i) && isRightPaddingCompileTimeZero(i)) || (firstIdx >= lastPaddedLeft && lastIdx < firstPaddedRight))"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStrides [ i ] ;)",
    "insertText": "inputIndex(idx - m_padding[i].first)"
  },
  {
    "label": "packetWithPossibleZero()",
    "kind": "Method",
    "detail": "Function (index - = idx* m_outputStrides [ i ] ; } else { return)",
    "insertText": "packetWithPossibleZero(initialIndex)"
  },
  {
    "label": "firstPaddedRight()",
    "kind": "Method",
    "detail": "Function (} } const Index lastIdx = index + PacketSize - 1 ; const Index firstIdx = index ; const Index lastPaddedLeft = m_padding [ 0 ] . first ; const Index)",
    "insertText": "firstPaddedRight(m_dimensions[0] - m_padding[0].second)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index lastPaddedRight = m_outputStrides [ 1 ] ;)",
    "insertText": "if(!isLeftPaddingCompileTimeZero(0) && lastIdx < lastPaddedLeft)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!isRightPaddingCompileTimeZero(0) && firstIdx >= firstPaddedRight && lastIdx < lastPaddedRight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((isLeftPaddingCompileTimeZero(0) && isRightPaddingCompileTimeZero(0)) || (firstIdx >= lastPaddedLeft && lastIdx < firstPaddedRight))"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndex(index - m_padding[0].first)"
  },
  {
    "label": "packetRowMajor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetRowMajor(Index index)"
  },
  {
    "label": "firstPaddedRight()",
    "kind": "Method",
    "detail": "Function (} } const Index lastIdx = index + PacketSize - 1 ; const Index firstIdx = index ; const Index lastPaddedLeft = m_padding [ NumDims - 1 ] . first ; const Index)",
    "insertText": "firstPaddedRight(m_dimensions[NumDims-1] - m_padding[NumDims-1].second)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index lastPaddedRight = m_outputStrides [ NumDims - 1 ] ;)",
    "insertText": "if(!isLeftPaddingCompileTimeZero(NumDims-1) && lastIdx < lastPaddedLeft)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!isRightPaddingCompileTimeZero(NumDims-1) && firstIdx >= firstPaddedRight && lastIdx < lastPaddedRight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((isLeftPaddingCompileTimeZero(NumDims-1) && isRightPaddingCompileTimeZero(NumDims-1)) || (firstIdx >= lastPaddedLeft && lastIdx < firstPaddedRight))"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndex(index - m_padding[NumDims-1].first)"
  },
  {
    "label": "packetWithPossibleZero()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packetWithPossibleZero(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  }
]