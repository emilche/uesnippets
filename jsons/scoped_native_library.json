[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "InvalidValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SCOPED_NATIVE_LIBRARY_H_ # define BASE_SCOPED_NATIVE_LIBRARY_H_ # include \" base / base_export . h \" # include \" base / native_library . h \" # include \" base / scoped_generic . h \" namespace base { class FilePath ; struct BASE_EXPORT NativeLibraryTraits { NativeLibrary)",
    "insertText": "InvalidValue()"
  },
  {
    "label": "ScopedNativeLibrary()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ScopedNativeLibrary : public ScopedGeneric<NativeLibrary,NativeLibraryTraits> { public :)",
    "insertText": "ScopedNativeLibrary()"
  },
  {
    "label": "ScopedNativeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedNativeLibrary(NativeLibrary library)"
  },
  {
    "label": "ScopedNativeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedNativeLibrary(const FilePath& library_path)"
  },
  {
    "label": "ScopedNativeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedNativeLibrary(ScopedNativeLibrary&& scoped_library)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedNativeLibrary&)",
    "insertText": "operator(ScopedNativeLibrary&& scoped_library)"
  },
  {
    "label": "ScopedNativeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedNativeLibrary(const ScopedNativeLibrary&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedNativeLibrary&)",
    "insertText": "operator(const ScopedNativeLibrary&)"
  },
  {
    "label": "GetFunctionPointer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetFunctionPointer(const char* function_name)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (const NativeLibraryLoadError*)",
    "insertText": "GetError()"
  }
]