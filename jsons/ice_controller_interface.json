[
  {
    "label": "IceFieldTrials",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceFieldTrials"
  },
  {
    "label": "IceRecheckEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IceRecheckEvent"
  },
  {
    "label": "IceControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceControllerInterface"
  },
  {
    "label": "SwitchResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SwitchResult"
  },
  {
    "label": "PingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PingResult"
  },
  {
    "label": "IceRecheckEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_ICE_CONTROLLER_INTERFACE_H_ # define P2P_BASE_ICE_CONTROLLER_INTERFACE_H_ # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" p2p / base / connection . h \" # include \" p2p / base / ice_switch_reason . h \" # include \" p2p / base / ice_transport_internal . h \" namespace cricket { struct IceFieldTrials ; struct IceRecheckEvent {)",
    "insertText": "IceRecheckEvent(IceSwitchReason _reason, int _recheck_delay_ms) : reason(_reason), recheck_delay_ms(_recheck_delay_ms)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "PingResult()",
    "kind": "Method",
    "detail": "Function (IceSwitchReason reason ; int recheck_delay_ms ; } ; class IceControllerInterface { public : struct SwitchResult { absl::optional<const Connection*> connection ; absl::optional<IceRecheckEvent> recheck_event ; std::vector<const Connection*> connections_to_forget_state_on ; } ; struct PingResult {)",
    "insertText": "PingResult(const Connection* conn, int _recheck_delay_ms) : connection(conn ? absl::optional<const Connection*>(conn) : absl::nullopt), recheck_delay_ms(_recheck_delay_ms)"
  },
  {
    "label": "IceControllerInterface()",
    "kind": "Method",
    "detail": "Function (} const absl::optional<const Connection*> connection ; const int recheck_delay_ms = 0 ; } ; ~)",
    "insertText": "IceControllerInterface()"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConfig(const IceConfig& config)"
  },
  {
    "label": "SetSelectedConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedConnection(const Connection* selected_connection)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(const Connection* connection)"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionDestroyed(const Connection* connection)"
  },
  {
    "label": "connections()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const Connection*>)",
    "insertText": "connections()"
  },
  {
    "label": "HasPingableConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPingableConnection()"
  },
  {
    "label": "SelectConnectionToPing()",
    "kind": "Method",
    "detail": "Function (PingResult)",
    "insertText": "SelectConnectionToPing(int64_t last_ping_sent_ms)"
  },
  {
    "label": "GetUseCandidateAttr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCandidateAttr(const Connection* conn, NominationMode mode, IceMode remote_ice_mode)"
  },
  {
    "label": "FindNextPingableConnection()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "FindNextPingableConnection()"
  },
  {
    "label": "MarkConnectionPinged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkConnectionPinged(const Connection* con)"
  },
  {
    "label": "ShouldSwitchConnection()",
    "kind": "Method",
    "detail": "Function (SwitchResult)",
    "insertText": "ShouldSwitchConnection(IceSwitchReason reason, const Connection* connection)"
  },
  {
    "label": "SortAndSwitchConnection()",
    "kind": "Method",
    "detail": "Function (SwitchResult)",
    "insertText": "SortAndSwitchConnection(IceSwitchReason reason)"
  },
  {
    "label": "PruneConnections()",
    "kind": "Method",
    "detail": "Function (std::vector<const Connection*>)",
    "insertText": "PruneConnections()"
  }
]