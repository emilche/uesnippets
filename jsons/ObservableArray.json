[
  {
    "label": "TObservableArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObservableArray"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TObservableArrayChangedArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObservableArrayChangedArgs"
  },
  {
    "label": "FRemoveSwapIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemoveSwapIndex"
  },
  {
    "label": "FSwapIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSwapIndex"
  },
  {
    "label": "MakeResetAction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / MemStack . h \" namespace UE::Slate::Containers { template<InElementType> struct TObservableArray ; enum class EObservableArrayChangedAction : uint8 { Reset,Add,Remove,RemoveSwap,Swap,} ; template<InElementType> struct TObservableArrayChangedArgs { private : using ArrayViewType = TArrayView<InElementType> ; using SizeType = ArrayViewType::SizeType ; using ElementType = ArrayViewType::ElementType ; TObservableArray<InElementType> ; private : TObservableArrayChangedArgs)",
    "insertText": "MakeResetAction()"
  },
  {
    "label": "MakeAddAction()",
    "kind": "Method",
    "detail": "Function (TObservableArrayChangedArgs Result ; Result . Action = EObservableArrayChangedAction::Reset ; return Result ; } TObservableArrayChangedArgs)",
    "insertText": "MakeAddAction(const ArrayViewType InAddedItems, int32 InNewIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TObservableArrayChangedArgs Result ; Result . Array = InAddedItems ; Result . StartIndex = InNewIndex ; Result . Action = EObservableArrayChangedAction::Add ;)",
    "insertText": "check(Result.Array.Num() > 0 && Result.StartIndex >= 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TObservableArrayChangedArgs Result ; Result . Array = InRemovedItems ; Result . StartIndex = InRemoveStartedIndex ; Result . MoveIndex = InPreviousMovedItemLocation ; Result . Action = EObservableArrayChangedAction::RemoveSwap ;)",
    "insertText": "check(Result.Array.Num() > 0 && (Result.MoveIndex > 0 || Result.MoveIndex == INDEX_NONE) && Result.StartIndex >= 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TObservableArrayChangedArgs Result ; Result . StartIndex = InFirstIndex ; Result . MoveIndex = InSecondIndex ; Result . Action = EObservableArrayChangedAction::Swap ;)",
    "insertText": "check(Result.Array.Num() == 0 && Result.MoveIndex >= 0 && Result.StartIndex >= 0 && Result.MoveIndex != Result.StartIndex)"
  },
  {
    "label": "GetRemovedSwapIndexes()",
    "kind": "Method",
    "detail": "Function (} SizeType RemoveIndex ; SizeType PreviousMovedElmenentIndex ; } ; FRemoveSwapIndex)",
    "insertText": "GetRemovedSwapIndexes()"
  },
  {
    "label": "FSwapIndex()",
    "kind": "Method",
    "detail": "Function (} struct FSwapIndex {)",
    "insertText": "FSwapIndex(SizeType InFirstIndex, SizeType InSecondIndex) : FirstIndex(InFirstIndex) , SecondIndex(InSecondIndex)"
  },
  {
    "label": "GetSwapIndex()",
    "kind": "Method",
    "detail": "Function (} SizeType FirstIndex ; SizeType SecondIndex ; } ; FSwapIndex)",
    "insertText": "GetSwapIndex()"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (} ArrayViewType)",
    "insertText": "GetItems()"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TObservableArray()"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TObservableArray(const ElementType* Ptr, SizeType Count) : Array(Ptr, Count)"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObservableArray(std::initializer_list<ElementType> InitList) : Array(InitList)"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (} template<InOtherAllocatorType>)",
    "insertText": "TObservableArray(const TArray<ElementType, InOtherAllocatorType>& Other) : Array(Other)"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (} template<InOtherAllocatorType>)",
    "insertText": "TObservableArray(TArray<ElementType, InOtherAllocatorType>&& Other) : Array(MoveTemp(Other))"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObservableArray(const TObservableArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TObservableArray&)",
    "insertText": "operator(const TObservableArray&)"
  },
  {
    "label": "TObservableArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TObservableArray(TObservableArray&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TObservableArray&)",
    "insertText": "operator(TObservableArray&& Other)"
  },
  {
    "label": "OnArrayChanged()",
    "kind": "Method",
    "detail": "Function (} public : FArrayChangedDelegate&)",
    "insertText": "OnArrayChanged()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SizeType NewIndex = Array .)",
    "insertText": "Add(Item)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeAddAction({ GetData() + NewIndex, 1 }, NewIndex))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = Array .)",
    "insertText": "Add(MoveTempIfPossible(Item))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SizeType NewIndex = Array .)",
    "insertText": "Emplace(Forward<InArgTypes>(Args)...)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "EmplaceAt(Index, Forward<InArgTypes>(Args)...)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeAddAction({ GetData() + Index, 1 }, Index))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType> void)",
    "insertText": "Append(const TObservableArray<OtherElementType>& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Source.Array)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType,OtherAllocatorType> void)",
    "insertText": "Append(const TArray<OtherElementType, OtherAllocatorType>& Source)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (SizeType PreviousNum = Array .)",
    "insertText": "Num()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Append(Source)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeAddAction({ GetData() + PreviousNum, NewNum - PreviousNum }, PreviousNum))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } template<OtherElementType,OtherAllocator> void)",
    "insertText": "Append(TArray<OtherElementType, OtherAllocator>&& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Append(MoveTempIfPossible(Source))"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (} } SizeType)",
    "insertText": "RemoveSingle(const ElementType& Item, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (SizeType Index = Array .)",
    "insertText": "Find(Item)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "RemoveSingleSwap(const ElementType& Item, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAt(SizeType Index, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ElementType RemovedElement =)",
    "insertText": "MoveTemp(Array[Index])"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(Index, AllowShrinking)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeRemoveAction({ &RemovedElement, 1 }, Index))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CountType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<CountType>) > void RemoveAt(SizeType Index, CountType NumToRemove, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(Index, NumToRemove, AllowShrinking)"
  },
  {
    "label": "Mark()",
    "kind": "Method",
    "detail": "Function (} else { FMemMark)",
    "insertText": "Mark(FMemStack::Get())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<ElementType,TMemStackAllocator<>> RemovedElements ; RemovedElements .)",
    "insertText": "Reserve(NumToRemove)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RemovedElements .)",
    "insertText": "Add(MoveTemp(Array[RemoveIndex + Index]))"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeRemoveAction({ RemovedElements.GetData(), NumToRemove }, Index))"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"RemoveAt\") FORCEINLINE void RemoveAt(SizeType Index, SizeType NumToRemove, bool bAllowShrinking)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(Index, NumToRemove, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwap(SizeType Index, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (SizeType SwapAmount =)",
    "insertText": "Min(1, PreviousNum - (Index + 1))"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAtSwap(Index, AllowShrinking)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeRemoveSwapAction({ &RemovedElement, 1 }, Index, PreviousNum - SwapAmount))"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CountType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<CountType>) > void RemoveAtSwap(SizeType Index, CountType NumToRemove, EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (SizeType SwapAmount =)",
    "insertText": "Min(NumToRemove, PreviousNum - (Index + NumToRemove))"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAtSwap(Index, NumToRemove, AllowShrinking)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeRemoveSwapAction({ RemovedElements.GetData(), NumToRemove }, Index, PreviousNum - SwapAmount))"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"RemoveAtSwap\") FORCEINLINE void RemoveAtSwap(SizeType Index, SizeType NumToRemove, bool bAllowShrinking)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAtSwap(Index, NumToRemove, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(SizeType FirstIndexToSwap, SizeType SecondIndexToSwap)"
  },
  {
    "label": "SwapMemory()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "SwapMemory(FirstIndexToSwap, SecondIndexToSwap)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeSwapAction(FirstIndexToSwap, SecondIndexToSwap))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset(SizeType NewSize = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Reset(NewSize)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (ArrayChangedDelegate .)",
    "insertText": "Broadcast(ObservableArrayChangedArgsType::MakeResetAction())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reserve(SizeType Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(SizeType Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(SizeType Index)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "GetData()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} template<ComparisonType> bool)",
    "insertText": "Contains(const ComparisonType& Item)"
  },
  {
    "label": "ContainsByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<InPredicate> SizeType)",
    "insertText": "ContainsByPredicate(InPredicate Pred)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "Find(const ElementType& Item)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<InPredicate> ElementType*)",
    "insertText": "FindByPredicate(InPredicate Pred)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<InPredicate> SizeType)",
    "insertText": "IndexOfByPredicate(InPredicate Pred)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : template<InOtherAllocatorType> bool)",
    "insertText": "operator(TArray<ElementType, InOtherAllocatorType>& OtherArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TObservableArray& OtherArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<InOtherAllocatorType> bool)",
    "insertText": "operator(TArray<ElementType, InOtherAllocatorType>& OtherArray, const TObservableArray& Self)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : RangedForIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} RangedForIteratorType)",
    "insertText": "end()"
  }
]