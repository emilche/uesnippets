[
  {
    "label": "GetNumWordsInBitArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / PushModel / PushModelMacros . h \" # if WITH_PUSH_MODEL # include \" CoreMinimal . h \" # include \" Containers / BitArray . h \" namespace UEPushModelPrivate { const int32)",
    "insertText": "GetNumWordsInBitArray(const TBitArray<>& BitArray)"
  },
  {
    "label": "ResetBitArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetBitArray(TBitArray<>& ToReset)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ToReset.GetData(), GetNumWordsInBitArray(ToReset) * 4)"
  },
  {
    "label": "SetBitArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBitArray(TBitArray<>& ToSet)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(ToSet.GetData(), 0xFF, GetNumWordsInBitArray(ToSet) * 4)"
  },
  {
    "label": "BitwiseOrBitArrays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BitwiseOrBitArrays(const TBitArray<>& MaskBitArray, TBitArray<>& ResultBitArray)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint32* InWords = MaskBitArray .)",
    "insertText": "GetData()"
  },
  {
    "label": "GetNumWordsInBitArray()",
    "kind": "Method",
    "detail": "Function (const int32 NumWords =)",
    "insertText": "GetNumWordsInBitArray(MaskBitArray)"
  },
  {
    "label": "AreAnyBitsSet()",
    "kind": "Method",
    "detail": "Function (OutWords [ i ] | = InWords [ i ] ; } } bool)",
    "insertText": "AreAnyBitsSet(const TBitArray<>& BitArray)"
  },
  {
    "label": "GetNumWordsInBitArray()",
    "kind": "Method",
    "detail": "Function (const int32 NumWords =)",
    "insertText": "GetNumWordsInBitArray(BitArray)"
  }
]