[
  {
    "label": "FSubTrackEditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubTrackEditorMode"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" EdMode . h \" # include \" ISequencer . h \" class FSubTrackEditorMode : public FEdMode { public : FName ModeName ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnOriginValueChanged, FVector, FRotator) FSubTrackEditorMode()"
  },
  {
    "label": "FSubTrackEditorMode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSubTrackEditorMode()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "GetPivotForOrbit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPivotForOrbit(FVector& OutPivot)"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& OutMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& OutMatrix, void* InData)"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "SetSequencer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequencer(const TSharedPtr<ISequencer>& InSequencer)"
  },
  {
    "label": "GetOnOriginValueChanged()",
    "kind": "Method",
    "detail": "Function (WeakSequencer = InSequencer ; } FOnOriginValueChanged&)",
    "insertText": "GetOnOriginValueChanged()"
  },
  {
    "label": "GetSequenceIDForSubSection()",
    "kind": "Method",
    "detail": "Function (TOptional<FMovieSceneSequenceID>)",
    "insertText": "GetSequenceIDForSubSection(const UMovieSceneSubSection* InSubSection)"
  },
  {
    "label": "GetFocusedSequenceID()",
    "kind": "Method",
    "detail": "Function (TOptional<FMovieSceneSequenceID>)",
    "insertText": "GetFocusedSequenceID()"
  },
  {
    "label": "GetFinalTransformOriginForSubSection()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetFinalTransformOriginForSubSection(const UMovieSceneSubSection* SubSection)"
  },
  {
    "label": "GetTransformOriginForSequence()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetTransformOriginForSequence(TOptional<FMovieSceneSequenceID> InSequenceID)"
  },
  {
    "label": "AreAnyActorsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnyActorsSelected()"
  },
  {
    "label": "GetSelectedSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSubSection*)",
    "insertText": "GetSelectedSection()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<ISequencer> WeakSequencer ; FOnOriginValueChanged OnOriginValueChanged ; TOptional<FVector> CachedLocation ; const TArray<FName> IncompatibleEditorModes = TArray<)",
    "insertText": "FName({ \"EditMode.ControlRig\", \"EM_Landscape\" })"
  }
]