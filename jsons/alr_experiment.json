[
  {
    "label": "AlrExperimentSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlrExperimentSettings"
  },
  {
    "label": "CreateFromFieldTrial()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_ALR_EXPERIMENT_H_ # define RTC_BASE_EXPERIMENTS_ALR_EXPERIMENT_H_ # include<stdint . h> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" namespace webrtc { struct AlrExperimentSettings { public : float pacing_factor ; int64_t max_paced_queue_time ; int alr_bandwidth_usage_percent ; int alr_start_budget_level_percent ; int alr_stop_budget_level_percent ; int group_id ; const char kScreenshareProbingBweExperimentName [ ] ; const char kStrictPacingAndProbingExperimentName [ ] ; absl::optional<AlrExperimentSettings>)",
    "insertText": "CreateFromFieldTrial(absl::string_view experiment_name)"
  },
  {
    "label": "CreateFromFieldTrial()",
    "kind": "Method",
    "detail": "Function (absl::optional<AlrExperimentSettings>)",
    "insertText": "CreateFromFieldTrial(const FieldTrialsView& key_value_config, absl::string_view experiment_name)"
  },
  {
    "label": "MaxOneFieldTrialEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaxOneFieldTrialEnabled()"
  },
  {
    "label": "MaxOneFieldTrialEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaxOneFieldTrialEnabled(const FieldTrialsView& key_value_config)"
  },
  {
    "label": "AlrExperimentSettings()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "AlrExperimentSettings()"
  }
]