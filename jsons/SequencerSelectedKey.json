[
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FKeySelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeySelection"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "FSequencerSelectedKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSelectedKey"
  },
  {
    "label": "FSelectedChannelInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedChannelInfo"
  },
  {
    "label": "FSelectedKeysByChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedKeysByChannel"
  },
  {
    "label": "AppendKeySelection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelHandle . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Set . h \" # include \" Curves / KeyHandle . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" class UMovieSceneSection ; struct FFrameNumber ; namespace UE { namespace Sequencer { struct FKeySelection ; class FChannelModel ; } } struct FSequencerSelectedKey { UMovieSceneSection* Section ; TWeakPtr<UE::Sequencer::FChannelModel> WeakChannel ; FKeyHandle KeyHandle ; public : void)",
    "insertText": "AppendKeySelection(TSet<FSequencerSelectedKey>& OutSelectedKeys, const UE::Sequencer::FKeySelection& InKeySelection)"
  },
  {
    "label": "FSequencerSelectedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSequencerSelectedKey(UMovieSceneSection& InSection, TWeakPtr<UE::Sequencer::FChannelModel> InChannel, FKeyHandle InKeyHandle) : Section(&InSection) , WeakChannel(MoveTemp(InChannel)) , KeyHandle(InKeyHandle)"
  },
  {
    "label": "FSequencerSelectedKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSequencerSelectedKey() : Section(nullptr) , KeyHandle(FKeyHandle::Invalid())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSequencerSelectedKey& SelectedKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSequencerSelectedKey& OtherKey)"
  },
  {
    "label": "FSelectedKeysByChannel()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneChannelHandle Channel ; UMovieSceneSection* OwningSection ; UObject* OwningObject ; TArray<FKeyHandle> KeyHandles ; TArray<int32> OriginalIndices ; } ; struct FSelectedKeysByChannel {)",
    "insertText": "FSelectedKeysByChannel(const UE::Sequencer::FKeySelection& KeySelection)"
  },
  {
    "label": "FSelectedKeysByChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSelectedKeysByChannel(TArrayView<const FSequencerSelectedKey> InSelectedKeys)"
  },
  {
    "label": "GetKeyTimes()",
    "kind": "Method",
    "detail": "Function (TArray<FSelectedChannelInfo> SelectedChannels ; } ; void)",
    "insertText": "GetKeyTimes(TArrayView<const FSequencerSelectedKey> InSelectedKeys, TArrayView<FFrameNumber> OutTimes)"
  },
  {
    "label": "SetKeyTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTimes(TArrayView<const FSequencerSelectedKey> InSelectedKeys, TArrayView<const FFrameNumber> InTimes)"
  },
  {
    "label": "DuplicateKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateKeys(TArrayView<const FSequencerSelectedKey> InSelectedKeys, TArrayView<FKeyHandle> OutNewHandles)"
  }
]