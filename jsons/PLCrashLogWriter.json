[
  {
    "label": "plcrash_log_writer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_log_writer"
  },
  {
    "label": "plcrash_log_bsd_signal_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_log_bsd_signal_info"
  },
  {
    "label": "plcrash_log_mach_signal_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_log_mach_signal_info"
  },
  {
    "label": "plcrash_log_signal_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_log_signal_info"
  },
  {
    "label": "plcrash_log_writer_init()",
    "kind": "Method",
    "detail": "Function (# ifndef PLCRASH_LOG_WRITER_H # define PLCRASH_LOG_WRITER_H # ifdef __cplusplus \" C \" { # endif # import<TargetConditionals . h> # import<Foundation / Foundation . h> # import \" PLCrashAsync . h \" # import \" PLCrashAsyncImageList . h \" # import \" PLCrashFrameWalker . h \" # import \" PLCrashAsyncSymbolication . h \" # import \" PLCrashLogWriterEncoding . h \" # include<uuid / uuid . h> typedef struct plcrash_log_writer { plcrash_async_symbol_strategy_t symbol_strategy ; struct { bool user_requested ; uuid_t uuid_bytes ; } report_info ; struct { PLProtobufCBinaryData version ; PLProtobufCBinaryData build ; } system_info ; struct { PLProtobufCBinaryData model ; uint64_t cpu_type ; uint64_t cpu_subtype ; uint32_t processor_count ; uint32_t logical_processor_count ; } machine_info ; struct { PLProtobufCBinaryData app_identifier ; PLProtobufCBinaryData app_version ; PLProtobufCBinaryData app_marketing_version ; } application_info ; struct { PLProtobufCBinaryData process_name ; pid_t process_id ; PLProtobufCBinaryData process_path ; time_t start_time ; PLProtobufCBinaryData parent_process_name ; pid_t parent_process_id ; bool native ; } process_info ; struct { bool has_exception ; char* name ; char* reason ; void** callstack ; size_t callstack_count ; } uncaught_exception ; PLProtobufCBinaryData custom_data ; } plcrash_log_writer_t ; typedef struct plcrash_log_bsd_signal_info { int signo ; int code ; void* address ; } plcrash_log_bsd_signal_info_t ; typedef struct plcrash_log_mach_signal_info { exception_type_t type ; mach_exception_data_t code ; mach_msg_type_number_t code_count ; } plcrash_log_mach_signal_info_t ; typedef struct plcrash_log_signal_info { plcrash_log_bsd_signal_info_t* bsd_info ; plcrash_log_mach_signal_info_t* mach_info ; } plcrash_log_signal_info_t ; plcrash_error_t)",
    "insertText": "plcrash_log_writer_init(plcrash_log_writer_t *writer, NSString *app_identifier, NSString *app_version, NSString *app_marketing_version, plcrash_async_symbol_strategy_t symbol_strategy, BOOL user_requested)"
  },
  {
    "label": "plcrash_log_writer_set_exception()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_log_writer_set_exception(plcrash_log_writer_t *writer, NSException *exception)"
  },
  {
    "label": "plcrash_log_writer_set_custom_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_log_writer_set_custom_data(plcrash_log_writer_t *writer, NSData *custom_data)"
  },
  {
    "label": "plcrash_log_writer_write()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_log_writer_write(plcrash_log_writer_t *writer, thread_t crashed_thread, plcrash_async_image_list_t *image_list, plcrash_async_file_t *file, plcrash_log_signal_info_t *siginfo, plcrash_async_thread_state_t *current_state)"
  },
  {
    "label": "plcrash_log_writer_close()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_log_writer_close(plcrash_log_writer_t *writer)"
  },
  {
    "label": "plcrash_log_writer_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_log_writer_free(plcrash_log_writer_t *writer)"
  }
]