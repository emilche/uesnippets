[
  {
    "label": "UKismetStringLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UKismetStringLibrary"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "Conv_FloatToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_FloatToString(float InFloat)"
  },
  {
    "label": "Conv_DoubleToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_DoubleToString(double InDouble)"
  },
  {
    "label": "Conv_IntToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_IntToString(int32 InInt)"
  },
  {
    "label": "Conv_Int64ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_Int64ToString(int64 InInt)"
  },
  {
    "label": "Conv_ByteToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_ByteToString(uint8 InByte)"
  },
  {
    "label": "Conv_BoolToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_BoolToString(bool InBool)"
  },
  {
    "label": "Conv_VectorToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_VectorToString(FVector InVec)"
  },
  {
    "label": "Conv_Vector3fToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_Vector3fToString(FVector3f InVec)"
  },
  {
    "label": "Conv_IntVectorToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_IntVectorToString(FIntVector InIntVec)"
  },
  {
    "label": "Conv_IntPointToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_IntPointToString(FIntPoint InIntPoint)"
  },
  {
    "label": "Conv_Vector2dToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_Vector2dToString(FVector2D InVec)"
  },
  {
    "label": "Conv_RotatorToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_RotatorToString(FRotator InRot)"
  },
  {
    "label": "Conv_TransformToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_TransformToString(const FTransform& InTrans)"
  },
  {
    "label": "Conv_ObjectToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_ObjectToString(class UObject* InObj)"
  },
  {
    "label": "Conv_BoxToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_BoxToString(const FBox& Box)"
  },
  {
    "label": "Conv_BoxCenterAndExtentsToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_BoxCenterAndExtentsToString(const FBox& Box)"
  },
  {
    "label": "Conv_InputDeviceIdToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_InputDeviceIdToString(FInputDeviceId InDeviceId)"
  },
  {
    "label": "Conv_PlatformUserIdToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_PlatformUserIdToString(FPlatformUserId InPlatformUserId)"
  },
  {
    "label": "Conv_ColorToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_ColorToString(FLinearColor InColor)"
  },
  {
    "label": "Conv_NameToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_NameToString(FName InName)"
  },
  {
    "label": "Conv_MatrixToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Conv_MatrixToString(const FMatrix& InMatrix)"
  },
  {
    "label": "Conv_StringToName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Conv_StringToName(const FString& InString)"
  },
  {
    "label": "Conv_StringToInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Conv_StringToInt(const FString& InString)"
  },
  {
    "label": "Conv_StringToInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Conv_StringToInt64(const FString& InString)"
  },
  {
    "label": "Conv_StringToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Conv_StringToFloat(const FString& InString)"
  },
  {
    "label": "Conv_StringToDouble()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Conv_StringToDouble(const FString& InString)"
  },
  {
    "label": "Conv_StringToVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conv_StringToVector(const FString& InString, FVector& OutConvertedVector, bool& OutIsValid)"
  },
  {
    "label": "Conv_StringToVector3f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conv_StringToVector3f(const FString& InString, FVector3f& OutConvertedVector, bool& OutIsValid)"
  },
  {
    "label": "Conv_StringToVector2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conv_StringToVector2D(const FString& InString, FVector2D& OutConvertedVector2D, bool& OutIsValid)"
  },
  {
    "label": "Conv_StringToRotator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conv_StringToRotator(const FString& InString, FRotator& OutConvertedRotator, bool& OutIsValid)"
  },
  {
    "label": "Conv_StringToColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conv_StringToColor(const FString& InString, FLinearColor& OutConvertedColor, bool& OutIsValid)"
  },
  {
    "label": "BuildString_Float()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Float(const FString& AppendTo, const FString& Prefix, float InFloat, const FString& Suffix)"
  },
  {
    "label": "BuildString_Double()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Double(const FString& AppendTo, const FString& Prefix, double InDouble, const FString& Suffix)"
  },
  {
    "label": "BuildString_Int()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Int(const FString& AppendTo, const FString& Prefix, int32 InInt, const FString& Suffix)"
  },
  {
    "label": "BuildString_Bool()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Bool(const FString& AppendTo, const FString& Prefix, bool InBool, const FString& Suffix)"
  },
  {
    "label": "BuildString_Vector()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Vector(const FString& AppendTo, const FString& Prefix, FVector InVector, const FString& Suffix)"
  },
  {
    "label": "BuildString_IntVector()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_IntVector(const FString& AppendTo, const FString& Prefix, FIntVector InIntVector, const FString& Suffix)"
  },
  {
    "label": "BuildString_Vector2d()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Vector2d(const FString& AppendTo, const FString& Prefix, FVector2D InVector2d, const FString& Suffix)"
  },
  {
    "label": "BuildString_Rotator()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Rotator(const FString& AppendTo, const FString& Prefix, FRotator InRot, const FString& Suffix)"
  },
  {
    "label": "BuildString_Object()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Object(const FString& AppendTo, const FString& Prefix, class UObject* InObj, const FString& Suffix)"
  },
  {
    "label": "BuildString_Color()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Color(const FString& AppendTo, const FString& Prefix, FLinearColor InColor, const FString& Suffix)"
  },
  {
    "label": "BuildString_Name()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildString_Name(const FString& AppendTo, const FString& Prefix, FName InName, const FString& Suffix)"
  },
  {
    "label": "Concat_StrStr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Concat_StrStr(const FString& A, const FString& B)"
  },
  {
    "label": "EqualEqual_StrStr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_StrStr(const FString& A, const FString& B)"
  },
  {
    "label": "EqualEqual_StriStri()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualEqual_StriStri(const FString& A, const FString& B)"
  },
  {
    "label": "NotEqual_StrStr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_StrStr(const FString& A, const FString& B)"
  },
  {
    "label": "NotEqual_StriStri()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotEqual_StriStri(const FString& A, const FString& B)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Len(const FString& S)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty(const FString& InString)"
  },
  {
    "label": "GetSubstring()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSubstring(const FString& SourceString, int32 StartIndex = 0, int32 Length = 1)"
  },
  {
    "label": "FindSubstring()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindSubstring(const FString& SearchIn, const FString& Substring, bool bUseCase = false, bool bSearchFromEnd = false, int32 StartPosition = -1)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const FString& SearchIn, const FString& Substring, bool bUseCase = false, bool bSearchFromEnd = false)"
  },
  {
    "label": "GetCharacterAsNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCharacterAsNumber(const FString& SourceString, int32 Index = 0)"
  },
  {
    "label": "GetCharacterArrayFromString()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetCharacterArrayFromString(const FString& SourceString)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToUpper(const FString& SourceString)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLower(const FString& SourceString)"
  },
  {
    "label": "LeftPad()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LeftPad(const FString& SourceString, int32 ChCount)"
  },
  {
    "label": "RightPad()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RightPad(const FString& SourceString, int32 ChCount)"
  },
  {
    "label": "IsNumeric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNumeric(const FString& SourceString)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartsWith(const FString& SourceString, const FString& InPrefix, ESearchCase::Type SearchCase = ESearchCase::IgnoreCase)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWith(const FString& SourceString, const FString& InSuffix, ESearchCase::Type SearchCase = ESearchCase::IgnoreCase)"
  },
  {
    "label": "MatchesWildcard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesWildcard(const FString& SourceString, const FString& Wildcard, ESearchCase::Type SearchCase = ESearchCase::IgnoreCase)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Trim(const FString& SourceString)"
  },
  {
    "label": "TrimTrailing()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "TrimTrailing(const FString& SourceString)"
  },
  {
    "label": "CullArray()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CullArray(const FString& SourceString, TArray<FString>& InArray)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Reverse(const FString& SourceString)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Replace(const FString& SourceString, const FString& From, const FString& To, ESearchCase::Type SearchCase = ESearchCase::IgnoreCase)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Split(const FString& SourceString, const FString& InStr, FString& LeftS, FString& RightS, ESearchCase::Type SearchCase = ESearchCase::IgnoreCase, ESearchDir::Type SearchDir = ESearchDir::FromStart)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Left(const FString& SourceString, int32 Count)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LeftChop(const FString& SourceString, int32 Count)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Right(const FString& SourceString, int32 Count)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RightChop(const FString& SourceString, int32 Count)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Mid(const FString& SourceString, int32 Start, int32 Count)"
  },
  {
    "label": "TimeSecondsToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "TimeSecondsToString(float InSeconds)"
  }
]