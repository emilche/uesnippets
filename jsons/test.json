[
  {
    "label": "main()",
    "kind": "Method",
    "detail": "Function (# ifndef __LIBSTROPHE_TEST_H__ # define __LIBSTROPHE_TEST_H__ # include<stddef . h> # include<stdlib . h> # include<string . h> # include \" ostypes . h \" # define TEST_MAIN \\ int)",
    "insertText": "main(int argc, char **argv)"
  },
  {
    "label": "parser_suite()",
    "kind": "Method",
    "detail": "Function (\\ int num_failed ; \\ Suite* s =)",
    "insertText": "parser_suite()"
  },
  {
    "label": "srunner_create()",
    "kind": "Method",
    "detail": "Function (\\ SRunner* sr =)",
    "insertText": "srunner_create(s)"
  },
  {
    "label": "srunner_run_all()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "srunner_run_all(sr, CK_NORMAL)"
  },
  {
    "label": "srunner_ntests_failed()",
    "kind": "Method",
    "detail": "Function (\\ num_failed =)",
    "insertText": "srunner_ntests_failed(sr)"
  },
  {
    "label": "srunner_free()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "srunner_free(sr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "return(num_failed == 0)"
  },
  {
    "label": "ARRAY_SIZE()",
    "kind": "Method",
    "detail": "Function (\\ } # ifndef ARRAY_SIZE # define)",
    "insertText": "ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0])) #endif #define COMPARE(v1, v2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ const char* __v1 = v1 ; \\ const char* __v2 = v2 ; \\)",
    "insertText": "if(strcmp(__v1, __v2) != 0)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "printf(\"%s differs!\\n\" \\ \"expected: %s\\n\" \\ \"got: %s\\n\", \\ #v1, __v1, __v2)"
  },
  {
    "label": "exit()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "exit(1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) #define COMPARE_BUF(v1, len1, v2, len2)"
  },
  {
    "label": "__v1()",
    "kind": "Method",
    "detail": "Function (\\ const uint8_t*)",
    "insertText": "__v1(uint8_t *)(v1)"
  },
  {
    "label": "__v2()",
    "kind": "Method",
    "detail": "Function (\\ const uint8_t*)",
    "insertText": "__v2(uint8_t *)(v2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ size_t __len1 = len1 ; \\ size_t __len2 = len2 ; \\)",
    "insertText": "if(__len1 != __len2 || \\ memcmp(__v1, __v2, __len1) != 0)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "printf(\"%s differs!\\n\", #v1)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "printf(\"expected: 0x%s\\n\", \\ test_bin_to_hex(__v1, __len1))"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "printf(\"got: 0x%s\\n\", \\ test_bin_to_hex(__v2, __len2))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(0) void test_hex_to_bin(const char *hex, uint8_t *bin, size_t *bin_len)"
  },
  {
    "label": "test_bin_to_hex()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "test_bin_to_hex(const uint8_t *bin, size_t len)"
  }
]