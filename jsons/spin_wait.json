[
  {
    "label": "SPIN_FOR_1_SECOND_OR_UNTIL_TRUE()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SPIN_WAIT_H_ # define BASE_TEST_SPIN_WAIT_H_ # include \" base / threading / platform_thread . h \" # include \" base / time / time . h \" # define)",
    "insertText": "SPIN_FOR_1_SECOND_OR_UNTIL_TRUE(expression) \\ SPIN_FOR_TIMEDELTA_OR_UNTIL_TRUE(base::Seconds(1), (expression)) #define SPIN_FOR_TIMEDELTA_OR_UNTIL_TRUE(delta, expression)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (\\ base::TimeTicks spin_wait_start = base::)",
    "insertText": "Now()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ const base::TimeDelta kSpinWaitTimeout = delta ; \\)",
    "insertText": "while(!(expression))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(kSpinWaitTimeout < base::TimeTicks::Now() - spin_wait_start)"
  },
  {
    "label": "EXPECT_LE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EXPECT_LE((base::TimeTicks::Now() - spin_wait_start).InMilliseconds(), \\ kSpinWaitTimeout.InMilliseconds())"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ } \\ base::)",
    "insertText": "Sleep(base::Milliseconds(50))"
  }
]