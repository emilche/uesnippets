[
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCCodeEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCCodeEmitter"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFragment"
  },
  {
    "label": "MCDataFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCDataFragment"
  },
  {
    "label": "MCAsmBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackend"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "raw_pwrite_stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_pwrite_stream"
  },
  {
    "label": "MCObjectStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCObjectStreamer"
  },
  {
    "label": "EmitInstToData()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCOBJECTSTREAMER_H # define LLVM_MC_MCOBJECTSTREAMER_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / MC / MCAssembler . h \" # include \" llvm / MC / MCSection . h \" # include \" llvm / MC / MCStreamer . h \" namespace llvm { class MCAssembler ; class MCCodeEmitter ; class MCSubtargetInfo ; class MCExpr ; class MCFragment ; class MCDataFragment ; class MCAsmBackend ; class raw_ostream ; class raw_pwrite_stream ; class MCObjectStreamer : public MCStreamer { MCAssembler* Assembler ; MCSection::iterator CurInsertionPoint ; bool EmitEHFrame ; bool EmitDebugFrame ; SmallVector<MCSymbol*,2> PendingLabels ; void)",
    "insertText": "EmitInstToData(const MCInst &Inst, const MCSubtargetInfo&)"
  },
  {
    "label": "EmitCFIStartProcImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIStartProcImpl(MCDwarfFrameInfo &Frame)"
  },
  {
    "label": "EmitCFIEndProcImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFIEndProcImpl(MCDwarfFrameInfo &Frame)"
  },
  {
    "label": "MCObjectStreamer()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "MCObjectStreamer(MCContext &Context, MCAsmBackend &TAB, raw_pwrite_stream &OS, MCCodeEmitter *Emitter)"
  },
  {
    "label": "MCObjectStreamer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MCObjectStreamer()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "reset()"
  },
  {
    "label": "isIntegratedAssemblerRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIntegratedAssemblerRequired()"
  },
  {
    "label": "EmitCFISections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCFISections(bool EH, bool Debug)"
  },
  {
    "label": "getCurrentFragment()",
    "kind": "Method",
    "detail": "Function (protected : MCFragment*)",
    "insertText": "getCurrentFragment()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(MCFragment *F)"
  },
  {
    "label": "flushPendingLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flushPendingLabels(F)"
  },
  {
    "label": "getCurrentSectionOnly()",
    "kind": "Method",
    "detail": "Function (MCSection* CurSection =)",
    "insertText": "getCurrentSectionOnly()"
  },
  {
    "label": "getFragmentList()",
    "kind": "Method",
    "detail": "Function (CurSection ->)",
    "insertText": "getFragmentList().insert(CurInsertionPoint, F)"
  },
  {
    "label": "setParent()",
    "kind": "Method",
    "detail": "Function (F ->)",
    "insertText": "setParent(CurSection)"
  },
  {
    "label": "getOrCreateDataFragment()",
    "kind": "Method",
    "detail": "Function (} MCDataFragment*)",
    "insertText": "getOrCreateDataFragment()"
  },
  {
    "label": "changeSectionImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "changeSectionImpl(MCSection *Section, const MCExpr *Subsection)"
  },
  {
    "label": "flushPendingLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flushPendingLabels(MCFragment *F, uint64_t FOffset = 0)"
  },
  {
    "label": "visitUsedSymbol()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "visitUsedSymbol(const MCSymbol &Sym)"
  },
  {
    "label": "getAssembler()",
    "kind": "Method",
    "detail": "Function (MCAssembler&)",
    "insertText": "getAssembler()"
  },
  {
    "label": "EmitAssignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitAssignment(MCSymbol *Symbol, const MCExpr *Value)"
  },
  {
    "label": "EmitValueImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueImpl(const MCExpr *Value, unsigned Size, const SMLoc &Loc = SMLoc())"
  },
  {
    "label": "EmitULEB128Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitULEB128Value(const MCExpr *Value)"
  },
  {
    "label": "EmitSLEB128Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSLEB128Value(const MCExpr *Value)"
  },
  {
    "label": "EmitWeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitWeakReference(MCSymbol *Alias, const MCSymbol *Symbol)"
  },
  {
    "label": "ChangeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSection(MCSection *Section, const MCExpr *Subsection)"
  },
  {
    "label": "EmitInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInstruction(const MCInst &Inst, const MCSubtargetInfo& STI)"
  },
  {
    "label": "EmitInstToFragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitInstToFragment(const MCInst &Inst, const MCSubtargetInfo &)"
  },
  {
    "label": "EmitBundleAlignMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleAlignMode(unsigned AlignPow2)"
  },
  {
    "label": "EmitBundleLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleLock(bool AlignToEnd)"
  },
  {
    "label": "EmitBundleUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBundleUnlock()"
  },
  {
    "label": "EmitBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitBytes(StringRef Data)"
  },
  {
    "label": "EmitValueToAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValueToAlignment(unsigned ByteAlignment, int64_t Value = 0, unsigned ValueSize = 1, unsigned MaxBytesToEmit = 0)"
  },
  {
    "label": "EmitCodeAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCodeAlignment(unsigned ByteAlignment, unsigned MaxBytesToEmit = 0)"
  },
  {
    "label": "EmitValueToOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmitValueToOffset(const MCExpr *Offset, unsigned char Value)"
  },
  {
    "label": "EmitDwarfLocDirective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDwarfLocDirective(unsigned FileNo, unsigned Line, unsigned Column, unsigned Flags, unsigned Isa, unsigned Discriminator, StringRef FileName)"
  },
  {
    "label": "EmitDwarfAdvanceLineAddr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDwarfAdvanceLineAddr(int64_t LineDelta, const MCSymbol *LastLabel, const MCSymbol *Label, unsigned PointerSize)"
  },
  {
    "label": "EmitDwarfAdvanceFrameAddr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDwarfAdvanceFrameAddr(const MCSymbol *LastLabel, const MCSymbol *Label)"
  },
  {
    "label": "EmitGPRel32Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitGPRel32Value(const MCExpr *Value)"
  },
  {
    "label": "EmitGPRel64Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitGPRel64Value(const MCExpr *Value)"
  },
  {
    "label": "EmitFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitFill(uint64_t NumBytes, uint8_t FillValue)"
  },
  {
    "label": "EmitZeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitZeros(uint64_t NumBytes)"
  },
  {
    "label": "FinishImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishImpl()"
  },
  {
    "label": "emitAbsoluteSymbolDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitAbsoluteSymbolDiff(const MCSymbol *Hi, const MCSymbol *Lo, unsigned Size)"
  },
  {
    "label": "mayHaveInstructions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayHaveInstructions(MCSection &Sec)"
  }
]