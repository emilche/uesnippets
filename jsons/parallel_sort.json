[
  {
    "label": "quick_sort_range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "quick_sort_range"
  },
  {
    "label": "quick_sort_pretest_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "quick_sort_pretest_body"
  },
  {
    "label": "quick_sort_body",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "quick_sort_body"
  },
  {
    "label": "median_of_three()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_parallel_sort_H # define __TBB_parallel_sort_H # include \" parallel_for . h \" # include \" blocked_range . h \" # include \" internal / _range_iterator . h \" # include<algorithm> # include<iterator> # include<functional> # if __TBB_TASK_GROUP_CONTEXT # include \" tbb_profiling . h \" # endif namespace tbb { namespace interface9 { namespace internal { using tbb::internal::no_assign ; template<RandomAccessIterator,Compare> class quick_sort_range : private no_assign { size_t)",
    "insertText": "median_of_three(const RandomAccessIterator &array, size_t l, size_t m, size_t r)"
  },
  {
    "label": "pseudo_median_of_nine()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "pseudo_median_of_nine(const RandomAccessIterator &array, const quick_sort_range &range)"
  },
  {
    "label": "median_of_three()",
    "kind": "Method",
    "detail": "Function (size_t offset = range . size / 8 u ; return)",
    "insertText": "median_of_three(array, median_of_three(array, 0, offset, offset*2), median_of_three(array, offset*3, offset*4, offset*5), median_of_three(array, offset*6, offset*7, range.size - 1))"
  },
  {
    "label": "split_range()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "split_range(quick_sort_range& range)"
  },
  {
    "label": "pseudo_median_of_nine()",
    "kind": "Method",
    "detail": "Function (using std::iter_swap ; RandomAccessIterator array = range . begin ; RandomAccessIterator key0 = range . begin ; size_t m =)",
    "insertText": "pseudo_median_of_nine(array, range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i = 0 ; size_t j = range . size ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(i<j, NULL)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(comp( *key0, array[j] ))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + i ; })",
    "insertText": "while(comp( array[i],*key0 ))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(array+i, array+j)"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} partition :)",
    "insertText": "iter_swap(array+j, key0)"
  },
  {
    "label": "quick_sort_range()",
    "kind": "Method",
    "detail": "Function (i = j + 1 ; size_t new_range_size = range . size - i ; range . size = j ; return new_range_size ; } public : const size_t grainsize = 5 0 0 ; const Compare& comp ; size_t size ; RandomAccessIterator begin ;)",
    "insertText": "quick_sort_range(RandomAccessIterator begin_, size_t size_, const Compare &comp_ ) : comp(comp_), size(size_), begin(begin_)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "quick_sort_pretest_body()",
    "kind": "Method",
    "detail": "Function (} } ; # if __TBB_TASK_GROUP_CONTEXT template<RandomAccessIterator,Compare> class quick_sort_pretest_body : no_assign { const Compare& comp ; public :)",
    "insertText": "quick_sort_pretest_body(const Compare &_comp) : comp(_comp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()( const blocked_range<RandomAccessIterator>& range)"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (task& my_task =)",
    "insertText": "self()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (RandomAccessIterator my_end = range .)",
    "insertText": "end()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i = 0 ;)",
    "insertText": "for(RandomAccessIterator k = range.begin(); k != my_end; ++k, ++i)"
  },
  {
    "label": "cancel_group_execution()",
    "kind": "Method",
    "detail": "Function (my_task .)",
    "insertText": "cancel_group_execution()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (break ; } } } } ; # endif template<RandomAccessIterator,Compare> struct quick_sort_body { void)",
    "insertText": "operator()( const quick_sort_range<RandomAccessIterator,Compare>& range)"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sort(range.begin, range.begin + range.size, range.comp)"
  },
  {
    "label": "parallel_quick_sort()",
    "kind": "Method",
    "detail": "Function (} } ; template<RandomAccessIterator,Compare> void)",
    "insertText": "parallel_quick_sort(RandomAccessIterator begin, RandomAccessIterator end, const Compare& comp)"
  },
  {
    "label": "my_context()",
    "kind": "Method",
    "detail": "Function (# if __TBB_TASK_GROUP_CONTEXT task_group_context)",
    "insertText": "my_context(PARALLEL_SORT)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (const int serial_cutoff = 9 ;)",
    "insertText": "__TBB_ASSERT(begin + serial_cutoff < end, \"min_parallel_size is smaller than serial cutoff?\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RandomAccessIterator k = begin ;)",
    "insertText": "for(; k != begin + serial_cutoff; ++k)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (} } } template<RandomAccessIterator,Compare> void)",
    "insertText": "parallel_sort(RandomAccessIterator begin, RandomAccessIterator end, const Compare& comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int min_parallel_size = 5 0 0 ;)",
    "insertText": "if(end > begin)"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sort(begin, end, comp)"
  },
  {
    "label": "parallel_quick_sort()",
    "kind": "Method",
    "detail": "Function (} else { interface9::)",
    "insertText": "parallel_quick_sort(begin, end, comp)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (} } } template<RandomAccessIterator> void)",
    "insertText": "parallel_sort(RandomAccessIterator begin, RandomAccessIterator end)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(begin, end, std::less< typename std::iterator_traits<RandomAccessIterator>::value_type >())"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (} template<Range,Compare> void)",
    "insertText": "parallel_sort(Range& rng, const Compare& comp)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(tbb::internal::first(rng), tbb::internal::last(rng), comp)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (} template<Range> void)",
    "insertText": "parallel_sort(Range& rng)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(tbb::internal::first(rng), tbb::internal::last(rng))"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "parallel_sort(T * begin, T * end)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(begin, end, std::less< T >())"
  }
]