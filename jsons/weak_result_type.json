[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__has_result_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__has_result_type"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__derives_from_unary_function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__derives_from_unary_function"
  },
  {
    "label": "__two",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__two"
  },
  {
    "label": "_Ap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ap"
  },
  {
    "label": "_Rp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rp"
  },
  {
    "label": "__derives_from_binary_function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__derives_from_binary_function"
  },
  {
    "label": "_A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_A1"
  },
  {
    "label": "_A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_A2"
  },
  {
    "label": "__maybe_derive_from_unary_function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__maybe_derive_from_unary_function"
  },
  {
    "label": "__maybe_derive_from_binary_function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__maybe_derive_from_binary_function"
  },
  {
    "label": "__weak_result_type_imp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__weak_result_type_imp"
  },
  {
    "label": "__weak_result_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__weak_result_type"
  },
  {
    "label": "_Cp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Cp"
  },
  {
    "label": "_A3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_A3"
  },
  {
    "label": "__invoke_return",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__invoke_return"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_WEAK_RESULT_TYPE_H # define _LIBCPP___FUNCTIONAL_WEAK_RESULT_TYPE_H # include<__config> # include<__functional / binary_function . h> # include<__functional / unary_function . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (private : template<class _Up> false_type)",
    "insertText": "__test(...)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<class _Up> true_type)",
    "insertText": "__test(typename _Up::result_type* = 0)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : const bool value =)",
    "insertText": "decltype(__test<_Tp>(0))"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<class _Ap,class _Rp> __unary_function<_Ap,_Rp>)",
    "insertText": "__test(const volatile __unary_function<_Ap, _Rp>*)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : const bool value = ! is_same<)",
    "insertText": "decltype(__test((_Tp*)0))"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (template<class _A1,class _A2,class _Rp> __binary_function<_A1,_A2,_Rp>)",
    "insertText": "__test(const volatile __binary_function<_A1, _A2, _Rp>*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp,bool = __derives_from_unary_function<_Tp>::value> struct __maybe_derive_from_unary_function : public __derives_from_unary_function<_Tp>::type { } ; template<class _Tp> struct __maybe_derive_from_unary_function<_Tp,false> { } ; template<class _Tp,bool = __derives_from_binary_function<_Tp>::value> struct __maybe_derive_from_binary_function : public __derives_from_binary_function<_Tp>::type { } ; template<class _Tp> struct __maybe_derive_from_binary_function<_Tp,false> { } ; template<class _Tp,bool = __has_result_type<_Tp>::value> struct __weak_result_type_imp : public __maybe_derive_from_unary_function<_Tp>,public __maybe_derive_from_binary_function<_Tp> { # if _LIBCPP_STD_VER<= 1 7 | |)",
    "insertText": "defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Tp> struct __weak_result_type_imp<_Tp,false> : public __maybe_derive_from_unary_function<_Tp>,public __maybe_derive_from_binary_function<_Tp> { } ; template<class _Tp> struct __weak_result_type : public __weak_result_type_imp<_Tp> { } ; template<class _Rp> struct __weak_result_type<)",
    "insertText": "_Rp()"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Rp> struct __weak_result_type<)",
    "insertText": "_Rp(&)()"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Rp> struct __weak_result_type<)",
    "insertText": "_Rp(*)()"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Rp,class _A1> struct __weak_result_type<)",
    "insertText": "_Rp(_A1)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _A1> struct __weak_result_type<)",
    "insertText": "_Rp(&)(_A1)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _A1> struct __weak_result_type<)",
    "insertText": "_Rp(*)(_A1)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _Cp> struct __weak_result_type<)",
    "insertText": "_Rp(_Cp::*)()"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _A1,class _A2> struct __weak_result_type<)",
    "insertText": "_Rp(_A1, _A2)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _A1,class _A2> struct __weak_result_type<)",
    "insertText": "_Rp(*)(_A1, _A2)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _A1,class _A2> struct __weak_result_type<)",
    "insertText": "_Rp(&)(_A1, _A2)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _Cp,class _A1> struct __weak_result_type<)",
    "insertText": "_Rp(_Cp::*)(_A1)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Rp,class _A1,class _A2,class _A3,class . . . _A4> struct __weak_result_type<)",
    "insertText": "_Rp(_A1, _A2, _A3, _A4...)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Rp,class _A1,class _A2,class _A3,class . . . _A4> struct __weak_result_type<)",
    "insertText": "_Rp(&)(_A1, _A2, _A3, _A4...)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Rp,class _A1,class _A2,class _A3,class . . . _A4> struct __weak_result_type<)",
    "insertText": "_Rp(*)(_A1, _A2, _A3, _A4...)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Rp,class _Cp,class _A1,class _A2,class . . . _A3> struct __weak_result_type<)",
    "insertText": "_Rp(_Cp::*)(_A1, _A2, _A3...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# endif } ; template<class _Tp,class . . . _Args> struct __invoke_return { typedef)",
    "insertText": "decltype(_VSTD::__invoke(declval<_Tp>(), declval<_Args>()...))"
  }
]