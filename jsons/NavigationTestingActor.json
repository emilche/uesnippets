[
  {
    "label": "ANavigationTestingActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationTestingActor"
  },
  {
    "label": "UNavigationInvokerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationInvokerComponent"
  },
  {
    "label": "FNavTestTickHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavTestTickHelper"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UCapsuleComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCapsuleComponent"
  },
  {
    "label": "UNavTestRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavTestRenderingComponent"
  },
  {
    "label": "UNavigationQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationQueryFilter"
  },
  {
    "label": "FRecastDebugPathfindingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecastDebugPathfindingData"
  },
  {
    "label": "INavigationPathGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationPathGenerator"
  },
  {
    "label": "FNavTestTickHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # endif # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / Navigation / NavAgentInterface . h \" # include \" NavigationData . h \" # include \" Tickable . h \" # include \" AI / Navigation / NavPathObserverInterface . h \" # include \" NavMesh / RecastNavMesh . h \" # include \" NavigationTestingActor . generated . h \" class ANavigationTestingActor ; class UNavigationInvokerComponent ; struct FNavTestTickHelper : FTickableGameObject { TWeakObjectPtr<ANavigationTestingActor> Owner ;)",
    "insertText": "FNavTestTickHelper() : Owner(NULL)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum Type : int { TotalCost,HeuristicOnly,RealCostOnly,} ; })",
    "insertText": "UCLASS(hidecategories=(Object, Actor, Input, Rendering, Replication, HLOD, Cooking), showcategories=(\"Input|MouseInput\", \"Input|TouchInput\"), Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY()"
  },
  {
    "label": "ANavigationTestingActor()",
    "kind": "Method",
    "detail": "Function (FVector ClosestWallLocation ; FVector RaycastHitLocation ; bool bNavDataIsReadyInRadius ; bool bNavDataIsReadyToQueryTargetActor ; bool bRaycastToQueryTargetActorResult ; bool bRaycastToQueryTargetEndsInCorridor ; # if WITH_RECAST&& WITH_EDITORONLY_DATA TArray<struct FRecastDebugPathfindingData> DebugSteps ; FNavTestTickHelper* TickHelper ; # endif FNavPathSharedPtr LastPath ; FNavigationPath::FPathObserverDelegate::FDelegate PathObserver ; ~)",
    "insertText": "ANavigationTestingActor()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PreEditChange(FProperty* PropertyThatWillChange)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditMove(bool bFinished)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "TickMe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickMe()"
  },
  {
    "label": "GetNavAgentPropertiesRef()",
    "kind": "Method",
    "detail": "Function (# endif const FNavAgentProperties&)",
    "insertText": "GetNavAgentPropertiesRef()"
  },
  {
    "label": "GetMoveGoalReachTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMoveGoalReachTest(const AActor* MovingActor, const FVector& MoveOffset, FVector& GoalOffset, float& GoalRadius, float& GoalHalfHeight)"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPathUpdated(class INavigationPathGenerator* PathGenerator)"
  },
  {
    "label": "OnPathInvalid()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnPathInvalid(class INavigationPathGenerator* PathGenerator)"
  },
  {
    "label": "OnPathFailed()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnPathFailed(class INavigationPathGenerator* PathGenerator)"
  },
  {
    "label": "UpdateNavData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateNavData()"
  },
  {
    "label": "UpdatePathfinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePathfinding()"
  },
  {
    "label": "SearchPathTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchPathTo(ANavigationTestingActor* Goal)"
  },
  {
    "label": "OnPathEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathEvent(FNavigationPath* InvalidatedPath, ENavPathEvent::Type Event)"
  },
  {
    "label": "BuildPathFindingQuery()",
    "kind": "Method",
    "detail": "Function (FPathFindingQuery)",
    "insertText": "BuildPathFindingQuery(const ANavigationTestingActor* Goal)"
  },
  {
    "label": "GetCapsuleComponent()",
    "kind": "Method",
    "detail": "Function (class UCapsuleComponent*)",
    "insertText": "GetCapsuleComponent()"
  },
  {
    "label": "UpdateTargetActorQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetActorQueries()"
  },
  {
    "label": "FindClosestWallLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindClosestWallLocation()"
  },
  {
    "label": "CheckIfNavDataIsReadyInRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfNavDataIsReadyInRadius()"
  },
  {
    "label": "CheckIfNavDataIsReadyToActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfNavDataIsReadyToActor(const AActor* TargetActor)"
  },
  {
    "label": "CheckRaycastToActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckRaycastToActor(const AActor* TargetActor, FVector& OutHitLocation, bool& bOutIsRaycastEndInCorridor)"
  },
  {
    "label": "OnQueryTargetActorTransformUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQueryTargetActorTransformUpdated(USceneComponent* InRootComponent, EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport)"
  }
]