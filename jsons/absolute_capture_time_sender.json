[
  {
    "label": "AbsoluteCaptureTimeSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbsoluteCaptureTimeSender"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_ABSOLUTE_CAPTURE_TIME_SENDER_H_ # define MODULES_RTP_RTCP_SOURCE_ABSOLUTE_CAPTURE_TIME_SENDER_H_ # include \" api / array_view . h \" # include \" api / rtp_headers . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class AbsoluteCaptureTimeSender { public : TimeDelta kInterpolationMaxInterval =)",
    "insertText": "Millis(1000)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (TimeDelta kInterpolationMaxError =)",
    "insertText": "Millis(1)"
  },
  {
    "label": "AbsoluteCaptureTimeSender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteCaptureTimeSender(Clock* clock, bool always_send_extension = false)"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetSource(uint32_t ssrc, rtc::ArrayView<const uint32_t> csrcs)"
  },
  {
    "label": "OnSendPacket()",
    "kind": "Method",
    "detail": "Function (absl::optional<AbsoluteCaptureTime>)",
    "insertText": "OnSendPacket(uint32_t source, uint32_t rtp_timestamp, uint32_t rtp_clock_frequency, uint64_t absolute_capture_timestamp, absl::optional<int64_t> estimated_capture_clock_offset)"
  },
  {
    "label": "ShouldSendExtension()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ShouldSendExtension(Timestamp send_time, uint32_t source, uint32_t rtp_timestamp, uint32_t rtp_clock_frequency, uint64_t absolute_capture_timestamp, absl::optional<int64_t> estimated_capture_clock_offset) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const bool always_send_extension_ ; Mutex mutex_ ; Timestamp last_send_time_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]