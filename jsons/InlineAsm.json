[
  {
    "label": "PointerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointerType"
  },
  {
    "label": "FunctionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionType"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "InlineAsmKeyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InlineAsmKeyType"
  },
  {
    "label": "ConstantClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantClass"
  },
  {
    "label": "ConstantUniqueMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantUniqueMap"
  },
  {
    "label": "InlineAsm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InlineAsm"
  },
  {
    "label": "AsmDialect",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AsmDialect"
  },
  {
    "label": "ConstraintPrefix",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConstraintPrefix"
  },
  {
    "label": "SubConstraintInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubConstraintInfo"
  },
  {
    "label": "ConstraintInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstraintInfo"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "InlineAsm()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_INLINEASM_H # define LLVM_IR_INLINEASM_H # include \" llvm / ADT / StringRef . h \" # include \" llvm / IR / Value . h \" # include<vector> namespace llvm { class PointerType ; class FunctionType ; class Module ; struct InlineAsmKeyType ; template<class ConstantClass> class ConstantUniqueMap ; class InlineAsm : public Value { public : enum AsmDialect { AD_ATT,AD_Intel } ; private : struct InlineAsmKeyType ; class ConstantUniqueMap<InlineAsm> ;)",
    "insertText": "InlineAsm(const InlineAsm &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const InlineAsm&)"
  },
  {
    "label": "InlineAsm()",
    "kind": "Method",
    "detail": "Function (std::string AsmString,Constraints ; bool HasSideEffects ; bool IsAlignStack ; AsmDialect Dialect ;)",
    "insertText": "InlineAsm(PointerType *Ty, const std::string &AsmString, const std::string &Constraints, bool hasSideEffects, bool isAlignStack, AsmDialect asmDialect)"
  },
  {
    "label": "InlineAsm()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InlineAsm()"
  },
  {
    "label": "destroyConstant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroyConstant()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (public : InlineAsm*)",
    "insertText": "get(FunctionType *Ty, StringRef AsmString, StringRef Constraints, bool hasSideEffects, bool isAlignStack = false, AsmDialect asmDialect = AD_ATT)"
  },
  {
    "label": "hasSideEffects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasSideEffects()"
  },
  {
    "label": "getFunctionType()",
    "kind": "Method",
    "detail": "Function (} FunctionType*)",
    "insertText": "getFunctionType()"
  },
  {
    "label": "getAsmString()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getAsmString()"
  },
  {
    "label": "SubConstraintInfo()",
    "kind": "Method",
    "detail": "Function (enum ConstraintPrefix { isInput,isOutput,isClobber } ; typedef std::vector<std::string> ConstraintCodeVector ; struct SubConstraintInfo { signed char MatchingInput ; ConstraintCodeVector Codes ;)",
    "insertText": "SubConstraintInfo() : MatchingInput(-1)"
  },
  {
    "label": "hasMatchingInput()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::vector<SubConstraintInfo> SubConstraintInfoVector ; struct ConstraintInfo ; typedef std::vector<ConstraintInfo> ConstraintInfoVector ; struct ConstraintInfo { ConstraintPrefix Type ; bool isEarlyClobber ; signed char MatchingInput ; bool)",
    "insertText": "hasMatchingInput()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(StringRef Str, ConstraintInfoVector &ConstraintsSoFar)"
  },
  {
    "label": "selectAlternative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "selectAlternative(unsigned index)"
  },
  {
    "label": "ParseConstraints()",
    "kind": "Method",
    "detail": "Function (} ; ConstraintInfoVector)",
    "insertText": "ParseConstraints(StringRef ConstraintString)"
  },
  {
    "label": "ParseConstraints()",
    "kind": "Method",
    "detail": "Function (ConstraintInfoVector)",
    "insertText": "ParseConstraints()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Value *V)"
  },
  {
    "label": "getFlagWord()",
    "kind": "Method",
    "detail": "Function (} enum : uint32_t { Op_InputChain = 0,Op_AsmString = 1,Op_MDNode = 2,Op_ExtraInfo = 3,Op_FirstOperand = 4,MIOp_AsmString = 0,MIOp_ExtraInfo = 1,MIOp_FirstOperand = 2,Extra_HasSideEffects = 1,Extra_IsAlignStack = 2,Extra_AsmDialect = 4,Extra_MayLoad = 8,Extra_MayStore = 1 6,Kind_RegUse = 1,Kind_RegDef = 2,Kind_RegDefEarlyClobber = 3,Kind_Clobber = 4,Kind_Imm = 5,Kind_Mem = 6,Constraint_Unknown = 0,Constraint_es,Constraint_i,Constraint_m,Constraint_o,Constraint_v,Constraint_Q,Constraint_R,Constraint_S,Constraint_T,Constraint_Um,Constraint_Un,Constraint_Uq,Constraint_Us,Constraint_Ut,Constraint_Uv,Constraint_Uy,Constraint_X,Constraint_Z,Constraint_ZC,Constraint_Zy,Constraints_Max = Constraint_Zy,Constraints_ShiftAmount = 1 6,Flag_MatchingOperand = 0 x80000000 } ; unsigned)",
    "insertText": "getFlagWord(unsigned Kind, unsigned NumOps)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(((NumOps << 3) & ~0xffff) == 0 && \"Too many inline asm operands!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Kind >= Kind_RegUse && Kind <= Kind_Mem && \"Invalid Kind\")"
  },
  {
    "label": "getFlagWordForMatchingOp()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getFlagWordForMatchingOp(unsigned InputFlag, unsigned MatchedOperandNo)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MatchedOperandNo <= 0x7fff && \"Too big matched operand\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((InputFlag & ~0xffff) == 0 && \"High bits already contain data\")"
  },
  {
    "label": "getFlagWordForRegClass()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getFlagWordForRegClass(unsigned InputFlag, unsigned RC)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (+ + RC ;)",
    "insertText": "assert(RC <= 0x7fff && \"Too large register class ID\")"
  },
  {
    "label": "getFlagWordForMem()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getFlagWordForMem(unsigned InputFlag, unsigned Constraint)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Constraint <= 0x7fff && \"Too large a memory constraint ID\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Constraint <= Constraints_Max && \"Unknown constraint ID\")"
  },
  {
    "label": "convertMemFlagWordToMatchingFlagWord()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "convertMemFlagWordToMatchingFlagWord(unsigned InputFlag)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMemKind(InputFlag))"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getKind(unsigned Flags)"
  },
  {
    "label": "isImmKind()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isImmKind(unsigned Flag)"
  },
  {
    "label": "isMemKind()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMemKind(unsigned Flag)"
  },
  {
    "label": "isRegDefEarlyClobberKind()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRegDefEarlyClobberKind(unsigned Flag)"
  },
  {
    "label": "isClobberKind()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isClobberKind(unsigned Flag)"
  },
  {
    "label": "getMemoryConstraintID()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getMemoryConstraintID(unsigned Flag)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isMemKind(Flag))"
  },
  {
    "label": "getNumOperandRegisters()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumOperandRegisters(unsigned Flag)"
  },
  {
    "label": "isUseOperandTiedToDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUseOperandTiedToDef(unsigned Flag, unsigned &Idx)"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Idx(Flag & ~Flag_MatchingOperand)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned High = Flag>> 1 6 ;)",
    "insertText": "if(!High)"
  }
]