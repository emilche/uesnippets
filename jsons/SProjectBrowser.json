[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FProjectCategory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectCategory"
  },
  {
    "label": "FProjectItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SProjectBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectBrowser"
  },
  {
    "label": "SSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSearchBox"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Optional . h \" # include \" Misc / TextFilter . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateConstants . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STileView . h \" class ITableRow ; class SToolTip ; class SVerticalBox ; class SWidget ; struct FGeometry ; struct FKeyEvent ; struct FProjectCategory ; struct FProjectItem ; enum class EProjectSortOption : uint8 { LastAccessTime,Version,Alphabetical,} ; enum class ECheckBoxState : uint8 ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FProjectSelectionChanged, FString)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (class SProjectBrowser : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE(FNewProjectScreenRequested) SLATE_BEGIN_ARGS(SProjectBrowser)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FProjectSelectionChanged, OnSelectionChanged)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_END_ARGS() public: SProjectBrowser()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "HasProjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProjects()"
  },
  {
    "label": "HasSelectedProjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedProjectFile()"
  },
  {
    "label": "GetSelectedProjectFile()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetSelectedProjectFile()"
  },
  {
    "label": "GetSelectedProjectName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedProjectName()"
  },
  {
    "label": "OpenSelectedProject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSelectedProject()"
  },
  {
    "label": "OnBrowseToProject()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnBrowseToProject()"
  },
  {
    "label": "OnOpenMarketplace()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnOpenMarketplace()"
  },
  {
    "label": "OnOpenProject()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnOpenProject()"
  },
  {
    "label": "OnAutoloadLastProjectChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAutoloadLastProjectChanged(ECheckBoxState NewState)"
  },
  {
    "label": "MakeProjectViewWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<ITableRow>)",
    "insertText": "MakeProjectViewWidget(TSharedPtr<FProjectItem> ProjectItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "MakeProjectToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SToolTip>)",
    "insertText": "MakeProjectToolTip(TSharedPtr<FProjectItem> ProjectItem)"
  },
  {
    "label": "AddToToolTipInfoBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToToolTipInfoBox(const TSharedRef<SVerticalBox>& InfoBox, const FText& Key, const FText& Value)"
  },
  {
    "label": "OnGetContextMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnGetContextMenuContent()"
  },
  {
    "label": "ExecuteFindInExplorer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteFindInExplorer()"
  },
  {
    "label": "CanExecuteFindInExplorer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteFindInExplorer()"
  },
  {
    "label": "GetSelectedProjectItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FProjectItem>)",
    "insertText": "GetSelectedProjectItem()"
  },
  {
    "label": "FindProjects()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "FindProjects()"
  },
  {
    "label": "OpenProject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenProject(const FString& ProjectFile)"
  },
  {
    "label": "PopulateFilteredProjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateFilteredProjects()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleOpenProjectButtonIsEnabled()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HandleOpenProjectButtonIsEnabled()"
  },
  {
    "label": "HandleProjectItemDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProjectItemDoubleClick(TSharedPtr<FProjectItem> ProjectItem)"
  },
  {
    "label": "HandleProjectViewSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProjectViewSelectionChanged(TSharedPtr<FProjectItem> ProjectItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InText)"
  },
  {
    "label": "GetProjectCategoryVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetProjectCategoryVisibility(const TSharedRef<FProjectCategory> InCategory)"
  },
  {
    "label": "GetNoProjectsErrorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNoProjectsErrorVisibility()"
  },
  {
    "label": "GetNoProjectsAfterFilterErrorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNoProjectsAfterFilterErrorVisibility()"
  },
  {
    "label": "GetItemHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetItemHighlightText()"
  },
  {
    "label": "SortProjectTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortProjectTiles(EProjectSortOption NewSortOption)"
  },
  {
    "label": "GetSortOptionCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetSortOptionCheckState(EProjectSortOption TestOption)"
  }
]