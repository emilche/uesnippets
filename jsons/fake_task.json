[
  {
    "label": "FakeTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeTask"
  },
  {
    "label": "FakeTaskTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeTaskTiming"
  },
  {
    "label": "FakeTask()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_TEST_FAKE_TASK_H_ # define BASE_TASK_SEQUENCE_MANAGER_TEST_FAKE_TASK_H_ # include \" base / task / sequence_manager / task_queue . h \" # include \" base / task / sequence_manager / tasks . h \" namespace base { namespace sequence_manager { class FakeTask : public Task { public :)",
    "insertText": "FakeTask()"
  },
  {
    "label": "FakeTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeTask(TaskType task_type)"
  },
  {
    "label": "FakeTaskTiming()",
    "kind": "Method",
    "detail": "Function (} ; class FakeTaskTiming : public TaskQueue::TaskTiming { public :)",
    "insertText": "FakeTaskTiming()"
  },
  {
    "label": "FakeTaskTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeTaskTiming(TimeTicks start, TimeTicks end)"
  },
  {
    "label": "FakeTaskTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeTaskTiming(TimeTicks start, TimeTicks end, ThreadTicks thread_start, ThreadTicks thread_end)"
  }
]