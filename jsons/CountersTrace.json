[
  {
    "label": "ETraceCounterType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETraceCounterType"
  },
  {
    "label": "ETraceCounterDisplayHint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETraceCounterDisplayHint"
  },
  {
    "label": "ETraceCounterNameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETraceCounterNameType"
  },
  {
    "label": "FCountersTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCountersTrace"
  },
  {
    "label": "TCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCounter"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Misc / Build . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Trace / Config . h \" # include \" Trace / Detail / Channel . h \" # include \" Trace / Detail / Channel . inl \" # include \" Trace / Trace . h \" # include<atomic> # if !)",
    "insertText": "defined(COUNTERSTRACE_ENABLED)"
  },
  {
    "label": "UE_TRACE_CHANNEL_EXTERN()",
    "kind": "Method",
    "detail": "Function (TraceCounterType_Int = 0,TraceCounterType_Float = 1,} ; enum ETraceCounterDisplayHint { TraceCounterDisplayHint_None = 0,TraceCounterDisplayHint_Memory = 1,} ; enum ETraceCounterNameType { TraceCounterNameType_Static = 0,TraceCounterNameType_Dynamic = 0 x10,TraceCounterNameType_AllocNameCopy = 0 x20,} ; # if COUNTERSTRACE_ENABLED)",
    "insertText": "UE_TRACE_CHANNEL_EXTERN(CountersChannel, CORE_API)"
  },
  {
    "label": "OutputInitCounter()",
    "kind": "Method",
    "detail": "Function (struct FCountersTrace { uint16)",
    "insertText": "OutputInitCounter(const TCHAR* CounterName, ETraceCounterType CounterType, ETraceCounterDisplayHint CounterDisplayHint)"
  },
  {
    "label": "OutputSetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputSetValue(uint16 CounterId, int64 Value)"
  },
  {
    "label": "OutputSetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputSetValue(uint16 CounterId, double Value)"
  },
  {
    "label": "AllocAndCopyCounterName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "AllocAndCopyCounterName(const TCHAR* InCounterName)"
  },
  {
    "label": "FreeCounterName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeCounterName(const TCHAR* InCounterName)"
  },
  {
    "label": "TCounter()",
    "kind": "Method",
    "detail": "Function (template<ValueType,ETraceCounterType CounterType,StoredType = ValueType,bool bUnchecked = false> class TCounter { public :)",
    "insertText": "TCounter()"
  },
  {
    "label": "TCounter()",
    "kind": "Method",
    "detail": "Function (template<int N>)",
    "insertText": "TCounter(const TCHAR(&InCounterName)[N], ETraceCounterDisplayHint InCounterDisplayHint) : Value(0) , CounterName(InCounterName) , CounterId(0) , CounterDisplayHint(InCounterDisplayHint)"
  },
  {
    "label": "OutputInitCounter()",
    "kind": "Method",
    "detail": "Function (CounterId =)",
    "insertText": "OutputInitCounter(InCounterName, CounterType, CounterDisplayHint)"
  },
  {
    "label": "TCounter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCounter(ETraceCounterNameType InCounterNameType, const TCHAR* InCounterName, ETraceCounterDisplayHint InCounterDisplayHint) : Value(0) , CounterName(InCounterName) , CounterId(0) , CounterDisplayHint(InCounterDisplayHint)"
  },
  {
    "label": "AllocAndCopyCounterName()",
    "kind": "Method",
    "detail": "Function (CounterName =)",
    "insertText": "AllocAndCopyCounterName(InCounterName)"
  },
  {
    "label": "ETraceCounterDisplayHint()",
    "kind": "Method",
    "detail": "Function (CounterDisplayHint =)",
    "insertText": "ETraceCounterDisplayHint(uint8(CounterDisplayHint) | uint8(TraceCounterNameType_AllocNameCopy))"
  },
  {
    "label": "FreeCounterName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeCounterName(CounterName)"
  },
  {
    "label": "LateInit()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "LateInit()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32 OldId = CounterId .)",
    "insertText": "load()"
  },
  {
    "label": "OutputInitCounter()",
    "kind": "Method",
    "detail": "Function (uint32 NewId =)",
    "insertText": "OutputInitCounter(CounterName, CounterType, ETraceCounterDisplayHint(uint8(CounterDisplayHint) & 0xF))"
  },
  {
    "label": "compare_exchange_weak()",
    "kind": "Method",
    "detail": "Function (CounterId .)",
    "insertText": "compare_exchange_weak(OldId, NewId)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ValueType)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value = InValue ;)",
    "insertText": "if(UE_TRACE_CHANNELEXPR_IS_ENABLED(CountersChannel))"
  },
  {
    "label": "OutputSetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputSetValue(uint16(CounterId), Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Add(ValueType InValue)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Subtract(ValueType InValue)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Increment()"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Decrement()"
  },
  {
    "label": "__TRACE_CHECK_COUNTER_NAME()",
    "kind": "Method",
    "detail": "Function (} } private : StoredType Value ; const TCHAR* CounterName ; std::atomic<uint32> CounterId ; ETraceCounterDisplayHint CounterDisplayHint ; } ; using FCounterInt = TCounter<int64,TraceCounterType_Int> ; using FCounterAtomicInt = TCounter<int64,TraceCounterType_Int,std::atomic<int64>> ; using FCounterFloat = TCounter<double,TraceCounterType_Float> ; using FCounterAtomicFloat = TCounter<double,TraceCounterType_Float,std::atomic<double>> ; using FCounterUncheckedInt = TCounter<int64,TraceCounterType_Int,int64,true> ; using FCounterUncheckedAtomicInt = TCounter<int64,TraceCounterType_Int,std::atomic<int64>,true> ; using FCounterUncheckedFloat = TCounter<double,TraceCounterType_Float,double,true> ; using FCounterUncheckedAtomicFloat = TCounter<double,TraceCounterType_Float,std::atomic<double>,true> ; } ; # define)",
    "insertText": "__TRACE_CHECK_COUNTER_NAME(CounterDisplayName) \\ static_assert(std::is_const_v<std::remove_reference_t<decltype(CounterDisplayName)>>, \"CounterDisplayName string must be a const TCHAR array.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(TIsArrayOrRefOfTypeByPredicate<decltype(CounterDisplayName), TIsCharEncodingCompatibleWithTCHAR>::Value, \"CounterDisplayName string must be a TCHAR array.\")"
  },
  {
    "label": "__TRACE_DECLARE_INLINE_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TRACE_DECLARE_INLINE_COUNTER(CounterDisplayName, CounterType, CounterDisplayHint) \\ __TRACE_CHECK_COUNTER_NAME(CounterDisplayName) \\ static FCountersTrace::CounterType PREPROCESSOR_JOIN(__TraceCounter, __LINE__)(CounterDisplayName, CounterDisplayHint)"
  },
  {
    "label": "__TRACE_INLINE_COUNTER_SET()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, CounterType, CounterDisplayHint) \\ __TRACE_DECLARE_INLINE_COUNTER(CounterDisplayName, CounterType, CounterDisplayHint) \\ PREPROCESSOR_JOIN(__TraceCounter, __LINE__).Set(Value)"
  },
  {
    "label": "TRACE_INT_VALUE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_INT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterInt, TraceCounterDisplayHint_None) #define TRACE_ATOMIC_INT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterAtomicInt, TraceCounterDisplayHint_None) #define TRACE_FLOAT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterFloat, TraceCounterDisplayHint_None) #define TRACE_ATOMIC_FLOAT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterAtomicFloat, TraceCounterDisplayHint_None) #define TRACE_MEMORY_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterInt, TraceCounterDisplayHint_Memory) #define TRACE_ATOMIC_MEMORY_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterAtomicInt, TraceCounterDisplayHint_Memory) #define TRACE_UNCHECKED_INT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterUncheckedInt, TraceCounterDisplayHint_None) #define TRACE_UNCHECKED_ATOMIC_INT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterUncheckedAtomicInt, TraceCounterDisplayHint_None) #define TRACE_UNCHECKED_FLOAT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterUncheckedFloat, TraceCounterDisplayHint_None) #define TRACE_UNCHECKED_ATOMIC_FLOAT_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterUncheckedAtomicFloat, TraceCounterDisplayHint_None) #define TRACE_UNCHECKED_MEMORY_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterUncheckedInt, TraceCounterDisplayHint_Memory) #define TRACE_UNCHECKED_ATOMIC_MEMORY_VALUE(CounterDisplayName, Value) __TRACE_INLINE_COUNTER_SET(CounterDisplayName, Value, FCounterUncheckedAtomicInt, TraceCounterDisplayHint_Memory) #define TRACE_DECLARE_COUNTER(CounterType, CounterName, CounterDisplayName, CounterDisplayHint) \\ __TRACE_CHECK_COUNTER_NAME(CounterDisplayName) \\ FCountersTrace::CounterType PREPROCESSOR_JOIN(__GTraceCounter, CounterName)(CounterDisplayName, CounterDisplayHint)"
  },
  {
    "label": "TRACE_DECLARE_INT_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_INT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_UNCHECKED_INT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterUncheckedInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_INT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterInt PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_UNCHECKED_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_UNCHECKED_INT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterUncheckedInt PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_ATOMIC_INT_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_ATOMIC_INT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterAtomicInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_UNCHECKED_ATOMIC_INT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterUncheckedAtomicInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_ATOMIC_INT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterAtomicInt PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_UNCHECKED_ATOMIC_INT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_UNCHECKED_ATOMIC_INT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterUncheckedAtomicInt PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_FLOAT_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_FLOAT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterFloat, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_UNCHECKED_FLOAT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterUncheckedFloat, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_FLOAT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterFloat PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_UNCHECKED_FLOAT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_UNCHECKED_FLOAT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterUncheckedFloat PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_ATOMIC_FLOAT_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_ATOMIC_FLOAT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterAtomicFloat, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_UNCHECKED_ATOMIC_FLOAT_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterUncheckedAtomicFloat, CounterName, CounterDisplayName, TraceCounterDisplayHint_None) #define TRACE_DECLARE_ATOMIC_FLOAT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterAtomicFloat PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_UNCHECKED_ATOMIC_FLOAT_COUNTER_EXTERN()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_UNCHECKED_ATOMIC_FLOAT_COUNTER_EXTERN(CounterName) \\ extern FCountersTrace::FCounterUncheckedAtomicFloat PREPROCESSOR_JOIN(__GTraceCounter, CounterName)"
  },
  {
    "label": "TRACE_DECLARE_MEMORY_COUNTER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_DECLARE_MEMORY_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_Memory) #define TRACE_DECLARE_UNCHECKED_MEMORY_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterUncheckedInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_Memory) #define TRACE_DECLARE_MEMORY_COUNTER_EXTERN(CounterName) \\ TRACE_DECLARE_INT_COUNTER_EXTERN(CounterName) #define TRACE_DECLARE_UNCHECKED_MEMORY_COUNTER_EXTERN(CounterName) \\ TRACE_DECLARE_UNCHECKED_INT_COUNTER_EXTERN(CounterName) #define TRACE_DECLARE_ATOMIC_MEMORY_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterAtomicInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_Memory) #define TRACE_DECLARE_UNCHECKED_ATOMIC_MEMORY_COUNTER(CounterName, CounterDisplayName) \\ TRACE_DECLARE_COUNTER(FCounterUncheckedAtomicInt, CounterName, CounterDisplayName, TraceCounterDisplayHint_Memory) #define TRACE_DECLARE_ATOMIC_MEMORY_COUNTER_EXTERN(CounterName) \\ TRACE_DECLARE_ATOMIC_INT_COUNTER_EXTERN(CounterName) #define TRACE_DECLARE_UNCHECKED_ATOMIC_MEMORY_COUNTER_EXTERN(CounterName) \\ TRACE_DECLARE_UNCHECKED_ATOMIC_INT_COUNTER_EXTERN(CounterName) #define TRACE_COUNTER_SET(CounterName, Value) \\ PREPROCESSOR_JOIN(__GTraceCounter, CounterName).Set(Value)"
  },
  {
    "label": "TRACE_COUNTER_ADD()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_COUNTER_ADD(CounterName, Value) \\ PREPROCESSOR_JOIN(__GTraceCounter, CounterName).Add(Value)"
  },
  {
    "label": "TRACE_COUNTER_SUBTRACT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_COUNTER_SUBTRACT(CounterName, Value) \\ PREPROCESSOR_JOIN(__GTraceCounter, CounterName).Subtract(Value)"
  },
  {
    "label": "TRACE_COUNTER_INCREMENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_COUNTER_INCREMENT(CounterName) \\ PREPROCESSOR_JOIN(__GTraceCounter, CounterName).Increment()"
  },
  {
    "label": "TRACE_COUNTER_DECREMENT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TRACE_COUNTER_DECREMENT(CounterName) \\ PREPROCESSOR_JOIN(__GTraceCounter, CounterName).Decrement()"
  }
]