[
  {
    "label": "SteamDatagramRelayAuthTicket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamDatagramRelayAuthTicket"
  },
  {
    "label": "SteamRelayNetworkStatus_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamRelayNetworkStatus_t"
  },
  {
    "label": "ISteamNetworkingUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamNetworkingUtils"
  },
  {
    "label": "SteamNetworkingIdentityRender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingIdentityRender"
  },
  {
    "label": "SteamNetworkingIPAddrRender",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamNetworkingIPAddrRender"
  },
  {
    "label": "AllocateMessage()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMNETWORKINGUTILS # define ISTEAMNETWORKINGUTILS # pragma once # include \" steamnetworkingtypes . h \" # include \" steam_api_common . h \" struct SteamDatagramRelayAuthTicket ; struct SteamRelayNetworkStatus_t ; class ISteamNetworkingUtils { public : SteamNetworkingMessage_t*)",
    "insertText": "AllocateMessage(int cbAllocateBuffer)"
  },
  {
    "label": "InitRelayNetworkAccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRelayNetworkAccess()"
  },
  {
    "label": "GetRelayNetworkStatus()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingAvailability)",
    "insertText": "GetRelayNetworkStatus(SteamRelayNetworkStatus_t *pDetails)"
  },
  {
    "label": "GetLocalPingLocation()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLocalPingLocation(SteamNetworkPingLocation_t &result)"
  },
  {
    "label": "EstimatePingTimeBetweenTwoLocations()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EstimatePingTimeBetweenTwoLocations(const SteamNetworkPingLocation_t &location1, const SteamNetworkPingLocation_t &location2)"
  },
  {
    "label": "EstimatePingTimeFromLocalHost()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EstimatePingTimeFromLocalHost(const SteamNetworkPingLocation_t &remoteLocation)"
  },
  {
    "label": "ConvertPingLocationToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertPingLocationToString(const SteamNetworkPingLocation_t &location, char *pszBuf, int cchBufSize)"
  },
  {
    "label": "ParsePingLocationString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParsePingLocationString(const char *pszString, SteamNetworkPingLocation_t &result)"
  },
  {
    "label": "CheckPingDataUpToDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckPingDataUpToDate(float flMaxAgeSeconds)"
  },
  {
    "label": "GetPingToDataCenter()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPingToDataCenter(SteamNetworkingPOPID popID, SteamNetworkingPOPID *pViaRelayPoP)"
  },
  {
    "label": "GetDirectPingToPOP()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDirectPingToPOP(SteamNetworkingPOPID popID)"
  },
  {
    "label": "GetPOPCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPOPCount()"
  },
  {
    "label": "GetPOPList()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPOPList(SteamNetworkingPOPID *list, int nListSz)"
  },
  {
    "label": "GetLocalTimestamp()",
    "kind": "Method",
    "detail": "Function (SteamNetworkingMicroseconds)",
    "insertText": "GetLocalTimestamp()"
  },
  {
    "label": "SetDebugOutputFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugOutputFunction(ESteamNetworkingSocketsDebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)"
  },
  {
    "label": "IsFakeIPv4()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFakeIPv4(uint32 nIPv4)"
  },
  {
    "label": "GetIPv4FakeIPType()",
    "kind": "Method",
    "detail": "Function (} ESteamNetworkingFakeIPType)",
    "insertText": "GetIPv4FakeIPType(uint32 nIPv4)"
  },
  {
    "label": "GetRealIdentityForFakeIP()",
    "kind": "Method",
    "detail": "Function (EResult)",
    "insertText": "GetRealIdentityForFakeIP(const SteamNetworkingIPAddr &fakeIP, SteamNetworkingIdentity *pOutRealIdentity)"
  },
  {
    "label": "SetGlobalConfigValueInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalConfigValueInt32(ESteamNetworkingConfigValue eValue, int32 val)"
  },
  {
    "label": "SetGlobalConfigValueFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalConfigValueFloat(ESteamNetworkingConfigValue eValue, float val)"
  },
  {
    "label": "SetGlobalConfigValueString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalConfigValueString(ESteamNetworkingConfigValue eValue, const char *val)"
  },
  {
    "label": "SetGlobalConfigValuePtr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalConfigValuePtr(ESteamNetworkingConfigValue eValue, void *val)"
  },
  {
    "label": "SetConnectionConfigValueInt32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConnectionConfigValueInt32(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, int32 val)"
  },
  {
    "label": "SetConnectionConfigValueFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConnectionConfigValueFloat(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, float val)"
  },
  {
    "label": "SetConnectionConfigValueString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConnectionConfigValueString(HSteamNetConnection hConn, ESteamNetworkingConfigValue eValue, const char *val)"
  },
  {
    "label": "SetGlobalCallback_SteamNetConnectionStatusChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalCallback_SteamNetConnectionStatusChanged(FnSteamNetConnectionStatusChanged fnCallback)"
  },
  {
    "label": "SetGlobalCallback_SteamNetAuthenticationStatusChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalCallback_SteamNetAuthenticationStatusChanged(FnSteamNetAuthenticationStatusChanged fnCallback)"
  },
  {
    "label": "SetGlobalCallback_SteamRelayNetworkStatusChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalCallback_SteamRelayNetworkStatusChanged(FnSteamRelayNetworkStatusChanged fnCallback)"
  },
  {
    "label": "SetGlobalCallback_FakeIPResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalCallback_FakeIPResult(FnSteamNetworkingFakeIPResult fnCallback)"
  },
  {
    "label": "SetGlobalCallback_MessagesSessionRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalCallback_MessagesSessionRequest(FnSteamNetworkingMessagesSessionRequest fnCallback)"
  },
  {
    "label": "SetGlobalCallback_MessagesSessionFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGlobalCallback_MessagesSessionFailed(FnSteamNetworkingMessagesSessionFailed fnCallback)"
  },
  {
    "label": "SetConfigValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType eDataType, const void *pArg)"
  },
  {
    "label": "SetConfigValueStruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetConfigValueStruct(const SteamNetworkingConfigValue_t &opt, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj)"
  },
  {
    "label": "GetConfigValue()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingGetConfigValueResult)",
    "insertText": "GetConfigValue(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigScope eScopeType, intptr_t scopeObj, ESteamNetworkingConfigDataType *pOutDataType, void *pResult, size_t *cbResult)"
  },
  {
    "label": "GetConfigValueInfo()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetConfigValueInfo(ESteamNetworkingConfigValue eValue, ESteamNetworkingConfigDataType *pOutDataType, ESteamNetworkingConfigScope *pOutScope)"
  },
  {
    "label": "IterateGenericEditableConfigValues()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingConfigValue)",
    "insertText": "IterateGenericEditableConfigValues(ESteamNetworkingConfigValue eCurrent, bool bEnumerateDevVars)"
  },
  {
    "label": "SteamNetworkingIPAddr_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamNetworkingIPAddr_ToString(const SteamNetworkingIPAddr &addr, char *buf, size_t cbBuf, bool bWithPort)"
  },
  {
    "label": "SteamNetworkingIPAddr_ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamNetworkingIPAddr_ParseString(SteamNetworkingIPAddr *pAddr, const char *pszStr)"
  },
  {
    "label": "SteamNetworkingIPAddr_GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (ESteamNetworkingFakeIPType)",
    "insertText": "SteamNetworkingIPAddr_GetFakeIPType(const SteamNetworkingIPAddr &addr)"
  },
  {
    "label": "SteamNetworkingIdentity_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamNetworkingIdentity_ToString(const SteamNetworkingIdentity &identity, char *buf, size_t cbBuf)"
  },
  {
    "label": "SteamNetworkingIdentity_ParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SteamNetworkingIdentity_ParseString(SteamNetworkingIdentity *pIdentity, const char *pszStr)"
  },
  {
    "label": "ISteamNetworkingUtils()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ISteamNetworkingUtils()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMNETWORKINGUTILS_INTERFACE_VERSION \" SteamNetworkingUtils004 \" # ifdef STEAMNETWORKINGSOCKETS_STANDALONELIB)",
    "insertText": "static_assert(STEAMNETWORKINGUTILS_INTERFACE_VERSION[22] == '4', \"Version mismatch\")"
  },
  {
    "label": "SteamNetworkingUtils_LibV4()",
    "kind": "Method",
    "detail": "Function (STEAMNETWORKINGSOCKETS_INTERFACE ISteamNetworkingUtils*)",
    "insertText": "SteamNetworkingUtils_LibV4()"
  },
  {
    "label": "SteamNetworkingUtils_Lib()",
    "kind": "Method",
    "detail": "Function (ISteamNetworkingUtils*)",
    "insertText": "SteamNetworkingUtils_Lib()"
  },
  {
    "label": "SteamNetworkingUtils()",
    "kind": "Method",
    "detail": "Function (} # ifndef STEAMNETWORKINGSOCKETS_STEAMAPI ISteamNetworkingUtils*)",
    "insertText": "SteamNetworkingUtils()"
  },
  {
    "label": "STEAM_DEFINE_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # ifdef STEAMNETWORKINGSOCKETS_STEAMAPI)",
    "insertText": "STEAM_DEFINE_INTERFACE_ACCESSOR(ISteamNetworkingUtils *, SteamNetworkingUtils_SteamAPI, SteamInternal_FindOrCreateUserInterface( 0, STEAMNETWORKINGUTILS_INTERFACE_VERSION ) ? SteamInternal_FindOrCreateUserInterface( 0, STEAMNETWORKINGUTILS_INTERFACE_VERSION ) : SteamInternal_FindOrCreateGameServerInterface( 0, STEAMNETWORKINGUTILS_INTERFACE_VERSION ), \"global\", STEAMNETWORKINGUTILS_INTERFACE_VERSION ) #ifndef STEAMNETWORKINGSOCKETS_STANDALONELIB inline ISteamNetworkingUtils *SteamNetworkingUtils()"
  },
  {
    "label": "SteamNetworkingIdentityRender()",
    "kind": "Method",
    "detail": "Function (} # endif # endif struct SteamRelayNetworkStatus_t { enum { k_iCallback = k_iSteamNetworkingUtilsCallbacks + 1 } ; ESteamNetworkingAvailability m_eAvail ; int m_bPingMeasurementInProgress ; ESteamNetworkingAvailability m_eAvailNetworkConfig ; ESteamNetworkingAvailability m_eAvailAnyRelay ; char m_debugMsg [ 2 5 6 ] ; } ; # ifndef API_GEN struct SteamNetworkingIdentityRender {)",
    "insertText": "SteamNetworkingIdentityRender(const SteamNetworkingIdentity &x)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "ToString(buf, sizeof(buf))"
  },
  {
    "label": "c_str()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "c_str()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "ToString(buf, sizeof(buf), bWithPort)"
  },
  {
    "label": "pVal()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "pVal(opt.m_eDataType == k_ESteamNetworkingConfig_String ) ? (const void *)opt.m_val.m_string : (const void *)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(STEAMNETWORKINGSOCKETS_STATIC_LINK ) || defined(STEAMNETWORKINGSOCKETS_FOREXPORT) || defined( STEAMNETWORKINGSOCKETS_STANDALONELIB ) STEAMNETWORKINGSOCKETS_INTERFACE void SteamNetworkingIPAddr_ToString( const SteamNetworkingIPAddr *pAddr, char *buf, size_t cbBuf, bool bWithPort)"
  },
  {
    "label": "SteamNetworkingIPAddr_GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (STEAMNETWORKINGSOCKETS_INTERFACE ESteamNetworkingFakeIPType)",
    "insertText": "SteamNetworkingIPAddr_GetFakeIPType(const SteamNetworkingIPAddr *pAddr)"
  },
  {
    "label": "SteamNetworkingIdentity_ToString()",
    "kind": "Method",
    "detail": "Function (STEAMNETWORKINGSOCKETS_INTERFACE void)",
    "insertText": "SteamNetworkingIdentity_ToString(const SteamNetworkingIdentity *pIdentity, char *buf, size_t cbBuf)"
  },
  {
    "label": "SteamNetworkingIdentity_ParseString()",
    "kind": "Method",
    "detail": "Function (STEAMNETWORKINGSOCKETS_INTERFACE bool)",
    "insertText": "SteamNetworkingIdentity_ParseString(SteamNetworkingIdentity *pIdentity, size_t sizeofIdentity, const char *pszStr)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(char *buf, size_t cbBuf, bool bWithPort)"
  },
  {
    "label": "SteamNetworkingIPAddr_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamNetworkingIPAddr_ToString(this, buf, cbBuf, bWithPort)"
  },
  {
    "label": "ParseString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ParseString(const char *pszStr)"
  },
  {
    "label": "GetFakeIPType()",
    "kind": "Method",
    "detail": "Function (} ESteamNetworkingFakeIPType)",
    "insertText": "GetFakeIPType()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToString(char *buf, size_t cbBuf)"
  },
  {
    "label": "SteamNetworkingIdentity_ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamNetworkingIdentity_ToString(this, buf, cbBuf)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(STEAMNETWORKINGSOCKETS_STEAMAPI ) inline void SteamNetworkingIPAddr::ToString( char *buf, size_t cbBuf, bool bWithPort)"
  },
  {
    "label": "SteamNetworkingUtils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamNetworkingUtils()->SteamNetworkingIPAddr_ToString( *this, buf, cbBuf, bWithPort)"
  },
  {
    "label": "SteamNetworkingUtils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SteamNetworkingUtils()->SteamNetworkingIdentity_ToString( *this, buf, cbBuf)"
  }
]