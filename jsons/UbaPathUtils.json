[
  {
    "label": "FixPath2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaPlatform . h \" # include \" UbaStringBuffer . h \" namespace uba { bool)",
    "insertText": "FixPath2(const tchar* fileName, const tchar* workingDir, u64 workingDirCharLen, tchar* buffer, u64 bufferCharCapacity, u32* outBufferCharLen)"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (buffer [ 1 ] = 0 ;)",
    "insertText": "UBA_ASSERTF(workingDir == nullptr || !*workingDir || workingDir[workingDirCharLen-1] == PathSeparator, TC(\"WorkingDir needs to end with path separator\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS const tchar* read = fileName ; tchar* write = buffer ; tchar lastLastChar = 0 ; tchar lastChar = 0 ; bool hasDotBeforeSlash = false ; bool hasDotDot = false ; bool seenNonBackslash = false ;)",
    "insertText": "if(fileName[0] == '\\\"')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (tchar fullName [ 1 0 2 4 ] ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tchar temp [ 1 0 2 4 ] ;)",
    "insertText": "if(read == fullName)"
  },
  {
    "label": "TStrcpy_s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStrcpy_s(temp, sizeof_array(temp), read)"
  },
  {
    "label": "TStrchr()",
    "kind": "Method",
    "detail": "Function (read = temp ; } const tchar* tilde =)",
    "insertText": "TStrchr(read, '~')"
  },
  {
    "label": "TStrlen()",
    "kind": "Method",
    "detail": "Function (u64 fileNameLen =)",
    "insertText": "TStrlen(read)"
  },
  {
    "label": "TStrchr()",
    "kind": "Method",
    "detail": "Function (const tchar* backslash =)",
    "insertText": "TStrchr(tilde, '\\\\')"
  },
  {
    "label": "TStrcpy_s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStrcpy_s(fullName, sizeof_array(fullName), read)"
  },
  {
    "label": "Local_GetLongPathNameW()",
    "kind": "Method",
    "detail": "Function (u32 len =)",
    "insertText": "Local_GetLongPathNameW(fullName, fullName, sizeof_array(fullName))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (read = fullName ; })",
    "insertText": "while(tchar c = *read++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* write = 0 ; break ; } else)",
    "insertText": "if(c == '.' && lastChar == '.')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (write = buffer ; continue ; })",
    "insertText": "if(lastChar == '.')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { seenNonBackslash = true ; }* write + + = c ; lastLastChar = lastChar ; lastChar = c ; })",
    "insertText": "if(lastChar == '.' && lastLastChar == '\\\\')"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (* write = 0 ; u64 charLen =)",
    "insertText": "u64(write - buffer + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool startsWithDoubleBackslash = false ;)",
    "insertText": "if(lastChar == '.' && lastLastChar == 0)"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERTF(workingDir && *workingDir, TC(\"Working dir is null or empty\"))"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERTF(workingDirCharLen < bufferCharCapacity, TC(\"%llu < %llu\"), workingDirCharLen, bufferCharCapacity)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer, workingDir, workingDirCharLen*sizeof(tchar))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ workingDirCharLen - 1 ] = 0 ; charLen = workingDirCharLen ; } else)",
    "insertText": "if(buffer[0] == '\\\\' && buffer[1] == '\\\\')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (startsWithDoubleBackslash = true ; } else)",
    "insertText": "if(buffer[1] != ':')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tchar* copyFrom = buffer ;)",
    "insertText": "if(copyFrom[0] == '\\\\')"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (+ + copyFrom ; - - charLen ; })",
    "insertText": "UBA_ASSERTF(workingDir && *workingDir, TC(\"No working dir provided but path is relative (%s)\"), buffer)"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (tchar temp2 [ 1 0 2 4 ] ;)",
    "insertText": "UBA_ASSERTF(workingDirCharLen + charLen < sizeof_array(temp2), TC(\"%llu + %llu < %llu\"), workingDirCharLen, charLen, sizeof_array(temp2))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(temp2, workingDir, workingDirCharLen*sizeof(tchar))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(temp2 + workingDirCharLen, copyFrom, charLen*sizeof(tchar))"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (charLen + = workingDirCharLen ;)",
    "insertText": "UBA_ASSERTF(charLen+1 <= bufferCharCapacity, TC(\"%llu+1 <= %llu\"), charLen, bufferCharCapacity)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer, temp2, (charLen+1)*sizeof(tchar))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(lastChar == '.' && charLen == 4)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(workingDir && *workingDir)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer, workingDir, workingDirCharLen * sizeof(tchar))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ workingDirCharLen - 1 ] = 0 ; charLen = workingDirCharLen ; } else { - - charLen ; } })",
    "insertText": "if(hasDotDot || hasDotBeforeSlash)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (write = buffer ;)",
    "insertText": "if(startsWithDoubleBackslash)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tchar c =* read ;)",
    "insertText": "if(c == '\\\\' || c == 0)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(folderCount > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(lastChar == '\\\\')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - write ; } else folders [ folderCount + + ] = write ;)",
    "insertText": "if(c == 0)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (} lastLastLastChar = lastLastChar ; lastLastChar = lastChar ; lastChar = c ;* write =* read ; read + + ; write + + ; })",
    "insertText": "UBA_ASSERT(write)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (charLen =)",
    "insertText": "u32(write - buffer + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(buffer[charLen - 2] == '\\\\')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - charLen ; buffer [ charLen - 1 ] = 0 ; } else)",
    "insertText": "if(charLen == 3)"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (buffer [ 2 ] = ' \\ \\ ' ; buffer [ 3 ] = 0 ; + + charLen ; })",
    "insertText": "UBA_ASSERTF(charLen <= bufferCharCapacity, TC(\"Buffer overflow (Capacity %llu) fixing path %s\"), fileName)"
  },
  {
    "label": "getenv()",
    "kind": "Method",
    "detail": "Function (const char* homeDir =)",
    "insertText": "getenv(\"HOME\")"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "Append(homeDir).EnsureEndsWithSlash().Append(fileName + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fileName = tmp . data ; } u64 memPos = 0 ;)",
    "insertText": "if(fileName[0] != '/')"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERTF(workingDir && *workingDir, \"Need workingDir to fix path %s\", fileName)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer, workingDir, workingDirCharLen)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (memPos = workingDirCharLen ; } else {)",
    "insertText": "while(fileName[1] == '/')"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (} u64 len =)",
    "insertText": "strlen(fileName)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer + memPos, fileName, len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tchar c =* read ;)",
    "insertText": "if(c == '/' || c == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (write = folders [ folderCount - 1 ] ; } else)",
    "insertText": "if(lastChar == '.' && lastLastChar == '/')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (write = folders [ folderCount - 1 ] ; } else)",
    "insertText": "if(lastChar == '/')"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (} lastLastLastChar = lastLastChar ; lastLastChar = lastChar ; lastChar = c ;* write =* read ; read + + ; write + + ; }* write = 0 ; memPos =)",
    "insertText": "u32(write - buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(memPos == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ 0 ] = ' / ' ; buffer [ 1 ] = 0 ; memPos = 1 ; } buffer [ memPos ] = 0 ;)",
    "insertText": "if(outBufferCharLen)"
  },
  {
    "label": "FixPath2()",
    "kind": "Method",
    "detail": "Function (u32 count = buffer . count ;)",
    "insertText": "FixPath2(fileName, workingDir, workingDirCharLen, buffer.data + count, buffer.capacity - count, &buffer.count)"
  },
  {
    "label": "IsAbsolutePath()",
    "kind": "Method",
    "detail": "Function (buffer . count + = count ; } bool)",
    "insertText": "IsAbsolutePath(const tchar* path)"
  }
]