[
  {
    "label": "BufferLevelFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BufferLevelFilter"
  },
  {
    "label": "BufferLevelFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_BUFFER_LEVEL_FILTER_H_ # define MODULES_AUDIO_CODING_NETEQ_BUFFER_LEVEL_FILTER_H_ # include<stddef . h> # include<stdint . h> namespace webrtc { class BufferLevelFilter { public :)",
    "insertText": "BufferLevelFilter()"
  },
  {
    "label": "BufferLevelFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BufferLevelFilter(const BufferLevelFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BufferLevelFilter&)",
    "insertText": "operator(const BufferLevelFilter&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(size_t buffer_size_samples, int time_stretched_samples)"
  },
  {
    "label": "SetFilteredBufferLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilteredBufferLevel(int buffer_size_samples)"
  },
  {
    "label": "SetTargetBufferLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBufferLevel(int target_buffer_level_ms)"
  },
  {
    "label": "filtered_current_level()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "filtered_current_level()"
  }
]