[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FPrivateTextFormatArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateTextFormatArguments"
  },
  {
    "label": "FTextFormatArgumentModifier_PluralForm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatArgumentModifier_PluralForm"
  },
  {
    "label": "FTextFormatArgumentModifier_GenderForm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatArgumentModifier_GenderForm"
  },
  {
    "label": "FTextFormatArgumentModifier_HangulPostPositions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatArgumentModifier_HangulPostPositions"
  },
  {
    "label": "ESuffixMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESuffixMode"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / SortedMap . h \" # include \" CoreTypes . h \" # include \" Internationalization / CulturePointer . h \" # include \" Internationalization / ITextFormatArgumentModifier . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" class FString ; struct FPrivateTextFormatArguments ; class FTextFormatArgumentModifier_PluralForm : public ITextFormatArgumentModifier { public : TSharedPtr<ITextFormatArgumentModifier>)",
    "insertText": "Create(const ETextPluralType InPluralType, const FTextFormatString& InArgsString, const FTextFormatPatternDefinitionConstRef& InPatternDef)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate(const FCultureRef& InCulture, TArray<FString>& OutValidationErrors)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(const FFormatArgumentValue& InValue, const FPrivateTextFormatArguments& InFormatArgs, FString& OutResult)"
  },
  {
    "label": "GetFormatArgumentNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFormatArgumentNames(TArray<FString>& OutArgumentNames)"
  },
  {
    "label": "EstimateLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EstimateLength(int32& OutLength, bool& OutUsesFormatArgs)"
  },
  {
    "label": "FTextFormatArgumentModifier_PluralForm()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTextFormatArgumentModifier_PluralForm(const ETextPluralType InPluralType, const TSortedMap<FTextFormatString, FTextFormat>& InPluralForms, const int32 InLongestPluralFormStringLen, const bool InDoPluralFormsUseFormatArgs)"
  },
  {
    "label": "CompiledPluralForms()",
    "kind": "Method",
    "detail": "Function (ETextPluralType PluralType ; int32 LongestPluralFormStringLen ; bool bDoPluralFormsUseFormatArgs ; FTextFormat)",
    "insertText": "CompiledPluralForms(int32)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ; class FTextFormatArgumentModifier_GenderForm : public ITextFormatArgumentModifier { public : TSharedPtr<ITextFormatArgumentModifier>)",
    "insertText": "Create(const FTextFormatString& InArgsString, const FTextFormatPatternDefinitionConstRef& InPatternDef)"
  },
  {
    "label": "FTextFormatArgumentModifier_GenderForm()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTextFormatArgumentModifier_GenderForm(FTextFormat&& InMasculineForm, FTextFormat&& InFeminineForm, FTextFormat&& InNeuterForm, const int32 InLongestGenderFormStringLen, const bool InDoGenderFormsUseFormatArgs)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (int32 LongestGenderFormStringLen ; bool bDoGenderFormsUseFormatArgs ; FTextFormat MasculineForm ; FTextFormat FeminineForm ; FTextFormat NeuterForm ; } ; class FTextFormatArgumentModifier_HangulPostPositions : public ITextFormatArgumentModifier { public : TSharedPtr<ITextFormatArgumentModifier>)",
    "insertText": "Create(const FTextFormatString& InArgsString)"
  },
  {
    "label": "FTextFormatArgumentModifier_HangulPostPositions()",
    "kind": "Method",
    "detail": "Function (private : enum ESuffixMode { ConsonantOrVowel,ConsonantNotRieulOrVowel,} ;)",
    "insertText": "FTextFormatArgumentModifier_HangulPostPositions(FTextFormatString&& InConsonantSuffix, FTextFormatString&& InVowelSuffix)"
  }
]