[
  {
    "label": "SSceneOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSceneOutliner"
  },
  {
    "label": "WORLDPARTITIONEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WORLDPARTITIONEDITOR_API"
  },
  {
    "label": "FDataLayerFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataLayerFilter"
  },
  {
    "label": "FWorldPartitionActorFilterMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorFilterMode"
  },
  {
    "label": "FFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISceneOutlinerMode . h \" # include \" WorldPartition / Filter / WorldPartitionActorFilter . h \" # include \" Containers / Map . h \" # include \" Templates / Tuple . h \" class SSceneOutliner ; class FWorldPartitionActorFilterMode : public ISceneOutlinerMode { public : class FFilter { public :)",
    "insertText": "FFilter(TSharedPtr<FWorldPartitionActorFilter> LevelFilter, const TArray<const FWorldPartitionActorFilter*>& SelectedFilters)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FWorldPartitionActorFilter* Result)"
  },
  {
    "label": "FDataLayerFilter()",
    "kind": "Method",
    "detail": "Function (struct FDataLayerFilter {)",
    "insertText": "FDataLayerFilter()"
  },
  {
    "label": "FDataLayerFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDataLayerFilter(bool bInOverride, bool bInIncluded) : bOverride(bInOverride), bIncluded(bInIncluded)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} TOptional<bool> bOverride ; TOptional<bool> bIncluded ; } ; using FDataLayerFilters = TMap<FSoftObjectPath,FDataLayerFilter> ; private : void)",
    "insertText": "Initialize(const FWorldPartitionActorFilter* Filter)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Override(const FWorldPartitionActorFilter* Other)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(const FWorldPartitionActorFilter* Other)"
  },
  {
    "label": "FWorldPartitionActorFilterMode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FWorldPartitionActorFilter> LevelFilter ; TMap<const FWorldPartitionActorFilter*,FDataLayerFilters> FilterValues ; class FWorldPartitionActorFilterMode ; } ;)",
    "insertText": "FWorldPartitionActorFilterMode(SSceneOutliner* InSceneOutliner, TSharedPtr<FFilter> InFilter)"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "GetTypeSortPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTypeSortPriority(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FWorldPartitionActorFilter& InOutResult)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (FFilter::FDataLayerFilters&)",
    "insertText": "FindChecked(const FWorldPartitionActorFilter* InFilter)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (} const FWorldPartitionActorFilter*)",
    "insertText": "GetFilter()"
  },
  {
    "label": "CreateHierarchy()",
    "kind": "Method",
    "detail": "Function (} protected : TUniquePtr<ISceneOutlinerHierarchy>)",
    "insertText": "CreateHierarchy()"
  }
]