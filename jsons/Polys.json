[
  {
    "label": "ABrush",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABrush"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "ESplitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESplitType"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "FPoly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoly"
  },
  {
    "label": "UPolys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPolys"
  },
  {
    "label": "FPoly()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPoly()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transform(const FVector3f &PostAdd)"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(const FRotator3f &Rotation)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(const FVector3f &Scale)"
  },
  {
    "label": "Fix()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Fix()"
  },
  {
    "label": "CalcNormal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalcNormal( bool bSilent = 0 )"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Split(const FVector3f &InNormal, const FVector3f &InBase )"
  },
  {
    "label": "RemoveColinears()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveColinears()"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Area()"
  },
  {
    "label": "DoesLineIntersect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesLineIntersect( FVector Start, FVector End, FVector* Intersect = NULL )"
  },
  {
    "label": "OnPoly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPoly( FVector InVtx )"
  },
  {
    "label": "OnPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnPlane( FVector InVtx )"
  },
  {
    "label": "InsertVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertVertex( int32 InPos, FVector InVtx )"
  },
  {
    "label": "RemoveVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVertex( FVector InVtx )"
  },
  {
    "label": "IsCoplanar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCoplanar()"
  },
  {
    "label": "IsConvex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConvex()"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Triangulate( ABrush* InOwnerBrush, TArray<FPoly>& OutTriangles )"
  },
  {
    "label": "GetVertexIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVertexIndex( FVector3f& InVtx )"
  },
  {
    "label": "GetMidPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetMidPoint()"
  },
  {
    "label": "BuildInfiniteFPoly()",
    "kind": "Method",
    "detail": "Function (FPoly)",
    "insertText": "BuildInfiniteFPoly(const FPlane& InPlane)"
  },
  {
    "label": "BuildAndCutInfiniteFPoly()",
    "kind": "Method",
    "detail": "Function (FPoly)",
    "insertText": "BuildAndCutInfiniteFPoly(const FPlane& InPlane, const TArray<FPlane>& InCutPlanes, ABrush* InOwnerBrush)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Finalize( ABrush* InOwner, int32 NoError )"
  },
  {
    "label": "OptimizeIntoConvexPolys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptimizeIntoConvexPolys(ABrush* InOwnerBrush, ArrayType& InPolygons)"
  },
  {
    "label": "SaveNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "SaveNormal(0)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  }
]