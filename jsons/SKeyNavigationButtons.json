[
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / Attribute . h \" # include \" Misc / FrameTime . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Misc / EnumClassFlags . h \" struct FFrameNumber ; namespace UE { namespace Sequencer { class FViewModel ; enum class EKeyNavigationButtons : uint8 { PreviousKey = 1<<0,AddKey = 1<<1,NextKey = 1<<2,NavOnly = PreviousKey | NextKey,All = NavOnly | AddKey,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EKeyNavigationButtons)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSetTime, FFrameTime) DECLARE_DELEGATE_OneParam(FOnGetNavigatableTimes, TArray<FFrameNumber>&) DECLARE_DELEGATE_TwoParams(FOnAddKey, FFrameTime, TSharedPtr<FViewModel>) SLATE_BEGIN_ARGS(SKeyNavigationButtons) : _Buttons(EKeyNavigationButtons::All)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EKeyNavigationButtons, Buttons) SLATE_ARGUMENT(FText, PreviousKeyToolTip) SLATE_ARGUMENT(FText, NextKeyToolTip) SLATE_ATTRIBUTE(FFrameTime, Time) SLATE_EVENT(FOnSetTime, OnSetTime) SLATE_EVENT(FOnAddKey, OnAddKey) SLATE_ARGUMENT(FText, AddKeyToolTip) SLATE_EVENT(FOnGetNavigatableTimes, GetNavigatableTimes) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedPtr<FViewModel>& InModel)"
  },
  {
    "label": "OnPreviousKeyClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviousKeyClicked()"
  },
  {
    "label": "OnNextKeyClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnNextKeyClicked()"
  },
  {
    "label": "OnAddKeyClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddKeyClicked()"
  }
]