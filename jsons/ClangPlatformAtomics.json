[
  {
    "label": "FClangPlatformAtomics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClangPlatformAtomics"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef __clang__ # include \" GenericPlatform / GenericPlatformAtomics . h \" # include \" CoreTypes . h \" struct FClangPlatformAtomics : public FGenericPlatformAtomics { int8)",
    "insertText": "InterlockedIncrement(volatile int8* Value)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedIncrement(volatile int16* Value)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedIncrement(volatile int32* Value)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedIncrement(volatile int64* Value)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedDecrement(volatile int8* Value)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedDecrement(volatile int16* Value)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedDecrement(volatile int32* Value)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedDecrement(volatile int64* Value)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedAdd(volatile int8* Value, int8 Amount)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedAdd(volatile int16* Value, int16 Amount)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedAdd(volatile int32* Value, int32 Amount)"
  },
  {
    "label": "InterlockedAdd()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedAdd(volatile int64* Value, int64 Amount)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedExchange(volatile int8* Value, int8 Exchange)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedExchange(volatile int16* Value, int16 Exchange)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedExchange(volatile int32* Value, int32 Exchange)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedExchange(volatile int64* Value, int64 Exchange)"
  },
  {
    "label": "InterlockedExchangePtr()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "InterlockedExchangePtr(void*volatile* Dest, void* Exchange)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedCompareExchange(volatile int8* Dest, int8 Exchange, int8 Comparand)"
  },
  {
    "label": "__atomic_compare_exchange_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_compare_exchange_n(Dest, &Comparand, Exchange, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedAnd(volatile int16* Value, const int16 AndValue)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedAnd(volatile int32* Value, const int32 AndValue)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedAnd(volatile int64* Value, const int64 AndValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedOr(volatile int8* Value, const int8 OrValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedOr(volatile int16* Value, const int16 OrValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedOr(volatile int32* Value, const int32 OrValue)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedOr(volatile int64* Value, const int64 OrValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "InterlockedXor(volatile int8* Value, const int8 XorValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "InterlockedXor(volatile int16* Value, const int16 XorValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "InterlockedXor(volatile int32* Value, const int32 XorValue)"
  },
  {
    "label": "InterlockedXor()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "InterlockedXor(volatile int64* Value, const int64 XorValue)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "AtomicRead(volatile const int8* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "AtomicRead(volatile const int16* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AtomicRead(volatile const int32* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "AtomicRead(volatile const int64* Src)"
  },
  {
    "label": "AtomicRead_Relaxed()",
    "kind": "Method",
    "detail": "Function (} int8)",
    "insertText": "AtomicRead_Relaxed(volatile const int8* Src)"
  },
  {
    "label": "AtomicRead_Relaxed()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "AtomicRead_Relaxed(volatile const int16* Src)"
  },
  {
    "label": "AtomicRead_Relaxed()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AtomicRead_Relaxed(volatile const int32* Src)"
  },
  {
    "label": "AtomicRead_Relaxed()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "AtomicRead_Relaxed(volatile const int64* Src)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int8* Src, int8 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int8*)Src, Val, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int16* Src, int16 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int16*)Src, Val, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int32* Src, int32 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int32*)Src, Val, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "AtomicStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore(volatile int64* Src, int64 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int64*)Src, Val, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore_Relaxed(volatile int8* Src, int8 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int8*)Src, Val, __ATOMIC_RELAXED)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore_Relaxed(volatile int16* Src, int16 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int16*)Src, Val, __ATOMIC_RELAXED)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore_Relaxed(volatile int32* Src, int32 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int32*)Src, Val, __ATOMIC_RELAXED)"
  },
  {
    "label": "AtomicStore_Relaxed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicStore_Relaxed(volatile int64* Src, int64 Val)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_store_n((volatile int64*)Src, Val, __ATOMIC_RELAXED)"
  },
  {
    "label": "InterlockedCompareExchangePointer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "InterlockedCompareExchangePointer(void*volatile* Dest, void* Exchange, void* Comparand)"
  },
  {
    "label": "AtomicRead128()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AtomicRead128(const FInt128* Src, FInt128* OutResult)"
  },
  {
    "label": "__atomic_load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__atomic_load(Src, OutResult, __ATOMIC_SEQ_CST)"
  },
  {
    "label": "CanUseCompareExchange128()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "CanUseCompareExchange128()"
  }
]