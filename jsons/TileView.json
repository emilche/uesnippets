[
  {
    "label": "UTileView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTileView"
  },
  {
    "label": "TileViewT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TileViewT"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ListView . h \" # include \" Widgets / Views / STileView . h \" # include \" TileView . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMG_API UTileView(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "ReleaseSlateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSlateResources(bool bReleaseChildren)"
  },
  {
    "label": "GetDesiredEntryPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetDesiredEntryPadding(UObject* Item)"
  },
  {
    "label": "GetTotalEntryHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalEntryHeight()"
  },
  {
    "label": "GetTotalEntryWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTotalEntryWidth()"
  },
  {
    "label": "ConstructTileView()",
    "kind": "Method",
    "detail": "Function (template<template<> class TileViewT = STileView> TSharedRef<TileViewT<UObject*>>)",
    "insertText": "ConstructTileView()"
  },
  {
    "label": "ConvertSerializedVisibilityToRuntime()",
    "kind": "Method",
    "detail": "Function (FTileViewConstructArgs Args ; Args . bAllowFocus = bIsFocusable ; Args . SelectionMode = SelectionMode ; Args . bClearSelectionOnClick = bClearSelectionOnClick ; Args . ConsumeMouseWheel = ConsumeMouseWheel ; Args . bReturnFocusToSelection = bReturnFocusToSelection ; Args . TileAlignment = TileAlignment ; Args . bWrapDirectionalNavigation = bWrapHorizontalNavigation ; Args . Orientation = Orientation ; Args . ScrollBarStyle =& ScrollBarStyle ; Args . ScrollbarDisabledVisibility =)",
    "insertText": "ConvertSerializedVisibilityToRuntime(ScrollbarDisabledVisibility)"
  },
  {
    "label": "TileViewT()",
    "kind": "Method",
    "detail": "Function (} else { Args . EntryWidth = EntryWidth ; Args . EntryHeight = EntryHeight ; } MyListView = MyTileView = ITypedUMGListView<UObject*>::ConstructTileView<)",
    "insertText": "TileViewT(this, ListItems, Args)"
  },
  {
    "label": "SetOnEntryInitialized()",
    "kind": "Method",
    "detail": "Function (MyTileView ->)",
    "insertText": "SetOnEntryInitialized(SListView<UObject*>::FOnEntryInitialized::CreateUObject(this, &UTileView::HandleOnEntryInitializedInternal))"
  }
]