[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "DecoderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DecoderInfo"
  },
  {
    "label": "Settings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Settings"
  },
  {
    "label": "DecodedImageCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_VIDEO_DECODER_H_ # define API_VIDEO_CODECS_VIDEO_DECODER_H_ # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / video / encoded_image . h \" # include \" api / video / render_resolution . h \" # include \" api / video / video_codec_type . h \" # include \" api / video / video_frame . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT DecodedImageCallback { public : ~)",
    "insertText": "DecodedImageCallback()"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decoded(VideoFrame& decodedImage, int64_t decode_time_ms)"
  },
  {
    "label": "Decoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decoded(VideoFrame& decodedImage, absl::optional<int32_t> decode_time_ms, absl::optional<uint8_t> qp)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ; class RTC_EXPORT VideoDecoder { public : struct DecoderInfo { std::string implementation_name ; bool is_hardware_accelerated = false ; std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const DecoderInfo& rhs)"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (} } ; class Settings { public :)",
    "insertText": "Settings()"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Settings(const Settings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Settings&)",
    "insertText": "operator(const Settings&)"
  },
  {
    "label": "buffer_pool_size()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "buffer_pool_size()"
  },
  {
    "label": "set_buffer_pool_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_buffer_pool_size(absl::optional<int> value)"
  },
  {
    "label": "max_render_resolution()",
    "kind": "Method",
    "detail": "Function (RenderResolution)",
    "insertText": "max_render_resolution()"
  },
  {
    "label": "set_max_render_resolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_max_render_resolution(RenderResolution value)"
  },
  {
    "label": "number_of_cores()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "number_of_cores()"
  },
  {
    "label": "codec_type()",
    "kind": "Method",
    "detail": "Function (VideoCodecType)",
    "insertText": "codec_type()"
  },
  {
    "label": "VideoDecoder()",
    "kind": "Method",
    "detail": "Function (codec_type_ = value ; } private : absl::optional<int> buffer_pool_size_ ; RenderResolution max_resolution_ ; int number_of_cores_ = 1 ; VideoCodecType codec_type_ = kVideoCodecGeneric ; } ; ~)",
    "insertText": "VideoDecoder()"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Configure(const Settings& settings)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const EncodedImage& input_image, bool missing_frames, int64_t render_time_ms)"
  },
  {
    "label": "RegisterDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterDecodeCompleteCallback(DecodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "GetDecoderInfo()",
    "kind": "Method",
    "detail": "Function (DecoderInfo)",
    "insertText": "GetDecoderInfo()"
  },
  {
    "label": "ImplementationName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ImplementationName()"
  }
]