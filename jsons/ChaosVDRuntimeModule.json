[
  {
    "label": "FChaosVDRecording",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDRecording"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOSVDRUNTIME_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVDRUNTIME_API"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" Modules / ModuleInterface . h \" # include \" ProfilingDebugging / TraceAuxiliary . h \" # include \" Containers / Ticker . h \" # include \" Misc / ScopeRWLock . h \" struct FChaosVDRecording ; class FText ; enum class EChaosVDFullCaptureFlags : int32 { Geometry = 1<<0,Particles = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChaosVDFullCaptureFlags) DECLARE_MULTICAST_DELEGATE(FChaosVDRecordingStateChangedDelegate) DECLARE_MULTICAST_DELEGATE_OneParam(FChaosVDCaptureRequestDelegate, EChaosVDFullCaptureFlags) DECLARE_MULTICAST_DELEGATE_OneParam(FChaosVDRecordingStartFailedDelegate, const FText&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : FChaosVDRuntimeModule&)",
    "insertText": "Get()"
  },
  {
    "label": "IsLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoaded()"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording(TConstArrayView<FString> Args)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecording()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "RegisterRecordingStartedCallback()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "RegisterRecordingStartedCallback(const FChaosVDRecordingStateChangedDelegate::FDelegate& InCallback)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (FWriteScopeLock)",
    "insertText": "WriteLock(DelegatesRWLock)"
  },
  {
    "label": "RegisterRecordingStopCallback()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterRecordingStopCallback(const FChaosVDRecordingStateChangedDelegate::FDelegate& InCallback)"
  },
  {
    "label": "RegisterRecordingStartFailedCallback()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterRecordingStartFailedCallback(const FChaosVDRecordingStartFailedDelegate::FDelegate& InCallback)"
  },
  {
    "label": "RegisterFullCaptureRequestedCallback()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "RegisterFullCaptureRequestedCallback(const FChaosVDCaptureRequestDelegate::FDelegate& InCallback)"
  },
  {
    "label": "RemoveRecordingStartedCallback()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveRecordingStartedCallback(const FDelegateHandle& InDelegateToRemove)"
  },
  {
    "label": "RemoveRecordingStopCallback()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveRecordingStopCallback(const FDelegateHandle& InDelegateToRemove)"
  },
  {
    "label": "RemoveRecordingStartFailedCallback()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveRecordingStartFailedCallback(const FDelegateHandle& InDelegateToRemove)"
  },
  {
    "label": "RemoveFullCaptureRequestedCallback()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveFullCaptureRequestedCallback(const FDelegateHandle& InDelegateToRemove)"
  },
  {
    "label": "GetAccumulatedRecordingTime()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetAccumulatedRecordingTime()"
  },
  {
    "label": "StopTrace()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "StopTrace()"
  },
  {
    "label": "GenerateRecordingFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRecordingFileName(FString& OutFileName)"
  },
  {
    "label": "RequestFullCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestFullCapture(float DeltaTime)"
  },
  {
    "label": "RecordingTimerTick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordingTimerTick(float DeltaTime)"
  },
  {
    "label": "HandleTraceStopRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTraceStopRequest(FTraceAuxiliary::EConnectionType TraceType, const FString& TraceDestination)"
  },
  {
    "label": "WaitForTraceSessionDisconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForTraceSessionDisconnect()"
  },
  {
    "label": "EnableRequiredTraceChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRequiredTraceChannels()"
  },
  {
    "label": "SaveAndDisabledCurrentEnabledTraceChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveAndDisabledCurrentEnabledTraceChannels()"
  },
  {
    "label": "RestoreTraceChannelsToPreRecordingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreTraceChannelsToPreRecordingState()"
  }
]