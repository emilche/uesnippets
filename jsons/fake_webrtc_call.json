[
  {
    "label": "FakeAudioSendStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeAudioSendStream"
  },
  {
    "label": "TelephoneEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TelephoneEvent"
  },
  {
    "label": "FakeAudioReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeAudioReceiveStream"
  },
  {
    "label": "FakeVideoSendStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoSendStream"
  },
  {
    "label": "FakeVideoReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVideoReceiveStream"
  },
  {
    "label": "FakeFlexfecReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeFlexfecReceiveStream"
  },
  {
    "label": "FakeCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeCall"
  },
  {
    "label": "FakeAudioSendStream()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_ENGINE_FAKE_WEBRTC_CALL_H_ # define MEDIA_ENGINE_FAKE_WEBRTC_CALL_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / video / video_frame . h \" # include \" call / audio_receive_stream . h \" # include \" call / audio_send_stream . h \" # include \" call / call . h \" # include \" call / flexfec_receive_stream . h \" # include \" call / test / mock_rtp_transport_controller_send . h \" # include \" call / video_receive_stream . h \" # include \" call / video_send_stream . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" rtc_base / buffer . h \" # include \" test / scoped_key_value_config . h \" namespace cricket { class FakeAudioSendStream final : public webrtc::AudioSendStream { public : struct TelephoneEvent { int payload_type = - 1 ; int payload_frequency = - 1 ; int event_code = 0 ; int duration_ms = 0 ; } ;)",
    "insertText": "FakeAudioSendStream(int id, const webrtc::AudioSendStream::Config& config)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "id()"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(const webrtc::AudioSendStream::Stats& stats)"
  },
  {
    "label": "GetLatestTelephoneEvent()",
    "kind": "Method",
    "detail": "Function (TelephoneEvent)",
    "insertText": "GetLatestTelephoneEvent()"
  },
  {
    "label": "IsSending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSending()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (sending_ = true ; } void)",
    "insertText": "Stop()"
  },
  {
    "label": "SendAudioData()",
    "kind": "Method",
    "detail": "Function (sending_ = false ; } void)",
    "insertText": "SendAudioData(std::unique_ptr<webrtc::AudioFrame> audio_frame)"
  },
  {
    "label": "SendTelephoneEvent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendTelephoneEvent(int payload_type, int payload_frequency, int event, int duration_ms)"
  },
  {
    "label": "SetMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMuted(bool muted)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioSendStream::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioSendStream::Stats)",
    "insertText": "GetStats(bool has_remote_tracks)"
  },
  {
    "label": "FakeAudioReceiveStream()",
    "kind": "Method",
    "detail": "Function (int id_ = - 1 ; TelephoneEvent latest_telephone_event_ ; webrtc::AudioSendStream::Config config_ ; webrtc::AudioSendStream::Stats stats_ ; bool sending_ = false ; bool muted_ = false ; } ; class FakeAudioReceiveStream final : public webrtc::AudioReceiveStreamInterface { public :)",
    "insertText": "FakeAudioReceiveStream(int id, const webrtc::AudioReceiveStreamInterface::Config& config)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(const webrtc::AudioReceiveStreamInterface::Stats& stats)"
  },
  {
    "label": "received_packets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "received_packets()"
  },
  {
    "label": "sink()",
    "kind": "Method",
    "detail": "Function (const webrtc::AudioSinkInterface*)",
    "insertText": "sink()"
  },
  {
    "label": "started()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "started()"
  },
  {
    "label": "SetSyncGroup()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . local_ssrc = local_ssrc ; } void)",
    "insertText": "SetSyncGroup(absl::string_view sync_group)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (config_ . sync_group =)",
    "insertText": "string(sync_group)"
  },
  {
    "label": "transport_cc()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "transport_cc()"
  },
  {
    "label": "remote_ssrc()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . transport_cc = transport_cc ; } uint32_t)",
    "insertText": "remote_ssrc()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (started_ = false ; } bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "SetDecoderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecoderMap(std::map<int, webrtc::SdpAudioFormat> decoder_map)"
  },
  {
    "label": "SetNackHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackHistory(int history_ms)"
  },
  {
    "label": "SetNonSenderRttMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonSenderRttMeasurement(bool enabled)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpExtensions(std::vector<webrtc::RtpExtension> extensions)"
  },
  {
    "label": "GetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (const std::vector<webrtc::RtpExtension>&)",
    "insertText": "GetRtpExtensions()"
  },
  {
    "label": "GetRtpExtensionMap()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpHeaderExtensionMap)",
    "insertText": "GetRtpExtensionMap()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioReceiveStreamInterface::Stats)",
    "insertText": "GetStats(bool get_and_clear_legacy_stats)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSink(webrtc::AudioSinkInterface* sink)"
  },
  {
    "label": "SetGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGain(float gain)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (base_mininum_playout_delay_ms_ = delay_ms ; return true ; } int)",
    "insertText": "GetBaseMinimumPlayoutDelayMs()"
  },
  {
    "label": "FakeVideoSendStream()",
    "kind": "Method",
    "detail": "Function (} private : int id_ = - 1 ; webrtc::AudioReceiveStreamInterface::Config config_ ; webrtc::AudioReceiveStreamInterface::Stats stats_ ; int received_packets_ = 0 ; webrtc::AudioSinkInterface* sink_ = nullptr ; float gain_ = 1 . 0 f ; rtc::Buffer last_packet_ ; bool started_ = false ; int base_mininum_playout_delay_ms_ = 0 ; } ; class FakeVideoSendStream final : public webrtc::VideoSendStream,public rtc::VideoSinkInterface<webrtc::VideoFrame> { public :)",
    "insertText": "FakeVideoSendStream(webrtc::VideoSendStream::Config config, webrtc::VideoEncoderConfig encoder_config)"
  },
  {
    "label": "FakeVideoSendStream()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeVideoSendStream()"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (const webrtc::VideoSendStream::Config&)",
    "insertText": "GetConfig()"
  },
  {
    "label": "GetEncoderConfig()",
    "kind": "Method",
    "detail": "Function (const webrtc::VideoEncoderConfig&)",
    "insertText": "GetEncoderConfig()"
  },
  {
    "label": "GetVideoStreams()",
    "kind": "Method",
    "detail": "Function (const std::vector<webrtc::VideoStream>&)",
    "insertText": "GetVideoStreams()"
  },
  {
    "label": "GetVp8Settings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVp8Settings(webrtc::VideoCodecVP8* settings)"
  },
  {
    "label": "GetVp9Settings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVp9Settings(webrtc::VideoCodecVP9* settings)"
  },
  {
    "label": "GetH264Settings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetH264Settings(webrtc::VideoCodecH264* settings)"
  },
  {
    "label": "GetNumberOfSwappedFrames()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumberOfSwappedFrames()"
  },
  {
    "label": "GetLastWidth()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLastWidth()"
  },
  {
    "label": "GetLastHeight()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLastHeight()"
  },
  {
    "label": "GetLastTimestamp()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetLastTimestamp()"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(const webrtc::VideoSendStream::Stats& stats)"
  },
  {
    "label": "num_encoder_reconfigurations()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_encoder_reconfigurations()"
  },
  {
    "label": "source()",
    "kind": "Method",
    "detail": "Function (rtc::VideoSourceInterface<webrtc::VideoFrame>*)",
    "insertText": "source()"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnFrame(const webrtc::VideoFrame& frame)"
  },
  {
    "label": "UpdateActiveSimulcastLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveSimulcastLayers(std::vector<bool> active_layers)"
  },
  {
    "label": "AddAdaptationResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAdaptationResource(rtc::scoped_refptr<webrtc::Resource> resource)"
  },
  {
    "label": "GetAdaptationResources()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<webrtc::Resource>>)",
    "insertText": "GetAdaptationResources()"
  },
  {
    "label": "SetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSource(rtc::VideoSourceInterface<webrtc::VideoFrame>* source, const webrtc::DegradationPreference& degradation_preference)"
  },
  {
    "label": "ReconfigureVideoEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconfigureVideoEncoder(webrtc::VideoEncoderConfig config)"
  },
  {
    "label": "FakeVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (bool sending_ ; webrtc::VideoSendStream::Config config_ ; webrtc::VideoEncoderConfig encoder_config_ ; std::vector<webrtc::VideoStream> video_streams_ ; rtc::VideoSinkWants sink_wants_ ; bool codec_settings_set_ ; union CodecSpecificSettings { webrtc::VideoCodecVP8 vp8 ; webrtc::VideoCodecVP9 vp9 ; webrtc::VideoCodecH264 h264 ; } codec_specific_settings_ ; bool resolution_scaling_enabled_ ; bool framerate_scaling_enabled_ ; rtc::VideoSourceInterface<webrtc::VideoFrame>* source_ ; int num_swapped_frames_ ; absl::optional<webrtc::VideoFrame> last_frame_ ; webrtc::VideoSendStream::Stats stats_ ; int num_encoder_reconfigurations_ = 0 ; } ; class FakeVideoReceiveStream final : public webrtc::VideoReceiveStreamInterface { public :)",
    "insertText": "FakeVideoReceiveStream(webrtc::VideoReceiveStreamInterface::Config config)"
  },
  {
    "label": "IsReceiving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReceiving()"
  },
  {
    "label": "InjectFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectFrame(const webrtc::VideoFrame& frame)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(const webrtc::VideoReceiveStreamInterface::Stats& stats)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources()"
  },
  {
    "label": "base_mininum_playout_delay_ms()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "base_mininum_playout_delay_ms()"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetAndGetRecordingState()",
    "kind": "Method",
    "detail": "Function (} RecordingState)",
    "insertText": "SetAndGetRecordingState(RecordingState state, bool generate_key_frame)"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateKeyFrame()"
  },
  {
    "label": "SetRtcpMode()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . transport_cc = transport_cc ; } void)",
    "insertText": "SetRtcpMode(webrtc::RtcpMode mode)"
  },
  {
    "label": "SetFlexFecProtection()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . rtcp_mode = mode ; } void)",
    "insertText": "SetFlexFecProtection(webrtc::RtpPacketSinkInterface* sink)"
  },
  {
    "label": "protected_by_flexfec()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . packet_sink_ = sink ; config_ . rtp .)",
    "insertText": "protected_by_flexfec(sink != nullptr)"
  },
  {
    "label": "SetLossNotificationEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLossNotificationEnabled(bool enabled)"
  },
  {
    "label": "SetNackHistory()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . lntf . enabled = enabled ; } void)",
    "insertText": "SetNackHistory(webrtc::TimeDelta history)"
  },
  {
    "label": "ms()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . nack . rtp_history_ms = history .)",
    "insertText": "ms()"
  },
  {
    "label": "SetProtectionPayloadTypes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProtectionPayloadTypes(int red_payload_type, int ulpfec_payload_type)"
  },
  {
    "label": "SetRtcpXr()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . red_payload_type = red_payload_type ; config_ . rtp . ulpfec_payload_type = ulpfec_payload_type ; } void)",
    "insertText": "SetRtcpXr(Config::Rtp::RtcpXr rtcp_xr)"
  },
  {
    "label": "SetAssociatedPayloadTypes()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . rtcp_xr = rtcp_xr ; } void)",
    "insertText": "SetAssociatedPayloadTypes(std::map<int, int> associated_payload_types)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (config_ . rtp . rtx_associated_payload_types =)",
    "insertText": "move(associated_payload_types)"
  },
  {
    "label": "SetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSsrc(uint32_t local_ssrc)"
  },
  {
    "label": "payload_type()",
    "kind": "Method",
    "detail": "Function (config_ . rtcp_mode = mode ; } int)",
    "insertText": "payload_type()"
  },
  {
    "label": "FakeCall()",
    "kind": "Method",
    "detail": "Function (webrtc::FlexfecReceiveStream::Config config_ ; } ; class FakeCall final : public webrtc::Call,public webrtc::PacketReceiver { public :)",
    "insertText": "FakeCall(webrtc::test::ScopedKeyValueConfig* field_trials = nullptr)"
  },
  {
    "label": "FakeCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeCall(webrtc::TaskQueueBase* worker_thread, webrtc::TaskQueueBase* network_thread, webrtc::test::ScopedKeyValueConfig* field_trials = nullptr)"
  },
  {
    "label": "FakeCall()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeCall()"
  },
  {
    "label": "GetMockTransportControllerSend()",
    "kind": "Method",
    "detail": "Function (webrtc::MockRtpTransportControllerSend*)",
    "insertText": "GetMockTransportControllerSend()"
  },
  {
    "label": "GetVideoReceiveStreams()",
    "kind": "Method",
    "detail": "Function (const std::vector<FakeVideoReceiveStream*>&)",
    "insertText": "GetVideoReceiveStreams()"
  },
  {
    "label": "GetAudioSendStreams()",
    "kind": "Method",
    "detail": "Function (const std::vector<FakeAudioSendStream*>&)",
    "insertText": "GetAudioSendStreams()"
  },
  {
    "label": "GetAudioSendStream()",
    "kind": "Method",
    "detail": "Function (const FakeAudioSendStream*)",
    "insertText": "GetAudioSendStream(uint32_t ssrc)"
  },
  {
    "label": "GetAudioReceiveStreams()",
    "kind": "Method",
    "detail": "Function (const std::vector<FakeAudioReceiveStream*>&)",
    "insertText": "GetAudioReceiveStreams()"
  },
  {
    "label": "GetAudioReceiveStream()",
    "kind": "Method",
    "detail": "Function (const FakeAudioReceiveStream*)",
    "insertText": "GetAudioReceiveStream(uint32_t ssrc)"
  },
  {
    "label": "GetVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (const FakeVideoReceiveStream*)",
    "insertText": "GetVideoReceiveStream(uint32_t ssrc)"
  },
  {
    "label": "GetFlexfecReceiveStreams()",
    "kind": "Method",
    "detail": "Function (const std::vector<FakeFlexfecReceiveStream*>&)",
    "insertText": "GetFlexfecReceiveStreams()"
  },
  {
    "label": "last_sent_packet()",
    "kind": "Method",
    "detail": "Function (rtc::SentPacket)",
    "insertText": "last_sent_packet()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = delivered_packets_by_ssrc_ .)",
    "insertText": "find(ssrc)"
  },
  {
    "label": "last_sent_nonnegative_packet_id()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "last_sent_nonnegative_packet_id()"
  },
  {
    "label": "GetNumCreatedSendStreams()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumCreatedSendStreams()"
  },
  {
    "label": "GetNumCreatedReceiveStreams()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumCreatedReceiveStreams()"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStats(const webrtc::Call::Stats& stats)"
  },
  {
    "label": "SetClientBitratePreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClientBitratePreferences(const webrtc::BitrateSettings& preferences)"
  },
  {
    "label": "SetFieldTrial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFieldTrial(const std::string& field_trial_string)"
  },
  {
    "label": "ScopedKeyValueConfig()",
    "kind": "Method",
    "detail": "Function (trials_overrides_ = std::make_unique<webrtc::)",
    "insertText": "ScopedKeyValueConfig(*trials_, field_trial_string)"
  },
  {
    "label": "trials()",
    "kind": "Method",
    "detail": "Function (} const webrtc::FieldTrialsView&)",
    "insertText": "trials()"
  },
  {
    "label": "DestroyAudioSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAudioSendStream(webrtc::AudioSendStream* send_stream)"
  },
  {
    "label": "CreateAudioReceiveStream()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioReceiveStreamInterface*)",
    "insertText": "CreateAudioReceiveStream(const webrtc::AudioReceiveStreamInterface::Config& config)"
  },
  {
    "label": "DestroyAudioReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAudioReceiveStream(webrtc::AudioReceiveStreamInterface* receive_stream)"
  },
  {
    "label": "CreateVideoSendStream()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoSendStream*)",
    "insertText": "CreateVideoSendStream(webrtc::VideoSendStream::Config config, webrtc::VideoEncoderConfig encoder_config)"
  },
  {
    "label": "DestroyVideoSendStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVideoSendStream(webrtc::VideoSendStream* send_stream)"
  },
  {
    "label": "CreateVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoReceiveStreamInterface*)",
    "insertText": "CreateVideoReceiveStream(webrtc::VideoReceiveStreamInterface::Config config)"
  },
  {
    "label": "DestroyVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyVideoReceiveStream(webrtc::VideoReceiveStreamInterface* receive_stream)"
  },
  {
    "label": "CreateFlexfecReceiveStream()",
    "kind": "Method",
    "detail": "Function (webrtc::FlexfecReceiveStream*)",
    "insertText": "CreateFlexfecReceiveStream(const webrtc::FlexfecReceiveStream::Config config)"
  },
  {
    "label": "DestroyFlexfecReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyFlexfecReceiveStream(webrtc::FlexfecReceiveStream* receive_stream)"
  },
  {
    "label": "Receiver()",
    "kind": "Method",
    "detail": "Function (webrtc::PacketReceiver*)",
    "insertText": "Receiver()"
  },
  {
    "label": "DeliverPacket()",
    "kind": "Method",
    "detail": "Function (DeliveryStatus)",
    "insertText": "DeliverPacket(webrtc::MediaType media_type, rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "GetTransportControllerSend()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpTransportControllerSendInterface*)",
    "insertText": "GetTransportControllerSend()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase*)",
    "insertText": "network_thread()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "SignalChannelNetworkState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalChannelNetworkState(webrtc::MediaType media, webrtc::NetworkState state)"
  },
  {
    "label": "OnAudioTransportOverheadChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioTransportOverheadChanged(int transport_overhead_per_packet)"
  },
  {
    "label": "OnLocalSsrcUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSsrcUpdated(webrtc::AudioReceiveStreamInterface& stream, uint32_t local_ssrc)"
  },
  {
    "label": "OnLocalSsrcUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSsrcUpdated(webrtc::VideoReceiveStreamInterface& stream, uint32_t local_ssrc)"
  },
  {
    "label": "OnLocalSsrcUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalSsrcUpdated(webrtc::FlexfecReceiveStream& stream, uint32_t local_ssrc)"
  },
  {
    "label": "OnUpdateSyncGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateSyncGroup(webrtc::AudioReceiveStreamInterface& stream, absl::string_view sync_group)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const rtc::SentPacket& sent_packet)"
  }
]