[
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "ProcessHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessHandle"
  },
  {
    "label": "ProcessImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessImpl"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Storage"
  },
  {
    "label": "WorkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkManager"
  },
  {
    "label": "ProcessStartInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStartInfo"
  },
  {
    "label": "ProcessStartInfoHolder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStartInfoHolder"
  },
  {
    "label": "ProcessStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStats"
  },
  {
    "label": "InitMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InitMessage"
  },
  {
    "label": "InitResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InitResponse"
  },
  {
    "label": "CreateFileMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateFileMessage"
  },
  {
    "label": "CreateFileResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateFileResponse"
  },
  {
    "label": "CloseFileMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CloseFileMessage"
  },
  {
    "label": "CloseFileResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CloseFileResponse"
  },
  {
    "label": "DeleteFileMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeleteFileMessage"
  },
  {
    "label": "DeleteFileResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeleteFileResponse"
  },
  {
    "label": "CopyFileMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyFileMessage"
  },
  {
    "label": "CopyFileResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyFileResponse"
  },
  {
    "label": "MoveFileMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveFileMessage"
  },
  {
    "label": "MoveFileResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveFileResponse"
  },
  {
    "label": "ChmodResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChmodResponse"
  },
  {
    "label": "ChmodMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChmodMessage"
  },
  {
    "label": "GetFullFileNameMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetFullFileNameMessage"
  },
  {
    "label": "GetFullFileNameResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetFullFileNameResponse"
  },
  {
    "label": "GetLongPathNameMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetLongPathNameMessage"
  },
  {
    "label": "GetLongPathNameResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetLongPathNameResponse"
  },
  {
    "label": "CreateDirectoryMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateDirectoryMessage"
  },
  {
    "label": "CreateDirectoryResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateDirectoryResponse"
  },
  {
    "label": "RemoveDirectoryMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveDirectoryMessage"
  },
  {
    "label": "RemoveDirectoryResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemoveDirectoryResponse"
  },
  {
    "label": "ListDirectoryMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListDirectoryMessage"
  },
  {
    "label": "ListDirectoryResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ListDirectoryResponse"
  },
  {
    "label": "WrittenFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WrittenFile"
  },
  {
    "label": "NextProcessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NextProcessInfo"
  },
  {
    "label": "Session",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Session"
  },
  {
    "label": "BinaryModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryModule"
  },
  {
    "label": "MemoryMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryMap"
  },
  {
    "label": "FileMappingEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileMappingEntry"
  },
  {
    "label": "ActiveFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActiveFile"
  },
  {
    "label": "std",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "std"
  },
  {
    "label": "RunProcess()",
    "kind": "Method",
    "detail": "Function (# pragma once # define Local_GetLongPathNameW uba::GetLongPathNameW # include \" UbaFile . h \" # include \" UbaDirectoryTable . h \" # include \" UbaFileMapping . h \" # include \" UbaProcessHandle . h \" # include \" UbaProcessStartInfo . h \" # include \" UbaSessionCreateInfo . h \" # include \" UbaStats . h \" # include \" UbaTrace . h \" # include \" UbaThread . h \" namespace uba { class Process ; class ProcessHandle ; class ProcessImpl ; class Storage ; class WorkManager ; struct ProcessStartInfo ; struct ProcessStartInfoHolder ; struct ProcessStats ; struct InitMessage ; struct InitResponse ; struct CreateFileMessage ; struct CreateFileResponse ; struct CloseFileMessage ; struct CloseFileResponse ; struct DeleteFileMessage ; struct DeleteFileResponse ; struct CopyFileMessage ; struct CopyFileResponse ; struct MoveFileMessage ; struct MoveFileResponse ; struct ChmodResponse ; struct ChmodMessage ; struct GetFullFileNameMessage ; struct GetFullFileNameResponse ; struct GetLongPathNameMessage ; struct GetLongPathNameResponse ; struct CreateDirectoryMessage ; struct CreateDirectoryResponse ; struct RemoveDirectoryMessage ; struct RemoveDirectoryResponse ; struct ListDirectoryMessage ; struct ListDirectoryResponse ; struct WrittenFile ; struct NextProcessInfo ; class Session { public : ProcessHandle)",
    "insertText": "RunProcess(const ProcessStartInfo& startInfo, bool async = true, bool enableDetour = true)"
  },
  {
    "label": "CancelAllProcessesAndWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllProcessesAndWait(bool terminate = true)"
  },
  {
    "label": "PrintSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSummary(Logger& logger)"
  },
  {
    "label": "RefreshDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshDirectory(const tchar* dirName)"
  },
  {
    "label": "RegisterNewFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterNewFile(const tchar* filePath)"
  },
  {
    "label": "RegisterDeleteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDeleteFile(const tchar* filePath)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (using CustomServiceFunction = Function<)",
    "insertText": "u32(Process& handle, const void* recv, u32 recvSize, void* send, u32 sendCapacity)"
  },
  {
    "label": "RegisterCustomService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomService(CustomServiceFunction&& function)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using GetNextProcessFunction = Function<)",
    "insertText": "bool(Process& handle, NextProcessInfo& outNextProcess, u32 prevExitCode)"
  },
  {
    "label": "RegisterGetNextProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGetNextProcess(GetNextProcessFunction&& function)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetId()"
  },
  {
    "label": "GetActiveProcessCount()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetActiveProcessCount()"
  },
  {
    "label": "GetStorage()",
    "kind": "Method",
    "detail": "Function (Storage&)",
    "insertText": "GetStorage()"
  },
  {
    "label": "GetLogger()",
    "kind": "Method",
    "detail": "Function (MutableLogger&)",
    "insertText": "GetLogger()"
  },
  {
    "label": "GetLogWriter()",
    "kind": "Method",
    "detail": "Function (LogWriter&)",
    "insertText": "GetLogWriter()"
  },
  {
    "label": "GetTrace()",
    "kind": "Method",
    "detail": "Function (Trace&)",
    "insertText": "GetTrace()"
  },
  {
    "label": "GetRules()",
    "kind": "Method",
    "detail": "Function (const ApplicationRules*)",
    "insertText": "GetRules(const ProcessStartInfo& si)"
  },
  {
    "label": "GetTempPath()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetTempPath()"
  },
  {
    "label": "GetRootDir()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetRootDir()"
  },
  {
    "label": "ShouldStoreObjFilesCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStoreObjFilesCompressed()"
  },
  {
    "label": "CreateProcessId()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "CreateProcessId()"
  },
  {
    "label": "Session()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "Session(const SessionCreateInfo& info, const tchar* logPrefix, bool runningRemote, WorkManager* workManager = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(const SessionCreateInfo& info)"
  },
  {
    "label": "ValidateStartInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateStartInfo(const ProcessStartInfo& startInfo)"
  },
  {
    "label": "InternalRunProcess()",
    "kind": "Method",
    "detail": "Function (ProcessHandle)",
    "insertText": "InternalRunProcess(const ProcessStartInfo& startInfo, bool async, ProcessImpl* parent, bool enableDetour)"
  },
  {
    "label": "ProcessAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAdded(Process& process, u32 sessionId)"
  },
  {
    "label": "ProcessExited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExited(ProcessImpl& process, u64 executionTime)"
  },
  {
    "label": "FlushDeadProcesses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDeadProcesses()"
  },
  {
    "label": "PrintProcessStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintProcessStats(ProcessStats& stats, const tchar* logName)"
  },
  {
    "label": "StartTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrace(const tchar* traceName)"
  },
  {
    "label": "StopTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopTrace(const tchar* writeFile)"
  },
  {
    "label": "StopTraceThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTraceThread()"
  },
  {
    "label": "GetDirectoryTableSize()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetDirectoryTableSize()"
  },
  {
    "label": "GetFileMappingSize()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetFileMappingSize()"
  },
  {
    "label": "GetMemoryMapAlignment()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetMemoryMapAlignment(const StringView& fileName)"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (SessionStats&)",
    "insertText": "Stats()"
  },
  {
    "label": "GetBinaryModules()",
    "kind": "Method",
    "detail": "Function (struct BinaryModule { TString name ; TString path ; u32 fileAttributes = 0 ; bool isSystem = false ; } ; bool)",
    "insertText": "GetBinaryModules(Vector<BinaryModule>& out, const tchar* application)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Vector<BinaryModule>& v)"
  },
  {
    "label": "IsRarelyRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRarelyRead(ProcessImpl& process, const StringBufferBase& fileName)"
  },
  {
    "label": "IsRarelyReadAfterWritten()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRarelyReadAfterWritten(ProcessImpl& process, const StringView& fileName)"
  },
  {
    "label": "IsKnownSystemFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownSystemFile(const tchar* applicationName)"
  },
  {
    "label": "ShouldWriteToDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteToDisk(const StringView& fileName)"
  },
  {
    "label": "WriteDirectoryEntries()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "WriteDirectoryEntries(const StringKey& dirKey, tchar* dirPath, u32* outTableOffset = nullptr)"
  },
  {
    "label": "AddFileMapping()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "AddFileMapping(StringKey fileNameKey, const tchar* fileName, const tchar* newFileName, u64 fileSize = InvalidValue)"
  },
  {
    "label": "CreateMemoryMapFromFile()",
    "kind": "Method",
    "detail": "Function (struct MemoryMap { StringBuffer<1 2 8> name ; u64 size = 0 ; } ; bool)",
    "insertText": "CreateMemoryMapFromFile(MemoryMap& out, StringKey fileNameKey, const tchar* fileName, bool isCompressed, u64 alignment)"
  },
  {
    "label": "CreateMemoryMapFromView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateMemoryMapFromView(MemoryMap& out, StringKey fileNameKey, const tchar* fileName, const CasKey& casKey, u64 alignment)"
  },
  {
    "label": "RegisterCreateFileForWrite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterCreateFileForWrite(StringKey fileNameKey, const StringView& fileName, bool registerRealFile, u64 fileSize = 0, u64 lastWriteTime = 0, bool invalidateStorage = true)"
  },
  {
    "label": "RegisterDeleteFile()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "RegisterDeleteFile(StringKey fileNameKey, const StringView& fileName)"
  },
  {
    "label": "PrepareProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareProcess(ProcessStartInfoHolder& startInfo, bool isChild, StringBufferBase& outRealApplication, const tchar*& outRealWorkingDir)"
  },
  {
    "label": "GetProcessEnvironmentVariables()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetProcessEnvironmentVariables()"
  },
  {
    "label": "PrintSessionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSessionStats(Logger& logger)"
  },
  {
    "label": "GetInitResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInitResponse(InitResponse& out, const InitMessage& msg)"
  },
  {
    "label": "CreateFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateFile(CreateFileResponse& out, const CreateFileMessage& msg)"
  },
  {
    "label": "CloseFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseFile(CloseFileResponse& out, const CloseFileMessage& msg)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFile(DeleteFileResponse& out, const DeleteFileMessage& msg)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(CopyFileResponse& out, const CopyFileMessage& msg)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFile(MoveFileResponse& out, const MoveFileMessage& msg)"
  },
  {
    "label": "Chmod()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Chmod(ChmodResponse& out, const ChmodMessage& msg)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(CreateDirectoryResponse& out, const CreateDirectoryMessage& msg)"
  },
  {
    "label": "RemoveDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDirectory(RemoveDirectoryResponse& out, const RemoveDirectoryMessage& msg)"
  },
  {
    "label": "GetFullFileName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFullFileName(GetFullFileNameResponse& out, const GetFullFileNameMessage& msg)"
  },
  {
    "label": "GetLongPathName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLongPathName(GetLongPathNameResponse& out, const GetLongPathNameMessage& msg)"
  },
  {
    "label": "GetListDirectoryInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetListDirectoryInfo(ListDirectoryResponse& out, tchar* dirName, const StringKey& dirKey)"
  },
  {
    "label": "WriteFilesToDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFilesToDisk(ProcessImpl& process, WrittenFile** files, u32 fileCount)"
  },
  {
    "label": "AllocFailed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocFailed(Process& process, const tchar* allocType, u32 error)"
  },
  {
    "label": "GetNextProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNextProcess(Process& process, bool& outNewProcess, NextProcessInfo& outNextProcess, u32 prevExitCode, BinaryReader& statsReader)"
  },
  {
    "label": "CustomMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CustomMessage(Process& process, BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "SHGetKnownFolderPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SHGetKnownFolderPath(Process& process, BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "HostRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HostRun(BinaryReader& reader, BinaryWriter& writer)"
  },
  {
    "label": "FileEntryAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileEntryAdded(StringKey fileNameKey, u64 lastWritten, u64 size)"
  },
  {
    "label": "FlushWrittenFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlushWrittenFiles(ProcessImpl& process)"
  },
  {
    "label": "UpdateEnvironment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateEnvironment(ProcessImpl& process, const tchar* reason, bool resetStats)"
  },
  {
    "label": "LogLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LogLine(ProcessImpl& process, const tchar* line, LogEntryType logType)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (CasKey CasKeyIsDirectory = { ~)",
    "insertText": "u64(0), ~u64(0), ~u32(0)"
  },
  {
    "label": "AddEnvironmentVariableNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnvironmentVariableNoLock(const tchar* key, const tchar* value)"
  },
  {
    "label": "WriteDirectoryEntriesInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteDirectoryEntriesInternal(DirectoryTable::Directory& dir, const StringKey& dirKey, const tchar* dirPath, bool isRefresh, u32& outTableOffset)"
  },
  {
    "label": "WriteDirectoryEntriesRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDirectoryEntriesRecursive(const StringKey& dirKey, tchar* dirPath, u32& outTableOffset)"
  },
  {
    "label": "CopyImports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyImports(Vector<BinaryModule>& out, const tchar* library, tchar* applicationDir, tchar* applicationDirEnd, UnorderedSet<TString>& handledImports, const char* const* loaderPaths)"
  },
  {
    "label": "CreateProcessJobObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateProcessJobObject()"
  },
  {
    "label": "GetSystemInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSystemInfo(StringBufferBase& out)"
  },
  {
    "label": "GetMemoryInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMemoryInfo(u64& outAvailable, u64& outTotal)"
  },
  {
    "label": "WriteSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSummary(BinaryWriter& writer, const Function<void(Logger& logger)>& summaryFunc)"
  },
  {
    "label": "UpdateCpuLoad()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateCpuLoad()"
  },
  {
    "label": "ExtractSymbolsFromObjectFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractSymbolsFromObjectFile(const CloseFileMessage& msg, const tchar* fileName, u64 fileSize)"
  },
  {
    "label": "ThreadTraceLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadTraceLoop()"
  },
  {
    "label": "TraceSessionUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSessionUpdate()"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (Storage& m_storage ; MutableLogger m_logger ; WorkManager* m_workManager ; StringBuffer<3 2> m_id ; StringBuffer<MaxPath> m_rootDir ; StringBuffer<MaxPath> m_sessionDir ; StringBuffer<MaxPath> m_sessionBinDir ; StringBuffer<MaxPath> m_sessionOutputDir ; StringBuffer<MaxPath> m_sessionLogDir ; StringBuffer<MaxPath> m_systemPath ; StringBuffer<MaxPath> m_tempPath ; bool m_runningRemote ; bool m_disableCustomAllocator ; bool m_allowMemoryMaps ; bool m_allowKeepFilesInMemory ; bool m_allowOutputFiles ; bool m_allowSpecialApplications ; bool m_suppressLogging ; bool m_shouldWriteToDisk ; bool m_detailedTrace ; bool m_traceChildProcesses ; bool m_logToFile ; bool m_storeObjFilesCompressed ; u64 m_keepOutputFileMemoryMapsThreshold ; Atomic<u32> m_processIdCounter ; MemoryBlock m_directoryTableMemory ; FileMappingHandle m_directoryTableHandle ; u8* m_directoryTableMem ; DirectoryTable m_directoryTable ; FileMappingHandle m_fileMappingTableHandle ; FileMappingBuffer m_fileMappingBuffer ; ReaderWriterLock m_fileMappingTableMemLock ; u8* m_fileMappingTableMem ; u32 m_fileMappingTableSize = 0 ; ReaderWriterLock m_fileMappingTableLookupLock ; struct FileMappingEntry { ReaderWriterLock lock ; FileMappingHandle mapping ; u64 mappingOffset = 0 ; u64 size = 0 ; bool isDir = false ; bool handled = false ; bool success = false ; } ; UnorderedMap<StringKey,FileMappingEntry> m_fileMappingTableLookup ; ReaderWriterLock m_nameToHashTableHandleLock ; u64 NameToHashMemSize = 4 8* 1 0 2 4* 1 0 2 4 ; MemoryBlock m_nameToHashTableMem ; Atomic<u64> m_fileIndexCounter = 8 0 0 0 0 0 0 0 0 0 ; FileMappingAllocator m_processCommunicationAllocator ; std::string m_detoursLibrary ; ReaderWriterLock m_processStatsLock ; ProcessStats m_processStats ; ReaderWriterLock m_processesLock ; UnorderedMap<u32,ProcessHandle> m_processes ; Vector<ProcessHandle> m_deadProcesses ; UnorderedMap<TString,Timer> m_applicationStats ; ReaderWriterLock m_outputFilesLock ; UnorderedMap<TString,TString> m_outputFiles ; ReaderWriterLock m_activeFilesLock ; struct ActiveFile { TString name ; StringKey nameKey ; } ; UnorderedMap<u32,ActiveFile> m_activeFiles ; u32 m_wantsOnCloseIdCounter = 1 ; SessionStats m_stats ; Trace m_trace ; Event m_traceThreadEvent ; Thread m_traceThread ; StringBuffer<2 5 6> m_traceOutputFile ; TString m_extraInfo ; u64 m_maxPageSize = ~)",
    "insertText": "u64(0)"
  },
  {
    "label": "GenerateNameForProcess()",
    "kind": "Method",
    "detail": "Function (u64 m_previousTotalCpuTime = 0 ; u64 m_previousIdleCpuTime = 0 ; float m_cpuLoad = 0 ; # if PLATFORM_WINDOWS ReaderWriterLock m_processJobObjectLock ; HANDLE m_processJobObject = NULL ; # endif Vector<u8> m_environmentMemory ; ReaderWriterLock m_environmentVariablesLock ; Vector<tchar> m_environmentVariables ; UnorderedSet<const tchar*,HashStringNoCase,EqualStringNoCase> m_localEnvironmentVariables ; GetNextProcessFunction m_getNextProcessFunction ; CustomServiceFunction m_customServiceFunction ; class ProcessImpl ; } ; void)",
    "insertText": "GenerateNameForProcess(StringBufferBase& out, const tchar* arguments, u32 counterSuffix)"
  },
  {
    "label": "GetZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetZone(StringBufferBase& outZone)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using FileAccess = u8 ; enum : u8 { FileAccess_Read = 1,FileAccess_Write = 2,FileAccess_ReadWrite = 3 } ; struct InitMessage { } ; struct InitResponse { u64 directoryTableHandle = 0 ; u32 directoryTableSize = 0 ; u32 directoryTableCount = 0 ; u64 mappedFileTableHandle = 0 ; u32 mappedFileTableSize = 0 ; u32 mappedFileTableCount = 0 ; } ; struct CreateFileMessage { ProcessImpl& process ; StringBuffer<> fileName ; StringKey fileNameKey ; FileAccess access ; } ; struct CreateFileResponse { StringBuffer<> fileName ; StringBuffer<> virtualFileName ; u64 size = InvalidValue ; u32 closeId = 0 ; u32 mappedFileTableSize = 0 ; u32 directoryTableSize = 0 ; } ; struct CloseFileMessage { ProcessImpl& process ; StringBuffer<> fileName ; StringKey newNameKey ; StringBuffer<> newName ; u32 closeId = 0 ; u32 attributes = 0 ; bool deleteOnClose = false ; bool success = true ; u64 mappingHandle = 0 ; u64 mappingWritten = 0 ; } ; struct CloseFileResponse { u32 directoryTableSize = 0 ; } ; struct DeleteFileMessage { ProcessImpl& process ; StringBuffer<> fileName ; StringKey fileNameKey ; u32 closeId = 0 ; } ; struct DeleteFileResponse { bool result = false ; u32 errorCode = ~ 0 u ; u32 directoryTableSize = 0 ; } ; struct CopyFileMessage { ProcessImpl& process ; StringKey fromKey ; StringBuffer<> fromName ; StringKey toKey ; StringBuffer<> toName ; } ; struct CopyFileResponse { StringBuffer<> fromName ; StringBuffer<> toName ; u32 closeId = 0 ; u32 errorCode = ~ 0 u ; u32 directoryTableSize = 0 ; } ; struct MoveFileMessage { ProcessImpl& process ; StringKey fromKey ; StringBuffer<> fromName ; StringKey toKey ; StringBuffer<> toName ; u32 flags = 0 ; } ; struct MoveFileResponse { bool result = false ; u32 errorCode = ~ 0 u ; u32 directoryTableSize = 0 ; } ; struct ChmodMessage { ProcessImpl& process ; StringKey fileNameKey ; StringBuffer<> fileName ; u32 fileMode = 0 ; } ; struct ChmodResponse { u32 errorCode = ~ 0 u ; } ; struct GetFullFileNameMessage { ProcessImpl& process ; StringBuffer<> fileName ; StringKey fileNameKey ; const u8* loaderPaths = nullptr ; u32 loaderPathsSize = 0 ; } ; struct GetFullFileNameResponse { StringBuffer<> fileName ; StringBuffer<> virtualFileName ; u32 mappedFileTableSize = 0 ; } ; struct GetLongPathNameMessage { ProcessImpl& process ; StringBuffer<> fileName ; } ; struct GetLongPathNameResponse { StringBuffer<> fileName ; u32 errorCode = ~ 0 u ; } ; struct CreateDirectoryMessage { StringKey nameKey ; StringBuffer<> name ; } ; struct CreateDirectoryResponse { bool result = false ; u32 errorCode = 0 ; u32 directoryTableSize = 0 ; } ; struct RemoveDirectoryMessage { StringKey nameKey ; StringBuffer<> name ; } ; struct RemoveDirectoryResponse { bool result = false ; u32 errorCode = 0 ; u32 directoryTableSize = 0 ; } ; struct ListDirectoryMessage { StringBuffer<> directoryName ; StringKey directoryNameKey ; } ; struct ListDirectoryResponse { u32 tableOffset = 0 ; u32 tableSize = 0 ; } ; struct WrittenFile { ProcessImpl* owner = nullptr ; StringKey key ; TString name ; FileMappingHandle mappingHandle ; u64 mappingWritten = 0 ; u64 originalMappingHandle = 0 ; u64 lastWriteTime = 0 ; u32 attributes = 0 ; } ; struct NextProcessInfo { TString arguments ; TString workingDir ; TString description ; TString logFile ; } ; } template<> struct std::hash<uba::ProcessHandle> { size_t)",
    "insertText": "operator()(const uba::ProcessHandle& g)"
  }
]