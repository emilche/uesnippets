[
  {
    "label": "rrClz32()",
    "kind": "Method",
    "detail": "Function (# ifndef __RADRR_BITSH__ # define __RADRR_BITSH__ # include \" rrCore . h \" U32)",
    "insertText": "rrClz32(U32 val)"
  },
  {
    "label": "rrClz64()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrClz64(U64 val)"
  },
  {
    "label": "rrCtz32()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrCtz32(U32 val)"
  },
  {
    "label": "rrCtz64()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrCtz64(U64 val)"
  },
  {
    "label": "rrClzBytes32()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrClzBytes32(U32 val)"
  },
  {
    "label": "rrClzBytes64()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrClzBytes64(U64 val)"
  },
  {
    "label": "rrCtzBytes32()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrCtzBytes32(U32 val)"
  },
  {
    "label": "rrCtzBytes64()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "rrCtzBytes64(U64 val)"
  },
  {
    "label": "rrLowestSetBitMask32()",
    "kind": "Method",
    "detail": "Function (RADINLINE U32)",
    "insertText": "rrLowestSetBitMask32(U32 val)"
  },
  {
    "label": "rrLowestSetBitMask64()",
    "kind": "Method",
    "detail": "Function (} RADINLINE U64)",
    "insertText": "rrLowestSetBitMask64(U64 val)"
  },
  {
    "label": "rrMaskThroughToLowestSet32()",
    "kind": "Method",
    "detail": "Function (} RADINLINE U32)",
    "insertText": "rrMaskThroughToLowestSet32(U32 val)"
  },
  {
    "label": "rrMaskThroughToLowestSet64()",
    "kind": "Method",
    "detail": "Function (} RADINLINE U64)",
    "insertText": "rrMaskThroughToLowestSet64(U64 val)"
  },
  {
    "label": "rrClearLowestSetBit32()",
    "kind": "Method",
    "detail": "Function (} RADINLINE U32)",
    "insertText": "rrClearLowestSetBit32(U32 val)"
  },
  {
    "label": "rrClearLowestSetBit64()",
    "kind": "Method",
    "detail": "Function (} RADINLINE U64)",
    "insertText": "rrClearLowestSetBit64(U64 val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__GNUC__) || defined(__clang__) static RADINLINE U32 rrClz32(U32 val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # define SYNTHESIZE_BYTE_FUNCS # elif)",
    "insertText": "defined(_MSC_VER) #if defined(__RADARM__) && defined(_WIN32_WCE) #define SYNTHESIZE_ALL #elif defined(__RADARM64__) #include <intrin.h> static RADINLINE U32 rrClz32(U32 val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # define SYNTHESIZE_BYTE_FUNCS # elif)",
    "insertText": "defined(__RADARM__) #include <intrin.h> static RADINLINE U32 rrClz32(U32 val)"
  },
  {
    "label": "hi()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "hi(U32) (val >> 32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # define SYNTHESIZE_BYTE_FUNCS # elif)",
    "insertText": "defined(__RADPPC__) #include <PPCIntrinsics.h> static RADINLINE U32 rrClz32(U32 val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # define SYNTHESIZE_BYTE_FUNCS # elif)",
    "insertText": "defined(__RADX64__) && (defined(__RADJAGUAR__) || defined(__AVX2__)) #include <immintrin.h> static RADINLINE U32 rrClz32(U32 val)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # define SYNTHESIZE_BYTE_FUNCS # elif)",
    "insertText": "defined(__RADX64__) #include <intrin.h> static RADINLINE U32 rrClz32(U32 val)"
  },
  {
    "label": "_BitScanReverse()",
    "kind": "Method",
    "detail": "Function (unsigned long idx ;)",
    "insertText": "_BitScanReverse(&idx, val)"
  },
  {
    "label": "_BitScanReverse64()",
    "kind": "Method",
    "detail": "Function (unsigned long idx ;)",
    "insertText": "_BitScanReverse64(&idx, val)"
  },
  {
    "label": "_BitScanForward()",
    "kind": "Method",
    "detail": "Function (unsigned long idx ;)",
    "insertText": "_BitScanForward(&idx, val)"
  },
  {
    "label": "_BitScanForward64()",
    "kind": "Method",
    "detail": "Function (unsigned long idx ;)",
    "insertText": "_BitScanForward64(&idx, val)"
  },
  {
    "label": "lo()",
    "kind": "Method",
    "detail": "Function (U32)",
    "insertText": "lo(U32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (U8 const lut [ 1 6 ] = { 0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4 } ; U32 nz = 3 2 ;)",
    "insertText": "if(val & 0xffff0000u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nz - = 1 6 ; val>> = 1 6 ; })",
    "insertText": "if(val & 0x0000ff00u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nz - = 8 ; val>> = 8 ; })",
    "insertText": "if(val & 0x000000f0u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (U8 const lut [ 1 6 ] = { 4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0 } ; U32 nz = 0 ;)",
    "insertText": "if((val & 0xffff) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nz + = 1 6 ; val>> = 1 6 ; })",
    "insertText": "if((val & 0x00ff) == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (nz + = 8 ; val>> = 8 ; })",
    "insertText": "if((val & 0x000f) == 0)"
  }
]