[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FCbAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbAttachment"
  },
  {
    "label": "FObjectValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectValue"
  },
  {
    "label": "FBinaryValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBinaryValue"
  },
  {
    "label": "FCompressedBinaryValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedBinaryValue"
  },
  {
    "label": "FCbPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbPackage"
  },
  {
    "label": "FObjectValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" CoreTypes . h \" # include \" IO / IoHash . h \" # include \" Memory / CompositeBuffer . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / TVariant . h \" # include \" Serialization / CompactBinary . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" class FArchive ; class FCbWriter ; template<FuncType> class TFunctionRef ; class FCbAttachment { struct FObjectValue { FCbObject Object ; FIoHash Hash ;)",
    "insertText": "FObjectValue(FCbObject&& Object, const FIoHash* Hash)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; struct FBinaryValue { FCompositeBuffer Buffer ; FIoHash Hash ; template<BufferType,)",
    "insertText": "decltype(FCompositeBuffer(DeclVal<BufferType>().MakeOwned()))* = nullptr> inline explicit FBinaryValue(BufferType&& InBuffer) : Buffer(Forward<BufferType>(InBuffer).MakeOwned()) , Hash(FIoHash::HashBuffer(Buffer))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<BufferType,)",
    "insertText": "decltype(FCompositeBuffer(DeclVal<BufferType>().MakeOwned()))* = nullptr> inline explicit FBinaryValue(BufferType&& InBuffer, const FIoHash& InHash) : Buffer(Forward<BufferType>(InBuffer).MakeOwned()) , Hash(InHash)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCompressedBinaryValue { FCompressedBuffer Buffer ; FIoHash Hash ; template<BufferType,)",
    "insertText": "decltype(FCompressedBuffer(DeclVal<BufferType>().MakeOwned()))* = nullptr> inline explicit FCompressedBinaryValue(BufferType&& InBuffer) : Buffer(Forward<BufferType>(InBuffer).MakeOwned()) , Hash(Buffer.GetRawHash())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<BufferType,)",
    "insertText": "decltype(FCompressedBuffer(DeclVal<BufferType>().MakeOwned()))* = nullptr> inline explicit FCompressedBinaryValue(BufferType&& InBuffer, const FIoHash& InHash) : Buffer(Forward<BufferType>(InBuffer).MakeOwned()) , Hash(InHash)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . ArgTypes,)",
    "insertText": "decltype(FBinaryValue(DeclVal<ArgTypes>()...))* = nullptr> inline FCbAttachment(TInPlaceType<FBinaryValue>, ArgTypes&&... Args) : Value(TInPlaceType<FBinaryValue>(), Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "TYPE_OF_NULLPTR()",
    "kind": "Method",
    "detail": "Function (Value . Emplace<)",
    "insertText": "TYPE_OF_NULLPTR()"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "FCbAttachment()"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbAttachment(const FCbObject& InValue) : Value(TInPlaceType<FObjectValue>(), FCbObject(InValue), nullptr)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbAttachment(FCbObject&& InValue) : Value(TInPlaceType<FObjectValue>(), MoveTemp(InValue), nullptr)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbAttachment(const FCbObject& InValue, const FIoHash& Hash) : Value(TInPlaceType<FObjectValue>(), FCbObject(InValue), &Hash)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbAttachment(FCbObject&& InValue, const FIoHash& Hash) : Value(TInPlaceType<FObjectValue>(), MoveTemp(InValue), &Hash)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<BufferType,)",
    "insertText": "decltype(FBinaryValue(DeclVal<BufferType>().MakeOwned()))* = nullptr> inline explicit FCbAttachment(BufferType&& InValue) : FCbAttachment(TInPlaceType<FBinaryValue>(), Forward<BufferType>(InValue).MakeOwned())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<BufferType,)",
    "insertText": "decltype(FBinaryValue(DeclVal<BufferType>().MakeOwned()))* = nullptr> inline explicit FCbAttachment(BufferType&& InValue, const FIoHash& InHash) : FCbAttachment(TInPlaceType<FBinaryValue>(), Forward<BufferType>(InValue).MakeOwned(), InHash)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbAttachment(const FCompressedBuffer& InValue) : Value(TInPlaceType<FCompressedBinaryValue>(), InValue)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (} } UE_INTERNAL)",
    "insertText": "FCbAttachment(const FCompressedBuffer& InValue, const FIoHash& Hash) : Value(TInPlaceType<FCompressedBinaryValue>(), InValue, Hash)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FCbAttachment(FCompressedBuffer&& InValue) : Value(TInPlaceType<FCompressedBinaryValue>(), InValue)"
  },
  {
    "label": "FCbAttachment()",
    "kind": "Method",
    "detail": "Function (} } UE_INTERNAL)",
    "insertText": "FCbAttachment(FCompressedBuffer&& InValue, const FIoHash& Hash) : Value(TInPlaceType<FCompressedBinaryValue>(), InValue, Hash)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "AsObject()",
    "kind": "Method",
    "detail": "Function (} FCbObject)",
    "insertText": "AsObject()"
  },
  {
    "label": "AsBinary()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer)",
    "insertText": "AsBinary()"
  },
  {
    "label": "AsCompositeBinary()",
    "kind": "Method",
    "detail": "Function (const FCompositeBuffer&)",
    "insertText": "AsCompositeBinary()"
  },
  {
    "label": "AsCompressedBinary()",
    "kind": "Method",
    "detail": "Function (const FCompressedBuffer&)",
    "insertText": "AsCompressedBinary()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsObject()"
  },
  {
    "label": "IsBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBinary()"
  },
  {
    "label": "IsCompressedBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompressedBinary()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "GetHash()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCbAttachment& Attachment)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryLoad(FCbFieldIterator& Fields)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLoad(FArchive& Ar, FCbBufferAllocator Allocator = FUniqueBuffer::Alloc)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FCbWriter& Writer)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save(FArchive& Ar)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (private : TVariant<TYPE_OF_NULLPTR,FObjectValue,FBinaryValue,FCompressedBinaryValue> Value ; } ; uint32)",
    "insertText": "GetTypeHash(const FCbAttachment& Attachment)"
  },
  {
    "label": "FSharedBuffer()",
    "kind": "Method",
    "detail": "Function (} class FCbPackage { public : using FAttachmentResolver = TFunctionRef<)",
    "insertText": "FSharedBuffer(const FIoHash& Hash)"
  },
  {
    "label": "FCbPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbPackage()"
  },
  {
    "label": "FCbPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCbPackage(FCbObject InObject)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject))"
  },
  {
    "label": "FCbPackage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbPackage(FCbObject InObject, FAttachmentResolver InResolver)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), InResolver)"
  },
  {
    "label": "FCbPackage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbPackage(FCbObject InObject, const FIoHash& InObjectHash)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), InObjectHash)"
  },
  {
    "label": "FCbPackage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCbPackage(FCbObject InObject, const FIoHash& InObjectHash, FAttachmentResolver InResolver)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), InObjectHash, InResolver)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} const FCbObject&)",
    "insertText": "GetObject()"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), nullptr, nullptr)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObject(FCbObject InObject, FAttachmentResolver InResolver)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), nullptr, &InResolver)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObject(FCbObject InObject, const FIoHash& InObjectHash)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), &InObjectHash, nullptr)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetObject(FCbObject InObject, const FIoHash& InObjectHash, FAttachmentResolver InResolver)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObject(MoveTemp(InObject), &InObjectHash, &InResolver)"
  },
  {
    "label": "GetAttachments()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FCbAttachment>)",
    "insertText": "GetAttachments()"
  },
  {
    "label": "FindAttachment()",
    "kind": "Method",
    "detail": "Function (const FCbAttachment*)",
    "insertText": "FindAttachment(const FCbAttachment& Attachment)"
  },
  {
    "label": "AddAttachment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAttachment(const FCbAttachment& Attachment)"
  },
  {
    "label": "AddAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttachment(Attachment, nullptr)"
  },
  {
    "label": "AddAttachment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAttachment(const FCbAttachment& Attachment, FAttachmentResolver Resolver)"
  },
  {
    "label": "AddAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttachment(Attachment, &Resolver)"
  },
  {
    "label": "RemoveAttachment()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RemoveAttachment(const FIoHash& Hash)"
  },
  {
    "label": "RemoveAttachment()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAttachment(const FCbAttachment& Attachment)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FCbPackage& Package)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCbPackage& Package)"
  },
  {
    "label": "SetObject()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetObject(FCbObject Object, const FIoHash* Hash, FAttachmentResolver* Resolver)"
  },
  {
    "label": "AddAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttachment(const FCbAttachment& Attachment, FAttachmentResolver* Resolver)"
  },
  {
    "label": "GatherAttachments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAttachments(const FCbObject& Object, FAttachmentResolver Resolver)"
  },
  {
    "label": "FSharedBuffer()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FSharedBuffer()"
  }
]