[
  {
    "label": "SDL_Point",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Point"
  },
  {
    "label": "SDL_FPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_FPoint"
  },
  {
    "label": "SDL_Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Rect"
  },
  {
    "label": "SDL_FRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_FRect"
  },
  {
    "label": "SDL_PointInRect()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_rect_h_ # define SDL_rect_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # include \" SDL_pixels . h \" # include \" SDL_rwops . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif typedef struct SDL_Point { int x ; int y ; } SDL_Point ; typedef struct SDL_FPoint { float x ; float y ; } SDL_FPoint ; typedef struct SDL_Rect { int x,y ; int w,h ; } SDL_Rect ; typedef struct SDL_FRect { float x ; float y ; float w ; float h ; } SDL_FRect ; SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r)"
  },
  {
    "label": "SDL_RectEmpty()",
    "kind": "Method",
    "detail": "Function (} SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_RectEmpty(const SDL_Rect *r)"
  },
  {
    "label": "SDL_RectEquals()",
    "kind": "Method",
    "detail": "Function (} SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b)"
  },
  {
    "label": "SDL_HasIntersection()",
    "kind": "Method",
    "detail": "Function (} DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_HasIntersection(const SDL_Rect * A, const SDL_Rect * B)"
  },
  {
    "label": "SDL_IntersectRect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_IntersectRect(const SDL_Rect * A, const SDL_Rect * B, SDL_Rect * result)"
  },
  {
    "label": "SDL_UnionRect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_UnionRect(const SDL_Rect * A, const SDL_Rect * B, SDL_Rect * result)"
  },
  {
    "label": "SDL_EnclosePoints()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_EnclosePoints(const SDL_Point * points, int count, const SDL_Rect * clip, SDL_Rect * result)"
  },
  {
    "label": "SDL_IntersectRectAndLine()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_IntersectRectAndLine(const SDL_Rect * rect, int *X1, int *Y1, int *X2, int *Y2)"
  },
  {
    "label": "SDL_PointInFRect()",
    "kind": "Method",
    "detail": "Function (SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_PointInFRect(const SDL_FPoint *p, const SDL_FRect *r)"
  },
  {
    "label": "SDL_FRectEmpty()",
    "kind": "Method",
    "detail": "Function (} SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_FRectEmpty(const SDL_FRect *r)"
  },
  {
    "label": "SDL_FRectEqualsEpsilon()",
    "kind": "Method",
    "detail": "Function (} SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_FRectEqualsEpsilon(const SDL_FRect *a, const SDL_FRect *b, const float epsilon)"
  },
  {
    "label": "SDL_FRectEquals()",
    "kind": "Method",
    "detail": "Function (} SDL_FORCE_INLINE SDL_bool)",
    "insertText": "SDL_FRectEquals(const SDL_FRect *a, const SDL_FRect *b)"
  },
  {
    "label": "SDL_HasIntersectionF()",
    "kind": "Method",
    "detail": "Function (} DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_HasIntersectionF(const SDL_FRect * A, const SDL_FRect * B)"
  },
  {
    "label": "SDL_IntersectFRect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_IntersectFRect(const SDL_FRect * A, const SDL_FRect * B, SDL_FRect * result)"
  },
  {
    "label": "SDL_UnionFRect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_UnionFRect(const SDL_FRect * A, const SDL_FRect * B, SDL_FRect * result)"
  },
  {
    "label": "SDL_EncloseFPoints()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_EncloseFPoints(const SDL_FPoint * points, int count, const SDL_FRect * clip, SDL_FRect * result)"
  },
  {
    "label": "SDL_IntersectFRectAndLine()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_IntersectFRectAndLine(const SDL_FRect * rect, float *X1, float *Y1, float *X2, float *Y2)"
  }
]