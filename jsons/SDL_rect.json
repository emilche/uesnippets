[
  {
    "label": "SDL_Point",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Point"
  },
  {
    "label": "SDL_FPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_FPoint"
  },
  {
    "label": "SDL_Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Rect"
  },
  {
    "label": "SDL_FRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_FRect"
  },
  {
    "label": "SDL_HasIntersection()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_HasIntersection(const SDL_Rect * A,\n                                                     const SDL_Rect * B)"
  },
  {
    "label": "SDL_IntersectRect()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_IntersectRect(const SDL_Rect * A,\n                                                   const SDL_Rect * B,\n                                                   SDL_Rect * result)"
  },
  {
    "label": "SDL_UnionRect()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_UnionRect(const SDL_Rect * A,\n                                           const SDL_Rect * B,\n                                           SDL_Rect * result)"
  },
  {
    "label": "SDL_EnclosePoints()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_EnclosePoints(const SDL_Point * points,\n                                                   int count,\n                                                   const SDL_Rect * clip,\n                                                   SDL_Rect * result)"
  },
  {
    "label": "SDL_IntersectRectAndLine()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_IntersectRectAndLine(const SDL_Rect *\n                                                          rect, int *X1,\n                                                          int *Y1, int *X2,\n                                                          int *Y2)"
  },
  {
    "label": "SDL_FRectEqualsEpsilon()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SDL_FRectEqualsEpsilon(a, b, SDL_FLT_EPSILON)"
  },
  {
    "label": "SDL_HasIntersectionF()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_HasIntersectionF(const SDL_FRect * A,\n                                                      const SDL_FRect * B)"
  },
  {
    "label": "SDL_IntersectFRect()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_IntersectFRect(const SDL_FRect * A,\n                                                    const SDL_FRect * B,\n                                                    SDL_FRect * result)"
  },
  {
    "label": "SDL_UnionFRect()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_UnionFRect(const SDL_FRect * A,\n                                            const SDL_FRect * B,\n                                            SDL_FRect * result)"
  },
  {
    "label": "SDL_EncloseFPoints()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_EncloseFPoints(const SDL_FPoint * points,\n                                                    int count,\n                                                    const SDL_FRect * clip,\n                                                    SDL_FRect * result)"
  },
  {
    "label": "SDL_IntersectFRectAndLine()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_IntersectFRectAndLine(const SDL_FRect *\n                                                           rect, float *X1,\n                                                           float *Y1, float *X2,\n                                                           float *Y2)"
  }
]