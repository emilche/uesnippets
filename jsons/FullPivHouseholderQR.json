[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "FullPivHouseholderQRMatrixQReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FullPivHouseholderQRMatrixQReturnType"
  },
  {
    "label": "FullPivHouseholderQR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FullPivHouseholderQR"
  },
  {
    "label": "SolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolverBase"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_FULLPIVOTINGHOUSEHOLDERQR_H # define EIGEN_FULLPIVOTINGHOUSEHOLDERQR_H namespace Eigen { namespace internal { template<_MatrixType> struct traits<FullPivHouseholderQR<_MatrixType>> : traits<_MatrixType> { typedef MatrixXpr XprKind ; typedef SolverStorage StorageKind ; typedef int StorageIndex ; enum { Flags = 0 } ; } ; template<MatrixType> struct FullPivHouseholderQRMatrixQReturnType ; template<MatrixType> struct traits<FullPivHouseholderQRMatrixQReturnType<MatrixType>> { typedef MatrixType::PlainObject ReturnType ; } ; } template<_MatrixType> class FullPivHouseholderQR : public SolverBase<FullPivHouseholderQR<_MatrixType>> { public : typedef _MatrixType MatrixType ; typedef SolverBase<FullPivHouseholderQR> Base ; class SolverBase<FullPivHouseholderQR> ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(FullPivHouseholderQR)"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_DYNAMIC()",
    "kind": "Method",
    "detail": "Function (MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef internal::FullPivHouseholderQRMatrixQReturnType<MatrixType> MatrixQReturnType ; typedef internal::plain_diag_type<MatrixType>::type HCoeffsType ; typedef Matrix<StorageIndex,1,)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_DYNAMIC(ColsAtCompileTime,RowsAtCompileTime), RowMajor, 1, EIGEN_SIZE_MIN_PREFER_FIXED(MaxColsAtCompileTime,MaxRowsAtCompileTime)"
  },
  {
    "label": "FullPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (typedef PermutationMatrix<ColsAtCompileTime,MaxColsAtCompileTime> PermutationType ; typedef internal::plain_row_type<MatrixType>::type RowVectorType ; typedef internal::plain_col_type<MatrixType>::type ColVectorType ; typedef MatrixType::PlainObject PlainObject ;)",
    "insertText": "FullPivHouseholderQR() : m_qr(), m_hCoeffs(), m_rows_transpositions(), m_cols_transpositions(), m_cols_permutation(), m_temp(), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "FullPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FullPivHouseholderQR(Index rows, Index cols) : m_qr(rows, cols), m_hCoeffs((std::min)(rows,cols)), m_rows_transpositions((std::min)(rows,cols)), m_cols_transpositions((std::min)(rows,cols)), m_cols_permutation(cols), m_temp(cols), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "FullPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "FullPivHouseholderQR(const EigenBase<InputType>& matrix) : m_qr(matrix.rows(), matrix.cols()), m_hCoeffs((std::min)(matrix.rows(), matrix.cols())), m_rows_transpositions((std::min)(matrix.rows(), matrix.cols())), m_cols_transpositions((std::min)(matrix.rows(), matrix.cols())), m_cols_permutation(matrix.cols()), m_temp(matrix.cols()), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived())"
  },
  {
    "label": "FullPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "FullPivHouseholderQR(EigenBase<InputType>& matrix) : m_qr(matrix.derived()), m_hCoeffs((std::min)(matrix.rows(), matrix.cols())), m_rows_transpositions((std::min)(matrix.rows(), matrix.cols())), m_cols_transpositions((std::min)(matrix.rows(), matrix.cols())), m_cols_permutation(matrix.cols()), m_temp(matrix.cols()), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "computeInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeInPlace()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_PARSED_BY_DOXYGEN template<Rhs> const Solve<FullPivHouseholderQR,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& b)"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (# endif MatrixQReturnType)",
    "insertText": "matrixQ(void)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (const MatrixType&)",
    "insertText": "matrixQR()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"FullPivHouseholderQR is not initialized.\")"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (const PermutationType&)",
    "insertText": "colsPermutation()"
  },
  {
    "label": "logAbsDeterminant()",
    "kind": "Method",
    "detail": "Function (MatrixType::RealScalar)",
    "insertText": "logAbsDeterminant()"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "rank()"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar premultiplied_threshold =)",
    "insertText": "abs(m_maxpivot) * threshold()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index result = 0 ;)",
    "insertText": "for(Index i = 0; i < m_nonzero_pivots; ++i) result += (abs(m_qr.coeff(i,i)) > premultiplied_threshold)"
  },
  {
    "label": "isInjective()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInjective()"
  },
  {
    "label": "isSurjective()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSurjective()"
  },
  {
    "label": "isInvertible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInvertible()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} const Inverse<FullPivHouseholderQR>)",
    "insertText": "inverse()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "hCoeffs()",
    "kind": "Method",
    "detail": "Function (} const HCoeffsType&)",
    "insertText": "hCoeffs()"
  },
  {
    "label": "setThreshold()",
    "kind": "Method",
    "detail": "Function (m_usePrescribedThreshold = true ; m_prescribedThreshold = threshold ; return* this ; } FullPivHouseholderQR&)",
    "insertText": "setThreshold(Default_t)"
  },
  {
    "label": "threshold()",
    "kind": "Method",
    "detail": "Function (m_usePrescribedThreshold = false ; return* this ; } RealScalar)",
    "insertText": "threshold()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized || m_usePrescribedThreshold)"
  },
  {
    "label": "nonzeroPivots()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonzeroPivots()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"LU is not initialized.\")"
  },
  {
    "label": "_solve_impl_transposed()",
    "kind": "Method",
    "detail": "Function (template<bool Conjugate,RhsType,DstType> void)",
    "insertText": "_solve_impl_transposed(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "absDeterminant()",
    "kind": "Method",
    "detail": "Function (MatrixType m_qr ; HCoeffsType m_hCoeffs ; IntDiagSizeVectorType m_rows_transpositions ; IntDiagSizeVectorType m_cols_transpositions ; PermutationType m_cols_permutation ; RowVectorType m_temp ; bool m_isInitialized,m_usePrescribedThreshold ; RealScalar m_prescribedThreshold,m_maxpivot ; Index m_nonzero_pivots ; RealScalar m_precision ; Index m_det_pq ; } ; template<MatrixType> MatrixType::RealScalar FullPivHouseholderQR<MatrixType)",
    "insertText": "absDeterminant()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_qr.rows() == m_qr.cols() && \"You can't take the determinant of a non-square matrix!\")"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> template<InputType> FullPivHouseholderQR<MatrixType>& FullPivHouseholderQR<MatrixType)",
    "insertText": "compute(const EigenBase<InputType>& matrix)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_qr = matrix .)",
    "insertText": "derived()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "size(std::min)(rows,cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_hCoeffs .)",
    "insertText": "resize(size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_temp .)",
    "insertText": "resize(cols)"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (m_precision = NumTraits<Scalar)",
    "insertText": "epsilon() * RealScalar(size)"
  },
  {
    "label": "biggest()",
    "kind": "Method",
    "detail": "Function (Index number_of_transpositions = 0 ; RealScalar)",
    "insertText": "biggest(0)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (m_nonzero_pivots = size ; m_maxpivot =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (Index row_of_biggest_in_corner,col_of_biggest_in_corner ; typedef internal::scalar_score_coeff_op<Scalar> Scoring ; typedef Scoring::result_type Score ; Score score = m_qr .)",
    "insertText": "bottomRightCorner(rows-k, cols-k) .unaryExpr(Scoring()) .maxCoeff(&row_of_biggest_in_corner, &col_of_biggest_in_corner)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (row_of_biggest_in_corner + = k ; col_of_biggest_in_corner + = k ; RealScalar biggest_in_corner = internal::abs_knowing_score<)",
    "insertText": "Scalar()(m_qr(row_of_biggest_in_corner, col_of_biggest_in_corner), score)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_nonzero_pivots = k ;)",
    "insertText": "for(Index i = k; i < size; i++)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_rows_transpositions .)",
    "insertText": "coeffRef(i) = internal::convert_index<StorageIndex>(i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_hCoeffs .)",
    "insertText": "coeffRef(i) = Scalar(0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} break ; } m_rows_transpositions .)",
    "insertText": "coeffRef(k) = internal::convert_index<StorageIndex>(row_of_biggest_in_corner)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_cols_transpositions .)",
    "insertText": "coeffRef(k) = internal::convert_index<StorageIndex>(col_of_biggest_in_corner)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "row(k).tail(cols-k).swap(m_qr.row(row_of_biggest_in_corner).tail(cols-k))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + number_of_transpositions ; })",
    "insertText": "if(k != col_of_biggest_in_corner)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "col(k).swap(m_qr.col(col_of_biggest_in_corner))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (+ + number_of_transpositions ; } RealScalar beta ; m_qr .)",
    "insertText": "col(k).tail(rows-k).makeHouseholderInPlace(m_hCoeffs.coeffRef(k), beta)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "coeffRef(k,k)"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "bottomRightCorner(rows-k, cols-k-1) .applyHouseholderOnTheLeft(m_qr.col(k).tail(rows-k-1), m_hCoeffs.coeffRef(k), &m_temp.coeffRef(k+1))"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (} m_cols_permutation .)",
    "insertText": "setIdentity(cols)"
  },
  {
    "label": "m_det_pq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_det_pq(number_of_transpositions%2)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<_MatrixType> template<RhsType,DstType> void FullPivHouseholderQR<_MatrixType)",
    "insertText": "_solve_impl(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "setZero()"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (Matrix<RhsType::Scalar,1,RhsType::ColsAtCompileTime>)",
    "insertText": "temp(rhs.cols())"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "row(k).swap(c.row(m_rows_transpositions.coeff(k)))"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "bottomRightCorner(remainingSize, rhs.cols()) .applyHouseholderOnTheLeft(m_qr.col(k).tail(remainingSize-1), m_hCoeffs.coeff(k), &temp.coeffRef(0))"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (} m_qr .)",
    "insertText": "topLeftCorner(l_rank, l_rank) .template triangularView<Upper>() .solveInPlace(c.topRows(l_rank))"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "topLeftCorner(l_rank, l_rank) .template triangularView<Upper>() .transpose().template conjugateIf<Conjugate>() .solveInPlace(c.topRows(l_rank))"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "topRows(l_rank) = c.topRows(l_rank)"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "bottomRows(rows()-l_rank).setZero()"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,1,DstType::ColsAtCompileTime>)",
    "insertText": "temp(dst.cols())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "size(std::min)(rows(), cols())"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "bottomRightCorner(remainingSize, dst.cols()) .applyHouseholderOnTheLeft(m_qr.col(k).tail(remainingSize-1).template conjugateIf<!Conjugate>(), m_hCoeffs.template conjugateIf<Conjugate>().coeff(k), &temp.coeffRef(0))"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "row(k).swap(dst.row(m_rows_transpositions.coeff(k)))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } # endif namespace internal { template<DstXprType,MatrixType> struct Assignment<DstXprType,Inverse<FullPivHouseholderQR<MatrixType>>,internal::assign_op<DstXprType::Scalar,FullPivHouseholderQR<MatrixType>::Scalar>,Dense2Dense> { typedef FullPivHouseholderQR<MatrixType> QrType ; typedef Inverse<QrType> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename QrType::Scalar> &)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (dst = src .)",
    "insertText": "nestedExpression().solve(MatrixType::Identity(src.rows(), src.cols()))"
  },
  {
    "label": "FullPivHouseholderQRMatrixQReturnType()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType> struct FullPivHouseholderQRMatrixQReturnType : public ReturnByValue<FullPivHouseholderQRMatrixQReturnType<MatrixType>> { public : typedef FullPivHouseholderQR<MatrixType>::IntDiagSizeVectorType IntDiagSizeVectorType ; typedef internal::plain_diag_type<MatrixType>::type HCoeffsType ; typedef Matrix<MatrixType::Scalar,1,MatrixType::RowsAtCompileTime,RowMajor,1,MatrixType::MaxRowsAtCompileTime> WorkVectorType ;)",
    "insertText": "FullPivHouseholderQRMatrixQReturnType(const MatrixType& qr, const HCoeffsType& hCoeffs, const IntDiagSizeVectorType& rowsTranspositions) : m_qr(qr), m_hCoeffs(hCoeffs), m_rowsTranspositions(rowsTranspositions)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "workspace()",
    "kind": "Method",
    "detail": "Function (WorkVectorType)",
    "insertText": "workspace(rows)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(result, workspace)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result, WorkVectorType& workspace)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "size(std::min)(rows, cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (workspace .)",
    "insertText": "resize(rows)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "setIdentity(rows, rows)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "block(k, k, rows-k, rows-k) .applyHouseholderOnTheLeft(m_qr.col(k).tail(rows-k-1), conj(m_hCoeffs.coeff(k)), &workspace.coeffRef(k))"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "row(k).swap(result.row(m_rowsTranspositions.coeff(k)))"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (} protected : MatrixType::Nested m_qr ; HCoeffsType::Nested m_hCoeffs ; IntDiagSizeVectorType::Nested m_rowsTranspositions ; } ; } template<MatrixType> FullPivHouseholderQR<MatrixType>::MatrixQReturnType FullPivHouseholderQR<MatrixType)",
    "insertText": "matrixQ()"
  },
  {
    "label": "fullPivHouseholderQr()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const FullPivHouseholderQR<MatrixBase<Derived>::PlainObject> MatrixBase<Derived)",
    "insertText": "fullPivHouseholderQr()"
  }
]