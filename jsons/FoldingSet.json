[
  {
    "label": "FoldingSetNodeID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetNodeID"
  },
  {
    "label": "FoldingSetImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetImpl"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "DefaultFoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultFoldingSetTrait"
  },
  {
    "label": "ContextualFoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContextualFoldingSetTrait"
  },
  {
    "label": "DefaultContextualFoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultContextualFoldingSetTrait"
  },
  {
    "label": "FoldingSetNodeIDRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetNodeIDRef"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FoldingSetIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetIterator"
  },
  {
    "label": "FoldingSetBucketIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetBucketIterator"
  },
  {
    "label": "FoldingSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSet"
  },
  {
    "label": "Ctx",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ctx"
  },
  {
    "label": "ContextualFoldingSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContextualFoldingSet"
  },
  {
    "label": "VectorT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorT"
  },
  {
    "label": "FoldingSetVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetVector"
  },
  {
    "label": "FoldingSetIteratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetIteratorImpl"
  },
  {
    "label": "FoldingSetBucketIteratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetBucketIteratorImpl"
  },
  {
    "label": "FoldingSetNodeWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FoldingSetNodeWrapper"
  },
  {
    "label": "FastFoldingSetNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastFoldingSetNode"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_FOLDINGSET_H # define LLVM_ADT_FOLDINGSET_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / iterator . h \" # include \" llvm / Support / Allocator . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class FoldingSetNodeID ; class FoldingSetImpl { void)",
    "insertText": "anchor()"
  },
  {
    "label": "FoldingSetImpl()",
    "kind": "Method",
    "detail": "Function (protected : void** Buckets ; unsigned NumBuckets ; unsigned NumNodes ; ~)",
    "insertText": "FoldingSetImpl()"
  },
  {
    "label": "FoldingSetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoldingSetImpl(unsigned Log2InitSize = 6)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (public : class Node { private : void* NextInFoldingSetBucket ; public :)",
    "insertText": "Node() : NextInFoldingSetBucket(nullptr)"
  },
  {
    "label": "getNextInBucket()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "getNextInBucket()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (NextInFoldingSetBucket = N ; } } ; void)",
    "insertText": "clear()"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNode(Node *N)"
  },
  {
    "label": "GetOrInsertNode()",
    "kind": "Method",
    "detail": "Function (Node*)",
    "insertText": "GetOrInsertNode(Node *N)"
  },
  {
    "label": "FindNodeOrInsertPos()",
    "kind": "Method",
    "detail": "Function (Node*)",
    "insertText": "FindNodeOrInsertPos(const FoldingSetNodeID &ID, void *&InsertPos)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNode(Node *N, void *InsertPos)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNode(Node *N)"
  },
  {
    "label": "GetOrInsertNode()",
    "kind": "Method",
    "detail": "Function (Node* Inserted =)",
    "insertText": "GetOrInsertNode(N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Inserted == N && \"Node already inserted!\")"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "GetNodeProfile()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetNodeProfile(Node *N, FoldingSetNodeID &ID)"
  },
  {
    "label": "NodeEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NodeEquals(Node *N, const FoldingSetNodeID &ID, unsigned IDHash, FoldingSetNodeID &TempID)"
  },
  {
    "label": "ComputeNodeHash()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "ComputeNodeHash(Node *N, FoldingSetNodeID &TempID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct FoldingSetTrait ; template<T> struct DefaultFoldingSetTrait { void)",
    "insertText": "Profile(const T &X, FoldingSetNodeID &ID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "Profile(ID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(T &X, FoldingSetNodeID &ID)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(T &X, const FoldingSetNodeID &ID, unsigned IDHash, FoldingSetNodeID &TempID)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "ComputeHash(T &X, FoldingSetNodeID &TempID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct FoldingSetTrait : public DefaultFoldingSetTrait<T> { } ; template<T,Ctx> struct ContextualFoldingSetTrait ; template<T,Ctx> struct DefaultContextualFoldingSetTrait { void)",
    "insertText": "Profile(T &X, FoldingSetNodeID &ID, Ctx Context)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "Profile(ID, Context)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(T &X, const FoldingSetNodeID &ID, unsigned IDHash, FoldingSetNodeID &TempID, Ctx Context)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "ComputeHash(T &X, FoldingSetNodeID &TempID, Ctx Context)"
  },
  {
    "label": "FoldingSetNodeIDRef()",
    "kind": "Method",
    "detail": "Function (} ; template<T,Ctx> struct ContextualFoldingSetTrait : public DefaultContextualFoldingSetTrait<T,Ctx> { } ; class FoldingSetNodeIDRef { const unsigned* Data ; size_t Size ; public :)",
    "insertText": "FoldingSetNodeIDRef() : Data(nullptr), Size(0)"
  },
  {
    "label": "FoldingSetNodeIDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FoldingSetNodeIDRef(const unsigned *D, size_t S) : Data(D), Size(S)"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "ComputeHash()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FoldingSetNodeIDRef)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FoldingSetNodeIDRef RHS)"
  },
  {
    "label": "getData()",
    "kind": "Method",
    "detail": "Function (const unsigned*)",
    "insertText": "getData()"
  },
  {
    "label": "FoldingSetNodeID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FoldingSetNodeID(FoldingSetNodeIDRef Ref) : Bits(Ref.getData(), Ref.getData() + Ref.getSize())"
  },
  {
    "label": "AddPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPointer(const void *Ptr)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(signed I)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(unsigned I)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(long I)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(unsigned long I)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(long long I)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(unsigned long long I)"
  },
  {
    "label": "AddBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoolean(bool B)"
  },
  {
    "label": "AddInteger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteger(B ? 1U : 0U)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddString(StringRef String)"
  },
  {
    "label": "AddNodeID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodeID(const FoldingSetNodeID &ID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "Add(const T &x)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (FoldingSetTrait<T)",
    "insertText": "Profile(x, *this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FoldingSetNodeID &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FoldingSetNodeIDRef RHS)"
  },
  {
    "label": "Intern()",
    "kind": "Method",
    "detail": "Function (FoldingSetNodeIDRef)",
    "insertText": "Intern(BumpPtrAllocator &Allocator)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} ; typedef FoldingSetImpl::Node FoldingSetNode ; template<class T> class FoldingSetIterator ; template<class T> class FoldingSetBucketIterator ; template<T> bool DefaultFoldingSetTrait<T)",
    "insertText": "Equals(T &X, const FoldingSetNodeID &ID, unsigned , FoldingSetNodeID &TempID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (FoldingSetTrait<T)",
    "insertText": "Profile(X, TempID)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} template<T,Ctx> bool DefaultContextualFoldingSetTrait<T,Ctx)",
    "insertText": "Equals(T &X, const FoldingSetNodeID &ID, unsigned , FoldingSetNodeID &TempID, Ctx Context)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (ContextualFoldingSetTrait<T,Ctx)",
    "insertText": "Profile(X, TempID, Context)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* TN = static_cast<)",
    "insertText": "T(N)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (FoldingSetTrait<T)",
    "insertText": "Profile(*TN, ID)"
  },
  {
    "label": "FoldingSet()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FoldingSet(unsigned Log2InitSize = 6) : FoldingSetImpl(Log2InitSize)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} typedef FoldingSetIterator<T> iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "bucket_begin()",
    "kind": "Method",
    "detail": "Function (} typedef FoldingSetBucketIterator<T> bucket_iterator ; bucket_iterator)",
    "insertText": "bucket_begin(unsigned hash)"
  },
  {
    "label": "bucket_end()",
    "kind": "Method",
    "detail": "Function (} bucket_iterator)",
    "insertText": "bucket_end(unsigned hash)"
  },
  {
    "label": "GetNodeProfile()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class Ctx> class ContextualFoldingSet final : public FoldingSetImpl { private : Ctx Context ; void)",
    "insertText": "GetNodeProfile(FoldingSetImpl::Node *N, FoldingSetNodeID &ID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (ContextualFoldingSetTrait<T,Ctx)",
    "insertText": "Profile(*TN, ID, Context)"
  },
  {
    "label": "NodeEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NodeEquals(FoldingSetImpl::Node *N, const FoldingSetNodeID &ID, unsigned IDHash, FoldingSetNodeID &TempID)"
  },
  {
    "label": "ComputeNodeHash()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "ComputeNodeHash(FoldingSetImpl::Node *N, FoldingSetNodeID &TempID)"
  },
  {
    "label": "ContextualFoldingSet()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "ContextualFoldingSet(Ctx Context, unsigned Log2InitSize = 6) : FoldingSetImpl(Log2InitSize), Context(Context)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (} Ctx)",
    "insertText": "getContext()"
  },
  {
    "label": "FoldingSetVector()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class VectorT = SmallVector<T*,8>> class FoldingSetVector { FoldingSet<T> Set ; VectorT Vector ; public :)",
    "insertText": "FoldingSetVector(unsigned Log2InitSize = 6) : Set(Log2InitSize)"
  },
  {
    "label": "GetOrInsertNode()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "GetOrInsertNode(T *N)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (Set .)",
    "insertText": "InsertNode(N, InsertPos)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Vector .)",
    "insertText": "push_back(N)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertNode(T *N)"
  },
  {
    "label": "InsertNode()",
    "kind": "Method",
    "detail": "Function (Set .)",
    "insertText": "InsertNode(N)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "FoldingSetIteratorImpl()",
    "kind": "Method",
    "detail": "Function (} } ; class FoldingSetIteratorImpl { protected : FoldingSetNode* NodePtr ;)",
    "insertText": "FoldingSetIteratorImpl(void **Bucket)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FoldingSetIteratorImpl &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "FoldingSetBucketIteratorImpl()",
    "kind": "Method",
    "detail": "Function (FoldingSetIterator tmp =* this ; + +* this ; return tmp ; } } ; class FoldingSetBucketIteratorImpl { protected : void* Ptr ;)",
    "insertText": "FoldingSetBucketIteratorImpl(void **Bucket)"
  },
  {
    "label": "FoldingSetBucketIteratorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoldingSetBucketIteratorImpl(void **Bucket, bool) : Ptr(Bucket)"
  },
  {
    "label": "FoldingSetNode()",
    "kind": "Method",
    "detail": "Function (void* Probe = static_cast<)",
    "insertText": "FoldingSetNode(Ptr)->getNextInBucket()"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (uintptr_t x = reinterpret_cast<)",
    "insertText": "uintptr_t(Probe)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (Ptr = reinterpret_cast<)",
    "insertText": "void(x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "operator(const FoldingSetBucketIteratorImpl &RHS)"
  },
  {
    "label": "FoldingSetBucketIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FoldingSetBucketIterator(void **Bucket, bool) : FoldingSetBucketIteratorImpl(Bucket, true)"
  },
  {
    "label": "FoldingSetNodeWrapper()",
    "kind": "Method",
    "detail": "Function (FoldingSetBucketIterator tmp =* this ; + +* this ; return tmp ; } } ; template<T> class FoldingSetNodeWrapper : public FoldingSetNode { T data ; public : template<. . . Ts>)",
    "insertText": "FoldingSetNodeWrapper(Ts &&... Args) : data(std::forward<Ts>(Args)...)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID &ID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (FoldingSetTrait<T)",
    "insertText": "Profile(data, ID)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "getValue()"
  },
  {
    "label": "AddNodeID()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "AddNodeID(FastID)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct FoldingSetTrait<T*> { void)",
    "insertText": "Profile(T *X, FoldingSetNodeID &ID)"
  },
  {
    "label": "AddPointer()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "AddPointer(X)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} } ; template<T1,T2> struct FoldingSetTrait<std::pair<T1,T2>> { void)",
    "insertText": "Profile(const std::pair<T1, T2> &P, llvm::FoldingSetNodeID &ID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "Add(P.first)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "Add(P.second)"
  }
]