[
  {
    "label": "GenericUri",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericUri"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_URI_H_ # define RAPIDJSON_URI_H_ # include \" internal / strfunc . h \" # if)",
    "insertText": "defined(__clang__) RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(c++98-compat) #elif defined(_MSC_VER) RAPIDJSON_DIAG_OFF(4512)"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (public : typedef ValueType::Ch Ch ; # if RAPIDJSON_HAS_STDSTRING typedef std::basic_string<Ch> String ; # endif)",
    "insertText": "GenericUri(Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_()"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericUri(const Ch* uri, SizeType len, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(uri, len)"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GenericUri(const Ch* uri, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(uri, internal::StrLen<Ch>(uri))"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "GenericUri(const T& uri, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_()"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (const Ch* u = uri . template Get<const)",
    "insertText": "Ch()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(u, internal::StrLen<Ch>(u))"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING)",
    "insertText": "GenericUri(const String& uri, Allocator* allocator = 0) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(uri.c_str(), internal::StrLen<Ch>(uri.c_str()))"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "GenericUri(const GenericUri& rhs) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(), ownAllocator_()"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (* this = rhs ; })",
    "insertText": "GenericUri(const GenericUri& rhs, Allocator* allocator) : uri_(), base_(), scheme_(), auth_(), path_(), query_(), frag_(), allocator_(allocator), ownAllocator_()"
  },
  {
    "label": "GenericUri()",
    "kind": "Method",
    "detail": "Function (* this = rhs ; } ~)",
    "insertText": "GenericUri()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free()"
  },
  {
    "label": "RAPIDJSON_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_DELETE(ownAllocator_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} GenericUri&)",
    "insertText": "operator(const GenericUri& rhs)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(rhs.GetStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (auth_ =)",
    "insertText": "CopyPart(scheme_, rhs.scheme_, rhs.GetSchemeStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (path_ =)",
    "insertText": "CopyPart(auth_, rhs.auth_, rhs.GetAuthStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (query_ =)",
    "insertText": "CopyPart(path_, rhs.path_, rhs.GetPathStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (frag_ =)",
    "insertText": "CopyPart(query_, rhs.query_, rhs.GetQueryStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (base_ =)",
    "insertText": "CopyPart(frag_, rhs.frag_, rhs.GetFragStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (uri_ =)",
    "insertText": "CopyPart(base_, rhs.base_, rhs.GetBaseStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyPart(uri_, rhs.uri_, rhs.GetStringLength())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<T> void)",
    "insertText": "Get(T& uri, Allocator& allocator)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (uri . template Set<const)",
    "insertText": "Ch(this->GetString(), allocator)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetString()"
  },
  {
    "label": "GetBaseString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetBaseString()"
  },
  {
    "label": "GetSchemeString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetSchemeString()"
  },
  {
    "label": "GetAuthString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetAuthString()"
  },
  {
    "label": "GetPathString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetPathString()"
  },
  {
    "label": "GetQueryString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetQueryString()"
  },
  {
    "label": "GetFragString()",
    "kind": "Method",
    "detail": "Function (} const Ch*)",
    "insertText": "GetFragString()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} # if RAPIDJSON_HAS_STDSTRING String)",
    "insertText": "Get(const GenericUri& uri)"
  },
  {
    "label": "GetBase()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "GetBase(const GenericUri& uri)"
  },
  {
    "label": "GetScheme()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "GetScheme(const GenericUri& uri)"
  },
  {
    "label": "GetAuth()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "GetAuth(const GenericUri& uri)"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "GetPath(const GenericUri& uri)"
  },
  {
    "label": "GetQuery()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "GetQuery(const GenericUri& uri)"
  },
  {
    "label": "GetFrag()",
    "kind": "Method",
    "detail": "Function (} String)",
    "insertText": "GetFrag(const GenericUri& uri)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Match(const GenericUri& uri, bool full = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ch* s1 ; Ch* s2 ;)",
    "insertText": "if(full)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s1 = uri_ ; s2 = uri . uri_ ; } else { s1 = base_ ; s2 = uri . base_ ; })",
    "insertText": "if(s1 == s2)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} GenericUri)",
    "insertText": "Resolve(const GenericUri& baseuri, Allocator* allocator = 0)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (GenericUri resuri ; resuri . allocator_ = allocator ; resuri .)",
    "insertText": "Allocate(GetStringLength() + baseuri.GetStringLength() + 1)"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (resuri . auth_ =)",
    "insertText": "CopyPart(resuri.scheme_, scheme_, GetSchemeStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (resuri . path_ =)",
    "insertText": "CopyPart(resuri.auth_, auth_, GetAuthStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (resuri . query_ =)",
    "insertText": "CopyPart(resuri.path_, path_, GetPathStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (resuri . frag_ =)",
    "insertText": "CopyPart(resuri.query_, query_, GetQueryStringLength())"
  },
  {
    "label": "RemoveDotSegments()",
    "kind": "Method",
    "detail": "Function (resuri .)",
    "insertText": "RemoveDotSegments()"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (} else { resuri . auth_ =)",
    "insertText": "CopyPart(resuri.scheme_, baseuri.scheme_, baseuri.GetSchemeStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (} else { resuri . path_ =)",
    "insertText": "CopyPart(resuri.auth_, baseuri.auth_, baseuri.GetAuthStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (resuri . query_ =)",
    "insertText": "CopyPart(resuri.path_, baseuri.path_, baseuri.GetPathStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (resuri . frag_ =)",
    "insertText": "CopyPart(resuri.query_, baseuri.query_, baseuri.GetQueryStringLength())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(path_[0] == '/')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { size_t pos = 0 ;)",
    "insertText": "if(!(baseuri.GetAuthStringLength() == 0) && baseuri.GetPathStringLength() == 0)"
  },
  {
    "label": "GetPathStringLength()",
    "kind": "Method",
    "detail": "Function (resuri . path_ [ pos ] = ' / ' ; pos + + ; } size_t lastslashpos = baseuri .)",
    "insertText": "GetPathStringLength()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (lastslashpos - - ; })",
    "insertText": "memcpy(&resuri.path_[pos], baseuri.path_, lastslashpos * sizeof(Ch))"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (pos + = lastslashpos ; resuri . query_ =)",
    "insertText": "CopyPart(&resuri.path_[pos], path_, GetPathStringLength())"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (} } } resuri . base_ =)",
    "insertText": "CopyPart(resuri.frag_, frag_, GetFragStringLength())"
  },
  {
    "label": "SetBase()",
    "kind": "Method",
    "detail": "Function (resuri .)",
    "insertText": "SetBase()"
  },
  {
    "label": "GetBaseStringLength()",
    "kind": "Method",
    "detail": "Function (resuri . uri_ = resuri . base_ + resuri .)",
    "insertText": "GetBaseStringLength()"
  },
  {
    "label": "SetUri()",
    "kind": "Method",
    "detail": "Function (resuri .)",
    "insertText": "SetUri()"
  },
  {
    "label": "total()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "total(3 * len + 7) * sizeof(Ch)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (scheme_ = static_cast<)",
    "insertText": "Ch(allocator_->Malloc(total))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(scheme_)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (scheme_ = 0 ; } } void)",
    "insertText": "Parse(const Ch* uri, std::size_t len)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (std::size_t start = 0,pos1 = 0,pos2 = 0 ;)",
    "insertText": "Allocate(len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos1 + + ; })",
    "insertText": "if(pos1 != len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos2 + + ; })",
    "insertText": "if(pos1 < pos2)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (pos1 + + ;)",
    "insertText": "memcpy(scheme_, &uri[start], pos1 * sizeof(Ch))"
  },
  {
    "label": "GetSchemeStringLength()",
    "kind": "Method",
    "detail": "Function (scheme_ [ pos1 ] = ' \\ 0 ' ; start = pos1 ; } } } auth_ = scheme_ +)",
    "insertText": "GetSchemeStringLength()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auth_ + + ;* auth_ = ' \\ 0 ' ;)",
    "insertText": "if(start < len - 1 && uri[start] == '/' && uri[start + 1] == '/')"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (pos2 = start + 2 ;)",
    "insertText": "while(pos2 < len)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (pos2 + + ; })",
    "insertText": "memcpy(auth_, &uri[start], (pos2 - start) * sizeof(Ch))"
  },
  {
    "label": "GetAuthStringLength()",
    "kind": "Method",
    "detail": "Function (auth_ [ pos2 - start ] = ' \\ 0 ' ; start = pos2 ; } path_ = auth_ +)",
    "insertText": "GetAuthStringLength()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (path_ + + ;* path_ = ' \\ 0 ' ;)",
    "insertText": "if(start < len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pos2 + + ; })",
    "insertText": "if(start != pos2)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(path_, &uri[start], (pos2 - start) * sizeof(Ch))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (path_ [ pos2 - start ] = ' \\ 0 ' ;)",
    "insertText": "if(path_[0] == '/') RemoveDotSegments()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (query_ + + ;* query_ = ' \\ 0 ' ;)",
    "insertText": "if(start < len && uri[start] == '?')"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(query_, &uri[start], (pos2 - start) * sizeof(Ch))"
  },
  {
    "label": "GetQueryStringLength()",
    "kind": "Method",
    "detail": "Function (query_ [ pos2 - start ] = ' \\ 0 ' ; start = pos2 ; } } frag_ = query_ +)",
    "insertText": "GetQueryStringLength()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (frag_ + + ;* frag_ = ' \\ 0 ' ;)",
    "insertText": "if(start < len && uri[start] == '#')"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(frag_, &uri[start], (len - start) * sizeof(Ch))"
  },
  {
    "label": "GetFragStringLength()",
    "kind": "Method",
    "detail": "Function (frag_ [ len - start ] = ' \\ 0 ' ; } base_ = frag_ +)",
    "insertText": "GetFragStringLength()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Ch* next = base_ ;)",
    "insertText": "memcpy(next, scheme_, GetSchemeStringLength() * sizeof(Ch))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(next, auth_, GetAuthStringLength() * sizeof(Ch))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(next, path_, GetPathStringLength() * sizeof(Ch))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(next, query_, GetQueryStringLength() * sizeof(Ch))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Ch* next = uri_ ;)",
    "insertText": "memcpy(next, base_, GetBaseStringLength() * sizeof(Ch))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(next, frag_, GetFragStringLength() * sizeof(Ch))"
  },
  {
    "label": "CopyPart()",
    "kind": "Method",
    "detail": "Function (* next = ' \\ 0 ' ; } Ch*)",
    "insertText": "CopyPart(Ch* to, Ch* from, std::size_t len)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(to != 0)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(from != 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(to, from, len * sizeof(Ch))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (std::size_t pathpos = 0 ; std::size_t newpos = 0 ;)",
    "insertText": "while(pathpos < pathlen)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t slashpos = 0 ;)",
    "insertText": "while((pathpos + slashpos) < pathlen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (slashpos + + ; })",
    "insertText": "if(slashpos == 2 && path_[pathpos] == '.' && path_[pathpos + 1] == '.')"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(newpos == 0 || path_[newpos - 1] == '/')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t lastslashpos = newpos ;)",
    "insertText": "if(lastslashpos > 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (lastslashpos - - ;)",
    "insertText": "while(lastslashpos > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastslashpos - - ; } newpos = lastslashpos ; } } else)",
    "insertText": "if(slashpos == 1 && path_[pathpos] == '.')"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RAPIDJSON_ASSERT(newpos <= pathpos)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&path_[newpos], &path_[pathpos], slashpos * sizeof(Ch))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (newpos + = slashpos ;)",
    "insertText": "if((pathpos + slashpos) < pathlen)"
  }
]