[
  {
    "label": "RandenPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandenPool"
  },
  {
    "label": "PoolURBG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolURBG"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_POOL_URBG_H_ # define ABSL_RANDOM_INTERNAL_POOL_URBG_H_ # include<cinttypes> # include<limits> # include \" absl / random / internal / traits . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<T> class RandenPool { public : using result_type = T ;)",
    "insertText": "static_assert(std::is_unsigned<result_type>::value, \"RandenPool template argument must be a built-in unsigned \" \"integer type\")"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "RandenPool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RandenPool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Fill(absl::Span<result_type> data)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (protected : result_type)",
    "insertText": "Generate()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template class RandenPool<uint8_t> ; template class RandenPool<uint16_t> ; template class RandenPool<uint32_t> ; template class RandenPool<uint64_t> ; template<T,size_t kBufferSize> class PoolURBG { using unsigned_type = make_unsigned_bits<T>::type ; using PoolType = RandenPool<unsigned_type> ; using SpanType = absl::Span<unsigned_type> ; size_t kInitialBuffer = kBufferSize + 1 ; size_t kHalfBuffer = kBufferSize / 2 ; public : using result_type = T ;)",
    "insertText": "static_assert(std::is_unsigned<result_type>::value, \"PoolURBG must be parameterized by an unsigned integer type\")"
  },
  {
    "label": "PoolURBG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PoolURBG() : next_(kInitialBuffer)"
  },
  {
    "label": "PoolURBG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PoolURBG(const PoolURBG&) : next_(kInitialBuffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const PoolURBG&)",
    "insertText": "operator(const PoolURBG&)"
  },
  {
    "label": "PoolURBG()",
    "kind": "Method",
    "detail": "Function (next_ = kInitialBuffer ; return* this ; })",
    "insertText": "PoolURBG(PoolURBG&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PoolURBG&)",
    "insertText": "operator(PoolURBG&&)"
  },
  {
    "label": "next_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "next_(kBufferSize > 2 && next_ > kBufferSize)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(SpanType(reinterpret_cast<unsigned_type*>(state_ + next_), kBufferSize - next_))"
  }
]