[
  {
    "label": "PatchTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchTable"
  },
  {
    "label": "PatchHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchHandle"
  },
  {
    "label": "PatchMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchMap"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PatchTableBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatchTableBuilder"
  },
  {
    "label": "PatchArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PatchArray"
  },
  {
    "label": "FVarPatchChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVarPatchChannel"
  },
  {
    "label": "StencilTablePtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StencilTablePtr"
  },
  {
    "label": "PatchTable()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_PATCH_TABLE_H # define OPENSUBDIV3_FAR_PATCH_TABLE_H # include \" . . / version . h \" # include \" . . / far / patchDescriptor . h \" # include \" . . / far / patchParam . h \" # include \" . . / far / stencilTable . h \" # include \" . . / sdc / options . h \" # include<vector> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { class PatchTable { public : class PatchHandle { public : class PatchTable ; class PatchMap ; Index arrayIndex,patchIndex,vertIndex ; } ; public :)",
    "insertText": "PatchTable(PatchTable const & src)"
  },
  {
    "label": "PatchTable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PatchTable()"
  },
  {
    "label": "IsFeatureAdaptive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFeatureAdaptive()"
  },
  {
    "label": "GetNumControlVerticesTotal()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumControlVerticesTotal()"
  },
  {
    "label": "GetNumPatchesTotal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumPatchesTotal()"
  },
  {
    "label": "GetMaxValence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxValence()"
  },
  {
    "label": "GetPatchVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchVertices(PatchHandle const & handle)"
  },
  {
    "label": "GetPatchParam()",
    "kind": "Method",
    "detail": "Function (PatchParam)",
    "insertText": "GetPatchParam(PatchHandle const & handle)"
  },
  {
    "label": "GetPatchVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchVertices(int array, int patch)"
  },
  {
    "label": "GetPatchParam()",
    "kind": "Method",
    "detail": "Function (PatchParam)",
    "insertText": "GetPatchParam(int array, int patch)"
  },
  {
    "label": "GetNumPatchArrays()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumPatchArrays()"
  },
  {
    "label": "GetNumPatches()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumPatches(int array)"
  },
  {
    "label": "GetNumControlVertices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumControlVertices(int array)"
  },
  {
    "label": "GetPatchArrayDescriptor()",
    "kind": "Method",
    "detail": "Function (PatchDescriptor)",
    "insertText": "GetPatchArrayDescriptor(int array)"
  },
  {
    "label": "GetPatchArrayVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchArrayVertices(int array)"
  },
  {
    "label": "GetPatchParams()",
    "kind": "Method",
    "detail": "Function (ConstPatchParamArray const)",
    "insertText": "GetPatchParams(int array)"
  },
  {
    "label": "GetNumLocalPoints()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumLocalPoints()"
  },
  {
    "label": "GetLocalPointStencilTable()",
    "kind": "Method",
    "detail": "Function (StencilTable const*)",
    "insertText": "GetLocalPointStencilTable()"
  },
  {
    "label": "LocalPointStencilPrecisionMatchesType()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "LocalPointStencilPrecisionMatchesType()"
  },
  {
    "label": "ComputeLocalPointValues()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "ComputeLocalPointValues(T const *src, T *dst)"
  },
  {
    "label": "GetNumLocalPointsVarying()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumLocalPointsVarying()"
  },
  {
    "label": "GetLocalPointVaryingStencilTable()",
    "kind": "Method",
    "detail": "Function (StencilTable const*)",
    "insertText": "GetLocalPointVaryingStencilTable()"
  },
  {
    "label": "LocalPointVaryingStencilPrecisionMatchesType()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "LocalPointVaryingStencilPrecisionMatchesType()"
  },
  {
    "label": "ComputeLocalPointValuesVarying()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "ComputeLocalPointValuesVarying(T const *src, T *dst)"
  },
  {
    "label": "GetNumLocalPointsFaceVarying()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumLocalPointsFaceVarying(int channel = 0)"
  },
  {
    "label": "GetLocalPointFaceVaryingStencilTable()",
    "kind": "Method",
    "detail": "Function (StencilTable const*)",
    "insertText": "GetLocalPointFaceVaryingStencilTable(int channel = 0)"
  },
  {
    "label": "LocalPointFaceVaryingStencilPrecisionMatchesType()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "LocalPointFaceVaryingStencilPrecisionMatchesType()"
  },
  {
    "label": "ComputeLocalPointValuesFaceVarying()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "ComputeLocalPointValuesFaceVarying(T const *src, T *dst, int channel = 0)"
  },
  {
    "label": "GetPatchQuadOffsets()",
    "kind": "Method",
    "detail": "Function (typedef Vtr::ConstArray<unsigned int> ConstQuadOffsetsArray ; ConstQuadOffsetsArray)",
    "insertText": "GetPatchQuadOffsets(PatchHandle const & handle)"
  },
  {
    "label": "GetVertexValenceTable()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<Index> VertexValenceTable ; VertexValenceTable const&)",
    "insertText": "GetVertexValenceTable()"
  },
  {
    "label": "GetSingleCreasePatchSharpnessValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSingleCreasePatchSharpnessValue(int array, int patch)"
  },
  {
    "label": "GetVaryingPatchDescriptor()",
    "kind": "Method",
    "detail": "Function (PatchDescriptor)",
    "insertText": "GetVaryingPatchDescriptor()"
  },
  {
    "label": "GetPatchVaryingVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchVaryingVertices(PatchHandle const & handle)"
  },
  {
    "label": "GetPatchVaryingVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchVaryingVertices(int array, int patch)"
  },
  {
    "label": "GetPatchArrayVaryingVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchArrayVaryingVertices(int array)"
  },
  {
    "label": "GetVaryingVertices()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetVaryingVertices()"
  },
  {
    "label": "GetNumFVarChannels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumFVarChannels()"
  },
  {
    "label": "GetFVarPatchDescriptorRegular()",
    "kind": "Method",
    "detail": "Function (PatchDescriptor)",
    "insertText": "GetFVarPatchDescriptorRegular(int channel = 0)"
  },
  {
    "label": "GetFVarPatchDescriptorIrregular()",
    "kind": "Method",
    "detail": "Function (PatchDescriptor)",
    "insertText": "GetFVarPatchDescriptorIrregular(int channel = 0)"
  },
  {
    "label": "GetFVarPatchDescriptor()",
    "kind": "Method",
    "detail": "Function (PatchDescriptor)",
    "insertText": "GetFVarPatchDescriptor(int channel = 0)"
  },
  {
    "label": "GetPatchFVarValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchFVarValues(PatchHandle const & handle, int channel = 0)"
  },
  {
    "label": "GetPatchFVarValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchFVarValues(int array, int patch, int channel = 0)"
  },
  {
    "label": "GetPatchArrayFVarValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetPatchArrayFVarValues(int array, int channel = 0)"
  },
  {
    "label": "GetFVarValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "GetFVarValues(int channel = 0)"
  },
  {
    "label": "GetFVarValueStride()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetFVarValueStride(int channel = 0)"
  },
  {
    "label": "GetPatchFVarPatchParam()",
    "kind": "Method",
    "detail": "Function (PatchParam)",
    "insertText": "GetPatchFVarPatchParam(PatchHandle const & handle, int channel = 0)"
  },
  {
    "label": "GetPatchFVarPatchParam()",
    "kind": "Method",
    "detail": "Function (PatchParam)",
    "insertText": "GetPatchFVarPatchParam(int array, int patch, int channel = 0)"
  },
  {
    "label": "GetPatchArrayFVarPatchParams()",
    "kind": "Method",
    "detail": "Function (ConstPatchParamArray)",
    "insertText": "GetPatchArrayFVarPatchParams(int array, int channel = 0)"
  },
  {
    "label": "GetFVarPatchParams()",
    "kind": "Method",
    "detail": "Function (ConstPatchParamArray)",
    "insertText": "GetFVarPatchParams(int channel = 0)"
  },
  {
    "label": "GetFVarChannelLinearInterpolation()",
    "kind": "Method",
    "detail": "Function (Sdc::Options::FVarLinearInterpolation)",
    "insertText": "GetFVarChannelLinearInterpolation(int channel = 0)"
  },
  {
    "label": "GetPatchControlVerticesTable()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<Index> PatchVertsTable ; PatchVertsTable const&)",
    "insertText": "GetPatchControlVerticesTable()"
  },
  {
    "label": "EvaluateBasis()",
    "kind": "Method",
    "detail": "Function (public : template<REAL> void)",
    "insertText": "EvaluateBasis(PatchHandle const & handle, REAL u, REAL v, REAL wP[], REAL wDu[] = 0, REAL wDv[] = 0, REAL wDuu[] = 0, REAL wDuv[] = 0, REAL wDvv[] = 0)"
  },
  {
    "label": "EvaluateBasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBasis(PatchHandle const & handle, float u, float v, float wP[], float wDu[] = 0, float wDv[] = 0, float wDuu[] = 0, float wDuv[] = 0, float wDvv[] = 0)"
  },
  {
    "label": "EvaluateBasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBasis(PatchHandle const & handle, double u, double v, double wP[], double wDu[] = 0, double wDv[] = 0, double wDuu[] = 0, double wDuv[] = 0, double wDvv[] = 0)"
  },
  {
    "label": "EvaluateBasisVarying()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "EvaluateBasisVarying(PatchHandle const & handle, REAL u, REAL v, REAL wP[], REAL wDu[] = 0, REAL wDv[] = 0, REAL wDuu[] = 0, REAL wDuv[] = 0, REAL wDvv[] = 0)"
  },
  {
    "label": "EvaluateBasisVarying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBasisVarying(PatchHandle const & handle, float u, float v, float wP[], float wDu[] = 0, float wDv[] = 0, float wDuu[] = 0, float wDuv[] = 0, float wDvv[] = 0)"
  },
  {
    "label": "EvaluateBasisVarying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBasisVarying(PatchHandle const & handle, double u, double v, double wP[], double wDu[] = 0, double wDv[] = 0, double wDuu[] = 0, double wDuv[] = 0, double wDvv[] = 0)"
  },
  {
    "label": "EvaluateBasisFaceVarying()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "EvaluateBasisFaceVarying(PatchHandle const & handle, REAL u, REAL v, REAL wP[], REAL wDu[] = 0, REAL wDv[] = 0, REAL wDuu[] = 0, REAL wDuv[] = 0, REAL wDvv[] = 0, int channel = 0)"
  },
  {
    "label": "EvaluateBasisFaceVarying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBasisFaceVarying(PatchHandle const & handle, float u, float v, float wP[], float wDu[] = 0, float wDv[] = 0, float wDuu[] = 0, float wDuv[] = 0, float wDvv[] = 0, int channel = 0)"
  },
  {
    "label": "EvaluateBasisFaceVarying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateBasisFaceVarying(PatchHandle const & handle, double u, double v, double wP[], double wDu[] = 0, double wDv[] = 0, double wDuu[] = 0, double wDuv[] = 0, double wDvv[] = 0, int channel = 0)"
  },
  {
    "label": "PatchTable()",
    "kind": "Method",
    "detail": "Function (protected : class PatchTableBuilder ;)",
    "insertText": "PatchTable(int maxvalence)"
  },
  {
    "label": "getPatchIndex()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "getPatchIndex(int array, int patch)"
  },
  {
    "label": "getPatchParams()",
    "kind": "Method",
    "detail": "Function (PatchParamArray)",
    "insertText": "getPatchParams(int arrayIndex)"
  },
  {
    "label": "getSharpnessIndices()",
    "kind": "Method",
    "detail": "Function (Index*)",
    "insertText": "getSharpnessIndices(Index arrayIndex)"
  },
  {
    "label": "getSharpnessValues()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "getSharpnessValues(Index arrayIndex)"
  },
  {
    "label": "PatchArray()",
    "kind": "Method",
    "detail": "Function (private : struct PatchArray {)",
    "insertText": "PatchArray(PatchDescriptor d, int np, Index v, Index p, Index qo) : desc(d), numPatches(np), vertIndex(v), patchIndex(p), quadOffsetIndex (qo)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print()"
  },
  {
    "label": "getPatchArray()",
    "kind": "Method",
    "detail": "Function (PatchDescriptor desc ; int numPatches ; Index vertIndex,patchIndex,quadOffsetIndex ; } ; typedef std::vector<PatchArray> PatchArrayVector ; PatchArray&)",
    "insertText": "getPatchArray(Index arrayIndex)"
  },
  {
    "label": "reservePatchArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reservePatchArrays(int numPatchArrays)"
  },
  {
    "label": "pushPatchArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pushPatchArray(PatchDescriptor desc, int npatches, Index * vidx, Index * pidx, Index * qoidx=0)"
  },
  {
    "label": "getPatchArrayVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getPatchArrayVertices(int arrayIndex)"
  },
  {
    "label": "findPatchArray()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "findPatchArray(PatchDescriptor desc)"
  },
  {
    "label": "getPatchArrayVaryingVertices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getPatchArrayVaryingVertices(int arrayIndex)"
  },
  {
    "label": "allocateVaryingVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocateVaryingVertices(PatchDescriptor desc, int numPatches)"
  },
  {
    "label": "populateVaryingVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateVaryingVertices()"
  },
  {
    "label": "getFVarPatchChannel()",
    "kind": "Method",
    "detail": "Function (struct FVarPatchChannel { Sdc::Options::FVarLinearInterpolation interpolation ; PatchDescriptor regDesc ; PatchDescriptor irregDesc ; int stride ; std::vector<Index> patchValues ; std::vector<PatchParam> patchParam ; } ; typedef std::vector<FVarPatchChannel> FVarPatchChannelVector ; FVarPatchChannel&)",
    "insertText": "getFVarPatchChannel(int channel)"
  },
  {
    "label": "allocateFVarPatchChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocateFVarPatchChannels(int numChannels)"
  },
  {
    "label": "allocateFVarPatchChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocateFVarPatchChannelValues(PatchDescriptor regDesc, PatchDescriptor irregDesc, int numPatches, int channel)"
  },
  {
    "label": "setFVarPatchChannelLinearInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFVarPatchChannelLinearInterpolation(Sdc::Options::FVarLinearInterpolation interpolation, int channel)"
  },
  {
    "label": "getFVarValues()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "getFVarValues(int channel)"
  },
  {
    "label": "getPatchFVarValues()",
    "kind": "Method",
    "detail": "Function (ConstIndexArray)",
    "insertText": "getPatchFVarValues(int patch, int channel)"
  },
  {
    "label": "getFVarPatchParams()",
    "kind": "Method",
    "detail": "Function (PatchParamArray)",
    "insertText": "getFVarPatchParams(int channel)"
  },
  {
    "label": "getPatchFVarPatchParam()",
    "kind": "Method",
    "detail": "Function (PatchParam)",
    "insertText": "getPatchFVarPatchParam(int patch, int channel)"
  },
  {
    "label": "StencilTablePtr()",
    "kind": "Method",
    "detail": "Function (private : class StencilTablePtr { private : typedef StencilTableReal<float> float_type ; typedef StencilTableReal<double> double_type ; union { float_type* _fPtr ; double_type* _dPtr ; } ; public :)",
    "insertText": "StencilTablePtr()"
  },
  {
    "label": "StencilTablePtr()",
    "kind": "Method",
    "detail": "Function (_fPtr = 0 ; })",
    "insertText": "StencilTablePtr(float_type * ptr)"
  },
  {
    "label": "StencilTablePtr()",
    "kind": "Method",
    "detail": "Function (_fPtr = ptr ; })",
    "insertText": "StencilTablePtr(double_type * ptr)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (_dPtr = ptr ; } operator)",
    "insertText": "bool()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (_fPtr = 0 ; } void)",
    "insertText": "Set(float_type * ptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (_fPtr = ptr ; } void)",
    "insertText": "Set(double_type * ptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (_dPtr = ptr ; } template<REAL> StencilTableReal<REAL>*)",
    "insertText": "Get()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} ; private : int _maxValence,_numPtexFaces ; PatchArrayVector _patchArrays ; std::vector<Index> _patchVerts ; PatchParamTable _paramTable ; QuadOffsetsTable _quadOffsetsTable ; VertexValenceTable _vertexValenceTable ; StencilTablePtr _localPointStencils ; StencilTablePtr _localPointVaryingStencils ; PatchDescriptor _varyingDesc ; std::vector<Index> _varyingVerts ; FVarPatchChannelVector _fvarChannels ; std::vector<StencilTablePtr> _localPointFaceVaryingStencils ; std::vector<Index> _sharpnessIndices ; std::vector<float> _sharpnessValues ; unsigned int _isUniformLinear : 1 ; unsigned int _vertexPrecisionIsDouble : 1 ; unsigned int _varyingPrecisionIsDouble : 1 ; unsigned int _faceVaryingPrecisionIsDouble : 1 ; } ; template<> StencilTableReal<float>* PatchTable::StencilTablePtr::Get<)",
    "insertText": "float()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalPointStencilPrecisionMatchesType<float>())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalPointVaryingStencilPrecisionMatchesType<float>())"
  },
  {
    "label": "GetLocalPointFaceVaryingStencilTable()",
    "kind": "Method",
    "detail": "Function (} StencilTable const*)",
    "insertText": "GetLocalPointFaceVaryingStencilTable(int channel)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalPointFaceVaryingStencilPrecisionMatchesType<float>())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalPointStencilPrecisionMatchesType<REAL>())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalPointVaryingStencilPrecisionMatchesType<REAL>())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LocalPointFaceVaryingStencilPrecisionMatchesType<REAL>())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (_localPointStencils . Get<)",
    "insertText": "float()->UpdateValues(src, dst)"
  },
  {
    "label": "ComputeLocalPointValuesFaceVarying()",
    "kind": "Method",
    "detail": "Function (} } template<class T> void)",
    "insertText": "ComputeLocalPointValuesFaceVarying(T const *src, T *dst, int channel)"
  },
  {
    "label": "EvaluateBasis()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "EvaluateBasis(PatchHandle const & handle, float u, float v, float wP[], float wDu[], float wDv[], float wDuu[], float wDuv[], float wDvv[])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (EvaluateBasis<)",
    "insertText": "float(handle, u, v, wP, wDu, wDv, wDuu, wDuv, wDvv)"
  },
  {
    "label": "EvaluateBasis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateBasis(PatchHandle const & handle, double u, double v, double wP[], double wDu[], double wDv[], double wDuu[], double wDuv[], double wDvv[])"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (EvaluateBasis<)",
    "insertText": "double(handle, u, v, wP, wDu, wDv, wDuu, wDuv, wDvv)"
  },
  {
    "label": "EvaluateBasisVarying()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateBasisVarying(PatchHandle const & handle, float u, float v, float wP[], float wDu[], float wDv[], float wDuu[], float wDuv[], float wDvv[])"
  },
  {
    "label": "EvaluateBasisVarying()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateBasisVarying(PatchHandle const & handle, double u, double v, double wP[], double wDu[], double wDv[], double wDuu[], double wDuv[], double wDvv[])"
  },
  {
    "label": "EvaluateBasisFaceVarying()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateBasisFaceVarying(PatchHandle const & handle, float u, float v, float wP[], float wDu[], float wDv[], float wDuu[], float wDuv[], float wDvv[], int channel)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (EvaluateBasisFaceVarying<)",
    "insertText": "float(handle, u, v, wP, wDu, wDv, wDuu, wDuv, wDvv, channel)"
  },
  {
    "label": "EvaluateBasisFaceVarying()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateBasisFaceVarying(PatchHandle const & handle, double u, double v, double wP[], double wDu[], double wDv[], double wDuu[], double wDuv[], double wDvv[], int channel)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (EvaluateBasisFaceVarying<)",
    "insertText": "double(handle, u, v, wP, wDu, wDv, wDuu, wDuv, wDvv, channel)"
  }
]