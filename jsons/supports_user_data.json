[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "UserDataAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UserDataAdapter"
  },
  {
    "label": "SupportsUserData()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SUPPORTS_USER_DATA_H_ # define BASE_SUPPORTS_USER_DATA_H_ # include<map> # include<memory> # include \" base / base_export . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / sequence_checker . h \" namespace base { class BASE_EXPORT SupportsUserData { public :)",
    "insertText": "SupportsUserData()"
  },
  {
    "label": "SupportsUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SupportsUserData(SupportsUserData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SupportsUserData&)",
    "insertText": "operator(SupportsUserData&&)"
  },
  {
    "label": "SupportsUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SupportsUserData(const SupportsUserData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SupportsUserData&)",
    "insertText": "operator(const SupportsUserData&)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Data { public : ~)",
    "insertText": "Data()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Data>)",
    "insertText": "Clone()"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (} ; Data*)",
    "insertText": "GetUserData(const void* key)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserData(const void* key, std::unique_ptr<Data> data)"
  },
  {
    "label": "RemoveUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserData(const void* key)"
  },
  {
    "label": "CloneDataFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneDataFrom(const SupportsUserData& other)"
  },
  {
    "label": "DetachFromSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromSequence()"
  },
  {
    "label": "ClearAllUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllUserData()"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (private : using DataMap = std::map<const void*,std::unique_ptr<Data>> ; DataMap user_data_ ;)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class UserDataAdapter : public SupportsUserData::Data { public : T*)",
    "insertText": "Get(const SupportsUserData* supports_user_data, const void* key)"
  },
  {
    "label": "UserDataAdapter()",
    "kind": "Method",
    "detail": "Function (UserDataAdapter* data = static_cast<)",
    "insertText": "UserDataAdapter(supports_user_data->GetUserData(key))"
  },
  {
    "label": "UserDataAdapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UserDataAdapter(T* object) : object_(object)"
  },
  {
    "label": "UserDataAdapter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UserDataAdapter(const UserDataAdapter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UserDataAdapter&)",
    "insertText": "operator(const UserDataAdapter&)"
  },
  {
    "label": "UserDataAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UserDataAdapter()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "release()"
  }
]