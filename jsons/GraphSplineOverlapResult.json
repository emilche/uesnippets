[
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "FGraphSplineOverlapResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SGraphPin . h \" struct FGraphSplineOverlapResult { public :)",
    "insertText": "FGraphSplineOverlapResult(bool InCloseToSpline = false) : Pin1Handle(nullptr) , Pin2Handle(nullptr) , BestPinHandle(nullptr) , Pin1(nullptr) , Pin2(nullptr) , DistanceSquared(FLT_MAX) , DistanceSquaredToPin1(FLT_MAX) , DistanceSquaredToPin2(FLT_MAX) , bCloseToSpline(InCloseToSpline)"
  },
  {
    "label": "FGraphSplineOverlapResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGraphSplineOverlapResult(UEdGraphPin* InPin1, UEdGraphPin* InPin2, float InDistanceSquared, float InDistanceSquaredToPin1, float InDistanceSquaredToPin2, bool InCloseToSpline) : Pin1Handle(InPin1) , Pin2Handle(InPin2) , BestPinHandle(nullptr) , Pin1(InPin1) , Pin2(InPin2) , DistanceSquared(InDistanceSquared) , DistanceSquaredToPin1(InDistanceSquaredToPin1) , DistanceSquaredToPin2(InDistanceSquaredToPin2) , bCloseToSpline(InCloseToSpline)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetDistanceSquared()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDistanceSquared()"
  },
  {
    "label": "GetBestPinWidget()",
    "kind": "Method",
    "detail": "Function (bCloseToSpline = InCloseToSpline ; } TSharedPtr<class SGraphPin>)",
    "insertText": "GetBestPinWidget(const class SGraphPanel& InGraphPanel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class SGraphPin> Result ;)",
    "insertText": "if(IsValid())"
  },
  {
    "label": "FindInGraphPanel()",
    "kind": "Method",
    "detail": "Function (Result = BestPinHandle .)",
    "insertText": "FindInGraphPanel(InGraphPanel)"
  },
  {
    "label": "GetBestPinHandle()",
    "kind": "Method",
    "detail": "Function (} return Result ; } FGraphPinHandle)",
    "insertText": "GetBestPinHandle()"
  },
  {
    "label": "GetPinWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPinWidgets(const class SGraphPanel& InGraphPanel, TSharedPtr<class SGraphPin>& OutPin1, TSharedPtr<class SGraphPin>& OutPin2)"
  }
]