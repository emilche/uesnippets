[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (ST_INLINE)",
    "insertText": "Mat3x3(bool bSetToIdentity)"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "Mat3x3(const st_float32 afInit[9])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_afSingle, afInit, 9 * sizeof(st_float32))"
  },
  {
    "label": "Mat3x3()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "Mat3x3(const Vec3& vRight, const Vec3& vOut, const Vec3& vUp)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (m_afSingle [ 0 ] = vRight . x ; m_afSingle [ 3 ] = vRight . y ; m_afSingle [ 6 ] = vRight . z ; m_afSingle [ 1 ] = vOut . x ; m_afSingle [ 4 ] = vOut . y ; m_afSingle [ 7 ] = vOut . z ; m_afSingle [ 2 ] = vUp . x ; m_afSingle [ 5 ] = vUp . y ; m_afSingle [ 8 ] = vUp . z ; } ST_INLINE Mat3x3::operator)",
    "insertText": "st_float32(void)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Mat3x3 cTmp ;)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (cTmp . m_afRowCol [ i ] [ 0 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 0 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 0 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 0 ] ; cTmp . m_afRowCol [ i ] [ 1 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 1 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 1 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 1 ] ; cTmp . m_afRowCol [ i ] [ 2 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 2 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 2 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 2 ] ; } return cTmp ; } ST_INLINE Vec3)",
    "insertText": "operator(const Vec3& vIn)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE bool)",
    "insertText": "operator(const Mat3x3& vIn)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "SetIdentity(void)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_afSingle, 0, 9 * sizeof(st_float32))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (m_afSingle [ 0 ] = m_afSingle [ 4 ] = m_afSingle [ 8 ] = 1 . 0 f ; } ST_INLINE void)",
    "insertText": "Set(const st_float32 afValue[9])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_afSingle, afValue, 9 * sizeof(st_float32))"
  },
  {
    "label": "RotateX()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "RotateX(st_float32 fRadians)"
  },
  {
    "label": "cosf()",
    "kind": "Method",
    "detail": "Function (Mat3x3 mRotate ; st_float32 fCosine =)",
    "insertText": "cosf(fRadians)"
  },
  {
    "label": "sinf()",
    "kind": "Method",
    "detail": "Function (st_float32 fSine =)",
    "insertText": "sinf(fRadians)"
  },
  {
    "label": "RotateY()",
    "kind": "Method",
    "detail": "Function (mRotate . m_afRowCol [ 1 ] [ 1 ] = fCosine ; mRotate . m_afRowCol [ 1 ] [ 2 ] = fSine ; mRotate . m_afRowCol [ 2 ] [ 1 ] = - fSine ; mRotate . m_afRowCol [ 2 ] [ 2 ] = fCosine ;* this = mRotate** this ; } ST_INLINE void)",
    "insertText": "RotateY(st_float32 fRadians)"
  },
  {
    "label": "RotateZ()",
    "kind": "Method",
    "detail": "Function (mRotate . m_afRowCol [ 0 ] [ 0 ] = fCosine ; mRotate . m_afRowCol [ 0 ] [ 2 ] = - fSine ; mRotate . m_afRowCol [ 2 ] [ 0 ] = fSine ; mRotate . m_afRowCol [ 2 ] [ 2 ] = fCosine ;* this = mRotate** this ; } ST_INLINE void)",
    "insertText": "RotateZ(st_float32 fRadians)"
  },
  {
    "label": "RotateArbitrary()",
    "kind": "Method",
    "detail": "Function (mRotate . m_afRowCol [ 0 ] [ 0 ] = fCosine ; mRotate . m_afRowCol [ 1 ] [ 0 ] = - fSine ; mRotate . m_afRowCol [ 0 ] [ 1 ] = fSine ; mRotate . m_afRowCol [ 1 ] [ 1 ] = fCosine ;* this = mRotate** this ; } ST_INLINE void)",
    "insertText": "RotateArbitrary(const Vec3& vAxis, st_float32 fRadians)"
  },
  {
    "label": "vNormalizedAxis()",
    "kind": "Method",
    "detail": "Function (st_float32 t = 1 . 0 f - c ; Vec3)",
    "insertText": "vNormalizedAxis(vAxis)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (vNormalizedAxis .)",
    "insertText": "Normalize()"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (const st_float32& x = vNormalizedAxis . x ; const st_float32& y = vNormalizedAxis . y ; const st_float32& z = vNormalizedAxis . z ; Mat3x3 mRotate ; mRotate . m_afRowCol [ 0 ] [ 0 ] = t* x* x + c ; mRotate . m_afRowCol [ 0 ] [ 1 ] = t* x* y + s* z ; mRotate . m_afRowCol [ 0 ] [ 2 ] = t* x* z - s* y ; mRotate . m_afRowCol [ 1 ] [ 0 ] = t* x* y - s* z ; mRotate . m_afRowCol [ 1 ] [ 1 ] = t* y* y + c ; mRotate . m_afRowCol [ 1 ] [ 2 ] = t* y* z + s* x ; mRotate . m_afRowCol [ 2 ] [ 0 ] = t* x* z + s* y ; mRotate . m_afRowCol [ 2 ] [ 1 ] = t* y* z - s* x ; mRotate . m_afRowCol [ 2 ] [ 2 ] = t* z* z + c ;* this = mRotate** this ; } ST_INLINE void)",
    "insertText": "Scale(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (m_afSingle [ 0 ]* = x ; m_afSingle [ 1 ]* = x ; m_afSingle [ 2 ]* = x ; m_afSingle [ 3 ]* = y ; m_afSingle [ 4 ]* = y ; m_afSingle [ 5 ]* = y ; m_afSingle [ 6 ]* = z ; m_afSingle [ 7 ]* = z ; m_afSingle [ 8 ]* = z ; } ST_INLINE void)",
    "insertText": "Scale(const Vec3& vScalar)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(vScalar.x, vScalar.y, vScalar.z)"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "Mat4x4(bool bSetToIdentity)"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "Mat4x4(const st_float32 afInit[16])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_afSingle, afInit, 16 * sizeof(st_float32))"
  },
  {
    "label": "Mat4x4()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE)",
    "insertText": "Mat4x4(st_float32 m00, st_float32 m01, st_float32 m02, st_float32 m03, st_float32 m10, st_float32 m11, st_float32 m12, st_float32 m13, st_float32 m20, st_float32 m21, st_float32 m22, st_float32 m23, st_float32 m30, st_float32 m31, st_float32 m32, st_float32 m33)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Mat4x4 cTmp ;)",
    "insertText": "for(int i = 0; i < 4; ++i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (cTmp . m_afRowCol [ i ] [ 0 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 0 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 0 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 0 ] + m_afRowCol [ i ] [ 3 ]* vIn . m_afRowCol [ 3 ] [ 0 ] ; cTmp . m_afRowCol [ i ] [ 1 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 1 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 1 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 1 ] + m_afRowCol [ i ] [ 3 ]* vIn . m_afRowCol [ 3 ] [ 1 ] ; cTmp . m_afRowCol [ i ] [ 2 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 2 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 2 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 2 ] + m_afRowCol [ i ] [ 3 ]* vIn . m_afRowCol [ 3 ] [ 2 ] ; cTmp . m_afRowCol [ i ] [ 3 ] = m_afRowCol [ i ] [ 0 ]* vIn . m_afRowCol [ 0 ] [ 3 ] + m_afRowCol [ i ] [ 1 ]* vIn . m_afRowCol [ 1 ] [ 3 ] + m_afRowCol [ i ] [ 2 ]* vIn . m_afRowCol [ 2 ] [ 3 ] + m_afRowCol [ i ] [ 3 ]* vIn . m_afRowCol [ 3 ] [ 3 ] ; } return cTmp ; } ST_INLINE Mat4x4)",
    "insertText": "operator(const Mat4x4& vIn)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec4)",
    "insertText": "operator(const Vec4& vIn)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_afSingle, vIn.m_afSingle, sizeof(m_afSingle))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_afSingle, 0, 16 * sizeof(st_float32))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (m_afSingle [ 0 ] = m_afSingle [ 5 ] = m_afSingle [ 1 0 ] = m_afSingle [ 1 5 ] = 1 . 0 f ; } ST_INLINE void)",
    "insertText": "Set(const st_float32 afValue[16])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_afSingle, afValue, 16 * sizeof(st_float32))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Set(st_float32 m00, st_float32 m01, st_float32 m02, st_float32 m03, st_float32 m10, st_float32 m11, st_float32 m12, st_float32 m13, st_float32 m20, st_float32 m21, st_float32 m22, st_float32 m23, st_float32 m30, st_float32 m31, st_float32 m32, st_float32 m33)"
  },
  {
    "label": "GetVectorComponents()",
    "kind": "Method",
    "detail": "Function (st_float32* pMatrix = m_afSingle ;* pMatrix + + = m00 ;* pMatrix + + = m01 ;* pMatrix + + = m02 ;* pMatrix + + = m03 ;* pMatrix + + = m10 ;* pMatrix + + = m11 ;* pMatrix + + = m12 ;* pMatrix + + = m13 ;* pMatrix + + = m20 ;* pMatrix + + = m21 ;* pMatrix + + = m22 ;* pMatrix + + = m23 ;* pMatrix + + = m30 ;* pMatrix + + = m31 ;* pMatrix + + = m32 ;* pMatrix = m33 ; } ST_INLINE void)",
    "insertText": "GetVectorComponents(Vec3& vUp, Vec3& vOut, Vec3& vRight)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (vRight .)",
    "insertText": "Set(m_afSingle[0], m_afSingle[4], m_afSingle[8])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (vUp .)",
    "insertText": "Set(m_afSingle[1], m_afSingle[5], m_afSingle[9])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (vOut .)",
    "insertText": "Set(m_afSingle[2], m_afSingle[6], m_afSingle[10])"
  },
  {
    "label": "Invert()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE bool)",
    "insertText": "Invert(Mat4x4& mResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const st_float32 c_fTiny = 1 . 0 e - 2 0 f ; st_float32 fA0 = m_afSingle [ 0 ]* m_afSingle [ 5 ] - m_afSingle [ 1 ]* m_afSingle [ 4 ] ; st_float32 fA1 = m_afSingle [ 0 ]* m_afSingle [ 6 ] - m_afSingle [ 2 ]* m_afSingle [ 4 ] ; st_float32 fA2 = m_afSingle [ 0 ]* m_afSingle [ 7 ] - m_afSingle [ 3 ]* m_afSingle [ 4 ] ; st_float32 fA3 = m_afSingle [ 1 ]* m_afSingle [ 6 ] - m_afSingle [ 2 ]* m_afSingle [ 5 ] ; st_float32 fA4 = m_afSingle [ 1 ]* m_afSingle [ 7 ] - m_afSingle [ 3 ]* m_afSingle [ 5 ] ; st_float32 fA5 = m_afSingle [ 2 ]* m_afSingle [ 7 ] - m_afSingle [ 3 ]* m_afSingle [ 6 ] ; st_float32 fB0 = m_afSingle [ 8 ]* m_afSingle [ 1 3 ] - m_afSingle [ 9 ]* m_afSingle [ 1 2 ] ; st_float32 fB1 = m_afSingle [ 8 ]* m_afSingle [ 1 4 ] - m_afSingle [ 1 0 ]* m_afSingle [ 1 2 ] ; st_float32 fB2 = m_afSingle [ 8 ]* m_afSingle [ 1 5 ] - m_afSingle [ 1 1 ]* m_afSingle [ 1 2 ] ; st_float32 fB3 = m_afSingle [ 9 ]* m_afSingle [ 1 4 ] - m_afSingle [ 1 0 ]* m_afSingle [ 1 3 ] ; st_float32 fB4 = m_afSingle [ 9 ]* m_afSingle [ 1 5 ] - m_afSingle [ 1 1 ]* m_afSingle [ 1 3 ] ; st_float32 fB5 = m_afSingle [ 1 0 ]* m_afSingle [ 1 5 ] - m_afSingle [ 1 1 ]* m_afSingle [ 1 4 ] ; st_float32 fDet = fA0* fB5 - fA1* fB4 + fA2* fB3 + fA3* fB2 - fA4* fB1 + fA5* fB0 ;)",
    "insertText": "if(fabs(fDet) <= c_fTiny)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (mResult .)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "Multiply4f()",
    "kind": "Method",
    "detail": "Function (mResult . m_afSingle [ 0 ] = m_afSingle [ 5 ]* fB5 - m_afSingle [ 6 ]* fB4 + m_afSingle [ 7 ]* fB3 ; mResult . m_afSingle [ 4 ] = - m_afSingle [ 4 ]* fB5 + m_afSingle [ 6 ]* fB2 - m_afSingle [ 7 ]* fB1 ; mResult . m_afSingle [ 8 ] = m_afSingle [ 4 ]* fB4 - m_afSingle [ 5 ]* fB2 + m_afSingle [ 7 ]* fB0 ; mResult . m_afSingle [ 1 2 ] = - m_afSingle [ 4 ]* fB3 + m_afSingle [ 5 ]* fB1 - m_afSingle [ 6 ]* fB0 ; mResult . m_afSingle [ 1 ] = - m_afSingle [ 1 ]* fB5 + m_afSingle [ 2 ]* fB4 - m_afSingle [ 3 ]* fB3 ; mResult . m_afSingle [ 5 ] = m_afSingle [ 0 ]* fB5 - m_afSingle [ 2 ]* fB2 + m_afSingle [ 3 ]* fB1 ; mResult . m_afSingle [ 9 ] = - m_afSingle [ 0 ]* fB4 + m_afSingle [ 1 ]* fB2 - m_afSingle [ 3 ]* fB0 ; mResult . m_afSingle [ 1 3 ] = m_afSingle [ 0 ]* fB3 - m_afSingle [ 1 ]* fB1 + m_afSingle [ 2 ]* fB0 ; mResult . m_afSingle [ 2 ] = m_afSingle [ 1 3 ]* fA5 - m_afSingle [ 1 4 ]* fA4 + m_afSingle [ 1 5 ]* fA3 ; mResult . m_afSingle [ 6 ] = - m_afSingle [ 1 2 ]* fA5 + m_afSingle [ 1 4 ]* fA2 - m_afSingle [ 1 5 ]* fA1 ; mResult . m_afSingle [ 1 0 ] = m_afSingle [ 1 2 ]* fA4 - m_afSingle [ 1 3 ]* fA2 + m_afSingle [ 1 5 ]* fA0 ; mResult . m_afSingle [ 1 4 ] = - m_afSingle [ 1 2 ]* fA3 + m_afSingle [ 1 3 ]* fA1 - m_afSingle [ 1 4 ]* fA0 ; mResult . m_afSingle [ 3 ] = - m_afSingle [ 9 ]* fA5 + m_afSingle [ 1 0 ]* fA4 - m_afSingle [ 1 1 ]* fA3 ; mResult . m_afSingle [ 7 ] = m_afSingle [ 8 ]* fA5 - m_afSingle [ 1 0 ]* fA2 + m_afSingle [ 1 1 ]* fA1 ; mResult . m_afSingle [ 1 1 ] = - m_afSingle [ 8 ]* fA4 + m_afSingle [ 9 ]* fA2 - m_afSingle [ 1 1 ]* fA0 ; mResult . m_afSingle [ 1 5 ] = m_afSingle [ 8 ]* fA3 - m_afSingle [ 9 ]* fA1 + m_afSingle [ 1 0 ]* fA0 ; st_float32 fInvDet = 1 . 0 f / fDet ; mResult . m_afSingle [ 0 ]* = fInvDet ; mResult . m_afSingle [ 1 ]* = fInvDet ; mResult . m_afSingle [ 2 ]* = fInvDet ; mResult . m_afSingle [ 3 ]* = fInvDet ; mResult . m_afSingle [ 4 ]* = fInvDet ; mResult . m_afSingle [ 5 ]* = fInvDet ; mResult . m_afSingle [ 6 ]* = fInvDet ; mResult . m_afSingle [ 7 ]* = fInvDet ; mResult . m_afSingle [ 8 ]* = fInvDet ; mResult . m_afSingle [ 9 ]* = fInvDet ; mResult . m_afSingle [ 1 0 ]* = fInvDet ; mResult . m_afSingle [ 1 1 ]* = fInvDet ; mResult . m_afSingle [ 1 2 ]* = fInvDet ; mResult . m_afSingle [ 1 3 ]* = fInvDet ; mResult . m_afSingle [ 1 4 ]* = fInvDet ; mResult . m_afSingle [ 1 5 ]* = fInvDet ; return true ; } ST_INLINE void)",
    "insertText": "Multiply4f(const st_float32 afIn[4], st_float32 afResult[4])"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Translate(st_float32 x, st_float32 y, st_float32 z)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (Mat4x4 mTmp ; mTmp [ 1 2 ] = x ; mTmp [ 1 3 ] = y ; mTmp [ 1 4 ] = z ;* this = mTmp** this ; } ST_INLINE void)",
    "insertText": "Translate(const Vec3& vTranslate)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(vTranslate.x, vTranslate.y, vTranslate.z)"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (} template<class T> ST_INLINE void)",
    "insertText": "MatSwap(T& tA, T& tB)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (T tTemp = tA ; tA = tB ; tB = tTemp ; } ST_INLINE Mat4x4)",
    "insertText": "Transpose(void)"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (Mat4x4 mResult =* this ;)",
    "insertText": "MatSwap(mResult.m_afSingle[1], mResult.m_afSingle[4])"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatSwap(mResult.m_afSingle[2], mResult.m_afSingle[8])"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatSwap(mResult.m_afSingle[6], mResult.m_afSingle[9])"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatSwap(mResult.m_afSingle[3], mResult.m_afSingle[12])"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatSwap(mResult.m_afSingle[7], mResult.m_afSingle[13])"
  },
  {
    "label": "MatSwap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MatSwap(mResult.m_afSingle[11], mResult.m_afSingle[14])"
  },
  {
    "label": "vF()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "vF(vCenter - vEye)"
  },
  {
    "label": "vUpPrime()",
    "kind": "Method",
    "detail": "Function (Vec3)",
    "insertText": "vUpPrime(vUp)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (Vec3 vS = vF .)",
    "insertText": "Cross(vUpPrime)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (Vec3 vU = vS .)",
    "insertText": "Cross(vF)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (Mat4x4 mTemp ; mTemp . m_afRowCol [ 0 ] [ 0 ] = vS [ 0 ] ; mTemp . m_afRowCol [ 1 ] [ 0 ] = vS [ 1 ] ; mTemp . m_afRowCol [ 2 ] [ 0 ] = vS [ 2 ] ; mTemp . m_afRowCol [ 0 ] [ 1 ] = vU [ 0 ] ; mTemp . m_afRowCol [ 1 ] [ 1 ] = vU [ 1 ] ; mTemp . m_afRowCol [ 2 ] [ 1 ] = vU [ 2 ] ; mTemp . m_afRowCol [ 0 ] [ 2 ] = - vF [ 0 ] ; mTemp . m_afRowCol [ 1 ] [ 2 ] = - vF [ 1 ] ; mTemp . m_afRowCol [ 2 ] [ 2 ] = - vF [ 2 ] ;* this =* this* mTemp ;)",
    "insertText": "Translate(-vEye)"
  },
  {
    "label": "Ortho()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void)",
    "insertText": "Ortho(st_float32 fLeft, st_float32 fRight, st_float32 fBottom, st_float32 fTop, st_float32 fNear, st_float32 fFar, bool bOpenGL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Mat4x4 mTemp ;)",
    "insertText": "if(bOpenGL)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 0 ] = 2 . 0)",
    "insertText": "f(fRight - fLeft)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 5 ] = 2 . 0)",
    "insertText": "f(fTop - fBottom)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 1 0 ] = - 2 . 0)",
    "insertText": "f(fFar - fNear)"
  },
  {
    "label": "m_afSingle()",
    "kind": "Method",
    "detail": "Function (mTemp .)",
    "insertText": "m_afSingle(fRight + fLeft) / (fRight - fLeft)"
  },
  {
    "label": "m_afSingle()",
    "kind": "Method",
    "detail": "Function (mTemp .)",
    "insertText": "m_afSingle(fTop + fBottom) / (fTop - fBottom)"
  },
  {
    "label": "m_afSingle()",
    "kind": "Method",
    "detail": "Function (mTemp .)",
    "insertText": "m_afSingle(fFar + fNear) / (fFar - fNear)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 1 0 ] = 1 . 0)",
    "insertText": "f(fNear - fFar)"
  },
  {
    "label": "m_afSingle()",
    "kind": "Method",
    "detail": "Function (mTemp .)",
    "insertText": "m_afSingle(fLeft + fRight) / (fLeft - fRight)"
  },
  {
    "label": "m_afSingle()",
    "kind": "Method",
    "detail": "Function (mTemp .)",
    "insertText": "m_afSingle(fTop + fBottom) / (fBottom - fTop)"
  },
  {
    "label": "fNear()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 1 4 ] =)",
    "insertText": "fNear(fNear - fFar)"
  },
  {
    "label": "Frustum()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 1 5 ] = 1 . 0 f ; }* this =* this* mTemp ; } ST_INLINE void)",
    "insertText": "Frustum(st_float32 fLeft, st_float32 fRight, st_float32 fBottom, st_float32 fTop, st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (Mat4x4 mTemp ; st_float32)",
    "insertText": "a(fRight + fLeft) / (fRight - fLeft)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "b(fTop + fBottom) / (fTop - fBottom)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "c(fFar + fNear) / (fFar - fNear)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (st_float32)",
    "insertText": "d(2.0f * (fFar * fNear)) / (fFar - fNear)"
  },
  {
    "label": "fNear()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 0 ] = 2 . 0 f*)",
    "insertText": "fNear(fRight - fLeft)"
  },
  {
    "label": "fNear()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 5 ] = 2 . 0 f*)",
    "insertText": "fNear(fTop - fBottom)"
  },
  {
    "label": "Perspective()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 8 ] = a ; mTemp . m_afSingle [ 9 ] = b ; mTemp . m_afSingle [ 1 0 ] = c ; mTemp . m_afSingle [ 1 1 ] = - 1 . 0 f ; mTemp . m_afSingle [ 1 4 ] = d ; mTemp . m_afSingle [ 1 5 ] = 0 . 0 f ;* this =* this* mTemp ; } ST_INLINE void)",
    "insertText": "Perspective(st_float32 fFieldOfView, st_float32 fAspectRatio, st_float32 fNear, st_float32 fFar)"
  },
  {
    "label": "tan()",
    "kind": "Method",
    "detail": "Function (Mat4x4 mTemp ; st_float32 f = 1 . 0 f /)",
    "insertText": "tan(0.5f * fFieldOfView)"
  },
  {
    "label": "m_afSingle()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 0 ] = f / fAspectRatio ; mTemp . m_afSingle [ 5 ] = f ; mTemp .)",
    "insertText": "m_afSingle(fFar + fNear) / (fNear - fFar)"
  },
  {
    "label": "AdjustPerspectiveNearAndFar()",
    "kind": "Method",
    "detail": "Function (mTemp . m_afSingle [ 1 5 ] = 0 . 0 f ;* this =* this* mTemp ; } ST_INLINE void)",
    "insertText": "AdjustPerspectiveNearAndFar(st_float32 fNear, st_float32 fFar)"
  }
]