[
  {
    "label": "TBlockData3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockData3"
  },
  {
    "label": "TBasicBlockedDenseGrid3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBasicBlockedDenseGrid3"
  },
  {
    "label": "FBlock3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlock3"
  },
  {
    "label": "OtherElemType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherElemType"
  },
  {
    "label": "TBlockedGrid3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockedGrid3"
  },
  {
    "label": "TBlockedDenseGrid3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlockedDenseGrid3"
  },
  {
    "label": "TBlockData3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BlockedLayout3 . h \" # include \" BoxTypes . h \" # include \" Containers / BitArray . h \" # include \" Containers / StaticArray . h \" # include \" Misc / ScopeLock . h \" # include \" HAL / CriticalSection . h \" namespace UE { namespace Geometry { template<ElemType_,int32 BlockSize_> class TBlockData3 : public TBlockData3Layout<BlockSize_> { public : typedef TBlockData3Layout<BlockSize_> DataLayout ; typedef ElemType_ ElemType ; typedef TStaticArray<ElemType,DataLayout::ElemCount> LinearDataStorageType ;)",
    "insertText": "TBlockData3() :Id(-1)"
  },
  {
    "label": "TBlockData3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBlockData3(const ElemType& Value, const int32 ID) :Id(ID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(Value)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const ElemType& Value)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (Data [ k ] = Value ; } } ElemType&)",
    "insertText": "At(const int32 Index)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (ElemType& Value = Data [ Index ] ;)",
    "insertText": "Func(Value)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (BitArray .)",
    "insertText": "Init(Value, DataLayout::ElemCount)"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} FBitReference)",
    "insertText": "At(int32 LocalIndex)"
  },
  {
    "label": "TopologyUnion()",
    "kind": "Method",
    "detail": "Function (BitArray [ Index ] = Value ; } void)",
    "insertText": "TopologyUnion(const TBlockData3<bool, BlockSize_>& OtherBlockData)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (const auto& OtherBitArray = OtherBlockData . BitArray ; BitArray .)",
    "insertText": "CombineWithBitwiseOR(OtherBitArray, EBitwiseOperatorFlags::MaintainSize)"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (} int32 Id ; BlockDataBitMask BitArray ; } ; template<ElemType,int32 BlockSize_> class TBasicBlockedDenseGrid3 : public TBlockedGrid3Layout<BlockSize_> { public : typedef TBlockedGrid3Layout<BlockSize_> BlockedGrid3LayoutType ; typedef TBlockData3<ElemType,BlockSize_> BlockData3Type ; int32 BlockSize = BlockSize_ ; int32 BlockElemCount = BlockSize* BlockSize* BlockSize ; protected : ElemType)",
    "insertText": "DefaultValue(ElemType)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (struct FBlock3 { void)",
    "insertText": "Reset(const ElemType& DefaultIn = (ElemType)0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BlockDataPtr .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (DefaultValue = DefaultIn ; } ElemType)",
    "insertText": "GetValue(const int32& LocalIndex)"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<BlockData3Type> BlockDataPtr ; ElemType DefaultValue ; } ; TArray<FBlock3> Blocks ; protected : template<class OtherElemType,int32 OtherBlockSize> class TBasicBlockedDenseGrid3 ; # if UE_BUILD_DEBUG FBlock3&)",
    "insertText": "GetBlock(int32 Index)"
  },
  {
    "label": "IsBlockAllocated()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsBlockAllocated(const FBlock3& Block)"
  },
  {
    "label": "IsBlockAllocated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBlockAllocated(const int32 BlockIndex)"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (const FBlock3& Block =)",
    "insertText": "GetBlock(BlockIndex)"
  },
  {
    "label": "TouchBlockData()",
    "kind": "Method",
    "detail": "Function (} BlockData3Type&)",
    "insertText": "TouchBlockData(const int32 BlockIndex)"
  },
  {
    "label": "BlockData3Type()",
    "kind": "Method",
    "detail": "Function (const ElemType& Value = Block . DefaultValue ; Block . BlockDataPtr = MakeUnique<)",
    "insertText": "BlockData3Type(Value, BlockIndex)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} return* Block . BlockDataPtr ; } template<FuncType> void)",
    "insertText": "WriteValue(const int32& BlockIndex, const int32& LocalIndex, FuncType Func)"
  },
  {
    "label": "TouchBlockData()",
    "kind": "Method",
    "detail": "Function (BlockData3Type& BlockData =)",
    "insertText": "TouchBlockData(BlockIndex)"
  },
  {
    "label": "ModifyValue()",
    "kind": "Method",
    "detail": "Function (BlockData .)",
    "insertText": "ModifyValue(LocalIndex, Func)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} template<FuncType> void)",
    "insertText": "WriteValue(int32 I, int32 J, int32 K, FuncType Func)"
  },
  {
    "label": "GetBlockAndLocalIndex()",
    "kind": "Method",
    "detail": "Function (int32 BlockIndex,LocalIndex ;)",
    "insertText": "GetBlockAndLocalIndex(I, J, K, BlockIndex, LocalIndex)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(BlockIndex, LocalIndex, Func)"
  },
  {
    "label": "WriteValueWithLock()",
    "kind": "Method",
    "detail": "Function (} template<FuncType> void)",
    "insertText": "WriteValueWithLock(const int32& BlockIndex, const int32& LocalIndex, FuncType Func, FCriticalSection* CriticalSection)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(CriticalSection)"
  },
  {
    "label": "ReadValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "ReadValue(const int32& BlockIndex, const int32& LocalIndex)"
  },
  {
    "label": "ReadValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "ReadValue(int32 I, int32 J, int32 K)"
  },
  {
    "label": "ReadValueWithLock()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "ReadValueWithLock(const int32& BlockIndex, const int32& LocalIndex, FCriticalSection* CriticalSection)"
  },
  {
    "label": "TBasicBlockedDenseGrid3()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TBasicBlockedDenseGrid3() : BlockedGrid3LayoutType(0,0,0)"
  },
  {
    "label": "TBasicBlockedDenseGrid3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBasicBlockedDenseGrid3(int32 DimI, int32 DimJ, int32 DimK, ElemType InitialValue)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (DefaultValue = InitialValue ;)",
    "insertText": "Resize(DimI, DimJ, DimK)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Resize(int32 DimI, int32 DimJ, int32 DimK)"
  },
  {
    "label": "GetNumBlocks()",
    "kind": "Method",
    "detail": "Function (const int32 NumBlocks =)",
    "insertText": "GetNumBlocks()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Blocks .)",
    "insertText": "SetNum(NumBlocks)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Blocks [ k ] .)",
    "insertText": "Reset(DefaultValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(BlockedGrid3LayoutType::Dimensions.X, BlockedGrid3LayoutType::Dimensions.Y, BlockedGrid3LayoutType::Dimensions.Z, DefaultValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(int32 DimI, int32 DimJ, int32 DimK, ElemType InitialValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "GetValue(int32 I, int32 J, int32 K)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "GetValue(const FVector3i& CellIJK)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(int32 I, int32 J, int32 K, ElemType NewValue)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(I, J, K, [NewValue](ElemType& GridValueInOut) { GridValueInOut = NewValue; })"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const FVector3i& CellIJK, ElemType NewValue)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(CellIJK.X, CellIJK.Y, CellIJK.Z, [NewValue](ElemType& GridValueInOut) { GridValueInOut = NewValue; })"
  },
  {
    "label": "ProcessValue()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessValue(int32 I, int32 J, int32 K, ProcessFunc Func)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(I, J, K, Func)"
  },
  {
    "label": "ProcessValue()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessValue(const FVector3i& CellIJK, ProcessFunc Func)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(CellIJK.X, CellIJK.Y, CellIJK.Z, Func)"
  },
  {
    "label": "PreAllocateFromSourceGrid()",
    "kind": "Method",
    "detail": "Function (} template<OtherElemType> bool)",
    "insertText": "PreAllocateFromSourceGrid(const TBasicBlockedDenseGrid3<OtherElemType, BlockSize>& SourceGrid)"
  },
  {
    "label": "GetBlockDimensions()",
    "kind": "Method",
    "detail": "Function (const FVector3i& BlockDims =)",
    "insertText": "GetBlockDimensions()"
  },
  {
    "label": "TouchBlockData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TouchBlockData(k)"
  },
  {
    "label": "WriteBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} } return true ; } } ; template<ElemType,int32 BlockSize_> class TBlockedGrid3 : public TBasicBlockedDenseGrid3<ElemType,BlockSize_> { public : typedef TBasicBlockedDenseGrid3<ElemType,BlockSize_> BlockedDenseGridType ; typedef TBlockedGrid3Layout<BlockSize_> BlockedGrid3LayoutType ; typedef TBlockData3<ElemType,BlockSize_> BlockData3Type ; int32 BlockSize = BlockSize_ ; int32 BlockElemCount = BlockSize* BlockSize* BlockSize ; protected : typedef TBasicBlockedDenseGrid3<ElemType,BlockSize_>::FBlock3 FBlock3 ; template<FuncType> void)",
    "insertText": "WriteBlockDefaultValue(const int32 BlockIndex, FuncType Func, bool bDeallocateBock = true)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Block.DefaultValue)"
  },
  {
    "label": "WriteBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} } template<FuncType> void)",
    "insertText": "WriteBlockDefaultValue(const FVector3i& BlockIJK, FuncType Func, bool bDeallocateBock = true)"
  },
  {
    "label": "BlockIJKToBlockIndex()",
    "kind": "Method",
    "detail": "Function (const int32 BlockIndex =)",
    "insertText": "BlockIJKToBlockIndex(BlockIJK)"
  },
  {
    "label": "WriteBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBlockDefaultValue(BlockIndex, Func, bDeallocateBock)"
  },
  {
    "label": "WriteBlockDefaultValueWithLock()",
    "kind": "Method",
    "detail": "Function (} template<FuncType> void)",
    "insertText": "WriteBlockDefaultValueWithLock(const int32 BlockIndex, FuncType Func, FCriticalSection* CriticalSection, bool bDeallocateBock = true)"
  },
  {
    "label": "ReadBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "ReadBlockDefaultValue(const int32& BlockIndex)"
  },
  {
    "label": "ReadBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "ReadBlockDefaultValue(const FVector3i& BlockIJK)"
  },
  {
    "label": "TBlockedGrid3()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TBlockedGrid3() : BlockedDenseGridType()"
  },
  {
    "label": "TBlockedGrid3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBlockedGrid3(int32 DimI, int32 DimJ, int32 DimK, ElemType InitialValue) : BlockedDenseGridType(DimI, DimJ, DimK, InitialValue)"
  },
  {
    "label": "SetValueWithLock()",
    "kind": "Method",
    "detail": "Function (} template<CriticalSectionProviderType> void)",
    "insertText": "SetValueWithLock(int32 I, int32 J, int32 K, ElemType NewValue, CriticalSectionProviderType& CriticalSectionProvider)"
  },
  {
    "label": "CriticalSectionProvider()",
    "kind": "Method",
    "detail": "Function (FCriticalSection& CriticalSection =)",
    "insertText": "CriticalSectionProvider(BlockIndex)"
  },
  {
    "label": "WriteValueWithLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueWithLock(BlockIndex, LocalIndex, [&NewValue](ElemType& Value){Value = NewValue;}, &CriticalSection)"
  },
  {
    "label": "SetValueWithLock()",
    "kind": "Method",
    "detail": "Function (} template<CriticalSectionProviderType> void)",
    "insertText": "SetValueWithLock(const FVector3i& CellIJK, ElemType NewValue, CriticalSectionProviderType CriticalSectionProvider)"
  },
  {
    "label": "SetValueWithLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueWithLock(CellIJK.X, CellIJK.Y, CellIJK.Z, NewValue, CriticalSectionProvider)"
  },
  {
    "label": "ProcessValueWithLock()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc,CriticalSectionProviderType> void)",
    "insertText": "ProcessValueWithLock(int32 I, int32 J, int32 K, ProcessFunc Func, CriticalSectionProviderType CriticalSectionProvider)"
  },
  {
    "label": "WriteValueWithLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueWithLock(BlockIndex, LocalIndex, Func, &CriticalSection)"
  },
  {
    "label": "ProcessValueWithLock()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc,CriticalSectionProviderType> void)",
    "insertText": "ProcessValueWithLock(const FVector3i& CellIJK, ProcessFunc Func, CriticalSectionProviderType CriticalSectionProvider)"
  },
  {
    "label": "ProcessValueWithLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessValueWithLock(CellIJK.X, CellIJK.Y, CellIJK.Z, Func, CriticalSectionProvider)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(BlockedDenseGridType::Blocks[i].BlockDataPtr.Get())"
  },
  {
    "label": "GetAllocatedBlocks()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } TArray<BlockData3Type*>)",
    "insertText": "GetAllocatedBlocks()"
  },
  {
    "label": "IsBlockAllocated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBlockAllocated(const FVector3i& BlockIJK)"
  },
  {
    "label": "TouchBlockData()",
    "kind": "Method",
    "detail": "Function (} BlockData3Type&)",
    "insertText": "TouchBlockData(const FVector3i& BlockIJK)"
  },
  {
    "label": "GetBlockData()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<BlockData3Type>&)",
    "insertText": "GetBlockData(const FVector3i& BlockIJK)"
  },
  {
    "label": "GetBlockData()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<BlockData3Type>&)",
    "insertText": "GetBlockData(int32 BlockIndex)"
  },
  {
    "label": "GetBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "GetBlockDefaultValue(const FVector3i& BlockIJK)"
  },
  {
    "label": "SetBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBlockDefaultValue(const FVector3i& BlockIJK, const ElemType& Value, bool bPruneBlock = true)"
  },
  {
    "label": "WriteBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBlockDefaultValue(BlockIJK, [&Value](ElemType& oldValue){ oldValue = Value;}, bPruneBlock)"
  },
  {
    "label": "ProcessBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessBlockDefaultValue(const FVector3i& BlockIJK, ProcessFunc Func, bool bPruneBlock = true)"
  },
  {
    "label": "WriteBlockDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBlockDefaultValue(BlockIJK, Func, bPruneBlock)"
  },
  {
    "label": "GetBlockLock()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TBlockedGrid3<float,8> FBlockedGrid3f ; typedef TBlockedGrid3<double,8> FBlockedGrid3d ; typedef TBlockedGrid3<int,8> FBlockedGrid3i ; typedef TBlockedGrid3<bool,8> FBlockedGrid3b ; template<ElemType> class TBlockedDenseGrid3 : public TBasicBlockedDenseGrid3<ElemType,3 2> { public : int32 BlockSize = 3 2 ; int32 BlockElemCount = BlockSize* BlockSize* BlockSize ; typedef TBasicBlockedDenseGrid3<ElemType,BlockSize> BlockedDenseGridType ; typedef TBlockedGrid3Layout<BlockSize> BlockedGrid3LayoutType ; typedef TBlockData3<ElemType,BlockSize> BlockData3Type ; protected : TArray<FCriticalSection> BlockLocks ; # if UE_BUILD_DEBUG FCriticalSection*)",
    "insertText": "GetBlockLock(int32 Index)"
  },
  {
    "label": "WriteValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} # endif template<FuncType> void)",
    "insertText": "WriteValueThreadSafe(int32 I, int32 J, int32 K, FuncType Func)"
  },
  {
    "label": "WriteValueWithLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueWithLock(BlockIndex, LocalIndex, Func, GetBlockLock(BlockIndex))"
  },
  {
    "label": "ReadValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "ReadValueThreadSafe(int32 I, int32 J, int32 K)"
  },
  {
    "label": "TBlockedDenseGrid3()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TBlockedDenseGrid3() : BlockedDenseGridType()"
  },
  {
    "label": "TBlockedDenseGrid3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBlockedDenseGrid3(int32 DimI, int32 DimJ, int32 DimK, ElemType InitialValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(BlockedGrid3LayoutType::Dimensions.X, BlockedGrid3LayoutType::Dimensions.Y, BlockedGrid3LayoutType::Dimensions.Z, BlockedDenseGridType::DefaultValue)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(FVector3i CellIJK)"
  },
  {
    "label": "GetValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "GetValueThreadSafe(int32 I, int32 J, int32 K)"
  },
  {
    "label": "GetValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} ElemType)",
    "insertText": "GetValueThreadSafe(const FVector3i& CellIJK)"
  },
  {
    "label": "SetValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueThreadSafe(int32 I, int32 J, int32 K, ElemType NewValue)"
  },
  {
    "label": "WriteValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueThreadSafe(I, J, K, [NewValue](ElemType& GridValueInOut) { GridValueInOut = NewValue; })"
  },
  {
    "label": "SetValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValueThreadSafe(const FVector3i& CellIJK, ElemType NewValue)"
  },
  {
    "label": "WriteValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueThreadSafe(CellIJK.X, CellIJK.Y, CellIJK.Z, [NewValue](ElemType& GridValueInOut) { GridValueInOut = NewValue; })"
  },
  {
    "label": "ProcessValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessValueThreadSafe(int32 I, int32 J, int32 K, ProcessFunc Func)"
  },
  {
    "label": "WriteValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueThreadSafe(I, J, K, Func)"
  },
  {
    "label": "ProcessValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (} template<ProcessFunc> void)",
    "insertText": "ProcessValueThreadSafe(const FVector3i& CellIJK, ProcessFunc Func)"
  },
  {
    "label": "WriteValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValueThreadSafe(CellIJK.X, CellIJK.Y, CellIJK.Z, Func)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "ToIndex(int64 LinearIndex)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "x(int32)(LinearIndex % (int64)BlockedGrid3LayoutType::Dimensions.X)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "y(int32)((LinearIndex / (int64)BlockedGrid3LayoutType::Dimensions.X) % (int64)BlockedGrid3LayoutType::Dimensions.Y)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "z(int32)(LinearIndex / ((int64)BlockedGrid3LayoutType::Dimensions.X * (int64)BlockedGrid3LayoutType::Dimensions.Y))"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "ToLinear(int32 X, int32 Y, int32 Z)"
  },
  {
    "label": "ToLinear()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "ToLinear(const FVector3i& IJK)"
  }
]