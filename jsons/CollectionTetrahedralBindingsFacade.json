[
  {
    "label": "FleshDeformerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FleshDeformerImpl"
  },
  {
    "label": "FTetrahedralBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTetrahedralBindings"
  },
  {
    "label": "Evaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Evaluator"
  },
  {
    "label": "MaskedEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaskedEvaluator"
  },
  {
    "label": "FleshDeformerImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Containers / Array . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" namespace GeometryCollection::Facades { class FleshDeformerImpl { public :)",
    "insertText": "FleshDeformerImpl()"
  },
  {
    "label": "GetTangentBasis()",
    "kind": "Method",
    "detail": "Function (} Chaos::PMatrix<float,3,3>)",
    "insertText": "GetTangentBasis(const FVector3f& TangentZ)"
  },
  {
    "label": "GetOrthogonalBasisVectors()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<float,3,3>)",
    "insertText": "GetOrthogonalBasisVectors(const FVector3f& PtA, const FVector3f& PtB, const FVector3f& PtC)"
  },
  {
    "label": "GetRotatedOffsetVector()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetRotatedOffsetVector(const FVector3f& Offset, const FVector3f& RestPtA, const FVector3f& RestPtB, const FVector3f& RestPtC, const FVector3f& CurrPtA, const FVector3f& CurrPtB, const FVector3f& CurrPtC)"
  },
  {
    "label": "GetRotatedOffsetVector()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetRotatedOffsetVector(const FIntVector4& Parents, const FVector3f& Offset, const TManagedArray<FVector3f>& RestVertices, const TArray<Chaos::TVector<Chaos::FRealSingle, 3>>& CurrVertices)"
  },
  {
    "label": "GetEmbeddedPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetEmbeddedPosition(const int32 SurfaceIndex, const TManagedArrayAccessor<FIntVector4>* ParentsArray, const TManagedArrayAccessor<FVector4f>* WeightsArray, const TManagedArrayAccessor<FVector3f>* OffsetArray, const TManagedArray<FVector3f>& RestVertices, const TArray<Chaos::TVector<Chaos::FRealSingle, 3>>& CurrVertices)"
  },
  {
    "label": "FTetrahedralBindings()",
    "kind": "Method",
    "detail": "Function (} ; class FTetrahedralBindings { public : const FName MeshBindingsGroupName ; const FName MeshIdAttributeName ; const FName ParentsAttributeName ; const FName WeightsAttributeName ; const FName OffsetsAttributeName ; const FName MaskAttributeName ; const FName TetrahedralGroupDependency ;)",
    "insertText": "FTetrahedralBindings(FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FTetrahedralBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTetrahedralBindings(const FManagedArrayCollection& InSelf)"
  },
  {
    "label": "FTetrahedralBindings()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTetrahedralBindings()"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GenerateMeshGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GenerateMeshGroupName(const int32 TetMeshIdx, const FName& MeshId, const int32 LOD)"
  },
  {
    "label": "GetTetMeshIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTetMeshIndex(const FName& MeshId, const int32 LOD)"
  },
  {
    "label": "ContainsBindingsGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsBindingsGroup(const int32 TetMeshIdx, const FName& MeshId, const int32 LOD)"
  },
  {
    "label": "ContainsBindingsGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsBindingsGroup(const FName& GroupName)"
  },
  {
    "label": "AddBindingsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindingsGroup(const int32 TetMeshIdx, const FName& MeshId, const int32 LOD)"
  },
  {
    "label": "AddBindingsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBindingsGroup(const FName& GroupName)"
  },
  {
    "label": "ReadBindingsGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBindingsGroup(const int32 TetMeshIdx, const FName& MeshId, const int32 LOD)"
  },
  {
    "label": "ReadBindingsGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBindingsGroup(const FName& GroupName)"
  },
  {
    "label": "RemoveBindingsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBindingsGroup(const int32 TetMeshIdx, const FName& MeshId, const int32 LOD)"
  },
  {
    "label": "RemoveBindingsGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBindingsGroup(const FName& GroupName)"
  },
  {
    "label": "SetBindingsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingsData(const TArray<FIntVector4>& ParentsIn, const TArray<FVector4f>& WeightsIn, const TArray<FVector3f>& OffsetsIn, const TArray<float>& MaskIn)"
  },
  {
    "label": "SetBindingsData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBindingsData(const TArray<FIntVector4>& ParentsIn, const TArray<FVector4f>& WeightsIn, const TArray<FVector3f>& OffsetsIn)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<float> MaskTmp ; MaskTmp .)",
    "insertText": "SetNum(ParentsIn.Num())"
  },
  {
    "label": "SetBindingsData()",
    "kind": "Method",
    "detail": "Function (MaskTmp [ i ] = 1 . 0 ; })",
    "insertText": "SetBindingsData(ParentsIn, WeightsIn, OffsetsIn, MaskTmp)"
  },
  {
    "label": "GetParentsRO()",
    "kind": "Method",
    "detail": "Function (} const TManagedArrayAccessor<FIntVector4>*)",
    "insertText": "GetParentsRO()"
  },
  {
    "label": "GetParents()",
    "kind": "Method",
    "detail": "Function (} TManagedArrayAccessor<FIntVector4>*)",
    "insertText": "GetParents()"
  },
  {
    "label": "GetWeightsRO()",
    "kind": "Method",
    "detail": "Function (} const TManagedArrayAccessor<FVector4f>*)",
    "insertText": "GetWeightsRO()"
  },
  {
    "label": "GetWeights()",
    "kind": "Method",
    "detail": "Function (} TManagedArrayAccessor<FVector4f>*)",
    "insertText": "GetWeights()"
  },
  {
    "label": "GetOffsetsRO()",
    "kind": "Method",
    "detail": "Function (} const TManagedArrayAccessor<FVector3f>*)",
    "insertText": "GetOffsetsRO()"
  },
  {
    "label": "GetOffsets()",
    "kind": "Method",
    "detail": "Function (} TManagedArrayAccessor<FVector3f>*)",
    "insertText": "GetOffsets()"
  },
  {
    "label": "GetMaskRO()",
    "kind": "Method",
    "detail": "Function (} const TManagedArrayAccessor<float>*)",
    "insertText": "GetMaskRO()"
  },
  {
    "label": "GetMask()",
    "kind": "Method",
    "detail": "Function (} TManagedArrayAccessor<float>*)",
    "insertText": "GetMask()"
  },
  {
    "label": "Evaluator()",
    "kind": "Method",
    "detail": "Function (} class Evaluator { public :)",
    "insertText": "Evaluator(const TManagedArrayAccessor<FIntVector4>* Parents, const TManagedArrayAccessor<FVector4f>* Weights, const TManagedArrayAccessor<FVector3f>* Offsets, const TManagedArray<FVector3f>* RestVertices) : MinIndexValue(TNumericLimits<int32>::Max()) , MaxIndexValue(INDEX_NONE) , ParentsArray(Parents) , WeightsArray(Weights) , OffsetsArray(Offsets) , RestVerticesArray(RestVertices)"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumVertices()"
  },
  {
    "label": "MinIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MinIndex()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 iEnd = Tet [ 3 ] = = INDEX_NONE ? 3 : 4 ;)",
    "insertText": "for(int32 i = 0; i < iEnd; i++) MinIndexValue = FMath::Min(MinIndexValue, Tet[i])"
  },
  {
    "label": "MaxIndex()",
    "kind": "Method",
    "detail": "Function (} } return MinIndexValue ; } int32)",
    "insertText": "MaxIndex()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 iEnd = Tet [ 3 ] = = INDEX_NONE ? 3 : 4 ;)",
    "insertText": "for(int32 i = 0; i < iEnd; i++) MaxIndexValue = FMath::Max(MaxIndexValue, Tet[i])"
  },
  {
    "label": "GetEmbeddedPosition()",
    "kind": "Method",
    "detail": "Function (} } return MaxIndexValue ; } FVector3f)",
    "insertText": "GetEmbeddedPosition(const int32 Index, const TArray<Chaos::TVector<Chaos::FRealSingle, 3>>& CurrVertices)"
  },
  {
    "label": "MaskedEvaluator()",
    "kind": "Method",
    "detail": "Function (} private : int32 MinIndexValue ; int32 MaxIndexValue ; const TManagedArrayAccessor<FIntVector4>* ParentsArray ; const TManagedArrayAccessor<FVector4f>* WeightsArray ; const TManagedArrayAccessor<FVector3f>* OffsetsArray ; const TManagedArray<FVector3f>* RestVerticesArray ; } ; class MaskedEvaluator { public :)",
    "insertText": "MaskedEvaluator(const TManagedArrayAccessor<FIntVector4>* Parents, const TManagedArrayAccessor<FVector4f>* Weights, const TManagedArrayAccessor<FVector3f>* Offsets, const TManagedArrayAccessor<float>* Masks, const TManagedArray<FVector3f>* RestVertices) : UnmaskedEval(Parents, Weights, Offsets, RestVertices) , ParentsArray(Parents) , MasksArray(Masks)"
  },
  {
    "label": "GetEmbeddedPosition()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetEmbeddedPosition(const int32 Index, const FVector3f& RigPosition, const TArray<Chaos::TVector<Chaos::FRealSingle, 3>>& CurrVertices)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const float Mask = MasksArray ->)",
    "insertText": "Get()"
  },
  {
    "label": "GetEmbeddedPosition()",
    "kind": "Method",
    "detail": "Function (} else { FVector3f EmbeddedPos = UnmaskedEval .)",
    "insertText": "GetEmbeddedPosition(Index, CurrVertices)"
  },
  {
    "label": "InitEvaluator()",
    "kind": "Method",
    "detail": "Function (} } private : Evaluator UnmaskedEval ; const TManagedArrayAccessor<FIntVector4>* ParentsArray ; const TManagedArrayAccessor<float>* MasksArray ; } ; TUniquePtr<Evaluator>)",
    "insertText": "InitEvaluator(const TManagedArray<FVector3f>* RestVertices)"
  },
  {
    "label": "InitMaskedEvaluator()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<MaskedEvaluator>)",
    "insertText": "InitMaskedEvaluator(const TManagedArray<FVector3f>* RestVertices)"
  }
]