[
  {
    "label": "FChaosMarshallingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosMarshallingManager"
  },
  {
    "label": "FChaosRigidInterpolationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosRigidInterpolationData"
  },
  {
    "label": "FChaosGeometryCollectionInterpolationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosGeometryCollectionInterpolationData"
  },
  {
    "label": "FChaosClusterUnionInterpolationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosClusterUnionInterpolationData"
  },
  {
    "label": "FChaosInterpolationResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosInterpolationResults"
  },
  {
    "label": "FChaosResultsChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosResultsChannel"
  },
  {
    "label": "FChaosResultsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosResultsManager"
  },
  {
    "label": "FPullDataQueueInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPullDataQueueInfo"
  },
  {
    "label": "FChaosInterpolationResults()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PullPhysicsDataImp . h \" namespace Chaos { class FChaosMarshallingManager ; FRealSingle SecondChannelDelay ; int32 DefaultNumActiveChannels ; struct FChaosRigidInterpolationData { FDirtyRigidParticleData Prev ; FDirtyRigidParticleData Next ; } ; struct FChaosGeometryCollectionInterpolationData { FDirtyGeometryCollectionData Prev ; FDirtyGeometryCollectionData Next ; } ; struct FChaosClusterUnionInterpolationData { FDirtyClusterUnionData Prev ; FDirtyClusterUnionData Next ; } ; struct FChaosInterpolationResults {)",
    "insertText": "FChaosInterpolationResults() : Prev(nullptr) , Next(nullptr)"
  },
  {
    "label": "FChaosInterpolationResults()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChaosInterpolationResults(const FChaosInterpolationResults& Other)"
  },
  {
    "label": "FChaosInterpolationResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosInterpolationResults(FChaosInterpolationResults&& Other) : RigidInterpolations(MoveTemp(Other.RigidInterpolations)) , GeometryCollectionInterpolations(MoveTemp(Other.GeometryCollectionInterpolations)) , ClusterUnionInterpolations(MoveTemp(Other.ClusterUnionInterpolations)) , Prev(Other.Prev) , Next(Other.Next) , Alpha(Other.Alpha)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Other . Prev = nullptr ; Other . Next = nullptr ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "FChaosResultsManager()",
    "kind": "Method",
    "detail": "Function (TArray<FChaosRigidInterpolationData> RigidInterpolations ; TArray<FChaosGeometryCollectionInterpolationData> GeometryCollectionInterpolations ; TArray<FChaosClusterUnionInterpolationData> ClusterUnionInterpolations ; FPullPhysicsData* Prev ; FPullPhysicsData* Next ; FRealSingle Alpha ; } ; struct FChaosResultsChannel ; class FChaosResultsManager { public :)",
    "insertText": "FChaosResultsManager(FChaosMarshallingManager& InMarshallingManager)"
  },
  {
    "label": "FChaosResultsManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosResultsManager(const FChaosResultsManager& Other)"
  },
  {
    "label": "FChaosResultsManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosResultsManager(FChaosResultsManager&& Other)"
  },
  {
    "label": "FChaosResultsManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChaosResultsManager()"
  },
  {
    "label": "PullSyncPhysicsResults_External()",
    "kind": "Method",
    "detail": "Function (const FChaosInterpolationResults&)",
    "insertText": "PullSyncPhysicsResults_External()"
  },
  {
    "label": "PullAsyncPhysicsResults_External()",
    "kind": "Method",
    "detail": "Function (TArray<const FChaosInterpolationResults*>)",
    "insertText": "PullAsyncPhysicsResults_External(const FReal ResultsTime)"
  },
  {
    "label": "RemoveProxy_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProxy_External(FSingleParticlePhysicsProxy* Proxy)"
  },
  {
    "label": "PopPullData_External()",
    "kind": "Method",
    "detail": "Function (private : FChaosResultsChannel ; FPullPhysicsData*)",
    "insertText": "PopPullData_External(int32 ChannelIdx)"
  },
  {
    "label": "FreePullData_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreePullData_External(FPullPhysicsData* PullData, int32 ChannelIdx)"
  },
  {
    "label": "FPullDataQueueInfo()",
    "kind": "Method",
    "detail": "Function (TArray<FChaosResultsChannel*> Channels ; FChaosMarshallingManager& MarshallingManager ; int32 MaxNumChannels = 2 ; struct FPullDataQueueInfo {)",
    "insertText": "FPullDataQueueInfo(FPullPhysicsData* Data, int32 NumActiveChannels) : PullData(Data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bHasPopped [ Idx ] = false ; bPendingFree [ Idx ] = false ; })",
    "insertText": "for(int32 Idx = NumActiveChannels; Idx < MaxNumChannels; ++Idx)"
  },
  {
    "label": "FPullDataQueueInfo()",
    "kind": "Method",
    "detail": "Function (bHasPopped [ Idx ] = true ; bPendingFree [ Idx ] = true ; } })",
    "insertText": "FPullDataQueueInfo(FPullDataQueueInfo& Other)"
  },
  {
    "label": "FPullDataQueueInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPullDataQueueInfo(FPullDataQueueInfo&& Other)"
  }
]