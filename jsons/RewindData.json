[
  {
    "label": "FBaseRewindHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseRewindHistory"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "TDataRewindHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDataRewindHistory"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FFrameAndPhase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameAndPhase"
  },
  {
    "label": "EParticleHistoryPhase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticleHistoryPhase"
  },
  {
    "label": "NoEntryInSync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NoEntryInSync"
  },
  {
    "label": "FPropertyInterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyInterval"
  },
  {
    "label": "TParticlePropertyBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticlePropertyBuffer"
  },
  {
    "label": "EDesyncResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDesyncResult"
  },
  {
    "label": "FDirtyPropData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyPropData"
  },
  {
    "label": "FConstDirtyPropData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstDirtyPropData"
  },
  {
    "label": "TPerShapeDataStateProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPerShapeDataStateProperty"
  },
  {
    "label": "FPerShapeDataStateBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerShapeDataStateBase"
  },
  {
    "label": "FPerShapeDataState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeDataState"
  },
  {
    "label": "FShapesArrayStateBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapesArrayStateBase"
  },
  {
    "label": "TShapesArrayState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShapesArrayState"
  },
  {
    "label": "FGeometryParticleStateBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryParticleStateBase"
  },
  {
    "label": "FGeometryParticleState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryParticleState"
  },
  {
    "label": "FJointStateBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointStateBase"
  },
  {
    "label": "FJointState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJointState"
  },
  {
    "label": "TDirtyObjects",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDirtyObjects"
  },
  {
    "label": "FPBDRigidsSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSolver"
  },
  {
    "label": "FRewindData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRewindData"
  },
  {
    "label": "FDirtyRigidParticleReplicationErrorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyRigidParticleReplicationErrorData"
  },
  {
    "label": "FFrameManagerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameManagerInfo"
  },
  {
    "label": "TDirtyObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDirtyObjectInfo"
  },
  {
    "label": "FDirtyParticleErrorInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyParticleErrorInfo"
  },
  {
    "label": "FResimDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResimDebugInfo"
  },
  {
    "label": "IRewindCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRewindCallback"
  },
  {
    "label": "FBaseRewindHistory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Serialization / BufferArchive . h \" # include \" Containers / CircularBuffer . h \" # include \" Chaos / ResimCacheBase . h \" # include \" Chaos / PBDJointConstraints . h \" # ifndef VALIDATE_REWIND_DATA # define VALIDATE_REWIND_DATA 0 # endif # ifndef DEBUG_REWIND_DATA # define DEBUG_REWIND_DATA 0 # endif # ifndef DEBUG_NETWORK_PHYSICS # define DEBUG_NETWORK_PHYSICS 0 # endif namespace Chaos { struct FBaseRewindHistory { ~)",
    "insertText": "FBaseRewindHistory()"
  },
  {
    "label": "CreateNew()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FBaseRewindHistory>)",
    "insertText": "CreateNew()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FBaseRewindHistory>)",
    "insertText": "Clone()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "SetPackageMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPackageMap(class UPackageMap* InPackageMap)"
  },
  {
    "label": "HasValidData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidData(const int32 ValidFrame)"
  },
  {
    "label": "CountValidData()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CountValidData(const uint32 StartFrame, const uint32 EndFrame, const bool bIncludeUnimportant = true, const bool bIncludeImportant = false)"
  },
  {
    "label": "ExtractData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExtractData(const int32 ExtractFrame, const bool bResetSolver, void* HistoryData, const bool bExactFrame = false)"
  },
  {
    "label": "ApplyDataRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyDataRange(const int32 FromFrame, const int32 ToFrame, void* ActorComponent, const bool bOnlyImportant = false)"
  },
  {
    "label": "MergeData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeData(const int32 FromFrame, void* ToData)"
  },
  {
    "label": "RecordData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RecordData(const int32 RecordFrame, const void* HistoryData)"
  },
  {
    "label": "CopyAllData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CopyAllData(Chaos::FBaseRewindHistory& OutHistory, bool bIncludeUnimportant = true, bool bIncludeImportant = false)"
  },
  {
    "label": "ReceiveNewData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReceiveNewData(FBaseRewindHistory& NewData, const int32 FrameOffset, const bool CompareDataForRewind = false, const bool bImportant = false)"
  },
  {
    "label": "ReceiveNewData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveNewData(NewDatas, FrameOffset)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NetSerialize(FArchive& Ar, UPackageMap* PackageMap)"
  },
  {
    "label": "ValidateDataInHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateDataInHistory(const void* ActorComponent)"
  },
  {
    "label": "DebugData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugData(const FString& DebugText)"
  },
  {
    "label": "DebugData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugData(const Chaos::FBaseRewindHistory& NewData, TArray<int32>& LocalFrames, TArray<int32>& ServerFrames, TArray<int32>& InputFrames)"
  },
  {
    "label": "DebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugData(NewDatas, LocalFrames, ServerFrames, InputFrames)"
  },
  {
    "label": "RewindStates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RewindStates(const int32 RewindFrame, const bool bResetSolver)"
  },
  {
    "label": "ResetFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetFast()"
  },
  {
    "label": "TDataRewindHistory()",
    "kind": "Method",
    "detail": "Function (} } ; template<DataType> struct TDataRewindHistory : public FBaseRewindHistory {)",
    "insertText": "TDataRewindHistory(const int32 FrameCount, const bool bIsHistoryLocal) : bIsLocalHistory(bIsHistoryLocal), DataHistory(), LatestFrame(INDEX_NONE), CurrentFrame(0), CurrentIndex(0), NumFrames(FrameCount)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (DataHistory .)",
    "insertText": "SetNum(NumFrames)"
  },
  {
    "label": "TDataRewindHistory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDataRewindHistory(const int32 FrameCount) : DataHistory(), LatestFrame(INDEX_NONE), CurrentFrame(0), CurrentIndex(0), NumFrames(FrameCount)"
  },
  {
    "label": "TDataRewindHistory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TDataRewindHistory()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LatestFrame =)",
    "insertText": "Max(LatestFrame, DataHistory[FrameIndex].LocalFrame)"
  },
  {
    "label": "ClosestData()",
    "kind": "Method",
    "detail": "Function (} } protected : int32)",
    "insertText": "ClosestData(const int32 DataFrame, const bool bMinData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ClosestIndex = INDEX_NONE ;)",
    "insertText": "for(int32 FrameIndex = 0; FrameIndex < NumFrames; ++FrameIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const int32 ValidFrame = bMinData ?)",
    "insertText": "Max(0, DataFrame - FrameIndex)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32 ValidIndex =)",
    "insertText": "GetFrameIndex(ValidFrame)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (CurrentFrame = ExtractFrame ; CurrentIndex = ExtractIndex ;* static_cast<)",
    "insertText": "DataType(HistoryData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if DEBUG_NETWORK_PHYSICS)",
    "insertText": "if(bResetSolver)"
  },
  {
    "label": "ClosestDatas()",
    "kind": "Method",
    "detail": "Function (} # endif PRAGMA_DISABLE_DEPRECATION_WARNINGS const int32 MinFrameIndex =)",
    "insertText": "ClosestDatas(ExtractFrame, true)"
  },
  {
    "label": "ClosestDatas()",
    "kind": "Method",
    "detail": "Function (const int32 MaxFrameIndex =)",
    "insertText": "ClosestDatas(ExtractFrame, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(MinFrameIndex != INDEX_NONE && MaxFrameIndex != INDEX_NONE)"
  },
  {
    "label": "InterpolateDatas()",
    "kind": "Method",
    "detail": "Function (ExtractedData = DataHistory [ MinFrameIndex ] ; PRAGMA_DISABLE_DEPRECATION_WARNINGS ExtractedData .)",
    "insertText": "InterpolateDatas(DataHistory[MinFrameIndex], DataHistory[MaxFrameIndex])"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS const int32 DeltaFrame =)",
    "insertText": "Abs(ExtractFrame - DataHistory[MinFrameIndex].LocalFrame)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (ExtractedData . LocalFrame = ExtractFrame ; ExtractedData . ServerFrame = DataHistory [ MinFrameIndex ] . ServerFrame + DeltaFrame ; ExtractedData . InputFrame = INDEX_NONE ; # if DEBUG_NETWORK_PHYSICS)",
    "insertText": "UE_LOG(LogChaos, Log, TEXT(\" Interpolating data between frame %d and %d - > [%d %d]\"), DataHistory[MinFrameIndex].LocalFrame, DataHistory[MaxFrameIndex].LocalFrame, static_cast<DataType*>(HistoryData)->InputFrame, static_cast<DataType*>(HistoryData)->ServerFrame)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif return true ; } else)",
    "insertText": "if(MinFrameIndex != INDEX_NONE)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (ExtractedData . ServerFrame = DataHistory [ MinFrameIndex ] . ServerFrame + DeltaFrame ; ExtractedData . InputFrame = INDEX_NONE ; # if DEBUG_NETWORK_PHYSICS)",
    "insertText": "UE_LOG(LogChaos, Log, TEXT(\" Setting data to frame %d\"), DataHistory[MinFrameIndex].LocalFrame)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# endif return true ; } else { # if DEBUG_NETWORK_PHYSICS)",
    "insertText": "UE_LOG(LogChaos, Log, TEXT(\" Failed to find data bounds : Min = %d | Max = %d\"), MinFrameIndex, MaxFrameIndex)"
  },
  {
    "label": "MergeData()",
    "kind": "Method",
    "detail": "Function (# endif return false ; } } return false ; } void)",
    "insertText": "MergeData(int32 FromFrame, void* ToData)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (LocalFrame)",
    "insertText": "DataType(ToData)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32 FromIndex =)",
    "insertText": "GetFrameIndex(FromFrame)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DataType(ToData)->MergeData(DataHistory[FromIndex])"
  },
  {
    "label": "LoadData()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "LoadData(const int32 LoadFrame)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32 LoadIndex =)",
    "insertText": "GetFrameIndex(LoadFrame)"
  },
  {
    "label": "EvalData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EvalData(const int32 EvalFrame)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32 EvalIndex =)",
    "insertText": "GetFrameIndex(EvalFrame)"
  },
  {
    "label": "LoadDatas()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "LoadDatas(RecordFrame)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LatestFrame =)",
    "insertText": "Max(LatestFrame, DataHistory[CurrentIndex].LocalFrame)"
  },
  {
    "label": "GetCurrentData()",
    "kind": "Method",
    "detail": "Function (} const DataType&)",
    "insertText": "GetCurrentData()"
  },
  {
    "label": "NumValidData()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "NumValidData(const uint32 StartFrame, const uint32 EndFrame)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 NumData = 0 ;)",
    "insertText": "for(uint32 ValidFrame = StartFrame; ValidFrame < EndFrame; ++ValidFrame)"
  },
  {
    "label": "GetDataHistory()",
    "kind": "Method",
    "detail": "Function (} TArray<DataType>&)",
    "insertText": "GetDataHistory()"
  },
  {
    "label": "GetLatestFrame()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "GetLatestFrame()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (EarliestFrame =)",
    "insertText": "Min(EarliestFrame, DataHistory[FrameIndex].LocalFrame)"
  },
  {
    "label": "GetHistorySize()",
    "kind": "Method",
    "detail": "Function (} } return EarliestFrame ; } const int32)",
    "insertText": "GetHistorySize()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (NumFrames = FrameCount ; DataHistory .)",
    "insertText": "SetNum(NumFrames, AllowShrinking)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (CurrentIndex =)",
    "insertText": "GetFrameIndex(CurrentFrame)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (} } const uint32)",
    "insertText": "GetFrameIndex(const int32 Frame)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FFrameAndPhase { enum EParticleHistoryPhase : uint8 { PrePushData = 0,PostPushData,PostCallbacks,NumPhases } ; int32 Frame : 3 0 ; uint32 Phase : 2 ; bool)",
    "insertText": "operator(const FFrameAndPhase& Other)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (T HeadVal ; HeadVal .)",
    "insertText": "CopyFrom(Handle)"
  },
  {
    "label": "CopyDataFromObject()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPropertyInterval { FPropertyIdx Ref ; FFrameAndPhase FrameAndPhase ; } ; template<TData,TObj> void)",
    "insertText": "CopyDataFromObject(TData& Data, const TObj& Obj)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "CopyFrom(Obj)"
  },
  {
    "label": "CopyDataFromObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyDataFromObject(FPBDJointSettings& Data, const FPBDJointConstraintHandle& Joint)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (Data = Joint .)",
    "insertText": "GetSettings()"
  },
  {
    "label": "TParticlePropertyBuffer()",
    "kind": "Method",
    "detail": "Function (} template<T,EChaosProperty PropName,bool bNoEntryIsHead = true> class TParticlePropertyBuffer { public :)",
    "insertText": "TParticlePropertyBuffer(int32 InCapacity) : Next(0) , NumValid(0) , Capacity(InCapacity)"
  },
  {
    "label": "TParticlePropertyBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TParticlePropertyBuffer(TParticlePropertyBuffer<T, PropName>&& Other) : Next(Other.Next) , NumValid(Other.NumValid) , Capacity(Other.Capacity) , Buffer(MoveTemp(Other.Buffer))"
  },
  {
    "label": "TParticlePropertyBuffer()",
    "kind": "Method",
    "detail": "Function (Other . NumValid = 0 ; Other . Next = 0 ; })",
    "insertText": "TParticlePropertyBuffer(const TParticlePropertyBuffer<T, PropName>& Other)"
  },
  {
    "label": "TParticlePropertyBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TParticlePropertyBuffer()"
  },
  {
    "label": "WriteAccessMonotonic()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "WriteAccessMonotonic(const FFrameAndPhase FrameAndPhase, FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "WriteAccessNonDecreasing()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "WriteAccessNonDecreasing(const FFrameAndPhase FrameAndPhase, FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "Read(const FFrameAndPhase FrameAndPhase, const FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "FindIdx()",
    "kind": "Method",
    "detail": "Function (const int32 Idx =)",
    "insertText": "FindIdx(FrameAndPhase)"
  },
  {
    "label": "GetHeadFrameAndPhase()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "GetHeadFrameAndPhase(FFrameAndPhase& OutFrameAndPhase)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Prev = Next = = 0 ? Buffer .)",
    "insertText": "Num()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (OutFrameAndPhase = Buffer [ Prev ] . FrameAndPhase ; return true ; } return false ; } void)",
    "insertText": "Release(FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (TPropertyPool<T>& Pool =)",
    "insertText": "GetPool(Manager)"
  },
  {
    "label": "RemoveElement()",
    "kind": "Method",
    "detail": "Function (Pool .)",
    "insertText": "RemoveElement(Interval.Ref)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} Buffer .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NumValid = 0 ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (NumValid = 0 ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ExtractBufferState()",
    "kind": "Method",
    "detail": "Function (break ; } Next = PotentialNext ; - - NumValid ; } } void)",
    "insertText": "ExtractBufferState(int32& ValidCount, int32& NextIterator)"
  },
  {
    "label": "RestoreBufferState()",
    "kind": "Method",
    "detail": "Function (ValidCount = NumValid ; NextIterator = Next ; } void)",
    "insertText": "RestoreBufferState(const int32& ValidCount, const int32& NextIterator)"
  },
  {
    "label": "IsClean()",
    "kind": "Method",
    "detail": "Function (NumValid = ValidCount ; Next = NextIterator ; } bool)",
    "insertText": "IsClean(const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "IsInSync()",
    "kind": "Method",
    "detail": "Function (} template<THandle> bool)",
    "insertText": "IsInSync(const THandle& Handle, const FFrameAndPhase FrameAndPhase, const FDirtyPropertiesPool& Pool)"
  },
  {
    "label": "CopyDataFromObject()",
    "kind": "Method",
    "detail": "Function (T HeadVal ;)",
    "insertText": "CopyDataFromObject(HeadVal, Handle)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "Insert(const FFrameAndPhase FrameAndPhase, FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (Result =&)",
    "insertText": "GetPool(Manager).GetElement(Buffer[FrameIndex].Ref)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { FPropertyIdx ElementRef ;)",
    "insertText": "if(Next >= Buffer.Num())"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPool(Manager).AddElement(ElementRef)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Add({ ElementRef, FrameAndPhase })"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (} else { ElementRef = Buffer [ Next ] . Ref ; } Result =&)",
    "insertText": "GetPool(Manager).GetElement(ElementRef)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 PrevFrame = Next ; int32 NextFrame = PrevFrame ;)",
    "insertText": "for(int32 Count = 0; Count < NumValid; ++Count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextFrame = PrevFrame ; - - PrevFrame ;)",
    "insertText": "if(PrevFrame < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const FPropertyInterval& PrevInterval = Buffer [ PrevFrame ] ;)",
    "insertText": "if(PrevInterval.FrameAndPhase < FrameAndPhase)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Buffer [ NextFrame ] . FrameAndPhase = FrameAndPhase ; Buffer [ NextFrame ] . Ref = ElementRef ; break ; } else { Buffer [ NextFrame ] = Buffer [ PrevFrame ] ;)",
    "insertText": "if(Count == NumValid - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Buffer [ PrevFrame ] . FrameAndPhase = FrameAndPhase ; Buffer [ PrevFrame ] . Ref = ElementRef ; } } } + + Next ;)",
    "insertText": "if(Next == Capacity)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Next = 0 ; } NumValid =)",
    "insertText": "Min(++NumValid, Capacity)"
  },
  {
    "label": "FindIdx()",
    "kind": "Method",
    "detail": "Function (} return* Result ; } private : const int32)",
    "insertText": "FindIdx(const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - Cur ;)",
    "insertText": "if(Cur < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const FPropertyInterval& Interval = Buffer [ Cur ] ;)",
    "insertText": "if(Interval.FrameAndPhase < FrameAndPhase)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } else { Result = Cur ; } })",
    "insertText": "if(bNoEntryIsHead || Result == INDEX_NONE)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (} const TPropertyPool<T>&)",
    "insertText": "GetPool(const FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "WriteAccessImp()",
    "kind": "Method",
    "detail": "Function (} template<bool bEnsureMonotonic> T*)",
    "insertText": "WriteAccessImp(const FFrameAndPhase FrameAndPhase, FDirtyPropertiesPool& Manager)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FFrameAndPhase& LatestFrameAndPhase = Buffer [ Prev ] . FrameAndPhase ;)",
    "insertText": "if(bEnsureMonotonic)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensure(LatestFrameAndPhase <= FrameAndPhase)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} T* Result ;)",
    "insertText": "if(Next < Buffer.Num())"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (FPropertyInterval& Interval = Buffer [ Next ] ; Interval . FrameAndPhase = FrameAndPhase ; Result =&)",
    "insertText": "GetPool(Manager).GetElement(Interval.Ref)"
  },
  {
    "label": "GetPool()",
    "kind": "Method",
    "detail": "Function (} else { FPropertyIdx NewIdx ; Result =&)",
    "insertText": "GetPool(Manager).AddElement(NewIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Add({NewIdx, FrameAndPhase })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - Val ;)",
    "insertText": "if(Val < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Count == 0)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (PrevVal = Buffer [ Val ] . FrameAndPhase ; } else {)",
    "insertText": "ensureMsgf(Buffer[Val].FrameAndPhase < PrevVal, TEXT(\"ValidateOrder Idx: %d TailFrame: %d/%d, HeadFrame: %d/%d\"), Val, Buffer[Val].FrameAndPhase.Frame, Buffer[Val].FrameAndPhase.Phase, PrevVal.Frame, PrevVal.Phase)"
  },
  {
    "label": "FDirtyPropData()",
    "kind": "Method",
    "detail": "Function (PrevVal = Buffer [ Val ] . FrameAndPhase ; } } # endif } private : int32 Next ; int32 NumValid ; int32 Capacity ; TArray<FPropertyInterval> Buffer ; } ; enum EDesyncResult { InSync,Desync,NeedInfo } ; struct FDirtyPropData {)",
    "insertText": "FDirtyPropData(FDirtyPropertiesManager* InManager, int32 InDataIdx) : Ptr(InManager), DataIdx(InDataIdx)"
  },
  {
    "label": "FConstDirtyPropData()",
    "kind": "Method",
    "detail": "Function (} FDirtyPropertiesManager* Ptr ; int32 DataIdx ; } ; struct FConstDirtyPropData {)",
    "insertText": "FConstDirtyPropData(const FDirtyPropertiesManager* InManager, int32 InDataIdx) : Ptr(InManager), DataIdx(InDataIdx)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} const FDirtyPropertiesManager* Ptr ; int32 DataIdx ; } ; template<T,EShapeProperty PropName> class TPerShapeDataStateProperty { public : const T&)",
    "insertText": "Read()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bSet = true ; Val = InVal ; } bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "FPerShapeDataState()",
    "kind": "Method",
    "detail": "Function (} } ; class FPerShapeDataState { public :)",
    "insertText": "FPerShapeDataState(const FPerShapeDataStateBase* InState, const FGeometryParticleHandle& InParticle, const int32 InShapeIdx) : State(InState) , Particle(InParticle) , ShapeIdx(InShapeIdx)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (} const FCollisionFilterData&)",
    "insertText": "GetQueryData()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} private : const FPerShapeDataStateBase* State ; const FGeometryParticleHandle& Particle ; const int32 ShapeIdx ; } ; struct FShapesArrayStateBase { TArray<FPerShapeDataStateBase> PerShapeData ; FPerShapeDataStateBase&)",
    "insertText": "FindOrAdd(const int32 ShapeIdx)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (PerShapeData .)",
    "insertText": "AddDefaulted(NumNeededToAdd)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} return PerShapeData [ ShapeIdx ] ; } } ; template<T> FString)",
    "insertText": "ToStringHelper(const T& Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> FString)",
    "insertText": "ToStringHelper(const TVector<T, 2>& Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(void* Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const FReal Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const FRealSingle Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const EObjectStateType Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const EPlasticityType Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const EJointForceMode Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const EJointMotionType Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const bool Val)"
  },
  {
    "label": "ToStringHelper()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToStringHelper(const int32 Val)"
  },
  {
    "label": "TShapesArrayState()",
    "kind": "Method",
    "detail": "Function (} template<TParticle> class TShapesArrayState { public :)",
    "insertText": "TShapesArrayState(const TParticle& InParticle, const FShapesArrayStateBase* InState) : Particle(InParticle) , State(InState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPerShapeDataState)",
    "insertText": "operator(const int32 ShapeIdx)"
  },
  {
    "label": "REWIND_CHAOS_PARTICLE_PROPERTY()",
    "kind": "Method",
    "detail": "Function (} private : const TParticle& Particle ; const FShapesArrayStateBase* State ; } ; # define)",
    "insertText": "REWIND_CHAOS_PARTICLE_PROPERTY(PROP, NAME)\\ const auto Data = State ? State->PROP.Read(FrameAndPhase, Pool)"
  },
  {
    "label": "NAME()",
    "kind": "Method",
    "detail": "Function (\\ return Data ? Data ->)",
    "insertText": "NAME() : Head.NAME()"
  },
  {
    "label": "REWIND_CHAOS_ZERO_PARTICLE_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "REWIND_CHAOS_ZERO_PARTICLE_PROPERTY(PROP, NAME)\\ const auto Data = State ? State->PROP.Read(FrameAndPhase, Pool)"
  },
  {
    "label": "NAME()",
    "kind": "Method",
    "detail": "Function (\\ return Data ? Data ->)",
    "insertText": "NAME()"
  },
  {
    "label": "REWIND_PARTICLE_STATIC_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "REWIND_PARTICLE_STATIC_PROPERTY(PROP, NAME)\\ decltype(auto) NAME()"
  },
  {
    "label": "REWIND_CHAOS_PARTICLE_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ auto& Head = Particle ; \\)",
    "insertText": "REWIND_CHAOS_PARTICLE_PROPERTY(PROP, NAME)"
  },
  {
    "label": "REWIND_PARTICLE_KINEMATIC_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "REWIND_PARTICLE_KINEMATIC_PROPERTY(PROP, NAME)\\ decltype(auto) NAME()"
  },
  {
    "label": "CastToKinematicParticle()",
    "kind": "Method",
    "detail": "Function (\\ auto& Head =* Particle .)",
    "insertText": "CastToKinematicParticle()"
  },
  {
    "label": "REWIND_PARTICLE_RIGID_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "REWIND_PARTICLE_RIGID_PROPERTY(PROP, NAME)\\ decltype(auto) NAME()"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (\\ auto& Head =* Particle .)",
    "insertText": "CastToRigidParticle()"
  },
  {
    "label": "REWIND_PARTICLE_ZERO_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "REWIND_PARTICLE_ZERO_PROPERTY(PROP, NAME)\\ decltype(auto) NAME()"
  },
  {
    "label": "REWIND_CHAOS_ZERO_PARTICLE_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "REWIND_CHAOS_ZERO_PARTICLE_PROPERTY(PROP, NAME)"
  },
  {
    "label": "REWIND_JOINT_PROPERTY()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define)",
    "insertText": "REWIND_JOINT_PROPERTY(PROP, FUNC_NAME, NAME)\\ decltype(auto) Get##FUNC_NAME()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (\\ const auto Data = State ? State -> PROP .)",
    "insertText": "Read(FrameAndPhase, Pool)"
  },
  {
    "label": "PROP()",
    "kind": "Method",
    "detail": "Function (\\ return Data ? Data -> NAME : Head . Get # #)",
    "insertText": "PROP()"
  },
  {
    "label": "ComputeCircularSize()",
    "kind": "Method",
    "detail": "Function (\\ } \\ int32)",
    "insertText": "ComputeCircularSize(int32 NumFrames)"
  },
  {
    "label": "FGeometryParticleStateBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGeometryParticleStateBase(const FGeometryParticleStateBase& Other)"
  },
  {
    "label": "FGeometryParticleStateBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryParticleStateBase(FGeometryParticleStateBase&& Other)"
  },
  {
    "label": "FGeometryParticleStateBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGeometryParticleStateBase()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ParticlePositionRotation .)",
    "insertText": "Release(Manager)"
  },
  {
    "label": "ClearEntryAndFuture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearEntryAndFuture(const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "ClearEntryAndFuture()",
    "kind": "Method",
    "detail": "Function (ParticlePositionRotation .)",
    "insertText": "ClearEntryAndFuture(FrameAndPhase)"
  },
  {
    "label": "ExtractHistoryState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtractHistoryState(int32& PositionValidCount, int32& VelocityValidCount, int32& PositionNextIterator, int32& VelocityNextIterator)"
  },
  {
    "label": "ExtractBufferState()",
    "kind": "Method",
    "detail": "Function (ParticlePositionRotation .)",
    "insertText": "ExtractBufferState(PositionValidCount, PositionNextIterator)"
  },
  {
    "label": "ExtractBufferState()",
    "kind": "Method",
    "detail": "Function (Velocities .)",
    "insertText": "ExtractBufferState(VelocityValidCount, VelocityNextIterator)"
  },
  {
    "label": "RestoreHistoryState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestoreHistoryState(const int32& PositionValidCount, const int32& VelocityValidCount, const int32& PositionNextIterator, const int32& VelocityNextIterator)"
  },
  {
    "label": "RestoreBufferState()",
    "kind": "Method",
    "detail": "Function (ParticlePositionRotation .)",
    "insertText": "RestoreBufferState(PositionValidCount, PositionNextIterator)"
  },
  {
    "label": "RestoreBufferState()",
    "kind": "Method",
    "detail": "Function (Velocities .)",
    "insertText": "RestoreBufferState(VelocityValidCount, VelocityNextIterator)"
  },
  {
    "label": "IsCleanExcludingDynamics()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCleanExcludingDynamics(const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "IsInSync()",
    "kind": "Method",
    "detail": "Function (} template<bool bSkipDynamics = false> bool)",
    "insertText": "IsInSync(const FGeometryParticleHandle& Handle, const FFrameAndPhase FrameAndPhase, const FDirtyPropertiesPool& Pool)"
  },
  {
    "label": "ShapesArray()",
    "kind": "Method",
    "detail": "Function (template<TParticle> TShapesArrayState<TParticle>)",
    "insertText": "ShapesArray(const FGeometryParticleStateBase* State, const TParticle& Particle)"
  },
  {
    "label": "SyncDirtyDynamics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncDirtyDynamics(FDirtyPropData& DestManager,const FDirtyChaosProperties& Dirty,const FConstDirtyPropData& SrcManager)"
  },
  {
    "label": "CachePreCorrectionState()",
    "kind": "Method",
    "detail": "Function (template<TParticle> void)",
    "insertText": "CachePreCorrectionState(const TParticle& Particle)"
  },
  {
    "label": "SetX()",
    "kind": "Method",
    "detail": "Function (PreCorrectionXR .)",
    "insertText": "SetX(Particle.GetX())"
  },
  {
    "label": "SetR()",
    "kind": "Method",
    "detail": "Function (PreCorrectionXR .)",
    "insertText": "SetR(Particle.GetR())"
  },
  {
    "label": "FGeometryParticleState()",
    "kind": "Method",
    "detail": "Function (} TParticlePropertyBuffer<FParticlePositionRotation,EChaosProperty::XR> ParticlePositionRotation ; TParticlePropertyBuffer<FParticleNonFrequentData,EChaosProperty::NonFrequentData> NonFrequentData ; TParticlePropertyBuffer<FParticleVelocities,EChaosProperty::Velocities> Velocities ; TParticlePropertyBuffer<FParticleDynamics,EChaosProperty::Dynamics,false> Dynamics ; TParticlePropertyBuffer<FParticleDynamicMisc,EChaosProperty::DynamicMisc> DynamicsMisc ; TParticlePropertyBuffer<FParticleMassProps,EChaosProperty::MassProps> MassProps ; TParticlePropertyBuffer<FKinematicTarget,EChaosProperty::KinematicTarget> KinematicTarget ; TParticlePropertyBuffer<FParticlePositionRotation,EChaosProperty::XR,false> TargetPositions ; TParticlePropertyBuffer<FParticleVelocities,EChaosProperty::Velocities,false> TargetVelocities ; TParticlePropertyBuffer<FParticleDynamicMisc,EChaosProperty::DynamicMisc,false> TargetStates ; FShapesArrayStateBase ShapesArrayState ; FParticlePositionRotation PreCorrectionXR ; } ; class FGeometryParticleState { public :)",
    "insertText": "FGeometryParticleState(const FGeometryParticleHandle& InParticle, const FDirtyPropertiesPool& InPool) : Particle(InParticle) , Pool(InPool)"
  },
  {
    "label": "FGeometryParticleState()",
    "kind": "Method",
    "detail": "Function (0,0 } { })",
    "insertText": "FGeometryParticleState(const FGeometryParticleStateBase* InState, const FGeometryParticleHandle& InParticle, const FDirtyPropertiesPool& InPool, const FFrameAndPhase InFrameAndPhase) : Particle(InParticle) , Pool(InPool) , State(InState) , FrameAndPhase(InFrameAndPhase)"
  },
  {
    "label": "REWIND_PARTICLE_STATIC_PROPERTY()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "REWIND_PARTICLE_STATIC_PROPERTY(ParticlePositionRotation, GetX) REWIND_PARTICLE_STATIC_PROPERTY(ParticlePositionRotation, GetR) REWIND_PARTICLE_KINEMATIC_PROPERTY(Velocities, GetV) REWIND_PARTICLE_KINEMATIC_PROPERTY(Velocities, GetW) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, LinearEtherDrag) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, AngularEtherDrag) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, MaxLinearSpeedSq) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, MaxAngularSpeedSq) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, InitialOverlapDepenetrationVelocity) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, SleepThresholdMultiplier) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, ObjectState) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, CollisionGroup) REWIND_PARTICLE_RIGID_PROPERTY(DynamicsMisc, ControlFlags) REWIND_PARTICLE_RIGID_PROPERTY(MassProps, CenterOfMass) REWIND_PARTICLE_RIGID_PROPERTY(MassProps, RotationOfMass) REWIND_PARTICLE_RIGID_PROPERTY(MassProps, I) REWIND_PARTICLE_RIGID_PROPERTY(MassProps, M) REWIND_PARTICLE_RIGID_PROPERTY(MassProps, InvM) REWIND_PARTICLE_STATIC_PROPERTY(NonFrequentData, GetGeometry) REWIND_PARTICLE_STATIC_PROPERTY(NonFrequentData, UniqueIdx) REWIND_PARTICLE_STATIC_PROPERTY(NonFrequentData, SpatialIdx) #if CHAOS_DEBUG_NAME REWIND_PARTICLE_STATIC_PROPERTY(NonFrequentData, DebugName) #endif REWIND_PARTICLE_ZERO_PROPERTY(Dynamics, Acceleration) REWIND_PARTICLE_ZERO_PROPERTY(Dynamics, AngularAcceleration) REWIND_PARTICLE_ZERO_PROPERTY(Dynamics, LinearImpulseVelocity) REWIND_PARTICLE_ZERO_PROPERTY(Dynamics, AngularImpulseVelocity) TShapesArrayState<FGeometryParticleHandle> ShapesArray()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} const FGeometryParticleHandle&)",
    "insertText": "GetHandle()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (State = InState ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "REWIND_PARTICLE_TO_STR()",
    "kind": "Method",
    "detail": "Function (# undef REWIND_PARTICLE_TO_STR # define)",
    "insertText": "REWIND_PARTICLE_TO_STR(PropName) Out += FString::Printf(TEXT(#PropName\":%s\\n\"), *ToStringHelper(PropName()))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Out =)",
    "insertText": "Printf(TEXT(\"ParticleID:[Global: %d Local: %d]\\n\"), Particle.ParticleID().GlobalID, Particle.ParticleID().LocalID)"
  },
  {
    "label": "REWIND_PARTICLE_TO_STR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "REWIND_PARTICLE_TO_STR(GetX) REWIND_PARTICLE_TO_STR(GetR) if(Particle.CastToKinematicParticle())"
  },
  {
    "label": "REWIND_PARTICLE_TO_STR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "REWIND_PARTICLE_TO_STR(GetV) REWIND_PARTICLE_TO_STR(GetW) } if(Particle.CastToRigidParticle())"
  },
  {
    "label": "REWIND_PARTICLE_TO_STR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "REWIND_PARTICLE_TO_STR(LinearEtherDrag) REWIND_PARTICLE_TO_STR(AngularEtherDrag) REWIND_PARTICLE_TO_STR(MaxLinearSpeedSq) REWIND_PARTICLE_TO_STR(MaxAngularSpeedSq) REWIND_PARTICLE_TO_STR(InitialOverlapDepenetrationVelocity) REWIND_PARTICLE_TO_STR(SleepThresholdMultiplier) REWIND_PARTICLE_TO_STR(ObjectState) REWIND_PARTICLE_TO_STR(CollisionGroup) REWIND_PARTICLE_TO_STR(ControlFlags) REWIND_PARTICLE_TO_STR(CenterOfMass) REWIND_PARTICLE_TO_STR(RotationOfMass) REWIND_PARTICLE_TO_STR(I) REWIND_PARTICLE_TO_STR(M) REWIND_PARTICLE_TO_STR(InvM) REWIND_PARTICLE_TO_STR(Acceleration) REWIND_PARTICLE_TO_STR(AngularAcceleration) REWIND_PARTICLE_TO_STR(LinearImpulseVelocity) REWIND_PARTICLE_TO_STR(AngularImpulseVelocity)"
  },
  {
    "label": "FJointStateBase()",
    "kind": "Method",
    "detail": "Function (} private : const FGeometryParticleHandle& Particle ; const FDirtyPropertiesPool& Pool ; const FGeometryParticleStateBase* State = nullptr ; const FFrameAndPhase FrameAndPhase ; FVec3 ZeroVector ; } ; struct FJointStateBase {)",
    "insertText": "FJointStateBase(int32 NumFrames) : JointSettings(ComputeCircularSize(NumFrames)) , JointProxies(ComputeCircularSize(NumFrames))"
  },
  {
    "label": "FJointStateBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FJointStateBase(const FJointStateBase& Other)"
  },
  {
    "label": "FJointStateBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJointStateBase(FJointStateBase&& Other)"
  },
  {
    "label": "FJointStateBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FJointStateBase()"
  },
  {
    "label": "IsInSync()",
    "kind": "Method",
    "detail": "Function (} template<bool bSkipDynamics> bool)",
    "insertText": "IsInSync(const FPBDJointConstraintHandle& Handle, const FFrameAndPhase FrameAndPhase, const FDirtyPropertiesPool& Pool)"
  },
  {
    "label": "FJointState()",
    "kind": "Method",
    "detail": "Function (TParticlePropertyBuffer<FPBDJointSettings,EChaosProperty::JointSettings> JointSettings ; TParticlePropertyBuffer<FProxyBasePairProperty,EChaosProperty::JointParticleProxies> JointProxies ; } ; class FJointState { public :)",
    "insertText": "FJointState(const FPBDJointConstraintHandle& InJoint, const FDirtyPropertiesPool& InPool) : Head(InJoint) , Pool(InPool)"
  },
  {
    "label": "FJointState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FJointState(const FJointStateBase* InState, const FPBDJointConstraintHandle& InJoint, const FDirtyPropertiesPool& InPool, const FFrameAndPhase InFrameAndPhase) : Head(InJoint) , Pool(InPool) , State(InState) , FrameAndPhase(InFrameAndPhase)"
  },
  {
    "label": "CHAOS_INNER_JOINT_PROPERTY()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CHAOS_INNER_JOINT_PROPERTY(OuterProp, FuncName, Inner, InnerType) REWIND_JOINT_PROPERTY(OuterProp, FuncName, Inner)"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (TVector<FGeometryParticleHandle*,2> Particles = Head .)",
    "insertText": "GetConstrainedParticles()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Out =)",
    "insertText": "Printf(TEXT(\"Joint: Particle0 ID:[Global: %d Local: %d] Particle1 ID:[Global: %d Local: %d]\\n\"), Particles[0]->ParticleID().GlobalID, Particles[0]->ParticleID().LocalID, Particles[1]->ParticleID().GlobalID, Particles[1]->ParticleID().LocalID)"
  },
  {
    "label": "CHAOS_INNER_JOINT_PROPERTY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHAOS_INNER_JOINT_PROPERTY(OuterProp, FuncName, Inner, InnerType) Out += FString::Printf(TEXT(#FuncName\":%s\\n\"), *ToStringHelper(Get##FuncName()))"
  },
  {
    "label": "ConstifyHelper()",
    "kind": "Method",
    "detail": "Function (# include \" Chaos / JointProperties . inl \" # undef CHAOS_INNER_JOINT_PROPERTY return Out ; } private : const FPBDJointConstraintHandle& Head ; const FDirtyPropertiesPool& Pool ; const FJointStateBase* State = nullptr ; const FFrameAndPhase FrameAndPhase = { 0,0 } ; } ; template<T> const T*)",
    "insertText": "ConstifyHelper(T* Ptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TVal&)",
    "insertText": "Add(const TKey Key, TVal&& Val)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyToIdx .)",
    "insertText": "Add(Key, Idx)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (const int32 Idx = KeyToIdx .)",
    "insertText": "FindChecked(Key)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (int32 Count = 1 ; DenseVals .)",
    "insertText": "RemoveAtSwap(*Idx, Count, AllowShrinking)"
  },
  {
    "label": "GetObjectPtr()",
    "kind": "Method",
    "detail": "Function (const TKey SwappedKey = DenseVals [* Idx ] .)",
    "insertText": "GetObjectPtr()"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (KeyToIdx .)",
    "insertText": "FindChecked(SwappedKey)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} KeyToIdx .)",
    "insertText": "Remove(Key)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"Remove\") FORCEINLINE void Remove(const TKey Key, const bool bAllowShrinking)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Key, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shrink()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "end()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "cend()"
  },
  {
    "label": "GetDenseAt()",
    "kind": "Method",
    "detail": "Function (} const TVal&)",
    "insertText": "GetDenseAt(const int32 Idx)"
  },
  {
    "label": "FRewindData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRewindData(FPBDRigidsSolver* InSolver, int32 NumFrames, int32 InCurrentFrame)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FPBDRigidsSolver* InSolver, int32 NumFrames, bool InRewindDataOptimization, int32 InCurrentFrame)"
  },
  {
    "label": "FFrameManagerInfo()",
    "kind": "Method",
    "detail": "Function (Solver = InSolver ; CurFrame = InCurrentFrame ; LatestFrame = InCurrentFrame ; bRewindDataOptimization = InRewindDataOptimization ; LatestTargetFrame = 0 ; Managers = TCircularBuffer<)",
    "insertText": "FFrameManagerInfo(NumFrames + 1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FPBDRigidsSolver* InSolver, int32 NumFrames, int32 InCurrentFrame)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Capacity()"
  },
  {
    "label": "CurrentFrame()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CurrentFrame()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (DirtyParticles .)",
    "insertText": "Remove(Particle, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"RemoveObject\") FORCEINLINE void RemoveObject(const FGeometryParticleHandle* Particle, const bool bAllowShrinking)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(Particle, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveObject(const FPBDJointConstraintHandle* Joint, const EAllowShrinking AllowShrinking = EAllowShrinking::Yes)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (DirtyJoints .)",
    "insertText": "Remove(Joint, AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"RemoveObject\") FORCEINLINE void RemoveObject(const FPBDJointConstraintHandle* Joint, const bool bAllowShrinking)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(Joint, bAllowShrinking ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "GetEarliestFrame_Internal()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEarliestFrame_Internal()"
  },
  {
    "label": "ClearPhaseAndFuture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPhaseAndFuture(FGeometryParticleHandle& Handle, int32 Frame, FFrameAndPhase::EParticleHistoryPhase Phase)"
  },
  {
    "label": "PushStateAtFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateAtFrame(FGeometryParticleHandle& Handle, int32 Frame, FFrameAndPhase::EParticleHistoryPhase Phase, const FVector& Position, const FQuat& Quaternion, const FVector& LinVelocity, const FVector& AngVelocity, const bool bShouldSleep)"
  },
  {
    "label": "SetTargetStateAtFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetStateAtFrame(FGeometryParticleHandle& Handle, const int32 Frame, FFrameAndPhase::EParticleHistoryPhase Phase, const FVector& Position, const FQuat& Quaternion, const FVector& LinVelocity, const FVector& AngVelocity, const bool bShouldSleep)"
  },
  {
    "label": "ExtractHistoryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractHistoryState(FGeometryParticleHandle& Handle, int32& PositionValidCount, int32& VelocityValidCount, int32& PositionNextIterator, int32& VelocityNextIterator)"
  },
  {
    "label": "FindOrAddDirtyObj()",
    "kind": "Method",
    "detail": "Function (FDirtyParticleInfo& Info =)",
    "insertText": "FindOrAddDirtyObj(Handle)"
  },
  {
    "label": "GetHistory()",
    "kind": "Method",
    "detail": "Function (Info .)",
    "insertText": "GetHistory().ExtractHistoryState(PositionValidCount, VelocityValidCount, PositionNextIterator, VelocityNextIterator)"
  },
  {
    "label": "RestoreHistoryState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RestoreHistoryState(FGeometryParticleHandle& Handle, const int32& PositionValidCount, const int32& VelocityValidCount, const int32& PositionNextIterator, const int32& VelocityNextIterator)"
  },
  {
    "label": "GetHistory()",
    "kind": "Method",
    "detail": "Function (Info .)",
    "insertText": "GetHistory().RestoreHistoryState(PositionValidCount, VelocityValidCount, PositionNextIterator, VelocityNextIterator)"
  },
  {
    "label": "GetPastStateAtFrame()",
    "kind": "Method",
    "detail": "Function (} FGeometryParticleState)",
    "insertText": "GetPastStateAtFrame(const FGeometryParticleHandle& Handle, int32 Frame, FFrameAndPhase::EParticleHistoryPhase Phase = FFrameAndPhase::EParticleHistoryPhase::PostPushData)"
  },
  {
    "label": "GetPastJointStateAtFrame()",
    "kind": "Method",
    "detail": "Function (FJointState)",
    "insertText": "GetPastJointStateAtFrame(const FPBDJointConstraintHandle& Handle, int32 Frame, FFrameAndPhase::EParticleHistoryPhase Phase = FFrameAndPhase::EParticleHistoryPhase::PostPushData)"
  },
  {
    "label": "GetCurrentStepResimCache()",
    "kind": "Method",
    "detail": "Function (IResimCacheBase*)",
    "insertText": "GetCurrentStepResimCache()"
  },
  {
    "label": "DumpHistory_Internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpHistory_Internal(const int32 FramePrintOffset, const FString& Filename = FString(TEXT(\"Dump\")))"
  },
  {
    "label": "GetUseCollisionResimCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCollisionResimCache()"
  },
  {
    "label": "AdvanceFrame()",
    "kind": "Method",
    "detail": "Function (template<CreateCache> void)",
    "insertText": "AdvanceFrame(FReal DeltaTime, const CreateCache& CreateCacheFunc)"
  },
  {
    "label": "QUICK_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QUICK_SCOPE_CYCLE_COUNTER(RewindDataAdvance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Managers [ CurFrame ] . DeltaTime = DeltaTime ; Managers [ CurFrame ] . FrameCreatedFor = CurFrame ; TUniquePtr<IResimCacheBase>& ResimCache = Managers [ CurFrame ] . ExternalResimCache ;)",
    "insertText": "if(GetUseCollisionResimCache())"
  },
  {
    "label": "SetResimming()",
    "kind": "Method",
    "detail": "Function (ResimCache ->)",
    "insertText": "SetResimming(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(ResimCache)"
  },
  {
    "label": "ResetCache()",
    "kind": "Method",
    "detail": "Function (ResimCache ->)",
    "insertText": "ResetCache()"
  },
  {
    "label": "CreateCacheFunc()",
    "kind": "Method",
    "detail": "Function (} else { ResimCache =)",
    "insertText": "CreateCacheFunc()"
  },
  {
    "label": "SetResimming()",
    "kind": "Method",
    "detail": "Function (} ResimCache ->)",
    "insertText": "SetResimming(false)"
  },
  {
    "label": "AdvanceFrameImp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AdvanceFrameImp(ResimCache.Get())"
  },
  {
    "label": "FinishFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishFrame()"
  },
  {
    "label": "IsResim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResim()"
  },
  {
    "label": "GetNumDirtyParticles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumDirtyParticles()"
  },
  {
    "label": "PushGTDirtyData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushGTDirtyData(const FDirtyPropertiesManager& SrcManager,const int32 SrcDataIdx,const FDirtyProxy& Dirty, const FShapeDirtyData* ShapeDirtyData)"
  },
  {
    "label": "PushPTDirtyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushPTDirtyData(TPBDRigidParticleHandle<FReal,3>& Rigid,const int32 SrcDataIdx)"
  },
  {
    "label": "MarkDirtyFromPT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirtyFromPT(FGeometryParticleHandle& Handle)"
  },
  {
    "label": "MarkDirtyJointFromPT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirtyJointFromPT(FPBDJointConstraintHandle& Handle)"
  },
  {
    "label": "SpawnProxyIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnProxyIfNeeded(FSingleParticlePhysicsProxy& Proxy)"
  },
  {
    "label": "AddInputHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInputHistory(const TSharedPtr<FBaseRewindHistory>& InputHistory)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (InputHistories .)",
    "insertText": "AddUnique(InputHistory.ToWeakPtr())"
  },
  {
    "label": "AddInputHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInputHistory(InputsHistory)"
  },
  {
    "label": "RemoveInputHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveInputHistory(const TSharedPtr<FBaseRewindHistory>& InputHistory)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InputHistories .)",
    "insertText": "Remove(InputHistory.ToWeakPtr())"
  },
  {
    "label": "RemoveInputHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInputHistory(InputsHistory)"
  },
  {
    "label": "AddStateHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddStateHistory(const TSharedPtr<FBaseRewindHistory>& StateHistory)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (StateHistories .)",
    "insertText": "AddUnique(StateHistory.ToWeakPtr())"
  },
  {
    "label": "AddStateHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStateHistory(StatesHistory)"
  },
  {
    "label": "RemoveStateHistory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveStateHistory(const TSharedPtr<FBaseRewindHistory>& StateHistory)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (StateHistories .)",
    "insertText": "Remove(StateHistory.ToWeakPtr())"
  },
  {
    "label": "RemoveStateHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStateHistory(StatesHistory)"
  },
  {
    "label": "ApplyInputs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyInputs(const int32 ApplyFrame, const bool bResetSolver)"
  },
  {
    "label": "BufferPhysicsResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferPhysicsResults(TMap<const IPhysicsProxyBase*, struct FDirtyRigidParticleReplicationErrorData>& DirtyRigidErrors)"
  },
  {
    "label": "GetSolver()",
    "kind": "Method",
    "detail": "Function (const FPBDRigidsSolver*)",
    "insertText": "GetSolver()"
  },
  {
    "label": "GetResimFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetResimFrame()"
  },
  {
    "label": "BlockResim()",
    "kind": "Method",
    "detail": "Function (ResimFrame = Frame ; } void)",
    "insertText": "BlockResim()"
  },
  {
    "label": "GetBlockedResimFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBlockedResimFrame()"
  },
  {
    "label": "CompareTargetsToLastFrame()",
    "kind": "Method",
    "detail": "Function (bRewindDataOptimization = InRewindDataOptimization ; } const int32)",
    "insertText": "CompareTargetsToLastFrame()"
  },
  {
    "label": "CheckVectorThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVectorThreshold(FVec3 A, FVec3 B, float Threshold)"
  },
  {
    "label": "CheckQuaternionThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckQuaternionThreshold(FQuat A, FQuat B, float ThresholdDegrees)"
  },
  {
    "label": "AdvanceFrameImp()",
    "kind": "Method",
    "detail": "Function (private : class FPBDRigidsSolver ; void)",
    "insertText": "AdvanceFrameImp(IResimCacheBase* ResimCache)"
  },
  {
    "label": "TDirtyObjectInfo()",
    "kind": "Method",
    "detail": "Function (bool bResimAsFollower = true ;)",
    "insertText": "TDirtyObjectInfo(FDirtyPropertiesPool& InPropertiesPool, TObj& InObj, const int32 CurFrame, const int32 NumFrames) : History(NumFrames) , ObjPtr(&InObj) , PropertiesPool(&InPropertiesPool) , LastDirtyFrame(CurFrame)"
  },
  {
    "label": "TDirtyObjectInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDirtyObjectInfo(TDirtyObjectInfo&& Other) : History(MoveTemp(Other.History)) , ObjPtr(Other.ObjPtr) , PropertiesPool(Other.PropertiesPool) , LastDirtyFrame(Other.LastDirtyFrame) , InitializedOnStep(Other.InitializedOnStep) , bResimAsFollower(Other.bResimAsFollower)"
  },
  {
    "label": "TDirtyObjectInfo()",
    "kind": "Method",
    "detail": "Function (Other . PropertiesPool = nullptr ; } ~)",
    "insertText": "TDirtyObjectInfo()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (History .)",
    "insertText": "Release(*PropertiesPool)"
  },
  {
    "label": "TDirtyObjectInfo()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TDirtyObjectInfo(const TDirtyObjectInfo& Other)"
  },
  {
    "label": "ClearPhaseAndFuture()",
    "kind": "Method",
    "detail": "Function (LastDirtyFrame = Frame ; return History ; } void)",
    "insertText": "ClearPhaseAndFuture(const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "GetHistory()",
    "kind": "Method",
    "detail": "Function (} const THistoryType&)",
    "insertText": "GetHistory()"
  },
  {
    "label": "AccumulateError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateError(FVec3 NewErrorX, FQuat NewErrorR)"
  },
  {
    "label": "FindDirtyObj()",
    "kind": "Method",
    "detail": "Function (} FDirtyParticleInfo*)",
    "insertText": "FindDirtyObj(const FGeometryParticleHandle& Handle)"
  },
  {
    "label": "FindOrAddDirtyObjImp()",
    "kind": "Method",
    "detail": "Function (} template<TDirtyObjs,TObj> auto&)",
    "insertText": "FindOrAddDirtyObjImp(TDirtyObjs & DirtyObjs, TObj & Handle, const int32 InitializedOnFrame = INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TDirtyObj& Info = DirtyObjs .)",
    "insertText": "Add(&Handle, TDirtyObj(PropertiesPool, Handle, CurFrame, Managers.Capacity()))"
  },
  {
    "label": "FindOrAddDirtyObj()",
    "kind": "Method",
    "detail": "Function (Info . InitializedOnStep = InitializedOnFrame ; return Info ; } FDirtyParticleInfo&)",
    "insertText": "FindOrAddDirtyObj(FGeometryParticleHandle& Handle, const int32 InitializedOnFrame = INDEX_NONE)"
  },
  {
    "label": "FindOrAddDirtyObj()",
    "kind": "Method",
    "detail": "Function (} FDirtyJointInfo&)",
    "insertText": "FindOrAddDirtyObj(FPBDJointConstraintHandle& Handle, const int32 InitializedOnFrame = INDEX_NONE)"
  },
  {
    "label": "GetPastStateAtFrameImp()",
    "kind": "Method",
    "detail": "Function (} template<TObjState,TDirtyObjs,TObj> auto)",
    "insertText": "GetPastStateAtFrameImp(const TDirtyObjs& DirtyObjs, const TObj& Handle, int32 Frame, FFrameAndPhase::EParticleHistoryPhase Phase)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const auto* Info = DirtyObjs .)",
    "insertText": "Find(&Handle)"
  },
  {
    "label": "RewindToFrame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RewindToFrame(int32 RewindFrame)"
  },
  {
    "label": "ApplyTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTargets(const int32 Frame, const bool bResetSimulation)"
  },
  {
    "label": "StepNonResimParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepNonResimParticles(const int32 Frame)"
  },
  {
    "label": "DesyncObject()",
    "kind": "Method",
    "detail": "Function (template<TDirtyInfo> void)",
    "insertText": "DesyncObject(TDirtyInfo& Info, const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "ClearPhaseAndFuture()",
    "kind": "Method",
    "detail": "Function (Info .)",
    "insertText": "ClearPhaseAndFuture(FrameAndPhase)"
  },
  {
    "label": "GetObjectPtr()",
    "kind": "Method",
    "detail": "Function (Info .)",
    "insertText": "GetObjectPtr()->SetSyncState(ESyncState::HardDesync)"
  },
  {
    "label": "IsResimAndInSync()",
    "kind": "Method",
    "detail": "Function (} TCircularBuffer<FFrameManagerInfo> Managers ; FDirtyPropertiesPool PropertiesPool ; TDirtyObjects<FDirtyParticleInfo> DirtyParticles ; TDirtyObjects<FDirtyJointInfo> DirtyJoints ; TDirtyObjects<FDirtyParticleErrorInfo> DirtyParticleErrors ; TArray<TWeakPtr<FBaseRewindHistory>> InputHistories ; TArray<TWeakPtr<FBaseRewindHistory>> StateHistories ; FPBDRigidsSolver* Solver ; int32 CurFrame ; int32 LatestFrame ; int32 FramesSaved ; int32 DataIdxOffset ; bool bNeedsSave ; bool bRewindDataOptimization ; int32 ResimFrame = INDEX_NONE ; int32 LatestTargetFrame ; int32 BlockResimFrame = INDEX_NONE ; template<TObj> bool)",
    "insertText": "IsResimAndInSync(const TObj& Handle)"
  },
  {
    "label": "DesyncIfNecessary()",
    "kind": "Method",
    "detail": "Function (} template<bool bSkipDynamics,TDirtyInfo> void)",
    "insertText": "DesyncIfNecessary(TDirtyInfo& Info, const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "AccumulateErrorIfNecessary()",
    "kind": "Method",
    "detail": "Function (template<TObj> void)",
    "insertText": "AccumulateErrorIfNecessary(TObj& Handle, const FFrameAndPhase FrameAndPhase)"
  },
  {
    "label": "IRewindCallback()",
    "kind": "Method",
    "detail": "Function (} } ; struct FResimDebugInfo { double ResimTime = 0 . 0 ; } ; class IRewindCallback { public : ~)",
    "insertText": "IRewindCallback()"
  },
  {
    "label": "ProcessInputs_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInputs_Internal(int32 PhysicsStep, const TArray<FSimCallbackInputAndObject>& SimCallbackInputs)"
  },
  {
    "label": "ApplyCallbacks_Internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyCallbacks_Internal(int32 PhysicsStep, const TArray<ISimCallbackObject*>& SimCallbackObjects)"
  },
  {
    "label": "ProcessInputs_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessInputs_External(int32 PhysicsStep, const TArray<FSimCallbackInputAndObject>& SimCallbackInputs)"
  },
  {
    "label": "InjectInputs_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InjectInputs_External(int32 PhysicsStep, int32 NumSteps)"
  },
  {
    "label": "TriggerRewindIfNeeded_Internal()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TriggerRewindIfNeeded_Internal(int32 LatestStepCompleted)"
  },
  {
    "label": "PostResimStep_Internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostResimStep_Internal(int32 PhysicsStep)"
  },
  {
    "label": "RegisterRewindableSimCallback_Internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterRewindableSimCallback_Internal(ISimCallbackObject* Callback)"
  },
  {
    "label": "UnregisterRewindableSimCallback_Internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterRewindableSimCallback_Internal(ISimCallbackObject* Callback)"
  },
  {
    "label": "SetResimDebugInfo_Internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResimDebugInfo_Internal(const FResimDebugInfo& ResimDebugInfo)"
  }
]