[
  {
    "label": "timespec64",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec64"
  },
  {
    "label": "_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_t"
  },
  {
    "label": "gettimeofdayMonotonic()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_SUPPORT_IBM_GETTOD_ZOS_H # define _LIBCPP_SUPPORT_IBM_GETTOD_ZOS_H # include<time . h> _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "gettimeofdayMonotonic(struct timespec64* Output)"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (struct _t { uint64_t Hi ; uint64_t Lo ; } ; struct _t Value = { 0,0 } ; uint64_t CC = 0 ;)",
    "insertText": "asm(\" stcke %0\\n\" \" ipm %1\\n\" \" srlg %1,%1,28\\n\" : \"=m\"(Value), \"+r\"(CC)::)"
  },
  {
    "label": "us()",
    "kind": "Method",
    "detail": "Function (errno = EMVSTODNOTSET ; return CC ; } uint64_t)",
    "insertText": "us(Value.Hi >> 4)"
  },
  {
    "label": "ns()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ns((Value.Hi & 0x0F) << 8) + (Value.Lo >> 56)"
  },
  {
    "label": "ns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ns(ns * 1000)"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (us = us - 2 2 0 8 9 8 8 8 0 0 0 0 0 0 0 0 ; register uint64_t DivPair0)",
    "insertText": "asm(\"r0\")"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (DivPair0 = 0 ; register uint64_t DivPair1)",
    "insertText": "asm(\"r1\")"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (DivPair1 = us ; uint64_t Divisor = 1 0 0 0 0 0 0 ;)",
    "insertText": "asm(\" dlgr %0,%2\" : \"+r\"(DivPair0), \"+r\"(DivPair1) : \"r\"(Divisor) :)"
  }
]