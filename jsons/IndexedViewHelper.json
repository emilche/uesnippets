[
  {
    "label": "symbolic_last_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symbolic_last_tag"
  },
  {
    "label": "get_compile_time_incr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "get_compile_time_incr"
  },
  {
    "label": "IndexedViewCompatibleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexedViewCompatibleType"
  },
  {
    "label": "SingleRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SingleRange"
  },
  {
    "label": "all_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "all_t"
  },
  {
    "label": "AllRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllRange"
  },
  {
    "label": "lastp1()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_INDEXED_VIEW_HELPER_H # define EIGEN_INDEXED_VIEW_HELPER_H namespace Eigen { namespace internal { struct symbolic_last_tag { } ; } const symbolic::SymbolExpr<internal::symbolic_last_tag> last ; # ifdef EIGEN_PARSED_BY_DOXYGEN const auto lastp1 = last + fix<1> ; # else const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1>>>)",
    "insertText": "lastp1(last+fix<1>())"
  },
  {
    "label": "eval_expr_given_size()",
    "kind": "Method",
    "detail": "Function (# endif namespace internal { Index)",
    "insertText": "eval_expr_given_size(Index x, Index)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} template<T,EnableIf = void> struct get_compile_time_incr { enum { value = UndefinedIncr } ; } ; template<T> EIGEN_CONSTEXPR Index)",
    "insertText": "first(const T& x)"
  },
  {
    "label": "makeIndexedViewCompatible()",
    "kind": "Method",
    "detail": "Function (} template<T,int XprSize,EnableIf = void> struct IndexedViewCompatibleType { typedef T type ; } ; template<T,Q> const T&)",
    "insertText": "makeIndexedViewCompatible(const T& x, Index , Q)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "operator(Index)"
  },
  {
    "label": "all_t()",
    "kind": "Method",
    "detail": "Function (} struct all_t {)",
    "insertText": "all_t()"
  },
  {
    "label": "AllRange()",
    "kind": "Method",
    "detail": "Function (} } ; template<int XprSize> struct AllRange { enum { SizeAtCompileTime = XprSize } ;)",
    "insertText": "AllRange(Index size = XprSize) : m_size(size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "operator(Index i)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "first()"
  }
]