[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FMeshIndexMappings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshIndexMappings"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" GeometryTypes . h \" namespace UE { namespace Geometry { class FDynamicMesh3 ; struct FMeshIndexMappings { protected : FIndexMapi VertexMap ; FIndexMapi TriangleMap ; FIndexMapi GroupMap ; FIndexMapi ColorMap ; TArray<FIndexMapi> UVMaps ; TArray<FIndexMapi> NormalMaps ; public : void)",
    "insertText": "Initialize(FDynamicMesh3* Mesh)"
  },
  {
    "label": "InvalidID()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InvalidID()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FIndexMapi& NormalMap : NormalMaps)"
  },
  {
    "label": "ResetTriangleMap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetTriangleMap()"
  },
  {
    "label": "GetVertexMap()",
    "kind": "Method",
    "detail": "Function (} FIndexMapi&)",
    "insertText": "GetVertexMap()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VertexMap .)",
    "insertText": "Add(FromID, ToID)"
  },
  {
    "label": "GetNewVertex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNewVertex(int FromID)"
  },
  {
    "label": "ContainsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsVertex(int FromID)"
  },
  {
    "label": "GetTriangleMap()",
    "kind": "Method",
    "detail": "Function (} FIndexMapi&)",
    "insertText": "GetTriangleMap()"
  },
  {
    "label": "GetNewTriangle()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNewTriangle(int FromID)"
  },
  {
    "label": "ContainsTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsTriangle(int FromID)"
  },
  {
    "label": "GetGroupMap()",
    "kind": "Method",
    "detail": "Function (} FIndexMapi&)",
    "insertText": "GetGroupMap()"
  },
  {
    "label": "GetNewGroup()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNewGroup(int FromID)"
  },
  {
    "label": "ContainsGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsGroup(int FromID)"
  },
  {
    "label": "GetUVMap()",
    "kind": "Method",
    "detail": "Function (} FIndexMapi&)",
    "insertText": "GetUVMap(int UVLayer)"
  },
  {
    "label": "GetNewUV()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNewUV(int UVLayer, int FromID)"
  },
  {
    "label": "ContainsUV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsUV(int UVLayer, int FromID)"
  },
  {
    "label": "GetNormalMap()",
    "kind": "Method",
    "detail": "Function (} FIndexMapi&)",
    "insertText": "GetNormalMap(int NormalLayer)"
  },
  {
    "label": "GetNewNormal()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNewNormal(int NormalLayer, int FromID)"
  },
  {
    "label": "ContainsNormal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsNormal(int NormalLayer, int FromID)"
  },
  {
    "label": "GetColorMap()",
    "kind": "Method",
    "detail": "Function (} FIndexMapi&)",
    "insertText": "GetColorMap()"
  },
  {
    "label": "GetNewColor()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNewColor(int FromID)"
  },
  {
    "label": "ContainsColor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsColor(int FromID)"
  }
]