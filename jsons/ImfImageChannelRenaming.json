[
  {
    "label": "ChannelMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelMap"
  },
  {
    "label": "renameChannelsInMap()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_IMAGE_CHANNEL_RENAMING_H # define INCLUDED_IMF_IMAGE_CHANNEL_RENAMING_H # include \" ImfNamespace . h \" # include<map> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER typedef std::map<std::string,std::string> RenamingMap ; template<class ChannelMap> void)",
    "insertText": "renameChannelsInMap(const RenamingMap& oldToNewNames, ChannelMap& channels)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ChannelMap renamedChannels ;)",
    "insertText": "for(typename ChannelMap::const_iterator i = channels.begin (); i != channels.end (); ++i)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (RenamingMap::const_iterator j = oldToNewNames .)",
    "insertText": "find(i->first)"
  },
  {
    "label": "newName()",
    "kind": "Method",
    "detail": "Function (first\n                                                                    : j->second)",
    "insertText": "newName(j == oldToNewNames.end ())"
  }
]