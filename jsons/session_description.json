[
  {
    "label": "AudioContentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioContentDescription"
  },
  {
    "label": "VideoContentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoContentDescription"
  },
  {
    "label": "SctpDataContentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpDataContentDescription"
  },
  {
    "label": "UnsupportedContentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnsupportedContentDescription"
  },
  {
    "label": "MediaContentDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaContentDescription"
  },
  {
    "label": "ExtmapAllowMixed",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExtmapAllowMixed"
  },
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "MediaContentDescriptionImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaContentDescriptionImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SessionDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionDescription"
  },
  {
    "label": "ContentGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentGroup"
  },
  {
    "label": "MsidSignaling",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MsidSignaling"
  },
  {
    "label": "ContentSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ContentSource"
  },
  {
    "label": "MediaContentDescription()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_SESSION_DESCRIPTION_H_ # define PC_SESSION_DESCRIPTION_H_ # include<stddef . h> # include<stdint . h> # include<algorithm> # include<memory> # include<string> # include<type_traits> # include<utility> # include<vector> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" api / crypto_params . h \" # include \" api / media_types . h \" # include \" api / rtp_parameters . h \" # include \" api / rtp_transceiver_direction . h \" # include \" api / rtp_transceiver_interface . h \" # include \" media / base / codec . h \" # include \" media / base / media_channel . h \" # include \" media / base / media_constants . h \" # include \" media / base / rid_description . h \" # include \" media / base / stream_params . h \" # include \" p2p / base / transport_description . h \" # include \" p2p / base / transport_info . h \" # include \" pc / media_protocol_names . h \" # include \" pc / simulcast_description . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { typedef std::vector<AudioCodec> AudioCodecs ; typedef std::vector<VideoCodec> VideoCodecs ; typedef std::vector<CryptoParams> CryptoParamsVec ; typedef std::vector<webrtc::RtpExtension> RtpHeaderExtensions ; const int kAutoBandwidth = - 1 ; class AudioContentDescription ; class VideoContentDescription ; class SctpDataContentDescription ; class UnsupportedContentDescription ; class MediaContentDescription { public :)",
    "insertText": "MediaContentDescription()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (MediaType)",
    "insertText": "type()"
  },
  {
    "label": "as_audio()",
    "kind": "Method",
    "detail": "Function (AudioContentDescription*)",
    "insertText": "as_audio()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MediaContentDescription>)",
    "insertText": "Clone()"
  },
  {
    "label": "protocol()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "protocol()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (protocol_ =)",
    "insertText": "string(protocol)"
  },
  {
    "label": "direction()",
    "kind": "Method",
    "detail": "Function (} webrtc::RtpTransceiverDirection)",
    "insertText": "direction()"
  },
  {
    "label": "rtcp_mux()",
    "kind": "Method",
    "detail": "Function (direction_ = direction ; } bool)",
    "insertText": "rtcp_mux()"
  },
  {
    "label": "rtcp_reduced_size()",
    "kind": "Method",
    "detail": "Function (rtcp_mux_ = mux ; } bool)",
    "insertText": "rtcp_reduced_size()"
  },
  {
    "label": "remote_estimate()",
    "kind": "Method",
    "detail": "Function (rtcp_reduced_size_ = reduced_size ; } bool)",
    "insertText": "remote_estimate()"
  },
  {
    "label": "bandwidth()",
    "kind": "Method",
    "detail": "Function (remote_estimate_ = remote_estimate ; } int)",
    "insertText": "bandwidth()"
  },
  {
    "label": "bandwidth_type()",
    "kind": "Method",
    "detail": "Function (bandwidth_ = bandwidth ; } std::string)",
    "insertText": "bandwidth_type()"
  },
  {
    "label": "cryptos()",
    "kind": "Method",
    "detail": "Function (bandwidth_type_ = bandwidth_type ; } const std::vector<CryptoParams>&)",
    "insertText": "cryptos()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (cryptos_ .)",
    "insertText": "push_back(params)"
  },
  {
    "label": "set_cryptos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_cryptos(const std::vector<CryptoParams>& cryptos)"
  },
  {
    "label": "rtp_header_extensions()",
    "kind": "Method",
    "detail": "Function (cryptos_ = cryptos ; } const RtpHeaderExtensions&)",
    "insertText": "rtp_header_extensions()"
  },
  {
    "label": "AddRtpHeaderExtension()",
    "kind": "Method",
    "detail": "Function (rtp_header_extensions_ = extensions ; rtp_header_extensions_set_ = true ; } void)",
    "insertText": "AddRtpHeaderExtension(const webrtc::RtpExtension& ext)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (rtp_header_extensions_ .)",
    "insertText": "push_back(ext)"
  },
  {
    "label": "ClearRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (rtp_header_extensions_set_ = true ; } void)",
    "insertText": "ClearRtpHeaderExtensions()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (rtp_header_extensions_ .)",
    "insertText": "clear()"
  },
  {
    "label": "rtp_header_extensions_set()",
    "kind": "Method",
    "detail": "Function (rtp_header_extensions_set_ = true ; } bool)",
    "insertText": "rtp_header_extensions_set()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (send_streams_ .)",
    "insertText": "push_back(stream)"
  },
  {
    "label": "AddLegacyStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLegacyStream(uint32_t ssrc)"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStream(StreamParams::CreateLegacy(ssrc))"
  },
  {
    "label": "AddLegacyStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLegacyStream(uint32_t ssrc, uint32_t fid_ssrc)"
  },
  {
    "label": "CreateLegacy()",
    "kind": "Method",
    "detail": "Function (StreamParams sp =)",
    "insertText": "CreateLegacy(ssrc)"
  },
  {
    "label": "AddFidSsrc()",
    "kind": "Method",
    "detail": "Function (sp .)",
    "insertText": "AddFidSsrc(ssrc, fid_ssrc)"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStream(sp)"
  },
  {
    "label": "first_ssrc()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "first_ssrc()"
  },
  {
    "label": "has_ssrcs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_ssrcs()"
  },
  {
    "label": "set_conference_mode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_conference_mode(bool enable)"
  },
  {
    "label": "conference_mode()",
    "kind": "Method",
    "detail": "Function (conference_mode_ = enable ; } bool)",
    "insertText": "conference_mode()"
  },
  {
    "label": "connection_address()",
    "kind": "Method",
    "detail": "Function (connection_address_ = address ; } const rtc::SocketAddress&)",
    "insertText": "connection_address()"
  },
  {
    "label": "simulcast_description()",
    "kind": "Method",
    "detail": "Function (} SimulcastDescription&)",
    "insertText": "simulcast_description()"
  },
  {
    "label": "receive_rids()",
    "kind": "Method",
    "detail": "Function (simulcast_ = simulcast ; } const std::vector<RidDescription>&)",
    "insertText": "receive_rids()"
  },
  {
    "label": "CloneInternal()",
    "kind": "Method",
    "detail": "Function (receive_rids_ = rids ; } protected : bool rtcp_mux_ = false ; bool rtcp_reduced_size_ = false ; bool remote_estimate_ = false ; int bandwidth_ = kAutoBandwidth ; std::string bandwidth_type_ = kApplicationSpecificBandwidth ; std::string protocol_ ; std::vector<CryptoParams> cryptos_ ; std::vector<webrtc::RtpExtension> rtp_header_extensions_ ; bool rtp_header_extensions_set_ = false ; StreamParamsVec send_streams_ ; bool conference_mode_ = false ; webrtc::RtpTransceiverDirection direction_ = webrtc::RtpTransceiverDirection::kSendRecv ; rtc::SocketAddress connection_address_ ; ExtmapAllowMixed extmap_allow_mixed_enum_ = kMedia ; SimulcastDescription simulcast_ ; std::vector<RidDescription> receive_rids_ ; private : MediaContentDescription*)",
    "insertText": "CloneInternal()"
  },
  {
    "label": "set_protocol()",
    "kind": "Method",
    "detail": "Function (} ; template<class C> class MediaContentDescriptionImpl : public MediaContentDescription { public : void)",
    "insertText": "set_protocol(absl::string_view protocol)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(IsRtpProtocol(protocol))"
  },
  {
    "label": "codecs()",
    "kind": "Method",
    "detail": "Function (} typedef C CodecType ; const std::vector<C>&)",
    "insertText": "codecs()"
  },
  {
    "label": "has_codecs()",
    "kind": "Method",
    "detail": "Function (codecs_ = codecs ; } bool)",
    "insertText": "has_codecs()"
  },
  {
    "label": "HasCodec()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCodec(int id)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool found = false ;)",
    "insertText": "for(typename std::vector<C>::iterator iter = codecs_.begin(); iter != codecs_.end(); ++iter)"
  },
  {
    "label": "AddCodec()",
    "kind": "Method",
    "detail": "Function (found = true ; break ; } } return found ; } void)",
    "insertText": "AddCodec(const C& codec)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (codecs_ .)",
    "insertText": "push_back(codec)"
  },
  {
    "label": "AddOrReplaceCodec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOrReplaceCodec(const C& codec)"
  },
  {
    "label": "AddCodec()",
    "kind": "Method",
    "detail": "Function (* iter = codec ; return ; } })",
    "insertText": "AddCodec(codec)"
  },
  {
    "label": "AddCodecs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCodecs(const std::vector<C>& codecs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<C>::const_iterator codec ;)",
    "insertText": "for(codec = codecs.begin(); codec != codecs.end(); ++codec)"
  },
  {
    "label": "AddCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCodec(*codec)"
  },
  {
    "label": "AudioContentDescription()",
    "kind": "Method",
    "detail": "Function (} } private : std::vector<C> codecs_ ; } ; class AudioContentDescription : public MediaContentDescriptionImpl<AudioCodec> { public :)",
    "insertText": "AudioContentDescription()"
  },
  {
    "label": "SctpDataContentDescription()",
    "kind": "Method",
    "detail": "Function (} } ; class SctpDataContentDescription : public MediaContentDescription { public :)",
    "insertText": "SctpDataContentDescription()"
  },
  {
    "label": "SctpDataContentDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SctpDataContentDescription(const SctpDataContentDescription& o) : MediaContentDescription(o), use_sctpmap_(o.use_sctpmap_), port_(o.port_), max_message_size_(o.max_message_size_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(IsSctpProtocol(protocol))"
  },
  {
    "label": "use_sctpmap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "use_sctpmap()"
  },
  {
    "label": "port()",
    "kind": "Method",
    "detail": "Function (use_sctpmap_ = enable ; } int)",
    "insertText": "port()"
  },
  {
    "label": "max_message_size()",
    "kind": "Method",
    "detail": "Function (port_ = port ; } int)",
    "insertText": "max_message_size()"
  },
  {
    "label": "UnsupportedContentDescription()",
    "kind": "Method",
    "detail": "Function (} bool use_sctpmap_ = true ; int port_ = 5 0 0 0 ; int max_message_size_ = 6 4* 1 0 2 4 ; } ; class UnsupportedContentDescription : public MediaContentDescription { public :)",
    "insertText": "UnsupportedContentDescription(absl::string_view media_type) : media_type_(media_type)"
  },
  {
    "label": "ContentInfo()",
    "kind": "Method",
    "detail": "Function (} std::string media_type_ ; } ; enum class MediaProtocolType { kRtp,kSctp,kOther } ; class RTC_EXPORT ContentInfo { public :)",
    "insertText": "ContentInfo(MediaProtocolType type) : type(type)"
  },
  {
    "label": "ContentInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ContentInfo()"
  },
  {
    "label": "ContentInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContentInfo(const ContentInfo& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ContentInfo&)",
    "insertText": "operator(const ContentInfo& o)"
  },
  {
    "label": "ContentInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContentInfo(ContentInfo&& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ContentInfo&)",
    "insertText": "operator(ContentInfo&& o)"
  },
  {
    "label": "mid()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "mid()"
  },
  {
    "label": "media_description()",
    "kind": "Method",
    "detail": "Function (this -> name = mid ; } MediaContentDescription*)",
    "insertText": "media_description()"
  },
  {
    "label": "set_media_description()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_media_description(std::unique_ptr<MediaContentDescription> desc)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (description_ =)",
    "insertText": "move(desc)"
  },
  {
    "label": "ContentGroup()",
    "kind": "Method",
    "detail": "Function (} std::string name ; MediaProtocolType type ; bool rejected = false ; bool bundle_only = false ; private : class SessionDescription ; std::unique_ptr<MediaContentDescription> description_ ; } ; typedef std::vector<std::string> ContentNames ; class ContentGroup { public :)",
    "insertText": "ContentGroup(const std::string& semantics)"
  },
  {
    "label": "ContentGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContentGroup(const ContentGroup&)"
  },
  {
    "label": "ContentGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContentGroup(ContentGroup&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ContentGroup&)",
    "insertText": "operator(const ContentGroup&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ContentGroup&)",
    "insertText": "operator(ContentGroup&&)"
  },
  {
    "label": "ContentGroup()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ContentGroup()"
  },
  {
    "label": "semantics()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "semantics()"
  },
  {
    "label": "HasContentName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContentName(absl::string_view content_name)"
  },
  {
    "label": "AddContentName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContentName(absl::string_view content_name)"
  },
  {
    "label": "RemoveContentName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveContentName(absl::string_view content_name)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "FindContentInfoByName()",
    "kind": "Method",
    "detail": "Function (private : std::string semantics_ ; ContentNames content_names_ ; } ; typedef std::vector<ContentInfo> ContentInfos ; typedef std::vector<ContentGroup> ContentGroups ; const ContentInfo*)",
    "insertText": "FindContentInfoByName(const ContentInfos& contents, const std::string& name)"
  },
  {
    "label": "FindContentInfoByType()",
    "kind": "Method",
    "detail": "Function (const ContentInfo*)",
    "insertText": "FindContentInfoByType(const ContentInfos& contents, const std::string& type)"
  },
  {
    "label": "SessionDescription()",
    "kind": "Method",
    "detail": "Function (enum MsidSignaling { kMsidSignalingMediaSection = 0 x1,kMsidSignalingSsrcAttribute = 0 x2 } ; class SessionDescription { public :)",
    "insertText": "SessionDescription()"
  },
  {
    "label": "contents()",
    "kind": "Method",
    "detail": "Function (const ContentInfos&)",
    "insertText": "contents()"
  },
  {
    "label": "GetContentByName()",
    "kind": "Method",
    "detail": "Function (ContentInfo*)",
    "insertText": "GetContentByName(const std::string& name)"
  },
  {
    "label": "GetContentDescriptionByName()",
    "kind": "Method",
    "detail": "Function (const MediaContentDescription*)",
    "insertText": "GetContentDescriptionByName(const std::string& name)"
  },
  {
    "label": "FirstContentByType()",
    "kind": "Method",
    "detail": "Function (const ContentInfo*)",
    "insertText": "FirstContentByType(MediaProtocolType type)"
  },
  {
    "label": "FirstContent()",
    "kind": "Method",
    "detail": "Function (const ContentInfo*)",
    "insertText": "FirstContent()"
  },
  {
    "label": "AddContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContent(const std::string& name, MediaProtocolType type, std::unique_ptr<MediaContentDescription> description)"
  },
  {
    "label": "AddContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContent(const std::string& name, MediaProtocolType type, bool rejected, std::unique_ptr<MediaContentDescription> description)"
  },
  {
    "label": "AddContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContent(const std::string& name, MediaProtocolType type, bool rejected, bool bundle_only, std::unique_ptr<MediaContentDescription> description)"
  },
  {
    "label": "AddContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContent(ContentInfo&& content)"
  },
  {
    "label": "RemoveContentByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveContentByName(const std::string& name)"
  },
  {
    "label": "transport_infos()",
    "kind": "Method",
    "detail": "Function (const TransportInfos&)",
    "insertText": "transport_infos()"
  },
  {
    "label": "GetTransportInfoByName()",
    "kind": "Method",
    "detail": "Function (TransportInfo*)",
    "insertText": "GetTransportInfoByName(const std::string& name)"
  },
  {
    "label": "GetTransportDescriptionByName()",
    "kind": "Method",
    "detail": "Function (const TransportDescription*)",
    "insertText": "GetTransportDescriptionByName(const std::string& name)"
  },
  {
    "label": "GetTransportInfoByName()",
    "kind": "Method",
    "detail": "Function (const TransportInfo* tinfo =)",
    "insertText": "GetTransportInfoByName(name)"
  },
  {
    "label": "AddTransportInfo()",
    "kind": "Method",
    "detail": "Function (transport_infos_ = transport_infos ; } void)",
    "insertText": "AddTransportInfo(const TransportInfo& transport_info)"
  },
  {
    "label": "RemoveTransportInfoByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTransportInfoByName(const std::string& name)"
  },
  {
    "label": "groups()",
    "kind": "Method",
    "detail": "Function (const ContentGroups&)",
    "insertText": "groups()"
  },
  {
    "label": "GetGroupsByName()",
    "kind": "Method",
    "detail": "Function (std::vector<const ContentGroup*>)",
    "insertText": "GetGroupsByName(const std::string& name)"
  },
  {
    "label": "HasGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasGroup(const std::string& name)"
  },
  {
    "label": "AddGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGroup(const ContentGroup& group)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (content_groups_ .)",
    "insertText": "push_back(group)"
  },
  {
    "label": "RemoveGroupByName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveGroupByName(const std::string& name)"
  },
  {
    "label": "set_msid_supported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_msid_supported(bool supported)"
  },
  {
    "label": "msid_supported()",
    "kind": "Method",
    "detail": "Function (msid_supported_ = supported ; } bool)",
    "insertText": "msid_supported()"
  },
  {
    "label": "msid_signaling()",
    "kind": "Method",
    "detail": "Function (msid_signaling_ = msid_signaling ; } int)",
    "insertText": "msid_signaling()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (extmap_allow_mixed_ = supported ; MediaContentDescription::ExtmapAllowMixed media_level_setting = supported ? MediaContentDescription::kSession : MediaContentDescription::kNo ;)",
    "insertText": "for(auto& content : contents_)"
  },
  {
    "label": "media_description()",
    "kind": "Method",
    "detail": "Function (content .)",
    "insertText": "media_description()->set_extmap_allow_mixed_enum( media_level_setting)"
  },
  {
    "label": "extmap_allow_mixed()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "extmap_allow_mixed()"
  }
]