[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_NUMERIC_INTERNAL_BITS_H_ # define ABSL_NUMERIC_INTERNAL_BITS_H_ # include<cstdint> # include<limits> # include<type_traits> # if)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__) #include <intrin.h> #endif #include \"absl/base/attributes.h\" #include \"absl/base/config.h\" #if defined(__GNUC__) && !defined(__clang__) #define ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(x) 1 #else #define ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(x) ABSL_HAVE_BUILTIN(x) #endif #if ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_popcountl) && \\ ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_popcountll) #define ABSL_INTERNAL_CONSTEXPR_POPCOUNT constexpr #define ABSL_INTERNAL_HAS_CONSTEXPR_POPCOUNT 1 #else #define ABSL_INTERNAL_CONSTEXPR_POPCOUNT #define ABSL_INTERNAL_HAS_CONSTEXPR_POPCOUNT 0 #endif #if ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_clz) && \\ ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_clzll) #define ABSL_INTERNAL_CONSTEXPR_CLZ constexpr #define ABSL_INTERNAL_HAS_CONSTEXPR_CLZ 1 #else #define ABSL_INTERNAL_CONSTEXPR_CLZ #define ABSL_INTERNAL_HAS_CONSTEXPR_CLZ 0 #endif #if ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_ctz) && \\ ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_ctzll)"
  },
  {
    "label": "IsPowerOf2()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace numeric_internal { bool)",
    "insertText": "IsPowerOf2(unsigned int x)"
  },
  {
    "label": "RotateRight()",
    "kind": "Method",
    "detail": "Function (} template<class T> ABSL_MUST_USE_RESULT ABSL_ATTRIBUTE_ALWAYS_INLINE T)",
    "insertText": "RotateRight(T x, int s)"
  },
  {
    "label": "RotateLeft()",
    "kind": "Method",
    "detail": "Function (} template<class T> ABSL_MUST_USE_RESULT ABSL_ATTRIBUTE_ALWAYS_INLINE T)",
    "insertText": "RotateLeft(T x, int s)"
  },
  {
    "label": "Popcount32()",
    "kind": "Method",
    "detail": "Function (} ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_POPCOUNT int)",
    "insertText": "Popcount32(uint32_t x)"
  },
  {
    "label": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_popcount) static_assert(sizeof(unsigned int) == sizeof(x), \"__builtin_popcount does not take 32-bit arg\")"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "x((x >> 1) & 0x55555555)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x((x >> 2) & 0x33333333) + (x & 0x33333333)"
  },
  {
    "label": "Popcount64()",
    "kind": "Method",
    "detail": "Function (# endif } ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_POPCOUNT int)",
    "insertText": "Popcount64(uint64_t x)"
  },
  {
    "label": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_popcountll) static_assert(sizeof(unsigned long long) == sizeof(x), \"__builtin_popcount does not take 64-bit arg\")"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "x(x >> 1)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x((x >> 2) & 0x3333333333333333ULL) + (x & 0x3333333333333333ULL)"
  },
  {
    "label": "Popcount()",
    "kind": "Method",
    "detail": "Function (# endif } template<class T> ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_POPCOUNT int)",
    "insertText": "Popcount(T x)"
  },
  {
    "label": "CountLeadingZeroes32()",
    "kind": "Method",
    "detail": "Function (} ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CLZ int)",
    "insertText": "CountLeadingZeroes32(uint32_t x)"
  },
  {
    "label": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_clz) static_assert(sizeof(unsigned int) == sizeof(x), \"__builtin_clz does not take 32-bit arg\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (zeroes - = 1 6 ; x>> = 1 6 ; })",
    "insertText": "if(x >> 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (zeroes - = 8 ; x>> = 8 ; })",
    "insertText": "if(x >> 4)"
  },
  {
    "label": "CountLeadingZeroes16()",
    "kind": "Method",
    "detail": "Function (zeroes - = 4 ; x>> = 4 ; } return \" \\ 4 \\ 3 \\ 2 \\ 2 \\ 1 \\ 1 \\ 1 \\ 1 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \" [ x ] + zeroes ; # endif } ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CLZ int)",
    "insertText": "CountLeadingZeroes16(uint16_t x)"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_clzs) static_assert(sizeof(unsigned short) == sizeof(x), \"__builtin_clzs does not take 16-bit arg\")"
  },
  {
    "label": "CountLeadingZeroes32()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "CountLeadingZeroes32(x)"
  },
  {
    "label": "CountLeadingZeroes64()",
    "kind": "Method",
    "detail": "Function (# endif } ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CLZ int)",
    "insertText": "CountLeadingZeroes64(uint64_t x)"
  },
  {
    "label": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_clzll) static_assert(sizeof(unsigned long long) == sizeof(x), \"__builtin_clzll does not take 64-bit arg\")"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__) && \\ (defined(_M_X64) || defined(_M_ARM64))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (zeroes - = 3 2 ; x>> = 3 2 ; })",
    "insertText": "if(x >> 16)"
  },
  {
    "label": "CountLeadingZeroes()",
    "kind": "Method",
    "detail": "Function (zeroes - = 4 ; x>> = 4 ; } return \" \\ 4 \\ 3 \\ 2 \\ 2 \\ 1 \\ 1 \\ 1 \\ 1 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \\ 0 \" [ x ] + zeroes ; # endif } template<T> ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CLZ int)",
    "insertText": "CountLeadingZeroes(T x)"
  },
  {
    "label": "CountTrailingZeroesNonzero32()",
    "kind": "Method",
    "detail": "Function (} ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CTZ int)",
    "insertText": "CountTrailingZeroesNonzero32(uint32_t x)"
  },
  {
    "label": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_ctz) static_assert(sizeof(unsigned int) == sizeof(x), \"__builtin_ctz does not take 32-bit arg\")"
  },
  {
    "label": "_BitScanForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanForward(&result, x)"
  },
  {
    "label": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_NUMERIC_INTERNAL_HAVE_BUILTIN_OR_GCC(__builtin_ctzll) static_assert(sizeof(unsigned long long) == sizeof(x), \"__builtin_ctzll does not take 64-bit arg\")"
  },
  {
    "label": "_BitScanForward64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanForward64(&result, x)"
  },
  {
    "label": "_BitScanForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanForward(&result, static_cast<unsigned long>(x >> 32))"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_ctzs) static_assert(sizeof(unsigned short) == sizeof(x), \"__builtin_ctzs does not take 16-bit arg\")"
  },
  {
    "label": "CountTrailingZeroesNonzero32()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "CountTrailingZeroesNonzero32(x)"
  },
  {
    "label": "CountTrailingZeroes()",
    "kind": "Method",
    "detail": "Function (# endif } template<class T> ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CTZ int)",
    "insertText": "CountTrailingZeroes(T x)"
  },
  {
    "label": "BitCeilPromotionHelper()",
    "kind": "Method",
    "detail": "Function (} template<class T> ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CLZ std::enable_if<std::is_unsigned<T>::value,T>::type)",
    "insertText": "BitCeilPromotionHelper(T x, T promotion)"
  },
  {
    "label": "BitCeilNonPowerOf2()",
    "kind": "Method",
    "detail": "Function (} template<class T> ABSL_ATTRIBUTE_ALWAYS_INLINE ABSL_INTERNAL_CONSTEXPR_CLZ std::enable_if<std::is_unsigned<T>::value,T>::type)",
    "insertText": "BitCeilNonPowerOf2(T x)"
  }
]