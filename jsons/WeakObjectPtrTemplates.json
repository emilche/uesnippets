[
  {
    "label": "FWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeakObjectPtr"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TWeakObjectPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWeakObjectPtrBase"
  },
  {
    "label": "TWeakObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakObjectPtr"
  },
  {
    "label": "FFieldPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldPath"
  },
  {
    "label": "TWeakObjectPtrSetKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakObjectPtrSetKeyFuncs"
  },
  {
    "label": "TWeakObjectPtrMapKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWeakObjectPtrMapKeyFuncs"
  },
  {
    "label": "TCallTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCallTraits"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / LosesQualifiersFromTo . h \" # include \" Templates / Requires . h \" # include \" Containers / Map . h \" # include \" UObject / WeakObjectPtrTemplatesFwd . h \" # include \" UObject / StrongObjectPtrTemplatesFwd . h \" # include<type_traits> struct FWeakObjectPtr ; template<class T,class TWeakObjectPtrBase> struct TWeakObjectPtr : private TWeakObjectPtrBase { struct FFieldPath ;)",
    "insertText": "static_assert(std::is_same_v<TWeakObjectPtrBase*, FWeakObjectPtr*>, \"TWeakObjectPtrBase should not be overridden\")"
  },
  {
    "label": "TWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (public : using ElementType = T ;)",
    "insertText": "TWeakObjectPtr()"
  },
  {
    "label": "TWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWeakObjectPtr(const TWeakObjectPtr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr&)",
    "insertText": "operator(const TWeakObjectPtr&)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<U, T*>) > FORCEINLINE TWeakObjectPtr(U Object) : TWeakObjectPtrBase((const UObject*)Object)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherT)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherT*, T*>) > FORCEINLINE TWeakObjectPtr(const TWeakObjectPtr<OtherT, TWeakObjectPtrBase>& Other) : TWeakObjectPtrBase(*(TWeakObjectPtrBase*)&Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(!TLosesQualifiersFromTo<U, T>::Value) > FORCEINLINE TWeakObjectPtr& operator=(U* Object)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T* TempObject = Object ;)",
    "insertText": "operator(TempObject)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "Get()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (} TStrongObjectPtr<T>)",
    "insertText": "Pin(bool bEvenIfPendingKill)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (TStrongObjectPtr<T> StrongPtr ; StrongPtr .)",
    "insertText": "Attach((T*)TWeakObjectPtrBase::Pin(bEvenIfPendingKill).Detach())"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (TStrongObjectPtr<T> StrongPtr ; StrongPtr .)",
    "insertText": "Attach((T*)TWeakObjectPtrBase::Pin().Detach())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStale(bool bIncludingIfPendingKill = true, bool bThreadsafeTest = false)"
  },
  {
    "label": "IsExplicitlyNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsExplicitlyNull()"
  },
  {
    "label": "HasSameIndexAndSerialNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSameIndexAndSerialNumber(const TWeakObjectPtr& Other)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherT)",
    "insertText": "UE_REQUIRES(UE_REQUIRES_EXPR((T*)nullptr == (OtherT*)nullptr)) > FORCEINLINE bool HasSameIndexAndSerialNumber(const TWeakObjectPtr<OtherT, TWeakObjectPtrBase>& Other)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "TWeakObjectPtrBase()",
    "kind": "Method",
    "detail": "Function (Ar<<static_cast<)",
    "insertText": "TWeakObjectPtrBase(*this)"
  },
  {
    "label": "GetWeakPtrTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetWeakPtrTypeHash()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<RhsT,=)",
    "insertText": "decltype((T*)nullptr == (RhsT*)nullptr)> FORCENOINLINE bool operator==(const TWeakObjectPtr<RhsT, TWeakObjectPtrBase>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<RhsT,=)",
    "insertText": "decltype((T*)nullptr == (RhsT*)nullptr)> FORCENOINLINE bool operator==(const RhsT* Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE bool)",
    "insertText": "operator(TYPE_OF_NULLPTR)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} # if ! PLATFORM_COMPILER_HAS_GENERATED_COMPARISON_OPERATORS template<RhsT,=)",
    "insertText": "decltype((T*)nullptr != (RhsT*)nullptr)> FORCENOINLINE bool operator!=(const TWeakObjectPtr<RhsT, TWeakObjectPtrBase>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<RhsT,=)",
    "insertText": "decltype((T*)nullptr != (RhsT*)nullptr)> FORCENOINLINE bool operator!=(const RhsT* Rhs)"
  },
  {
    "label": "TWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<T>)",
    "insertText": "TWeakObjectPtr(T*)"
  },
  {
    "label": "TWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<T>)",
    "insertText": "TWeakObjectPtr(const TWeakObjectPtr<T>&)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# if ! PLATFORM_COMPILER_HAS_GENERATED_COMPARISON_OPERATORS template<LhsT,RhsT,OtherTWeakObjectPtrBase,=)",
    "insertText": "decltype((LhsT*)nullptr == (RhsT*)nullptr)> FORCENOINLINE bool operator==(const LhsT* Lhs, const TWeakObjectPtr<RhsT, OtherTWeakObjectPtrBase>& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<RhsT,OtherTWeakObjectPtrBase> FORCENOINLINE bool)",
    "insertText": "operator(TYPE_OF_NULLPTR, const TWeakObjectPtr<RhsT, OtherTWeakObjectPtrBase>& Rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<LhsT,RhsT,OtherTWeakObjectPtrBase,=)",
    "insertText": "decltype((LhsT*)nullptr != (RhsT*)nullptr)> FORCENOINLINE bool operator!=(const LhsT* Lhs, const TWeakObjectPtr<RhsT, OtherTWeakObjectPtrBase>& Rhs)"
  },
  {
    "label": "MakeWeakObjectPtr()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> TWeakObjectPtr<T>)",
    "insertText": "MakeWeakObjectPtr(T* Ptr)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,bool bInAllowDuplicateKeys = false> struct TWeakObjectPtrSetKeyFuncs : DefaultKeyFuncs<ElementType,bInAllowDuplicateKeys> { typedef DefaultKeyFuncs<ElementType,bInAllowDuplicateKeys>::KeyInitType KeyInitType ; bool)",
    "insertText": "Matches(KeyInitType A, KeyInitType B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(KeyInitType Key)"
  },
  {
    "label": "CopyFromWeakArray()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TCallTraits<TWeakObjectPtr<T>> : public TCallTraitsBase<TWeakObjectPtr<T>> { using ConstPointerType = TWeakObjectPtr<const T> ; } ; template<DestArrayType,SourceArrayType> void)",
    "insertText": "CopyFromWeakArray(DestArrayType& Dest, const SourceArrayType& Src)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Count = Src .)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Dest .)",
    "insertText": "Empty(Count)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Dest .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "CopyToWeakArray()",
    "kind": "Method",
    "detail": "Function (} } } template<DestArrayType,SourceArrayType> void)",
    "insertText": "CopyToWeakArray(DestArrayType& Dest, const SourceArrayType& Src)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } } template<T> uint32)",
    "insertText": "GetTypeHash(const TWeakObjectPtr<T>& WeakObjectPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class TWeakObjectPtrBase> FArchive&)",
    "insertText": "operator(FArchive& Ar, TWeakObjectPtr<T, TWeakObjectPtrBase>& WeakObjectPtr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (WeakObjectPtr .)",
    "insertText": "Serialize(Ar)"
  }
]