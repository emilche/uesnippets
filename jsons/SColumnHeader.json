[
  {
    "label": "SColumnHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColumnHeader"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IPropertyTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableRow"
  },
  {
    "label": "IPropertyTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableColumn"
  },
  {
    "label": "IPropertyTableUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableUtilities"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Margin . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" IPropertyTable . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / SToolTip . h \" # include \" Styling / AppStyle . h \" # include \" IPropertyTableCustomColumn . h \" # include \" PropertyEditorHelpers . h \" # include \" IDocumentation . h \" # define LOCTEXT_NAMESPACE \" SColumnHeader \" class SColumnHeader : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SColumnHeader ) : _Style( TEXT(\"PropertyTable\") ) , _Customization()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, Style ) SLATE_ARGUMENT( TSharedPtr< IPropertyTableCustomColumn >, Customization ) SLATE_END_ARGS() virtual TSharedRef< class SWidget > GenerateCell( const TSharedRef< class IPropertyTableRow >& Row)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef< class IPropertyTableColumn >& InPropertyTableColumn, const TSharedRef< class IPropertyTableUtilities >& InUtilities)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Customization = InArgs . _Customization ; Utilities = InUtilities ; Column = InPropertyTableColumn ; TSharedPtr<SWidget> ColumnLabel ;)",
    "insertText": "if(Customization.IsValid())"
  },
  {
    "label": "CreateColumnLabel()",
    "kind": "Method",
    "detail": "Function (ColumnLabel = Customization ->)",
    "insertText": "CreateColumnLabel(InPropertyTableColumn, InUtilities, InArgs._Style)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ColumnLabel.IsValid())"
  },
  {
    "label": "ConstructNameWidget()",
    "kind": "Method",
    "detail": "Function (ColumnLabel =)",
    "insertText": "ConstructNameWidget(InArgs._Style, \"NormalFont\")"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (} ChildSlot .)",
    "insertText": "Padding(FMargin( 0, 2, 0, 2 ) ) .VAlign( VAlign_Center ) [ ColumnLabel.ToSharedRef()"
  },
  {
    "label": "GetDataSource()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SToolTip> ColumnHeaderToolTip ; const TWeakObjectPtr<UObject> Object = Column ->)",
    "insertText": "GetDataSource()->AsUObject()"
  },
  {
    "label": "GetDataSource()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FPropertyPath> PropertyPath = Column ->)",
    "insertText": "GetDataSource()->AsPropertyPath()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ColumnHeaderToolTip =)",
    "insertText": "SNew(SToolTip ).Text( FText::FromString(Object->GetName()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(PropertyPath.IsValid() && PropertyPath->GetNumProperties() > 0)"
  },
  {
    "label": "GetLeafMostProperty()",
    "kind": "Method",
    "detail": "Function (const FProperty* Property = PropertyPath ->)",
    "insertText": "GetLeafMostProperty().Property.Get()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (const FText& DisplayNameText = Column ->)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (const FString DocumentationLink =)",
    "insertText": "GetDocumentationLink(Property)"
  },
  {
    "label": "GetDocumentationExcerptName()",
    "kind": "Method",
    "detail": "Function (const FString DocumentationExcerptName =)",
    "insertText": "GetDocumentationExcerptName(Property)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ColumnHeaderToolTip =)",
    "insertText": "Get()->CreateToolTip( DisplayNameText, NULL, DocumentationLink, DocumentationExcerptName)"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "SetToolTip(ColumnHeaderToolTip)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (Utilities ->)",
    "insertText": "RemoveColumn(Column.ToSharedRef())"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "ConstructNameWidget()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedRef<SWidget>)",
    "insertText": "ConstructNameWidget(const FName& Style, const FName& TextFontStyle)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHorizontalBox> NameBox =)",
    "insertText": "SNew(SHorizontalBox)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (TArray<FString> DisplayNamePieces ; DisplayNameText .)",
    "insertText": "ToString().ParseIntoArray(DisplayNamePieces, TEXT(\"->\"), true)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (NameBox ->)",
    "insertText": "AddSlot() .AutoWidth() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( TextFontStyle ) ) .Text( FText::FromString(DisplayNamePieces[ DisplayNamePieces.Num() - 1 ]))"
  }
]