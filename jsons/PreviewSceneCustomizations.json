[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyUtilities"
  },
  {
    "label": "UPreviewMeshCollectionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPreviewMeshCollectionFactory"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FPersonaModeComboEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersonaModeComboEntry"
  },
  {
    "label": "FPreviewSceneDescriptionCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewSceneDescriptionCustomization"
  },
  {
    "label": "IPersonaToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaToolkit"
  },
  {
    "label": "UClothingSimulationFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClothingSimulationFactory"
  },
  {
    "label": "FAnimationEditorPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationEditorPreviewScene"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "FPreviewMeshCollectionEntryCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewMeshCollectionEntryCustomization"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "FPersonaModeComboEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IPropertyTypeCustomization . h \" # include \" IPersonaPreviewScene . h \" # include \" IDetailCustomization . h \" # include \" PropertyHandle . h \" # include \" IEditableSkeleton . h \" # include \" IPersonaToolkit . h \" # include \" AnimationEditorPreviewScene . h \" # ifndef CHAOS_SIMULATION_DETAIL_VIEW_FACTORY_SELECTOR # define CHAOS_SIMULATION_DETAIL_VIEW_FACTORY_SELECTOR 1 # endif struct FAssetData ; class FDetailWidgetRow ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class IPropertyUtilities ; class UPreviewMeshCollectionFactory ; class USkeleton ; struct FPersonaModeComboEntry { UClass* Class ; FText Text ;)",
    "insertText": "FPersonaModeComboEntry(UClass* InClass) : Class(InClass) , Text(InClass->GetDisplayNameText())"
  },
  {
    "label": "FPreviewSceneDescriptionCustomization()",
    "kind": "Method",
    "detail": "Function (} } ; class FPreviewSceneDescriptionCustomization : public IDetailCustomization { public :)",
    "insertText": "FPreviewSceneDescriptionCustomization(const FString& InSkeletonName, const TSharedRef<class IPersonaToolkit>& InPersonaToolkit)"
  },
  {
    "label": "FPreviewSceneDescriptionCustomization()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPreviewSceneDescriptionCustomization()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "GetSaveButtonVisibility()",
    "kind": "Method",
    "detail": "Function (private : EVisibility)",
    "insertText": "GetSaveButtonVisibility(TSharedRef<IPropertyHandle> InAdditionalMeshesProperty)"
  },
  {
    "label": "OnSaveCollectionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSaveCollectionClicked(TSharedRef<IPropertyHandle> InAdditionalMeshesProperty, IDetailLayoutBuilder* DetailLayoutBuilder)"
  },
  {
    "label": "HandleShouldFilterAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShouldFilterAsset(const FAssetData& InAssetData, FName InTag, bool bCanUseDifferentSkeleton)"
  },
  {
    "label": "HandleShouldFilterAdditionalMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShouldFilterAdditionalMesh(const FAssetData& InAssetData, bool bCanUseDifferentSkeleton)"
  },
  {
    "label": "MakeControllerComboEntryWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeControllerComboEntryWidget(TSharedPtr<FPersonaModeComboEntry> InItem)"
  },
  {
    "label": "GetCurrentPreviewControllerText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentPreviewControllerText()"
  },
  {
    "label": "OnComboSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComboSelectionChanged(TSharedPtr<FPersonaModeComboEntry> InSelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandlePreviewControllerPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreviewControllerPropertyChanged()"
  },
  {
    "label": "HandleMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMeshChanged(const FAssetData& InAssetData)"
  },
  {
    "label": "HandlePreviewAnimBlueprintChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePreviewAnimBlueprintChanged(const FAssetData& InAssetData)"
  },
  {
    "label": "HandleAnimBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnimBlueprintCompiled(UBlueprint* Blueprint)"
  },
  {
    "label": "HandleAdditionalMeshesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAdditionalMeshesChanged(const FAssetData& InAssetData, IDetailLayoutBuilder* DetailLayoutBuilder)"
  },
  {
    "label": "HandleAllowDifferentSkeletonsCheckedStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAllowDifferentSkeletonsCheckedStateChanged(ECheckBoxState CheckState)"
  },
  {
    "label": "HandleAllowDifferentSkeletonsIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleAllowDifferentSkeletonsIsChecked()"
  },
  {
    "label": "HandleUseCustomAnimBPCheckedStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUseCustomAnimBPCheckedStateChanged(ECheckBoxState CheckState)"
  },
  {
    "label": "HandleUseCustomAnimBPIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleUseCustomAnimBPIsChecked()"
  },
  {
    "label": "ReinitializePreviewController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitializePreviewController()"
  },
  {
    "label": "MakeClothingSimulationFactoryWidget()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_SIMULATION_DETAIL_VIEW_FACTORY_SELECTOR TSharedRef<SWidget>)",
    "insertText": "MakeClothingSimulationFactoryWidget(TSharedPtr<TSubclassOf<class UClothingSimulationFactory>> Item)"
  },
  {
    "label": "OnClothingSimulationFactorySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClothingSimulationFactorySelectionChanged(TSharedPtr<TSubclassOf<class UClothingSimulationFactory>> Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetCurrentClothingSimulationFactoryText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentClothingSimulationFactoryText()"
  },
  {
    "label": "GetReplaceVisibility()",
    "kind": "Method",
    "detail": "Function (# endif private : FString SkeletonName ; TWeakPtr<class IPersonaToolkit> PersonaToolkit ; TWeakPtr<class FAnimationEditorPreviewScene> PreviewScene ; TWeakPtr<class IEditableSkeleton> EditableSkeleton ; UPreviewMeshCollectionFactory* FactoryToUse ; TArray<TSharedPtr<FPersonaModeComboEntry>> ControllerItems ; TArray<FTopLevelAssetPath> AvailableClassNameList ; # if CHAOS_SIMULATION_DETAIL_VIEW_FACTORY_SELECTOR TArray<TSharedPtr<TSubclassOf<class UClothingSimulationFactory>>> ClothSimulationFactoryList ; # endif IDetailLayoutBuilder* MyDetailLayout ; TWeakObjectPtr<UDataAsset> DataAssetToDisplay ; bool)",
    "insertText": "GetReplaceVisibility(TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "OnResetToBaseClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetToBaseClicked(TSharedPtr<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "OnResetAdditionalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetAdditionalMeshes()"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle> AdditionalMeshesProperty ; } ; class FPreviewMeshCollectionEntryCustomization : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "FPreviewMeshCollectionEntryCustomization()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPreviewMeshCollectionEntryCustomization(const TSharedPtr<IPersonaPreviewScene>& InPreviewScene) : PreviewScene(InPreviewScene)"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& CustomizationUtils)"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder& ChildBuilder, IPropertyTypeCustomizationUtils& CustomizationUtils)"
  },
  {
    "label": "HandleShouldFilterAsset()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "HandleShouldFilterAsset(const FAssetData& InAssetData, FString SkeletonName, USkeleton* Skeleton)"
  },
  {
    "label": "HandleMeshesArrayChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMeshesArrayChanged(TSharedPtr<IPropertyUtilities> PropertyUtilities)"
  }
]