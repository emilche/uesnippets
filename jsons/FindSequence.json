[
  {
    "label": "FindSequence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Impl / RangePointerType . h \" namespace AlgoImpl { template<WhereType,WhatType> WhereType*)",
    "insertText": "FindSequence(WhereType* First, WhereType* Last, WhatType* WhatFirst, WhatType* WhatLast)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (WhereType* It = First ;)",
    "insertText": "for(WhatType* WhatIt = WhatFirst; ; ++It, ++WhatIt)"
  },
  {
    "label": "FindSequence()",
    "kind": "Method",
    "detail": "Function (break ; } } } } } namespace Algo { template<RangeWhereType,RangeWhatType> auto)",
    "insertText": "FindSequence(const RangeWhereType& Where, const RangeWhatType& What) -> decltype( AlgoImpl::FindSequence( GetData(Where), GetData(Where) + GetNum(Where), GetData(What), GetData(What) + GetNum(What)))"
  }
]