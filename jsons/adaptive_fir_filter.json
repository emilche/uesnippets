[
  {
    "label": "AdaptiveFirFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdaptiveFirFilter"
  },
  {
    "label": "ComputeFrequencyResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrequencyResponse(\n    size_t num_partitions,\n    const std::vector<std::vector<FftData>>& H,\n    std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "ComputeFrequencyResponse_Neon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrequencyResponse_Neon(\n    size_t num_partitions,\n    const std::vector<std::vector<FftData>>& H,\n    std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "ComputeFrequencyResponse_Sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrequencyResponse_Sse2(\n    size_t num_partitions,\n    const std::vector<std::vector<FftData>>& H,\n    std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "ComputeFrequencyResponse_Avx2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrequencyResponse_Avx2(\n    size_t num_partitions,\n    const std::vector<std::vector<FftData>>& H,\n    std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "AdaptPartitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptPartitions(const RenderBuffer& render_buffer,\n                     const FftData& G,\n                     size_t num_partitions,\n                     std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "AdaptPartitions_Neon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptPartitions_Neon(const RenderBuffer& render_buffer,\n                          const FftData& G,\n                          size_t num_partitions,\n                          std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "AdaptPartitions_Sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptPartitions_Sse2(const RenderBuffer& render_buffer,\n                          const FftData& G,\n                          size_t num_partitions,\n                          std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "AdaptPartitions_Avx2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptPartitions_Avx2(const RenderBuffer& render_buffer,\n                          const FftData& G,\n                          size_t num_partitions,\n                          std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter(const RenderBuffer& render_buffer,\n                 size_t num_partitions,\n                 const std::vector<std::vector<FftData>>& H,\n                 FftData* S)"
  },
  {
    "label": "ApplyFilter_Neon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter_Neon(const RenderBuffer& render_buffer,\n                      size_t num_partitions,\n                      const std::vector<std::vector<FftData>>& H,\n                      FftData* S)"
  },
  {
    "label": "ApplyFilter_Sse2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter_Sse2(const RenderBuffer& render_buffer,\n                      size_t num_partitions,\n                      const std::vector<std::vector<FftData>>& H,\n                      FftData* S)"
  },
  {
    "label": "ApplyFilter_Avx2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter_Avx2(const RenderBuffer& render_buffer,\n                      size_t num_partitions,\n                      const std::vector<std::vector<FftData>>& H,\n                      FftData* S)"
  },
  {
    "label": "AdaptiveFirFilter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "AdaptiveFirFilter(size_t max_size_partitions,\n                    size_t initial_size_partitions,\n                    size_t size_change_duration_blocks,\n                    size_t num_render_channels,\n                    Aec3Optimization optimization,\n                    ApmDataDumper* data_dumper)"
  },
  {
    "label": "Adapt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adapt(const RenderBuffer& render_buffer,\n             const FftData& G,\n             std::vector<float>* impulse_response)"
  },
  {
    "label": "Adapt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adapt(const RenderBuffer& render_buffer, const FftData& G)"
  },
  {
    "label": "HandleEchoPathChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEchoPathChange()"
  },
  {
    "label": "SetSizePartitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizePartitions(size_t size, bool immediate_effect)"
  },
  {
    "label": "ScaleFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleFilter(float factor)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilter(size_t num_partitions,\n                 const std::vector<std::vector<FftData>>& H)"
  },
  {
    "label": "AdaptAndUpdateSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptAndUpdateSize(const RenderBuffer& render_buffer, const FftData& G)"
  },
  {
    "label": "Constrain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Constrain()"
  },
  {
    "label": "ConstrainAndUpdateImpulseResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstrainAndUpdateImpulseResponse(std::vector<float>* impulse_response)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSize()"
  }
]