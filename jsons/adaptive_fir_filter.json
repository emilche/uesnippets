[
  {
    "label": "AdaptiveFirFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdaptiveFirFilter"
  },
  {
    "label": "ComputeFrequencyResponse()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_ADAPTIVE_FIR_FILTER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_ADAPTIVE_FIR_FILTER_H_ # include<stddef . h> # include<array> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / aec3_fft . h \" # include \" modules / audio_processing / aec3 / fft_data . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" # include \" rtc_base / system / arch . h \" namespace webrtc { namespace aec3 { void)",
    "insertText": "ComputeFrequencyResponse(size_t num_partitions, const std::vector<std::vector<FftData>>& H, std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_HAS_NEON) void ComputeFrequencyResponse_Neon( size_t num_partitions, const std::vector<std::vector<FftData>>& H, std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) void ComputeFrequencyResponse_Sse2( size_t num_partitions, const std::vector<std::vector<FftData>>& H, std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "ComputeFrequencyResponse_Avx2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrequencyResponse_Avx2(size_t num_partitions, const std::vector<std::vector<FftData>>& H, std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "AdaptPartitions()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AdaptPartitions(const RenderBuffer& render_buffer, const FftData& G, size_t num_partitions, std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_HAS_NEON) void AdaptPartitions_Neon(const RenderBuffer& render_buffer, const FftData& G, size_t num_partitions, std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) void AdaptPartitions_Sse2(const RenderBuffer& render_buffer, const FftData& G, size_t num_partitions, std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "AdaptPartitions_Avx2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptPartitions_Avx2(const RenderBuffer& render_buffer, const FftData& G, size_t num_partitions, std::vector<std::vector<FftData>>* H)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ApplyFilter(const RenderBuffer& render_buffer, size_t num_partitions, const std::vector<std::vector<FftData>>& H, FftData* S)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_HAS_NEON) void ApplyFilter_Neon(const RenderBuffer& render_buffer, size_t num_partitions, const std::vector<std::vector<FftData>>& H, FftData* S)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) void ApplyFilter_Sse2(const RenderBuffer& render_buffer, size_t num_partitions, const std::vector<std::vector<FftData>>& H, FftData* S)"
  },
  {
    "label": "ApplyFilter_Avx2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter_Avx2(const RenderBuffer& render_buffer, size_t num_partitions, const std::vector<std::vector<FftData>>& H, FftData* S)"
  },
  {
    "label": "AdaptiveFirFilter()",
    "kind": "Method",
    "detail": "Function (# endif } class AdaptiveFirFilter { public :)",
    "insertText": "AdaptiveFirFilter(size_t max_size_partitions, size_t initial_size_partitions, size_t size_change_duration_blocks, size_t num_render_channels, Aec3Optimization optimization, ApmDataDumper* data_dumper)"
  },
  {
    "label": "AdaptiveFirFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AdaptiveFirFilter()"
  },
  {
    "label": "AdaptiveFirFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdaptiveFirFilter(const AdaptiveFirFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AdaptiveFirFilter&)",
    "insertText": "operator(const AdaptiveFirFilter&)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Filter(const RenderBuffer& render_buffer, FftData* S)"
  },
  {
    "label": "Adapt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adapt(const RenderBuffer& render_buffer, const FftData& G, std::vector<float>* impulse_response)"
  },
  {
    "label": "Adapt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adapt(const RenderBuffer& render_buffer, const FftData& G)"
  },
  {
    "label": "HandleEchoPathChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEchoPathChange()"
  },
  {
    "label": "SizePartitions()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SizePartitions()"
  },
  {
    "label": "ComputeFrequencyResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeFrequencyResponse(std::vector<std::array<float, kFftLengthBy2Plus1>>* H2)"
  },
  {
    "label": "max_filter_size_partitions()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "max_filter_size_partitions()"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (data_dumper_ ->)",
    "insertText": "DumpRaw(name_frequency_domain, H_[p][0].re)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (data_dumper_ ->)",
    "insertText": "DumpRaw(name_frequency_domain, H_[p][0].im)"
  },
  {
    "label": "ScaleFilter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ScaleFilter(float factor)"
  },
  {
    "label": "SetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilter(size_t num_partitions, const std::vector<std::vector<FftData>>& H)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::vector<FftData>>&)",
    "insertText": "GetFilter()"
  },
  {
    "label": "Constrain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Constrain()"
  },
  {
    "label": "ConstrainAndUpdateImpulseResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstrainAndUpdateImpulseResponse(std::vector<float>* impulse_response)"
  },
  {
    "label": "UpdateSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSize()"
  }
]