[
  {
    "label": "FRawObjectIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawObjectIterator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TObjectIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectIteratorBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TObjectIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectIterator"
  },
  {
    "label": "EEndTagType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EEndTagType"
  },
  {
    "label": "TObjectRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectRange"
  },
  {
    "label": "FRawObjectIterator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GarbageCollectionGlobals . h \" # include \" UObject / UObjectHash . h \" # include \" UObject / UObjectArray . h \" # include \" UObject / ObjectVisibility . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" class FRawObjectIterator : public FUObjectArray::TIterator { public :)",
    "insertText": "FRawObjectIterator(bool bOnlyGCedObjects = false) : FUObjectArray::TIterator( GUObjectArray, bOnlyGCedObjects)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FUObjectItem*)",
    "insertText": "operator()"
  },
  {
    "label": "GetObjectIteratorDefaultInternalExclusionFlags()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EObjectIteratorThreadSafetyOptions : uint8 { None = 0,ThreadSafe = 1,ThreadSafeAdvance = 2 } ; EInternalObjectFlags)",
    "insertText": "GetObjectIteratorDefaultInternalExclusionFlags(EInternalObjectFlags InternalExclusionFlags)"
  },
  {
    "label": "AdvanceIterator()",
    "kind": "Method",
    "detail": "Function (} template<EObjectIteratorThreadSafetyOptions IteratorThreadSafety> class TObjectIteratorBase : public FUObjectArray::TIterator { protected : bool)",
    "insertText": "AdvanceIterator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "if(IteratorThreadSafety != EObjectIteratorThreadSafetyOptions::ThreadSafeAdvance)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (bResult =)",
    "insertText": "Advance()"
  },
  {
    "label": "GetIteratedArray()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetIteratedArray().LockInternalArray()"
  },
  {
    "label": "GetIteratedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIteratedArray().UnlockInternalArray()"
  },
  {
    "label": "TObjectIteratorBase()",
    "kind": "Method",
    "detail": "Function (} return bResult ; } public :)",
    "insertText": "TObjectIteratorBase(UClass* InClass = UObject::StaticClass(), bool bOnlyGCedObjects = false, EObjectFlags AdditionalExclusionFlags = RF_NoFlags, EInternalObjectFlags InInternalExclusionFlags = EInternalObjectFlags::None) : FUObjectArray::TIterator(GUObjectArray, bOnlyGCedObjects) , Class(InClass) , ExclusionFlags(AdditionalExclusionFlags) , InternalExclusionFlags(GetObjectIteratorDefaultInternalExclusionFlags(InInternalExclusionFlags))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} do { UObject* Object =** this ;)",
    "insertText": "if(!(Object->HasAnyFlags(ExclusionFlags) || Object->HasAnyInternalFlags(InternalExclusionFlags) || (Class != UObject::StaticClass() && !Object->IsA(Class))))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "while(AdvanceIterator())"
  },
  {
    "label": "TObjectIteratorBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectIteratorBase(FUObjectArray::TIterator::EEndTagType, const TObjectIteratorBase& Begin) : FUObjectArray::TIterator(FUObjectArray::TIterator::EndTag, Begin) , Class(Begin.Class) , ExclusionFlags(Begin.ExclusionFlags) , InternalExclusionFlags(Begin.InternalExclusionFlags)"
  },
  {
    "label": "TObjectIteratorBase()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TObjectIteratorBase(const TObjectIteratorBase& Other) : FUObjectArray::TIterator(Other) , Class(Other.Class) , ExclusionFlags(Other.ExclusionFlags) , InternalExclusionFlags(Other.InternalExclusionFlags)"
  },
  {
    "label": "TObjectIteratorBase()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TObjectIteratorBase()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UObject* Object =** this ;)",
    "insertText": "if(!(Object->HasAnyFlags(ExclusionFlags) || (Class != UObject::StaticClass() && !Object->IsA(Class)) || Object->HasAnyInternalFlags(InternalExclusionFlags)))"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (FUObjectItem* ObjectItem =)",
    "insertText": "GetObject()"
  },
  {
    "label": "TObjectIterator()",
    "kind": "Method",
    "detail": "Function (typedef TObjectIteratorBase<EObjectIteratorThreadSafetyOptions::ThreadSafe> FThreadSafeObjectIterator ; typedef TObjectIteratorBase<EObjectIteratorThreadSafetyOptions::ThreadSafeAdvance> FPersistentThreadSafeObjectIterator ; template<class T> class TObjectIterator { public : enum EEndTagType { EndTag } ;)",
    "insertText": "TObjectIterator(EObjectFlags AdditionalExclusionFlags = RF_ClassDefaultObject, bool bIncludeDerivedClasses = true, EInternalObjectFlags InInternalExclusionFlags = EInternalObjectFlags::None) : Index(-1)"
  },
  {
    "label": "GetObjectsOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectsOfClass(T::StaticClass(), ObjectArray, bIncludeDerivedClasses, AdditionalExclusionFlags, GetObjectIteratorDefaultInternalExclusionFlags(InInternalExclusionFlags))"
  },
  {
    "label": "TObjectIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectIterator(EEndTagType, const TObjectIterator& Begin) : Index(Begin.ObjectArray.Num())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TObjectIterator& Rhs)"
  },
  {
    "label": "TObjectIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectIterator(bool bOnlyGCedObjects) : FThreadSafeObjectIterator(UObject::StaticClass(), bOnlyGCedObjects, RF_ClassDefaultObject)"
  },
  {
    "label": "TObjectIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectIterator(TObjectIteratorBase::EEndTagType, const TObjectIterator& Begin) : FThreadSafeObjectIterator(FUObjectArray::TIterator::EndTag, Begin)"
  },
  {
    "label": "TObjectRange()",
    "kind": "Method",
    "detail": "Function (break ; } } } } ; template<T> struct TObjectRange {)",
    "insertText": "TObjectRange(EObjectFlags AdditionalExclusionFlags = RF_ClassDefaultObject, bool bIncludeDerivedClasses = true, EInternalObjectFlags InInternalExclusionFlags = EInternalObjectFlags::None) : Begin(AdditionalExclusionFlags, bIncludeDerivedClasses, InInternalExclusionFlags)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TObjectIterator<T>)",
    "insertText": "begin(const TObjectRange& Range)"
  },
  {
    "label": "TObjectRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectRange(bool bOnlyGCedObjects) : Begin(bOnlyGCedObjects)"
  }
]