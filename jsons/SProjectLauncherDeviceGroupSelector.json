[
  {
    "label": "SProjectLauncherDeviceGroupSelector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherDeviceGroupSelector"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ILauncherProfileManager . h \" # include \" SlateFwd . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnProjectLauncherDeviceGroupSelected, const ILauncherDeviceGroupPtr&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherDeviceGroupSelector)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(ILauncherDeviceGroupPtr, InitiallySelectedGroup) SLATE_EVENT(FOnProjectLauncherDeviceGroupSelected, OnGroupSelected) SLATE_END_ARGS() public: ~SProjectLauncherDeviceGroupSelector()"
  },
  {
    "label": "OnDeviceGroupAdded()",
    "kind": "Method",
    "detail": "Function (ProfileManager ->)",
    "insertText": "OnDeviceGroupAdded().RemoveAll(this)"
  },
  {
    "label": "OnDeviceGroupRemoved()",
    "kind": "Method",
    "detail": "Function (ProfileManager ->)",
    "insertText": "OnDeviceGroupRemoved().RemoveAll(this)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "Construct(const FArguments& InArgs, const ILauncherProfileManagerRef& InProfileManager)"
  },
  {
    "label": "GetSelectedGroup()",
    "kind": "Method",
    "detail": "Function (ILauncherDeviceGroupPtr)",
    "insertText": "GetSelectedGroup()"
  },
  {
    "label": "SetSelectedGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedGroup(const ILauncherDeviceGroupPtr& DeviceGroup)"
  },
  {
    "label": "HandleDeviceGroupComboBoxAddClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "HandleDeviceGroupComboBoxAddClicked()"
  },
  {
    "label": "HandleDeviceGroupComboBoxContent()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleDeviceGroupComboBoxContent()"
  },
  {
    "label": "HandleDeviceGroupComboBoxGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleDeviceGroupComboBoxGenerateWidget(ILauncherDeviceGroupPtr InItem)"
  },
  {
    "label": "HandleDeviceGroupComboBoxGetEditableText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "HandleDeviceGroupComboBoxGetEditableText()"
  },
  {
    "label": "HandleDeviceGroupComboBoxRemoveClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDeviceGroupComboBoxRemoveClicked()"
  },
  {
    "label": "HandleDeviceGroupComboBoxSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeviceGroupComboBoxSelectionChanged(ILauncherDeviceGroupPtr Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnGroupSelected .)",
    "insertText": "ExecuteIfBound(Selection)"
  },
  {
    "label": "HandleDeviceGroupComboBoxSelectionRenamed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleDeviceGroupComboBoxSelectionRenamed(const FText& CommittedText, ETextCommit::Type)"
  },
  {
    "label": "HandleDeviceGroupComboBoxWidgetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleDeviceGroupComboBoxWidgetText(ILauncherDeviceGroupPtr Group)"
  },
  {
    "label": "HandleProfileManagerDeviceGroupsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProfileManagerDeviceGroupsChanged(const ILauncherDeviceGroupRef&)"
  }
]