[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_CASTS_H_ # define ABSL_BASE_CASTS_H_ # include<cstring> # include<memory> # include<type_traits> # include<utility> # if)",
    "insertText": "defined(__cpp_lib_bit_cast)"
  },
  {
    "label": "implicit_cast()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN template<To> To)",
    "insertText": "implicit_cast(typename absl::internal::identity_t<To> to)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# else template<Dest,Source,std::enable_if<)",
    "insertText": "sizeof(Dest) == sizeof(Source) && type_traits_internal::is_trivially_copyable<Source>::value && type_traits_internal::is_trivially_copyable<Dest>::value #if !ABSL_HAVE_BUILTIN(__builtin_bit_cast) && std::is_default_constructible<Dest>::value #endif , int>::type = 0> #if ABSL_HAVE_BUILTIN(__builtin_bit_cast) inline constexpr Dest bit_cast(const Source& source)"
  },
  {
    "label": "bit_cast()",
    "kind": "Method",
    "detail": "Function (} # else Dest)",
    "insertText": "bit_cast(const Source& source)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Dest dest ;)",
    "insertText": "memcpy(static_cast<void*>(std::addressof(dest)), static_cast<const void*>(std::addressof(source)), sizeof(dest))"
  }
]