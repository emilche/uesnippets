[
  {
    "label": "FBaseRevolveGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseRevolveGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRevolvePlanarPathGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRevolvePlanarPathGenerator"
  },
  {
    "label": "FRevolvePlanarPolygonGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRevolvePlanarPolygonGenerator"
  },
  {
    "label": "FSpiralRevolvePlanarPolygonGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpiralRevolvePlanarPolygonGenerator"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" Generators / SweepGenerator . h \" # include \" HAL / Platform . h \" # include \" Math / Vector2D . h \" # include \" MeshShapeGenerator . h \" namespace UE { namespace Geometry { class FBaseRevolveGenerator { public : enum class ECapFillMode { None,EarClipping,} ; int32 Steps = 1 6 ; float RevolveDegrees = 3 6 0 . 0 f ; float DegreeOffset = 0 . 0 f ; bool bReverseDirection = false ; bool bProfileAtMidpoint = false ; bool bFillPartialRevolveEndcaps = true ; FVector2d UVScale =)",
    "insertText": "FVector2d(1,1)"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (FVector2d UVOffset =)",
    "insertText": "FVector2d(0, 0)"
  },
  {
    "label": "GenerateMesh()",
    "kind": "Method",
    "detail": "Function (bool bUVScaleRelativeWorld = false ; float UnitUVInWorldCoordinates = 1 0 0 ; EProfileSweepQuadSplit QuadSplitMethod = EProfileSweepQuadSplit::Uniform ; double DiagonalTolerance = 0 . 0 1 ; EProfileSweepPolygonGrouping PolygonGroupingMode = EProfileSweepPolygonGrouping::PerFace ; } ; class FRevolvePlanarPathGenerator : public FBaseRevolveGenerator { public : TArray<FVector2d> PathVertices ; bool bCapped = true ; FDynamicMesh3)",
    "insertText": "GenerateMesh()"
  }
]