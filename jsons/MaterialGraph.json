[
  {
    "label": "UMaterialExpressionComment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionComment"
  },
  {
    "label": "UMaterialExpressionComposite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionComposite"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterialInputInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialInputInfo"
  },
  {
    "label": "UMaterialGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialGraph"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunction"
  },
  {
    "label": "UMaterialGraphNode_Root",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialGraphNode_Root"
  },
  {
    "label": "UMaterialGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialGraphNode"
  },
  {
    "label": "UMaterialGraphNode_Comment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialGraphNode_Comment"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / UniquePtr . h \" # include \" EdGraph / EdGraph . h \" # include \" Materials / Material . h \" # include \" RenderUtils . h \" # include \" MaterialGraph . generated . h \" class UMaterialExpressionComment ; class UMaterialExpressionComposite ; namespace UE::Shader { enum class EValueType : uint8 ; })",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FRealtimeStateGetter)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FSetMaterialDirty)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FToggleExpressionCollapsed, UMaterialExpression*)"
  },
  {
    "label": "FMaterialInputInfo()",
    "kind": "Method",
    "detail": "Function (struct FMaterialInputInfo {)",
    "insertText": "FMaterialInputInfo()"
  },
  {
    "label": "FMaterialInputInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialInputInfo(const FText& InName, EMaterialProperty InProperty, const FText& InToolTip) : Name( InName ) , Property( InProperty ) , ToolTip( InToolTip)"
  },
  {
    "label": "GetExpressionInput()",
    "kind": "Method",
    "detail": "Function (} FExpressionInput&)",
    "insertText": "GetExpressionInput(UMaterial* Material)"
  },
  {
    "label": "GetExpressionInputForProperty()",
    "kind": "Method",
    "detail": "Function (auto Ret = Material ->)",
    "insertText": "GetExpressionInputForProperty(Property)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Material->IsUIMaterial())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return false ; } else {)",
    "insertText": "if(Property == MP_MaterialAttributes)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} return true ; } } const FText&)",
    "insertText": "GetName()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyGraphChanged()"
  },
  {
    "label": "NotifyGraphChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NotifyGraphChanged(const FEdGraphEditAction& Action)"
  },
  {
    "label": "UMaterialGraph()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UMaterialGraph()"
  },
  {
    "label": "UMaterialGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UMaterialGraph(FVTableHelper& Helper)"
  },
  {
    "label": "RebuildGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildGraph()"
  },
  {
    "label": "AddExpression()",
    "kind": "Method",
    "detail": "Function (class UMaterialGraphNode*)",
    "insertText": "AddExpression(UMaterialExpression* Expression, bool bUserInvoked)"
  },
  {
    "label": "AddComment()",
    "kind": "Method",
    "detail": "Function (class UMaterialGraphNode_Comment*)",
    "insertText": "AddComment(UMaterialExpressionComment* Comment, bool bIsUserInvoked = false)"
  },
  {
    "label": "AddSubGraph()",
    "kind": "Method",
    "detail": "Function (UMaterialGraph*)",
    "insertText": "AddSubGraph(UMaterialExpression* InSubgraphExpression)"
  },
  {
    "label": "LinkGraphNodesFromMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkGraphNodesFromMaterial()"
  },
  {
    "label": "LinkMaterialExpressionsFromGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkMaterialExpressionsFromGraph()"
  },
  {
    "label": "IsInputActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputActive(class UEdGraphPin* GraphPin)"
  },
  {
    "label": "GetInputIndexForProperty()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInputIndexForProperty(EMaterialProperty Property)"
  },
  {
    "label": "GetUnusedExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUnusedExpressions(TArray<class UEdGraphNode*>& UnusedNodes)"
  },
  {
    "label": "UpdatePinTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePinTypes()"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "RebuildGraphInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildGraphInternal(const TMap<UMaterialExpression*, TArray<UMaterialExpression*>>& SubgraphExpressionMap, const TMap<UMaterialExpression*, TArray<UMaterialExpressionComment*>>& SubgraphCommentMap)"
  },
  {
    "label": "GetValidOutputIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetValidOutputIndex(FExpressionInput* Input)"
  }
]