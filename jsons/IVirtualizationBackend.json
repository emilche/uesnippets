[
  {
    "label": "FIoHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoHash"
  },
  {
    "label": "IVirtualizationBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualizationBackend"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IVirtualizationBackendFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVirtualizationBackendFactory"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" Containers / StringView . h \" # include \" Features / IModularFeature . h \" # include \" Features / IModularFeatures . h \" # include \" Templates / UniquePtr . h \" # include \" Virtualization / VirtualizationSystem . h \" struct FIoHash ; namespace UE::Virtualization { class IVirtualizationBackend { public : enum class EOperations : uint8 { None = 0,Push = 1<<0,Pull = 1<<1,} ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EOperations)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EConnectionStatus { None,Error,Connected,} ; enum class EPushFlags : uint32 { None = 0,Force = 1<<0 } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EPushFlags)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EPullFlags : uint32 { None = 0 } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EPullFlags)"
  },
  {
    "label": "IVirtualizationBackend()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "IVirtualizationBackend(FStringView InConfigName, FStringView InDebugName, EOperations InSupportedOperations) : SupportedOperations(InSupportedOperations) , DebugDisabledOperations(EOperations::None) , ConfigName(InConfigName) , DebugName(InDebugName)"
  },
  {
    "label": "IVirtualizationBackend()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "IVirtualizationBackend()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const FString& ConfigEntry)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect()"
  },
  {
    "label": "OnConnect()",
    "kind": "Method",
    "detail": "Function (ConnectionStatus =)",
    "insertText": "OnConnect()"
  },
  {
    "label": "GetConnectionStatus()",
    "kind": "Method",
    "detail": "Function (} } EConnectionStatus)",
    "insertText": "GetConnectionStatus()"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullData(TArrayView<FPullRequest> Requests, EPullFlags Flags, FText& OutErrors)"
  },
  {
    "label": "DoesPayloadExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPayloadExist(const FIoHash& Id)"
  },
  {
    "label": "DoPayloadsExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPayloadsExist(TArrayView<const FIoHash> PayloadIds, TArray<bool>& OutResults)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (OutResults .)",
    "insertText": "SetNum(PayloadIds.Num())"
  },
  {
    "label": "DoesPayloadExist()",
    "kind": "Method",
    "detail": "Function (OutResults [ Index ] =)",
    "insertText": "DoesPayloadExist(PayloadIds[Index])"
  },
  {
    "label": "DisableOperation()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "DisableOperation(EOperations Operation)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (EOperations OriginalValue = SupportedOperations ;)",
    "insertText": "EnumRemoveFlags(SupportedOperations, Operation)"
  },
  {
    "label": "SetOperationDebugState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOperationDebugState(EOperations Operation, bool bIsDisabled)"
  },
  {
    "label": "EnumAddFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumAddFlags(DebugDisabledOperations, Operation)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "EnumRemoveFlags(DebugDisabledOperations, Operation)"
  },
  {
    "label": "IsOperationDebugDisabled()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsOperationDebugDisabled(EOperations Operation)"
  },
  {
    "label": "GetConfigName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetConfigName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ENUM_CLASS_FLAGS(IVirtualizationBackend::EOperations)"
  },
  {
    "label": "UE_REGISTER_VIRTUALIZATION_BACKEND_FACTORY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_REGISTER_VIRTUALIZATION_BACKEND_FACTORY(BackendClass, ConfigName)"
  },
  {
    "label": "Factory()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ F # # BackendClass # #)",
    "insertText": "Factory()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RegisterModularFeature(FName(\"VirtualizationBackendFactory\"), this)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnregisterModularFeature(FName(\"VirtualizationBackendFactory\"), this)"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (} \\ private : \\ TUniquePtr<UE::Virtualization::IVirtualizationBackend>)",
    "insertText": "CreateInstance(FStringView ProjectName, FStringView ConfigName)"
  },
  {
    "label": "BackendClass()",
    "kind": "Method",
    "detail": "Function (\\ return MakeUnique<)",
    "insertText": "BackendClass(ProjectName, ConfigName, WriteToString<256>(#ConfigName, TEXT(\" - \"), ConfigName).ToString())"
  },
  {
    "label": "UE_REGISTER_VIRTUALIZATION_BACKEND_FACTORY_LEGACY_IMPL()",
    "kind": "Method",
    "detail": "Function (} \\ } ; \\ F # # BackendClass # # Factory BackendClass # # Factory # # Instance ; # define)",
    "insertText": "UE_REGISTER_VIRTUALIZATION_BACKEND_FACTORY_LEGACY_IMPL(FactoryName, BackendClass, LegacyConfigName, ConfigName)"
  },
  {
    "label": "FactoryName()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ F # #)",
    "insertText": "FactoryName(const TCHAR* InLegacyConfigName, const TCHAR* InNewConfigName) \\ : StoredLegacyConfigName(InLegacyConfigName) \\ , StoredNewConfigName(InNewConfigName)"
  },
  {
    "label": "FactoryName()",
    "kind": "Method",
    "detail": "Function (} \\ ~ F # #)",
    "insertText": "FactoryName()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG(LogVirtualization, Warning, TEXT(\"Creating a backend via the legacy config name '%s' use '%s' instead\"), *StoredLegacyConfigName, *StoredNewConfigName)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (} \\ FString StoredLegacyConfigName ; \\ FString StoredNewConfigName ; \\ } ; \\ F # # FactoryName FactoryName # #)",
    "insertText": "Instance(TEXT(#LegacyConfigName), TEXT(#ConfigName))"
  }
]