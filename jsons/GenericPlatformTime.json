[
  {
    "label": "FCPUTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCPUTime"
  },
  {
    "label": "FGenericPlatformTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformTime"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "FCPUTime()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # if PLATFORM_HAS_BSD_TIME # include<sys / time . h> # endif struct FCPUTime {)",
    "insertText": "FCPUTime(float InCPUTimePct, float InCPUTimePctRelative ) : CPUTimePct( InCPUTimePct ) , CPUTimePctRelative( InCPUTimePctRelative)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCPUTime&)",
    "insertText": "operator(const FCPUTime& Other)"
  },
  {
    "label": "InitTiming()",
    "kind": "Method",
    "detail": "Function (CPUTimePct + = Other . CPUTimePct ; CPUTimePctRelative + = Other . CPUTimePctRelative ; return* this ; } float CPUTimePct ; float CPUTimePctRelative ; } ; struct FGenericPlatformTime { # if PLATFORM_HAS_BSD_TIME double)",
    "insertText": "InitTiming()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Seconds()"
  },
  {
    "label": "gettimeofday()",
    "kind": "Method",
    "detail": "Function (struct timeval tv ;)",
    "insertText": "gettimeofday(&tv, NULL)"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Cycles()"
  },
  {
    "label": "Cycles64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Cycles64()"
  },
  {
    "label": "SystemTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SystemTime(int32& Year, int32& Month, int32& DayOfWeek, int32& Day, int32& Hour, int32& Min, int32& Sec, int32& MSec)"
  },
  {
    "label": "UtcTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UtcTime(int32& Year, int32& Month, int32& DayOfWeek, int32& Day, int32& Hour, int32& Min, int32& Sec, int32& MSec)"
  },
  {
    "label": "StrDate()",
    "kind": "Method",
    "detail": "Function (# endif TCHAR*)",
    "insertText": "StrDate(TCHAR* Dest, SIZE_T DestSize)"
  },
  {
    "label": "StrTime()",
    "kind": "Method",
    "detail": "Function (TCHAR*)",
    "insertText": "StrTime(TCHAR* Dest, SIZE_T DestSize)"
  },
  {
    "label": "StrTimestamp()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "StrTimestamp()"
  },
  {
    "label": "PrettyTime()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "PrettyTime(double Seconds)"
  },
  {
    "label": "UpdateCPUTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCPUTime(float DeltaTime)"
  },
  {
    "label": "GetCPUTime()",
    "kind": "Method",
    "detail": "Function (} FCPUTime)",
    "insertText": "GetCPUTime()"
  },
  {
    "label": "GetThreadCPUTime()",
    "kind": "Method",
    "detail": "Function (} FCPUTime)",
    "insertText": "GetThreadCPUTime()"
  },
  {
    "label": "GetLastIntervalCPUTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetLastIntervalCPUTimeInSeconds()"
  },
  {
    "label": "ToSeconds()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ToSeconds(const uint32 Cycles)"
  },
  {
    "label": "GetSecondsPerCycle64()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetSecondsPerCycle64()"
  },
  {
    "label": "ToMilliseconds64()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ToMilliseconds64(const uint64 Cycles)"
  },
  {
    "label": "ToSeconds64()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ToSeconds64(const uint64 Cycles)"
  }
]