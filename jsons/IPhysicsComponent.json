[
  {
    "label": "UPhysicsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsComponent"
  },
  {
    "label": "IPhysicsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPhysicsComponent"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / PhysicsObject . h \" # include \" Containers / Array . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Interface . h \" # include \" IPhysicsComponent . generated . h \")",
    "insertText": "UINTERFACE(MinimalApi, Experimental, meta = (CannotImplementInterfaceInBlueprint))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class IPhysicsComponent {)",
    "insertText": "GENERATED_BODY() public: virtual Chaos::FPhysicsObject* GetPhysicsObjectById(Chaos::FPhysicsObjectId Id)"
  },
  {
    "label": "GetPhysicsObjectByName()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObject*)",
    "insertText": "GetPhysicsObjectByName(const FName& Name)"
  },
  {
    "label": "GetAllPhysicsObjects()",
    "kind": "Method",
    "detail": "Function (TArray<Chaos::FPhysicsObject*>)",
    "insertText": "GetAllPhysicsObjects()"
  },
  {
    "label": "GetIdFromGTParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPhysicsObjectId)",
    "insertText": "GetIdFromGTParticle(Chaos::FGeometryParticle* Particle)"
  },
  {
    "label": "GetAllPhysicsObjectsById()",
    "kind": "Method",
    "detail": "Function (} ; template<TId> TArray<Chaos::FPhysicsObjectHandle>)",
    "insertText": "GetAllPhysicsObjectsById(IPhysicsComponent* Component, const TArray<TId>& AllIds)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (bool bIsId = std::is_same_v<TId,Chaos::FPhysicsObjectId> ; bool bIsName = std::is_same_v<TId,FName> ;)",
    "insertText": "static_assert(bIsId || bIsName, \"Invalid ID type passed to GetAllPhysicsObjectsById\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Objects .)",
    "insertText": "Add(Component->GetPhysicsObjectById(Id))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(bIsName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Objects .)",
    "insertText": "Add(Component->GetPhysicsObjectByName(Id))"
  }
]