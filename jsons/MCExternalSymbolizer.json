[
  {
    "label": "MCExternalSymbolizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExternalSymbolizer"
  },
  {
    "label": "MCExternalSymbolizer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCEXTERNALSYMBOLIZER_H # define LLVM_MC_MCEXTERNALSYMBOLIZER_H # include \" llvm - c / Disassembler . h \" # include \" llvm / MC / MCSymbolizer . h \" # include<memory> namespace llvm { class MCExternalSymbolizer : public MCSymbolizer { protected : LLVMOpInfoCallback GetOpInfo ; LLVMSymbolLookupCallback SymbolLookUp ; void* DisInfo ; public :)",
    "insertText": "MCExternalSymbolizer(MCContext &Ctx, std::unique_ptr<MCRelocationInfo> RelInfo, LLVMOpInfoCallback getOpInfo, LLVMSymbolLookupCallback symbolLookUp, void *disInfo) : MCSymbolizer(Ctx, std::move(RelInfo)), GetOpInfo(getOpInfo), SymbolLookUp(symbolLookUp), DisInfo(disInfo)"
  },
  {
    "label": "tryAddingSymbolicOperand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "tryAddingSymbolicOperand(MCInst &MI, raw_ostream &CommentStream, int64_t Value, uint64_t Address, bool IsBranch, uint64_t Offset, uint64_t InstSize)"
  },
  {
    "label": "tryAddingPcLoadReferenceComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tryAddingPcLoadReferenceComment(raw_ostream &CommentStream, int64_t Value, uint64_t Address)"
  }
]