[
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FStreamedAudioChunkSeekTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamedAudioChunkSeekTable"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "ICompressedAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompressedAudioInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "supports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "supports"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FDecodeResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDecodeResult"
  },
  {
    "label": "IStreamedCompressedInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStreamedCompressedInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "IAudioInfoFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IAudioInfoFactory"
  },
  {
    "label": "FCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapabilities"
  },
  {
    "label": "IAudioInfoFactoryRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IAudioInfoFactoryRegistry"
  },
  {
    "label": "FSimpleAudioInfoFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleAudioInfoFactory"
  },
  {
    "label": "FAsyncAudioDecompressWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncAudioDecompressWorker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FAsyncRealtimeAudioTaskWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncRealtimeAudioTaskWorker"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FAsyncRealtimeAudioTaskProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncRealtimeAudioTaskProxy"
  },
  {
    "label": "ICompressedAudioInfo()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "ICompressedAudioInfo()"
  },
  {
    "label": "StreamCompressedInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamCompressedInfo(USoundWave* Wave, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "StreamCompressedInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamCompressedInfo(const FSoundWaveProxyPtr& Wave, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "IStreamedCompressedInfo()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "IStreamedCompressedInfo()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Read(void *Outbuffer, uint32 DataSize)"
  },
  {
    "label": "DecompressToPCMBuffer()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DecompressToPCMBuffer(uint16 FrameSize)"
  },
  {
    "label": "IncrementCurrentSampleCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IncrementCurrentSampleCount(uint32 NewSamples)"
  },
  {
    "label": "WriteFromDecodedPCM()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteFromDecodedPCM(uint8* Destination, uint32 BufferSize)"
  },
  {
    "label": "ZeroBuffer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ZeroBuffer(uint8* Destination, uint32 BufferSize)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateLambda()"
  },
  {
    "label": "FAsyncAudioDecompressWorker()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FAsyncAudioDecompressWorker(USoundWave* InWave, int32 InNumPrecacheFrames, FAudioDevice* InAudioDevice = nullptr)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "check(false)"
  },
  {
    "label": "RETURN_QUICK_DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (V523)",
    "insertText": "RETURN_QUICK_DECLARE_CYCLE_STAT(FAsyncRealtimeAudioDecompressWorker, STATGROUP_ThreadPoolAsyncTasks)"
  },
  {
    "label": "ShouldUseBackgroundPoolFor_FAsyncRealtimeAudioTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseBackgroundPoolFor_FAsyncRealtimeAudioTask()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CritSect)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CritSect)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CritSect)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CritSect)"
  }
]