[
  {
    "label": "FFileSystemBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileSystemBackend"
  },
  {
    "label": "FFileSystemBackend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IVirtualizationBackend . h \" namespace UE::Virtualization { class FFileSystemBackend final : public IVirtualizationBackend { public :)",
    "insertText": "FFileSystemBackend(FStringView ProjectName, FStringView ConfigName, FStringView DebugName)"
  },
  {
    "label": "FFileSystemBackend()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFileSystemBackend()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Initialize(const FString& ConfigEntry)"
  },
  {
    "label": "OnConnect()",
    "kind": "Method",
    "detail": "Function (EConnectionStatus)",
    "insertText": "OnConnect()"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PushData(TArrayView<FPushRequest> Requests, EPushFlags Flags)"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullData(TArrayView<FPullRequest> Requests, EPullFlags Flags, FText& OutErrors)"
  },
  {
    "label": "DoesPayloadExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPayloadExist(const FIoHash& Id)"
  },
  {
    "label": "CreateFilePath()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateFilePath(const FIoHash& PayloadId, FStringBuilderBase& OutPath)"
  },
  {
    "label": "OpenFileForReading()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FArchive>)",
    "insertText": "OpenFileForReading(const TCHAR* FilePath)"
  }
]