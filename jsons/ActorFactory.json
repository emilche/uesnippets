[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FActorSpawnParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorSpawnParameters"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "UInstancedPlacemenClientSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedPlacemenClientSettings"
  },
  {
    "label": "AVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVolume"
  },
  {
    "label": "UBrushBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrushBuilder"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Factories / AssetFactoryInterface . h \" # include \" Engine / World . h \" # include \" ActorFactory . generated . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogActorFactory, Log, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class AActor ; struct FActorSpawnParameters ; struct FAssetData ; class UBlueprint ; class ULevel ; class UInstancedPlacemenClientSettings ; class AVolume ; class UBrushBuilder ;)",
    "insertText": "UCLASS(collapsecategories, hidecategories=Object, editinlinenew, config=Editor, abstract, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "CreateActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "CreateActor(UObject* InAsset, ULevel* InLevel, const FTransform& InTransform, const FActorSpawnParameters& InSpawnParams = FActorSpawnParameters())"
  },
  {
    "label": "CanCreateActorFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateActorFrom(const FAssetData& AssetData, FText& OutErrorMsg)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetDefaultActorClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetDefaultActorClass(const FAssetData& AssetData)"
  },
  {
    "label": "GetAssetFromActorInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetAssetFromActorInstance(AActor* ActorInstance)"
  },
  {
    "label": "AlignObjectToSurfaceNormal()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "AlignObjectToSurfaceNormal(const FVector& InSurfaceNormal, const FQuat& ActorRotation = FQuat::Identity)"
  },
  {
    "label": "CanPlaceElementsFromAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPlaceElementsFromAssetData(const FAssetData& InAssetData)"
  },
  {
    "label": "PrePlaceAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrePlaceAsset(FAssetPlacementInfo& InPlacementInfo, const FPlacementOptions& InPlacementOptions)"
  },
  {
    "label": "PlaceAsset()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "PlaceAsset(const FAssetPlacementInfo& InPlacementInfo, const FPlacementOptions& InPlacementOptions)"
  },
  {
    "label": "PostPlaceAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPlaceAsset(TArrayView<const FTypedElementHandle> InHandle, const FAssetPlacementInfo& InPlacementInfo, const FPlacementOptions& InPlacementOptions)"
  },
  {
    "label": "GetAssetDataFromElementHandle()",
    "kind": "Method",
    "detail": "Function (FAssetData)",
    "insertText": "GetAssetDataFromElementHandle(const FTypedElementHandle& InHandle)"
  },
  {
    "label": "BeginPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlacement(const FPlacementOptions& InPlacementOptions)"
  },
  {
    "label": "EndPlacement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlacement(TArrayView<const FTypedElementHandle> InPlacedElements, const FPlacementOptions& InPlacementOptions)"
  },
  {
    "label": "FactorySettingsObjectForPlacement()",
    "kind": "Method",
    "detail": "Function (UInstancedPlacemenClientSettings*)",
    "insertText": "FactorySettingsObjectForPlacement(const FAssetData& InAssetData, const FPlacementOptions& InPlacementOptions)"
  },
  {
    "label": "CreateBrushForVolumeActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBrushForVolumeActor(AVolume* NewActor, UBrushBuilder* BrushBuilder)"
  },
  {
    "label": "ValidateSpawnActorLevel()",
    "kind": "Method",
    "detail": "Function (protected : ULevel*)",
    "insertText": "ValidateSpawnActorLevel(ULevel* InLevel, const FActorSpawnParameters& InSpawnParams)"
  },
  {
    "label": "PreSpawnActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreSpawnActor(UObject* Asset, FTransform& InOutLocation)"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "SpawnActor(UObject* InAsset, ULevel* InLevel, const FTransform& InTransform, const FActorSpawnParameters& InSpawnParams)"
  },
  {
    "label": "PostSpawnActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSpawnActor(UObject* Asset, AActor* NewActor)"
  },
  {
    "label": "GetDefaultActorLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultActorLabel(UObject* Asset)"
  },
  {
    "label": "FindActorAlignmentRotation()",
    "kind": "Method",
    "detail": "Function (} ; FQuat)",
    "insertText": "FindActorAlignmentRotation(const FQuat& InActorRotation, const FVector& InModelAxis, const FVector& InWorldNormal, FQuat* OutDeltaRotation = nullptr)"
  }
]