[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextFilterString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterString"
  },
  {
    "label": "FNameBufferWithNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameBufferWithNumber"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" UObject / NameTypes . h \" enum class ETextFilterComparisonOperation : uint8 { Equal,NotEqual,Less,LessOrEqual,Greater,GreaterOrEqual,} ; enum class ETextFilterTextComparisonMode : uint8 { Exact,Partial,StartsWith,EndsWith,} ; enum { NAME_WITH_NUMBER_SIZE = NAME_SIZE + 1 6 } ; class FTextFilterString { public :)",
    "insertText": "FTextFilterString()"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterString(const FTextFilterString& Other)"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterString(FTextFilterString&& Other)"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterString(const FString& InString)"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterString(FString&& InString)"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterString(const TCHAR* InString)"
  },
  {
    "label": "FTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterString(const FName& InName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTextFilterString&)",
    "insertText": "operator(const FTextFilterString& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTextFilterString&)",
    "insertText": "operator(FTextFilterString&& Other)"
  },
  {
    "label": "CompareText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareText(const FTextFilterString& InOther, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "CompareFString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareFString(const FString& InOther, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "CompareFStringView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareFStringView(FStringView InOther, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "CompareName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareName(const FName& InOther, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "CanCompareNumeric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCompareNumeric(const FTextFilterString& InOther)"
  },
  {
    "label": "CompareNumeric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareNumeric(const FTextFilterString& InOther, const ETextFilterComparisonOperation InComparisonOperation)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "UppercaseInternalString()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UppercaseInternalString()"
  },
  {
    "label": "IntToStringBuffer()",
    "kind": "Method",
    "detail": "Function (FString InternalString ; TArray<ANSICHAR> InternalStringAnsi ; } ; namespace TextFilterUtils { template<CharType> void)",
    "insertText": "IntToStringBuffer(CharType* Dest, int32 Source, int32 MaxLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int64 Num = Source ; bool bIsNumberNegative = false ; const int32 TempBufferSize = 1 6 ; CharType TempNum [ TempBufferSize ] ; int32 TempAt = TempBufferSize ;)",
    "insertText": "if(Num < 0)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (bIsNumberNegative = true ; Num = - Num ; } TempNum [ - - TempAt ] = 0 ; do { TempNum [ - - TempAt ] =)",
    "insertText": "CharType('0') + (Num % 10)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Num / = 1 0 ; })",
    "insertText": "while(Num)"
  },
  {
    "label": "CharType()",
    "kind": "Method",
    "detail": "Function (TempNum [ - - TempAt ] =)",
    "insertText": "CharType('-')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const CharType* CharPtr = TempNum + TempAt ; const int32 NumChars = TempBufferSize - TempAt - 1 ;)",
    "insertText": "if(NumChars < MaxLen)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (TCString<CharType)",
    "insertText": "Strncpy(Dest, CharPtr, NumChars + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(MaxLen > 0)"
  },
  {
    "label": "FNameBufferWithNumber()",
    "kind": "Method",
    "detail": "Function (* Dest = 0 ; } } struct FNameBufferWithNumber { public :)",
    "insertText": "FNameBufferWithNumber() : bIsWide(false)"
  },
  {
    "label": "FNameBufferWithNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNameBufferWithNumber(const FName& Name) : bIsWide(false)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Name.GetDisplayNameEntry(), Name.GetNumber())"
  },
  {
    "label": "FNameBufferWithNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNameBufferWithNumber(const FNameEntry* const NameEntry, int32 NumberInternal) : bIsWide(false)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(NameEntry, NumberInternal)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FName& Name)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FNameEntry* const NameEntry, int32 NumberInternal)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (bIsWide = true ;)",
    "insertText": "Strncpy(WideName, TEXT(\"*INVALID*\"), NAME_SIZE)"
  },
  {
    "label": "GetWideName()",
    "kind": "Method",
    "detail": "Function (bIsWide = true ; NameEntry ->)",
    "insertText": "GetWideName(_WideName)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 Len =)",
    "insertText": "Strlen(WideName)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (WideName [ Len + + ] =)",
    "insertText": "TEXT('_')"
  },
  {
    "label": "IntToStringBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntToStringBuffer(WideName + Len, NAME_INTERNAL_TO_EXTERNAL(NumberInternal), 16)"
  },
  {
    "label": "GetAnsiName()",
    "kind": "Method",
    "detail": "Function (} } else { bIsWide = false ; NameEntry ->)",
    "insertText": "GetAnsiName(_AnsiName)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (int32 Len =)",
    "insertText": "Strlen(AnsiName)"
  },
  {
    "label": "IntToStringBuffer()",
    "kind": "Method",
    "detail": "Function (AnsiName [ Len + + ] = ' _ ' ;)",
    "insertText": "IntToStringBuffer(AnsiName + Len, NAME_INTERNAL_TO_EXTERNAL(NumberInternal), 16)"
  },
  {
    "label": "IsWide()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsWide()"
  },
  {
    "label": "NameStrincmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NameStrincmp(const FName& Name, const FString& WideOther, const TArray<ANSICHAR>& AnsiOther, int32 Length)"
  },
  {
    "label": "TestBasicStringExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestBasicStringExpression(const FTextFilterString& InValue1, const FTextFilterString& InValue2, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "TestComplexExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestComplexExpression(const FTextFilterString& InValue1, const FTextFilterString& InValue2, const ETextFilterComparisonOperation InComparisonOperation, const ETextFilterTextComparisonMode InTextComparisonMode)"
  }
]