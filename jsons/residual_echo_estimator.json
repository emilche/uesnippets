[
  {
    "label": "ResidualEchoEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResidualEchoEstimator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ResidualEchoEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_RESIDUAL_ECHO_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_RESIDUAL_ECHO_ESTIMATOR_H_ # include<array> # include<memory> # include \" absl / types / optional . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / aec_state . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / aec3 / reverb_model . h \" # include \" modules / audio_processing / aec3 / spectrum_buffer . h \" # include \" rtc_base / checks . h \" namespace webrtc { class ResidualEchoEstimator { public :)",
    "insertText": "ResidualEchoEstimator(const EchoCanceller3Config& config, size_t num_render_channels)"
  },
  {
    "label": "ResidualEchoEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ResidualEchoEstimator()"
  },
  {
    "label": "ResidualEchoEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResidualEchoEstimator(const ResidualEchoEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ResidualEchoEstimator&)",
    "insertText": "operator(const ResidualEchoEstimator&)"
  },
  {
    "label": "Estimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Estimate(const AecState& aec_state, const RenderBuffer& render_buffer, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> S2_linear, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2, bool dominant_nearend, rtc::ArrayView<std::array<float, kFftLengthBy2Plus1>> R2, rtc::ArrayView<std::array<float, kFftLengthBy2Plus1>> R2_unbounded)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (private : enum class ReverbType { kLinear,kNonLinear } ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateRenderNoisePower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRenderNoisePower(const RenderBuffer& render_buffer)"
  },
  {
    "label": "UpdateReverb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReverb(ReverbType reverb_type, const AecState& aec_state, const RenderBuffer& render_buffer, bool dominant_nearend)"
  },
  {
    "label": "AddReverb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReverb(rtc::ArrayView<std::array<float, kFftLengthBy2Plus1>> R2)"
  },
  {
    "label": "GetEchoPathGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEchoPathGain(const AecState& aec_state, bool gain_for_early_reflections)"
  }
]