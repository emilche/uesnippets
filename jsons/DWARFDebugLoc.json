[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DWARFDebugLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFDebugLoc"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "LocationList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocationList"
  },
  {
    "label": "DWARFDebugLocDWO",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DWARFDebugLocDWO"
  },
  {
    "label": "DWARFDebugLoc()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LIB_DEBUGINFO_DWARFDEBUGLOC_H # define LLVM_LIB_DEBUGINFO_DWARFDEBUGLOC_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / DebugInfo / DWARF / DWARFRelocMap . h \" # include \" llvm / Support / DataExtractor . h \" namespace llvm { class raw_ostream ; class DWARFDebugLoc { struct Entry { uint64_t Begin ; uint64_t End ; SmallVector<unsigned char,4> Loc ; } ; struct LocationList { unsigned Offset ; SmallVector<Entry,2> Entries ; } ; typedef SmallVector<LocationList,4> LocationLists ; LocationLists Locations ; const RelocAddrMap& RelocMap ; public :)",
    "insertText": "DWARFDebugLoc(const RelocAddrMap &LocRelocMap) : RelocMap(LocRelocMap)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump(raw_ostream &OS)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parse(DataExtractor data, unsigned AddressSize)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (} ; class DWARFDebugLocDWO { struct Entry { uint64_t Start ; uint32_t Length ; SmallVector<unsigned char,4> Loc ; } ; struct LocationList { unsigned Offset ; SmallVector<Entry,2> Entries ; } ; typedef SmallVector<LocationList,4> LocationLists ; LocationLists Locations ; public : void)",
    "insertText": "parse(DataExtractor data)"
  }
]