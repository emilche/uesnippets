[
  {
    "label": "JSONParserOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JSONParserOptions"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_JSON_JSON_READER_H_ # define BASE_JSON_JSON_READER_H_ # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / json / json_common . h \" # include \" base / strings / string_piece . h \" # include \" base / types / expected . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { enum JSONParserOptions { JSON_PARSE_RFC = 0,JSON_ALLOW_TRAILING_COMMAS = 1<<0,JSON_REPLACE_INVALID_CHARACTERS = 1<<1,JSON_ALLOW_COMMENTS = 1<<2,JSON_ALLOW_CONTROL_CHARS = 1<<3,JSON_ALLOW_VERT_TAB = 1<<4,JSON_ALLOW_X_ESCAPES = 1<<5,JSON_PARSE_CHROMIUM_EXTENSIONS = JSON_ALLOW_COMMENTS | JSON_ALLOW_CONTROL_CHARS | JSON_ALLOW_VERT_TAB | JSON_ALLOW_X_ESCAPES,} ; class BASE_EXPORT JSONReader { public : struct BASE_EXPORT Error {)",
    "insertText": "Error()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(Error&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Error&)",
    "insertText": "operator(Error&& other)"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(const Error&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Error&)",
    "insertText": "operator(const Error&)"
  },
  {
    "label": "JSONReader()",
    "kind": "Method",
    "detail": "Function (std::string message ; int line = 0 ; int column = 0 ; } ; using Result = base::expected<Value,Error> ;)",
    "insertText": "JSONReader()"
  },
  {
    "label": "JSONReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONReader(const JSONReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONReader&)",
    "insertText": "operator(const JSONReader&)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "Read(StringPiece json, int options = JSON_PARSE_CHROMIUM_EXTENSIONS, size_t max_depth = internal::kAbsoluteMaxDepth)"
  },
  {
    "label": "ReadDeprecated()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Value>)",
    "insertText": "ReadDeprecated(StringPiece json, int options = JSON_PARSE_CHROMIUM_EXTENSIONS, size_t max_depth = internal::kAbsoluteMaxDepth)"
  },
  {
    "label": "ReadAndReturnValueWithError()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "ReadAndReturnValueWithError(StringPiece json, int options = JSON_PARSE_CHROMIUM_EXTENSIONS)"
  }
]