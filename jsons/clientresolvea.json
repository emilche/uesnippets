[
  {
    "label": "ClientUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientUser"
  },
  {
    "label": "ClientResolveA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClientResolveA"
  },
  {
    "label": "AutoResolve()",
    "kind": "Method",
    "detail": "Function (# ifndef __CLIENTRESOLVEA__ # define __CLIENTRESOLVEA__ # include \" clientmerge . h \" class ClientUser ; class ClientResolveA { public : MergeStatus)",
    "insertText": "AutoResolve(MergeForce force)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (MergeStatus)",
    "insertText": "Resolve(int preview, Error *e)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const Error&)",
    "insertText": "GetType()"
  },
  {
    "label": "SetMergeAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMergeAction(const Error &msg)"
  },
  {
    "label": "SetYoursAction()",
    "kind": "Method",
    "detail": "Function (mergeA = msg ; } void)",
    "insertText": "SetYoursAction(const Error &msg)"
  },
  {
    "label": "SetTheirAction()",
    "kind": "Method",
    "detail": "Function (yoursA = msg ; } void)",
    "insertText": "SetTheirAction(const Error &msg)"
  },
  {
    "label": "SetMergePrompt()",
    "kind": "Method",
    "detail": "Function (theirA = msg ; } void)",
    "insertText": "SetMergePrompt(const Error &msg)"
  },
  {
    "label": "SetYoursPrompt()",
    "kind": "Method",
    "detail": "Function (mergeP = msg ; } void)",
    "insertText": "SetYoursPrompt(const Error &msg)"
  },
  {
    "label": "SetTheirPrompt()",
    "kind": "Method",
    "detail": "Function (yoursP = msg ; } void)",
    "insertText": "SetTheirPrompt(const Error &msg)"
  },
  {
    "label": "SetMergeOpt()",
    "kind": "Method",
    "detail": "Function (theirP = msg ; } void)",
    "insertText": "SetMergeOpt(const Error &msg)"
  },
  {
    "label": "SetYoursOpt()",
    "kind": "Method",
    "detail": "Function (mergeO = msg ; } void)",
    "insertText": "SetYoursOpt(const Error &msg)"
  },
  {
    "label": "SetTheirOpt()",
    "kind": "Method",
    "detail": "Function (yoursO = msg ; } void)",
    "insertText": "SetTheirOpt(const Error &msg)"
  },
  {
    "label": "SetHelpOpt()",
    "kind": "Method",
    "detail": "Function (theirO = msg ; } void)",
    "insertText": "SetHelpOpt(const Error &msg)"
  },
  {
    "label": "SetSkipOpt()",
    "kind": "Method",
    "detail": "Function (helpO = msg ; } void)",
    "insertText": "SetSkipOpt(const Error &msg)"
  },
  {
    "label": "SetAutoOpt()",
    "kind": "Method",
    "detail": "Function (skipO = msg ; } void)",
    "insertText": "SetAutoOpt(const Error &msg)"
  },
  {
    "label": "SetTypePrompt()",
    "kind": "Method",
    "detail": "Function (autoO = msg ; } void)",
    "insertText": "SetTypePrompt(const Error &msg)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (typeP = msg ; } void)",
    "insertText": "SetType(const Error &msg)"
  },
  {
    "label": "SetPrompt()",
    "kind": "Method",
    "detail": "Function (type = msg ; } void)",
    "insertText": "SetPrompt(const Error &msg)"
  },
  {
    "label": "SetHelp()",
    "kind": "Method",
    "detail": "Function (prompt = msg ; } void)",
    "insertText": "SetHelp(const Error &msg)"
  },
  {
    "label": "SetUsageError()",
    "kind": "Method",
    "detail": "Function (help = msg ; } void)",
    "insertText": "SetUsageError(const Error &msg)"
  },
  {
    "label": "SetMoveReaddIntegConflictIgnored()",
    "kind": "Method",
    "detail": "Function (error = msg ; } void)",
    "insertText": "SetMoveReaddIntegConflictIgnored(const Error &msg)"
  },
  {
    "label": "SetMoveReaddIntegConflictSkip()",
    "kind": "Method",
    "detail": "Function (moveReaddIntegConflictIgnored = msg ; } void)",
    "insertText": "SetMoveReaddIntegConflictSkip(const Error &msg)"
  },
  {
    "label": "SetAuto()",
    "kind": "Method",
    "detail": "Function (moveReaddIntegConflictSkip = msg ; } void)",
    "insertText": "SetAuto(MergeStatus s)"
  }
]