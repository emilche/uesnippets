[
  {
    "label": "FKSkinnedLevelSetElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKSkinnedLevelSetElem"
  },
  {
    "label": "FWeightedLatticeImplicitObjectFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedLatticeImplicitObjectFactory"
  },
  {
    "label": "FWeightedLatticeInfluenceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightedLatticeInfluenceData"
  },
  {
    "label": "FWeightedLatticeImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeightedLatticeImplicitObject"
  },
  {
    "label": "FEmbeddingCoordinate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmbeddingCoordinate"
  },
  {
    "label": "TWeightedLatticeImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWeightedLatticeImplicitObject"
  },
  {
    "label": "FWeightedLatticeImplicitObjectBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeightedLatticeImplicitObjectBuilder"
  },
  {
    "label": "FInfluenceBuildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInfluenceBuildData"
  },
  {
    "label": "struct",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "struct"
  },
  {
    "label": "FWeightedLatticeBoneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeightedLatticeBoneProxy"
  },
  {
    "label": "FWeightedLatticeInfluenceData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ImplicitObject . h \" # include \" Chaos / ArrayND . h \" # include \" Chaos / AABB . h \" # include \" Chaos / HierarchicalSpatialHash . h \" struct FKSkinnedLevelSetElem ; namespace Chaos { struct FWeightedLatticeImplicitObjectFactory ; struct FWeightedLatticeInfluenceData {)",
    "insertText": "FWeightedLatticeInfluenceData() : NumInfluences(0)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(BoneIndices, (uint8)INDEX_NONE, sizeof(BoneIndices))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(BoneWeights, 0, sizeof(BoneWeights))"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Result)",
    "insertText": "GetTypeHash(NumInfluences)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "HashCombine(Result, ::GetTypeHash(BoneIndices[Index]))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "HashCombine(Result, ::GetTypeHash(BoneWeights[Index]))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Result ; } const uint8 MaxTotalInfluences = 1 2 ; uint8 NumInfluences ; uint16 BoneIndices [ MaxTotalInfluences ] ; float BoneWeights [ MaxTotalInfluences ] ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FWeightedLatticeInfluenceData& Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Value . NumInfluences ;)",
    "insertText": "for(int32 Index = 0; Index < Value.NumInfluences; ++Index)"
  },
  {
    "label": "FWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (Ar<<Value . BoneIndices [ Index ] ; Ar<<Value . BoneWeights [ Index ] ; } return Ar ; } class FWeightedLatticeImplicitObject : public FImplicitObject { public : using ObjectType = FImplicitObjectPtr ; using FImplicitObject::GetTypeName ;)",
    "insertText": "FWeightedLatticeImplicitObject(int32 Flags, EImplicitObjectType InType, TUniformGrid<FReal, 3>&& InGrid, TArrayND<FWeightedLatticeInfluenceData, 3>&& InBoneData, TArray<FName>&& InUsedBones, TArray<FTransform>&& InReferenceRelativeTransforms)"
  },
  {
    "label": "FWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWeightedLatticeImplicitObject(FWeightedLatticeImplicitObject&& Other)"
  },
  {
    "label": "FWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWeightedLatticeImplicitObject()"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SolverBoneIndices =)",
    "insertText": "MoveTemp(InSolverBoneIndices)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "GetDeformedPoint()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetDeformedPoint(const FVec3& UndeformedPoint)"
  },
  {
    "label": "UpdateSpatialHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpatialHierarchy()"
  },
  {
    "label": "FinalizeConstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeConstruction()"
  },
  {
    "label": "DeformPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeformPoints(const TArray<FTransform>& RelativeTransforms)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (struct FEmbeddingCoordinate { TVec3<int32> CellIndex = TVec3<)",
    "insertText": "int32(INDEX_NONE, INDEX_NONE, INDEX_NONE)"
  },
  {
    "label": "FEmbeddingCoordinate()",
    "kind": "Method",
    "detail": "Function (int32 LocalTetrahedron = INDEX_NONE ; FVec3 BarycentricCoordinate ;)",
    "insertText": "FEmbeddingCoordinate()"
  },
  {
    "label": "FEmbeddingCoordinate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEmbeddingCoordinate(const FEmbeddingCoordinate& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEmbeddingCoordinate&)",
    "insertText": "operator(const FEmbeddingCoordinate& Other)"
  },
  {
    "label": "FEmbeddingCoordinate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEmbeddingCoordinate(const TVec3<int32>& InCellIndex, int32 InLocalTetrahedron, const FVec3& InBarycentric) :CellIndex(InCellIndex), LocalTetrahedron(InLocalTetrahedron), BarycentricCoordinate(InBarycentric)"
  },
  {
    "label": "FEmbeddingCoordinate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEmbeddingCoordinate(const TVec3<int32>& InCellIndex, const FVec3& TrilinearCoordinate)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const TVec4<TVec3<int32>> OddIndexTetrahedraOffsets [ 5 ] = { TVec4<TVec3<)",
    "insertText": "int32(TVec3<int32>(0,0,0), TVec3<int32>(1,0,0), TVec3<int32>(0,1,0), TVec3<int32>(0,0,1)), TVec4<TVec3<int32>>(TVec3<int32>(0,1,1), TVec3<int32>(0,1,0), TVec3<int32>(1,1,1), TVec3<int32>(0,0,1)), TVec4<TVec3<int32>>(TVec3<int32>(1,0,1), TVec3<int32>(1,1,1), TVec3<int32>(1,0,0), TVec3<int32>(0,0,1)), TVec4<TVec3<int32>>(TVec3<int32>(1,1,0), TVec3<int32>(0,1,0), TVec3<int32>(1,0,0), TVec3<int32>(1,1,1)), TVec4<TVec3<int32>>(TVec3<int32>(1,0,0), TVec3<int32>(1,1,1), TVec3<int32>(0,1,0), TVec3<int32>(0,0,1))"
  },
  {
    "label": "TetrahedronOffsets()",
    "kind": "Method",
    "detail": "Function (const TVec4<TVec3<int32>>&)",
    "insertText": "TetrahedronOffsets()"
  },
  {
    "label": "UndeformedPosition()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "UndeformedPosition(const TUniformGrid<FReal, 3>& InGrid)"
  },
  {
    "label": "DeformedPosition()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "DeformedPosition(const TArrayND<FVec3, 3>& InDeformedPoints)"
  },
  {
    "label": "GreatestInfluenceBone()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GreatestInfluenceBone(const TArrayND<FWeightedLatticeInfluenceData, 3>& InBoneData)"
  },
  {
    "label": "GetEmbeddingCoordinates()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetEmbeddingCoordinates(const FVec3& DeformedPoint, TArray<FEmbeddingCoordinate>& CoordinatesOut, bool bFindClosest = false)"
  },
  {
    "label": "FWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FWeightedLatticeImplicitObject(int32 Flags, EImplicitObjectType InType) :FImplicitObject(Flags, InType | ImplicitObjectType::IsWeightedLattice)"
  },
  {
    "label": "FWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWeightedLatticeImplicitObject(const FWeightedLatticeImplicitObject& Other)"
  },
  {
    "label": "InitializeDeformedPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDeformedPoints()"
  },
  {
    "label": "SetEmptyCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEmptyCells()"
  },
  {
    "label": "GetTypeHashHelper()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHashHelper(const uint32 InHash)"
  },
  {
    "label": "TWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (TUniformGrid<FReal,3> Grid ; TArrayND<FWeightedLatticeInfluenceData,3> BoneData ; TArray<FName> UsedBones ; FTransform ReferenceRootTransform ; TArray<FTransform> ReferenceRelativeTransforms ; TArrayND<bool,3> EmptyCells ; TArray<int32> SolverBoneIndices ; TAABB<FReal,3> LocalBoundingBox ; TArrayND<FVec3,3> DeformedPoints ; THierarchicalSpatialHash<int32,FReal> Spatial ; bool bSpatialDirty = true ; } ; template<TConcrete> class TWeightedLatticeImplicitObject : public FWeightedLatticeImplicitObject { public : using T = TConcrete::TType ; using TType = T ; using ObjectType = TRefCountPtr<TConcrete> ;)",
    "insertText": "TWeightedLatticeImplicitObject(ObjectType&& InObject, TUniformGrid<FReal, 3>&& InGrid, TArrayND<FWeightedLatticeInfluenceData, 3>&& InBoneData, TArray<FName>&& InUsedBones, TArray<FTransform>&& InReferenceRelativeTransforms)"
  },
  {
    "label": "TWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWeightedLatticeImplicitObject(TWeightedLatticeImplicitObject&& Other)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "GetEmbeddedObject()",
    "kind": "Method",
    "detail": "Function (} const TConcrete*)",
    "insertText": "GetEmbeddedObject()"
  },
  {
    "label": "CopyGeometry()",
    "kind": "Method",
    "detail": "Function (} FImplicitObjectPtr)",
    "insertText": "CopyGeometry()"
  },
  {
    "label": "DeepCopyGeometry()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectPtr)",
    "insertText": "DeepCopyGeometry()"
  },
  {
    "label": "PhiWithNormalAndSurfacePoint()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "PhiWithNormalAndSurfacePoint(const FVec3& X, FVec3& Normal, FEmbeddingCoordinate& SurfaceCoord, bool bIncludeEmptyCells = false)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "PhiWithNormal(const FVec3& x, FVec3& Normal)"
  },
  {
    "label": "PhiWithNormalAndSurfacePoint()",
    "kind": "Method",
    "detail": "Function (FEmbeddingCoordinate SurfaceCoordUnused ; bool bIncludeEmptyCells = true ; return)",
    "insertText": "PhiWithNormalAndSurfacePoint(x, Normal, SurfaceCoordUnused, bIncludeEmptyCells)"
  },
  {
    "label": "ScopedMemory()",
    "kind": "Method",
    "detail": "Function (FChaosArchiveScopedMemory)",
    "insertText": "ScopedMemory(Ar, GetTypeName(), false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "CopyHelper()",
    "kind": "Method",
    "detail": "Function (Ar<<Object ; } private : ObjectType Object ; TWeightedLatticeImplicitObject<TConcrete>*)",
    "insertText": "CopyHelper(const TWeightedLatticeImplicitObject<TConcrete>* Obj)"
  },
  {
    "label": "TWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TWeightedLatticeImplicitObject(ObjectType&& InObject, const FWeightedLatticeImplicitObject& Other) : FWeightedLatticeImplicitObject(Other) , Object(MoveTemp(InObject))"
  },
  {
    "label": "TWeightedLatticeImplicitObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TWeightedLatticeImplicitObject() : FWeightedLatticeImplicitObject(EImplicitObject::HasBoundingBox, StaticType()) , Object(nullptr)"
  },
  {
    "label": "GenerateGrid()",
    "kind": "Method",
    "detail": "Function (} FImplicitObject ;::FKSkinnedLevelSetElem ; } ; class FWeightedLatticeImplicitObjectBuilder { public : void)",
    "insertText": "GenerateGrid(const int32 GridResolution, const TAABB<FReal, 3>& ObjectBBox)"
  },
  {
    "label": "AddInfluence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInfluence(int32 FlatIndex, uint16 BoneIndex, float Weight, bool bIsOuterWeight)"
  },
  {
    "label": "FinalizeInfluences()",
    "kind": "Method",
    "detail": "Function (template<FBoneIndexToBoneName,FBoneIndexToReferenceTransform> void)",
    "insertText": "FinalizeInfluences(const FBoneIndexToBoneName& BoneIndexToBoneName, const FBoneIndexToReferenceTransform& BoneIndexToReferenceTransform)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (template<TConcrete> TRefCountPtr<TWeightedLatticeImplicitObject<TConcrete>>)",
    "insertText": "Generate(TRefCountPtr<TConcrete>&& Object)"
  },
  {
    "label": "GetGrid()",
    "kind": "Method",
    "detail": "Function (const TUniformGrid<FReal,3>&)",
    "insertText": "GetGrid()"
  },
  {
    "label": "CalcUsedBonesAndReIndex()",
    "kind": "Method",
    "detail": "Function (template<FBoneIndexToBoneName,FBoneIndexToReferenceTransform> void)",
    "insertText": "CalcUsedBonesAndReIndex(const FBoneIndexToBoneName& BoneIndexToBoneName, const FBoneIndexToReferenceTransform& BoneIndexToReferenceTransform)"
  },
  {
    "label": "FWeightedLatticeBoneProxy()",
    "kind": "Method",
    "detail": "Function (TUniformGrid<FReal,3> Grid ; TArrayND<FWeightedLatticeInfluenceData,3> BoneData ; TArray<FName> UsedBones ; TArray<FTransform> ReferenceRelativeTransforms ; struct FInfluenceBuildData { bool WeightsAreOuter = true ; } ; TArray<FInfluenceBuildData> BuildData ; enum struct EBuildStep { None = 0,GridValid,InfluencesFinalized,Finished = None,} ; EBuildStep BuildStep = EBuildStep::None ; } ; class FWeightedLatticeBoneProxy : public FImplicitObject { public : using FImplicitObject::GetTypeName ;)",
    "insertText": "FWeightedLatticeBoneProxy() : FImplicitObject(EImplicitObject::DisableCollisions, ImplicitObjectType::WeightedLatticeBone)"
  },
  {
    "label": "BarycentricCoordinate4()",
    "kind": "Method",
    "detail": "Function (int32 BoneIndex = INDEX_NONE ; const TVec4<float>)",
    "insertText": "BarycentricCoordinate4((float)BarycentricCoordinate.X, (float)BarycentricCoordinate.Y, (float)BarycentricCoordinate.Z, 1.f - (float)BarycentricCoordinate.X - (float)BarycentricCoordinate.Y - (float)BarycentricCoordinate.Z)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float LargestWeight = 0 . f ;)",
    "insertText": "for(int32 Coord = 0; Coord < 4; ++Coord)"
  },
  {
    "label": "InBoneData()",
    "kind": "Method",
    "detail": "Function (const FWeightedLatticeInfluenceData& Influences =)",
    "insertText": "InBoneData(CellIndex + TetOffsets[Coord])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float Weight = BarycentricCoordinate4 [ Coord ]* Influences . BoneWeights [ InfIndex ] ;)",
    "insertText": "if(Weight > LargestWeight)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSet<uint16> UsedBoneSet ;)",
    "insertText": "for(int32 Idx = 0; Idx < BoneData.Num(); ++Idx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FWeightedLatticeInfluenceData& Data = BoneData [ Idx ] ;)",
    "insertText": "for(uint8 InfIdx = 0; InfIdx < Data.NumInfluences; ++InfIdx)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UsedBoneSet .)",
    "insertText": "Add(Data.BoneIndices[InfIdx])"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (} } const TArray<uint16> UsedBoneIndices = UsedBoneSet .)",
    "insertText": "Array()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (UsedBones .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (UsedBones .)",
    "insertText": "SetNumUninitialized(UsedBoneIndices.Num())"
  },
  {
    "label": "ReferenceRootTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform)",
    "insertText": "ReferenceRootTransform(BoneIndexToReferenceTransform(INDEX_NONE)).Inverse()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<uint16,uint16> UsedBoneReverseLookup ;)",
    "insertText": "for(uint16 ArrayIdx = 0; ArrayIdx < (uint16)UsedBoneIndices.Num(); ++ArrayIdx)"
  },
  {
    "label": "BoneIndexToBoneName()",
    "kind": "Method",
    "detail": "Function (UsedBones [ ArrayIdx ] =)",
    "insertText": "BoneIndexToBoneName(UsedBoneIndices[ArrayIdx])"
  },
  {
    "label": "BoneIndexToReferenceTransform()",
    "kind": "Method",
    "detail": "Function (ReferenceRelativeTransforms [ ArrayIdx ] = ReferenceRootTransform*)",
    "insertText": "BoneIndexToReferenceTransform(UsedBoneIndices[ArrayIdx])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UsedBoneReverseLookup .)",
    "insertText": "Add(UsedBoneIndices[ArrayIdx], ArrayIdx)"
  },
  {
    "label": "NormalizeBoneWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeBoneWeights()"
  },
  {
    "label": "CalcUsedBonesAndReIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcUsedBonesAndReIndex(BoneIndexToBoneName, BoneIndexToReferenceTransform)"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<TWeightedLatticeImplicitObject<TConcrete>>)",
    "insertText": "Ret(new TWeightedLatticeImplicitObject<TConcrete>( MoveTemp(Object), MoveTemp(Grid), MoveTemp(BoneData), MoveTemp(UsedBones), MoveTemp(ReferenceRelativeTransforms)))"
  }
]