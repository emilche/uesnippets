[
  {
    "label": "AMF_NO_VTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AMF_NO_VTABLE"
  },
  {
    "label": "AMFPropertyStorageObserver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyStorageObserver"
  },
  {
    "label": "AMFPropertyStorageObserverVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyStorageObserverVtbl"
  },
  {
    "label": "AMFPropertyStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyStorage"
  },
  {
    "label": "AMFPropertyStorageVtbl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFPropertyStorageVtbl"
  },
  {
    "label": "AMF_RESULT",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AMF_RESULT"
  },
  {
    "label": "AMFGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AMFGuid"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef AMF_PropertyStorage_h # define AMF_PropertyStorage_h # pragma once # include \" Variant . h \" # if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "OnPropertyChanged()",
    "kind": "Method",
    "detail": "Function (public : void AMF_STD_CALL)",
    "insertText": "OnPropertyChanged(const wchar_t* name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; # else typedef struct AMFPropertyStorageObserver AMFPropertyStorageObserver ; typedef struct AMFPropertyStorageObserverVtbl {)",
    "insertText": "void(AMF_STD_CALL *OnPropertyChanged)(AMFPropertyStorageObserver *pThis, const wchar_t* name)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AMF_DECLARE_IID(0xc7cec05b, 0xcfb9, 0x48af, 0xac, 0xe3, 0xf6, 0x8d, 0xf8, 0x39, 0x5f, 0xe3) virtual AMF_RESULT AMF_STD_CALL SetProperty(const wchar_t* name, AMFVariantStruct value)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetProperty(const wchar_t* name, AMFVariantStruct* pValue)"
  },
  {
    "label": "HasProperty()",
    "kind": "Method",
    "detail": "Function (amf_bool AMF_STD_CALL)",
    "insertText": "HasProperty(const wchar_t* name)"
  },
  {
    "label": "GetPropertyCount()",
    "kind": "Method",
    "detail": "Function (amf_size AMF_STD_CALL)",
    "insertText": "GetPropertyCount()"
  },
  {
    "label": "GetPropertyAt()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetPropertyAt(amf_size index, wchar_t* name, amf_size nameSize, AMFVariantStruct* pValue)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "Clear()"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "AddTo(AMFPropertyStorage* pDest, amf_bool overwrite, amf_bool deep)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT AMF_STD_CALL)",
    "insertText": "CopyTo(AMFPropertyStorage* pDest, amf_bool deep)"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (void AMF_STD_CALL)",
    "insertText": "AddObserver(AMFPropertyStorageObserver* pObserver)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void AMF_STD_CALL)",
    "insertText": "RemoveObserver(AMFPropertyStorageObserver* pObserver)"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (template<_T> AMF_RESULT AMF_STD_CALL)",
    "insertText": "SetProperty(const wchar_t* name, const _T& value)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (template<_T> AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetProperty(const wchar_t* name, _T* pValue)"
  },
  {
    "label": "GetPropertyString()",
    "kind": "Method",
    "detail": "Function (template<_T> AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetPropertyString(const wchar_t* name, _T* pValue)"
  },
  {
    "label": "GetPropertyWString()",
    "kind": "Method",
    "detail": "Function (template<_T> AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetPropertyWString(const wchar_t* name, _T* pValue)"
  },
  {
    "label": "AMF_DECLARE_IID()",
    "kind": "Method",
    "detail": "Function (} ; typedef AMFInterfacePtr_T<AMFPropertyStorage> AMFPropertyStoragePtr ; # else typedef struct AMFPropertyStorage AMFPropertyStorage ;)",
    "insertText": "AMF_DECLARE_IID(AMFPropertyStorage, 0xc7cec05b, 0xcfb9, 0x48af, 0xac, 0xe3, 0xf6, 0x8d, 0xf8, 0x39, 0x5f, 0xe3)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_long(AMF_STD_CALL *Acquire)(AMFPropertyStorage* pThis)"
  },
  {
    "label": "amf_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_long(AMF_STD_CALL *Release)(AMFPropertyStorage* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (enum)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *QueryInterface)(AMFPropertyStorage* pThis, const struct AMFGuid *interfaceID, void** ppInterface)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *SetProperty)(AMFPropertyStorage* pThis, const wchar_t* name, AMFVariantStruct value)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetProperty)(AMFPropertyStorage* pThis, const wchar_t* name, AMFVariantStruct* pValue)"
  },
  {
    "label": "amf_bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_bool(AMF_STD_CALL *HasProperty)(AMFPropertyStorage* pThis, const wchar_t* name)"
  },
  {
    "label": "amf_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "amf_size(AMF_STD_CALL *GetPropertyCount)(AMFPropertyStorage* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *GetPropertyAt)(AMFPropertyStorage* pThis, amf_size index, wchar_t* name, amf_size nameSize, AMFVariantStruct* pValue)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *Clear)(AMFPropertyStorage* pThis)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *AddTo)(AMFPropertyStorage* pThis, AMFPropertyStorage* pDest, amf_bool overwrite, amf_bool deep)"
  },
  {
    "label": "AMF_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AMF_RESULT(AMF_STD_CALL *CopyTo)(AMFPropertyStorage* pThis, AMFPropertyStorage* pDest, amf_bool deep)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *AddObserver)(AMFPropertyStorage* pThis, AMFPropertyStorageObserver* pObserver)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(AMF_STD_CALL *RemoveObserver)(AMFPropertyStorage* pThis, AMFPropertyStorageObserver* pObserver)"
  },
  {
    "label": "AMF_ASSIGN_PROPERTY_DATA()",
    "kind": "Method",
    "detail": "Function (} AMFPropertyStorageVtbl ; struct AMFPropertyStorage { const AMFPropertyStorageVtbl* pVtbl ; } ; # define)",
    "insertText": "AMF_ASSIGN_PROPERTY_DATA(res, varType, pThis, name, val)"
  },
  {
    "label": "varType()",
    "kind": "Method",
    "detail": "Function (\\ AMFVariantStruct var = { 0 } ; \\ AMFVariantAssign # #)",
    "insertText": "varType(&var, val)"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (\\ res = pThis -> pVtbl ->)",
    "insertText": "SetProperty(pThis, name, var)"
  },
  {
    "label": "AMF_QUERY_INTERFACE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "AMF_QUERY_INTERFACE(res, from, InterfaceTypeTo, to)"
  },
  {
    "label": "InterfaceTypeTo()",
    "kind": "Method",
    "detail": "Function (\\ AMFGuid guid_ # # InterfaceTypeTo = IID_ # #)",
    "insertText": "InterfaceTypeTo()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (\\ res = from -> pVtbl ->)",
    "insertText": "QueryInterface(from, &guid_##InterfaceTypeTo, (void**)&to)"
  },
  {
    "label": "AMF_ASSIGN_PROPERTY_INTERFACE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "AMF_ASSIGN_PROPERTY_INTERFACE(res, pThis, name, val)"
  },
  {
    "label": "AMFVariantInit()",
    "kind": "Method",
    "detail": "Function (\\ AMFInterface* amf_interface ; \\ AMFVariantStruct var ; \\ res =)",
    "insertText": "AMFVariantInit(&var)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(res == AMF_OK)"
  },
  {
    "label": "AMF_QUERY_INTERFACE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AMF_QUERY_INTERFACE(res, val, AMFInterface, amf_interface)\\ if (res == AMF_OK)"
  },
  {
    "label": "AMFVariantAssignInterface()",
    "kind": "Method",
    "detail": "Function (\\ res =)",
    "insertText": "AMFVariantAssignInterface(&var, amf_interface)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (\\ amf_interface -> pVtbl ->)",
    "insertText": "Release(amf_interface)"
  },
  {
    "label": "AMFVariantClear()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\)",
    "insertText": "AMFVariantClear(&var)"
  },
  {
    "label": "AMF_GET_PROPERTY_INTERFACE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "AMF_GET_PROPERTY_INTERFACE(res, pThis, name, TargetType, val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(res != AMF_OK)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (\\ res = pThis -> pVtbl ->)",
    "insertText": "GetProperty(pThis, name, &var)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(var.type == AMF_VARIANT_INTERFACE && AMFVariantInterface(&var))"
  },
  {
    "label": "AMF_QUERY_INTERFACE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "AMF_QUERY_INTERFACE(res, AMFVariantInterface(&var), TargetType, val)"
  },
  {
    "label": "AMF_ASSIGN_PROPERTY_TYPE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "AMF_ASSIGN_PROPERTY_TYPE(res, varType, dataType , pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, varType, pThis, name, (dataType)val) #define AMF_ASSIGN_PROPERTY_INT64(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_TYPE(res, Int64, amf_int64, pThis, name, val) #define AMF_ASSIGN_PROPERTY_DOUBLE(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_TYPE(res, Double, amf_double, pThis, name, val) #define AMF_ASSIGN_PROPERTY_BOOL(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_TYPE(res, Bool, amf_bool, pThis, name, val) #define AMF_ASSIGN_PROPERTY_RECT(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, Rect, pThis, name, &val) #define AMF_ASSIGN_PROPERTY_SIZE(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, Size, pThis, name, &val) #define AMF_ASSIGN_PROPERTY_POINT(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, Point, pThis, name, &val) #define AMF_ASSIGN_PROPERTY_RATE(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, Rate, pThis, name, &val) #define AMF_ASSIGN_PROPERTY_RATIO(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, Ratio, pThis, name, &val) #define AMF_ASSIGN_PROPERTY_COLOR(res, pThis, name, val ) AMF_ASSIGN_PROPERTY_DATA(res, Color, pThis, name, &val) #endif #if defined(__cplusplus) template<typename _T> inline AMF_RESULT AMF_STD_CALL AMFPropertyStorage::SetProperty(const wchar_t* name, const _T& value)"
  },
  {
    "label": "SetProperty()",
    "kind": "Method",
    "detail": "Function (AMF_RESULT err =)",
    "insertText": "SetProperty(name, static_cast<const AMFVariantStruct&>(AMFVariant(value)))"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (AMFVariant var ; AMF_RESULT err =)",
    "insertText": "GetProperty(name, static_cast<AMFVariantStruct*>(&var))"
  },
  {
    "label": "_T()",
    "kind": "Method",
    "detail": "Function (* pValue = static_cast<)",
    "insertText": "_T(var)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (* pValue = var .)",
    "insertText": "ToString().c_str()"
  },
  {
    "label": "ToWString()",
    "kind": "Method",
    "detail": "Function (* pValue = var .)",
    "insertText": "ToWString().c_str()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} return err ; } template<> AMF_RESULT AMF_STD_CALL)",
    "insertText": "GetProperty(const wchar_t* name, AMFInterface** ppValue)"
  },
  {
    "label": "AMFInterface()",
    "kind": "Method",
    "detail": "Function (* ppValue = static_cast<)",
    "insertText": "AMFInterface(var)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(*ppValue)"
  }
]