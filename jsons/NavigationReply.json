[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavigationReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationReply"
  },
  {
    "label": "FSlateApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplication"
  },
  {
    "label": "FSlateNavigationEventSimulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateNavigationEventSimulator"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" NavigationReply . generated . h \" class SWidget ; enum class EUINavigation : uint8 ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (Escape,,Wrap,Stop,Custom,CustomBoundary,Invalid } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedPtr<SWidget>, FNavigationDelegate, EUINavigation)"
  },
  {
    "label": "GetHandler()",
    "kind": "Method",
    "detail": "Function (class FNavigationReply { public : const TSharedPtr<SWidget>)",
    "insertText": "GetHandler()"
  },
  {
    "label": "Custom()",
    "kind": "Method",
    "detail": "Function (FNavigationReply NewReply ; NewReply . BoundaryRule = EUINavigationRule::; NewReply . FocusRecipient = InFocusRecipient ; return NewReply ; } FNavigationReply)",
    "insertText": "Custom(const FNavigationDelegate& InFocusDelegate)"
  },
  {
    "label": "CustomBoundary()",
    "kind": "Method",
    "detail": "Function (FNavigationReply NewReply ; NewReply . BoundaryRule = EUINavigationRule::Custom ; NewReply . FocusDelegate = InFocusDelegate ; return NewReply ; } FNavigationReply)",
    "insertText": "CustomBoundary(const FNavigationDelegate& InFocusDelegate)"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (FNavigationReply NewReply ; NewReply . BoundaryRule = EUINavigationRule::CustomBoundary ; NewReply . FocusDelegate = InFocusDelegate ; return NewReply ; } FNavigationReply)",
    "insertText": "Wrap()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (FNavigationReply NewReply ; NewReply . BoundaryRule = EUINavigationRule::Wrap ; return NewReply ; } FNavigationReply)",
    "insertText": "Stop()"
  },
  {
    "label": "Escape()",
    "kind": "Method",
    "detail": "Function (FNavigationReply NewReply ; NewReply . BoundaryRule = EUINavigationRule::Stop ; return NewReply ; } FNavigationReply)",
    "insertText": "Escape()"
  },
  {
    "label": "SetHandler()",
    "kind": "Method",
    "detail": "Function (FNavigationReply NewReply ; NewReply . BoundaryRule = EUINavigationRule::Escape ; return NewReply ; } private : FNavigationReply&)",
    "insertText": "SetHandler(const TSharedRef<SWidget>& InHandler)"
  },
  {
    "label": "FNavigationReply()",
    "kind": "Method",
    "detail": "Function (this -> EventHandler = InHandler ; return* this ; })",
    "insertText": "FNavigationReply() : EventHandler(nullptr) , FocusRecipient(nullptr) , FocusDelegate() , BoundaryRule(EUINavigationRule::Escape)"
  },
  {
    "label": "FNavigationReply()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavigationReply(EUINavigationRule InBoundaryRule, TSharedPtr<SWidget> InFocusRecipient, const FNavigationDelegate& InFocusDelegate) : EventHandler(nullptr) , FocusRecipient(InFocusRecipient) , FocusDelegate(InFocusDelegate) , BoundaryRule(InBoundaryRule)"
  }
]