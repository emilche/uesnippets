[
  {
    "label": "StringView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringView"
  },
  {
    "label": "StringBufferBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBufferBase"
  },
  {
    "label": "StringBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBuffer"
  },
  {
    "label": "LastErrorToText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LastErrorToText"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaMemory . h \" namespace uba { struct StringView ; bool)",
    "insertText": "StartsWith(const tchar* data, const tchar* str, bool ignoreCase = true)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWith(const tchar* str, u64 strLen, const tchar* value, bool ignoreCase = true)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const tchar* str, const tchar* sub, bool ignoreCase = true, const tchar** pos = nullptr)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const tchar* str1, const tchar* str2, bool ignoreCase = true)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const tchar* str1, const tchar* str2, u64 count, bool ignoreCase = true)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Replace(tchar* str, tchar from, tchar to)"
  },
  {
    "label": "FixPathSeparators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixPathSeparators(tchar* str)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(u64& out, const tchar* str, u64 strLen)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToLower(tchar* str)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (+ + str ; } } tchar)",
    "insertText": "ToLower(tchar c)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (} tchar)",
    "insertText": "ToUpper(tchar c)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} class StringBufferBase { public : StringBufferBase&)",
    "insertText": "Append(const StringBufferBase& str)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} StringBufferBase&)",
    "insertText": "Append(const TString& str)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} StringBufferBase&)",
    "insertText": "Append(const tchar* str)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Append(const tchar c)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} StringBufferBase&)",
    "insertText": "Append(const tchar* str, u64 charCount)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Append(const StringView& view)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Appendf(const tchar* format, ...)"
  },
  {
    "label": "AppendDir()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "AppendDir(const StringBufferBase& str)"
  },
  {
    "label": "AppendDir()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "AppendDir(const tchar* dir)"
  },
  {
    "label": "AppendFileName()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "AppendFileName(const tchar* str)"
  },
  {
    "label": "AppendHex()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "AppendHex(u64 v)"
  },
  {
    "label": "AppendValue()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "AppendValue(u64 v)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Append(const tchar* format, va_list& args)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Resize(u64 newSize)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Clear()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS StringBufferBase&)",
    "insertText": "Append(const char* str)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Append(const char* str, u32 charCount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif tchar)",
    "insertText": "operator(u64 i)"
  },
  {
    "label": "EndsWith()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EndsWith(const tchar* value, bool ignoreCase = true)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(tchar c)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const tchar* str, bool ignoreCase = true, const tchar** pos = nullptr)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const tchar* str, bool ignoreCase = true)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} const tchar*)",
    "insertText": "First(tchar c, u64 offset = 0)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "Last(tchar c, u64 offset = 0)"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetFileName()"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "Replace(tchar from, tchar to)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Replace(data, from, to)"
  },
  {
    "label": "FixPathSeparators()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "FixPathSeparators()"
  },
  {
    "label": "MakeLower()",
    "kind": "Method",
    "detail": "Function (StringBufferBase&)",
    "insertText": "MakeLower()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(u64& out)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(u32& out)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(u16& out)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(float& out)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "Parse(char* out, u64 outCapacity)"
  },
  {
    "label": "StringBufferBase()",
    "kind": "Method",
    "detail": "Function (u32 count ; u32 capacity ; tchar data [ 1 ] ; protected :)",
    "insertText": "StringBufferBase(u32 c) : capacity(c)"
  },
  {
    "label": "StringBuffer()",
    "kind": "Method",
    "detail": "Function (count = 0 ;* data = 0 ; } } ; template<u32 Capacity = 5 1 2> class StringBuffer : public StringBufferBase { public :)",
    "insertText": "StringBuffer() : StringBufferBase(Capacity)"
  },
  {
    "label": "StringBuffer()",
    "kind": "Method",
    "detail": "Function (* buf = 0 ; })",
    "insertText": "StringBuffer(const TString& str) : StringBufferBase(Capacity)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (* buf = 0 ;)",
    "insertText": "Append(str)"
  },
  {
    "label": "StringBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringBuffer(const tchar* str) : StringBufferBase(Capacity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* buf = 0 ;)",
    "insertText": "if(str) Append(str)"
  },
  {
    "label": "StringBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringBuffer(const StringBufferBase& str) : StringBufferBase(Capacity)"
  },
  {
    "label": "StringView()",
    "kind": "Method",
    "detail": "Function (} private : tchar buf [ Capacity ] ; } ; struct StringView {)",
    "insertText": "StringView() : data(TC(\"\")), count(0)"
  },
  {
    "label": "StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringView(const tchar* d, u32 c) : data(d), count(c)"
  },
  {
    "label": "StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringView(const StringBufferBase& sb) : data(sb.data), count(sb.count)"
  },
  {
    "label": "StringView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StringView(const TString& str) : data(str.data()), count(u32(str.size()))"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const tchar* str, bool ignoreCase = true)"
  },
  {
    "label": "ToView()",
    "kind": "Method",
    "detail": "Function (} const tchar* data ; u32 count ; } ; StringView)",
    "insertText": "ToView(const tchar* s)"
  },
  {
    "label": "LastErrorToText()",
    "kind": "Method",
    "detail": "Function (struct LastErrorToText : StringBuffer<2 5 6> {)",
    "insertText": "LastErrorToText()"
  },
  {
    "label": "LastErrorToText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LastErrorToText(u32 lastError)"
  },
  {
    "label": "tchar()",
    "kind": "Method",
    "detail": "Function (operator const)",
    "insertText": "tchar()"
  }
]