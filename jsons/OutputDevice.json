[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FLogRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLogRecord"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "SET_WARN_COLOR()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreFwd . h \" # include \" CoreTypes . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / VarArgs . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / IsValidVariadicFunctionArg . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" class FString ; class FText ; namespace UE { class FLogRecord ; } # ifndef USE_DEBUG_LOGGING # define USE_DEBUG_LOGGING 1 # endif # ifndef USE_EVENT_LOGGING # define USE_EVENT_LOGGING 1 # endif # if ! PLATFORM_SUPPORTS_COLORIZED_OUTPUT_DEVICE # define)",
    "insertText": "SET_WARN_COLOR(Color) #define SET_WARN_COLOR_AND_BACKGROUND(Color, Bkgrnd) #define CLEAR_WARN_COLOR()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_BLACK =)",
    "insertText": "TEXT(\"0000\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_RED =)",
    "insertText": "TEXT(\"1000\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_GREEN =)",
    "insertText": "TEXT(\"0100\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_BLUE =)",
    "insertText": "TEXT(\"0010\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_YELLOW =)",
    "insertText": "TEXT(\"1100\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_CYAN =)",
    "insertText": "TEXT(\"0110\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_PURPLE =)",
    "insertText": "TEXT(\"1010\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_DARK_WHITE =)",
    "insertText": "TEXT(\"1110\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_GRAY = COLOR_DARK_WHITE ; const TCHAR* const COLOR_RED =)",
    "insertText": "TEXT(\"1001\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_GREEN =)",
    "insertText": "TEXT(\"0101\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_BLUE =)",
    "insertText": "TEXT(\"0011\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_YELLOW =)",
    "insertText": "TEXT(\"1101\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_CYAN =)",
    "insertText": "TEXT(\"0111\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_PURPLE =)",
    "insertText": "TEXT(\"1011\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_WHITE =)",
    "insertText": "TEXT(\"1111\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* const COLOR_NONE =)",
    "insertText": "TEXT(\"\")"
  },
  {
    "label": "SET_WARN_COLOR()",
    "kind": "Method",
    "detail": "Function (} using namespace OutputDeviceColor ; # ifndef SET_WARN_COLOR # define)",
    "insertText": "SET_WARN_COLOR(Color) \\ UE_LOG(LogHAL, SetColor, TEXT(\"%s\"), Color)"
  },
  {
    "label": "SET_WARN_COLOR_AND_BACKGROUND()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SET_WARN_COLOR_AND_BACKGROUND(Color, Bkgrnd) \\ UE_LOG(LogHAL, SetColor, TEXT(\"%s%s\"), Color, Bkgrnd)"
  },
  {
    "label": "CLEAR_WARN_COLOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CLEAR_WARN_COLOR() \\ UE_LOG(LogHAL, SetColor, TEXT(\"%s\"), COLOR_NONE)"
  },
  {
    "label": "FOutputDevice()",
    "kind": "Method",
    "detail": "Function (# endif # endif namespace ELogTimes { enum Type { None,UTC,SinceGStartTime,Local,Timecode } ; } class FName ; class FOutputDevice { public :)",
    "insertText": "FOutputDevice()"
  },
  {
    "label": "FOutputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOutputDevice(FOutputDevice&&)"
  },
  {
    "label": "FOutputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOutputDevice(const FOutputDevice&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOutputDevice&)",
    "insertText": "operator(FOutputDevice&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOutputDevice&)",
    "insertText": "operator(const FOutputDevice&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* V, ELogVerbosity::Type Verbosity, const FName& Category, const double Time)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(V, Verbosity, Category)"
  },
  {
    "label": "SerializeRecord()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeRecord(const UE::FLogRecord& Record)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TearDown()"
  },
  {
    "label": "SetSuppressEventTag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSuppressEventTag(bool bInSuppressEventTag)"
  },
  {
    "label": "GetSuppressEventTag()",
    "kind": "Method",
    "detail": "Function (bSuppressEventTag = bInSuppressEventTag ; } bool)",
    "insertText": "GetSuppressEventTag()"
  },
  {
    "label": "GetAutoEmitLineTerminator()",
    "kind": "Method",
    "detail": "Function (bAutoEmitLineTerminator = bInAutoEmitLineTerminator ; } bool)",
    "insertText": "GetAutoEmitLineTerminator()"
  },
  {
    "label": "IsMemoryOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMemoryOnly()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(ELogVerbosity::Type Verbosity, const TCHAR* S)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(const FName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Str)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(const FString& S)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(const FText& S)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(ELogVerbosity::Type Verbosity, const FString& S)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(const FName& Category, ELogVerbosity::Type Verbosity, const FString& S)"
  },
  {
    "label": "LogfImpl()",
    "kind": "Method",
    "detail": "Function (private : void VARARGS)",
    "insertText": "LogfImpl(const TCHAR* Fmt, ...)"
  },
  {
    "label": "LogfImpl()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "LogfImpl(ELogVerbosity::Type Verbosity, const TCHAR* Fmt, ...)"
  },
  {
    "label": "CategorizedLogfImpl()",
    "kind": "Method",
    "detail": "Function (void VARARGS)",
    "insertText": "CategorizedLogfImpl(const FName& Category, ELogVerbosity::Type Verbosity, const TCHAR* Fmt, ...)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (public : template<FmtType> void)",
    "insertText": "Logf(const FmtType& Fmt)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Logf(const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "LogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogfImpl((const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "Logf(ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "LogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogfImpl(Verbosity, (const TCHAR*)Fmt, Args...)"
  },
  {
    "label": "CategorizedLogf()",
    "kind": "Method",
    "detail": "Function (} template<FmtType,. . . Types> void)",
    "insertText": "CategorizedLogf(const FName& Category, ELogVerbosity::Type Verbosity, const FmtType& Fmt, Types... Args)"
  },
  {
    "label": "CategorizedLogfImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategorizedLogfImpl(Category, Verbosity, (const TCHAR*)Fmt, Args...)"
  }
]