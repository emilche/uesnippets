[
  {
    "label": "queuing_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "queuing_mutex"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "queuing_mutex()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_queuing_mutex_H # define __TBB_queuing_mutex_H # include<cstring> # include \" atomic . h \" # include \" tbb_profiling . h \" namespace tbb { class queuing_mutex : internal::mutex_copy_deprecated_and_disabled { public :)",
    "insertText": "queuing_mutex()"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (q_tail = NULL ; # if TBB_USE_THREADING_TOOLS)",
    "insertText": "internal_construct()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (# endif } class scoped_lock : internal::no_copy { void)",
    "insertText": "initialize()"
  },
  {
    "label": "poison_pointer()",
    "kind": "Method",
    "detail": "Function (mutex = NULL ; going = 0 ; # if TBB_USE_ASSERT)",
    "insertText": "poison_pointer(next)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (# endif } public :)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(queuing_mutex& m)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acquire(m)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void __TBB_EXPORTED_METHOD)",
    "insertText": "acquire(queuing_mutex& m)"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "try_acquire(queuing_mutex& m)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "release()"
  }
]