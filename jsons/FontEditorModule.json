[
  {
    "label": "IFontEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFontEditor"
  },
  {
    "label": "IFontFaceEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFontFaceEditor"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "UFontFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFontFace"
  },
  {
    "label": "IFontEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFontEditorModule"
  },
  {
    "label": "CreateFontEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Templates / SharedPointer . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" Toolkits / IToolkit . h \" # include \" UObject / NameTypes . h \" class IFontEditor ; class IFontFaceEditor ; class IToolkitHost ; class UFont ; class UFontFace ; const FName FontEditorAppIdentifier ; class IFontEditorModule : public IModuleInterface,public IHasMenuExtensibility,public IHasToolBarExtensibility { public : TSharedRef<IFontEditor>)",
    "insertText": "CreateFontEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, UFont* Font)"
  },
  {
    "label": "CreateFontFaceEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IFontFaceEditor>)",
    "insertText": "CreateFontFaceEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, UFontFace* FontFace)"
  }
]