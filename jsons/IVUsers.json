[
  {
    "label": "AssumptionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCache"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "IVUsers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVUsers"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "IVStrideUse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IVStrideUse"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "IVStrideUse()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_IVUSERS_H # define LLVM_ANALYSIS_IVUSERS_H # include \" llvm / Analysis / LoopPass . h \" # include \" llvm / Analysis / ScalarEvolutionNormalization . h \" # include \" llvm / IR / ValueHandle . h \" namespace llvm { class AssumptionCache ; class DominatorTree ; class Instruction ; class Value ; class ScalarEvolution ; class SCEV ; class IVUsers ; class DataLayout ; class IVStrideUse : public CallbackVH,public ilist_node<IVStrideUse> { class IVUsers ; public :)",
    "insertText": "IVStrideUse(IVUsers *P, Instruction* U, Value *O) : CallbackVH(U), Parent(P), OperandValToReplace(O)"
  },
  {
    "label": "getUser()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getUser()"
  },
  {
    "label": "setUser()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUser(Instruction *NewUser)"
  },
  {
    "label": "setValPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValPtr(NewUser)"
  },
  {
    "label": "getOperandValToReplace()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getOperandValToReplace()"
  },
  {
    "label": "getPostIncLoops()",
    "kind": "Method",
    "detail": "Function (OperandValToReplace = Op ; } const PostIncLoopSet&)",
    "insertText": "getPostIncLoops()"
  },
  {
    "label": "deleted()",
    "kind": "Method",
    "detail": "Function (private : IVUsers* Parent ; WeakVH OperandValToReplace ; PostIncLoopSet PostIncLoops ; void)",
    "insertText": "deleted()"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct ilist_traits<IVStrideUse> : public ilist_default_traits<IVStrideUse> { IVStrideUse*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(IVStrideUse*)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (} IVStrideUse*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (} IVStrideUse*)",
    "insertText": "ensureHead(IVStrideUse*)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(IVStrideUse*, IVStrideUse*)"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} private : ilist_node<IVStrideUse> Sentinel ; } ; class IVUsers : public LoopPass { class IVStrideUse ; Loop* L ; AssumptionCache* AC ; LoopInfo* LI ; DominatorTree* DT ; ScalarEvolution* SE ; SmallPtrSet<Instruction*,1 6> Processed ; ilist<IVStrideUse> IVUses ; SmallPtrSet<const Value*,3 2> EphValues ; void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "runOnLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnLoop(Loop *L, LPPassManager &LPM)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "IVUsers()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "IVUsers()"
  },
  {
    "label": "getLoop()",
    "kind": "Method",
    "detail": "Function (Loop*)",
    "insertText": "getLoop()"
  },
  {
    "label": "AddUser()",
    "kind": "Method",
    "detail": "Function (IVStrideUse&)",
    "insertText": "AddUser(Instruction *User, Value *Operand)"
  },
  {
    "label": "getReplacementExpr()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getReplacementExpr(const IVStrideUse &IU)"
  },
  {
    "label": "getExpr()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getExpr(const IVStrideUse &IU)"
  },
  {
    "label": "getStride()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getStride(const IVStrideUse &IU, const Loop *L)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef ilist<IVStrideUse>::iterator iterator ; typedef ilist<IVStrideUse>::const_iterator const_iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "isIVUserOrOperand()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIVUserOrOperand(Instruction *Inst)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS, const Module* = nullptr)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "AddUsersImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AddUsersImpl(Instruction *I, SmallPtrSetImpl<Loop*> &SimpleLoopNests)"
  },
  {
    "label": "createIVUsersPass()",
    "kind": "Method",
    "detail": "Function (} ; Pass*)",
    "insertText": "createIVUsersPass()"
  }
]