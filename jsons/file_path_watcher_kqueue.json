[
  {
    "label": "FilePathWatcherKQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePathWatcherKQueue"
  },
  {
    "label": "EventData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventData"
  },
  {
    "label": "kevent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kevent"
  },
  {
    "label": "FilePathWatcherKQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_FILE_PATH_WATCHER_KQUEUE_H_ # define BASE_FILES_FILE_PATH_WATCHER_KQUEUE_H_ # include<sys / event . h> # include<memory> # include<vector> # include \" base / files / file_descriptor_watcher_posix . h \" # include \" base / files / file_path . h \" # include \" base / files / file_path_watcher . h \" namespace base { class FilePathWatcherKQueue : public FilePathWatcher::PlatformDelegate { public :)",
    "insertText": "FilePathWatcherKQueue()"
  },
  {
    "label": "FilePathWatcherKQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilePathWatcherKQueue(const FilePathWatcherKQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FilePathWatcherKQueue&)",
    "insertText": "operator(const FilePathWatcherKQueue&)"
  },
  {
    "label": "Watch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Watch(const FilePath& path, Type type, const FilePathWatcher::Callback& callback)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "EventData()",
    "kind": "Method",
    "detail": "Function (private : class EventData { public :)",
    "insertText": "EventData(const FilePath& path, const FilePath::StringType& subdir) : path_(path), subdir_(subdir)"
  },
  {
    "label": "OnKQueueReadable()",
    "kind": "Method",
    "detail": "Function (} FilePath path_ ; FilePath::StringType subdir_ ; } ; typedef std::vector<struct kevent> EventVector ; void)",
    "insertText": "OnKQueueReadable()"
  },
  {
    "label": "AreKeventValuesValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreKeventValuesValid(struct kevent* kevents, int count)"
  },
  {
    "label": "HandleAttributesChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAttributesChange(const EventVector::iterator& event, bool* target_file_affected, bool* update_watches)"
  },
  {
    "label": "HandleDeleteOrMoveChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteOrMoveChange(const EventVector::iterator& event, bool* target_file_affected, bool* update_watches)"
  },
  {
    "label": "HandleCreateItemChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreateItemChange(const EventVector::iterator& event, bool* target_file_affected, bool* update_watches)"
  },
  {
    "label": "UpdateWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateWatches(bool* target_file_affected)"
  },
  {
    "label": "EventsForPath()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EventsForPath(FilePath path, EventVector* events)"
  },
  {
    "label": "EventForItem()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EventForItem(const FilePath& path, EventVector* events)"
  },
  {
    "label": "ReleaseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseEvent(struct kevent& event)"
  },
  {
    "label": "FileDescriptorForPath()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "FileDescriptorForPath(const FilePath& path)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (const uintptr_t kNoFileDescriptor = static_cast<)",
    "insertText": "uintptr_t(-1)"
  },
  {
    "label": "CloseFileDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFileDescriptor(uintptr_t* fd)"
  },
  {
    "label": "IsKeventFileDescriptorOpen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeventFileDescriptorOpen(const struct kevent& event)"
  }
]