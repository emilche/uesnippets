[
  {
    "label": "FilePathWatcherKQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePathWatcherKQueue"
  },
  {
    "label": "EventData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventData"
  },
  {
    "label": "kevent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kevent"
  },
  {
    "label": "kevent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kevent"
  },
  {
    "label": "kevent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kevent"
  },
  {
    "label": "kevent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kevent"
  },
  {
    "label": "kevent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kevent"
  },
  {
    "label": "FilePathWatcherKQueue()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FilePathWatcherKQueue()"
  },
  {
    "label": "OnKQueueReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnKQueueReadable()"
  },
  {
    "label": "AreKeventValuesValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreKeventValuesValid(struct kevent* kevents, int count)"
  },
  {
    "label": "HandleAttributesChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAttributesChange(const EventVector::iterator& event,\n                              bool* target_file_affected,\n                              bool* update_watches)"
  },
  {
    "label": "HandleDeleteOrMoveChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeleteOrMoveChange(const EventVector::iterator& event,\n                                bool* target_file_affected,\n                                bool* update_watches)"
  },
  {
    "label": "HandleCreateItemChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreateItemChange(const EventVector::iterator& event,\n                              bool* target_file_affected,\n                              bool* update_watches)"
  },
  {
    "label": "UpdateWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateWatches(bool* target_file_affected)"
  },
  {
    "label": "EventsForPath()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EventsForPath(FilePath path, EventVector* events)"
  },
  {
    "label": "EventForItem()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EventForItem(const FilePath& path, EventVector* events)"
  },
  {
    "label": "ReleaseEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseEvent(struct kevent& event)"
  },
  {
    "label": "FileDescriptorForPath()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "FileDescriptorForPath(const FilePath& path)"
  },
  {
    "label": "CloseFileDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseFileDescriptor(uintptr_t* fd)"
  }
]