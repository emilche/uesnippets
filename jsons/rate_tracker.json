[
  {
    "label": "RateTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RateTracker"
  },
  {
    "label": "RateTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_RATE_TRACKER_H_ # define RTC_BASE_RATE_TRACKER_H_ # include<stdint . h> # include<stdlib . h> namespace rtc { class RateTracker { public :)",
    "insertText": "RateTracker(int64_t bucket_milliseconds, size_t bucket_count)"
  },
  {
    "label": "RateTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RateTracker()"
  },
  {
    "label": "ComputeTotalRate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeTotalRate()"
  },
  {
    "label": "TotalSampleCount()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "TotalSampleCount()"
  },
  {
    "label": "AddSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamples(int64_t sample_count)"
  },
  {
    "label": "AddSamplesAtTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamplesAtTime(int64_t current_time_ms, int64_t sample_count)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (protected : int64_t)",
    "insertText": "Time()"
  },
  {
    "label": "EnsureInitialized()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnsureInitialized()"
  },
  {
    "label": "NextBucketIndex()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NextBucketIndex(size_t bucket_index)"
  }
]