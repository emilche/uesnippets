[
  {
    "label": "single_view",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "single_view"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_SINGLE_VIEW_H # define _LIBCPP___RANGES_SINGLE_VIEW_H # include<__config> # include<__ranges / copyable_box . h> # include<__ranges / range_adaptor . h> # include<__ranges / view_interface . h> # include<__utility / forward . h> # include<__utility / in_place . h> # include<__utility / move . h> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "single_view()",
    "kind": "Method",
    "detail": "Function (template<copy_constructible _Tp> requires is_object_v<_Tp> class single_view : public view_interface<single_view<_Tp>> { __copyable_box<_Tp> __value_ ; public : _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "single_view()"
  },
  {
    "label": "single_view()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "single_view(const _Tp& __t) : __value_(in_place, __t)"
  },
  {
    "label": "single_view()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "single_view(_Tp&& __t) : __value_(in_place, std::move(__t))"
  },
  {
    "label": "single_view()",
    "kind": "Method",
    "detail": "Function (} template<class . . . _Args> requires constructible_from<_Tp,_Args . . .> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "single_view(in_place_t, _Args&&... __args)"
  },
  {
    "label": "_Args()",
    "kind": "Method",
    "detail": "Function (in_place,std::forward<)",
    "insertText": "_Args(__args)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Tp*)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _Tp*)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI size_t)",
    "insertText": "size()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI const _Tp*)",
    "insertText": "data()"
  },
  {
    "label": "single_view()",
    "kind": "Method",
    "detail": "Function (single_view<_Tp>)",
    "insertText": "single_view(_Tp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace views { namespace __single_view { struct __fn : __range_adaptor_closure<__fn> { template<class _Range> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Range&& __range) const noexcept(noexcept(single_view<decay_t<_Range&&>>(std::forward<_Range>(__range)))) -> decltype( single_view<decay_t<_Range&&>>(std::forward<_Range>(__range)))"
  }
]