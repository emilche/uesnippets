[
  {
    "label": "FSuspensionUtility",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuspensionUtility"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Logging / LogMacros . h \" # include \" Math / UnrealMath . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / Function . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVehicleUtility, Log, All)"
  },
  {
    "label": "ComputeSprungMasses()",
    "kind": "Method",
    "detail": "Function (struct FSuspensionUtility { bool)",
    "insertText": "ComputeSprungMasses(const TArray<FVector>& MassSpringPositions, const float TotalMass, TArray<float>& OutSprungMasses)"
  },
  {
    "label": "ComputeSprungMasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSprungMasses(const TArray<FVector>& LocalSpringPositions, const FVector& LocalCenterOfMass, const float TotalMass, TArray<float>& OutSprungMasses)"
  },
  {
    "label": "ComputeNaturalFrequency()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeNaturalFrequency(float SpringRate, float SprungMass)"
  },
  {
    "label": "ComputeCriticalDamping()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ComputeCriticalDamping(float SpringRate, float SprungMass)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (float NaturalFrequency =)",
    "insertText": "Sqrt(SpringRate / SprungMass)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (DampingRatio =)",
    "insertText": "Clamp(DampingRatio, 0.f, 1.f)"
  }
]