[
  {
    "label": "VProcedure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VProcedure"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FRegisterIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisterIndex"
  },
  {
    "label": "FConstantIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstantIndex"
  },
  {
    "label": "FValueOperand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueOperand"
  },
  {
    "label": "FLabelOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLabelOffset"
  },
  {
    "label": "TOperandRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOperandRange"
  },
  {
    "label": "FUnwindEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnwindEdge"
  },
  {
    "label": "FOpLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpLocation"
  },
  {
    "label": "FNamedParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNamedParam"
  },
  {
    "label": "FRegisterName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisterName"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "VISIT_OP()",
    "kind": "Method",
    "detail": "Function (struct VProcedure ; using FOpcodeInt = uint16_t ; enum class EOpcode : FOpcodeInt { # define)",
    "insertText": "VISIT_OP(Name) Name, VERSE_ENUM_OPS(VISIT_OP)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ToString(EOpcode Opcode)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (enum class EOperandRole : uint8 { Use,Immediate,ClobberDef,UnifyDef,} ; struct)",
    "insertText": "alignas(8)"
  },
  {
    "label": "FOp()",
    "kind": "Method",
    "detail": "Function (const EOpcode Opcode ;)",
    "insertText": "FOp(const EOpcode InOpcode) : Opcode(InOpcode)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRegisterIndex { uint32 UNINITIALIZED = INT32_MAX ; uint32 SELF = 0 ; uint32 SCOPE = 1 ; uint32 PARAMETER_START = 2 ; uint32 Index ; bool)",
    "insertText": "operator(FRegisterIndex Left, FRegisterIndex Right)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<> void)",
    "insertText": "Visit(FMarkStackVisitor& Visitor, const FRegisterIndex& Value, FMarkStackVisitor::ConsumeElementName ElementName)"
  },
  {
    "label": "FValueOperand()",
    "kind": "Method",
    "detail": "Function (} struct FConstantIndex { uint32 Index ; } ; struct FValueOperand { uint32 UNINITIALIZED = INT32_MAX ; uint32 Index { UNINITIALIZED } ;)",
    "insertText": "FValueOperand()"
  },
  {
    "label": "FValueOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueOperand(FRegisterIndex Register) : Index(Register.Index)"
  },
  {
    "label": "FValueOperand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValueOperand(FConstantIndex Constant)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (~ Constant . Index } {)",
    "insertText": "check(Constant.Index <= UNINITIALIZED)"
  },
  {
    "label": "IsRegister()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRegister()"
  },
  {
    "label": "GetLocation()",
    "kind": "Method",
    "detail": "Function (} } ; template<OperandType> struct TOperandRange { int32 Index ; int32 Num ; } ; struct FUnwindEdge { int32 Begin ; int32 End ; FLabelOffset OnUnwind ; } ; struct FOpLocation { int32 Begin ; FLocation Location ; } ; const FLocation*)",
    "insertText": "GetLocation(FOpLocation* First, FOpLocation* Last, uint32 OpOffset)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<> void)",
    "insertText": "Visit(FAbstractVisitor&, FOpLocation&, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<> void)",
    "insertText": "Visit(FMarkStackVisitor&, const FOpLocation&, FMarkStackVisitor::ConsumeElementName)"
  },
  {
    "label": "FNamedParam()",
    "kind": "Method",
    "detail": "Function (} struct FNamedParam {)",
    "insertText": "FNamedParam()"
  },
  {
    "label": "FNamedParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNamedParam(FRegisterIndex InIndex, FAccessContext InContext, VUniqueString& InName) : Index(InIndex) , Name(InContext, InName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} FRegisterIndex Index ; TWriteBarrier<VUniqueString> Name ; } ; template<> void)",
    "insertText": "Visit(FAbstractVisitor&, FNamedParam&, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<> void)",
    "insertText": "Visit(FMarkStackVisitor& Visitor, const FNamedParam& Value, FMarkStackVisitor::ConsumeElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit(Visitor, Value.Name, TEXT(\"\"))"
  },
  {
    "label": "FRegisterName()",
    "kind": "Method",
    "detail": "Function (} struct FRegisterName {)",
    "insertText": "FRegisterName(FRegisterIndex InIndex, FAccessContext InContext, VUniqueString& InName) : Index(InIndex) , Name(InContext, InName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} FRegisterIndex Index ; TWriteBarrier<VUniqueString> Name ; } ; template<> void)",
    "insertText": "Visit(FAbstractVisitor&, FRegisterName&, const TCHAR* ElementName)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (template<> void)",
    "insertText": "Visit(FMarkStackVisitor& Visitor, const FRegisterName& Value, FMarkStackVisitor::ConsumeElementName)"
  }
]