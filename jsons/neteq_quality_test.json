[
  {
    "label": "LossModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LossModes"
  },
  {
    "label": "LossModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LossModel"
  },
  {
    "label": "NoLoss",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoLoss"
  },
  {
    "label": "UniformLoss",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformLoss"
  },
  {
    "label": "GilbertElliotLoss",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GilbertElliotLoss"
  },
  {
    "label": "FixedLossEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedLossEvent"
  },
  {
    "label": "FixedLossEventCmp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedLossEventCmp"
  },
  {
    "label": "FixedLossModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FixedLossModel"
  },
  {
    "label": "NetEqQualityTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetEqQualityTest"
  },
  {
    "label": "LossModel()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_QUALITY_TEST_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_QUALITY_TEST_H_ # include<fstream> # include<memory> # include \" api / audio_codecs / builtin_audio_decoder_factory . h \" # include \" api / neteq / neteq . h \" # include \" modules / audio_coding / neteq / tools / audio_sink . h \" # include \" modules / audio_coding / neteq / tools / input_audio_file . h \" # include \" modules / audio_coding / neteq / tools / rtp_generator . h \" # include \" system_wrappers / include / clock . h \" # include \" test / gtest . h \" namespace webrtc { namespace test { enum LossModes { kNoLoss,kUniformLoss,kGilbertElliotLoss,kFixedLoss,kLastLossMode } ; class LossModel { public : ~)",
    "insertText": "LossModel()"
  },
  {
    "label": "Lost()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Lost(int now_ms)"
  },
  {
    "label": "UniformLoss()",
    "kind": "Method",
    "detail": "Function (} ; class UniformLoss : public LossModel { public :)",
    "insertText": "UniformLoss(double loss_rate)"
  },
  {
    "label": "set_loss_rate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_loss_rate(double loss_rate)"
  },
  {
    "label": "GilbertElliotLoss()",
    "kind": "Method",
    "detail": "Function (loss_rate_ = loss_rate ; } private : double loss_rate_ ; } ; class GilbertElliotLoss : public LossModel { public :)",
    "insertText": "GilbertElliotLoss(double prob_trans_11, double prob_trans_01)"
  },
  {
    "label": "GilbertElliotLoss()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GilbertElliotLoss()"
  },
  {
    "label": "FixedLossEvent()",
    "kind": "Method",
    "detail": "Function (private : double prob_trans_11_ ; double prob_trans_01_ ; bool lost_last_ ; std::unique_ptr<UniformLoss> uniform_loss_model_ ; } ; struct FixedLossEvent { int start_ms ; int duration_ms ;)",
    "insertText": "FixedLossEvent(int start_ms, int duration_ms) : start_ms(start_ms), duration_ms(duration_ms)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FixedLossEventCmp { bool)",
    "insertText": "operator()(const FixedLossEvent& l_event, const FixedLossEvent& r_event)"
  },
  {
    "label": "FixedLossModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FixedLossModel()"
  },
  {
    "label": "NetEqQualityTest()",
    "kind": "Method",
    "detail": "Function (private : std::set<FixedLossEvent,FixedLossEventCmp> loss_events_ ; std::set<FixedLossEvent,FixedLossEventCmp>::iterator loss_events_it_ ; } ; class NetEqQualityTest : public::testing::Test { protected :)",
    "insertText": "NetEqQualityTest(int block_duration_ms, int in_sampling_khz, int out_sampling_khz, const SdpAudioFormat& format, const rtc::scoped_refptr<AudioDecoderFactory>& decoder_factory = webrtc::CreateBuiltinAudioDecoderFactory())"
  },
  {
    "label": "NetEqQualityTest()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetEqQualityTest()"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUp()"
  },
  {
    "label": "EncodeBlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "EncodeBlock(int16_t* in_data, size_t block_size_samples, rtc::Buffer* payload, size_t max_bytes)"
  },
  {
    "label": "PacketLost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PacketLost()"
  },
  {
    "label": "DecodeBlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DecodeBlock()"
  },
  {
    "label": "Transmit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Transmit()"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (std::ofstream&)",
    "insertText": "Log()"
  }
]