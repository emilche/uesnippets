[
  {
    "label": "FActorDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDragDropOp"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "SGraphPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPanel"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "SLevelOfDetailBranchNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelOfDetailBranchNode"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FGraphNodeMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphNodeMetaData"
  },
  {
    "label": "IErrorReportingWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IErrorReportingWidget"
  },
  {
    "label": "UGraphEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGraphEditorSettings"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / CurveHandle . h \" # include \" Animation / CurveSequence . h \" # include \" BlueprintUtilities . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphNodeUtils . h \" # include \" GraphEditor . h \" # include \" HAL / PlatformMath . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" SNodePanel . h \" # include \" SlateFwd . h \" # include \" Styling / AppStyle . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Notifications / SErrorText . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / SWidget . h \" class FActorDragDropOp ; class FDragDropEvent ; class ISlateStyle ; class IToolTip ; class SGraphPanel ; class SGraphPin ; class SInlineEditableTextBlock ; class SLevelOfDetailBranchNode ; class SToolTip ; class SVerticalBox ; class SWidget ; class UEdGraphNode ; class UEdGraphPin ; class UObject ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; class SNodeTitle : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SNodeTitle) : _StyleSet(&FAppStyle::Get()) , _Style(TEXT(\"Graph.Node.NodeTitle\")) , _ExtraLineStyle(TEXT(\"Graph.Node.NodeTitleExtraLines\"))"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(const ISlateStyle*, StyleSet) SLATE_ARGUMENT(FName, Style) SLATE_ARGUMENT(FName, ExtraLineStyle) SLATE_ATTRIBUTE(FText, Text) SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphNode* InNode)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetHeadTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHeadTitle()"
  },
  {
    "label": "GetTitleSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetTitleSize()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "GetNodeTitle()",
    "kind": "Method",
    "detail": "Function (protected : TWeakObjectPtr<UEdGraphNode> GraphNode ; FNodeTextCache NodeTitleCache ; FName ExtraLineStyle ; const ISlateStyle* StyleSet ; FText CachedHeadTitle ; TAttribute<FText> TitleText ; FVector2D CachedSize ; protected : FText)",
    "insertText": "GetNodeTitle()"
  },
  {
    "label": "RebuildWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildWidget()"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (} ; class SGraphNode : public SNodePanel::SNode { public : void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "GetToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolTip>)",
    "insertText": "GetToolTip()"
  },
  {
    "label": "OnToolTipClosing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolTipClosing()"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(const FVector2D& NewPosition, FNodeSet& NodeFilter, bool bMarkDirty = true)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetNodeComment()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNodeComment()"
  },
  {
    "label": "GetObjectBeingDisplayed()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectBeingDisplayed()"
  },
  {
    "label": "SetIsEditable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsEditable(TAttribute<bool> InIsEditable)"
  },
  {
    "label": "IsNodeEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeEditable()"
  },
  {
    "label": "SetDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoubleClickEvent(FSingleNodeEvent InDoubleClickEvent)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(const TSharedRef<SGraphPanel>& OwnerPanel)"
  },
  {
    "label": "GetEditableNodeTitle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEditableNodeTitle()"
  },
  {
    "label": "GetEditableNodeTitleAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEditableNodeTitleAsText()"
  },
  {
    "label": "GetNodeTitleColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetNodeTitleColor()"
  },
  {
    "label": "GetNodeCommentColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetNodeCommentColor()"
  },
  {
    "label": "GetNodeBodyColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetNodeBodyColor()"
  },
  {
    "label": "GetNodeBodyBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetNodeBodyBrush()"
  },
  {
    "label": "GetNodeTitleIconColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetNodeTitleIconColor()"
  },
  {
    "label": "GetNodeTitleTextColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeTitleTextColor()"
  },
  {
    "label": "GetNodeTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNodeTooltip()"
  },
  {
    "label": "GetNodeObj()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "GetNodeObj()"
  },
  {
    "label": "GetNodeUnderMouse()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SGraphNode>)",
    "insertText": "GetNodeUnderMouse(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetOwnerPanel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphPanel>)",
    "insertText": "GetOwnerPanel()"
  },
  {
    "label": "UpdateGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGraphNode()"
  },
  {
    "label": "CreatePinWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePinWidgets()"
  },
  {
    "label": "CreateStandardPinWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateStandardPinWidget(UEdGraphPin* Pin)"
  },
  {
    "label": "GetPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPins(TSet< TSharedRef<SWidget> >& AllPins)"
  },
  {
    "label": "GetPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPins(TArray< TSharedRef<SWidget> >& AllPins)"
  },
  {
    "label": "GetHoveredPin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphPin>)",
    "insertText": "GetHoveredPin(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "FindWidgetForPin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphPin>)",
    "insertText": "FindWidgetForPin(UEdGraphPin* ThePin)"
  },
  {
    "label": "PlaySpawnEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySpawnEffect()"
  },
  {
    "label": "NodeCoordToGraphCoord()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "NodeCoordToGraphCoord(const FVector2D& PanelSpaceCoordinate)"
  },
  {
    "label": "GetContentScale()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetContentScale()"
  },
  {
    "label": "GetColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorAndOpacity()"
  },
  {
    "label": "GetPinLabelColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetPinLabelColorAndOpacity()"
  },
  {
    "label": "SetVerifyTextCommitEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerifyTextCommitEvent(FOnNodeVerifyTextCommit InOnVerifyTextCommit)"
  },
  {
    "label": "SetTextCommittedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextCommittedEvent(FOnNodeTextCommitted InDelegate)"
  },
  {
    "label": "SetDisallowedPinConnectionEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisallowedPinConnectionEvent(SGraphEditor::FOnDisallowedPinConnection InOnDisallowedPinConnection)"
  },
  {
    "label": "OnCommentTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommentTextCommitted(const FText& NewComment, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnCommentBubbleToggled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommentBubbleToggled(bool bInCommentBubbleVisible)"
  },
  {
    "label": "IsRenamePending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenamePending()"
  },
  {
    "label": "RequestRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRename()"
  },
  {
    "label": "ApplyRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRename()"
  },
  {
    "label": "GetTitleRect()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "GetTitleRect()"
  },
  {
    "label": "NotifyDisallowedPinConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDisallowedPinConnection(const class UEdGraphPin* PinA, const class UEdGraphPin* PinB)"
  },
  {
    "label": "GetUnscaledPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetUnscaledPosition()"
  },
  {
    "label": "RefreshErrorInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshErrorInfo()"
  },
  {
    "label": "InvalidateGraphData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGraphData()"
  },
  {
    "label": "IsHidingPinWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHidingPinWidgets()"
  },
  {
    "label": "GetHighlightColor()",
    "kind": "Method",
    "detail": "Function (} TOptional<FSlateColor>)",
    "insertText": "GetHighlightColor(const SGraphPin* InGraphPin)"
  },
  {
    "label": "GetPinTextColor()",
    "kind": "Method",
    "detail": "Function (} TOptional<FSlateColor>)",
    "insertText": "GetPinTextColor(const SGraphPin* InGraphPin)"
  },
  {
    "label": "SGraphNode()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "SGraphNode()"
  },
  {
    "label": "PositionThisNodeBetweenOtherNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PositionThisNodeBetweenOtherNodes(const TMap< UObject*, TSharedRef<SNode> >& NodeToWidgetLookup, UEdGraphNode* PreviousNode, UEdGraphNode* NextNode, float HeightAboveWire)"
  },
  {
    "label": "PositionThisNodeBetweenOtherNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PositionThisNodeBetweenOtherNodes(const TMap< UObject*, TSharedRef<SNode> >& NodeToWidgetLookup, TSet<UEdGraphNode*>& PreviousNodes, TSet<UEdGraphNode*>& NextNodes, float HeightAboveWire)"
  },
  {
    "label": "PositionThisNodeBetweenOtherNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PositionThisNodeBetweenOtherNodes(const FVector2D& PrevPos, const FVector2D& NextPos, float HeightAboveWire)"
  },
  {
    "label": "CanAllowInteractionUsingDragDropOp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAllowInteractionUsingDragDropOp(const UEdGraphNode* GraphNodePtr, const TSharedPtr<FActorDragDropOp>& DragDropOp)"
  },
  {
    "label": "GetErrorMsgToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetErrorMsgToolTip()"
  },
  {
    "label": "AddPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPin(const TSharedRef<SGraphPin>& PinToAdd)"
  },
  {
    "label": "CreatePinWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphPin>)",
    "insertText": "CreatePinWidget(UEdGraphPin* Pin)"
  },
  {
    "label": "GetComplexTooltip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SToolTip>)",
    "insertText": "GetComplexTooltip()"
  },
  {
    "label": "CreateBelowPinControls()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateBelowPinControls(TSharedPtr<SVerticalBox> MainBox)"
  },
  {
    "label": "GetNameOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (} TOptional<ETextOverflowPolicy>)",
    "insertText": "GetNameOverflowPolicy()"
  },
  {
    "label": "OnVerifyNameTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyNameTextChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "OnNameTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameTextCommited(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetErrorColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetErrorColor()"
  },
  {
    "label": "GetVisualWarningMsgToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetVisualWarningMsgToolTip()"
  },
  {
    "label": "GetVisualWarningColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetVisualWarningColor()"
  },
  {
    "label": "GetErrorMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetErrorMessage()"
  },
  {
    "label": "SetupErrorReporting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupErrorReporting()"
  },
  {
    "label": "UseLowDetailNodeTitles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLowDetailNodeTitles()"
  },
  {
    "label": "UseLowDetailPinNames()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "UseLowDetailPinNames()"
  },
  {
    "label": "AdvancedViewArrowVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "AdvancedViewArrowVisibility()"
  },
  {
    "label": "OnAdvancedViewChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdvancedViewChanged(const ECheckBoxState NewCheckedState)"
  },
  {
    "label": "IsAdvancedViewChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsAdvancedViewChecked()"
  },
  {
    "label": "GetAdvancedViewArrow()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAdvancedViewArrow()"
  },
  {
    "label": "IsSelectedExclusively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedExclusively()"
  },
  {
    "label": "SetDefaultTitleAreaWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTitleAreaWidget(TSharedRef<SOverlay> DefaultTitleAreaWidget)"
  },
  {
    "label": "CreateTitleWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "CreateTitleWidget(TSharedPtr<SNodeTitle> NodeTitle)"
  },
  {
    "label": "CreateTitleRightWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTitleRightWidget()"
  },
  {
    "label": "CreateNodeContentArea()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateNodeContentArea()"
  },
  {
    "label": "CreateInputSideAddButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInputSideAddButton(TSharedPtr<SVerticalBox> InputBox)"
  },
  {
    "label": "CreateOutputSideAddButton()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CreateOutputSideAddButton(TSharedPtr<SVerticalBox> OutputBox)"
  },
  {
    "label": "AddPinButtonContent()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<SWidget>)",
    "insertText": "AddPinButtonContent(FText PinText, FText PinTooltipText, bool bRightSide = true, FString DocumentationExcerpt = FString(), TSharedPtr<SToolTip> CustomTooltip = NULL)"
  },
  {
    "label": "IsAddPinButtonVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsAddPinButtonVisible()"
  },
  {
    "label": "OnAddPin()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddPin()"
  },
  {
    "label": "PopulateMetaTag()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateMetaTag(class FGraphNodeMetaData* TagMeta)"
  },
  {
    "label": "ShouldPinBeHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPinBeHidden(const UEdGraphPin* InPin)"
  },
  {
    "label": "GetEnabledStateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetEnabledStateWidget()"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TSharedRef<SGraphPin>> InputPins ; TArray<TSharedRef<SGraphPin>> OutputPins ; TWeakPtr<SGraphPanel> OwnerGraphPanelPtr ; UEdGraphNode* GraphNode ; TSharedPtr<SVerticalBox> LeftNodeBox ; TSharedPtr<SVerticalBox> RightNodeBox ; TSharedPtr<SInlineEditableTextBlock> InlineEditableText ; TSharedPtr<class IErrorReportingWidget> ErrorReporting ; TSharedPtr<class IErrorReportingWidget> VisualWarningReporting ; FCurveSequence SpawnAnim ; FCurveHandle ZoomCurve ; FCurveHandle FadeCurve ; FMargin TitleBorderMargin =)",
    "insertText": "FMargin(10.f, 5.f, 30.f, 3.f)"
  }
]