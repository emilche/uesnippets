[
  {
    "label": "Operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Operation"
  },
  {
    "label": "OperationWithFunctor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OperationWithFunctor"
  },
  {
    "label": "OperationsChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OperationsChain"
  },
  {
    "label": "CallbackHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackHandle"
  },
  {
    "label": "Operation()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_OPERATIONS_CHAIN_H_ # define RTC_BASE_OPERATIONS_CHAIN_H_ # include<functional> # include<memory> # include<queue> # include<set> # include<type_traits> # include<utility> # include \" absl / types / optional . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / ref_counted_object . h \" # include \" rtc_base / system / no_unique_address . h \" namespace rtc { namespace rtc_operations_chain_internal { class Operation { public : ~)",
    "insertText": "Operation()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run()"
  },
  {
    "label": "OperationWithFunctor()",
    "kind": "Method",
    "detail": "Function (} ; template<FunctorT> class OperationWithFunctor final : public Operation { public :)",
    "insertText": "OperationWithFunctor(FunctorT&& functor, std::function<void()> callback) : functor_(std::forward<FunctorT>(functor)), callback_(std::move(callback))"
  },
  {
    "label": "OperationWithFunctor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "OperationWithFunctor()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON)",
    "insertText": "RTC_DCHECK(has_run_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON)",
    "insertText": "RTC_DCHECK(!has_run_)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (has_run_ = true ; # endif auto functor =)",
    "insertText": "move(functor_)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "functor(std::move(callback_))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : std::remove_reference<FunctorT>::type functor_ ; std::function<)",
    "insertText": "void()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON bool has_run_ = false ; # endif } ; } class OperationsChain final : public RefCountedNonVirtual<OperationsChain> { public : scoped_refptr<OperationsChain>)",
    "insertText": "Create()"
  },
  {
    "label": "OperationsChain()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OperationsChain()"
  },
  {
    "label": "OperationsChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OperationsChain(const OperationsChain&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OperationsChain&)",
    "insertText": "operator(const OperationsChain&)"
  },
  {
    "label": "SetOnChainEmptyCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnChainEmptyCallback(std::function<void()> on_chain_empty_callback)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ChainOperation()",
    "kind": "Method",
    "detail": "Function (template<FunctorT> void)",
    "insertText": "ChainOperation(FunctorT&& functor)"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (chained_operations_ .)",
    "insertText": "push(std::make_unique< rtc_operations_chain_internal::OperationWithFunctor<FunctorT>>( std::forward<FunctorT>(functor), CreateOperationsChainCallback()))"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (chained_operations_ .)",
    "insertText": "front()->Run()"
  },
  {
    "label": "CallbackHandle()",
    "kind": "Method",
    "detail": "Function (} } private : class CallbackHandle ; class CallbackHandle final : public RefCountedNonVirtual<CallbackHandle> { public :)",
    "insertText": "CallbackHandle(scoped_refptr<OperationsChain> operations_chain)"
  },
  {
    "label": "CallbackHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CallbackHandle()"
  },
  {
    "label": "CallbackHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackHandle(const CallbackHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackHandle&)",
    "insertText": "operator(const CallbackHandle&)"
  },
  {
    "label": "OnOperationComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOperationComplete()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "void()> CreateOperationsChainCallback()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker sequence_checker_ ; std::queue<std::unique_ptr<rtc_operations_chain_internal::Operation>> chained_operations_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::function<)",
    "insertText": "void()>> on_chain_empty_callback_ RTC_GUARDED_BY(sequence_checker_)"
  }
]