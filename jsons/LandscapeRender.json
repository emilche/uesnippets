[
  {
    "label": "FLandscapeComponentSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeComponentSceneProxy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "IShadowInvalidatingInstances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IShadowInvalidatingInstances"
  },
  {
    "label": "FLandscapeRayTracingImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeRayTracingImpl"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FLandscapeBatchElementParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeBatchElementParams"
  },
  {
    "label": "FLandscapeElementParamArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeElementParamArray"
  },
  {
    "label": "FLandscapeVertexFactoryVertexShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeVertexFactoryVertexShaderParameters"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FMeshMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShader"
  },
  {
    "label": "FMeshDrawSingleShaderBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshDrawSingleShaderBindings"
  },
  {
    "label": "FLandscapeVertexFactoryPixelShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeVertexFactoryPixelShaderParameters"
  },
  {
    "label": "FLandscapeVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeVertexFactory"
  },
  {
    "label": "FDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataType"
  },
  {
    "label": "FLandscapeXYOffsetVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeXYOffsetVertexFactory"
  },
  {
    "label": "FLandscapeFixedGridVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeFixedGridVertexFactory"
  },
  {
    "label": "FLandscapeVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeVertex"
  },
  {
    "label": "FLandscapeVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeVertexBuffer"
  },
  {
    "label": "FLandscapeSharedBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeSharedBuffers"
  },
  {
    "label": "FLandscapeIndexRanges",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeIndexRanges"
  },
  {
    "label": "FLandscapeSectionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeSectionInfo"
  },
  {
    "label": "FLandscapeRenderSystem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeRenderSystem"
  },
  {
    "label": "LODSettingsComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LODSettingsComponent"
  },
  {
    "label": "FLandscapeLODOverridesCustomRenderPassUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeLODOverridesCustomRenderPassUserData"
  },
  {
    "label": "FLandscapeSceneViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeSceneViewExtension"
  },
  {
    "label": "FLandscapeViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeViewData"
  },
  {
    "label": "FLandscapeVisibilityHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeVisibilityHelper"
  },
  {
    "label": "FLandscapeDebugOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDebugOptions"
  },
  {
    "label": "FLandscapeMeshProxySceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeMeshProxySceneProxy"
  },
  {
    "label": "FLandscapeLCI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeLCI"
  },
  {
    "label": "ArrayType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayType"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "FLandscapeXYOffsetVertexFactoryVertexShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeXYOffsetVertexFactoryVertexShaderParameters"
  },
  {
    "label": "FLandscapeDebugMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeDebugMaterialRenderProxy"
  },
  {
    "label": "FLandscapeSelectMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeSelectMaterialRenderProxy"
  },
  {
    "label": "FLandscapeMaskMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeMaskMaterialRenderProxy"
  },
  {
    "label": "FLandscapeLayerUsageRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeLayerUsageRenderProxy"
  },
  {
    "label": "NeedsFixedGridVertexFactory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Engine / EngineTypes . h \" # include \" Templates / RefCounting . h \" # include \" Containers / ArrayView . h \" # include \" ShaderParameters . h \" # include \" RenderResource . h \" # include \" UniformBuffer . h \" # include \" VertexFactory . h \" # include \" MaterialShared . h \" # include \" Materials / MaterialRenderProxy . h \" # include \" LandscapeProxy . h \" # include \" RendererInterface . h \" # include \" MeshBatch . h \" # include \" SceneManagement . h \" # include \" Engine / MapBuildDataRegistry . h \" # include \" LandscapeComponent . h \" # include \" Materials / MaterialInterface . h \" # include \" PrimitiveViewRelevance . h \" # include \" PrimitiveSceneProxy . h \" # include \" StaticMeshResources . h \" # include \" StaticMeshSceneProxy . h \" # include \" SceneViewExtension . h \" # include \" Rendering / CustomRenderPass . h \" # include \" Tasks / Task . h \" # define LANDSCAPE_LOD_LEVELS 8 # define LANDSCAPE_MAX_SUBSECTION_NUM 2 class FLandscapeComponentSceneProxy ; enum class ERuntimeVirtualTextureMaterialType : uint8 ; enum EShaderPlatform : uint16 ; namespace UE::Renderer::Private { class IShadowInvalidatingInstances ; } # if RHI_RAYTRACING struct FLandscapeRayTracingImpl ; # endif # if WITH_EDITOR namespace ELandscapeViewMode { enum Type { Invalid = - 1,Normal = 0,EditLayer,DebugLayer,LayerDensity,LayerUsage,LOD,WireframeOnTop,LayerContribution } ; } int32 GLandscapeViewMode ; namespace ELandscapeEditRenderMode { enum Type { None = 0 x0,Gizmo = 0 x1,SelectRegion = 0 x2,SelectComponent = 0 x4,Select = SelectRegion | SelectComponent,Mask = 0 x8,InvertedMask = 0 x10,BitMaskForMask = Mask | InvertedMask,} ; } bool GLandscapeEditModeActive ; int32 GLandscapeEditRenderMode ; TObjectPtr<UMaterialInterface> GLayerDebugColorMaterial ; TObjectPtr<UMaterialInterface> GSelectionColorMaterial ; TObjectPtr<UMaterialInterface> GSelectionRegionMaterial ; TObjectPtr<UMaterialInterface> GMaskRegionMaterial ; TObjectPtr<UMaterialInterface> GColorMaskRegionMaterial ; TObjectPtr<UTexture2D> GLandscapeBlackTexture ; TObjectPtr<UMaterialInterface> GLandscapeLayerUsageMaterial ; TObjectPtr<UMaterialInterface> GLandscapeDirtyMaterial ; # endif namespace UE::Landscape { bool)",
    "insertText": "NeedsFixedGridVertexFactory(EShaderPlatform InShaderPlatform)"
  },
  {
    "label": "ShouldBuildGrassMapRenderingResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBuildGrassMapRenderingResources()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLandscapeUniformShaderParameters, LANDSCAPE_API) SHADER_PARAMETER(int32, ComponentBaseX) SHADER_PARAMETER(int32, ComponentBaseY) SHADER_PARAMETER(int32, SubsectionSizeVerts) SHADER_PARAMETER(int32, NumSubsections) SHADER_PARAMETER(int32, LastLOD) SHADER_PARAMETER(uint32, VirtualTexturePerPixelHeight) SHADER_PARAMETER(float, InvLODBlendRange) SHADER_PARAMETER(float, NonNaniteVirtualShadowMapConstantDepthBias) SHADER_PARAMETER(FVector4f, HeightmapTextureSize) SHADER_PARAMETER(FVector4f, HeightmapUVScaleBias) SHADER_PARAMETER(FVector4f, WeightmapUVScaleBias) SHADER_PARAMETER(FVector4f, LandscapeLightmapScaleBias) SHADER_PARAMETER(FVector4f, SubsectionSizeVertsLayerUVPan) SHADER_PARAMETER(FVector4f, SubsectionOffsetParams) SHADER_PARAMETER(FVector4f, LightmapSubsectionOffsetParams) SHADER_PARAMETER(FMatrix44f, LocalToWorldNoScaling) SHADER_PARAMETER_TEXTURE(Texture2D, HeightmapTexture) SHADER_PARAMETER_SAMPLER(SamplerState, HeightmapTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, NormalmapTexture) SHADER_PARAMETER_SAMPLER(SamplerState, NormalmapTextureSampler) SHADER_PARAMETER_TEXTURE(Texture2D, XYOffsetmapTexture) SHADER_PARAMETER_SAMPLER(SamplerState, XYOffsetmapTextureSampler) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLandscapeVertexFactoryMVFParameters, LANDSCAPE_API) SHADER_PARAMETER(FIntPoint, SubXY) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLandscapeSectionLODUniformParameters, LANDSCAPE_API) SHADER_PARAMETER(int32, LandscapeIndex) SHADER_PARAMETER(FIntPoint, Min) SHADER_PARAMETER(FIntPoint, Size) SHADER_PARAMETER_SRV(Buffer<float>, SectionLODBias) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FLandscapeFixedGridUniformShaderParameters, LANDSCAPE_API) SHADER_PARAMETER(FVector4f, LodValues) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING FRHIUniformBuffer* LandscapeVertexFactoryMVFUniformBuffer ; # endif const TUniformBuffer<FLandscapeUniformShaderParameters>* LandscapeUniformShaderParametersResource ; const TArray<TUniformBuffer<FLandscapeFixedGridUniformShaderParameters>>* FixedGridUniformShaderParameters ; FUniformBufferRHIRef LandscapeSectionLODUniformParameters ; const FLandscapeComponentSceneProxy* SceneProxy ; int32 CurrentLOD ; } ; class FLandscapeElementParamArray : public FOneFrameResource { public : TArray<FLandscapeBatchElementParams,SceneRenderingAllocator> ElementParams ; } ; class FLandscapeVertexFactoryVertexShaderParameters : public FVertexFactoryShaderParameters {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FLandscapeVertexFactoryVertexShaderParameters, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetElementShaderBindings(const class FSceneInterface* Scene, const FSceneView* InView, const class FMeshMaterialShader* Shader, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const FVertexFactory* VertexFactory, const FMeshBatchElement& BatchElement, class FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeVertexFactoryPixelShaderParameters : public FVertexFactoryShaderParameters {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FLandscapeVertexFactoryPixelShaderParameters, NonVirtual)"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE_API()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeVertexFactory : public FVertexFactory {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE_API(FLandscapeVertexFactory, LANDSCAPE_API)"
  },
  {
    "label": "FLandscapeVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLandscapeVertexFactory(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "FLandscapeVertexFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeVertexFactory()"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} struct FDataType { FVertexStreamComponent PositionComponent ; } ; bool)",
    "insertText": "ShouldCompilePermutation(const FVertexFactoryShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FVertexFactoryShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "GetPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FLandscapeVertexFactory& Other)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(const FDataType& InData)"
  },
  {
    "label": "UpdateRHI()",
    "kind": "Method",
    "detail": "Function (Data = InData ;)",
    "insertText": "UpdateRHI(FRHICommandListImmediate::Get())"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE_API()",
    "kind": "Method",
    "detail": "Function (} FDataType Data ; } ; class FLandscapeXYOffsetVertexFactory : public FLandscapeVertexFactory {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE_API(FLandscapeXYOffsetVertexFactory, LANDSCAPE_API)"
  },
  {
    "label": "FLandscapeXYOffsetVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLandscapeXYOffsetVertexFactory(ERHIFeatureLevel::Type InFeatureLevel) : FLandscapeVertexFactory(InFeatureLevel)"
  },
  {
    "label": "FLandscapeXYOffsetVertexFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLandscapeXYOffsetVertexFactory()"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE_API()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeFixedGridVertexFactory : public FLandscapeVertexFactory {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE_API(FLandscapeFixedGridVertexFactory, LANDSCAPE_API)"
  },
  {
    "label": "FLandscapeFixedGridVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLandscapeFixedGridVertexFactory(ERHIFeatureLevel::Type InFeatureLevel) : FLandscapeVertexFactory(InFeatureLevel)"
  },
  {
    "label": "FLandscapeVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ; struct FLandscapeVertex { uint8 VertexX ; uint8 VertexY ; uint8 SubX ; uint8 SubY ; } ; class FLandscapeVertexBuffer final : public FVertexBuffer { ERHIFeatureLevel::Type FeatureLevel ; int32 NumVertices ; int32 SubsectionSizeVerts ; int32 NumSubsections ; public :)",
    "insertText": "FLandscapeVertexBuffer(FRHICommandListBase& RHICmdList, ERHIFeatureLevel::Type InFeatureLevel, int32 InNumVertices, int32 InSubsectionSizeVerts, int32 InNumSubsections, const FName& InOwnerName) : FeatureLevel(InFeatureLevel) , NumVertices(InNumVertices) , SubsectionSizeVerts(InSubsectionSizeVerts) , NumSubsections(InNumSubsections)"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerName(InOwnerName)"
  },
  {
    "label": "InitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitResource(RHICmdList)"
  },
  {
    "label": "FLandscapeVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLandscapeVertexBuffer()"
  },
  {
    "label": "FLandscapeSharedBuffers()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeSharedBuffers : public FRefCountedObject { public : struct FLandscapeIndexRanges { int32 MinIndex [ LANDSCAPE_MAX_SUBSECTION_NUM ] [ LANDSCAPE_MAX_SUBSECTION_NUM ] ; int32 MaxIndex [ LANDSCAPE_MAX_SUBSECTION_NUM ] [ LANDSCAPE_MAX_SUBSECTION_NUM ] ; int32 MinIndexFull ; int32 MaxIndexFull ; } ; int32 NumVertices ; int32 SharedBuffersKey ; int32 NumIndexBuffers ; int32 SubsectionSizeVerts ; int32 NumSubsections ; FLandscapeVertexFactory* VertexFactory ; FLandscapeVertexFactory* FixedGridVertexFactory ; FLandscapeVertexBuffer* VertexBuffer ; FRenderResource* TileMesh ; FLandscapeVertexFactory* TileVertexFactory ; FVertexBuffer* TileDataBuffer ; FIndexBuffer** IndexBuffers ; FLandscapeIndexRanges* IndexRanges ; bool bUse32BitIndices ; FIndexBuffer* GrassIndexBuffer ; TArray<int32,TInlineAllocator<8>> GrassIndexMipOffsets ; # if RHI_RAYTRACING TArray<FIndexBuffer*> ZeroOffsetIndexBuffers ; # endif)",
    "insertText": "FLandscapeSharedBuffers(FRHICommandListBase& RHICmdList, int32 SharedBuffersKey, int32 SubsectionSizeQuads, int32 NumSubsections, ERHIFeatureLevel::Type FeatureLevel, const FName& OwnerName = NAME_None)"
  },
  {
    "label": "CreateIndexBuffers()",
    "kind": "Method",
    "detail": "Function (template<INDEX_TYPE> void)",
    "insertText": "CreateIndexBuffers(FRHICommandListBase& RHICmdList, const FName& OwnerName)"
  },
  {
    "label": "CreateGrassIndexBuffer()",
    "kind": "Method",
    "detail": "Function (template<INDEX_TYPE> void)",
    "insertText": "CreateGrassIndexBuffer(FRHICommandListBase& RHICmdList, const FName& InOwnerName)"
  },
  {
    "label": "FLandscapeSharedBuffers()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeSharedBuffers()"
  },
  {
    "label": "FLandscapeSectionInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeSectionInfo : public TIntrusiveLinkedList<FLandscapeSectionInfo> { public :)",
    "insertText": "FLandscapeSectionInfo(const UWorld* InWorld, const FGuid& InLandscapeGuid, const FIntPoint& InComponentBase, uint32 LODGroupKey, uint32 InLandscapeKey)"
  },
  {
    "label": "FLandscapeSectionInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeSectionInfo()"
  },
  {
    "label": "ComputeLODForView()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeLODForView(const FSceneView& InView)"
  },
  {
    "label": "ComputeLODBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeLODBias()"
  },
  {
    "label": "GetSectionPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSectionPriority()"
  },
  {
    "label": "ComputeSectionResolution()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "ComputeSectionResolution()"
  },
  {
    "label": "GetSectionCenterAndVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSectionCenterAndVectors(FVector& OutSectionCenterWorldSpace, FVector& OutSectionXVectorWorldSpace, FVector& OutSectionYVectorWorldSpace)"
  },
  {
    "label": "GetComponentResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetComponentResolution()"
  },
  {
    "label": "ShouldInvalidateShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldInvalidateShadows(const FSceneView& InView, float InLODValue, float InLastShadowInvalidationLODValue)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint ComponentBase =)",
    "insertText": "FIntPoint(ForceInit)"
  },
  {
    "label": "ComputeLODFromScreenSize()",
    "kind": "Method",
    "detail": "Function (FSceneInterface* Scene = nullptr ; bool bResourcesCreated = false ; bool bRegistered = false ; } ; struct FLandscapeRenderSystem { typedef uint32 FViewKey ; struct LODSettingsComponent { float LOD0ScreenSizeSquared ; float LOD1ScreenSizeSquared ; float LODOnePlusDistributionScalarSquared ; float LastLODScreenSizeSquared ; float VirtualShadowMapInvalidationLimitLOD ; int8 LastLODIndex ; int8 ForcedLOD ; int8 DrawCollisionPawnLOD ; int8 DrawCollisionVisibilityLOD ; } ; float)",
    "insertText": "ComputeLODFromScreenSize(const LODSettingsComponent& InLODSettings, float InScreenSizeSquared)"
  },
  {
    "label": "FLandscapeRenderSystem()",
    "kind": "Method",
    "detail": "Function (TBitArray<> LandscapeIndexAllocator ; int32 LandscapeIndex ; FIntPoint Min ; FIntPoint Size ; TResourceArray<float> SectionLODBiases ; TArray<FLandscapeSectionInfo*> SectionInfos ; int32 ReferenceCount ; int32 RegisteredCount ; FBufferRHIRef SectionLODBiasBuffer ; FShaderResourceViewRHIRef SectionLODBiasSRV ; FUniformBufferRHIRef SectionLODUniformBuffer ; TMap<const FSceneView*,TResourceArray<float>> PerViewCachedSectionLODValues ; TMap<uint32,TResourceArray<float>> PerViewStateCachedSectionLODValues ; using SectionKeyToLODValueMap = TMap<FIntPoint,float> ; TMap<uint32,SectionKeyToLODValueMap> PerViewStateLastShadowInvalidationSectionLODValues ; TMap<UE::Renderer::Private::IShadowInvalidatingInstances*,TArray<const FPrimitiveSceneInfo*>> ShadowInvalidationRequests ; int8 ForcedLODOverride ; int32 ComponentResolution = - 1 ; FVector ComponentOrigin = FVector::ZeroVector ; FVector ComponentXVector = FVector::ZeroVector ; FVector ComponentYVector = FVector::ZeroVector ; int32 SectionsRemovedSinceLastCompact ; uint32 LandscapeKey = 0 ; FSceneInterface* Scene = nullptr ;)",
    "insertText": "FLandscapeRenderSystem(uint32 InLandscapeKey, FSceneInterface* InScene)"
  },
  {
    "label": "FLandscapeRenderSystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeRenderSystem()"
  },
  {
    "label": "CreateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateResources(FRHICommandListBase& RHICmdList, FLandscapeSectionInfo* SectionInfo)"
  },
  {
    "label": "DestroyResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyResources(FLandscapeSectionInfo* SectionInfo)"
  },
  {
    "label": "RegisterSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSection(FLandscapeSectionInfo* SectionInfo)"
  },
  {
    "label": "UnregisterSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSection(FLandscapeSectionInfo* SectionInfo)"
  },
  {
    "label": "IsValidCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCoord(FIntPoint InRenderCoord)"
  },
  {
    "label": "LinearIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LinearIndex(InRenderCoord.Y - Min.Y)"
  },
  {
    "label": "ResizeToInclude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeToInclude(const FIntPoint& NewCoord)"
  },
  {
    "label": "CompactMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactMap()"
  },
  {
    "label": "AnySectionsInRangeInclusive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnySectionsInRangeInclusive(FIntPoint RangeMin, FIntPoint RangeMax)"
  },
  {
    "label": "SetSectionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionInfo(FIntPoint InRenderCoord, FLandscapeSectionInfo* InSectionInfo)"
  },
  {
    "label": "GetSectionLinearIndex()",
    "kind": "Method",
    "detail": "Function (SectionInfos [)",
    "insertText": "GetSectionLinearIndex(InRenderCoord)"
  },
  {
    "label": "GetSectionInfo()",
    "kind": "Method",
    "detail": "Function (} } FLandscapeSectionInfo*)",
    "insertText": "GetSectionInfo(FIntPoint InRenderCoord)"
  },
  {
    "label": "GetSectionLODValue()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } float)",
    "insertText": "GetSectionLODValue(const FSceneView& InView, FIntPoint InRenderCoord)"
  },
  {
    "label": "GetCachedSectionLODValues()",
    "kind": "Method",
    "detail": "Function (const TResourceArray<float>&)",
    "insertText": "GetCachedSectionLODValues(const FSceneView& InView)"
  },
  {
    "label": "GetSectionLODBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionLODBias(FIntPoint InRenderCoord)"
  },
  {
    "label": "ComputeSectionsLODForView()",
    "kind": "Method",
    "detail": "Function (const TResourceArray<float>&)",
    "insertText": "ComputeSectionsLODForView(const FSceneView& InView, UE::Renderer::Private::IShadowInvalidatingInstances* InShadowInvalidatingInstances)"
  },
  {
    "label": "PerformShadowInvalidations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformShadowInvalidations(UE::Renderer::Private::IShadowInvalidatingInstances& InShadowInvalidatingInstances)"
  },
  {
    "label": "FetchHeightmapLODBiases()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FetchHeightmapLODBiases()"
  },
  {
    "label": "UpdateBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuffers(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateResources_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateResources_Internal(FRHICommandListBase& RHICmdList, FLandscapeSectionInfo* InSectionInfo)"
  },
  {
    "label": "DestroyResources_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyResources_Internal(FLandscapeSectionInfo* InSectionInfo)"
  },
  {
    "label": "IMPLEMENT_CUSTOM_RENDER_PASS_USER_DATA()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeLODOverridesCustomRenderPassUserData : public ICustomRenderPassUserData { public :)",
    "insertText": "IMPLEMENT_CUSTOM_RENDER_PASS_USER_DATA(FLandscapeLODOverridesCustomRenderPassUserData)"
  },
  {
    "label": "FLandscapeLODOverridesCustomRenderPassUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeLODOverridesCustomRenderPassUserData(const TMap<uint32, int32>& InLandscapeLODOverrides) : LandscapeLODOverrides(InLandscapeLODOverrides)"
  },
  {
    "label": "GetLandscapeLODOverrides()",
    "kind": "Method",
    "detail": "Function (} const TMap<uint32,int32>&)",
    "insertText": "GetLandscapeLODOverrides()"
  },
  {
    "label": "FLandscapeSceneViewExtension()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeSceneViewExtension()"
  },
  {
    "label": "SetupViewFamily()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewFamily(FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "SetupView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupView(FSceneViewFamily& InViewFamily, FSceneView& InView)"
  },
  {
    "label": "BeginRenderViewFamily()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRenderViewFamily(FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PreRenderViewFamily_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreRenderViewFamily_RenderThread(FRDGBuilder& GraphBuilder, FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PreRenderView_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreRenderView_RenderThread(FRDGBuilder& GraphBuilder, FSceneView& InView)"
  },
  {
    "label": "PreInitViews_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreInitViews_RenderThread(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetLandscapeRenderSystems()",
    "kind": "Method",
    "detail": "Function (const TMap<uint32,FLandscapeRenderSystem*>&)",
    "insertText": "GetLandscapeRenderSystems()"
  },
  {
    "label": "GetLandscapeRenderSystems()",
    "kind": "Method",
    "detail": "Function (TArray<FLandscapeRenderSystem*>)",
    "insertText": "GetLandscapeRenderSystems(const class FSceneInterface* InScene)"
  },
  {
    "label": "GetLandscapeRenderSystem()",
    "kind": "Method",
    "detail": "Function (FLandscapeRenderSystem*)",
    "insertText": "GetLandscapeRenderSystem(const class FSceneInterface* InScene, uint32 InLandscapeKey)"
  },
  {
    "label": "GetNumViewsWithShowCollision()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumViewsWithShowCollision()"
  },
  {
    "label": "EndFrame_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame_RenderThread()"
  },
  {
    "label": "FLandscapeViewData()",
    "kind": "Method",
    "detail": "Function (private : struct FLandscapeViewData {)",
    "insertText": "FLandscapeViewData()"
  },
  {
    "label": "FLandscapeViewData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeViewData(FSceneView& InView)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (FSceneView* View = nullptr ; UE::Renderer::Private::IShadowInvalidatingInstances* ShadowInvalidatingInstances = nullptr ; TResourceArray<uint32> LandscapeIndirection ; TResourceArray<float> LandscapeLODData ; } ; TArray<FLandscapeViewData> LandscapeViews ; UE::Tasks::FTask LandscapeSetupTask ; int32 NumViewsWithShowCollision = 0 ; int32 NumViewsWithShowCollisionAcc = 0 ; } ; class FLandscapeVisibilityHelper { public : void)",
    "insertText": "Init(UPrimitiveComponent* LandscapeComponent, FPrimitiveSceneProxy* ProxyIn)"
  },
  {
    "label": "OnAddedToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAddedToWorld()"
  },
  {
    "label": "OnRemoveFromWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRemoveFromWorld()"
  },
  {
    "label": "ShouldBeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeVisible()"
  },
  {
    "label": "Patches()",
    "kind": "Method",
    "detail": "Function (bool bShowPatches ; bool bDisableStatic ; private : FAutoConsoleCommand PatchesConsoleCommand ; FAutoConsoleCommand StaticConsoleCommand ; void)",
    "insertText": "Patches()"
  },
  {
    "label": "Static()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Static()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} ; FLandscapeDebugOptions GLandscapeDebugOptions ; class FLandscapeMeshProxySceneProxy final : public FStaticMeshSceneProxy { public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FLandscapeMeshProxySceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLandscapeMeshProxySceneProxy(UStaticMeshComponent* InComponent, const FGuid& InLandscapeGuid, const TArray<FIntPoint>& InProxySectionsBases, const TArray<FVector>& InProxySectionsCentersLocalSpace, const FVector& InComponentXVector, const FVector& InComponentYVector, const FTransform& LocalToWorld, int32 ComponentResolution, int8 InProxyLOD, uint32 InLODGroupKey, uint32 LandscapeKey)"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "DestroyRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderThreadResources()"
  },
  {
    "label": "OnLevelAddedToWorld_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnLevelAddedToWorld_RenderThread()"
  },
  {
    "label": "OnLevelRemovedFromWorld_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld_RenderThread()"
  },
  {
    "label": "RegisterSections()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterSections()"
  },
  {
    "label": "UnregisterSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSections()"
  },
  {
    "label": "FLandscapeLCI()",
    "kind": "Method",
    "detail": "Function (class FLandscapeLCI final : public FLightCacheInterface { public :)",
    "insertText": "FLandscapeLCI(const ULandscapeComponent* InComponent, ERHIFeatureLevel::Type FeatureLevel, bool bVFRequiresPrimitiveUniformBuffer) : FLightCacheInterface()"
  },
  {
    "label": "SetGlobalVolumeLightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalVolumeLightmap(true)"
  },
  {
    "label": "GetMeshMapBuildData()",
    "kind": "Method",
    "detail": "Function (} const FMeshMapBuildData* MapBuildData = InComponent ->)",
    "insertText": "GetMeshMapBuildData()"
  },
  {
    "label": "SetLightMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightMap(MapBuildData->LightMap)"
  },
  {
    "label": "SetShadowMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShadowMap(MapBuildData->ShadowMap)"
  },
  {
    "label": "SetResourceCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceCluster(MapBuildData->ResourceCluster)"
  },
  {
    "label": "GetInteraction()",
    "kind": "Method",
    "detail": "Function (bCanUsePrecomputedLightingParametersFromGPUScene = true ; } IrrelevantLights = MapBuildData -> IrrelevantLights ; } } FLightInteraction)",
    "insertText": "GetInteraction(const FLightSceneProxy* LightSceneProxy)"
  },
  {
    "label": "WITH_EDITOR()",
    "kind": "Method",
    "detail": "Function (private : TArray<FGuid> IrrelevantLights ; } ; public : const int8 MAX_SUBSECTION_COUNT = 2* 2 ; # if RHI_RAYTRACING TPimplPtr<FLandscapeRayTracingImpl> RayTracingImpl ; # endif FLandscapeRenderSystem ; TMap<uint32,FLandscapeSharedBuffers*> SharedBuffersMap ; protected : int8 MaxLOD ; int8 NumWeightmapLayerAllocations ; uint8 StaticLightingLOD ; uint8 VirtualTexturePerPixelHeight ; float WeightmapSubsectionOffset ; TArray<float> LODScreenRatioSquared ; int32 FirstLOD ; int32 LastLOD ; int32 FirstVirtualTextureLOD ; int32 LastVirtualTextureLOD ; float ComponentMaxExtend ; float InvLODBlendRange ; FLandscapeRenderSystem::LODSettingsComponent LODSettings ; int32 NumSubsections ; int32 SubsectionSizeQuads ; int32 SubsectionSizeVerts ; int32 ComponentSizeQuads ; int32 ComponentSizeVerts ; float StaticLightingResolution ; FIntPoint SectionBase ; FMatrix LocalToWorldNoScaling ; TArray<FLandscapeBatchElementParams> StaticBatchParamArray ; bool bNaniteActive ; bool bUsesLandscapeCulling ; FMeshBatch GrassMeshBatch ; TArray<FLandscapeBatchElementParams> GrassBatchParams ; FVector4f WeightmapScaleBias ; TArray<UTexture2D*> WeightmapTextures ; UTexture2D* VisibilityWeightmapTexture ; int32 VisibilityWeightmapChannel ; # if WITH_EDITOR TArray<FLinearColor> LayerColors ; # endif UTexture2D* HeightmapTexture ; FVector4f HeightmapScaleBias ; float HeightmapSubsectionOffsetU ; float HeightmapSubsectionOffsetV ; UTexture2D* XYOffsetmapTexture ; uint32 SharedBuffersKey ; FLandscapeSharedBuffers* SharedBuffers ; FLandscapeVertexFactory* VertexFactory ; FLandscapeVertexFactory* FixedGridVertexFactory ; TArray<FMaterialRenderProxy*> AvailableMaterials ; TUniquePtr<FLandscapeLCI> ComponentLightInfo ; TArray<int8> LODIndexToMaterialIndex ; TArray<int8> MaterialIndexToStaticMeshBatchLOD ; TArray<FMaterialRelevance> MaterialRelevances ; int32 NumRelevantMips = 0 ; TArray<double> WorldSpaceMipToMipMaxDeltas ; float VirtualShadowMapConstantDepthBias ; float VirtualShadowMapInvalidationHeightErrorThreshold ; # if WITH_EDITORONLY_DATA FLandscapeEditToolRenderData EditToolRenderData ; # endif # if)",
    "insertText": "WITH_EDITOR(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 SimpleCollisionMipLevel ; FCollisionResponseContainer CollisionResponse ; # endif #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FLandscapeComponentSceneProxy()",
    "kind": "Method",
    "detail": "Function (# endif TUniformBuffer<FLandscapeUniformShaderParameters> LandscapeUniformShaderParameters ; TArray<TUniformBuffer<FLandscapeFixedGridUniformShaderParameters>> LandscapeFixedGridUniformShaderParameters ; FMatrix WorldToLocal ; FLandscapeVisibilityHelper VisibilityHelper ; # if ! UE_BUILD_SHIPPING FName DebugName ; # endif protected : ~)",
    "insertText": "FLandscapeComponentSceneProxy()"
  },
  {
    "label": "GetMeshElementForFixedGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshElementForFixedGrid(int32 InLodIndex, FMaterialRenderProxy* InMaterialInterface, FMeshBatch& OutMeshBatch, TArray<FLandscapeBatchElementParams>& OutStaticBatchParamArray)"
  },
  {
    "label": "GetStaticMeshElement()",
    "kind": "Method",
    "detail": "Function (template<class ArrayType> bool)",
    "insertText": "GetStaticMeshElement(int32 LODIndex, bool bForToolMesh, FMeshBatch& MeshBatch, ArrayType& OutStaticBatchParamArray)"
  },
  {
    "label": "FLandscapeComponentSceneProxy()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FLandscapeComponentSceneProxy(ULandscapeComponent* InComponent)"
  },
  {
    "label": "DrawStaticElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStaticElements(FStaticPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "ApplyViewDependentMeshArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyViewDependentMeshArguments(const FSceneView& View, FMeshBatch& ViewDependentMeshBatch)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "GetLightRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightRelevance(const FLightSceneProxy* LightSceneProxy, bool& bDynamic, bool& bRelevant, bool& bLightMapped, bool& bShadowMapped)"
  },
  {
    "label": "OnTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransformChanged(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetGrassMeshBatch()",
    "kind": "Method",
    "detail": "Function (class ULandscapeComponent ; class FLandscapeVertexFactoryVertexShaderParameters ; class FLandscapeXYOffsetVertexFactoryVertexShaderParameters ; class FLandscapeVertexFactoryPixelShaderParameters ; struct FLandscapeBatchElementParams ; const FMeshBatch&)",
    "insertText": "GetGrassMeshBatch()"
  },
  {
    "label": "HeightfieldHasPendingStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeightfieldHasPendingStreaming()"
  },
  {
    "label": "GetHeightfieldRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightfieldRepresentation(UTexture2D*& OutHeightmapTexture, UTexture2D*& OutVisibilityTexture, FHeightfieldComponentDescription& OutDescription)"
  },
  {
    "label": "GetLCIs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLCIs(FLCIArray& LCIs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual int32 GetLightMapResolution()"
  },
  {
    "label": "HasRayTracingRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRayTracingRepresentation()"
  },
  {
    "label": "OnRenderCoordsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenderCoordsChanged(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetSectionBoundsAndLocalToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSectionBoundsAndLocalToWorld(FBoxSphereBounds& LocalBounds, FMatrix& LocalToWorld)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (const FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo()"
  },
  {
    "label": "FLandscapeDebugMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeDebugMaterialRenderProxy : public FMaterialRenderProxy { public : const FMaterialRenderProxy* const Parent ; const UTexture2D* RedTexture ; const UTexture2D* GreenTexture ; const UTexture2D* BlueTexture ; const FLinearColor R ; const FLinearColor G ; const FLinearColor B ;)",
    "insertText": "FLandscapeDebugMaterialRenderProxy(const FMaterialRenderProxy* InParent, const UTexture2D* TexR, const UTexture2D* TexG, const UTexture2D* TexB, const FLinearColor& InR, const FLinearColor& InG, const FLinearColor& InB) : FMaterialRenderProxy(InParent->GetMaterialName()), Parent(InParent), RedTexture(TexR), GreenTexture(TexG), BlueTexture(TexB), R(InR), G(InG), B(InB)"
  },
  {
    "label": "GetMaterialNoFallback()",
    "kind": "Method",
    "detail": "Function (} const FMaterial*)",
    "insertText": "GetMaterialNoFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetFallback()",
    "kind": "Method",
    "detail": "Function (} const FMaterialRenderProxy*)",
    "insertText": "GetFallback(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetParameterValue(EMaterialParameterType Type, const FHashedMaterialParameterInfo& ParameterInfo, FMaterialParameterValue& OutValue, const FMaterialRenderContext& Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = R ; return true ; } else)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"Landscape_GreenMask\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = G ; return true ; } else)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"Landscape_BlueMask\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = B ; return true ; } break ; case EMaterialParameterType::Texture :)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"Landscape_RedTexture\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = RedTexture ; return true ; } else)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"Landscape_GreenTexture\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = GreenTexture ; return true ; } else)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"Landscape_BlueTexture\")))"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (OutValue = BlueTexture ; return true ; } break ; default : break ; } return Parent ->)",
    "insertText": "GetParameterValue(Type, ParameterInfo, OutValue, Context)"
  },
  {
    "label": "FLandscapeSelectMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeSelectMaterialRenderProxy : public FMaterialRenderProxy { public : const FMaterialRenderProxy* const Parent ; const UTexture2D* SelectTexture ;)",
    "insertText": "FLandscapeSelectMaterialRenderProxy(const FMaterialRenderProxy* InParent, const UTexture2D* InTexture) : FMaterialRenderProxy(InParent->GetMaterialName()), Parent(InParent), SelectTexture(InTexture)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (OutValue =)",
    "insertText": "FLinearColor(1.f, 0.5f, 0.5f)"
  },
  {
    "label": "FLandscapeMaskMaterialRenderProxy()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeMaskMaterialRenderProxy : public FMaterialRenderProxy { public : const FMaterialRenderProxy* const Parent ; const UTexture2D* SelectTexture ; const bool bInverted ;)",
    "insertText": "FLandscapeMaskMaterialRenderProxy(const FMaterialRenderProxy* InParent, const UTexture2D* InTexture, const bool InbInverted) : FMaterialRenderProxy(InParent->GetMaterialName()), Parent(InParent), SelectTexture(InTexture), bInverted(InbInverted)"
  },
  {
    "label": "OutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutValue(float)"
  },
  {
    "label": "FLandscapeLayerUsageRenderProxy()",
    "kind": "Method",
    "detail": "Function (} } ; class FLandscapeLayerUsageRenderProxy : public FMaterialRenderProxy { const FMaterialRenderProxy* const Parent ; int32 ComponentSizeVerts ; TArray<FLinearColor> LayerColors ; float Rotation ; public :)",
    "insertText": "FLandscapeLayerUsageRenderProxy(const FMaterialRenderProxy* InParent, int32 InComponentSizeVerts, const TArray<FLinearColor>& InLayerColors, float InRotation) : FMaterialRenderProxy(InParent->GetMaterialName()) , Parent(InParent) , ComponentSizeVerts(InComponentSizeVerts) , LayerColors(InLayerColors) , Rotation(InRotation)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName ColorNames [ ] = {)",
    "insertText": "FName(TEXT(\"Color0\")), FName(TEXT(\"Color1\")), FName(TEXT(\"Color2\")), FName(TEXT(\"Color3\")), FName(TEXT(\"Color4\")), FName(TEXT(\"Color5\")), FName(TEXT(\"Color6\")), FName(TEXT(\"Color7\")), FName(TEXT(\"Color8\")), FName(TEXT(\"Color9\")), FName(TEXT(\"Color10\")), FName(TEXT(\"Color11\")), FName(TEXT(\"Color12\")), FName(TEXT(\"Color13\")), FName(TEXT(\"Color14\")), FName(TEXT(\"Color15\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = LayerColors [ i ] ; return true ; } } break ; case EMaterialParameterType::Scalar :)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"Rotation\")))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutValue = Rotation ; return true ; } else)",
    "insertText": "if(ParameterInfo.Name == FName(TEXT(\"NumStripes\")))"
  },
  {
    "label": "OutValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutValue(float)LayerColors.Num()"
  }
]