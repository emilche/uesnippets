[
  {
    "label": "FZipArchiveWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FZipArchiveWriter"
  },
  {
    "label": "SHADERCOMPILERCOMMON_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHADERCOMPILERCOMMON_API"
  },
  {
    "label": "FShaderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderInfo"
  },
  {
    "label": "FShaderSymbolExport()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_ENGINE # include \" CoreTypes . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Set . h \" # include \" Templates / UniquePtr . h \" # include \" Serialization / MemoryReader . h \" class FZipArchiveWriter ; class FShaderSymbolExport { public :)",
    "insertText": "FShaderSymbolExport()"
  },
  {
    "label": "FShaderSymbolExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderSymbolExport(FName InShaderFormat)"
  },
  {
    "label": "NotifyShaderCompiled()",
    "kind": "Method",
    "detail": "Function (template<TPlatformShaderSymbolData> void)",
    "insertText": "NotifyShaderCompiled(const TConstArrayView<uint8>& PlatformSymbolData, const FString& DebugInfo = FString())"
  },
  {
    "label": "NotifyShaderCompilersShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyShaderCompilersShutdown()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "WriteSymbolData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSymbolData(const FString& Filename, const FString& DebugInfo, TConstArrayView<uint8> Contents)"
  },
  {
    "label": "NotifyShaderCompiled()",
    "kind": "Method",
    "detail": "Function (const FName ShaderFormat ; TUniquePtr<FZipArchiveWriter> ZipWriter ; TSet<FString> ExportedShaders ; FString ExportPath ; FString InfoFilePath ; uint64 TotalSymbolDataBytes { 0 } ; uint64 TotalSymbolData { 0 } ; bool bExportShaderSymbols { false } ; struct FShaderInfo { FString Hash ; FString Data ; } ; TArray<FShaderInfo> ShaderInfos ; bool bMultiprocessOwner { false } ; } ; template<TPlatformShaderSymbolData> void)",
    "insertText": "NotifyShaderCompiled(const TConstArrayView<uint8>& PlatformSymbolData, const FString& DebugInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bFirst = true ;)",
    "insertText": "if(bFirst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bFirst = false ; })",
    "insertText": "if(bExportShaderSymbols)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (TPlatformShaderSymbolData FullSymbolData ; FMemoryReaderView)",
    "insertText": "Ar(PlatformSymbolData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<FullSymbolData ;)",
    "insertText": "for(const auto& SymbolData : FullSymbolData.GetAllSymbolData())"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString FileName = SymbolData .)",
    "insertText": "GetFilename()"
  },
  {
    "label": "GetContents()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<uint8> Contents = SymbolData .)",
    "insertText": "GetContents()"
  },
  {
    "label": "WriteSymbolData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSymbolData(FileName, DebugInfo, Contents)"
  }
]