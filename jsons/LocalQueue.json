[
  {
    "label": "TWorkStealingQueueBase2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWorkStealingQueueBase2"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAlignedElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlignedElement"
  },
  {
    "label": "TWorkStealingQueue2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWorkStealingQueue2"
  },
  {
    "label": "TLocalQueueRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLocalQueueRegistry"
  },
  {
    "label": "TLocalQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLocalQueue"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / RandomStream . h \" # include \" Experimental / Containers / FAAArrayQueue . h \" # include \" ProfilingDebugging / CpuProfilerTrace . h \" # include \" Async / Fundamental / Task . h \" # include<atomic> # if AGGRESSIVE_MEMORY_SAVING # define LOCALQUEUEREGISTRYDEFAULTS_MAX_LOCALQUEUES 1 0 2 4 # define LOCALQUEUEREGISTRYDEFAULTS_MAX_ITEMCOUNT 5 1 2 # else # define LOCALQUEUEREGISTRYDEFAULTS_MAX_LOCALQUEUES 1 0 2 4 # define LOCALQUEUEREGISTRYDEFAULTS_MAX_ITEMCOUNT 1 0 2 4 # endif namespace LowLevelTasks { namespace LocalQueue_Impl { template<uint32 NumItems> class TWorkStealingQueueBase2 { enum class ESlotState : uintptr_t { Free = 0,Taken = 1,} ; protected : bool)",
    "insertText": "Put(uintptr_t Item)"
  },
  {
    "label": "Idx()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Idx(Head + 1)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uintptr_t Slot = ItemSlots [ Idx ] . Value .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (ItemSlots [ Idx ] . Value .)",
    "insertText": "store(Item, std::memory_order_release)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Head + + ;)",
    "insertText": "checkSlow(Head % NumItems == Idx)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (Head - - ;)",
    "insertText": "checkSlow((Head + 1) % NumItems == Idx)"
  },
  {
    "label": "Steal()",
    "kind": "Method",
    "detail": "Function (Item = Slot ; return true ; } return false ; } bool)",
    "insertText": "Steal(uintptr_t& Item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; } return false ; } else)",
    "insertText": "if(Slot != uintptr_t(ESlotState::Taken) && ItemSlots[Idx].Value.compare_exchange_weak(Slot, uintptr_t(ESlotState::Taken), std::memory_order_acq_rel))"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (uint32 Prev = Tail .)",
    "insertText": "fetch_add(1, std::memory_order_release)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (ItemSlots [ Idx ] . Value .)",
    "insertText": "store(uintptr_t(ESlotState::Free), std::memory_order_release)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Item = Slot ; return true ; } ItemSlots [ Idx ] . Value .)",
    "insertText": "store(Slot, std::memory_order_release)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(true)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} private : struct FAlignedElement {)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE * 2)"
  },
  {
    "label": "Put()",
    "kind": "Method",
    "detail": "Function (} ; } ; template<Type,uint32 NumItems> class TWorkStealingQueue2 final : protected TWorkStealingQueueBase2<NumItems> { using PointerType = Type* ; public : bool)",
    "insertText": "Put(PointerType Item)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Get(PointerType& Item)"
  },
  {
    "label": "Steal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Steal(PointerType& Item)"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace Private { enum class ELocalQueueType { EBackground,EForeground,} ; template<uint32 NumLocalItems = LOCALQUEUEREGISTRYDEFAULTS_MAX_ITEMCOUNT,uint32 MaxLocalQueues = LOCALQUEUEREGISTRYDEFAULTS_MAX_LOCALQUEUES> class TLocalQueueRegistry { uint32)",
    "insertText": "Rand()"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (uint32 State =)",
    "insertText": "Cycles()"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (State = State* 7 4 7 7 9 6 4 0 5 u + 2 8 9 1 3 3 6 4 5 3 u ;)",
    "insertText": "State((State >> ((State >> 28u) + 4u)) ^ State)"
  },
  {
    "label": "TLocalQueue()",
    "kind": "Method",
    "detail": "Function (} public : class TLocalQueue ; private : using FLocalQueueType = LocalQueue_Impl::TWorkStealingQueue2<FTask,NumLocalItems> ; using FOverflowQueueType = FAAArrayQueue<FTask> ; using DequeueHazard = FOverflowQueueType::DequeueHazard ; public : class TLocalQueue { template<uint32,uint32> class TLocalQueueRegistry ; public :)",
    "insertText": "TLocalQueue(TLocalQueueRegistry& InRegistry, ELocalQueueType InQueueType) : Registry(&InRegistry), QueueType(InQueueType)"
  },
  {
    "label": "AddLocalQueue()",
    "kind": "Method",
    "detail": "Function (Registry ->)",
    "insertText": "AddLocalQueue(this)"
  },
  {
    "label": "getHeadHazard()",
    "kind": "Method",
    "detail": "Function (DequeueHazards [ PriorityIndex ] = Registry -> OverflowQueues [ PriorityIndex ] .)",
    "insertText": "getHeadHazard()"
  },
  {
    "label": "TLocalQueue()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TLocalQueue()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTask* Item ;)",
    "insertText": "if(!LocalQueues[PriorityIndex].Get(Item))"
  },
  {
    "label": "enqueue()",
    "kind": "Method",
    "detail": "Function (break ; } Registry -> OverflowQueues [ PriorityIndex ] .)",
    "insertText": "enqueue(Item)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Enqueue(FTask* Item, uint32 PriorityIndex)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (} } FTask*)",
    "insertText": "Dequeue(bool GetBackGroundTasks)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 MaxPriority = GetBackGroundTasks ?)",
    "insertText": "int32(ETaskPriority::Count) : int32(ETaskPriority::ForegroundCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTask* Item ;)",
    "insertText": "if(LocalQueues[PriorityIndex].Get(Item))"
  },
  {
    "label": "StealItem()",
    "kind": "Method",
    "detail": "Function (} FTask* Result = Registry ->)",
    "insertText": "StealItem(CachedRandomIndex, CachedPriorityIndex, GetBackGroundTasks)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (DequeueHazard DequeueHazards [)",
    "insertText": "uint32(ETaskPriority::Count)"
  },
  {
    "label": "TLocalQueueRegistry()",
    "kind": "Method",
    "detail": "Function (TLocalQueueRegistry* Registry ; uint32 CachedRandomIndex = InvalidIndex ; uint32 CachedPriorityIndex = 0 ; ELocalQueueType QueueType ; } ;)",
    "insertText": "TLocalQueueRegistry()"
  },
  {
    "label": "AddLocalQueue()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddLocalQueue(TLocalQueue* QueueToAdd)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (uint32 Index = NumLocalQueues .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(Index >= MaxLocalQueues, LowLevelTasks, Fatal, TEXT(\"Attempting to add more than the maximum allowed number of queues (%d)\"), MaxLocalQueues)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (LocalQueues [ Index ] .)",
    "insertText": "store(QueueToAdd, std::memory_order_release)"
  },
  {
    "label": "StealItem()",
    "kind": "Method",
    "detail": "Function (} FTask*)",
    "insertText": "StealItem(uint32& CachedRandomIndex, uint32& CachedPriorityIndex, bool GetBackGroundTasks)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32 NumQueues = NumLocalQueues .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CachedRandomIndex = CachedRandomIndex % NumQueues ;)",
    "insertText": "for(uint32 Index = 0; Index < NumLocalQueues; Index++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FTask* Item ;)",
    "insertText": "if(LocalQueue->LocalQueues[PriorityIndex].Steal(Item))"
  },
  {
    "label": "DequeueGlobal()",
    "kind": "Method",
    "detail": "Function (} FTask*)",
    "insertText": "DequeueGlobal(bool GetBackGroundTasks = true)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (LocalQueues [ Index ] .)",
    "insertText": "store(0, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} NumLocalQueues .)",
    "insertText": "store(0, std::memory_order_release)"
  }
]