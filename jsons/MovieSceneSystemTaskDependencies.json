[
  {
    "label": "FMovieSceneEntitySystemGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEntitySystemGraph"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSystemTaskPrerequisites",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSystemTaskPrerequisites"
  },
  {
    "label": "FPrerequisite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrerequisite"
  },
  {
    "label": "FSystemSubsequentTasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSystemSubsequentTasks"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Stats / Stats2 . h \" # include \" Templates / SharedPointer . h \" # include<initializer_list> struct FMovieSceneEntitySystemGraph ;)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"System Dependency Cost\"), MovieSceneEval_SystemDependencyCost, STATGROUP_MovieSceneECS,)"
  },
  {
    "label": "FSystemTaskPrerequisites()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace MovieScene { enum class EEntityThreadingModel : uint8 ; struct FSystemTaskPrerequisites { using FComponentTypeID = UE::MovieScene::FComponentTypeID ;)",
    "insertText": "FSystemTaskPrerequisites()"
  },
  {
    "label": "FSystemTaskPrerequisites()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSystemTaskPrerequisites(std::initializer_list<FGraphEventRef> InEvents)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Prereqs .)",
    "insertText": "Add(FPrerequisite{ Task, FComponentTypeID::Invalid() })"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllTasks .)",
    "insertText": "Add(Task)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "Num()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (} const FGraphEventArray*)",
    "insertText": "All()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (AllTasks .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllTasks .)",
    "insertText": "Add(Prereq.GraphEvent)"
  },
  {
    "label": "FilterByComponent()",
    "kind": "Method",
    "detail": "Function (} } return& AllTasks ; } void)",
    "insertText": "FilterByComponent(FGraphEventArray& OutArray, FComponentTypeID ComponentType)"
  },
  {
    "label": "FilterByComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByComponent(OutArray, { ComponentType })"
  },
  {
    "label": "FilterByComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterByComponent(FGraphEventArray& OutArray, std::initializer_list<FComponentTypeID> ComponentTypes)"
  },
  {
    "label": "AddRootTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRootTask(const FGraphEventRef& InNewTask)"
  },
  {
    "label": "AddComponentTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponentTask(FComponentTypeID::Invalid(), InNewTask)"
  },
  {
    "label": "AddComponentTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddComponentTask(FComponentTypeID ComponentType, const FGraphEventRef& InNewTask)"
  },
  {
    "label": "Consume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Consume(const FSystemTaskPrerequisites& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddRootTask()",
    "kind": "Method",
    "detail": "Function (} private : struct FPrerequisite { FGraphEventRef GraphEvent ; FComponentTypeID ComponentType ; } ; TArray<FPrerequisite,TInlineAllocator<4>> Prereqs ; FGraphEventArray AllTasks ; } ; struct FSystemSubsequentTasks { using FComponentTypeID = UE::MovieScene::FComponentTypeID ; void)",
    "insertText": "AddRootTask(FGraphEventRef RootTask)"
  },
  {
    "label": "AddComponentTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponentTask(FComponentTypeID ComponentType, FGraphEventRef ComponentTask)"
  },
  {
    "label": "FSystemSubsequentTasks()",
    "kind": "Method",
    "detail": "Function (private : FMovieSceneEntitySystemGraph ;)",
    "insertText": "FSystemSubsequentTasks(FMovieSceneEntitySystemGraph* InGraph, FGraphEventArray* InAllTasks, EEntityThreadingModel InThreadingModel)"
  },
  {
    "label": "ResetNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNode(uint16 InNodeID)"
  }
]