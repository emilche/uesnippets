[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SScalabilitySettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScalabilitySettings"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs )"
  },
  {
    "label": "IsPlayInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInEditor()"
  },
  {
    "label": "GetScreenPercentageFormatArguments()",
    "kind": "Method",
    "detail": "Function (FFormatNamedArguments)",
    "insertText": "GetScreenPercentageFormatArguments(const class UGameViewportClient* ViewportClient)"
  },
  {
    "label": "OnGroupQualityLevelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGroupQualityLevelChanged(ECheckBoxState NewState, const TCHAR* InGroupName, int32 InQualityLevel)"
  },
  {
    "label": "OnResolutionScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolutionScaleChanged(float InValue)"
  },
  {
    "label": "OnResolutionPresetClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnResolutionPresetClicked(int32 Preset)"
  },
  {
    "label": "IsResolutionScaleEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResolutionScaleEditable()"
  },
  {
    "label": "MakeButtonWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeButtonWidget(const FText& InName, const TCHAR* InGroupName, int32 InQualityLevel, const FText& InToolTip)"
  },
  {
    "label": "MakeHeaderButtonWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeHeaderButtonWidget(const FText& InName, int32 InQualityLevel, const FText& InToolTip, Scalability::EQualityLevelBehavior Behavior)"
  },
  {
    "label": "MakeAutoButtonWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutoButtonWidget()"
  },
  {
    "label": "OnHeaderClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnHeaderClicked(int32 InQualityLevel, Scalability::EQualityLevelBehavior Behavior)"
  },
  {
    "label": "OnAutoClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAutoClicked()"
  },
  {
    "label": "MakeGridSlot()",
    "kind": "Method",
    "detail": "Function (SGridPanel::FSlot::FSlotArguments)",
    "insertText": "MakeGridSlot(int32 InCol, int32 InRow, int32 InColSpan = 1, int32 InRowSpan = 1)"
  },
  {
    "label": "OnMonitorPerformanceChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMonitorPerformanceChanged(ECheckBoxState NewState)"
  },
  {
    "label": "AddButtonsToGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddButtonsToGrid(int32 X0, int32 Y0, TSharedRef<SGridPanel> ButtonMatrix, const FText* FiveNameArray, int32 ButtonCount, const TCHAR* GroupName, const FText& TooltipShape)"
  }
]