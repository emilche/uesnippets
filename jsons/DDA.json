[
  {
    "label": "DDA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DDA"
  },
  {
    "label": "LevelSetHDDA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LevelSetHDDA"
  },
  {
    "label": "VolumeHDDA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumeHDDA"
  },
  {
    "label": "DDA()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_DDA_HAS_BEEN_INCLUDED # define OPENVDB_MATH_DDA_HAS_BEEN_INCLUDED # include \" Coord . h \" # include \" Math . h \" # include \" Vec3 . h \" # include<openvdb / Types . h> # include<iostream> # include<limits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { template<RayT,Index Log2Dim = 0> class DDA { public : using RealType = RayT::RealType ; using RealT = RealType ; using Vec3Type = RayT::Vec3Type ; using Vec3T = Vec3Type ;)",
    "insertText": "DDA()"
  },
  {
    "label": "DDA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DDA(const RayT& ray)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(ray)"
  },
  {
    "label": "DDA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DDA(const RayT& ray, RealT startTime)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(ray, startTime)"
  },
  {
    "label": "DDA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DDA(const RayT& ray, RealT startTime, RealT maxTime)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(ray, startTime, maxTime)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(const RayT& ray, RealT startTime, RealT maxTime)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(startTime <= maxTime)"
  },
  {
    "label": "ray()",
    "kind": "Method",
    "detail": "Function (const int DIM = 1<<Log2Dim ; mT0 = startTime ; mT1 = maxTime ; const Vec3T& pos =)",
    "insertText": "ray(mT0), &dir = ray.dir(), &inv = ray.invDir()"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (mVoxel =)",
    "insertText": "floor(pos) & (~(DIM-1))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (mStep [ axis ] = 0 ; mNext [ axis ] = std::numeric_limits<RealT)",
    "insertText": "max()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(inv[axis] > 0)"
  },
  {
    "label": "mT0()",
    "kind": "Method",
    "detail": "Function (mStep [ axis ] = DIM ; mNext [ axis ] =)",
    "insertText": "mT0(mVoxel[axis] + DIM - pos[axis])"
  },
  {
    "label": "mT0()",
    "kind": "Method",
    "detail": "Function (mDelta [ axis ] = mStep [ axis ]* inv [ axis ] ; } else { mStep [ axis ] = - DIM ; mNext [ axis ] =)",
    "insertText": "mT0(mVoxel[axis] - pos[axis])"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (mDelta [ axis ] = mStep [ axis ]* inv [ axis ] ; } } } void)",
    "insertText": "init(const RayT& ray)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(ray, ray.t0(), ray.t1())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(const RayT& ray, RealT startTime)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(ray, startTime, ray.t1())"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "step()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int stepAxis = static_cast<)",
    "insertText": "int(math::MinIndex(mNext))"
  },
  {
    "label": "voxel()",
    "kind": "Method",
    "detail": "Function (mT0 = mNext [ stepAxis ] ; mNext [ stepAxis ] + = mDelta [ stepAxis ] ; mVoxel [ stepAxis ] + = mStep [ stepAxis ] ; return mT0<= mT1 ; } const Coord&)",
    "insertText": "voxel()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(std::ostream& os = std::cout)"
  },
  {
    "label": "Dim()",
    "kind": "Method",
    "detail": "Function (os<<\")",
    "insertText": "Dim(1<<Log2Dim) << \" time=\" << mT0 << \" next()=\" << this->next()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : RealT mT0,mT1 ; Coord mVoxel,mStep ; Vec3T mDelta,mNext ; } ; template<RayT,Index Log2Dim> std::ostream&)",
    "insertText": "operator(std::ostream& os, const DDA<RayT, Log2Dim>& dda)"
  },
  {
    "label": "Dim()",
    "kind": "Method",
    "detail": "Function (os<<\")",
    "insertText": "Dim(1<<Log2Dim) << \" time=\" << dda.time() << \" next()=\" << dda.next() << \" voxel=\" << dda.voxel()"
  },
  {
    "label": "dda()",
    "kind": "Method",
    "detail": "Function (math::DDA<TesterT::RayT,NodeT::TOTAL>)",
    "insertText": "dda(tester.ray())"
  },
  {
    "label": "setRange()",
    "kind": "Method",
    "detail": "Function (tester .)",
    "insertText": "setRange(dda.time(), dda.next())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(dda.step())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (tester .)",
    "insertText": "init(dda.time())"
  },
  {
    "label": "march()",
    "kind": "Method",
    "detail": "Function (} template<AccessorT> TimeSpanT)",
    "insertText": "march(RayT& ray, AccessorT &acc)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (TimeSpanT)",
    "insertText": "t(-1, -1)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (TimeSpanT)",
    "insertText": "t(-1,-1)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (times .)",
    "insertText": "clear()"
  },
  {
    "label": "hits()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "hits(ray, acc, times, t)"
  },
  {
    "label": "march()",
    "kind": "Method",
    "detail": "Function (} private : class VolumeHDDA<TreeT,RayT,ChildNodeLevel + 1> ; template<AccessorT> bool)",
    "insertText": "march(RayT& ray, AccessorT &acc, TimeSpanT& t)"
  },
  {
    "label": "setTimes()",
    "kind": "Method",
    "detail": "Function (ray .)",
    "insertText": "setTimes(mDDA.time(), mDDA.next())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(acc.isValueOn(mDDA.voxel()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(t.t0>=0)"
  },
  {
    "label": "time()",
    "kind": "Method",
    "detail": "Function (t . t1 = mDDA .)",
    "insertText": "time()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (t .)",
    "insertText": "set(-1, -1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(mDDA.step())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (t .)",
    "insertText": "set(-1,-1)"
  },
  {
    "label": "VolumeHDDA()",
    "kind": "Method",
    "detail": "Function (} math::DDA<RayT,NodeT::TOTAL> mDDA ; VolumeHDDA<TreeT,RayT,ChildNodeLevel - 1> mHDDA ; } ; template<TreeT,RayT> class VolumeHDDA<TreeT,RayT,0> { public : using LeafT = TreeT::LeafNodeType ; using TimeSpanT = RayT::TimeSpan ;)",
    "insertText": "VolumeHDDA()"
  }
]