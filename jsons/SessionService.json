[
  {
    "label": "FSessionServiceLogSubscribe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionServiceLogSubscribe"
  },
  {
    "label": "FSessionServiceLogUnsubscribe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionServiceLogUnsubscribe"
  },
  {
    "label": "FSessionServicePing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionServicePing"
  },
  {
    "label": "FSessionService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSessionService"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FSessionService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IMessageContext . h \" # include \" IMessageBus . h \" # include \" ISessionService . h \" # include \" MessageEndpoint . h \" struct FSessionServiceLogSubscribe ; struct FSessionServiceLogUnsubscribe ; struct FSessionServicePing ; class FSessionService : public FOutputDevice,public ISessionService { public :)",
    "insertText": "FSessionService(const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InMessageBus)"
  },
  {
    "label": "FSessionService()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSessionService()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const class FName& Category)"
  },
  {
    "label": "SendLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendLog(Data, Verbosity, Category)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SendLog()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SendLog(const TCHAR* Data, ELogVerbosity::Type Verbosity = ELogVerbosity::Log, const class FName& Category = \"Log\")"
  },
  {
    "label": "SendNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendNotification(const TCHAR* NotificationText, const FMessageAddress& Recipient)"
  },
  {
    "label": "SendPong()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPong(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context, const FString& UserName)"
  },
  {
    "label": "HandleMessageEndpointShutdown()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleMessageEndpointShutdown()"
  },
  {
    "label": "HandleSessionLogSubscribeMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionLogSubscribeMessage(const FSessionServiceLogSubscribe& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleSessionLogUnsubscribeMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionLogUnsubscribeMessage(const FSessionServiceLogUnsubscribe& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleSessionPingMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionPingMessage(const FSessionServicePing& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  }
]