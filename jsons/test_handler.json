[
  {
    "label": "ResourceContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourceContent"
  },
  {
    "label": "TestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestHandler"
  },
  {
    "label": "CompletionState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompletionState"
  },
  {
    "label": "Collection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Collection"
  },
  {
    "label": "UIThreadHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UIThreadHelper"
  },
  {
    "label": "ResourceContent()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFTESTS_TEST_HANDLER_H_ # define CEF_TESTS_CEFTESTS_TEST_HANDLER_H_ # pragma once # include<list> # include<map> # include<memory> # include<string> # include<utility> # include \" include / base / cef_callback . h \" # include \" include / cef_browser . h \" # include \" include / cef_client . h \" # include \" include / cef_frame . h \" # include \" include / cef_task . h \" # include \" include / cef_waitable_event . h \" # include \" tests / ceftests / thread_helper . h \" # include \" tests / ceftests / track_callback . h \" # include \" tests / gtest / include / gtest / gtest . h \" class ResourceContent { public : typedef std::multimap<std::string,std::string> HeaderMap ;)",
    "insertText": "ResourceContent(const std::string& content, const std::string& mime_type, const HeaderMap& header_map) : content_(content), mime_type_(mime_type), header_map_(header_map)"
  },
  {
    "label": "content()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "content()"
  },
  {
    "label": "TestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestComplete()"
  },
  {
    "label": "WaitForTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForTests()"
  },
  {
    "label": "total()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total()"
  },
  {
    "label": "AddTestHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestHandler(TestHandler* test_handler)"
  },
  {
    "label": "ExecuteTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTests()"
  },
  {
    "label": "UIThreadHelper()",
    "kind": "Method",
    "detail": "Function (private : CompletionState* completion_state_ ; typedef std::list<TestHandler*> TestHandlerList ; TestHandlerList handler_list_ ; } ; typedef std::map<int,CefRefPtr<CefBrowser>> BrowserMap ; class UIThreadHelper { public :)",
    "insertText": "UIThreadHelper()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(base::OnceClosure task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTask(base::OnceClosure task, int delay_ms)"
  },
  {
    "label": "TaskHelper()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TaskHelper(base::OnceClosure task)"
  },
  {
    "label": "TestHandler()",
    "kind": "Method",
    "detail": "Function (base::WeakPtrFactory<UIThreadHelper> weak_ptr_factory_ ; } ;)",
    "insertText": "TestHandler(CompletionState* completion_state = nullptr)"
  },
  {
    "label": "TestHandler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestHandler()"
  },
  {
    "label": "SetupTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTest()"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunTest()"
  },
  {
    "label": "GetDialogHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefDialogHandler>)",
    "insertText": "GetDialogHandler()"
  },
  {
    "label": "OnAfterCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAfterCreated(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "OnBeforeClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeforeClose(CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "GetResourceRequestHandler()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefResourceRequestHandler>)",
    "insertText": "GetResourceRequestHandler(CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame, CefRefPtr<CefRequest> request, bool is_navigation, bool is_download, const CefString& request_initiator, bool& disable_default_handling)"
  },
  {
    "label": "OnRenderProcessTerminated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenderProcessTerminated(CefRefPtr<CefBrowser> browser, TerminationStatus status)"
  },
  {
    "label": "GetBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetBrowser()"
  },
  {
    "label": "GetBrowserId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBrowserId()"
  },
  {
    "label": "GetAllBrowsers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllBrowsers(BrowserMap* map)"
  },
  {
    "label": "ExecuteTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTest()"
  },
  {
    "label": "SetDestroyEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDestroyEvent(CefRefPtr<CefWaitableEvent> event)"
  },
  {
    "label": "SetDestroyTestExpected()",
    "kind": "Method",
    "detail": "Function (destroy_event_ = event ; } void)",
    "insertText": "SetDestroyTestExpected(bool expected)"
  },
  {
    "label": "HasBrowser()",
    "kind": "Method",
    "detail": "Function (destroy_test_expected_ = expected ; } bool)",
    "insertText": "HasBrowser()"
  },
  {
    "label": "DestroyTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTest()"
  },
  {
    "label": "OnTestTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestTimeout(int timeout_ms, bool treat_as_error)"
  },
  {
    "label": "PopulateBrowserSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateBrowserSettings(CefBrowserSettings* settings)"
  },
  {
    "label": "CreateBrowser()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateBrowser(const CefString& url, CefRefPtr<CefRequestContext> request_context = nullptr, CefRefPtr<CefDictionaryValue> extra_info = nullptr)"
  },
  {
    "label": "CloseBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseBrowser(CefRefPtr<CefBrowser> browser, bool force_close)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResource(const std::string& url, const std::string& content, const std::string& mime_type)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResource(const std::string& url, const std::string& content, const std::string& mime_type, const ResourceContent::HeaderMap& header_map)"
  },
  {
    "label": "AddResourceEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceEx(const std::string& url, const ResourceContent& content)"
  },
  {
    "label": "ClearResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResources()"
  },
  {
    "label": "SetSignalCompletionWhenAllBrowsersClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSignalCompletionWhenAllBrowsersClose(bool val)"
  },
  {
    "label": "SignalCompletionWhenAllBrowsersClose()",
    "kind": "Method",
    "detail": "Function (signal_completion_when_all_browsers_close_ = val ; } bool)",
    "insertText": "SignalCompletionWhenAllBrowsersClose()"
  },
  {
    "label": "GetUIThreadHelper()",
    "kind": "Method",
    "detail": "Function (UIThreadHelper*)",
    "insertText": "GetUIThreadHelper()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : CompletionState* completion_state_ ; bool completion_state_owned_ ; BrowserMap browser_map_ ; int first_browser_id_ ; CefRefPtr<CefBrowser> first_browser_ ; typedef std::map<std::string,ResourceContent> ResourceMap ; ResourceMap resource_map_ ; bool signal_completion_when_all_browsers_close_ ; CefRefPtr<CefWaitableEvent> destroy_event_ ; bool destroy_test_expected_ ; bool destroy_test_called_ ; std::unique_ptr<UIThreadHelper> ui_thread_helper_ ; int browser_count_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(TestHandler)"
  },
  {
    "label": "ReleaseAndWaitForDestructor()",
    "kind": "Method",
    "detail": "Function (} ; template<T> void)",
    "insertText": "ReleaseAndWaitForDestructor(CefRefPtr<T>& handler, int delay_ms = 2000)"
  },
  {
    "label": "CreateWaitableEvent()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefWaitableEvent> event =)",
    "insertText": "CreateWaitableEvent(true, false)"
  },
  {
    "label": "SetDestroyEvent()",
    "kind": "Method",
    "detail": "Function (handler ->)",
    "insertText": "SetDestroyEvent(event)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (T* _handler_ptr = handler .)",
    "insertText": "get()"
  },
  {
    "label": "TimedWait()",
    "kind": "Method",
    "detail": "Function (handler = nullptr ; bool handler_destructed = event ->)",
    "insertText": "TimedWait(delay_ms)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(handler_destructed)"
  },
  {
    "label": "SetDestroyEvent()",
    "kind": "Method",
    "detail": "Function (_handler_ptr ->)",
    "insertText": "SetDestroyEvent(nullptr)"
  },
  {
    "label": "TestFailed()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "TestFailed()"
  },
  {
    "label": "V_DECLARE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "V_DECLARE()"
  },
  {
    "label": "V_RETURN()",
    "kind": "Method",
    "detail": "Function (\\ bool __result # define)",
    "insertText": "V_RETURN() return __verify #define V_EXPECT_TRUE(condition) \\ __result = !!(condition)"
  },
  {
    "label": "GTEST_TEST_BOOLEAN_()",
    "kind": "Method",
    "detail": "Function (\\ __verify& = __result ; \\)",
    "insertText": "GTEST_TEST_BOOLEAN_(__result, #condition, false, true, \\ GTEST_NONFATAL_FAILURE_) #define V_EXPECT_FALSE(condition) \\ __result = !!(condition)"
  }
]