[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAttackRelease",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttackRelease"
  },
  {
    "label": "FAttackReleaseSmoother",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttackReleaseSmoother"
  },
  {
    "label": "FMeanSquaredFIR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeanSquaredFIR"
  },
  {
    "label": "FMeanSquaredIIR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeanSquaredIIR"
  },
  {
    "label": "FEnvelopeFollowerInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvelopeFollowerInitParams"
  },
  {
    "label": "FEnvelopeFollower",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEnvelopeFollower"
  },
  {
    "label": "FInlineEnvelopeFollowerInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInlineEnvelopeFollowerInitParams"
  },
  {
    "label": "FInlineEnvelopeFollower",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInlineEnvelopeFollower"
  },
  {
    "label": "FAttackRelease()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" DSP / AlignedBuffer . h \" # include \" DSP / FloatArrayMath . h \" # include \" DSP / Dsp . h \" # include \" HAL / Platform . h \" namespace Audio { namespace EPeakMode { enum Type { MeanSquared,RootMeanSquared,Peak,Count } ; } class FAttackRelease { float AnalogTimeConstant = 1 . 0 0 2 3 9 3 4 3 f ; float DigitalTimeConstant = 4 . 6 0 5 1 7 0 1 9 f ; public :)",
    "insertText": "FAttackRelease(float InSampleRate, float InAttackTimeMsec, float InReleaseTimeMsec, bool bInIsAnalog)"
  },
  {
    "label": "SetAnalog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalog(bool bInIsAnalog)"
  },
  {
    "label": "SetAttackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTime(float InAttackTimeMsec)"
  },
  {
    "label": "SetReleaseTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReleaseTime(float InReleaseTimeMsec)"
  },
  {
    "label": "FAttackReleaseSmoother()",
    "kind": "Method",
    "detail": "Function (private : float SampleRate ; float AttackTimeSamples ; float AttackTimeMsec ; float ReleaseTimeSamples ; float ReleaseTimeMsec ; bool bIsAnalog ; } ; class FAttackReleaseSmoother : public FAttackRelease { public :)",
    "insertText": "FAttackReleaseSmoother(float InSampleRate, int32 InNumChannels, float InAttackTimeMsec, float InReleaseTimeMsec, bool bInIsAnalog)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InBuffer, int32 InNumFrames)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InBuffer, int32 InNumFrames, float* OutBuffer)"
  },
  {
    "label": "GetEnvelopeValues()",
    "kind": "Method",
    "detail": "Function (const TArray<float>&)",
    "insertText": "GetEnvelopeValues()"
  },
  {
    "label": "SetNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannels(int32 InNumChannels)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FMeanSquaredFIR()",
    "kind": "Method",
    "detail": "Function (private : int32 NumChannels ; TArray<float> PriorEnvelopeValues ; } ; class FMeanSquaredFIR { int32 DefaultHistoryCapacity = 1 6 3 8 4 ; public :)",
    "insertText": "FMeanSquaredFIR(float InSampleRate, int32 InNumChannels, float InWindowTimeMsec)"
  },
  {
    "label": "SetWindowSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowSize(float InWindowTimeMsec)"
  },
  {
    "label": "FMeanSquaredIIR()",
    "kind": "Method",
    "detail": "Function (private : float SampleRate ; int32 NumChannels ; int32 WindowTimeFrames ; int32 WindowTimeSamples ; float NormFactor ; TArray<float> ChannelValues ; TCircularAudioBuffer<float> HistorySquared ; FAlignedFloatBuffer SquaredHistoryBuffer ; FAlignedFloatBuffer SquaredInputBuffer ; } ; class FMeanSquaredIIR { public :)",
    "insertText": "FMeanSquaredIIR(float InSampleRate, int32 InNumChannels, float InWindowTimeMsec)"
  },
  {
    "label": "FEnvelopeFollower()",
    "kind": "Method",
    "detail": "Function (private : float SampleRate ; int32 NumChannels ; float Alpha ; float Beta ; TArray<float> ChannelValues ; } ; struct FEnvelopeFollowerInitParams { float SampleRate = 4 8 0 0 0 . f ; int32 NumChannels = 1 ; float AttackTimeMsec = 1 0 . 0 f ; float ReleaseTimeMsec = 1 0 0 . 0 f ; EPeakMode::Type Mode = EPeakMode::Peak ; bool bIsAnalog = true ; float AnalysisWindowMsec = 5 . f ; } ; class FEnvelopeFollower { public :)",
    "insertText": "FEnvelopeFollower()"
  },
  {
    "label": "FEnvelopeFollower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEnvelopeFollower(const FEnvelopeFollowerInitParams& InParams)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FEnvelopeFollowerInitParams& InParams)"
  },
  {
    "label": "GetNumChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumChannels()"
  },
  {
    "label": "GetSampleRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSampleRate()"
  },
  {
    "label": "GetAttackTimeMsec()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAttackTimeMsec()"
  },
  {
    "label": "GetReleaseTimeMsec()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetReleaseTimeMsec()"
  },
  {
    "label": "GetAnalog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnalog()"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (EPeakMode::Type)",
    "insertText": "GetMode()"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(EPeakMode::Type InMode)"
  },
  {
    "label": "ProcessWorkBuffer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessWorkBuffer(const float* InBuffer, int32 InNumFrames)"
  },
  {
    "label": "FInlineEnvelopeFollower()",
    "kind": "Method",
    "detail": "Function (FAlignedFloatBuffer WorkBuffer ; FMeanSquaredIIR MeanSquaredProcessor ; FAttackReleaseSmoother Smoother ; int32 NumChannels ; EPeakMode::Type EnvMode ; } ; struct FInlineEnvelopeFollowerInitParams { float SampleRate = 4 8 0 0 0 . f ; float AttackTimeMsec = 1 0 . 0 f ; float ReleaseTimeMsec = 1 0 0 . 0 f ; EPeakMode::Type Mode = EPeakMode::Peak ; bool bIsAnalog = true ; float AnalysisWindowMsec = 5 . f ; } ; class FInlineEnvelopeFollower : public FAttackRelease { public :)",
    "insertText": "FInlineEnvelopeFollower(const FInlineEnvelopeFollowerInitParams& InParams) : FAttackRelease(InParams.SampleRate, InParams.AttackTimeMsec, InParams.ReleaseTimeMsec, InParams.bIsAnalog) , Value(0.f) , Mode(InParams.Mode) , AnalysisValue(0.f) , AnalysisWindowMsec(5.f)"
  },
  {
    "label": "SetAnalysisWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalysisWindow(InParams.AnalysisWindowMsec)"
  },
  {
    "label": "FInlineEnvelopeFollower()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInlineEnvelopeFollower() : FInlineEnvelopeFollower(FInlineEnvelopeFollowerInitParams{})"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FInlineEnvelopeFollowerInitParams& InParams)"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSampleRate(InParams.SampleRate)"
  },
  {
    "label": "SetAttackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTime(InParams.AttackTimeMsec)"
  },
  {
    "label": "SetReleaseTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReleaseTime(InParams.ReleaseTimeMsec)"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(InParams.Mode)"
  },
  {
    "label": "SetAnalog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalog(InParams.bIsAnalog)"
  },
  {
    "label": "SetAnalysisWindow()",
    "kind": "Method",
    "detail": "Function (Mode = InMode ; } void)",
    "insertText": "SetAnalysisWindow(float InAnalysisWindowMsec)"
  },
  {
    "label": "InitMeanSquaredCoefficients()",
    "kind": "Method",
    "detail": "Function (AnalysisWindowMsec = InAnalysisWindowMsec ;)",
    "insertText": "InitMeanSquaredCoefficients(AnalysisWindowMsec, GetSampleRate())"
  },
  {
    "label": "ProcessSample()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "ProcessSample(float InSample)"
  },
  {
    "label": "NormalizeSample()",
    "kind": "Method",
    "detail": "Function (float NormSample =)",
    "insertText": "NormalizeSample(InSample)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Diff = Value - NormSample ;)",
    "insertText": "if(Diff <= 0.f)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(GetAttackTimeSamples() * Diff)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Value(GetReleaseTimeSamples() * Diff)"
  },
  {
    "label": "ProcessBuffer()",
    "kind": "Method",
    "detail": "Function (} return Value ; } void)",
    "insertText": "ProcessBuffer(const float* InSamples, const int32 InNumSamples, float* OutSamples)"
  },
  {
    "label": "NormalizeSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeSamples(InSamples, InNumSamples, OutSamples)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Value = 0 . f ; } float)",
    "insertText": "GetValue()"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (} default : {)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "NormalizeSamples()",
    "kind": "Method",
    "detail": "Function (} } return InSample ; } void)",
    "insertText": "NormalizeSamples(const float* InSamples, const int32 InNumSamples, float* OutSamples)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (TArrayView<const float> In = TArrayView<const)",
    "insertText": "float(InSamples, InNumSamples)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (TArrayView<float> Out = TArrayView<)",
    "insertText": "float(OutSamples, InNumSamples)"
  },
  {
    "label": "ArraySquare()",
    "kind": "Method",
    "detail": "Function (AnalysisValue = AnalysisFilterBeta* OutSamples [ SampleIndex ] + AnalysisFilterAlpha* AnalysisValue ; OutSamples [ SampleIndex ] = AnalysisValue ; } return ; } case EPeakMode::RootMeanSquared : {)",
    "insertText": "ArraySquare(In, Out)"
  },
  {
    "label": "ArraySqrtInPlace()",
    "kind": "Method",
    "detail": "Function (AnalysisValue = AnalysisFilterBeta* OutSamples [ SampleIndex ] + AnalysisFilterAlpha* AnalysisValue ; OutSamples [ SampleIndex ] = AnalysisValue ; })",
    "insertText": "ArraySqrtInPlace(Out)"
  },
  {
    "label": "InitMeanSquaredCoefficients()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "InitMeanSquaredCoefficients(float InWinMsec, float InSampleRate)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (AnalysisFilterAlpha =)",
    "insertText": "Exp(-1000.f / (InSampleRate * InWinMsec))"
  }
]