[
  {
    "label": "SetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetType"
  },
  {
    "label": "df_iterator_storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "df_iterator_storage"
  },
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "GT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GT"
  },
  {
    "label": "df_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "df_iterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SetTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetTy"
  },
  {
    "label": "df_ext_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "df_ext_iterator"
  },
  {
    "label": "idf_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "idf_iterator"
  },
  {
    "label": "idf_ext_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "idf_ext_iterator"
  },
  {
    "label": "df_iterator_storage()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_DEPTHFIRSTITERATOR_H # define LLVM_ADT_DEPTHFIRSTITERATOR_H # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / iterator_range . h \" # include<set> # include<vector> namespace llvm { template<class SetType,bool External> class df_iterator_storage { public : SetType Visited ; } ; template<class SetType> class df_iterator_storage<SetType,true> { public :)",
    "insertText": "df_iterator_storage(SetType &VSet) : Visited(VSet)"
  },
  {
    "label": "df_iterator_storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "df_iterator_storage(const df_iterator_storage &S) : Visited(S.Visited)"
  },
  {
    "label": "df_iterator()",
    "kind": "Method",
    "detail": "Function (} SetType& Visited ; } ; template<class GraphT,class SetType = llvm::SmallPtrSet<GraphTraits<GraphT>::NodeType*,8>,bool ExtStorage = false,class GT = GraphTraits<GraphT>> class df_iterator : public df_iterator_storage<SetType,ExtStorage> { public : using iterator_category = std::forward_iterator_tag ; using value_type = GT::NodeType ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; private : typedef GT::NodeType NodeType ; typedef GT::ChildIteratorType ChildItTy ; typedef PointerIntPair<NodeType*,1> PointerIntTy ; std::vector<std::pair<PointerIntTy,ChildItTy>> VisitStack ;)",
    "insertText": "df_iterator(NodeType *Node)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this -> Visited .)",
    "insertText": "insert(Node)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "push_back(std::make_pair(PointerIntTy(Node, 0), GT::child_begin(Node)))"
  },
  {
    "label": "df_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "df_iterator()"
  },
  {
    "label": "df_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "df_iterator(NodeType *Node, SetType &S) : df_iterator_storage<SetType, ExtStorage>(S)"
  },
  {
    "label": "df_iterator()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "df_iterator(SetType &S) : df_iterator_storage<SetType, ExtStorage>(S)"
  },
  {
    "label": "toNext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "toNext()"
  },
  {
    "label": "getPointer()",
    "kind": "Method",
    "detail": "Function (NodeType* Node = Top . first .)",
    "insertText": "getPointer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChildItTy& It = Top . second ;)",
    "insertText": "if(!Top.first.getInt())"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (It =)",
    "insertText": "child_begin(Node)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (Top . first .)",
    "insertText": "setInt(1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(It != GT::child_end(Node))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NodeType* Next =* It + + ;)",
    "insertText": "if(Next && this->Visited.insert(Next).second)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "push_back(std::make_pair(PointerIntTy(Next, 0), GT::child_begin(Next)))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!VisitStack.empty())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : df_iterator)",
    "insertText": "begin(const GraphT &G)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} df_iterator)",
    "insertText": "end(const GraphT &G)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} df_iterator)",
    "insertText": "begin(const GraphT &G, SetType &S)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} df_iterator)",
    "insertText": "end(const GraphT &G, SetType &S)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const df_iterator &x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "operator()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (VisitStack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "nodeVisited()",
    "kind": "Method",
    "detail": "Function (df_iterator tmp =* this ; + +* this ; return tmp ; } bool)",
    "insertText": "nodeVisited(NodeType *Node)"
  },
  {
    "label": "getPathLength()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPathLength()"
  },
  {
    "label": "getPath()",
    "kind": "Method",
    "detail": "Function (} NodeType*)",
    "insertText": "getPath(unsigned n)"
  },
  {
    "label": "df_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> df_iterator<T>)",
    "insertText": "df_begin(const T& G)"
  },
  {
    "label": "df_end()",
    "kind": "Method",
    "detail": "Function (} template<class T> df_iterator<T>)",
    "insertText": "df_end(const T& G)"
  },
  {
    "label": "depth_first()",
    "kind": "Method",
    "detail": "Function (} template<class T> iterator_range<df_iterator<T>>)",
    "insertText": "depth_first(const T& G)"
  },
  {
    "label": "df_ext_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy = std::set<GraphTraits<T>::NodeType*>> struct df_ext_iterator : public df_iterator<T,SetTy,true> {)",
    "insertText": "df_ext_iterator(const df_iterator<T, SetTy, true> &V) : df_iterator<T, SetTy, true>(V)"
  },
  {
    "label": "df_ext_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class SetTy> df_ext_iterator<T,SetTy>)",
    "insertText": "df_ext_begin(const T& G, SetTy &S)"
  },
  {
    "label": "df_ext_end()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy> df_ext_iterator<T,SetTy>)",
    "insertText": "df_ext_end(const T& G, SetTy &S)"
  },
  {
    "label": "depth_first_ext()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy> iterator_range<df_ext_iterator<T,SetTy>>)",
    "insertText": "depth_first_ext(const T& G, SetTy &S)"
  },
  {
    "label": "idf_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy = llvm::SmallPtrSet<GraphTraits<T>::NodeType*,8>,bool External = false> struct idf_iterator : public df_iterator<Inverse<T>,SetTy,External> {)",
    "insertText": "idf_iterator(const df_iterator<Inverse<T>, SetTy, External> &V) : df_iterator<Inverse<T>, SetTy, External>(V)"
  },
  {
    "label": "idf_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> idf_iterator<T>)",
    "insertText": "idf_begin(const T& G)"
  },
  {
    "label": "idf_end()",
    "kind": "Method",
    "detail": "Function (} template<class T> idf_iterator<T>)",
    "insertText": "idf_end(const T& G)"
  },
  {
    "label": "inverse_depth_first()",
    "kind": "Method",
    "detail": "Function (} template<class T> iterator_range<idf_iterator<T>>)",
    "insertText": "inverse_depth_first(const T& G)"
  },
  {
    "label": "idf_ext_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy = std::set<GraphTraits<T>::NodeType*>> struct idf_ext_iterator : public idf_iterator<T,SetTy,true> {)",
    "insertText": "idf_ext_iterator(const idf_iterator<T, SetTy, true> &V) : idf_iterator<T, SetTy, true>(V)"
  },
  {
    "label": "idf_ext_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "idf_ext_iterator(const df_iterator<Inverse<T>, SetTy, true> &V) : idf_iterator<T, SetTy, true>(V)"
  },
  {
    "label": "idf_ext_begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class SetTy> idf_ext_iterator<T,SetTy>)",
    "insertText": "idf_ext_begin(const T& G, SetTy &S)"
  },
  {
    "label": "idf_ext_end()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy> idf_ext_iterator<T,SetTy>)",
    "insertText": "idf_ext_end(const T& G, SetTy &S)"
  },
  {
    "label": "inverse_depth_first_ext()",
    "kind": "Method",
    "detail": "Function (} template<class T,class SetTy> iterator_range<idf_ext_iterator<T,SetTy>>)",
    "insertText": "inverse_depth_first_ext(const T& G, SetTy &S)"
  }
]