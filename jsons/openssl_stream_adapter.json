[
  {
    "label": "SSLCertChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertChain"
  },
  {
    "label": "OpenSSLStreamAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OpenSSLStreamAdapter"
  },
  {
    "label": "SSLState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SSLState"
  },
  {
    "label": "ssl_verify_result_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ssl_verify_result_t"
  },
  {
    "label": "SetAllowLegacyTLSProtocols()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_OPENSSL_STREAM_ADAPTER_H_ # define RTC_BASE_OPENSSL_STREAM_ADAPTER_H_ # include<openssl / ossl_typ . h> # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" rtc_base / buffer . h \" # ifdef OPENSSL_IS_BORINGSSL # include \" rtc_base / boringssl_identity . h \" # else # include \" rtc_base / openssl_identity . h \" # endif # include \" api / task_queue / pending_task_safety_flag . h \" # include \" rtc_base / ssl_identity . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / stream . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / task_utils / repeating_task . h \" namespace rtc { class SSLCertChain ; RTC_EXPORT void)",
    "insertText": "SetAllowLegacyTLSProtocols(const absl::optional<bool>& allow)"
  },
  {
    "label": "OpenSSLStreamAdapter()",
    "kind": "Method",
    "detail": "Function (class OpenSSLStreamAdapter final : public SSLStreamAdapter { public :)",
    "insertText": "OpenSSLStreamAdapter(std::unique_ptr<StreamInterface> stream)"
  },
  {
    "label": "OpenSSLStreamAdapter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OpenSSLStreamAdapter()"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(std::unique_ptr<SSLIdentity> identity)"
  },
  {
    "label": "GetIdentityForTesting()",
    "kind": "Method",
    "detail": "Function (SSLIdentity*)",
    "insertText": "GetIdentityForTesting()"
  },
  {
    "label": "SetServerRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetServerRole(SSLRole role = SSL_SERVER)"
  },
  {
    "label": "SetPeerCertificateDigest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPeerCertificateDigest(absl::string_view digest_alg, const unsigned char* digest_val, size_t digest_len, SSLPeerCertificateDigestError* error = nullptr)"
  },
  {
    "label": "GetPeerSSLCertChain()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLCertChain>)",
    "insertText": "GetPeerSSLCertChain()"
  },
  {
    "label": "StartSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartSSL()"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(SSLMode mode)"
  },
  {
    "label": "SetMaxProtocolVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxProtocolVersion(SSLProtocolVersion version)"
  },
  {
    "label": "SetInitialRetransmissionTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialRetransmissionTimeout(int timeout_ms)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function ([ [)",
    "insertText": "deprecated(\"bugs.webrtc.org/14632\")]] StreamResult Read(void* data, size_t data_len, size_t* read, int* error)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (StreamResult)",
    "insertText": "Read(rtc::ArrayView<uint8_t> data, size_t& read, int& error)"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function ([ [)",
    "insertText": "deprecated(\"bugs.webrtc.org/14632\")]] StreamResult Write( const void* data, size_t data_len, size_t* written, int* error)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (StreamResult)",
    "insertText": "Write(rtc::ArrayView<const uint8_t> data, size_t& written, int& error)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (StreamState)",
    "insertText": "GetState()"
  },
  {
    "label": "SslCipherSuiteToName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "SslCipherSuiteToName(int crypto_suite)"
  },
  {
    "label": "GetSslCipherSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslCipherSuite(int* cipher)"
  },
  {
    "label": "GetSslVersion()",
    "kind": "Method",
    "detail": "Function (SSLProtocolVersion)",
    "insertText": "GetSslVersion()"
  },
  {
    "label": "GetSslVersionBytes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSslVersionBytes(int* version)"
  },
  {
    "label": "ExportKeyingMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportKeyingMaterial(absl::string_view label, const uint8_t* context, size_t context_len, bool use_context, uint8_t* result, size_t result_len)"
  },
  {
    "label": "SetDtlsSrtpCryptoSuites()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDtlsSrtpCryptoSuites(const std::vector<int>& crypto_suites)"
  },
  {
    "label": "GetDtlsSrtpCryptoSuite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDtlsSrtpCryptoSuite(int* crypto_suite)"
  },
  {
    "label": "IsTlsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTlsConnected()"
  },
  {
    "label": "IsBoringSsl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoringSsl()"
  },
  {
    "label": "IsAcceptableCipher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptableCipher(int cipher, KeyType key_type)"
  },
  {
    "label": "IsAcceptableCipher()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAcceptableCipher(absl::string_view cipher, KeyType key_type)"
  },
  {
    "label": "EnableTimeCallbackForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTimeCallbackForTesting()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (private : enum SSLState { SSL_NONE,SSL_WAIT,SSL_CONNECTING,SSL_CONNECTED,SSL_ERROR,SSL_CLOSED } ; void)",
    "insertText": "OnEvent(StreamInterface* stream, int events, int err)"
  },
  {
    "label": "PostEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvent(int events, int err)"
  },
  {
    "label": "SetTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeout(int delay_ms)"
  },
  {
    "label": "BeginSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "BeginSSL()"
  },
  {
    "label": "ContinueSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ContinueSSL()"
  },
  {
    "label": "Error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Error(absl::string_view context, int err, uint8_t alert, bool signal)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(uint8_t alert)"
  },
  {
    "label": "FlushInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushInput(unsigned int left)"
  },
  {
    "label": "SetupSSLContext()",
    "kind": "Method",
    "detail": "Function (SSL_CTX*)",
    "insertText": "SetupSSLContext()"
  },
  {
    "label": "VerifyPeerCertificate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyPeerCertificate()"
  },
  {
    "label": "SSLVerifyCallback()",
    "kind": "Method",
    "detail": "Function (# ifdef OPENSSL_IS_BORINGSSL enum ssl_verify_result_t)",
    "insertText": "SSLVerifyCallback(SSL* ssl, uint8_t* out_alert)"
  },
  {
    "label": "SSLVerifyCallback()",
    "kind": "Method",
    "detail": "Function (# else int)",
    "insertText": "SSLVerifyCallback(X509_STORE_CTX* store, void* arg)"
  },
  {
    "label": "WaitingToVerifyPeerCertificate()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "WaitingToVerifyPeerCertificate()"
  },
  {
    "label": "HasPeerCertificateDigest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPeerCertificateDigest()"
  }
]