[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "IEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableSkeleton"
  },
  {
    "label": "SKELETON_TREE_BASE_ITEM_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" enum class ESkeletonTreeFilterResult : int32 { Hidden,ShownDescendant,Shown,ShownHighlighted,} ; # define)",
    "insertText": "SKELETON_TREE_BASE_ITEM_TYPE(TYPE) \\ static const FName& GetTypeId()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Type(TEXT(#TYPE))"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} \\ FName)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "SKELETON_TREE_BASE_ITEM_TYPE()",
    "kind": "Method",
    "detail": "Function (} class ISkeletonTreeItem : public TSharedFromThis<ISkeletonTreeItem> { public :)",
    "insertText": "SKELETON_TREE_BASE_ITEM_TYPE(ISkeletonTreeItem) template<typename TType> bool IsOfType()"
  },
  {
    "label": "ISkeletonTreeItem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ISkeletonTreeItem()"
  },
  {
    "label": "MakeTreeRowWidget()",
    "kind": "Method",
    "detail": "Function (} ; TSharedRef<ITableRow>)",
    "insertText": "MakeTreeRowWidget(const TSharedRef<STableViewBase>& InOwnerTable, const TAttribute<FText>& InFilterText)"
  },
  {
    "label": "GenerateWidgetForNameColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateWidgetForNameColumn(TSharedPtr< SHorizontalBox > Box, const TAttribute<FText>& FilterText, FIsSelected InIsSelected)"
  },
  {
    "label": "GenerateWidgetForDataColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForDataColumn(const FName& DataColumnName, FIsSelected InIsSelected)"
  },
  {
    "label": "GenerateInlineEditWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateInlineEditWidget(const TAttribute<FText>& FilterText, FIsSelected InIsSelected)"
  },
  {
    "label": "HasInlineEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInlineEditor()"
  },
  {
    "label": "ToggleInlineEditorExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInlineEditorExpansion()"
  },
  {
    "label": "IsInlineEditorExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInlineEditorExpanded()"
  },
  {
    "label": "GetRowItemName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetRowItemName()"
  },
  {
    "label": "GetAttachName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetAttachName()"
  },
  {
    "label": "CanRenameItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameItem()"
  },
  {
    "label": "RequestRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRename()"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClicked()"
  },
  {
    "label": "HandleDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDrop(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISkeletonTreeItem>)",
    "insertText": "GetParent()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(TSharedPtr<ISkeletonTreeItem> InParent)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ISkeletonTreeItem>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetFilteredChildren()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<ISkeletonTreeItem>>&)",
    "insertText": "GetFilteredChildren()"
  },
  {
    "label": "GetSkeletonTree()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class ISkeletonTree>)",
    "insertText": "GetSkeletonTree()"
  },
  {
    "label": "GetEditableSkeleton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IEditableSkeleton>)",
    "insertText": "GetEditableSkeleton()"
  },
  {
    "label": "GetFilterResult()",
    "kind": "Method",
    "detail": "Function (ESkeletonTreeFilterResult)",
    "insertText": "GetFilterResult()"
  },
  {
    "label": "SetFilterResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterResult(ESkeletonTreeFilterResult InResult)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObject()"
  },
  {
    "label": "IsInitiallyExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitiallyExpanded()"
  },
  {
    "label": "SKELETON_TREE_ITEM_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "SKELETON_TREE_ITEM_TYPE(TYPE, BASE) \\ static const FName& GetTypeId()"
  }
]