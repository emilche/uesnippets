[
  {
    "label": "_LIBCPP_TYPE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TYPE_VIS"
  },
  {
    "label": "_ParserState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_ParserState"
  },
  {
    "label": "path",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "path"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FILESYSTEM_PATH_ITERATOR_H # define _LIBCPP___FILESYSTEM_PATH_ITERATOR_H # include<__assert> # include<__availability> # include<__config> # include<__filesystem / path . h> # include<__iterator / iterator_traits . h> # include<cstddef> # include<string> # include<string_view> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (public : enum _ParserState : unsigned char { _Singular,_BeforeBegin,_InRootName,_InRootDir,_InFilenames,_InTrailingSep,_AtEnd } ; public : typedef input_iterator_tag iterator_category ; typedef bidirectional_iterator_tag iterator_concept ; typedef path value_type ; typedef ptrdiff_t difference_type ; typedef const path* pointer ; typedef path reference ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "iterator() : __stashed_elem_(), __path_ptr_(nullptr), __entry_(), __state_(_Singular)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "iterator(const iterator&)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (iterator&)",
    "insertText": "operator(const iterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY reference)",
    "insertText": "operator()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__state_ != _Singular, \"attempting to increment a singular iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__state_ != _AtEnd, \"attempting to increment the end iterator\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "__it()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "__it(*this)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__state_ != _Singular, \"attempting to decrement a singular iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__entry_.data() != __path_ptr_->native().data(), \"attempting to decrement the begin iterator\")"
  },
  {
    "label": "__increment()",
    "kind": "Method",
    "detail": "Function (iterator&)",
    "insertText": "__increment()"
  },
  {
    "label": "__decrement()",
    "kind": "Method",
    "detail": "Function (iterator&)",
    "insertText": "__decrement()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (path __stashed_elem_ ; const path* __path_ptr_ ; path::__string_view __entry_ ; _ParserState __state_ ; } ; _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const path::iterator& __lhs, const path::iterator& __rhs)"
  }
]