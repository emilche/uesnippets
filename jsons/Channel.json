[
  {
    "label": "BaseChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseChannel"
  },
  {
    "label": "VoiceChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceChannel"
  },
  {
    "label": "VideoChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoChannel"
  },
  {
    "label": "BaseChannel()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_CHANNEL_H_ # define PC_CHANNEL_H_ # include<stdint . h> # include<functional> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / crypto / crypto_options . h \" # include \" api / jsep . h \" # include \" api / media_types . h \" # include \" api / rtp_parameters . h \" # include \" api / rtp_transceiver_direction . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" call / rtp_demuxer . h \" # include \" call / rtp_packet_sink_interface . h \" # include \" media / base / media_channel . h \" # include \" media / base / stream_params . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" pc / channel_interface . h \" # include \" pc / rtp_transport_internal . h \" # include \" pc / session_description . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / containers / flat_set . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / network / sent_packet . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / unique_id_generator . h \" namespace cricket { class BaseChannel : public ChannelInterface,public sigslot::has_slots<>,public MediaChannel::NetworkInterface,public webrtc::RtpPacketSinkInterface { public :)",
    "insertText": "BaseChannel(rtc::Thread* worker_thread, rtc::Thread* network_thread, rtc::Thread* signaling_thread, std::unique_ptr<MediaChannel> media_channel, absl::string_view mid, bool srtp_required, webrtc::CryptoOptions crypto_options, rtc::UniqueRandomIdGenerator* ssrc_generator)"
  },
  {
    "label": "BaseChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BaseChannel()"
  },
  {
    "label": "worker_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "worker_thread()"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "transport_name()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(network_thread())"
  },
  {
    "label": "SetRtpTransport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetRtpTransport(webrtc::RtpTransportInternal* rtp_transport)"
  },
  {
    "label": "rtp_transport()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpTransportInternal*)",
    "insertText": "rtp_transport()"
  },
  {
    "label": "SetRemoteContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRemoteContent(const MediaContentDescription* content, webrtc::SdpType type, std::string& error_desc)"
  },
  {
    "label": "SetPayloadTypeDemuxingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPayloadTypeDemuxingEnabled(bool enabled)"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(bool enable)"
  },
  {
    "label": "local_streams()",
    "kind": "Method",
    "detail": "Function (const std::vector<StreamParams>&)",
    "insertText": "local_streams()"
  },
  {
    "label": "OnTransportReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportReadyToSend(bool ready)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(SocketType type, rtc::Socket::Option o, int val)"
  },
  {
    "label": "OnRtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRtpPacket(const webrtc::RtpPacketReceived& packet)"
  },
  {
    "label": "media_channel()",
    "kind": "Method",
    "detail": "Function (MediaChannel*)",
    "insertText": "media_channel()"
  },
  {
    "label": "video_media_channel()",
    "kind": "Method",
    "detail": "Function (} VideoMediaChannel*)",
    "insertText": "video_media_channel()"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(false)"
  },
  {
    "label": "local_content_direction()",
    "kind": "Method",
    "detail": "Function (local_content_direction_ = direction ; } webrtc::RtpTransceiverDirection)",
    "insertText": "local_content_direction() const RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "remote_content_direction()",
    "kind": "Method",
    "detail": "Function (remote_content_direction_ = direction ; } webrtc::RtpTransceiverDirection)",
    "insertText": "remote_content_direction() const RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "enabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "enabled() const RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPacket(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options)"
  },
  {
    "label": "OnWritableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWritableState(bool writable)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::optional<rtc::NetworkRoute> network_route)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPacket(bool rtcp, rtc::CopyOnWriteBuffer* packet, const rtc::PacketOptions& options)"
  },
  {
    "label": "EnableMedia_w()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMedia_w() RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "DisableMedia_w()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableMedia_w() RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "UpdateWritableState_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWritableState_n() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "ChannelWritable_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChannelWritable_n() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "ChannelNotWritable_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChannelNotWritable_n() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "SetPayloadTypeDemuxingEnabled_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPayloadTypeDemuxingEnabled_w(bool enabled) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "UpdateMediaSendRecvState_w()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMediaSendRecvState_w() RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "UpdateLocalStreams_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateLocalStreams_w(const std::vector<StreamParams>& streams, webrtc::SdpType type, std::string& error_desc) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "UpdateRemoteStreams_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateRemoteStreams_w(const MediaContentDescription* content, webrtc::SdpType type, std::string& error_desc) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "SetLocalContent_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLocalContent_w(const MediaContentDescription* content, webrtc::SdpType type, std::string& error_desc) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "SetRemoteContent_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRemoteContent_w(const MediaContentDescription* content, webrtc::SdpType type, std::string& error_desc) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "GetDeduplicatedRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (RtpHeaderExtensions)",
    "insertText": "GetDeduplicatedRtpHeaderExtensions(const RtpHeaderExtensions& extensions)"
  },
  {
    "label": "MaybeAddHandledPayloadType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeAddHandledPayloadType(int payload_type) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "ClearHandledPayloadTypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearHandledPayloadTypes() RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "MaybeUpdateDemuxerAndRtpExtensions_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeUpdateDemuxerAndRtpExtensions_w(bool update_demuxer, absl::optional<RtpHeaderExtensions> extensions, std::string& error_desc) RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "RegisterRtpDemuxerSink_w()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterRtpDemuxerSink_w() RTC_RUN_ON(worker_thread())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ConnectToRtpTransport_n()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ConnectToRtpTransport_n() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "DisconnectFromRtpTransport_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectFromRtpTransport_n() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "SignalSentPacket_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalSentPacket_n(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (rtc::Thread* const worker_thread_ ; rtc::Thread* const network_thread_ ; rtc::Thread* const signaling_thread_ ; rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag> alive_ ; std::function<)",
    "insertText": "void()> on_first_packet_received_ RTC_GUARDED_BY(network_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpTransportInternal* rtp_transport_)",
    "insertText": "RTC_GUARDED_BY(network_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool was_ever_writable_)",
    "insertText": "RTC_GUARDED_BY(worker_thread())"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool enabled_s_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread())"
  },
  {
    "label": "VoiceChannel()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpDemuxerCriteria demuxer_criteria_ ; rtc::UniqueRandomIdGenerator* const ssrc_generator_ ; } ; class VoiceChannel : public BaseChannel { public :)",
    "insertText": "VoiceChannel(rtc::Thread* worker_thread, rtc::Thread* network_thread, rtc::Thread* signaling_thread, std::unique_ptr<VoiceMediaChannel> channel, absl::string_view mid, bool srtp_required, webrtc::CryptoOptions crypto_options, rtc::UniqueRandomIdGenerator* ssrc_generator)"
  },
  {
    "label": "VoiceChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VoiceChannel()"
  },
  {
    "label": "voice_media_channel()",
    "kind": "Method",
    "detail": "Function (} VoiceMediaChannel*)",
    "insertText": "voice_media_channel()"
  },
  {
    "label": "media_type()",
    "kind": "Method",
    "detail": "Function (} cricket::MediaType)",
    "insertText": "media_type()"
  },
  {
    "label": "VideoChannel()",
    "kind": "Method",
    "detail": "Function (} ; class VideoChannel : public BaseChannel { public :)",
    "insertText": "VideoChannel(rtc::Thread* worker_thread, rtc::Thread* network_thread, rtc::Thread* signaling_thread, std::unique_ptr<VideoMediaChannel> media_channel, absl::string_view mid, bool srtp_required, webrtc::CryptoOptions crypto_options, rtc::UniqueRandomIdGenerator* ssrc_generator)"
  },
  {
    "label": "VideoChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoChannel()"
  }
]