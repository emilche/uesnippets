[
  {
    "label": "BaseChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseChannel"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "VoiceChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VoiceChannel"
  },
  {
    "label": "VideoChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoChannel"
  },
  {
    "label": "OnTransportReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportReadyToSend(bool ready)"
  },
  {
    "label": "OnWritableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWritableState(bool writable)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::optional<rtc::NetworkRoute> network_route)"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPacket(bool rtcp,\n                  rtc::CopyOnWriteBuffer* packet,\n                  const rtc::PacketOptions& options)"
  },
  {
    "label": "GetDeduplicatedRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (RtpHeaderExtensions)",
    "insertText": "GetDeduplicatedRtpHeaderExtensions(\n      const RtpHeaderExtensions& extensions)"
  },
  {
    "label": "SignalSentPacket_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalSentPacket_n(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "VoiceChannel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VoiceChannel(rtc::Thread* worker_thread,\n               rtc::Thread* network_thread,\n               rtc::Thread* signaling_thread,\n               std::unique_ptr<VoiceMediaChannel> channel,\n               absl::string_view mid,\n               bool srtp_required,\n               webrtc::CryptoOptions crypto_options,\n               rtc::UniqueRandomIdGenerator* ssrc_generator)"
  },
  {
    "label": "VideoChannel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VideoChannel(rtc::Thread* worker_thread,\n               rtc::Thread* network_thread,\n               rtc::Thread* signaling_thread,\n               std::unique_ptr<VideoMediaChannel> media_channel,\n               absl::string_view mid,\n               bool srtp_required,\n               webrtc::CryptoOptions crypto_options,\n               rtc::UniqueRandomIdGenerator* ssrc_generator)"
  }
]