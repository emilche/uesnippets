[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FArrangedWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedWidget"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "AIGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AIGRAPH_API"
  },
  {
    "label": "FAIGraphConnectionDrawingPolicy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ConnectionDrawingPolicy . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Layout / ArrangedWidget . h \" # include \" Math / Vector2D . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / SWidget . h \" class FArrangedChildren ; class FArrangedWidget ; class FSlateRect ; class FSlateWindowElementList ; class SWidget ; class UEdGraph ; class UEdGraphNode ; class UEdGraphPin ; struct FGeometry ; class FAIGraphConnectionDrawingPolicy : public FConnectionDrawingPolicy { protected : UEdGraph* GraphObj ; TMap<UEdGraphNode*,int32> NodeWidgetMap ; public :)",
    "insertText": "FAIGraphConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float ZoomFactor, const FSlateRect& InClippingRect, FSlateWindowElementList& InDrawElements, UEdGraph* InGraphObj)"
  },
  {
    "label": "DetermineWiringStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineWiringStyle(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, FConnectionParams& Params)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(TMap<TSharedRef<SWidget>, FArrangedWidget>& PinGeometries, FArrangedChildren& ArrangedNodes)"
  },
  {
    "label": "DrawSplineWithArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSplineWithArrow(const FGeometry& StartGeom, const FGeometry& EndGeom, const FConnectionParams& Params)"
  },
  {
    "label": "DrawSplineWithArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSplineWithArrow(const FVector2D& StartPoint, const FVector2D& EndPoint, const FConnectionParams& Params)"
  },
  {
    "label": "DrawPreviewConnector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPreviewConnector(const FGeometry& PinGeometry, const FVector2D& StartPoint, const FVector2D& EndPoint, UEdGraphPin* Pin)"
  },
  {
    "label": "ComputeSplineTangent()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeSplineTangent(const FVector2D& Start, const FVector2D& End)"
  },
  {
    "label": "Internal_DrawLineWithArrow()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Internal_DrawLineWithArrow(const FVector2D& StartAnchorPoint, const FVector2D& EndAnchorPoint, const FConnectionParams& Params)"
  }
]