[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FImportanceTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportanceTexture"
  },
  {
    "label": "UImportanceSamplingLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UImportanceSamplingLibrary"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" Engine / Texture2D . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" ImportanceSamplingLibrary . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Luminance,Red,Green,Blue,Alpha,} ; })",
    "insertText": "USTRUCT(BlueprintType, meta = (HasNativeMake = \"/Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture\", HasNativeBreak = \"/Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FImportanceTexture()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FImportanceTexture() : Size(ForceInitToZero), NumMips(0), Texture(0), Weighting(EImportanceWeight::Luminance)"
  },
  {
    "label": "FImportanceTexture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImportanceTexture(UTexture2D *SourceTexture, TEnumAsByte<EImportanceWeight::Type> WeightingFunc)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(SourceTexture, WeightingFunc)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(UTexture2D *SourceTexture, TEnumAsByte<EImportanceWeight::Type> WeightingFunc)"
  },
  {
    "label": "ImportanceSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportanceSample(const FVector2D &Rand, int Samples, float Intensity, FVector2D &SamplePosition, FLinearColor &SampleColor, float &SampleIntensity, float &SampleSize)"
  },
  {
    "label": "GetColorBilinear()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorBilinear(FVector2D Position, int32 Mip)"
  },
  {
    "label": "GetColorTrilinear()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorTrilinear(FVector2D Position, float Mip)"
  },
  {
    "label": "ImportanceWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ImportanceWeight(FColor Texel, TEnumAsByte<EImportanceWeight::Type> WeightingFunc)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UFUNCTION(BlueprintPure, Category = \"Math|Random\") static ENGINE_API float RandomSobolFloat(int32 Index, int32 Dimension, float Seed)"
  }
]