[
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FCompactBinaryTCPImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompactBinaryTCPImpl"
  },
  {
    "label": "FReceiveBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReceiveBuffer"
  },
  {
    "label": "FSendBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSendBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMarshalledMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarshalledMessage"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FSoftObjectPathSerializationWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathSerializationWrapper"
  },
  {
    "label": "MaxOSPacketSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / Guid . h \" # include \" Serialization / CompactBinaryContainerSerialization . h \" # include \" Serialization / CompactBinarySerialization . h \" # include \" Serialization / CompactBinaryWriter . h \" # include \" UObject / SoftObjectPath . h \" class FSocket ; namespace UE::CompactBinaryTCP { class FCompactBinaryTCPImpl ; struct FReceiveBuffer ; struct FSendBuffer ; uint64)",
    "insertText": "MaxOSPacketSize(1 << 30)"
  },
  {
    "label": "DescribeStatus()",
    "kind": "Method",
    "detail": "Function (enum class EConnectionStatus { Okay,Terminated,FormatError,Failed,Incomplete,} ; const TCHAR*)",
    "insertText": "DescribeStatus(EConnectionStatus Status)"
  },
  {
    "label": "TryReadPacket()",
    "kind": "Method",
    "detail": "Function (struct FMarshalledMessage { FGuid MessageType ; FCbObject Object ; } ; EConnectionStatus)",
    "insertText": "TryReadPacket(FSocket* Socket, FReceiveBuffer& Buffer, TArray<FMarshalledMessage>& Messages, uint64 MaxPacketSize=0)"
  },
  {
    "label": "TryWritePacket()",
    "kind": "Method",
    "detail": "Function (EConnectionStatus)",
    "insertText": "TryWritePacket(FSocket* Socket, FSendBuffer& Buffer, TArray<FMarshalledMessage>&& AppendMessages, uint64 MaxPacketSize = 0)"
  },
  {
    "label": "TryWritePacket()",
    "kind": "Method",
    "detail": "Function (EConnectionStatus)",
    "insertText": "TryWritePacket(FSocket* Socket, FSendBuffer& Buffer, FMarshalledMessage&& AppendMessage, uint64 MaxPacketSize = 0)"
  },
  {
    "label": "QueueMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueMessage(FSendBuffer& Buffer, FMarshalledMessage&& Message)"
  },
  {
    "label": "TryFlushBuffer()",
    "kind": "Method",
    "detail": "Function (EConnectionStatus)",
    "insertText": "TryFlushBuffer(FSocket* Socket, FSendBuffer& Buffer, uint64 MaxPacketSize = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (struct FReceiveBuffer { public : void)",
    "insertText": "Reset()"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (private : TArray<FMarshalledMessage> PendingMessages ; FUniqueBuffer Payload ; uint64 BytesWritten = 0 ; bool bCreatedPayload = false ; bool bSentHeader = false ; class UE::CompactBinaryTCP::FCompactBinaryTCPImpl ; } ; } template<KeyType,KeyFuncs,Allocator> bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, TSet<KeyType, KeyFuncs, Allocator>& OutValue)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutValue .)",
    "insertText": "Reserve(Field.AsArrayView().Num())"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool bOk = ! Field .)",
    "insertText": "HasError()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (KeyType Key ;)",
    "insertText": "if(LoadFromCompactBinary(ElementField, Key))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutValue .)",
    "insertText": "Add(MoveTemp(Key))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} else { bOk = false ; } } return bOk ; } template<KeyType,KeyFuncs,Allocator,std::void_t<)",
    "insertText": "decltype(std::declval<FCbWriter&>() << std::declval<const KeyType&>())>* = nullptr> inline FCbWriter& operator<<(FCbWriter& Writer, const TSet<KeyType, KeyFuncs, Allocator>& Value)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "BeginArray()"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (Writer<<Key ; } Writer .)",
    "insertText": "EndArray()"
  },
  {
    "label": "IsObject()",
    "kind": "Method",
    "detail": "Function (bOk& = PairField .)",
    "insertText": "IsObject()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (KeyType Key ;)",
    "insertText": "if(LoadFromCompactBinary(PairField[\"K\"], Key))"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (ValueType& Value = OutValue .)",
    "insertText": "FindOrAdd(MoveTemp(Key))"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bOk =)",
    "insertText": "LoadFromCompactBinary(PairField[\"V\"], Value)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} else { bOk = false ; } } return bOk ; } template<KeyType,ValueType,SetAllocator,KeyFuncs,std::void_t<)",
    "insertText": "decltype(std::declval<FCbWriter&>() << std::declval<const KeyType&>())>* = nullptr, std::void_t<decltype(std::declval<FCbWriter&>() << std::declval<const ValueType&>())>* = nullptr> inline FCbWriter& operator<<(FCbWriter& Writer, const TMap<KeyType, ValueType, SetAllocator, KeyFuncs>& Value)"
  },
  {
    "label": "BeginObject()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "BeginObject()"
  },
  {
    "label": "EndObject()",
    "kind": "Method",
    "detail": "Function (Writer<<\" K \"<<Pair . Key ; Writer<<\" V \"<<Pair . Value ; Writer .)",
    "insertText": "EndObject()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FSoftObjectPathSerializationWrapper { FSoftObjectPath Inner ; bool)",
    "insertText": "operator(const FSoftObjectPathSerializationWrapper& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FSoftObjectPathSerializationWrapper& Path)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FSoftObjectPathSerializationWrapper& Path)"
  }
]