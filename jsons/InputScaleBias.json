[
  {
    "label": "FAnimationUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationUpdateContext"
  },
  {
    "label": "FInputScaleBias",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputScaleBias"
  },
  {
    "label": "FInputRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputRange"
  },
  {
    "label": "FInputScaleBiasClamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputScaleBiasClamp"
  },
  {
    "label": "FInputClampConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputClampConstants"
  },
  {
    "label": "FInputClampState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputClampState"
  },
  {
    "label": "FInputScaleBiasClampConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputScaleBiasClampConstants"
  },
  {
    "label": "FInputScaleBiasClampState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputScaleBiasClampState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInputAlphaBoolBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputAlphaBoolBlend"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" AlphaBlend . h \" # include \" InputScaleBias . generated . h \" struct FAnimationUpdateContext ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Settings)"
  },
  {
    "label": "FInputScaleBias()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FInputScaleBias() : Scale(1.0f) , Bias(0.0f)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ApplyTo(float Value)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FText)",
    "insertText": "GetFriendlyName(FText InFriendlyName)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Settings)"
  },
  {
    "label": "FInputRange()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FInputRange() : Min(0.0f) , Max(1.0f)"
  },
  {
    "label": "FInputRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInputRange(const float InMin, const float InMax) : Min(InMin) , Max(InMax)"
  },
  {
    "label": "ToVector2f()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "ToVector2f()"
  },
  {
    "label": "ToVector2D()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "ToVector2D()"
  },
  {
    "label": "ClampValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ClampValue(float& InOutValue)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const float OriginalValue = InOutValue ; InOutValue =)",
    "insertText": "Clamp(InOutValue, Min, Max)"
  },
  {
    "label": "FInputScaleBiasClamp()",
    "kind": "Method",
    "detail": "Function (float InterpolatedResult ; public :)",
    "insertText": "FInputScaleBiasClamp() : bMapRange(false) , bClampResult(false) , bInterpResult(false) , bInitialized(false) , Scale(1.0f) , Bias(0.0f) , ClampMin(0.f) , ClampMax(1.f) , InterpSpeedIncreasing(10.f) , InterpSpeedDecreasing(10.f) , InterpolatedResult(0.f)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ApplyTo(float Value, float InDeltaTime)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reinitialize()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Settings)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (bool bInitialized = false ; float)",
    "insertText": "ApplyTo(const FInputClampConstants& InConstants, float InValue, float InDeltaTime)"
  },
  {
    "label": "FInputScaleBiasClampConstants()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FInputScaleBiasClampConstants() : bMapRange(false) , bClampResult(false) , bInterpResult(false) , Scale(1.0f) , Bias(0.0f) , ClampMin(0.f) , ClampMax(1.f) , InterpSpeedIncreasing(10.f) , InterpSpeedDecreasing(10.f)"
  },
  {
    "label": "CopyFromLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromLegacy(const FInputScaleBiasClamp& InLegacy)"
  },
  {
    "label": "FInputScaleBiasClampState()",
    "kind": "Method",
    "detail": "Function (bool bInitialized ; public :)",
    "insertText": "FInputScaleBiasClampState() : InterpolatedResult(0.f) , bInitialized(false)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ApplyTo(const FInputScaleBiasClampConstants& InConstants, float Value, float InDeltaTime)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ApplyTo(const FInputScaleBiasClampConstants& InConstants, float Value)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (bInitialized = false ; } } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Float)",
    "insertText": "UMETA(DisplayName = \"Float Value\"), Bool UMETA(DisplayName = \"Bool Value\"), Curve UMETA(DisplayName = \"Anim Curve Value\")"
  },
  {
    "label": "FInputAlphaBoolBlend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInputAlphaBoolBlend() : BlendInTime(0.0f) , BlendOutTime(0.0f) , BlendOption(EAlphaBlendOption::Linear) , bInitialized(false) , CustomCurve(nullptr)"
  },
  {
    "label": "ApplyTo()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ApplyTo(bool bEnabled, float InDeltaTime)"
  }
]