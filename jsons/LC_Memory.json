[
  {
    "label": "ReleaseAndNull()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" namespace memory { template<T> void)",
    "insertText": "ReleaseAndNull(T*& instance)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (instance ->)",
    "insertText": "Release()"
  },
  {
    "label": "DeleteAndNull()",
    "kind": "Method",
    "detail": "Function (instance = nullptr ; } } template<T> void)",
    "insertText": "DeleteAndNull(T*& instance)"
  },
  {
    "label": "DeleteAndNullArray()",
    "kind": "Method",
    "detail": "Function (delete instance ; instance = nullptr ; } template<T> void)",
    "insertText": "DeleteAndNullArray(T*& instance)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (delete [ ] instance ; instance = nullptr ; } template<T,size_t N> bool)",
    "insertText": "Matches(const T(&mem1)[N], const T(&mem2)[N])"
  }
]