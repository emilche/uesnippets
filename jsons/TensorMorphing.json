[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorReshapingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorReshapingOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "ReshapingKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReshapingKind"
  },
  {
    "label": "BlockIteratorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockIteratorState"
  },
  {
    "label": "TensorSlicingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorSlicingOp"
  },
  {
    "label": "MemcpyTriggerForSlicing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemcpyTriggerForSlicing"
  },
  {
    "label": "TensorStridingSlicingOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorStridingSlicingOp"
  },
  {
    "label": "TensorReshapingOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_MORPHING_H # define EIGEN_CXX11_TENSOR_TENSOR_MORPHING_H namespace Eigen { namespace internal { template<NewDimensions,XprType> struct traits<TensorReshapingOp<NewDimensions,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = array_size<NewDimensions>::value ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<NewDimensions,XprType> struct eval<TensorReshapingOp<NewDimensions,XprType>,Eigen::Dense> { typedef const TensorReshapingOp<NewDimensions,XprType> EIGEN_DEVICE_REF type ; } ; template<NewDimensions,XprType> struct nested<TensorReshapingOp<NewDimensions,XprType>,1,eval<TensorReshapingOp<NewDimensions,XprType>>::type> { typedef TensorReshapingOp<NewDimensions,XprType> type ; } ; } template<NewDimensions,XprType> class TensorReshapingOp : public TensorBase<TensorReshapingOp<NewDimensions,XprType>,WriteAccessors> { public : typedef TensorBase<TensorReshapingOp<NewDimensions,XprType>,WriteAccessors> Base ; typedef Eigen::internal::traits<TensorReshapingOp>::Scalar Scalar ; typedef internal::remove_const<XprType::CoeffReturnType>::type CoeffReturnType ; typedef Eigen::internal::nested<TensorReshapingOp>::type Nested ; typedef Eigen::internal::traits<TensorReshapingOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorReshapingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorReshapingOp(const XprType& expr, const NewDimensions& dims) : m_xpr(expr), m_dims(dims)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const NewDimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const NewDimensions m_dims ; } ; template<NewDimensions,ArgType,Device> struct TensorEvaluator<const TensorReshapingOp<NewDimensions,ArgType>,Device> { typedef TensorReshapingOp<NewDimensions,ArgType> XprType ; typedef NewDimensions Dimensions ; typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; typedef StorageMemory<internal::remove_const<CoeffReturnType>::type,Device> ConstCastStorage ; const int NumOutputDims = internal::array_size<Dimensions>::value ; const int NumInputDims = internal::array_size<TensorEvaluator<ArgType,Device>::Dimensions>::value ; enum ReshapingKind { OneByN = 0,NByOne = 1,Runtime = 2 } ; const ReshapingKind kind = # if)",
    "insertText": "defined(EIGEN_HAS_INDEX_LIST) (NumOutputDims == 2 && internal::index_statically_eq<NewDimensions>( 0, 1)) ? OneByN : (NumOutputDims == 2 && internal::index_statically_eq<NewDimensions>( 1, 1))"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (# else Runtime ; # endif enum { IsAligned = TensorEvaluator<ArgType,Device>::IsAligned,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = TensorEvaluator<ArgType,Device>::RawAccess&& NumInputDims> 0&& NumOutputDims> 0,PreferBlockAccess = false,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,RawAccess = TensorEvaluator<ArgType,Device>::RawAccess } ; typedef internal::remove_const<Scalar>::type ScalarNoConst ; typedef internal::TensorBlockDescriptor<NumOutputDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef internal::TensorMaterializedBlock<ScalarNoConst,NumOutputDims,Layout,Index> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device), m_dimensions(op.dimensions())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(internal::array_prod(m_impl.dimensions()) == internal::array_prod(op.dimensions()))"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(data, std::move(done))"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType data)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} struct BlockIteratorState { Index stride ; Index span ; Index size ; Index count ; } ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_impl.data() != NULL)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((kind == Runtime) || (kind == OneByN && desc.dimensions()[0] == 1) || (kind == NByOne && desc.dimensions()[1] == 1))"
  },
  {
    "label": "materialize()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "materialize(m_impl.data(), m_dimensions, desc, scratch)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC Storage::Type)",
    "insertText": "data()"
  },
  {
    "label": "impl()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const TensorEvaluator<ArgType,Device>&)",
    "insertText": "impl()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} # endif protected : TensorEvaluator<ArgType,Device> m_impl ; NewDimensions m_dimensions ; } ; template<NewDimensions,ArgType,Device> struct TensorEvaluator<TensorReshapingOp<NewDimensions,ArgType>,Device> : public TensorEvaluator<const TensorReshapingOp<NewDimensions,ArgType>,Device> { typedef TensorEvaluator<const TensorReshapingOp<NewDimensions,ArgType>,Device> Base ; typedef TensorReshapingOp<NewDimensions,ArgType> XprType ; typedef NewDimensions Dimensions ; enum { IsAligned = TensorEvaluator<ArgType,Device>::IsAligned,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = TensorEvaluator<ArgType,Device>::RawAccess,PreferBlockAccess = false,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,RawAccess = TensorEvaluator<ArgType,Device>::RawAccess } ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : Base(op, device)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef internal::TensorBlockDescriptor<TensorEvaluator::NumOutputDims,Index> TensorBlockDesc ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writePacket(Index index, const PacketReturnType& x)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (this -> m_impl . template writePacket<)",
    "insertText": "StoreMode(index, x)"
  },
  {
    "label": "writeBlock()",
    "kind": "Method",
    "detail": "Function (} template<TensorBlock> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "writeBlock(const TensorBlockDesc& desc, const TensorBlock& block)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->m_impl.data() != NULL)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (typedef TensorBlock::XprType TensorBlockExpr ; typedef internal::TensorBlockAssignment<Scalar,TensorEvaluator::NumOutputDims,TensorBlockExpr,Index> TensorBlockAssign ;)",
    "insertText": "Run(TensorBlockAssign::target(desc.dimensions(), internal::strides<Layout>(this->dimensions()), this->m_impl.data(), desc.offset()), block.expr())"
  },
  {
    "label": "TensorSlicingOp()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<StartIndices,Sizes,XprType> struct traits<TensorSlicingOp<StartIndices,Sizes,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = array_size<StartIndices>::value ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<StartIndices,Sizes,XprType> struct eval<TensorSlicingOp<StartIndices,Sizes,XprType>,Eigen::Dense> { typedef const TensorSlicingOp<StartIndices,Sizes,XprType> EIGEN_DEVICE_REF type ; } ; template<StartIndices,Sizes,XprType> struct nested<TensorSlicingOp<StartIndices,Sizes,XprType>,1,eval<TensorSlicingOp<StartIndices,Sizes,XprType>>::type> { typedef TensorSlicingOp<StartIndices,Sizes,XprType> type ; } ; } template<StartIndices,Sizes,XprType> class TensorSlicingOp : public TensorBase<TensorSlicingOp<StartIndices,Sizes,XprType>> { public : typedef TensorBase<TensorSlicingOp<StartIndices,Sizes,XprType>> Base ; typedef Eigen::internal::traits<TensorSlicingOp>::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorSlicingOp>::type Nested ; typedef Eigen::internal::traits<TensorSlicingOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorSlicingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorSlicingOp(const XprType& expr, const StartIndices& indices, const Sizes& sizes) : m_xpr(expr), m_indices(indices), m_sizes(sizes)"
  },
  {
    "label": "startIndices()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const StartIndices&)",
    "insertText": "startIndices()"
  },
  {
    "label": "MemcpyTriggerForSlicing()",
    "kind": "Method",
    "detail": "Function (const StartIndices m_indices ; const Sizes m_sizes ; } ; namespace { template<Index,Device,bool BlockAccess> struct MemcpyTriggerForSlicing { EIGEN_DEVICE_FUNC)",
    "insertText": "MemcpyTriggerForSlicing(const Device& device) : threshold_(2 * device.numThreads())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "operator()(Index total, Index contiguous)"
  },
  {
    "label": "MemcpyTriggerForSlicing()",
    "kind": "Method",
    "detail": "Function (const bool prefer_block_evaluation = BlockAccess&& total> 3 2* 1 0 2 4 ; return ! prefer_block_evaluation&& contiguous> threshold_ ; } private : Index threshold_ ; } ; # ifdef EIGEN_USE_GPU template<Index,bool BlockAccess> struct MemcpyTriggerForSlicing<Index,GpuDevice,BlockAccess> { EIGEN_DEVICE_FUNC)",
    "insertText": "MemcpyTriggerForSlicing(const GpuDevice&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "operator()(Index, Index contiguous)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_is_identity = true ;)",
    "insertText": "for(int i = 0; i < internal::array_size<Dimensions>::value; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_impl.dimensions()[i] >= op.sizes()[i] + op.startIndices()[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_is_identity = false ; } })",
    "insertText": "if(NumDims == 0)"
  },
  {
    "label": "sizes()",
    "kind": "Method",
    "detail": "Function (const Sizes& output_dims = op .)",
    "insertText": "sizes()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_inputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumDims; ++i)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* output_dims [ i - 1 ] ; m_fastOutputStrides [ i ] = internal::TensorIntDivisor<)",
    "insertText": "Index(m_outputStrides[i] > 0 ? m_outputStrides[i] : 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { m_inputStrides [ NumDims - 1 ] = 1 ;)",
    "insertText": "for(int i = NumDims - 2; i >= 0; --i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index contiguous_values = 1 ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } } } else {)",
    "insertText": "for(int i = NumDims-1; i >= 0; --i)"
  },
  {
    "label": "trigger()",
    "kind": "Method",
    "detail": "Function (break ; } } } const MemcpyTriggerForSlicing<Index,Device,BlockAccess>)",
    "insertText": "trigger(m_device)"
  },
  {
    "label": "src()",
    "kind": "Method",
    "detail": "Function (EvaluatorPointerType)",
    "insertText": "src(EvaluatorPointerType)m_impl.data()"
  },
  {
    "label": "srcCoeff()",
    "kind": "Method",
    "detail": "Function (Index offset =)",
    "insertText": "srcCoeff(i)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "memcpy((void*)(m_device.get(data + i)), m_device.get(src+offset), contiguous_values * sizeof(Scalar))"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (} return false ; } } return true ; } # ifdef EIGEN_USE_THREADS template<EvalSubExprsCallback> EIGEN_STRONG_INLINE void)",
    "insertText": "evalSubExprsIfNeededAsync(EvaluatorPointerType , EvalSubExprsCallback done)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, [done](bool) { done(true); })"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { return m_impl .)",
    "insertText": "coeff(srcCoeff(index))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (const int packetSize = PacketType<CoeffReturnType,Device>::size ;)",
    "insertText": "EIGEN_STATIC_ASSERT((packetSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE) eigen_assert(index+packetSize-1 < internal::array_prod(dimensions()))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i > 0; --i)"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (const Index idx0 = indices [ 0 ] / m_fastOutputStrides [ i ] ; const Index idx1 = indices [ 1 ] / m_fastOutputStrides [ i ] ;)",
    "insertText": "inputIndices(idx0 + m_offsets[i])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(idx1 + m_offsets[i])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (indices [ 0 ] - = idx0* m_outputStrides [ i ] ; indices [ 1 ] - = idx1* m_outputStrides [ i ] ; })",
    "insertText": "inputIndices(indices[0] + m_offsets[0])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(indices[1] + m_offsets[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims - 1; ++i)"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (indices [ 0 ] - = idx0* m_outputStrides [ i ] ; indices [ 1 ] - = idx1* m_outputStrides [ i ] ; })",
    "insertText": "inputIndices(indices[0] + m_offsets[NumDims-1])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(indices[1] + m_offsets[NumDims-1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(inputIndices[1] - inputIndices[0] == packetSize - 1)"
  },
  {
    "label": "Unaligned()",
    "kind": "Method",
    "detail": "Function (PacketReturnType rslt = m_impl . template packet<)",
    "insertText": "Unaligned(inputIndices[0])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ packetSize - 1 ] = m_impl .)",
    "insertText": "coeff(inputIndices[1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 1; i < packetSize-1; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index+i)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType rslt = internal::pload<)",
    "insertText": "PacketReturnType(values)"
  },
  {
    "label": "lastLevelCacheSize()",
    "kind": "Method",
    "detail": "Function (const size_t target_size = m_device .)",
    "insertText": "lastLevelCacheSize()"
  },
  {
    "label": "WithOffset()",
    "kind": "Method",
    "detail": "Function (TensorBlockDesc arg_desc = desc .)",
    "insertText": "WithOffset(srcCoeff(desc.offset()))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (TensorBlock block = m_impl .)",
    "insertText": "block(arg_desc, scratch)"
  },
  {
    "label": "constCast()",
    "kind": "Method",
    "detail": "Function (Storage::Type result =)",
    "insertText": "constCast(m_impl.data())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (offset + = m_offsets [ i ]* m_inputStrides [ i ] ;)",
    "insertText": "for(int j = i+1; j < NumDims; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (offset + = m_offsets [ i ]* m_inputStrides [ i ] ;)",
    "insertText": "for(int j = i-1; j >= 0; --j)"
  },
  {
    "label": "srcCoeff()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "srcCoeff(Index index)"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_fastOutputStrides [ i ] ;)",
    "insertText": "inputIndex(idx + m_offsets[i])"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (index - = idx* m_outputStrides [ i ] ; })",
    "insertText": "inputIndex(index + m_offsets[0])"
  },
  {
    "label": "inputIndex()",
    "kind": "Method",
    "detail": "Function (index - = idx* m_outputStrides [ i ] ; })",
    "insertText": "inputIndex(index + m_offsets[NumDims-1])"
  },
  {
    "label": "RawAccess()",
    "kind": "Method",
    "detail": "Function (} return inputIndex ; } array<Index,NumDims> m_outputStrides ; array<internal::TensorIntDivisor<Index>,NumDims> m_fastOutputStrides ; array<Index,NumDims> m_inputStrides ; TensorEvaluator<ArgType,Device> m_impl ; const Device EIGEN_DEVICE_REF m_device ; Dimensions m_dimensions ; bool m_is_identity ; const StartIndices m_offsets ; } ; template<StartIndices,Sizes,ArgType,Device> struct TensorEvaluator<TensorSlicingOp<StartIndices,Sizes,ArgType>,Device> : public TensorEvaluator<const TensorSlicingOp<StartIndices,Sizes,ArgType>,Device> { typedef TensorEvaluator<const TensorSlicingOp<StartIndices,Sizes,ArgType>,Device> Base ; typedef TensorSlicingOp<StartIndices,Sizes,ArgType> XprType ; const int NumDims = internal::array_size<Sizes>::value ; typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef Sizes Dimensions ; enum { IsAligned = false,PacketAccess = TensorEvaluator<ArgType,Device>::PacketAccess,BlockAccess = TensorEvaluator<ArgType,Device>::BlockAccess,PreferBlockAccess = true,Layout = TensorEvaluator<ArgType,Device>::Layout,CoordAccess = false,)",
    "insertText": "RawAccess(NumDims == 1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} else { return this -> m_impl .)",
    "insertText": "coeffRef(this->srcCoeff(index))"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (m_inputStrides[i])",
    "insertText": "inputIndices(idx0 + this->m_offsets[i])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (m_inputStrides[i])",
    "insertText": "inputIndices(idx1 + this->m_offsets[i])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (indices [ 0 ] - = idx0* this -> m_outputStrides [ i ] ; indices [ 1 ] - = idx1* this -> m_outputStrides [ i ] ; })",
    "insertText": "inputIndices(indices[0] + this->m_offsets[0])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(indices[1] + this->m_offsets[0])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (indices [ 0 ] - = idx0* this -> m_outputStrides [ i ] ; indices [ 1 ] - = idx1* this -> m_outputStrides [ i ] ; })",
    "insertText": "inputIndices(indices[0] + this->m_offsets[NumDims-1])"
  },
  {
    "label": "inputIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "inputIndices(indices[1] + this->m_offsets[NumDims-1])"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (this -> m_impl . template writePacket<)",
    "insertText": "StoreMode(inputIndices[0], x)"
  },
  {
    "label": "PacketReturnType()",
    "kind": "Method",
    "detail": "Function (} else { EIGEN_ALIGN_MAX CoeffReturnType values [ packetSize ] ; internal::pstore<CoeffReturnType,)",
    "insertText": "PacketReturnType(values, x)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this -> m_impl .)",
    "insertText": "coeffRef(inputIndices[0])"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this -> m_impl .)",
    "insertText": "coeffRef(inputIndices[1])"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "coeffRef(index+i)"
  },
  {
    "label": "WithOffset()",
    "kind": "Method",
    "detail": "Function (TensorBlockDesc arg_desc = desc .)",
    "insertText": "WithOffset(this->srcCoeff(desc.offset()))"
  },
  {
    "label": "writeBlock()",
    "kind": "Method",
    "detail": "Function (this -> m_impl .)",
    "insertText": "writeBlock(arg_desc, block)"
  },
  {
    "label": "TensorStridingSlicingOp()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<StartIndices,StopIndices,Strides,XprType> struct traits<TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = array_size<StartIndices>::value ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; } ; template<StartIndices,StopIndices,Strides,XprType> struct eval<TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType>,Eigen::Dense> { typedef const TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType> EIGEN_DEVICE_REF type ; } ; template<StartIndices,StopIndices,Strides,XprType> struct nested<TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType>,1,eval<TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType>>::type> { typedef TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType> type ; } ; } template<StartIndices,StopIndices,Strides,XprType> class TensorStridingSlicingOp : public TensorBase<TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType>> { public : typedef TensorBase<TensorStridingSlicingOp<StartIndices,StopIndices,Strides,XprType>> Base ; typedef internal::traits<TensorStridingSlicingOp>::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef internal::nested<TensorStridingSlicingOp>::type Nested ; typedef internal::traits<TensorStridingSlicingOp>::StorageKind StorageKind ; typedef internal::traits<TensorStridingSlicingOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorStridingSlicingOp(const XprType& expr, const StartIndices& startIndices, const StopIndices& stopIndices, const Strides& strides) : m_xpr(expr), m_startIndices(startIndices), m_stopIndices(stopIndices), m_strides(strides)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (const StartIndices m_startIndices ; const StopIndices m_stopIndices ; const Strides m_strides ; } ; template<StartIndices,StopIndices,Strides,ArgType,Device> struct TensorEvaluator<const TensorStridingSlicingOp<StartIndices,StopIndices,Strides,ArgType>,Device> { typedef TensorStridingSlicingOp<StartIndices,StopIndices,Strides,ArgType> XprType ; const int NumDims = internal::array_size<Strides>::value ; typedef XprType::Index Index ; typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; typedef Strides Dimensions ; enum { IsAligned = false,PacketAccess = false,BlockAccess = false,PreferBlockAccess = TensorEvaluator<ArgType,Device>::PreferBlockAccess,Layout = TensorEvaluator<ArgType,Device>::Layout,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device), m_device(device), m_strides(op.strides())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DSizes<Index,NumDims> startIndicesClamped,stopIndicesClamped ;)",
    "insertText": "for(ptrdiff_t i = 0; i < internal::array_size<Dimensions>::value; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_strides[i] != 0 && \"0 stride is invalid\")"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (startIndicesClamped [ i ] =)",
    "insertText": "clamp(op.startIndices()[i], 0, m_impl.dimensions()[i])"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (stopIndicesClamped [ i ] =)",
    "insertText": "clamp(op.stopIndices()[i], 0, m_impl.dimensions()[i])"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} else { startIndicesClamped [ i ] =)",
    "insertText": "clamp(op.startIndices()[i], -1, m_impl.dimensions()[i] - 1)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (stopIndicesClamped [ i ] =)",
    "insertText": "clamp(op.stopIndices()[i], -1, m_impl.dimensions()[i] - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_is_identity = true ;)",
    "insertText": "for(int i = 0; i < NumDims; i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index interval = stopIndicesClamped [ i ] - startIndicesClamped [ i ] ;)",
    "insertText": "if(interval == 0 || ((interval < 0) != (m_strides[i] < 0)))"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (m_dimensions [ i ] = 0 ; } else { m_dimensions [)",
    "insertText": "i(interval / m_strides[i]) + (interval % m_strides[i] != 0 ? 1 : 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_dimensions[i] >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_strides[i] != 1 || interval != m_impl.dimensions()[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = NumDims - 1; i >= 0; --i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_fastOutputStrides [ i ] ; inputIndex + = idx* m_inputStrides [ i ] + m_offsets [ i ] ; index - = idx* m_outputStrides [ i ] ; } } else { EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < NumDims; ++i)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_fastOutputStrides [ i ] ; inputIndex + = idx* m_inputStrides [ i ] + m_offsets [ i ] ; index - = idx* m_outputStrides [ i ] ; } } return inputIndex ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "clamp(Index value, Index min, Index max)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (# ifndef SYCL_DEVICE_ONLY return)",
    "insertText": "maxi(min, numext::mini(max,value))"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (# else return cl::)",
    "insertText": "clamp(value, min, max)"
  }
]