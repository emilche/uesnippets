[
  {
    "label": "TDistLine3Line3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDistLine3Line3"
  },
  {
    "label": "TDistLine3Line3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" LineTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TDistLine3Line3 { public : TLine3<Real> Line1 ; TLine3<Real> Line2 ; Real DistanceSquared = - 1 . 0 ; bool bIsParallel = false ; TVector<Real> Line1ClosestPoint ; Real Line1Parameter ; TVector<Real> Line2ClosestPoint ; Real Line2Parameter ;)",
    "insertText": "TDistLine3Line3(const TLine3<Real>& Line1In, const TLine3<Real>& Line2In)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Line1 = Line1In ; Line2 = Line2In ; } Real)",
    "insertText": "Get()"
  },
  {
    "label": "GetSquared()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "GetSquared()"
  },
  {
    "label": "ComputeResult()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "ComputeResult()"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (Real b0 = kDiff .)",
    "insertText": "Dot(Line1.Direction)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (Real c = kDiff .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Real det =)",
    "insertText": "Abs((Real)1 - a01 * a01)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Real b1,s0,s1,sqrDist ;)",
    "insertText": "if(det >= TMathUtil<Real>::ZeroTolerance)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (b1 = - kDiff .)",
    "insertText": "Dot(Line2.Direction)"
  },
  {
    "label": "invDet()",
    "kind": "Method",
    "detail": "Function (s1 = a01* b0 - b1 ; Real)",
    "insertText": "invDet((Real)1)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s0(a01 * b1 - b0)"
  },
  {
    "label": "s0()",
    "kind": "Method",
    "detail": "Function (s1* = invDet ; sqrDist =)",
    "insertText": "s0(s0 + a01 * s1 + ((Real)2) * b0) + s1 * (a01 * s0 + s1 + ((Real)2) * b1)"
  },
  {
    "label": "Line1Parameter()",
    "kind": "Method",
    "detail": "Function (Line1ClosestPoint = Line1 . Origin + s0* Line1 . Direction ; Line2ClosestPoint = Line2 . Origin + s1* Line2 . Direction ; Line1Parameter = s0 ; Line2Parameter = s1 ; bIsParallel = false ; } else {)",
    "insertText": "Line1Parameter(Real)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (Line1ClosestPoint = Line1 . Origin ; Line2Parameter = Line2 .)",
    "insertText": "Project(Line1.Origin)"
  },
  {
    "label": "PointAt()",
    "kind": "Method",
    "detail": "Function (Line2ClosestPoint = Line2 .)",
    "insertText": "PointAt(Line2Parameter)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (sqrDist = Line1 .)",
    "insertText": "DistanceSquared(Line2ClosestPoint)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (bIsParallel = true ; })",
    "insertText": "DistanceSquared(sqrDist < (Real)0) ? (Real)"
  }
]