[
  {
    "label": "FGaussSeidelNeohookeanConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGaussSeidelNeohookeanConstraints"
  },
  {
    "label": "FGaussSeidelNeohookeanConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / Deformable / GaussSeidelCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / NewtonCorotatedCache . h \" # include \" Chaos / NeohookeanModel . h \" # include \" Chaos / Framework / Parallel . h \" namespace Chaos::Softs { template<T,ParticleType> class FGaussSeidelNeohookeanConstraints : public FGaussSeidelCorotatedConstraints<T,ParticleType> { typedef FGaussSeidelCorotatedConstraints<T,ParticleType> GSBase ; using GSBase::ParticlesPerColor ; using GSBase::IncidentElements ; using GSBase::IncidentElementsLocal ; using GSBase::ParticleStartIndex ; using GSBase::LocalNewtonTol ; using GSBase::Particle2Incident ; using GSBase::bDoQuasistatics ; using GSBase::ComputeStress ; using GSBase::ComputeHessianHelper ; typedef FXPBDCorotatedConstraints<T,ParticleType> Base ; using Base::MeshConstraints ; using Base::LambdaArray ; using Base::Measure ; using Base::DmInverse ; using Base::MuElementArray ; using Base::LambdaElementArray ; using Base::CorotatedParams ; public :)",
    "insertText": "FGaussSeidelNeohookeanConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const TArray<T>& EMeshArray, const TArray<T>& NuMeshArray, TArray<T>&& AlphaJMeshArray, TArray<TArray<int32>>&& IncidentElementsIn, TArray<TArray<int32>>&& IncidentElementsLocalIn, const int32 ParticleStartIndexIn, const int32 ParticleEndIndexIn, const bool bDoQuasistaticsIn = false, const bool bDoSORIn = true, const T InOmegaSOR = (T)1.6, const FDeformableXPBDCorotatedParams& InParams = FDeformableXPBDCorotatedParams(), const T& NuMesh = (T).3, const bool bRecordMetricIn = false ) : GSBase(InParticles, InMesh, EMeshArray, NuMeshArray, MoveTemp(AlphaJMeshArray), MoveTemp(IncidentElementsIn), MoveTemp(IncidentElementsLocalIn), ParticleStartIndexIn, ParticleEndIndexIn, bDoQuasistaticsIn, bDoSORIn, InOmegaSOR, InParams, NuMesh, bRecordMetricIn)"
  },
  {
    "label": "InitializeNeohookeanLambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNeohookeanLambdas()"
  },
  {
    "label": "FGaussSeidelNeohookeanConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGaussSeidelNeohookeanConstraints()"
  },
  {
    "label": "ComputeStress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeStress(const Chaos::PMatrix<T, 3, 3>& Fe, const T mu, const T lambda, Chaos::PMatrix<T, 3, 3>& P)"
  },
  {
    "label": "PNeohookeanMM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PNeohookeanMM(Fe, mu, lambda, P)"
  },
  {
    "label": "ComputeHessianHelper()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ComputeHessianHelper(const Chaos::PMatrix<T, 3, 3>& Fe, const Chaos::PMatrix<T, 3, 3>& DmInv, const T mu, const T lambda, const int32 local_index, const T Coeff, Chaos::PMatrix<T, 3, 3>& final_hessian)"
  },
  {
    "label": "JFinvT()",
    "kind": "Method",
    "detail": "Function (T LambdaHat = mu + lambda ; Chaos::PMatrix<T,3,3>)",
    "insertText": "JFinvT((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 0, Fe.GetAt(1, 1) * Fe.GetAt(2, 2) - Fe.GetAt(2, 1) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 1, Fe.GetAt(2, 0) * Fe.GetAt(1, 2) - Fe.GetAt(1, 0) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 2, Fe.GetAt(1, 0) * Fe.GetAt(2, 1) - Fe.GetAt(2, 0) * Fe.GetAt(1, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 0, Fe.GetAt(2, 1) * Fe.GetAt(0, 2) - Fe.GetAt(0, 1) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 1, Fe.GetAt(0, 0) * Fe.GetAt(2, 2) - Fe.GetAt(2, 0) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 2, Fe.GetAt(2, 0) * Fe.GetAt(0, 1) - Fe.GetAt(0, 0) * Fe.GetAt(2, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 0, Fe.GetAt(0, 1) * Fe.GetAt(1, 2) - Fe.GetAt(1, 1) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 1, Fe.GetAt(1, 0) * Fe.GetAt(0, 2) - Fe.GetAt(0, 0) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 2, Fe.GetAt(0, 0) * Fe.GetAt(1, 1) - Fe.GetAt(1, 0) * Fe.GetAt(0, 1))"
  },
  {
    "label": "GetTransposed()",
    "kind": "Method",
    "detail": "Function (Chaos::PMatrix<T,3,3> JFinv = JFinvT .)",
    "insertText": "GetTransposed()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T DmInvsum =)",
    "insertText": "T(0)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (localDmsum + = DmInv .)",
    "insertText": "GetAt(k, nu)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} DmInvsum + = localDmsum* localDmsum ; })",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (final_hessian .)",
    "insertText": "SetAt(alpha, alpha, final_hessian.GetAt(alpha, alpha) + Coeff * mu * DmInvsum)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (} Chaos::PMatrix<T,3,3> DmInvJFinv = JFinv* DmInv ; Chaos::TVector<T,3>)",
    "insertText": "l((T)0.)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (l [ alpha ] + = DmInvJFinv .)",
    "insertText": "GetAt(k, alpha)"
  },
  {
    "label": "SetRow()",
    "kind": "Method",
    "detail": "Function (final_hessian .)",
    "insertText": "SetRow(alpha, final_hessian.GetRow(alpha) + Coeff * LambdaHat * l[alpha] * l)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (DmInvsum + = DmInv .)",
    "insertText": "GetAt(local_index - 1, nu) * DmInv.GetAt(local_index - 1, nu)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (l [ alpha ] = DmInvJFinv .)",
    "insertText": "GetAt(local_index - 1, alpha)"
  }
]