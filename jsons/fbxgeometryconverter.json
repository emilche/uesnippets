[
  {
    "label": "FbxManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxManager"
  },
  {
    "label": "FbxMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxMesh"
  },
  {
    "label": "FbxPatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxPatch"
  },
  {
    "label": "FbxNurbs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNurbs"
  },
  {
    "label": "FbxNurbsSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNurbsSurface"
  },
  {
    "label": "FbxNurbsCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNurbsCurve"
  },
  {
    "label": "FbxWeightedMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxWeightedMapping"
  },
  {
    "label": "FbxSurfaceEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxSurfaceEvaluator"
  },
  {
    "label": "FbxScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxScene"
  },
  {
    "label": "FbxNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNode"
  },
  {
    "label": "FbxNodeAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxNodeAttribute"
  },
  {
    "label": "FbxGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxGeometry"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "FbxWriter3ds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxWriter3ds"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_UTILS_GEOMETRY_CONVERTER_H_ # define _FBXSDK_UTILS_GEOMETRY_CONVERTER_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxarray . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxManager ; class FbxMesh ; class FbxPatch ; class FbxNurbs ; class FbxNurbsSurface ; class FbxNurbsCurve ; class FbxWeightedMapping ; class FbxSurfaceEvaluator ; class FbxScene ; class FbxNode ; class FbxNodeAttribute ; class FbxGeometry ; class FBXSDK_DLL FbxGeometryConverter { public : bool)",
    "insertText": "Triangulate(FbxScene* pScene, bool pReplace, bool pLegacy=false)"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (FbxNodeAttribute*)",
    "insertText": "Triangulate(FbxNodeAttribute* pNodeAttribute, bool pReplace, bool pLegacy=false)"
  },
  {
    "label": "ComputeGeometryControlPointsWeightedMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeGeometryControlPointsWeightedMapping(FbxGeometry* pSrcGeom, FbxGeometry* pDstGeom, FbxWeightedMapping* pSrcToDstWeightedMapping, bool pSwapUV=false)"
  },
  {
    "label": "ConvertPatchToNurbs()",
    "kind": "Method",
    "detail": "Function (FbxNurbs*)",
    "insertText": "ConvertPatchToNurbs(FbxPatch *pPatch)"
  },
  {
    "label": "ConvertPatchToNurbsInPlace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertPatchToNurbsInPlace(FbxNode* pNode)"
  },
  {
    "label": "ConvertPatchToNurbsSurface()",
    "kind": "Method",
    "detail": "Function (FbxNurbsSurface*)",
    "insertText": "ConvertPatchToNurbsSurface(FbxPatch *pPatch)"
  },
  {
    "label": "ConvertPatchToNurbsSurfaceInPlace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertPatchToNurbsSurfaceInPlace(FbxNode* pNode)"
  },
  {
    "label": "ConvertNurbsToNurbsSurface()",
    "kind": "Method",
    "detail": "Function (FbxNurbsSurface*)",
    "insertText": "ConvertNurbsToNurbsSurface(FbxNurbs* pNurbs)"
  },
  {
    "label": "ConvertNurbsSurfaceToNurbs()",
    "kind": "Method",
    "detail": "Function (FbxNurbs*)",
    "insertText": "ConvertNurbsSurfaceToNurbs(FbxNurbsSurface* pNurbs)"
  },
  {
    "label": "ConvertNurbsToNurbsSurfaceInPlace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertNurbsToNurbsSurfaceInPlace(FbxNode* pNode)"
  },
  {
    "label": "ConvertNurbsSurfaceToNurbsInPlace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertNurbsSurfaceToNurbsInPlace(FbxNode* pNode)"
  },
  {
    "label": "FlipNurbs()",
    "kind": "Method",
    "detail": "Function (FbxNurbs*)",
    "insertText": "FlipNurbs(FbxNurbs* pNurbs, bool pSwapUV, bool pSwapClusters)"
  },
  {
    "label": "FlipNurbsSurface()",
    "kind": "Method",
    "detail": "Function (FbxNurbsSurface*)",
    "insertText": "FlipNurbsSurface(FbxNurbsSurface* pNurbs, bool pSwapUV, bool pSwapClusters)"
  },
  {
    "label": "EmulateNormalsByPolygonVertex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmulateNormalsByPolygonVertex(FbxMesh* pMesh)"
  },
  {
    "label": "ComputeEdgeSmoothingFromNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeEdgeSmoothingFromNormals(FbxMesh* pMesh)"
  },
  {
    "label": "ComputePolygonSmoothingFromEdgeSmoothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePolygonSmoothingFromEdgeSmoothing(FbxMesh* pMesh, int pIndex=0)"
  },
  {
    "label": "ComputeEdgeSmoothingFromPolygonSmoothing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeEdgeSmoothingFromPolygonSmoothing(FbxMesh* pMesh, int pIndex=0)"
  },
  {
    "label": "SplitMeshesPerMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitMeshesPerMaterial(FbxScene* pScene, bool pReplace)"
  },
  {
    "label": "SplitMeshPerMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitMeshPerMaterial(FbxMesh* pMesh, bool pReplace)"
  },
  {
    "label": "RecenterSceneToWorldCenter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecenterSceneToWorldCenter(FbxScene* pScene, FbxDouble pThreshold)"
  },
  {
    "label": "MergeMeshes()",
    "kind": "Method",
    "detail": "Function (FbxNode*)",
    "insertText": "MergeMeshes(FbxArray<FbxNode*>& pMeshNodes, const char* pNodeName, FbxScene* pScene)"
  },
  {
    "label": "RemoveBadPolygonsFromMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBadPolygonsFromMeshes(FbxScene* pScene, FbxArray<FbxNode*>* pAffectedNodes = NULL)"
  },
  {
    "label": "FbxGeometryConverter()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS)",
    "insertText": "FbxGeometryConverter(FbxManager* pManager)"
  },
  {
    "label": "FbxGeometryConverter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxGeometryConverter()"
  },
  {
    "label": "TriangulateMeshInternal()",
    "kind": "Method",
    "detail": "Function (private : FbxMesh*)",
    "insertText": "TriangulateMeshInternal(const FbxMesh* pMesh)"
  },
  {
    "label": "TriangulateMeshInternalLegacy()",
    "kind": "Method",
    "detail": "Function (FbxMesh*)",
    "insertText": "TriangulateMeshInternalLegacy(const FbxMesh* pMesh)"
  },
  {
    "label": "TriangulatePatchInternal()",
    "kind": "Method",
    "detail": "Function (FbxMesh*)",
    "insertText": "TriangulatePatchInternal(const FbxPatch* pPatch)"
  },
  {
    "label": "TriangulateNurbsInternal()",
    "kind": "Method",
    "detail": "Function (FbxMesh*)",
    "insertText": "TriangulateNurbsInternal(const FbxNurbs* pNurbs)"
  },
  {
    "label": "AddAlternateGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddAlternateGeometry(FbxNode* pNode, FbxGeometry* pSrcGeom, FbxGeometry* pAltGeom, FbxWeightedMapping* pSrcToAltWeightedMapping, bool pConvertDeformations)"
  },
  {
    "label": "ConvertGeometryAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertGeometryAnimation(FbxNode* pNode, FbxGeometry* pSrcGeom, FbxGeometry* pDstGeom)"
  },
  {
    "label": "ReplaceNodeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceNodeAttribute(FbxNode* pNode, FbxNodeAttribute* pNewNodeAttr)"
  },
  {
    "label": "AddTriangulatedMeshGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTriangulatedMeshGeometry(FbxNode* pNode, int pUVStepCoeff)"
  },
  {
    "label": "CreateAndCopyLayerElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAndCopyLayerElement(FbxMesh *pNewMesh, FbxMesh *pRefMesh)"
  },
  {
    "label": "SetLayerElements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLayerElements(FbxMesh *pNewMesh, FbxMesh *pMesh, int pPolygonIndex, int pPolyPointIndex, int pLoopIndex, bool pIsSearched, bool pIsEndPolygon)"
  },
  {
    "label": "FbxTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxTriangulation(int *Index, int pNumSide)"
  },
  {
    "label": "ComputePatchToMeshControlPointsWeightedMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputePatchToMeshControlPointsWeightedMapping(FbxPatch* pSrcPatch, FbxMesh* pDstMesh, FbxWeightedMapping* pMapping, bool pSwapUV=false)"
  },
  {
    "label": "ComputeNurbsToMeshControlPointsWeightedMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeNurbsToMeshControlPointsWeightedMapping(FbxNurbsSurface* pSrcNurbs, FbxMesh* pDstMesh, FbxWeightedMapping* pMapping, bool pRescaleUVs=false, bool pSwapUV=false)"
  },
  {
    "label": "InitializeWeightInControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWeightInControlPoints(FbxGeometryBase* pGeometry)"
  },
  {
    "label": "InitializeWeightInNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWeightInNormals(FbxLayerContainer* pLayerContainer)"
  },
  {
    "label": "TriangulateContinuousSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangulateContinuousSurface(FbxMesh* pMesh, FbxSurfaceEvaluator* pSurface, FbxUInt pPointCountX, FbxUInt pPointCountY, bool ClockWise=false)"
  },
  {
    "label": "CheckForZeroWeightInShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForZeroWeightInShape(FbxGeometry *pGeometry)"
  },
  {
    "label": "CreateMeshFromParametricSurface()",
    "kind": "Method",
    "detail": "Function (FbxMesh*)",
    "insertText": "CreateMeshFromParametricSurface(const FbxGeometry* pGeometry)"
  },
  {
    "label": "CreateNurbsFromPatch()",
    "kind": "Method",
    "detail": "Function (FbxNurbs*)",
    "insertText": "CreateNurbsFromPatch(FbxPatch* pPatch)"
  },
  {
    "label": "CreateNurbsSurfaceFromPatch()",
    "kind": "Method",
    "detail": "Function (FbxNurbsSurface*)",
    "insertText": "CreateNurbsSurfaceFromPatch(FbxPatch* pPatch)"
  },
  {
    "label": "ConvertShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertShapes(const FbxGeometry* pSource, FbxGeometry* pDestination, FbxSurfaceEvaluator* pEvaluator, int pUCount, int pVCount)"
  },
  {
    "label": "ConvertShapes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertShapes(const FbxGeometry* pSource, FbxGeometry* pDestination, FbxWeightedMapping* pSourceToDestinationMapping)"
  },
  {
    "label": "ConvertClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertClusters(const FbxGeometry* pSource, FbxGeometry* pDestination, FbxWeightedMapping* pSourceToDestinationMapping)"
  },
  {
    "label": "ConvertClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertClusters(FbxArray<FbxCluster*> const& pSourceClusters, int pSourceControlPointsCount, FbxArray<FbxCluster*>& pDestinationClusters, int pDestinationControlPointsCount, FbxWeightedMapping* pSourceToDestinationMapping)"
  },
  {
    "label": "BuildClusterToSourceMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildClusterToSourceMapping(FbxArray<FbxCluster*> const& pSourceClusters, FbxWeightedMapping* pClusterToSourceMapping)"
  },
  {
    "label": "CheckClusterToSourceMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckClusterToSourceMapping(FbxWeightedMapping* pClusterToSourceMapping)"
  },
  {
    "label": "ConvertCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertCluster(int pSourceClusterIndex, FbxWeightedMapping* pClusterToSourceMapping, FbxWeightedMapping* pSourceToDestinationMapping, FbxCluster* pDestinationCluster)"
  },
  {
    "label": "DuplicateControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateControlPoints(FbxArray<FbxVector4>& pControlPoints, FbxArray<int>& pPolygonVertices)"
  },
  {
    "label": "UpdatePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePolygon(FbxMesh *pNewMesh, FbxMesh const *pRefMesh, int pPolygonIndex, int* pNewIndex, int &pVerticeIndexMeshTriangulated, int &pPolygonIndexMeshTriangulated)"
  },
  {
    "label": "UpdatePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePolygon(FbxMesh *pNewMesh, FbxMesh const *pRefMesh, int pPolygonIndex, int* pNewIndex, int &pVerticeIndexMeshTriangulated, int &pPolygonIndexMeshTriangulated, int pTriangleNum)"
  },
  {
    "label": "ResizePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizePolygon(FbxMesh *pNewMesh, int pNewCountVertices = 0, int pNewCountPolygons =0, bool pClearFlag = true)"
  },
  {
    "label": "ConvertNurbs()",
    "kind": "Method",
    "detail": "Function (template<class T1,class T2> void)",
    "insertText": "ConvertNurbs(T1* pNewNurbs, T2* pOldNurb)"
  },
  {
    "label": "CopyAnimationCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyAnimationCurves(FbxNode* pNode, FbxGeometry* pNewGeometry)"
  },
  {
    "label": "FlipNurbsCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlipNurbsCurve(FbxNurbsCurve* pCurve)"
  },
  {
    "label": "FlipControlPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipControlPoints(FbxGeometryBase* pPoints, int pUCount, int pVCount)"
  },
  {
    "label": "ConvertMaterialReferenceMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertMaterialReferenceMode(FbxMesh* pMeshRef)"
  },
  {
    "label": "RevertMaterialReferenceModeConversion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RevertMaterialReferenceModeConversion(FbxMesh* pMeshRef)"
  }
]