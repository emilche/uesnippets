[
  {
    "label": "Reference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Reference"
  },
  {
    "label": "Reference()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_REFERENCE_H_ # define BASE_WIN_REFERENCE_H_ # include<windows . foundation . collections . h> # include<wrl / implements . h> # include<type_traits> # include<utility> namespace base { namespace win { template<T> class Reference : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRt | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::IReference<T>> { public : using AbiT = ABI::Windows::Foundation::Internal::GetAbiType<ABI::Windows::Foundation::IReference<T>::T_complex>::type ;)",
    "insertText": "Reference(const AbiT& value) : value_(value)"
  },
  {
    "label": "Reference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Reference(AbiT&& value) : value_(std::move(value))"
  },
  {
    "label": "Reference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Reference(const Reference&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Reference&)",
    "insertText": "operator(const Reference&)"
  },
  {
    "label": "Reference()",
    "kind": "Method",
    "detail": "Function (* value = value_ ; return S_OK ; } private : ~)",
    "insertText": "Reference()"
  }
]