[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAINamedID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAINamedID"
  },
  {
    "label": "FAIGenericID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIGenericID"
  },
  {
    "label": "FAIBasicCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIBasicCounter"
  },
  {
    "label": "FAIResCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIResCounter"
  },
  {
    "label": "FAIResourcesSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIResourcesSet"
  },
  {
    "label": "FAIResourceLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIResourceLock"
  },
  {
    "label": "FAIRequestID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIRequestID"
  },
  {
    "label": "UNavigationQueryFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationQueryFilter"
  },
  {
    "label": "FAIMoveRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIMoveRequest"
  },
  {
    "label": "FIntervalCountdown",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIntervalCountdown"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # include \" AI / Navigation / NavigationTypes . h \" # endif # include \" NavigationSystemTypes . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" GameFramework / Actor . h \" # endif # include \" AITypes . generated . h \" class AActor ; typedef TSharedPtr<FMoveRequestCustomData,ESPMode::ThreadSafe> FCustomMoveSharedPtr ;)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Overall AI Time\"), STAT_AI_Overall, STATGROUP_AI, AIMODULE_API)"
  },
  {
    "label": "TEXT_AI_LOCATION()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEXT_AI_LOCATION(v) (FAISystem::IsValidLocation(v) ? *(v).ToString() : TEXT(\"Invalid\"))"
  },
  {
    "label": "FRotator()",
    "kind": "Method",
    "detail": "Function (const FRotator InvalidRotation =)",
    "insertText": "FRotator(FLT_MAX)"
  },
  {
    "label": "FQuat()",
    "kind": "Method",
    "detail": "Function (const FQuat InvalidOrientation =)",
    "insertText": "FQuat(FLT_MAX, FLT_MAX, FLT_MAX, FLT_MAX)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (const FVector InvalidLocation =)",
    "insertText": "FVector(FLT_MAX)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const FVector InvalidDirection = FVector::ZeroVector ; const float InvalidRange = - 1 . f ; const float InfiniteInterval = - FLT_MAX ; const uint32 InvalidUnsignedID =)",
    "insertText": "uint32(INDEX_NONE)"
  },
  {
    "label": "IsValidRotation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidRotation(const FRotator& TestRotation)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Default,Enable)",
    "insertText": "UMETA(DisplayName = \"Yes\"), Disable UMETA(DisplayName = \"No\"), MAX UMETA(Hidden)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Distance3D,Distance2D,DistanceZ,MAX)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "PickAIOption()",
    "kind": "Method",
    "detail": "Function (namespace FAISystem { bool)",
    "insertText": "PickAIOption(EAIOptionFlag::Type Option, bool DefaultOption)"
  },
  {
    "label": "BoolToAIOption()",
    "kind": "Method",
    "detail": "Function (} EAIOptionFlag::Type)",
    "insertText": "BoolToAIOption(bool Value)"
  },
  {
    "label": "GetCounter()",
    "kind": "Method",
    "detail": "Function (} template<TCounter> struct FAINamedID { const TCounter::Type Index ; const FName Name ; private : TCounter Counter ; protected : TCounter&)",
    "insertText": "GetCounter()"
  },
  {
    "label": "GetCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCounter().OnIndexForced(InIndex)"
  },
  {
    "label": "FAINamedID()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FAINamedID(const FName& InName) : Index(GetCounter().GetNextAvailableID()), Name(InName)"
  },
  {
    "label": "FAINamedID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAINamedID(const FAINamedID& Other) : Index(Other.Index), Name(Other.Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAINamedID&)",
    "insertText": "operator(const FAINamedID& Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) FAINamedID(Other)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "Type()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "InvalidID()",
    "kind": "Method",
    "detail": "Function (} FAINamedID<TCounter>)",
    "insertText": "InvalidID()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const FAINamedID<TCounter> InvalidIDInstance ; return InvalidIDInstance ; } uint32)",
    "insertText": "GetTypeHash(const FAINamedID& ID)"
  },
  {
    "label": "FAIGenericID()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FAIGenericID(const FAIGenericID& Other) : Index(Other.Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAIGenericID&)",
    "insertText": "operator(const FAIGenericID& Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) FAIGenericID(Other)"
  },
  {
    "label": "GetNextID()",
    "kind": "Method",
    "detail": "Function (} FAIGenericID)",
    "insertText": "GetNextID()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const FAIGenericID<TCounter> InvalidIDInstance ; return InvalidIDInstance ; } uint32)",
    "insertText": "GetTypeHash(const FAIGenericID& ID)"
  },
  {
    "label": "FAIBasicCounter()",
    "kind": "Method",
    "detail": "Function (} } ; template<TCounterType> struct FAIBasicCounter { typedef TCounterType Type ; protected : Type NextAvailableID ; public :)",
    "insertText": "FAIBasicCounter() : NextAvailableID(Type(0))"
  },
  {
    "label": "GetNextAvailableID()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "GetNextAvailableID()"
  },
  {
    "label": "OnIndexForced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIndexForced(Type ForcedIndex)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (NextAvailableID = FMath::Max<)",
    "insertText": "Type(ForcedIndex + 1, NextAvailableID)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAIResCounter : FAIBasicCounter<uint8> { } ; typedef FAINamedID<FAIResCounter> FAIResourceID ; struct FAIResourcesSet { const uint32 NoResources = 0 ; const uint32 AllResources =)",
    "insertText": "uint32(-1)"
  },
  {
    "label": "FAIResourcesSet()",
    "kind": "Method",
    "detail": "Function (const uint8 MaxFlags = 3 2 ; private : uint32 Flags ; public :)",
    "insertText": "FAIResourcesSet(uint32 ResourceSetDescription = NoResources) : Flags(ResourceSetDescription)"
  },
  {
    "label": "FAIResourcesSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAIResourcesSet(const FAIResourceID& Resource) : Flags(0)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResource(Resource)"
  },
  {
    "label": "AddResourceIndex()",
    "kind": "Method",
    "detail": "Function (} FAIResourcesSet&)",
    "insertText": "AddResourceIndex(uint8 ResourceIndex)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(1 << ResourceIndex)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (} FAIResourcesSet&)",
    "insertText": "AddResource(const FAIResourceID& Resource)"
  },
  {
    "label": "AddResourceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResourceIndex(Resource.Index)"
  },
  {
    "label": "RemoveResourceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResourceIndex(Resource.Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FAIResourceLock()",
    "kind": "Method",
    "detail": "Function (Flags = 0 ; } } ; struct FAIResourceLock { typedef uint16 FLockFlags ;)",
    "insertText": "FAIResourceLock()"
  },
  {
    "label": "SetLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLock(EAIRequestPriority::Type LockPriority)"
  },
  {
    "label": "ClearLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLock(EAIRequestPriority::Type LockPriority)"
  },
  {
    "label": "SetUseResourceLockCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseResourceLockCount(bool inUseResourceLockCount)"
  },
  {
    "label": "ForceClearAllLocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceClearAllLocks()"
  },
  {
    "label": "IsAvailableFor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAvailableFor(EAIRequestPriority::Type LockPriority)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FAIResourceLock& Other)"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (const FAIResourceID&)",
    "insertText": "GetResource(int32 ResourceIndex)"
  },
  {
    "label": "GetResourcesCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetResourcesCount()"
  },
  {
    "label": "GetSetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSetDescription(FAIResourcesSet ResourceSet)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAIRequestID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAIRequestID(uint32 InRequestID = InvalidRequestID) : RequestID(InRequestID)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEquivalent(uint32 OtherID)"
  },
  {
    "label": "IsEquivalent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEquivalent(FAIRequestID Other)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (RequestID = OtherID ; } operator)",
    "insertText": "uint32()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} const FAIRequestID AnyRequest ; const FAIRequestID CurrentRequest ; const FAIRequestID InvalidRequest ; } ; class UNavigationQueryFilter ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() AIMODULE_API FAIMoveRequest()"
  },
  {
    "label": "FAIMoveRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIMoveRequest(const AActor* InGoalActor)"
  },
  {
    "label": "FAIMoveRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAIMoveRequest(const FVector& InGoalLocation)"
  },
  {
    "label": "SetNavigationFilter()",
    "kind": "Method",
    "detail": "Function (FAIMoveRequest&)",
    "insertText": "SetNavigationFilter(TSubclassOf<UNavigationQueryFilter> Filter)"
  },
  {
    "label": "SetUsePathfinding()",
    "kind": "Method",
    "detail": "Function (FilterClass = Filter ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetUsePathfinding(bool bPathfinding)"
  },
  {
    "label": "SetAllowPartialPath()",
    "kind": "Method",
    "detail": "Function (bUsePathfinding = bPathfinding ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetAllowPartialPath(bool bAllowPartial)"
  },
  {
    "label": "SetRequireNavigableEndLocation()",
    "kind": "Method",
    "detail": "Function (bAllowPartialPath = bAllowPartial ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetRequireNavigableEndLocation(bool bRequire)"
  },
  {
    "label": "SetApplyCostLimitFromHeuristic()",
    "kind": "Method",
    "detail": "Function (bRequireNavigableEndLocation = bRequire ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetApplyCostLimitFromHeuristic(bool bApply, float InCostLimitFactor = FLT_MAX, float InMinimumCostLimit = 0.f)"
  },
  {
    "label": "SetProjectGoalLocation()",
    "kind": "Method",
    "detail": "Function (bApplyCostLimitFromHeuristic = bApply ; CostLimitFactor = InCostLimitFactor ; MinimumCostLimit = InMinimumCostLimit ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetProjectGoalLocation(bool bProject)"
  },
  {
    "label": "SetCanStrafe()",
    "kind": "Method",
    "detail": "Function (bProjectGoalOnNavigation = bProject ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetCanStrafe(bool bStrafe)"
  },
  {
    "label": "SetReachTestIncludesAgentRadius()",
    "kind": "Method",
    "detail": "Function (bCanStrafe = bStrafe ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetReachTestIncludesAgentRadius(bool bIncludeRadius)"
  },
  {
    "label": "SetReachTestIncludesGoalRadius()",
    "kind": "Method",
    "detail": "Function (bReachTestIncludesAgentRadius = bIncludeRadius ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetReachTestIncludesGoalRadius(bool bIncludeRadius)"
  },
  {
    "label": "SetAcceptanceRadius()",
    "kind": "Method",
    "detail": "Function (bReachTestIncludesGoalRadius = bIncludeRadius ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetAcceptanceRadius(float Radius)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (AcceptanceRadius = Radius ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetUserData(const FCustomMoveSharedPtr& InUserData)"
  },
  {
    "label": "SetUserFlags()",
    "kind": "Method",
    "detail": "Function (UserData = InUserData ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetUserFlags(int32 InUserFlags)"
  },
  {
    "label": "SetStartFromPreviousPath()",
    "kind": "Method",
    "detail": "Function (UserFlags = InUserFlags ; return* this ; } FAIMoveRequest&)",
    "insertText": "SetStartFromPreviousPath(const bool bInStartFromPreviousPath)"
  },
  {
    "label": "IsMoveToActorRequest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMoveToActorRequest()"
  },
  {
    "label": "GetGoalLocation()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetGoalLocation()"
  },
  {
    "label": "IsUsingPathfinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingPathfinding()"
  },
  {
    "label": "SetGoalLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGoalLocation(const FVector& InGoalLocation)"
  },
  {
    "label": "UpdateGoalLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateGoalLocation(const FVector& NewLocation)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=Time)"
  },
  {
    "label": "FIntervalCountdown()",
    "kind": "Method",
    "detail": "Function (float TimeLeft ;)",
    "insertText": "FIntervalCountdown(const float InInterval = -1.f) : Interval(InInterval), TimeLeft(0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const float InNewTimeLeft)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (TimeLeft = InNewTimeLeft ; } bool)",
    "insertText": "Tick(const float TimeDelta)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TimeLeft - = TimeDelta ; return TimeLeft<= 0 ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetElapsedTime()",
    "kind": "Method",
    "detail": "Function (TimeLeft = Interval ; } float)",
    "insertText": "GetElapsedTime()"
  },
  {
    "label": "GetElapsedTimeWithFallback()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetElapsedTimeWithFallback(const float FallbackValue)"
  }
]