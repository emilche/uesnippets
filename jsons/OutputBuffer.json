[
  {
    "label": "OutputBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutputBuffer"
  },
  {
    "label": "OutputBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_OUTPUTBUFFER_H # define LLVM_SUPPORT_OUTPUTBUFFER_H # include<cassert> # include<string> # include<vector> namespace llvm { class OutputBuffer { std::vector<unsigned char>& Output ; bool is64Bit,isLittleEndian ; public :)",
    "insertText": "OutputBuffer(std::vector<unsigned char> &Out, bool is64bit, bool le) : Output(Out), is64Bit(is64bit), isLittleEndian(le)"
  },
  {
    "label": "align()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "align(unsigned Boundary)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Boundary && (Boundary & (Boundary - 1)) == 0 && \"Must align to 2^k boundary\")"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t Size = Output .)",
    "insertText": "size()"
  },
  {
    "label": "Boundary()",
    "kind": "Method",
    "detail": "Function (size_t Pad =)",
    "insertText": "Boundary(Size & (Boundary - 1))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "resize(Size + Pad)"
  },
  {
    "label": "outbyte()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "outbyte(unsigned char X)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(X)"
  },
  {
    "label": "outhalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "outhalf(unsigned short X)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(X & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(X >> 8)"
  },
  {
    "label": "outword()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "outword(unsigned X)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back((X >> 0) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back((X >> 8) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back((X >> 16) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back((X >> 24) & 255)"
  },
  {
    "label": "outxword()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "outxword(uint64_t X)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 0) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 8) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 16) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 24) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 32) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 40) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 48) & 255)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "push_back(unsigned(X >> 56) & 255)"
  },
  {
    "label": "outaddr32()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "outaddr32(unsigned X)"
  },
  {
    "label": "outword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "outword(X)"
  },
  {
    "label": "outaddr64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "outaddr64(uint64_t X)"
  },
  {
    "label": "outxword()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "outxword(X)"
  },
  {
    "label": "outaddr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "outaddr(uint64_t X)"
  },
  {
    "label": "outstring()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "outstring(const std::string &S, unsigned Length)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned len_to_copy = static_cast<)",
    "insertText": "unsigned(S.length()) < Length ? static_cast<unsigned>(S.length())"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned len_to_fill = static_cast<)",
    "insertText": "unsigned(S.length()) < Length ? Length - static_cast<unsigned>(S.length())"
  },
  {
    "label": "fixhalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fixhalf(unsigned short X, unsigned Offset)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (unsigned char* P =& Output [ Offset ] ;)",
    "insertText": "P(X >> (isLittleEndian ? 0 : 8))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 8 : 0))"
  },
  {
    "label": "fixword()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fixword(unsigned X, unsigned Offset)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (unsigned char* P =& Output [ Offset ] ;)",
    "insertText": "P(X >> (isLittleEndian ? 0 : 24))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 8 : 16))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 16 : 8))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 24 : 0))"
  },
  {
    "label": "fixxword()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fixxword(uint64_t X, unsigned Offset)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (unsigned char* P =& Output [ Offset ] ;)",
    "insertText": "P(X >> (isLittleEndian ? 0 : 56))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 8 : 48))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 16 : 40))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 24 : 32))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 32 : 24))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 40 : 16))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 48 : 8))"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(X >> (isLittleEndian ? 56 : 0))"
  },
  {
    "label": "fixaddr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fixaddr(uint64_t X, unsigned Offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} unsigned char&)",
    "insertText": "operator(unsigned Index)"
  }
]