[
  {
    "label": "UDataflow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataflow"
  },
  {
    "label": "FDataflowNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowNode"
  },
  {
    "label": "FDataflowOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowOutput"
  },
  {
    "label": "FDataflowConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataflowConnection"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContext"
  },
  {
    "label": "TIsUObjectPtrElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUObjectPtrElement"
  },
  {
    "label": "FTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimestamp"
  },
  {
    "label": "FRenderingParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderingParameter"
  },
  {
    "label": "FContextCacheElementBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextCacheElementBase"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FContextCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextCache"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TContextCacheElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContextCacheElement"
  },
  {
    "label": "TContextCacheElementReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContextCacheElementReference"
  },
  {
    "label": "FContextCacheElementNull",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextCacheElementNull"
  },
  {
    "label": "TContextCacheElementUObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContextCacheElementUObject"
  },
  {
    "label": "FContextScopedCallstack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContextScopedCallstack"
  },
  {
    "label": "FContextSingle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextSingle"
  },
  {
    "label": "FContextThreaded",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContextThreaded"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeExit . h \" # include \" UObject / UnrealType . h \" # include \" Templates / UniquePtr . h \" # include \" GenericPlatform / GenericPlatformCriticalSection . h \" # include \" Serialization / Archive . h \" class UDataflow ; struct FDataflowNode ; struct FDataflowOutput ; struct FDataflowConnection ; # define DATAFLOW_EDITOR_EVALUATION WITH_EDITOR namespace UE::Dataflow { class FContext ; typedef uint32 FContextCacheKey ; template<T> struct TIsUObjectPtrElement { typedef TDecay<T>::Type Type ; bool)",
    "insertText": "Value(std::is_pointer_v<Type> && std::is_convertible_v<Type, const UObjectBase*>)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} ; struct FTimestamp { typedef uint64 Type ; Type Value =)",
    "insertText": "Type(0)"
  },
  {
    "label": "FTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTimestamp(Type InValue) : Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FTimestamp& InTimestamp)"
  },
  {
    "label": "FRenderingParameter()",
    "kind": "Method",
    "detail": "Function (Type Invalid ; } ; struct FRenderingParameter {)",
    "insertText": "FRenderingParameter()"
  },
  {
    "label": "FRenderingParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRenderingParameter(FString InRenderName, FName InTypeName, const TArray<FName>& InOutputs) : Name(InRenderName), Type(InTypeName), Outputs(InOutputs)"
  },
  {
    "label": "FRenderingParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRenderingParameter(FString InRenderName, FName InTypeName, TArray<FName>&& InOutputs) : Name(InRenderName), Type(InTypeName), Outputs(InOutputs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRenderingParameter& Other)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString Name =)",
    "insertText": "FString(\"\")"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName Type =)",
    "insertText": "FName(\"\")"
  },
  {
    "label": "FContextCacheElementBase()",
    "kind": "Method",
    "detail": "Function (TArray<FName> Outputs ; } ; struct FContextCacheElementBase { enum EType { CacheElementTyped,CacheElementReference,CacheElementNull,CacheElementUObject } ;)",
    "insertText": "FContextCacheElementBase(EType CacheElementType, FGuid InNodeGuid = FGuid(), const FProperty* InProperty = nullptr, uint32 InNodeHash = 0, FTimestamp InTimestamp = FTimestamp::Invalid) : Type(CacheElementType) , NodeGuid(InNodeGuid) , Property(InProperty) , NodeHash(InNodeHash) , Timestamp(InTimestamp)"
  },
  {
    "label": "FContextCacheElementBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FContextCacheElementBase()"
  },
  {
    "label": "CreateReference()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FContextCacheElementBase>)",
    "insertText": "CreateReference(FContextCacheKey InReferenceDataKey)"
  },
  {
    "label": "GetTypedData()",
    "kind": "Method",
    "detail": "Function (template<T> const T&)",
    "insertText": "GetTypedData(FContext& Context, const FProperty* PropertyIn, const T& Default)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (EType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetNodeGuid()",
    "kind": "Method",
    "detail": "Function (Timestamp = InTimestamp ; } const FGuid&)",
    "insertText": "GetNodeGuid()"
  },
  {
    "label": "TContextCacheElement()",
    "kind": "Method",
    "detail": "Function (Property = NewProperty ; } private : struct FContextCache ; EType Type ; FGuid NodeGuid ; const FProperty* Property = nullptr ; uint32 NodeHash = 0 ; FTimestamp Timestamp = FTimestamp::Invalid ; } ; template<class T> struct TContextCacheElement : public FContextCacheElementBase {)",
    "insertText": "TContextCacheElement(FGuid InNodeGuid, const FProperty* InProperty, T&& InData, uint32 InNodeHash, FTimestamp Timestamp) : FContextCacheElementBase(EType::CacheElementTyped, InNodeGuid, InProperty, InNodeHash, Timestamp) , Data(Forward<T>(InData))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "GetData(FContext& Context, const FProperty* PropertyIn, const T& Default)"
  },
  {
    "label": "GetDataDirect()",
    "kind": "Method",
    "detail": "Function (const T&)",
    "insertText": "GetDataDirect()"
  },
  {
    "label": "TContextCacheElementReference()",
    "kind": "Method",
    "detail": "Function (private : typedef TDecay<T>::Type FDataType ; const FDataType Data ; } ; template<class T> struct TContextCacheElementReference : public FContextCacheElementBase {)",
    "insertText": "TContextCacheElementReference(FGuid InNodeGuid, const FProperty* InProperty, FContextCacheKey InDataKey, uint32 InNodeHash, FTimestamp Timestamp) : FContextCacheElementBase(EType::CacheElementReference, InNodeGuid, InProperty, InNodeHash, Timestamp) , DataKey(InDataKey)"
  },
  {
    "label": "FContextCacheElementNull()",
    "kind": "Method",
    "detail": "Function (private : const FContextCacheKey DataKey ; } ; struct FContextCacheElementNull : public FContextCacheElementBase {)",
    "insertText": "FContextCacheElementNull(FGuid InNodeGuid, const FProperty* InProperty, FContextCacheKey InDataKey, uint32 InNodeHash, FTimestamp Timestamp) : FContextCacheElementBase(EType::CacheElementNull, InNodeGuid, InProperty, InNodeHash, Timestamp)"
  },
  {
    "label": "TContextCacheElementUObject()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> struct TContextCacheElementUObject : public FContextCacheElementBase,public FGCObject {)",
    "insertText": "TContextCacheElementUObject(FGuid InNodeGuid, const FProperty* InProperty, T&& InObject, uint32 InNodeHash, FTimestamp Timestamp) : FContextCacheElementBase(EType::CacheElementUObject, InNodeGuid, InProperty, InNodeHash, Timestamp) , Object(InObject)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "GetData(FContext& , const FProperty* , const T&)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(Object)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Type == EType::CacheElementReference)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Type == EType::CacheElementNull)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "check(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, UE::Dataflow::FTimestamp& ValueIn)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<ValueIn . Value ; Ar<<ValueIn . Invalid ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, UE::Dataflow::FContextCache& ValueIn)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (ValueIn .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FContext&)",
    "insertText": "operator(FContext&&)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContext(const FContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FContext&)",
    "insertText": "operator(const FContext&)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (FContextCache DataStore ; public :)",
    "insertText": "FContext()"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "StaticType()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(FName InType)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetKeys(TSet<FContextCacheKey>& InKeys)"
  },
  {
    "label": "AsType()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T*)",
    "insertText": "AsType()"
  },
  {
    "label": "SetDataImpl()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "SetDataImpl(FContextCacheKey Key, TUniquePtr<FContextCacheElementBase>&& DataStoreEntry)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SetData(FContextCacheKey InKey, const FProperty* InProperty, T&& InValue, const FGuid& InNodeGuid, uint32 InNodeHash, const FTimestamp& InTimestamp)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FContextCacheElementBase> DataStoreEntry ; if)",
    "insertText": "constexpr(TIsUObjectPtrElement<T>::Value)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (DataStoreEntry = MakeUnique<TContextCacheElementUObject<)",
    "insertText": "T(InNodeGuid, InProperty, Forward<T>(InValue), InNodeHash, InTimestamp)"
  },
  {
    "label": "SetDataImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetDataImpl(InKey, MoveTemp(DataStoreEntry))"
  },
  {
    "label": "SetDataReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDataReference(FContextCacheKey Key, const FProperty* Property, FContextCacheKey ReferenceKey)"
  },
  {
    "label": "CacheReferenceElement()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FContextCacheElementBase>)",
    "insertText": "CacheReferenceElement(*CacheElement)->CreateReference(ReferenceKey)"
  },
  {
    "label": "SetDataImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataImpl(Key, MoveTemp(CacheReferenceElement))"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensure(false)"
  },
  {
    "label": "SetNullData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetNullData(FContextCacheKey InKey, const FProperty* InProperty, const FGuid& InNodeGuid, uint32 InNodeHash, const FTimestamp& InTimestamp)"
  },
  {
    "label": "FContextCacheElementNull()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FContextCacheElementNull> CacheNullElement = MakeUnique<)",
    "insertText": "FContextCacheElementNull(InNodeGuid, InProperty, InKey, InNodeHash, InTimestamp)"
  },
  {
    "label": "SetDataImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataImpl(InKey, MoveTemp(CacheNullElement))"
  },
  {
    "label": "GetDataImpl()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FContextCacheElementBase>*)",
    "insertText": "GetDataImpl(FContextCacheKey Key)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (template<class T> const T&)",
    "insertText": "GetData(FContextCacheKey Key, const FProperty* InProperty, const T& Default = T())"
  },
  {
    "label": "HasDataImpl()",
    "kind": "Method",
    "detail": "Function (} return Default ; } bool)",
    "insertText": "HasDataImpl(FContextCacheKey Key, FTimestamp InTimestamp = FTimestamp::Invalid)"
  },
  {
    "label": "HasData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasData(FContextCacheKey Key, FTimestamp InTimestamp = FTimestamp::Invalid)"
  },
  {
    "label": "IntKey()",
    "kind": "Method",
    "detail": "Function (FContextCacheKey)",
    "insertText": "IntKey(FContextCacheKey)"
  },
  {
    "label": "IsEmptyImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmptyImpl()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetTimestamp()",
    "kind": "Method",
    "detail": "Function (FTimestamp Timestamp = FTimestamp::Invalid ; Ar<<Timestamp ; Ar<<DataStore ; } FTimestamp)",
    "insertText": "GetTimestamp(FContextCacheKey Key)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(const FDataflowNode* Node, const FDataflowOutput* Output)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(const FDataflowOutput& Connection)"
  },
  {
    "label": "PushToCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushToCallstack(const FDataflowConnection* Connection)"
  },
  {
    "label": "PopFromCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFromCallstack(const FDataflowConnection* Connection)"
  },
  {
    "label": "IsInCallstack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInCallstack(const FDataflowConnection* Connection)"
  },
  {
    "label": "IsCacheEntryAfterTimestamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheEntryAfterTimestamp(FContextCacheKey InKey, const FTimestamp InTimestamp)"
  },
  {
    "label": "FContextScopedCallstack()",
    "kind": "Method",
    "detail": "Function (private : # if DATAFLOW_EDITOR_EVALUATION TArray<const FDataflowConnection*> Callstack ; # endif } ; struct FContextScopedCallstack { public :)",
    "insertText": "FContextScopedCallstack(FContext& InContext, const FDataflowConnection* InConnection)"
  },
  {
    "label": "FContextScopedCallstack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FContextScopedCallstack()"
  },
  {
    "label": "IsLoopDetected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoopDetected()"
  },
  {
    "label": "DATAFLOW_CONTEXT_INTERNAL()",
    "kind": "Method",
    "detail": "Function (} class FContextSingle : public FContext { public :)",
    "insertText": "DATAFLOW_CONTEXT_INTERNAL(FContext, FContextSingle)"
  },
  {
    "label": "FContextSingle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContextSingle()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (DataStore .)",
    "insertText": "Emplace(Key, MoveTemp(DataStoreEntry))"
  },
  {
    "label": "DATAFLOW_CONTEXT_INTERNAL()",
    "kind": "Method",
    "detail": "Function (} ; class FContextThreaded : public FContext { TSharedPtr<FCriticalSection> CacheLock ; public :)",
    "insertText": "DATAFLOW_CONTEXT_INTERNAL(FContext, FContextThreaded)"
  },
  {
    "label": "FContextThreaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FContextThreaded() : FContext()"
  },
  {
    "label": "FCriticalSection()",
    "kind": "Method",
    "detail": "Function (CacheLock = MakeShared<)",
    "insertText": "FCriticalSection()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (CacheLock ->)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (ON_SCOPE_EXIT { CacheLock ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ; TUniquePtr<FContextCacheElementBase>* CurrentData = DataStore .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} ; return DataStore .)",
    "insertText": "Contains(Key) && DataStore[Key]->GetTimestamp()"
  }
]