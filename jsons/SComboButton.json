[
  {
    "label": "SButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SButton"
  },
  {
    "label": "SImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SImage"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Input / SMenuAnchor . h \")",
    "insertText": "DECLARE_DELEGATE(FOnComboBoxOpened)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SImage ; class SComboButton : public SMenuAnchor { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SComboButton ) : _ComboButtonStyle(&FAppStyle::Get().GetWidgetStyle< FComboButtonStyle >( \"ComboButton\" )) , _ButtonStyle(nullptr) , _ButtonContent() , _MenuContent() , _IsFocusable(true) , _HasDownArrow(true) , _ForegroundColor(FSlateColor::UseStyle()) , _ButtonColorAndOpacity(FLinearColor::White) , _MenuPlacement(MenuPlacement_ComboBox) , _HAlign(HAlign_Fill) , _VAlign(VAlign_Center) , _Method() , _CollapseMenuOnParentFocus(false)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FComboButtonStyle, ComboButtonStyle ) SLATE_STYLE_ARGUMENT( FButtonStyle, ButtonStyle ) SLATE_NAMED_SLOT( FArguments, ButtonContent ) SLATE_NAMED_SLOT( FArguments, MenuContent ) SLATE_EVENT( FOnGetContent, OnGetMenuContent ) SLATE_EVENT( FOnIsOpenChanged, OnMenuOpenChanged ) SLATE_EVENT( FOnComboBoxOpened, OnComboBoxOpened ) SLATE_ARGUMENT( bool, IsFocusable ) SLATE_ARGUMENT( bool, HasDownArrow ) SLATE_ATTRIBUTE( FSlateColor, ForegroundColor ) SLATE_ATTRIBUTE( FSlateColor, ButtonColorAndOpacity ) SLATE_ATTRIBUTE( FMargin, ContentPadding ) SLATE_ATTRIBUTE( EMenuPlacement, MenuPlacement ) SLATE_ARGUMENT( EHorizontalAlignment, HAlign ) SLATE_ARGUMENT( EVerticalAlignment, VAlign ) SLATE_ARGUMENT( TOptional<EPopupMethod>, Method ) SLATE_ARGUMENT(bool, CollapseMenuOnParentFocus) SLATE_END_ARGS() SLATE_API virtual void SetMenuContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetOnGetMenuContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnGetMenuContent(FOnGetContent InOnGetMenuContent)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetMenuContentWidgetToFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuContentWidgetToFocus(TWeakPtr<SWidget> InWidgetToFocusPtr)"
  },
  {
    "label": "SetButtonContentPadding()",
    "kind": "Method",
    "detail": "Function (WidgetToFocusPtr = InWidgetToFocusPtr ; } void)",
    "insertText": "SetButtonContentPadding(FMargin InPadding)"
  },
  {
    "label": "SetHasDownArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasDownArrow(bool InHasArrowDown)"
  },
  {
    "label": "OnButtonClicked()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnButtonClicked()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetFilteredToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilteredToolTipText(TAttribute<FText> ToolTipText)"
  }
]