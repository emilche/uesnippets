[
  {
    "label": "FDatasmithBaseVariantElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithBaseVariantElementImpl"
  },
  {
    "label": "FDatasmithBasePropertyCaptureElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithBasePropertyCaptureElementImpl"
  },
  {
    "label": "FDatasmithPropertyCaptureElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithPropertyCaptureElementImpl"
  },
  {
    "label": "FDatasmithObjectPropertyCaptureElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithObjectPropertyCaptureElementImpl"
  },
  {
    "label": "FDatasmithActorBindingElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithActorBindingElementImpl"
  },
  {
    "label": "FDatasmithVariantElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithVariantElementImpl"
  },
  {
    "label": "FDatasmithVariantSetElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithVariantSetElementImpl"
  },
  {
    "label": "FDatasmithLevelVariantSetsElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithLevelVariantSetsElementImpl"
  },
  {
    "label": "IsSubType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DatasmithDefinitions . h \" # include \" DatasmithSceneElementsImpl . h \" # include \" DatasmithVariantElements . h \" # include \" Containers / Array . h \" # include \" Templates / SharedPointer . h \" template<InterfaceType> class FDatasmithBaseVariantElementImpl : public FDatasmithElementImpl<InterfaceType> { public : using FDatasmithElementImpl<InterfaceType>::FDatasmithElementImpl ; bool)",
    "insertText": "IsSubType(const EDatasmithElementVariantSubType VariantSubType)"
  },
  {
    "label": "FDatasmithBasePropertyCaptureElementImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<InterfaceType> class FDatasmithBasePropertyCaptureElementImpl : public FDatasmithBaseVariantElementImpl<InterfaceType> { public :)",
    "insertText": "FDatasmithBasePropertyCaptureElementImpl(EDatasmithElementVariantSubType InSubType = EDatasmithElementVariantSubType::PropertyCapture) : FDatasmithBaseVariantElementImpl< InterfaceType >(nullptr, EDatasmithElementType::Variant, (uint64)InSubType) , Category(EDatasmithPropertyCategory::Undefined)"
  },
  {
    "label": "SetPropertyPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertyPath(const FString& Path)"
  },
  {
    "label": "GetPropertyPath()",
    "kind": "Method",
    "detail": "Function (PropertyPath = Path ; } const FString&)",
    "insertText": "GetPropertyPath()"
  },
  {
    "label": "GetCategory()",
    "kind": "Method",
    "detail": "Function (Category = InCategory ; } EDatasmithPropertyCategory)",
    "insertText": "GetCategory()"
  },
  {
    "label": "SetRecordedData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRecordedData(const uint8* InData, int32 InNumBytes)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "SetNumUninitialized(InNumBytes)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data.GetData(), InData, InNumBytes)"
  },
  {
    "label": "GetRecordedData()",
    "kind": "Method",
    "detail": "Function (} const TArray<uint8>&)",
    "insertText": "GetRecordedData()"
  },
  {
    "label": "SetRecordedObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRecordedObject(TWeakPtr<IDatasmithElement> InObject)"
  },
  {
    "label": "GetRecordedObject()",
    "kind": "Method",
    "detail": "Function (Object = InObject ; } TWeakPtr<IDatasmithElement>)",
    "insertText": "GetRecordedObject()"
  },
  {
    "label": "SetActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetActor(TSharedPtr<IDatasmithActorElement> InActor)"
  },
  {
    "label": "GetActor()",
    "kind": "Method",
    "detail": "Function (Actor = InActor ; } TSharedPtr<IDatasmithActorElement>)",
    "insertText": "GetActor()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PropertyCaptures .)",
    "insertText": "Add(Prop)"
  },
  {
    "label": "GetPropertyCapturesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPropertyCapturesCount()"
  },
  {
    "label": "GetPropertyCapture()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithBasePropertyCaptureElement>)",
    "insertText": "GetPropertyCapture(int32 InIndex)"
  },
  {
    "label": "RemovePropertyCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemovePropertyCapture(const TSharedRef< IDatasmithBasePropertyCaptureElement >& Prop)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (PropertyCaptures .)",
    "insertText": "Remove(Prop)"
  },
  {
    "label": "FDatasmithVariantElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TSharedPtr<IDatasmithActorElement> Actor ; TArray<TSharedRef<IDatasmithBasePropertyCaptureElement>> PropertyCaptures ; } ; class FDatasmithVariantElementImpl : public FDatasmithBaseVariantElementImpl<IDatasmithVariantElement> { public :)",
    "insertText": "FDatasmithVariantElementImpl(const TCHAR* InName) : FDatasmithBaseVariantElementImpl(InName, EDatasmithElementType::Variant, (uint64)EDatasmithElementVariantSubType::Variant)"
  },
  {
    "label": "AddActorBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddActorBinding(const TSharedRef< IDatasmithActorBindingElement >& Binding)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Bindings .)",
    "insertText": "Add(Binding)"
  },
  {
    "label": "GetActorBindingsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetActorBindingsCount()"
  },
  {
    "label": "GetActorBinding()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithActorBindingElement>)",
    "insertText": "GetActorBinding(int32 InIndex)"
  },
  {
    "label": "RemoveActorBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveActorBinding(const TSharedRef< IDatasmithActorBindingElement >& Binding)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Bindings .)",
    "insertText": "Remove(Binding)"
  },
  {
    "label": "FDatasmithVariantSetElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TArray<TSharedRef<IDatasmithActorBindingElement>> Bindings ; } ; class FDatasmithVariantSetElementImpl : public FDatasmithBaseVariantElementImpl<IDatasmithVariantSetElement> { public :)",
    "insertText": "FDatasmithVariantSetElementImpl(const TCHAR* InName) : FDatasmithBaseVariantElementImpl(InName, EDatasmithElementType::Variant, (uint64)EDatasmithElementVariantSubType::VariantSet)"
  },
  {
    "label": "AddVariant()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVariant(const TSharedRef< IDatasmithVariantElement >& Variant)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Variants .)",
    "insertText": "Add(Variant)"
  },
  {
    "label": "GetVariantsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVariantsCount()"
  },
  {
    "label": "GetVariant()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithVariantElement>)",
    "insertText": "GetVariant(int32 InIndex)"
  },
  {
    "label": "RemoveVariant()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveVariant(const TSharedRef< IDatasmithVariantElement >& Variant)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Variants .)",
    "insertText": "Remove(Variant)"
  },
  {
    "label": "FDatasmithLevelVariantSetsElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TArray<TSharedRef<IDatasmithVariantElement>> Variants ; } ; class FDatasmithLevelVariantSetsElementImpl : public FDatasmithBaseVariantElementImpl<IDatasmithLevelVariantSetsElement> { public :)",
    "insertText": "FDatasmithLevelVariantSetsElementImpl(const TCHAR* InName) : FDatasmithBaseVariantElementImpl(InName, EDatasmithElementType::Variant, (uint64)EDatasmithElementVariantSubType::LevelVariantSets)"
  },
  {
    "label": "AddVariantSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVariantSet(const TSharedRef< IDatasmithVariantSetElement >& VariantSet)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VariantSets .)",
    "insertText": "Add(VariantSet)"
  },
  {
    "label": "GetVariantSetsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVariantSetsCount()"
  },
  {
    "label": "GetVariantSet()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithVariantSetElement>)",
    "insertText": "GetVariantSet(int32 InIndex)"
  },
  {
    "label": "RemoveVariantSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveVariantSet(const TSharedRef< IDatasmithVariantSetElement >& VariantSet)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (VariantSets .)",
    "insertText": "Remove(VariantSet)"
  }
]