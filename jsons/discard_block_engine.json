[
  {
    "label": "_Engine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Engine"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Sseq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sseq"
  },
  {
    "label": "_Eng",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Eng"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_DISCARD_BLOCK_ENGINE_H # define _LIBCPP___RANDOM_DISCARD_BLOCK_ENGINE_H # include<__config> # include<__random / is_seed_sequence . h> # include<__utility / move . h> # include<climits> # include<iosfwd> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (_Engine __e_ ; int __n_ ;)",
    "insertText": "static_assert(0 < __r, \"discard_block_engine invalid parameters\")"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (public : typedef _Engine::result_type result_type ; _LIBCPP_CONSTEXPR const size_t block_size = __p ; _LIBCPP_CONSTEXPR const size_t used_block = __r ; # ifdef _LIBCPP_CXX03_LANG const result_type _Min = _Engine::_Min ; const result_type _Max = _Engine::_Max ; # else _LIBCPP_CONSTEXPR const result_type _Min =)",
    "insertText": "min()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const result_type _Max =)",
    "insertText": "max()"
  },
  {
    "label": "discard_block_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "discard_block_engine() : __n_(0)"
  },
  {
    "label": "discard_block_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "discard_block_engine(const _Engine& __e) : __e_(__e), __n_(0)"
  },
  {
    "label": "discard_block_engine()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "discard_block_engine(_Engine&& __e) : __e_(_VSTD::move(__e)), __n_(0)"
  },
  {
    "label": "discard_block_engine()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "discard_block_engine(result_type __sd) : __e_(__sd), __n_(0)"
  },
  {
    "label": "discard_block_engine()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "discard_block_engine(_Sseq& __q, typename enable_if<__is_seed_sequence<_Sseq, discard_block_engine>::value && !is_convertible<_Sseq, _Engine>::value>::type* = 0) : __e_(__q), __n_(0)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed()"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__n_ = 0 ; } _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(result_type __sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "seed(__sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__n_ = 0 ; } template<class _Sseq> _LIBCPP_INLINE_VISIBILITY enable_if<__is_seed_sequence<_Sseq,discard_block_engine>::value,void>::type)",
    "insertText": "seed(_Sseq& __q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "seed(__q)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__n_ = 0 ; } result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "discard(unsigned long long __z)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY const _Engine&)",
    "insertText": "base()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Eng,size_t _Pp,size_t _Rp> bool)",
    "insertText": "operator(const discard_block_engine<_Eng, _Pp, _Rp>& __x, const discard_block_engine<_Eng, _Pp, _Rp>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Eng,size_t _Pp,size_t _Rp> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const discard_block_engine<_Eng, _Pp, _Rp>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Eng,size_t _Pp,size_t _Rp> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, discard_block_engine<_Eng, _Pp, _Rp>& __x)"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "discard(__p - __r)"
  },
  {
    "label": "__e_()",
    "kind": "Method",
    "detail": "Function (__n_ = 0 ; } + + __n_ ; return)",
    "insertText": "__e_()"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _Ostream ; __os .)",
    "insertText": "flags(_Ostream::dec | _Ostream::left)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_Eng __e ; int __n ; __is>> __e>> __n ;)",
    "insertText": "if(!__is.fail())"
  }
]