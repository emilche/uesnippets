[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Audio { namespace ESoundFileError { enum class Type : uint8 { NONE = 0,INVALID_SOUND_FILE,INVALID_SOUND_FILE_HANDLE,BAD_ENCODING_QUALITY,FAILED_TO_LOAD_BYTE_DATA,ALREADY_OPENED,ALREADY_HAS_DATA,INVALID_DATA,FILE_DOESNT_EXIST,INVALID_INPUT_FORMAT,INVALID_CHANNEL_MAP,FAILED_TO_OPEN,FAILED_TO_SEEK,ALREADY_INITIALIZED,LOADING,INVALID_STATE,INVALID_CHUNK,UNKNOWN } ; const TCHAR*)",
    "insertText": "ToString(ESoundFileError::Type SoundFileError)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : case Type::UNKNOWN : return)",
    "insertText": "TEXT(\"UNKNOWN\")"
  },
  {
    "label": "ToStringMajor()",
    "kind": "Method",
    "detail": "Function (} } } namespace ESoundFileSeekMode { enum Type { FROM_START = 0,FROM_CURRENT = 1,FROM_END = 2,} ; } namespace ESoundFileFormat { enum Flags { WAV = 0 x010000,AIFF = 0 x020000,FLAC = 0 x170000,OGG = 0 x200000,PCM_SIGNED_8 = 0 x0001,PCM_SIGNED_16 = 0 x0002,PCM_SIGNED_24 = 0 x0003,PCM_SIGNED_32 = 0 x0004,PCM_UNSIGNED_8 = 0 x0005,PCM_FLOAT = 0 x0006,PCM_DOUBLE = 0 x0007,MU_LAW = 0 x0010,A_LAW = 0 x0011,IMA_ADPCM = 0 x0012,MS_ADPCM = 0 x0013,GSM_610 = 0 x0020,G721_32 = 0 x0030,G723_24 = 0 x0031,G723_40 = 0 x0032,DWVW_12 = 0 x0040,DMVW_16 = 0 x0041,DMVW_24 = 0 x0042,DMVW_N = 0 x0043,VORBIS = 0 x0060,ENDIAN_FILE = 0 x00000000,ENDIAN_LITTLE = 0 x10000000,ENDIAN_BIG = 0 x20000000,ENDIAN_CPU = 0 x30000000,MINOR_FORMAT_MASK = 0 x0000FFFF,MAJOR_FORMAT_MASK = 0 x0FFF0000,ENDIAN_MASK = 0 x30000000,} ; const TCHAR*)",
    "insertText": "ToStringMajor(int32 FormatFlags)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"INVALID\")"
  },
  {
    "label": "ToStringMinor()",
    "kind": "Method",
    "detail": "Function (} } const TCHAR*)",
    "insertText": "ToStringMinor(int32 FormatFlags)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } } namespace ESoundFileChannelMap { enum class Type : uint32 { INVALID = 0,MONO,LEFT,RIGHT,CENTER,FRONT_LEFT,FRONT_RIGHT,FRONT_CENTER,BACK_CENTER,BACK_LEFT,BACK_RIGHT,LFE,LEFT_CENTER,RIGHT_CENTER,SIDE_LEFT,SIDE_RIGHT,TOP_CENTER,TOP_FRONT_LEFT,TOP_FRONT_RIGHT,TOP_FRONT_CENTER,TOP_BACK_LEFT,TOP_BACK_RIGHT,TOP_BACK_CENTER,} ; const TCHAR*)",
    "insertText": "ToString(ESoundFileChannelMap::Type ChannelMap)"
  }
]