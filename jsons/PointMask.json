[
  {
    "label": "NullDeformer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NullDeformer"
  },
  {
    "label": "DeformerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeformerTraits"
  },
  {
    "label": "GridCombinerOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridCombinerOp"
  },
  {
    "label": "PointsToScalarOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointsToScalarOp"
  },
  {
    "label": "PointsToTransformedScalarOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointsToTransformedScalarOp"
  },
  {
    "label": "convertPointsToMask()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_POINTS_POINT_MASK_HAS_BEEN_INCLUDED # define OPENVDB_POINTS_POINT_MASK_HAS_BEEN_INCLUDED # include<openvdb / openvdb . h> # include<openvdb / tools / ValueTransformer . h> # include \" PointDataGrid . h \" # include \" IndexFilter . h \" # include<tbb / combinable . h> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace points { template<PointDataGridT,MaskT = PointDataGridT::template ValueConverter<bool>::Type,FilterT = NullFilter> std::enable_if<std::is_same<MaskT::ValueType,bool>::value,MaskT::Ptr>::type)",
    "insertText": "convertPointsToMask(const PointDataGridT& grid, const FilterT& filter = NullFilter(), bool threaded = true)"
  },
  {
    "label": "convertPointsToMask()",
    "kind": "Method",
    "detail": "Function (template<PointDataGridT,MaskT = PointDataGridT::template ValueConverter<bool>::Type,FilterT = NullFilter> std::enable_if<std::is_same<MaskT::ValueType,bool>::value,MaskT::Ptr>::type)",
    "insertText": "convertPointsToMask(const PointDataGridT& grid, const openvdb::math::Transform& transform, const FilterT& filter = NullFilter(), bool threaded = true)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (struct NullDeformer { template<LeafT> void)",
    "insertText": "reset(LeafT&, size_t = 0)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} template<IterT> void)",
    "insertText": "apply(Vec3d&, IterT&)"
  },
  {
    "label": "voxelSum()",
    "kind": "Method",
    "detail": "Function (} } ; template<DeformerT> struct DeformerTraits { const bool IndexSpace = false ; } ; namespace point_mask_internal { template<LeafT> void)",
    "insertText": "voxelSum(LeafT& leaf, const Index offset, const typename LeafT::ValueType& value)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (leaf .)",
    "insertText": "modifyValue(offset, tools::valxform::SumOp<typename LeafT::ValueType>(value))"
  },
  {
    "label": "voxelSum()",
    "kind": "Method",
    "detail": "Function (} template<T,Index Log2Dim> void)",
    "insertText": "voxelSum(PointDataLeafNode<T, Log2Dim>& leaf, const Index offset, const typename PointDataLeafNode<T, Log2Dim>::ValueType& value)"
  },
  {
    "label": "setOffsetOn()",
    "kind": "Method",
    "detail": "Function (leaf .)",
    "insertText": "setOffsetOn(offset, leaf.getValue(offset) + value)"
  },
  {
    "label": "GridCombinerOp()",
    "kind": "Method",
    "detail": "Function (} template<GridT> struct GridCombinerOp { using CombinableT = tbb::combinable<GridT> ; using TreeT = GridT::TreeType ; using LeafT = TreeT::LeafNodeType ; using ValueType = TreeT::ValueType ; using SumOp = tools::valxform::SumOp<TreeT::ValueType> ;)",
    "insertText": "GridCombinerOp(GridT& grid) : mTree(grid.tree())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const GridT& grid)"
  },
  {
    "label": "probeLeaf()",
    "kind": "Method",
    "detail": "Function (auto* newLeaf = mTree .)",
    "insertText": "probeLeaf(leaf->origin())"
  },
  {
    "label": "GridT()",
    "kind": "Method",
    "detail": "Function (auto& tree = const_cast<)",
    "insertText": "GridT(grid).tree()"
  },
  {
    "label": "addLeaf()",
    "kind": "Method",
    "detail": "Function (mTree .)",
    "insertText": "addLeaf(tree.template stealNode<LeafT>(leaf->origin(), zeroVal<ValueType>(), false))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(auto iter = leaf->cbeginValueOn(); iter; ++iter)"
  },
  {
    "label": "voxelSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "voxelSum(*newLeaf, iter.offset(), ValueType(*iter))"
  },
  {
    "label": "PointsToScalarOp()",
    "kind": "Method",
    "detail": "Function (} } } } private : TreeT& mTree ; } ; template<GridT,PointDataGridT,FilterT> struct PointsToScalarOp { using LeafT = GridT::TreeType::LeafNodeType ; using ValueT = LeafT::ValueType ;)",
    "insertText": "PointsToScalarOp(const PointDataGridT& grid, const FilterT& filter) : mPointDataAccessor(grid.getConstAccessor()) , mFilter(filter)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(LeafT& leaf, size_t)"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const auto* const pointLeaf = mPointDataAccessor .)",
    "insertText": "probeConstLeaf(leaf.origin())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pointLeaf)"
  },
  {
    "label": "iterCount()",
    "kind": "Method",
    "detail": "Function (const Index64 count =)",
    "insertText": "iterCount(pointLeaf->beginIndexVoxel(value.getCoord(), mFilter))"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (value .)",
    "insertText": "setValue(ValueT(count))"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (} else { value .)",
    "insertText": "setValueOn(false)"
  },
  {
    "label": "PointsToTransformedScalarOp()",
    "kind": "Method",
    "detail": "Function (} } } private : const PointDataGridT::ConstAccessor mPointDataAccessor ; const FilterT& mFilter ; } ; template<GridT,PointDataGridT,FilterT,DeformerT> struct PointsToTransformedScalarOp { using PointDataLeafT = PointDataGridT::TreeType::LeafNodeType ; using ValueT = GridT::TreeType::ValueType ; using HandleT = AttributeHandle<Vec3f> ; using CombinableT = GridCombinerOp<GridT>::CombinableT ;)",
    "insertText": "PointsToTransformedScalarOp(const math::Transform& targetTransform, const math::Transform& sourceTransform, const FilterT& filter, const DeformerT& deformer, CombinableT& combinable) : mTargetTransform(targetTransform) , mSourceTransform(sourceTransform) , mFilter(filter) , mDeformer(deformer) , mCombinable(combinable)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const PointDataLeafT& leaf, size_t idx)"
  },
  {
    "label": "deformer()",
    "kind": "Method",
    "detail": "Function (DeformerT)",
    "insertText": "deformer(mDeformer)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (auto& grid = mCombinable .)",
    "insertText": "local()"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (auto& countTree = grid .)",
    "insertText": "tree()"
  },
  {
    "label": "accessor()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<GridT::TreeType>)",
    "insertText": "accessor(countTree)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (deformer .)",
    "insertText": "reset(leaf, idx)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (auto handle =)",
    "insertText": "create(leaf.constAttributeArray(\"P\"))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Vec3d position = handle ->)",
    "insertText": "get(*iter) + iter.getCoord().asVec3d()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (deformer . template apply<)",
    "insertText": "decltype(iter)>(position, iter)"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (position = mSourceTransform .)",
    "insertText": "indexToWorld(position)"
  },
  {
    "label": "worldToIndexCellCentered()",
    "kind": "Method",
    "detail": "Function (} const Coord ijk = mTargetTransform .)",
    "insertText": "worldToIndexCellCentered(position)"
  },
  {
    "label": "touchLeaf()",
    "kind": "Method",
    "detail": "Function (auto* newLeaf = accessor .)",
    "insertText": "touchLeaf(ijk)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(newLeaf)"
  },
  {
    "label": "voxelSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "voxelSum(*newLeaf, newLeaf->coordToOffset(ijk), ValueT(1))"
  },
  {
    "label": "convertPointsToScalar()",
    "kind": "Method",
    "detail": "Function (} } private : const openvdb::math::Transform& mTargetTransform ; const openvdb::math::Transform& mSourceTransform ; const FilterT& mFilter ; const DeformerT& mDeformer ; CombinableT& mCombinable ; } ; template<GridT,PointDataGridT,FilterT> GridT::Ptr)",
    "insertText": "convertPointsToScalar(const PointDataGridT& points, const FilterT& filter, bool threaded = true)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (using point_mask_internal::PointsToScalarOp ; using GridTreeT = GridT::TreeType ; using ValueT = GridTreeT::ValueType ; GridTreeT::Ptr)",
    "insertText": "tree(new GridTreeT(points.constTree(), false, openvdb::TopologyCopy()))"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (GridT::Ptr grid =)",
    "insertText": "create(tree)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setTransform(points.transform().copy())"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<GridTreeT>)",
    "insertText": "leafManager(*tree)"
  },
  {
    "label": "pointsToScalarOp()",
    "kind": "Method",
    "detail": "Function (NullFilter nullFilter ; PointsToScalarOp<GridT,PointDataGridT,NullFilter>)",
    "insertText": "pointsToScalarOp(points, nullFilter)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafManager .)",
    "insertText": "foreach(pointsToScalarOp, threaded)"
  },
  {
    "label": "pointsToScalarOp()",
    "kind": "Method",
    "detail": "Function (} else { PointsToScalarOp<GridT,PointDataGridT,FilterT>)",
    "insertText": "pointsToScalarOp(points, filter)"
  },
  {
    "label": "convertPointsToScalar()",
    "kind": "Method",
    "detail": "Function (} return grid ; } template<GridT,PointDataGridT,FilterT,DeformerT> GridT::Ptr)",
    "insertText": "convertPointsToScalar(PointDataGridT& points, const openvdb::math::Transform& transform, const FilterT& filter, const DeformerT& deformer, bool threaded = true)"
  },
  {
    "label": "constTransform()",
    "kind": "Method",
    "detail": "Function (using point_mask_internal::PointsToTransformedScalarOp ; using point_mask_internal::GridCombinerOp ; using CombinerOpT = GridCombinerOp<GridT> ; using CombinableT = GridCombinerOp<GridT>::CombinableT ; const openvdb::math::Transform& pointsTransform = points .)",
    "insertText": "constTransform()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} GridT::Ptr grid =)",
    "insertText": "create()"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "setTransform(transform.copy())"
  },
  {
    "label": "leafManager()",
    "kind": "Method",
    "detail": "Function (CombinableT combiner ; tree::LeafManager<PointDataGridT::TreeType>)",
    "insertText": "leafManager(points.tree())"
  },
  {
    "label": "pointsToScalarOp()",
    "kind": "Method",
    "detail": "Function (NullFilter nullFilter ; PointsToTransformedScalarOp<GridT,PointDataGridT,NullFilter,DeformerT>)",
    "insertText": "pointsToScalarOp(transform, pointsTransform, nullFilter, deformer, combiner)"
  },
  {
    "label": "pointsToScalarOp()",
    "kind": "Method",
    "detail": "Function (} else { PointsToTransformedScalarOp<GridT,PointDataGridT,FilterT,DeformerT>)",
    "insertText": "pointsToScalarOp(transform, pointsTransform, filter, deformer, combiner)"
  },
  {
    "label": "combineOp()",
    "kind": "Method",
    "detail": "Function (} CombinerOpT)",
    "insertText": "combineOp(*grid)"
  },
  {
    "label": "combine_each()",
    "kind": "Method",
    "detail": "Function (combiner .)",
    "insertText": "combine_each(combineOp)"
  },
  {
    "label": "convertPointsToMask()",
    "kind": "Method",
    "detail": "Function (} template<PointDataGridT,MaskT,FilterT> std::enable_if<std::is_same<MaskT::ValueType,bool>::value,MaskT::Ptr>::type)",
    "insertText": "convertPointsToMask(const PointDataGridT& points, const openvdb::math::Transform& transform, const FilterT& filter, bool threaded)"
  },
  {
    "label": "NonConstGridType()",
    "kind": "Method",
    "detail": "Function (using AdapterT = TreeAdapter<PointDataGridT::TreeType> ; auto& nonConstPoints = const_cast<)",
    "insertText": "NonConstGridType(points)"
  },
  {
    "label": "MaskT()",
    "kind": "Method",
    "detail": "Function (NullDeformer deformer ; return point_mask_internal::convertPointsToScalar<)",
    "insertText": "MaskT(nonConstPoints, transform, filter, deformer, threaded)"
  }
]