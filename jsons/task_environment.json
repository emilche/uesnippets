[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "FileDescriptorWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileDescriptorWatcher"
  },
  {
    "label": "SimpleTaskExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTaskExecutor"
  },
  {
    "label": "TickClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TickClock"
  },
  {
    "label": "ScopedTimeClockOverrides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTimeClockOverrides"
  },
  {
    "label": "TaskEnvironment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskEnvironment"
  },
  {
    "label": "SubclassCreatesDefaultTaskRunner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SubclassCreatesDefaultTaskRunner"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ValidTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValidTraits"
  },
  {
    "label": "CheckArgumentsAreValid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckArgumentsAreValid"
  },
  {
    "label": "TestTaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestTaskTracker"
  },
  {
    "label": "DestructionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DestructionObserver"
  },
  {
    "label": "ParallelExecutionFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParallelExecutionFence"
  },
  {
    "label": "MockTimeDomain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockTimeDomain"
  },
  {
    "label": "SingleThreadTaskEnvironment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SingleThreadTaskEnvironment"
  },
  {
    "label": "ValidTraits()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TASK_ENVIRONMENT_H_ # define BASE_TEST_TASK_ENVIRONMENT_H_ # include<memory> # include \" base / compiler_specific . h \" # include \" base / memory / ref_counted . h \" # include \" base / observer_list_types . h \" # include \" base / task / lazy_thread_pool_task_runner . h \" # include \" base / task / sequence_manager / sequence_manager . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / test / scoped_run_loop_timeout . h \" # include \" base / threading / thread_checker . h \" # include \" base / time / time . h \" # include \" base / traits_bag . h \" # include \" build / build_config . h \" namespace base { class Clock ; class FileDescriptorWatcher ; class SimpleTaskExecutor ; class TickClock ; namespace subtle { class ScopedTimeClockOverrides ; } namespace test { class TaskEnvironment { protected : struct SubclassCreatesDefaultTaskRunner { } ; public : enum class TimeSource { SYSTEM_TIME,MOCK_TIME,DEFAULT = SYSTEM_TIME } ; enum class MainThreadType { DEFAULT,UI,IO,} ; enum class ThreadPoolExecutionMode { QUEUED,ASYNC,DEFAULT = ASYNC } ; enum class ThreadingMode { MULTIPLE_THREADS,MAIN_THREAD_ONLY,DEFAULT = MULTIPLE_THREADS } ; enum class ThreadPoolCOMEnvironment { NONE,COM_MTA,DEFAULT = COM_MTA,} ; struct ValidTraits {)",
    "insertText": "ValidTraits(TimeSource)"
  },
  {
    "label": "ValidTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTraits(MainThreadType)"
  },
  {
    "label": "ValidTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTraits(ThreadPoolExecutionMode)"
  },
  {
    "label": "ValidTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTraits(SubclassCreatesDefaultTaskRunner)"
  },
  {
    "label": "ValidTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTraits(ThreadingMode)"
  },
  {
    "label": "ValidTraits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidTraits(ThreadPoolCOMEnvironment)"
  },
  {
    "label": "TaskEnvironment()",
    "kind": "Method",
    "detail": "Function (} ; template<. . . TaskEnvironmentTraits,class CheckArgumentsAreValid = std::enable_if_t<trait_helpers::AreValidTraits<ValidTraits,TaskEnvironmentTraits . . .>::value>> NOINLINE)",
    "insertText": "TaskEnvironment(TaskEnvironmentTraits... traits) : TaskEnvironment( trait_helpers::GetEnum<TimeSource, TimeSource::DEFAULT>(traits...), trait_helpers::GetEnum<MainThreadType, MainThreadType::DEFAULT>( traits...), trait_helpers::GetEnum<ThreadPoolExecutionMode, ThreadPoolExecutionMode::DEFAULT>(traits...), trait_helpers::GetEnum<ThreadingMode, ThreadingMode::DEFAULT>( traits...), trait_helpers::GetEnum<ThreadPoolCOMEnvironment, ThreadPoolCOMEnvironment::DEFAULT>( traits...), trait_helpers::HasTrait<SubclassCreatesDefaultTaskRunner, TaskEnvironmentTraits...>(), trait_helpers::NotATraitTag())"
  },
  {
    "label": "TaskEnvironment()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TaskEnvironment(const TaskEnvironment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TaskEnvironment&)",
    "insertText": "operator(const TaskEnvironment&)"
  },
  {
    "label": "TaskEnvironment()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskEnvironment()"
  },
  {
    "label": "GetMainThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<base::SingleThreadTaskRunner>)",
    "insertText": "GetMainThreadTaskRunner()"
  },
  {
    "label": "MainThreadIsIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MainThreadIsIdle()"
  },
  {
    "label": "RunUntilIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunUntilIdle()"
  },
  {
    "label": "FastForwardBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastForwardBy(TimeDelta delta)"
  },
  {
    "label": "FastForwardUntilNoTasksRemain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastForwardUntilNoTasksRemain()"
  },
  {
    "label": "AdvanceClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceClock(TimeDelta delta)"
  },
  {
    "label": "GetMockTickClock()",
    "kind": "Method",
    "detail": "Function (const TickClock*)",
    "insertText": "GetMockTickClock()"
  },
  {
    "label": "GetMockClock()",
    "kind": "Method",
    "detail": "Function (const Clock*)",
    "insertText": "GetMockClock()"
  },
  {
    "label": "NowTicks()",
    "kind": "Method",
    "detail": "Function (base::TimeTicks)",
    "insertText": "NowTicks()"
  },
  {
    "label": "GetPendingMainThreadTaskCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPendingMainThreadTaskCount()"
  },
  {
    "label": "NextMainThreadPendingTaskDelay()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "NextMainThreadPendingTaskDelay()"
  },
  {
    "label": "NextTaskIsDelayed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NextTaskIsDelayed()"
  },
  {
    "label": "DescribeCurrentTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeCurrentTasks()"
  },
  {
    "label": "DetachFromThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromThread()"
  },
  {
    "label": "CreateThreadPool()",
    "kind": "Method",
    "detail": "Function (class TestTaskTracker ; TestTaskTracker*)",
    "insertText": "CreateThreadPool()"
  },
  {
    "label": "DestructionObserver()",
    "kind": "Method",
    "detail": "Function (class DestructionObserver : public CheckedObserver { public :)",
    "insertText": "DestructionObserver()"
  },
  {
    "label": "DestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructionObserver(const DestructionObserver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DestructionObserver&)",
    "insertText": "operator(const DestructionObserver&)"
  },
  {
    "label": "WillDestroyCurrentTaskEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillDestroyCurrentTaskEnvironment()"
  },
  {
    "label": "AddDestructionObserver()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddDestructionObserver(DestructionObserver* observer)"
  },
  {
    "label": "RemoveDestructionObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDestructionObserver(DestructionObserver* observer)"
  },
  {
    "label": "ParallelExecutionFence()",
    "kind": "Method",
    "detail": "Function (class ParallelExecutionFence { public :)",
    "insertText": "ParallelExecutionFence(const char* error_message = \"\")"
  },
  {
    "label": "ParallelExecutionFence()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ParallelExecutionFence()"
  },
  {
    "label": "ParallelExecutionFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelExecutionFence(const ParallelExecutionFence&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ParallelExecutionFence&)",
    "insertText": "operator(const ParallelExecutionFence& other)"
  },
  {
    "label": "TaskEnvironment()",
    "kind": "Method",
    "detail": "Function (private : bool previously_allowed_to_run_ = false ; } ; int kNumForegroundThreadPoolThreads = 4 ; protected :)",
    "insertText": "TaskEnvironment(TaskEnvironment&& other)"
  },
  {
    "label": "main_thread_type()",
    "kind": "Method",
    "detail": "Function (MainThreadType)",
    "insertText": "main_thread_type()"
  },
  {
    "label": "sequence_manager()",
    "kind": "Method",
    "detail": "Function (sequence_manager::SequenceManager*)",
    "insertText": "sequence_manager()"
  },
  {
    "label": "DeferredInitFromSubclass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredInitFromSubclass(scoped_refptr<base::SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "DestroyTaskEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyTaskEnvironment()"
  },
  {
    "label": "InitializeThreadPool()",
    "kind": "Method",
    "detail": "Function (private : class MockTimeDomain ; void)",
    "insertText": "InitializeThreadPool()"
  },
  {
    "label": "DestroyThreadPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyThreadPool()"
  },
  {
    "label": "CompleteInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteInitialization()"
  },
  {
    "label": "TaskEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TaskEnvironment(TimeSource time_source, MainThreadType main_thread_type, ThreadPoolExecutionMode thread_pool_execution_mode, ThreadingMode threading_mode, ThreadPoolCOMEnvironment thread_pool_com_environment, bool subclass_creates_default_taskrunner, trait_helpers::NotATraitTag tag)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (const MainThreadType main_thread_type_ ; const ThreadPoolExecutionMode thread_pool_execution_mode_ ; const ThreadingMode threading_mode_ ; const ThreadPoolCOMEnvironment thread_pool_com_environment_ ; const bool subclass_creates_default_taskrunner_ ; std::unique_ptr<sequence_manager::SequenceManager> sequence_manager_ ; std::unique_ptr<MockTimeDomain> mock_time_domain_ ; std::unique_ptr<subtle::ScopedTimeClockOverrides> time_overrides_ ; scoped_refptr<sequence_manager::TaskQueue> task_queue_ ; scoped_refptr<base::SingleThreadTaskRunner> task_runner_ ; std::unique_ptr<Clock> mock_clock_ ; # if)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# endif TestTaskTracker* task_tracker_ = nullptr ; std::unique_ptr<base::internal::ScopedLazyTaskRunnerListForTesting> scoped_lazy_task_runner_list_for_testing_ ; std::unique_ptr<ScopedRunLoopTimeout> run_loop_timeout_ ; std::unique_ptr<bool> owns_instance_ = std::make_unique<)",
    "insertText": "bool(true)"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SimpleTaskExecutor> simple_task_executor_ ;)",
    "insertText": "THREAD_CHECKER(main_thread_checker_)"
  },
  {
    "label": "SingleThreadTaskEnvironment()",
    "kind": "Method",
    "detail": "Function (} ; class SingleThreadTaskEnvironment : public TaskEnvironment { public : template<class . . . ArgTypes>)",
    "insertText": "SingleThreadTaskEnvironment(ArgTypes... args) : TaskEnvironment(ThreadingMode::MAIN_THREAD_ONLY, args...)"
  }
]