[
  {
    "label": "TFixedCircularBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFixedCircularBuffer"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" namespace UE::Insights { template<T,int32 Size = 6 4> struct TFixedCircularBuffer { T Buffer [ Size ] ; int32 BufferStartOffset = 0 ; int32 BufferLength = 0 ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (BufferStartOffset = 0 ; BufferLength = 0 ; } void)",
    "insertText": "AddValue(const T Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Buffer [ BufferStartOffset ] = Value ; BufferStartOffset + + ;)",
    "insertText": "if(BufferStartOffset == Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BufferStartOffset = 0 ; })",
    "insertText": "if(BufferLength < Size)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (BufferLength + + ; } } const T)",
    "insertText": "GetValue(const int32 RecentIndex)"
  },
  {
    "label": "ComputeAverage()",
    "kind": "Method",
    "detail": "Function (} const T)",
    "insertText": "ComputeAverage()"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (Total + =)",
    "insertText": "Buffer(BufferStartOffset + Size - RecentIndex - 1)"
  }
]