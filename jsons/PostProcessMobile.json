[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FMobileBloomSetupInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileBloomSetupInputs"
  },
  {
    "label": "FMobileBloomSetupOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileBloomSetupOutputs"
  },
  {
    "label": "FMobileDofNearInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDofNearInputs"
  },
  {
    "label": "FMobileDofNearOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDofNearOutputs"
  },
  {
    "label": "FMobileDofDownInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDofDownInputs"
  },
  {
    "label": "FMobileDofDownOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDofDownOutputs"
  },
  {
    "label": "FMobileDofBlurInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDofBlurInputs"
  },
  {
    "label": "FMobileDofBlurOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileDofBlurOutputs"
  },
  {
    "label": "FMobileIntegrateDofInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileIntegrateDofInputs"
  },
  {
    "label": "FMobileBloomDownInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileBloomDownInputs"
  },
  {
    "label": "FMobileBloomUpInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileBloomUpInputs"
  },
  {
    "label": "FMobileSunMaskInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileSunMaskInputs"
  },
  {
    "label": "FMobileSunMaskOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileSunMaskOutputs"
  },
  {
    "label": "FMobileSunAlphaInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileSunAlphaInputs"
  },
  {
    "label": "FMobileSunBlurInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileSunBlurInputs"
  },
  {
    "label": "FMobileSunMergeInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileSunMergeInputs"
  },
  {
    "label": "FMobileEyeAdaptationSetupInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileEyeAdaptationSetupInputs"
  },
  {
    "label": "FMobileEyeAdaptationSetupOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileEyeAdaptationSetupOutputs"
  },
  {
    "label": "FMobileEyeAdaptationInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileEyeAdaptationInputs"
  },
  {
    "label": "FMSAADecodeAndCopyRectPS_Mobile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMSAADecodeAndCopyRectPS_Mobile"
  },
  {
    "label": "GetMobileDepthOfFieldScale()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" PostProcessEyeAdaptation . h \" # include \" PostProcess / PostProcessTonemap . h \" # include \" PostProcess / PostProcessUpscale . h \" class FViewInfo ; float)",
    "insertText": "GetMobileDepthOfFieldScale(const FViewInfo& View)"
  },
  {
    "label": "AddMobileBloomSetupPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileBloomSetupInputs { FScreenPassTexture SceneColor ; FScreenPassTexture SunShaftAndDof ; bool bUseBloom = false ; bool bUseSun = false ; bool bUseDof = false ; bool bUseEyeAdaptation = false ; bool bUseMetalMSAAHDRDecode = false ; } ; struct FMobileBloomSetupOutputs { FScreenPassTexture Bloom ; FScreenPassTexture SunShaftAndDof ; FScreenPassTexture EyeAdaptation ; } ; FMobileBloomSetupOutputs)",
    "insertText": "AddMobileBloomSetupPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FEyeAdaptationParameters& EyeAdaptationParameters, const FMobileBloomSetupInputs& Inputs)"
  },
  {
    "label": "AddMobileDofNearPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileDofNearInputs { FScreenPassTexture BloomSetup_SunShaftAndDof ; bool bUseSun = false ; } ; struct FMobileDofNearOutputs { FScreenPassTexture DofNear ; } ; FMobileDofNearOutputs)",
    "insertText": "AddMobileDofNearPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileDofNearInputs& Inputs)"
  },
  {
    "label": "AddMobileDofDownPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileDofDownInputs { FScreenPassTexture SceneColor ; FScreenPassTexture SunShaftAndDof ; FScreenPassTexture DofNear ; bool bUseSun = false ; } ; struct FMobileDofDownOutputs { FScreenPassTexture DofDown ; } ; FMobileDofDownOutputs)",
    "insertText": "AddMobileDofDownPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileDofDownInputs& Inputs)"
  },
  {
    "label": "AddMobileDofBlurPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileDofBlurInputs { FScreenPassTexture DofDown ; FScreenPassTexture DofNear ; } ; struct FMobileDofBlurOutputs { FScreenPassTexture DofBlur ; } ; FMobileDofBlurOutputs)",
    "insertText": "AddMobileDofBlurPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileDofBlurInputs& Inputs)"
  },
  {
    "label": "AddMobileIntegrateDofPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileIntegrateDofInputs { FScreenPassTexture SceneColor ; FScreenPassTexture DofBlur ; FScreenPassTexture SunShaftAndDof ; } ; FScreenPassTexture)",
    "insertText": "AddMobileIntegrateDofPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileIntegrateDofInputs& Inputs)"
  },
  {
    "label": "AddMobileBloomDownPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileBloomDownInputs { FScreenPassTexture BloomDownSource ; float BloomDownScale = 0 . 6 6 f* 4 . 0 f ; } ; FScreenPassTexture)",
    "insertText": "AddMobileBloomDownPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileBloomDownInputs& Inputs)"
  },
  {
    "label": "AddMobileBloomUpPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileBloomUpInputs { FScreenPassTexture BloomUpSourceA ; FScreenPassTexture BloomUpSourceB ; FVector2D ScaleAB ; FVector4f TintA ; FVector4f TintB ; } ; FScreenPassTexture)",
    "insertText": "AddMobileBloomUpPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileBloomUpInputs& Inputs)"
  },
  {
    "label": "AddMobileSunMaskPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileSunMaskInputs { FScreenPassTexture SceneColor ; TRDGUniformBufferRef<FMobileSceneTextureUniformParameters> SceneTextures = nullptr ; bool bUseSun = false ; bool bUseDof = false ; bool bUseDepthTexture = false ; bool bUseMetalMSAAHDRDecode = false ; } ; struct FMobileSunMaskOutputs { FScreenPassTexture SunMask ; FScreenPassTexture SceneColor ; } ; FMobileSunMaskOutputs)",
    "insertText": "AddMobileSunMaskPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileSunMaskInputs& Inputs)"
  },
  {
    "label": "AddMobileSunAlphaPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileSunAlphaInputs { FScreenPassTexture BloomSetup_SunShaftAndDof ; bool bUseMobileDof ; } ; FScreenPassTexture)",
    "insertText": "AddMobileSunAlphaPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileSunAlphaInputs& Inputs)"
  },
  {
    "label": "AddMobileSunBlurPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileSunBlurInputs { FScreenPassTexture SunAlpha ; } ; FScreenPassTexture)",
    "insertText": "AddMobileSunBlurPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileSunBlurInputs& Inputs)"
  },
  {
    "label": "AddMobileSunMergePass()",
    "kind": "Method",
    "detail": "Function (struct FMobileSunMergeInputs { FScreenPassTexture SunBlur ; FScreenPassTexture BloomSetup_Bloom ; FScreenPassTexture BloomUp ; bool bUseBloom ; bool bUseSun ; } ; FScreenPassTexture)",
    "insertText": "AddMobileSunMergePass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FMobileSunMergeInputs& Inputs)"
  },
  {
    "label": "AddMobileEyeAdaptationSetupPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileEyeAdaptationSetupInputs { FScreenPassTexture BloomSetup_EyeAdaptation ; bool bUseBasicEyeAdaptation ; bool bUseHistogramEyeAdaptation ; } ; struct FMobileEyeAdaptationSetupOutputs { FRDGBufferSRVRef EyeAdaptationSetupSRV ; } ; FMobileEyeAdaptationSetupOutputs)",
    "insertText": "AddMobileEyeAdaptationSetupPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FEyeAdaptationParameters& EyeAdaptationParameters, const FMobileEyeAdaptationSetupInputs& Inputs)"
  },
  {
    "label": "AddMobileEyeAdaptationPass()",
    "kind": "Method",
    "detail": "Function (struct FMobileEyeAdaptationInputs { FRDGBufferSRVRef EyeAdaptationSetupSRV ; FRDGBufferRef EyeAdaptationBuffer ; bool bUseBasicEyeAdaptation ; bool bUseHistogramEyeAdaptation ; } ; void)",
    "insertText": "AddMobileEyeAdaptationPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FEyeAdaptationParameters& EyeAdaptationParameters, const FMobileEyeAdaptationInputs& Inputs)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FMSAADecodeAndCopyRectPS_Mobile : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FMSAADecodeAndCopyRectPS_Mobile)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FMSAADecodeAndCopyRectPS_Mobile, FGlobalShader)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, InputTexture) SHADER_PARAMETER_SAMPLER(SamplerState, InputSampler) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "AddEASUPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddEASUPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const ISpatialUpscaler::FInputs& PassInputs)"
  },
  {
    "label": "AddCASPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddCASPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const ISpatialUpscaler::FInputs& PassInputs)"
  }
]