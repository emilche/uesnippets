[
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlowTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlowTask"
  },
  {
    "label": "FSlowTask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" class FFeedbackContext ; enum class ESlowTaskVisibility { Default,ForceVisible,Important,Invisible,} ; struct FSlowTask { FText DefaultMessage ; FText FrameMessage ; float TotalAmountOfWork ; float CompletedWork ; float CurrentFrameScope ; ESlowTaskVisibility Visibility ; double StartTime ; TOptional<float> OpenDialogThreshold ; private : bool bEnabled ; bool bCreatedDialog ; FFeedbackContext& Context ; bool bDelayedDialogShowCancelButton : 1 ; bool bDelayedDialogAllowInPIE : 1 ; bool bSkipRecursiveDialogCreation : 1 ; uint64 RegionId ;)",
    "insertText": "FSlowTask(const FSlowTask&)"
  },
  {
    "label": "ForceRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRefresh(FFeedbackContext& Context)"
  },
  {
    "label": "MakeDialogIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeDialogIfNeeded()"
  },
  {
    "label": "MakeRecursiveDialogIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeRecursiveDialogIfNeeded()"
  },
  {
    "label": "ShouldCreateThrottledSlowTask()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCreateThrottledSlowTask()"
  },
  {
    "label": "FSlowTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlowTask(float InAmountOfWork, const FText& InDefaultMessage = FText(), bool bInEnabled = true, FFeedbackContext& InContext = *GWarn)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "MakeDialogDelayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDialogDelayed(float Threshold, bool bShowCancelButton = false, bool bAllowInPIE = false)"
  },
  {
    "label": "MakeDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeDialog(bool bShowCancelButton = false, bool bAllowInPIE = false)"
  },
  {
    "label": "EnterProgressFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterProgressFrame(float ExpectedWorkThisFrame = 1.f, const FText& Text = FText())"
  },
  {
    "label": "TickProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickProgress()"
  },
  {
    "label": "ForceRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRefresh()"
  },
  {
    "label": "GetCurrentMessage()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetCurrentMessage()"
  },
  {
    "label": "ShouldCancel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCancel()"
  }
]