[
  {
    "label": "FCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCulture"
  },
  {
    "label": "FICUInternationalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FICUInternationalization"
  },
  {
    "label": "FLegacyInternationalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacyInternationalization"
  },
  {
    "label": "ICustomCulture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomCulture"
  },
  {
    "label": "FInternationalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternationalization"
  },
  {
    "label": "FTextChronoFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextChronoFormatter"
  },
  {
    "label": "FCultureStateSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCultureStateSnapshot"
  },
  {
    "label": "FLazySingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLazySingleton"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / CulturePointer . h \" # include \" Internationalization / LocTesting . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" Templates / UniqueObj . h \" # include \" UObject / NameTypes . h \" # define LOC_DEFINE_REGION class FCulture ; class FICUInternationalization ; class FLegacyInternationalization ; class ICustomCulture ; class FInternationalization { class FTextChronoFormatter ; public : FInternationalization&)",
    "insertText": "Get()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "SetCurrentCulture()",
    "kind": "Method",
    "detail": "Function (} struct FCultureStateSnapshot { FString Language ; FString Locale ; TArray<TTuple<FName,FString>> AssetGroups ; } ; bool)",
    "insertText": "SetCurrentCulture(const FString& InCultureName)"
  },
  {
    "label": "GetCurrentCulture()",
    "kind": "Method",
    "detail": "Function (FCultureRef)",
    "insertText": "GetCurrentCulture()"
  },
  {
    "label": "SetCurrentLanguage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetCurrentLanguage(const FString& InCultureName)"
  },
  {
    "label": "GetCurrentLanguage()",
    "kind": "Method",
    "detail": "Function (FCultureRef)",
    "insertText": "GetCurrentLanguage()"
  },
  {
    "label": "SetCurrentLocale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetCurrentLocale(const FString& InCultureName)"
  },
  {
    "label": "GetCurrentLocale()",
    "kind": "Method",
    "detail": "Function (FCultureRef)",
    "insertText": "GetCurrentLocale()"
  },
  {
    "label": "SetCurrentLanguageAndLocale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetCurrentLanguageAndLocale(const FString& InCultureName)"
  },
  {
    "label": "SetCurrentAssetGroupCulture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCurrentAssetGroupCulture(const FName& InAssetGroupName, const FString& InCultureName)"
  },
  {
    "label": "GetCurrentAssetGroupCulture()",
    "kind": "Method",
    "detail": "Function (FCultureRef)",
    "insertText": "GetCurrentAssetGroupCulture(const FName& InAssetGroupName)"
  },
  {
    "label": "ClearCurrentAssetGroupCulture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentAssetGroupCulture(const FName& InAssetGroupName)"
  },
  {
    "label": "GetCulture()",
    "kind": "Method",
    "detail": "Function (FCulturePtr)",
    "insertText": "GetCulture(const FString& InCultureName)"
  },
  {
    "label": "GetDefaultCulture()",
    "kind": "Method",
    "detail": "Function (FCultureRef)",
    "insertText": "GetDefaultCulture()"
  },
  {
    "label": "GetDefaultLanguage()",
    "kind": "Method",
    "detail": "Function (} FCultureRef)",
    "insertText": "GetDefaultLanguage()"
  },
  {
    "label": "GetDefaultLocale()",
    "kind": "Method",
    "detail": "Function (} FCultureRef)",
    "insertText": "GetDefaultLocale()"
  },
  {
    "label": "GetInvariantCulture()",
    "kind": "Method",
    "detail": "Function (} FCultureRef)",
    "insertText": "GetInvariantCulture()"
  },
  {
    "label": "GetCurrentCultures()",
    "kind": "Method",
    "detail": "Function (} TArray<FCultureRef>)",
    "insertText": "GetCurrentCultures(const bool bIncludeLanguage, const bool bIncludeLocale, const bool bIncludeAssetGroups)"
  },
  {
    "label": "BackupCultureState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackupCultureState(FCultureStateSnapshot& OutSnapshot)"
  },
  {
    "label": "RestoreCultureState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreCultureState(const FCultureStateSnapshot& InSnapshot)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "AddCustomCulture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomCulture(const TSharedRef<ICustomCulture>& InCustomCulture)"
  },
  {
    "label": "GetCustomCulture()",
    "kind": "Method",
    "detail": "Function (FCulturePtr)",
    "insertText": "GetCustomCulture(const FString& InCultureName)"
  },
  {
    "label": "IsCultureRemapped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCultureRemapped(const FString& Name, FString* OutMappedCulture)"
  },
  {
    "label": "IsCultureAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCultureAllowed(const FString& Name)"
  },
  {
    "label": "RefreshCultureDisplayNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCultureDisplayNames(const TArray<FString>& InPrioritizedDisplayCultureNames)"
  },
  {
    "label": "RefreshCachedConfigData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCachedConfigData()"
  },
  {
    "label": "Leetify()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_LOC_TESTING FString&)",
    "insertText": "Leetify(FString& SourceString)"
  },
  {
    "label": "GetCultureNames()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetCultureNames(TArray<FString>& CultureNames)"
  },
  {
    "label": "GetPrioritizedCultureNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPrioritizedCultureNames(const FString& Name)"
  },
  {
    "label": "GetAvailableCultures()",
    "kind": "Method",
    "detail": "Function (TArray<FCultureRef>)",
    "insertText": "GetAvailableCultures(const TArray<FString>& InCultureNames, const bool bIncludeDerivedCultures)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FInternationalization, FCultureChangedEvent) FCultureChangedEvent& OnCultureChanged()"
  },
  {
    "label": "FInternationalization()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInternationalization()"
  },
  {
    "label": "BroadcastCultureChanged()",
    "kind": "Method",
    "detail": "Function (class FLazySingleton ; void)",
    "insertText": "BroadcastCultureChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (CultureChangedEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate()"
  },
  {
    "label": "GetCultureByName()",
    "kind": "Method",
    "detail": "Function (private : bool bIsInitialized = false ; FCultureChangedEvent CultureChangedEvent ; # if UE_ENABLE_ICU class FICUInternationalization ; typedef FICUInternationalization FImplementation ; # else class FLegacyInternationalization ; typedef FLegacyInternationalization FImplementation ; # endif TUniqueObj<FImplementation> Implementation ; FCulturePtr CurrentLanguage ; FCulturePtr CurrentLocale ; TArray<TTuple<FName,FCulturePtr>> CurrentAssetGroupCultures ; FCulturePtr DefaultLanguage ; FCulturePtr DefaultLocale ; FCulturePtr InvariantCulture ; TArray<FCultureRef> CustomCultures ; } ; namespace UE::Private::LocGen { FCulturePtr)",
    "insertText": "GetCultureByName(const TCHAR* InCulture)"
  }
]