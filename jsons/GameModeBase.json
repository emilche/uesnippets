[
  {
    "label": "AGameSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameSession"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "ASpectatorPawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASpectatorPawn"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "this",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "this"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "at",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "at"
  },
  {
    "label": "FGameModeEvents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameModeEvents"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameMode, Log, All)"
  },
  {
    "label": "InitGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGame(const FString& MapName, const FString& Options, FString& ErrorMessage)"
  },
  {
    "label": "InitGameState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGameState()"
  },
  {
    "label": "GetNumPlayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPlayers()"
  },
  {
    "label": "GetNumSpectators()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSpectators()"
  },
  {
    "label": "StartPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlay()"
  },
  {
    "label": "ClearPause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearPause()"
  },
  {
    "label": "ForceClearUnpauseDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceClearUnpauseDelegates(AActor* PauseActor)"
  },
  {
    "label": "AllowPausing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowPausing(APlayerController* PC = nullptr)"
  },
  {
    "label": "ShouldReset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldReset(AActor* ActorToReset)"
  },
  {
    "label": "ResetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLevel()"
  },
  {
    "label": "ReturnToMainMenuHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnToMainMenuHost()"
  },
  {
    "label": "CanServerTravel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanServerTravel(const FString& URL, bool bAbsolute)"
  },
  {
    "label": "ProcessServerTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessServerTravel(const FString& URL, bool bAbsolute = false)"
  },
  {
    "label": "GetSeamlessTravelActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSeamlessTravelActorList(bool bToTransition, TArray<AActor*>& ActorList)"
  },
  {
    "label": "SwapPlayerControllers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC)"
  },
  {
    "label": "GetPlayerControllerClassToSpawnForSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<APlayerController>)",
    "insertText": "GetPlayerControllerClassToSpawnForSeamlessTravel(APlayerController* PreviousPlayerController)"
  },
  {
    "label": "HandleSeamlessTravelPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSeamlessTravelPlayer(AController*& C)"
  },
  {
    "label": "PostSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSeamlessTravel()"
  },
  {
    "label": "StartToLeaveMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartToLeaveMap()"
  },
  {
    "label": "GameWelcomePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameWelcomePlayer(UNetConnection* Connection, FString& RedirectURL)"
  },
  {
    "label": "PreLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreLogin(const FString& Options, const FString& Address, const FUniqueNetIdRepl& UniqueId, FString& ErrorMessage)"
  },
  {
    "label": "PreLoginAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreLoginAsync(const FString& Options, const FString& Address, const FUniqueNetIdRepl& UniqueId, const FOnPreLoginCompleteDelegate& OnComplete)"
  },
  {
    "label": "PostLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLogin(APlayerController* NewPlayer)"
  },
  {
    "label": "DispatchPostLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPostLogin(AController* NewPlayer)"
  },
  {
    "label": "K2_PostLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_PostLogin(APlayerController* NewPlayer)"
  },
  {
    "label": "Logout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Logout(AController* Exiting)"
  },
  {
    "label": "K2_OnLogout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnLogout(AController* ExitingController)"
  },
  {
    "label": "HandleStartingNewPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleStartingNewPlayer(APlayerController* NewPlayer)"
  },
  {
    "label": "CanSpectate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget)"
  },
  {
    "label": "ChangeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeName(AController* Controller, const FString& NewName, bool bNameChange)"
  },
  {
    "label": "K2_OnChangeName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnChangeName(AController* Other, const FString& NewName, bool bNameChange)"
  },
  {
    "label": "PlayerCanRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayerCanRestart(APlayerController* Player)"
  },
  {
    "label": "RestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartPlayer(AController* NewPlayer)"
  },
  {
    "label": "RestartPlayerAtPlayerStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot)"
  },
  {
    "label": "RestartPlayerAtTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartPlayerAtTransform(AController* NewPlayer, const FTransform& SpawnTransform)"
  },
  {
    "label": "InitStartSpot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStartSpot(AActor* StartSpot, AController* NewPlayer)"
  },
  {
    "label": "K2_OnRestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnRestartPlayer(AController* NewPlayer)"
  },
  {
    "label": "SetPlayerDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerDefaults(APawn* PlayerPawn)"
  },
  {
    "label": "AllowCheats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowCheats(APlayerController* P)"
  },
  {
    "label": "IsHandlingReplays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHandlingReplays()"
  },
  {
    "label": "SpawnPlayerFromSimulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayerFromSimulate(const FVector& NewLocation, const FRotator& NewRotation)"
  },
  {
    "label": "UpdatePlayerStartSpot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePlayerStartSpot(AController* Player, const FString& Portal, FString& OutErrorMessage)"
  },
  {
    "label": "ShouldStartInCinematicMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStartInCinematicMode(APlayerController* Player, bool& OutHidePlayer, bool& OutHideHud, bool& OutDisableMovement, bool& OutDisableTurning)"
  },
  {
    "label": "UpdateGameplayMuteList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGameplayMuteList(APlayerController* aPlayer)"
  },
  {
    "label": "InitializeHUDForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeHUDForPlayer(APlayerController* NewPlayer)"
  },
  {
    "label": "GenericPlayerInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericPlayerInitialization(AController* C)"
  },
  {
    "label": "ReplicateStreamingStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicateStreamingStatus(APlayerController* PC)"
  },
  {
    "label": "ShouldSpawnAtStartSpot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSpawnAtStartSpot(AController* Player)"
  },
  {
    "label": "FinishRestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRestartPlayer(AController* NewPlayer, const FRotator& StartRotation)"
  },
  {
    "label": "FailedToRestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedToRestartPlayer(AController* NewPlayer)"
  },
  {
    "label": "InitSeamlessTravelPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSeamlessTravelPlayer(AController* NewController)"
  },
  {
    "label": "K2_OnSwapPlayerControllers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC)"
  }
]