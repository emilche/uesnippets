[
  {
    "label": "AGameSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameSession"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "AHUD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AHUD"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "ASpectatorPawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASpectatorPawn"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FGameModeEvents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameModeEvents"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" GameFramework / Pawn . h \" # include \" GameFramework / Info . h \" # include \" Engine / ServerStatReplicator . h \" # include \" Online / CoreOnline . h \" # include \" Net / Core / Connection / NetEnums . h \" # include \" GameFramework / PlayerController . h \" # include \" GameModeBase . generated . h \" class AGameSession ; class AGameStateBase ; class AHUD ; class APlayerState ; class ASpectatorPawn ; class UNetConnection ; class UPlayer ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameMode, Log, All)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FCanUnpause)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config = Game, notplaceable, BlueprintType, Blueprintable, Transient, hideCategories = (Info, Rendering, MovementReplication, Replication, Actor), meta = (ShortTooltip = \"Game Mode Base defines the game being played, its rules, scoring, and other facets of the game type.\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API virtual void InitGame(const FString& MapName, const FString& Options, FString& ErrorMessage)"
  },
  {
    "label": "InitGameState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGameState()"
  },
  {
    "label": "GetGameSessionClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<AGameSession>)",
    "insertText": "GetGameSessionClass()"
  },
  {
    "label": "GetGameNetDriverReplicationSystem()",
    "kind": "Method",
    "detail": "Function (EReplicationSystem)",
    "insertText": "GetGameNetDriverReplicationSystem()"
  },
  {
    "label": "GetGameState()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetGameState()"
  },
  {
    "label": "SetPause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPause(APlayerController* PC, FCanUnpause CanUnpauseDelegate = FCanUnpause())"
  },
  {
    "label": "ClearPause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearPause()"
  },
  {
    "label": "ForceClearUnpauseDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceClearUnpauseDelegates(AActor* PauseActor)"
  },
  {
    "label": "AllowPausing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowPausing(APlayerController* PC = nullptr)"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "CanServerTravel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanServerTravel(const FString& URL, bool bAbsolute)"
  },
  {
    "label": "ProcessServerTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessServerTravel(const FString& URL, bool bAbsolute = false)"
  },
  {
    "label": "GetSeamlessTravelActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSeamlessTravelActorList(bool bToTransition, TArray<AActor*>& ActorList)"
  },
  {
    "label": "SwapPlayerControllers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC)"
  },
  {
    "label": "GetPlayerControllerClassToSpawnForSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<APlayerController>)",
    "insertText": "GetPlayerControllerClassToSpawnForSeamlessTravel(APlayerController* PreviousPlayerController)"
  },
  {
    "label": "HandleSeamlessTravelPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSeamlessTravelPlayer(AController*& C)"
  },
  {
    "label": "PostSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSeamlessTravel()"
  },
  {
    "label": "StartToLeaveMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartToLeaveMap()"
  },
  {
    "label": "GameWelcomePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameWelcomePlayer(UNetConnection* Connection, FString& RedirectURL)"
  },
  {
    "label": "PreLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreLogin(const FString& Options, const FString& Address, const FUniqueNetIdRepl& UniqueId, FString& ErrorMessage)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPreLoginCompleteDelegate, const FString&)"
  },
  {
    "label": "PreLoginAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreLoginAsync(const FString& Options, const FString& Address, const FUniqueNetIdRepl& UniqueId, const FOnPreLoginCompleteDelegate& OnComplete)"
  },
  {
    "label": "Login()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "Login(UPlayer* NewPlayer, ENetRole InRemoteRole, const FString& Portal, const FString& Options, const FUniqueNetIdRepl& UniqueId, FString& ErrorMessage)"
  },
  {
    "label": "PostLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLogin(APlayerController* NewPlayer)"
  },
  {
    "label": "DispatchPostLogin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPostLogin(AController* NewPlayer)"
  },
  {
    "label": "OnPostLogin()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPostLogin(AController* NewPlayer)"
  },
  {
    "label": "Logout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Logout(AController* Exiting)"
  },
  {
    "label": "SpawnPlayerController()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "SpawnPlayerController(ENetRole InRemoteRole, const FString& Options)"
  },
  {
    "label": "SetPlayerDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerDefaults(APawn* PlayerPawn)"
  },
  {
    "label": "AllowCheats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowCheats(APlayerController* P)"
  },
  {
    "label": "IsHandlingReplays()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHandlingReplays()"
  },
  {
    "label": "SpawnPlayerFromSimulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpawnPlayerFromSimulate(const FVector& NewLocation, const FRotator& NewRotation)"
  },
  {
    "label": "PreInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreInitializeComponents()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdatePlayerStartSpot()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "UpdatePlayerStartSpot(AController* Player, const FString& Portal, FString& OutErrorMessage)"
  },
  {
    "label": "ShouldStartInCinematicMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStartInCinematicMode(APlayerController* Player, bool& OutHidePlayer, bool& OutHideHud, bool& OutDisableMovement, bool& OutDisableTurning)"
  },
  {
    "label": "UpdateGameplayMuteList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGameplayMuteList(APlayerController* aPlayer)"
  },
  {
    "label": "InitNewPlayer()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "InitNewPlayer(APlayerController* NewPlayerController, const FUniqueNetIdRepl& UniqueId, const FString& Options, const FString& Portal = TEXT(\"\"))"
  },
  {
    "label": "GenericPlayerInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericPlayerInitialization(AController* C)"
  },
  {
    "label": "ReplicateStreamingStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplicateStreamingStatus(APlayerController* PC)"
  },
  {
    "label": "ShouldSpawnAtStartSpot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSpawnAtStartSpot(AController* Player)"
  },
  {
    "label": "FinishRestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRestartPlayer(AController* NewPlayer, const FRotator& StartRotation)"
  },
  {
    "label": "FailedToRestartPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailedToRestartPlayer(AController* NewPlayer)"
  },
  {
    "label": "ProcessClientTravel()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "ProcessClientTravel(FString& URL, bool bSeamless, bool bAbsolute)"
  },
  {
    "label": "InitSeamlessTravelPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSeamlessTravelPlayer(AController* NewController)"
  },
  {
    "label": "SpawnPlayerControllerCommon()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "SpawnPlayerControllerCommon(ENetRole InRemoteRole, FVector const& SpawnLocation, FRotator const& SpawnRotation, TSubclassOf<APlayerController> InPlayerControllerClass)"
  },
  {
    "label": "HIDE_ACTOR_TRANSFORM_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (TArray<FCanUnpause> Pausers ; private :)",
    "insertText": "HIDE_ACTOR_TRANSFORM_FUNCTIONS()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; class FGameModeEvents { public :)",
    "insertText": "DECLARE_EVENT_OneParam(AGameModeBase, FGameModeInitializedEvent, AGameModeBase*)"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(AGameModeBase, FGameModePreLoginEvent, AGameModeBase* , const FUniqueNetIdRepl& , FString&)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(AGameModeBase, FGameModePostLoginEvent, AGameModeBase* , APlayerController*)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(AGameModeBase, FGameModeLogoutEvent, AGameModeBase* , AController*)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(AGameModeBase, FGameModeMatchStateSetEvent, FName)"
  },
  {
    "label": "OnGameModeInitializedEvent()",
    "kind": "Method",
    "detail": "Function (public : FGameModeInitializedEvent&)",
    "insertText": "OnGameModeInitializedEvent()"
  }
]