[
  {
    "label": "CharString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharString"
  },
  {
    "label": "DecimalQuantity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalQuantity"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "ISDATE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ISDATE"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Formattable()",
    "kind": "Method",
    "detail": "Function (# ifndef FMTABLE_H # define FMTABLE_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / unistr . h \" # include \" unicode / stringpiece . h \" # include \" unicode / uformattable . h \" U_NAMESPACE_BEGIN class CharString ; namespace number { namespace impl { class DecimalQuantity ; } } class U_I18N_API Formattable : public UObject { public : enum ISDATE { kIsDate } ;)",
    "insertText": "Formattable()"
  },
  {
    "label": "Formattable()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_CONVERSION)",
    "insertText": "Formattable(const char* strToCopy)"
  },
  {
    "label": "Formattable()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "Formattable(StringPiece number, UErrorCode &status)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Formattable &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Formattable& other)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (enum Type { kDate,kDouble,kLong,kString,kArray,kInt64,kObject } ; Type)",
    "insertText": "getType(void)"
  },
  {
    "label": "isNumeric()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isNumeric()"
  },
  {
    "label": "getLong()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getLong(void)"
  },
  {
    "label": "getLong()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getLong(UErrorCode& status)"
  },
  {
    "label": "getInt64()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "getInt64(void)"
  },
  {
    "label": "getDate()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "getDate()"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getString(UnicodeString& result)"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (result =* fValue . fString ; return result ; } UnicodeString&)",
    "insertText": "getString(UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getString(void)"
  },
  {
    "label": "getString()",
    "kind": "Method",
    "detail": "Function (const UnicodeString&)",
    "insertText": "getString(UErrorCode& status)"
  },
  {
    "label": "getArray()",
    "kind": "Method",
    "detail": "Function (const Formattable*)",
    "insertText": "getArray(int32_t& count)"
  },
  {
    "label": "getArray()",
    "kind": "Method",
    "detail": "Function (count = fValue . fArrayAndCount . fCount ; return fValue . fArrayAndCount . fArray ; } const Formattable*)",
    "insertText": "getArray(int32_t& count, UErrorCode& status)"
  },
  {
    "label": "getDecimalNumber()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "getDecimalNumber(UErrorCode &status)"
  },
  {
    "label": "setDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDouble(double d)"
  },
  {
    "label": "setLong()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLong(int32_t l)"
  },
  {
    "label": "setInt64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInt64(int64_t ll)"
  },
  {
    "label": "setDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDate(UDate d)"
  },
  {
    "label": "setString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setString(const UnicodeString& stringToCopy)"
  },
  {
    "label": "setArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setArray(const Formattable* array, int32_t count)"
  },
  {
    "label": "adoptString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptString(UnicodeString* stringToAdopt)"
  },
  {
    "label": "adoptArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptArray(Formattable* array, int32_t count)"
  },
  {
    "label": "adoptObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptObject(UObject* objectToAdopt)"
  },
  {
    "label": "setDecimalNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalNumber(StringPiece numberString, UErrorCode &status)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "fromUFormattable()",
    "kind": "Method",
    "detail": "Function (Formattable*)",
    "insertText": "fromUFormattable(UFormattable *fmt)"
  },
  {
    "label": "fromUFormattable()",
    "kind": "Method",
    "detail": "Function (const Formattable*)",
    "insertText": "fromUFormattable(const UFormattable *fmt)"
  },
  {
    "label": "toUFormattable()",
    "kind": "Method",
    "detail": "Function (UFormattable*)",
    "insertText": "toUFormattable()"
  },
  {
    "label": "getLong()",
    "kind": "Method",
    "detail": "Function (# ifndef int32_t)",
    "insertText": "getLong(UErrorCode* status)"
  },
  {
    "label": "getDecimalQuantity()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef number::impl::DecimalQuantity*)",
    "insertText": "getDecimalQuantity()"
  },
  {
    "label": "adoptDecimalQuantity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptDecimalQuantity(number::impl::DecimalQuantity *dq)"
  },
  {
    "label": "internalGetCharString()",
    "kind": "Method",
    "detail": "Function (CharString*)",
    "insertText": "internalGetCharString(UErrorCode &status)"
  },
  {
    "label": "dispose()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "dispose(void)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "getBogus()",
    "kind": "Method",
    "detail": "Function (UnicodeString*)",
    "insertText": "getBogus()"
  },
  {
    "label": "getDate()",
    "kind": "Method",
    "detail": "Function (union { UObject* fObject ; UnicodeString* fString ; double fDouble ; int64_t fInt64 ; UDate fDate ; struct { Formattable* fArray ; int32_t fCount ; } fArrayAndCount ; } fValue ; CharString* fDecimalStr ; number::impl::DecimalQuantity* fDecimalQuantity ; Type fType ; UnicodeString fBogus ; } ; UDate)",
    "insertText": "getDate(UErrorCode& status)"
  }
]