[
  {
    "label": "PacingController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacingController"
  },
  {
    "label": "PacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSender"
  },
  {
    "label": "PacketSender()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_PACING_PACING_CONTROLLER_H_ # define MODULES_PACING_PACING_CONTROLLER_H_ # include<stddef . h> # include<stdint . h> # include<array> # include<atomic> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / function_view . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / transport / network_types . h \" # include \" modules / pacing / bitrate_prober . h \" # include \" modules / pacing / interval_budget . h \" # include \" modules / pacing / prioritized_packet_queue . h \" # include \" modules / pacing / rtp_packet_pacer . h \" # include \" modules / rtp_rtcp / include / rtp_packet_sender . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class PacingController { public : class PacketSender { public : ~)",
    "insertText": "PacketSender()"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket(std::unique_ptr<RtpPacketToSend> packet, const PacedPacketInfo& cluster_info)"
  },
  {
    "label": "FetchFec()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "FetchFec()"
  },
  {
    "label": "GeneratePadding()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "GeneratePadding(DataSize size)"
  },
  {
    "label": "OnAbortedRetransmissions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbortedRetransmissions(uint32_t ssrc, rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "GetRtxSsrcForMedia()",
    "kind": "Method",
    "detail": "Function (} absl::optional<uint32_t>)",
    "insertText": "GetRtxSsrcForMedia(uint32_t ssrc)"
  },
  {
    "label": "PacingController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PacingController()"
  },
  {
    "label": "EnqueuePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueuePacket(std::unique_ptr<RtpPacketToSend> packet)"
  },
  {
    "label": "CreateProbeCluster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProbeCluster(DataRate bitrate, int cluster_id)"
  },
  {
    "label": "CreateProbeClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProbeClusters(rtc::ArrayView<const ProbeClusterConfig> probe_cluster_configs)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "SetCongested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCongested(bool congested)"
  },
  {
    "label": "SetPacingRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacingRates(DataRate pacing_rate, DataRate padding_rate)"
  },
  {
    "label": "pacing_rate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "pacing_rate()"
  },
  {
    "label": "SetIncludeOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncludeOverhead()"
  },
  {
    "label": "SetTransportOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransportOverhead(DataSize overhead_per_packet)"
  },
  {
    "label": "SetSendBurstInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendBurstInterval(TimeDelta burst_interval)"
  },
  {
    "label": "OldestPacketEnqueueTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "OldestPacketEnqueueTime()"
  },
  {
    "label": "QueueSizePackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "QueueSizePackets()"
  },
  {
    "label": "SizeInPacketsPerRtpPacketMediaType()",
    "kind": "Method",
    "detail": "Function (const std::array<int,kNumMediaTypes>&)",
    "insertText": "SizeInPacketsPerRtpPacketMediaType()"
  },
  {
    "label": "QueueSizeData()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "QueueSizeData()"
  },
  {
    "label": "CurrentBufferLevel()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "CurrentBufferLevel()"
  },
  {
    "label": "FirstSentPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<Timestamp>)",
    "insertText": "FirstSentPacketTime()"
  },
  {
    "label": "ExpectedQueueTime()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "ExpectedQueueTime()"
  },
  {
    "label": "SetQueueTimeLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueueTimeLimit(TimeDelta limit)"
  },
  {
    "label": "SetProbingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProbingEnabled(bool enabled)"
  },
  {
    "label": "NextSendTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "NextSendTime()"
  },
  {
    "label": "ProcessPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPackets()"
  },
  {
    "label": "IsProbing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProbing()"
  },
  {
    "label": "UpdateTimeAndGetElapsed()",
    "kind": "Method",
    "detail": "Function (private : TimeDelta)",
    "insertText": "UpdateTimeAndGetElapsed(Timestamp now)"
  },
  {
    "label": "ShouldSendKeepalive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSendKeepalive(Timestamp now)"
  },
  {
    "label": "UpdateBudgetWithElapsedTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBudgetWithElapsedTime(TimeDelta delta)"
  },
  {
    "label": "UpdateBudgetWithSentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBudgetWithSentData(DataSize size)"
  },
  {
    "label": "UpdatePaddingBudgetWithSentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePaddingBudgetWithSentData(DataSize size)"
  },
  {
    "label": "PaddingToAdd()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "PaddingToAdd(DataSize recommended_probe_size, DataSize data_sent)"
  },
  {
    "label": "GetPendingPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtpPacketToSend>)",
    "insertText": "GetPendingPacket(const PacedPacketInfo& pacing_info, Timestamp target_send_time, Timestamp now)"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(RtpPacketMediaType packet_type, DataSize packet_size, Timestamp send_time)"
  },
  {
    "label": "MaybeUpdateMediaRateDueToLongQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateMediaRateDueToLongQueue(Timestamp now)"
  },
  {
    "label": "CurrentTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "CurrentTime()"
  },
  {
    "label": "NextUnpacedSendTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "NextUnpacedSendTime()"
  }
]