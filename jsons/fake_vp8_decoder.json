[
  {
    "label": "FakeVp8Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeVp8Decoder"
  },
  {
    "label": "FakeVp8Decoder()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FAKE_VP8_DECODER_H_ # define TEST_FAKE_VP8_DECODER_H_ # include<stdint . h> # include \" api / video / encoded_image . h \" # include \" api / video_codecs / video_decoder . h \" # include \" modules / video_coding / include / video_codec_interface . h \" namespace webrtc { namespace test { class FakeVp8Decoder : public VideoDecoder { public :)",
    "insertText": "FakeVp8Decoder()"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Configure(const Settings& settings)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(const EncodedImage& input, bool missing_frames, int64_t render_time_ms)"
  },
  {
    "label": "RegisterDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterDecodeCompleteCallback(DecodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Release()"
  },
  {
    "label": "GetDecoderInfo()",
    "kind": "Method",
    "detail": "Function (DecoderInfo)",
    "insertText": "GetDecoderInfo()"
  },
  {
    "label": "ImplementationName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ImplementationName()"
  }
]