[
  {
    "label": "DtmfEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DtmfEvent"
  },
  {
    "label": "DtmfBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DtmfBuffer"
  },
  {
    "label": "BufferReturnCodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BufferReturnCodes"
  },
  {
    "label": "DtmfEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_DTMF_BUFFER_H_ # define MODULES_AUDIO_CODING_NETEQ_DTMF_BUFFER_H_ # include<stddef . h> # include<stdint . h> # include<list> namespace webrtc { struct DtmfEvent { uint32_t timestamp ; int event_no ; int volume ; int duration ; bool end_bit ;)",
    "insertText": "DtmfEvent() : timestamp(0), event_no(0), volume(0), duration(0), end_bit(false)"
  },
  {
    "label": "DtmfEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DtmfEvent(uint32_t ts, int ev, int vol, int dur, bool end) : timestamp(ts), event_no(ev), volume(vol), duration(dur), end_bit(end)"
  },
  {
    "label": "DtmfBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; class DtmfBuffer { public : enum BufferReturnCodes { kOK = 0,kInvalidPointer,kPayloadTooShort,kInvalidEventParameters,kInvalidSampleRate } ;)",
    "insertText": "DtmfBuffer(int fs_hz)"
  },
  {
    "label": "DtmfBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DtmfBuffer()"
  },
  {
    "label": "DtmfBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DtmfBuffer(const DtmfBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DtmfBuffer&)",
    "insertText": "operator(const DtmfBuffer&)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "ParseEvent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ParseEvent(uint32_t rtp_timestamp, const uint8_t* payload, size_t payload_length_bytes, DtmfEvent* event)"
  },
  {
    "label": "InsertEvent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertEvent(const DtmfEvent& event)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEvent(uint32_t current_timestamp, DtmfEvent* event)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Length()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "SetSampleRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetSampleRate(int fs_hz)"
  },
  {
    "label": "SameEvent()",
    "kind": "Method",
    "detail": "Function (private : typedef std::list<DtmfEvent> DtmfList ; int max_extrapolation_samples_ ; int frame_len_samples_ ; bool)",
    "insertText": "SameEvent(const DtmfEvent& a, const DtmfEvent& b)"
  },
  {
    "label": "MergeEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeEvents(DtmfList::iterator it, const DtmfEvent& event)"
  },
  {
    "label": "CompareEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareEvents(const DtmfEvent& a, const DtmfEvent& b)"
  }
]