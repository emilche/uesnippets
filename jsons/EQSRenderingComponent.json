[
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "IEQSQueryResultSourceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEQSQueryResultSourceInterface"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "FEQSSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEQSSceneProxy"
  },
  {
    "label": "FEQSRenderingDebugDrawDelegateHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEQSRenderingDebugDrawDelegateHelper"
  },
  {
    "label": "UEQSRenderingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEQSRenderingComponent"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EngineDefines . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" PrimitiveViewRelevance . h \" # include \" DebugRenderSceneProxy . h \" # include \" EnvironmentQuery / EnvQueryDebugHelpers . h \" # include \" Debug / DebugDrawComponent . h \" # include \" EQSRenderingComponent . generated . h \" class APlayerController ; class IEQSQueryResultSourceInterface ; class UCanvas ; class FEQSSceneProxy final : public FDebugRenderSceneProxy { class FEQSRenderingDebugDrawDelegateHelper ; public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FEQSSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEQSSceneProxy(const UPrimitiveComponent& InComponent, const FString& ViewFlagName = TEXT(\"DebugAI\"), const TArray<FSphere>& Spheres = TArray<FSphere>(), const TArray<FText3d>& Texts = TArray<FText3d>())"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "CollectEQSData()",
    "kind": "Method",
    "detail": "Function (# if USE_EQS_DEBUGGER void)",
    "insertText": "CollectEQSData(const UPrimitiveComponent* InComponent, const IEQSQueryResultSourceInterface* QueryDataSource, TArray<FSphere>& Spheres, TArray<FText3d>& Texts, TArray<EQSDebug::FDebugHelper>& DebugItems)"
  },
  {
    "label": "CollectEQSData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectEQSData(const FEnvQueryResult* ResultItems, const FEnvQueryInstance* QueryInstance, float HighlightRangePct, bool ShouldDrawFailedItems, TArray<FSphere>& Spheres, TArray<FText3d>& Texts, TArray<EQSDebug::FDebugHelper>& DebugItems)"
  },
  {
    "label": "SafeIsActorSelected()",
    "kind": "Method",
    "detail": "Function (# endif private : FEnvQueryResult QueryResult ; AActor* ActorOwner ; const IEQSQueryResultSourceInterface* QueryDataSource ; uint32 bDrawOnlyWhenSelected : 1 ; const FVector3f ItemDrawRadius ; bool)",
    "insertText": "SafeIsActorSelected()"
  },
  {
    "label": "FEQSRenderingDebugDrawDelegateHelper()",
    "kind": "Method",
    "detail": "Function (} ; # if USE_EQS_DEBUGGER class FEQSRenderingDebugDrawDelegateHelper : public FDebugDrawDelegateHelper { typedef FDebugDrawDelegateHelper Super ; public :)",
    "insertText": "FEQSRenderingDebugDrawDelegateHelper() : ActorOwner(nullptr) , QueryDataSource(nullptr) , bDrawOnlyWhenSelected(false)"
  },
  {
    "label": "SetupFromProxy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupFromProxy(const FEQSSceneProxy* InSceneProxy)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ActorOwner = InSceneProxy -> ActorOwner ; QueryDataSource = InSceneProxy -> QueryDataSource ; bDrawOnlyWhenSelected = InSceneProxy -> bDrawOnlyWhenSelected ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetTexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTexts()"
  },
  {
    "label": "DrawDebugLabels()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "DrawDebugLabels(UCanvas* Canvas, APlayerController*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (private : AActor* ActorOwner ; const IEQSQueryResultSourceInterface* QueryDataSource ; uint32 bDrawOnlyWhenSelected : 1 ; } ; # endif)",
    "insertText": "UCLASS(ClassGroup = Debug, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "ClearStoredDebugData()",
    "kind": "Method",
    "detail": "Function (uint32 bDrawOnlyWhenSelected : 1 ; void)",
    "insertText": "ClearStoredDebugData()"
  },
  {
    "label": "StoreDebugData()",
    "kind": "Method",
    "detail": "Function (# if USE_EQS_DEBUGGER | | ENABLE_VISUAL_LOG void)",
    "insertText": "StoreDebugData(const EQSDebug::FQueryData& DebugData)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (# endif protected : FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform &LocalToWorld)"
  },
  {
    "label": "CreateDebugSceneProxy()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING&& USE_EQS_DEBUGGER FDebugRenderSceneProxy*)",
    "insertText": "CreateDebugSceneProxy()"
  },
  {
    "label": "GetDebugDrawDelegateHelper()",
    "kind": "Method",
    "detail": "Function (FDebugDrawDelegateHelper&)",
    "insertText": "GetDebugDrawDelegateHelper()"
  }
]