[
  {
    "label": "FDriverVersion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDriverVersion"
  },
  {
    "label": "EComparisonOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EComparisonOp"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FGPUDriverInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUDriverInfo"
  },
  {
    "label": "FDriverConfigEntryConstraints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDriverConfigEntryConstraints"
  },
  {
    "label": "FDriverDenyListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDriverDenyListEntry"
  },
  {
    "label": "FDriverDateDenyListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDriverDateDenyListEntry"
  },
  {
    "label": "FDriverVersionDenyListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDriverVersionDenyListEntry"
  },
  {
    "label": "FSuggestedDriverEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSuggestedDriverEntry"
  },
  {
    "label": "FGPUDriverHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUDriverHelper"
  },
  {
    "label": "FDriverVersion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / UnrealString . h \" # include \" Misc / DateTime . h \" # include \" Misc / Optional . h \" # include \" Misc / Parse . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Internationalization / Regex . h \" class FDriverVersion { public :)",
    "insertText": "FDriverVersion()"
  },
  {
    "label": "FDriverVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDriverVersion(const FString& DriverVersionString)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(DriverVersionString)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Parse(const FString& DriverVersionString)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Empty()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FString RemainingString = DriverVersionString ; FString CurrentVersionNumber ; uint32_t CurrentVersionNumberIdx = 0 ;)",
    "insertText": "while(RemainingString.Split(TEXT(\".\"), &CurrentVersionNumber, &RemainingString))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Add(FCString::Atoi(*CurrentVersionNumber))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Values .)",
    "insertText": "Add(FCString::Atoi(*RemainingString))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FDriverVersion& Other)"
  },
  {
    "label": "GetVersionValue()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetVersionValue(uint32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (In + = 2 ; return ECO_Equal ; })",
    "insertText": "if(In[0] == '!' && In[1] == '=')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (In + = 2 ; return ECO_NotEqual ; })",
    "insertText": "if(*In == '>')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + In ;)",
    "insertText": "if(*In == '=')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + In ; return ECO_GreaterOrEqual ; } return ECO_Greater ; })",
    "insertText": "if(*In == '<')"
  },
  {
    "label": "CompareWithOp()",
    "kind": "Method",
    "detail": "Function (+ + In ; return ECO_LessOrEqual ; } return ECO_Less ; } return ECO_Equal ; } template<class T> bool)",
    "insertText": "CompareWithOp(const T& A, EComparisonOp Op, const T& B)"
  },
  {
    "label": "SetAMD()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAMD()"
  },
  {
    "label": "SetIntel()",
    "kind": "Method",
    "detail": "Function (VendorId = 0 x1002 ; } void)",
    "insertText": "SetIntel()"
  },
  {
    "label": "SetNVIDIA()",
    "kind": "Method",
    "detail": "Function (VendorId = 0 x8086 ; } void)",
    "insertText": "SetNVIDIA()"
  },
  {
    "label": "IsAMD()",
    "kind": "Method",
    "detail": "Function (VendorId = 0 x10DE ; } bool)",
    "insertText": "IsAMD()"
  },
  {
    "label": "ThisVersion()",
    "kind": "Method",
    "detail": "Function (FDriverVersion)",
    "insertText": "ThisVersion(GetUnifiedDriverVersion())"
  },
  {
    "label": "GetNVIDIAUnifiedVersion()",
    "kind": "Method",
    "detail": "Function (} return true ; } FString)",
    "insertText": "GetNVIDIAUnifiedVersion(const FString& InternalVersion)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (RightPart = RightPart .)",
    "insertText": "Replace(TEXT(\".\"), TEXT(\"\"))"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (RightPart .)",
    "insertText": "InsertAt(3, TEXT(\".\"))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 DotIndex = InternalVersion .)",
    "insertText": "Find(TEXT(\".\"), ESearchCase::CaseSensitive, ESearchDir::FromStart)"
  },
  {
    "label": "GetUnifiedDriverVersion()",
    "kind": "Method",
    "detail": "Function (} } return InternalVersion ; } FString)",
    "insertText": "GetUnifiedDriverVersion()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FString& FullVersion = InternalDriverVersion ;)",
    "insertText": "if(IsNVIDIA() && (InternalDriverVersion != UserDriverVersion))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsIntel())"
  },
  {
    "label": "ParseMonthDayYearDate()",
    "kind": "Method",
    "detail": "Function (} return FullVersion ; } } ; FDateTime)",
    "insertText": "ParseMonthDayYearDate(const FString& DateString)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (FString Month,DayYear,Day,Year ; DateString .)",
    "insertText": "Split(TEXT(\"-\"), &Month, &DayYear)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (DayYear .)",
    "insertText": "Split(TEXT(\"-\"), &Day, &Year)"
  },
  {
    "label": "FDriverConfigEntryConstraints()",
    "kind": "Method",
    "detail": "Function (} struct FDriverConfigEntryConstraints { TOptional<FString> RHINameConstraint ; TOptional<FRegexPattern> AdapterNameRegexConstraint ;)",
    "insertText": "FDriverConfigEntryConstraints()"
  },
  {
    "label": "FDriverConfigEntryConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDriverConfigEntryConstraints(const TCHAR* Entry)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FString RHINameString ;)",
    "insertText": "Value(Entry, TEXT(\"RHI=\"), RHINameString)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (RHINameConstraint = RHINameString ; } FString AdapterNameRegexString ;)",
    "insertText": "Value(Entry, TEXT(\"AdapterNameRegex=\"), AdapterNameRegexString)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (AdapterNameRegexConstraint .)",
    "insertText": "Emplace(AdapterNameRegexString)"
  },
  {
    "label": "AreConstraintsSatisfied()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "AreConstraintsSatisfied(const FGPUDriverInfo& Info, uint32& OutNumSatisfiedConstraints)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutNumSatisfiedConstraints = 0 ;)",
    "insertText": "if(RHINameConstraint)"
  },
  {
    "label": "Matcher()",
    "kind": "Method",
    "detail": "Function (FRegexMatcher)",
    "insertText": "Matcher(*AdapterNameRegexConstraint, Info.DeviceDescription)"
  },
  {
    "label": "ParseComparisonOp()",
    "kind": "Method",
    "detail": "Function (FDriverDateDenyListEntry Entry ; const TCHAR* Chars =* DriverDateStringWithComparisonOp ; Entry . ComparisonOp =)",
    "insertText": "ParseComparisonOp(Chars)"
  },
  {
    "label": "ParseMonthDayYearDate()",
    "kind": "Method",
    "detail": "Function (Entry . Date =)",
    "insertText": "ParseMonthDayYearDate(FString(Chars))"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (Entry . Version .)",
    "insertText": "Parse(Chars)"
  },
  {
    "label": "FDriverDenyListEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDriverDenyListEntry(const TCHAR* Entry) : FDriverConfigEntryConstraints(Entry)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FString DriverVersionString ;)",
    "insertText": "Value(Entry, TEXT(\"DriverVersion=\"), DriverVersionString)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (DriverVersion =)",
    "insertText": "FromString(DriverVersionString)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} FString DriverDateString ;)",
    "insertText": "Value(Entry, TEXT(\"DriverDate=\"), DriverDateString)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (DriverDate =)",
    "insertText": "FromString(DriverDateString)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensureMsgf(IsValid(), TEXT(\"Exactly one of driver date or driver version must be specified in a driver denylist entry\"))"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Entry, TEXT(\"Reason=\"), DenylistReason)"
  },
  {
    "label": "AppliesToDriver()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AppliesToDriver(const FGPUDriverInfo& Info, uint32& OutNumSatisfiedConstraints)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutNumSatisfiedConstraints = 0 ;)",
    "insertText": "if(!IsValid())"
  },
  {
    "label": "CurrentDriverVersion()",
    "kind": "Method",
    "detail": "Function (FDriverVersion)",
    "insertText": "CurrentDriverVersion(Info.GetUnifiedDriverVersion())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DriverDate)"
  },
  {
    "label": "ParseMonthDayYearDate()",
    "kind": "Method",
    "detail": "Function (FDateTime CurrentDriverDate =)",
    "insertText": "ParseMonthDayYearDate(Info.DriverDate)"
  },
  {
    "label": "AppliesToLatestDrivers()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "AppliesToLatestDrivers()"
  },
  {
    "label": "FSuggestedDriverEntry()",
    "kind": "Method",
    "detail": "Function (} TOptional<FDriverVersionDenyListEntry> DriverVersion ; TOptional<FDriverDateDenyListEntry> DriverDate ; FString DenylistReason ; } ; struct FSuggestedDriverEntry : public FDriverConfigEntryConstraints {)",
    "insertText": "FSuggestedDriverEntry()"
  },
  {
    "label": "FSuggestedDriverEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSuggestedDriverEntry(const TCHAR* Entry) : FDriverConfigEntryConstraints(Entry)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Entry, TEXT(\"DriverVersion=\"), SuggestedDriverVersion)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FGPUDriverHelper()",
    "kind": "Method",
    "detail": "Function (} FString SuggestedDriverVersion ; } ; class FGPUDriverHelper { public :)",
    "insertText": "FGPUDriverHelper(const FGPUDriverInfo& InDriverInfo) : DriverInfo(InDriverInfo)"
  },
  {
    "label": "FindSuggestedDriverVersion()",
    "kind": "Method",
    "detail": "Function (} TOptional<FSuggestedDriverEntry>)",
    "insertText": "FindSuggestedDriverVersion()"
  },
  {
    "label": "FindDriverDenyListEntry()",
    "kind": "Method",
    "detail": "Function (} TOptional<FDriverDenyListEntry>)",
    "insertText": "FindDriverDenyListEntry()"
  },
  {
    "label": "GetBestConfigEntry()",
    "kind": "Method",
    "detail": "Function (} private : template<TEntryType> TOptional<TEntryType>)",
    "insertText": "GetBestConfigEntry(const TCHAR* ConfigEntryName)"
  },
  {
    "label": "GetVendorSectionName()",
    "kind": "Method",
    "detail": "Function (const FString Section =)",
    "insertText": "GetVendorSectionName()"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (TEntryType)",
    "insertText": "Entry(*EntryString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 NumSatisfiedConstraints = 0 ;)",
    "insertText": "if(Entry.AppliesToDriver(DriverInfo, NumSatisfiedConstraints))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MostRelevantEntry = { Entry,NumSatisfiedConstraints } ; } } })",
    "insertText": "if(MostRelevantEntry.Key.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Section = nullptr ;)",
    "insertText": "if(DriverInfo.IsNVIDIA())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Section =)",
    "insertText": "TEXT(\"GPU_NVIDIA\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DriverInfo.IsAMD())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Section =)",
    "insertText": "TEXT(\"GPU_AMD\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(DriverInfo.IsIntel())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Section =)",
    "insertText": "TEXT(\"GPU_Intel\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Section)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"%s %s\"), Section, ANSI_TO_TCHAR(FPlatformProperties::IniPlatformName()))"
  }
]