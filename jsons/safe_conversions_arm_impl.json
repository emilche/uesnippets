[
  {
    "label": "SaturateFastAsmOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SaturateFastAsmOp"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_NUMERICS_SAFE_CONVERSIONS_ARM_IMPL_H_ # define BASE_NUMERICS_SAFE_CONVERSIONS_ARM_IMPL_H_ # include<cassert> # include<limits> # include<type_traits> # include \" base / numerics / safe_conversions_impl . h \" namespace base { namespace internal { template<Dst,Src> struct SaturateFastAsmOp { bool is_supported = kEnableAsmCode&& std::is_signed<Src>::value&& std::is_integral<Dst>::value&& std::is_integral<Src>::value&& IntegerBitsPlusSign<Src>::value<= IntegerBitsPlusSign<int32_t>::value&& IntegerBitsPlusSign<Dst>::value<= IntegerBitsPlusSign<int32_t>::value&& ! IsTypeInRangeForNumericType<Dst,Src>::value ;)",
    "insertText": "__attribute__((always_inline)) static Dst Do(Src value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32_t src = value ; std::conditional<std::is_signed<Dst>::value,int32_t,uint32_t>::type result ;)",
    "insertText": "if(std::is_signed<Dst>::value)"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "asm(\"ssat %[dst], %[shift], %[src]\" : [dst] \"=r\"(result) : [src] \"r\"(src), [shift] \"n\"(IntegerBitsPlusSign<Dst>::value <= 32 ? IntegerBitsPlusSign<Dst>::value : 32))"
  },
  {
    "label": "asm()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "asm(\"usat %[dst], %[shift], %[src]\" : [dst] \"=r\"(result) : [src] \"r\"(src), [shift] \"n\"(IntegerBitsPlusSign<Dst>::value < 32 ? IntegerBitsPlusSign<Dst>::value : 31))"
  },
  {
    "label": "Dst()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "Dst(result)"
  }
]