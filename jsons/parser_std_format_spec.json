[
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Context"
  },
  {
    "label": "__fields",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fields"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "__std",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__std"
  },
  {
    "label": "__chrono",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__chrono"
  },
  {
    "label": "__parsed_specifications",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__parsed_specifications"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "__column_width_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__column_width_result"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_PARSER_STD_FORMAT_SPEC_H # define _LIBCPP___FORMAT_PARSER_STD_FORMAT_SPEC_H # include<__algorithm / find_if . h> # include<__algorithm / min . h> # include<__assert> # include<__config> # include<__debug> # include<__format / format_arg . h> # include<__format / format_error . h> # include<__format / format_parse_context . h> # include<__format / format_string . h> # include<__format / unicode . h> # include<__variant / monostate . h> # include<bit> # include<concepts> # include<cstdint> # include<string_view> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__parse_arg_id()",
    "kind": "Method",
    "detail": "Function (template<class _CharT> _LIBCPP_HIDE_FROM_ABI __format::__parse_number_result<_CharT>)",
    "insertText": "__parse_arg_id(const _CharT* __begin, const _CharT* __end, auto& __parse_ctx)"
  },
  {
    "label": "__parse_arg_id()",
    "kind": "Method",
    "detail": "Function (__format::__parse_number_result __r =)",
    "insertText": "__parse_arg_id(__begin, __end, __parse_ctx)"
  },
  {
    "label": "__substitute_arg_id()",
    "kind": "Method",
    "detail": "Function (+ + __r . __ptr ; return __r ; } template<class _Context> _LIBCPP_HIDE_FROM_ABI uint32_t)",
    "insertText": "__substitute_arg_id(basic_format_arg<_Context> __format_arg)"
  },
  {
    "label": "__has_width()",
    "kind": "Method",
    "detail": "Function (} struct __fields { uint8_t __sign_ : 1 { false } ; uint8_t __alternate_form_ : 1 { false } ; uint8_t __zero_padding_ : 1 { false } ; uint8_t __precision_ : 1 { false } ; uint8_t __locale_specific_form_ : 1 { false } ; uint8_t __type_ : 1 { false } ; } ; __fields __fields_integral { . __sign_ = true,. __alternate_form_ = true,. __zero_padding_ = true,. __locale_specific_form_ = true,. __type_ = true } ; __fields __fields_floating_point { . __sign_ = true,. __alternate_form_ = true,. __zero_padding_ = true,. __precision_ = true,. __locale_specific_form_ = true,. __type_ = true } ; __fields __fields_string { . __precision_ = true,. __type_ = true } ; __fields __fields_pointer { . __type_ = true } ; enum class _LIBCPP_ENUM_VIS __alignment : uint8_t { __default,__left,__center,__right,__zero_padding } ; enum class _LIBCPP_ENUM_VIS __sign : uint8_t { __default,__minus,__plus,__space } ; enum class _LIBCPP_ENUM_VIS __type : uint8_t { __default,__string,__binary_lower_case,__binary_upper_case,__octal,__decimal,__hexadecimal_lower_case,__hexadecimal_upper_case,__pointer,__char,__hexfloat_lower_case,__hexfloat_upper_case,__scientific_lower_case,__scientific_upper_case,__fixed_lower_case,__fixed_upper_case,__general_lower_case,__general_upper_case } ; struct __std { __alignment __alignment_ : 3 ; __sign __sign_ : 2 ; bool __alternate_form_ : 1 ; bool __locale_specific_form_ : 1 ; __type __type_ ; } ; struct __chrono { __alignment __alignment_ : 3 ; bool __weekday_name_ : 1 ; bool __month_name_ : 1 ; } ; template<class _CharT> struct __parsed_specifications { union { __alignment __alignment_ : 3 ; __std __std_ ; __chrono __chrono_ ; } ; int32_t __width_ ; int32_t __precision_ ; _CharT __fill_ ; _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__has_width()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS)",
    "insertText": "static_assert(sizeof(__parsed_specifications<wchar_t>) == 16)"
  },
  {
    "label": "__parse()",
    "kind": "Method",
    "detail": "Function (# endif template<class _CharT> class _LIBCPP_TEMPLATE_VIS __parser { public : _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "__parse(basic_format_parse_context<_CharT>& __parse_ctx, __fields __fields) -> decltype(__parse_ctx.begin())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (const _CharT* __begin = __parse_ctx .)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (const _CharT* __end = __parse_ctx .)",
    "insertText": "end()"
  },
  {
    "label": "__parse_type()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__parse_type(__begin)"
  },
  {
    "label": "__get_parsed_std_specifications()",
    "kind": "Method",
    "detail": "Function (} return __begin ; } _LIBCPP_HIDE_FROM_ABI __parsed_specifications<_CharT>)",
    "insertText": "__get_parsed_std_specifications(auto& __ctx)"
  },
  {
    "label": "__get_precision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__get_precision(__ctx)"
  },
  {
    "label": "_CharT()",
    "kind": "Method",
    "detail": "Function (__fill_ } } ; } __alignment __alignment_ : 3 { __alignment::__default } ; __sign __sign_ : 2 { __sign::__default } ; bool __alternate_form_ : 1 { false } ; bool __locale_specific_form_ : 1 { false } ; bool __reserved_0_ : 1 { false } ; __type __type_ { __type::__default } ; bool __weekday_name_ : 1 { false } ; bool __month_name_ : 1 { false } ; uint8_t __reserved_1_ : 6 { 0 } ; uint8_t __reserved_2_ : 6 { 0 } ; bool __width_as_arg_ : 1 { false } ; bool __precision_as_arg_ : 1 { false } ; int32_t __width_ { 0 } ; int32_t __precision_ { - 1 } ; _CharT __fill_ {)",
    "insertText": "_CharT(' ')"
  },
  {
    "label": "__parse_alignment()",
    "kind": "Method",
    "detail": "Function (private : _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_alignment(_CharT __c)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__begin != __end, \"when called with an empty input the function will cause \" \"undefined behavior by evaluating data not in the input\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__fill_ =* __begin ; __begin + = 2 ; return true ; } })",
    "insertText": "if(!__parse_alignment(*__begin))"
  },
  {
    "label": "__parse_sign()",
    "kind": "Method",
    "detail": "Function (+ + __begin ; return true ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_sign(const _CharT*& __begin)"
  },
  {
    "label": "_CharT()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "_CharT('+')"
  },
  {
    "label": "__parse_alternate_form()",
    "kind": "Method",
    "detail": "Function (break ; default : return false ; } + + __begin ; return true ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_alternate_form(const _CharT*& __begin)"
  },
  {
    "label": "__parse_zero_padding()",
    "kind": "Method",
    "detail": "Function (__alternate_form_ = true ; + + __begin ; return true ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_zero_padding(const _CharT*& __begin)"
  },
  {
    "label": "__parse_width()",
    "kind": "Method",
    "detail": "Function (+ + __begin ; return true ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_width(const _CharT*& __begin, const _CharT* __end, auto& __parse_ctx)"
  },
  {
    "label": "__parse_arg_id()",
    "kind": "Method",
    "detail": "Function (__format::__parse_number_result __r =)",
    "insertText": "__parse_arg_id(++__begin, __end, __parse_ctx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__width_as_arg_ = true ; __width_ = __r . __value ; __begin = __r . __ptr ; return true ; })",
    "insertText": "if(*__begin < _CharT('0') || *__begin > _CharT('9'))"
  },
  {
    "label": "__parse_number()",
    "kind": "Method",
    "detail": "Function (__format::__parse_number_result __r =)",
    "insertText": "__parse_number(__begin, __end)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (__width_ = __r . __value ;)",
    "insertText": "_LIBCPP_ASSERT(__width_ != 0, \"A zero value isn't allowed and should be impossible, \" \"due to validations in this function\")"
  },
  {
    "label": "__parse_precision()",
    "kind": "Method",
    "detail": "Function (__begin = __r . __ptr ; return true ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_precision(const _CharT*& __begin, const _CharT* __end, auto& __parse_ctx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __begin ;)",
    "insertText": "if(__begin == __end) __throw_format_error(\"End of input while parsing format-spec precision\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__precision_as_arg_ = true ; __precision_ = __arg_id . __value ; __begin = __arg_id . __ptr ; return true ; })",
    "insertText": "if(*__begin < _CharT('0') || *__begin > _CharT('9')) __throw_format_error(\"The format-spec precision field doesn't contain a value or arg-id\")"
  },
  {
    "label": "__parse_locale_specific_form()",
    "kind": "Method",
    "detail": "Function (__precision_ = __r . __value ; __precision_as_arg_ = false ; __begin = __r . __ptr ; return true ; } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__parse_locale_specific_form(const _CharT*& __begin)"
  },
  {
    "label": "__parse_type()",
    "kind": "Method",
    "detail": "Function (__locale_specific_form_ = true ; + + __begin ; return true ; } _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__parse_type(const _CharT*& __begin)"
  },
  {
    "label": "__substitute_arg_id()",
    "kind": "Method",
    "detail": "Function (int32_t __result =)",
    "insertText": "__substitute_arg_id(__ctx.arg(__width_))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(sizeof(__parser<char>) == 16)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS)",
    "insertText": "static_assert(sizeof(__parser<wchar_t>) == 16)"
  },
  {
    "label": "__process_display_type_string()",
    "kind": "Method",
    "detail": "Function (# endif _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_display_type_string(__format_spec::__type __type)"
  },
  {
    "label": "__process_display_type_bool_string()",
    "kind": "Method",
    "detail": "Function (} } template<class _CharT> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_display_type_bool_string(__parser<_CharT>& __parser)"
  },
  {
    "label": "__process_display_type_char()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_display_type_char(__parser<_CharT>& __parser)"
  },
  {
    "label": "__process_display_type_bool_string()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__process_display_type_bool_string(__parser)"
  },
  {
    "label": "__process_parsed_bool()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_parsed_bool(__parser<_CharT>& __parser)"
  },
  {
    "label": "__throw_format_error()",
    "kind": "Method",
    "detail": "Function (break ; case __format_spec::__type::__binary_lower_case : case __format_spec::__type::__binary_upper_case : case __format_spec::__type::__octal : case __format_spec::__type::__decimal : case __format_spec::__type::__hexadecimal_lower_case : case __format_spec::__type::__hexadecimal_upper_case : break ; default :)",
    "insertText": "__throw_format_error(\"The format-spec type has a type not supported for a bool argument\")"
  },
  {
    "label": "__process_parsed_char()",
    "kind": "Method",
    "detail": "Function (} } template<class _CharT> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_parsed_char(__parser<_CharT>& __parser)"
  },
  {
    "label": "__throw_format_error()",
    "kind": "Method",
    "detail": "Function (break ; case __format_spec::__type::__binary_lower_case : case __format_spec::__type::__binary_upper_case : case __format_spec::__type::__octal : case __format_spec::__type::__decimal : case __format_spec::__type::__hexadecimal_lower_case : case __format_spec::__type::__hexadecimal_upper_case : break ; default :)",
    "insertText": "__throw_format_error(\"The format-spec type has a type not supported for a char argument\")"
  },
  {
    "label": "__process_parsed_integer()",
    "kind": "Method",
    "detail": "Function (} } template<class _CharT> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_parsed_integer(__parser<_CharT>& __parser)"
  },
  {
    "label": "__throw_format_error()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "__throw_format_error(\"The format-spec type has a type not supported for an integer argument\")"
  },
  {
    "label": "__process_parsed_floating_point()",
    "kind": "Method",
    "detail": "Function (} } template<class _CharT> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_parsed_floating_point(__parser<_CharT>& __parser)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case __format_spec::__type::__hexfloat_lower_case : case __format_spec::__type::__hexfloat_upper_case : break ; case __format_spec::__type::__scientific_lower_case : case __format_spec::__type::__scientific_upper_case : case __format_spec::__type::__fixed_lower_case : case __format_spec::__type::__fixed_upper_case : case __format_spec::__type::__general_lower_case : case __format_spec::__type::__general_upper_case :)",
    "insertText": "if(!__parser.__precision_as_arg_ && __parser.__precision_ == -1)"
  },
  {
    "label": "__throw_format_error()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "__throw_format_error(\"The format-spec type has a type not supported for a floating-point argument\")"
  },
  {
    "label": "__process_display_type_pointer()",
    "kind": "Method",
    "detail": "Function (} } _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__process_display_type_pointer(__format_spec::__type __type)"
  },
  {
    "label": "__column_width_3()",
    "kind": "Method",
    "detail": "Function (} } template<class _CharT> struct __column_width_result { size_t __width_ ; const _CharT* __last_ ; } ; enum class __column_width_rounding { __down,__up } ; # ifndef _LIBCPP_HAS_NO_UNICODE namespace __detail { _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "__column_width_3(uint32_t __c)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__c < 0x10000, \"Use __column_width_4 or __column_width for larger values\")"
  },
  {
    "label": "__column_width_4()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "__column_width_4(uint32_t __c)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__c >= 0x10000, \"Use __column_width_3 or __column_width for smaller values\")"
  },
  {
    "label": "__column_width()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "__column_width(uint32_t __c)"
  },
  {
    "label": "__estimate_column_width_grapheme_clustering()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT> _LIBCPP_HIDE_FROM_ABI __column_width_result<_CharT>)",
    "insertText": "__estimate_column_width_grapheme_clustering(const _CharT* __first, const _CharT* __last, size_t __maximum, __column_width_rounding __rounding)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (__unicode::__extended_grapheme_cluster_view<_CharT> __view { __first,__last } ; __column_width_result<_CharT> __result { 0,__first } ;)",
    "insertText": "while(__result.__last_ != __last && __result.__width_ <= __maximum)"
  },
  {
    "label": "__consume()",
    "kind": "Method",
    "detail": "Function (__unicode::__extended_grapheme_cluster_view<_CharT>::__cluster __cluster = __view .)",
    "insertText": "__consume()"
  },
  {
    "label": "__column_width()",
    "kind": "Method",
    "detail": "Function (int __width =)",
    "insertText": "__column_width(__cluster.__code_point_)"
  },
  {
    "label": "__is_ascii()",
    "kind": "Method",
    "detail": "Function (__result . __width_ + = __width ; __result . __last_ = __cluster . __last_ ; } return __result ; } } _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__is_ascii(char32_t __c)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (__str .)",
    "insertText": "size(), __str.end()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "size_t(__it - __str.begin())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "while(__is_ascii(*__it))"
  },
  {
    "label": "__estimate_column_width_grapheme_clustering()",
    "kind": "Method",
    "detail": "Function (__column_width_result __result =)",
    "insertText": "__estimate_column_width_grapheme_clustering(__it, __str.end(), __maximum, __rounding)"
  },
  {
    "label": "__estimate_column_width()",
    "kind": "Method",
    "detail": "Function (__result . __width_ + = __ascii_size ; return __result ; } # else template<class _CharT> _LIBCPP_HIDE_FROM_ABI __column_width_result<_CharT>)",
    "insertText": "__estimate_column_width(basic_string_view<_CharT> __str, size_t __maximum, __column_width_rounding)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t __width_ =)",
    "insertText": "min(__str.size(), __maximum)"
  }
]