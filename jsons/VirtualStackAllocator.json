[
  {
    "label": "FVirtualStackAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualStackAllocator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedStackAllocatorBookmark",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedStackAllocatorBookmark"
  },
  {
    "label": "FScopedStackAllocatorBookmark()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMemory . h \" # include \" Misc / AssertionMacros . h \" # if PLATFORM_HAS_ASAN_INCLUDE # include<sanitizer / asan_interface . h> # endif class FVirtualStackAllocator ; enum class EVirtualStackAllocatorDecommitMode : uint8 { AllOnDestruction = 0,AllOnStackEmpty = 1,ExcessOnStackEmpty = 2,NumModes } ; struct FScopedStackAllocatorBookmark { public : ~)",
    "insertText": "FScopedStackAllocatorBookmark()"
  },
  {
    "label": "FScopedStackAllocatorBookmark()",
    "kind": "Method",
    "detail": "Function (private : FVirtualStackAllocator ;)",
    "insertText": "FScopedStackAllocatorBookmark(void* InRestorePointer, FVirtualStackAllocator* Owner) : RestorePointer(InRestorePointer) , Owner(Owner)"
  },
  {
    "label": "FScopedStackAllocatorBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedStackAllocatorBookmark(const FScopedStackAllocatorBookmark& Other)"
  },
  {
    "label": "FScopedStackAllocatorBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedStackAllocatorBookmark(FScopedStackAllocatorBookmark&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FScopedStackAllocatorBookmark& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FScopedStackAllocatorBookmark&& Other)"
  },
  {
    "label": "FVirtualStackAllocator()",
    "kind": "Method",
    "detail": "Function (void* RestorePointer ; FVirtualStackAllocator* Owner ; } ; class FVirtualStackAllocator { public :)",
    "insertText": "FVirtualStackAllocator(size_t RequestedStackSize, EVirtualStackAllocatorDecommitMode Mode)"
  },
  {
    "label": "FVirtualStackAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVirtualStackAllocator()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate(size_t Size, size_t Alignment)"
  },
  {
    "label": "GetAllocatedBytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetAllocatedBytes()"
  },
  {
    "label": "GetCommittedBytes()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetCommittedBytes()"
  },
  {
    "label": "FVirtualStackAllocator()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FVirtualStackAllocator(const FVirtualStackAllocator& Other)"
  },
  {
    "label": "FVirtualStackAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVirtualStackAllocator(FVirtualStackAllocator&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FVirtualStackAllocator& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FVirtualStackAllocator&& Other)"
  },
  {
    "label": "ASAN_POISON_MEMORY_REGION()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_HAS_ASAN_INCLUDE)",
    "insertText": "ASAN_POISON_MEMORY_REGION(RestorePointer, static_cast<uint8*>(NextAllocationStart) - static_cast<uint8*>(RestorePointer))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif NextAllocationStart = RestorePointer ;)",
    "insertText": "if(UNLIKELY(NextAllocationStart == VirtualMemory.GetVirtualPointer() && DecommitMode != EVirtualStackAllocatorDecommitMode::AllOnDestruction))"
  },
  {
    "label": "DecommitUnusedPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecommitUnusedPages()"
  }
]