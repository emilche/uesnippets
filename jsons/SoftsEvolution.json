[
  {
    "label": "struct",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "struct"
  },
  {
    "label": "FEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvolution"
  },
  {
    "label": "TArrayRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TArrayRange"
  },
  {
    "label": "FSoftBodies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftBodies"
  },
  {
    "label": "FCollisionBodyRanges",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionBodyRanges"
  },
  {
    "label": "FGroups",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGroups"
  },
  {
    "label": "FLinearSystemParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearSystemParameters"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ArrayCollection . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsEvolutionLinearSystem . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / SoftsSolverCollisionParticles . h \" # include \" Chaos / SoftsSolverCollisionParticlesRange . h \" # include \" Chaos / VelocityField . h \" # include \" Misc / EnumClassFlags . h \" namespace Chaos::Softs { enum struct ESolverMode : uint8 { None = 0,PBD = 1<<0,ForceBased = 1<<1 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESolverMode)"
  },
  {
    "label": "FEvolution()",
    "kind": "Method",
    "detail": "Function (class FEvolution { public :)",
    "insertText": "FEvolution(const FCollectionPropertyConstFacade& Properties)"
  },
  {
    "label": "FEvolution()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEvolution()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AdvanceOneTimeStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceOneTimeStep(const FSolverReal Dt, const FSolverReal TimeDependentIterationMultiplier)"
  },
  {
    "label": "AddGroupArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGroupArray(TArrayCollectionArrayBase* Array)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (Groups .)",
    "insertText": "AddArray(Array)"
  },
  {
    "label": "AddParticleArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddParticleArray(TArrayCollectionArrayBase* Array)"
  },
  {
    "label": "AddCollisionParticleArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCollisionParticleArray(TArrayCollectionArrayBase* Array)"
  },
  {
    "label": "GetParticles()",
    "kind": "Method",
    "detail": "Function (} const FSolverParticles&)",
    "insertText": "GetParticles()"
  },
  {
    "label": "AddSoftBody()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddSoftBody(uint32 GroupId, int32 NumParticles, bool bEnable)"
  },
  {
    "label": "RemoveSoftBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSoftBody(int32 SoftBodyId)"
  },
  {
    "label": "GetSoftBodyParticleNum()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSoftBodyParticleNum(int32 SoftBodyId)"
  },
  {
    "label": "GetSoftBodyGroupId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSoftBodyGroupId(int32 SoftBodyId)"
  },
  {
    "label": "ActivateSoftBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateSoftBody(int32 SoftBodyId, bool bActivate)"
  },
  {
    "label": "IsSoftBodyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftBodyActive(int32 SoftBodyId)"
  },
  {
    "label": "GetLastLinearSolveError()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetLastLinearSolveError(int32 SoftBodyId)"
  },
  {
    "label": "AddCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddCollisionParticleRange(uint32 GroupId, int32 NumParticles, bool bEnable)"
  },
  {
    "label": "RemoveCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCollisionParticleRange(int32 CollisionRangeId)"
  },
  {
    "label": "ActivateCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateCollisionParticleRange(int32 CollisionRangeId, bool bEnable)"
  },
  {
    "label": "GetGroupActiveCollisionParticleRanges()",
    "kind": "Method",
    "detail": "Function (const TSet<int32>&)",
    "insertText": "GetGroupActiveCollisionParticleRanges(uint32 GroupId)"
  },
  {
    "label": "IsValidCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCollisionParticleRange(int32 CollisionRangeId)"
  },
  {
    "label": "GetCollisionParticleRange()",
    "kind": "Method",
    "detail": "Function (} FSolverCollisionParticlesRange&)",
    "insertText": "GetCollisionParticleRange(int32 CollisionRangeId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FSolverCollisionParticlesRange&, const FSolverReal Dt, const FSolverReal Time)"
  },
  {
    "label": "SetKinematicUpdateFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKinematicUpdateFunction(KinematicUpdateFunc Func)"
  },
  {
    "label": "SetCollisionKinematicUpdateFunction()",
    "kind": "Method",
    "detail": "Function (KinematicUpdate = Func ; } void)",
    "insertText": "SetCollisionKinematicUpdateFunction(CollisionKinematicUpdateFunc Func)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (CollisionKinematicUpdate = Func ; } typedef TFunction<)",
    "insertText": "void(const FSolverParticlesRange&, const FSolverReal Dt, const ESolverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FSolverParticlesRange&, const FSolverReal Dt, const ESolverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FSolverParticlesRange&, const FSolverReal Dt)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FSolverParticlesRange&, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FSolverParticlesRange&, const FSolverReal Dt, FEvolutionLinearSystem&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FSolverParticlesRange&, const FSolverReal Dt, const TArray<FSolverCollisionParticlesRange>&, FEvolutionLinearSystem&)"
  },
  {
    "label": "AllocatePreSubstepParallelInitRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocatePreSubstepParallelInitRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePBDExternalForceRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePBDExternalForceRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePostInitialGuessParallelInitRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePostInitialGuessParallelInitRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePreSubstepConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePreSubstepConstraintRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePerIterationPBDConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePerIterationPBDConstraintRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePerIterationCollisionPBDConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePerIterationCollisionPBDConstraintRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePerIterationPostCollisionsPBDConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePerIterationPostCollisionsPBDConstraintRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocateUpdateLinearSystemRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateUpdateLinearSystemRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocateUpdateLinearSystemCollisionsRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateUpdateLinearSystemCollisionsRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "AllocatePostSubstepConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocatePostSubstepConstraintRulesRange(int32 SoftBodyId, int32 NumRules)"
  },
  {
    "label": "GetPreSubstepParallelInitRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<ParallelInitFunc>)",
    "insertText": "GetPreSubstepParallelInitRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPBDExternalForceRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<PBDConstraintRuleFunc>)",
    "insertText": "GetPBDExternalForceRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPostInitialGuessParallelInitRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<ParallelInitFunc>)",
    "insertText": "GetPostInitialGuessParallelInitRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPreSubstepConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<ConstraintRuleFunc>)",
    "insertText": "GetPreSubstepConstraintRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPerIterationPBDConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<PBDConstraintRuleFunc>)",
    "insertText": "GetPerIterationPBDConstraintRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPerIterationCollisionPBDConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<PBDCollisionConstraintRuleFunc>)",
    "insertText": "GetPerIterationCollisionPBDConstraintRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPerIterationPostCollisionsPBDConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<PBDConstraintRuleFunc>)",
    "insertText": "GetPerIterationPostCollisionsPBDConstraintRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetUpdateLinearSystemRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<UpdateLinearSystemFunc>)",
    "insertText": "GetUpdateLinearSystemRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetUpdateLinearSystemCollisionsRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<UpdateLinearSystemCollisionsFunc>)",
    "insertText": "GetUpdateLinearSystemCollisionsRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetPostSubstepConstraintRulesRange()",
    "kind": "Method",
    "detail": "Function (} TArrayView<ConstraintRuleFunc>)",
    "insertText": "GetPostSubstepConstraintRulesRange(int32 SoftBodyId)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetTime()"
  },
  {
    "label": "SetSolverProperties()",
    "kind": "Method",
    "detail": "Function (bDisableTimeDependentNumIterations = bDisable ; } void)",
    "insertText": "SetSolverProperties(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "AddRange()",
    "kind": "Method",
    "detail": "Function (private : template<ElementType> struct TArrayRange { TArrayRange)",
    "insertText": "AddRange(TArray<ElementType>& InArray, int32 InRangeSize)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TArrayRange Range ; Range . Offset = InArray .)",
    "insertText": "Num()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Range . Array =& InArray ; Range . Array ->)",
    "insertText": "AddDefaulted(InRangeSize)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Range . RangeSize = InRangeSize ; return Range ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<ElementType>)",
    "insertText": "GetConstArrayView()"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (} TArrayView<ElementType>)",
    "insertText": "GetArrayView()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&Status)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&GroupId)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&ParticleRanges)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&GlobalDampings)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&LocalDampings)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&UsePerParticleDamping)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&LinearSystems)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PreSubstepParallelInits)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PBDExternalForceRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PostInitialGuessParallelInits)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PreSubstepConstraintRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PerIterationPBDConstraintRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PerIterationCollisionPBDConstraintRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PerIterationPostCollisionsPBDConstraintRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&UpdateLinearSystemRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&UpdateLinearSystemCollisionsRules)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&PostSubstepConstraintRules)"
  },
  {
    "label": "ResizeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeHelper(0)"
  },
  {
    "label": "AddSoftBody()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddSoftBody()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const int32 Offset =)",
    "insertText": "Size()"
  },
  {
    "label": "AddElementsHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementsHelper(1)"
  },
  {
    "label": "AddRange()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddRange()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&SoftBodies)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&ActiveSoftBodies)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&ActiveCollisionParticleRanges)"
  },
  {
    "label": "AddGroupsToSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddGroupsToSize(uint32 DesiredSize)"
  },
  {
    "label": "ResizeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeHelper((int32)DesiredSize)"
  },
  {
    "label": "FLinearSystemParameters()",
    "kind": "Method",
    "detail": "Function (} } TArrayCollectionArray<TArray<int32>> SoftBodies ; TArrayCollectionArray<TSet<int32>> ActiveSoftBodies ; TArrayCollectionArray<TSet<int32>> ActiveCollisionParticleRanges ; } ; struct FLinearSystemParameters : public FEvolutionLinearSystemSolverParameters { typedef FEvolutionLinearSystemSolverParameters Base ;)",
    "insertText": "FLinearSystemParameters() : Base()"
  },
  {
    "label": "FLinearSystemParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLinearSystemParameters(const FCollectionPropertyConstFacade& PropertyCollection, bool bInXPBDInitialGuess) : Base(GetDoQuasistatics(PropertyCollection, false) , bInXPBDInitialGuess , GetMaxNumCGIterations(PropertyCollection, DefaultMaxNumCGIterations) , GetCGResidualTolerance(PropertyCollection, DefaultCGTolerance) , GetCheckCGResidual(PropertyCollection, bDefaultCheckCGResidual))"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, bool bInXPBDInitialGuess)"
  },
  {
    "label": "GetDoQuasistatics()",
    "kind": "Method",
    "detail": "Function (bXPBDInitialGuess = bInXPBDInitialGuess ; bDoQuasistatics =)",
    "insertText": "GetDoQuasistatics(PropertyCollection, false)"
  },
  {
    "label": "GetMaxNumCGIterations()",
    "kind": "Method",
    "detail": "Function (MaxNumCGIterations =)",
    "insertText": "GetMaxNumCGIterations(PropertyCollection, DefaultMaxNumCGIterations)"
  },
  {
    "label": "GetCGResidualTolerance()",
    "kind": "Method",
    "detail": "Function (CGResidualTolerance =)",
    "insertText": "GetCGResidualTolerance(PropertyCollection, DefaultCGTolerance)"
  },
  {
    "label": "GetCheckCGResidual()",
    "kind": "Method",
    "detail": "Function (bCheckCGResidual =)",
    "insertText": "GetCheckCGResidual(PropertyCollection, bDefaultCheckCGResidual)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(DoQuasistatics, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(MaxNumCGIterations, int32)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(CGResidualTolerance, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(CheckCGResidual, bool)"
  },
  {
    "label": "AllocateRules()",
    "kind": "Method",
    "detail": "Function (} ; template<RuleFunc> void)",
    "insertText": "AllocateRules(int32 SoftBodyId, int32 NumRules, TArrayCollectionArray<TArray<RuleFunc>>& RuleArray)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (RuleArray [ SoftBodyId ] .)",
    "insertText": "SetNum(NumRules)"
  },
  {
    "label": "GetRules()",
    "kind": "Method",
    "detail": "Function (} template<RuleFunc> TArrayView<RuleFunc>)",
    "insertText": "GetRules(int32 SoftBodyId, TArrayCollectionArray<TArray<RuleFunc>>& RuleArray)"
  },
  {
    "label": "AdvanceOneTimeStepInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceOneTimeStepInternal(const FSolverReal Dt, const int32 TimeDependentNumIterations, uint32 GroupId)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (FSolverReal Time ; bool bEnableForceBasedSolver = false ; int32 MaxNumIterations ; int32 NumIterations ; int32 NumUsedIterations = 0 ; int32 NumNewtonIterations ; bool bDisableTimeDependentNumIterations = false ; bool bDoQuasistatics ; FSolverReal SolverFrequency ; FLinearSystemParameters LinearSystemParameters ; FSolverParticles Particles ; TArrayCollectionArray<FSolverReal> ParticleDampings ; FSolverCollisionParticles CollisionParticles ; FSoftBodies SoftBodies ; TMap<int32,TArray<int32>> SoftBodyFreeList ; FCollisionBodyRanges CollisionRanges ; TMap<int32,TArray<int32>> CollisionRangeFreeList ; FGroups Groups ; TSet<uint32> ActiveGroups ; KinematicUpdateFunc KinematicUpdate ; CollisionKinematicUpdateFunc CollisionKinematicUpdate ;)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(DampingCoefficient, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(LocalDampingCoefficient, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(MaxNumIterations, int32)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(NumIterations, int32)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(SolverFrequency, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(EnableForceBasedSolver, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(NumNewtonIterations, int32)"
  }
]