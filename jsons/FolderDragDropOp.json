[
  {
    "label": "FFolderDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFolderDragDropOp"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / World . h \" # include \" Folder . h \" # include \" Input / DragAndDrop . h \" # include \" DragAndDrop / DecoratedDragDropOp . h \" # include \" EditorFolderUtils . h \" class FFolderDragDropOp : public FDecoratedDragDropOp { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FFolderDragDropOp, FDecoratedDragDropOp)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UWorld> World ; FFolder::FRootObject RootObject ; void)",
    "insertText": "Init(TArray<FName> InFolders, UWorld* InWorld, const FFolder::FRootObject& InRootObject = FFolder::GetInvalidRootObject())"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Folders =)",
    "insertText": "MoveTemp(InFolders)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (World = InWorld ; RootObject = InRootObject ; CurrentIconBrush =)",
    "insertText": "Get().GetBrush(TEXT(\"SceneOutliner.FolderClosed\"))"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (CurrentHoverText =)",
    "insertText": "FromName(FEditorFolderUtils::GetLeafName(Folders[0]))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} else { CurrentHoverText =)",
    "insertText": "Format(NSLOCTEXT(\"FFolderDragDropOp\", \"FormatFolders\", \"{0} Folders\"), FText::AsNumber(Folders.Num()))"
  },
  {
    "label": "SetupDefaults()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetupDefaults()"
  }
]