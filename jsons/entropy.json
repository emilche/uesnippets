[
  {
    "label": "vp8_token_struct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vp8_token_struct"
  },
  {
    "label": "VP8Common",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP8Common"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_COMMON_ENTROPY_H_ # define VPX_VP8_COMMON_ENTROPY_H_ # include \" treecoder . h \" # include \" blockd . h \" # ifdef __cplusplus \" C \" { # endif # define ZERO_TOKEN 0 # define ONE_TOKEN 1 # define TWO_TOKEN 2 # define THREE_TOKEN 3 # define FOUR_TOKEN 4 # define DCT_VAL_CATEGORY1 5 # define DCT_VAL_CATEGORY2 6 # define DCT_VAL_CATEGORY3 7 # define DCT_VAL_CATEGORY4 8 # define DCT_VAL_CATEGORY5 9 # define DCT_VAL_CATEGORY6 1 0 # define DCT_EOB_TOKEN 1 1 # define MAX_ENTROPY_TOKENS 1 2 # define ENTROPY_NODES 1 1 const vp8_tree_index vp8_coef_tree [ ] ; const struct vp8_token_struct vp8_coef_encodings [ MAX_ENTROPY_TOKENS ] ; typedef struct { vp8_tree_p tree ; const vp8_prob* prob ; int Len ; int base_val ; } vp8_extra_bit_struct ; const vp8_extra_bit_struct vp8_extra_bits [ 1 2 ] ; # define PROB_UPDATE_BASELINE_COST 7 # define MAX_PROB 2 5 5 # define DCT_MAX_VALUE 2 0 4 8 # define BLOCK_TYPES 4 # define COEF_BANDS 8)",
    "insertText": "DECLARE_ALIGNED(16, const unsigned char, vp8_coef_bands[16])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (# define PREV_COEF_CONTEXTS 3)",
    "insertText": "DECLARE_ALIGNED(16, const unsigned char, vp8_prev_token_class[MAX_ENTROPY_TOKENS])"
  },
  {
    "label": "vp8_default_coef_probs()",
    "kind": "Method",
    "detail": "Function (const vp8_prob vp8_coef_update_probs [ BLOCK_TYPES ] [ COEF_BANDS ] [ PREV_COEF_CONTEXTS ] [ ENTROPY_NODES ] ; struct VP8Common ; void)",
    "insertText": "vp8_default_coef_probs(struct VP8Common *)"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, const int, vp8_default_zig_zag1d[16])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, const short, vp8_default_inv_zig_zag[16])"
  },
  {
    "label": "DECLARE_ALIGNED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ALIGNED(16, const short, vp8_default_zig_zag_mask[16])"
  },
  {
    "label": "vp8_coef_tree_initialize()",
    "kind": "Method",
    "detail": "Function (const int vp8_mb_feature_data_bits [ MB_LVL_MAX ] ; void)",
    "insertText": "vp8_coef_tree_initialize(void)"
  }
]