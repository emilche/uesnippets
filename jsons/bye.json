[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "Bye",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Bye"
  },
  {
    "label": "Bye()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_BYE_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_BYE_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" modules / rtp_rtcp / source / rtcp_packet . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class Bye : public RtcpPacket { public : uint8_t kPacketType = 2 0 3 ;)",
    "insertText": "Bye()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "SetCsrcs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCsrcs(std::vector<uint32_t> csrcs)"
  },
  {
    "label": "SetReason()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReason(absl::string_view reason)"
  },
  {
    "label": "csrcs()",
    "kind": "Method",
    "detail": "Function (const std::vector<uint32_t>&)",
    "insertText": "csrcs()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  }
]