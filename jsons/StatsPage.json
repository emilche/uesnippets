[
  {
    "label": "FStatsPage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsPage"
  },
  {
    "label": "IStatsViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStatsViewer"
  },
  {
    "label": "IPropertyTableCustomColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCustomColumn"
  },
  {
    "label": "FStatsPage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Editor . h \" # include \" Engine / Engine . h \" # include \" Engine / World . h \" # include \" UObject / Class . h \" # include \" IStatsViewer . h \" # include \" IStatsPage . h \" template<Entry> class FStatsPage : public IStatsPage { public :)",
    "insertText": "FStatsPage()"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (FString EnumName =)",
    "insertText": "StaticClass()->GetName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (EnumName + =)",
    "insertText": "TEXT(\".\")"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (EnumName + =)",
    "insertText": "StaticClass()->GetMetaData( TEXT(\"ObjectSetType\"))"
  },
  {
    "label": "UEnum()",
    "kind": "Method",
    "detail": "Function (ObjectSetEnum = FindObject<)",
    "insertText": "UEnum(nullptr, *EnumName)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Show(bool bInShow = true)"
  },
  {
    "label": "IsShowPending()",
    "kind": "Method",
    "detail": "Function (bShow = bInShow ; } bool)",
    "insertText": "IsShowPending()"
  },
  {
    "label": "IsRefreshPending()",
    "kind": "Method",
    "detail": "Function (bRefresh = bInRefresh ; } bool)",
    "insertText": "IsRefreshPending()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} const FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetToolTip()",
    "kind": "Method",
    "detail": "Function (} const FText)",
    "insertText": "GetToolTip()"
  },
  {
    "label": "GetObjectSetCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetObjectSetCount()"
  },
  {
    "label": "GetObjectSetName()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } FString)",
    "insertText": "GetObjectSetName(int32 InObjectSetIndex)"
  },
  {
    "label": "GetObjectSetToolTip()",
    "kind": "Method",
    "detail": "Function (} FString EmptyString ; return EmptyString ; } FString)",
    "insertText": "GetObjectSetToolTip(int32 InObjectSetIndex)"
  },
  {
    "label": "GetEntryClass()",
    "kind": "Method",
    "detail": "Function (} FString EmptyString ; return EmptyString ; } UClass*)",
    "insertText": "GetEntryClass()"
  },
  {
    "label": "GetCustomFilter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetCustomFilter(TWeakPtr< class IStatsViewer > InParentStatsViewer)"
  },
  {
    "label": "GetSelectedObjectSet()",
    "kind": "Method",
    "detail": "Function (ObjectSetIndex = InObjectSetIndex ; } int32)",
    "insertText": "GetSelectedObjectSet()"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWorld(UWorld& InWorld)"
  },
  {
    "label": "UWorld()",
    "kind": "Method",
    "detail": "Function (StatsWorld = MakeWeakObjectPtr<)",
    "insertText": "UWorld(&InWorld)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UWorld* World = GWorld ;)",
    "insertText": "if(StatsWorld.IsValid())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (World = StatsWorld .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(GEditor && (GEditor->bIsSimulatingInEditor || GEditor->PlayWorld))"
  },
  {
    "label": "GetWorldContextFromPIEInstance()",
    "kind": "Method",
    "detail": "Function (World = GEditor -> PlayWorld ; } else { FWorldContext* WorldContext = GEngine ->)",
    "insertText": "GetWorldContextFromPIEInstance(0)"
  },
  {
    "label": "World()",
    "kind": "Method",
    "detail": "Function (UWorld* SIEWorld = WorldContext ? WorldContext ->)",
    "insertText": "World()"
  }
]