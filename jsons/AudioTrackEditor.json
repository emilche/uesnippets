[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAudioThumbnail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioThumbnail"
  },
  {
    "label": "FDelegateHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelegateHandle"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UMovieSceneAudioTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneAudioTrack"
  },
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "FAudioTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Widgets / SWidget . h \" # include \" ISequencerSection . h \" # include \" MovieSceneTrack . h \" # include \" ISequencer . h \" # include \" ISequencerTrackEditor . h \" # include \" MovieSceneTrackEditor . h \" # include \" IContentBrowserSingleton . h \" # include \" Containers / Map . h \" struct FAssetData ; class FAudioThumbnail ; class FDelegateHandle ; class FMenuBuilder ; class FSequencerSectionPainter ; class USoundWave ; class UMovieSceneAudioTrack ; class FAudioTrackEditor : public FMovieSceneTrackEditor { public :)",
    "insertText": "FAudioTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "FAudioTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioTrackEditor()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "OnInitialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnInitialize()"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildOutlinerEditWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerEditWidget(const FGuid& ObjectBinding, UMovieSceneTrack* Track, const FBuildEditWidgetParams& Params)"
  },
  {
    "label": "HandleAssetAdded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAssetAdded(UObject* Asset, const FGuid& TargetObjectGuid)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "IsResizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResizable(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float NewSize, UMovieSceneTrack* InTrack)"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(const FDragDropEvent& DragDropEvent, FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FDragDropEvent& DragDropEvent, const FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "AddNewSound()",
    "kind": "Method",
    "detail": "Function (protected : FKeyPropertyResult)",
    "insertText": "AddNewSound(FFrameNumber KeyTime, class USoundBase* Sound, UMovieSceneAudioTrack* Track, int32 RowIndex)"
  },
  {
    "label": "AddNewAttachedSound()",
    "kind": "Method",
    "detail": "Function (FKeyPropertyResult)",
    "insertText": "AddNewAttachedSound(FFrameNumber KeyTime, class USoundBase* Sound, UMovieSceneAudioTrack* Track, TArray<TWeakObjectPtr<UObject>> ObjectsToAttachTo)"
  },
  {
    "label": "HandleAddAudioTrackMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleAddAudioTrackMenuEntryExecute()"
  },
  {
    "label": "HandleAddAttachedAudioTrackMenuEntryExecute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAddAttachedAudioTrackMenuEntryExecute(FMenuBuilder& MenuBuilder, TArray<FGuid> ObjectBindings)"
  },
  {
    "label": "BuildAudioSubMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildAudioSubMenu(FOnAssetSelected OnAssetSelected, FOnAssetEnterPressed OnAssetEnterPressed)"
  },
  {
    "label": "OnAudioAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioAssetSelected(const FAssetData& AssetData, UMovieSceneTrack* Track)"
  },
  {
    "label": "OnAudioAssetEnterPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioAssetEnterPressed(const TArray<FAssetData>& AssetData, UMovieSceneTrack* Track)"
  },
  {
    "label": "OnAttachedAudioAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttachedAudioAssetSelected(const FAssetData& AssetData, TArray<FGuid> ObjectBindings)"
  },
  {
    "label": "OnAttachedAudioEnterPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAttachedAudioEnterPressed(const TArray<FAssetData>& AssetData, TArray<FGuid> ObjectBindings)"
  },
  {
    "label": "RegisterMovieSceneChangedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMovieSceneChangedDelegate()"
  },
  {
    "label": "OnMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovieSceneDataChanged(EMovieSceneDataChangeType InChangeType)"
  },
  {
    "label": "SequenceContainsAudioTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SequenceContainsAudioTrack(const UMovieSceneSequence* InSequence)"
  },
  {
    "label": "CheckSequenceClockSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckSequenceClockSource()"
  },
  {
    "label": "PromptUserForClockSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromptUserForClockSource()"
  },
  {
    "label": "SetClockSoureToAudioClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClockSoureToAudioClock()"
  },
  {
    "label": "FAudioSection()",
    "kind": "Method",
    "detail": "Function (private : FDelegateHandle MovieSceneChangedDelegate ; } ; class FAudioSection : public ISequencerSection,public TSharedFromThis<FAudioSection> { public :)",
    "insertText": "FAudioSection(UMovieSceneSection& InSection, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "FAudioSection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAudioSection()"
  },
  {
    "label": "GetSectionObject()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneSection*)",
    "insertText": "GetSectionObject()"
  },
  {
    "label": "GetSectionTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionTitle()"
  },
  {
    "label": "GetSectionToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionToolTip()"
  },
  {
    "label": "GetSectionHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionHeight(const UE::Sequencer::FViewDensityInfo& ViewDensity)"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& Painter)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const FGeometry& ParentGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "BeginResizeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginResizeSection()"
  },
  {
    "label": "ResizeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeSection(ESequencerSectionResizeMode ResizeMode, FFrameNumber ResizeTime)"
  },
  {
    "label": "BeginSlipSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSlipSection()"
  },
  {
    "label": "SlipSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlipSection(FFrameNumber SlipTime)"
  },
  {
    "label": "GetSectionTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "GetSectionTime(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "RegenerateWaveforms()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegenerateWaveforms(TRange<float> DrawRange, int32 XOffset, int32 XSize, const FColor& ColorTint, float DisplayScale)"
  }
]