[
  {
    "label": "FInGameCycleHistory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInGameCycleHistory"
  },
  {
    "label": "FInGamePerformanceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInGamePerformanceTracker"
  },
  {
    "label": "IConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleVariable"
  },
  {
    "label": "FInGameCycleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInGameCycleCounter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInGameScopedCycleCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInGameScopedCycleCounter"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FWorldInGamePerformanceTrackers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldInGamePerformanceTrackers"
  },
  {
    "label": "FInGameCycleHistory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformTime . h \" struct FInGameCycleHistory {)",
    "insertText": "FInGameCycleHistory()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FInGameCycleHistory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FInGameCycleHistory(int32 InNumSamples)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (FrameCycles .)",
    "insertText": "SetNumZeroed(InNumSamples)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (CurrFrameCycles = 0 ; int32 NumSamples = FrameCycles .)",
    "insertText": "Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FrameCycles .)",
    "insertText": "Reset(NumSamples)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (FrameCycles .)",
    "insertText": "SetNumZeroed(NumSamples)"
  },
  {
    "label": "AddCycles()",
    "kind": "Method",
    "detail": "Function (TotalCycles = 0 ; CachedAverageCycles = 0 ; FrameIdx = 0 ; } TAtomic<uint64> CurrFrameCycles ; TArray<uint64> FrameCycles ; uint64 TotalCycles = 0 ; TAtomic<uint64> CachedAverageCycles ; int32 FrameIdx = 0 ; void)",
    "insertText": "AddCycles(uint64 NewCycles)"
  },
  {
    "label": "GetAverageCycles()",
    "kind": "Method",
    "detail": "Function (CurrFrameCycles + = NewCycles ; } uint64)",
    "insertText": "GetAverageCycles()"
  },
  {
    "label": "NextFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NextFrame()"
  },
  {
    "label": "FInGamePerformanceTracker()",
    "kind": "Method",
    "detail": "Function (} ; class FInGamePerformanceTracker { private : FInGameCycleHistory History ; uint32 DirectSectionTime_EntryCount ; uint32 DirectSectionTime_BeginCycles ; public :)",
    "insertText": "FInGamePerformanceTracker()"
  },
  {
    "label": "FInGamePerformanceTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInGamePerformanceTracker(uint32 FrameHistorySize)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "GetAverageTimeSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAverageTimeSeconds()"
  },
  {
    "label": "EnterTimedSection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnterTimedSection()"
  },
  {
    "label": "ExitTimedSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitTimedSection()"
  },
  {
    "label": "FInGameCycleCounter()",
    "kind": "Method",
    "detail": "Function (class IConsoleVariable* Enabled ; int32 CachedEnabled ; class IConsoleVariable* HistorySize ; } ; class FInGameCycleCounter { private : FInGamePerformanceTracker* Tracker ; uint32 BeginCycles ; public :)",
    "insertText": "FInGameCycleCounter(FInGamePerformanceTracker* InTracker) : Tracker(InTracker) , BeginCycles(0)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "Cycles()",
    "kind": "Method",
    "detail": "Function (} else { BeginCycles =)",
    "insertText": "Cycles()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "End()"
  },
  {
    "label": "AddCycles()",
    "kind": "Method",
    "detail": "Function (Tracker ->)",
    "insertText": "AddCycles(Cycles)"
  },
  {
    "label": "FInGameScopedCycleCounter()",
    "kind": "Method",
    "detail": "Function (BeginCycles = 0 ; } } } } ; enum class EInGamePerfTrackers : uint8 { VFXSignificance,Num,} ; enum class EInGamePerfTrackerThreads : uint8 { GameThread,RenderThread,OtherThread,Num,} ; class FInGameScopedCycleCounter : public FInGameCycleCounter { public :)",
    "insertText": "FInGameScopedCycleCounter(class UWorld* InWorld, EInGamePerfTrackers Tracker, EInGamePerfTrackerThreads TrackerThread, bool bEnabled)"
  },
  {
    "label": "FInGameScopedCycleCounter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInGameScopedCycleCounter()"
  },
  {
    "label": "InGamePerformanceTrackers()",
    "kind": "Method",
    "detail": "Function (} ; class FWorldInGamePerformanceTrackers { FInGamePerformanceTracker)",
    "insertText": "InGamePerformanceTrackers(int32)EInGamePerfTrackers::Num][(int32)"
  },
  {
    "label": "FWorldInGamePerformanceTrackers()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FWorldInGamePerformanceTrackers()"
  },
  {
    "label": "GetInGamePerformanceTracker()",
    "kind": "Method",
    "detail": "Function (FInGamePerformanceTracker&)",
    "insertText": "GetInGamePerformanceTracker(EInGamePerfTrackers InTracker, EInGamePerfTrackerThreads InThread)"
  },
  {
    "label": "Tracker()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Tracker(int32)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Thread(int32)"
  }
]