[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef PLCRASH_CONSTANTS_H # define PLCRASH_CONSTANTS_H # include<assert . h> # include<TargetConditionals . h> # if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# define PLCR_C_END_DECLS } # else # define PLCR_EXPORT # define PLCR_C_BEGIN_DECLS # define PLCR_C_END_DECLS # endif # if)",
    "insertText": "defined(__cplusplus) # define NO_OTHER_MACRO_STARTS_WITH_THIS_NAME_ # define IS_EMPTY_(name) defined(NO_OTHER_MACRO_STARTS_WITH_THIS_NAME_ ## name) # define IS_EMPTY(name) IS_EMPTY_(name) # if defined(PLCRASHREPORTER_PREFIX) && !IS_EMPTY(PLCRASHREPORTER_PREFIX)"
  },
  {
    "label": "PLCR_PRAGMA_CLANG()",
    "kind": "Method",
    "detail": "Function (namespace PLCRASHREPORTER_PREFIX { # define PLCR_CPP_END_NS } } # else # define PLCR_CPP_BEGIN_NS namespace plcrash { # define PLCR_CPP_END_NS } # endif # endif # ifdef __clang__ # define)",
    "insertText": "PLCR_PRAGMA_CLANG(_p) _Pragma(_p) #else # define PLCR_PRAGMA_CLANG(_p) #endif #ifdef __clang__ # define PLCR_DEPRECATED __attribute__((deprecated)) #else # define PLCR_DEPRECATED #endif #if defined(__clang__) || defined(__GNUC__) # define PLCR_UNUSED __attribute__((unused)) #else # define PLCR_UNUSED #endif #ifdef PLCR_PRIVATE # define PLCR_EXTERNAL_DEPRECATED # define PLCR_EXTERNAL_DEPRECATED_NOWARN_PUSH() \\ PLCR_PRAGMA_CLANG(\"clang diagnostic push\")"
  },
  {
    "label": "PLCR_PRAGMA_CLANG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "PLCR_PRAGMA_CLANG(\"clang diagnostic ignored \\\"-Wdocumentation-deprecated-sync\\\"\") # define PLCR_EXTERNAL_DEPRECATED_NOWARN_POP() PLCR_PRAGMA_CLANG(\"clang diagnostic pop\") #else # define PLCR_EXTERNAL_DEPRECATED PLCR_DEPRECATED # define PLCR_EXTERNAL_DEPRECATED_NOWARN_PUSH() # define PLCR_EXTERNAL_DEPRECATED_NOWARN_PUSH() #endif #ifdef PLCR_PRIVATE # if defined(__clang__) && __has_feature(cxx_attributes) && __has_warning(\"-Wimplicit-fallthrough\")"
  }
]