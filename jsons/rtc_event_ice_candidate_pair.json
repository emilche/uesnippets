[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LoggedIceCandidatePairEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedIceCandidatePairEvent"
  },
  {
    "label": "RtcEventIceCandidatePair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventIceCandidatePair"
  },
  {
    "label": "LoggedIceCandidatePairEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_ICE_CANDIDATE_PAIR_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_ICE_CANDIDATE_PAIR_H_ # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" namespace webrtc { enum class IceCandidatePairEventType { kCheckSent,kCheckReceived,kCheckResponseSent,kCheckResponseReceived,kNumValues,} ; struct LoggedIceCandidatePairEvent {)",
    "insertText": "LoggedIceCandidatePairEvent()"
  },
  {
    "label": "LoggedIceCandidatePairEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedIceCandidatePairEvent(Timestamp timestamp, IceCandidatePairEventType type, uint32_t candidate_pair_id, uint32_t transaction_id) : timestamp(timestamp), type(type), candidate_pair_id(candidate_pair_id), transaction_id(transaction_id)"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "RtcEventIceCandidatePair()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairEventType type ; uint32_t candidate_pair_id ; uint32_t transaction_id ; } ; class RtcEventIceCandidatePair final : public RtcEvent { public : Type kType = Type::IceCandidatePairEvent ;)",
    "insertText": "RtcEventIceCandidatePair(IceCandidatePairEventType type, uint32_t candidate_pair_id, uint32_t transaction_id)"
  },
  {
    "label": "RtcEventIceCandidatePair()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventIceCandidatePair()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairEventType)",
    "insertText": "type()"
  },
  {
    "label": "RtcEventIceCandidatePair()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventIceCandidatePair(const RtcEventIceCandidatePair& other)"
  }
]