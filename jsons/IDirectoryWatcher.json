[
  {
    "label": "FFileChangeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileChangeData"
  },
  {
    "label": "EFileChangeAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFileChangeAction"
  },
  {
    "label": "IDirectoryWatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDirectoryWatcher"
  },
  {
    "label": "WatchOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WatchOptions"
  },
  {
    "label": "FFileChangeData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Paths . h \" struct FFileChangeData { enum EFileChangeAction { FCA_Unknown,FCA_Added,FCA_Modified,FCA_Removed,FCA_RescanRequired,} ;)",
    "insertText": "FFileChangeData(const FString& InFilename, EFileChangeAction InAction) : Filename(InFilename) , Action(InAction)"
  },
  {
    "label": "MakeStandardFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeStandardFilename(Filename)"
  },
  {
    "label": "IncludeDirectoryChanges()",
    "kind": "Method",
    "detail": "Function (} FString Filename ; int64 TimeStamp = 0 ; EFileChangeAction Action = EFileChangeAction::FCA_Unknown ; } ; class IDirectoryWatcher { public : enum WatchOptions : uint32 {)",
    "insertText": "IncludeDirectoryChanges(1<<0), IgnoreChangesInSubtree = (1<<1)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FDirectoryChanged, const TArray<struct FFileChangeData>&)"
  },
  {
    "label": "IDirectoryWatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IDirectoryWatcher()"
  },
  {
    "label": "RegisterDirectoryChangedCallback_Handle()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "RegisterDirectoryChangedCallback_Handle(const FString& Directory, const FDirectoryChanged& InDelegate, FDelegateHandle& OutHandle, uint32 Flags = 0)"
  },
  {
    "label": "UnregisterDirectoryChangedCallback_Handle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDirectoryChangedCallback_Handle(const FString& Directory, FDelegateHandle InHandle)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DumpStats()"
  }
]