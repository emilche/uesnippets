[
  {
    "label": "endpoint_formats",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "endpoint_formats"
  },
  {
    "label": "quant_method",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "quant_method"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "partition_metrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "partition_metrics"
  },
  {
    "label": "partition_lines3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "partition_lines3"
  },
  {
    "label": "partition_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "partition_info"
  },
  {
    "label": "decimation_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "decimation_info"
  },
  {
    "label": "block_mode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "block_mode"
  },
  {
    "label": "decimation_mode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "decimation_mode"
  },
  {
    "label": "block_size_descriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "block_size_descriptor"
  },
  {
    "label": "image_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "image_block"
  },
  {
    "label": "endpoints",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "endpoints"
  },
  {
    "label": "endpoints_and_weights",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "endpoints_and_weights"
  },
  {
    "label": "encoding_choice_errors",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "encoding_choice_errors"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "dt_init_working_buffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dt_init_working_buffers"
  },
  {
    "label": "quant_and_transfer_table",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "quant_and_transfer_table"
  },
  {
    "label": "symbolic_compressed_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symbolic_compressed_block"
  },
  {
    "label": "physical_compressed_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "physical_compressed_block"
  },
  {
    "label": "pixel_region_args",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pixel_region_args"
  },
  {
    "label": "avg_args",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "avg_args"
  },
  {
    "label": "TraceLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceLog"
  },
  {
    "label": "astcenc_contexti",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "astcenc_contexti"
  },
  {
    "label": "vfloat4()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vfloat4(data_r[index],\n\t\t               data_g[index],\n\t\t               data_b[index],\n\t\t               data_a[index])"
  },
  {
    "label": "vfloat3()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vfloat3(data_r[index],\n\t\t               data_g[index],\n\t\t               data_b[index])"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "any(lane_mask & color_mask)"
  },
  {
    "label": "init_block_size_descriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_block_size_descriptor(\n\tunsigned int x_texels,\n\tunsigned int y_texels,\n\tunsigned int z_texels,\n\tbool can_omit_modes,\n\tunsigned int partition_count_cutoff,\n\tfloat mode_cutoff,\n\tblock_size_descriptor& bsd)"
  },
  {
    "label": "init_partition_tables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_partition_tables(\n\tblock_size_descriptor& bsd,\n\tbool can_omit_partitionings,\n\tunsigned int partition_count_cutoff)"
  },
  {
    "label": "is_legal_2d_block_size()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_legal_2d_block_size(\n\tunsigned int xdim,\n\tunsigned int ydim)"
  },
  {
    "label": "is_legal_3d_block_size()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_legal_3d_block_size(\n\tunsigned int xdim,\n\tunsigned int ydim,\n\tunsigned int zdim)"
  },
  {
    "label": "encode_ise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "encode_ise(\n\tquant_method quant_level,\n\tunsigned int character_count,\n\tconst uint8_t* input_data,\n\tuint8_t* output_data,\n\tunsigned int bit_offset)"
  },
  {
    "label": "decode_ise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_ise(\n\tquant_method quant_level,\n\tunsigned int character_count,\n\tconst uint8_t* input_data,\n\tuint8_t* output_data,\n\tunsigned int bit_offset)"
  },
  {
    "label": "get_ise_sequence_bitcount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_ise_sequence_bitcount(\n\tunsigned int character_count,\n\tquant_method quant_level)"
  },
  {
    "label": "compute_avgs_and_dirs_2_comp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_avgs_and_dirs_2_comp(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tunsigned int component1,\n\tunsigned int component2,\n\tpartition_metrics pm[BLOCK_MAX_PARTITIONS])"
  },
  {
    "label": "compute_avgs_and_dirs_3_comp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_avgs_and_dirs_3_comp(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tunsigned int omitted_component,\n\tpartition_metrics pm[BLOCK_MAX_PARTITIONS])"
  },
  {
    "label": "compute_avgs_and_dirs_3_comp_rgb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_avgs_and_dirs_3_comp_rgb(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tpartition_metrics pm[BLOCK_MAX_PARTITIONS])"
  },
  {
    "label": "compute_avgs_and_dirs_4_comp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_avgs_and_dirs_4_comp(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tpartition_metrics pm[BLOCK_MAX_PARTITIONS])"
  },
  {
    "label": "compute_error_squared_rgb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_error_squared_rgb(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tpartition_lines3 plines[BLOCK_MAX_PARTITIONS],\n\tfloat& uncor_error,\n\tfloat& samec_error)"
  },
  {
    "label": "compute_error_squared_rgba()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_error_squared_rgba(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tconst processed_line4 uncor_plines[BLOCK_MAX_PARTITIONS],\n\tconst processed_line4 samec_plines[BLOCK_MAX_PARTITIONS],\n\tfloat uncor_lengths[BLOCK_MAX_PARTITIONS],\n\tfloat samec_lengths[BLOCK_MAX_PARTITIONS],\n\tfloat& uncor_error,\n\tfloat& samec_error)"
  },
  {
    "label": "find_best_partition_candidates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "find_best_partition_candidates(\n\tconst block_size_descriptor& bsd,\n\tconst image_block& blk,\n\tunsigned int partition_count,\n\tunsigned int partition_search_limit,\n\tunsigned int best_partitions[TUNE_MAX_PARTITIIONING_CANDIDATES],\n\tunsigned int requested_candidates)"
  },
  {
    "label": "init_compute_averages()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "init_compute_averages(\n\tconst astcenc_image& img,\n\tunsigned int alpha_kernel_radius,\n\tconst astcenc_swizzle& swz,\n\tavg_args& ag)"
  },
  {
    "label": "compute_pixel_region_variance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_pixel_region_variance(\n\tastcenc_contexti& ctx,\n\tconst pixel_region_args& arg)"
  },
  {
    "label": "load_image_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_image_block(\n\tastcenc_profile decode_mode,\n\tconst astcenc_image& img,\n\timage_block& blk,\n\tconst block_size_descriptor& bsd,\n\tunsigned int xpos,\n\tunsigned int ypos,\n\tunsigned int zpos,\n\tconst astcenc_swizzle& swz)"
  },
  {
    "label": "load_image_block_fast_ldr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_image_block_fast_ldr(\n\tastcenc_profile decode_mode,\n\tconst astcenc_image& img,\n\timage_block& blk,\n\tconst block_size_descriptor& bsd,\n\tunsigned int xpos,\n\tunsigned int ypos,\n\tunsigned int zpos,\n\tconst astcenc_swizzle& swz)"
  },
  {
    "label": "store_image_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "store_image_block(\n\tastcenc_image& img,\n\tconst image_block& blk,\n\tconst block_size_descriptor& bsd,\n\tunsigned int xpos,\n\tunsigned int ypos,\n\tunsigned int zpos,\n\tconst astcenc_swizzle& swz)"
  },
  {
    "label": "compute_ideal_colors_and_weights_1plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_ideal_colors_and_weights_1plane(\n\tconst image_block& blk,\n\tconst partition_info& pi,\n\tendpoints_and_weights& ei)"
  },
  {
    "label": "compute_ideal_colors_and_weights_2planes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_ideal_colors_and_weights_2planes(\n\tconst block_size_descriptor& bsd,\n\tconst image_block& blk,\n\tunsigned int plane2_component,\n\tendpoints_and_weights& ei1,\n\tendpoints_and_weights& ei2)"
  },
  {
    "label": "compute_ideal_weights_for_decimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_ideal_weights_for_decimation(\n\tconst endpoints_and_weights& ei,\n\tconst decimation_info& di,\n\tfloat* dec_weight_ideal_value)"
  },
  {
    "label": "compute_quantized_weights_for_decimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_quantized_weights_for_decimation(\n\tconst decimation_info& di,\n\tfloat low_bound,\n\tfloat high_bound,\n\tconst float* dec_weight_ideal_value,\n\tfloat* dec_weight_quant_uvalue,\n\tuint8_t* dec_weight_uquant,\n\tquant_method quant_level)"
  },
  {
    "label": "compute_error_of_weight_set_1plane()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "compute_error_of_weight_set_1plane(\n\tconst endpoints_and_weights& eai,\n\tconst decimation_info& di,\n\tconst float* dec_weight_quant_uvalue)"
  },
  {
    "label": "compute_error_of_weight_set_2planes()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "compute_error_of_weight_set_2planes(\n\tconst endpoints_and_weights& eai1,\n\tconst endpoints_and_weights& eai2,\n\tconst decimation_info& di,\n\tconst float* dec_weight_quant_uvalue_plane1,\n\tconst float* dec_weight_quant_uvalue_plane2)"
  },
  {
    "label": "pack_color_endpoints()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "pack_color_endpoints(\n\tvfloat4 color0,\n\tvfloat4 color1,\n\tvfloat4 rgbs_color,\n\tvfloat4 rgbo_color,\n\tint format,\n\tuint8_t* output,\n\tquant_method quant_level)"
  },
  {
    "label": "unpack_color_endpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unpack_color_endpoints(\n\tastcenc_profile decode_mode,\n\tint format,\n\tquant_method quant_level,\n\tconst uint8_t* input,\n\tbool& rgb_hdr,\n\tbool& alpha_hdr,\n\tvint4& output0,\n\tvint4& output1)"
  },
  {
    "label": "unpack_weights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unpack_weights(\n\tconst block_size_descriptor& bsd,\n\tconst symbolic_compressed_block& scb,\n\tconst decimation_info& di,\n\tbool is_dual_plane,\n\tint weights_plane1[BLOCK_MAX_TEXELS],\n\tint weights_plane2[BLOCK_MAX_TEXELS])"
  },
  {
    "label": "compute_ideal_endpoint_formats()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "compute_ideal_endpoint_formats(\n\tconst partition_info& pi,\n\tconst image_block& blk,\n\tconst endpoints& ep,\n\tconst int8_t* qwt_bitcounts,\n\tconst float* qwt_errors,\n\tunsigned int tune_candidate_limit,\n\tunsigned int start_block_mode,\n\tunsigned int end_block_mode,\n\tuint8_t partition_format_specifiers[TUNE_MAX_TRIAL_CANDIDATES][BLOCK_MAX_PARTITIONS],\n\tint block_mode[TUNE_MAX_TRIAL_CANDIDATES],\n\tquant_method quant_level[TUNE_MAX_TRIAL_CANDIDATES],\n\tquant_method quant_level_mod[TUNE_MAX_TRIAL_CANDIDATES],\n\tcompression_working_buffers& tmpbuf)"
  },
  {
    "label": "recompute_ideal_colors_1plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recompute_ideal_colors_1plane(\n\tconst image_block& blk,\n\tconst partition_info& pi,\n\tconst decimation_info& di,\n\tconst uint8_t* dec_weights_uquant,\n\tendpoints& ep,\n\tvfloat4 rgbs_vectors[BLOCK_MAX_PARTITIONS],\n\tvfloat4 rgbo_vectors[BLOCK_MAX_PARTITIONS])"
  },
  {
    "label": "recompute_ideal_colors_2planes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recompute_ideal_colors_2planes(\n\tconst image_block& blk,\n\tconst block_size_descriptor& bsd,\n\tconst decimation_info& di,\n\tconst uint8_t* dec_weights_uquant_plane1,\n\tconst uint8_t* dec_weights_uquant_plane2,\n\tendpoints& ep,\n\tvfloat4& rgbs_vector,\n\tvfloat4& rgbo_vector,\n\tint plane2_component)"
  },
  {
    "label": "prepare_angular_tables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prepare_angular_tables()"
  },
  {
    "label": "compute_angular_endpoints_1plane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_angular_endpoints_1plane(\n\tbool only_always,\n\tconst block_size_descriptor& bsd,\n\tconst float* dec_weight_ideal_value,\n\tunsigned int max_weight_quant,\n\tcompression_working_buffers& tmpbuf)"
  },
  {
    "label": "compute_angular_endpoints_2planes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_angular_endpoints_2planes(\n\tconst block_size_descriptor& bsd,\n\tconst float* dec_weight_ideal_value,\n\tunsigned int max_weight_quant,\n\tcompression_working_buffers& tmpbuf)"
  },
  {
    "label": "compress_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compress_block(\n\tconst astcenc_contexti& ctx,\n\tconst image_block& blk,\n\tphysical_compressed_block& pcb,\n\tcompression_working_buffers& tmpbuf)"
  },
  {
    "label": "decompress_symbolic_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decompress_symbolic_block(\n\tastcenc_profile decode_mode,\n\tconst block_size_descriptor& bsd,\n\tint xpos,\n\tint ypos,\n\tint zpos,\n\tconst symbolic_compressed_block& scb,\n\timage_block& blk)"
  },
  {
    "label": "compute_symbolic_block_difference_2plane()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "compute_symbolic_block_difference_2plane(\n\tconst astcenc_config& config,\n\tconst block_size_descriptor& bsd,\n\tconst symbolic_compressed_block& scb,\n\tconst image_block& blk)"
  },
  {
    "label": "compute_symbolic_block_difference_1plane()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "compute_symbolic_block_difference_1plane(\n\tconst astcenc_config& config,\n\tconst block_size_descriptor& bsd,\n\tconst symbolic_compressed_block& scb,\n\tconst image_block& blk)"
  },
  {
    "label": "compute_symbolic_block_difference_1plane_1partition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "compute_symbolic_block_difference_1plane_1partition(\n\tconst astcenc_config& config,\n\tconst block_size_descriptor& bsd,\n\tconst symbolic_compressed_block& scb,\n\tconst image_block& blk)"
  },
  {
    "label": "symbolic_to_physical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "symbolic_to_physical(\n\tconst block_size_descriptor& bsd,\n\tconst symbolic_compressed_block& scb,\n\tphysical_compressed_block& pcb)"
  },
  {
    "label": "physical_to_symbolic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "physical_to_symbolic(\n\tconst block_size_descriptor& bsd,\n\tconst physical_compressed_block& pcb,\n\tsymbolic_compressed_block& scb)"
  },
  {
    "label": "cpu_supports_popcnt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "cpu_supports_popcnt()"
  },
  {
    "label": "cpu_supports_f16c()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "cpu_supports_f16c()"
  },
  {
    "label": "cpu_supports_sse41()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "cpu_supports_sse41()"
  },
  {
    "label": "cpu_supports_avx2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "cpu_supports_avx2()"
  }
]