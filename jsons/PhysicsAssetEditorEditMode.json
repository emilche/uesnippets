[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FPhysicsAssetEditorSharedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsAssetEditorSharedData"
  },
  {
    "label": "FPhysicsAssetEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsAssetEditor"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FPhysicsAssetEditorEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsAssetEditorEditMode"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "FPhysicsAssetEditorEditMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UnrealWidgetFwd . h \" # include \" IPersonaEditMode . h \" # include \" PhysicsEngine / ShapeElem . h \" class FCanvas ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; struct FViewportClick ; class FPhysicsAssetEditorSharedData ; class FPhysicsAssetEditor ; class UFont ; class FPhysicsAssetEditorEditMode : public IPersonaEditMode { public : FName ModeName ;)",
    "insertText": "FPhysicsAssetEditorEditMode()"
  },
  {
    "label": "SetSharedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedData(const TSharedRef<FPhysicsAssetEditor>& InPhysicsAssetEditor, FPhysicsAssetEditorSharedData& InSharedData)"
  },
  {
    "label": "GetCameraTarget()",
    "kind": "Method",
    "detail": "Function (PhysicsAssetEditorPtr = InPhysicsAssetEditor ; SharedData =& InSharedData ; } ; bool)",
    "insertText": "GetCameraTarget(FSphere& OutTarget)"
  },
  {
    "label": "GetAnimPreviewScene()",
    "kind": "Method",
    "detail": "Function (class IPersonaPreviewScene&)",
    "insertText": "GetAnimPreviewScene()"
  },
  {
    "label": "GetOnScreenDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOnScreenDebugInfo(TArray<FText>& OutDebugInfo)"
  },
  {
    "label": "StartTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "EndTracking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTracking(FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 ControllerId, FKey Key, float Delta, float DeltaTime)"
  },
  {
    "label": "InputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputDelta(FEditorViewportClient* InViewportClient, FViewport* InViewport, FVector& InDrag, FRotator& InRot, FVector& InScale)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient, float DeltaTime)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "AllowWidgetMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowWidgetMove()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy *HitProxy, const FViewportClick &Click)"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(FEditorModeID OtherModeID)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LostFocus(FEditorViewportClient* ViewportClient, FViewport* Viewport)"
  },
  {
    "label": "BeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginTransform(const FGizmoState& InState)"
  },
  {
    "label": "EndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndTransform(const FGizmoState& InState)"
  },
  {
    "label": "SimMousePress()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SimMousePress(FEditorViewportClient* InViewportClient, FKey Key)"
  },
  {
    "label": "SimMouseMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimMouseMove(FEditorViewportClient* InViewportClient, float DeltaX, float DeltaY)"
  },
  {
    "label": "SimMouseRelease()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimMouseRelease()"
  },
  {
    "label": "SimMouseWheelUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimMouseWheelUp(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "SimMouseWheelDown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimMouseWheelDown(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "CycleSelectedConstraintOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleSelectedConstraintOrientation()"
  },
  {
    "label": "ModifyPrimitiveSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyPrimitiveSize(int32 BodyIndex, EAggCollisionShape::Type PrimType, int32 PrimIndex, FVector DeltaSize)"
  },
  {
    "label": "HitNothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HitNothing(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "CycleTransformMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleTransformMode()"
  },
  {
    "label": "OpenBodyMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenBodyMenu(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "OpenConstraintMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenConstraintMenu(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "OpenSelectionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSelectionMenu(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "GetConstraintFrameForWidget()",
    "kind": "Method",
    "detail": "Function (EConstraintFrame::Type)",
    "insertText": "GetConstraintFrameForWidget()"
  },
  {
    "label": "HandleBeginTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBeginTransform()"
  },
  {
    "label": "HandleEndTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEndTransform(FEditorViewportClient* InViewportClient)"
  },
  {
    "label": "UpdateCoM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCoM()"
  },
  {
    "label": "CalculateCoMNudgeForWorldSpacePosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CalculateCoMNudgeForWorldSpacePosition(const int32 BodyIndex, const FVector& CoMPositionWorldSpace)"
  }
]