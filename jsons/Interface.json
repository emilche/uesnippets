[
  {
    "label": "PortElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PortElement"
  },
  {
    "label": "Input",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Input"
  },
  {
    "label": "Output",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Output"
  },
  {
    "label": "InterfaceElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterfaceElement"
  },
  {
    "label": "Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Node"
  },
  {
    "label": "NodeDef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeDef"
  },
  {
    "label": "MX_CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_CORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PortElement()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_INTERFACE_H # define MATERIALX_INTERFACE_H # include<MaterialXCore / Export . h> # include<MaterialXCore / Geom . h> MATERIALX_NAMESPACE_BEGIN class PortElement ; class Input ; class Output ; class InterfaceElement ; class Node ; class NodeDef ; using PortElementPtr = shared_ptr<PortElement> ; using ConstPortElementPtr = shared_ptr<const PortElement> ; using InputPtr = shared_ptr<Input> ; using ConstInputPtr = shared_ptr<const Input> ; using OutputPtr = shared_ptr<Output> ; using ConstOutputPtr = shared_ptr<const Output> ; using InterfaceElementPtr = shared_ptr<InterfaceElement> ; using ConstInterfaceElementPtr = shared_ptr<const InterfaceElement> ; using CharSet = std::set<char> ; class PortElement : public ValueElement { protected :)",
    "insertText": "PortElement(ElementPtr parent, const string& category, const string& name) : ValueElement(parent, category, name)"
  },
  {
    "label": "PortElement()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "PortElement()"
  },
  {
    "label": "setNodeName()",
    "kind": "Method",
    "detail": "Function (} protected : using NodePtr = shared_ptr<Node> ; public : void)",
    "insertText": "setNodeName(const string& node)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NODE_NAME_ATTRIBUTE, node)"
  },
  {
    "label": "hasNodeName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNodeName()"
  },
  {
    "label": "getNodeName()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNodeName()"
  },
  {
    "label": "setNodeGraphString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNodeGraphString(const string& node)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NODE_GRAPH_ATTRIBUTE, node)"
  },
  {
    "label": "hasNodeGraphString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNodeGraphString()"
  },
  {
    "label": "getNodeGraphString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNodeGraphString()"
  },
  {
    "label": "setOutputString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOutputString(const string& output)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(OUTPUT_ATTRIBUTE, output)"
  },
  {
    "label": "hasOutputString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasOutputString()"
  },
  {
    "label": "setConnectedOutput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setConnectedOutput(ConstOutputPtr output)"
  },
  {
    "label": "getConnectedOutput()",
    "kind": "Method",
    "detail": "Function (OutputPtr)",
    "insertText": "getConnectedOutput()"
  },
  {
    "label": "getOutputString()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getOutputString()"
  },
  {
    "label": "setChannels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setChannels(const string& channels)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(CHANNELS_ATTRIBUTE, channels)"
  },
  {
    "label": "hasChannels()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasChannels()"
  },
  {
    "label": "getChannels()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getChannels()"
  },
  {
    "label": "validChannelsCharacters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "validChannelsCharacters(const string& channels, const string& sourceType)"
  },
  {
    "label": "validChannelsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validChannelsString(const string& channels, const string& sourceType, const string& destinationType)"
  },
  {
    "label": "setConnectedNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedNode(NodePtr node)"
  },
  {
    "label": "getConnectedNode()",
    "kind": "Method",
    "detail": "Function (NodePtr)",
    "insertText": "getConnectedNode()"
  },
  {
    "label": "validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "validate(string* message = nullptr)"
  },
  {
    "label": "Input()",
    "kind": "Method",
    "detail": "Function (public : const string NODE_NAME_ATTRIBUTE ; const string NODE_GRAPH_ATTRIBUTE ; const string OUTPUT_ATTRIBUTE ; const string CHANNELS_ATTRIBUTE ; private : const std::unordered_map<string,CharSet> CHANNELS_CHARACTER_SET ; const std::unordered_map<string,size_t> CHANNELS_PATTERN_LENGTH ; } ; class Input : public PortElement { public :)",
    "insertText": "Input(ElementPtr parent, const string& name) : PortElement(parent, CATEGORY, name)"
  },
  {
    "label": "Input()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Input()"
  },
  {
    "label": "setDefaultGeomPropString()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "setDefaultGeomPropString(const string& geomprop)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(DEFAULT_GEOM_PROP_ATTRIBUTE, geomprop)"
  },
  {
    "label": "hasDefaultGeomPropString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDefaultGeomPropString()"
  },
  {
    "label": "getDefaultGeomPropString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getDefaultGeomPropString()"
  },
  {
    "label": "getDefaultGeomProp()",
    "kind": "Method",
    "detail": "Function (} GeomPropDefPtr)",
    "insertText": "getDefaultGeomProp()"
  },
  {
    "label": "getInterfaceInput()",
    "kind": "Method",
    "detail": "Function (InputPtr)",
    "insertText": "getInterfaceInput()"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; const string DEFAULT_GEOM_PROP_ATTRIBUTE ; } ; class Output : public PortElement { public :)",
    "insertText": "Output(ElementPtr parent, const string& name) : PortElement(parent, CATEGORY, name)"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Output()"
  },
  {
    "label": "getUpstreamEdge()",
    "kind": "Method",
    "detail": "Function (} public : Edge)",
    "insertText": "getUpstreamEdge(size_t index = 0)"
  },
  {
    "label": "getUpstreamEdgeCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "getUpstreamEdgeCount()"
  },
  {
    "label": "InterfaceElement()",
    "kind": "Method",
    "detail": "Function (public : const string CATEGORY ; const string DEFAULT_INPUT_ATTRIBUTE ; } ; class InterfaceElement : public TypedElement { protected :)",
    "insertText": "InterfaceElement(ElementPtr parent, const string& category, const string& name) : TypedElement(parent, category, name), _inputCount(0), _outputCount(0)"
  },
  {
    "label": "InterfaceElement()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "InterfaceElement()"
  },
  {
    "label": "setNodeDefString()",
    "kind": "Method",
    "detail": "Function (} protected : using NodeDefPtr = shared_ptr<NodeDef> ; using ConstNodeDefPtr = shared_ptr<const NodeDef> ; public : void)",
    "insertText": "setNodeDefString(const string& nodeDef)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(NODE_DEF_ATTRIBUTE, nodeDef)"
  },
  {
    "label": "hasNodeDefString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasNodeDefString()"
  },
  {
    "label": "getNodeDefString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getNodeDefString()"
  },
  {
    "label": "addInput()",
    "kind": "Method",
    "detail": "Function (} InputPtr)",
    "insertText": "addInput(const string& name = EMPTY_STRING, const string& type = DEFAULT_TYPE_STRING)"
  },
  {
    "label": "Input()",
    "kind": "Method",
    "detail": "Function (InputPtr child = addChild<)",
    "insertText": "Input(name)"
  },
  {
    "label": "setType()",
    "kind": "Method",
    "detail": "Function (child ->)",
    "insertText": "setType(type)"
  },
  {
    "label": "getInputs()",
    "kind": "Method",
    "detail": "Function (} vector<InputPtr>)",
    "insertText": "getInputs()"
  },
  {
    "label": "getInputCount()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getInputCount()"
  },
  {
    "label": "getActiveInput()",
    "kind": "Method",
    "detail": "Function (} InputPtr)",
    "insertText": "getActiveInput(const string& name)"
  },
  {
    "label": "getActiveInputs()",
    "kind": "Method",
    "detail": "Function (vector<InputPtr>)",
    "insertText": "getActiveInputs()"
  },
  {
    "label": "addOutput()",
    "kind": "Method",
    "detail": "Function (OutputPtr)",
    "insertText": "addOutput(const string& name = EMPTY_STRING, const string& type = DEFAULT_TYPE_STRING)"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (OutputPtr output = addChild<)",
    "insertText": "Output(name)"
  },
  {
    "label": "getOutputs()",
    "kind": "Method",
    "detail": "Function (} vector<OutputPtr>)",
    "insertText": "getOutputs()"
  },
  {
    "label": "getOutputCount()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getOutputCount()"
  },
  {
    "label": "getActiveOutput()",
    "kind": "Method",
    "detail": "Function (} OutputPtr)",
    "insertText": "getActiveOutput(const string& name)"
  },
  {
    "label": "getActiveOutputs()",
    "kind": "Method",
    "detail": "Function (vector<OutputPtr>)",
    "insertText": "getActiveOutputs()"
  },
  {
    "label": "setConnectedOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConnectedOutput(const string& inputName, OutputPtr output)"
  },
  {
    "label": "getConnectedOutput()",
    "kind": "Method",
    "detail": "Function (OutputPtr)",
    "insertText": "getConnectedOutput(const string& inputName)"
  },
  {
    "label": "addToken()",
    "kind": "Method",
    "detail": "Function (TokenPtr)",
    "insertText": "addToken(const string& name = EMPTY_STRING)"
  },
  {
    "label": "getToken()",
    "kind": "Method",
    "detail": "Function (} TokenPtr)",
    "insertText": "getToken(const string& name)"
  },
  {
    "label": "getTokens()",
    "kind": "Method",
    "detail": "Function (} vector<TokenPtr>)",
    "insertText": "getTokens()"
  },
  {
    "label": "removeToken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeToken(const string& name)"
  },
  {
    "label": "Token()",
    "kind": "Method",
    "detail": "Function (removeChildOfType<)",
    "insertText": "Token(name)"
  },
  {
    "label": "getActiveToken()",
    "kind": "Method",
    "detail": "Function (} TokenPtr)",
    "insertText": "getActiveToken(const string& name)"
  },
  {
    "label": "getActiveTokens()",
    "kind": "Method",
    "detail": "Function (vector<TokenPtr>)",
    "insertText": "getActiveTokens()"
  },
  {
    "label": "getValueElement()",
    "kind": "Method",
    "detail": "Function (ValueElementPtr)",
    "insertText": "getValueElement(const string& name)"
  },
  {
    "label": "getActiveValueElement()",
    "kind": "Method",
    "detail": "Function (} ValueElementPtr)",
    "insertText": "getActiveValueElement(const string& name)"
  },
  {
    "label": "getActiveValueElements()",
    "kind": "Method",
    "detail": "Function (vector<ValueElementPtr>)",
    "insertText": "getActiveValueElements()"
  },
  {
    "label": "setInputValue()",
    "kind": "Method",
    "detail": "Function (template<class T> InputPtr)",
    "insertText": "setInputValue(const string& name, const T& value, const string& type = EMPTY_STRING)"
  },
  {
    "label": "getInputValue()",
    "kind": "Method",
    "detail": "Function (ValuePtr)",
    "insertText": "getInputValue(const string& name, const string& target = EMPTY_STRING)"
  },
  {
    "label": "setTokenValue()",
    "kind": "Method",
    "detail": "Function (TokenPtr)",
    "insertText": "setTokenValue(const string& name, const string& value)"
  },
  {
    "label": "getToken()",
    "kind": "Method",
    "detail": "Function (TokenPtr token =)",
    "insertText": "getToken(name)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (token -> setValue<)",
    "insertText": "string(value)"
  },
  {
    "label": "setTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTarget(const string& target)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(TARGET_ATTRIBUTE, target)"
  },
  {
    "label": "hasTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasTarget()"
  },
  {
    "label": "getTarget()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getTarget()"
  },
  {
    "label": "setVersionString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVersionString(const string& version)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(VERSION_ATTRIBUTE, version)"
  },
  {
    "label": "hasVersionString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasVersionString()"
  },
  {
    "label": "getVersionString()",
    "kind": "Method",
    "detail": "Function (} const string&)",
    "insertText": "getVersionString()"
  },
  {
    "label": "setVersionIntegers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVersionIntegers(int majorVersion, int minorVersion)"
  },
  {
    "label": "getVersionIntegers()",
    "kind": "Method",
    "detail": "Function (std::pair<int,int>)",
    "insertText": "getVersionIntegers()"
  },
  {
    "label": "setDefaultVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDefaultVersion(bool defaultVersion)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (setTypedAttribute<)",
    "insertText": "bool(DEFAULT_VERSION_ATTRIBUTE, defaultVersion)"
  },
  {
    "label": "getDefaultVersion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "getDefaultVersion()"
  },
  {
    "label": "getDeclaration()",
    "kind": "Method",
    "detail": "Function (} ConstNodeDefPtr)",
    "insertText": "getDeclaration(const string& target = EMPTY_STRING)"
  },
  {
    "label": "hasExactInputMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasExactInputMatch(ConstInterfaceElementPtr declaration, string* message = nullptr)"
  },
  {
    "label": "registerChildElement()",
    "kind": "Method",
    "detail": "Function (public : const string NODE_DEF_ATTRIBUTE ; const string TARGET_ATTRIBUTE ; const string VERSION_ATTRIBUTE ; const string DEFAULT_VERSION_ATTRIBUTE ; protected : void)",
    "insertText": "registerChildElement(ElementPtr child)"
  },
  {
    "label": "unregisterChildElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unregisterChildElement(ElementPtr child)"
  },
  {
    "label": "setInputValue()",
    "kind": "Method",
    "detail": "Function (private : size_t _inputCount ; size_t _outputCount ; } ; template<class T> InputPtr)",
    "insertText": "setInputValue(const string& name, const T& value, const string& type)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (input ->)",
    "insertText": "setValue(value, type)"
  }
]