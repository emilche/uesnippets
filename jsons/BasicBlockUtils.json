[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "MemoryDependenceAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDependenceAnalysis"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "ReturnInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnInst"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "TerminatorInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TerminatorInst"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CriticalEdgeSplittingOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CriticalEdgeSplittingOptions"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "inline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "inline"
  },
  {
    "label": "DeleteDeadBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteDeadBlock(BasicBlock *BB)"
  },
  {
    "label": "FoldSingleEntryPHINodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FoldSingleEntryPHINodes(BasicBlock *BB, AliasAnalysis *AA = nullptr,\n                             MemoryDependenceAnalysis *MemDep = nullptr)"
  },
  {
    "label": "DeleteDeadPHIs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDeadPHIs(BasicBlock *BB, const TargetLibraryInfo *TLI = nullptr)"
  },
  {
    "label": "MergeBlockIntoPredecessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeBlockIntoPredecessor(BasicBlock *BB, DominatorTree *DT = nullptr,\n                               LoopInfo *LI = nullptr,\n                               AliasAnalysis *AA = nullptr,\n                               MemoryDependenceAnalysis *MemDep = nullptr)"
  },
  {
    "label": "ReplaceInstWithValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceInstWithValue(BasicBlock::InstListType &BIL,\n                          BasicBlock::iterator &BI, Value *V)"
  },
  {
    "label": "ReplaceInstWithInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceInstWithInst(BasicBlock::InstListType &BIL,\n                         BasicBlock::iterator &BI, Instruction *I)"
  },
  {
    "label": "ReplaceInstWithInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceInstWithInst(Instruction *From, Instruction *To)"
  },
  {
    "label": "SplitCriticalEdge()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SplitCriticalEdge(TI, i, Options)"
  },
  {
    "label": "SplitLandingPadPredecessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitLandingPadPredecessors(BasicBlock *OrigBB,\n                                 ArrayRef<BasicBlock *> Preds,\n                                 const char *Suffix, const char *Suffix2,\n                                 SmallVectorImpl<BasicBlock *> &NewBBs,\n                                 AliasAnalysis *AA = nullptr,\n                                 DominatorTree *DT = nullptr,\n                                 LoopInfo *LI = nullptr,\n                                 bool PreserveLCSSA = false)"
  },
  {
    "label": "SplitBlockAndInsertIfThenElse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitBlockAndInsertIfThenElse(Value *Cond, Instruction *SplitBefore,\n                                   TerminatorInst **ThenTerm,\n                                   TerminatorInst **ElseTerm,\n                                   MDNode *BranchWeights = nullptr)"
  }
]