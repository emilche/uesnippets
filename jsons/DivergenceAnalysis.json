[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "DivergenceAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DivergenceAnalysis"
  },
  {
    "label": "DivergenceAnalysis()",
    "kind": "Method",
    "detail": "Function (# include \" llvm / ADT / DenseSet . h \" # include \" llvm / IR / Function . h \" # include \" llvm / Pass . h \" namespace llvm { class Value ; class DivergenceAnalysis : public FunctionPass { public : char ID ;)",
    "insertText": "DivergenceAnalysis() : FunctionPass(ID)"
  },
  {
    "label": "initializeDivergenceAnalysisPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeDivergenceAnalysisPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, const Module *)"
  },
  {
    "label": "isDivergent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDivergent(const Value *V)"
  },
  {
    "label": "isUniform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUniform(const Value *V)"
  }
]