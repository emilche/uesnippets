[
  {
    "label": "LowerBoundInternal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / IdentityFunctor . h \" # include \" Templates / Invoke . h \" # include \" Templates / Less . h \" namespace AlgoImpl { template<RangeValueType,SizeType,PredicateValueType,ProjectionType,SortPredicateType> SizeType)",
    "insertText": "LowerBoundInternal(RangeValueType* First, const SizeType Num, const PredicateValueType& Value, ProjectionType Projection, SortPredicateType SortPredicate)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (SizeType Start = 0 ; SizeType Size = Num ;)",
    "insertText": "while(Size > 0)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (const SizeType LeftoverSize = Size % 2 ; Size = Size / 2 ; const SizeType CheckIndex = Start + Size ; const SizeType StartIfLess = CheckIndex + LeftoverSize ; auto&& CheckValue =)",
    "insertText": "Invoke(Projection, First[CheckIndex])"
  },
  {
    "label": "SortPredicate()",
    "kind": "Method",
    "detail": "Function (Start =)",
    "insertText": "SortPredicate(CheckValue, Value)"
  },
  {
    "label": "UpperBoundInternal()",
    "kind": "Method",
    "detail": "Function (} return Start ; } template<RangeValueType,SizeType,PredicateValueType,ProjectionType,SortPredicateType> SizeType)",
    "insertText": "UpperBoundInternal(RangeValueType* First, const SizeType Num, const PredicateValueType& Value, ProjectionType Projection, SortPredicateType SortPredicate)"
  },
  {
    "label": "SortPredicate()",
    "kind": "Method",
    "detail": "Function (Start = !)",
    "insertText": "SortPredicate(Value, CheckValue)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (} return Start ; } } namespace Algo { template<RangeType,ValueType,SortPredicateType> auto)",
    "insertText": "LowerBound(RangeType& Range, const ValueType& Value, SortPredicateType SortPredicate) -> decltype(GetNum(Range))"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType> auto)",
    "insertText": "LowerBound(RangeType& Range, const ValueType& Value) -> decltype(GetNum(Range))"
  },
  {
    "label": "LowerBoundBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,ProjectionType,SortPredicateType> auto)",
    "insertText": "LowerBoundBy(RangeType& Range, const ValueType& Value, ProjectionType Projection, SortPredicateType SortPredicate) -> decltype(GetNum(Range))"
  },
  {
    "label": "LowerBoundBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,ProjectionType> auto)",
    "insertText": "LowerBoundBy(RangeType& Range, const ValueType& Value, ProjectionType Projection) -> decltype(GetNum(Range))"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,SortPredicateType> auto)",
    "insertText": "UpperBound(RangeType& Range, const ValueType& Value, SortPredicateType SortPredicate) -> decltype(GetNum(Range))"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType> auto)",
    "insertText": "UpperBound(RangeType& Range, const ValueType& Value) -> decltype(GetNum(Range))"
  },
  {
    "label": "UpperBoundBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,ProjectionType,SortPredicateType> auto)",
    "insertText": "UpperBoundBy(RangeType& Range, const ValueType& Value, ProjectionType Projection, SortPredicateType SortPredicate) -> decltype(GetNum(Range))"
  },
  {
    "label": "UpperBoundBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,ProjectionType> auto)",
    "insertText": "UpperBoundBy(RangeType& Range, const ValueType& Value, ProjectionType Projection) -> decltype(GetNum(Range))"
  },
  {
    "label": "BinarySearch()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,SortPredicateType> auto)",
    "insertText": "BinarySearch(RangeType& Range, const ValueType& Value, SortPredicateType SortPredicate) -> decltype(GetNum(Range))"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (auto CheckIndex =)",
    "insertText": "LowerBound(Range, Value, SortPredicate)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto&& CheckValue =)",
    "insertText": "GetData(Range)"
  },
  {
    "label": "BinarySearchBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ValueType,ProjectionType,SortPredicateType> auto)",
    "insertText": "BinarySearchBy(RangeType& Range, const ValueType& Value, ProjectionType Projection, SortPredicateType SortPredicate) -> decltype(GetNum(Range))"
  },
  {
    "label": "LowerBoundBy()",
    "kind": "Method",
    "detail": "Function (auto CheckIndex =)",
    "insertText": "LowerBoundBy(Range, Value, Projection, SortPredicate)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (auto&& CheckValue =)",
    "insertText": "Invoke(Projection, GetData(Range)[CheckIndex])"
  }
]