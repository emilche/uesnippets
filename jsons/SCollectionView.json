[
  {
    "label": "FCollectionAssetManagement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionAssetManagement"
  },
  {
    "label": "FDragDropEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropEvent"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSourcesSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourcesSearch"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FHistoryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHistoryData"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SCollectionView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCollectionView"
  },
  {
    "label": "FCollectionContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionContextMenu"
  },
  {
    "label": "FCreateCollectionPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateCollectionPayload"
  },
  {
    "label": "ISourceControlProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlProvider"
  },
  {
    "label": "FScopedPreventSelectionChangedDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedPreventSelectionChangedDelegate"
  },
  {
    "label": "FCollectionDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionDragDropOp"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CollectionManagerTypes . h \" # include \" CollectionViewTypes . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Misc / TextFilter . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateConstants . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FCollectionAssetManagement ; class FDragDropEvent ; class FMenuBuilder ; class FName ; class FSlateRect ; class FSourcesSearch ; class FUICommandList ; class ITableRow ; class SHorizontalBox ; class SWidget ; struct FGeometry ; struct FHistoryData ; struct FKeyEvent ; struct FPointerEvent ; struct FSlateBrush ; class SCollectionView : public SCompoundWidget { class FCollectionContextMenu ; public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCollectionSelected, const FCollectionNameType&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SCollectionView ) : _AllowCollectionButtons(true) , _AllowRightClickMenu(true) , _AllowContextMenu(true) , _IsDocked(false) , _AllowCollectionDrag(false) , _AllowQuickAssetManagement(false) , _ShowSeparator(true)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnCollectionSelected, OnCollectionSelected ) SLATE_ARGUMENT( bool, AllowCollectionButtons ) SLATE_ARGUMENT( bool, AllowRightClickMenu ) SLATE_ARGUMENT( bool, AllowContextMenu ) SLATE_ATTRIBUTE( bool, IsDocked) SLATE_ARGUMENT( bool, AllowCollectionDrag ) SLATE_ARGUMENT( bool, AllowQuickAssetManagement ) SLATE_ARGUMENT( bool, ShowSeparator ) SLATE_ARGUMENT( TSharedPtr<FSourcesSearch>, ExternalSearch ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SetSelectedCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedCollections(const TArray<FCollectionNameType>& CollectionsToSelect, const bool bEnsureVisible = true)"
  },
  {
    "label": "SetExpandedCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpandedCollections(const TArray<FCollectionNameType>& CollectionsToExpand)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "GetSelectedCollections()",
    "kind": "Method",
    "detail": "Function (TArray<FCollectionNameType>)",
    "insertText": "GetSelectedCollections()"
  },
  {
    "label": "SetSelectedAssetPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedAssetPaths(const TArray<FSoftObjectPath>& SelectedAssets)"
  },
  {
    "label": "ApplyHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHistoryData(const FHistoryData& History)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "MakeSaveDynamicCollectionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSaveDynamicCollectionMenu(FText InQueryString, FSimpleDelegate OnSaveSearchClicked = FSimpleDelegate())"
  },
  {
    "label": "OnAddCollectionClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddCollectionClicked()"
  },
  {
    "label": "MakeAddCollectionMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeAddCollectionMenu(TSharedRef<SWidget> MenuParent)"
  },
  {
    "label": "FCreateCollectionPayload()",
    "kind": "Method",
    "detail": "Function (private : struct FCreateCollectionPayload {)",
    "insertText": "FCreateCollectionPayload() : ParentCollection() , OnCollectionCreatedEvent()"
  },
  {
    "label": "FCreateCollectionPayload()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCreateCollectionPayload(TOptional<FCollectionNameType> InParentCollection) : ParentCollection(InParentCollection) , OnCollectionCreatedEvent()"
  },
  {
    "label": "FCreateCollectionPayload()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCreateCollectionPayload(FCollectionItem::FCollectionCreatedEvent InCollectionCreatedEvent) : ParentCollection() , OnCollectionCreatedEvent(InCollectionCreatedEvent)"
  },
  {
    "label": "FCreateCollectionPayload()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCreateCollectionPayload(TOptional<FCollectionNameType> InParentCollection, FCollectionItem::FCollectionCreatedEvent InCollectionCreatedEvent) : ParentCollection(InParentCollection) , OnCollectionCreatedEvent(InCollectionCreatedEvent)"
  },
  {
    "label": "ShouldAllowSelectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (} TOptional<FCollectionNameType> ParentCollection ; FCollectionItem::FCollectionCreatedEvent OnCollectionCreatedEvent ; } ; bool)",
    "insertText": "ShouldAllowSelectionChangedDelegate()"
  },
  {
    "label": "CreateCollectionItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCollectionItem(ECollectionShareType::Type CollectionType, ECollectionStorageMode::Type StorageMode, const FCreateCollectionPayload& InCreationPayload)"
  },
  {
    "label": "RenameCollectionItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameCollectionItem(const TSharedPtr<FCollectionItem>& ItemToRename)"
  },
  {
    "label": "DeleteCollectionItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteCollectionItems(const TArray<TSharedPtr<FCollectionItem>>& ItemsToDelete)"
  },
  {
    "label": "GetCollectionTreeVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCollectionTreeVisibility()"
  },
  {
    "label": "GetHeaderVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetHeaderVisibility()"
  },
  {
    "label": "GetCollectionViewDropTargetBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCollectionViewDropTargetBorder()"
  },
  {
    "label": "GenerateCollectionRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateCollectionRow(TSharedPtr<FCollectionItem> CollectionItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetCollectionItemChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollectionItemChildren(TSharedPtr<FCollectionItem> InParentItem, TArray< TSharedPtr<FCollectionItem> >& OutChildItems)"
  },
  {
    "label": "OnCollectionDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCollectionDragDetected(const FGeometry& Geometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ValidateDragDropOnCollectionTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateDragDropOnCollectionTree(const FGeometry& Geometry, const FDragDropEvent& DragDropEvent, bool& OutIsKnownDragOperation)"
  },
  {
    "label": "HandleDragDropOnCollectionTree()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDropOnCollectionTree(const FGeometry& Geometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "ValidateDragDropOnCollectionItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateDragDropOnCollectionItem(TSharedRef<FCollectionItem> CollectionItem, const FGeometry& Geometry, const FDragDropEvent& DragDropEvent, bool& OutIsKnownDragOperation)"
  },
  {
    "label": "HandleDragDropOnCollectionItem()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDropOnCollectionItem(TSharedRef<FCollectionItem> CollectionItem, const FGeometry& Geometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName PropertyName)"
  },
  {
    "label": "ExpandParentItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandParentItems(const TSharedRef<FCollectionItem>& InCollectionItem)"
  },
  {
    "label": "MakeCollectionTreeContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeCollectionTreeContextMenu()"
  },
  {
    "label": "IsCollectionCheckBoxEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollectionCheckBoxEnabled(TSharedPtr<FCollectionItem> CollectionItem)"
  },
  {
    "label": "IsCollectionChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsCollectionChecked(TSharedPtr<FCollectionItem> CollectionItem)"
  },
  {
    "label": "OnCollectionCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollectionCheckStateChanged(ECheckBoxState NewState, TSharedPtr<FCollectionItem> CollectionItem)"
  },
  {
    "label": "CollectionSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectionSelectionChanged(TSharedPtr< FCollectionItem > CollectionItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "CollectionItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectionItemScrolledIntoView(TSharedPtr<FCollectionItem> CollectionItem, const TSharedPtr<ITableRow>& Widget)"
  },
  {
    "label": "IsCollectionNameReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollectionNameReadOnly()"
  },
  {
    "label": "CollectionNameChangeCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectionNameChangeCommit(const TSharedPtr< FCollectionItem >& CollectionItem, const FString& NewName, bool bChangeConfirmed, FText& OutWarningMessage)"
  },
  {
    "label": "CollectionVerifyRenameCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectionVerifyRenameCommit(const TSharedPtr< FCollectionItem >& CollectionItem, const FString& NewName, const FSlateRect& MessageAnchor, FText& OutErrorMessage)"
  },
  {
    "label": "HandleCollectionCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollectionCreated(const FCollectionNameType& Collection)"
  },
  {
    "label": "HandleCollectionRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollectionRenamed(const FCollectionNameType& OriginalCollection, const FCollectionNameType& NewCollection)"
  },
  {
    "label": "HandleCollectionReparented()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollectionReparented(const FCollectionNameType& Collection, const TOptional<FCollectionNameType>& OldParent, const TOptional<FCollectionNameType>& NewParent)"
  },
  {
    "label": "HandleCollectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollectionDestroyed(const FCollectionNameType& Collection)"
  },
  {
    "label": "HandleCollectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCollectionUpdated(const FCollectionNameType& Collection)"
  },
  {
    "label": "HandleAssetsAddedToCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAssetsAddedToCollection(const FCollectionNameType& Collection, TConstArrayView<FSoftObjectPath> AssetsAdded)"
  },
  {
    "label": "HandleAssetsRemovedFromCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAssetsRemovedFromCollection(const FCollectionNameType& Collection, TConstArrayView<FSoftObjectPath> AssetsRemoved)"
  },
  {
    "label": "HandleSourceControlProviderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSourceControlProviderChanged(class ISourceControlProvider& OldProvider, class ISourceControlProvider& NewProvider)"
  },
  {
    "label": "HandleSourceControlStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSourceControlStateChanged()"
  },
  {
    "label": "UpdateCollectionItemStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollectionItemStatus(const TSharedRef<FCollectionItem>& CollectionItem)"
  },
  {
    "label": "UpdateCollectionItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCollectionItems()"
  },
  {
    "label": "UpdateFilteredCollectionItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFilteredCollectionItems()"
  },
  {
    "label": "SetCollectionsSearchFilterText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollectionsSearchFilterText(const FText& InSearchText, TArray<FText>& OutErrors)"
  },
  {
    "label": "GetCollectionsSearchFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCollectionsSearchFilterText()"
  },
  {
    "label": "MakeSaveSearchMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSaveSearchMenu(FMenuBuilder& InMenuBuilder, FSimpleDelegate OnSaveSearchClicked)"
  },
  {
    "label": "FScopedPreventSelectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (private : class FScopedPreventSelectionChangedDelegate { public :)",
    "insertText": "FScopedPreventSelectionChangedDelegate(const TSharedRef<SCollectionView>& InCollectionView) : CollectionView(InCollectionView)"
  },
  {
    "label": "FScopedPreventSelectionChangedDelegate()",
    "kind": "Method",
    "detail": "Function (CollectionView -> PreventSelectionChangedDelegateCount + + ; } ~)",
    "insertText": "FScopedPreventSelectionChangedDelegate()"
  }
]