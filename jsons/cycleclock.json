[
  {
    "label": "CycleClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CycleClock"
  },
  {
    "label": "CycleClockSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CycleClockSource"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_CYCLECLOCK_H_ # define ABSL_BASE_INTERNAL_CYCLECLOCK_H_ # include<atomic> # include<cstdint> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / internal / cycleclock_config . h \" # include \" absl / base / internal / unscaledcycleclock . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace base_internal { using CycleClockSourceFunc =)",
    "insertText": "int64_t(*)()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (class CycleClock { public : int64_t)",
    "insertText": "Now()"
  },
  {
    "label": "Frequency()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Frequency()"
  },
  {
    "label": "LoadCycleClockSource()",
    "kind": "Method",
    "detail": "Function (private : # if ABSL_USE_UNSCALED_CYCLECLOCK CycleClockSourceFunc)",
    "insertText": "LoadCycleClockSource()"
  },
  {
    "label": "CycleClock()",
    "kind": "Method",
    "detail": "Function (int32_t kShift = kCycleClockShift ; double kFrequencyScale = kCycleClockFrequencyScale ; ABSL_CONST_INIT std::atomic<CycleClockSourceFunc> cycle_clock_source_ ; # endif)",
    "insertText": "CycleClock()"
  },
  {
    "label": "CycleClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleClock(const CycleClock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CycleClock&)",
    "insertText": "operator(const CycleClock&)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (class CycleClockSource ; } ; class CycleClockSource { private : void)",
    "insertText": "Register(CycleClockSourceFunc source)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__x86_64__) if (cycle_clock_source_.load(std::memory_order_relaxed) == nullptr)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "fn()"
  }
]