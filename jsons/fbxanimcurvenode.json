[
  {
    "label": "FbxAnimStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimStack"
  },
  {
    "label": "FbxAnimCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimCurve"
  },
  {
    "label": "FbxMultiMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxMultiMap"
  },
  {
    "label": "KFCurveNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KFCurveNode"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxAnimCurveFilterMatrixConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimCurveFilterMatrixConverter"
  },
  {
    "label": "FbxAnimEvalClassic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAnimEvalClassic"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_ANIMATION_CURVE_NODE_H_ # define _FBXSDK_SCENE_ANIMATION_CURVE_NODE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / fbxsdk_nsbegin . h> # define FBXSDK_CURVENODE_TRANSFORM \" Transform \" # define FBXSDK_CURVENODE_TRANSLATION \" T \" # define FBXSDK_CURVENODE_ROTATION \" R \" # define FBXSDK_CURVENODE_SCALING \" S \" # define FBXSDK_CURVENODE_COMPONENT_X \" X \" # define FBXSDK_CURVENODE_COMPONENT_Y \" Y \" # define FBXSDK_CURVENODE_COMPONENT_Z \" Z \" # define FBXSDK_CURVENODE_COLOR \" Color \" # define FBXSDK_CURVENODE_COLOR_RED FBXSDK_CURVENODE_COMPONENT_X # define FBXSDK_CURVENODE_COLOR_GREEN FBXSDK_CURVENODE_COMPONENT_Y # define FBXSDK_CURVENODE_COLOR_BLUE FBXSDK_CURVENODE_COMPONENT_Z class FbxAnimStack ; class FbxAnimCurve ; class FbxMultiMap ; class KFCurveNode ; class FBXSDK_DLL FbxAnimCurveNode : public FbxObject {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxAnimCurveNode, FbxObject)"
  },
  {
    "label": "IsAnimated()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsAnimated(bool pRecurse=false)"
  },
  {
    "label": "GetAnimationInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAnimationInterval(FbxTimeSpan& pTimeInterval)"
  },
  {
    "label": "IsComposite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComposite()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveNode*)",
    "insertText": "Find(const char* pName)"
  },
  {
    "label": "CreateTypedCurveNode()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveNode*)",
    "insertText": "CreateTypedCurveNode(FbxProperty& pProperty, FbxScene* pScene)"
  },
  {
    "label": "GetChannelsCount()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetChannelsCount()"
  },
  {
    "label": "GetChannelIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetChannelIndex(const char* pChannelName)"
  },
  {
    "label": "GetChannelName()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "GetChannelName(int pChannelId)"
  },
  {
    "label": "ResetChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetChannels()"
  },
  {
    "label": "AddChannel()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "AddChannel(const char* pChnlName, T const &pValue)"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (FbxProperty c =)",
    "insertText": "GetChannel(pChnlName)"
  },
  {
    "label": "FbxGetDataTypeFromEnum()",
    "kind": "Method",
    "detail": "Function (FbxDataType dt =)",
    "insertText": "FbxGetDataTypeFromEnum(FbxTypeOf(pValue))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (c =)",
    "insertText": "Create(mChannels, dt, pChnlName)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "Set(pValue)"
  },
  {
    "label": "EndCreateOrFindProperty()",
    "kind": "Method",
    "detail": "Function (mChannels .)",
    "insertText": "EndCreateOrFindProperty()"
  },
  {
    "label": "SetChannelValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "SetChannelValue(unsigned int pChnlId, T pValue)"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (FbxProperty c =)",
    "insertText": "GetChannel(pChnlId)"
  },
  {
    "label": "GetChannelValue()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "GetChannelValue(const char* pChnlName, T pInitVal)"
  },
  {
    "label": "ConnectToChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectToChannel(FbxAnimCurve* pCurve, const char* pChnl, bool pInFront = false)"
  },
  {
    "label": "ConnectToChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectToChannel(FbxAnimCurve* pCurve, unsigned int pChnlId, bool pInFront = false)"
  },
  {
    "label": "CreateCurve()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurve*)",
    "insertText": "CreateCurve(const char* pCurveNodeName, const char* pChannel)"
  },
  {
    "label": "CreateCurve()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurve*)",
    "insertText": "CreateCurve(const char* pCurveNodeName, unsigned int pChannelId = 0)"
  },
  {
    "label": "GetCurveCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCurveCount(unsigned int pChannelId, const char* pCurveNodeName = NULL)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurve*)",
    "insertText": "GetCurve(unsigned int pChannelId, unsigned int pId = 0, const char* pCurveNodeName = NULL)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "CurveNodeNameFrom()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "CurveNodeNameFrom(const char* pName)"
  },
  {
    "label": "EvaluateChannels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateChannels(FbxAnimCurveNode* pCurveNode, double* pData, unsigned int pCount, FbxTime pTime)"
  },
  {
    "label": "ReleaseKFCurveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseKFCurveNode()"
  },
  {
    "label": "SyncChannelsWithKFCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncChannelsWithKFCurve()"
  },
  {
    "label": "UseQuaternionInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseQuaternionInterpolation()"
  },
  {
    "label": "GetQuaternionInterpolation()",
    "kind": "Method",
    "detail": "Function (unsigned short)",
    "insertText": "GetQuaternionInterpolation()"
  },
  {
    "label": "GetKFCurveNode()",
    "kind": "Method",
    "detail": "Function (KFCurveNode*)",
    "insertText": "GetKFCurveNode(bool pNoCreate=false)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (private : class FbxAnimCurveFilterMatrixConverter ; class FbxAnimEvalClassic ; void)",
    "insertText": "Evaluate(double* pData, FbxTime pTime)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "ConnectNotify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectNotify(const FbxConnectEvent& pEvent)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FbxAnimCurveNode*)",
    "insertText": "Find(FbxAnimCurveNode* pRoot, const FbxString& pName)"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (private : FbxProperty)",
    "insertText": "GetChannel(const char* pChnl)"
  },
  {
    "label": "GetChannel()",
    "kind": "Method",
    "detail": "Function (FbxProperty)",
    "insertText": "GetChannel(unsigned int pChnlId)"
  },
  {
    "label": "CollectAnimFromCurveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAnimFromCurveNode(void **lSrc, void *fcn, unsigned int nbCrvs, FbxAnimCurveNode *cn, FbxMultiMap* pNickToAnimCurveTimeWarpsSet, FbxMultiMap& pNickToKFCurveNodeWarpSet)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (unsigned char mNonRemovableChannels ; FbxProperty mChannels ; FbxProperty* mCurrentlyProcessed ; KFCurveNode* mFCurveNode ; bool* mOwnedKFCurve ; int mKFCurveNodeLayerType ; unsigned short mQuaternionInterpolation ; int* mDirectIndexes ; int mDirectIndexesSize ; FbxAnimCurve*)",
    "insertText": "GetCurve(unsigned int pChannelId, unsigned int pId, FbxAnimCurveNode* pCurveNode)"
  },
  {
    "label": "ConnectToChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConnectToChannel(FbxProperty& p, FbxAnimCurve* pCurve, bool pInFront)"
  },
  {
    "label": "ResetKFCurveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetKFCurveNode()"
  },
  {
    "label": "SyncKFCurveValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncKFCurveValue(FbxAnimCurve* pCurve, double pVal)"
  },
  {
    "label": "ReleaseOwnershipOfKFCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOwnershipOfKFCurve(int pIndex)"
  },
  {
    "label": "CreateCurveGeneral()",
    "kind": "Method",
    "detail": "Function (template<class T> FbxAnimCurve*)",
    "insertText": "CreateCurveGeneral(const char* pCurveNodeName, T pChannel)"
  },
  {
    "label": "GetAllAnimCurves()",
    "kind": "Method",
    "detail": "Function (# endif } ; FBXSDK_DLL void)",
    "insertText": "GetAllAnimCurves(FbxAnimStack* pAnimStack, FbxArray<FbxAnimCurve*>& pCurves)"
  },
  {
    "label": "GetAllAnimCurves()",
    "kind": "Method",
    "detail": "Function (FBXSDK_DLL void)",
    "insertText": "GetAllAnimCurves(FbxObject* pObj, FbxAnimStack* pAnimStack, FbxArray<FbxAnimCurve*>& pCurves)"
  }
]