[
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "BaseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BaseType"
  },
  {
    "label": "Semantic",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Semantic"
  },
  {
    "label": "registerType()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_TYPEDESC_H # define MATERIALX_TYPEDESC_H # include<MaterialXGenShader / Export . h> MATERIALX_NAMESPACE_BEGIN using ChannelMap = std::unordered_map<char,int> ; class TypeDesc { public : enum BaseType { BASETYPE_NONE,BASETYPE_BOOLEAN,BASETYPE_INTEGER,BASETYPE_FLOAT,BASETYPE_STRING,BASETYPE_STRUCT,BASETYPE_LAST } ; enum Semantic { SEMANTIC_NONE,SEMANTIC_COLOR,SEMANTIC_VECTOR,SEMANTIC_MATRIX,SEMANTIC_FILENAME,SEMANTIC_CLOSURE,SEMANTIC_SHADER,SEMANTIC_MATERIAL,SEMANTIC_ENUM,SEMANTIC_LAST } ; const TypeDesc*)",
    "insertText": "registerType(const string& name, unsigned char basetype, unsigned char semantic = SEMANTIC_NONE, size_t size = 1, bool editable = true, const ChannelMap& channelMapping = ChannelMap())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const TypeDesc*)",
    "insertText": "get(const string& name)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const string&)",
    "insertText": "getName()"
  },
  {
    "label": "getSemantic()",
    "kind": "Method",
    "detail": "Function (unsigned char)",
    "insertText": "getSemantic()"
  },
  {
    "label": "isFloat3()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFloat3()"
  },
  {
    "label": "isFloat4()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFloat4()"
  },
  {
    "label": "isClosure()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isClosure()"
  },
  {
    "label": "TypeDesc()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TypeDesc(const string& name, unsigned char basetype, unsigned char semantic, size_t size, bool editable, const ChannelMap& channelMapping)"
  }
]