[
  {
    "label": "FOptionalSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalSize"
  },
  {
    "label": "FSizeParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSizeParam"
  },
  {
    "label": "ESizeRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESizeRule"
  },
  {
    "label": "FStretch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStretch"
  },
  {
    "label": "FStretchContent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStretchContent"
  },
  {
    "label": "FAuto",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAuto"
  },
  {
    "label": "FOptionalSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" struct FOptionalSize {)",
    "insertText": "FOptionalSize() : Size(Unspecified)"
  },
  {
    "label": "FOptionalSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalSize(const float SpecifiedSize ) : Size(SpecifiedSize)"
  },
  {
    "label": "FOptionalSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalSize(const TOptional<float>& OptionalSize ) : Size(OptionalSize.Get(Unspecified))"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "FSizeParam()",
    "kind": "Method",
    "detail": "Function (} private : const float Unspecified ; float Size ; } ; struct FSizeParam { enum ESizeRule { SizeRule_Auto,SizeRule_Stretch,SizeRule_StretchContent,} ; ESizeRule SizeRule ; TAttribute<float> Value ; TAttribute<float> ShrinkValue ; protected :)",
    "insertText": "FSizeParam(ESizeRule InTypeOfSize, const TAttribute<float>& InValue, const TAttribute<float>& InShrinkValue ) : SizeRule(InTypeOfSize) , Value(InValue) , ShrinkValue(InShrinkValue)"
  },
  {
    "label": "FStretch()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStretch : public FSizeParam {)",
    "insertText": "FStretch(const TAttribute<float>& StretchAmount ) : FSizeParam(SizeRule_Stretch, StretchAmount, StretchAmount)"
  },
  {
    "label": "FStretch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStretch() : FSizeParam(SizeRule_Stretch, 1.0f, 1.0f)"
  },
  {
    "label": "FStretchContent()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStretchContent : public FSizeParam {)",
    "insertText": "FStretchContent(const TAttribute<float>& StretchAmount ) : FSizeParam(SizeRule_StretchContent, StretchAmount, StretchAmount)"
  },
  {
    "label": "FStretchContent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStretchContent(const TAttribute<float>& GrowStretchAmount, const TAttribute<float>& ShrinkStretchAmount ) : FSizeParam(SizeRule_StretchContent, GrowStretchAmount, ShrinkStretchAmount)"
  },
  {
    "label": "FStretchContent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStretchContent() : FSizeParam(SizeRule_StretchContent, 1.0f, 1.0f)"
  },
  {
    "label": "FAuto()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAuto : public FSizeParam {)",
    "insertText": "FAuto() : FSizeParam(SizeRule_Auto, 0.0f, 0.0f)"
  }
]