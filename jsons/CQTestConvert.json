[
  {
    "label": "THasToString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "THasToString"
  },
  {
    "label": "THasOStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THasOStream"
  },
  {
    "label": "StructWithToString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StructWithToString"
  },
  {
    "label": "StructWithConstToString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StructWithConstToString"
  },
  {
    "label": "StructWithToStringWrongReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StructWithToStringWrongReturnType"
  },
  {
    "label": "SomeTestStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SomeTestStruct"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Misc / StringBuilder . h \" # include \" UObject / NameTypes . h \" # include<sstream> # include<type_traits> namespace CQTestConvert { using PrintStream = FStringBuilderBase ; } namespace { template<T,= void> struct THasToString : std::false_type { } ; template<T> struct THasToString<T,std::void_t<)",
    "insertText": "decltype(std::declval<T>().ToString())>> : std::is_same<FString, decltype(std::declval<T>().ToString())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class THasOStream { template<C,=)",
    "insertText": "decltype(operator<<(std::declval<CQTestConvert::PrintStream&>(), std::declval<C>()))> static std::true_type test(int)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (template<C> std::false_type)",
    "insertText": "test(...)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : bool value =)",
    "insertText": "decltype(test<T>(0))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "static_assert(std::is_same<FString, decltype(std::declval<FName>().ToString())>::value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (struct StructWithToString { FString)",
    "insertText": "ToString()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(THasToString<StructWithToString>::value, \"Struct with ToString should have ToString\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (struct SomeTestStruct { } ;)",
    "insertText": "static_assert(!THasToString<SomeTestStruct>::value, \"Struct without ToString should not have ToString\")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} namespace CQTestConvert { template<T> FString)",
    "insertText": "ToString(const T& Input)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(THasOStream<T>::value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_floating_point_v<T>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_enum_v<T>)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensureMsgf(false, TEXT(\"Did not find ToString, ostream operator, or CQTestConvert::ToString template specialization for provided type. Cast provided type to something else, or see CqTestConvertTests.cpp for examples\"))"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } template<> FString)",
    "insertText": "ToString(const FString& Input)"
  },
  {
    "label": "JoinBy()",
    "kind": "Method",
    "detail": "Function (FString result =)",
    "insertText": "JoinBy(Input, TEXT(\", \"), [](const TElement& e) { return CQTestConvert::ToString(e); })"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<TElement,TAllocator> FString)",
    "insertText": "ToString(const TSet<TElement, TAllocator>& Input)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} template<TKey,TValue> FString)",
    "insertText": "ToString(const TMap<TKey, TValue>& Input)"
  }
]