[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FNavigationCrumb",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationCrumb"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SBreadcrumbTrail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBreadcrumbTrail"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SEditableText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableText"
  },
  {
    "label": "SLocationListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLocationListView"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "USlateWidgetStyleAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateWidgetStyleAsset"
  },
  {
    "label": "FLocationItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLocationItem"
  },
  {
    "label": "SNavigationBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNavigationBar"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / ToolBarStyle . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Widgets / Layout / SBorder . h \" class FText ; struct FNavigationCrumb ; class ITableRow ; template<ItemType> class SBreadcrumbTrail ; class SComboButton ; class SEditableText ; class SLocationListView ; class STableViewBase ; class USlateWidgetStyleAsset ; using FOnPathClicked = TDelegate<)",
    "insertText": "void(const FString&)"
  },
  {
    "label": "SWidget()",
    "kind": "Method",
    "detail": "Function (using FGetPathMenuContent = TDelegate<TSharedRef<)",
    "insertText": "SWidget(const FString&)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (using FGetComboOptions = TDelegate<TArray<)",
    "insertText": "FString(void)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (using FOnCompletePrefix = TDelegate<TArray<)",
    "insertText": "FString(const FString&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using FCanEditPathAsText = TDelegate<)",
    "insertText": "bool(const FString&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (struct FLocationItem ; class SNavigationBar : public SComboButton { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SNavigationBar) : _ComboBoxStyle(&FAppStyle::Get().GetWidgetStyle< FComboBoxStyle >(\"ComboBox\")) , _ItemStyle(&FAppStyle::Get().GetWidgetStyle< FTableRowStyle >(\"ComboBox.Row\")) , _TextBoxStyle(&FAppStyle::Get().GetWidgetStyle<FEditableTextBoxStyle>(\"NormalEditableTextBox\")) , _BreadcrumbButtonStyle(&FAppStyle::Get().GetWidgetStyle<FButtonStyle>(\"SimpleButton\")) , _BreadcrumbTextStyle(&FAppStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"NormalText\")) , _BreadcrumbButtonContentPadding(FMargin(2,2)) , _BreadcrumbDelimiterImage(FAppStyle::Get().GetBrush(\"Icons.ChevronRight\"))"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FComboBoxStyle, ComboBoxStyle ) SLATE_STYLE_ARGUMENT(FTableRowStyle, ItemStyle) SLATE_STYLE_ARGUMENT(FTableViewStyle, SuggestionsStyle) SLATE_STYLE_ARGUMENT(FEditableTextBoxStyle, TextBoxStyle) SLATE_STYLE_ARGUMENT(FButtonStyle, BreadcrumbButtonStyle) SLATE_STYLE_ARGUMENT(FTextBlockStyle, BreadcrumbTextStyle) SLATE_ATTRIBUTE(FMargin, BreadcrumbButtonContentPadding) SLATE_ATTRIBUTE(const FSlateBrush*, BreadcrumbDelimiterImage) SLATE_EVENT(FOnNavigateToPath , OnNavigateToPath) SLATE_EVENT(FOnPathClicked , OnPathClicked) SLATE_EVENT(FGetPathMenuContent, GetPathMenuContent) SLATE_EVENT(FGetComboOptions, GetComboOptions) SLATE_EVENT(FOnCompletePrefix, OnCompletePrefix) SLATE_EVENT(FCanEditPathAsText, OnCanEditPathAsText) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ClearPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPaths()"
  },
  {
    "label": "PushPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushPath(const FText& SegmentDisplayText, const FString& FullLocation, bool bHasChildren)"
  },
  {
    "label": "StartEditingPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEditingPath()"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClicked()"
  },
  {
    "label": "HandleBlankSpaceClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleBlankSpaceClicked()"
  },
  {
    "label": "HandleTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextChanged(const FText& NewText)"
  },
  {
    "label": "HandleTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextCommitted(const FText& InText, ETextCommit::Type CommitType)"
  },
  {
    "label": "HandleComboSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleComboSelectionChanged(TSharedPtr<FLocationItem> SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleGenerateComboRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateComboRow(TSharedPtr<FLocationItem> ForItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleEditableTextKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleEditableTextKeyDown(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "HandleComboKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleComboKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleComboKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleComboKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharEvent)"
  },
  {
    "label": "HandleCrumbClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCrumbClicked(const FNavigationCrumb& Crumb)"
  },
  {
    "label": "HandleHasCrumbMenuContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleHasCrumbMenuContent(const FNavigationCrumb& Crumb)"
  },
  {
    "label": "HandleGetCrumbMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleGetCrumbMenuContent(const FNavigationCrumb& Crumb)"
  },
  {
    "label": "HandleUpdateCompletionOptions()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "HandleUpdateCompletionOptions(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "GenerateHistoryOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHistoryOptions()"
  },
  {
    "label": "GenerateCompletionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCompletionOptions(const FString& Prefix)"
  },
  {
    "label": "GetEditTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditTextVisibility()"
  },
  {
    "label": "GetNonEditVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNonEditVisibility()"
  },
  {
    "label": "GetPopupHeading()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPopupHeading()"
  },
  {
    "label": "GetImageForItem()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetImageForItem(const FLocationItem& ForItem)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  }
]