[
  {
    "label": "FAttributesRefAdapterConst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributesRefAdapterConst"
  },
  {
    "label": "FAttributesRefAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributesRefAdapter"
  },
  {
    "label": "TVertexBoneWeightsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVertexBoneWeightsBase"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "FSkinWeightsVertexAttributesRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinWeightsVertexAttributesRef"
  },
  {
    "label": "FSkeletalMeshAttributes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshAttributes"
  },
  {
    "label": "FSkinWeightsVertexAttributesConstRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkinWeightsVertexAttributesConstRef"
  },
  {
    "label": "FSkeletalMeshAttributesShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshAttributesShared"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshDescription . h \" # include \" BoneWeights . h \" namespace Internal { struct FAttributesRefAdapterConst { using FBoneWeight = UE::AnimationCore::FBoneWeight ; using ContainerType = const TArrayAttribute<const int32> ; int32)",
    "insertText": "Num(const ContainerType& InContainer)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FBoneWeight)",
    "insertText": "Get(const ContainerType& InContainer, int32 InIndex)"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32)",
    "insertText": "IndexOf(const ContainerType& InContainer, Predicate InPredicate)"
  },
  {
    "label": "InPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InPredicate(const int32 InV)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} ; return InContainer .)",
    "insertText": "IndexOfByPredicate(ProxyPredicate)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAttributesRefAdapter { using FBoneWeight = UE::AnimationCore::FBoneWeight ; using ContainerType = TArrayAttribute<int32> ; void)",
    "insertText": "SetNum(ContainerType& InContainer, int32 InNum)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "SetNumUninitialized(InNum)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(ContainerType& InContainer, int32 InIndex, FBoneWeight InBoneWeight)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "GetData()[InIndex] = InBoneWeight.ToInt32()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(ContainerType& InContainer, FBoneWeight InBoneWeight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "Add(InBoneWeight.ToInt32())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(ContainerType& InContainer, int32 InIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (InContainer .)",
    "insertText": "RemoveAt(InIndex, 1)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> void)",
    "insertText": "Sort(ContainerType& InContainer, Predicate InPredicate)"
  },
  {
    "label": "InPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InPredicate(const int32 InA, const int32 InB)"
  },
  {
    "label": "SortByPredicate()",
    "kind": "Method",
    "detail": "Function (} ; InContainer .)",
    "insertText": "SortByPredicate(ProxyPredicate)"
  },
  {
    "label": "TVertexBoneWeightsBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<AdaptorType,StorageType> class TVertexBoneWeightsBase : public UE::AnimationCore::TBoneWeights<AdaptorType> { using Super = UE::AnimationCore::TBoneWeights<AdaptorType> ; public :)",
    "insertText": "TVertexBoneWeightsBase(const TArrayAttribute<StorageType> InContainer) : Super(Container), Container(InContainer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class const_iterator { public : const_iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Index ; return* this ; } bool)",
    "insertText": "operator(const const_iterator &InOther)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (} protected : class TVertexBoneWeightsBase<AdaptorType,StorageType> ;)",
    "insertText": "const_iterator()"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "const_iterator(const TVertexBoneWeightsBase<AdaptorType, StorageType> *InWeights, int32 InIndex) : Weights(InWeights), Index(InIndex)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const TVertexBoneWeightsBase<AdaptorType,StorageType>* Weights = nullptr ; int32 Index = INDEX_NONE ; } ; const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "FSkinWeightsVertexAttributesRef()",
    "kind": "Method",
    "detail": "Function (} private : TArrayAttribute<StorageType> Container ; } ; } using FVertexBoneWeights = Internal::TVertexBoneWeightsBase<Internal::FAttributesRefAdapter,int32> ; using FVertexBoneWeightsConst = Internal::TVertexBoneWeightsBase<Internal::FAttributesRefAdapterConst,const int32> ; class FSkinWeightsVertexAttributesRef { public :)",
    "insertText": "FSkinWeightsVertexAttributesRef()"
  },
  {
    "label": "FSkinWeightsVertexAttributesRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkinWeightsVertexAttributesRef(const FSkinWeightsVertexAttributesRef &)"
  },
  {
    "label": "FSkinWeightsVertexAttributesRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkinWeightsVertexAttributesRef(FSkinWeightsVertexAttributesRef &&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSkinWeightsVertexAttributesRef&)",
    "insertText": "operator(const FSkinWeightsVertexAttributesRef &InAttributesRef)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AttributesRef = InAttributesRef . AttributesRef ; return* this ; } FSkinWeightsVertexAttributesRef&)",
    "insertText": "operator(FSkinWeightsVertexAttributesRef &&InAttributesRef)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AttributesRef =)",
    "insertText": "MoveTemp(InAttributesRef.AttributesRef)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (InAttributesRef . AttributesRef = TVertexAttributesRef<TArrayAttribute<)",
    "insertText": "int32()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FVertexBoneWeights)",
    "insertText": "Get(const FVertexID InVertexIndex)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const FVertexID InVertexIndex, const UE::AnimationCore::FBoneWeights &InWeights)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayAttribute<int32> Weights = AttributesRef .)",
    "insertText": "Get(InVertexIndex)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Weights .)",
    "insertText": "SetNumUninitialized(InWeights.Num())"
  },
  {
    "label": "ToInt32()",
    "kind": "Method",
    "detail": "Function (Weights [ Index ] = InWeights [ Index ] .)",
    "insertText": "ToInt32()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Set(const FVertexID InVertexIndex, TArrayView<const UE::AnimationCore::FBoneWeight> InWeights, const UE::AnimationCore::FBoneWeightsSettings& InSettings = {})"
  },
  {
    "label": "BoneWeights()",
    "kind": "Method",
    "detail": "Function (FVertexBoneWeights)",
    "insertText": "BoneWeights(AttributesRef.Get(InVertexIndex))"
  },
  {
    "label": "SetBoneWeights()",
    "kind": "Method",
    "detail": "Function (BoneWeights .)",
    "insertText": "SetBoneWeights(InWeights, InSettings)"
  },
  {
    "label": "FSkinWeightsVertexAttributesRef()",
    "kind": "Method",
    "detail": "Function (} protected : class FSkeletalMeshAttributes ;)",
    "insertText": "FSkinWeightsVertexAttributesRef(TVertexAttributesRef<TArrayAttribute<int32>> InAttributesRef) : AttributesRef(InAttributesRef)"
  },
  {
    "label": "FSkinWeightsVertexAttributesConstRef()",
    "kind": "Method",
    "detail": "Function (} private : class FSkinWeightsVertexAttributesConstRef ; TVertexAttributesRef<TArrayAttribute<int32>> AttributesRef ; } ; class FSkinWeightsVertexAttributesConstRef { public :)",
    "insertText": "FSkinWeightsVertexAttributesConstRef()"
  },
  {
    "label": "FSkinWeightsVertexAttributesConstRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkinWeightsVertexAttributesConstRef(const FSkinWeightsVertexAttributesConstRef &)"
  },
  {
    "label": "FSkinWeightsVertexAttributesConstRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSkinWeightsVertexAttributesConstRef(FSkinWeightsVertexAttributesConstRef &&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSkinWeightsVertexAttributesConstRef&)",
    "insertText": "operator(const FSkinWeightsVertexAttributesConstRef &InAttributesRef)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AttributesConstRef = InAttributesRef . AttributesConstRef ; return* this ; } FSkinWeightsVertexAttributesConstRef&)",
    "insertText": "operator(FSkinWeightsVertexAttributesConstRef &&InAttributesRef)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AttributesConstRef =)",
    "insertText": "MoveTemp(InAttributesRef.AttributesConstRef)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSkinWeightsVertexAttributesConstRef&)",
    "insertText": "operator(const FSkinWeightsVertexAttributesRef &InAttribs)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (AttributesConstRef = InAttribs . AttributesRef ; return* this ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FVertexBoneWeightsConst)",
    "insertText": "Get(FVertexID InVertexIndex)"
  },
  {
    "label": "FSkinWeightsVertexAttributesConstRef()",
    "kind": "Method",
    "detail": "Function (} protected : class FSkeletalMeshAttributes ; class FSkeletalMeshAttributesShared ;)",
    "insertText": "FSkinWeightsVertexAttributesConstRef(TVertexAttributesRef<TArrayAttribute<int32>> InAttributesConstRef) : AttributesConstRef(InAttributesConstRef)"
  },
  {
    "label": "FSkinWeightsVertexAttributesConstRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSkinWeightsVertexAttributesConstRef(TVertexAttributesRef<TArrayAttribute<const int32>> InAttributesConstRef) : AttributesConstRef(InAttributesConstRef)"
  }
]