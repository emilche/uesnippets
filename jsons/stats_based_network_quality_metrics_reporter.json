[
  {
    "label": "StatsBasedNetworkQualityMetricsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsBasedNetworkQualityMetricsReporter"
  },
  {
    "label": "PCStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PCStats"
  },
  {
    "label": "NetworkLayerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkLayerStats"
  },
  {
    "label": "NetworkLayerStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkLayerStatsCollector"
  },
  {
    "label": "StatsBasedNetworkQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_STATS_BASED_NETWORK_QUALITY_METRICS_REPORTER_H_ # define TEST_PC_E2E_STATS_BASED_NETWORK_QUALITY_METRICS_REPORTER_H_ # include<cstdint> # include<map> # include<memory> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / test / network_emulation / network_emulation_interfaces . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / test / peerconnection_quality_test_fixture . h \" # include \" api / units / data_size . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / ip_address . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { namespace webrtc_pc_e2e { class StatsBasedNetworkQualityMetricsReporter : public PeerConnectionE2EQualityTestFixture::QualityMetricsReporter { public :)",
    "insertText": "StatsBasedNetworkQualityMetricsReporter(std::map<std::string, std::vector<EmulatedEndpoint*>> peer_endpoints, NetworkEmulationManager* network_emulation, test::MetricsLogger* metrics_logger)"
  },
  {
    "label": "StatsBasedNetworkQualityMetricsReporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StatsBasedNetworkQualityMetricsReporter()"
  },
  {
    "label": "AddPeer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPeer(absl::string_view peer_name, std::vector<EmulatedEndpoint*> endpoints)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(absl::string_view test_case_name, const TrackIdStreamInfoMap* reporter_helper)"
  },
  {
    "label": "OnStatsReports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsReports(absl::string_view pc_label, const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "StopAndReportResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAndReportResults()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (private : struct PCStats { DataSize payload_received =)",
    "insertText": "Zero()"
  },
  {
    "label": "NetworkLayerStatsCollector()",
    "kind": "Method",
    "detail": "Function (int64_t packets_received = 0 ; int64_t packets_sent = 0 ; } ; struct NetworkLayerStats { EmulatedNetworkStats stats ; std::set<std::string> receivers ; } ; class NetworkLayerStatsCollector { public :)",
    "insertText": "NetworkLayerStatsCollector(std::map<std::string, std::vector<EmulatedEndpoint*>> peer_endpoints, NetworkEmulationManager* network_emulation)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (std::map<std::string,NetworkLayerStats>)",
    "insertText": "GetStats()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex mutex_ ; std::map<std::string,std::vector<EmulatedEndpoint*>> peer_endpoints_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "ReportStats()",
    "kind": "Method",
    "detail": "Function (NetworkEmulationManager* const network_emulation_ ; } ; void)",
    "insertText": "ReportStats(const std::string& pc_label, const PCStats& pc_stats, const NetworkLayerStats& network_layer_stats, int64_t packet_loss, const Timestamp& end_time)"
  },
  {
    "label": "GetTestCaseName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetTestCaseName(absl::string_view network_label)"
  },
  {
    "label": "LogNetworkLayerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNetworkLayerStats(const std::string& peer_name, const NetworkLayerStats& stats)"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (NetworkLayerStatsCollector collector_ ; Clock* const clock_ ; test::MetricsLogger* const metrics_logger_ ; std::string test_case_name_ ; Timestamp start_time_ =)",
    "insertText": "MinusInfinity()"
  }
]