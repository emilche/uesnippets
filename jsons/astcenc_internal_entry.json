[
  {
    "label": "ParallelManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParallelManager"
  },
  {
    "label": "astcenc_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "astcenc_context"
  },
  {
    "label": "ParallelManager()",
    "kind": "Method",
    "detail": "Function (# ifndef ASTCENC_INTERNAL_ENTRY_INCLUDED # define ASTCENC_INTERNAL_ENTRY_INCLUDED # include<atomic> # include<condition_variable> # include<functional> # include<mutex> # include \" astcenc_internal . h \" class ParallelManager { private : std::mutex m_lock ; bool m_init_done ; bool m_term_done ; std::condition_variable m_complete ; std::atomic<unsigned int> m_start_count ; unsigned int m_done_count ; unsigned int m_task_count ; public :)",
    "insertText": "ParallelManager()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (m_init_done = false ; m_term_done = false ; m_start_count = 0 ; m_done_count = 0 ; m_task_count = 0 ; } void)",
    "insertText": "init(std::function<unsigned int(void)> init_func)"
  },
  {
    "label": "lck()",
    "kind": "Method",
    "detail": "Function (std::lock_guard<std::mutex>)",
    "insertText": "lck(m_lock)"
  },
  {
    "label": "init_func()",
    "kind": "Method",
    "detail": "Function (m_task_count =)",
    "insertText": "init_func()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (m_init_done = true ; } } void)",
    "insertText": "init(unsigned int task_count)"
  },
  {
    "label": "get_task_assignment()",
    "kind": "Method",
    "detail": "Function (m_task_count = task_count ; m_init_done = true ; } } unsigned int)",
    "insertText": "get_task_assignment(unsigned int granule, unsigned int& count)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (unsigned int base = m_start_count .)",
    "insertText": "fetch_add(granule, std::memory_order_relaxed)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (count = 0 ; return 0 ; } count =)",
    "insertText": "min(m_task_count - base, granule)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> m_done_count + = count ;)",
    "insertText": "if(m_done_count == m_task_count)"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (lck .)",
    "insertText": "unlock()"
  },
  {
    "label": "notify_all()",
    "kind": "Method",
    "detail": "Function (m_complete .)",
    "insertText": "notify_all()"
  },
  {
    "label": "wait()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "wait()"
  },
  {
    "label": "wait()",
    "kind": "Method",
    "detail": "Function (m_complete .)",
    "insertText": "wait(lck, [this]{ return m_done_count == m_task_count; })"
  },
  {
    "label": "term()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "term(std::function<void(void)> term_func)"
  },
  {
    "label": "term_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "term_func()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (m_term_done = true ; } } } ; struct astcenc_context { astcenc_contexti context ; # if !)",
    "insertText": "defined(ASTCENC_DECOMPRESS_ONLY)"
  }
]