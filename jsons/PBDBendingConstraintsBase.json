[
  {
    "label": "FPBDBendingConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDBendingConstraintsBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TNum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TNum"
  },
  {
    "label": "FPBDBendingConstraintsBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Chaos / PBDStiffness . h \" # include \" Chaos / ParticleRule . h \" # include \" Containers / StaticArray . h \" namespace Chaos::Softs { class FPBDBendingConstraintsBase { public : enum class ERestAngleConstructionType : uint8 { Use3DRestAngles,FlatnessRatio,ExplicitRestAngles } ;)",
    "insertText": "FPBDBendingConstraintsBase(const FSolverParticlesRange& InParticles, TArray<TVec4<int32>>&& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& BucklingRatioMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessMultipliers, const TConstArrayView<FRealSingle>& RestAngleMap, const FSolverVec2& InStiffness, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffness, const FSolverVec2& RestAngleValue, ERestAngleConstructionType RestAngleConstructionType, bool bTrimKinematicConstraints = false, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness) : Constraints(bTrimKinematicConstraints ? TrimKinematicConstraints(InConstraints, InParticles) : MoveTemp(InConstraints)) , ConstraintSharedEdges(ExtractConstraintSharedEdges(Constraints)) , ParticleOffset(0) , ParticleCount(InParticles.GetRangeSize()) , Stiffness( InStiffness, StiffnessMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness) , BucklingRatioWeighted( InBucklingRatio.ClampAxes((FSolverReal)0., (FSolverReal)1.), BucklingRatioMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , BucklingStiffness( InBucklingStiffness, BucklingStiffnessMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness) PRAGMA_DISABLE_DEPRECATION_WARNINGS , BucklingRatio((FSolverReal)BucklingRatioWeighted)"
  },
  {
    "label": "CalculateRestAngles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateRestAngles(InParticles, ParticleOffset, ParticleCount, RestAngleMap, RestAngleValue, RestAngleConstructionType)"
  },
  {
    "label": "FPBDBendingConstraintsBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDBendingConstraintsBase(const FSolverParticles& InParticles, int32 InParticleOffset, int32 InParticleCount, TArray<TVec4<int32>>&& InConstraints, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& BucklingRatioMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessMultipliers, const TConstArrayView<FRealSingle>& RestAngleMap, const FSolverVec2& InStiffness, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffness, const FSolverVec2& RestAngleValue, ERestAngleConstructionType RestAngleConstructionType, bool bTrimKinematicConstraints = false, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness) : Constraints(bTrimKinematicConstraints ? TrimKinematicConstraints(InConstraints, InParticles): MoveTemp(InConstraints)) , ConstraintSharedEdges(ExtractConstraintSharedEdges(Constraints)) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Stiffness( InStiffness, StiffnessMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness) , BucklingRatioWeighted( InBucklingRatio.ClampAxes((FSolverReal)0., (FSolverReal)1.), BucklingRatioMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount) , BucklingStiffness( InBucklingStiffness, BucklingStiffnessMultipliers, TConstArrayView<TVec2<int32>>(ConstraintSharedEdges), ParticleOffset, ParticleCount, FPBDStiffness::DefaultTableSize, FPBDStiffness::DefaultParameterFitBase, MaxStiffness) PRAGMA_DISABLE_DEPRECATION_WARNINGS , BucklingRatio((FSolverReal)BucklingRatioWeighted)"
  },
  {
    "label": "FPBDBendingConstraintsBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDBendingConstraintsBase()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (BucklingRatioWeighted .)",
    "insertText": "SetWeightedValue(InBucklingRatio.ClampAxes((FSolverReal)0., (FSolverReal)1.))"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (BucklingStiffness .)",
    "insertText": "SetWeightedValue(InBucklingStiffness)"
  },
  {
    "label": "BucklingRatio()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "BucklingRatio(FSolverReal)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(InStiffness, FSolverVec2(InBucklingRatio), InBucklingStiffness)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyPBDValues(Dt, NumIterations)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (BucklingRatioWeighted .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "GetGradients()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> TStaticArray<FSolverVec3,4>)",
    "insertText": "GetGradients(const SolverParticlesOrRange& InParticles, const int32 i)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ i ] ; const FSolverVec3& P1 = InParticles .)",
    "insertText": "P(Constraint[0])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "P(Constraint[1])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "P(Constraint[2])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "P(Constraint[3])"
  },
  {
    "label": "GetScalingFactor()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> FSolverReal)",
    "insertText": "GetScalingFactor(const SolverParticlesOrRange& InParticles, const int32 i, const TStaticArray<FSolverVec3, 4>& Grads, const FSolverReal ExpStiffnessValue, const FSolverReal ExpBucklingValue)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const TVec4<int32>& Constraint = Constraints [ i ] ; const int32 i1 = Constraint [ 0 ] ; const int32 i2 = Constraint [ 1 ] ; const int32 i3 = Constraint [ 2 ] ; const int32 i4 = Constraint [ 3 ] ; const FSolverVec3& P1 = InParticles .)",
    "insertText": "P(i1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P2 = InParticles .)",
    "insertText": "P(i2)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P3 = InParticles .)",
    "insertText": "P(i3)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3& P4 = InParticles .)",
    "insertText": "P(i4)"
  },
  {
    "label": "CalcAngle()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Angle =)",
    "insertText": "CalcAngle(P1, P2, P3, P4)"
  },
  {
    "label": "Denom()",
    "kind": "Method",
    "detail": "Function (const FSolverReal)",
    "insertText": "Denom(InParticles.InvM(i1) * Grads[0].SizeSquared() + InParticles.InvM(i2) * Grads[1].SizeSquared() + InParticles.InvM(i3) * Grads[2].SizeSquared() + InParticles.InvM(i4) * Grads[3].SizeSquared())"
  },
  {
    "label": "SingleStepAngleLimit()",
    "kind": "Method",
    "detail": "Function (const FSolverReal StiffnessValue = IsBuckled [ i ] ? ExpBucklingValue : ExpStiffnessValue ; FSolverReal)",
    "insertText": "SingleStepAngleLimit(FSolverReal)(UE_PI * .25f)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Delta =)",
    "insertText": "Clamp(StiffnessValue * (Angle - RestAngles[i]), -SingleStepAngleLimit, SingleStepAngleLimit)"
  },
  {
    "label": "CalcAngle()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "CalcAngle(const FSolverVec3& P1, const FSolverVec3& P2, const FSolverVec3& P3, const FSolverVec3& P4)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Normal1 =)",
    "insertText": "CrossProduct(P1 - P3, P2 - P3).GetSafeNormal()"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Normal2 =)",
    "insertText": "CrossProduct(P2 - P4, P1 - P4).GetSafeNormal()"
  },
  {
    "label": "SharedEdge()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3)",
    "insertText": "SharedEdge(P2 - P1).GetSafeNormal()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FSolverReal CosPhi =)",
    "insertText": "Clamp(FSolverVec3::DotProduct(Normal1, Normal2), (FSolverReal)-1, (FSolverReal)1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FSolverReal SinPhi =)",
    "insertText": "Clamp(FSolverVec3::DotProduct(FSolverVec3::CrossProduct(Normal2, Normal1), SharedEdge), (FSolverReal)-1, (FSolverReal)1)"
  },
  {
    "label": "AngleIsBuckled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AngleIsBuckled(const FSolverReal Angle, const int32 ConstraintIndex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Init(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "GetRestAngles()",
    "kind": "Method",
    "detail": "Function (const TArray<FSolverReal>&)",
    "insertText": "GetRestAngles()"
  },
  {
    "label": "CalcGradients()",
    "kind": "Method",
    "detail": "Function (} TStaticArray<FSolverVec3,4>)",
    "insertText": "CalcGradients(const FSolverVec3& P1, const FSolverVec3& P2, const FSolverVec3& P3, const FSolverVec3& P4, FSolverReal* OutAngle = nullptr)"
  },
  {
    "label": "SharedEdgeNormalized()",
    "kind": "Method",
    "detail": "Function (TStaticArray<FSolverVec3,4> Grads ; const FSolverVec3)",
    "insertText": "SharedEdgeNormalized(P2 - P1).GetSafeNormal()"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P13CrossP23 =)",
    "insertText": "CrossProduct(P1 - P3, P2 - P3)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Normal1Len = P13CrossP23 .)",
    "insertText": "Size()"
  },
  {
    "label": "SafeDivide()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Normal1 =)",
    "insertText": "SafeDivide(P13CrossP23, Normal1Len)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 P24CrossP14 =)",
    "insertText": "CrossProduct(P2 - P4, P1 - P4)"
  },
  {
    "label": "SafeDivide()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 Normal2 =)",
    "insertText": "SafeDivide(P24CrossP14, Normal2Len)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 N2CrossN1 =)",
    "insertText": "CrossProduct(Normal2, Normal1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FSolverReal SinPhi =)",
    "insertText": "Clamp(FSolverVec3::DotProduct(N2CrossN1, SharedEdgeNormalized), (FSolverReal)-1, (FSolverReal)1)"
  },
  {
    "label": "SafeDivide()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 DPhiDN1_OverNormal1Len =)",
    "insertText": "SafeDivide(CosPhi * FSolverVec3::CrossProduct(SharedEdgeNormalized, Normal2) - SinPhi * Normal2, Normal1Len)"
  },
  {
    "label": "SafeDivide()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 DPhiDN2_OverNormal2Len =)",
    "insertText": "SafeDivide(CosPhi * FSolverVec3::CrossProduct(Normal1, SharedEdgeNormalized) - SinPhi * Normal1, Normal2Len)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 DPhiDP13 =)",
    "insertText": "CrossProduct(P2 - P3, DPhiDN1_OverNormal1Len)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 DPhiDP23 =)",
    "insertText": "CrossProduct(DPhiDN1_OverNormal1Len, P1 - P3)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 DPhiDP24 =)",
    "insertText": "CrossProduct(P1 - P4, DPhiDN2_OverNormal2Len)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 DPhiDP14 =)",
    "insertText": "CrossProduct(DPhiDN2_OverNormal2Len, P2 - P4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Grads [ 0 ] = DPhiDP13 + DPhiDP14 ; Grads [ 1 ] = DPhiDP23 + DPhiDP24 ; Grads [ 2 ] = - DPhiDP13 - DPhiDP23 ; Grads [ 3 ] = - DPhiDP14 - DPhiDP24 ;)",
    "insertText": "if(OutAngle)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (* OutAngle =)",
    "insertText": "Atan2(SinPhi, CosPhi)"
  },
  {
    "label": "TrimKinematicConstraints()",
    "kind": "Method",
    "detail": "Function (} return Grads ; } private : template<SolverParticlesOrRange> TArray<TVec4<int32>>)",
    "insertText": "TrimKinematicConstraints(const TArray<TVec4<int32>>& InConstraints, const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<TVec4<int32>> TrimmedConstraints ; TrimmedConstraints .)",
    "insertText": "Reserve(InConstraints.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TrimmedConstraints .)",
    "insertText": "Add(Constraint)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} } TrimmedConstraints .)",
    "insertText": "Shrink()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<TVec2<int32>> ExtractedEdges ; ExtractedEdges .)",
    "insertText": "Reserve(Constraints.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ExtractedEdges .)",
    "insertText": "Emplace(Constraint[0], Constraint[1])"
  },
  {
    "label": "CalculateRestAngles()",
    "kind": "Method",
    "detail": "Function (} return ExtractedEdges ; } template<SolverParticlesOrRange> void)",
    "insertText": "CalculateRestAngles(const SolverParticlesOrRange& InParticles, int32 InParticleOffset, int32 InParticleCount, const TConstArrayView<FRealSingle>& RestAngleMap, const FSolverVec2& RestAngleValue, ERestAngleConstructionType RestAngleConstructionType)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; } # if !)",
    "insertText": "defined(CHAOS_BENDING_ISPC_ENABLED_DEFAULT)"
  }
]