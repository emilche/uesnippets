[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PendingTask()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PENDING_TASK_H_ # define BASE_PENDING_TASK_H_ # include<array> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / location . h \" # include \" base / task / delay_policy . h \" # include \" base / time / time . h \" namespace base { enum class Nestable : uint8_t { kNonNestable,kNestable,} ; struct BASE_EXPORT PendingTask {)",
    "insertText": "PendingTask()"
  },
  {
    "label": "PendingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingTask(const Location& posted_from, OnceClosure task, TimeTicks queue_time = TimeTicks(), TimeTicks delayed_run_time = TimeTicks(), TimeDelta leeway = TimeDelta(), subtle::DelayPolicy delay_policy = subtle::DelayPolicy::kFlexibleNoSooner)"
  },
  {
    "label": "PendingTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PendingTask(PendingTask&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PendingTask&)",
    "insertText": "operator(PendingTask&& other)"
  },
  {
    "label": "GetDesiredExecutionTime()",
    "kind": "Method",
    "detail": "Function (base::TimeTicks)",
    "insertText": "GetDesiredExecutionTime()"
  },
  {
    "label": "earliest_delayed_run_time()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "earliest_delayed_run_time()"
  },
  {
    "label": "latest_delayed_run_time()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "latest_delayed_run_time()"
  }
]