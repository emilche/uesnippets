[
  {
    "label": "AsyncStunTCPSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncStunTCPSocket"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_ASYNC_STUN_TCP_SOCKET_H_ # define P2P_BASE_ASYNC_STUN_TCP_SOCKET_H_ # include<stddef . h> # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / async_tcp_socket . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" namespace cricket { class AsyncStunTCPSocket : public rtc::AsyncTCPSocketBase { public : AsyncStunTCPSocket*)",
    "insertText": "Create(rtc::Socket* socket, const rtc::SocketAddress& bind_address, const rtc::SocketAddress& remote_address)"
  },
  {
    "label": "AsyncStunTCPSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncStunTCPSocket(rtc::Socket* socket)"
  },
  {
    "label": "AsyncStunTCPSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncStunTCPSocket(const AsyncStunTCPSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AsyncStunTCPSocket&)",
    "insertText": "operator(const AsyncStunTCPSocket&)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* pv, size_t cb, const rtc::PacketOptions& options)"
  },
  {
    "label": "ProcessInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessInput(char* data, size_t* len)"
  },
  {
    "label": "GetExpectedLength()",
    "kind": "Method",
    "detail": "Function (private : size_t)",
    "insertText": "GetExpectedLength(const void* data, size_t len, int* pad_bytes)"
  }
]