[
  {
    "label": "ErlEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ErlEstimator"
  },
  {
    "label": "ErlEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_ERL_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_ERL_ESTIMATOR_H_ # include<stddef . h> # include<array> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" namespace webrtc { class ErlEstimator { public :)",
    "insertText": "ErlEstimator(size_t startup_phase_length_blocks_)"
  },
  {
    "label": "ErlEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ErlEstimator()"
  },
  {
    "label": "ErlEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ErlEstimator(const ErlEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ErlEstimator&)",
    "insertText": "operator(const ErlEstimator&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const std::vector<bool>& converged_filters, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> render_spectra, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> capture_spectra)"
  },
  {
    "label": "Erl()",
    "kind": "Method",
    "detail": "Function (const std::array<float,kFftLengthBy2Plus1>&)",
    "insertText": "Erl()"
  }
]