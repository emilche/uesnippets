[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FDockingConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDockingConstants"
  },
  {
    "label": "SDockingTabWell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabWell"
  },
  {
    "label": "SDockingTabStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockingTabStack"
  },
  {
    "label": "GetMaxTabSizeFor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" # include \" Framework / Docking / SDockingNode . h \" # include \" Widgets / Docking / SDockTab . h \" # include \" Framework / Docking / SDockingTabStack . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; struct FDockingConstants { const FVector2D MaxMinorTabSize ; const FVector2D MaxMajorTabSize ; const FVector2D)",
    "insertText": "GetMaxTabSizeFor(ETabRole TabRole)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SDockingTabWell : public SPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDockingTabWell ) : _ParentStackNode( TSharedPtr<SDockingTabStack>( NULL ))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(TSharedPtr<SDockingTabStack>, ParentStackNode ) SLATE_END_ARGS() SDockingTabWell()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetNumTabs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTabs()"
  },
  {
    "label": "GetTabs()",
    "kind": "Method",
    "detail": "Function (const TSlotlessChildren<SDockTab>&)",
    "insertText": "GetTabs()"
  },
  {
    "label": "AddTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTab(const TSharedRef<SDockTab>& InTab, int32 AtIndex = INDEX_NONE, bool bKeepInactive = false)"
  },
  {
    "label": "BringTabToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringTabToFront(int32 TabIndexToActivate)"
  },
  {
    "label": "BringTabToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringTabToFront(TSharedPtr<SDockTab> TabToActivate)"
  },
  {
    "label": "GetForegroundTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockTab>)",
    "insertText": "GetForegroundTab()"
  },
  {
    "label": "GetForegroundTabIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetForegroundTabIndex()"
  },
  {
    "label": "RemoveAndDestroyTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAndDestroyTab(const TSharedRef<SDockTab>& TabToRemove, SDockingNode::ELayoutModification RemovalMethod)"
  },
  {
    "label": "RefreshParentContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshParentContent()"
  },
  {
    "label": "GetDockArea()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingArea>)",
    "insertText": "GetDockArea()"
  },
  {
    "label": "GetParentDockTabStack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SDockingTabStack>)",
    "insertText": "GetParentDockTabStack()"
  },
  {
    "label": "StartDraggingTab()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "StartDraggingTab(TSharedRef<SDockTab> TabToStartDragging, FVector2D TabGrabOffsetFraction, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeChildSize()",
    "kind": "Method",
    "detail": "Function (public : FVector2D)",
    "insertText": "ComputeChildSize(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetWindowZoneOverride()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetWindowZoneOverride()"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ComputeDraggedTabOffset()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "ComputeDraggedTabOffset(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, const FVector2D& TabGrabOffsetFraction)"
  },
  {
    "label": "ComputeChildDropIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeChildDropIndex(const FGeometry& MyGeometry, const TSharedRef<SDockTab>& TabBeingDragged)"
  }
]