[
  {
    "label": "TUniqueObj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniqueObj"
  },
  {
    "label": "TUniqueObj()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / UniquePtr . h \" template<T> class TUniqueObj { public : using ElementType = T ;)",
    "insertText": "TUniqueObj(const TUniqueObj& other) : Obj(MakeUnique<T>(*other))"
  },
  {
    "label": "TUniqueObj()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUniqueObj(TUniqueObj&& other) : Obj(MakeUnique<T>(MoveTemp(*other)))"
  },
  {
    "label": "TUniqueObj()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "TUniqueObj(Args&&... args) : Obj(MakeUnique<T>(Forward<Args>(args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TUniqueObj&)",
    "insertText": "operator(const TUniqueObj&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUniqueObj&)",
    "insertText": "operator(TUniqueObj&& other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Obj, other.Obj)"
  },
  {
    "label": "Arg()",
    "kind": "Method",
    "detail": "Function (* Obj = Forward<)",
    "insertText": "Arg(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<* Obj ; } private : TUniquePtr<T> Obj ; } ; template<T> FArchive&)",
    "insertText": "operator(FArchive& Ar, TUniqueObj<T>& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  }
]