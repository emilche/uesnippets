[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FNumericUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericUnit"
  },
  {
    "label": "that",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "that"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNumericUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericUnit"
  },
  {
    "label": "FUnitSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnitSettings"
  },
  {
    "label": "FUnitConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnitConversion"
  },
  {
    "label": "FNumericUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericUnit"
  },
  {
    "label": "FUnitSettings()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FUnitSettings()"
  },
  {
    "label": "SetShouldDisplayUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldDisplayUnits(bool bInGlobalUnitDisplay)"
  },
  {
    "label": "SetDisplayUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayUnits(EUnitType InType, const TArray<EUnit>& Units)"
  },
  {
    "label": "SetDisplayUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayUnits(EUnitType InType, EUnit Units)"
  },
  {
    "label": "AreUnitsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreUnitsCompatible(EUnit From, EUnit To)"
  },
  {
    "label": "IsUnitOfType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnitOfType(EUnit Unit, EUnitType Type)"
  },
  {
    "label": "GetUnitType()",
    "kind": "Method",
    "detail": "Function (EUnitType)",
    "insertText": "GetUnitType(EUnit)"
  },
  {
    "label": "UnitFromString()",
    "kind": "Method",
    "detail": "Function (TOptional<EUnit>)",
    "insertText": "UnitFromString(const TCHAR* UnitString)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Convert(T InValue, EUnit From, EUnit To)"
  },
  {
    "label": "QuantizeUnitsToBestFit()",
    "kind": "Method",
    "detail": "Function (FNumericUnit<T>)",
    "insertText": "QuantizeUnitsToBestFit(T Value, EUnit Units)"
  },
  {
    "label": "CalculateDisplayUnit()",
    "kind": "Method",
    "detail": "Function (EUnit)",
    "insertText": "CalculateDisplayUnit(T Value, EUnit InUnits)"
  },
  {
    "label": "FNumericUnit()",
    "kind": "Method",
    "detail": "Function (OtherType>)",
    "insertText": "FNumericUnit(const FNumericUnit<OtherType>& Other)"
  },
  {
    "label": "TryParseExpression()",
    "kind": "Method",
    "detail": "Function (FText>)",
    "insertText": "TryParseExpression(const TCHAR* InExpression, EUnit InDefaultUnit, const FNumericUnit<NumericType>& InExistingValue)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (TOptional<FNumericUnit<NumericType>>)",
    "insertText": "TryParseString(const TCHAR* InSource)"
  },
  {
    "label": "CopyValueWithConversion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValueWithConversion(const FNumericUnit<OtherType>& Other)"
  },
  {
    "label": "ExtractNumberBoundary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractNumberBoundary(const TCHAR* Start, const TCHAR*& End)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FNumericUnit<T>& NumericUnit)"
  },
  {
    "label": "LexToSanitizedString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToSanitizedString(const FNumericUnit<T>& NumericUnit)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(FNumericUnit<T>& OutValue, const TCHAR* String)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexTryParseString(FNumericUnit<T>& OutValue, const TCHAR* String)"
  }
]