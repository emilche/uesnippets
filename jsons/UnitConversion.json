[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FNumericUnit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumericUnit"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FUnitSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnitSettings"
  },
  {
    "label": "FUnitConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnitConversion"
  },
  {
    "label": "FUnitSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Misc / Optional . h \" # include \" Templates / ValueOrError . h \" class FText ; template<NumericType> struct FNumericUnit ; enum class EUnit : uint8 { Micrometers,Millimeters,Centimeters,Meters,Kilometers,Inches,Feet,Yards,Miles,Lightyears,Degrees,Radians,CentimetersPerSecond,MetersPerSecond,KilometersPerHour,MilesPerHour,DegreesPerSecond,RadiansPerSecond,CentimetersPerSecondSquared,MetersPerSecondSquared,Celsius,Farenheit,Kelvin,Micrograms,Milligrams,Grams,Kilograms,MetricTons,Ounces,Pounds,Stones,GramsPerCubicCentimeter,GramsPerCubicMeter,KilogramsPerCubicCentimeter,KilogramsPerCubicMeter,Newtons,PoundsForce,KilogramsForce,KilogramCentimetersPerSecondSquared,NewtonMeters,KilogramCentimetersSquaredPerSecondSquared,NewtonSeconds,KilogramCentimeters,KilogramMeters,Hertz,Kilohertz,Megahertz,Gigahertz,RevolutionsPerMinute,Bytes,Kilobytes,Megabytes,Gigabytes,Terabytes,Lumens,Candela,Lux,CandelaPerMeter2,ExposureValue,Nanoseconds,Microseconds,Milliseconds,Seconds,Minutes,Hours,Days,Months,Years,PixelsPerInch,Percentage,Multiplier,Pascals,KiloPascals,MegaPascals,GigaPascals,Unspecified } ; enum class EUnitType { Distance,Angle,Speed,AngularSpeed,Acceleration,Temperature,Mass,Density,Force,Torque,Impulse,PositionalImpulse,Frequency,DataSize,LuminousFlux,LuminousIntensity,Illuminance,Luminance,Time,PixelDensity,Multipliers,ExposureValue,Stress,NumberOf,} ; template<NumericType> struct FNumericUnit ; class FUnitSettings { public :)",
    "insertText": "FUnitSettings()"
  },
  {
    "label": "ShouldDisplayUnits()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDisplayUnits()"
  },
  {
    "label": "SetShouldDisplayUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldDisplayUnits(bool bInGlobalUnitDisplay)"
  },
  {
    "label": "GetDisplayUnits()",
    "kind": "Method",
    "detail": "Function (const TArray<EUnit>&)",
    "insertText": "GetDisplayUnits(EUnitType InType)"
  },
  {
    "label": "SetDisplayUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayUnits(EUnitType InType, const TArray<EUnit>& Units)"
  },
  {
    "label": "SetDisplayUnits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayUnits(EUnitType InType, EUnit Units)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FUnitSettings, FDisplaySettingChanged)"
  },
  {
    "label": "OnDisplaySettingsChanged()",
    "kind": "Method",
    "detail": "Function (FDisplaySettingChanged&)",
    "insertText": "OnDisplaySettingsChanged()"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (FDisplaySettingChanged SettingChangedEvent ; } ; struct FUnitConversion { FUnitSettings&)",
    "insertText": "Settings()"
  },
  {
    "label": "AreUnitsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreUnitsCompatible(EUnit From, EUnit To)"
  },
  {
    "label": "IsUnitOfType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnitOfType(EUnit Unit, EUnitType Type)"
  },
  {
    "label": "GetUnitType()",
    "kind": "Method",
    "detail": "Function (EUnitType)",
    "insertText": "GetUnitType(EUnit)"
  },
  {
    "label": "GetUnitDisplayString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetUnitDisplayString(EUnit Unit)"
  },
  {
    "label": "UnitFromString()",
    "kind": "Method",
    "detail": "Function (TOptional<EUnit>)",
    "insertText": "UnitFromString(const TCHAR* UnitString)"
  },
  {
    "label": "GetSupportedUnits()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<const TCHAR*>)",
    "insertText": "GetSupportedUnits()"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (public : template<T> T)",
    "insertText": "Convert(T InValue, EUnit From, EUnit To)"
  },
  {
    "label": "QuantizeUnitsToBestFit()",
    "kind": "Method",
    "detail": "Function (template<T> FNumericUnit<T>)",
    "insertText": "QuantizeUnitsToBestFit(T Value, EUnit Units)"
  },
  {
    "label": "CalculateDisplayUnit()",
    "kind": "Method",
    "detail": "Function (template<T> EUnit)",
    "insertText": "CalculateDisplayUnit(T Value, EUnit InUnits)"
  },
  {
    "label": "FNumericUnit()",
    "kind": "Method",
    "detail": "Function (} ; template<NumericType> struct FNumericUnit { NumericType Value ; const EUnit Units ;)",
    "insertText": "FNumericUnit()"
  },
  {
    "label": "FNumericUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNumericUnit(const NumericType& InValue, EUnit InUnits = EUnit::Unspecified)"
  },
  {
    "label": "FNumericUnit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNumericUnit(const FNumericUnit& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNumericUnit&)",
    "insertText": "operator(const FNumericUnit& Other)"
  },
  {
    "label": "FNumericUnit()",
    "kind": "Method",
    "detail": "Function (template<OtherType>)",
    "insertText": "FNumericUnit(const FNumericUnit<OtherType>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherType> FNumericUnit&)",
    "insertText": "operator(const FNumericUnit<OtherType>& Other)"
  },
  {
    "label": "ConvertTo()",
    "kind": "Method",
    "detail": "Function (TOptional<FNumericUnit<NumericType>>)",
    "insertText": "ConvertTo(EUnit ToUnits)"
  },
  {
    "label": "QuantizeUnitsToBestFit()",
    "kind": "Method",
    "detail": "Function (public : FNumericUnit<NumericType>)",
    "insertText": "QuantizeUnitsToBestFit()"
  },
  {
    "label": "TryParseExpression()",
    "kind": "Method",
    "detail": "Function (TValueOrError<FNumericUnit<NumericType>,FText>)",
    "insertText": "TryParseExpression(const TCHAR* InExpression, EUnit InDefaultUnit, const FNumericUnit<NumericType>& InExistingValue)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (TOptional<FNumericUnit<NumericType>>)",
    "insertText": "TryParseString(const TCHAR* InSource)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (private : operator const)",
    "insertText": "NumericType()"
  },
  {
    "label": "CopyValueWithConversion()",
    "kind": "Method",
    "detail": "Function (template<OtherType> void)",
    "insertText": "CopyValueWithConversion(const FNumericUnit<OtherType>& Other)"
  },
  {
    "label": "ExtractNumberBoundary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExtractNumberBoundary(const TCHAR* Start, const TCHAR*& End)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherType> bool)",
    "insertText": "operator(const FNumericUnit<NumericType>& LHS, const FNumericUnit<OtherType>& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<CharType,T> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FNumericUnit<T>& NumericUnit)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (template<T> FString)",
    "insertText": "LexToString(const FNumericUnit<T>& NumericUnit)"
  },
  {
    "label": "LexToSanitizedString()",
    "kind": "Method",
    "detail": "Function (template<T> FString)",
    "insertText": "LexToSanitizedString(const FNumericUnit<T>& NumericUnit)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "LexFromString(FNumericUnit<T>& OutValue, const TCHAR* String)"
  },
  {
    "label": "LexTryParseString()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "LexTryParseString(FNumericUnit<T>& OutValue, const TCHAR* String)"
  }
]