[
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_FREESLOT_BITMAP_CONSTANTS_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_FREESLOT_BITMAP_CONSTANTS_H_ # include<cstdint> # include \" base / allocator / partition_allocator / partition_alloc_base / bits . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / partition_tag_bitmap . h \" # include \" base / allocator / partition_allocator / reservation_offset_table . h \" namespace partition_alloc::internal { using FreeSlotBitmapCellType = uint64_t ; size_t kFreeSlotBitmapBitsPerCell =)",
    "insertText": "sizeof(FreeSlotBitmapCellType)"
  },
  {
    "label": "kFreeSlotBitmapSize()",
    "kind": "Method",
    "detail": "Function (size_t kFreeSlotBitmapOffsetMask = kFreeSlotBitmapBitsPerCell - 1 ; size_t)",
    "insertText": "kFreeSlotBitmapSize(kSuperPageSize / kSmallestBucket)"
  },
  {
    "label": "ReservedFreeSlotBitmapSize()",
    "kind": "Method",
    "detail": "Function (PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "ReservedFreeSlotBitmapSize()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_FREESLOT_BITMAP) return base::bits::AlignUp(kFreeSlotBitmapSize, PartitionPageSize())"
  },
  {
    "label": "CommittedFreeSlotBitmapSize()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "CommittedFreeSlotBitmapSize()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_FREESLOT_BITMAP) return base::bits::AlignUp(kFreeSlotBitmapSize, SystemPageSize())"
  },
  {
    "label": "NumPartitionPagesPerFreeSlotBitmap()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "NumPartitionPagesPerFreeSlotBitmap()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(USE_FREESLOT_BITMAP) PA_ALWAYS_INLINE uintptr_t SuperPageFreeSlotBitmapAddr(uintptr_t super_page)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!(super_page % kSuperPageAlignment))"
  }
]