[
  {
    "label": "_cef_scheme_handler_factory_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_scheme_handler_factory_t"
  },
  {
    "label": "_cef_scheme_registrar_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_scheme_registrar_t"
  },
  {
    "label": "_cef_resource_handler_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_resource_handler_t"
  },
  {
    "label": "_cef_browser_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_browser_t"
  },
  {
    "label": "_cef_frame_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_frame_t"
  },
  {
    "label": "_cef_request_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_request_t"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_SCHEME_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_SCHEME_CAPI_H_ # pragma once # include \" include / capi / cef_base_capi . h \" # include \" include / capi / cef_browser_capi . h \" # include \" include / capi / cef_frame_capi . h \" # include \" include / capi / cef_request_capi . h \" # include \" include / capi / cef_resource_handler_capi . h \" # include \" include / capi / cef_response_capi . h \" # ifdef __cplusplus \" C \" { # endif struct _cef_scheme_handler_factory_t ; typedef struct _cef_scheme_registrar_t { cef_base_scoped_t base ;)",
    "insertText": "int(CEF_CALLBACK* add_custom_scheme)(struct _cef_scheme_registrar_t* self, const cef_string_t* scheme_name, int options)"
  },
  {
    "label": "_cef_resource_handler_t()",
    "kind": "Method",
    "detail": "Function (} cef_scheme_registrar_t ; typedef struct _cef_scheme_handler_factory_t { cef_base_ref_counted_t base ; struct)",
    "insertText": "_cef_resource_handler_t(CEF_CALLBACK* create)( struct _cef_scheme_handler_factory_t* self, struct _cef_browser_t* browser, struct _cef_frame_t* frame, const cef_string_t* scheme_name, struct _cef_request_t* request)"
  },
  {
    "label": "cef_register_scheme_handler_factory()",
    "kind": "Method",
    "detail": "Function (} cef_scheme_handler_factory_t ; CEF_EXPORT int)",
    "insertText": "cef_register_scheme_handler_factory(const cef_string_t* scheme_name, const cef_string_t* domain_name, cef_scheme_handler_factory_t* factory)"
  },
  {
    "label": "cef_clear_scheme_handler_factories()",
    "kind": "Method",
    "detail": "Function (CEF_EXPORT int)",
    "insertText": "cef_clear_scheme_handler_factories()"
  }
]