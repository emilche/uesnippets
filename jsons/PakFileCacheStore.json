[
  {
    "label": "IPakFileCacheStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFileCacheStore"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" DerivedDataLegacyCacheStore . h \" namespace UE::DerivedData { class IPakFileCacheStore : public ILegacyCacheStore { public : void)",
    "insertText": "Close()"
  },
  {
    "label": "IsWritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWritable()"
  },
  {
    "label": "SaveCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveCache()"
  },
  {
    "label": "LoadCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCache(const TCHAR* InFilename)"
  },
  {
    "label": "MergeCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeCache(IPakFileCacheStore* OtherPak)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFilename()"
  },
  {
    "label": "SortAndCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SortAndCopy(const FString& InputFilename, const FString& OutputFilename)"
  }
]