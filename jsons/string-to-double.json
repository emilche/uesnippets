[
  {
    "label": "StringToDoubleConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringToDoubleConverter"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "StringToDoubleConverter()",
    "kind": "Method",
    "detail": "Function (# ifndef DOUBLE_CONVERSION_STRING_TO_DOUBLE_H_ # define DOUBLE_CONVERSION_STRING_TO_DOUBLE_H_ # include \" utils . h \" namespace double_conversion { class StringToDoubleConverter { public : enum Flags { NO_FLAGS = 0,ALLOW_HEX = 1,ALLOW_OCTALS = 2,ALLOW_TRAILING_JUNK = 4,ALLOW_LEADING_SPACES = 8,ALLOW_TRAILING_SPACES = 1 6,ALLOW_SPACES_AFTER_SIGN = 3 2,ALLOW_CASE_INSENSITIVITY = 6 4,ALLOW_CASE_INSENSIBILITY = 6 4,ALLOW_HEX_FLOATS = 1 2 8,} ; const uc16 kNoSeparator = ' \\ 0 ' ;)",
    "insertText": "StringToDoubleConverter(int flags, double empty_string_value, double junk_string_value, const char* infinity_symbol, const char* nan_symbol, uc16 separator = kNoSeparator) : flags_(flags), empty_string_value_(empty_string_value), junk_string_value_(junk_string_value), infinity_symbol_(infinity_symbol), nan_symbol_(nan_symbol), separator_(separator)"
  },
  {
    "label": "StringToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "StringToDouble(const char* buffer, int length, int* processed_characters_count)"
  },
  {
    "label": "StringToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "StringToFloat(const char* buffer, int length, int* processed_characters_count)"
  },
  {
    "label": "StringToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "StringToFloat(const uc16* buffer, int length, int* processed_characters_count)"
  },
  {
    "label": "StringTo()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "StringTo(const char* buffer, int length, int* processed_characters_count)"
  },
  {
    "label": "StringTo()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "StringTo(const uc16* buffer, int length, int* processed_characters_count)"
  },
  {
    "label": "StringToIeee()",
    "kind": "Method",
    "detail": "Function (private : const int flags_ ; const double empty_string_value_ ; const double junk_string_value_ ; const char* const infinity_symbol_ ; const char* const nan_symbol_ ; const uc16 separator_ ; template<class Iterator> double)",
    "insertText": "StringToIeee(Iterator start_pointer, int length, bool read_as_double, int* processed_characters_count)"
  }
]