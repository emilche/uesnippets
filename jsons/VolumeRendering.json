[
  {
    "label": "FVolumeBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumeBounds"
  },
  {
    "label": "FWriteToSliceVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteToSliceVS"
  },
  {
    "label": "FWriteToSliceGS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteToSliceGS"
  },
  {
    "label": "FVolumeRasterizeVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeRasterizeVertexBuffer"
  },
  {
    "label": "FVolumeBounds()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Shader . h \" # include \" ShaderCompilerCore . h \" # include \" ShaderParameters . h \" # include \" GlobalShader . h \" # include \" ShaderParameterUtils . h \" # include \" ScreenRendering . h \" struct FVolumeBounds { int32 MinX,MinY,MinZ ; int32 MaxX,MaxY,MaxZ ;)",
    "insertText": "FVolumeBounds() : MinX(0), MinY(0), MinZ(0), MaxX(0), MaxY(0), MaxZ(0)"
  },
  {
    "label": "FVolumeBounds()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVolumeBounds(int32 Max) : MinX(0), MinY(0), MinZ(0), MaxX(Max), MaxY(Max), MaxZ(Max)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FWriteToSliceVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FWriteToSliceVS()"
  },
  {
    "label": "FWriteToSliceVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWriteToSliceVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FVolumeBounds& VolumeBounds, const FIntVector& VolumeResolution)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (const float InvVolumeResolutionX = 1 . 0 f / VolumeResolution . X ; const float InvVolumeResolutionY = 1 . 0 f / VolumeResolution . Y ;)",
    "insertText": "SetShaderValue(BatchedParameters, UVScaleBias, FVector4f( (VolumeBounds.MaxX - VolumeBounds.MinX) * InvVolumeResolutionX, (VolumeBounds.MaxY - VolumeBounds.MinY) * InvVolumeResolutionY, VolumeBounds.MinX * InvVolumeResolutionX, VolumeBounds.MinY * InvVolumeResolutionY))"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, MinZ, VolumeBounds.MinZ)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, UVScaleBias)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, MinZ)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FWriteToSliceGS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FWriteToSliceGS, ENGINE_API)"
  },
  {
    "label": "FWriteToSliceGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FWriteToSliceGS()"
  },
  {
    "label": "FWriteToSliceGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWriteToSliceGS(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, int32 MinZValue)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, MinZ, MinZValue)"
  },
  {
    "label": "RasterizeToVolumeTexture()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RasterizeToVolumeTexture(FRHICommandList& RHICmdList, FVolumeBounds VolumeBounds)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (class FVolumeRasterizeVertexBuffer : public FVertexBuffer { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  }
]