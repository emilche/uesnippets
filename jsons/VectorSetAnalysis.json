[
  {
    "label": "TVectorSetAnalysis3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVectorSetAnalysis3"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TVectorSetAnalysis3 { public : TArray<TVector<RealType>> Vectors ; TArray<int32> VectorIDs ; bool bNormalized = false ; TArray<TVector<RealType>> ClusterVectors ; TArray<int32> VectorToClusterMap ; template<EnumerableIDType> void)",
    "insertText": "Initialize(EnumerableIDType EnumerableIDs, TFunctionRef<TVector<RealType>(int32)> GetVectorFunc, int32 NumVectorsHint = 0, bool bIsNormalizedHint = false)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Vectors .)",
    "insertText": "Reserve(NumVectorsHint)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VectorIDs .)",
    "insertText": "Add(ID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Vectors .)",
    "insertText": "Add(GetVectorFunc(ID))"
  },
  {
    "label": "NumVectors()",
    "kind": "Method",
    "detail": "Function (} bNormalized = bIsNormalizedHint ; } int32)",
    "insertText": "NumVectors()"
  },
  {
    "label": "NumClusters()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumClusters()"
  },
  {
    "label": "GreedyClusterVectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GreedyClusterVectors(RealType AngleToleranceDeg)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (RealType DotTolerance = TMathUtil<RealType)",
    "insertText": "Cos(AngleToleranceDeg * TMathUtil<RealType>::DegToRad)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (VectorToClusterMap .)",
    "insertText": "SetNum(N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bFound = false ;)",
    "insertText": "if(M > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VectorToClusterMap [ k ] = j ; bFound = true ; } } })",
    "insertText": "if(!bFound)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ClusterVectors .)",
    "insertText": "Add(Vectors[k])"
  }
]