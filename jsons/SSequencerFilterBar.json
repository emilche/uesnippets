[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerFilterBarContextMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerFilterBarContextMenu"
  },
  {
    "label": "FSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerFilterBar"
  },
  {
    "label": "FSequencerTrackFilter_CustomText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_CustomText"
  },
  {
    "label": "SFilterBarClippingHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterBarClippingHorizontalBox"
  },
  {
    "label": "SFilterExpressionHelpDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterExpressionHelpDialog"
  },
  {
    "label": "SSequencerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilter"
  },
  {
    "label": "UMovieSceneNodeGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneNodeGroup"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SSequencerFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerFilterBar"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Filters / SBasicFilterBar . h \" # include \" Filters / SequencerTrackFilterBase . h \" class FSequencer ; class FSequencerFilterBarContextMenu ; class FSequencerFilterBar ; class FSequencerTrackFilter_CustomText ; class SFilterBarClippingHorizontalBox ; class SFilterExpressionHelpDialog ; class SSequencerFilter ; class UMovieSceneNodeGroup ; enum class ESequencerFilterChange : uint8 ; class SSequencerFilterBar : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE(FOnFilterChanged)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSharedPtr<FSequencerTrackFilter_CustomText>, FCreateTextFilter)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnFilterBarLayoutChanging, EFilterBarLayout)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FSequencerFilterBar, FSequencerFiltersChanged)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSequencerFilterBar, FExternalCustomTextFilterEvent, const TSharedRef<FSequencerFilterBar>&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SSequencerFilterBar) : _FilterBarLayout(EFilterBarLayout::Vertical) , _CanChangeOrientation(true) , _FilterPillStyle(EFilterPillStyle::Default) , _UseSectionsForCategories(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SFilterSearchBox>, FilterSearchBox) SLATE_ARGUMENT(EFilterBarLayout, FilterBarLayout) SLATE_ARGUMENT(bool, CanChangeOrientation) SLATE_ARGUMENT(EFilterPillStyle, FilterPillStyle) SLATE_ARGUMENT(bool, UseSectionsForCategories) SLATE_END_ARGS() virtual ~SSequencerFilterBar()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FSequencerFilterBar>& InFilterBar)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetFilterBar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencerFilterBar>)",
    "insertText": "GetFilterBar()"
  },
  {
    "label": "SetTextFilterString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFilterString(const FString& InFilterString)"
  },
  {
    "label": "GetFilterErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterErrorText()"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (EFilterBarLayout)",
    "insertText": "GetLayout()"
  },
  {
    "label": "SetLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayout(const EFilterBarLayout InFilterBarLayout)"
  },
  {
    "label": "AttachFilterSearchBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachFilterSearchBox(const TSharedPtr<SFilterSearchBox>& InFilterSearchBox)"
  },
  {
    "label": "HasAnyFilterWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyFilterWidgets()"
  },
  {
    "label": "CreateAddCustomTextFilterWindowFromSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAddCustomTextFilterWindowFromSearch(const FText& InSearchText)"
  },
  {
    "label": "OnOpenTextExpressionHelp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenTextExpressionHelp()"
  },
  {
    "label": "SaveCurrentFilterSetAsCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentFilterSetAsCustomTextFilter()"
  },
  {
    "label": "GetSearchBox()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SFilterSearchBox>)",
    "insertText": "GetSearchBox()"
  },
  {
    "label": "SetMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMuted(bool bInMuted)"
  },
  {
    "label": "AddWidgetToLayout()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddWidgetToLayout(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "RemoveWidgetFromLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidgetFromLayout(const TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "FindFilterWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SSequencerFilter>)",
    "insertText": "FindFilterWidget(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "CreateAndAddFilterWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAndAddFilterWidget(const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "AddFilterWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilterWidget(const TSharedRef<SSequencerFilter>& InFilterWidget)"
  },
  {
    "label": "RemoveFilterWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilterWidget(const TSharedRef<FSequencerTrackFilter>& InFilter, const bool ExecuteOnFilterChanged = true)"
  },
  {
    "label": "RemoveFilterWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilterWidget(const TSharedRef<SSequencerFilter>& InFilterWidget)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "RemoveAllFilterWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllFilterWidgets()"
  },
  {
    "label": "RemoveAllFilterWidgetsButThis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllFilterWidgetsButThis(const TSharedRef<SSequencerFilter>& InFilterWidget)"
  },
  {
    "label": "RemoveFilterWidgetAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilterWidgetAndUpdate(const TSharedRef<SSequencerFilter>& InFilterWidget)"
  },
  {
    "label": "OnEnableAllGroupFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnableAllGroupFilters(bool bEnableAll)"
  },
  {
    "label": "OnNodeGroupFilterClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeGroupFilterClicked(UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "OnFiltersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFiltersChanged(const ESequencerFilterChange InChangeType, const TSharedRef<FSequencerTrackFilter>& InFilter)"
  },
  {
    "label": "CreateFilterWidgetsFromConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFilterWidgetsFromConfig()"
  },
  {
    "label": "OnWrapButtonClicked()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnWrapButtonClicked()"
  }
]