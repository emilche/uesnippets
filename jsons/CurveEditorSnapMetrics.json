[
  {
    "label": "FCurveSnapMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveSnapMetrics"
  },
  {
    "label": "FCurveEditorAxisSnap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorAxisSnap"
  },
  {
    "label": "FSnapState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnapState"
  },
  {
    "label": "FCurveSnapMetrics()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / MinElement . h \" # include \" Input / Events . h \" # include \" Misc / FrameRate . h \" # include \" Math / Axis . h \" # include \" Math / Vector2D . h \" # include \" CurveEditorSettings . h \" struct FCurveSnapMetrics {)",
    "insertText": "FCurveSnapMetrics()"
  },
  {
    "label": "SnapInputSeconds()",
    "kind": "Method",
    "detail": "Function (bSnapOutputValues = 0 ; bSnapInputValues = 0 ; } uint8 bSnapOutputValues : 1 ; uint8 bSnapInputValues : 1 ; TArray<double> AllGridLines ; FFrameRate InputSnapRate ; double)",
    "insertText": "SnapInputSeconds(double InputTime)"
  },
  {
    "label": "SnapOutput()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SnapOutput(double OutputValue)"
  },
  {
    "label": "FSnapState()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCurveEditorAxisSnap { struct FSnapState {)",
    "insertText": "FSnapState()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FCurveEditorAxisSnap()",
    "kind": "Method",
    "detail": "Function (MouseLockVector = FVector2D::UnitVector ; MousePosOnShiftStart = FVector2D::ZeroVector ; bHasPassedThreshold = false ; bHasStartPosition = false ; } FVector2D MousePosOnShiftStart ; FVector2D MouseLockVector ; bool bHasPassedThreshold ; bool bHasStartPosition ; } ; ECurveEditorSnapAxis RestrictedAxisList ;)",
    "insertText": "FCurveEditorAxisSnap()"
  },
  {
    "label": "GetSnappedPosition()",
    "kind": "Method",
    "detail": "Function (RestrictedAxisList = ECurveEditorSnapAxis::CESA_None ; } FVector2D)",
    "insertText": "GetSnappedPosition(FVector2D InitialPosition, FVector2D LastPosition, FVector2D CurrentPosition, const FPointerEvent& MouseEvent, FSnapState& InOutSnapState, const bool bIgnoreAxisLock = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bCanUseShift = bIgnoreAxisLock | | RestrictedAxisList = = ECurveEditorSnapAxis::CESA_None ; FVector2D MouseLockVector = FVector2D::UnitVector ;)",
    "insertText": "if(bCanUseShift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InOutSnapState . MousePosOnShiftStart = LastPosition ; InOutSnapState . bHasStartPosition = true ; })",
    "insertText": "if(!InOutSnapState.bHasPassedThreshold)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InOutSnapState . MouseLockVector = MouseLockVector ; FVector2D DragDelta = CurrentPosition - InOutSnapState . MousePosOnShiftStart ;)",
    "insertText": "if(DragDelta.Size() > 0.001f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InOutSnapState . bHasPassedThreshold = true ; InOutSnapState . MouseLockVector = FVector2D::UnitVector ;)",
    "insertText": "if(FMath::Abs(DragDelta.X) > FMath::Abs(DragDelta.Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} MouseLockVector = InOutSnapState . MouseLockVector ; } else)",
    "insertText": "if(!bIgnoreAxisLock && RestrictedAxisList == ECurveEditorSnapAxis::CESA_X)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MouseLockVector . Y = 0 ; } else)",
    "insertText": "if(!bIgnoreAxisLock && RestrictedAxisList == ECurveEditorSnapAxis::CESA_Y)"
  },
  {
    "label": "InitialPosition()",
    "kind": "Method",
    "detail": "Function (MouseLockVector . X = 0 ; } return)",
    "insertText": "InitialPosition(CurrentPosition - InitialPosition)"
  }
]