[
  {
    "label": "UDPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDPPort"
  },
  {
    "label": "AddressResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddressResolver"
  },
  {
    "label": "StunBindingRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunBindingRequest"
  },
  {
    "label": "StunPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunPort"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_STUN_PORT_H_ # define P2P_BASE_STUN_PORT_H_ # include<functional> # include<map> # include<memory> # include<string> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" p2p / base / port . h \" # include \" p2p / base / stun_request . h \" # include \" rtc_base / async_packet_socket . h \" namespace cricket { const int INFINITE_LIFETIME = - 1 ; const int HIGH_COST_PORT_KEEPALIVE_LIFETIME = 2* 6 0* 1 0 0 0 ; class UDPPort : public Port { public : std::unique_ptr<UDPPort>)",
    "insertText": "Create(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, rtc::AsyncPacketSocket* socket, absl::string_view username, absl::string_view password, bool emit_local_for_anyaddress, absl::optional<int> stun_keepalive_interval, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "WrapUnique()",
    "kind": "Method",
    "detail": "Function (auto port =)",
    "insertText": "WrapUnique(new UDPPort(thread, factory, network, socket, username, password, emit_local_for_anyaddress, field_trials))"
  },
  {
    "label": "set_stun_keepalive_delay()",
    "kind": "Method",
    "detail": "Function (port ->)",
    "insertText": "set_stun_keepalive_delay(stun_keepalive_interval)"
  },
  {
    "label": "WrapUnique()",
    "kind": "Method",
    "detail": "Function (auto port =)",
    "insertText": "WrapUnique(new UDPPort(thread, factory, network, min_port, max_port, username, password, emit_local_for_anyaddress, field_trials))"
  },
  {
    "label": "GetLocalAddress()",
    "kind": "Method",
    "detail": "Function (rtc::SocketAddress)",
    "insertText": "GetLocalAddress()"
  },
  {
    "label": "server_addresses()",
    "kind": "Method",
    "detail": "Function (} const ServerAddresses&)",
    "insertText": "server_addresses()"
  },
  {
    "label": "PrepareAddress()",
    "kind": "Method",
    "detail": "Function (server_addresses_ = addresses ; } void)",
    "insertText": "PrepareAddress()"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (Connection*)",
    "insertText": "CreateConnection(const Candidate& address, CandidateOrigin origin)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "HandleIncomingPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIncomingPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& remote_addr, int64_t packet_time_us)"
  },
  {
    "label": "SupportsProtocol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsProtocol(absl::string_view protocol)"
  },
  {
    "label": "GetProtocol()",
    "kind": "Method",
    "detail": "Function (ProtocolType)",
    "insertText": "GetProtocol()"
  },
  {
    "label": "GetStunStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStunStats(absl::optional<StunStats>* stats)"
  },
  {
    "label": "set_stun_keepalive_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stun_keepalive_delay(const absl::optional<int>& delay)"
  },
  {
    "label": "stun_keepalive_delay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stun_keepalive_delay()"
  },
  {
    "label": "request_manager()",
    "kind": "Method",
    "detail": "Function (stun_keepalive_lifetime_ = lifetime ; } StunRequestManager&)",
    "insertText": "request_manager()"
  },
  {
    "label": "UDPPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UDPPort(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, rtc::AsyncPacketSocket* socket, absl::string_view username, absl::string_view password, bool emit_local_for_anyaddress, const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* data, size_t size, const rtc::SocketAddress& addr, const rtc::PacketOptions& options, bool payload)"
  },
  {
    "label": "UpdateNetworkCost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworkCost()"
  },
  {
    "label": "StunDscpValue()",
    "kind": "Method",
    "detail": "Function (rtc::DiffServCodePoint)",
    "insertText": "StunDscpValue()"
  },
  {
    "label": "OnLocalAddressReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalAddressReady(rtc::AsyncPacketSocket* socket, const rtc::SocketAddress& address)"
  },
  {
    "label": "PostAddAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostAddAddress(bool is_final)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& remote_addr, const int64_t& packet_time_us)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(rtc::AsyncPacketSocket* socket, const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "MaybePrepareStunCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybePrepareStunCandidate()"
  },
  {
    "label": "SendStunBindingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStunBindingRequests()"
  },
  {
    "label": "MaybeSetDefaultLocalAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeSetDefaultLocalAddress(rtc::SocketAddress* addr)"
  },
  {
    "label": "AddressResolver()",
    "kind": "Method",
    "detail": "Function (private : class AddressResolver { public :)",
    "insertText": "AddressResolver(rtc::PacketSocketFactory* factory, std::function<void(const rtc::SocketAddress&, int)> done_callback)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resolve(const rtc::SocketAddress& address, int family, const webrtc::FieldTrialsView& field_trials)"
  },
  {
    "label": "GetResolvedAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResolvedAddress(const rtc::SocketAddress& input, int family, rtc::SocketAddress* output)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : typedef std::map<rtc::SocketAddress,std::unique_ptr<webrtc::AsyncDnsResolverInterface>> ResolverMap ; rtc::PacketSocketFactory* socket_factory_ ; std::function<)",
    "insertText": "void(const rtc::SocketAddress&, int)"
  },
  {
    "label": "ResolveStunAddress()",
    "kind": "Method",
    "detail": "Function (ResolverMap resolvers_ ; } ; void)",
    "insertText": "ResolveStunAddress(const rtc::SocketAddress& stun_addr)"
  },
  {
    "label": "OnResolveResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolveResult(const rtc::SocketAddress& input, int error)"
  },
  {
    "label": "SendStunBindingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStunBindingRequest(const rtc::SocketAddress& stun_addr)"
  },
  {
    "label": "OnStunBindingRequestSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStunBindingRequestSucceeded(int rtt_ms, const rtc::SocketAddress& stun_server_addr, const rtc::SocketAddress& stun_reflected_addr)"
  },
  {
    "label": "OnStunBindingOrResolveRequestFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStunBindingOrResolveRequestFailed(const rtc::SocketAddress& stun_server_addr, int error_code, absl::string_view reason)"
  },
  {
    "label": "OnSendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendPacket(const void* data, size_t size, StunRequest* req)"
  },
  {
    "label": "MaybeSetPortCompleteOrError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSetPortCompleteOrError()"
  },
  {
    "label": "HasCandidateWithAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCandidateWithAddress(const rtc::SocketAddress& addr)"
  },
  {
    "label": "GetStunKeepaliveLifetime()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStunKeepaliveLifetime()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ServerAddresses server_addresses_ ; ServerAddresses bind_request_succeeded_servers_ ; ServerAddresses bind_request_failed_servers_ ; StunRequestManager request_manager_ ; rtc::AsyncPacketSocket* socket_ ; int error_ ; int send_error_count_ = 0 ; std::unique_ptr<AddressResolver> resolver_ ; bool ready_ ; int stun_keepalive_delay_ ; int stun_keepalive_lifetime_ = INFINITE_LIFETIME ; rtc::DiffServCodePoint dscp_ ; StunStats stats_ ; bool emit_local_for_anyaddress_ ; class StunBindingRequest ; } ; class StunPort : public UDPPort { public : std::unique_ptr<StunPort>)",
    "insertText": "Create(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, const ServerAddresses& servers, absl::optional<int> stun_keepalive_interval, const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "StunPort()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "StunPort(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, const ServerAddresses& servers, const webrtc::FieldTrialsView* field_trials)"
  }
]