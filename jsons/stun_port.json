[
  {
    "label": "UDPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDPPort"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "AddressResolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddressResolver"
  },
  {
    "label": "StunBindingRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunBindingRequest"
  },
  {
    "label": "StunPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunPort"
  },
  {
    "label": "set_stun_keepalive_delay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stun_keepalive_delay(const absl::optional<int>& delay)"
  },
  {
    "label": "UDPPort()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "UDPPort(rtc::Thread* thread,\n          rtc::PacketSocketFactory* factory,\n          const rtc::Network* network,\n          uint16_t min_port,\n          uint16_t max_port,\n          absl::string_view username,\n          absl::string_view password,\n          bool emit_local_for_anyaddress,\n          const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "OnLocalAddressReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLocalAddressReady(rtc::AsyncPacketSocket* socket,\n                           const rtc::SocketAddress& address)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket,\n                    const char* data,\n                    size_t size,\n                    const rtc::SocketAddress& remote_addr,\n                    const int64_t& packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "MaybePrepareStunCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybePrepareStunCandidate()"
  },
  {
    "label": "SendStunBindingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStunBindingRequests()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resolve(const rtc::SocketAddress& address,\n                 int family,\n                 const webrtc::FieldTrialsView& field_trials)"
  },
  {
    "label": "ResolveStunAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveStunAddress(const rtc::SocketAddress& stun_addr)"
  },
  {
    "label": "OnResolveResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolveResult(const rtc::SocketAddress& input, int error)"
  },
  {
    "label": "SendStunBindingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendStunBindingRequest(const rtc::SocketAddress& stun_addr)"
  },
  {
    "label": "OnStunBindingRequestSucceeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStunBindingRequestSucceeded(\n      int rtt_ms,\n      const rtc::SocketAddress& stun_server_addr,\n      const rtc::SocketAddress& stun_reflected_addr)"
  },
  {
    "label": "OnStunBindingOrResolveRequestFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStunBindingOrResolveRequestFailed(\n      const rtc::SocketAddress& stun_server_addr,\n      int error_code,\n      absl::string_view reason)"
  },
  {
    "label": "OnSendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendPacket(const void* data, size_t size, StunRequest* req)"
  },
  {
    "label": "MaybeSetPortCompleteOrError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSetPortCompleteOrError()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StunPort>)",
    "insertText": "Create(\n      rtc::Thread* thread,\n      rtc::PacketSocketFactory* factory,\n      const rtc::Network* network,\n      uint16_t min_port,\n      uint16_t max_port,\n      absl::string_view username,\n      absl::string_view password,\n      const ServerAddresses& servers,\n      absl::optional<int> stun_keepalive_interval,\n      const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "StunPort()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "StunPort(rtc::Thread* thread,\n           rtc::PacketSocketFactory* factory,\n           const rtc::Network* network,\n           uint16_t min_port,\n           uint16_t max_port,\n           absl::string_view username,\n           absl::string_view password,\n           const ServerAddresses& servers,\n           const webrtc::FieldTrialsView* field_trials)"
  }
]