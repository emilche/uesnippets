[
  {
    "label": "TUPtrArrayG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUPtrArrayG"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "PredicateType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredicateType"
  },
  {
    "label": "OtherElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherElementType"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TContainerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContainerTraits"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TUPtrArrayG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" # include \" uLang / Common / Containers / UniquePointer . h \" namespace uLang { template<InElementType,bool AllowNull,InElementAllocatorType,. . . RawAllocatorArgsType> class TUPtrArrayG { template<OtherElementType,bool OtherAllowNull,OtherElementAllocatorType,. . . OtherRawAllocatorArgsType> class TUPtrArrayG ; public : using ElementType = InElementType ; using ElementAllocatorType = InElementAllocatorType ; using PointerType = TUPtrG<ElementType,AllowNull,InElementAllocatorType::RawAllocatorType,RawAllocatorArgsType . . .> ; using PointerStorageType = TArrayG<ElementType*,InElementAllocatorType,RawAllocatorArgsType . . .> ; ULANG_FORCEINLINE)",
    "insertText": "TUPtrArrayG(RawAllocatorArgsType&&... RawAllocatorArgs) : _PointerStorage(uLang::ForwardArg<RawAllocatorArgsType>(RawAllocatorArgs)...)"
  },
  {
    "label": "TUPtrArrayG()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TUPtrArrayG(TUPtrArrayG && Other) : _PointerStorage(ForwardArg<PointerStorageType>(Other._PointerStorage))"
  },
  {
    "label": "TUPtrArrayG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUPtrArrayG(TUPtrArrayG && Other, int32_t ExtraSlack) : _PointerStorage(ForwardArg<PointerStorageType>(Other._PointerStorage), ExtraSlack)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TUPtrArrayG&)",
    "insertText": "operator(TUPtrArrayG&& Other)"
  },
  {
    "label": "DeleteAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAll()"
  },
  {
    "label": "PointerStorageType()",
    "kind": "Method",
    "detail": "Function (_PointerStorage = ForwardArg<)",
    "insertText": "PointerStorageType(Other._PointerStorage)"
  },
  {
    "label": "TUPtrArrayG()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ~)",
    "insertText": "TUPtrArrayG()"
  },
  {
    "label": "GetSlack()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "GetSlack()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsValidIndex(int32_t Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Num()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Max()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsFilled()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsFilled()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE ElementType*)",
    "insertText": "operator(int32_t Index)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "Push(PointerType && Item)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_PointerStorage.GetRawAllocator() == Item.GetAllocator(), \"Allocators must be compatible.\")"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Push(Item.Get())"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (Item . _Object = nullptr ; } ULANG_FORCEINLINE ElementType*)",
    "insertText": "Top()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE ElementType*)",
    "insertText": "Last(int32_t IndexFromTheEnd = 0)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "Find(ElementType * Item, int32_t& Index)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Find(ElementType * Item)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "FindLast(const PointerType & Item, int32_t& Index)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "FindLast(const PointerType & Item)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> ULANG_FORCEINLINE int32_t)",
    "insertText": "FindLastByPredicate(Predicate Pred, int32_t Count)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> ULANG_FORCEINLINE int32_t)",
    "insertText": "FindLastByPredicate(Predicate Pred)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> int32_t)",
    "insertText": "IndexOfByKey(const KeyType& Key)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32_t)",
    "insertText": "IndexOfByPredicate(Predicate Pred)"
  },
  {
    "label": "FindByKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> ULANG_FORCEINLINE ElementType*)",
    "insertText": "FindByKey(const KeyType& Key)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (ElementType* const* Element = _PointerStorage .)",
    "insertText": "FindByPredicate([=](ElementType * Item) -> bool { return *Item == Key; })"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (ElementType* const* Element = _PointerStorage .)",
    "insertText": "FindByPredicate(Pred)"
  },
  {
    "label": "ContainsByKey()",
    "kind": "Method",
    "detail": "Function (} template<ComparisonType> bool)",
    "insertText": "ContainsByKey(const ComparisonType& Key)"
  },
  {
    "label": "ContainsByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> ULANG_FORCEINLINE bool)",
    "insertText": "ContainsByPredicate(Predicate Pred)"
  },
  {
    "label": "InsertZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertZeroed(int32_t Index, int32_t Count = 1)"
  },
  {
    "label": "InsertZeroed()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "InsertZeroed(Index, Count)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Insert(TUPtrArrayG&& Items, const int32_t InIndex)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Insert(PointerType&& Item, int32_t Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ElementType* ItemPtr = Item .)",
    "insertText": "Get()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Item . _Object = nullptr ; return _PointerStorage .)",
    "insertText": "Insert(ItemPtr, Index)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "RemoveAt(int32_t Index)"
  },
  {
    "label": "RemovedItem()",
    "kind": "Method",
    "detail": "Function (PointerType)",
    "insertText": "RemovedItem(_PointerStorage[Index], _PointerStorage.GetRawAllocator())"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAt(Index)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} template<CountType> ULANG_FORCEINLINE void)",
    "insertText": "RemoveAt(int32_t Index, CountType Count, bool bAllowShrinking = true)"
  },
  {
    "label": "DeleteRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRange(Index, Index + int32_t(Count))"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAt(Index, Count, bAllowShrinking)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "RemoveAtSwap(int32_t Index)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} template<CountType> ULANG_FORCEINLINE void)",
    "insertText": "RemoveAtSwap(int32_t Index, CountType Count, bool bAllowShrinking = true)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAtSwap(Index, Count, bAllowShrinking)"
  },
  {
    "label": "ReplaceAt()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "ReplaceAt(PointerType&& Item, int32_t Index)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(Index)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Item . _Object = nullptr ; _PointerStorage [ Index ] = ItemPtr ; return Index ; } void)",
    "insertText": "Reset(int32_t NewSize = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Reset(NewSize)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32_t Slack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumZeroed(int32_t NewNum, bool bAllowShrinking = true)"
  },
  {
    "label": "DeleteRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRange(NewNum, Num())"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} _PointerStorage .)",
    "insertText": "SetNumZeroed(NewNum, bAllowShrinking)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(TUPtrArrayG&& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Append(ForwardArg<PointerStorageType>(Source._PointerStorage))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(ForwardArg<TUPtrArrayG>(Other))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ElementType* Item =)",
    "insertText": "new(_PointerStorage.GetRawAllocator()) ElementType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "InsertNew()",
    "kind": "Method",
    "detail": "Function (} template<. . . CtorArgsType> ULANG_FORCEINLINE void)",
    "insertText": "InsertNew(int32_t Index, CtorArgsType&&... CtorArgs)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "EmplaceAt(Index, Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Add(PointerType&& Item)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Item . _Object = nullptr ; return _PointerStorage .)",
    "insertText": "Emplace(ItemPtr)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "AddZeroed(int32_t Count = 1)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "AddUnique(PointerType&& Item)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (int32_t Index = _PointerStorage .)",
    "insertText": "AddUnique(Item.Get())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Item . _Object = nullptr ; } return Index ; } ULANG_FORCEINLINE void)",
    "insertText": "Reserve(int32_t Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32_t)",
    "insertText": "RemoveAll(const Predicate& Pred)"
  },
  {
    "label": "GetRawAllocator()",
    "kind": "Method",
    "detail": "Function (const ElementAllocatorType::RawAllocatorType& RawAllocator = _PointerStorage .)",
    "insertText": "GetRawAllocator()"
  },
  {
    "label": "RemoveAllSwap()",
    "kind": "Method",
    "detail": "Function (} template<class Predicate> void)",
    "insertText": "RemoveAllSwap(const Predicate& Pred, bool bAllowShrinking = true)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(_PointerStorage, TDereferenceWrapper<TLess<ElementType>>( TLess<ElementType>() ))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} template<class PredicateType> void)",
    "insertText": "Sort(const PredicateType& Predicate)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(_PointerStorage, Predicate)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<class OtherElementType,bool OtherAllowNull = AllowNull,= TEnableIf<TPointerIsStaticCastableFromTo<OtherElementType,ElementType)",
    "insertText": "Value(AllowNull == OtherAllowNull || OtherAllowNull)>::Type> ULANG_FORCEINLINE TUPtrArrayG<OtherElementType, OtherAllowNull, ElementAllocatorType, RawAllocatorArgsType...>& As()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<class OtherElementType,bool OtherAllowNull = AllowNull,= TEnableIf<TPointerIsStaticCastableFromTo<OtherElementType,ElementType)",
    "insertText": "Value(AllowNull == OtherAllowNull || OtherAllowNull)>::Type> ULANG_FORCEINLINE const TUPtrArrayG<OtherElementType, OtherAllowNull, ElementAllocatorType, RawAllocatorArgsType...>& As()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : ULANG_FORCEINLINE ElementType**)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE ElementType**)",
    "insertText": "end()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} protected : ULANG_FORCEINLINE void)",
    "insertText": "Delete(int32_t Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementType* Item = _PointerStorage [ Index ] ;)",
    "insertText": "if(Item)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (Item -> ~)",
    "insertText": "ElementType()"
  },
  {
    "label": "GetRawAllocator()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "GetRawAllocator().Deallocate(Item)"
  },
  {
    "label": "DeleteRange()",
    "kind": "Method",
    "detail": "Function (} } ULANG_FORCEINLINE void)",
    "insertText": "DeleteRange(int32_t BeginIndex, int32_t EndIndex)"
  },
  {
    "label": "DeleteRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteRange(0, _PointerStorage.Num())"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} PointerStorageType _PointerStorage ; } ; template<ElementType> using TUPtrArray = TUPtrArrayG<ElementType,true,TDefaultElementAllocator<CHeapRawAllocator>> ; template<ElementType> using TURefArray = TUPtrArrayG<ElementType,false,TDefaultElementAllocator<CHeapRawAllocator>> ; template<ElementType> using TUPtrArrayA = TUPtrArrayG<ElementType,true,TDefaultElementAllocator<CInstancedRawAllocator>,CAllocatorInstance*> ; template<ElementType> using TURefArrayA = TUPtrArrayG<ElementType,false,TDefaultElementAllocator<CInstancedRawAllocator>,CAllocatorInstance*> ; template<ElementType,bool AllowNull,ElementAllocatorType,. . . RawAllocatorArgsType> struct TIsZeroConstructType<TUPtrArrayG<ElementType,AllowNull,ElementAllocatorType,RawAllocatorArgsType . . .>> { enum { Value = TAllocatorTraits<ElementAllocatorType>::IsZeroConstruct } ; } ; template<ElementType,bool AllowNull,ElementAllocatorType,. . . RawAllocatorArgsType> struct TContainerTraits<TUPtrArrayG<ElementType,AllowNull,ElementAllocatorType,RawAllocatorArgsType . . .>> : public TContainerTraitsBase<TUPtrArrayG<ElementType,AllowNull,ElementAllocatorType,RawAllocatorArgsType . . .>> {)",
    "insertText": "static_assert(TAllocatorTraits<ElementAllocatorType>::SupportsMove, \"TUPtrArray no longer supports move-unaware allocators\")"
  }
]