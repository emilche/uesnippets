[
  {
    "label": "FBoxSphereGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoxSphereGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshShapeGenerator . h \" # include \" OrientedBoxTypes . h \" # include \" Util / IndexUtil . h \" # include \" GridBoxMeshGenerator . h \" namespace UE { namespace Geometry { class FBoxSphereGenerator : public FGridBoxMeshGenerator { public : float Radius = 1 ; enum class ESphereProjectionMethod { NormalizedVector,CubeMapping } ; ESphereProjectionMethod SphereProjectionMethod = ESphereProjectionMethod::CubeMapping ; FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (FVector3d Center = Box .)",
    "insertText": "Center()"
  },
  {
    "label": "AxisX()",
    "kind": "Method",
    "detail": "Function (FVector3d AxX = Box .)",
    "insertText": "AxisX(), AxY = Box.AxisY(), AxZ = Box.AxisZ()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector3d V = Vertices [ VertIdx ] - Center ;)",
    "insertText": "if(SphereProjectionMethod == ESphereProjectionMethod::CubeMapping)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (V = sx* AxX + sy* AxY + sz* AxZ ; })",
    "insertText": "Normalize(V)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vertices [ VertIdx ] = V ; })",
    "insertText": "for(int32 NormalIdx = 0; NormalIdx < Normals.Num(); NormalIdx++)"
  },
  {
    "label": "NormalIdx()",
    "kind": "Method",
    "detail": "Function (Normals [)",
    "insertText": "NormalIdx(FVector3f)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 VertIdx = 0; VertIdx < Vertices.Num(); VertIdx++)"
  }
]