[
  {
    "label": "RobustThroughputEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RobustThroughputEstimator"
  },
  {
    "label": "RobustThroughputEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_ROBUST_THROUGHPUT_ESTIMATOR_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_ROBUST_THROUGHPUT_ESTIMATOR_H_ # include<deque> # include<vector> # include \" absl / types / optional . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / timestamp . h \" # include \" modules / congestion_controller / goog_cc / acknowledged_bitrate_estimator_interface . h \" namespace webrtc { class RobustThroughputEstimator : public AcknowledgedBitrateEstimatorInterface { public :)",
    "insertText": "RobustThroughputEstimator(const RobustThroughputEstimatorSettings& settings)"
  },
  {
    "label": "RobustThroughputEstimator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RobustThroughputEstimator()"
  },
  {
    "label": "IncomingPacketFeedbackVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacketFeedbackVector(const std::vector<PacketResult>& packet_feedback_vector)"
  },
  {
    "label": "bitrate()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate>)",
    "insertText": "bitrate()"
  },
  {
    "label": "PeekRate()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate>)",
    "insertText": "PeekRate()"
  },
  {
    "label": "SetAlr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlr(bool)"
  },
  {
    "label": "SetAlrEndedTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlrEndedTime(Timestamp)"
  },
  {
    "label": "FirstPacketOutsideWindow()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "FirstPacketOutsideWindow()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (const RobustThroughputEstimatorSettings settings_ ; std::deque<PacketResult> window_ ; Timestamp latest_discarded_send_time_ =)",
    "insertText": "MinusInfinity()"
  }
]