[
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "UMovieSceneCondition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCondition"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FMovieSceneSubSequenceData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSubSequenceData"
  },
  {
    "label": "FMovieSceneSequenceHierarchyNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceHierarchyNode"
  },
  {
    "label": "FMovieSceneSubSequenceTreeEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSubSequenceTreeEntry"
  },
  {
    "label": "FMovieSceneSubSequenceTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSubSequenceTree"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FMovieSceneSequenceHierarchy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceHierarchy"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Evaluation / MovieSceneEvaluationTree . h \" # include \" Evaluation / MovieSceneSectionParameters . h \" # include \" Evaluation / MovieSceneSegment . h \" # include \" Evaluation / MovieSceneSequenceInstanceData . h \" # include \" Evaluation / MovieSceneSequenceTransform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Guid . h \" # include \" MovieSceneFrameMigration . h \" # include \" MovieSceneSequenceID . h \" # include \" Serialization / Archive . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" MovieSceneSequenceHierarchy . generated . h \" class UMovieSceneSequence ; class UMovieSceneSubSection ; class UMovieSceneCondition ; struct FMovieSceneSequenceID ; template<ElementType> class TRange ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() MOVIESCENE_API FMovieSceneSubSequenceData()"
  },
  {
    "label": "FMovieSceneSubSequenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSubSequenceData(const UMovieSceneSubSection& InSubSection)"
  },
  {
    "label": "FMovieSceneSubSequenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSubSequenceData(const FMovieSceneSubSequenceData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSubSequenceData&)",
    "insertText": "operator(const FMovieSceneSubSequenceData&)"
  },
  {
    "label": "FMovieSceneSubSequenceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSubSequenceData(FMovieSceneSubSequenceData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSubSequenceData&)",
    "insertText": "operator(FMovieSceneSubSequenceData&&)"
  },
  {
    "label": "FMovieSceneSubSequenceData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMovieSceneSubSequenceData()"
  },
  {
    "label": "GetSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetSequence()"
  },
  {
    "label": "GetLoadedSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetLoadedSequence()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty(const UMovieSceneSubSection& InSubSection)"
  },
  {
    "label": "GetSubSectionSignature()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetSubSectionSignature()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequenceHierarchyNode()"
  },
  {
    "label": "FMovieSceneSequenceHierarchyNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSequenceHierarchyNode(FMovieSceneSequenceIDRef InParentID) : ParentID(InParentID)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSubSequenceTreeEntry(FMovieSceneSequenceID InSequenceID, ESectionEvaluationFlags InFlags) : SequenceID(InSequenceID) , Flags(InFlags)"
  },
  {
    "label": "FMovieSceneSubSequenceTreeEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneSubSequenceTreeEntry()"
  },
  {
    "label": "FMovieSceneSubSequenceTreeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSubSequenceTreeEntry(const FMovieSceneSubSequenceTreeEntry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSubSequenceTreeEntry&)",
    "insertText": "operator(const FMovieSceneSubSequenceTreeEntry&)"
  },
  {
    "label": "FMovieSceneSubSequenceTreeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneSubSequenceTreeEntry(FMovieSceneSubSequenceTreeEntry&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSubSequenceTreeEntry&)",
    "insertText": "operator(FMovieSceneSubSequenceTreeEntry&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneSubSequenceTreeEntry& InOutEntry)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FMovieSceneSubSequenceTreeEntry& A, const FMovieSceneSubSequenceTreeEntry& B)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() friend bool operator==(const FMovieSceneSubSequenceTree& A, const FMovieSceneSubSequenceTree& B)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneSequenceHierarchy() : RootNode(MovieSceneSequenceID::Invalid)"
  },
  {
    "label": "FindNode()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneSequenceHierarchyNode*)",
    "insertText": "FindNode(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "FindSubData()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneSubSequenceData*)",
    "insertText": "FindSubData(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "FindSubSequence()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneSequence*)",
    "insertText": "FindSubSequence(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "FindSubData()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneSubSequenceData* SubSequenceData =)",
    "insertText": "FindSubData(SequenceID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FMovieSceneSubSequenceData& Data, FMovieSceneSequenceIDRef ThisSequenceID, FMovieSceneSequenceIDRef ParentID)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(TArrayView<const FMovieSceneSequenceID> SequenceIDs)"
  },
  {
    "label": "AddRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRange(const TRange<FFrameNumber>& RootSpaceRange, FMovieSceneSequenceIDRef InSequenceID, ESectionEvaluationFlags InFlags)"
  },
  {
    "label": "MutateSubData()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSubSequenceData*)",
    "insertText": "MutateSubData(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "SetRootTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRootTransform(FMovieSceneSequenceTransform&& InTransform)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RootTransform =)",
    "insertText": "MoveTemp(InTransform)"
  },
  {
    "label": "AllSubSequenceIDs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllSubSequenceIDs(TArray<FMovieSceneSequenceID>& OutSequenceIDs)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (Hierarchy .)",
    "insertText": "GetKeys(OutSequenceIDs)"
  },
  {
    "label": "AllSubSequenceData()",
    "kind": "Method",
    "detail": "Function (} const TMap<FMovieSceneSequenceID,FMovieSceneSubSequenceData>&)",
    "insertText": "AllSubSequenceData()"
  },
  {
    "label": "GetRootTransform()",
    "kind": "Method",
    "detail": "Function (AccumulatedNetworkMask& = Mask ; } const FMovieSceneSequenceTransform&)",
    "insertText": "GetRootTransform()"
  },
  {
    "label": "LogSubSequenceTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogSubSequenceTree()"
  }
]