[
  {
    "label": "MediaHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaHelper"
  },
  {
    "label": "MediaHelper()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_MEDIA_MEDIA_HELPER_H_ # define TEST_PC_E2E_MEDIA_MEDIA_HELPER_H_ # include<memory> # include<vector> # include \" api / test / frame_generator_interface . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / pclf / peer_configurer . h \" # include \" test / pc / e2e / analyzer / video / video_quality_analyzer_injection_helper . h \" # include \" test / pc / e2e / media / test_video_capturer_video_track_source . h \" # include \" test / pc / e2e / test_peer . h \" namespace webrtc { namespace webrtc_pc_e2e { class MediaHelper { public :)",
    "insertText": "MediaHelper(VideoQualityAnalyzerInjectionHelper* video_quality_analyzer_injection_helper, TaskQueueFactory* task_queue_factory, Clock* clock) : clock_(clock), task_queue_factory_(task_queue_factory), video_quality_analyzer_injection_helper_( video_quality_analyzer_injection_helper)"
  },
  {
    "label": "MaybeAddAudio()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MaybeAddAudio(TestPeer* peer)"
  },
  {
    "label": "MaybeAddVideo()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<TestVideoCapturerVideoTrackSource>>)",
    "insertText": "MaybeAddVideo(TestPeer* peer)"
  },
  {
    "label": "CreateVideoCapturer()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<test::TestVideoCapturer>)",
    "insertText": "CreateVideoCapturer(const VideoConfig& video_config, PeerConfigurer::VideoSource source, std::unique_ptr<test::TestVideoCapturer::FramePreprocessor> frame_preprocessor)"
  }
]