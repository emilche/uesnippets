[
  {
    "label": "TCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCommands"
  },
  {
    "label": "MakeUICommand_InternalUseOnly()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / Commands / InputBindingManager . h \" # define LOC_DEFINE_REGION void)",
    "insertText": "MakeUICommand_InternalUseOnly(FBindingContext* This, TSharedPtr< FUICommandInfo >& OutCommand, const TCHAR* InSubNamespace, const TCHAR* InCommandName, const TCHAR* InCommandNameUnderscoreTooltip, const ANSICHAR* DotCommandName, const TCHAR* FriendlyName, const TCHAR* InDescription, const EUserInterfaceActionType CommandType, const FInputChord& InDefaultChord, const FInputChord& InAlternateDefaultChord = FInputChord())"
  },
  {
    "label": "UI_COMMAND_EXT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UI_COMMAND_EXT(BindingContext, OutUICommandInfo, CommandIdName, FriendlyName, InDescription, CommandType, InDefaultChord, ... ) \\ MakeUICommand_InternalUseOnly( BindingContext, OutUICommandInfo, TEXT(LOCTEXT_NAMESPACE), TEXT(CommandIdName), TEXT(CommandIdName) TEXT(\"_ToolTip\"), \".\" CommandIdName, TEXT(FriendlyName), TEXT(InDescription), CommandType, InDefaultChord, ## __VA_ARGS__)"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UI_COMMAND(CommandId, FriendlyName, InDescription, CommandType, InDefaultChord, ... ) \\ MakeUICommand_InternalUseOnly( this, CommandId, TEXT(LOCTEXT_NAMESPACE), TEXT(#CommandId), TEXT(#CommandId) TEXT(\"_ToolTip\"), \".\" #CommandId, TEXT(FriendlyName), TEXT(InDescription), CommandType, InDefaultChord, ## __VA_ARGS__)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (# undef LOC_DEFINE_REGION template<CommandContextType> class TCommands : public FBindingContext { public : FORCENOINLINE void)",
    "insertText": "Register()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<CommandContextType> NewInstance =)",
    "insertText": "MakeShareable(new CommandContextType())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBindingContext> ExistingBindingContext =)",
    "insertText": "Get().GetContextByName( NewInstance->GetContextName())"
  },
  {
    "label": "CommandContextType()",
    "kind": "Method",
    "detail": "Function (Instance = StaticCastSharedPtr<)",
    "insertText": "CommandContextType(ExistingBindingContext)"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (} else { Instance = NewInstance ; NewInstance ->)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (CommandsChanged .)",
    "insertText": "Broadcast(*NewInstance)"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (} } } FORCENOINLINE bool)",
    "insertText": "IsRegistered()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE const CommandContextType&)",
    "insertText": "Get()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE void)",
    "insertText": "Unregister()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (auto InstancePtr = Instance .)",
    "insertText": "Pin()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().RemoveContextByName(InstancePtr->GetContextName())"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (CommandsChanged .)",
    "insertText": "Broadcast(*InstancePtr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InstancePtr .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (} } FORCENOINLINE const FBindingContext&)",
    "insertText": "GetContext()"
  },
  {
    "label": "TCommands()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TCommands(const FName InContextName, const FText& InContextDesc, const FName InContextParent, const FName InStyleSetName ) : FBindingContext( InContextName, InContextDesc, InContextParent, InStyleSetName)"
  },
  {
    "label": "TCommands()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCommands()"
  }
]