[
  {
    "label": "SimulatorBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SimulatorBuffers"
  },
  {
    "label": "SimulatorBuffers()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_TEST_SIMULATOR_BUFFERS_H_ # define MODULES_AUDIO_PROCESSING_TEST_SIMULATOR_BUFFERS_H_ # include<memory> # include<vector> # include \" modules / audio_processing / audio_buffer . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" rtc_base / random . h \" namespace webrtc { namespace test { struct SimulatorBuffers {)",
    "insertText": "SimulatorBuffers(int render_input_sample_rate_hz, int capture_input_sample_rate_hz, int render_output_sample_rate_hz, int capture_output_sample_rate_hz, size_t num_render_input_channels, size_t num_capture_input_channels, size_t num_render_output_channels, size_t num_capture_output_channels)"
  },
  {
    "label": "SimulatorBuffers()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulatorBuffers()"
  },
  {
    "label": "CreateConfigAndBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateConfigAndBuffer(int sample_rate_hz, size_t num_channels, Random* rand_gen, std::unique_ptr<AudioBuffer>* buffer, StreamConfig* config, std::vector<float*>* buffer_data, std::vector<float>* buffer_data_samples)"
  },
  {
    "label": "UpdateInputBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputBuffers()"
  }
]