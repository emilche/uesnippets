[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FRenderAssetStreamingMipCalcTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderAssetStreamingMipCalcTask"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FRenderAssetStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingManager"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FUpdateStreamingRenderAssetsTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdateStreamingRenderAssetsTask"
  },
  {
    "label": "FPendingMipCopyRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingMipCopyRequest"
  },
  {
    "label": "FScopedLevelRenderAssetManagersLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedLevelRenderAssetManagersLock"
  },
  {
    "label": "FRenderAssetStreamingManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ContentStreaming . h \" # include \" Streaming / TextureStreamingHelpers . h \" # include \" Streaming / StreamingTexture . h \" # include \" Streaming / LevelTextureManager . h \" # include \" Streaming / TextureInstanceTask . h \" class AActor ; class FRenderAssetStreamingMipCalcTask ; class IPakFile ; class UPrimitiveComponent ; template<TTask> class FAsyncTask ; struct FRenderAssetStreamingManager final : public IRenderAssetStreamingManager {)",
    "insertText": "FRenderAssetStreamingManager()"
  },
  {
    "label": "OnPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreGarbageCollect()"
  },
  {
    "label": "UpdateResourceStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceStreaming(float DeltaTime, bool bProcessEverything=false)"
  },
  {
    "label": "UpdateIndividualRenderAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIndividualRenderAsset(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "FastForceFullyResident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FastForceFullyResident(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "BlockTillAllRequestsFinished()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BlockTillAllRequestsFinished(float TimeLimit = 0.0f, bool bLogResults = false)"
  },
  {
    "label": "CancelForcedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelForcedResources()"
  },
  {
    "label": "NotifyLevelChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelChange()"
  },
  {
    "label": "SetDisregardWorldResourcesForFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisregardWorldResourcesForFrames(int32 NumFrames)"
  },
  {
    "label": "StreamOutRenderAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamOutRenderAssetData(int64 RequiredMemorySize)"
  },
  {
    "label": "GetMemoryOverBudget()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMemoryOverBudget()"
  },
  {
    "label": "GetRequiredPoolSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetRequiredPoolSize()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (MaxEverRequired = 0 ; } bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDumpTextureStreamingStatsCommand()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "HandleDumpTextureStreamingStatsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListStreamingRenderAssetsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListStreamingRenderAssetsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleResetMaxEverRequiredRenderAssetMemoryCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleResetMaxEverRequiredRenderAssetMemoryCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLightmapStreamingFactorCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLightmapStreamingFactorCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleCancelRenderAssetStreamingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCancelRenderAssetStreamingCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleShadowmapStreamingFactorCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShadowmapStreamingFactorCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleNumStreamedMipsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNumStreamedMipsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTrackRenderAssetCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTrackRenderAssetCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleListTrackedRenderAssetsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleListTrackedRenderAssetsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDebugTrackedRenderAssetsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDebugTrackedRenderAssetsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleUntrackRenderAssetCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleUntrackRenderAssetCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleStreamOutCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStreamOutCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePauseRenderAssetStreamingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePauseRenderAssetStreamingCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleStreamingManagerMemoryCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleStreamingManagerMemoryCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleLODGroupsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLODGroupsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleInvestigateRenderAssetCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInvestigateRenderAssetCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "AddStreamingRenderAsset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddStreamingRenderAsset(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "RemoveStreamingRenderAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStreamingRenderAsset(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "IsFullyStreamedIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyStreamedIn(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "AddLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevel(class ULevel* Level)"
  },
  {
    "label": "RemoveLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevel(class ULevel* Level)"
  },
  {
    "label": "NotifyLevelOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelOffset(ULevel* Level, const FVector& Offset)"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(AActor* Actor)"
  },
  {
    "label": "NotifyPrimitiveDetached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPrimitiveDetached(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "NotifyPrimitiveUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPrimitiveUpdated(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "NotifyPrimitiveUpdated_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPrimitiveUpdated_Concurrent(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "GetStreamingRenderAsset()",
    "kind": "Method",
    "detail": "Function (FStreamingRenderAsset*)",
    "insertText": "GetStreamingRenderAsset(const UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "PauseRenderAssetStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRenderAssetStreaming(bool bInShouldPause)"
  },
  {
    "label": "GetObjectReferenceBounds()",
    "kind": "Method",
    "detail": "Function (bPauseRenderAssetStreaming = bInShouldPause ; } void)",
    "insertText": "GetObjectReferenceBounds(const UObject* RefObject, TArray<FBox>& AssetBoxes)"
  },
  {
    "label": "GetAssetComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetComponents(const UStreamableRenderAsset* RenderAsset, TArray<const UPrimitiveComponent*>& OutComps, TFunction<bool(const UPrimitiveComponent*)> ShouldChoose)"
  },
  {
    "label": "PropagateLightingScenarioChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateLightingScenarioChange()"
  },
  {
    "label": "AddRenderedTextureStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRenderedTextureStats(TMap<FString, FRenderedTextureStats>& InOutRenderedTextureStats)"
  },
  {
    "label": "SetRenderAssetsRemovedTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderAssetsRemovedTimestamp(const FRemovedRenderAssetArray& RemovedRenderAssets)"
  },
  {
    "label": "RemoveStaticReferences()",
    "kind": "Method",
    "detail": "Function (private : class FRenderAssetStreamingMipCalcTask ; class FUpdateStreamingRenderAssetsTask ; void)",
    "insertText": "RemoveStaticReferences(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdateStreamingRenderAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingRenderAssets(int32 StageIndex, int32 NumStages, bool bWaitForMipFading, bool bAsync = false)"
  },
  {
    "label": "TickFastResponseAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickFastResponseAssets()"
  },
  {
    "label": "ProcessRemovedRenderAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRemovedRenderAssets()"
  },
  {
    "label": "ProcessAddedRenderAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAddedRenderAssets()"
  },
  {
    "label": "ConditionalUpdateStaticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdateStaticData()"
  },
  {
    "label": "ProcessLevelsToReferenceToStreamedTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLevelsToReferenceToStreamedTextures()"
  },
  {
    "label": "PrepareAsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAsyncTask(bool bProcessEverything)"
  },
  {
    "label": "CheckUserSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckUserSettings()"
  },
  {
    "label": "BoostTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostTextures(AActor* Actor, float BoostFactor)"
  },
  {
    "label": "SetOptionalBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOptionalBulkData(UTexture* Texture, bool bHasOptionalBulkData)"
  },
  {
    "label": "StreamRenderAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamRenderAssets(bool bProcessEverything)"
  },
  {
    "label": "GetNumStreamedMipsArray()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumStreamedMipsArray(EStreamableRenderAssetType AssetType, const int32*& OutArray)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "check(false)"
  },
  {
    "label": "SetLastUpdateTime()",
    "kind": "Method",
    "detail": "Function (OutArray = nullptr ; return - 1 ; } } TArray<FStreamingRenderAsset> AsyncUnsafeStreamingRenderAssets ; TSet<const UStreamableRenderAsset*> ReferencedRenderAssets ; TSet<FString> OptionalBulkDataFiles ; int32 CurrentUpdateStreamingRenderAssetIndex ; void)",
    "insertText": "SetLastUpdateTime()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "UpdateCSVOnlyStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCSVOnlyStats()"
  },
  {
    "label": "LogViewLocationChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogViewLocationChange()"
  },
  {
    "label": "IncrementalUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementalUpdate(float Percentage, bool bUpdateDynamicComponents)"
  },
  {
    "label": "UpdatePendingStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePendingStates(bool bUpdateDynamicComponents)"
  },
  {
    "label": "SyncStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncStates(bool bCompleteFullUpdateCycle)"
  },
  {
    "label": "ProcessPendingMipCopyRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingMipCopyRequests()"
  },
  {
    "label": "TickDeferredMipLevelChangeCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickDeferredMipLevelChangeCallbacks()"
  },
  {
    "label": "ProcessPendingLevelManagers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingLevelManagers()"
  },
  {
    "label": "FPendingMipCopyRequest()",
    "kind": "Method",
    "detail": "Function (int32 NumStreamedMips_Texture [ TEXTUREGROUP_MAX ] ; TArray<int32> NumStreamedMips_StaticMesh ; TArray<int32> NumStreamedMips_SkeletalMesh ; FRenderAssetStreamingSettings Settings ; FAsyncTask<FRenderAssetStreamingMipCalcTask>* AsyncWork ; TRefCountPtr<RenderAssetInstanceTask::FDoWorkAsyncTask> RenderAssetInstanceAsyncWork ; FDynamicRenderAssetInstanceManager DynamicComponentManager ; TArray<UStreamableRenderAsset*> PendingStreamingRenderAssets ; TArray<int32> RemovedRenderAssetIndices ; TArray<UStreamableRenderAsset*> DeferredTickCBAssets ; TSet<UStreamableRenderAsset*> FastResponseRenderAssets ; TSet<int32> VisibleFastResponseRenderAssetIndices ; struct FPendingMipCopyRequest { const UStreamableRenderAsset* RenderAsset ; int32 CachedIdx ;)",
    "insertText": "FPendingMipCopyRequest()"
  },
  {
    "label": "FPendingMipCopyRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPendingMipCopyRequest(const UStreamableRenderAsset* InAsset, int32 InCachedIdx) : RenderAsset(InAsset) , CachedIdx(InCachedIdx)"
  },
  {
    "label": "FScopedLevelRenderAssetManagersLock()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FPendingMipCopyRequest> PendingMipCopyRequests ; int32 CurrentPendingMipCopyRequestIdx ; TArray<FLevelRenderAssetManager*> LevelRenderAssetManagers ; struct FScopedLevelRenderAssetManagersLock { FRenderAssetStreamingManager* StreamingManager ; TArray<FLevelRenderAssetManager*> PendingAddLevelManagers ; TArray<FLevelRenderAssetManager*> PendingRemoveLevelManagers ;)",
    "insertText": "FScopedLevelRenderAssetManagersLock(FRenderAssetStreamingManager* InStreamingManager)"
  },
  {
    "label": "FScopedLevelRenderAssetManagersLock()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedLevelRenderAssetManagersLock()"
  },
  {
    "label": "MarkMountedStateDirty()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedLevelRenderAssetManagersLock ; FScopedLevelRenderAssetManagersLock* LevelRenderAssetManagersLock ; int32 ProcessingStage ; int32 NumRenderAssetProcessingStages ; bool bUseDynamicStreaming ; float BoostPlayerTextures ; int64 MemoryMargin ; int64 EffectiveStreamingPoolSize ; int64 MemoryOverBudget ; int64 MaxEverRequired ; bool bPauseRenderAssetStreaming ; float LastWorldUpdateTime ; float LastWorldUpdateTime_MipCalcTask ; FRenderAssetStreamingStats DisplayedStats ; FRenderAssetStreamingStats GatheredStats ; TArray<int32> InflightRenderAssets ; FCriticalSection MountedStateDirtyFilesCS ; bool bRecacheAllFiles = false ; typedef TSet<FIoFilenameHash> FIoFilenameHashSet ; FIoFilenameHashSet MountedStateDirtyFiles ; FDelegateHandle OnPakFileMounted2Handle ; FDelegateHandle NewFileAddedDelegateHandle ; void)",
    "insertText": "MarkMountedStateDirty(FIoFilenameHash FilenameHash)"
  },
  {
    "label": "GetStreamingRenderAssetsAsyncSafe()",
    "kind": "Method",
    "detail": "Function (FCriticalSection CriticalSection ; FGraphEventRef StreamingRenderAssetsSyncEvent ; TArray<FStreamingRenderAsset>&)",
    "insertText": "GetStreamingRenderAssetsAsyncSafe()"
  },
  {
    "label": "TrackRenderAssetEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackRenderAssetEvent(FStreamingRenderAsset* StreamingRenderAsset, UStreamableRenderAsset* RenderAsset, bool bForceMipLevelsToBeResident, const FRenderAssetStreamingManager* Manager)"
  }
]