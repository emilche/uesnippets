[
  {
    "label": "FRHIResourceStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceStats"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SRenderResourceViewerWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRenderResourceViewerWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / SListView . h \" struct FRHIResourceStats ; class ITableRow ; class STableViewBase ; class SDockTab ; class FUICommandList ; class SRenderResourceViewerWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRenderResourceViewerWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<SDockTab>& ConstructUnderMajorTab, const TSharedPtr<SWindow>& ConstructUnderWindow)"
  },
  {
    "label": "SRenderResourceViewerWidget()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SRenderResourceViewerWidget()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "RefreshNodes()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RefreshNodes(bool bUpdateRHIResources = false)"
  },
  {
    "label": "HandleResourceGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "HandleResourceGenerateRow(TSharedPtr<FRHIResourceStats> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnColumnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "GetColumnSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetColumnSortMode(const FName ColumnId)"
  },
  {
    "label": "GetResourceSizeText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetResourceSizeText()"
  },
  {
    "label": "FilterTextBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTextBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "RefreshNodes()",
    "kind": "Method",
    "detail": "Function (FilterText = InFilterText ;)",
    "insertText": "RefreshNodes()"
  },
  {
    "label": "OnResidentComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnResidentComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "ComboBoxNameToType()",
    "kind": "Method",
    "detail": "Function (ShowResident =)",
    "insertText": "ComboBoxNameToType(NewValue)"
  },
  {
    "label": "OnTransientComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTransientComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "OnStreamingComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStreamingComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "OnRTComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRTComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "OnDSComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDSComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "OnUAVComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnUAVComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "OnRTASComboboxChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRTASComboboxChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type)"
  },
  {
    "label": "OnRefreshButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnRefreshButtonClicked()"
  },
  {
    "label": "RefreshNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNodes(true)"
  },
  {
    "label": "InitCommandList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitCommandList()"
  },
  {
    "label": "OpenContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OpenContextMenu()"
  },
  {
    "label": "ContextMenu_FindInContentBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_FindInContentBrowser()"
  },
  {
    "label": "ContextMenu_FindInContentBrowser_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_FindInContentBrowser_CanExecute()"
  },
  {
    "label": "ComboBoxNameToType()",
    "kind": "Method",
    "detail": "Function (enum class EComboBoxType : uint8 { Any,Yes,No,} ; EComboBoxType)",
    "insertText": "ComboBoxNameToType(TSharedPtr<FString> Value)"
  },
  {
    "label": "ComboBoxTypeToName()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "ComboBoxTypeToName(EComboBoxType Type)"
  },
  {
    "label": "ShouldShow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldShow(EComboBoxType FilterType, bool bValue)"
  }
]