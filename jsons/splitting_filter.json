[
  {
    "label": "TwoBandsStates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TwoBandsStates"
  },
  {
    "label": "SplittingFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SplittingFilter"
  },
  {
    "label": "TwoBandsStates()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_SPLITTING_FILTER_H_ # define MODULES_AUDIO_PROCESSING_SPLITTING_FILTER_H_ # include<cstring> # include<memory> # include<vector> # include \" common_audio / channel_buffer . h \" # include \" modules / audio_processing / three_band_filter_bank . h \" namespace webrtc { struct TwoBandsStates {)",
    "insertText": "TwoBandsStates()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(analysis_state1, 0, sizeof(analysis_state1))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(analysis_state2, 0, sizeof(analysis_state2))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(synthesis_state1, 0, sizeof(synthesis_state1))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(synthesis_state2, 0, sizeof(synthesis_state2))"
  },
  {
    "label": "SplittingFilter()",
    "kind": "Method",
    "detail": "Function (} const int kStateSize = 6 ; int analysis_state1 [ kStateSize ] ; int analysis_state2 [ kStateSize ] ; int synthesis_state1 [ kStateSize ] ; int synthesis_state2 [ kStateSize ] ; } ; class SplittingFilter { public :)",
    "insertText": "SplittingFilter(size_t num_channels, size_t num_bands, size_t num_frames)"
  },
  {
    "label": "SplittingFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SplittingFilter()"
  },
  {
    "label": "Analysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Analysis(const ChannelBuffer<float>* data, ChannelBuffer<float>* bands)"
  },
  {
    "label": "Synthesis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Synthesis(const ChannelBuffer<float>* bands, ChannelBuffer<float>* data)"
  },
  {
    "label": "TwoBandsAnalysis()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TwoBandsAnalysis(const ChannelBuffer<float>* data, ChannelBuffer<float>* bands)"
  },
  {
    "label": "TwoBandsSynthesis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TwoBandsSynthesis(const ChannelBuffer<float>* bands, ChannelBuffer<float>* data)"
  },
  {
    "label": "ThreeBandsAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreeBandsAnalysis(const ChannelBuffer<float>* data, ChannelBuffer<float>* bands)"
  },
  {
    "label": "ThreeBandsSynthesis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreeBandsSynthesis(const ChannelBuffer<float>* bands, ChannelBuffer<float>* data)"
  },
  {
    "label": "InitBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBuffers()"
  }
]