[
  {
    "label": "UActorDescContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainer"
  },
  {
    "label": "UWorldPartitionEditorHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionEditorHash"
  },
  {
    "label": "UWorldPartitionRuntimeCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeCell"
  },
  {
    "label": "UWorldPartitionRuntimeHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionRuntimeHash"
  },
  {
    "label": "URuntimeHashExternalStreamingObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeHashExternalStreamingObjectBase"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "IWorldPartitionCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionCell"
  },
  {
    "label": "UDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerManager"
  },
  {
    "label": "IStreamingGenerationErrorHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStreamingGenerationErrorHandler"
  },
  {
    "label": "FLoaderAdapterAlwaysLoadedActors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoaderAdapterAlwaysLoadedActors"
  },
  {
    "label": "FLoaderAdapterActorList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoaderAdapterActorList"
  },
  {
    "label": "FHLODActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLODActorDesc"
  },
  {
    "label": "UHLODLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHLODLayer"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FAutoConsoleVariableRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableRef"
  },
  {
    "label": "FWorldPartitionDraw2DContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDraw2DContext"
  },
  {
    "label": "FContentBundleEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContentBundleEditor"
  },
  {
    "label": "IStreamingGenerationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStreamingGenerationContext"
  },
  {
    "label": "UExternalDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerManager"
  },
  {
    "label": "IWorldPartitionCookPackageObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IWorldPartitionCookPackageObject"
  },
  {
    "label": "IWorldPartitionStreamingSourceProvider",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IWorldPartitionStreamingSourceProvider"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IWorldPartitionEditor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IWorldPartitionEditor"
  },
  {
    "label": "ISourceControlHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlHelper"
  },
  {
    "label": "FRuntimeCellTransformerInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRuntimeCellTransformerInstance"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "FWorldPartitionConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionConverter"
  },
  {
    "label": "UWorldPartitionConvertCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionConvertCommandlet"
  },
  {
    "label": "FWorldPartitionEditorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionEditorModule"
  },
  {
    "label": "FWorldPartitionDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionDetails"
  },
  {
    "label": "FUnrealEdMisc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUnrealEdMisc"
  },
  {
    "label": "UActorDescContainerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainerInstance"
  },
  {
    "label": "instead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "instead"
  },
  {
    "label": "FGenerateStreamingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateStreamingParams"
  },
  {
    "label": "FGenerateStreamingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateStreamingContext"
  },
  {
    "label": "FSetupHLODActorsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetupHLODActorsParams"
  },
  {
    "label": "FCheckForErrorsParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCheckForErrorsParams"
  },
  {
    "label": "FContainerRegistrationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContainerRegistrationParams"
  },
  {
    "label": "FWorldPartitionExternalDirtyActorsTrackerReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionExternalDirtyActorsTrackerReference"
  },
  {
    "label": "FWorldPartitionExternalDirtyActorsTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionExternalDirtyActorsTracker"
  },
  {
    "label": "FDisableNonDirtyActorTrackingScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisableNonDirtyActorTrackingScope"
  },
  {
    "label": "FRegisterWorldAssetStreamingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisterWorldAssetStreamingParams"
  },
  {
    "label": "AWorldPartitionReplay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldPartitionReplay"
  },
  {
    "label": "FWorldPartitionStreamingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionStreamingContext"
  },
  {
    "label": "UWorldPartitionSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionSubsystem"
  },
  {
    "label": "FScopedCookingExternalStreamingObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedCookingExternalStreamingObject"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / CoreDelegates . h \" # include \" Misc / Optional . h \" # include \" GameFramework / Actor . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / LinkerInstancingContext . h \" # include \" WorldPartition / WorldPartitionLog . h \" # include \" WorldPartition / WorldPartitionActorDesc . h \" # include \" WorldPartition / WorldPartitionStreamingSource . h \" # include \" WorldPartition / WorldPartitionHandle . h \" # include \" WorldPartition / ActorDescContainerInstanceCollection . h \" # include \" WorldPartition / Cook / WorldPartitionCookPackageGenerator . h \" # if WITH_EDITOR # include \" WorldPartition / ActorDescContainerInstance . h \" # include \" WorldPartition / WorldPartitionActorDescInstance . h \" # include \" WorldPartition / WorldPartitionStreamingGeneration . h \" # include \" WorldPartition / WorldPartitionActorLoaderInterface . h \" # include \" WorldPartition / WorldPartitionEditorLoaderAdapter . h \" # include \" WorldPartition / WorldPartitionRuntimeCellTransformer . h \" # include \" ExternalDirtyActorsTracker . h \" # include \" PackageSourceControlHelper . h \" # include \" CookPackageSplitter . h \" # include \" Delegates / DelegateCombinations . h \" # endif # include \" WorldPartition . generated . h \" class UActorDescContainer ; class UWorldPartitionEditorHash ; class UWorldPartitionRuntimeCell ; class UWorldPartitionRuntimeHash ; class URuntimeHashExternalStreamingObjectBase ; class UWorldPartitionStreamingPolicy ; class IWorldPartitionCell ; class UDataLayerManager ; class IStreamingGenerationErrorHandler ; class FLoaderAdapterAlwaysLoadedActors ; class FLoaderAdapterActorList ; class FHLODActorDesc ; class UHLODLayer ; class UCanvas ; class ULevel ; class FAutoConsoleVariableRef ; class FWorldPartitionDraw2DContext ; class FContentBundleEditor ; class IStreamingGenerationContext ; class UExternalDataLayerManager ; class IWorldPartitionCookPackageObject ; struct IWorldPartitionStreamingSourceProvider ; enum class EWorldPartitionRuntimeCellState : uint8 ; enum class EWorldPartitionStreamingPerformance : uint8 ; enum class EWorldPartitionInitState { Uninitialized,Initializing,Initialized,Uninitializing } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ProjectDefault = 0)",
    "insertText": "UMETA(ToolTip = \"Use project default (wp.Runtime.EnableServerStreaming)\"), Disabled = 1 UMETA(ToolTip = \"Server streaming is disabled\"), Enabled = 2 UMETA(ToolTip = \"Server streaming is enabled\"), EnabledInPIE = 3 UMETA(ToolTip = \"Server streaming is only enabled in PIE\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (ProjectDefault = 0)",
    "insertText": "UMETA(ToolTip = \"Use project default (wp.Runtime.EnableServerStreamingOut)\"), Disabled = 1 UMETA(ToolTip = \"Server streaming out is disabled\"), Enabled = 2 UMETA(ToolTip = \"Server streaming out is enabled\")"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (Or,And } ; # if WITH_EDITOR struct IWorldPartitionEditor { void)",
    "insertText": "Refresh()"
  },
  {
    "label": "Reconstruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reconstruct()"
  },
  {
    "label": "FocusBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FocusBox(const FBox& Box)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (} } ; class ISourceControlHelper { public : FString)",
    "insertText": "GetFilename(const FString& PackageName)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilename(UPackage* Package)"
  },
  {
    "label": "Checkout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Checkout(UPackage* Package)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(UPackage* Package)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Delete(const FString& PackageName)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Delete(UPackage* Package)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(UPackage* Package)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() #if WITH_EDITORONLY_DATA inline void PreTransform(ULevel* InLevel)"
  },
  {
    "label": "PreTransform()",
    "kind": "Method",
    "detail": "Function (Instance ->)",
    "insertText": "PreTransform(InLevel)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Transform(ULevel* InLevel)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (Instance ->)",
    "insertText": "Transform(InLevel)"
  },
  {
    "label": "PostTransform()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PostTransform(ULevel* InLevel)"
  },
  {
    "label": "PostTransform()",
    "kind": "Method",
    "detail": "Function (Instance ->)",
    "insertText": "PostTransform(InLevel)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(AutoExpandCategories=(WorldPartition), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "CreateOrRepairWorldPartition()",
    "kind": "Method",
    "detail": "Function (class FWorldPartitionConverter ; class UWorldPartitionConvertCommandlet ; class FWorldPartitionEditorModule ; class FWorldPartitionDetails ; class FUnrealEdMisc ; class UActorDescContainer ; class UActorDescContainerInstance ; public : # if WITH_EDITOR UWorldPartition*)",
    "insertText": "CreateOrRepairWorldPartition(AWorldSettings* WorldSettings, TSubclassOf<UWorldPartitionEditorHash> EditorHashClass = nullptr, TSubclassOf<UWorldPartitionRuntimeHash> RuntimeHashClass = nullptr)"
  },
  {
    "label": "RemoveWorldPartition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveWorldPartition(AWorldSettings* WorldSettings)"
  },
  {
    "label": "GetUserLoadedEditorRegions()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR TArray<FBox>)",
    "insertText": "GetUserLoadedEditorRegions()"
  },
  {
    "label": "SetEnableStreaming()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetEnableStreaming(bool bInEnableStreaming)"
  },
  {
    "label": "OnEnableStreamingChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEnableStreamingChanged()"
  },
  {
    "label": "OnEnableLoadingInEditorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnableLoadingInEditorChanged()"
  },
  {
    "label": "IsStreamingEnabledInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingEnabledInEditor()"
  },
  {
    "label": "SavePerUserSettings()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SavePerUserSettings()"
  },
  {
    "label": "OnGCPostReachabilityAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGCPostReachabilityAnalysis()"
  },
  {
    "label": "OnPackageDirtyStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageDirtyStateChanged(UPackage* Package)"
  },
  {
    "label": "OnPreBeginPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreBeginPIE(bool bStartSimulate)"
  },
  {
    "label": "OnPrePIEEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPrePIEEnded(bool bWasSimulatingInEditor)"
  },
  {
    "label": "OnCancelPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelPIE()"
  },
  {
    "label": "PrepareEditorGameWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareEditorGameWorld()"
  },
  {
    "label": "ShutdownEditorGameWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownEditorGameWorld()"
  },
  {
    "label": "OnWorldRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldRenamed(UWorld* RenamedWorld)"
  },
  {
    "label": "OnActorDescInstanceAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescInstanceAdded(FWorldPartitionActorDescInstance* NewActorDescInstance)"
  },
  {
    "label": "OnActorDescInstanceRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescInstanceRemoved(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "OnActorDescInstanceUpdating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescInstanceUpdating(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "OnActorDescInstanceUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDescInstanceUpdated(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "ShouldHashUnhashActorDescInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHashUnhashActorDescInstances()"
  },
  {
    "label": "InitializeActorDescContainerEditorStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeActorDescContainerEditorStreaming(UActorDescContainerInstance* InActorDescContainer)"
  },
  {
    "label": "OnBeginPlay()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnBeginPlay()"
  },
  {
    "label": "GetInstanceTransform()",
    "kind": "Method",
    "detail": "Function (public : const FTransform&)",
    "insertText": "GetInstanceTransform()"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "ResolveSubobject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveSubobject(const TCHAR* SubObjectPath, UObject*& OutObject, bool bLoadIfExists)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "ConvertEditorPathToRuntimePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertEditorPathToRuntimePath(const FSoftObjectPath& InPath, FSoftObjectPath& OutPath)"
  },
  {
    "label": "ConvertContainerPathToEditorPath()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "ConvertContainerPathToEditorPath(const FActorContainerID& InContainerID, const FSoftObjectPath& InPath, FSoftObjectPath& OutPath)"
  },
  {
    "label": "SetInstanceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstanceTransform(const FTransform& InInstanceTransform)"
  },
  {
    "label": "GetWorldPartitionEditorName()",
    "kind": "Method",
    "detail": "Function (InstanceTransform = InInstanceTransform ; } FName)",
    "insertText": "GetWorldPartitionEditorName()"
  },
  {
    "label": "CanGenerateStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGenerateStreaming()"
  },
  {
    "label": "SetContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (} FGenerateStreamingParams&)",
    "insertText": "SetContainerInstanceCollection(const FActorDescContainerInstanceCollection& InContainerInstanceCollection, const FStreamingGenerationContainerInstanceCollection::ECollectionType& InCollectionType)"
  },
  {
    "label": "SetCollectionType()",
    "kind": "Method",
    "detail": "Function (ContainerInstanceCollection .)",
    "insertText": "SetCollectionType(InCollectionType)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ContainerInstanceCollection .)",
    "insertText": "Append(InContainerInstanceCollection)"
  },
  {
    "label": "SetOutputLogType()",
    "kind": "Method",
    "detail": "Function (ErrorHandler = InErrorHandler ; return* this ; } FGenerateStreamingParams&)",
    "insertText": "SetOutputLogType(const FString& InOutputLogType)"
  },
  {
    "label": "SetFilteredClasses()",
    "kind": "Method",
    "detail": "Function (OutputLogType = InOutputLogType ; return* this ; } FGenerateStreamingParams&)",
    "insertText": "SetFilteredClasses(const TArray<TSubclassOf<AActor>>& InFilteredClasses)"
  },
  {
    "label": "FGenerateStreamingContext()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSubclassOf<AActor>> FilteredClasses ; FStreamingGenerationContainerInstanceCollection ContainerInstanceCollection ; TOptional<const FString> OutputLogType ; IStreamingGenerationErrorHandler* ErrorHandler ; class UWorldPartition ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS struct FGenerateStreamingContext {)",
    "insertText": "FGenerateStreamingContext()"
  },
  {
    "label": "SetLevelPackagesToGenerate()",
    "kind": "Method",
    "detail": "Function (} FGenerateStreamingContext&)",
    "insertText": "SetLevelPackagesToGenerate(TArray<FString>* InLevelPackagesToGenerate)"
  },
  {
    "label": "SetGeneratedExternalStreamingObjects()",
    "kind": "Method",
    "detail": "Function (PackagesToGenerate = InLevelPackagesToGenerate ; return* this ; } FGenerateStreamingContext&)",
    "insertText": "SetGeneratedExternalStreamingObjects(TArray<URuntimeHashExternalStreamingObjectBase*>* InGeneratedExternalStreamingObjects)"
  },
  {
    "label": "GenerateStreaming()",
    "kind": "Method",
    "detail": "Function (GeneratedExternalStreamingObjects = InGeneratedExternalStreamingObjects ; return* this ; } } ; bool)",
    "insertText": "GenerateStreaming(const FGenerateStreamingParams& InParams, FGenerateStreamingContext& InContext)"
  },
  {
    "label": "GenerateContainerStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateContainerStreaming(const FGenerateStreamingParams& InParams, FGenerateStreamingContext& InContext)"
  },
  {
    "label": "GenerateStreamingGenerationContext()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IStreamingGenerationContext>)",
    "insertText": "GenerateStreamingGenerationContext(const FGenerateStreamingParams& InParams, FGenerateStreamingContext& InContext)"
  },
  {
    "label": "FlushStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushStreaming()"
  },
  {
    "label": "FlushStreamingToExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (URuntimeHashExternalStreamingObjectBase*)",
    "insertText": "FlushStreamingToExternalStreamingObject()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWorldPartitionChangedEvent, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionChangedEvent WorldPartitionChangedEvent ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWorldPartitionGenerateStreamingDelegate, TArray<FString>*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionGenerateStreamingDelegate OnPreGenerateStreaming ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FWorldPartitionGenerateStreamingActorDescsMutatePhase, const IStreamingGenerationContext* StreamingGenerationContext, TArray<FActorDescViewMutatorInstance>& ActorDescsMutatorsInstances)"
  },
  {
    "label": "RemapSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionGenerateStreamingActorDescsMutatePhase OnGenerateStreamingActorDescsMutatePhase ; void)",
    "insertText": "RemapSoftObjectPath(FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "IsValidPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPackageName(const FString& InPackageName)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWorldPartitionCookEventDelegate, IWorldPartitionCookPackageContext&)"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCook(IWorldPartitionCookPackageContext& CookContext)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCook(IWorldPartitionCookPackageContext& CookContext)"
  },
  {
    "label": "GatherPackagesToCook()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionCookEventDelegate OnBeginCook ; FWorldPartitionCookEventDelegate OnEndCook ; bool)",
    "insertText": "GatherPackagesToCook(IWorldPartitionCookPackageContext& CookContext)"
  },
  {
    "label": "PrepareGeneratorPackageForCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareGeneratorPackageForCook(IWorldPartitionCookPackageContext& CookContext, TArray<UPackage*>& OutModifiedPackages)"
  },
  {
    "label": "PopulateGeneratorPackageForCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateGeneratorPackageForCook(IWorldPartitionCookPackageContext& CookContext, const TArray<FWorldPartitionCookPackage*>& InPackagesToCook, TArray<UPackage*>& OutModifiedPackages)"
  },
  {
    "label": "PopulateGeneratedPackageForCook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateGeneratedPackageForCook(IWorldPartitionCookPackageContext& CookContext, const FWorldPartitionCookPackage& InPackagesToCool, TArray<UPackage*>& OutModifiedPackages)"
  },
  {
    "label": "GetCellForPackage()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionRuntimeCell*)",
    "insertText": "GetCellForPackage(const FWorldPartitionCookPackage& InPackageToCook)"
  },
  {
    "label": "GetEditorWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetEditorWorldBounds()"
  },
  {
    "label": "GetRuntimeWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetRuntimeWorldBounds()"
  },
  {
    "label": "ApplyRuntimeCellsTransformerStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRuntimeCellsTransformerStack(ULevel* InLevel)"
  },
  {
    "label": "GetDefaultHLODLayer()",
    "kind": "Method",
    "detail": "Function (UHLODLayer*)",
    "insertText": "GetDefaultHLODLayer()"
  },
  {
    "label": "FSetupHLODActorsParams()",
    "kind": "Method",
    "detail": "Function (DefaultHLODLayer = InDefaultHLODLayer ; } struct FSetupHLODActorsParams {)",
    "insertText": "FSetupHLODActorsParams() : SourceControlHelper(nullptr) , bReportOnly(false)"
  },
  {
    "label": "SetSourceControlHelper()",
    "kind": "Method",
    "detail": "Function (} ISourceControlHelper* SourceControlHelper ; bool bReportOnly ; FSetupHLODActorsParams&)",
    "insertText": "SetSourceControlHelper(ISourceControlHelper* InSourceControlHelper)"
  },
  {
    "label": "SetReportOnly()",
    "kind": "Method",
    "detail": "Function (SourceControlHelper = InSourceControlHelper ; return* this ; } FSetupHLODActorsParams&)",
    "insertText": "SetReportOnly(bool bInReportOnly)"
  },
  {
    "label": "SetupHLODActors()",
    "kind": "Method",
    "detail": "Function (bReportOnly = bInReportOnly ; return* this ; } } ; void)",
    "insertText": "SetupHLODActors(const FSetupHLODActorsParams& Params)"
  },
  {
    "label": "DrawRuntimeHashPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRuntimeHashPreview()"
  },
  {
    "label": "DumpActorDescs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpActorDescs(const FString& Path)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForErrors(IStreamingGenerationErrorHandler* ErrorHandler)"
  },
  {
    "label": "FCheckForErrorsParams()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS struct FCheckForErrorsParams {)",
    "insertText": "FCheckForErrorsParams()"
  },
  {
    "label": "SetErrorHandler()",
    "kind": "Method",
    "detail": "Function (IStreamingGenerationErrorHandler* ErrorHandler ; bool bEnableStreaming ; const FActorDescContainerInstanceCollection* ActorDescContainerInstanceCollection ; TMap<FGuid,const UActorDescContainerInstance*> ActorGuidsToContainerInstanceMap ; FCheckForErrorsParams&)",
    "insertText": "SetErrorHandler(IStreamingGenerationErrorHandler* InErrorHandler)"
  },
  {
    "label": "SetActorDescContainerInstanceCollection()",
    "kind": "Method",
    "detail": "Function (ErrorHandler = InErrorHandler ; return* this ; } FCheckForErrorsParams&)",
    "insertText": "SetActorDescContainerInstanceCollection(const FActorDescContainerInstanceCollection* InActorDescContainerInstanceCollection)"
  },
  {
    "label": "SetActorGuidsToContainerInstanceMap()",
    "kind": "Method",
    "detail": "Function (bEnableStreaming = bInEnableStreaming ; return* this ; } FCheckForErrorsParams&)",
    "insertText": "SetActorGuidsToContainerInstanceMap(const TMap<FGuid, const UActorDescContainerInstance*>& InActorGuidsToContainerInstanceMap)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckForErrors(const FCheckForErrorsParams& Params)"
  },
  {
    "label": "IStreamingGenerationErrorHandler()",
    "kind": "Method",
    "detail": "Function (using FStreamingGenerationErrorHandlerOverride = TFunction<)",
    "insertText": "IStreamingGenerationErrorHandler(IStreamingGenerationErrorHandler* InErrorHandler)"
  },
  {
    "label": "AppendAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (TOptional<FStreamingGenerationErrorHandlerOverride> StreamingGenerationErrorHandlerOverride ; void)",
    "insertText": "AppendAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "FContainerRegistrationParams()",
    "kind": "Method",
    "detail": "Function (struct FContainerRegistrationParams {)",
    "insertText": "FContainerRegistrationParams(FName InPackageName) : PackageName(InPackageName)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} FName PackageName ; TUniqueFunction<)",
    "insertText": "bool(const FWorldPartitionActorDesc*)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FActorDescContainerInstancePreInitializeDelegate, UActorDescContainerInstance::FInitializeParams&, UActorDescContainerInstance*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FActorDescContainerRegistrationDelegate, UActorDescContainer*)"
  },
  {
    "label": "UnregisterActorDescContainerInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterActorDescContainerInstance(UActorDescContainerInstance* InContainerInstance)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FActorDescContainerInstanceRegistrationDelegate, UActorDescContainerInstance*)"
  },
  {
    "label": "PinActors()",
    "kind": "Method",
    "detail": "Function (FActorDescContainerInstanceRegistrationDelegate OnActorDescContainerInstanceRegistered ; FActorDescContainerInstanceRegistrationDelegate OnActorDescContainerInstanceUnregistered ; void)",
    "insertText": "PinActors(const TArray<FGuid>& ActorGuids)"
  },
  {
    "label": "UnpinActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinActors(const TArray<FGuid>& ActorGuids)"
  },
  {
    "label": "IsActorPinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorPinned(const FGuid& ActorGuid)"
  },
  {
    "label": "LoadLastLoadedRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLastLoadedRegions(const TArray<FBox>& EditorLastLoadedRegions)"
  },
  {
    "label": "LoadLastLoadedRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLastLoadedRegions()"
  },
  {
    "label": "HasLoadedUserCreatedRegions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLoadedUserCreatedRegions()"
  },
  {
    "label": "OnLoaderAdapterStateChanged()",
    "kind": "Method",
    "detail": "Function (FLoaderAdapterStateChangedDelegate LoaderAdapterStateChanged ; void)",
    "insertText": "OnLoaderAdapterStateChanged(IWorldPartitionActorLoaderInterface::ILoaderAdapter* InLoaderAdapter)"
  },
  {
    "label": "IsEnablingStreamingJustified()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnablingStreamingJustified()"
  },
  {
    "label": "GetStreamingStateEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStreamingStateEpoch()"
  },
  {
    "label": "CanInitialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInitialize(UWorld* InWorld)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UWorld* World, const FTransform& InTransform)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize()"
  },
  {
    "label": "SupportsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsStreaming()"
  },
  {
    "label": "IsStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingEnabled()"
  },
  {
    "label": "CanStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStream()"
  },
  {
    "label": "IsServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServer()"
  },
  {
    "label": "IsServerStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServerStreamingEnabled()"
  },
  {
    "label": "IsContentBundleEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsContentBundleEnabled()"
  },
  {
    "label": "UseMakingVisibleTransactionRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMakingVisibleTransactionRequests()"
  },
  {
    "label": "UseMakingInvisibleTransactionRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMakingInvisibleTransactionRequests()"
  },
  {
    "label": "IsMainWorldPartition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMainWorldPartition()"
  },
  {
    "label": "CanAddCellToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddCellToWorld(const IWorldPartitionCell* InCell)"
  },
  {
    "label": "IsStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingCompleted(const TArray<FWorldPartitionStreamingSource>* InStreamingSources)"
  },
  {
    "label": "IsStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, const TArray<FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState)"
  },
  {
    "label": "GetIntersectingCells()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIntersectingCells(const TArray<FWorldPartitionStreamingQuerySource>& InSources, TArray<const IWorldPartitionCell*>& OutCells)"
  },
  {
    "label": "IsExternalStreamingObjectInjected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalStreamingObjectInjected(URuntimeHashExternalStreamingObjectBase* InExternalStreamingObject)"
  },
  {
    "label": "InjectExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InjectExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "RemoveExternalStreamingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveExternalStreamingObject(URuntimeHashExternalStreamingObjectBase* ExternalStreamingObject)"
  },
  {
    "label": "GetStreamingSources()",
    "kind": "Method",
    "detail": "Function (const TArray<FWorldPartitionStreamingSource>&)",
    "insertText": "GetStreamingSources()"
  },
  {
    "label": "DrawRuntimeHash2D()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DrawRuntimeHash2D(FWorldPartitionDraw2DContext& DrawContext)"
  },
  {
    "label": "DrawRuntimeHash3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRuntimeHash3D()"
  },
  {
    "label": "DrawRuntimeCellsDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRuntimeCellsDetails(UCanvas* Canvas, FVector2D& Offset)"
  },
  {
    "label": "OnCellShown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCellShown(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "OnCellHidden()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCellHidden(const UWorldPartitionRuntimeCell* InCell)"
  },
  {
    "label": "GetStreamingPerformance()",
    "kind": "Method",
    "detail": "Function (EWorldPartitionStreamingPerformance)",
    "insertText": "GetStreamingPerformance()"
  },
  {
    "label": "IsStreamingInEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingInEnabled()"
  },
  {
    "label": "DisableStreamingIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableStreamingIn()"
  },
  {
    "label": "EnableStreamingIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableStreamingIn()"
  },
  {
    "label": "GetDataLayerManager()",
    "kind": "Method",
    "detail": "Function (UDataLayerManager*)",
    "insertText": "GetDataLayerManager()"
  },
  {
    "label": "GetResolvingDataLayerManager()",
    "kind": "Method",
    "detail": "Function (UDataLayerManager*)",
    "insertText": "GetResolvingDataLayerManager()"
  },
  {
    "label": "GetExternalDataLayerManager()",
    "kind": "Method",
    "detail": "Function (UExternalDataLayerManager*)",
    "insertText": "GetExternalDataLayerManager()"
  },
  {
    "label": "GetDataLayersLogicOperator()",
    "kind": "Method",
    "detail": "Function (EWorldPartitionDataLayersLogicOperator)",
    "insertText": "GetDataLayersLogicOperator()"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (TArray<FWorldPartitionReference> LoadedSubobjects ; struct FWorldPartitionExternalDirtyActorsTrackerReference { using Type = FWorldPartitionReference ; using OwnerType = UWorldPartition ; FWorldPartitionReference)",
    "insertText": "Store(UWorldPartition* InOwner, AActor* InActor)"
  },
  {
    "label": "FWorldPartitionExternalDirtyActorsTracker()",
    "kind": "Method",
    "detail": "Function (} } ; class FWorldPartitionExternalDirtyActorsTracker : public TExternalDirtyActorsTracker<FWorldPartitionExternalDirtyActorsTrackerReference> { public :)",
    "insertText": "FWorldPartitionExternalDirtyActorsTracker()"
  },
  {
    "label": "FWorldPartitionExternalDirtyActorsTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWorldPartitionExternalDirtyActorsTracker(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "OnRemoveNonDirtyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveNonDirtyActor(const TWeakObjectPtr<AActor> InActor, FWorldPartitionReference& InValue)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float InDeltaTime)"
  },
  {
    "label": "SetNonDirtyTrackingDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNonDirtyTrackingDisabled(bool bInIsNonDirtyTrackingDisabled)"
  },
  {
    "label": "IsNonDirtyTrackingDisabled()",
    "kind": "Method",
    "detail": "Function (bIsNonDirtyTrackingDisabled = bInIsNonDirtyTrackingDisabled ; } bool)",
    "insertText": "IsNonDirtyTrackingDisabled()"
  },
  {
    "label": "FDisableNonDirtyActorTrackingScope()",
    "kind": "Method",
    "detail": "Function (public : TOptional<bool> bOverrideEnableStreamingInEditor ; class FDisableNonDirtyActorTrackingScope ; class FDisableNonDirtyActorTrackingScope { public :)",
    "insertText": "FDisableNonDirtyActorTrackingScope(UWorldPartition* InWorldPartition, bool bInDisableTracking)"
  },
  {
    "label": "FDisableNonDirtyActorTrackingScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDisableNonDirtyActorTrackingScope()"
  },
  {
    "label": "OnWorldMatchStarting()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32 LoadingRangeBugItGo ; int32 EnableSimulationStreamingSource ; int32 WorldExtentToEnableStreaming ; bool DebugDedicatedServerStreaming ; FAutoConsoleVariableRef CVarLoadingRangeBugItGo ; FAutoConsoleVariableRef CVarEnableSimulationStreamingSource ; FAutoConsoleVariableRef CVarWorldExtentToEnableStreaming ; FAutoConsoleVariableRef CVarDebugDedicatedServerStreaming ; # endif int32 StreamingStateEpoch ; int32 GlobalEnableServerStreaming ; bool bGlobalEnableServerStreamingOut ; bool bUseMakingVisibleTransactionRequests ; bool bUseMakingInvisibleTransactionRequests ; FAutoConsoleVariableRef CVarEnableServerStreaming ; FAutoConsoleVariableRef CVarEnableServerStreamingOut ; FAutoConsoleVariableRef CVarUseMakingVisibleTransactionRequests ; FAutoConsoleVariableRef CVarUseMakingInvisibleTransactionRequests ; void)",
    "insertText": "OnWorldMatchStarting()"
  },
  {
    "label": "OnWorldPreBeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPreBeginPlay()"
  },
  {
    "label": "OnStreamingStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamingStateUpdated()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "OnPreChangeStreamingContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreChangeStreamingContent()"
  },
  {
    "label": "GetUpdateStreamingStateEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUpdateStreamingStateEpoch()"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates()"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates()"
  },
  {
    "label": "OnLevelActorDeleted()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnLevelActorDeleted(AActor* Actor)"
  },
  {
    "label": "OnPostBugItGoCalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostBugItGoCalled(const FVector& Loc, const FRotator& Rot)"
  },
  {
    "label": "HashActorDescInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashActorDescInstance(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "UnhashActorDescInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnhashActorDescInstance(FWorldPartitionActorDescInstance* ActorDescInstance)"
  },
  {
    "label": "OnContentBundleRemovedContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentBundleRemovedContent(const FContentBundleEditor* ContentBundle)"
  },
  {
    "label": "GetCookPackageObject()",
    "kind": "Method",
    "detail": "Function (IWorldPartitionCookPackageObject*)",
    "insertText": "GetCookPackageObject(const FWorldPartitionCookPackage& PackageToCook)"
  },
  {
    "label": "HasStreamingContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStreamingContent()"
  },
  {
    "label": "CreateEditorLoaderAdapter()",
    "kind": "Method",
    "detail": "Function (public : template<T,. . . ArgsType> UWorldPartitionEditorLoaderAdapter*)",
    "insertText": "CreateEditorLoaderAdapter(ArgsType&&... Args)"
  },
  {
    "label": "UWorldPartitionEditorLoaderAdapter()",
    "kind": "Method",
    "detail": "Function (UWorldPartitionEditorLoaderAdapter* EditorLoaderAdapter = NewObject<)",
    "insertText": "UWorldPartitionEditorLoaderAdapter(GetTransientPackage())"
  },
  {
    "label": "SetLoaderAdapter()",
    "kind": "Method",
    "detail": "Function (EditorLoaderAdapter ->)",
    "insertText": "SetLoaderAdapter(new T(Forward<ArgsType>(Args)...))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RegisteredEditorLoaderAdapters .)",
    "insertText": "Add(EditorLoaderAdapter)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (EditorLoaderAdapter ->)",
    "insertText": "Release()"
  },
  {
    "label": "GetRegisteredEditorLoaderAdapters()",
    "kind": "Method",
    "detail": "Function (} const TSet<TObjectPtr<UWorldPartitionEditorLoaderAdapter>>&)",
    "insertText": "GetRegisteredEditorLoaderAdapters()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} TSoftObjectPtr<UWorld> WorldAsset ; FName TargetGrid ; TSoftObjectPtr<UWorld> WorldAssetHLOD ; FName TargetGridHLOD ; FGuid Guid ; FTransform Transform ; FBox Bounds ; int32 Priority = 0 ; FString CellInstanceSuffix ; bool bBoundsPlacement = false ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetWorldAsset()",
    "kind": "Method",
    "detail": "Function (} FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetWorldAsset(const TSoftObjectPtr<UWorld>& InWorldAsset)"
  },
  {
    "label": "SetTargetGrid()",
    "kind": "Method",
    "detail": "Function (WorldAsset = InWorldAsset ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetTargetGrid(const FName& InTargetGrid)"
  },
  {
    "label": "SetWorldAssetHLOD()",
    "kind": "Method",
    "detail": "Function (TargetGrid = InTargetGrid ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetWorldAssetHLOD(const TSoftObjectPtr<UWorld>& InWorldAssetHLOD)"
  },
  {
    "label": "SetTargetGridHLOD()",
    "kind": "Method",
    "detail": "Function (WorldAssetHLOD = InWorldAssetHLOD ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetTargetGridHLOD(const FName& InTargetGridHLOD)"
  },
  {
    "label": "SetGuid()",
    "kind": "Method",
    "detail": "Function (TargetGridHLOD = InTargetGridHLOD ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetGuid(const FGuid InGuid)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (Guid = InGuid ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetTransform(const FTransform InTransform)"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (Transform = InTransform ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetBounds(const FBox& InBounds)"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (Bounds = InBounds ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetPriority(const int32& InPriority)"
  },
  {
    "label": "SetCellInstanceSuffix()",
    "kind": "Method",
    "detail": "Function (Priority = InPriority ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetCellInstanceSuffix(const FString& InCellInstanceSuffix)"
  },
  {
    "label": "SetBoundsPlacement()",
    "kind": "Method",
    "detail": "Function (CellInstanceSuffix = InCellInstanceSuffix ; return* this ; } FRegisterWorldAssetStreamingParams&)",
    "insertText": "SetBoundsPlacement(bool bInBoundsPlacement)"
  },
  {
    "label": "SupportsWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (bBoundsPlacement = bInBoundsPlacement ; return* this ; } } ; bool)",
    "insertText": "SupportsWorldAssetStreaming(const FName& InTargetGrid)"
  },
  {
    "label": "RegisterWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "RegisterWorldAssetStreaming(const FRegisterWorldAssetStreamingParams& InParams)"
  },
  {
    "label": "UnregisterWorldAssetStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterWorldAssetStreaming(const FGuid& InWorldAssetStreamingGuid)"
  },
  {
    "label": "GetWorldAssetStreamingCells()",
    "kind": "Method",
    "detail": "Function (TArray<UWorldPartitionRuntimeCell*>)",
    "insertText": "GetWorldAssetStreamingCells(const FGuid& InWorldAssetStreamingGuid)"
  },
  {
    "label": "GetOnScreenMessages()",
    "kind": "Method",
    "detail": "Function (# endif # if ! UE_BUILD_SHIPPING void)",
    "insertText": "GetOnScreenMessages(FCoreDelegates::FSeverityMessageMap& OutMessages)"
  }
]