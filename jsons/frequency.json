[
  {
    "label": "Frequency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Frequency"
  },
  {
    "label": "rtc_units_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc_units_impl"
  },
  {
    "label": "MilliHertz()",
    "kind": "Method",
    "detail": "Function (# ifndef API_UNITS_FREQUENCY_H_ # define API_UNITS_FREQUENCY_H_ # ifdef WEBRTC_UNIT_TEST # include<ostream> # endif # include<cstdlib> # include<limits> # include<string> # include<type_traits> # include \" api / units / time_delta . h \" # include \" rtc_base / units / unit_base . h \" namespace webrtc { class Frequency final : public rtc_units_impl::RelativeUnit<Frequency> { public : template<T> Frequency)",
    "insertText": "MilliHertz(T value)"
  },
  {
    "label": "Hertz()",
    "kind": "Method",
    "detail": "Function (} template<T> Frequency)",
    "insertText": "Hertz(T value)"
  },
  {
    "label": "KiloHertz()",
    "kind": "Method",
    "detail": "Function (} template<T> Frequency)",
    "insertText": "KiloHertz(T value)"
  },
  {
    "label": "Frequency()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Frequency()"
  },
  {
    "label": "hertz()",
    "kind": "Method",
    "detail": "Function (template<T = int64_t> T)",
    "insertText": "hertz()"
  },
  {
    "label": "millihertz()",
    "kind": "Method",
    "detail": "Function (} template<T = int64_t> T)",
    "insertText": "millihertz()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : class rtc_units_impl::UnitBase<Frequency> ; using RelativeUnit::RelativeUnit ; bool one_sided = true ; } ; Frequency)",
    "insertText": "operator(int64_t nominator, const TimeDelta& interval)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (int64_t kKiloPerMicro = 1 0 0 0* 1 0 0 0 0 0 0 ;)",
    "insertText": "RTC_DCHECK_LE(nominator, std::numeric_limits<int64_t>::max() / kKiloPerMicro)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(interval.IsFinite())"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(!interval.IsZero())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TimeDelta)",
    "insertText": "operator(int64_t nominator, const Frequency& frequency)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (int64_t kMegaPerMilli = 1 0 0 0 0 0 0* 1 0 0 0 ;)",
    "insertText": "RTC_DCHECK_LE(nominator, std::numeric_limits<int64_t>::max() / kMegaPerMilli)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(frequency.IsFinite())"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(!frequency.IsZero())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "operator(Frequency frequency, TimeDelta time_delta)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "operator(TimeDelta time_delta, Frequency frequency)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToLogString(Frequency value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifdef WEBRTC_UNIT_TEST std::ostream&)",
    "insertText": "operator(std::ostream& stream, Frequency value)"
  }
]