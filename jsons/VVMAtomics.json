[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "CompilerFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompilerFence()"
  },
  {
    "label": "_ReadWriteBarrier()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "_ReadWriteBarrier()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# else asm)",
    "insertText": "volatile(\"\" :: : \"memory\")"
  },
  {
    "label": "ArmDmb()",
    "kind": "Method",
    "detail": "Function (# endif } # if PLATFORM_CPU_ARM_FAMILY void)",
    "insertText": "ArmDmb()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"dmb ish\" :: : \"memory\")"
  },
  {
    "label": "ArmDmbSt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ArmDmbSt()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"dmb ishst\" :: : \"memory\")"
  },
  {
    "label": "ArmIsb()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ArmIsb()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (asm)",
    "insertText": "volatile(\"isb\" :: : \"memory\")"
  },
  {
    "label": "LoadLoadFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadLoadFence()"
  },
  {
    "label": "LoadStoreFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadStoreFence()"
  },
  {
    "label": "StoreLoadFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StoreLoadFence()"
  },
  {
    "label": "StoreStoreFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StoreStoreFence()"
  },
  {
    "label": "CrossModifyingCodeFence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CrossModifyingCodeFence()"
  },
  {
    "label": "X86Ortop()",
    "kind": "Method",
    "detail": "Function (} # elif PLATFORM_CPU_X86_FAMILY void)",
    "insertText": "X86Ortop()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_64BITS asm)",
    "insertText": "volatile(\"lock; orl $0, (%%rsp)\" :: : \"memory\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# else asm)",
    "insertText": "volatile(\"lock; orl $0, (%%esp)\" :: : \"memory\")"
  },
  {
    "label": "X86Cpuid()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "X86Cpuid()"
  },
  {
    "label": "__cpuid()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS int info [ 4 ] ;)",
    "insertText": "__cpuid(info, 0)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# else intptr_t a = 0,b,c,d ; asm)",
    "insertText": "volatile(\"cpuid\" : \"+a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : : \"memory\")"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_seq_cst)"
  }
]