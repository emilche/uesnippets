[
  {
    "label": "FrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameData"
  },
  {
    "label": "VCMSessionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMSessionInfo"
  },
  {
    "label": "VCMSessionInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_SESSION_INFO_H_ # define MODULES_VIDEO_CODING_SESSION_INFO_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<vector> # include \" modules / video_coding / codecs / h264 / include / h264_globals . h \" # include \" modules / video_coding / codecs / vp9 / include / vp9_globals . h \" # include \" modules / video_coding / include / video_coding . h \" # include \" modules / video_coding / packet . h \" namespace webrtc { struct FrameData { int64_t rtt_ms ; float rolling_average_packets_per_frame ; } ; class VCMSessionInfo { public :)",
    "insertText": "VCMSessionInfo()"
  },
  {
    "label": "UpdateDataPointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDataPointers(const uint8_t* old_base_ptr, const uint8_t* new_base_ptr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertPacket(const VCMPacket& packet, uint8_t* frame_buffer, const FrameData& frame_data)"
  },
  {
    "label": "complete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "complete()"
  },
  {
    "label": "MakeDecodable()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MakeDecodable()"
  },
  {
    "label": "SessionLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SessionLength()"
  },
  {
    "label": "NumPackets()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumPackets()"
  },
  {
    "label": "HaveFirstPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveFirstPacket()"
  },
  {
    "label": "HaveLastPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveLastPacket()"
  },
  {
    "label": "FrameType()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoFrameType)",
    "insertText": "FrameType()"
  },
  {
    "label": "HighSequenceNumber()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HighSequenceNumber()"
  },
  {
    "label": "PictureId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PictureId()"
  },
  {
    "label": "TemporalId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TemporalId()"
  },
  {
    "label": "LayerSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LayerSync()"
  },
  {
    "label": "Tl0PicId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Tl0PicId()"
  },
  {
    "label": "GetNaluInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<NaluInfo>)",
    "insertText": "GetNaluInfos()"
  },
  {
    "label": "SetGofInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGofInfo(const GofInfoVP9& gof_info, size_t idx)"
  },
  {
    "label": "InformOfEmptyPacket()",
    "kind": "Method",
    "detail": "Function (private : enum { kMaxVP8Partitions = 9 } ; typedef std::list<VCMPacket> PacketList ; typedef PacketList::iterator PacketIterator ; typedef PacketList::const_iterator PacketIteratorConst ; typedef PacketList::reverse_iterator ReversePacketIterator ; void)",
    "insertText": "InformOfEmptyPacket(uint16_t seq_num)"
  },
  {
    "label": "FindNextPartitionBeginning()",
    "kind": "Method",
    "detail": "Function (PacketIterator)",
    "insertText": "FindNextPartitionBeginning(PacketIterator it)"
  },
  {
    "label": "FindPartitionEnd()",
    "kind": "Method",
    "detail": "Function (PacketIterator)",
    "insertText": "FindPartitionEnd(PacketIterator it)"
  },
  {
    "label": "InSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InSequence(const PacketIterator& it, const PacketIterator& prev_it)"
  },
  {
    "label": "InsertBuffer()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "InsertBuffer(uint8_t* frame_buffer, PacketIterator packetIterator)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Insert(const uint8_t* buffer, size_t length, bool insert_start_code, uint8_t* frame_buffer)"
  },
  {
    "label": "ShiftSubsequentPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShiftSubsequentPackets(PacketIterator it, int steps_to_shift)"
  },
  {
    "label": "FindNaluEnd()",
    "kind": "Method",
    "detail": "Function (PacketIterator)",
    "insertText": "FindNaluEnd(PacketIterator packet_iter)"
  },
  {
    "label": "DeletePacketData()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DeletePacketData(PacketIterator start, PacketIterator end)"
  },
  {
    "label": "UpdateCompleteSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCompleteSession()"
  }
]