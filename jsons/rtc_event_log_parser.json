[
  {
    "label": "PacketDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PacketDirection"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LoggedPacketInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedPacketInfo"
  },
  {
    "label": "InferredRouteChangeEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InferredRouteChangeEvent"
  },
  {
    "label": "LoggedIceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedIceEvent"
  },
  {
    "label": "DereferencingVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DereferencingVector"
  },
  {
    "label": "DereferencingIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DereferencingIterator"
  },
  {
    "label": "ParsedRtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParsedRtcEventLog"
  },
  {
    "label": "LoggedRtpStreamIncoming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedRtpStreamIncoming"
  },
  {
    "label": "LoggedRtpStreamOutgoing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedRtpStreamOutgoing"
  },
  {
    "label": "LoggedRtpStreamView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedRtpStreamView"
  },
  {
    "label": "LogSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogSegment"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stream"
  },
  {
    "label": "MatchedSendArrivalTimes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatchedSendArrivalTimes"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_PARSER_H_ # define LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_PARSER_H_ # include<iterator> # include<limits> # include<map> # include<set> # include<string> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" call / video_receive_stream . h \" # include \" call / video_send_stream . h \" # include \" logging / rtc_event_log / events / logged_rtp_rtcp . h \" # include \" logging / rtc_event_log / events / rtc_event_alr_state . h \" # include \" logging / rtc_event_log / events / rtc_event_audio_network_adaptation . h \" # include \" logging / rtc_event_log / events / rtc_event_audio_playout . h \" # include \" logging / rtc_event_log / events / rtc_event_audio_receive_stream_config . h \" # include \" logging / rtc_event_log / events / rtc_event_audio_send_stream_config . h \" # include \" logging / rtc_event_log / events / rtc_event_begin_log . h \" # include \" logging / rtc_event_log / events / rtc_event_bwe_update_delay_based . h \" # include \" logging / rtc_event_log / events / rtc_event_bwe_update_loss_based . h \" # include \" logging / rtc_event_log / events / rtc_event_dtls_transport_state . h \" # include \" logging / rtc_event_log / events / rtc_event_dtls_writable_state . h \" # include \" logging / rtc_event_log / events / rtc_event_end_log . h \" # include \" logging / rtc_event_log / events / rtc_event_frame_decoded . h \" # include \" logging / rtc_event_log / events / rtc_event_generic_ack_received . h \" # include \" logging / rtc_event_log / events / rtc_event_generic_packet_received . h \" # include \" logging / rtc_event_log / events / rtc_event_generic_packet_sent . h \" # include \" logging / rtc_event_log / events / rtc_event_ice_candidate_pair . h \" # include \" logging / rtc_event_log / events / rtc_event_ice_candidate_pair_config . h \" # include \" logging / rtc_event_log / events / rtc_event_probe_cluster_created . h \" # include \" logging / rtc_event_log / events / rtc_event_probe_result_failure . h \" # include \" logging / rtc_event_log / events / rtc_event_probe_result_success . h \" # include \" logging / rtc_event_log / events / rtc_event_remote_estimate . h \" # include \" logging / rtc_event_log / events / rtc_event_route_change . h \" # include \" logging / rtc_event_log / events / rtc_event_rtcp_packet_incoming . h \" # include \" logging / rtc_event_log / events / rtc_event_rtcp_packet_outgoing . h \" # include \" logging / rtc_event_log / events / rtc_event_rtp_packet_incoming . h \" # include \" logging / rtc_event_log / events / rtc_event_rtp_packet_outgoing . h \" # include \" logging / rtc_event_log / events / rtc_event_video_receive_stream_config . h \" # include \" logging / rtc_event_log / events / rtc_event_video_send_stream_config . h \" # include \" modules / rtp_rtcp / include / rtp_header_extension_map . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / common_header . h \" # include \" rtc_base / ignore_wundef . h \")",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #ifdef WEBRTC_ANDROID_PLATFORM_BUILD #include \"external/webrtc/webrtc/logging/rtc_event_log/rtc_event_log.pb.h\" #include \"external/webrtc/webrtc/logging/rtc_event_log/rtc_event_log2.pb.h\" #else #include \"logging/rtc_event_log/rtc_event_log.pb.h\" #include \"logging/rtc_event_log/rtc_event_log2.pb.h\" #endif RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "LoggedPacketInfo()",
    "kind": "Method",
    "detail": "Function (enum PacketDirection { kIncomingPacket = 0,kOutgoingPacket } ; enum class LoggedMediaType : uint8_t { kUnknown,kAudio,kVideo } ; struct LoggedPacketInfo {)",
    "insertText": "LoggedPacketInfo(const LoggedRtpPacket& rtp, LoggedMediaType media_type, bool rtx, Timestamp capture_time)"
  },
  {
    "label": "LoggedPacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedPacketInfo(const LoggedPacketInfo&)"
  },
  {
    "label": "LoggedPacketInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LoggedPacketInfo()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (} uint32_t ssrc ; uint16_t stream_seq_no ; uint16_t size ; uint16_t payload_size ; uint16_t padding_size ; uint16_t overhead = 0 ; uint8_t payload_type ; LoggedMediaType media_type = LoggedMediaType::kUnknown ; bool rtx = false ; bool marker_bit = false ; bool has_transport_seq_no = false ; bool last_in_feedback = false ; uint16_t transport_seq_no = 0 ; Timestamp capture_time ; Timestamp log_packet_time ; Timestamp reported_send_time ; Timestamp reported_recv_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "DereferencingIterator()",
    "kind": "Method",
    "detail": "Function (uint16_t send_overhead ; uint16_t return_overhead ; } ; enum class LoggedIceEventType { kAdded,kUpdated,kDestroyed,kSelected,kCheckSent,kCheckReceived,kCheckResponseSent,kCheckResponseReceived,} ; struct LoggedIceEvent { uint32_t candidate_pair_id ; Timestamp log_time ; LoggedIceEventType event_type ; } ; template<T> class DereferencingVector { public : template<bool IsConst> class DereferencingIterator { public : using difference_type = std::ptrdiff_t ; using value_type = T ; using pointer = std::conditional_t<IsConst,const T*,T*> ; using reference = std::conditional_t<IsConst,const T&,T&> ; using iterator_category = std::bidirectional_iterator_tag ; using representation = std::conditional_t<IsConst,const T* const*,T**> ;)",
    "insertText": "DereferencingIterator(representation ptr) : ptr_(ptr)"
  },
  {
    "label": "DereferencingIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DereferencingIterator(const DereferencingIterator& other) : ptr_(other.ptr_)"
  },
  {
    "label": "DereferencingIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DereferencingIterator(const DereferencingIterator&& other) : ptr_(other.ptr_)"
  },
  {
    "label": "DereferencingIterator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DereferencingIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DereferencingIterator&)",
    "insertText": "operator(const DereferencingIterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ptr_ = other . ptr_ ; return* this ; } DereferencingIterator&)",
    "insertText": "operator(const DereferencingIterator&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + ptr_ ; return* this ; } DereferencingIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - ptr_ ; return* this ; } DereferencingIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "iter_copy()",
    "kind": "Method",
    "detail": "Function (DereferencingIterator)",
    "insertText": "iter_copy(ptr_)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator(size_t i)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(i, elems_.size())"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(elem != nullptr)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (elems_ .)",
    "insertText": "push_back(elem)"
  },
  {
    "label": "GetRuntimeDetectorState()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<T*> elems_ ; } ; BandwidthUsage)",
    "insertText": "GetRuntimeDetectorState(rtclog2::DelayBasedBweUpdates::DetectorState detector_state)"
  },
  {
    "label": "GetRuntimeProbeFailureReason()",
    "kind": "Method",
    "detail": "Function (ProbeFailureReason)",
    "insertText": "GetRuntimeProbeFailureReason(rtclog2::BweProbeResultFailure::FailureReason failure)"
  },
  {
    "label": "GetRuntimeDtlsTransportState()",
    "kind": "Method",
    "detail": "Function (DtlsTransportState)",
    "insertText": "GetRuntimeDtlsTransportState(rtclog2::DtlsTransportStateEvent::DtlsTransportState state)"
  },
  {
    "label": "GetRuntimeIceCandidatePairConfigType()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairConfigType)",
    "insertText": "GetRuntimeIceCandidatePairConfigType(rtclog2::IceCandidatePairConfig::IceCandidatePairConfigType type)"
  },
  {
    "label": "GetRuntimeIceCandidateType()",
    "kind": "Method",
    "detail": "Function (IceCandidateType)",
    "insertText": "GetRuntimeIceCandidateType(rtclog2::IceCandidatePairConfig::IceCandidateType type)"
  },
  {
    "label": "GetRuntimeIceCandidatePairProtocol()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairProtocol)",
    "insertText": "GetRuntimeIceCandidatePairProtocol(rtclog2::IceCandidatePairConfig::Protocol protocol)"
  },
  {
    "label": "GetRuntimeIceCandidatePairAddressFamily()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairAddressFamily)",
    "insertText": "GetRuntimeIceCandidatePairAddressFamily(rtclog2::IceCandidatePairConfig::AddressFamily address_family)"
  },
  {
    "label": "GetRuntimeIceCandidateNetworkType()",
    "kind": "Method",
    "detail": "Function (IceCandidateNetworkType)",
    "insertText": "GetRuntimeIceCandidateNetworkType(rtclog2::IceCandidatePairConfig::NetworkType network_type)"
  },
  {
    "label": "GetRuntimeIceCandidatePairEventType()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairEventType)",
    "insertText": "GetRuntimeIceCandidatePairEventType(rtclog2::IceCandidatePairEvent::IceCandidatePairEventType type)"
  },
  {
    "label": "GetRuntimeRtpHeaderExtensionConfig()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpExtension>)",
    "insertText": "GetRuntimeRtpHeaderExtensionConfig(const rtclog2::RtpHeaderExtensionConfig& proto_header_extensions)"
  },
  {
    "label": "LoggedRtpStreamIncoming()",
    "kind": "Method",
    "detail": "Function (class ParsedRtcEventLog { public : enum class MediaType { ANY,AUDIO,VIDEO,DATA } ; enum class UnconfiguredHeaderExtensions { kDontParse,kAttemptWebrtcDefaultConfig } ; using ParseStatus = RtcEventLogParseStatus ; template<T> using ParseStatusOr = RtcEventLogParseStatusOr<T> ; struct LoggedRtpStreamIncoming {)",
    "insertText": "LoggedRtpStreamIncoming()"
  },
  {
    "label": "LoggedRtpStreamIncoming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedRtpStreamIncoming(const LoggedRtpStreamIncoming&)"
  },
  {
    "label": "LoggedRtpStreamOutgoing()",
    "kind": "Method",
    "detail": "Function (uint32_t ssrc ; std::vector<LoggedRtpPacketIncoming> incoming_packets ; } ; struct LoggedRtpStreamOutgoing {)",
    "insertText": "LoggedRtpStreamOutgoing()"
  },
  {
    "label": "LoggedRtpStreamOutgoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedRtpStreamOutgoing(const LoggedRtpStreamOutgoing&)"
  },
  {
    "label": "LoggedRtpStreamView()",
    "kind": "Method",
    "detail": "Function (uint32_t ssrc ; std::vector<LoggedRtpPacketOutgoing> outgoing_packets ; } ; struct LoggedRtpStreamView {)",
    "insertText": "LoggedRtpStreamView(uint32_t ssrc, const std::vector<LoggedRtpPacketIncoming>& packets)"
  },
  {
    "label": "LoggedRtpStreamView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedRtpStreamView(uint32_t ssrc, const std::vector<LoggedRtpPacketOutgoing>& packets)"
  },
  {
    "label": "LoggedRtpStreamView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedRtpStreamView(const LoggedRtpStreamView&)"
  },
  {
    "label": "LogSegment()",
    "kind": "Method",
    "detail": "Function (uint32_t ssrc ; DereferencingVector<const LoggedRtpPacket> packet_view ; } ; class LogSegment { public :)",
    "insertText": "LogSegment(int64_t start_time_us, int64_t stop_time_us) : start_time_us_(start_time_us), stop_time_us_(stop_time_us)"
  },
  {
    "label": "start_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "start_time_ms()"
  },
  {
    "label": "ParsedRtcEventLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParsedRtcEventLog(UnconfiguredHeaderExtensions parse_unconfigured_header_extensions = UnconfiguredHeaderExtensions::kDontParse, bool allow_incomplete_log = false)"
  },
  {
    "label": "ParsedRtcEventLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ParsedRtcEventLog()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ParseFile()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "ParseFile(absl::string_view file_name)"
  },
  {
    "label": "ParseString()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "ParseString(absl::string_view s)"
  },
  {
    "label": "ParseStream()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "ParseStream(absl::string_view s)"
  },
  {
    "label": "GetMediaType()",
    "kind": "Method",
    "detail": "Function (MediaType)",
    "insertText": "GetMediaType(uint32_t ssrc, PacketDirection direction)"
  },
  {
    "label": "incoming_rtx_ssrcs()",
    "kind": "Method",
    "detail": "Function (const std::set<uint32_t>&)",
    "insertText": "incoming_rtx_ssrcs()"
  },
  {
    "label": "GetIncomingPacketInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<LoggedPacketInfo>)",
    "insertText": "GetIncomingPacketInfos()"
  },
  {
    "label": "GetOutgoingPacketInfos()",
    "kind": "Method",
    "detail": "Function (} std::vector<LoggedPacketInfo>)",
    "insertText": "GetOutgoingPacketInfos()"
  },
  {
    "label": "GetIceCandidates()",
    "kind": "Method",
    "detail": "Function (} std::vector<LoggedIceCandidatePairConfig>)",
    "insertText": "GetIceCandidates()"
  },
  {
    "label": "GetIceEvents()",
    "kind": "Method",
    "detail": "Function (std::vector<LoggedIceEvent>)",
    "insertText": "GetIceEvents()"
  },
  {
    "label": "GetRouteChanges()",
    "kind": "Method",
    "detail": "Function (std::vector<InferredRouteChangeEvent>)",
    "insertText": "GetRouteChanges()"
  },
  {
    "label": "ParseStreamInternal()",
    "kind": "Method",
    "detail": "Function (private : ABSL_MUST_USE_RESULT ParseStatus)",
    "insertText": "ParseStreamInternal(absl::string_view s)"
  },
  {
    "label": "ParseStreamInternalV3()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT ParseStatus)",
    "insertText": "ParseStreamInternalV3(absl::string_view s)"
  },
  {
    "label": "StoreParsedLegacyEvent()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT ParseStatus)",
    "insertText": "StoreParsedLegacyEvent(const rtclog::Event& event)"
  },
  {
    "label": "StoreFirstAndLastTimestamp()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "StoreFirstAndLastTimestamp(const std::vector<T>& v)"
  },
  {
    "label": "GetRtpHeaderExtensionMap()",
    "kind": "Method",
    "detail": "Function (const RtpHeaderExtensionMap*)",
    "insertText": "GetRtpHeaderExtensionMap(bool incoming, uint32_t ssrc)"
  },
  {
    "label": "GetRtcpPacket()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "GetRtcpPacket(const rtclog::Event& event, PacketDirection* incoming, std::vector<uint8_t>* packet)"
  },
  {
    "label": "GetVideoReceiveConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatusOr<rtclog::StreamConfig>)",
    "insertText": "GetVideoReceiveConfig(const rtclog::Event& event)"
  },
  {
    "label": "GetVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatusOr<rtclog::StreamConfig>)",
    "insertText": "GetVideoSendConfig(const rtclog::Event& event)"
  },
  {
    "label": "GetAudioReceiveConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatusOr<rtclog::StreamConfig>)",
    "insertText": "GetAudioReceiveConfig(const rtclog::Event& event)"
  },
  {
    "label": "GetAudioSendConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatusOr<rtclog::StreamConfig>)",
    "insertText": "GetAudioSendConfig(const rtclog::Event& event)"
  },
  {
    "label": "GetAudioPlayout()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedAudioPlayoutEvent>)",
    "insertText": "GetAudioPlayout(const rtclog::Event& event)"
  },
  {
    "label": "GetLossBasedBweUpdate()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedBweLossBasedUpdate>)",
    "insertText": "GetLossBasedBweUpdate(const rtclog::Event& event)"
  },
  {
    "label": "GetDelayBasedBweUpdate()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedBweDelayBasedUpdate>)",
    "insertText": "GetDelayBasedBweUpdate(const rtclog::Event& event)"
  },
  {
    "label": "GetAudioNetworkAdaptation()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedAudioNetworkAdaptationEvent>)",
    "insertText": "GetAudioNetworkAdaptation(const rtclog::Event& event)"
  },
  {
    "label": "GetBweProbeClusterCreated()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedBweProbeClusterCreatedEvent>)",
    "insertText": "GetBweProbeClusterCreated(const rtclog::Event& event)"
  },
  {
    "label": "GetBweProbeFailure()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedBweProbeFailureEvent>)",
    "insertText": "GetBweProbeFailure(const rtclog::Event& event)"
  },
  {
    "label": "GetBweProbeSuccess()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedBweProbeSuccessEvent>)",
    "insertText": "GetBweProbeSuccess(const rtclog::Event& event)"
  },
  {
    "label": "GetAlrState()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedAlrStateEvent>)",
    "insertText": "GetAlrState(const rtclog::Event& event)"
  },
  {
    "label": "GetIceCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedIceCandidatePairConfig>)",
    "insertText": "GetIceCandidatePairConfig(const rtclog::Event& event)"
  },
  {
    "label": "GetIceCandidatePairEvent()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedIceCandidatePairEvent>)",
    "insertText": "GetIceCandidatePairEvent(const rtclog::Event& event)"
  },
  {
    "label": "GetRemoteEstimateEvent()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatusOr<LoggedRemoteEstimateEvent>)",
    "insertText": "GetRemoteEstimateEvent(const rtclog::Event& event)"
  },
  {
    "label": "StoreAlrStateEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreAlrStateEvent(const rtclog2::AlrState& proto)"
  },
  {
    "label": "StoreAudioNetworkAdaptationEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreAudioNetworkAdaptationEvent(const rtclog2::AudioNetworkAdaptations& proto)"
  },
  {
    "label": "StoreAudioPlayoutEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreAudioPlayoutEvent(const rtclog2::AudioPlayoutEvents& proto)"
  },
  {
    "label": "StoreAudioRecvConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreAudioRecvConfig(const rtclog2::AudioRecvStreamConfig& proto)"
  },
  {
    "label": "StoreAudioSendConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreAudioSendConfig(const rtclog2::AudioSendStreamConfig& proto)"
  },
  {
    "label": "StoreBweDelayBasedUpdate()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreBweDelayBasedUpdate(const rtclog2::DelayBasedBweUpdates& proto)"
  },
  {
    "label": "StoreBweLossBasedUpdate()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreBweLossBasedUpdate(const rtclog2::LossBasedBweUpdates& proto)"
  },
  {
    "label": "StoreBweProbeClusterCreated()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreBweProbeClusterCreated(const rtclog2::BweProbeCluster& proto)"
  },
  {
    "label": "StoreBweProbeFailureEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreBweProbeFailureEvent(const rtclog2::BweProbeResultFailure& proto)"
  },
  {
    "label": "StoreBweProbeSuccessEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreBweProbeSuccessEvent(const rtclog2::BweProbeResultSuccess& proto)"
  },
  {
    "label": "StoreDtlsTransportState()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreDtlsTransportState(const rtclog2::DtlsTransportStateEvent& proto)"
  },
  {
    "label": "StoreDtlsWritableState()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreDtlsWritableState(const rtclog2::DtlsWritableState& proto)"
  },
  {
    "label": "StoreFrameDecodedEvents()",
    "kind": "Method",
    "detail": "Function (ParsedRtcEventLog::ParseStatus)",
    "insertText": "StoreFrameDecodedEvents(const rtclog2::FrameDecodedEvents& proto)"
  },
  {
    "label": "StoreGenericAckReceivedEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreGenericAckReceivedEvent(const rtclog2::GenericAckReceived& proto)"
  },
  {
    "label": "StoreGenericPacketReceivedEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreGenericPacketReceivedEvent(const rtclog2::GenericPacketReceived& proto)"
  },
  {
    "label": "StoreGenericPacketSentEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreGenericPacketSentEvent(const rtclog2::GenericPacketSent& proto)"
  },
  {
    "label": "StoreIceCandidateEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreIceCandidateEvent(const rtclog2::IceCandidatePairEvent& proto)"
  },
  {
    "label": "StoreIceCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreIceCandidatePairConfig(const rtclog2::IceCandidatePairConfig& proto)"
  },
  {
    "label": "StoreIncomingRtcpPackets()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreIncomingRtcpPackets(const rtclog2::IncomingRtcpPackets& proto)"
  },
  {
    "label": "StoreIncomingRtpPackets()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreIncomingRtpPackets(const rtclog2::IncomingRtpPackets& proto)"
  },
  {
    "label": "StoreOutgoingRtcpPackets()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreOutgoingRtcpPackets(const rtclog2::OutgoingRtcpPackets& proto)"
  },
  {
    "label": "StoreOutgoingRtpPackets()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreOutgoingRtpPackets(const rtclog2::OutgoingRtpPackets& proto)"
  },
  {
    "label": "StoreParsedNewFormatEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreParsedNewFormatEvent(const rtclog2::EventStream& event)"
  },
  {
    "label": "StoreRouteChangeEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreRouteChangeEvent(const rtclog2::RouteChange& proto)"
  },
  {
    "label": "StoreRemoteEstimateEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreRemoteEstimateEvent(const rtclog2::RemoteEstimates& proto)"
  },
  {
    "label": "StoreStartEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreStartEvent(const rtclog2::BeginLogEvent& proto)"
  },
  {
    "label": "StoreStopEvent()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreStopEvent(const rtclog2::EndLogEvent& proto)"
  },
  {
    "label": "StoreVideoRecvConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreVideoRecvConfig(const rtclog2::VideoRecvStreamConfig& proto)"
  },
  {
    "label": "StoreVideoSendConfig()",
    "kind": "Method",
    "detail": "Function (ParseStatus)",
    "insertText": "StoreVideoSendConfig(const rtclog2::VideoSendStreamConfig& proto)"
  },
  {
    "label": "Stream()",
    "kind": "Method",
    "detail": "Function (struct Stream {)",
    "insertText": "Stream(uint32_t ssrc, MediaType media_type, PacketDirection direction, webrtc::RtpHeaderExtensionMap map) : ssrc(ssrc), media_type(media_type), direction(direction), rtp_extensions_map(map)"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (} uint32_t ssrc ; MediaType media_type ; PacketDirection direction ; webrtc::RtpHeaderExtensionMap rtp_extensions_map ; } ; const UnconfiguredHeaderExtensions parse_unconfigured_header_extensions_ ; const bool allow_incomplete_logs_ ; RtpHeaderExtensionMap default_extension_map_ ; std::set<uint32_t> incoming_rtx_ssrcs_ ; std::set<uint32_t> incoming_video_ssrcs_ ; std::set<uint32_t> incoming_audio_ssrcs_ ; std::set<uint32_t> outgoing_rtx_ssrcs_ ; std::set<uint32_t> outgoing_video_ssrcs_ ; std::set<uint32_t> outgoing_audio_ssrcs_ ; std::map<uint32_t,std::vector<LoggedRtpPacketIncoming>> incoming_rtp_packets_map_ ; std::map<uint32_t,std::vector<LoggedRtpPacketOutgoing>> outgoing_rtp_packets_map_ ; std::vector<LoggedRtpStreamIncoming> incoming_rtp_packets_by_ssrc_ ; std::vector<LoggedRtpStreamOutgoing> outgoing_rtp_packets_by_ssrc_ ; std::vector<LoggedRtpStreamView> incoming_rtp_packet_views_by_ssrc_ ; std::vector<LoggedRtpStreamView> outgoing_rtp_packet_views_by_ssrc_ ; std::vector<LoggedRtcpPacketIncoming> incoming_rtcp_packets_ ; std::vector<LoggedRtcpPacketOutgoing> outgoing_rtcp_packets_ ; std::vector<LoggedRtcpPacketReceiverReport> incoming_rr_ ; std::vector<LoggedRtcpPacketReceiverReport> outgoing_rr_ ; std::vector<LoggedRtcpPacketSenderReport> incoming_sr_ ; std::vector<LoggedRtcpPacketSenderReport> outgoing_sr_ ; std::vector<LoggedRtcpPacketExtendedReports> incoming_xr_ ; std::vector<LoggedRtcpPacketExtendedReports> outgoing_xr_ ; std::vector<LoggedRtcpPacketNack> incoming_nack_ ; std::vector<LoggedRtcpPacketNack> outgoing_nack_ ; std::vector<LoggedRtcpPacketRemb> incoming_remb_ ; std::vector<LoggedRtcpPacketRemb> outgoing_remb_ ; std::vector<LoggedRtcpPacketFir> incoming_fir_ ; std::vector<LoggedRtcpPacketFir> outgoing_fir_ ; std::vector<LoggedRtcpPacketPli> incoming_pli_ ; std::vector<LoggedRtcpPacketPli> outgoing_pli_ ; std::vector<LoggedRtcpPacketBye> incoming_bye_ ; std::vector<LoggedRtcpPacketBye> outgoing_bye_ ; std::vector<LoggedRtcpPacketTransportFeedback> incoming_transport_feedback_ ; std::vector<LoggedRtcpPacketTransportFeedback> outgoing_transport_feedback_ ; std::vector<LoggedRtcpPacketLossNotification> incoming_loss_notification_ ; std::vector<LoggedRtcpPacketLossNotification> outgoing_loss_notification_ ; std::vector<LoggedStartEvent> start_log_events_ ; std::vector<LoggedStopEvent> stop_log_events_ ; std::vector<LoggedAlrStateEvent> alr_state_events_ ; std::map<uint32_t,std::vector<LoggedAudioPlayoutEvent>> audio_playout_events_ ; std::vector<LoggedAudioNetworkAdaptationEvent> audio_network_adaptation_events_ ; std::vector<LoggedBweProbeClusterCreatedEvent> bwe_probe_cluster_created_events_ ; std::vector<LoggedBweProbeFailureEvent> bwe_probe_failure_events_ ; std::vector<LoggedBweProbeSuccessEvent> bwe_probe_success_events_ ; std::vector<LoggedBweDelayBasedUpdate> bwe_delay_updates_ ; std::vector<LoggedBweLossBasedUpdate> bwe_loss_updates_ ; std::vector<LoggedDtlsTransportState> dtls_transport_states_ ; std::vector<LoggedDtlsWritableState> dtls_writable_states_ ; std::map<uint32_t,std::vector<LoggedFrameDecoded>> decoded_frames_ ; std::vector<LoggedIceCandidatePairConfig> ice_candidate_pair_configs_ ; std::vector<LoggedIceCandidatePairEvent> ice_candidate_pair_events_ ; std::vector<LoggedAudioRecvConfig> audio_recv_configs_ ; std::vector<LoggedAudioSendConfig> audio_send_configs_ ; std::vector<LoggedVideoRecvConfig> video_recv_configs_ ; std::vector<LoggedVideoSendConfig> video_send_configs_ ; std::vector<LoggedGenericPacketReceived> generic_packets_received_ ; std::vector<LoggedGenericPacketSent> generic_packets_sent_ ; std::vector<LoggedGenericAckReceived> generic_acks_received_ ; std::vector<LoggedRouteChangeEvent> route_change_events_ ; std::vector<LoggedRemoteEstimateEvent> remote_estimate_events_ ; std::vector<uint8_t> last_incoming_rtcp_packet_ ; Timestamp first_timestamp_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "LogSegment()",
    "kind": "Method",
    "detail": "Function (LogSegment first_log_segment_ =)",
    "insertText": "LogSegment(0, std::numeric_limits<int64_t>::max())"
  },
  {
    "label": "MatchedSendArrivalTimes()",
    "kind": "Method",
    "detail": "Function (std::map<uint32_t,webrtc::RtpHeaderExtensionMap> incoming_rtp_extensions_maps_ ; std::map<uint32_t,webrtc::RtpHeaderExtensionMap> outgoing_rtp_extensions_maps_ ; } ; struct MatchedSendArrivalTimes { int64_t kNotReceived = - 1 ;)",
    "insertText": "MatchedSendArrivalTimes(int64_t fb, int64_t tx, int64_t rx, int64_t ps) : feedback_arrival_time_ms(fb), send_time_ms(tx), arrival_time_ms(rx), payload_size(ps)"
  },
  {
    "label": "GetNetworkTrace()",
    "kind": "Method",
    "detail": "Function (} int64_t feedback_arrival_time_ms ; int64_t send_time_ms ; int64_t arrival_time_ms ; int64_t payload_size ; } ; const std::vector<MatchedSendArrivalTimes>)",
    "insertText": "GetNetworkTrace(const ParsedRtcEventLog& parsed_log)"
  }
]