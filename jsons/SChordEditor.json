[
  {
    "label": "FCharacterEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCharacterEvent"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "SChordEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SChordEditor"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Delegates / Delegate . h \" # include \" Framework / Commands / InputChord . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SEditableText . h \" struct FCharacterEvent ; struct FFocusEvent ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; class SChordEditor : public SEditableText { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SChordEditor)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FSimpleDelegate, OnEditBoxLostFocus ) SLATE_EVENT( FSimpleDelegate, OnChordChanged ) SLATE_EVENT( FSimpleDelegate, OnEditingStopped ) SLATE_EVENT( FSimpleDelegate, OnEditingStarted ) SLATE_END_ARGS() public: SChordEditor() : bIsEditing( false ) , bIsTyping( false)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<FUICommandInfo> InputCommand, EMultipleKeyBindingIndex ChordIndex)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "StopEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEditing()"
  },
  {
    "label": "CommitNewChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitNewChord()"
  },
  {
    "label": "RemoveActiveChord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveChord()"
  },
  {
    "label": "IsEditing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditing()"
  },
  {
    "label": "IsActiveChordValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsActiveChordValid()"
  },
  {
    "label": "GetNotificationText()",
    "kind": "Method",
    "detail": "Function (} const FText&)",
    "insertText": "GetNotificationText()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} private : TWeakPtr<SChordEditor> ChordBeingEdited ; FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnChordTyped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChordTyped(const FInputChord& NewChord)"
  },
  {
    "label": "OnChordCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChordCommitted(const FInputChord& NewChord)"
  },
  {
    "label": "OnGetChordInputText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetChordInputText()"
  },
  {
    "label": "OnGetChordInputHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetChordInputHintText()"
  }
]