[
  {
    "label": "SYMS_DwEhPtrCtx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwEhPtrCtx"
  },
  {
    "label": "SYMS_DwCIEUnpacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCIEUnpacked"
  },
  {
    "label": "SYMS_DwCIEUnpackedNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCIEUnpackedNode"
  },
  {
    "label": "SYMS_DwFDEUnpacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwFDEUnpacked"
  },
  {
    "label": "SYMS_DwCFIRecords",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCFIRecords"
  },
  {
    "label": "SYMS_DwCFICFARule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SYMS_DwCFICFARule"
  },
  {
    "label": "SYMS_DwCFICFACell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCFICFACell"
  },
  {
    "label": "SYMS_DwCFIRegisterRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SYMS_DwCFIRegisterRule"
  },
  {
    "label": "SYMS_DwCFICell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCFICell"
  },
  {
    "label": "SYMS_DwCFIRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCFIRow"
  },
  {
    "label": "SYMS_DwCFIMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SYMS_DwCFIMachine"
  },
  {
    "label": "syms_unwind_elf_x64()",
    "kind": "Method",
    "detail": "Function (# ifndef SYMS_UNWIND_ELF_X64_H # define SYMS_UNWIND_ELF_X64_H # include \" syms / core / generated / syms_meta_dwarf_cfi . h \" typedef SYMS_U8 SYMS_DwEhPtrEnc ; enum { SYMS_DwEhPtrEnc_TYPE_MASK = 0 x0F,SYMS_DwEhPtrEnc_PTR = 0 x00,SYMS_DwEhPtrEnc_ULEB128 = 0 x01,SYMS_DwEhPtrEnc_UDATA2 = 0 x02,SYMS_DwEhPtrEnc_UDATA4 = 0 x03,SYMS_DwEhPtrEnc_UDATA8 = 0 x04,SYMS_DwEhPtrEnc_SIGNED = 0 x08,SYMS_DwEhPtrEnc_SLEB128 = 0 x09,SYMS_DwEhPtrEnc_SDATA2 = 0 x0A,SYMS_DwEhPtrEnc_SDATA4 = 0 x0B,SYMS_DwEhPtrEnc_SDATA8 = 0 x0C,} ; enum { SYMS_DwEhPtrEnc_MODIF_MASK = 0 x70,SYMS_DwEhPtrEnc_PCREL = 0 x10,SYMS_DwEhPtrEnc_TEXTREL = 0 x20,SYMS_DwEhPtrEnc_DATAREL = 0 x30,SYMS_DwEhPtrEnc_FUNCREL = 0 x40,SYMS_DwEhPtrEnc_ALIGNED = 0 x50,} ; enum { SYMS_DwEhPtrEnc_INDIRECT = 0 x80,SYMS_DwEhPtrEnc_OMIT = 0 xFF,} ; typedef struct SYMS_DwEhPtrCtx { SYMS_U64 raw_base_vaddr ; SYMS_U64 text_vaddr ; SYMS_U64 data_vaddr ; SYMS_U64 func_vaddr ; } SYMS_DwEhPtrCtx ; typedef struct SYMS_DwCIEUnpacked { SYMS_U8 version ; SYMS_DwEhPtrEnc lsda_encoding ; SYMS_DwEhPtrEnc addr_encoding ; SYMS_B8 has_augmentation_size ; SYMS_U64 augmentation_size ; SYMS_String8 augmentation ; SYMS_U64 code_align_factor ; SYMS_S64 data_align_factor ; SYMS_U64 ret_addr_reg ; SYMS_U64 handler_ip ; SYMS_U64Range cfi_range ; } SYMS_DwCIEUnpacked ; typedef struct SYMS_DwCIEUnpackedNode { struct SYMS_DwCIEUnpackedNode* next ; SYMS_DwCIEUnpacked cie ; SYMS_U64 offset ; } SYMS_DwCIEUnpackedNode ; typedef struct SYMS_DwFDEUnpacked { SYMS_U64Range ip_voff_range ; SYMS_U64 lsda_ip ; SYMS_U64Range cfi_range ; } SYMS_DwFDEUnpacked ; typedef struct SYMS_DwCFIRecords { SYMS_B32 valid ; SYMS_DwCIEUnpacked cie ; SYMS_DwFDEUnpacked fde ; } SYMS_DwCFIRecords ; typedef enum SYMS_DwCFICFARule { SYMS_DwCFICFARule_REGOFF,SYMS_DwCFICFARule_EXPR,} SYMS_DwCFICFARule ; typedef struct SYMS_DwCFICFACell { SYMS_DwCFICFARule rule ; union { struct { SYMS_U64 reg_idx ; SYMS_S64 offset ; } ; SYMS_U64Range expr ; } ; } SYMS_DwCFICFACell ; typedef enum SYMS_DwCFIRegisterRule { SYMS_DwCFIRegisterRule_SAME_VALUE,SYMS_DwCFIRegisterRule_UNDEFINED,SYMS_DwCFIRegisterRule_OFFSET,SYMS_DwCFIRegisterRule_VAL_OFFSET,SYMS_DwCFIRegisterRule_REGISTER,SYMS_DwCFIRegisterRule_EXPRESSION,SYMS_DwCFIRegisterRule_VAL_EXPRESSION,} SYMS_DwCFIRegisterRule ; typedef struct SYMS_DwCFICell { SYMS_DwCFIRegisterRule rule ; union { SYMS_S64 n ; SYMS_U64Range expr ; } ; } SYMS_DwCFICell ; typedef struct SYMS_DwCFIRow { struct SYMS_DwCFIRow* next ; SYMS_DwCFICell* cells ; SYMS_DwCFICFACell cfa_cell ; } SYMS_DwCFIRow ; typedef struct SYMS_DwCFIMachine { SYMS_U64 cells_per_row ; SYMS_DwCIEUnpacked* cie ; SYMS_DwEhPtrCtx* ptr_ctx ; SYMS_DwCFIRow* initial_row ; SYMS_U64 fde_ip ; } SYMS_DwCFIMachine ; typedef SYMS_U8 SYMS_DwCFADecode ; enum { SYMS_DwCFADecode_NOP = 0 x0,SYMS_DwCFADecode_ADDRESS = 0 x9,SYMS_DwCFADecode_ULEB128 = 0 xA,SYMS_DwCFADecode_SLEB128 = 0 xB,} ; typedef SYMS_U16 SYMS_DwCFAControlBits ; enum { SYMS_DwCFAControlBits_DEC1_MASK = 0 x00F,SYMS_DwCFAControlBits_DEC2_MASK = 0 x0F0,SYMS_DwCFAControlBits_IS_REG_0 = 0 x100,SYMS_DwCFAControlBits_IS_REG_1 = 0 x200,SYMS_DwCFAControlBits_IS_REG_2 = 0 x400,SYMS_DwCFAControlBits_NEW_ROW = 0 x800,} ; SYMS_GLOBAL SYMS_DwCFAControlBits syms_unwind_elf__cfa_control_bits_kind1 [ SYMS_DwCFADetail_OPL_KIND1 + 1 ] ; SYMS_GLOBAL SYMS_DwCFAControlBits syms_unwind_elf__cfa_control_bits_kind2 [ SYMS_DwCFADetail_OPL_KIND2 + 1 ] ; # define SYMS_UNWIND_ELF_X64__REG_SLOT_COUNT 1 7 SYMS_UnwindResult)",
    "insertText": "syms_unwind_elf_x64(SYMS_String8 bin_data, SYMS_ElfBinAccel *bin, SYMS_U64 bin_base, SYMS_MemoryView *memview, SYMS_U64 stack_pointer, SYMS_DwRegsX64 *regs_in_out)"
  },
  {
    "label": "syms_unwind_elf_x64__apply_rules()",
    "kind": "Method",
    "detail": "Function (SYMS_UnwindResult)",
    "insertText": "syms_unwind_elf_x64__apply_rules(SYMS_String8 bin_data, SYMS_DwCFIRow *row, SYMS_U64 text_base_vaddr, SYMS_MemoryView *memview, SYMS_U64 stack_pointer, SYMS_DwRegsX64 *regs_in_out)"
  },
  {
    "label": "syms_unwind_elf_x64__init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__init(void)"
  },
  {
    "label": "syms_unwind_elf_x64__parse_pointer()",
    "kind": "Method",
    "detail": "Function (SYMS_U64)",
    "insertText": "syms_unwind_elf_x64__parse_pointer(void *base, SYMS_U64Range range, SYMS_DwEhPtrCtx *ptr_ctx, SYMS_DwEhPtrEnc ptr_enc, SYMS_U64 off, SYMS_U64 *ptr_out)"
  },
  {
    "label": "syms_unwind_elf_x64__eh_frame_parse_cie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__eh_frame_parse_cie(void *base,SYMS_U64Range range,SYMS_DwEhPtrCtx *ptr_ctx, SYMS_U64 off, SYMS_DwCIEUnpacked *cie_out)"
  },
  {
    "label": "syms_unwind_elf_x64__eh_frame_parse_fde()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__eh_frame_parse_fde(void *base,SYMS_U64Range range,SYMS_DwEhPtrCtx *ptr_ctx, SYMS_DwCIEUnpacked *parent_cie, SYMS_U64 off, SYMS_DwFDEUnpacked *fde_out)"
  },
  {
    "label": "syms_unwind_elf_x64__eh_frame_cfi_from_ip__sloppy()",
    "kind": "Method",
    "detail": "Function (SYMS_DwCFIRecords)",
    "insertText": "syms_unwind_elf_x64__eh_frame_cfi_from_ip__sloppy(void *base, SYMS_U64Range range, SYMS_DwEhPtrCtx *ptr_ctx, SYMS_U64 ip_voff)"
  },
  {
    "label": "syms_unwind_elf_x64__eh_frame_hdr_from_ip()",
    "kind": "Method",
    "detail": "Function (SYMS_DwCFIRecords)",
    "insertText": "syms_unwind_elf_x64__eh_frame_hdr_from_ip(void *base, SYMS_U64Range eh_frame_hdr_range, SYMS_U64Range eh_frame_range, SYMS_DwEhPtrCtx *ptr_ctx, SYMS_U64 ip_voff)"
  },
  {
    "label": "syms_unwind_elf_x64__machine_make()",
    "kind": "Method",
    "detail": "Function (SYMS_DwCFIMachine)",
    "insertText": "syms_unwind_elf_x64__machine_make(SYMS_U64 cells_per_row, SYMS_DwCIEUnpacked *cie, SYMS_DwEhPtrCtx *ptr_ctx)"
  },
  {
    "label": "syms_unwind_elf_x64__machine_equip_initial_row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__machine_equip_initial_row(SYMS_DwCFIMachine *machine, SYMS_DwCFIRow *initial_row)"
  },
  {
    "label": "syms_unwind_elf_x64__machine_equip_fde_ip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__machine_equip_fde_ip(SYMS_DwCFIMachine *machine, SYMS_U64 fde_ip)"
  },
  {
    "label": "syms_unwind_elf_x64__row_alloc()",
    "kind": "Method",
    "detail": "Function (SYMS_DwCFIRow*)",
    "insertText": "syms_unwind_elf_x64__row_alloc(SYMS_Arena *arena, SYMS_U64 cells_per_row)"
  },
  {
    "label": "syms_unwind_elf_x64__row_zero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__row_zero(SYMS_DwCFIRow *row, SYMS_U64 cells_per_row)"
  },
  {
    "label": "syms_unwind_elf_x64__row_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "syms_unwind_elf_x64__row_copy(SYMS_DwCFIRow *dst, SYMS_DwCFIRow *src, SYMS_U64 cells_per_row)"
  },
  {
    "label": "syms_unwind_elf_x64__machine_run_to_ip()",
    "kind": "Method",
    "detail": "Function (SYMS_B32)",
    "insertText": "syms_unwind_elf_x64__machine_run_to_ip(void *base, SYMS_U64Range range, SYMS_DwCFIMachine *machine, SYMS_U64 target_ip, SYMS_DwCFIRow *row_out)"
  }
]