[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FIsoTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoTriangulator"
  },
  {
    "label": "FLoopNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopNode"
  },
  {
    "label": "FMeshingTolerances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshingTolerances"
  },
  {
    "label": "FPinchIntersectionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPinchIntersectionContext"
  },
  {
    "label": "FLoopCleaner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopCleaner"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Core / Factory . h \" # include \" Math / SlopeUtils . h \" # include \" Mesh / Meshers / IsoTriangulator / IntersectionSegmentTool . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoNode . h \" # include \" Mesh / Meshers / IsoTriangulator / IsoSegment . h \" # include \" Mesh / Meshers / ParametricMesherConstantes . h \" namespace UE::CADKernel { class FGrid ; class FIsoSegment ; class FIsoTriangulator ; class FLoopNode ; class FMeshingTolerances ; namespace LoopCleanerImpl { typedef TFunction<)",
    "insertText": "double(const FPoint2D&, const FPoint2D&, double)"
  },
  {
    "label": "FLoopNode()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "FLoopNode(FLoopNode*)"
  },
  {
    "label": "FLoopNode()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<const)",
    "insertText": "FLoopNode(const FLoopNode*)"
  },
  {
    "label": "FLoopNode()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<const)",
    "insertText": "FLoopNode(const FIsoSegment*)"
  },
  {
    "label": "FPinchIntersectionContext()",
    "kind": "Method",
    "detail": "Function (typedef TPair<FLoopNode*,FLoopNode*> FLoopSection ; struct FPinchIntersectionContext { const TPair<double,double>& Intersection ; FLoopNode* Nodes [ 2 ] [ 3 ] ; TArray<const FPoint2D*> Points [ 2 ] ;)",
    "insertText": "FPinchIntersectionContext(const TPair<double, double>& InIntersection) : Intersection(InIntersection)"
  },
  {
    "label": "GetNextNodeImpl()",
    "kind": "Method",
    "detail": "Function (} } ; FLoopNode*)",
    "insertText": "GetNextNodeImpl(FLoopNode* Node)"
  },
  {
    "label": "GetPreviousNodeImpl()",
    "kind": "Method",
    "detail": "Function (} FLoopNode*)",
    "insertText": "GetPreviousNodeImpl(FLoopNode* Node)"
  },
  {
    "label": "GetNextConstNodeImpl()",
    "kind": "Method",
    "detail": "Function (} const FLoopNode*)",
    "insertText": "GetNextConstNodeImpl(const FLoopNode* Node)"
  },
  {
    "label": "GetPreviousConstNodeImpl()",
    "kind": "Method",
    "detail": "Function (} const FLoopNode*)",
    "insertText": "GetPreviousConstNodeImpl(const FLoopNode* Node)"
  },
  {
    "label": "GetFirstNode()",
    "kind": "Method",
    "detail": "Function (} const FLoopNode*)",
    "insertText": "GetFirstNode(const FIsoSegment* Segment)"
  },
  {
    "label": "GetSecondNode()",
    "kind": "Method",
    "detail": "Function (} ; const FLoopNode*)",
    "insertText": "GetSecondNode(const FIsoSegment* Segment)"
  },
  {
    "label": "RemoveDeletedNodes()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveDeletedNodes(TArray<FLoopNode*>& NodesOfLoop)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (int32 Index = NodesOfLoop .)",
    "insertText": "IndexOfByPredicate([](FLoopNode* Node) { return Node->IsDelete(); })"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (NodesOfLoop [ NewIndex + + ] = NodesOfLoop [ Index ] ; } } NodesOfLoop .)",
    "insertText": "SetNum(NewIndex)"
  },
  {
    "label": "FLoopCleaner()",
    "kind": "Method",
    "detail": "Function (} } class FLoopCleaner { private : FGrid& Grid ; const FMeshingTolerances& Tolerances ; TArray<FLoopNode>& LoopNodes ; TArray<FIsoSegment*>& LoopSegments ; TFactory<FIsoSegment>& IsoSegmentFactory ; bool bDisplay ; TArray<FLoopNode*> BestStartNodeOfLoops ; int32 LoopIndex ; TArray<FLoopNode*> NodesOfLoop ; int32 NodesOfLoopCount ; int32 StartSegmentIndex ; int32 SegmentCount ; int32 NextLoopFirstSegmentIndex ; bool bLoopOrientation ; TArray<TPair<double,double>> Intersections ; FIntersectionSegmentTool LoopSegmentsIntersectionTool ; LoopCleanerImpl::GetNextNodeMethod GetNext ; LoopCleanerImpl::GetNextNodeMethod GetPrevious ; LoopCleanerImpl::GetSegmentToNodeMethod GetFirst ; LoopCleanerImpl::GetSegmentToNodeMethod GetSecond ; public :)",
    "insertText": "FLoopCleaner(FIsoTriangulator& Triangulator)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Run()"
  },
  {
    "label": "CleanLoops()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CleanLoops()"
  },
  {
    "label": "UncrossLoops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UncrossLoops(bool bAddProcessedLoop)"
  },
  {
    "label": "FindBestLoopExtremity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindBestLoopExtremity()"
  },
  {
    "label": "RemoveLoopPicks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLoopPicks()"
  },
  {
    "label": "RemoveLoopPicks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLoopPicks(TArray<FIsoSegment*>& Loop)"
  },
  {
    "label": "RemovePickRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePickRecursively(FLoopNode* Node0, FLoopNode* Node1)"
  },
  {
    "label": "FindAndRemoveCoincidence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAndRemoveCoincidence(FLoopNode*& StartNode)"
  },
  {
    "label": "CheckAndRemovePick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAndRemovePick(const FPoint2D& PreviousPoint, const FPoint2D& NodeToRemovePoint, const FPoint2D& NextPoint, FLoopNode& NodeToRemove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bRemoveNode = false ;)",
    "insertText": "if(Slope < 0.1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bRemoveNode = true ; } })",
    "insertText": "if(bRemoveNode)"
  },
  {
    "label": "CheckAndRemoveCoincidence()",
    "kind": "Method",
    "detail": "Function (} return false ; } ; bool)",
    "insertText": "CheckAndRemoveCoincidence(const FPoint2D& Point0, const FPoint2D& Point1, FLoopNode& NodeToRemove)"
  },
  {
    "label": "RemoveNodeOfLoop()",
    "kind": "Method",
    "detail": "Function (} return false ; } ; bool)",
    "insertText": "RemoveNodeOfLoop(FLoopNode& NodeToRemove)"
  },
  {
    "label": "FindLoopIntersections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLoopIntersections()"
  },
  {
    "label": "RemoveSelfIntersectionsOfLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSelfIntersectionsOfLoop()"
  },
  {
    "label": "RemoveIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIntersection(TPair<double, double>& Intersection)"
  },
  {
    "label": "RemoveOutgoingLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOutgoingLoop(const TPair<double, double>& Intersection, const TPair<double, double>& NextIntersection)"
  },
  {
    "label": "RemoveIntersectionsOfSubLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIntersectionsOfSubLoop(int32 IntersectionIndex, int32 IntersectionCount)"
  },
  {
    "label": "RemoveOuterNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOuterNode(const TPair<double, double>& Intersection)"
  },
  {
    "label": "SwapNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwapNodes(const TPair<double, double>& Intersection)"
  },
  {
    "label": "RemovePickOrCoincidenceBetween()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePickOrCoincidenceBetween(FLoopNode* StartNode, FLoopNode* StopNode)"
  },
  {
    "label": "TryToSwapSegmentsOrRemoveLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToSwapSegmentsOrRemoveLoop(const TPair<double, double>& Intersection)"
  },
  {
    "label": "SwapSubLoopOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSubLoopOrientation(int32 FirstSegmentIndex, int32 LastSegmentIndex)"
  },
  {
    "label": "RemoveSubLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSubLoop(FLoopNode* StartNode, FLoopNode* EndNode)"
  },
  {
    "label": "MoveIntersectingSectionBehindOppositeSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveIntersectingSectionBehindOppositeSection(LoopCleanerImpl::FLoopSection IntersectingSection, LoopCleanerImpl::FLoopSection OppositeSection)"
  },
  {
    "label": "MoveNodeBehindSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodeBehindSegment(const FIsoSegment& IntersectingSegment, FLoopNode& NodeToMove)"
  },
  {
    "label": "MoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNode(FLoopNode& NodeToMove, FPoint2D& NewPosition)"
  },
  {
    "label": "FixLoopOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixLoopOrientation()"
  },
  {
    "label": "GetLoopOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetLoopOrientation(const FLoopNode* StartNode)"
  },
  {
    "label": "TryToRemoveIntersectionOfTwoConsecutiveIntersectingSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToRemoveIntersectionOfTwoConsecutiveIntersectingSegments(const FIsoSegment& IntersectingSegment, FIsoSegment& Segment)"
  },
  {
    "label": "RemoveIntersectionByMovingOutsideSegmentNodeInside()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIntersectionByMovingOutsideSegmentNodeInside(const FIsoSegment& IntersectingSegment, const FIsoSegment& Segment, bool bIsSameInnerLoop)"
  },
  {
    "label": "OffsetSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetSegment(FIsoSegment& Segment, FSegment2D& Segment2D, FSegment2D& IntersectingSegment2D)"
  },
  {
    "label": "OffsetNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetNode(FLoopNode& Node, FSegment2D& IntersectingSegment2D)"
  },
  {
    "label": "SwapSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSegments(FIsoSegment& Segment0, FIsoSegment& Segment1)"
  },
  {
    "label": "IsAPinch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAPinch(const LoopCleanerImpl::FPinchIntersectionContext& Contex)"
  },
  {
    "label": "DisconnectCoincidentNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisconnectCoincidentNodes(const LoopCleanerImpl::FPinchIntersectionContext& Contex)"
  },
  {
    "label": "DisconnectCrossingSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisconnectCrossingSegments(LoopCleanerImpl::FPinchIntersectionContext& Context)"
  },
  {
    "label": "MovePickBehind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MovePickBehind(const TPair<double, double>& Intersection, bool bKeyIsExtremity)"
  },
  {
    "label": "CheckMainLoopConsistency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckMainLoopConsistency()"
  },
  {
    "label": "GetNodeAt()",
    "kind": "Method",
    "detail": "Function (FLoopNode*)",
    "insertText": "GetNodeAt(int32 Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index - = NodesOfLoopCount ; } FLoopNode* Node = NodesOfLoop [ Index ] ;)",
    "insertText": "if(Node->IsDelete())"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (# ifdef GET_NODE_AT)",
    "insertText": "Wait()"
  },
  {
    "label": "NextSegmentIndex()",
    "kind": "Method",
    "detail": "Function (# endif return nullptr ; } return Node ; } ; int32)",
    "insertText": "NextSegmentIndex(int32 StartIndex)"
  },
  {
    "label": "FitSegmentIndex()",
    "kind": "Method",
    "detail": "Function (+ + StartIndex ; return)",
    "insertText": "FitSegmentIndex(StartIndex)"
  },
  {
    "label": "NextIndex()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "NextIndex(int32 StartIndex)"
  },
  {
    "label": "FitNodeIndex()",
    "kind": "Method",
    "detail": "Function (+ + StartIndex ; return)",
    "insertText": "FitNodeIndex(StartIndex)"
  },
  {
    "label": "FitNodeIndex()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "FitNodeIndex(int32 Index)"
  },
  {
    "label": "FitSegmentIndex()",
    "kind": "Method",
    "detail": "Function (Index - = NodesOfLoopCount ; } return Index ; } ; int32)",
    "insertText": "FitSegmentIndex(int32 Index)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (Index - = SegmentCount ; } return Index ; } ; bool)",
    "insertText": "Fill(LoopCleanerImpl::FPinchIntersectionContext& Context)"
  },
  {
    "label": "GetLoopNodeStartingFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLoopNodeStartingFrom(FLoopNode* StartNode, TArray<FLoopNode*>& Loop)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (FLoopNode* Node = StartNode ; Loop .)",
    "insertText": "Empty(LoopNodes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Loop .)",
    "insertText": "Add(StartNode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Loop .)",
    "insertText": "Add(Node)"
  },
  {
    "label": "UpdateNodesOfLoop()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "UpdateNodesOfLoop()"
  },
  {
    "label": "RemoveDeletedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDeletedNodes(NodesOfLoop)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NodesOfLoopCount = NodesOfLoop .)",
    "insertText": "Num()"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (NextLoopFirstSegmentIndex = LoopSegments .)",
    "insertText": "IndexOfByPredicate([&](FIsoSegment* Segment) { return ((FLoopNode&)Segment->GetFirstNode()).GetLoopIndex() > NewLoopIndex; })"
  },
  {
    "label": "RemoveSegmentOfLoops()",
    "kind": "Method",
    "detail": "Function (} SegmentCount = NextLoopFirstSegmentIndex - StartSegmentIndex ; } void)",
    "insertText": "RemoveSegmentOfLoops(FIsoSegment* Segment)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (LoopSegments .)",
    "insertText": "RemoveSingle(Segment)"
  },
  {
    "label": "DisplayIntersection()",
    "kind": "Method",
    "detail": "Function (NextLoopFirstSegmentIndex - - ; SegmentCount - - ; } # ifdef CADKERNEL_DEBUG void)",
    "insertText": "DisplayIntersection(const TPair<double, double>& Intersection)"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (F3DDebugSession)",
    "insertText": "_(FString::Printf(TEXT(\"Intersection %f %f\"), Intersection.Key, Intersection.Value))"
  },
  {
    "label": "GetNodeAt()",
    "kind": "Method",
    "detail": "Function (FLoopNode* Segment0End =)",
    "insertText": "GetNodeAt(NextIndex((int32)Intersection.Key))"
  },
  {
    "label": "GetNodeAt()",
    "kind": "Method",
    "detail": "Function (FLoopNode* Segment1Start =)",
    "insertText": "GetNodeAt((int32)Intersection.Value)"
  },
  {
    "label": "DisplayIsoSegment()",
    "kind": "Method",
    "detail": "Function (Grid .)",
    "insertText": "DisplayIsoSegment(EGridSpace::UniformScaled, *Segment1Start, *GetNext(Segment1Start), 0, EVisuProperty::RedCurve)"
  },
  {
    "label": "DisplayIsoNode()",
    "kind": "Method",
    "detail": "Function (Grid .)",
    "insertText": "DisplayIsoNode(EGridSpace::UniformScaled, *GetPrevious(Segment0End), 0, EVisuProperty::RedPoint)"
  },
  {
    "label": "DisplayIsoNode()",
    "kind": "Method",
    "detail": "Function (Grid .)",
    "insertText": "DisplayIsoNode(EGridSpace::UniformScaled, *Segment1Start, 0, EVisuProperty::RedPoint)"
  }
]