[
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FIsoSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoSegment"
  },
  {
    "label": "FIsoTriangulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIsoTriangulator"
  },
  {
    "label": "FLoopNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopNode"
  },
  {
    "label": "FMeshingTolerances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshingTolerances"
  },
  {
    "label": "FPinchIntersectionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPinchIntersectionContext"
  },
  {
    "label": "FLoopCleaner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLoopCleaner"
  },
  {
    "label": "FLoopCleaner()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FLoopCleaner(FIsoTriangulator& Triangulator)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Run()"
  },
  {
    "label": "CleanLoops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanLoops()"
  },
  {
    "label": "UncrossLoops()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UncrossLoops(bool bAddProcessedLoop)"
  },
  {
    "label": "FindBestLoopExtremity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindBestLoopExtremity()"
  },
  {
    "label": "RemoveLoopPicks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLoopPicks()"
  },
  {
    "label": "RemoveLoopPicks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLoopPicks(TArray<FIsoSegment*>& Loop)"
  },
  {
    "label": "RemovePickRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePickRecursively(FLoopNode* Node0, FLoopNode* Node1)"
  },
  {
    "label": "FindAndRemoveCoincidence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAndRemoveCoincidence(FLoopNode*& StartNode)"
  },
  {
    "label": "RemoveNodeOfLoop()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveNodeOfLoop(NodeToRemove)"
  },
  {
    "label": "RemoveNodeOfLoop()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RemoveNodeOfLoop(NodeToRemove)"
  },
  {
    "label": "RemoveNodeOfLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNodeOfLoop(FLoopNode& NodeToRemove)"
  },
  {
    "label": "FindLoopIntersections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindLoopIntersections()"
  },
  {
    "label": "RemoveSelfIntersectionsOfLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSelfIntersectionsOfLoop()"
  },
  {
    "label": "RemoveIntersection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIntersection(TPair<double, double>& Intersection)"
  },
  {
    "label": "RemoveOutgoingLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOutgoingLoop(const TPair<double, double>& Intersection, const TPair<double, double>& NextIntersection)"
  },
  {
    "label": "RemoveIntersectionsOfSubLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIntersectionsOfSubLoop(int32 IntersectionIndex, int32 IntersectionCount)"
  },
  {
    "label": "RemoveOuterNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveOuterNode(const TPair<double, double>& Intersection)"
  },
  {
    "label": "SwapNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwapNodes(const TPair<double, double>& Intersection)"
  },
  {
    "label": "RemovePickOrCoincidenceBetween()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePickOrCoincidenceBetween(FLoopNode* StartNode, FLoopNode* StopNode)"
  },
  {
    "label": "TryToSwapSegmentsOrRemoveLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToSwapSegmentsOrRemoveLoop(const TPair<double, double>& Intersection)"
  },
  {
    "label": "SwapSubLoopOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSubLoopOrientation(int32 FirstSegmentIndex, int32 LastSegmentIndex)"
  },
  {
    "label": "RemoveSubLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSubLoop(FLoopNode* StartNode, FLoopNode* EndNode)"
  },
  {
    "label": "MoveIntersectingSectionBehindOppositeSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveIntersectingSectionBehindOppositeSection(LoopCleanerImpl::FLoopSection IntersectingSection, LoopCleanerImpl::FLoopSection OppositeSection)"
  },
  {
    "label": "MoveNodeBehindSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodeBehindSegment(const FIsoSegment& IntersectingSegment, FLoopNode& NodeToMove)"
  },
  {
    "label": "MoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNode(FLoopNode& NodeToMove, FPoint2D& NewPosition)"
  },
  {
    "label": "FixLoopOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixLoopOrientation()"
  },
  {
    "label": "GetLoopOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetLoopOrientation(const FLoopNode* StartNode)"
  },
  {
    "label": "TryToRemoveIntersectionOfTwoConsecutiveIntersectingSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToRemoveIntersectionOfTwoConsecutiveIntersectingSegments(const FIsoSegment& IntersectingSegment, FIsoSegment& Segment)"
  },
  {
    "label": "RemoveIntersectionByMovingOutsideSegmentNodeInside()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIntersectionByMovingOutsideSegmentNodeInside(const FIsoSegment& IntersectingSegment, const FIsoSegment& Segment, bool bIsSameInnerLoop)"
  },
  {
    "label": "TryToRemoveSelfIntersectionByMovingTheClosedOusidePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToRemoveSelfIntersectionByMovingTheClosedOusidePoint(const FIsoSegment& Segment0, const FIsoSegment& Segment1)"
  },
  {
    "label": "TryToRemoveIntersectionByMovingTheClosedOusidePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToRemoveIntersectionByMovingTheClosedOusidePoint(const FIsoSegment& Segment0, const FIsoSegment& Segment1)"
  },
  {
    "label": "OffsetSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetSegment(FIsoSegment& Segment, FSegment2D& Segment2D, FSegment2D& IntersectingSegment2D)"
  },
  {
    "label": "OffsetNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OffsetNode(FLoopNode& Node, FSegment2D& IntersectingSegment2D)"
  },
  {
    "label": "SwapSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSegments(FIsoSegment& Segment0, FIsoSegment& Segment1)"
  },
  {
    "label": "DisconnectCoincidentNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisconnectCoincidentNodes(const LoopCleanerImpl::FPinchIntersectionContext& Contex)"
  },
  {
    "label": "DisconnectCrossingSegments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisconnectCrossingSegments(LoopCleanerImpl::FPinchIntersectionContext& Context)"
  },
  {
    "label": "MovePickBehind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MovePickBehind(const TPair<double, double>& Intersection, bool bKeyIsExtremity)"
  },
  {
    "label": "CheckMainLoopConsistency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckMainLoopConsistency()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (GET_NODE_AT)",
    "insertText": "Wait()"
  },
  {
    "label": "FitSegmentIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FitSegmentIndex(StartIndex)"
  },
  {
    "label": "FitNodeIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FitNodeIndex(StartIndex)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Fill(LoopCleanerImpl::FPinchIntersectionContext& Context)"
  }
]