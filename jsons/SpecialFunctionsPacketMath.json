[
  {
    "label": "plgamma()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPECIALFUNCTIONS_PACKETMATH_H # define EIGEN_SPECIALFUNCTIONS_PACKETMATH_H namespace Eigen { namespace internal { template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "plgamma(const Packet& a)"
  },
  {
    "label": "lgamma()",
    "kind": "Method",
    "detail": "Function (using numext::lgamma ; return)",
    "insertText": "lgamma(a)"
  },
  {
    "label": "pdigamma()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pdigamma(const Packet& a)"
  },
  {
    "label": "digamma()",
    "kind": "Method",
    "detail": "Function (using numext::digamma ; return)",
    "insertText": "digamma(a)"
  },
  {
    "label": "pzeta()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pzeta(const Packet& x, const Packet& q)"
  },
  {
    "label": "zeta()",
    "kind": "Method",
    "detail": "Function (using numext::zeta ; return)",
    "insertText": "zeta(x, q)"
  },
  {
    "label": "ppolygamma()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "ppolygamma(const Packet& n, const Packet& x)"
  },
  {
    "label": "polygamma()",
    "kind": "Method",
    "detail": "Function (using numext::polygamma ; return)",
    "insertText": "polygamma(n, x)"
  },
  {
    "label": "perf()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "perf(const Packet& a)"
  },
  {
    "label": "erf()",
    "kind": "Method",
    "detail": "Function (using numext::erf ; return)",
    "insertText": "erf(a)"
  },
  {
    "label": "perfc()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "perfc(const Packet& a)"
  },
  {
    "label": "erfc()",
    "kind": "Method",
    "detail": "Function (using numext::erfc ; return)",
    "insertText": "erfc(a)"
  },
  {
    "label": "pndtri()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS Packet)",
    "insertText": "pndtri(const Packet& a)"
  },
  {
    "label": "ScalarType()",
    "kind": "Method",
    "detail": "Function (typedef unpacket_traits<Packet>::type ScalarType ; using internal::generic_ndtri ; return generic_ndtri<Packet,)",
    "insertText": "ScalarType(a)"
  },
  {
    "label": "pigamma()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pigamma(const Packet& a, const Packet& x)"
  },
  {
    "label": "igamma()",
    "kind": "Method",
    "detail": "Function (using numext::igamma ; return)",
    "insertText": "igamma(a, x)"
  },
  {
    "label": "pigamma_der_a()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pigamma_der_a(const Packet& a, const Packet& x)"
  },
  {
    "label": "igamma_der_a()",
    "kind": "Method",
    "detail": "Function (using numext::igamma_der_a ; return)",
    "insertText": "igamma_der_a(a, x)"
  },
  {
    "label": "pgamma_sample_der_alpha()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pgamma_sample_der_alpha(const Packet& alpha, const Packet& sample)"
  },
  {
    "label": "gamma_sample_der_alpha()",
    "kind": "Method",
    "detail": "Function (using numext::gamma_sample_der_alpha ; return)",
    "insertText": "gamma_sample_der_alpha(alpha, sample)"
  },
  {
    "label": "pigammac()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pigammac(const Packet& a, const Packet& x)"
  },
  {
    "label": "igammac()",
    "kind": "Method",
    "detail": "Function (using numext::igammac ; return)",
    "insertText": "igammac(a, x)"
  },
  {
    "label": "pbetainc()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "pbetainc(const Packet& a, const Packet& b,const Packet& x)"
  },
  {
    "label": "betainc()",
    "kind": "Method",
    "detail": "Function (using numext::betainc ; return)",
    "insertText": "betainc(a, b, x)"
  }
]