[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UStreamableRenderAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableRenderAsset"
  },
  {
    "label": "FStreamableTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamableTextureResource"
  },
  {
    "label": "FTexture2DMipMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTexture2DMipMap"
  },
  {
    "label": "FTextureMipInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureMipInfo"
  },
  {
    "label": "FTextureUpdateSyncOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureUpdateSyncOptions"
  },
  {
    "label": "FTextureUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureUpdateContext"
  },
  {
    "label": "FTextureMipDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureMipDataProvider"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" PixelFormat . h \" # include \" RHIDefinitions . h \" # include \" RHIDefinitions . h \" # include \" Streaming / StreamableRenderResourceState . h \" class UTexture ; class UStreamableRenderAsset ; class FStreamableTextureResource ; struct FTexture2DMipMap ; struct FTextureMipInfo { void* DestData = nullptr ; uint64 DataSize = 0 ; EPixelFormat Format = PF_Unknown ; uint32 SizeX = 0 ; uint32 SizeY = 0 ; uint32 SizeZ = 0 ; uint32 ArraySize = 0 ; uint32 RowPitch = 0 ; uint32 DepthPitch = 0 ; ECubeFace CubeFace = CubeFace_MAX ; } ; typedef TArray<FTextureMipInfo,TInlineAllocator<MAX_TEXTURE_MIP_COUNT>> FTextureMipInfoArray ; struct FTextureUpdateSyncOptions { typedef TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FTextureUpdateContext()",
    "kind": "Method",
    "detail": "Function (bool* bSnooze = nullptr ; FThreadSafeCounter* Counter = nullptr ; FCallback RescheduleCallback ; } ; struct FTextureUpdateContext { typedef int32 EThreadType ;)",
    "insertText": "FTextureUpdateContext(const UTexture* InTexture, EThreadType InCurrentThread)"
  },
  {
    "label": "FTextureUpdateContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextureUpdateContext(const UStreamableRenderAsset* InTexture, EThreadType InCurrentThread)"
  },
  {
    "label": "GetCurrentThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetCurrentThread()"
  },
  {
    "label": "FTextureMipDataProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextureMipDataProvider()"
  },
  {
    "label": "GetNextTickState()",
    "kind": "Method",
    "detail": "Function (} ETickState)",
    "insertText": "GetNextTickState()"
  },
  {
    "label": "GetMips()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMips(const FTextureUpdateContext& Context, int32 StartingMipIndex, const FTextureMipInfoArray& MipInfos, const FTextureUpdateSyncOptions& SyncOptions)"
  },
  {
    "label": "PollMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollMips(const FTextureUpdateSyncOptions& SyncOptions)"
  },
  {
    "label": "AbortPollMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortPollMips()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanUp(const FTextureUpdateSyncOptions& SyncOptions)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(const FTextureUpdateSyncOptions& SyncOptions)"
  },
  {
    "label": "GetCancelThread()",
    "kind": "Method",
    "detail": "Function (ETickThread)",
    "insertText": "GetCancelThread()"
  },
  {
    "label": "AdvanceTo()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AdvanceTo(ETickState InState, ETickThread InThread)"
  }
]